
Compensation_Coil.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00022ea0  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004588  08023140  08023140  00033140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080276c8  080276c8  000376c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080276d0  080276d0  000376d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080276d4  080276d4  000376d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000004d8  24000000  080276d8  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00007abc  240004d8  08027bb0  000404d8  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24007f94  08027bb0  00047f94  2**0
                  ALLOC
  9 .lwip_sec     000419d0  30000000  08027bb0  00050000  2**2
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  000404d8  2**0
                  CONTENTS, READONLY
 11 .debug_info   00068480  00000000  00000000  00040506  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 0000a6a4  00000000  00000000  000a8986  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002c58  00000000  00000000  000b3030  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 00002ae8  00000000  00000000  000b5c88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0004c20d  00000000  00000000  000b8770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0004754a  00000000  00000000  0010497d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0018d8e6  00000000  00000000  0014bec7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  002d97ad  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000cbf4  00000000  00000000  002d9800  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240004d8 	.word	0x240004d8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08023128 	.word	0x08023128

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240004dc 	.word	0x240004dc
 80002dc:	08023128 	.word	0x08023128

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr

080002f4 <strlen>:
 80002f4:	4603      	mov	r3, r0
 80002f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	d1fb      	bne.n	80002f6 <strlen+0x2>
 80002fe:	1a18      	subs	r0, r3, r0
 8000300:	3801      	subs	r0, #1
 8000302:	4770      	bx	lr
	...

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_drsub>:
 80003b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003b4:	e002      	b.n	80003bc <__adddf3>
 80003b6:	bf00      	nop

080003b8 <__aeabi_dsub>:
 80003b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003bc <__adddf3>:
 80003bc:	b530      	push	{r4, r5, lr}
 80003be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003c6:	ea94 0f05 	teq	r4, r5
 80003ca:	bf08      	it	eq
 80003cc:	ea90 0f02 	teqeq	r0, r2
 80003d0:	bf1f      	itttt	ne
 80003d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e2:	f000 80e2 	beq.w	80005aa <__adddf3+0x1ee>
 80003e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ee:	bfb8      	it	lt
 80003f0:	426d      	neglt	r5, r5
 80003f2:	dd0c      	ble.n	800040e <__adddf3+0x52>
 80003f4:	442c      	add	r4, r5
 80003f6:	ea80 0202 	eor.w	r2, r0, r2
 80003fa:	ea81 0303 	eor.w	r3, r1, r3
 80003fe:	ea82 0000 	eor.w	r0, r2, r0
 8000402:	ea83 0101 	eor.w	r1, r3, r1
 8000406:	ea80 0202 	eor.w	r2, r0, r2
 800040a:	ea81 0303 	eor.w	r3, r1, r3
 800040e:	2d36      	cmp	r5, #54	; 0x36
 8000410:	bf88      	it	hi
 8000412:	bd30      	pophi	{r4, r5, pc}
 8000414:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000418:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800041c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000420:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000424:	d002      	beq.n	800042c <__adddf3+0x70>
 8000426:	4240      	negs	r0, r0
 8000428:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800042c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000430:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000434:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000438:	d002      	beq.n	8000440 <__adddf3+0x84>
 800043a:	4252      	negs	r2, r2
 800043c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000440:	ea94 0f05 	teq	r4, r5
 8000444:	f000 80a7 	beq.w	8000596 <__adddf3+0x1da>
 8000448:	f1a4 0401 	sub.w	r4, r4, #1
 800044c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000450:	db0d      	blt.n	800046e <__adddf3+0xb2>
 8000452:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000456:	fa22 f205 	lsr.w	r2, r2, r5
 800045a:	1880      	adds	r0, r0, r2
 800045c:	f141 0100 	adc.w	r1, r1, #0
 8000460:	fa03 f20e 	lsl.w	r2, r3, lr
 8000464:	1880      	adds	r0, r0, r2
 8000466:	fa43 f305 	asr.w	r3, r3, r5
 800046a:	4159      	adcs	r1, r3
 800046c:	e00e      	b.n	800048c <__adddf3+0xd0>
 800046e:	f1a5 0520 	sub.w	r5, r5, #32
 8000472:	f10e 0e20 	add.w	lr, lr, #32
 8000476:	2a01      	cmp	r2, #1
 8000478:	fa03 fc0e 	lsl.w	ip, r3, lr
 800047c:	bf28      	it	cs
 800047e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000482:	fa43 f305 	asr.w	r3, r3, r5
 8000486:	18c0      	adds	r0, r0, r3
 8000488:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800048c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000490:	d507      	bpl.n	80004a2 <__adddf3+0xe6>
 8000492:	f04f 0e00 	mov.w	lr, #0
 8000496:	f1dc 0c00 	rsbs	ip, ip, #0
 800049a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800049e:	eb6e 0101 	sbc.w	r1, lr, r1
 80004a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80004a6:	d31b      	bcc.n	80004e0 <__adddf3+0x124>
 80004a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004ac:	d30c      	bcc.n	80004c8 <__adddf3+0x10c>
 80004ae:	0849      	lsrs	r1, r1, #1
 80004b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004b8:	f104 0401 	add.w	r4, r4, #1
 80004bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004c4:	f080 809a 	bcs.w	80005fc <__adddf3+0x240>
 80004c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004cc:	bf08      	it	eq
 80004ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004d2:	f150 0000 	adcs.w	r0, r0, #0
 80004d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004da:	ea41 0105 	orr.w	r1, r1, r5
 80004de:	bd30      	pop	{r4, r5, pc}
 80004e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004e4:	4140      	adcs	r0, r0
 80004e6:	eb41 0101 	adc.w	r1, r1, r1
 80004ea:	3c01      	subs	r4, #1
 80004ec:	bf28      	it	cs
 80004ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004f2:	d2e9      	bcs.n	80004c8 <__adddf3+0x10c>
 80004f4:	f091 0f00 	teq	r1, #0
 80004f8:	bf04      	itt	eq
 80004fa:	4601      	moveq	r1, r0
 80004fc:	2000      	moveq	r0, #0
 80004fe:	fab1 f381 	clz	r3, r1
 8000502:	bf08      	it	eq
 8000504:	3320      	addeq	r3, #32
 8000506:	f1a3 030b 	sub.w	r3, r3, #11
 800050a:	f1b3 0220 	subs.w	r2, r3, #32
 800050e:	da0c      	bge.n	800052a <__adddf3+0x16e>
 8000510:	320c      	adds	r2, #12
 8000512:	dd08      	ble.n	8000526 <__adddf3+0x16a>
 8000514:	f102 0c14 	add.w	ip, r2, #20
 8000518:	f1c2 020c 	rsb	r2, r2, #12
 800051c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000520:	fa21 f102 	lsr.w	r1, r1, r2
 8000524:	e00c      	b.n	8000540 <__adddf3+0x184>
 8000526:	f102 0214 	add.w	r2, r2, #20
 800052a:	bfd8      	it	le
 800052c:	f1c2 0c20 	rsble	ip, r2, #32
 8000530:	fa01 f102 	lsl.w	r1, r1, r2
 8000534:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000538:	bfdc      	itt	le
 800053a:	ea41 010c 	orrle.w	r1, r1, ip
 800053e:	4090      	lslle	r0, r2
 8000540:	1ae4      	subs	r4, r4, r3
 8000542:	bfa2      	ittt	ge
 8000544:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000548:	4329      	orrge	r1, r5
 800054a:	bd30      	popge	{r4, r5, pc}
 800054c:	ea6f 0404 	mvn.w	r4, r4
 8000550:	3c1f      	subs	r4, #31
 8000552:	da1c      	bge.n	800058e <__adddf3+0x1d2>
 8000554:	340c      	adds	r4, #12
 8000556:	dc0e      	bgt.n	8000576 <__adddf3+0x1ba>
 8000558:	f104 0414 	add.w	r4, r4, #20
 800055c:	f1c4 0220 	rsb	r2, r4, #32
 8000560:	fa20 f004 	lsr.w	r0, r0, r4
 8000564:	fa01 f302 	lsl.w	r3, r1, r2
 8000568:	ea40 0003 	orr.w	r0, r0, r3
 800056c:	fa21 f304 	lsr.w	r3, r1, r4
 8000570:	ea45 0103 	orr.w	r1, r5, r3
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f1c4 040c 	rsb	r4, r4, #12
 800057a:	f1c4 0220 	rsb	r2, r4, #32
 800057e:	fa20 f002 	lsr.w	r0, r0, r2
 8000582:	fa01 f304 	lsl.w	r3, r1, r4
 8000586:	ea40 0003 	orr.w	r0, r0, r3
 800058a:	4629      	mov	r1, r5
 800058c:	bd30      	pop	{r4, r5, pc}
 800058e:	fa21 f004 	lsr.w	r0, r1, r4
 8000592:	4629      	mov	r1, r5
 8000594:	bd30      	pop	{r4, r5, pc}
 8000596:	f094 0f00 	teq	r4, #0
 800059a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800059e:	bf06      	itte	eq
 80005a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80005a4:	3401      	addeq	r4, #1
 80005a6:	3d01      	subne	r5, #1
 80005a8:	e74e      	b.n	8000448 <__adddf3+0x8c>
 80005aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ae:	bf18      	it	ne
 80005b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005b4:	d029      	beq.n	800060a <__adddf3+0x24e>
 80005b6:	ea94 0f05 	teq	r4, r5
 80005ba:	bf08      	it	eq
 80005bc:	ea90 0f02 	teqeq	r0, r2
 80005c0:	d005      	beq.n	80005ce <__adddf3+0x212>
 80005c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005c6:	bf04      	itt	eq
 80005c8:	4619      	moveq	r1, r3
 80005ca:	4610      	moveq	r0, r2
 80005cc:	bd30      	pop	{r4, r5, pc}
 80005ce:	ea91 0f03 	teq	r1, r3
 80005d2:	bf1e      	ittt	ne
 80005d4:	2100      	movne	r1, #0
 80005d6:	2000      	movne	r0, #0
 80005d8:	bd30      	popne	{r4, r5, pc}
 80005da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005de:	d105      	bne.n	80005ec <__adddf3+0x230>
 80005e0:	0040      	lsls	r0, r0, #1
 80005e2:	4149      	adcs	r1, r1
 80005e4:	bf28      	it	cs
 80005e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ea:	bd30      	pop	{r4, r5, pc}
 80005ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005f0:	bf3c      	itt	cc
 80005f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005f6:	bd30      	popcc	{r4, r5, pc}
 80005f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000600:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000604:	f04f 0000 	mov.w	r0, #0
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800060e:	bf1a      	itte	ne
 8000610:	4619      	movne	r1, r3
 8000612:	4610      	movne	r0, r2
 8000614:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000618:	bf1c      	itt	ne
 800061a:	460b      	movne	r3, r1
 800061c:	4602      	movne	r2, r0
 800061e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000622:	bf06      	itte	eq
 8000624:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000628:	ea91 0f03 	teqeq	r1, r3
 800062c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	bf00      	nop

08000634 <__aeabi_ui2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000648:	f04f 0500 	mov.w	r5, #0
 800064c:	f04f 0100 	mov.w	r1, #0
 8000650:	e750      	b.n	80004f4 <__adddf3+0x138>
 8000652:	bf00      	nop

08000654 <__aeabi_i2d>:
 8000654:	f090 0f00 	teq	r0, #0
 8000658:	bf04      	itt	eq
 800065a:	2100      	moveq	r1, #0
 800065c:	4770      	bxeq	lr
 800065e:	b530      	push	{r4, r5, lr}
 8000660:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000664:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000668:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800066c:	bf48      	it	mi
 800066e:	4240      	negmi	r0, r0
 8000670:	f04f 0100 	mov.w	r1, #0
 8000674:	e73e      	b.n	80004f4 <__adddf3+0x138>
 8000676:	bf00      	nop

08000678 <__aeabi_f2d>:
 8000678:	0042      	lsls	r2, r0, #1
 800067a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800067e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000682:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000686:	bf1f      	itttt	ne
 8000688:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800068c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000690:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000694:	4770      	bxne	lr
 8000696:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800069a:	bf08      	it	eq
 800069c:	4770      	bxeq	lr
 800069e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80006a2:	bf04      	itt	eq
 80006a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	e71c      	b.n	80004f4 <__adddf3+0x138>
 80006ba:	bf00      	nop

080006bc <__aeabi_ul2d>:
 80006bc:	ea50 0201 	orrs.w	r2, r0, r1
 80006c0:	bf08      	it	eq
 80006c2:	4770      	bxeq	lr
 80006c4:	b530      	push	{r4, r5, lr}
 80006c6:	f04f 0500 	mov.w	r5, #0
 80006ca:	e00a      	b.n	80006e2 <__aeabi_l2d+0x16>

080006cc <__aeabi_l2d>:
 80006cc:	ea50 0201 	orrs.w	r2, r0, r1
 80006d0:	bf08      	it	eq
 80006d2:	4770      	bxeq	lr
 80006d4:	b530      	push	{r4, r5, lr}
 80006d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006da:	d502      	bpl.n	80006e2 <__aeabi_l2d+0x16>
 80006dc:	4240      	negs	r0, r0
 80006de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ee:	f43f aed8 	beq.w	80004a2 <__adddf3+0xe6>
 80006f2:	f04f 0203 	mov.w	r2, #3
 80006f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006fa:	bf18      	it	ne
 80006fc:	3203      	addne	r2, #3
 80006fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000702:	bf18      	it	ne
 8000704:	3203      	addne	r2, #3
 8000706:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800070a:	f1c2 0320 	rsb	r3, r2, #32
 800070e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000712:	fa20 f002 	lsr.w	r0, r0, r2
 8000716:	fa01 fe03 	lsl.w	lr, r1, r3
 800071a:	ea40 000e 	orr.w	r0, r0, lr
 800071e:	fa21 f102 	lsr.w	r1, r1, r2
 8000722:	4414      	add	r4, r2
 8000724:	e6bd      	b.n	80004a2 <__adddf3+0xe6>
 8000726:	bf00      	nop

08000728 <__aeabi_uldivmod>:
 8000728:	b953      	cbnz	r3, 8000740 <__aeabi_uldivmod+0x18>
 800072a:	b94a      	cbnz	r2, 8000740 <__aeabi_uldivmod+0x18>
 800072c:	2900      	cmp	r1, #0
 800072e:	bf08      	it	eq
 8000730:	2800      	cmpeq	r0, #0
 8000732:	bf1c      	itt	ne
 8000734:	f04f 31ff 	movne.w	r1, #4294967295
 8000738:	f04f 30ff 	movne.w	r0, #4294967295
 800073c:	f000 b9a6 	b.w	8000a8c <__aeabi_idiv0>
 8000740:	f1ad 0c08 	sub.w	ip, sp, #8
 8000744:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000748:	f000 f83e 	bl	80007c8 <__udivmoddi4>
 800074c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000750:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000754:	b004      	add	sp, #16
 8000756:	4770      	bx	lr

08000758 <__aeabi_d2lz>:
 8000758:	b508      	push	{r3, lr}
 800075a:	4602      	mov	r2, r0
 800075c:	460b      	mov	r3, r1
 800075e:	ec43 2b17 	vmov	d7, r2, r3
 8000762:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000766:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800076a:	d403      	bmi.n	8000774 <__aeabi_d2lz+0x1c>
 800076c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000770:	f000 b80a 	b.w	8000788 <__aeabi_d2ulz>
 8000774:	eeb1 7b47 	vneg.f64	d7, d7
 8000778:	ec51 0b17 	vmov	r0, r1, d7
 800077c:	f000 f804 	bl	8000788 <__aeabi_d2ulz>
 8000780:	4240      	negs	r0, r0
 8000782:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000786:	bd08      	pop	{r3, pc}

08000788 <__aeabi_d2ulz>:
 8000788:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80007b8 <__aeabi_d2ulz+0x30>
 800078c:	ec41 0b17 	vmov	d7, r0, r1
 8000790:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80007c0 <__aeabi_d2ulz+0x38>
 8000794:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000798:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800079c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80007a0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80007a4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80007a8:	ee16 1a10 	vmov	r1, s12
 80007ac:	ee17 0a90 	vmov	r0, s15
 80007b0:	4770      	bx	lr
 80007b2:	bf00      	nop
 80007b4:	f3af 8000 	nop.w
 80007b8:	00000000 	.word	0x00000000
 80007bc:	3df00000 	.word	0x3df00000
 80007c0:	00000000 	.word	0x00000000
 80007c4:	41f00000 	.word	0x41f00000

080007c8 <__udivmoddi4>:
 80007c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007cc:	9d08      	ldr	r5, [sp, #32]
 80007ce:	4604      	mov	r4, r0
 80007d0:	468c      	mov	ip, r1
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	f040 8083 	bne.w	80008de <__udivmoddi4+0x116>
 80007d8:	428a      	cmp	r2, r1
 80007da:	4617      	mov	r7, r2
 80007dc:	d947      	bls.n	800086e <__udivmoddi4+0xa6>
 80007de:	fab2 f282 	clz	r2, r2
 80007e2:	b142      	cbz	r2, 80007f6 <__udivmoddi4+0x2e>
 80007e4:	f1c2 0020 	rsb	r0, r2, #32
 80007e8:	fa24 f000 	lsr.w	r0, r4, r0
 80007ec:	4091      	lsls	r1, r2
 80007ee:	4097      	lsls	r7, r2
 80007f0:	ea40 0c01 	orr.w	ip, r0, r1
 80007f4:	4094      	lsls	r4, r2
 80007f6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80007fa:	0c23      	lsrs	r3, r4, #16
 80007fc:	fbbc f6f8 	udiv	r6, ip, r8
 8000800:	fa1f fe87 	uxth.w	lr, r7
 8000804:	fb08 c116 	mls	r1, r8, r6, ip
 8000808:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800080c:	fb06 f10e 	mul.w	r1, r6, lr
 8000810:	4299      	cmp	r1, r3
 8000812:	d909      	bls.n	8000828 <__udivmoddi4+0x60>
 8000814:	18fb      	adds	r3, r7, r3
 8000816:	f106 30ff 	add.w	r0, r6, #4294967295
 800081a:	f080 8119 	bcs.w	8000a50 <__udivmoddi4+0x288>
 800081e:	4299      	cmp	r1, r3
 8000820:	f240 8116 	bls.w	8000a50 <__udivmoddi4+0x288>
 8000824:	3e02      	subs	r6, #2
 8000826:	443b      	add	r3, r7
 8000828:	1a5b      	subs	r3, r3, r1
 800082a:	b2a4      	uxth	r4, r4
 800082c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000830:	fb08 3310 	mls	r3, r8, r0, r3
 8000834:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000838:	fb00 fe0e 	mul.w	lr, r0, lr
 800083c:	45a6      	cmp	lr, r4
 800083e:	d909      	bls.n	8000854 <__udivmoddi4+0x8c>
 8000840:	193c      	adds	r4, r7, r4
 8000842:	f100 33ff 	add.w	r3, r0, #4294967295
 8000846:	f080 8105 	bcs.w	8000a54 <__udivmoddi4+0x28c>
 800084a:	45a6      	cmp	lr, r4
 800084c:	f240 8102 	bls.w	8000a54 <__udivmoddi4+0x28c>
 8000850:	3802      	subs	r0, #2
 8000852:	443c      	add	r4, r7
 8000854:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000858:	eba4 040e 	sub.w	r4, r4, lr
 800085c:	2600      	movs	r6, #0
 800085e:	b11d      	cbz	r5, 8000868 <__udivmoddi4+0xa0>
 8000860:	40d4      	lsrs	r4, r2
 8000862:	2300      	movs	r3, #0
 8000864:	e9c5 4300 	strd	r4, r3, [r5]
 8000868:	4631      	mov	r1, r6
 800086a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800086e:	b902      	cbnz	r2, 8000872 <__udivmoddi4+0xaa>
 8000870:	deff      	udf	#255	; 0xff
 8000872:	fab2 f282 	clz	r2, r2
 8000876:	2a00      	cmp	r2, #0
 8000878:	d150      	bne.n	800091c <__udivmoddi4+0x154>
 800087a:	1bcb      	subs	r3, r1, r7
 800087c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000880:	fa1f f887 	uxth.w	r8, r7
 8000884:	2601      	movs	r6, #1
 8000886:	fbb3 fcfe 	udiv	ip, r3, lr
 800088a:	0c21      	lsrs	r1, r4, #16
 800088c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000890:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000894:	fb08 f30c 	mul.w	r3, r8, ip
 8000898:	428b      	cmp	r3, r1
 800089a:	d907      	bls.n	80008ac <__udivmoddi4+0xe4>
 800089c:	1879      	adds	r1, r7, r1
 800089e:	f10c 30ff 	add.w	r0, ip, #4294967295
 80008a2:	d202      	bcs.n	80008aa <__udivmoddi4+0xe2>
 80008a4:	428b      	cmp	r3, r1
 80008a6:	f200 80e9 	bhi.w	8000a7c <__udivmoddi4+0x2b4>
 80008aa:	4684      	mov	ip, r0
 80008ac:	1ac9      	subs	r1, r1, r3
 80008ae:	b2a3      	uxth	r3, r4
 80008b0:	fbb1 f0fe 	udiv	r0, r1, lr
 80008b4:	fb0e 1110 	mls	r1, lr, r0, r1
 80008b8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80008bc:	fb08 f800 	mul.w	r8, r8, r0
 80008c0:	45a0      	cmp	r8, r4
 80008c2:	d907      	bls.n	80008d4 <__udivmoddi4+0x10c>
 80008c4:	193c      	adds	r4, r7, r4
 80008c6:	f100 33ff 	add.w	r3, r0, #4294967295
 80008ca:	d202      	bcs.n	80008d2 <__udivmoddi4+0x10a>
 80008cc:	45a0      	cmp	r8, r4
 80008ce:	f200 80d9 	bhi.w	8000a84 <__udivmoddi4+0x2bc>
 80008d2:	4618      	mov	r0, r3
 80008d4:	eba4 0408 	sub.w	r4, r4, r8
 80008d8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80008dc:	e7bf      	b.n	800085e <__udivmoddi4+0x96>
 80008de:	428b      	cmp	r3, r1
 80008e0:	d909      	bls.n	80008f6 <__udivmoddi4+0x12e>
 80008e2:	2d00      	cmp	r5, #0
 80008e4:	f000 80b1 	beq.w	8000a4a <__udivmoddi4+0x282>
 80008e8:	2600      	movs	r6, #0
 80008ea:	e9c5 0100 	strd	r0, r1, [r5]
 80008ee:	4630      	mov	r0, r6
 80008f0:	4631      	mov	r1, r6
 80008f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008f6:	fab3 f683 	clz	r6, r3
 80008fa:	2e00      	cmp	r6, #0
 80008fc:	d14a      	bne.n	8000994 <__udivmoddi4+0x1cc>
 80008fe:	428b      	cmp	r3, r1
 8000900:	d302      	bcc.n	8000908 <__udivmoddi4+0x140>
 8000902:	4282      	cmp	r2, r0
 8000904:	f200 80b8 	bhi.w	8000a78 <__udivmoddi4+0x2b0>
 8000908:	1a84      	subs	r4, r0, r2
 800090a:	eb61 0103 	sbc.w	r1, r1, r3
 800090e:	2001      	movs	r0, #1
 8000910:	468c      	mov	ip, r1
 8000912:	2d00      	cmp	r5, #0
 8000914:	d0a8      	beq.n	8000868 <__udivmoddi4+0xa0>
 8000916:	e9c5 4c00 	strd	r4, ip, [r5]
 800091a:	e7a5      	b.n	8000868 <__udivmoddi4+0xa0>
 800091c:	f1c2 0320 	rsb	r3, r2, #32
 8000920:	fa20 f603 	lsr.w	r6, r0, r3
 8000924:	4097      	lsls	r7, r2
 8000926:	fa01 f002 	lsl.w	r0, r1, r2
 800092a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800092e:	40d9      	lsrs	r1, r3
 8000930:	4330      	orrs	r0, r6
 8000932:	0c03      	lsrs	r3, r0, #16
 8000934:	fbb1 f6fe 	udiv	r6, r1, lr
 8000938:	fa1f f887 	uxth.w	r8, r7
 800093c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000940:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000944:	fb06 f108 	mul.w	r1, r6, r8
 8000948:	4299      	cmp	r1, r3
 800094a:	fa04 f402 	lsl.w	r4, r4, r2
 800094e:	d909      	bls.n	8000964 <__udivmoddi4+0x19c>
 8000950:	18fb      	adds	r3, r7, r3
 8000952:	f106 3cff 	add.w	ip, r6, #4294967295
 8000956:	f080 808d 	bcs.w	8000a74 <__udivmoddi4+0x2ac>
 800095a:	4299      	cmp	r1, r3
 800095c:	f240 808a 	bls.w	8000a74 <__udivmoddi4+0x2ac>
 8000960:	3e02      	subs	r6, #2
 8000962:	443b      	add	r3, r7
 8000964:	1a5b      	subs	r3, r3, r1
 8000966:	b281      	uxth	r1, r0
 8000968:	fbb3 f0fe 	udiv	r0, r3, lr
 800096c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000970:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000974:	fb00 f308 	mul.w	r3, r0, r8
 8000978:	428b      	cmp	r3, r1
 800097a:	d907      	bls.n	800098c <__udivmoddi4+0x1c4>
 800097c:	1879      	adds	r1, r7, r1
 800097e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000982:	d273      	bcs.n	8000a6c <__udivmoddi4+0x2a4>
 8000984:	428b      	cmp	r3, r1
 8000986:	d971      	bls.n	8000a6c <__udivmoddi4+0x2a4>
 8000988:	3802      	subs	r0, #2
 800098a:	4439      	add	r1, r7
 800098c:	1acb      	subs	r3, r1, r3
 800098e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000992:	e778      	b.n	8000886 <__udivmoddi4+0xbe>
 8000994:	f1c6 0c20 	rsb	ip, r6, #32
 8000998:	fa03 f406 	lsl.w	r4, r3, r6
 800099c:	fa22 f30c 	lsr.w	r3, r2, ip
 80009a0:	431c      	orrs	r4, r3
 80009a2:	fa20 f70c 	lsr.w	r7, r0, ip
 80009a6:	fa01 f306 	lsl.w	r3, r1, r6
 80009aa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80009ae:	fa21 f10c 	lsr.w	r1, r1, ip
 80009b2:	431f      	orrs	r7, r3
 80009b4:	0c3b      	lsrs	r3, r7, #16
 80009b6:	fbb1 f9fe 	udiv	r9, r1, lr
 80009ba:	fa1f f884 	uxth.w	r8, r4
 80009be:	fb0e 1119 	mls	r1, lr, r9, r1
 80009c2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80009c6:	fb09 fa08 	mul.w	sl, r9, r8
 80009ca:	458a      	cmp	sl, r1
 80009cc:	fa02 f206 	lsl.w	r2, r2, r6
 80009d0:	fa00 f306 	lsl.w	r3, r0, r6
 80009d4:	d908      	bls.n	80009e8 <__udivmoddi4+0x220>
 80009d6:	1861      	adds	r1, r4, r1
 80009d8:	f109 30ff 	add.w	r0, r9, #4294967295
 80009dc:	d248      	bcs.n	8000a70 <__udivmoddi4+0x2a8>
 80009de:	458a      	cmp	sl, r1
 80009e0:	d946      	bls.n	8000a70 <__udivmoddi4+0x2a8>
 80009e2:	f1a9 0902 	sub.w	r9, r9, #2
 80009e6:	4421      	add	r1, r4
 80009e8:	eba1 010a 	sub.w	r1, r1, sl
 80009ec:	b2bf      	uxth	r7, r7
 80009ee:	fbb1 f0fe 	udiv	r0, r1, lr
 80009f2:	fb0e 1110 	mls	r1, lr, r0, r1
 80009f6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80009fa:	fb00 f808 	mul.w	r8, r0, r8
 80009fe:	45b8      	cmp	r8, r7
 8000a00:	d907      	bls.n	8000a12 <__udivmoddi4+0x24a>
 8000a02:	19e7      	adds	r7, r4, r7
 8000a04:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a08:	d22e      	bcs.n	8000a68 <__udivmoddi4+0x2a0>
 8000a0a:	45b8      	cmp	r8, r7
 8000a0c:	d92c      	bls.n	8000a68 <__udivmoddi4+0x2a0>
 8000a0e:	3802      	subs	r0, #2
 8000a10:	4427      	add	r7, r4
 8000a12:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000a16:	eba7 0708 	sub.w	r7, r7, r8
 8000a1a:	fba0 8902 	umull	r8, r9, r0, r2
 8000a1e:	454f      	cmp	r7, r9
 8000a20:	46c6      	mov	lr, r8
 8000a22:	4649      	mov	r1, r9
 8000a24:	d31a      	bcc.n	8000a5c <__udivmoddi4+0x294>
 8000a26:	d017      	beq.n	8000a58 <__udivmoddi4+0x290>
 8000a28:	b15d      	cbz	r5, 8000a42 <__udivmoddi4+0x27a>
 8000a2a:	ebb3 020e 	subs.w	r2, r3, lr
 8000a2e:	eb67 0701 	sbc.w	r7, r7, r1
 8000a32:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000a36:	40f2      	lsrs	r2, r6
 8000a38:	ea4c 0202 	orr.w	r2, ip, r2
 8000a3c:	40f7      	lsrs	r7, r6
 8000a3e:	e9c5 2700 	strd	r2, r7, [r5]
 8000a42:	2600      	movs	r6, #0
 8000a44:	4631      	mov	r1, r6
 8000a46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a4a:	462e      	mov	r6, r5
 8000a4c:	4628      	mov	r0, r5
 8000a4e:	e70b      	b.n	8000868 <__udivmoddi4+0xa0>
 8000a50:	4606      	mov	r6, r0
 8000a52:	e6e9      	b.n	8000828 <__udivmoddi4+0x60>
 8000a54:	4618      	mov	r0, r3
 8000a56:	e6fd      	b.n	8000854 <__udivmoddi4+0x8c>
 8000a58:	4543      	cmp	r3, r8
 8000a5a:	d2e5      	bcs.n	8000a28 <__udivmoddi4+0x260>
 8000a5c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000a60:	eb69 0104 	sbc.w	r1, r9, r4
 8000a64:	3801      	subs	r0, #1
 8000a66:	e7df      	b.n	8000a28 <__udivmoddi4+0x260>
 8000a68:	4608      	mov	r0, r1
 8000a6a:	e7d2      	b.n	8000a12 <__udivmoddi4+0x24a>
 8000a6c:	4660      	mov	r0, ip
 8000a6e:	e78d      	b.n	800098c <__udivmoddi4+0x1c4>
 8000a70:	4681      	mov	r9, r0
 8000a72:	e7b9      	b.n	80009e8 <__udivmoddi4+0x220>
 8000a74:	4666      	mov	r6, ip
 8000a76:	e775      	b.n	8000964 <__udivmoddi4+0x19c>
 8000a78:	4630      	mov	r0, r6
 8000a7a:	e74a      	b.n	8000912 <__udivmoddi4+0x14a>
 8000a7c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000a80:	4439      	add	r1, r7
 8000a82:	e713      	b.n	80008ac <__udivmoddi4+0xe4>
 8000a84:	3802      	subs	r0, #2
 8000a86:	443c      	add	r4, r7
 8000a88:	e724      	b.n	80008d4 <__udivmoddi4+0x10c>
 8000a8a:	bf00      	nop

08000a8c <__aeabi_idiv0>:
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop

08000a90 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000a90:	b480      	push	{r7}
 8000a92:	b085      	sub	sp, #20
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	60f8      	str	r0, [r7, #12]
 8000a98:	60b9      	str	r1, [r7, #8]
 8000a9a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	4a07      	ldr	r2, [pc, #28]	; (8000abc <vApplicationGetIdleTaskMemory+0x2c>)
 8000aa0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000aa2:	68bb      	ldr	r3, [r7, #8]
 8000aa4:	4a06      	ldr	r2, [pc, #24]	; (8000ac0 <vApplicationGetIdleTaskMemory+0x30>)
 8000aa6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	2280      	movs	r2, #128	; 0x80
 8000aac:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000aae:	bf00      	nop
 8000ab0:	3714      	adds	r7, #20
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop
 8000abc:	240004f4 	.word	0x240004f4
 8000ac0:	24000548 	.word	0x24000548

08000ac4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ac4:	b5b0      	push	{r4, r5, r7, lr}
 8000ac6:	b08a      	sub	sp, #40	; 0x28
 8000ac8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000aca:	f001 fb65 	bl	8002198 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000ace:	4b52      	ldr	r3, [pc, #328]	; (8000c18 <main+0x154>)
 8000ad0:	695b      	ldr	r3, [r3, #20]
 8000ad2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d11b      	bne.n	8000b12 <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000ada:	f3bf 8f4f 	dsb	sy
}
 8000ade:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000ae0:	f3bf 8f6f 	isb	sy
}
 8000ae4:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000ae6:	4b4c      	ldr	r3, [pc, #304]	; (8000c18 <main+0x154>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000aee:	f3bf 8f4f 	dsb	sy
}
 8000af2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000af4:	f3bf 8f6f 	isb	sy
}
 8000af8:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000afa:	4b47      	ldr	r3, [pc, #284]	; (8000c18 <main+0x154>)
 8000afc:	695b      	ldr	r3, [r3, #20]
 8000afe:	4a46      	ldr	r2, [pc, #280]	; (8000c18 <main+0x154>)
 8000b00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b04:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000b06:	f3bf 8f4f 	dsb	sy
}
 8000b0a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000b0c:	f3bf 8f6f 	isb	sy
}
 8000b10:	e000      	b.n	8000b14 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000b12:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000b14:	4b40      	ldr	r3, [pc, #256]	; (8000c18 <main+0x154>)
 8000b16:	695b      	ldr	r3, [r3, #20]
 8000b18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d138      	bne.n	8000b92 <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000b20:	4b3d      	ldr	r3, [pc, #244]	; (8000c18 <main+0x154>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000b28:	f3bf 8f4f 	dsb	sy
}
 8000b2c:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000b2e:	4b3a      	ldr	r3, [pc, #232]	; (8000c18 <main+0x154>)
 8000b30:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000b34:	627b      	str	r3, [r7, #36]	; 0x24

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b38:	0b5b      	lsrs	r3, r3, #13
 8000b3a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000b3e:	623b      	str	r3, [r7, #32]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b42:	08db      	lsrs	r3, r3, #3
 8000b44:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000b48:	61fb      	str	r3, [r7, #28]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000b4a:	6a3b      	ldr	r3, [r7, #32]
 8000b4c:	015a      	lsls	r2, r3, #5
 8000b4e:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000b52:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000b54:	69fa      	ldr	r2, [r7, #28]
 8000b56:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000b58:	492f      	ldr	r1, [pc, #188]	; (8000c18 <main+0x154>)
 8000b5a:	4313      	orrs	r3, r2
 8000b5c:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000b60:	69fb      	ldr	r3, [r7, #28]
 8000b62:	1e5a      	subs	r2, r3, #1
 8000b64:	61fa      	str	r2, [r7, #28]
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d1ef      	bne.n	8000b4a <main+0x86>
    } while(sets-- != 0U);
 8000b6a:	6a3b      	ldr	r3, [r7, #32]
 8000b6c:	1e5a      	subs	r2, r3, #1
 8000b6e:	623a      	str	r2, [r7, #32]
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d1e5      	bne.n	8000b40 <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8000b74:	f3bf 8f4f 	dsb	sy
}
 8000b78:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000b7a:	4b27      	ldr	r3, [pc, #156]	; (8000c18 <main+0x154>)
 8000b7c:	695b      	ldr	r3, [r3, #20]
 8000b7e:	4a26      	ldr	r2, [pc, #152]	; (8000c18 <main+0x154>)
 8000b80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b84:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000b86:	f3bf 8f4f 	dsb	sy
}
 8000b8a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000b8c:	f3bf 8f6f 	isb	sy
}
 8000b90:	e000      	b.n	8000b94 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000b92:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b94:	f001 ffda 	bl	8002b4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b98:	f000 f854 	bl	8000c44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b9c:	f000 f970 	bl	8000e80 <MX_GPIO_Init>
  MX_SPI4_Init();
 8000ba0:	f000 f8cc 	bl	8000d3c <MX_SPI4_Init>
  MX_USART3_UART_Init();
 8000ba4:	f000 f920 	bl	8000de8 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOE, CS1_Pin|CS2_Pin, SET);
 8000ba8:	2201      	movs	r2, #1
 8000baa:	2130      	movs	r1, #48	; 0x30
 8000bac:	481b      	ldr	r0, [pc, #108]	; (8000c1c <main+0x158>)
 8000bae:	f004 fc5d 	bl	800546c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(CS3_GPIO_Port, CS3_Pin, SET);
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	2102      	movs	r1, #2
 8000bb6:	481a      	ldr	r0, [pc, #104]	; (8000c20 <main+0x15c>)
 8000bb8:	f004 fc58 	bl	800546c <HAL_GPIO_WritePin>

  // DIR SET means: positive and DIR RESET means: negative
  HAL_GPIO_WritePin(GPIOB, DIR3_Pin|DIR2_Pin, GPIO_PIN_SET);
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000bc2:	4818      	ldr	r0, [pc, #96]	; (8000c24 <main+0x160>)
 8000bc4:	f004 fc52 	bl	800546c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DIR1_GPIO_Port, DIR1_Pin, GPIO_PIN_SET);
 8000bc8:	2201      	movs	r2, #1
 8000bca:	2180      	movs	r1, #128	; 0x80
 8000bcc:	4816      	ldr	r0, [pc, #88]	; (8000c28 <main+0x164>)
 8000bce:	f004 fc4d 	bl	800546c <HAL_GPIO_WritePin>

  // star communication by UART
  uart_buf_len = sprintf(uart_bufT, "Ethernet Communication with DAC\r\n");
 8000bd2:	4916      	ldr	r1, [pc, #88]	; (8000c2c <main+0x168>)
 8000bd4:	4816      	ldr	r0, [pc, #88]	; (8000c30 <main+0x16c>)
 8000bd6:	f01e fd73 	bl	801f6c0 <siprintf>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	4a15      	ldr	r2, [pc, #84]	; (8000c34 <main+0x170>)
 8000bde:	6013      	str	r3, [r2, #0]
  HAL_UART_Transmit(&huart3, (uint8_t*)uart_bufT, uart_buf_len, 100);
 8000be0:	4b14      	ldr	r3, [pc, #80]	; (8000c34 <main+0x170>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	b29a      	uxth	r2, r3
 8000be6:	2364      	movs	r3, #100	; 0x64
 8000be8:	4911      	ldr	r1, [pc, #68]	; (8000c30 <main+0x16c>)
 8000bea:	4813      	ldr	r0, [pc, #76]	; (8000c38 <main+0x174>)
 8000bec:	f008 f830 	bl	8008c50 <HAL_UART_Transmit>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Start */
  osThreadDef(Start, StartThread, osPriorityNormal, 0, 512);
 8000bf0:	4b12      	ldr	r3, [pc, #72]	; (8000c3c <main+0x178>)
 8000bf2:	463c      	mov	r4, r7
 8000bf4:	461d      	mov	r5, r3
 8000bf6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bf8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bfa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000bfe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  StartHandle = osThreadCreate(osThread(Start), NULL);
 8000c02:	463b      	mov	r3, r7
 8000c04:	2100      	movs	r1, #0
 8000c06:	4618      	mov	r0, r3
 8000c08:	f009 fdc7 	bl	800a79a <osThreadCreate>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	4a0c      	ldr	r2, [pc, #48]	; (8000c40 <main+0x17c>)
 8000c10:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000c12:	f009 fdab 	bl	800a76c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c16:	e7fe      	b.n	8000c16 <main+0x152>
 8000c18:	e000ed00 	.word	0xe000ed00
 8000c1c:	58021000 	.word	0x58021000
 8000c20:	58021400 	.word	0x58021400
 8000c24:	58020400 	.word	0x58020400
 8000c28:	58020c00 	.word	0x58020c00
 8000c2c:	08023154 	.word	0x08023154
 8000c30:	24004768 	.word	0x24004768
 8000c34:	24004754 	.word	0x24004754
 8000c38:	240046c4 	.word	0x240046c4
 8000c3c:	08023178 	.word	0x08023178
 8000c40:	24004b50 	.word	0x24004b50

08000c44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b09c      	sub	sp, #112	; 0x70
 8000c48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c4e:	224c      	movs	r2, #76	; 0x4c
 8000c50:	2100      	movs	r1, #0
 8000c52:	4618      	mov	r0, r3
 8000c54:	f01d fe88 	bl	801e968 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c58:	1d3b      	adds	r3, r7, #4
 8000c5a:	2220      	movs	r2, #32
 8000c5c:	2100      	movs	r1, #0
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f01d fe82 	bl	801e968 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000c64:	2002      	movs	r0, #2
 8000c66:	f004 fc4f 	bl	8005508 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	603b      	str	r3, [r7, #0]
 8000c6e:	4b31      	ldr	r3, [pc, #196]	; (8000d34 <SystemClock_Config+0xf0>)
 8000c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c72:	4a30      	ldr	r2, [pc, #192]	; (8000d34 <SystemClock_Config+0xf0>)
 8000c74:	f023 0301 	bic.w	r3, r3, #1
 8000c78:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000c7a:	4b2e      	ldr	r3, [pc, #184]	; (8000d34 <SystemClock_Config+0xf0>)
 8000c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c7e:	f003 0301 	and.w	r3, r3, #1
 8000c82:	603b      	str	r3, [r7, #0]
 8000c84:	4b2c      	ldr	r3, [pc, #176]	; (8000d38 <SystemClock_Config+0xf4>)
 8000c86:	699b      	ldr	r3, [r3, #24]
 8000c88:	4a2b      	ldr	r2, [pc, #172]	; (8000d38 <SystemClock_Config+0xf4>)
 8000c8a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000c8e:	6193      	str	r3, [r2, #24]
 8000c90:	4b29      	ldr	r3, [pc, #164]	; (8000d38 <SystemClock_Config+0xf4>)
 8000c92:	699b      	ldr	r3, [r3, #24]
 8000c94:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c98:	603b      	str	r3, [r7, #0]
 8000c9a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000c9c:	bf00      	nop
 8000c9e:	4b26      	ldr	r3, [pc, #152]	; (8000d38 <SystemClock_Config+0xf4>)
 8000ca0:	699b      	ldr	r3, [r3, #24]
 8000ca2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ca6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000caa:	d1f8      	bne.n	8000c9e <SystemClock_Config+0x5a>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000cac:	2301      	movs	r3, #1
 8000cae:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000cb0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000cb4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cb6:	2302      	movs	r3, #2
 8000cb8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cba:	2302      	movs	r3, #2
 8000cbc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000cbe:	2304      	movs	r3, #4
 8000cc0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 400;
 8000cc2:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000cc6:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000cc8:	2302      	movs	r3, #2
 8000cca:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000ccc:	2302      	movs	r3, #2
 8000cce:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000cd0:	2302      	movs	r3, #2
 8000cd2:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8000cd4:	2304      	movs	r3, #4
 8000cd6:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ce0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f004 fc49 	bl	800557c <HAL_RCC_OscConfig>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d001      	beq.n	8000cf4 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000cf0:	f001 faa4 	bl	800223c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cf4:	233f      	movs	r3, #63	; 0x3f
 8000cf6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cf8:	2303      	movs	r3, #3
 8000cfa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000d00:	2308      	movs	r3, #8
 8000d02:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000d04:	2340      	movs	r3, #64	; 0x40
 8000d06:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000d08:	2340      	movs	r3, #64	; 0x40
 8000d0a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000d0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d10:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000d12:	2340      	movs	r3, #64	; 0x40
 8000d14:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d16:	1d3b      	adds	r3, r7, #4
 8000d18:	2102      	movs	r1, #2
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f005 f83e 	bl	8005d9c <HAL_RCC_ClockConfig>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8000d26:	f001 fa89 	bl	800223c <Error_Handler>
  }
}
 8000d2a:	bf00      	nop
 8000d2c:	3770      	adds	r7, #112	; 0x70
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	58000400 	.word	0x58000400
 8000d38:	58024800 	.word	0x58024800

08000d3c <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8000d40:	4b27      	ldr	r3, [pc, #156]	; (8000de0 <MX_SPI4_Init+0xa4>)
 8000d42:	4a28      	ldr	r2, [pc, #160]	; (8000de4 <MX_SPI4_Init+0xa8>)
 8000d44:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8000d46:	4b26      	ldr	r3, [pc, #152]	; (8000de0 <MX_SPI4_Init+0xa4>)
 8000d48:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000d4c:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8000d4e:	4b24      	ldr	r3, [pc, #144]	; (8000de0 <MX_SPI4_Init+0xa4>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d54:	4b22      	ldr	r3, [pc, #136]	; (8000de0 <MX_SPI4_Init+0xa4>)
 8000d56:	2207      	movs	r2, #7
 8000d58:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d5a:	4b21      	ldr	r3, [pc, #132]	; (8000de0 <MX_SPI4_Init+0xa4>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d60:	4b1f      	ldr	r3, [pc, #124]	; (8000de0 <MX_SPI4_Init+0xa4>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8000d66:	4b1e      	ldr	r3, [pc, #120]	; (8000de0 <MX_SPI4_Init+0xa4>)
 8000d68:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000d6c:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000d6e:	4b1c      	ldr	r3, [pc, #112]	; (8000de0 <MX_SPI4_Init+0xa4>)
 8000d70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000d74:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d76:	4b1a      	ldr	r3, [pc, #104]	; (8000de0 <MX_SPI4_Init+0xa4>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d7c:	4b18      	ldr	r3, [pc, #96]	; (8000de0 <MX_SPI4_Init+0xa4>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d82:	4b17      	ldr	r3, [pc, #92]	; (8000de0 <MX_SPI4_Init+0xa4>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8000d88:	4b15      	ldr	r3, [pc, #84]	; (8000de0 <MX_SPI4_Init+0xa4>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000d8e:	4b14      	ldr	r3, [pc, #80]	; (8000de0 <MX_SPI4_Init+0xa4>)
 8000d90:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d94:	635a      	str	r2, [r3, #52]	; 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000d96:	4b12      	ldr	r3, [pc, #72]	; (8000de0 <MX_SPI4_Init+0xa4>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000d9c:	4b10      	ldr	r3, [pc, #64]	; (8000de0 <MX_SPI4_Init+0xa4>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000da2:	4b0f      	ldr	r3, [pc, #60]	; (8000de0 <MX_SPI4_Init+0xa4>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000da8:	4b0d      	ldr	r3, [pc, #52]	; (8000de0 <MX_SPI4_Init+0xa4>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	645a      	str	r2, [r3, #68]	; 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000dae:	4b0c      	ldr	r3, [pc, #48]	; (8000de0 <MX_SPI4_Init+0xa4>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	649a      	str	r2, [r3, #72]	; 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000db4:	4b0a      	ldr	r3, [pc, #40]	; (8000de0 <MX_SPI4_Init+0xa4>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000dba:	4b09      	ldr	r3, [pc, #36]	; (8000de0 <MX_SPI4_Init+0xa4>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	651a      	str	r2, [r3, #80]	; 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000dc0:	4b07      	ldr	r3, [pc, #28]	; (8000de0 <MX_SPI4_Init+0xa4>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000dc6:	4b06      	ldr	r3, [pc, #24]	; (8000de0 <MX_SPI4_Init+0xa4>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000dcc:	4804      	ldr	r0, [pc, #16]	; (8000de0 <MX_SPI4_Init+0xa4>)
 8000dce:	f006 ff15 	bl	8007bfc <HAL_SPI_Init>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <MX_SPI4_Init+0xa0>
  {
    Error_Handler();
 8000dd8:	f001 fa30 	bl	800223c <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8000ddc:	bf00      	nop
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	24004b54 	.word	0x24004b54
 8000de4:	40013400 	.word	0x40013400

08000de8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000dec:	4b22      	ldr	r3, [pc, #136]	; (8000e78 <MX_USART3_UART_Init+0x90>)
 8000dee:	4a23      	ldr	r2, [pc, #140]	; (8000e7c <MX_USART3_UART_Init+0x94>)
 8000df0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000df2:	4b21      	ldr	r3, [pc, #132]	; (8000e78 <MX_USART3_UART_Init+0x90>)
 8000df4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000df8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000dfa:	4b1f      	ldr	r3, [pc, #124]	; (8000e78 <MX_USART3_UART_Init+0x90>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000e00:	4b1d      	ldr	r3, [pc, #116]	; (8000e78 <MX_USART3_UART_Init+0x90>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000e06:	4b1c      	ldr	r3, [pc, #112]	; (8000e78 <MX_USART3_UART_Init+0x90>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000e0c:	4b1a      	ldr	r3, [pc, #104]	; (8000e78 <MX_USART3_UART_Init+0x90>)
 8000e0e:	220c      	movs	r2, #12
 8000e10:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e12:	4b19      	ldr	r3, [pc, #100]	; (8000e78 <MX_USART3_UART_Init+0x90>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e18:	4b17      	ldr	r3, [pc, #92]	; (8000e78 <MX_USART3_UART_Init+0x90>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e1e:	4b16      	ldr	r3, [pc, #88]	; (8000e78 <MX_USART3_UART_Init+0x90>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e24:	4b14      	ldr	r3, [pc, #80]	; (8000e78 <MX_USART3_UART_Init+0x90>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e2a:	4b13      	ldr	r3, [pc, #76]	; (8000e78 <MX_USART3_UART_Init+0x90>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000e30:	4811      	ldr	r0, [pc, #68]	; (8000e78 <MX_USART3_UART_Init+0x90>)
 8000e32:	f007 febd 	bl	8008bb0 <HAL_UART_Init>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000e3c:	f001 f9fe 	bl	800223c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e40:	2100      	movs	r1, #0
 8000e42:	480d      	ldr	r0, [pc, #52]	; (8000e78 <MX_USART3_UART_Init+0x90>)
 8000e44:	f008 fea0 	bl	8009b88 <HAL_UARTEx_SetTxFifoThreshold>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000e4e:	f001 f9f5 	bl	800223c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e52:	2100      	movs	r1, #0
 8000e54:	4808      	ldr	r0, [pc, #32]	; (8000e78 <MX_USART3_UART_Init+0x90>)
 8000e56:	f008 fed5 	bl	8009c04 <HAL_UARTEx_SetRxFifoThreshold>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d001      	beq.n	8000e64 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000e60:	f001 f9ec 	bl	800223c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000e64:	4804      	ldr	r0, [pc, #16]	; (8000e78 <MX_USART3_UART_Init+0x90>)
 8000e66:	f008 fe56 	bl	8009b16 <HAL_UARTEx_DisableFifoMode>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d001      	beq.n	8000e74 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000e70:	f001 f9e4 	bl	800223c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000e74:	bf00      	nop
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	240046c4 	.word	0x240046c4
 8000e7c:	40004800 	.word	0x40004800

08000e80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b08e      	sub	sp, #56	; 0x38
 8000e84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	601a      	str	r2, [r3, #0]
 8000e8e:	605a      	str	r2, [r3, #4]
 8000e90:	609a      	str	r2, [r3, #8]
 8000e92:	60da      	str	r2, [r3, #12]
 8000e94:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e96:	4b85      	ldr	r3, [pc, #532]	; (80010ac <MX_GPIO_Init+0x22c>)
 8000e98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e9c:	4a83      	ldr	r2, [pc, #524]	; (80010ac <MX_GPIO_Init+0x22c>)
 8000e9e:	f043 0310 	orr.w	r3, r3, #16
 8000ea2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ea6:	4b81      	ldr	r3, [pc, #516]	; (80010ac <MX_GPIO_Init+0x22c>)
 8000ea8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eac:	f003 0310 	and.w	r3, r3, #16
 8000eb0:	623b      	str	r3, [r7, #32]
 8000eb2:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eb4:	4b7d      	ldr	r3, [pc, #500]	; (80010ac <MX_GPIO_Init+0x22c>)
 8000eb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eba:	4a7c      	ldr	r2, [pc, #496]	; (80010ac <MX_GPIO_Init+0x22c>)
 8000ebc:	f043 0304 	orr.w	r3, r3, #4
 8000ec0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ec4:	4b79      	ldr	r3, [pc, #484]	; (80010ac <MX_GPIO_Init+0x22c>)
 8000ec6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eca:	f003 0304 	and.w	r3, r3, #4
 8000ece:	61fb      	str	r3, [r7, #28]
 8000ed0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ed2:	4b76      	ldr	r3, [pc, #472]	; (80010ac <MX_GPIO_Init+0x22c>)
 8000ed4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ed8:	4a74      	ldr	r2, [pc, #464]	; (80010ac <MX_GPIO_Init+0x22c>)
 8000eda:	f043 0320 	orr.w	r3, r3, #32
 8000ede:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ee2:	4b72      	ldr	r3, [pc, #456]	; (80010ac <MX_GPIO_Init+0x22c>)
 8000ee4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ee8:	f003 0320 	and.w	r3, r3, #32
 8000eec:	61bb      	str	r3, [r7, #24]
 8000eee:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ef0:	4b6e      	ldr	r3, [pc, #440]	; (80010ac <MX_GPIO_Init+0x22c>)
 8000ef2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ef6:	4a6d      	ldr	r2, [pc, #436]	; (80010ac <MX_GPIO_Init+0x22c>)
 8000ef8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000efc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f00:	4b6a      	ldr	r3, [pc, #424]	; (80010ac <MX_GPIO_Init+0x22c>)
 8000f02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f0a:	617b      	str	r3, [r7, #20]
 8000f0c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f0e:	4b67      	ldr	r3, [pc, #412]	; (80010ac <MX_GPIO_Init+0x22c>)
 8000f10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f14:	4a65      	ldr	r2, [pc, #404]	; (80010ac <MX_GPIO_Init+0x22c>)
 8000f16:	f043 0301 	orr.w	r3, r3, #1
 8000f1a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f1e:	4b63      	ldr	r3, [pc, #396]	; (80010ac <MX_GPIO_Init+0x22c>)
 8000f20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f24:	f003 0301 	and.w	r3, r3, #1
 8000f28:	613b      	str	r3, [r7, #16]
 8000f2a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f2c:	4b5f      	ldr	r3, [pc, #380]	; (80010ac <MX_GPIO_Init+0x22c>)
 8000f2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f32:	4a5e      	ldr	r2, [pc, #376]	; (80010ac <MX_GPIO_Init+0x22c>)
 8000f34:	f043 0302 	orr.w	r3, r3, #2
 8000f38:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f3c:	4b5b      	ldr	r3, [pc, #364]	; (80010ac <MX_GPIO_Init+0x22c>)
 8000f3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f42:	f003 0302 	and.w	r3, r3, #2
 8000f46:	60fb      	str	r3, [r7, #12]
 8000f48:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f4a:	4b58      	ldr	r3, [pc, #352]	; (80010ac <MX_GPIO_Init+0x22c>)
 8000f4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f50:	4a56      	ldr	r2, [pc, #344]	; (80010ac <MX_GPIO_Init+0x22c>)
 8000f52:	f043 0308 	orr.w	r3, r3, #8
 8000f56:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f5a:	4b54      	ldr	r3, [pc, #336]	; (80010ac <MX_GPIO_Init+0x22c>)
 8000f5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f60:	f003 0308 	and.w	r3, r3, #8
 8000f64:	60bb      	str	r3, [r7, #8]
 8000f66:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f68:	4b50      	ldr	r3, [pc, #320]	; (80010ac <MX_GPIO_Init+0x22c>)
 8000f6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f6e:	4a4f      	ldr	r2, [pc, #316]	; (80010ac <MX_GPIO_Init+0x22c>)
 8000f70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f74:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f78:	4b4c      	ldr	r3, [pc, #304]	; (80010ac <MX_GPIO_Init+0x22c>)
 8000f7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f82:	607b      	str	r3, [r7, #4]
 8000f84:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS1_Pin|CS2_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000f86:	2200      	movs	r2, #0
 8000f88:	2132      	movs	r1, #50	; 0x32
 8000f8a:	4849      	ldr	r0, [pc, #292]	; (80010b0 <MX_GPIO_Init+0x230>)
 8000f8c:	f004 fa6e 	bl	800546c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS3_GPIO_Port, CS3_Pin, GPIO_PIN_RESET);
 8000f90:	2200      	movs	r2, #0
 8000f92:	2102      	movs	r1, #2
 8000f94:	4847      	ldr	r0, [pc, #284]	; (80010b4 <MX_GPIO_Init+0x234>)
 8000f96:	f004 fa69 	bl	800546c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|DIR3_Pin|DIR2_Pin, GPIO_PIN_RESET);
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	f244 3101 	movw	r1, #17153	; 0x4301
 8000fa0:	4845      	ldr	r0, [pc, #276]	; (80010b8 <MX_GPIO_Init+0x238>)
 8000fa2:	f004 fa63 	bl	800546c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIR1_GPIO_Port, DIR1_Pin, GPIO_PIN_RESET);
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	2180      	movs	r1, #128	; 0x80
 8000faa:	4844      	ldr	r0, [pc, #272]	; (80010bc <MX_GPIO_Init+0x23c>)
 8000fac:	f004 fa5e 	bl	800546c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : TTL3_Pin TTL1_Pin */
  GPIO_InitStruct.Pin = TTL3_Pin|TTL1_Pin;
 8000fb0:	2305      	movs	r3, #5
 8000fb2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	483b      	ldr	r0, [pc, #236]	; (80010b0 <MX_GPIO_Init+0x230>)
 8000fc4:	f004 f88a 	bl	80050dc <HAL_GPIO_Init>

  /*Configure GPIO pins : CS1_Pin CS2_Pin LD2_Pin */
  GPIO_InitStruct.Pin = CS1_Pin|CS2_Pin|LD2_Pin;
 8000fc8:	2332      	movs	r3, #50	; 0x32
 8000fca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fd4:	2303      	movs	r3, #3
 8000fd6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fdc:	4619      	mov	r1, r3
 8000fde:	4834      	ldr	r0, [pc, #208]	; (80010b0 <MX_GPIO_Init+0x230>)
 8000fe0:	f004 f87c 	bl	80050dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000fe4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fe8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fea:	4b35      	ldr	r3, [pc, #212]	; (80010c0 <MX_GPIO_Init+0x240>)
 8000fec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ff2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	4832      	ldr	r0, [pc, #200]	; (80010c4 <MX_GPIO_Init+0x244>)
 8000ffa:	f004 f86f 	bl	80050dc <HAL_GPIO_Init>

  /*Configure GPIO pin : CS3_Pin */
  GPIO_InitStruct.Pin = CS3_Pin;
 8000ffe:	2302      	movs	r3, #2
 8001000:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001002:	2301      	movs	r3, #1
 8001004:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001006:	2300      	movs	r3, #0
 8001008:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800100a:	2303      	movs	r3, #3
 800100c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(CS3_GPIO_Port, &GPIO_InitStruct);
 800100e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001012:	4619      	mov	r1, r3
 8001014:	4827      	ldr	r0, [pc, #156]	; (80010b4 <MX_GPIO_Init+0x234>)
 8001016:	f004 f861 	bl	80050dc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin DIR3_Pin DIR2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|DIR3_Pin|DIR2_Pin;
 800101a:	f244 3301 	movw	r3, #17153	; 0x4301
 800101e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001020:	2301      	movs	r3, #1
 8001022:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001024:	2300      	movs	r3, #0
 8001026:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001028:	2303      	movs	r3, #3
 800102a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800102c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001030:	4619      	mov	r1, r3
 8001032:	4821      	ldr	r0, [pc, #132]	; (80010b8 <MX_GPIO_Init+0x238>)
 8001034:	f004 f852 	bl	80050dc <HAL_GPIO_Init>

  /*Configure GPIO pin : TTL2_Pin */
  GPIO_InitStruct.Pin = TTL2_Pin;
 8001038:	2301      	movs	r3, #1
 800103a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800103c:	2300      	movs	r3, #0
 800103e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001040:	2300      	movs	r3, #0
 8001042:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TTL2_GPIO_Port, &GPIO_InitStruct);
 8001044:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001048:	4619      	mov	r1, r3
 800104a:	481c      	ldr	r0, [pc, #112]	; (80010bc <MX_GPIO_Init+0x23c>)
 800104c:	f004 f846 	bl	80050dc <HAL_GPIO_Init>

  /*Configure GPIO pin : TTL4_Pin */
  GPIO_InitStruct.Pin = TTL4_Pin;
 8001050:	2302      	movs	r3, #2
 8001052:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001054:	4b1a      	ldr	r3, [pc, #104]	; (80010c0 <MX_GPIO_Init+0x240>)
 8001056:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001058:	2300      	movs	r3, #0
 800105a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TTL4_GPIO_Port, &GPIO_InitStruct);
 800105c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001060:	4619      	mov	r1, r3
 8001062:	4816      	ldr	r0, [pc, #88]	; (80010bc <MX_GPIO_Init+0x23c>)
 8001064:	f004 f83a 	bl	80050dc <HAL_GPIO_Init>

  /*Configure GPIO pin : DIR1_Pin */
  GPIO_InitStruct.Pin = DIR1_Pin;
 8001068:	2380      	movs	r3, #128	; 0x80
 800106a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800106c:	2301      	movs	r3, #1
 800106e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001070:	2300      	movs	r3, #0
 8001072:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001074:	2303      	movs	r3, #3
 8001076:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(DIR1_GPIO_Port, &GPIO_InitStruct);
 8001078:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800107c:	4619      	mov	r1, r3
 800107e:	480f      	ldr	r0, [pc, #60]	; (80010bc <MX_GPIO_Init+0x23c>)
 8001080:	f004 f82c 	bl	80050dc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 7, 0);
 8001084:	2200      	movs	r2, #0
 8001086:	2107      	movs	r1, #7
 8001088:	2007      	movs	r0, #7
 800108a:	f001 fe93 	bl	8002db4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800108e:	2007      	movs	r0, #7
 8001090:	f001 feaa 	bl	8002de8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 7, 0);
 8001094:	2200      	movs	r2, #0
 8001096:	2107      	movs	r1, #7
 8001098:	2028      	movs	r0, #40	; 0x28
 800109a:	f001 fe8b 	bl	8002db4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800109e:	2028      	movs	r0, #40	; 0x28
 80010a0:	f001 fea2 	bl	8002de8 <HAL_NVIC_EnableIRQ>

}
 80010a4:	bf00      	nop
 80010a6:	3738      	adds	r7, #56	; 0x38
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	58024400 	.word	0x58024400
 80010b0:	58021000 	.word	0x58021000
 80010b4:	58021400 	.word	0x58021400
 80010b8:	58020400 	.word	0x58020400
 80010bc:	58020c00 	.word	0x58020c00
 80010c0:	11110000 	.word	0x11110000
 80010c4:	58020800 	.word	0x58020800

080010c8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	4603      	mov	r3, r0
 80010d0:	80fb      	strh	r3, [r7, #6]

  HAL_GPIO_TogglePin(GPIOB, LD1_Pin);
 80010d2:	2101      	movs	r1, #1
 80010d4:	4838      	ldr	r0, [pc, #224]	; (80011b8 <HAL_GPIO_EXTI_Callback+0xf0>)
 80010d6:	f004 f9e2 	bl	800549e <HAL_GPIO_TogglePin>
  if(GPIO_Pin==TTL4_Pin)
 80010da:	88fb      	ldrh	r3, [r7, #6]
 80010dc:	2b02      	cmp	r3, #2
 80010de:	d166      	bne.n	80011ae <HAL_GPIO_EXTI_Callback+0xe6>
  {
	  if(HAL_GPIO_ReadPin(GPIOE, TTL1_Pin) == GPIO_PIN_RESET &&
 80010e0:	2101      	movs	r1, #1
 80010e2:	4836      	ldr	r0, [pc, #216]	; (80011bc <HAL_GPIO_EXTI_Callback+0xf4>)
 80010e4:	f004 f9aa 	bl	800543c <HAL_GPIO_ReadPin>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d115      	bne.n	800111a <HAL_GPIO_EXTI_Callback+0x52>
		 HAL_GPIO_ReadPin(TTL2_GPIO_Port, TTL2_Pin) == GPIO_PIN_RESET &&
 80010ee:	2101      	movs	r1, #1
 80010f0:	4833      	ldr	r0, [pc, #204]	; (80011c0 <HAL_GPIO_EXTI_Callback+0xf8>)
 80010f2:	f004 f9a3 	bl	800543c <HAL_GPIO_ReadPin>
 80010f6:	4603      	mov	r3, r0
	  if(HAL_GPIO_ReadPin(GPIOE, TTL1_Pin) == GPIO_PIN_RESET &&
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d10e      	bne.n	800111a <HAL_GPIO_EXTI_Callback+0x52>
		 HAL_GPIO_ReadPin(GPIOE, TTL3_Pin) == GPIO_PIN_RESET){
 80010fc:	2104      	movs	r1, #4
 80010fe:	482f      	ldr	r0, [pc, #188]	; (80011bc <HAL_GPIO_EXTI_Callback+0xf4>)
 8001100:	f004 f99c 	bl	800543c <HAL_GPIO_ReadPin>
 8001104:	4603      	mov	r3, r0
		 HAL_GPIO_ReadPin(TTL2_GPIO_Port, TTL2_Pin) == GPIO_PIN_RESET &&
 8001106:	2b00      	cmp	r3, #0
 8001108:	d107      	bne.n	800111a <HAL_GPIO_EXTI_Callback+0x52>

		  // state 1 row 0 in the DAC's array
		  if(last_r != 0){
 800110a:	4b2e      	ldr	r3, [pc, #184]	; (80011c4 <HAL_GPIO_EXTI_Callback+0xfc>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d04d      	beq.n	80011ae <HAL_GPIO_EXTI_Callback+0xe6>
			  SendToDAC(0);
 8001112:	2000      	movs	r0, #0
 8001114:	f000 f87c 	bl	8001210 <SendToDAC>
		  if(last_r != 0){
 8001118:	e049      	b.n	80011ae <HAL_GPIO_EXTI_Callback+0xe6>
		  }
	  }else if(HAL_GPIO_ReadPin(GPIOE, TTL1_Pin) == GPIO_PIN_SET &&
 800111a:	2101      	movs	r1, #1
 800111c:	4827      	ldr	r0, [pc, #156]	; (80011bc <HAL_GPIO_EXTI_Callback+0xf4>)
 800111e:	f004 f98d 	bl	800543c <HAL_GPIO_ReadPin>
 8001122:	4603      	mov	r3, r0
 8001124:	2b01      	cmp	r3, #1
 8001126:	d115      	bne.n	8001154 <HAL_GPIO_EXTI_Callback+0x8c>
				 HAL_GPIO_ReadPin(TTL2_GPIO_Port, TTL2_Pin) == GPIO_PIN_RESET &&
 8001128:	2101      	movs	r1, #1
 800112a:	4825      	ldr	r0, [pc, #148]	; (80011c0 <HAL_GPIO_EXTI_Callback+0xf8>)
 800112c:	f004 f986 	bl	800543c <HAL_GPIO_ReadPin>
 8001130:	4603      	mov	r3, r0
	  }else if(HAL_GPIO_ReadPin(GPIOE, TTL1_Pin) == GPIO_PIN_SET &&
 8001132:	2b00      	cmp	r3, #0
 8001134:	d10e      	bne.n	8001154 <HAL_GPIO_EXTI_Callback+0x8c>
				 HAL_GPIO_ReadPin(GPIOE, TTL3_Pin) == GPIO_PIN_RESET){
 8001136:	2104      	movs	r1, #4
 8001138:	4820      	ldr	r0, [pc, #128]	; (80011bc <HAL_GPIO_EXTI_Callback+0xf4>)
 800113a:	f004 f97f 	bl	800543c <HAL_GPIO_ReadPin>
 800113e:	4603      	mov	r3, r0
				 HAL_GPIO_ReadPin(TTL2_GPIO_Port, TTL2_Pin) == GPIO_PIN_RESET &&
 8001140:	2b00      	cmp	r3, #0
 8001142:	d107      	bne.n	8001154 <HAL_GPIO_EXTI_Callback+0x8c>

		  // state 2 row 1 in the DAC's array
		  if(last_r != 1){
 8001144:	4b1f      	ldr	r3, [pc, #124]	; (80011c4 <HAL_GPIO_EXTI_Callback+0xfc>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	2b01      	cmp	r3, #1
 800114a:	d030      	beq.n	80011ae <HAL_GPIO_EXTI_Callback+0xe6>
			  SendToDAC(1);
 800114c:	2001      	movs	r0, #1
 800114e:	f000 f85f 	bl	8001210 <SendToDAC>
		  if(last_r != 1){
 8001152:	e02c      	b.n	80011ae <HAL_GPIO_EXTI_Callback+0xe6>
		  }
	  }else if(HAL_GPIO_ReadPin(GPIOE, TTL1_Pin) == GPIO_PIN_RESET &&
 8001154:	2101      	movs	r1, #1
 8001156:	4819      	ldr	r0, [pc, #100]	; (80011bc <HAL_GPIO_EXTI_Callback+0xf4>)
 8001158:	f004 f970 	bl	800543c <HAL_GPIO_ReadPin>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d115      	bne.n	800118e <HAL_GPIO_EXTI_Callback+0xc6>
				 HAL_GPIO_ReadPin(TTL2_GPIO_Port, TTL2_Pin) == GPIO_PIN_SET &&
 8001162:	2101      	movs	r1, #1
 8001164:	4816      	ldr	r0, [pc, #88]	; (80011c0 <HAL_GPIO_EXTI_Callback+0xf8>)
 8001166:	f004 f969 	bl	800543c <HAL_GPIO_ReadPin>
 800116a:	4603      	mov	r3, r0
	  }else if(HAL_GPIO_ReadPin(GPIOE, TTL1_Pin) == GPIO_PIN_RESET &&
 800116c:	2b01      	cmp	r3, #1
 800116e:	d10e      	bne.n	800118e <HAL_GPIO_EXTI_Callback+0xc6>
				 HAL_GPIO_ReadPin(GPIOE, TTL3_Pin) == GPIO_PIN_RESET){
 8001170:	2104      	movs	r1, #4
 8001172:	4812      	ldr	r0, [pc, #72]	; (80011bc <HAL_GPIO_EXTI_Callback+0xf4>)
 8001174:	f004 f962 	bl	800543c <HAL_GPIO_ReadPin>
 8001178:	4603      	mov	r3, r0
				 HAL_GPIO_ReadPin(TTL2_GPIO_Port, TTL2_Pin) == GPIO_PIN_SET &&
 800117a:	2b00      	cmp	r3, #0
 800117c:	d107      	bne.n	800118e <HAL_GPIO_EXTI_Callback+0xc6>

		  // state 3 row 2 in the DAC's array
		  if(last_r != 2){
 800117e:	4b11      	ldr	r3, [pc, #68]	; (80011c4 <HAL_GPIO_EXTI_Callback+0xfc>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	2b02      	cmp	r3, #2
 8001184:	d013      	beq.n	80011ae <HAL_GPIO_EXTI_Callback+0xe6>
			  SendToDAC(2);
 8001186:	2002      	movs	r0, #2
 8001188:	f000 f842 	bl	8001210 <SendToDAC>
		  if(last_r != 2){
 800118c:	e00f      	b.n	80011ae <HAL_GPIO_EXTI_Callback+0xe6>
		  }
	  }else{

		  uart_buf_len = sprintf(uart_bufT, "nothing to send!\r\n");
 800118e:	490e      	ldr	r1, [pc, #56]	; (80011c8 <HAL_GPIO_EXTI_Callback+0x100>)
 8001190:	480e      	ldr	r0, [pc, #56]	; (80011cc <HAL_GPIO_EXTI_Callback+0x104>)
 8001192:	f01e fa95 	bl	801f6c0 <siprintf>
 8001196:	4603      	mov	r3, r0
 8001198:	4a0d      	ldr	r2, [pc, #52]	; (80011d0 <HAL_GPIO_EXTI_Callback+0x108>)
 800119a:	6013      	str	r3, [r2, #0]
		  HAL_UART_Transmit(&huart3, (uint8_t*)uart_bufT, uart_buf_len, 100);
 800119c:	4b0c      	ldr	r3, [pc, #48]	; (80011d0 <HAL_GPIO_EXTI_Callback+0x108>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	b29a      	uxth	r2, r3
 80011a2:	2364      	movs	r3, #100	; 0x64
 80011a4:	4909      	ldr	r1, [pc, #36]	; (80011cc <HAL_GPIO_EXTI_Callback+0x104>)
 80011a6:	480b      	ldr	r0, [pc, #44]	; (80011d4 <HAL_GPIO_EXTI_Callback+0x10c>)
 80011a8:	f007 fd52 	bl	8008c50 <HAL_UART_Transmit>

//		  SendToDAC(0);
	  }
  }
}
 80011ac:	e7ff      	b.n	80011ae <HAL_GPIO_EXTI_Callback+0xe6>
 80011ae:	bf00      	nop
 80011b0:	3708      	adds	r7, #8
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	58020400 	.word	0x58020400
 80011bc:	58021000 	.word	0x58021000
 80011c0:	58020c00 	.word	0x58020c00
 80011c4:	24000088 	.word	0x24000088
 80011c8:	08023194 	.word	0x08023194
 80011cc:	24004768 	.word	0x24004768
 80011d0:	24004754 	.word	0x24004754
 80011d4:	240046c4 	.word	0x240046c4

080011d8 <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback (SPI_HandleTypeDef * hspi){
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]

	HAL_GPIO_WritePin(GPIOE, CS1_Pin|CS2_Pin, SET);
 80011e0:	2201      	movs	r2, #1
 80011e2:	2130      	movs	r1, #48	; 0x30
 80011e4:	4807      	ldr	r0, [pc, #28]	; (8001204 <HAL_SPI_TxCpltCallback+0x2c>)
 80011e6:	f004 f941 	bl	800546c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS3_GPIO_Port, CS3_Pin, SET);
 80011ea:	2201      	movs	r2, #1
 80011ec:	2102      	movs	r1, #2
 80011ee:	4806      	ldr	r0, [pc, #24]	; (8001208 <HAL_SPI_TxCpltCallback+0x30>)
 80011f0:	f004 f93c 	bl	800546c <HAL_GPIO_WritePin>
	state = 0;
 80011f4:	4b05      	ldr	r3, [pc, #20]	; (800120c <HAL_SPI_TxCpltCallback+0x34>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	601a      	str	r2, [r3, #0]
}
 80011fa:	bf00      	nop
 80011fc:	3708      	adds	r7, #8
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	58021000 	.word	0x58021000
 8001208:	58021400 	.word	0x58021400
 800120c:	24004760 	.word	0x24004760

08001210 <SendToDAC>:

void SendToDAC(int r)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b090      	sub	sp, #64	; 0x40
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
	uint32_t t0, t1, t;
	if(DAC[r][3] < 1){
 8001218:	4ab9      	ldr	r2, [pc, #740]	; (8001500 <SendToDAC+0x2f0>)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	015b      	lsls	r3, r3, #5
 800121e:	4413      	add	r3, r2
 8001220:	3318      	adds	r3, #24
 8001222:	ed93 7b00 	vldr	d7, [r3]
 8001226:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800122a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800122e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001232:	d50a      	bpl.n	800124a <SendToDAC+0x3a>
		DAC[r][3] = 1;
 8001234:	4ab2      	ldr	r2, [pc, #712]	; (8001500 <SendToDAC+0x2f0>)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	015b      	lsls	r3, r3, #5
 800123a:	4413      	add	r3, r2
 800123c:	f103 0118 	add.w	r1, r3, #24
 8001240:	f04f 0200 	mov.w	r2, #0
 8001244:	4baf      	ldr	r3, [pc, #700]	; (8001504 <SendToDAC+0x2f4>)
 8001246:	e9c1 2300 	strd	r2, r3, [r1]
	}

	int n = round(DAC[r][3]*58);	// 58 to apply values to DAC
 800124a:	4aad      	ldr	r2, [pc, #692]	; (8001500 <SendToDAC+0x2f0>)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	015b      	lsls	r3, r3, #5
 8001250:	4413      	add	r3, r2
 8001252:	3318      	adds	r3, #24
 8001254:	ed93 7b00 	vldr	d7, [r3]
 8001258:	ed9f 6ba7 	vldr	d6, [pc, #668]	; 80014f8 <SendToDAC+0x2e8>
 800125c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001260:	eeb0 0b47 	vmov.f64	d0, d7
 8001264:	f021 ff1a 	bl	802309c <round>
 8001268:	eeb0 7b40 	vmov.f64	d7, d0
 800126c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001270:	ee17 3a90 	vmov	r3, s15
 8001274:	63fb      	str	r3, [r7, #60]	; 0x3c
//	int n_delay;
//	double dif_lim = 0.01;
	double dif1, dif2, dif3;// max_dif, t_delay;
	uint16_t cs[2] = {CS1_Pin, CS2_Pin};
 8001276:	4ba4      	ldr	r3, [pc, #656]	; (8001508 <SendToDAC+0x2f8>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	60bb      	str	r3, [r7, #8]

	// x? this part need for sending correct value in first loop
	state = 1;
 800127c:	4ba3      	ldr	r3, [pc, #652]	; (800150c <SendToDAC+0x2fc>)
 800127e:	2201      	movs	r2, #1
 8001280:	601a      	str	r2, [r3, #0]
	d_in = abs(round(((DAC[0][0])/v_ref) * max_dec));
 8001282:	4b9f      	ldr	r3, [pc, #636]	; (8001500 <SendToDAC+0x2f0>)
 8001284:	ed93 7b00 	vldr	d7, [r3]
 8001288:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 800128c:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8001290:	eddf 7a9f 	vldr	s15, [pc, #636]	; 8001510 <SendToDAC+0x300>
 8001294:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001298:	ee26 7b07 	vmul.f64	d7, d6, d7
 800129c:	eeb0 0b47 	vmov.f64	d0, d7
 80012a0:	f021 fefc 	bl	802309c <round>
 80012a4:	eeb0 7b40 	vmov.f64	d7, d0
 80012a8:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80012ac:	ee17 3a90 	vmov	r3, s15
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	bfb8      	it	lt
 80012b4:	425b      	neglt	r3, r3
 80012b6:	b29a      	uxth	r2, r3
 80012b8:	4b96      	ldr	r3, [pc, #600]	; (8001514 <SendToDAC+0x304>)
 80012ba:	801a      	strh	r2, [r3, #0]
	spi_buf[0] = 0x00;
 80012bc:	4b96      	ldr	r3, [pc, #600]	; (8001518 <SendToDAC+0x308>)
 80012be:	2200      	movs	r2, #0
 80012c0:	701a      	strb	r2, [r3, #0]
	spi_buf[1] = ((uint8_t*)&d_in)[1];
 80012c2:	4b96      	ldr	r3, [pc, #600]	; (800151c <SendToDAC+0x30c>)
 80012c4:	781a      	ldrb	r2, [r3, #0]
 80012c6:	4b94      	ldr	r3, [pc, #592]	; (8001518 <SendToDAC+0x308>)
 80012c8:	705a      	strb	r2, [r3, #1]
	spi_buf[2] = ((uint8_t*)&d_in)[0];
 80012ca:	4b92      	ldr	r3, [pc, #584]	; (8001514 <SendToDAC+0x304>)
 80012cc:	781a      	ldrb	r2, [r3, #0]
 80012ce:	4b92      	ldr	r3, [pc, #584]	; (8001518 <SendToDAC+0x308>)
 80012d0:	709a      	strb	r2, [r3, #2]

//	HAL_GPIO_WritePin(CS3_GPIO_Port, CS3_Pin, RESET);
//	HAL_GPIO_WritePin(GPIOE, CS1_Pin, RESET);
	HAL_SPI_Transmit_IT(&hspi4, (uint8_t *)&spi_buf, 3);
 80012d2:	2203      	movs	r2, #3
 80012d4:	4990      	ldr	r1, [pc, #576]	; (8001518 <SendToDAC+0x308>)
 80012d6:	4892      	ldr	r0, [pc, #584]	; (8001520 <SendToDAC+0x310>)
 80012d8:	f006 fd92 	bl	8007e00 <HAL_SPI_Transmit_IT>
	while(state){}
 80012dc:	bf00      	nop
 80012de:	4b8b      	ldr	r3, [pc, #556]	; (800150c <SendToDAC+0x2fc>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d1fb      	bne.n	80012de <SendToDAC+0xce>
	// x? this part need for sending correct value in first loop

	dif1 = fabs(DAC[r][0] - DAC[last_r][0])/n;
 80012e6:	4a86      	ldr	r2, [pc, #536]	; (8001500 <SendToDAC+0x2f0>)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	015b      	lsls	r3, r3, #5
 80012ec:	4413      	add	r3, r2
 80012ee:	ed93 6b00 	vldr	d6, [r3]
 80012f2:	4b8c      	ldr	r3, [pc, #560]	; (8001524 <SendToDAC+0x314>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4a82      	ldr	r2, [pc, #520]	; (8001500 <SendToDAC+0x2f0>)
 80012f8:	015b      	lsls	r3, r3, #5
 80012fa:	4413      	add	r3, r2
 80012fc:	ed93 7b00 	vldr	d7, [r3]
 8001300:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001304:	eeb0 5bc7 	vabs.f64	d5, d7
 8001308:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800130a:	ee07 3a90 	vmov	s15, r3
 800130e:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001312:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001316:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
	dif2 = fabs(DAC[r][1] - DAC[last_r][1])/n;
 800131a:	4a79      	ldr	r2, [pc, #484]	; (8001500 <SendToDAC+0x2f0>)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	015b      	lsls	r3, r3, #5
 8001320:	4413      	add	r3, r2
 8001322:	3308      	adds	r3, #8
 8001324:	ed93 6b00 	vldr	d6, [r3]
 8001328:	4b7e      	ldr	r3, [pc, #504]	; (8001524 <SendToDAC+0x314>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a74      	ldr	r2, [pc, #464]	; (8001500 <SendToDAC+0x2f0>)
 800132e:	015b      	lsls	r3, r3, #5
 8001330:	4413      	add	r3, r2
 8001332:	3308      	adds	r3, #8
 8001334:	ed93 7b00 	vldr	d7, [r3]
 8001338:	ee36 7b47 	vsub.f64	d7, d6, d7
 800133c:	eeb0 5bc7 	vabs.f64	d5, d7
 8001340:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001342:	ee07 3a90 	vmov	s15, r3
 8001346:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800134a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800134e:	ed87 7b08 	vstr	d7, [r7, #32]
	dif3 = fabs(DAC[r][2] - DAC[last_r][2])/n;
 8001352:	4a6b      	ldr	r2, [pc, #428]	; (8001500 <SendToDAC+0x2f0>)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	015b      	lsls	r3, r3, #5
 8001358:	4413      	add	r3, r2
 800135a:	3310      	adds	r3, #16
 800135c:	ed93 6b00 	vldr	d6, [r3]
 8001360:	4b70      	ldr	r3, [pc, #448]	; (8001524 <SendToDAC+0x314>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a66      	ldr	r2, [pc, #408]	; (8001500 <SendToDAC+0x2f0>)
 8001366:	015b      	lsls	r3, r3, #5
 8001368:	4413      	add	r3, r2
 800136a:	3310      	adds	r3, #16
 800136c:	ed93 7b00 	vldr	d7, [r3]
 8001370:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001374:	eeb0 5bc7 	vabs.f64	d5, d7
 8001378:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800137a:	ee07 3a90 	vmov	s15, r3
 800137e:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001382:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001386:	ed87 7b06 	vstr	d7, [r7, #24]
//
//			n = round(fabs(DAC[r][2] - DAC[last_r][2])/dif3);
//		}
//	}

	DAC[3][0] = DAC[last_r][0];
 800138a:	4b66      	ldr	r3, [pc, #408]	; (8001524 <SendToDAC+0x314>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4a5c      	ldr	r2, [pc, #368]	; (8001500 <SendToDAC+0x2f0>)
 8001390:	015b      	lsls	r3, r3, #5
 8001392:	4413      	add	r3, r2
 8001394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001398:	4959      	ldr	r1, [pc, #356]	; (8001500 <SendToDAC+0x2f0>)
 800139a:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	DAC[3][1] = DAC[last_r][1];
 800139e:	4b61      	ldr	r3, [pc, #388]	; (8001524 <SendToDAC+0x314>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4a57      	ldr	r2, [pc, #348]	; (8001500 <SendToDAC+0x2f0>)
 80013a4:	015b      	lsls	r3, r3, #5
 80013a6:	4413      	add	r3, r2
 80013a8:	3308      	adds	r3, #8
 80013aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ae:	4954      	ldr	r1, [pc, #336]	; (8001500 <SendToDAC+0x2f0>)
 80013b0:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	DAC[3][2] = DAC[last_r][2];
 80013b4:	4b5b      	ldr	r3, [pc, #364]	; (8001524 <SendToDAC+0x314>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a51      	ldr	r2, [pc, #324]	; (8001500 <SendToDAC+0x2f0>)
 80013ba:	015b      	lsls	r3, r3, #5
 80013bc:	4413      	add	r3, r2
 80013be:	3310      	adds	r3, #16
 80013c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013c4:	494e      	ldr	r1, [pc, #312]	; (8001500 <SendToDAC+0x2f0>)
 80013c6:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
//	t_delay = (DAC[r][3]*1000)/n;	// microsecond [us]
//	t_delay = (1*1000)/n;
//	n_delay = t_delay * 1;		// each 67 step in for equal to 1 us
//	n_delay = 1;

	if(r == 3){
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2b03      	cmp	r3, #3
 80013ce:	d101      	bne.n	80013d4 <SendToDAC+0x1c4>
		n = 1;
 80013d0:	2301      	movs	r3, #1
 80013d2:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	t0 = HAL_GetTick();
 80013d4:	f001 fc0a 	bl	8002bec <HAL_GetTick>
 80013d8:	6178      	str	r0, [r7, #20]
	for(int i = 1; i <= n; i++){
 80013da:	2301      	movs	r3, #1
 80013dc:	63bb      	str	r3, [r7, #56]	; 0x38
 80013de:	e159      	b.n	8001694 <SendToDAC+0x484>

		if(DAC[r][0] > DAC[last_r][0]){
 80013e0:	4a47      	ldr	r2, [pc, #284]	; (8001500 <SendToDAC+0x2f0>)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	015b      	lsls	r3, r3, #5
 80013e6:	4413      	add	r3, r2
 80013e8:	ed93 6b00 	vldr	d6, [r3]
 80013ec:	4b4d      	ldr	r3, [pc, #308]	; (8001524 <SendToDAC+0x314>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a43      	ldr	r2, [pc, #268]	; (8001500 <SendToDAC+0x2f0>)
 80013f2:	015b      	lsls	r3, r3, #5
 80013f4:	4413      	add	r3, r2
 80013f6:	ed93 7b00 	vldr	d7, [r3]
 80013fa:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80013fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001402:	dd0a      	ble.n	800141a <SendToDAC+0x20a>
			DAC[3][0] += dif1;
 8001404:	4b3e      	ldr	r3, [pc, #248]	; (8001500 <SendToDAC+0x2f0>)
 8001406:	ed93 6b18 	vldr	d6, [r3, #96]	; 0x60
 800140a:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 800140e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001412:	4b3b      	ldr	r3, [pc, #236]	; (8001500 <SendToDAC+0x2f0>)
 8001414:	ed83 7b18 	vstr	d7, [r3, #96]	; 0x60
 8001418:	e009      	b.n	800142e <SendToDAC+0x21e>
		}else{
			DAC[3][0] -= dif1;
 800141a:	4b39      	ldr	r3, [pc, #228]	; (8001500 <SendToDAC+0x2f0>)
 800141c:	ed93 6b18 	vldr	d6, [r3, #96]	; 0x60
 8001420:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8001424:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001428:	4b35      	ldr	r3, [pc, #212]	; (8001500 <SendToDAC+0x2f0>)
 800142a:	ed83 7b18 	vstr	d7, [r3, #96]	; 0x60
		}
		if(DAC[r][1] > DAC[last_r][1]){
 800142e:	4a34      	ldr	r2, [pc, #208]	; (8001500 <SendToDAC+0x2f0>)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	015b      	lsls	r3, r3, #5
 8001434:	4413      	add	r3, r2
 8001436:	3308      	adds	r3, #8
 8001438:	ed93 6b00 	vldr	d6, [r3]
 800143c:	4b39      	ldr	r3, [pc, #228]	; (8001524 <SendToDAC+0x314>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a2f      	ldr	r2, [pc, #188]	; (8001500 <SendToDAC+0x2f0>)
 8001442:	015b      	lsls	r3, r3, #5
 8001444:	4413      	add	r3, r2
 8001446:	3308      	adds	r3, #8
 8001448:	ed93 7b00 	vldr	d7, [r3]
 800144c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001450:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001454:	dd0a      	ble.n	800146c <SendToDAC+0x25c>
			DAC[3][1] += dif2;
 8001456:	4b2a      	ldr	r3, [pc, #168]	; (8001500 <SendToDAC+0x2f0>)
 8001458:	ed93 6b1a 	vldr	d6, [r3, #104]	; 0x68
 800145c:	ed97 7b08 	vldr	d7, [r7, #32]
 8001460:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001464:	4b26      	ldr	r3, [pc, #152]	; (8001500 <SendToDAC+0x2f0>)
 8001466:	ed83 7b1a 	vstr	d7, [r3, #104]	; 0x68
 800146a:	e009      	b.n	8001480 <SendToDAC+0x270>
		}else{
			DAC[3][1] -= dif2;
 800146c:	4b24      	ldr	r3, [pc, #144]	; (8001500 <SendToDAC+0x2f0>)
 800146e:	ed93 6b1a 	vldr	d6, [r3, #104]	; 0x68
 8001472:	ed97 7b08 	vldr	d7, [r7, #32]
 8001476:	ee36 7b47 	vsub.f64	d7, d6, d7
 800147a:	4b21      	ldr	r3, [pc, #132]	; (8001500 <SendToDAC+0x2f0>)
 800147c:	ed83 7b1a 	vstr	d7, [r3, #104]	; 0x68
		}
		if(DAC[r][2] > DAC[last_r][2]){
 8001480:	4a1f      	ldr	r2, [pc, #124]	; (8001500 <SendToDAC+0x2f0>)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	015b      	lsls	r3, r3, #5
 8001486:	4413      	add	r3, r2
 8001488:	3310      	adds	r3, #16
 800148a:	ed93 6b00 	vldr	d6, [r3]
 800148e:	4b25      	ldr	r3, [pc, #148]	; (8001524 <SendToDAC+0x314>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4a1b      	ldr	r2, [pc, #108]	; (8001500 <SendToDAC+0x2f0>)
 8001494:	015b      	lsls	r3, r3, #5
 8001496:	4413      	add	r3, r2
 8001498:	3310      	adds	r3, #16
 800149a:	ed93 7b00 	vldr	d7, [r3]
 800149e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80014a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014a6:	dd0a      	ble.n	80014be <SendToDAC+0x2ae>
			DAC[3][2] += dif3;
 80014a8:	4b15      	ldr	r3, [pc, #84]	; (8001500 <SendToDAC+0x2f0>)
 80014aa:	ed93 6b1c 	vldr	d6, [r3, #112]	; 0x70
 80014ae:	ed97 7b06 	vldr	d7, [r7, #24]
 80014b2:	ee36 7b07 	vadd.f64	d7, d6, d7
 80014b6:	4b12      	ldr	r3, [pc, #72]	; (8001500 <SendToDAC+0x2f0>)
 80014b8:	ed83 7b1c 	vstr	d7, [r3, #112]	; 0x70
 80014bc:	e009      	b.n	80014d2 <SendToDAC+0x2c2>
		}else{
			DAC[3][2] -= dif3;
 80014be:	4b10      	ldr	r3, [pc, #64]	; (8001500 <SendToDAC+0x2f0>)
 80014c0:	ed93 6b1c 	vldr	d6, [r3, #112]	; 0x70
 80014c4:	ed97 7b06 	vldr	d7, [r7, #24]
 80014c8:	ee36 7b47 	vsub.f64	d7, d6, d7
 80014cc:	4b0c      	ldr	r3, [pc, #48]	; (8001500 <SendToDAC+0x2f0>)
 80014ce:	ed83 7b1c 	vstr	d7, [r3, #112]	; 0x70
		}

		for(int j = 0; j < 3; j++){
 80014d2:	2300      	movs	r3, #0
 80014d4:	637b      	str	r3, [r7, #52]	; 0x34
 80014d6:	e0d6      	b.n	8001686 <SendToDAC+0x476>

			  state = 1;
 80014d8:	4b0c      	ldr	r3, [pc, #48]	; (800150c <SendToDAC+0x2fc>)
 80014da:	2201      	movs	r2, #1
 80014dc:	601a      	str	r2, [r3, #0]

			  switch(j){
 80014de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014e0:	2b02      	cmp	r3, #2
 80014e2:	d053      	beq.n	800158c <SendToDAC+0x37c>
 80014e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014e6:	2b02      	cmp	r3, #2
 80014e8:	dc6a      	bgt.n	80015c0 <SendToDAC+0x3b0>
 80014ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d01b      	beq.n	8001528 <SendToDAC+0x318>
 80014f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014f2:	2b01      	cmp	r3, #1
 80014f4:	d030      	beq.n	8001558 <SendToDAC+0x348>
 80014f6:	e063      	b.n	80015c0 <SendToDAC+0x3b0>
 80014f8:	00000000 	.word	0x00000000
 80014fc:	404d0000 	.word	0x404d0000
 8001500:	24000008 	.word	0x24000008
 8001504:	3ff00000 	.word	0x3ff00000
 8001508:	080231d8 	.word	0x080231d8
 800150c:	24004760 	.word	0x24004760
 8001510:	00010000 	.word	0x00010000
 8001514:	24004764 	.word	0x24004764
 8001518:	240046a4 	.word	0x240046a4
 800151c:	24004765 	.word	0x24004765
 8001520:	24004b54 	.word	0x24004b54
 8001524:	24000088 	.word	0x24000088

			  case 0:
				  if(DAC[3][j] >= 0){
 8001528:	4a6c      	ldr	r2, [pc, #432]	; (80016dc <SendToDAC+0x4cc>)
 800152a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800152c:	330c      	adds	r3, #12
 800152e:	00db      	lsls	r3, r3, #3
 8001530:	4413      	add	r3, r2
 8001532:	ed93 7b00 	vldr	d7, [r3]
 8001536:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800153a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800153e:	db05      	blt.n	800154c <SendToDAC+0x33c>
					  HAL_GPIO_WritePin(DIR1_GPIO_Port, DIR1_Pin, GPIO_PIN_SET);
 8001540:	2201      	movs	r2, #1
 8001542:	2180      	movs	r1, #128	; 0x80
 8001544:	4866      	ldr	r0, [pc, #408]	; (80016e0 <SendToDAC+0x4d0>)
 8001546:	f003 ff91 	bl	800546c <HAL_GPIO_WritePin>
				  }else{
					  HAL_GPIO_WritePin(DIR1_GPIO_Port, DIR1_Pin, GPIO_PIN_RESET);
				  }
				  break;
 800154a:	e039      	b.n	80015c0 <SendToDAC+0x3b0>
					  HAL_GPIO_WritePin(DIR1_GPIO_Port, DIR1_Pin, GPIO_PIN_RESET);
 800154c:	2200      	movs	r2, #0
 800154e:	2180      	movs	r1, #128	; 0x80
 8001550:	4863      	ldr	r0, [pc, #396]	; (80016e0 <SendToDAC+0x4d0>)
 8001552:	f003 ff8b 	bl	800546c <HAL_GPIO_WritePin>
				  break;
 8001556:	e033      	b.n	80015c0 <SendToDAC+0x3b0>
			  case 1:
				  if(DAC[3][j] >= 0){
 8001558:	4a60      	ldr	r2, [pc, #384]	; (80016dc <SendToDAC+0x4cc>)
 800155a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800155c:	330c      	adds	r3, #12
 800155e:	00db      	lsls	r3, r3, #3
 8001560:	4413      	add	r3, r2
 8001562:	ed93 7b00 	vldr	d7, [r3]
 8001566:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800156a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800156e:	db06      	blt.n	800157e <SendToDAC+0x36e>
					  HAL_GPIO_WritePin(GPIOB, DIR2_Pin, GPIO_PIN_SET);
 8001570:	2201      	movs	r2, #1
 8001572:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001576:	485b      	ldr	r0, [pc, #364]	; (80016e4 <SendToDAC+0x4d4>)
 8001578:	f003 ff78 	bl	800546c <HAL_GPIO_WritePin>
				  }else{
					  HAL_GPIO_WritePin(GPIOB, DIR2_Pin, GPIO_PIN_RESET);
				  }
				  break;
 800157c:	e020      	b.n	80015c0 <SendToDAC+0x3b0>
					  HAL_GPIO_WritePin(GPIOB, DIR2_Pin, GPIO_PIN_RESET);
 800157e:	2200      	movs	r2, #0
 8001580:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001584:	4857      	ldr	r0, [pc, #348]	; (80016e4 <SendToDAC+0x4d4>)
 8001586:	f003 ff71 	bl	800546c <HAL_GPIO_WritePin>
				  break;
 800158a:	e019      	b.n	80015c0 <SendToDAC+0x3b0>
			  case 2:
				  if(DAC[3][j] >= 0){
 800158c:	4a53      	ldr	r2, [pc, #332]	; (80016dc <SendToDAC+0x4cc>)
 800158e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001590:	330c      	adds	r3, #12
 8001592:	00db      	lsls	r3, r3, #3
 8001594:	4413      	add	r3, r2
 8001596:	ed93 7b00 	vldr	d7, [r3]
 800159a:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800159e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015a2:	db06      	blt.n	80015b2 <SendToDAC+0x3a2>
					  HAL_GPIO_WritePin(GPIOB, DIR3_Pin, GPIO_PIN_SET);
 80015a4:	2201      	movs	r2, #1
 80015a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015aa:	484e      	ldr	r0, [pc, #312]	; (80016e4 <SendToDAC+0x4d4>)
 80015ac:	f003 ff5e 	bl	800546c <HAL_GPIO_WritePin>
				  }else{
					  HAL_GPIO_WritePin(GPIOB, DIR3_Pin, GPIO_PIN_RESET);
				  }
				  break;
 80015b0:	e005      	b.n	80015be <SendToDAC+0x3ae>
					  HAL_GPIO_WritePin(GPIOB, DIR3_Pin, GPIO_PIN_RESET);
 80015b2:	2200      	movs	r2, #0
 80015b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015b8:	484a      	ldr	r0, [pc, #296]	; (80016e4 <SendToDAC+0x4d4>)
 80015ba:	f003 ff57 	bl	800546c <HAL_GPIO_WritePin>
				  break;
 80015be:	bf00      	nop
			  }

			  if(fabs(DAC[3][j]) == v_ref){
 80015c0:	4a46      	ldr	r2, [pc, #280]	; (80016dc <SendToDAC+0x4cc>)
 80015c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015c4:	330c      	adds	r3, #12
 80015c6:	00db      	lsls	r3, r3, #3
 80015c8:	4413      	add	r3, r2
 80015ca:	ed93 7b00 	vldr	d7, [r3]
 80015ce:	eeb0 7bc7 	vabs.f64	d7, d7
 80015d2:	eeb0 6b08 	vmov.f64	d6, #8	; 0x40400000  3.0
 80015d6:	eeb4 7b46 	vcmp.f64	d7, d6
 80015da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015de:	d104      	bne.n	80015ea <SendToDAC+0x3da>

				  d_in = 0xffff;
 80015e0:	4b41      	ldr	r3, [pc, #260]	; (80016e8 <SendToDAC+0x4d8>)
 80015e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015e6:	801a      	strh	r2, [r3, #0]
 80015e8:	e020      	b.n	800162c <SendToDAC+0x41c>
			  }else{

				  d_in = abs(round((DAC[3][j]/v_ref) * max_dec));
 80015ea:	4a3c      	ldr	r2, [pc, #240]	; (80016dc <SendToDAC+0x4cc>)
 80015ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015ee:	330c      	adds	r3, #12
 80015f0:	00db      	lsls	r3, r3, #3
 80015f2:	4413      	add	r3, r2
 80015f4:	ed93 7b00 	vldr	d7, [r3]
 80015f8:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 80015fc:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8001600:	eddf 7a3a 	vldr	s15, [pc, #232]	; 80016ec <SendToDAC+0x4dc>
 8001604:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001608:	ee26 7b07 	vmul.f64	d7, d6, d7
 800160c:	eeb0 0b47 	vmov.f64	d0, d7
 8001610:	f021 fd44 	bl	802309c <round>
 8001614:	eeb0 7b40 	vmov.f64	d7, d0
 8001618:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800161c:	ee17 3a90 	vmov	r3, s15
 8001620:	2b00      	cmp	r3, #0
 8001622:	bfb8      	it	lt
 8001624:	425b      	neglt	r3, r3
 8001626:	b29a      	uxth	r2, r3
 8001628:	4b2f      	ldr	r3, [pc, #188]	; (80016e8 <SendToDAC+0x4d8>)
 800162a:	801a      	strh	r2, [r3, #0]
			  }

			  spi_buf[0] = 0x00;
 800162c:	4b30      	ldr	r3, [pc, #192]	; (80016f0 <SendToDAC+0x4e0>)
 800162e:	2200      	movs	r2, #0
 8001630:	701a      	strb	r2, [r3, #0]
			  spi_buf[1] = ((uint8_t*)&d_in)[1];
 8001632:	4b30      	ldr	r3, [pc, #192]	; (80016f4 <SendToDAC+0x4e4>)
 8001634:	781a      	ldrb	r2, [r3, #0]
 8001636:	4b2e      	ldr	r3, [pc, #184]	; (80016f0 <SendToDAC+0x4e0>)
 8001638:	705a      	strb	r2, [r3, #1]
			  spi_buf[2] = ((uint8_t*)&d_in)[0];
 800163a:	4b2b      	ldr	r3, [pc, #172]	; (80016e8 <SendToDAC+0x4d8>)
 800163c:	781a      	ldrb	r2, [r3, #0]
 800163e:	4b2c      	ldr	r3, [pc, #176]	; (80016f0 <SendToDAC+0x4e0>)
 8001640:	709a      	strb	r2, [r3, #2]
			  // send value to DAC
			  if(j == 2){
 8001642:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001644:	2b02      	cmp	r3, #2
 8001646:	d105      	bne.n	8001654 <SendToDAC+0x444>
				  HAL_GPIO_WritePin(CS3_GPIO_Port, CS3_Pin, RESET);
 8001648:	2200      	movs	r2, #0
 800164a:	2102      	movs	r1, #2
 800164c:	482a      	ldr	r0, [pc, #168]	; (80016f8 <SendToDAC+0x4e8>)
 800164e:	f003 ff0d 	bl	800546c <HAL_GPIO_WritePin>
 8001652:	e00b      	b.n	800166c <SendToDAC+0x45c>

			  }else{
				  HAL_GPIO_WritePin(GPIOE, cs[j], RESET);
 8001654:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001656:	005b      	lsls	r3, r3, #1
 8001658:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800165c:	4413      	add	r3, r2
 800165e:	f833 3c38 	ldrh.w	r3, [r3, #-56]
 8001662:	2200      	movs	r2, #0
 8001664:	4619      	mov	r1, r3
 8001666:	4825      	ldr	r0, [pc, #148]	; (80016fc <SendToDAC+0x4ec>)
 8001668:	f003 ff00 	bl	800546c <HAL_GPIO_WritePin>
			  }
			  HAL_SPI_Transmit_IT(&hspi4, (uint8_t *)&spi_buf, 3);
 800166c:	2203      	movs	r2, #3
 800166e:	4920      	ldr	r1, [pc, #128]	; (80016f0 <SendToDAC+0x4e0>)
 8001670:	4823      	ldr	r0, [pc, #140]	; (8001700 <SendToDAC+0x4f0>)
 8001672:	f006 fbc5 	bl	8007e00 <HAL_SPI_Transmit_IT>

			  while(state){}
 8001676:	bf00      	nop
 8001678:	4b22      	ldr	r3, [pc, #136]	; (8001704 <SendToDAC+0x4f4>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d1fb      	bne.n	8001678 <SendToDAC+0x468>
		for(int j = 0; j < 3; j++){
 8001680:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001682:	3301      	adds	r3, #1
 8001684:	637b      	str	r3, [r7, #52]	; 0x34
 8001686:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001688:	2b02      	cmp	r3, #2
 800168a:	f77f af25 	ble.w	80014d8 <SendToDAC+0x2c8>
	for(int i = 1; i <= n; i++){
 800168e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001690:	3301      	adds	r3, #1
 8001692:	63bb      	str	r3, [r7, #56]	; 0x38
 8001694:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001696:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001698:	429a      	cmp	r2, r3
 800169a:	f77f aea1 	ble.w	80013e0 <SendToDAC+0x1d0>

		// make delay in us
//		for(int k = 0; k < n_delay; k++){}
	}

	t1 = HAL_GetTick();
 800169e:	f001 faa5 	bl	8002bec <HAL_GetTick>
 80016a2:	6138      	str	r0, [r7, #16]
	t = t1 - t0;
 80016a4:	693a      	ldr	r2, [r7, #16]
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	60fb      	str	r3, [r7, #12]
	uart_buf_len = sprintf(uart_bufT, "different time is: %lu ms; NO. steps are: %d\r\n", t, n);
 80016ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80016ae:	68fa      	ldr	r2, [r7, #12]
 80016b0:	4915      	ldr	r1, [pc, #84]	; (8001708 <SendToDAC+0x4f8>)
 80016b2:	4816      	ldr	r0, [pc, #88]	; (800170c <SendToDAC+0x4fc>)
 80016b4:	f01e f804 	bl	801f6c0 <siprintf>
 80016b8:	4603      	mov	r3, r0
 80016ba:	4a15      	ldr	r2, [pc, #84]	; (8001710 <SendToDAC+0x500>)
 80016bc:	6013      	str	r3, [r2, #0]
	HAL_UART_Transmit(&huart3, (uint8_t*)uart_bufT, uart_buf_len, 100);
 80016be:	4b14      	ldr	r3, [pc, #80]	; (8001710 <SendToDAC+0x500>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	b29a      	uxth	r2, r3
 80016c4:	2364      	movs	r3, #100	; 0x64
 80016c6:	4911      	ldr	r1, [pc, #68]	; (800170c <SendToDAC+0x4fc>)
 80016c8:	4812      	ldr	r0, [pc, #72]	; (8001714 <SendToDAC+0x504>)
 80016ca:	f007 fac1 	bl	8008c50 <HAL_UART_Transmit>

	last_r = r;
 80016ce:	4a12      	ldr	r2, [pc, #72]	; (8001718 <SendToDAC+0x508>)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6013      	str	r3, [r2, #0]
}
 80016d4:	bf00      	nop
 80016d6:	3740      	adds	r7, #64	; 0x40
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	24000008 	.word	0x24000008
 80016e0:	58020c00 	.word	0x58020c00
 80016e4:	58020400 	.word	0x58020400
 80016e8:	24004764 	.word	0x24004764
 80016ec:	00010000 	.word	0x00010000
 80016f0:	240046a4 	.word	0x240046a4
 80016f4:	24004765 	.word	0x24004765
 80016f8:	58021400 	.word	0x58021400
 80016fc:	58021000 	.word	0x58021000
 8001700:	24004b54 	.word	0x24004b54
 8001704:	24004760 	.word	0x24004760
 8001708:	080231a8 	.word	0x080231a8
 800170c:	24004768 	.word	0x24004768
 8001710:	24004754 	.word	0x24004754
 8001714:	240046c4 	.word	0x240046c4
 8001718:	24000088 	.word	0x24000088

0800171c <AcceptanceNewClient>:

void AcceptanceNewClient(int * argument)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b0b8      	sub	sp, #224	; 0xe0
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]

	char msg[200] = {};
 8001724:	2300      	movs	r3, #0
 8001726:	60fb      	str	r3, [r7, #12]
 8001728:	f107 0310 	add.w	r3, r7, #16
 800172c:	22c4      	movs	r2, #196	; 0xc4
 800172e:	2100      	movs	r1, #0
 8001730:	4618      	mov	r0, r3
 8001732:	f01d f919 	bl	801e968 <memset>
	int newVal = 0, state = 1;
 8001736:	2300      	movs	r3, #0
 8001738:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800173c:	2301      	movs	r3, #1
 800173e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	int conn = *argument;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

	while(1)
	{

		if(newVal == 3){
 800174a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800174e:	2b03      	cmp	r3, #3
 8001750:	d116      	bne.n	8001780 <AcceptanceNewClient+0x64>

			close(conn);
 8001752:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 8001756:	f00e fdb3 	bl	80102c0 <lwip_close>
			uart_buf_len = sprintf(uart_bufT, "finished! \r\n");
 800175a:	4925      	ldr	r1, [pc, #148]	; (80017f0 <AcceptanceNewClient+0xd4>)
 800175c:	4825      	ldr	r0, [pc, #148]	; (80017f4 <AcceptanceNewClient+0xd8>)
 800175e:	f01d ffaf 	bl	801f6c0 <siprintf>
 8001762:	4603      	mov	r3, r0
 8001764:	4a24      	ldr	r2, [pc, #144]	; (80017f8 <AcceptanceNewClient+0xdc>)
 8001766:	6013      	str	r3, [r2, #0]
			HAL_UART_Transmit(&huart3, (uint8_t*)uart_bufT, uart_buf_len, 100);
 8001768:	4b23      	ldr	r3, [pc, #140]	; (80017f8 <AcceptanceNewClient+0xdc>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	b29a      	uxth	r2, r3
 800176e:	2364      	movs	r3, #100	; 0x64
 8001770:	4920      	ldr	r1, [pc, #128]	; (80017f4 <AcceptanceNewClient+0xd8>)
 8001772:	4822      	ldr	r0, [pc, #136]	; (80017fc <AcceptanceNewClient+0xe0>)
 8001774:	f007 fa6c 	bl	8008c50 <HAL_UART_Transmit>
			osThreadTerminate(NULL);
 8001778:	2000      	movs	r0, #0
 800177a:	f009 f85a 	bl	800a832 <osThreadTerminate>
 800177e:	e033      	b.n	80017e8 <AcceptanceNewClient+0xcc>
//			osThreadSuspend(NULL);
		}else if(newVal == 2){
 8001780:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001784:	2b02      	cmp	r3, #2
 8001786:	d106      	bne.n	8001796 <AcceptanceNewClient+0x7a>

			last_r = 3;
 8001788:	4b1d      	ldr	r3, [pc, #116]	; (8001800 <AcceptanceNewClient+0xe4>)
 800178a:	2203      	movs	r2, #3
 800178c:	601a      	str	r2, [r3, #0]
			newVal = 0;
 800178e:	2300      	movs	r3, #0
 8001790:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8001794:	e028      	b.n	80017e8 <AcceptanceNewClient+0xcc>
		}else{

			memset(msg, 0, sizeof msg);
 8001796:	f107 030c 	add.w	r3, r7, #12
 800179a:	22c8      	movs	r2, #200	; 0xc8
 800179c:	2100      	movs	r1, #0
 800179e:	4618      	mov	r0, r3
 80017a0:	f01d f8e2 	bl	801e968 <memset>
			state = read(conn, (char*)msg, 200);
 80017a4:	f107 030c 	add.w	r3, r7, #12
 80017a8:	22c8      	movs	r2, #200	; 0xc8
 80017aa:	4619      	mov	r1, r3
 80017ac:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 80017b0:	f00f f946 	bl	8010a40 <lwip_read>
 80017b4:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
			newVal = ExtractMessage(msg);
 80017b8:	f107 030c 	add.w	r3, r7, #12
 80017bc:	4618      	mov	r0, r3
 80017be:	f000 f821 	bl	8001804 <ExtractMessage>
 80017c2:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
			send(conn, (char*)uart_bufT, strlen(uart_bufT), 0);	// we have to use send instead of write for avoiding of crash
 80017c6:	480b      	ldr	r0, [pc, #44]	; (80017f4 <AcceptanceNewClient+0xd8>)
 80017c8:	f7fe fd94 	bl	80002f4 <strlen>
 80017cc:	4602      	mov	r2, r0
 80017ce:	2300      	movs	r3, #0
 80017d0:	4908      	ldr	r1, [pc, #32]	; (80017f4 <AcceptanceNewClient+0xd8>)
 80017d2:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 80017d6:	f00f f949 	bl	8010a6c <lwip_send>

			if(state <= 0){
 80017da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80017de:	2b00      	cmp	r3, #0
 80017e0:	dc02      	bgt.n	80017e8 <AcceptanceNewClient+0xcc>

				newVal = 3;
 80017e2:	2303      	movs	r3, #3
 80017e4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
			}
		}
		osDelay(100);
 80017e8:	2064      	movs	r0, #100	; 0x64
 80017ea:	f009 f82e 	bl	800a84a <osDelay>
		if(newVal == 3){
 80017ee:	e7ac      	b.n	800174a <AcceptanceNewClient+0x2e>
 80017f0:	080231dc 	.word	0x080231dc
 80017f4:	24004768 	.word	0x24004768
 80017f8:	24004754 	.word	0x24004754
 80017fc:	240046c4 	.word	0x240046c4
 8001800:	24000088 	.word	0x24000088

08001804 <ExtractMessage>:
	}
}

int ExtractMessage(char* msg){
 8001804:	b580      	push	{r7, lr}
 8001806:	b0be      	sub	sp, #248	; 0xf8
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]

	char temp[100] = {};
 800180c:	2300      	movs	r3, #0
 800180e:	66bb      	str	r3, [r7, #104]	; 0x68
 8001810:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001814:	2260      	movs	r2, #96	; 0x60
 8001816:	2100      	movs	r1, #0
 8001818:	4618      	mov	r0, r3
 800181a:	f01d f8a5 	bl	801e968 <memset>
	int j = 0, k = 0, f1 = 1, f2 = 1, f3 = 0;
 800181e:	2300      	movs	r3, #0
 8001820:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8001824:	2300      	movs	r3, #0
 8001826:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800182a:	2301      	movs	r3, #1
 800182c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001830:	2301      	movs	r3, #1
 8001832:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001836:	2300      	movs	r3, #0
 8001838:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
	double temp_dac[3][4];

	for(int a = 0; a < 3; a++){
 800183c:	2300      	movs	r3, #0
 800183e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001842:	e029      	b.n	8001898 <ExtractMessage+0x94>
		for(int b = 0; b < 4; b++){
 8001844:	2300      	movs	r3, #0
 8001846:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800184a:	e01c      	b.n	8001886 <ExtractMessage+0x82>
			temp_dac[a][b] = DAC[a][b];
 800184c:	49c8      	ldr	r1, [pc, #800]	; (8001b70 <ExtractMessage+0x36c>)
 800184e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001852:	009a      	lsls	r2, r3, #2
 8001854:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001858:	4413      	add	r3, r2
 800185a:	00db      	lsls	r3, r3, #3
 800185c:	440b      	add	r3, r1
 800185e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001862:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 8001866:	0088      	lsls	r0, r1, #2
 8001868:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 800186c:	4401      	add	r1, r0
 800186e:	00c9      	lsls	r1, r1, #3
 8001870:	f107 00f8 	add.w	r0, r7, #248	; 0xf8
 8001874:	4401      	add	r1, r0
 8001876:	39f0      	subs	r1, #240	; 0xf0
 8001878:	e9c1 2300 	strd	r2, r3, [r1]
		for(int b = 0; b < 4; b++){
 800187c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001880:	3301      	adds	r3, #1
 8001882:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001886:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800188a:	2b03      	cmp	r3, #3
 800188c:	ddde      	ble.n	800184c <ExtractMessage+0x48>
	for(int a = 0; a < 3; a++){
 800188e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001892:	3301      	adds	r3, #1
 8001894:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001898:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800189c:	2b02      	cmp	r3, #2
 800189e:	ddd1      	ble.n	8001844 <ExtractMessage+0x40>
		}
	}

	for(int i = 0; i < strlen(msg); i++){
 80018a0:	2300      	movs	r3, #0
 80018a2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80018a6:	e3a9      	b.n	8001ffc <ExtractMessage+0x7f8>

		if(msg[i] == ':'){
 80018a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80018ac:	687a      	ldr	r2, [r7, #4]
 80018ae:	4413      	add	r3, r2
 80018b0:	781b      	ldrb	r3, [r3, #0]
 80018b2:	2b3a      	cmp	r3, #58	; 0x3a
 80018b4:	f040 8332 	bne.w	8001f1c <ExtractMessage+0x718>

			if(strcmp(temp, "DAC") != 0){
 80018b8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80018bc:	49ad      	ldr	r1, [pc, #692]	; (8001b74 <ExtractMessage+0x370>)
 80018be:	4618      	mov	r0, r3
 80018c0:	f7fe fd0e 	bl	80002e0 <strcmp>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d013      	beq.n	80018f2 <ExtractMessage+0xee>

				uart_buf_len = sprintf(uart_bufT, "wrong msg: %s\r\n\n%s\r\n", (char*)temp, (char*)help);
 80018ca:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80018ce:	4baa      	ldr	r3, [pc, #680]	; (8001b78 <ExtractMessage+0x374>)
 80018d0:	49aa      	ldr	r1, [pc, #680]	; (8001b7c <ExtractMessage+0x378>)
 80018d2:	48ab      	ldr	r0, [pc, #684]	; (8001b80 <ExtractMessage+0x37c>)
 80018d4:	f01d fef4 	bl	801f6c0 <siprintf>
 80018d8:	4603      	mov	r3, r0
 80018da:	4aaa      	ldr	r2, [pc, #680]	; (8001b84 <ExtractMessage+0x380>)
 80018dc:	6013      	str	r3, [r2, #0]
				HAL_UART_Transmit(&huart3, (uint8_t*)uart_bufT, uart_buf_len, 100);
 80018de:	4ba9      	ldr	r3, [pc, #676]	; (8001b84 <ExtractMessage+0x380>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	b29a      	uxth	r2, r3
 80018e4:	2364      	movs	r3, #100	; 0x64
 80018e6:	49a6      	ldr	r1, [pc, #664]	; (8001b80 <ExtractMessage+0x37c>)
 80018e8:	48a7      	ldr	r0, [pc, #668]	; (8001b88 <ExtractMessage+0x384>)
 80018ea:	f007 f9b1 	bl	8008c50 <HAL_UART_Transmit>
				return 0;
 80018ee:	2300      	movs	r3, #0
 80018f0:	e3a0      	b.n	8002034 <ExtractMessage+0x830>
			}else{

				f1 = 1;
 80018f2:	2301      	movs	r3, #1
 80018f4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
				i++;	// for removing first space after DAC:
 80018f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80018fc:	3301      	adds	r3, #1
 80018fe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
				j = 0;
 8001902:	2300      	movs	r3, #0
 8001904:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
				memset(temp, 0, sizeof temp);
 8001908:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800190c:	2264      	movs	r2, #100	; 0x64
 800190e:	2100      	movs	r1, #0
 8001910:	4618      	mov	r0, r3
 8001912:	f01d f829 	bl	801e968 <memset>
				while(f1){
 8001916:	e2ea      	b.n	8001eee <ExtractMessage+0x6ea>

					i++;
 8001918:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800191c:	3301      	adds	r3, #1
 800191e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

					if(msg[i] == ' ' || msg[i] == ':' || msg[i] == ';' || i >= strlen(msg)){
 8001922:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001926:	687a      	ldr	r2, [r7, #4]
 8001928:	4413      	add	r3, r2
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	2b20      	cmp	r3, #32
 800192e:	d016      	beq.n	800195e <ExtractMessage+0x15a>
 8001930:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001934:	687a      	ldr	r2, [r7, #4]
 8001936:	4413      	add	r3, r2
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	2b3a      	cmp	r3, #58	; 0x3a
 800193c:	d00f      	beq.n	800195e <ExtractMessage+0x15a>
 800193e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001942:	687a      	ldr	r2, [r7, #4]
 8001944:	4413      	add	r3, r2
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	2b3b      	cmp	r3, #59	; 0x3b
 800194a:	d008      	beq.n	800195e <ExtractMessage+0x15a>
 800194c:	6878      	ldr	r0, [r7, #4]
 800194e:	f7fe fcd1 	bl	80002f4 <strlen>
 8001952:	4602      	mov	r2, r0
 8001954:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001958:	429a      	cmp	r2, r3
 800195a:	f200 827d 	bhi.w	8001e58 <ExtractMessage+0x654>

						f2 = 1;
 800195e:	2301      	movs	r3, #1
 8001960:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec

						if(strcmp(temp, "000") == 0){
 8001964:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001968:	4988      	ldr	r1, [pc, #544]	; (8001b8c <ExtractMessage+0x388>)
 800196a:	4618      	mov	r0, r3
 800196c:	f7fe fcb8 	bl	80002e0 <strcmp>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	f040 80b9 	bne.w	8001aea <ExtractMessage+0x2e6>

							j = 0;
 8001978:	2300      	movs	r3, #0
 800197a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
							memset(temp, 0, sizeof temp);
 800197e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001982:	2264      	movs	r2, #100	; 0x64
 8001984:	2100      	movs	r1, #0
 8001986:	4618      	mov	r0, r3
 8001988:	f01c ffee 	bl	801e968 <memset>

							while(f2){
 800198c:	e0a7      	b.n	8001ade <ExtractMessage+0x2da>

								i++;
 800198e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001992:	3301      	adds	r3, #1
 8001994:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

								if(msg[i] == ';'){
 8001998:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800199c:	687a      	ldr	r2, [r7, #4]
 800199e:	4413      	add	r3, r2
 80019a0:	781b      	ldrb	r3, [r3, #0]
 80019a2:	2b3b      	cmp	r3, #59	; 0x3b
 80019a4:	d11f      	bne.n	80019e6 <ExtractMessage+0x1e2>

									temp_dac[0][k] = atof(temp);
 80019a6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80019aa:	4618      	mov	r0, r3
 80019ac:	f01c ff7e 	bl	801e8ac <atof>
 80019b0:	eeb0 7b40 	vmov.f64	d7, d0
 80019b4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80019b8:	00db      	lsls	r3, r3, #3
 80019ba:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 80019be:	4413      	add	r3, r2
 80019c0:	3bf0      	subs	r3, #240	; 0xf0
 80019c2:	ed83 7b00 	vstr	d7, [r3]
									k++;
 80019c6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80019ca:	3301      	adds	r3, #1
 80019cc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
									j = 0;
 80019d0:	2300      	movs	r3, #0
 80019d2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
									memset(temp, 0, sizeof temp);
 80019d6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80019da:	2264      	movs	r2, #100	; 0x64
 80019dc:	2100      	movs	r1, #0
 80019de:	4618      	mov	r0, r3
 80019e0:	f01c ffc2 	bl	801e968 <memset>
 80019e4:	e051      	b.n	8001a8a <ExtractMessage+0x286>
								}else if(i >= strlen(msg)){
 80019e6:	6878      	ldr	r0, [r7, #4]
 80019e8:	f7fe fc84 	bl	80002f4 <strlen>
 80019ec:	4602      	mov	r2, r0
 80019ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80019f2:	429a      	cmp	r2, r3
 80019f4:	d837      	bhi.n	8001a66 <ExtractMessage+0x262>

									if(k == 3){
 80019f6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80019fa:	2b03      	cmp	r3, #3
 80019fc:	d11f      	bne.n	8001a3e <ExtractMessage+0x23a>

										temp_dac[0][k] = atof(temp);
 80019fe:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001a02:	4618      	mov	r0, r3
 8001a04:	f01c ff52 	bl	801e8ac <atof>
 8001a08:	eeb0 7b40 	vmov.f64	d7, d0
 8001a0c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001a10:	00db      	lsls	r3, r3, #3
 8001a12:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 8001a16:	4413      	add	r3, r2
 8001a18:	3bf0      	subs	r3, #240	; 0xf0
 8001a1a:	ed83 7b00 	vstr	d7, [r3]
										k++;
 8001a1e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001a22:	3301      	adds	r3, #1
 8001a24:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
										j = 0;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
										memset(temp, 0, sizeof temp);
 8001a2e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001a32:	2264      	movs	r2, #100	; 0x64
 8001a34:	2100      	movs	r1, #0
 8001a36:	4618      	mov	r0, r3
 8001a38:	f01c ff96 	bl	801e968 <memset>
 8001a3c:	e025      	b.n	8001a8a <ExtractMessage+0x286>
									}else{

										uart_buf_len = sprintf(uart_bufT, "the format is wrong: %s\r\n\n%s\r\n", (char*)temp, (char*)help);
 8001a3e:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8001a42:	4b4d      	ldr	r3, [pc, #308]	; (8001b78 <ExtractMessage+0x374>)
 8001a44:	4952      	ldr	r1, [pc, #328]	; (8001b90 <ExtractMessage+0x38c>)
 8001a46:	484e      	ldr	r0, [pc, #312]	; (8001b80 <ExtractMessage+0x37c>)
 8001a48:	f01d fe3a 	bl	801f6c0 <siprintf>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	4a4d      	ldr	r2, [pc, #308]	; (8001b84 <ExtractMessage+0x380>)
 8001a50:	6013      	str	r3, [r2, #0]
										HAL_UART_Transmit(&huart3, (uint8_t*)uart_bufT, uart_buf_len, 100);
 8001a52:	4b4c      	ldr	r3, [pc, #304]	; (8001b84 <ExtractMessage+0x380>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	b29a      	uxth	r2, r3
 8001a58:	2364      	movs	r3, #100	; 0x64
 8001a5a:	4949      	ldr	r1, [pc, #292]	; (8001b80 <ExtractMessage+0x37c>)
 8001a5c:	484a      	ldr	r0, [pc, #296]	; (8001b88 <ExtractMessage+0x384>)
 8001a5e:	f007 f8f7 	bl	8008c50 <HAL_UART_Transmit>
										return 0;
 8001a62:	2300      	movs	r3, #0
 8001a64:	e2e6      	b.n	8002034 <ExtractMessage+0x830>
									}
								}else{

									temp[j] = msg[i];
 8001a66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001a6a:	687a      	ldr	r2, [r7, #4]
 8001a6c:	4413      	add	r3, r2
 8001a6e:	7819      	ldrb	r1, [r3, #0]
 8001a70:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8001a74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001a78:	4413      	add	r3, r2
 8001a7a:	460a      	mov	r2, r1
 8001a7c:	701a      	strb	r2, [r3, #0]
									j++;
 8001a7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001a82:	3301      	adds	r3, #1
 8001a84:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
									continue;
 8001a88:	e029      	b.n	8001ade <ExtractMessage+0x2da>
								}
								if(k > 3){
 8001a8a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001a8e:	2b03      	cmp	r3, #3
 8001a90:	dd25      	ble.n	8001ade <ExtractMessage+0x2da>

									f2 = 0;
 8001a92:	2300      	movs	r3, #0
 8001a94:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
									f3 = 1;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
									k = 0;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0

									for(int m = 0; m < 4; m++){
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001aaa:	e014      	b.n	8001ad6 <ExtractMessage+0x2d2>
										DAC[0][m] = temp_dac[0][m];
 8001aac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001ab0:	00db      	lsls	r3, r3, #3
 8001ab2:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 8001ab6:	4413      	add	r3, r2
 8001ab8:	3bf0      	subs	r3, #240	; 0xf0
 8001aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001abe:	482c      	ldr	r0, [pc, #176]	; (8001b70 <ExtractMessage+0x36c>)
 8001ac0:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8001ac4:	00c9      	lsls	r1, r1, #3
 8001ac6:	4401      	add	r1, r0
 8001ac8:	e9c1 2300 	strd	r2, r3, [r1]
									for(int m = 0; m < 4; m++){
 8001acc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001ad0:	3301      	adds	r3, #1
 8001ad2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001ad6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001ada:	2b03      	cmp	r3, #3
 8001adc:	dde6      	ble.n	8001aac <ExtractMessage+0x2a8>
							while(f2){
 8001ade:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	f47f af53 	bne.w	800198e <ExtractMessage+0x18a>
						if(strcmp(temp, "000") == 0){
 8001ae8:	e1c8      	b.n	8001e7c <ExtractMessage+0x678>
									}
								}
							}
						}else if(strcmp(temp, "001") == 0){
 8001aea:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001aee:	4929      	ldr	r1, [pc, #164]	; (8001b94 <ExtractMessage+0x390>)
 8001af0:	4618      	mov	r0, r3
 8001af2:	f7fe fbf5 	bl	80002e0 <strcmp>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	f040 80d2 	bne.w	8001ca2 <ExtractMessage+0x49e>

							j = 0;
 8001afe:	2300      	movs	r3, #0
 8001b00:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
							memset(temp, 0, sizeof temp);
 8001b04:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001b08:	2264      	movs	r2, #100	; 0x64
 8001b0a:	2100      	movs	r1, #0
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f01c ff2b 	bl	801e968 <memset>

							while(f2){
 8001b12:	e0c0      	b.n	8001c96 <ExtractMessage+0x492>

								i++;
 8001b14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001b18:	3301      	adds	r3, #1
 8001b1a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

								if(msg[i] == ';'){
 8001b1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001b22:	687a      	ldr	r2, [r7, #4]
 8001b24:	4413      	add	r3, r2
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	2b3b      	cmp	r3, #59	; 0x3b
 8001b2a:	d135      	bne.n	8001b98 <ExtractMessage+0x394>

									temp_dac[1][k] = atof(temp);
 8001b2c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001b30:	4618      	mov	r0, r3
 8001b32:	f01c febb 	bl	801e8ac <atof>
 8001b36:	eeb0 7b40 	vmov.f64	d7, d0
 8001b3a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001b3e:	3304      	adds	r3, #4
 8001b40:	00db      	lsls	r3, r3, #3
 8001b42:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 8001b46:	4413      	add	r3, r2
 8001b48:	3bf0      	subs	r3, #240	; 0xf0
 8001b4a:	ed83 7b00 	vstr	d7, [r3]
									k++;
 8001b4e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001b52:	3301      	adds	r3, #1
 8001b54:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
									j = 0;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
									memset(temp, 0, sizeof temp);
 8001b5e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001b62:	2264      	movs	r2, #100	; 0x64
 8001b64:	2100      	movs	r1, #0
 8001b66:	4618      	mov	r0, r3
 8001b68:	f01c fefe 	bl	801e968 <memset>
 8001b6c:	e067      	b.n	8001c3e <ExtractMessage+0x43a>
 8001b6e:	bf00      	nop
 8001b70:	24000008 	.word	0x24000008
 8001b74:	080231ec 	.word	0x080231ec
 8001b78:	2400008c 	.word	0x2400008c
 8001b7c:	080231f0 	.word	0x080231f0
 8001b80:	24004768 	.word	0x24004768
 8001b84:	24004754 	.word	0x24004754
 8001b88:	240046c4 	.word	0x240046c4
 8001b8c:	08023208 	.word	0x08023208
 8001b90:	0802320c 	.word	0x0802320c
 8001b94:	0802322c 	.word	0x0802322c
								}else if(i >= strlen(msg)){
 8001b98:	6878      	ldr	r0, [r7, #4]
 8001b9a:	f7fe fbab 	bl	80002f4 <strlen>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	d838      	bhi.n	8001c1a <ExtractMessage+0x416>

									if(k == 3){
 8001ba8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001bac:	2b03      	cmp	r3, #3
 8001bae:	d120      	bne.n	8001bf2 <ExtractMessage+0x3ee>

										temp_dac[1][k] = atof(temp);
 8001bb0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f01c fe79 	bl	801e8ac <atof>
 8001bba:	eeb0 7b40 	vmov.f64	d7, d0
 8001bbe:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001bc2:	3304      	adds	r3, #4
 8001bc4:	00db      	lsls	r3, r3, #3
 8001bc6:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 8001bca:	4413      	add	r3, r2
 8001bcc:	3bf0      	subs	r3, #240	; 0xf0
 8001bce:	ed83 7b00 	vstr	d7, [r3]
										k++;
 8001bd2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001bd6:	3301      	adds	r3, #1
 8001bd8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
										j = 0;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
										memset(temp, 0, sizeof temp);
 8001be2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001be6:	2264      	movs	r2, #100	; 0x64
 8001be8:	2100      	movs	r1, #0
 8001bea:	4618      	mov	r0, r3
 8001bec:	f01c febc 	bl	801e968 <memset>
 8001bf0:	e025      	b.n	8001c3e <ExtractMessage+0x43a>
									}else{

										uart_buf_len = sprintf(uart_bufT, "the format is wrong: %s\r\n\n%s\r\n", (char*)temp, (char*)help);
 8001bf2:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8001bf6:	4bc1      	ldr	r3, [pc, #772]	; (8001efc <ExtractMessage+0x6f8>)
 8001bf8:	49c1      	ldr	r1, [pc, #772]	; (8001f00 <ExtractMessage+0x6fc>)
 8001bfa:	48c2      	ldr	r0, [pc, #776]	; (8001f04 <ExtractMessage+0x700>)
 8001bfc:	f01d fd60 	bl	801f6c0 <siprintf>
 8001c00:	4603      	mov	r3, r0
 8001c02:	4ac1      	ldr	r2, [pc, #772]	; (8001f08 <ExtractMessage+0x704>)
 8001c04:	6013      	str	r3, [r2, #0]
										HAL_UART_Transmit(&huart3, (uint8_t*)uart_bufT, uart_buf_len, 100);
 8001c06:	4bc0      	ldr	r3, [pc, #768]	; (8001f08 <ExtractMessage+0x704>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	b29a      	uxth	r2, r3
 8001c0c:	2364      	movs	r3, #100	; 0x64
 8001c0e:	49bd      	ldr	r1, [pc, #756]	; (8001f04 <ExtractMessage+0x700>)
 8001c10:	48be      	ldr	r0, [pc, #760]	; (8001f0c <ExtractMessage+0x708>)
 8001c12:	f007 f81d 	bl	8008c50 <HAL_UART_Transmit>
										return 0;
 8001c16:	2300      	movs	r3, #0
 8001c18:	e20c      	b.n	8002034 <ExtractMessage+0x830>
									}
								}else{

									temp[j] = msg[i];
 8001c1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001c1e:	687a      	ldr	r2, [r7, #4]
 8001c20:	4413      	add	r3, r2
 8001c22:	7819      	ldrb	r1, [r3, #0]
 8001c24:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8001c28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001c2c:	4413      	add	r3, r2
 8001c2e:	460a      	mov	r2, r1
 8001c30:	701a      	strb	r2, [r3, #0]
									j++;
 8001c32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001c36:	3301      	adds	r3, #1
 8001c38:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
									continue;
 8001c3c:	e02b      	b.n	8001c96 <ExtractMessage+0x492>
								}
								if(k > 3){
 8001c3e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001c42:	2b03      	cmp	r3, #3
 8001c44:	dd27      	ble.n	8001c96 <ExtractMessage+0x492>

									f2 = 0;
 8001c46:	2300      	movs	r3, #0
 8001c48:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
									f3 = 1;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
									k = 0;
 8001c52:	2300      	movs	r3, #0
 8001c54:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0

									for(int m = 0; m < 4; m++){
 8001c58:	2300      	movs	r3, #0
 8001c5a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001c5e:	e016      	b.n	8001c8e <ExtractMessage+0x48a>
										DAC[1][m] = temp_dac[1][m];
 8001c60:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001c64:	3304      	adds	r3, #4
 8001c66:	00db      	lsls	r3, r3, #3
 8001c68:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 8001c6c:	4413      	add	r3, r2
 8001c6e:	3bf0      	subs	r3, #240	; 0xf0
 8001c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c74:	48a6      	ldr	r0, [pc, #664]	; (8001f10 <ExtractMessage+0x70c>)
 8001c76:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 8001c7a:	3104      	adds	r1, #4
 8001c7c:	00c9      	lsls	r1, r1, #3
 8001c7e:	4401      	add	r1, r0
 8001c80:	e9c1 2300 	strd	r2, r3, [r1]
									for(int m = 0; m < 4; m++){
 8001c84:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001c88:	3301      	adds	r3, #1
 8001c8a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001c8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001c92:	2b03      	cmp	r3, #3
 8001c94:	dde4      	ble.n	8001c60 <ExtractMessage+0x45c>
							while(f2){
 8001c96:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	f47f af3a 	bne.w	8001b14 <ExtractMessage+0x310>
						if(strcmp(temp, "000") == 0){
 8001ca0:	e0ec      	b.n	8001e7c <ExtractMessage+0x678>
									}
								}
							}
						}else if(strcmp(temp, "010") == 0){
 8001ca2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001ca6:	499b      	ldr	r1, [pc, #620]	; (8001f14 <ExtractMessage+0x710>)
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f7fe fb19 	bl	80002e0 <strcmp>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	f040 80bd 	bne.w	8001e30 <ExtractMessage+0x62c>

							j = 0;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
							memset(temp, 0, sizeof temp);
 8001cbc:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001cc0:	2264      	movs	r2, #100	; 0x64
 8001cc2:	2100      	movs	r1, #0
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f01c fe4f 	bl	801e968 <memset>

							while(f2){
 8001cca:	e0ab      	b.n	8001e24 <ExtractMessage+0x620>

								i++;
 8001ccc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001cd0:	3301      	adds	r3, #1
 8001cd2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

								if(msg[i] == ';'){
 8001cd6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001cda:	687a      	ldr	r2, [r7, #4]
 8001cdc:	4413      	add	r3, r2
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	2b3b      	cmp	r3, #59	; 0x3b
 8001ce2:	d120      	bne.n	8001d26 <ExtractMessage+0x522>

									temp_dac[2][k] = atof(temp);
 8001ce4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f01c fddf 	bl	801e8ac <atof>
 8001cee:	eeb0 7b40 	vmov.f64	d7, d0
 8001cf2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001cf6:	3308      	adds	r3, #8
 8001cf8:	00db      	lsls	r3, r3, #3
 8001cfa:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 8001cfe:	4413      	add	r3, r2
 8001d00:	3bf0      	subs	r3, #240	; 0xf0
 8001d02:	ed83 7b00 	vstr	d7, [r3]
									k++;
 8001d06:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001d0a:	3301      	adds	r3, #1
 8001d0c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
									j = 0;
 8001d10:	2300      	movs	r3, #0
 8001d12:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
									memset(temp, 0, sizeof temp);
 8001d16:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001d1a:	2264      	movs	r2, #100	; 0x64
 8001d1c:	2100      	movs	r1, #0
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f01c fe22 	bl	801e968 <memset>
 8001d24:	e052      	b.n	8001dcc <ExtractMessage+0x5c8>
								}else if(i >= strlen(msg)){
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	f7fe fae4 	bl	80002f4 <strlen>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001d32:	429a      	cmp	r2, r3
 8001d34:	d838      	bhi.n	8001da8 <ExtractMessage+0x5a4>

									if(k == 3){
 8001d36:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001d3a:	2b03      	cmp	r3, #3
 8001d3c:	d120      	bne.n	8001d80 <ExtractMessage+0x57c>

										temp_dac[2][k] = atof(temp);
 8001d3e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001d42:	4618      	mov	r0, r3
 8001d44:	f01c fdb2 	bl	801e8ac <atof>
 8001d48:	eeb0 7b40 	vmov.f64	d7, d0
 8001d4c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001d50:	3308      	adds	r3, #8
 8001d52:	00db      	lsls	r3, r3, #3
 8001d54:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 8001d58:	4413      	add	r3, r2
 8001d5a:	3bf0      	subs	r3, #240	; 0xf0
 8001d5c:	ed83 7b00 	vstr	d7, [r3]
										k++;
 8001d60:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001d64:	3301      	adds	r3, #1
 8001d66:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
										j = 0;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
										memset(temp, 0, sizeof temp);
 8001d70:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001d74:	2264      	movs	r2, #100	; 0x64
 8001d76:	2100      	movs	r1, #0
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f01c fdf5 	bl	801e968 <memset>
 8001d7e:	e025      	b.n	8001dcc <ExtractMessage+0x5c8>
									}else{

										uart_buf_len = sprintf(uart_bufT, "the format is wrong: %s\r\n\n%s\r\n", (char*)temp, (char*)help);
 8001d80:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8001d84:	4b5d      	ldr	r3, [pc, #372]	; (8001efc <ExtractMessage+0x6f8>)
 8001d86:	495e      	ldr	r1, [pc, #376]	; (8001f00 <ExtractMessage+0x6fc>)
 8001d88:	485e      	ldr	r0, [pc, #376]	; (8001f04 <ExtractMessage+0x700>)
 8001d8a:	f01d fc99 	bl	801f6c0 <siprintf>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	4a5d      	ldr	r2, [pc, #372]	; (8001f08 <ExtractMessage+0x704>)
 8001d92:	6013      	str	r3, [r2, #0]
										HAL_UART_Transmit(&huart3, (uint8_t*)uart_bufT, uart_buf_len, 100);
 8001d94:	4b5c      	ldr	r3, [pc, #368]	; (8001f08 <ExtractMessage+0x704>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	b29a      	uxth	r2, r3
 8001d9a:	2364      	movs	r3, #100	; 0x64
 8001d9c:	4959      	ldr	r1, [pc, #356]	; (8001f04 <ExtractMessage+0x700>)
 8001d9e:	485b      	ldr	r0, [pc, #364]	; (8001f0c <ExtractMessage+0x708>)
 8001da0:	f006 ff56 	bl	8008c50 <HAL_UART_Transmit>
										return 0;
 8001da4:	2300      	movs	r3, #0
 8001da6:	e145      	b.n	8002034 <ExtractMessage+0x830>
									}
								}else{

									temp[j] = msg[i];
 8001da8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001dac:	687a      	ldr	r2, [r7, #4]
 8001dae:	4413      	add	r3, r2
 8001db0:	7819      	ldrb	r1, [r3, #0]
 8001db2:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8001db6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001dba:	4413      	add	r3, r2
 8001dbc:	460a      	mov	r2, r1
 8001dbe:	701a      	strb	r2, [r3, #0]
									j++;
 8001dc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001dc4:	3301      	adds	r3, #1
 8001dc6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
									continue;
 8001dca:	e02b      	b.n	8001e24 <ExtractMessage+0x620>
								}
								if(k > 3){
 8001dcc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001dd0:	2b03      	cmp	r3, #3
 8001dd2:	dd27      	ble.n	8001e24 <ExtractMessage+0x620>

									f2 = 0;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
									f3 = 1;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
									k = 0;
 8001de0:	2300      	movs	r3, #0
 8001de2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0

									for(int m = 0; m < 4; m++){
 8001de6:	2300      	movs	r3, #0
 8001de8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001dec:	e016      	b.n	8001e1c <ExtractMessage+0x618>
										DAC[2][m] = temp_dac[2][m];
 8001dee:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001df2:	3308      	adds	r3, #8
 8001df4:	00db      	lsls	r3, r3, #3
 8001df6:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 8001dfa:	4413      	add	r3, r2
 8001dfc:	3bf0      	subs	r3, #240	; 0xf0
 8001dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e02:	4843      	ldr	r0, [pc, #268]	; (8001f10 <ExtractMessage+0x70c>)
 8001e04:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8001e08:	3108      	adds	r1, #8
 8001e0a:	00c9      	lsls	r1, r1, #3
 8001e0c:	4401      	add	r1, r0
 8001e0e:	e9c1 2300 	strd	r2, r3, [r1]
									for(int m = 0; m < 4; m++){
 8001e12:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001e16:	3301      	adds	r3, #1
 8001e18:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001e1c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001e20:	2b03      	cmp	r3, #3
 8001e22:	dde4      	ble.n	8001dee <ExtractMessage+0x5ea>
							while(f2){
 8001e24:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	f47f af4f 	bne.w	8001ccc <ExtractMessage+0x4c8>
						if(strcmp(temp, "000") == 0){
 8001e2e:	e025      	b.n	8001e7c <ExtractMessage+0x678>
									}
								}
							}
						}else{

							uart_buf_len = sprintf(uart_bufT, "the format is wrong: %s\r\n\n%s\r\n", (char*)temp, (char*)help);
 8001e30:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8001e34:	4b31      	ldr	r3, [pc, #196]	; (8001efc <ExtractMessage+0x6f8>)
 8001e36:	4932      	ldr	r1, [pc, #200]	; (8001f00 <ExtractMessage+0x6fc>)
 8001e38:	4832      	ldr	r0, [pc, #200]	; (8001f04 <ExtractMessage+0x700>)
 8001e3a:	f01d fc41 	bl	801f6c0 <siprintf>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	4a31      	ldr	r2, [pc, #196]	; (8001f08 <ExtractMessage+0x704>)
 8001e42:	6013      	str	r3, [r2, #0]
							HAL_UART_Transmit(&huart3, (uint8_t*)uart_bufT, uart_buf_len, 100);
 8001e44:	4b30      	ldr	r3, [pc, #192]	; (8001f08 <ExtractMessage+0x704>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	b29a      	uxth	r2, r3
 8001e4a:	2364      	movs	r3, #100	; 0x64
 8001e4c:	492d      	ldr	r1, [pc, #180]	; (8001f04 <ExtractMessage+0x700>)
 8001e4e:	482f      	ldr	r0, [pc, #188]	; (8001f0c <ExtractMessage+0x708>)
 8001e50:	f006 fefe 	bl	8008c50 <HAL_UART_Transmit>
							return 0;
 8001e54:	2300      	movs	r3, #0
 8001e56:	e0ed      	b.n	8002034 <ExtractMessage+0x830>
						}
					}else{

						temp[j] = msg[i];
 8001e58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001e5c:	687a      	ldr	r2, [r7, #4]
 8001e5e:	4413      	add	r3, r2
 8001e60:	7819      	ldrb	r1, [r3, #0]
 8001e62:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8001e66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e6a:	4413      	add	r3, r2
 8001e6c:	460a      	mov	r2, r1
 8001e6e:	701a      	strb	r2, [r3, #0]
						j++;
 8001e70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e74:	3301      	adds	r3, #1
 8001e76:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
						continue;
 8001e7a:	e038      	b.n	8001eee <ExtractMessage+0x6ea>
					}

					while(f3){
 8001e7c:	e033      	b.n	8001ee6 <ExtractMessage+0x6e2>

						i++;
 8001e7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001e82:	3301      	adds	r3, #1
 8001e84:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
						if(msg[i] == '&'){
 8001e88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001e8c:	687a      	ldr	r2, [r7, #4]
 8001e8e:	4413      	add	r3, r2
 8001e90:	781b      	ldrb	r3, [r3, #0]
 8001e92:	2b26      	cmp	r3, #38	; 0x26
 8001e94:	d108      	bne.n	8001ea8 <ExtractMessage+0x6a4>

							f3 = 0;
 8001e96:	2300      	movs	r3, #0
 8001e98:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
							i++;	// for removing first space after $
 8001e9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001ea0:	3301      	adds	r3, #1
 8001ea2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8001ea6:	e01e      	b.n	8001ee6 <ExtractMessage+0x6e2>
						}else if(i >= strlen(msg)){
 8001ea8:	6878      	ldr	r0, [r7, #4]
 8001eaa:	f7fe fa23 	bl	80002f4 <strlen>
 8001eae:	4602      	mov	r2, r0
 8001eb0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d816      	bhi.n	8001ee6 <ExtractMessage+0x6e2>

							f3 = 0;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
							f1 = 0;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc

//							gcvt(DAC[2][0], 6, v);	// for converting flaot to string
							uart_buf_len = sprintf(uart_bufT, "the message has been registered!\r\n");
 8001ec4:	4914      	ldr	r1, [pc, #80]	; (8001f18 <ExtractMessage+0x714>)
 8001ec6:	480f      	ldr	r0, [pc, #60]	; (8001f04 <ExtractMessage+0x700>)
 8001ec8:	f01d fbfa 	bl	801f6c0 <siprintf>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	4a0e      	ldr	r2, [pc, #56]	; (8001f08 <ExtractMessage+0x704>)
 8001ed0:	6013      	str	r3, [r2, #0]
//															  "%.5f %.5f %.5f %.0f\r\n"
//															  "%.5f %.5f %.5f %.0f\r\n"
//															  , DAC[0][0], DAC[0][1], DAC[0][2], DAC[0][3]
//															  , DAC[1][0], DAC[1][1], DAC[1][2], DAC[1][3]
//															  , DAC[2][0], DAC[2][1], DAC[2][2], DAC[2][3]);
							HAL_UART_Transmit(&huart3, (uint8_t*)uart_bufT, uart_buf_len, 100);
 8001ed2:	4b0d      	ldr	r3, [pc, #52]	; (8001f08 <ExtractMessage+0x704>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	b29a      	uxth	r2, r3
 8001ed8:	2364      	movs	r3, #100	; 0x64
 8001eda:	490a      	ldr	r1, [pc, #40]	; (8001f04 <ExtractMessage+0x700>)
 8001edc:	480b      	ldr	r0, [pc, #44]	; (8001f0c <ExtractMessage+0x708>)
 8001ede:	f006 feb7 	bl	8008c50 <HAL_UART_Transmit>
							return 2;
 8001ee2:	2302      	movs	r3, #2
 8001ee4:	e0a6      	b.n	8002034 <ExtractMessage+0x830>
					while(f3){
 8001ee6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d1c7      	bne.n	8001e7e <ExtractMessage+0x67a>
				while(f1){
 8001eee:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	f47f ad10 	bne.w	8001918 <ExtractMessage+0x114>
 8001ef8:	e07b      	b.n	8001ff2 <ExtractMessage+0x7ee>
 8001efa:	bf00      	nop
 8001efc:	2400008c 	.word	0x2400008c
 8001f00:	0802320c 	.word	0x0802320c
 8001f04:	24004768 	.word	0x24004768
 8001f08:	24004754 	.word	0x24004754
 8001f0c:	240046c4 	.word	0x240046c4
 8001f10:	24000008 	.word	0x24000008
 8001f14:	08023230 	.word	0x08023230
 8001f18:	08023234 	.word	0x08023234
					}
				}
			}
		}else{

			temp[j] = msg[i];
 8001f1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001f20:	687a      	ldr	r2, [r7, #4]
 8001f22:	4413      	add	r3, r2
 8001f24:	7819      	ldrb	r1, [r3, #0]
 8001f26:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8001f2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f2e:	4413      	add	r3, r2
 8001f30:	460a      	mov	r2, r1
 8001f32:	701a      	strb	r2, [r3, #0]

			if(strcmp(temp, "exit") == 0 || strcmp(temp, "Exit") == 0 || strcmp(temp, "EXIT") == 0){
 8001f34:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001f38:	4940      	ldr	r1, [pc, #256]	; (800203c <ExtractMessage+0x838>)
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f7fe f9d0 	bl	80002e0 <strcmp>
 8001f40:	4603      	mov	r3, r0
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d011      	beq.n	8001f6a <ExtractMessage+0x766>
 8001f46:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001f4a:	493d      	ldr	r1, [pc, #244]	; (8002040 <ExtractMessage+0x83c>)
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f7fe f9c7 	bl	80002e0 <strcmp>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d008      	beq.n	8001f6a <ExtractMessage+0x766>
 8001f58:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001f5c:	4939      	ldr	r1, [pc, #228]	; (8002044 <ExtractMessage+0x840>)
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f7fe f9be 	bl	80002e0 <strcmp>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d110      	bne.n	8001f8c <ExtractMessage+0x788>

				uart_buf_len = sprintf(uart_bufT, "Exit!\r\n");
 8001f6a:	4937      	ldr	r1, [pc, #220]	; (8002048 <ExtractMessage+0x844>)
 8001f6c:	4837      	ldr	r0, [pc, #220]	; (800204c <ExtractMessage+0x848>)
 8001f6e:	f01d fba7 	bl	801f6c0 <siprintf>
 8001f72:	4603      	mov	r3, r0
 8001f74:	4a36      	ldr	r2, [pc, #216]	; (8002050 <ExtractMessage+0x84c>)
 8001f76:	6013      	str	r3, [r2, #0]
				HAL_UART_Transmit(&huart3, (uint8_t*)uart_bufT, uart_buf_len, 100);
 8001f78:	4b35      	ldr	r3, [pc, #212]	; (8002050 <ExtractMessage+0x84c>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	b29a      	uxth	r2, r3
 8001f7e:	2364      	movs	r3, #100	; 0x64
 8001f80:	4932      	ldr	r1, [pc, #200]	; (800204c <ExtractMessage+0x848>)
 8001f82:	4834      	ldr	r0, [pc, #208]	; (8002054 <ExtractMessage+0x850>)
 8001f84:	f006 fe64 	bl	8008c50 <HAL_UART_Transmit>

				return 3;
 8001f88:	2303      	movs	r3, #3
 8001f8a:	e053      	b.n	8002034 <ExtractMessage+0x830>
			}else if(strcmp(temp, "help") == 0 || strcmp(temp, "Help") == 0 || strcmp(temp, "HELP") == 0){
 8001f8c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001f90:	4931      	ldr	r1, [pc, #196]	; (8002058 <ExtractMessage+0x854>)
 8001f92:	4618      	mov	r0, r3
 8001f94:	f7fe f9a4 	bl	80002e0 <strcmp>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d011      	beq.n	8001fc2 <ExtractMessage+0x7be>
 8001f9e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001fa2:	492e      	ldr	r1, [pc, #184]	; (800205c <ExtractMessage+0x858>)
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f7fe f99b 	bl	80002e0 <strcmp>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d008      	beq.n	8001fc2 <ExtractMessage+0x7be>
 8001fb0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001fb4:	492a      	ldr	r1, [pc, #168]	; (8002060 <ExtractMessage+0x85c>)
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f7fe f992 	bl	80002e0 <strcmp>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d111      	bne.n	8001fe6 <ExtractMessage+0x7e2>

				uart_buf_len = sprintf(uart_bufT, "%s\r\n", (char*)help);
 8001fc2:	4a28      	ldr	r2, [pc, #160]	; (8002064 <ExtractMessage+0x860>)
 8001fc4:	4928      	ldr	r1, [pc, #160]	; (8002068 <ExtractMessage+0x864>)
 8001fc6:	4821      	ldr	r0, [pc, #132]	; (800204c <ExtractMessage+0x848>)
 8001fc8:	f01d fb7a 	bl	801f6c0 <siprintf>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	4a20      	ldr	r2, [pc, #128]	; (8002050 <ExtractMessage+0x84c>)
 8001fd0:	6013      	str	r3, [r2, #0]
				HAL_UART_Transmit(&huart3, (uint8_t*)uart_bufT, uart_buf_len, 100);
 8001fd2:	4b1f      	ldr	r3, [pc, #124]	; (8002050 <ExtractMessage+0x84c>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	b29a      	uxth	r2, r3
 8001fd8:	2364      	movs	r3, #100	; 0x64
 8001fda:	491c      	ldr	r1, [pc, #112]	; (800204c <ExtractMessage+0x848>)
 8001fdc:	481d      	ldr	r0, [pc, #116]	; (8002054 <ExtractMessage+0x850>)
 8001fde:	f006 fe37 	bl	8008c50 <HAL_UART_Transmit>

				return 1;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e026      	b.n	8002034 <ExtractMessage+0x830>
			}
			j++;
 8001fe6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fea:	3301      	adds	r3, #1
 8001fec:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4

			continue;
 8001ff0:	bf00      	nop
	for(int i = 0; i < strlen(msg); i++){
 8001ff2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001ff6:	3301      	adds	r3, #1
 8001ff8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8001ffc:	6878      	ldr	r0, [r7, #4]
 8001ffe:	f7fe f979 	bl	80002f4 <strlen>
 8002002:	4602      	mov	r2, r0
 8002004:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002008:	429a      	cmp	r2, r3
 800200a:	f63f ac4d 	bhi.w	80018a8 <ExtractMessage+0xa4>
		}
	}

	uart_buf_len = sprintf(uart_bufT, "wrong msg: %s\r\n\n%s\r\n", (char*)temp, (char*)help);
 800200e:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8002012:	4b14      	ldr	r3, [pc, #80]	; (8002064 <ExtractMessage+0x860>)
 8002014:	4915      	ldr	r1, [pc, #84]	; (800206c <ExtractMessage+0x868>)
 8002016:	480d      	ldr	r0, [pc, #52]	; (800204c <ExtractMessage+0x848>)
 8002018:	f01d fb52 	bl	801f6c0 <siprintf>
 800201c:	4603      	mov	r3, r0
 800201e:	4a0c      	ldr	r2, [pc, #48]	; (8002050 <ExtractMessage+0x84c>)
 8002020:	6013      	str	r3, [r2, #0]
	HAL_UART_Transmit(&huart3, (uint8_t*)uart_bufT, uart_buf_len, 100);
 8002022:	4b0b      	ldr	r3, [pc, #44]	; (8002050 <ExtractMessage+0x84c>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	b29a      	uxth	r2, r3
 8002028:	2364      	movs	r3, #100	; 0x64
 800202a:	4908      	ldr	r1, [pc, #32]	; (800204c <ExtractMessage+0x848>)
 800202c:	4809      	ldr	r0, [pc, #36]	; (8002054 <ExtractMessage+0x850>)
 800202e:	f006 fe0f 	bl	8008c50 <HAL_UART_Transmit>
	return 0;
 8002032:	2300      	movs	r3, #0
}
 8002034:	4618      	mov	r0, r3
 8002036:	37f8      	adds	r7, #248	; 0xf8
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}
 800203c:	08023258 	.word	0x08023258
 8002040:	08023260 	.word	0x08023260
 8002044:	08023268 	.word	0x08023268
 8002048:	08023270 	.word	0x08023270
 800204c:	24004768 	.word	0x24004768
 8002050:	24004754 	.word	0x24004754
 8002054:	240046c4 	.word	0x240046c4
 8002058:	08023278 	.word	0x08023278
 800205c:	08023280 	.word	0x08023280
 8002060:	08023288 	.word	0x08023288
 8002064:	2400008c 	.word	0x2400008c
 8002068:	08023290 	.word	0x08023290
 800206c:	080231f0 	.word	0x080231f0

08002070 <StartThread>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartThread */
void StartThread(void const * argument)
{
 8002070:	b5b0      	push	{r4, r5, r7, lr}
 8002072:	b08a      	sub	sp, #40	; 0x28
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8002078:	f007 fe50 	bl	8009d1c <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */

  sock = socket(AF_INET, SOCK_STREAM, 0);
 800207c:	2200      	movs	r2, #0
 800207e:	2101      	movs	r1, #1
 8002080:	2002      	movs	r0, #2
 8002082:	f00e fe03 	bl	8010c8c <lwip_socket>
 8002086:	4603      	mov	r3, r0
 8002088:	4a37      	ldr	r2, [pc, #220]	; (8002168 <StartThread+0xf8>)
 800208a:	6013      	str	r3, [r2, #0]

  address.sin_family = AF_INET;
 800208c:	4b37      	ldr	r3, [pc, #220]	; (800216c <StartThread+0xfc>)
 800208e:	2202      	movs	r2, #2
 8002090:	705a      	strb	r2, [r3, #1]
  address.sin_port = htons(PORT);
 8002092:	2016      	movs	r0, #22
 8002094:	f00f f9a6 	bl	80113e4 <lwip_htons>
 8002098:	4603      	mov	r3, r0
 800209a:	461a      	mov	r2, r3
 800209c:	4b33      	ldr	r3, [pc, #204]	; (800216c <StartThread+0xfc>)
 800209e:	805a      	strh	r2, [r3, #2]
  address.sin_addr.s_addr = INADDR_ANY;//inet_addr(SERVER);//INADDR_ANY;//
 80020a0:	4b32      	ldr	r3, [pc, #200]	; (800216c <StartThread+0xfc>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	605a      	str	r2, [r3, #4]

  err = bind(sock, (struct sockaddr *)&address, sizeof (address));
 80020a6:	4b30      	ldr	r3, [pc, #192]	; (8002168 <StartThread+0xf8>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	2210      	movs	r2, #16
 80020ac:	492f      	ldr	r1, [pc, #188]	; (800216c <StartThread+0xfc>)
 80020ae:	4618      	mov	r0, r3
 80020b0:	f00e f898 	bl	80101e4 <lwip_bind>
 80020b4:	4603      	mov	r3, r0
 80020b6:	b25a      	sxtb	r2, r3
 80020b8:	4b2d      	ldr	r3, [pc, #180]	; (8002170 <StartThread+0x100>)
 80020ba:	701a      	strb	r2, [r3, #0]
  err = listen(sock, 0);
 80020bc:	4b2a      	ldr	r3, [pc, #168]	; (8002168 <StartThread+0xf8>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	2100      	movs	r1, #0
 80020c2:	4618      	mov	r0, r3
 80020c4:	f00e f952 	bl	801036c <lwip_listen>
 80020c8:	4603      	mov	r3, r0
 80020ca:	b25a      	sxtb	r2, r3
 80020cc:	4b28      	ldr	r3, [pc, #160]	; (8002170 <StartThread+0x100>)
 80020ce:	701a      	strb	r2, [r3, #0]

  SendToDAC(3);
 80020d0:	2003      	movs	r0, #3
 80020d2:	f7ff f89d 	bl	8001210 <SendToDAC>

  // create the acceptance thread
  osThreadDef(Acceptance, AcceptanceNewClient, osPriorityLow, 0, configMINIMAL_STACK_SIZE *2);
 80020d6:	4b27      	ldr	r3, [pc, #156]	; (8002174 <StartThread+0x104>)
 80020d8:	f107 040c 	add.w	r4, r7, #12
 80020dc:	461d      	mov	r5, r3
 80020de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80020e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80020e2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80020e6:	e884 0007 	stmia.w	r4, {r0, r1, r2}

  /* Infinite loop */
  for(;;)
  {
		g =  accept(sock, NULL, NULL);
 80020ea:	4b1f      	ldr	r3, [pc, #124]	; (8002168 <StartThread+0xf8>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	2200      	movs	r2, #0
 80020f0:	2100      	movs	r1, #0
 80020f2:	4618      	mov	r0, r3
 80020f4:	f00d ff58 	bl	800ffa8 <lwip_accept>
 80020f8:	4603      	mov	r3, r0
 80020fa:	4a1f      	ldr	r2, [pc, #124]	; (8002178 <StartThread+0x108>)
 80020fc:	6013      	str	r3, [r2, #0]

		if(g < 0){
 80020fe:	4b1e      	ldr	r3, [pc, #120]	; (8002178 <StartThread+0x108>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	2b00      	cmp	r3, #0
 8002104:	da03      	bge.n	800210e <StartThread+0x9e>

			osDelay(100);
 8002106:	2064      	movs	r0, #100	; 0x64
 8002108:	f008 fb9f 	bl	800a84a <osDelay>
			continue;
 800210c:	e02a      	b.n	8002164 <StartThread+0xf4>
		}

		ClientHandle = osThreadCreate(osThread(Acceptance), &g);
 800210e:	f107 030c 	add.w	r3, r7, #12
 8002112:	4919      	ldr	r1, [pc, #100]	; (8002178 <StartThread+0x108>)
 8002114:	4618      	mov	r0, r3
 8002116:	f008 fb40 	bl	800a79a <osThreadCreate>
 800211a:	4603      	mov	r3, r0
 800211c:	4a17      	ldr	r2, [pc, #92]	; (800217c <StartThread+0x10c>)
 800211e:	6013      	str	r3, [r2, #0]
//		osThreadTerminate(ClientHandle);

		uart_buf_len = sprintf(uart_bufT, "new connection...! \r\n"
 8002120:	4a17      	ldr	r2, [pc, #92]	; (8002180 <StartThread+0x110>)
 8002122:	4918      	ldr	r1, [pc, #96]	; (8002184 <StartThread+0x114>)
 8002124:	4818      	ldr	r0, [pc, #96]	; (8002188 <StartThread+0x118>)
 8002126:	f01d facb 	bl	801f6c0 <siprintf>
 800212a:	4603      	mov	r3, r0
 800212c:	4a17      	ldr	r2, [pc, #92]	; (800218c <StartThread+0x11c>)
 800212e:	6013      	str	r3, [r2, #0]
							              "Connected to Compensation Coils Driver! \r\n\n%s\r\n", (char*)help);
		HAL_UART_Transmit(&huart3, (uint8_t*)uart_bufT, uart_buf_len, 100);
 8002130:	4b16      	ldr	r3, [pc, #88]	; (800218c <StartThread+0x11c>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	b29a      	uxth	r2, r3
 8002136:	2364      	movs	r3, #100	; 0x64
 8002138:	4913      	ldr	r1, [pc, #76]	; (8002188 <StartThread+0x118>)
 800213a:	4815      	ldr	r0, [pc, #84]	; (8002190 <StartThread+0x120>)
 800213c:	f006 fd88 	bl	8008c50 <HAL_UART_Transmit>
		write(g, (char*)uart_bufT, strlen(uart_bufT));
 8002140:	4b0d      	ldr	r3, [pc, #52]	; (8002178 <StartThread+0x108>)
 8002142:	681c      	ldr	r4, [r3, #0]
 8002144:	4810      	ldr	r0, [pc, #64]	; (8002188 <StartThread+0x118>)
 8002146:	f7fe f8d5 	bl	80002f4 <strlen>
 800214a:	4603      	mov	r3, r0
 800214c:	461a      	mov	r2, r3
 800214e:	490e      	ldr	r1, [pc, #56]	; (8002188 <StartThread+0x118>)
 8002150:	4620      	mov	r0, r4
 8002152:	f00e fdf9 	bl	8010d48 <lwip_write>
		HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8002156:	2101      	movs	r1, #1
 8002158:	480e      	ldr	r0, [pc, #56]	; (8002194 <StartThread+0x124>)
 800215a:	f003 f9a0 	bl	800549e <HAL_GPIO_TogglePin>

		osDelay(100);
 800215e:	2064      	movs	r0, #100	; 0x64
 8002160:	f008 fb73 	bl	800a84a <osDelay>
		g =  accept(sock, NULL, NULL);
 8002164:	e7c1      	b.n	80020ea <StartThread+0x7a>
 8002166:	bf00      	nop
 8002168:	24004758 	.word	0x24004758
 800216c:	24004694 	.word	0x24004694
 8002170:	24000000 	.word	0x24000000
 8002174:	080232e0 	.word	0x080232e0
 8002178:	2400475c 	.word	0x2400475c
 800217c:	24004690 	.word	0x24004690
 8002180:	2400008c 	.word	0x2400008c
 8002184:	08023298 	.word	0x08023298
 8002188:	24004768 	.word	0x24004768
 800218c:	24004754 	.word	0x24004754
 8002190:	240046c4 	.word	0x240046c4
 8002194:	58020400 	.word	0x58020400

08002198 <MPU_Config>:
}

/* MPU Configuration */

void MPU_Config(void)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b084      	sub	sp, #16
 800219c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800219e:	463b      	mov	r3, r7
 80021a0:	2200      	movs	r2, #0
 80021a2:	601a      	str	r2, [r3, #0]
 80021a4:	605a      	str	r2, [r3, #4]
 80021a6:	609a      	str	r2, [r3, #8]
 80021a8:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80021aa:	f000 fe2b 	bl	8002e04 <HAL_MPU_Disable>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80021ae:	2301      	movs	r3, #1
 80021b0:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80021b2:	2300      	movs	r3, #0
 80021b4:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30040000;
 80021b6:	4b16      	ldr	r3, [pc, #88]	; (8002210 <MPU_Config+0x78>)
 80021b8:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256B;
 80021ba:	2307      	movs	r3, #7
 80021bc:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 80021be:	2300      	movs	r3, #0
 80021c0:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80021c2:	2300      	movs	r3, #0
 80021c4:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80021c6:	2303      	movs	r3, #3
 80021c8:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 80021ca:	2300      	movs	r3, #0
 80021cc:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 80021ce:	2300      	movs	r3, #0
 80021d0:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80021d2:	2300      	movs	r3, #0
 80021d4:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 80021d6:	2301      	movs	r3, #1
 80021d8:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80021da:	463b      	mov	r3, r7
 80021dc:	4618      	mov	r0, r3
 80021de:	f000 fe49 	bl	8002e74 <HAL_MPU_ConfigRegion>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 80021e2:	2301      	movs	r3, #1
 80021e4:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30044000;
 80021e6:	4b0b      	ldr	r3, [pc, #44]	; (8002214 <MPU_Config+0x7c>)
 80021e8:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_16KB;
 80021ea:	230d      	movs	r3, #13
 80021ec:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 80021ee:	2301      	movs	r3, #1
 80021f0:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80021f2:	2301      	movs	r3, #1
 80021f4:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80021f6:	2300      	movs	r3, #0
 80021f8:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80021fa:	463b      	mov	r3, r7
 80021fc:	4618      	mov	r0, r3
 80021fe:	f000 fe39 	bl	8002e74 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8002202:	2004      	movs	r0, #4
 8002204:	f000 fe16 	bl	8002e34 <HAL_MPU_Enable>

}
 8002208:	bf00      	nop
 800220a:	3710      	adds	r7, #16
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}
 8002210:	30040000 	.word	0x30040000
 8002214:	30044000 	.word	0x30044000

08002218 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b082      	sub	sp, #8
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a04      	ldr	r2, [pc, #16]	; (8002238 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d101      	bne.n	800222e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800222a:	f000 fccb 	bl	8002bc4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800222e:	bf00      	nop
 8002230:	3708      	adds	r7, #8
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	40001000 	.word	0x40001000

0800223c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800223c:	b480      	push	{r7}
 800223e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002240:	b672      	cpsid	i
}
 8002242:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002244:	e7fe      	b.n	8002244 <Error_Handler+0x8>
	...

08002248 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b082      	sub	sp, #8
 800224c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800224e:	4b0c      	ldr	r3, [pc, #48]	; (8002280 <HAL_MspInit+0x38>)
 8002250:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002254:	4a0a      	ldr	r2, [pc, #40]	; (8002280 <HAL_MspInit+0x38>)
 8002256:	f043 0302 	orr.w	r3, r3, #2
 800225a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800225e:	4b08      	ldr	r3, [pc, #32]	; (8002280 <HAL_MspInit+0x38>)
 8002260:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002264:	f003 0302 	and.w	r3, r3, #2
 8002268:	607b      	str	r3, [r7, #4]
 800226a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800226c:	2200      	movs	r2, #0
 800226e:	210f      	movs	r1, #15
 8002270:	f06f 0001 	mvn.w	r0, #1
 8002274:	f000 fd9e 	bl	8002db4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002278:	bf00      	nop
 800227a:	3708      	adds	r7, #8
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}
 8002280:	58024400 	.word	0x58024400

08002284 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b0b8      	sub	sp, #224	; 0xe0
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800228c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002290:	2200      	movs	r2, #0
 8002292:	601a      	str	r2, [r3, #0]
 8002294:	605a      	str	r2, [r3, #4]
 8002296:	609a      	str	r2, [r3, #8]
 8002298:	60da      	str	r2, [r3, #12]
 800229a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800229c:	f107 0310 	add.w	r3, r7, #16
 80022a0:	22bc      	movs	r2, #188	; 0xbc
 80022a2:	2100      	movs	r1, #0
 80022a4:	4618      	mov	r0, r3
 80022a6:	f01c fb5f 	bl	801e968 <memset>
  if(hspi->Instance==SPI4)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a29      	ldr	r2, [pc, #164]	; (8002354 <HAL_SPI_MspInit+0xd0>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d14a      	bne.n	800234a <HAL_SPI_MspInit+0xc6>
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 80022b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80022b8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 80022ba:	2300      	movs	r3, #0
 80022bc:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80022be:	f107 0310 	add.w	r3, r7, #16
 80022c2:	4618      	mov	r0, r3
 80022c4:	f004 f938 	bl	8006538 <HAL_RCCEx_PeriphCLKConfig>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d001      	beq.n	80022d2 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 80022ce:	f7ff ffb5 	bl	800223c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 80022d2:	4b21      	ldr	r3, [pc, #132]	; (8002358 <HAL_SPI_MspInit+0xd4>)
 80022d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80022d8:	4a1f      	ldr	r2, [pc, #124]	; (8002358 <HAL_SPI_MspInit+0xd4>)
 80022da:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80022de:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80022e2:	4b1d      	ldr	r3, [pc, #116]	; (8002358 <HAL_SPI_MspInit+0xd4>)
 80022e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80022e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80022ec:	60fb      	str	r3, [r7, #12]
 80022ee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80022f0:	4b19      	ldr	r3, [pc, #100]	; (8002358 <HAL_SPI_MspInit+0xd4>)
 80022f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022f6:	4a18      	ldr	r2, [pc, #96]	; (8002358 <HAL_SPI_MspInit+0xd4>)
 80022f8:	f043 0310 	orr.w	r3, r3, #16
 80022fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002300:	4b15      	ldr	r3, [pc, #84]	; (8002358 <HAL_SPI_MspInit+0xd4>)
 8002302:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002306:	f003 0310 	and.w	r3, r3, #16
 800230a:	60bb      	str	r3, [r7, #8]
 800230c:	68bb      	ldr	r3, [r7, #8]
    /**SPI4 GPIO Configuration
    PE6     ------> SPI4_MOSI
    PE12     ------> SPI4_SCK
    PE13     ------> SPI4_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_12|GPIO_PIN_13;
 800230e:	f44f 5341 	mov.w	r3, #12352	; 0x3040
 8002312:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002316:	2302      	movs	r3, #2
 8002318:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800231c:	2300      	movs	r3, #0
 800231e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002322:	2302      	movs	r3, #2
 8002324:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8002328:	2305      	movs	r3, #5
 800232a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800232e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002332:	4619      	mov	r1, r3
 8002334:	4809      	ldr	r0, [pc, #36]	; (800235c <HAL_SPI_MspInit+0xd8>)
 8002336:	f002 fed1 	bl	80050dc <HAL_GPIO_Init>

    /* SPI4 interrupt Init */
    HAL_NVIC_SetPriority(SPI4_IRQn, 5, 0);
 800233a:	2200      	movs	r2, #0
 800233c:	2105      	movs	r1, #5
 800233e:	2054      	movs	r0, #84	; 0x54
 8002340:	f000 fd38 	bl	8002db4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 8002344:	2054      	movs	r0, #84	; 0x54
 8002346:	f000 fd4f 	bl	8002de8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 800234a:	bf00      	nop
 800234c:	37e0      	adds	r7, #224	; 0xe0
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	40013400 	.word	0x40013400
 8002358:	58024400 	.word	0x58024400
 800235c:	58021000 	.word	0x58021000

08002360 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b0b8      	sub	sp, #224	; 0xe0
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002368:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800236c:	2200      	movs	r2, #0
 800236e:	601a      	str	r2, [r3, #0]
 8002370:	605a      	str	r2, [r3, #4]
 8002372:	609a      	str	r2, [r3, #8]
 8002374:	60da      	str	r2, [r3, #12]
 8002376:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002378:	f107 0310 	add.w	r3, r7, #16
 800237c:	22bc      	movs	r2, #188	; 0xbc
 800237e:	2100      	movs	r1, #0
 8002380:	4618      	mov	r0, r3
 8002382:	f01c faf1 	bl	801e968 <memset>
  if(huart->Instance==USART3)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a25      	ldr	r2, [pc, #148]	; (8002420 <HAL_UART_MspInit+0xc0>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d142      	bne.n	8002416 <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002390:	2302      	movs	r3, #2
 8002392:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002394:	2300      	movs	r3, #0
 8002396:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800239a:	f107 0310 	add.w	r3, r7, #16
 800239e:	4618      	mov	r0, r3
 80023a0:	f004 f8ca 	bl	8006538 <HAL_RCCEx_PeriphCLKConfig>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d001      	beq.n	80023ae <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80023aa:	f7ff ff47 	bl	800223c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80023ae:	4b1d      	ldr	r3, [pc, #116]	; (8002424 <HAL_UART_MspInit+0xc4>)
 80023b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80023b4:	4a1b      	ldr	r2, [pc, #108]	; (8002424 <HAL_UART_MspInit+0xc4>)
 80023b6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023ba:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80023be:	4b19      	ldr	r3, [pc, #100]	; (8002424 <HAL_UART_MspInit+0xc4>)
 80023c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80023c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023c8:	60fb      	str	r3, [r7, #12]
 80023ca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80023cc:	4b15      	ldr	r3, [pc, #84]	; (8002424 <HAL_UART_MspInit+0xc4>)
 80023ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023d2:	4a14      	ldr	r2, [pc, #80]	; (8002424 <HAL_UART_MspInit+0xc4>)
 80023d4:	f043 0308 	orr.w	r3, r3, #8
 80023d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80023dc:	4b11      	ldr	r3, [pc, #68]	; (8002424 <HAL_UART_MspInit+0xc4>)
 80023de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023e2:	f003 0308 	and.w	r3, r3, #8
 80023e6:	60bb      	str	r3, [r7, #8]
 80023e8:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80023ea:	f44f 7340 	mov.w	r3, #768	; 0x300
 80023ee:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023f2:	2302      	movs	r3, #2
 80023f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f8:	2300      	movs	r3, #0
 80023fa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80023fe:	2302      	movs	r3, #2
 8002400:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002404:	2307      	movs	r3, #7
 8002406:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800240a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800240e:	4619      	mov	r1, r3
 8002410:	4805      	ldr	r0, [pc, #20]	; (8002428 <HAL_UART_MspInit+0xc8>)
 8002412:	f002 fe63 	bl	80050dc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002416:	bf00      	nop
 8002418:	37e0      	adds	r7, #224	; 0xe0
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	40004800 	.word	0x40004800
 8002424:	58024400 	.word	0x58024400
 8002428:	58020c00 	.word	0x58020c00

0800242c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b090      	sub	sp, #64	; 0x40
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2b0f      	cmp	r3, #15
 8002438:	d827      	bhi.n	800248a <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 800243a:	2200      	movs	r2, #0
 800243c:	6879      	ldr	r1, [r7, #4]
 800243e:	2036      	movs	r0, #54	; 0x36
 8002440:	f000 fcb8 	bl	8002db4 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002444:	2036      	movs	r0, #54	; 0x36
 8002446:	f000 fccf 	bl	8002de8 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 800244a:	4a29      	ldr	r2, [pc, #164]	; (80024f0 <HAL_InitTick+0xc4>)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002450:	4b28      	ldr	r3, [pc, #160]	; (80024f4 <HAL_InitTick+0xc8>)
 8002452:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002456:	4a27      	ldr	r2, [pc, #156]	; (80024f4 <HAL_InitTick+0xc8>)
 8002458:	f043 0310 	orr.w	r3, r3, #16
 800245c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002460:	4b24      	ldr	r3, [pc, #144]	; (80024f4 <HAL_InitTick+0xc8>)
 8002462:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002466:	f003 0310 	and.w	r3, r3, #16
 800246a:	60fb      	str	r3, [r7, #12]
 800246c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800246e:	f107 0210 	add.w	r2, r7, #16
 8002472:	f107 0314 	add.w	r3, r7, #20
 8002476:	4611      	mov	r1, r2
 8002478:	4618      	mov	r0, r3
 800247a:	f004 f81b 	bl	80064b4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800247e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002480:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002484:	2b00      	cmp	r3, #0
 8002486:	d106      	bne.n	8002496 <HAL_InitTick+0x6a>
 8002488:	e001      	b.n	800248e <HAL_InitTick+0x62>
    return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e02b      	b.n	80024e6 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800248e:	f003 ffe5 	bl	800645c <HAL_RCC_GetPCLK1Freq>
 8002492:	63f8      	str	r0, [r7, #60]	; 0x3c
 8002494:	e004      	b.n	80024a0 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002496:	f003 ffe1 	bl	800645c <HAL_RCC_GetPCLK1Freq>
 800249a:	4603      	mov	r3, r0
 800249c:	005b      	lsls	r3, r3, #1
 800249e:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80024a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024a2:	4a15      	ldr	r2, [pc, #84]	; (80024f8 <HAL_InitTick+0xcc>)
 80024a4:	fba2 2303 	umull	r2, r3, r2, r3
 80024a8:	0c9b      	lsrs	r3, r3, #18
 80024aa:	3b01      	subs	r3, #1
 80024ac:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80024ae:	4b13      	ldr	r3, [pc, #76]	; (80024fc <HAL_InitTick+0xd0>)
 80024b0:	4a13      	ldr	r2, [pc, #76]	; (8002500 <HAL_InitTick+0xd4>)
 80024b2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80024b4:	4b11      	ldr	r3, [pc, #68]	; (80024fc <HAL_InitTick+0xd0>)
 80024b6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80024ba:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80024bc:	4a0f      	ldr	r2, [pc, #60]	; (80024fc <HAL_InitTick+0xd0>)
 80024be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024c0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80024c2:	4b0e      	ldr	r3, [pc, #56]	; (80024fc <HAL_InitTick+0xd0>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024c8:	4b0c      	ldr	r3, [pc, #48]	; (80024fc <HAL_InitTick+0xd0>)
 80024ca:	2200      	movs	r2, #0
 80024cc:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80024ce:	480b      	ldr	r0, [pc, #44]	; (80024fc <HAL_InitTick+0xd0>)
 80024d0:	f006 f89d 	bl	800860e <HAL_TIM_Base_Init>
 80024d4:	4603      	mov	r3, r0
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d104      	bne.n	80024e4 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80024da:	4808      	ldr	r0, [pc, #32]	; (80024fc <HAL_InitTick+0xd0>)
 80024dc:	f006 f8f8 	bl	80086d0 <HAL_TIM_Base_Start_IT>
 80024e0:	4603      	mov	r3, r0
 80024e2:	e000      	b.n	80024e6 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3740      	adds	r7, #64	; 0x40
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	240002d4 	.word	0x240002d4
 80024f4:	58024400 	.word	0x58024400
 80024f8:	431bde83 	.word	0x431bde83
 80024fc:	24004bdc 	.word	0x24004bdc
 8002500:	40001000 	.word	0x40001000

08002504 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002504:	b480      	push	{r7}
 8002506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002508:	e7fe      	b.n	8002508 <NMI_Handler+0x4>

0800250a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800250a:	b480      	push	{r7}
 800250c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800250e:	e7fe      	b.n	800250e <HardFault_Handler+0x4>

08002510 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002510:	b480      	push	{r7}
 8002512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002514:	e7fe      	b.n	8002514 <MemManage_Handler+0x4>

08002516 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002516:	b480      	push	{r7}
 8002518:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800251a:	e7fe      	b.n	800251a <BusFault_Handler+0x4>

0800251c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800251c:	b480      	push	{r7}
 800251e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002520:	e7fe      	b.n	8002520 <UsageFault_Handler+0x4>

08002522 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002522:	b480      	push	{r7}
 8002524:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002526:	bf00      	nop
 8002528:	46bd      	mov	sp, r7
 800252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252e:	4770      	bx	lr

08002530 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8002534:	2002      	movs	r0, #2
 8002536:	f002 ffcc 	bl	80054d2 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800253a:	bf00      	nop
 800253c:	bd80      	pop	{r7, pc}

0800253e <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800253e:	b580      	push	{r7, lr}
 8002540:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002542:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002546:	f002 ffc4 	bl	80054d2 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800254a:	bf00      	nop
 800254c:	bd80      	pop	{r7, pc}
	...

08002550 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002554:	4802      	ldr	r0, [pc, #8]	; (8002560 <TIM6_DAC_IRQHandler+0x10>)
 8002556:	f006 f92b 	bl	80087b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800255a:	bf00      	nop
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	24004bdc 	.word	0x24004bdc

08002564 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8002568:	4802      	ldr	r0, [pc, #8]	; (8002574 <ETH_IRQHandler+0x10>)
 800256a:	f001 fbe5 	bl	8003d38 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 800256e:	bf00      	nop
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	24004d5c 	.word	0x24004d5c

08002578 <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 800257c:	4802      	ldr	r0, [pc, #8]	; (8002588 <SPI4_IRQHandler+0x10>)
 800257e:	f005 fceb 	bl	8007f58 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 8002582:	bf00      	nop
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	24004b54 	.word	0x24004b54

0800258c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800258c:	b480      	push	{r7}
 800258e:	af00      	add	r7, sp, #0
	return 1;
 8002590:	2301      	movs	r3, #1
}
 8002592:	4618      	mov	r0, r3
 8002594:	46bd      	mov	sp, r7
 8002596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259a:	4770      	bx	lr

0800259c <_kill>:

int _kill(int pid, int sig)
{
 800259c:	b480      	push	{r7}
 800259e:	b083      	sub	sp, #12
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
 80025a4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80025a6:	4b05      	ldr	r3, [pc, #20]	; (80025bc <_kill+0x20>)
 80025a8:	2216      	movs	r2, #22
 80025aa:	601a      	str	r2, [r3, #0]
	return -1;
 80025ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	370c      	adds	r7, #12
 80025b4:	46bd      	mov	sp, r7
 80025b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ba:	4770      	bx	lr
 80025bc:	24007f80 	.word	0x24007f80

080025c0 <_exit>:

void _exit (int status)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b082      	sub	sp, #8
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80025c8:	f04f 31ff 	mov.w	r1, #4294967295
 80025cc:	6878      	ldr	r0, [r7, #4]
 80025ce:	f7ff ffe5 	bl	800259c <_kill>
	while (1) {}		/* Make sure we hang here */
 80025d2:	e7fe      	b.n	80025d2 <_exit+0x12>

080025d4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b086      	sub	sp, #24
 80025d8:	af00      	add	r7, sp, #0
 80025da:	60f8      	str	r0, [r7, #12]
 80025dc:	60b9      	str	r1, [r7, #8]
 80025de:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025e0:	2300      	movs	r3, #0
 80025e2:	617b      	str	r3, [r7, #20]
 80025e4:	e00a      	b.n	80025fc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80025e6:	f3af 8000 	nop.w
 80025ea:	4601      	mov	r1, r0
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	1c5a      	adds	r2, r3, #1
 80025f0:	60ba      	str	r2, [r7, #8]
 80025f2:	b2ca      	uxtb	r2, r1
 80025f4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	3301      	adds	r3, #1
 80025fa:	617b      	str	r3, [r7, #20]
 80025fc:	697a      	ldr	r2, [r7, #20]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	429a      	cmp	r2, r3
 8002602:	dbf0      	blt.n	80025e6 <_read+0x12>
	}

return len;
 8002604:	687b      	ldr	r3, [r7, #4]
}
 8002606:	4618      	mov	r0, r3
 8002608:	3718      	adds	r7, #24
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}

0800260e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800260e:	b580      	push	{r7, lr}
 8002610:	b086      	sub	sp, #24
 8002612:	af00      	add	r7, sp, #0
 8002614:	60f8      	str	r0, [r7, #12]
 8002616:	60b9      	str	r1, [r7, #8]
 8002618:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800261a:	2300      	movs	r3, #0
 800261c:	617b      	str	r3, [r7, #20]
 800261e:	e009      	b.n	8002634 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	1c5a      	adds	r2, r3, #1
 8002624:	60ba      	str	r2, [r7, #8]
 8002626:	781b      	ldrb	r3, [r3, #0]
 8002628:	4618      	mov	r0, r3
 800262a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	3301      	adds	r3, #1
 8002632:	617b      	str	r3, [r7, #20]
 8002634:	697a      	ldr	r2, [r7, #20]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	429a      	cmp	r2, r3
 800263a:	dbf1      	blt.n	8002620 <_write+0x12>
	}
	return len;
 800263c:	687b      	ldr	r3, [r7, #4]
}
 800263e:	4618      	mov	r0, r3
 8002640:	3718      	adds	r7, #24
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}

08002646 <_close>:

int _close(int file)
{
 8002646:	b480      	push	{r7}
 8002648:	b083      	sub	sp, #12
 800264a:	af00      	add	r7, sp, #0
 800264c:	6078      	str	r0, [r7, #4]
	return -1;
 800264e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002652:	4618      	mov	r0, r3
 8002654:	370c      	adds	r7, #12
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr

0800265e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800265e:	b480      	push	{r7}
 8002660:	b083      	sub	sp, #12
 8002662:	af00      	add	r7, sp, #0
 8002664:	6078      	str	r0, [r7, #4]
 8002666:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800266e:	605a      	str	r2, [r3, #4]
	return 0;
 8002670:	2300      	movs	r3, #0
}
 8002672:	4618      	mov	r0, r3
 8002674:	370c      	adds	r7, #12
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr

0800267e <_isatty>:

int _isatty(int file)
{
 800267e:	b480      	push	{r7}
 8002680:	b083      	sub	sp, #12
 8002682:	af00      	add	r7, sp, #0
 8002684:	6078      	str	r0, [r7, #4]
	return 1;
 8002686:	2301      	movs	r3, #1
}
 8002688:	4618      	mov	r0, r3
 800268a:	370c      	adds	r7, #12
 800268c:	46bd      	mov	sp, r7
 800268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002692:	4770      	bx	lr

08002694 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002694:	b480      	push	{r7}
 8002696:	b085      	sub	sp, #20
 8002698:	af00      	add	r7, sp, #0
 800269a:	60f8      	str	r0, [r7, #12]
 800269c:	60b9      	str	r1, [r7, #8]
 800269e:	607a      	str	r2, [r7, #4]
	return 0;
 80026a0:	2300      	movs	r3, #0
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3714      	adds	r7, #20
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr
	...

080026b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b087      	sub	sp, #28
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80026b8:	4a14      	ldr	r2, [pc, #80]	; (800270c <_sbrk+0x5c>)
 80026ba:	4b15      	ldr	r3, [pc, #84]	; (8002710 <_sbrk+0x60>)
 80026bc:	1ad3      	subs	r3, r2, r3
 80026be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80026c4:	4b13      	ldr	r3, [pc, #76]	; (8002714 <_sbrk+0x64>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d102      	bne.n	80026d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80026cc:	4b11      	ldr	r3, [pc, #68]	; (8002714 <_sbrk+0x64>)
 80026ce:	4a12      	ldr	r2, [pc, #72]	; (8002718 <_sbrk+0x68>)
 80026d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80026d2:	4b10      	ldr	r3, [pc, #64]	; (8002714 <_sbrk+0x64>)
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	4413      	add	r3, r2
 80026da:	693a      	ldr	r2, [r7, #16]
 80026dc:	429a      	cmp	r2, r3
 80026de:	d205      	bcs.n	80026ec <_sbrk+0x3c>
  {
    errno = ENOMEM;
 80026e0:	4b0e      	ldr	r3, [pc, #56]	; (800271c <_sbrk+0x6c>)
 80026e2:	220c      	movs	r2, #12
 80026e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80026e6:	f04f 33ff 	mov.w	r3, #4294967295
 80026ea:	e009      	b.n	8002700 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 80026ec:	4b09      	ldr	r3, [pc, #36]	; (8002714 <_sbrk+0x64>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80026f2:	4b08      	ldr	r3, [pc, #32]	; (8002714 <_sbrk+0x64>)
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	4413      	add	r3, r2
 80026fa:	4a06      	ldr	r2, [pc, #24]	; (8002714 <_sbrk+0x64>)
 80026fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80026fe:	68fb      	ldr	r3, [r7, #12]
}
 8002700:	4618      	mov	r0, r3
 8002702:	371c      	adds	r7, #28
 8002704:	46bd      	mov	sp, r7
 8002706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270a:	4770      	bx	lr
 800270c:	24080000 	.word	0x24080000
 8002710:	00000400 	.word	0x00000400
 8002714:	24000748 	.word	0x24000748
 8002718:	24007f98 	.word	0x24007f98
 800271c:	24007f80 	.word	0x24007f80

08002720 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002720:	b480      	push	{r7}
 8002722:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002724:	4b39      	ldr	r3, [pc, #228]	; (800280c <SystemInit+0xec>)
 8002726:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800272a:	4a38      	ldr	r2, [pc, #224]	; (800280c <SystemInit+0xec>)
 800272c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002730:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002734:	4b36      	ldr	r3, [pc, #216]	; (8002810 <SystemInit+0xf0>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f003 030f 	and.w	r3, r3, #15
 800273c:	2b06      	cmp	r3, #6
 800273e:	d807      	bhi.n	8002750 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002740:	4b33      	ldr	r3, [pc, #204]	; (8002810 <SystemInit+0xf0>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f023 030f 	bic.w	r3, r3, #15
 8002748:	4a31      	ldr	r2, [pc, #196]	; (8002810 <SystemInit+0xf0>)
 800274a:	f043 0307 	orr.w	r3, r3, #7
 800274e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002750:	4b30      	ldr	r3, [pc, #192]	; (8002814 <SystemInit+0xf4>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a2f      	ldr	r2, [pc, #188]	; (8002814 <SystemInit+0xf4>)
 8002756:	f043 0301 	orr.w	r3, r3, #1
 800275a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800275c:	4b2d      	ldr	r3, [pc, #180]	; (8002814 <SystemInit+0xf4>)
 800275e:	2200      	movs	r2, #0
 8002760:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002762:	4b2c      	ldr	r3, [pc, #176]	; (8002814 <SystemInit+0xf4>)
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	492b      	ldr	r1, [pc, #172]	; (8002814 <SystemInit+0xf4>)
 8002768:	4b2b      	ldr	r3, [pc, #172]	; (8002818 <SystemInit+0xf8>)
 800276a:	4013      	ands	r3, r2
 800276c:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800276e:	4b28      	ldr	r3, [pc, #160]	; (8002810 <SystemInit+0xf0>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 0308 	and.w	r3, r3, #8
 8002776:	2b00      	cmp	r3, #0
 8002778:	d007      	beq.n	800278a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800277a:	4b25      	ldr	r3, [pc, #148]	; (8002810 <SystemInit+0xf0>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f023 030f 	bic.w	r3, r3, #15
 8002782:	4a23      	ldr	r2, [pc, #140]	; (8002810 <SystemInit+0xf0>)
 8002784:	f043 0307 	orr.w	r3, r3, #7
 8002788:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800278a:	4b22      	ldr	r3, [pc, #136]	; (8002814 <SystemInit+0xf4>)
 800278c:	2200      	movs	r2, #0
 800278e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002790:	4b20      	ldr	r3, [pc, #128]	; (8002814 <SystemInit+0xf4>)
 8002792:	2200      	movs	r2, #0
 8002794:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002796:	4b1f      	ldr	r3, [pc, #124]	; (8002814 <SystemInit+0xf4>)
 8002798:	2200      	movs	r2, #0
 800279a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800279c:	4b1d      	ldr	r3, [pc, #116]	; (8002814 <SystemInit+0xf4>)
 800279e:	4a1f      	ldr	r2, [pc, #124]	; (800281c <SystemInit+0xfc>)
 80027a0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80027a2:	4b1c      	ldr	r3, [pc, #112]	; (8002814 <SystemInit+0xf4>)
 80027a4:	4a1e      	ldr	r2, [pc, #120]	; (8002820 <SystemInit+0x100>)
 80027a6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80027a8:	4b1a      	ldr	r3, [pc, #104]	; (8002814 <SystemInit+0xf4>)
 80027aa:	4a1e      	ldr	r2, [pc, #120]	; (8002824 <SystemInit+0x104>)
 80027ac:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80027ae:	4b19      	ldr	r3, [pc, #100]	; (8002814 <SystemInit+0xf4>)
 80027b0:	2200      	movs	r2, #0
 80027b2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80027b4:	4b17      	ldr	r3, [pc, #92]	; (8002814 <SystemInit+0xf4>)
 80027b6:	4a1b      	ldr	r2, [pc, #108]	; (8002824 <SystemInit+0x104>)
 80027b8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80027ba:	4b16      	ldr	r3, [pc, #88]	; (8002814 <SystemInit+0xf4>)
 80027bc:	2200      	movs	r2, #0
 80027be:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80027c0:	4b14      	ldr	r3, [pc, #80]	; (8002814 <SystemInit+0xf4>)
 80027c2:	4a18      	ldr	r2, [pc, #96]	; (8002824 <SystemInit+0x104>)
 80027c4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80027c6:	4b13      	ldr	r3, [pc, #76]	; (8002814 <SystemInit+0xf4>)
 80027c8:	2200      	movs	r2, #0
 80027ca:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80027cc:	4b11      	ldr	r3, [pc, #68]	; (8002814 <SystemInit+0xf4>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a10      	ldr	r2, [pc, #64]	; (8002814 <SystemInit+0xf4>)
 80027d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027d6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80027d8:	4b0e      	ldr	r3, [pc, #56]	; (8002814 <SystemInit+0xf4>)
 80027da:	2200      	movs	r2, #0
 80027dc:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80027de:	4b12      	ldr	r3, [pc, #72]	; (8002828 <SystemInit+0x108>)
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	4b12      	ldr	r3, [pc, #72]	; (800282c <SystemInit+0x10c>)
 80027e4:	4013      	ands	r3, r2
 80027e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80027ea:	d202      	bcs.n	80027f2 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80027ec:	4b10      	ldr	r3, [pc, #64]	; (8002830 <SystemInit+0x110>)
 80027ee:	2201      	movs	r2, #1
 80027f0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80027f2:	4b10      	ldr	r3, [pc, #64]	; (8002834 <SystemInit+0x114>)
 80027f4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80027f8:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80027fa:	4b04      	ldr	r3, [pc, #16]	; (800280c <SystemInit+0xec>)
 80027fc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002800:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8002802:	bf00      	nop
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr
 800280c:	e000ed00 	.word	0xe000ed00
 8002810:	52002000 	.word	0x52002000
 8002814:	58024400 	.word	0x58024400
 8002818:	eaf6ed7f 	.word	0xeaf6ed7f
 800281c:	02020200 	.word	0x02020200
 8002820:	01ff0000 	.word	0x01ff0000
 8002824:	01010280 	.word	0x01010280
 8002828:	5c001000 	.word	0x5c001000
 800282c:	ffff0000 	.word	0xffff0000
 8002830:	51008108 	.word	0x51008108
 8002834:	52004000 	.word	0x52004000

08002838 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002838:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002870 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800283c:	f7ff ff70 	bl	8002720 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002840:	480c      	ldr	r0, [pc, #48]	; (8002874 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002842:	490d      	ldr	r1, [pc, #52]	; (8002878 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002844:	4a0d      	ldr	r2, [pc, #52]	; (800287c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002846:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002848:	e002      	b.n	8002850 <LoopCopyDataInit>

0800284a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800284a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800284c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800284e:	3304      	adds	r3, #4

08002850 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002850:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002852:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002854:	d3f9      	bcc.n	800284a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002856:	4a0a      	ldr	r2, [pc, #40]	; (8002880 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002858:	4c0a      	ldr	r4, [pc, #40]	; (8002884 <LoopFillZerobss+0x22>)
  movs r3, #0
 800285a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800285c:	e001      	b.n	8002862 <LoopFillZerobss>

0800285e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800285e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002860:	3204      	adds	r2, #4

08002862 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002862:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002864:	d3fb      	bcc.n	800285e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002866:	f01c f825 	bl	801e8b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800286a:	f7fe f92b 	bl	8000ac4 <main>
  bx  lr
 800286e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002870:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002874:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002878:	240004d8 	.word	0x240004d8
  ldr r2, =_sidata
 800287c:	080276d8 	.word	0x080276d8
  ldr r2, =_sbss
 8002880:	240004d8 	.word	0x240004d8
  ldr r4, =_ebss
 8002884:	24007f94 	.word	0x24007f94

08002888 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002888:	e7fe      	b.n	8002888 <ADC3_IRQHandler>

0800288a <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 800288a:	b480      	push	{r7}
 800288c:	b083      	sub	sp, #12
 800288e:	af00      	add	r7, sp, #0
 8002890:	6078      	str	r0, [r7, #4]
 8002892:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d00b      	beq.n	80028b2 <LAN8742_RegisterBusIO+0x28>
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	68db      	ldr	r3, [r3, #12]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d007      	beq.n	80028b2 <LAN8742_RegisterBusIO+0x28>
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d003      	beq.n	80028b2 <LAN8742_RegisterBusIO+0x28>
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	691b      	ldr	r3, [r3, #16]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d102      	bne.n	80028b8 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 80028b2:	f04f 33ff 	mov.w	r3, #4294967295
 80028b6:	e014      	b.n	80028e2 <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	685a      	ldr	r2, [r3, #4]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	68da      	ldr	r2, [r3, #12]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	689a      	ldr	r2, [r3, #8]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	691a      	ldr	r2, [r3, #16]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 80028e0:	2300      	movs	r3, #0
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	370c      	adds	r7, #12
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr

080028ee <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 80028ee:	b580      	push	{r7, lr}
 80028f0:	b086      	sub	sp, #24
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 80028f6:	2300      	movs	r3, #0
 80028f8:	60fb      	str	r3, [r7, #12]
 80028fa:	2300      	movs	r3, #0
 80028fc:	60bb      	str	r3, [r7, #8]
 80028fe:	2300      	movs	r3, #0
 8002900:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8002902:	2300      	movs	r3, #0
 8002904:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d17c      	bne.n	8002a08 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d002      	beq.n	800291c <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2220      	movs	r2, #32
 8002920:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8002922:	2300      	movs	r3, #0
 8002924:	617b      	str	r3, [r7, #20]
 8002926:	e01c      	b.n	8002962 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	695b      	ldr	r3, [r3, #20]
 800292c:	f107 0208 	add.w	r2, r7, #8
 8002930:	2112      	movs	r1, #18
 8002932:	6978      	ldr	r0, [r7, #20]
 8002934:	4798      	blx	r3
 8002936:	4603      	mov	r3, r0
 8002938:	2b00      	cmp	r3, #0
 800293a:	da03      	bge.n	8002944 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 800293c:	f06f 0304 	mvn.w	r3, #4
 8002940:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 8002942:	e00b      	b.n	800295c <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	f003 031f 	and.w	r3, r3, #31
 800294a:	697a      	ldr	r2, [r7, #20]
 800294c:	429a      	cmp	r2, r3
 800294e:	d105      	bne.n	800295c <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	697a      	ldr	r2, [r7, #20]
 8002954:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8002956:	2300      	movs	r3, #0
 8002958:	613b      	str	r3, [r7, #16]
         break;
 800295a:	e005      	b.n	8002968 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	3301      	adds	r3, #1
 8002960:	617b      	str	r3, [r7, #20]
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	2b1f      	cmp	r3, #31
 8002966:	d9df      	bls.n	8002928 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	2b1f      	cmp	r3, #31
 800296e:	d902      	bls.n	8002976 <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8002970:	f06f 0302 	mvn.w	r3, #2
 8002974:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d145      	bne.n	8002a08 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	691b      	ldr	r3, [r3, #16]
 8002980:	687a      	ldr	r2, [r7, #4]
 8002982:	6810      	ldr	r0, [r2, #0]
 8002984:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002988:	2100      	movs	r1, #0
 800298a:	4798      	blx	r3
 800298c:	4603      	mov	r3, r0
 800298e:	2b00      	cmp	r3, #0
 8002990:	db37      	blt.n	8002a02 <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	695b      	ldr	r3, [r3, #20]
 8002996:	687a      	ldr	r2, [r7, #4]
 8002998:	6810      	ldr	r0, [r2, #0]
 800299a:	f107 0208 	add.w	r2, r7, #8
 800299e:	2100      	movs	r1, #0
 80029a0:	4798      	blx	r3
 80029a2:	4603      	mov	r3, r0
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	db28      	blt.n	80029fa <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	699b      	ldr	r3, [r3, #24]
 80029ac:	4798      	blx	r3
 80029ae:	4603      	mov	r3, r0
 80029b0:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 80029b2:	e01c      	b.n	80029ee <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	699b      	ldr	r3, [r3, #24]
 80029b8:	4798      	blx	r3
 80029ba:	4603      	mov	r3, r0
 80029bc:	461a      	mov	r2, r3
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	1ad3      	subs	r3, r2, r3
 80029c2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80029c6:	d80e      	bhi.n	80029e6 <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	695b      	ldr	r3, [r3, #20]
 80029cc:	687a      	ldr	r2, [r7, #4]
 80029ce:	6810      	ldr	r0, [r2, #0]
 80029d0:	f107 0208 	add.w	r2, r7, #8
 80029d4:	2100      	movs	r1, #0
 80029d6:	4798      	blx	r3
 80029d8:	4603      	mov	r3, r0
 80029da:	2b00      	cmp	r3, #0
 80029dc:	da07      	bge.n	80029ee <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 80029de:	f06f 0304 	mvn.w	r3, #4
 80029e2:	613b      	str	r3, [r7, #16]
                 break;
 80029e4:	e010      	b.n	8002a08 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 80029e6:	f06f 0301 	mvn.w	r3, #1
 80029ea:	613b      	str	r3, [r7, #16]
               break;
 80029ec:	e00c      	b.n	8002a08 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d1dd      	bne.n	80029b4 <LAN8742_Init+0xc6>
 80029f8:	e006      	b.n	8002a08 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 80029fa:	f06f 0304 	mvn.w	r3, #4
 80029fe:	613b      	str	r3, [r7, #16]
 8002a00:	e002      	b.n	8002a08 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8002a02:	f06f 0303 	mvn.w	r3, #3
 8002a06:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d112      	bne.n	8002a34 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	699b      	ldr	r3, [r3, #24]
 8002a12:	4798      	blx	r3
 8002a14:	4603      	mov	r3, r0
 8002a16:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8002a18:	bf00      	nop
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	699b      	ldr	r3, [r3, #24]
 8002a1e:	4798      	blx	r3
 8002a20:	4603      	mov	r3, r0
 8002a22:	461a      	mov	r2, r3
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	1ad3      	subs	r3, r2, r3
 8002a28:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002a2c:	d9f5      	bls.n	8002a1a <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2201      	movs	r2, #1
 8002a32:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8002a34:	693b      	ldr	r3, [r7, #16]
 }
 8002a36:	4618      	mov	r0, r3
 8002a38:	3718      	adds	r7, #24
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}

08002a3e <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8002a3e:	b580      	push	{r7, lr}
 8002a40:	b084      	sub	sp, #16
 8002a42:	af00      	add	r7, sp, #0
 8002a44:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8002a46:	2300      	movs	r3, #0
 8002a48:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	695b      	ldr	r3, [r3, #20]
 8002a4e:	687a      	ldr	r2, [r7, #4]
 8002a50:	6810      	ldr	r0, [r2, #0]
 8002a52:	f107 020c 	add.w	r2, r7, #12
 8002a56:	2101      	movs	r1, #1
 8002a58:	4798      	blx	r3
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	da02      	bge.n	8002a66 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8002a60:	f06f 0304 	mvn.w	r3, #4
 8002a64:	e06e      	b.n	8002b44 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	695b      	ldr	r3, [r3, #20]
 8002a6a:	687a      	ldr	r2, [r7, #4]
 8002a6c:	6810      	ldr	r0, [r2, #0]
 8002a6e:	f107 020c 	add.w	r2, r7, #12
 8002a72:	2101      	movs	r1, #1
 8002a74:	4798      	blx	r3
 8002a76:	4603      	mov	r3, r0
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	da02      	bge.n	8002a82 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8002a7c:	f06f 0304 	mvn.w	r3, #4
 8002a80:	e060      	b.n	8002b44 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	f003 0304 	and.w	r3, r3, #4
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d101      	bne.n	8002a90 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	e059      	b.n	8002b44 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	695b      	ldr	r3, [r3, #20]
 8002a94:	687a      	ldr	r2, [r7, #4]
 8002a96:	6810      	ldr	r0, [r2, #0]
 8002a98:	f107 020c 	add.w	r2, r7, #12
 8002a9c:	2100      	movs	r1, #0
 8002a9e:	4798      	blx	r3
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	da02      	bge.n	8002aac <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8002aa6:	f06f 0304 	mvn.w	r3, #4
 8002aaa:	e04b      	b.n	8002b44 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d11b      	bne.n	8002aee <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d006      	beq.n	8002ace <LAN8742_GetLinkState+0x90>
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d001      	beq.n	8002ace <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8002aca:	2302      	movs	r3, #2
 8002acc:	e03a      	b.n	8002b44 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d001      	beq.n	8002adc <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8002ad8:	2303      	movs	r3, #3
 8002ada:	e033      	b.n	8002b44 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d001      	beq.n	8002aea <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8002ae6:	2304      	movs	r3, #4
 8002ae8:	e02c      	b.n	8002b44 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8002aea:	2305      	movs	r3, #5
 8002aec:	e02a      	b.n	8002b44 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	695b      	ldr	r3, [r3, #20]
 8002af2:	687a      	ldr	r2, [r7, #4]
 8002af4:	6810      	ldr	r0, [r2, #0]
 8002af6:	f107 020c 	add.w	r2, r7, #12
 8002afa:	211f      	movs	r1, #31
 8002afc:	4798      	blx	r3
 8002afe:	4603      	mov	r3, r0
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	da02      	bge.n	8002b0a <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8002b04:	f06f 0304 	mvn.w	r3, #4
 8002b08:	e01c      	b.n	8002b44 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d101      	bne.n	8002b18 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8002b14:	2306      	movs	r3, #6
 8002b16:	e015      	b.n	8002b44 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	f003 031c 	and.w	r3, r3, #28
 8002b1e:	2b18      	cmp	r3, #24
 8002b20:	d101      	bne.n	8002b26 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8002b22:	2302      	movs	r3, #2
 8002b24:	e00e      	b.n	8002b44 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	f003 031c 	and.w	r3, r3, #28
 8002b2c:	2b08      	cmp	r3, #8
 8002b2e:	d101      	bne.n	8002b34 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8002b30:	2303      	movs	r3, #3
 8002b32:	e007      	b.n	8002b44 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	f003 031c 	and.w	r3, r3, #28
 8002b3a:	2b14      	cmp	r3, #20
 8002b3c:	d101      	bne.n	8002b42 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8002b3e:	2304      	movs	r3, #4
 8002b40:	e000      	b.n	8002b44 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8002b42:	2305      	movs	r3, #5
    }				
  }
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	3710      	adds	r7, #16
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}

08002b4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b082      	sub	sp, #8
 8002b50:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b52:	2003      	movs	r0, #3
 8002b54:	f000 f923 	bl	8002d9e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002b58:	f003 fad6 	bl	8006108 <HAL_RCC_GetSysClockFreq>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	4b15      	ldr	r3, [pc, #84]	; (8002bb4 <HAL_Init+0x68>)
 8002b60:	699b      	ldr	r3, [r3, #24]
 8002b62:	0a1b      	lsrs	r3, r3, #8
 8002b64:	f003 030f 	and.w	r3, r3, #15
 8002b68:	4913      	ldr	r1, [pc, #76]	; (8002bb8 <HAL_Init+0x6c>)
 8002b6a:	5ccb      	ldrb	r3, [r1, r3]
 8002b6c:	f003 031f 	and.w	r3, r3, #31
 8002b70:	fa22 f303 	lsr.w	r3, r2, r3
 8002b74:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002b76:	4b0f      	ldr	r3, [pc, #60]	; (8002bb4 <HAL_Init+0x68>)
 8002b78:	699b      	ldr	r3, [r3, #24]
 8002b7a:	f003 030f 	and.w	r3, r3, #15
 8002b7e:	4a0e      	ldr	r2, [pc, #56]	; (8002bb8 <HAL_Init+0x6c>)
 8002b80:	5cd3      	ldrb	r3, [r2, r3]
 8002b82:	f003 031f 	and.w	r3, r3, #31
 8002b86:	687a      	ldr	r2, [r7, #4]
 8002b88:	fa22 f303 	lsr.w	r3, r2, r3
 8002b8c:	4a0b      	ldr	r2, [pc, #44]	; (8002bbc <HAL_Init+0x70>)
 8002b8e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002b90:	4a0b      	ldr	r2, [pc, #44]	; (8002bc0 <HAL_Init+0x74>)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002b96:	2000      	movs	r0, #0
 8002b98:	f7ff fc48 	bl	800242c <HAL_InitTick>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d001      	beq.n	8002ba6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e002      	b.n	8002bac <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002ba6:	f7ff fb4f 	bl	8002248 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002baa:	2300      	movs	r3, #0
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	3708      	adds	r7, #8
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}
 8002bb4:	58024400 	.word	0x58024400
 8002bb8:	08026fe0 	.word	0x08026fe0
 8002bbc:	240002d0 	.word	0x240002d0
 8002bc0:	240002cc 	.word	0x240002cc

08002bc4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002bc8:	4b06      	ldr	r3, [pc, #24]	; (8002be4 <HAL_IncTick+0x20>)
 8002bca:	781b      	ldrb	r3, [r3, #0]
 8002bcc:	461a      	mov	r2, r3
 8002bce:	4b06      	ldr	r3, [pc, #24]	; (8002be8 <HAL_IncTick+0x24>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4413      	add	r3, r2
 8002bd4:	4a04      	ldr	r2, [pc, #16]	; (8002be8 <HAL_IncTick+0x24>)
 8002bd6:	6013      	str	r3, [r2, #0]
}
 8002bd8:	bf00      	nop
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr
 8002be2:	bf00      	nop
 8002be4:	240002d8 	.word	0x240002d8
 8002be8:	24004c28 	.word	0x24004c28

08002bec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002bec:	b480      	push	{r7}
 8002bee:	af00      	add	r7, sp, #0
  return uwTick;
 8002bf0:	4b03      	ldr	r3, [pc, #12]	; (8002c00 <HAL_GetTick+0x14>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr
 8002bfe:	bf00      	nop
 8002c00:	24004c28 	.word	0x24004c28

08002c04 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002c04:	b480      	push	{r7}
 8002c06:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002c08:	4b03      	ldr	r3, [pc, #12]	; (8002c18 <HAL_GetREVID+0x14>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	0c1b      	lsrs	r3, r3, #16
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	46bd      	mov	sp, r7
 8002c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c16:	4770      	bx	lr
 8002c18:	5c001000 	.word	0x5c001000

08002c1c <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b083      	sub	sp, #12
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8002c24:	4b06      	ldr	r3, [pc, #24]	; (8002c40 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002c2c:	4904      	ldr	r1, [pc, #16]	; (8002c40 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	4313      	orrs	r3, r2
 8002c32:	604b      	str	r3, [r1, #4]
}
 8002c34:	bf00      	nop
 8002c36:	370c      	adds	r7, #12
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3e:	4770      	bx	lr
 8002c40:	58000400 	.word	0x58000400

08002c44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b085      	sub	sp, #20
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	f003 0307 	and.w	r3, r3, #7
 8002c52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c54:	4b0b      	ldr	r3, [pc, #44]	; (8002c84 <__NVIC_SetPriorityGrouping+0x40>)
 8002c56:	68db      	ldr	r3, [r3, #12]
 8002c58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c5a:	68ba      	ldr	r2, [r7, #8]
 8002c5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c60:	4013      	ands	r3, r2
 8002c62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002c6c:	4b06      	ldr	r3, [pc, #24]	; (8002c88 <__NVIC_SetPriorityGrouping+0x44>)
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c72:	4a04      	ldr	r2, [pc, #16]	; (8002c84 <__NVIC_SetPriorityGrouping+0x40>)
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	60d3      	str	r3, [r2, #12]
}
 8002c78:	bf00      	nop
 8002c7a:	3714      	adds	r7, #20
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c82:	4770      	bx	lr
 8002c84:	e000ed00 	.word	0xe000ed00
 8002c88:	05fa0000 	.word	0x05fa0000

08002c8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c90:	4b04      	ldr	r3, [pc, #16]	; (8002ca4 <__NVIC_GetPriorityGrouping+0x18>)
 8002c92:	68db      	ldr	r3, [r3, #12]
 8002c94:	0a1b      	lsrs	r3, r3, #8
 8002c96:	f003 0307 	and.w	r3, r3, #7
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca2:	4770      	bx	lr
 8002ca4:	e000ed00 	.word	0xe000ed00

08002ca8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b083      	sub	sp, #12
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	4603      	mov	r3, r0
 8002cb0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002cb2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	db0b      	blt.n	8002cd2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002cba:	88fb      	ldrh	r3, [r7, #6]
 8002cbc:	f003 021f 	and.w	r2, r3, #31
 8002cc0:	4907      	ldr	r1, [pc, #28]	; (8002ce0 <__NVIC_EnableIRQ+0x38>)
 8002cc2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002cc6:	095b      	lsrs	r3, r3, #5
 8002cc8:	2001      	movs	r0, #1
 8002cca:	fa00 f202 	lsl.w	r2, r0, r2
 8002cce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002cd2:	bf00      	nop
 8002cd4:	370c      	adds	r7, #12
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cdc:	4770      	bx	lr
 8002cde:	bf00      	nop
 8002ce0:	e000e100 	.word	0xe000e100

08002ce4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b083      	sub	sp, #12
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	4603      	mov	r3, r0
 8002cec:	6039      	str	r1, [r7, #0]
 8002cee:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002cf0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	db0a      	blt.n	8002d0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	b2da      	uxtb	r2, r3
 8002cfc:	490c      	ldr	r1, [pc, #48]	; (8002d30 <__NVIC_SetPriority+0x4c>)
 8002cfe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d02:	0112      	lsls	r2, r2, #4
 8002d04:	b2d2      	uxtb	r2, r2
 8002d06:	440b      	add	r3, r1
 8002d08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d0c:	e00a      	b.n	8002d24 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	b2da      	uxtb	r2, r3
 8002d12:	4908      	ldr	r1, [pc, #32]	; (8002d34 <__NVIC_SetPriority+0x50>)
 8002d14:	88fb      	ldrh	r3, [r7, #6]
 8002d16:	f003 030f 	and.w	r3, r3, #15
 8002d1a:	3b04      	subs	r3, #4
 8002d1c:	0112      	lsls	r2, r2, #4
 8002d1e:	b2d2      	uxtb	r2, r2
 8002d20:	440b      	add	r3, r1
 8002d22:	761a      	strb	r2, [r3, #24]
}
 8002d24:	bf00      	nop
 8002d26:	370c      	adds	r7, #12
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2e:	4770      	bx	lr
 8002d30:	e000e100 	.word	0xe000e100
 8002d34:	e000ed00 	.word	0xe000ed00

08002d38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b089      	sub	sp, #36	; 0x24
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	60f8      	str	r0, [r7, #12]
 8002d40:	60b9      	str	r1, [r7, #8]
 8002d42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	f003 0307 	and.w	r3, r3, #7
 8002d4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d4c:	69fb      	ldr	r3, [r7, #28]
 8002d4e:	f1c3 0307 	rsb	r3, r3, #7
 8002d52:	2b04      	cmp	r3, #4
 8002d54:	bf28      	it	cs
 8002d56:	2304      	movcs	r3, #4
 8002d58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d5a:	69fb      	ldr	r3, [r7, #28]
 8002d5c:	3304      	adds	r3, #4
 8002d5e:	2b06      	cmp	r3, #6
 8002d60:	d902      	bls.n	8002d68 <NVIC_EncodePriority+0x30>
 8002d62:	69fb      	ldr	r3, [r7, #28]
 8002d64:	3b03      	subs	r3, #3
 8002d66:	e000      	b.n	8002d6a <NVIC_EncodePriority+0x32>
 8002d68:	2300      	movs	r3, #0
 8002d6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d6c:	f04f 32ff 	mov.w	r2, #4294967295
 8002d70:	69bb      	ldr	r3, [r7, #24]
 8002d72:	fa02 f303 	lsl.w	r3, r2, r3
 8002d76:	43da      	mvns	r2, r3
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	401a      	ands	r2, r3
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d80:	f04f 31ff 	mov.w	r1, #4294967295
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	fa01 f303 	lsl.w	r3, r1, r3
 8002d8a:	43d9      	mvns	r1, r3
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d90:	4313      	orrs	r3, r2
         );
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	3724      	adds	r7, #36	; 0x24
 8002d96:	46bd      	mov	sp, r7
 8002d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9c:	4770      	bx	lr

08002d9e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d9e:	b580      	push	{r7, lr}
 8002da0:	b082      	sub	sp, #8
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002da6:	6878      	ldr	r0, [r7, #4]
 8002da8:	f7ff ff4c 	bl	8002c44 <__NVIC_SetPriorityGrouping>
}
 8002dac:	bf00      	nop
 8002dae:	3708      	adds	r7, #8
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}

08002db4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b086      	sub	sp, #24
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	4603      	mov	r3, r0
 8002dbc:	60b9      	str	r1, [r7, #8]
 8002dbe:	607a      	str	r2, [r7, #4]
 8002dc0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002dc2:	f7ff ff63 	bl	8002c8c <__NVIC_GetPriorityGrouping>
 8002dc6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002dc8:	687a      	ldr	r2, [r7, #4]
 8002dca:	68b9      	ldr	r1, [r7, #8]
 8002dcc:	6978      	ldr	r0, [r7, #20]
 8002dce:	f7ff ffb3 	bl	8002d38 <NVIC_EncodePriority>
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002dd8:	4611      	mov	r1, r2
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f7ff ff82 	bl	8002ce4 <__NVIC_SetPriority>
}
 8002de0:	bf00      	nop
 8002de2:	3718      	adds	r7, #24
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}

08002de8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b082      	sub	sp, #8
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	4603      	mov	r3, r0
 8002df0:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002df2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002df6:	4618      	mov	r0, r3
 8002df8:	f7ff ff56 	bl	8002ca8 <__NVIC_EnableIRQ>
}
 8002dfc:	bf00      	nop
 8002dfe:	3708      	adds	r7, #8
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}

08002e04 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8002e04:	b480      	push	{r7}
 8002e06:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002e08:	f3bf 8f5f 	dmb	sy
}
 8002e0c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002e0e:	4b07      	ldr	r3, [pc, #28]	; (8002e2c <HAL_MPU_Disable+0x28>)
 8002e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e12:	4a06      	ldr	r2, [pc, #24]	; (8002e2c <HAL_MPU_Disable+0x28>)
 8002e14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e18:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8002e1a:	4b05      	ldr	r3, [pc, #20]	; (8002e30 <HAL_MPU_Disable+0x2c>)
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	605a      	str	r2, [r3, #4]
}
 8002e20:	bf00      	nop
 8002e22:	46bd      	mov	sp, r7
 8002e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e28:	4770      	bx	lr
 8002e2a:	bf00      	nop
 8002e2c:	e000ed00 	.word	0xe000ed00
 8002e30:	e000ed90 	.word	0xe000ed90

08002e34 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b083      	sub	sp, #12
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002e3c:	4a0b      	ldr	r2, [pc, #44]	; (8002e6c <HAL_MPU_Enable+0x38>)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	f043 0301 	orr.w	r3, r3, #1
 8002e44:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002e46:	4b0a      	ldr	r3, [pc, #40]	; (8002e70 <HAL_MPU_Enable+0x3c>)
 8002e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e4a:	4a09      	ldr	r2, [pc, #36]	; (8002e70 <HAL_MPU_Enable+0x3c>)
 8002e4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e50:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002e52:	f3bf 8f4f 	dsb	sy
}
 8002e56:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002e58:	f3bf 8f6f 	isb	sy
}
 8002e5c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8002e5e:	bf00      	nop
 8002e60:	370c      	adds	r7, #12
 8002e62:	46bd      	mov	sp, r7
 8002e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e68:	4770      	bx	lr
 8002e6a:	bf00      	nop
 8002e6c:	e000ed90 	.word	0xe000ed90
 8002e70:	e000ed00 	.word	0xe000ed00

08002e74 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b083      	sub	sp, #12
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	785a      	ldrb	r2, [r3, #1]
 8002e80:	4b1d      	ldr	r3, [pc, #116]	; (8002ef8 <HAL_MPU_ConfigRegion+0x84>)
 8002e82:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	781b      	ldrb	r3, [r3, #0]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d029      	beq.n	8002ee0 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8002e8c:	4a1a      	ldr	r2, [pc, #104]	; (8002ef8 <HAL_MPU_ConfigRegion+0x84>)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	7b1b      	ldrb	r3, [r3, #12]
 8002e98:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	7adb      	ldrb	r3, [r3, #11]
 8002e9e:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002ea0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	7a9b      	ldrb	r3, [r3, #10]
 8002ea6:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002ea8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	7b5b      	ldrb	r3, [r3, #13]
 8002eae:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002eb0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	7b9b      	ldrb	r3, [r3, #14]
 8002eb6:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002eb8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	7bdb      	ldrb	r3, [r3, #15]
 8002ebe:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002ec0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	7a5b      	ldrb	r3, [r3, #9]
 8002ec6:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002ec8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	7a1b      	ldrb	r3, [r3, #8]
 8002ece:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002ed0:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8002ed2:	687a      	ldr	r2, [r7, #4]
 8002ed4:	7812      	ldrb	r2, [r2, #0]
 8002ed6:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002ed8:	4a07      	ldr	r2, [pc, #28]	; (8002ef8 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002eda:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002edc:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8002ede:	e005      	b.n	8002eec <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8002ee0:	4b05      	ldr	r3, [pc, #20]	; (8002ef8 <HAL_MPU_ConfigRegion+0x84>)
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8002ee6:	4b04      	ldr	r3, [pc, #16]	; (8002ef8 <HAL_MPU_ConfigRegion+0x84>)
 8002ee8:	2200      	movs	r2, #0
 8002eea:	611a      	str	r2, [r3, #16]
}
 8002eec:	bf00      	nop
 8002eee:	370c      	adds	r7, #12
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef6:	4770      	bx	lr
 8002ef8:	e000ed90 	.word	0xe000ed90

08002efc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b084      	sub	sp, #16
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d101      	bne.n	8002f0e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e205      	b.n	800331a <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f14:	b2db      	uxtb	r3, r3
 8002f16:	2b02      	cmp	r3, #2
 8002f18:	d004      	beq.n	8002f24 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2280      	movs	r2, #128	; 0x80
 8002f1e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	e1fa      	b.n	800331a <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a8c      	ldr	r2, [pc, #560]	; (800315c <HAL_DMA_Abort_IT+0x260>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d04a      	beq.n	8002fc4 <HAL_DMA_Abort_IT+0xc8>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a8b      	ldr	r2, [pc, #556]	; (8003160 <HAL_DMA_Abort_IT+0x264>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d045      	beq.n	8002fc4 <HAL_DMA_Abort_IT+0xc8>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a89      	ldr	r2, [pc, #548]	; (8003164 <HAL_DMA_Abort_IT+0x268>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d040      	beq.n	8002fc4 <HAL_DMA_Abort_IT+0xc8>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a88      	ldr	r2, [pc, #544]	; (8003168 <HAL_DMA_Abort_IT+0x26c>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d03b      	beq.n	8002fc4 <HAL_DMA_Abort_IT+0xc8>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a86      	ldr	r2, [pc, #536]	; (800316c <HAL_DMA_Abort_IT+0x270>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d036      	beq.n	8002fc4 <HAL_DMA_Abort_IT+0xc8>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a85      	ldr	r2, [pc, #532]	; (8003170 <HAL_DMA_Abort_IT+0x274>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d031      	beq.n	8002fc4 <HAL_DMA_Abort_IT+0xc8>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a83      	ldr	r2, [pc, #524]	; (8003174 <HAL_DMA_Abort_IT+0x278>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d02c      	beq.n	8002fc4 <HAL_DMA_Abort_IT+0xc8>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a82      	ldr	r2, [pc, #520]	; (8003178 <HAL_DMA_Abort_IT+0x27c>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d027      	beq.n	8002fc4 <HAL_DMA_Abort_IT+0xc8>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a80      	ldr	r2, [pc, #512]	; (800317c <HAL_DMA_Abort_IT+0x280>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d022      	beq.n	8002fc4 <HAL_DMA_Abort_IT+0xc8>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a7f      	ldr	r2, [pc, #508]	; (8003180 <HAL_DMA_Abort_IT+0x284>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d01d      	beq.n	8002fc4 <HAL_DMA_Abort_IT+0xc8>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a7d      	ldr	r2, [pc, #500]	; (8003184 <HAL_DMA_Abort_IT+0x288>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d018      	beq.n	8002fc4 <HAL_DMA_Abort_IT+0xc8>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a7c      	ldr	r2, [pc, #496]	; (8003188 <HAL_DMA_Abort_IT+0x28c>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d013      	beq.n	8002fc4 <HAL_DMA_Abort_IT+0xc8>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a7a      	ldr	r2, [pc, #488]	; (800318c <HAL_DMA_Abort_IT+0x290>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d00e      	beq.n	8002fc4 <HAL_DMA_Abort_IT+0xc8>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a79      	ldr	r2, [pc, #484]	; (8003190 <HAL_DMA_Abort_IT+0x294>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d009      	beq.n	8002fc4 <HAL_DMA_Abort_IT+0xc8>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a77      	ldr	r2, [pc, #476]	; (8003194 <HAL_DMA_Abort_IT+0x298>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d004      	beq.n	8002fc4 <HAL_DMA_Abort_IT+0xc8>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a76      	ldr	r2, [pc, #472]	; (8003198 <HAL_DMA_Abort_IT+0x29c>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d101      	bne.n	8002fc8 <HAL_DMA_Abort_IT+0xcc>
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	e000      	b.n	8002fca <HAL_DMA_Abort_IT+0xce>
 8002fc8:	2300      	movs	r3, #0
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d065      	beq.n	800309a <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2204      	movs	r2, #4
 8002fd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a60      	ldr	r2, [pc, #384]	; (800315c <HAL_DMA_Abort_IT+0x260>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d04a      	beq.n	8003076 <HAL_DMA_Abort_IT+0x17a>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a5e      	ldr	r2, [pc, #376]	; (8003160 <HAL_DMA_Abort_IT+0x264>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d045      	beq.n	8003076 <HAL_DMA_Abort_IT+0x17a>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a5d      	ldr	r2, [pc, #372]	; (8003164 <HAL_DMA_Abort_IT+0x268>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d040      	beq.n	8003076 <HAL_DMA_Abort_IT+0x17a>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a5b      	ldr	r2, [pc, #364]	; (8003168 <HAL_DMA_Abort_IT+0x26c>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d03b      	beq.n	8003076 <HAL_DMA_Abort_IT+0x17a>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a5a      	ldr	r2, [pc, #360]	; (800316c <HAL_DMA_Abort_IT+0x270>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d036      	beq.n	8003076 <HAL_DMA_Abort_IT+0x17a>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a58      	ldr	r2, [pc, #352]	; (8003170 <HAL_DMA_Abort_IT+0x274>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d031      	beq.n	8003076 <HAL_DMA_Abort_IT+0x17a>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a57      	ldr	r2, [pc, #348]	; (8003174 <HAL_DMA_Abort_IT+0x278>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d02c      	beq.n	8003076 <HAL_DMA_Abort_IT+0x17a>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a55      	ldr	r2, [pc, #340]	; (8003178 <HAL_DMA_Abort_IT+0x27c>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d027      	beq.n	8003076 <HAL_DMA_Abort_IT+0x17a>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a54      	ldr	r2, [pc, #336]	; (800317c <HAL_DMA_Abort_IT+0x280>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d022      	beq.n	8003076 <HAL_DMA_Abort_IT+0x17a>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a52      	ldr	r2, [pc, #328]	; (8003180 <HAL_DMA_Abort_IT+0x284>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d01d      	beq.n	8003076 <HAL_DMA_Abort_IT+0x17a>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a51      	ldr	r2, [pc, #324]	; (8003184 <HAL_DMA_Abort_IT+0x288>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d018      	beq.n	8003076 <HAL_DMA_Abort_IT+0x17a>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a4f      	ldr	r2, [pc, #316]	; (8003188 <HAL_DMA_Abort_IT+0x28c>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d013      	beq.n	8003076 <HAL_DMA_Abort_IT+0x17a>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a4e      	ldr	r2, [pc, #312]	; (800318c <HAL_DMA_Abort_IT+0x290>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d00e      	beq.n	8003076 <HAL_DMA_Abort_IT+0x17a>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a4c      	ldr	r2, [pc, #304]	; (8003190 <HAL_DMA_Abort_IT+0x294>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d009      	beq.n	8003076 <HAL_DMA_Abort_IT+0x17a>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a4b      	ldr	r2, [pc, #300]	; (8003194 <HAL_DMA_Abort_IT+0x298>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d004      	beq.n	8003076 <HAL_DMA_Abort_IT+0x17a>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a49      	ldr	r2, [pc, #292]	; (8003198 <HAL_DMA_Abort_IT+0x29c>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d108      	bne.n	8003088 <HAL_DMA_Abort_IT+0x18c>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	681a      	ldr	r2, [r3, #0]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f022 0201 	bic.w	r2, r2, #1
 8003084:	601a      	str	r2, [r3, #0]
 8003086:	e147      	b.n	8003318 <HAL_DMA_Abort_IT+0x41c>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f022 0201 	bic.w	r2, r2, #1
 8003096:	601a      	str	r2, [r3, #0]
 8003098:	e13e      	b.n	8003318 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f022 020e 	bic.w	r2, r2, #14
 80030a8:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a2b      	ldr	r2, [pc, #172]	; (800315c <HAL_DMA_Abort_IT+0x260>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d04a      	beq.n	800314a <HAL_DMA_Abort_IT+0x24e>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a29      	ldr	r2, [pc, #164]	; (8003160 <HAL_DMA_Abort_IT+0x264>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d045      	beq.n	800314a <HAL_DMA_Abort_IT+0x24e>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a28      	ldr	r2, [pc, #160]	; (8003164 <HAL_DMA_Abort_IT+0x268>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d040      	beq.n	800314a <HAL_DMA_Abort_IT+0x24e>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a26      	ldr	r2, [pc, #152]	; (8003168 <HAL_DMA_Abort_IT+0x26c>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d03b      	beq.n	800314a <HAL_DMA_Abort_IT+0x24e>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a25      	ldr	r2, [pc, #148]	; (800316c <HAL_DMA_Abort_IT+0x270>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d036      	beq.n	800314a <HAL_DMA_Abort_IT+0x24e>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a23      	ldr	r2, [pc, #140]	; (8003170 <HAL_DMA_Abort_IT+0x274>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d031      	beq.n	800314a <HAL_DMA_Abort_IT+0x24e>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a22      	ldr	r2, [pc, #136]	; (8003174 <HAL_DMA_Abort_IT+0x278>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d02c      	beq.n	800314a <HAL_DMA_Abort_IT+0x24e>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a20      	ldr	r2, [pc, #128]	; (8003178 <HAL_DMA_Abort_IT+0x27c>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d027      	beq.n	800314a <HAL_DMA_Abort_IT+0x24e>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a1f      	ldr	r2, [pc, #124]	; (800317c <HAL_DMA_Abort_IT+0x280>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d022      	beq.n	800314a <HAL_DMA_Abort_IT+0x24e>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a1d      	ldr	r2, [pc, #116]	; (8003180 <HAL_DMA_Abort_IT+0x284>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d01d      	beq.n	800314a <HAL_DMA_Abort_IT+0x24e>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a1c      	ldr	r2, [pc, #112]	; (8003184 <HAL_DMA_Abort_IT+0x288>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d018      	beq.n	800314a <HAL_DMA_Abort_IT+0x24e>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a1a      	ldr	r2, [pc, #104]	; (8003188 <HAL_DMA_Abort_IT+0x28c>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d013      	beq.n	800314a <HAL_DMA_Abort_IT+0x24e>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a19      	ldr	r2, [pc, #100]	; (800318c <HAL_DMA_Abort_IT+0x290>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d00e      	beq.n	800314a <HAL_DMA_Abort_IT+0x24e>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a17      	ldr	r2, [pc, #92]	; (8003190 <HAL_DMA_Abort_IT+0x294>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d009      	beq.n	800314a <HAL_DMA_Abort_IT+0x24e>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a16      	ldr	r2, [pc, #88]	; (8003194 <HAL_DMA_Abort_IT+0x298>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d004      	beq.n	800314a <HAL_DMA_Abort_IT+0x24e>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a14      	ldr	r2, [pc, #80]	; (8003198 <HAL_DMA_Abort_IT+0x29c>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d128      	bne.n	800319c <HAL_DMA_Abort_IT+0x2a0>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	681a      	ldr	r2, [r3, #0]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f022 0201 	bic.w	r2, r2, #1
 8003158:	601a      	str	r2, [r3, #0]
 800315a:	e027      	b.n	80031ac <HAL_DMA_Abort_IT+0x2b0>
 800315c:	40020010 	.word	0x40020010
 8003160:	40020028 	.word	0x40020028
 8003164:	40020040 	.word	0x40020040
 8003168:	40020058 	.word	0x40020058
 800316c:	40020070 	.word	0x40020070
 8003170:	40020088 	.word	0x40020088
 8003174:	400200a0 	.word	0x400200a0
 8003178:	400200b8 	.word	0x400200b8
 800317c:	40020410 	.word	0x40020410
 8003180:	40020428 	.word	0x40020428
 8003184:	40020440 	.word	0x40020440
 8003188:	40020458 	.word	0x40020458
 800318c:	40020470 	.word	0x40020470
 8003190:	40020488 	.word	0x40020488
 8003194:	400204a0 	.word	0x400204a0
 8003198:	400204b8 	.word	0x400204b8
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	681a      	ldr	r2, [r3, #0]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f022 0201 	bic.w	r2, r2, #1
 80031aa:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a5c      	ldr	r2, [pc, #368]	; (8003324 <HAL_DMA_Abort_IT+0x428>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d072      	beq.n	800329c <HAL_DMA_Abort_IT+0x3a0>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a5b      	ldr	r2, [pc, #364]	; (8003328 <HAL_DMA_Abort_IT+0x42c>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d06d      	beq.n	800329c <HAL_DMA_Abort_IT+0x3a0>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a59      	ldr	r2, [pc, #356]	; (800332c <HAL_DMA_Abort_IT+0x430>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d068      	beq.n	800329c <HAL_DMA_Abort_IT+0x3a0>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a58      	ldr	r2, [pc, #352]	; (8003330 <HAL_DMA_Abort_IT+0x434>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d063      	beq.n	800329c <HAL_DMA_Abort_IT+0x3a0>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a56      	ldr	r2, [pc, #344]	; (8003334 <HAL_DMA_Abort_IT+0x438>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d05e      	beq.n	800329c <HAL_DMA_Abort_IT+0x3a0>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a55      	ldr	r2, [pc, #340]	; (8003338 <HAL_DMA_Abort_IT+0x43c>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d059      	beq.n	800329c <HAL_DMA_Abort_IT+0x3a0>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a53      	ldr	r2, [pc, #332]	; (800333c <HAL_DMA_Abort_IT+0x440>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d054      	beq.n	800329c <HAL_DMA_Abort_IT+0x3a0>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a52      	ldr	r2, [pc, #328]	; (8003340 <HAL_DMA_Abort_IT+0x444>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d04f      	beq.n	800329c <HAL_DMA_Abort_IT+0x3a0>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a50      	ldr	r2, [pc, #320]	; (8003344 <HAL_DMA_Abort_IT+0x448>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d04a      	beq.n	800329c <HAL_DMA_Abort_IT+0x3a0>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a4f      	ldr	r2, [pc, #316]	; (8003348 <HAL_DMA_Abort_IT+0x44c>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d045      	beq.n	800329c <HAL_DMA_Abort_IT+0x3a0>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a4d      	ldr	r2, [pc, #308]	; (800334c <HAL_DMA_Abort_IT+0x450>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d040      	beq.n	800329c <HAL_DMA_Abort_IT+0x3a0>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a4c      	ldr	r2, [pc, #304]	; (8003350 <HAL_DMA_Abort_IT+0x454>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d03b      	beq.n	800329c <HAL_DMA_Abort_IT+0x3a0>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a4a      	ldr	r2, [pc, #296]	; (8003354 <HAL_DMA_Abort_IT+0x458>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d036      	beq.n	800329c <HAL_DMA_Abort_IT+0x3a0>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a49      	ldr	r2, [pc, #292]	; (8003358 <HAL_DMA_Abort_IT+0x45c>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d031      	beq.n	800329c <HAL_DMA_Abort_IT+0x3a0>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a47      	ldr	r2, [pc, #284]	; (800335c <HAL_DMA_Abort_IT+0x460>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d02c      	beq.n	800329c <HAL_DMA_Abort_IT+0x3a0>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a46      	ldr	r2, [pc, #280]	; (8003360 <HAL_DMA_Abort_IT+0x464>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d027      	beq.n	800329c <HAL_DMA_Abort_IT+0x3a0>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a44      	ldr	r2, [pc, #272]	; (8003364 <HAL_DMA_Abort_IT+0x468>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d022      	beq.n	800329c <HAL_DMA_Abort_IT+0x3a0>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a43      	ldr	r2, [pc, #268]	; (8003368 <HAL_DMA_Abort_IT+0x46c>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d01d      	beq.n	800329c <HAL_DMA_Abort_IT+0x3a0>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a41      	ldr	r2, [pc, #260]	; (800336c <HAL_DMA_Abort_IT+0x470>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d018      	beq.n	800329c <HAL_DMA_Abort_IT+0x3a0>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a40      	ldr	r2, [pc, #256]	; (8003370 <HAL_DMA_Abort_IT+0x474>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d013      	beq.n	800329c <HAL_DMA_Abort_IT+0x3a0>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a3e      	ldr	r2, [pc, #248]	; (8003374 <HAL_DMA_Abort_IT+0x478>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d00e      	beq.n	800329c <HAL_DMA_Abort_IT+0x3a0>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a3d      	ldr	r2, [pc, #244]	; (8003378 <HAL_DMA_Abort_IT+0x47c>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d009      	beq.n	800329c <HAL_DMA_Abort_IT+0x3a0>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a3b      	ldr	r2, [pc, #236]	; (800337c <HAL_DMA_Abort_IT+0x480>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d004      	beq.n	800329c <HAL_DMA_Abort_IT+0x3a0>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a3a      	ldr	r2, [pc, #232]	; (8003380 <HAL_DMA_Abort_IT+0x484>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d101      	bne.n	80032a0 <HAL_DMA_Abort_IT+0x3a4>
 800329c:	2301      	movs	r3, #1
 800329e:	e000      	b.n	80032a2 <HAL_DMA_Abort_IT+0x3a6>
 80032a0:	2300      	movs	r3, #0
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d028      	beq.n	80032f8 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80032b4:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032ba:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032c0:	f003 031f 	and.w	r3, r3, #31
 80032c4:	2201      	movs	r2, #1
 80032c6:	409a      	lsls	r2, r3
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80032d0:	687a      	ldr	r2, [r7, #4]
 80032d2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80032d4:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d00c      	beq.n	80032f8 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032e2:	681a      	ldr	r2, [r3, #0]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80032ec:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032f2:	687a      	ldr	r2, [r7, #4]
 80032f4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80032f6:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2200      	movs	r2, #0
 80032fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2201      	movs	r2, #1
 8003304:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800330c:	2b00      	cmp	r3, #0
 800330e:	d003      	beq.n	8003318 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003314:	6878      	ldr	r0, [r7, #4]
 8003316:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003318:	2300      	movs	r3, #0
}
 800331a:	4618      	mov	r0, r3
 800331c:	3710      	adds	r7, #16
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}
 8003322:	bf00      	nop
 8003324:	40020010 	.word	0x40020010
 8003328:	40020028 	.word	0x40020028
 800332c:	40020040 	.word	0x40020040
 8003330:	40020058 	.word	0x40020058
 8003334:	40020070 	.word	0x40020070
 8003338:	40020088 	.word	0x40020088
 800333c:	400200a0 	.word	0x400200a0
 8003340:	400200b8 	.word	0x400200b8
 8003344:	40020410 	.word	0x40020410
 8003348:	40020428 	.word	0x40020428
 800334c:	40020440 	.word	0x40020440
 8003350:	40020458 	.word	0x40020458
 8003354:	40020470 	.word	0x40020470
 8003358:	40020488 	.word	0x40020488
 800335c:	400204a0 	.word	0x400204a0
 8003360:	400204b8 	.word	0x400204b8
 8003364:	58025408 	.word	0x58025408
 8003368:	5802541c 	.word	0x5802541c
 800336c:	58025430 	.word	0x58025430
 8003370:	58025444 	.word	0x58025444
 8003374:	58025458 	.word	0x58025458
 8003378:	5802546c 	.word	0x5802546c
 800337c:	58025480 	.word	0x58025480
 8003380:	58025494 	.word	0x58025494

08003384 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b084      	sub	sp, #16
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d101      	bne.n	8003396 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	e0c6      	b.n	8003524 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800339a:	2b00      	cmp	r3, #0
 800339c:	d102      	bne.n	80033a4 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	f006 fd48 	bl	8009e34 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2223      	movs	r2, #35	; 0x23
 80033a8:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033aa:	4b60      	ldr	r3, [pc, #384]	; (800352c <HAL_ETH_Init+0x1a8>)
 80033ac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80033b0:	4a5e      	ldr	r2, [pc, #376]	; (800352c <HAL_ETH_Init+0x1a8>)
 80033b2:	f043 0302 	orr.w	r3, r3, #2
 80033b6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80033ba:	4b5c      	ldr	r3, [pc, #368]	; (800352c <HAL_ETH_Init+0x1a8>)
 80033bc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80033c0:	f003 0302 	and.w	r3, r3, #2
 80033c4:	60bb      	str	r3, [r7, #8]
 80033c6:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	7a1b      	ldrb	r3, [r3, #8]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d103      	bne.n	80033d8 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80033d0:	2000      	movs	r0, #0
 80033d2:	f7ff fc23 	bl	8002c1c <HAL_SYSCFG_ETHInterfaceSelect>
 80033d6:	e003      	b.n	80033e0 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80033d8:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80033dc:	f7ff fc1e 	bl	8002c1c <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80033e8:	681a      	ldr	r2, [r3, #0]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f042 0201 	orr.w	r2, r2, #1
 80033f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80033f6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80033f8:	f7ff fbf8 	bl	8002bec <HAL_GetTick>
 80033fc:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80033fe:	e00f      	b.n	8003420 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8003400:	f7ff fbf4 	bl	8002bec <HAL_GetTick>
 8003404:	4602      	mov	r2, r0
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	1ad3      	subs	r3, r2, r3
 800340a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800340e:	d907      	bls.n	8003420 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2204      	movs	r2, #4
 8003414:	675a      	str	r2, [r3, #116]	; 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	22e0      	movs	r2, #224	; 0xe0
 800341a:	66da      	str	r2, [r3, #108]	; 0x6c
      /* Return Error */
      return HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	e081      	b.n	8003524 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f003 0301 	and.w	r3, r3, #1
 800342e:	2b00      	cmp	r3, #0
 8003430:	d1e6      	bne.n	8003400 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	f001 fad8 	bl	80049e8 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8003438:	f002 ffe0 	bl	80063fc <HAL_RCC_GetHCLKFreq>
 800343c:	4603      	mov	r3, r0
 800343e:	4a3c      	ldr	r2, [pc, #240]	; (8003530 <HAL_ETH_Init+0x1ac>)
 8003440:	fba2 2303 	umull	r2, r3, r2, r3
 8003444:	0c9a      	lsrs	r2, r3, #18
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	3a01      	subs	r2, #1
 800344c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003450:	6878      	ldr	r0, [r7, #4]
 8003452:	f001 fa2b 	bl	80048ac <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800346c:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8003470:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	695b      	ldr	r3, [r3, #20]
 8003476:	f003 0303 	and.w	r3, r3, #3
 800347a:	2b00      	cmp	r3, #0
 800347c:	d007      	beq.n	800348e <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2201      	movs	r2, #1
 8003482:	675a      	str	r2, [r3, #116]	; 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	22e0      	movs	r2, #224	; 0xe0
 8003488:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Return Error */
    return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e04a      	b.n	8003524 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681a      	ldr	r2, [r3, #0]
 8003492:	f241 1308 	movw	r3, #4360	; 0x1108
 8003496:	4413      	add	r3, r2
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	4b26      	ldr	r3, [pc, #152]	; (8003534 <HAL_ETH_Init+0x1b0>)
 800349c:	4013      	ands	r3, r2
 800349e:	687a      	ldr	r2, [r7, #4]
 80034a0:	6952      	ldr	r2, [r2, #20]
 80034a2:	0052      	lsls	r2, r2, #1
 80034a4:	6879      	ldr	r1, [r7, #4]
 80034a6:	6809      	ldr	r1, [r1, #0]
 80034a8:	431a      	orrs	r2, r3
 80034aa:	f241 1308 	movw	r3, #4360	; 0x1108
 80034ae:	440b      	add	r3, r1
 80034b0:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f001 faf0 	bl	8004a98 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80034b8:	6878      	ldr	r0, [r7, #4]
 80034ba:	f001 fb34 	bl	8004b26 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	3305      	adds	r3, #5
 80034c4:	781b      	ldrb	r3, [r3, #0]
 80034c6:	021a      	lsls	r2, r3, #8
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	3304      	adds	r3, #4
 80034ce:	781b      	ldrb	r3, [r3, #0]
 80034d0:	4619      	mov	r1, r3
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	430a      	orrs	r2, r1
 80034d8:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	3303      	adds	r3, #3
 80034e2:	781b      	ldrb	r3, [r3, #0]
 80034e4:	061a      	lsls	r2, r3, #24
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	3302      	adds	r3, #2
 80034ec:	781b      	ldrb	r3, [r3, #0]
 80034ee:	041b      	lsls	r3, r3, #16
 80034f0:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	3301      	adds	r3, #1
 80034f8:	781b      	ldrb	r3, [r3, #0]
 80034fa:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80034fc:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	781b      	ldrb	r3, [r3, #0]
 8003504:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800350a:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800350c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2200      	movs	r2, #0
 8003514:	675a      	str	r2, [r3, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2210      	movs	r2, #16
 800351a:	66da      	str	r2, [r3, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2210      	movs	r2, #16
 8003520:	671a      	str	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8003522:	2300      	movs	r3, #0
}
 8003524:	4618      	mov	r0, r3
 8003526:	3710      	adds	r7, #16
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}
 800352c:	58024400 	.word	0x58024400
 8003530:	431bde83 	.word	0x431bde83
 8003534:	ffff8001 	.word	0xffff8001

08003538 <HAL_ETH_DescAssignMemory>:
  * @param  pBuffer1: address of buffer 1
  * @param  pBuffer2: address of buffer 2 if available
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DescAssignMemory(ETH_HandleTypeDef *heth, uint32_t Index, uint8_t *pBuffer1, uint8_t *pBuffer2)
{
 8003538:	b480      	push	{r7}
 800353a:	b087      	sub	sp, #28
 800353c:	af00      	add	r7, sp, #0
 800353e:	60f8      	str	r0, [r7, #12]
 8003540:	60b9      	str	r1, [r7, #8]
 8003542:	607a      	str	r2, [r7, #4]
 8003544:	603b      	str	r3, [r7, #0]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[Index];
 8003546:	68fa      	ldr	r2, [r7, #12]
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	3310      	adds	r3, #16
 800354c:	009b      	lsls	r3, r3, #2
 800354e:	4413      	add	r3, r2
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	617b      	str	r3, [r7, #20]

  if((pBuffer1 == NULL) || (Index >= (uint32_t)ETH_RX_DESC_CNT))
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d002      	beq.n	8003560 <HAL_ETH_DescAssignMemory+0x28>
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	2b03      	cmp	r3, #3
 800355e:	d904      	bls.n	800356a <HAL_ETH_DescAssignMemory+0x32>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2201      	movs	r2, #1
 8003564:	675a      	str	r2, [r3, #116]	; 0x74
    /* Return Error */
    return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e021      	b.n	80035ae <HAL_ETH_DescAssignMemory+0x76>
  }

  /* write buffer address to RDES0 */
  WRITE_REG(dmarxdesc->DESC0, (uint32_t)pBuffer1);
 800356a:	687a      	ldr	r2, [r7, #4]
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	601a      	str	r2, [r3, #0]
  /* store buffer address */
  WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)pBuffer1);
 8003570:	687a      	ldr	r2, [r7, #4]
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	611a      	str	r2, [r3, #16]
  /* set buffer address valid bit to RDES3 */
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	68db      	ldr	r3, [r3, #12]
 800357a:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	60da      	str	r2, [r3, #12]

  if(pBuffer2 != NULL)
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d00b      	beq.n	80035a0 <HAL_ETH_DescAssignMemory+0x68>
  {
    /* write buffer 2 address to RDES1 */
    WRITE_REG(dmarxdesc->DESC2, (uint32_t)pBuffer2);
 8003588:	683a      	ldr	r2, [r7, #0]
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	609a      	str	r2, [r3, #8]
     /* store buffer 2 address */
    WRITE_REG(dmarxdesc->BackupAddr1, (uint32_t)pBuffer2);
 800358e:	683a      	ldr	r2, [r7, #0]
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	615a      	str	r2, [r3, #20]
    /* set buffer 2 address valid bit to RDES3 */
    SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	68db      	ldr	r3, [r3, #12]
 8003598:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	60da      	str	r2, [r3, #12]
  }
  /* set OWN bit to RDES3 */
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	68db      	ldr	r3, [r3, #12]
 80035a4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80035ac:	2300      	movs	r3, #0
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	371c      	adds	r7, #28
 80035b2:	46bd      	mov	sp, r7
 80035b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b8:	4770      	bx	lr

080035ba <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 80035ba:	b480      	push	{r7}
 80035bc:	b085      	sub	sp, #20
 80035be:	af00      	add	r7, sp, #0
 80035c0:	6078      	str	r0, [r7, #4]
  uint32_t descindex;

  ETH_DMADescTypeDef *dmarxdesc;

  if(heth->gState == HAL_ETH_STATE_READY)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035c6:	2b10      	cmp	r3, #16
 80035c8:	d174      	bne.n	80036b4 <HAL_ETH_Start_IT+0xfa>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2223      	movs	r2, #35	; 0x23
 80035ce:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Set IOC bit to all Rx descriptors */
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 80035d0:	2300      	movs	r3, #0
 80035d2:	60fb      	str	r3, [r7, #12]
 80035d4:	e00f      	b.n	80035f6 <HAL_ETH_Start_IT+0x3c>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 80035d6:	687a      	ldr	r2, [r7, #4]
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	3310      	adds	r3, #16
 80035dc:	009b      	lsls	r3, r3, #2
 80035de:	4413      	add	r3, r2
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	60bb      	str	r3, [r7, #8]
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	68db      	ldr	r3, [r3, #12]
 80035e8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	60da      	str	r2, [r3, #12]
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	3301      	adds	r3, #1
 80035f4:	60fb      	str	r3, [r7, #12]
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2b03      	cmp	r3, #3
 80035fa:	d9ec      	bls.n	80035d6 <HAL_ETH_Start_IT+0x1c>
    }

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2201      	movs	r2, #1
 8003600:	665a      	str	r2, [r3, #100]	; 0x64

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	681a      	ldr	r2, [r3, #0]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f042 0202 	orr.w	r2, r2, #2
 8003610:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f042 0201 	orr.w	r2, r2, #1
 8003620:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f042 0201 	orr.w	r2, r2, #1
 8003632:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	f241 1304 	movw	r3, #4356	; 0x1104
 800363e:	4413      	add	r3, r2
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	687a      	ldr	r2, [r7, #4]
 8003644:	6811      	ldr	r1, [r2, #0]
 8003646:	f043 0201 	orr.w	r2, r3, #1
 800364a:	f241 1304 	movw	r3, #4356	; 0x1104
 800364e:	440b      	add	r3, r1
 8003650:	601a      	str	r2, [r3, #0]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	f241 1308 	movw	r3, #4360	; 0x1108
 800365a:	4413      	add	r3, r2
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	687a      	ldr	r2, [r7, #4]
 8003660:	6811      	ldr	r1, [r2, #0]
 8003662:	f043 0201 	orr.w	r2, r3, #1
 8003666:	f241 1308 	movw	r3, #4360	; 0x1108
 800366a:	440b      	add	r3, r1
 800366c:	601a      	str	r2, [r3, #0]

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f442 7281 	orr.w	r2, r2, #258	; 0x102
 8003680:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8003684:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681a      	ldr	r2, [r3, #0]
 800368a:	f241 1334 	movw	r3, #4404	; 0x1134
 800368e:	4413      	add	r3, r2
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	687a      	ldr	r2, [r7, #4]
 8003694:	6811      	ldr	r1, [r2, #0]
 8003696:	f24d 0241 	movw	r2, #53313	; 0xd041
 800369a:	431a      	orrs	r2, r3
 800369c:	f241 1334 	movw	r3, #4404	; 0x1134
 80036a0:	440b      	add	r3, r1
 80036a2:	601a      	str	r2, [r3, #0]
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE));

    heth->gState = HAL_ETH_STATE_READY;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2210      	movs	r2, #16
 80036a8:	66da      	str	r2, [r3, #108]	; 0x6c
    heth->RxState = HAL_ETH_STATE_BUSY_RX;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2222      	movs	r2, #34	; 0x22
 80036ae:	671a      	str	r2, [r3, #112]	; 0x70

    return HAL_OK;
 80036b0:	2300      	movs	r3, #0
 80036b2:	e000      	b.n	80036b6 <HAL_ETH_Start_IT+0xfc>
  }
  else
  {
    return HAL_ERROR;
 80036b4:	2301      	movs	r3, #1
  }
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3714      	adds	r7, #20
 80036ba:	46bd      	mov	sp, r7
 80036bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c0:	4770      	bx	lr
	...

080036c4 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b085      	sub	sp, #20
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;

  if(heth->gState != HAL_ETH_STATE_RESET)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d067      	beq.n	80037a4 <HAL_ETH_Stop_IT+0xe0>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2223      	movs	r2, #35	; 0x23
 80036d8:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Disable interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	f241 1334 	movw	r3, #4404	; 0x1134
 80036e2:	4413      	add	r3, r2
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	687a      	ldr	r2, [r7, #4]
 80036e8:	6811      	ldr	r1, [r2, #0]
 80036ea:	4a32      	ldr	r2, [pc, #200]	; (80037b4 <HAL_ETH_Stop_IT+0xf0>)
 80036ec:	401a      	ands	r2, r3
 80036ee:	f241 1334 	movw	r3, #4404	; 0x1134
 80036f2:	440b      	add	r3, r1
 80036f4:	601a      	str	r2, [r3, #0]
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	f241 1304 	movw	r3, #4356	; 0x1104
 80036fe:	4413      	add	r3, r2
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	687a      	ldr	r2, [r7, #4]
 8003704:	6811      	ldr	r1, [r2, #0]
 8003706:	f023 0201 	bic.w	r2, r3, #1
 800370a:	f241 1304 	movw	r3, #4356	; 0x1104
 800370e:	440b      	add	r3, r1
 8003710:	601a      	str	r2, [r3, #0]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681a      	ldr	r2, [r3, #0]
 8003716:	f241 1308 	movw	r3, #4360	; 0x1108
 800371a:	4413      	add	r3, r2
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	687a      	ldr	r2, [r7, #4]
 8003720:	6811      	ldr	r1, [r2, #0]
 8003722:	f023 0201 	bic.w	r2, r3, #1
 8003726:	f241 1308 	movw	r3, #4360	; 0x1108
 800372a:	440b      	add	r3, r1
 800372c:	601a      	str	r2, [r3, #0]

    /* Disable the MAC reception */
    CLEAR_BIT( heth->Instance->MACCR, ETH_MACCR_RE);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	681a      	ldr	r2, [r3, #0]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f022 0201 	bic.w	r2, r2, #1
 800373c:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f042 0201 	orr.w	r2, r2, #1
 800374e:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	681a      	ldr	r2, [r3, #0]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f022 0202 	bic.w	r2, r2, #2
 8003760:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8003762:	2300      	movs	r3, #0
 8003764:	60fb      	str	r3, [r7, #12]
 8003766:	e00f      	b.n	8003788 <HAL_ETH_Stop_IT+0xc4>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8003768:	687a      	ldr	r2, [r7, #4]
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	3310      	adds	r3, #16
 800376e:	009b      	lsls	r3, r3, #2
 8003770:	4413      	add	r3, r2
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	60bb      	str	r3, [r7, #8]
      CLEAR_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	68db      	ldr	r3, [r3, #12]
 800377a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	60da      	str	r2, [r3, #12]
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	3301      	adds	r3, #1
 8003786:	60fb      	str	r3, [r7, #12]
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2b03      	cmp	r3, #3
 800378c:	d9ec      	bls.n	8003768 <HAL_ETH_Stop_IT+0xa4>
    }

    heth->RxDescList.ItMode = 0U;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2200      	movs	r2, #0
 8003792:	665a      	str	r2, [r3, #100]	; 0x64

    heth->gState = HAL_ETH_STATE_READY;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2210      	movs	r2, #16
 8003798:	66da      	str	r2, [r3, #108]	; 0x6c
    heth->RxState = HAL_ETH_STATE_READY;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2210      	movs	r2, #16
 800379e:	671a      	str	r2, [r3, #112]	; 0x70

    /* Return function status */
    return HAL_OK;
 80037a0:	2300      	movs	r3, #0
 80037a2:	e000      	b.n	80037a6 <HAL_ETH_Stop_IT+0xe2>
  }
  else
  {
    return HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
  }
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3714      	adds	r7, #20
 80037aa:	46bd      	mov	sp, r7
 80037ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b0:	4770      	bx	lr
 80037b2:	bf00      	nop
 80037b4:	ffff2fbe 	.word	0xffff2fbe

080037b8 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b086      	sub	sp, #24
 80037bc:	af00      	add	r7, sp, #0
 80037be:	60f8      	str	r0, [r7, #12]
 80037c0:	60b9      	str	r1, [r7, #8]
 80037c2:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  const ETH_DMADescTypeDef *dmatxdesc;

  if(pTxConfig == NULL)
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d107      	bne.n	80037da <HAL_ETH_Transmit+0x22>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037ce:	f043 0201 	orr.w	r2, r3, #1
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	675a      	str	r2, [r3, #116]	; 0x74
    return HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	e073      	b.n	80038c2 <HAL_ETH_Transmit+0x10a>
  }

  if(heth->gState == HAL_ETH_STATE_READY)
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037de:	2b10      	cmp	r3, #16
 80037e0:	d16e      	bne.n	80038c0 <HAL_ETH_Transmit+0x108>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 80037e2:	2200      	movs	r2, #0
 80037e4:	68b9      	ldr	r1, [r7, #8]
 80037e6:	68f8      	ldr	r0, [r7, #12]
 80037e8:	f001 f9fa 	bl	8004be0 <ETH_Prepare_Tx_Descriptors>
 80037ec:	4603      	mov	r3, r0
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d007      	beq.n	8003802 <HAL_ETH_Transmit+0x4a>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037f6:	f043 0202 	orr.w	r2, r3, #2
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	675a      	str	r2, [r3, #116]	; 0x74
      return HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	e05f      	b.n	80038c2 <HAL_ETH_Transmit+0x10a>
    }

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	3206      	adds	r2, #6
 800380a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800380e:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003814:	1c5a      	adds	r2, r3, #1
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	629a      	str	r2, [r3, #40]	; 0x28
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800381e:	2b03      	cmp	r3, #3
 8003820:	d904      	bls.n	800382c <HAL_ETH_Transmit+0x74>
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003826:	1f1a      	subs	r2, r3, #4
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	68fa      	ldr	r2, [r7, #12]
 8003836:	3106      	adds	r1, #6
 8003838:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800383c:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8003840:	601a      	str	r2, [r3, #0]

    tickstart = HAL_GetTick();
 8003842:	f7ff f9d3 	bl	8002bec <HAL_GetTick>
 8003846:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 8003848:	e034      	b.n	80038b4 <HAL_ETH_Transmit+0xfc>
    {
      if((heth->Instance->DMACSR & ETH_DMACSR_FBE) != (uint32_t)RESET)
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003858:	2b00      	cmp	r3, #0
 800385a:	d011      	beq.n	8003880 <HAL_ETH_Transmit+0xc8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003860:	f043 0208 	orr.w	r2, r3, #8
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	675a      	str	r2, [r3, #116]	; 0x74
        heth->DMAErrorCode = heth->Instance->DMACSR;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	679a      	str	r2, [r3, #120]	; 0x78
        /* Set ETH HAL State to Ready */
        heth->gState = HAL_ETH_STATE_ERROR;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	22e0      	movs	r2, #224	; 0xe0
 800387a:	66da      	str	r2, [r3, #108]	; 0x6c
        /* Return function status */
        return HAL_ERROR;
 800387c:	2301      	movs	r3, #1
 800387e:	e020      	b.n	80038c2 <HAL_ETH_Transmit+0x10a>
      }

      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003886:	d015      	beq.n	80038b4 <HAL_ETH_Transmit+0xfc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout) || (Timeout == 0U))
 8003888:	f7ff f9b0 	bl	8002bec <HAL_GetTick>
 800388c:	4602      	mov	r2, r0
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	1ad3      	subs	r3, r2, r3
 8003892:	687a      	ldr	r2, [r7, #4]
 8003894:	429a      	cmp	r2, r3
 8003896:	d302      	bcc.n	800389e <HAL_ETH_Transmit+0xe6>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d10a      	bne.n	80038b4 <HAL_ETH_Transmit+0xfc>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038a2:	f043 0204 	orr.w	r2, r3, #4
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	675a      	str	r2, [r3, #116]	; 0x74
          heth->gState = HAL_ETH_STATE_ERROR;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	22e0      	movs	r2, #224	; 0xe0
 80038ae:	66da      	str	r2, [r3, #108]	; 0x6c
          return HAL_ERROR;
 80038b0:	2301      	movs	r3, #1
 80038b2:	e006      	b.n	80038c2 <HAL_ETH_Transmit+0x10a>
    while((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	68db      	ldr	r3, [r3, #12]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	dbc6      	blt.n	800384a <HAL_ETH_Transmit+0x92>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 80038bc:	2300      	movs	r3, #0
 80038be:	e000      	b.n	80038c2 <HAL_ETH_Transmit+0x10a>
  }
  else
  {
    return HAL_ERROR;
 80038c0:	2301      	movs	r3, #1
  }
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	3718      	adds	r7, #24
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}

080038ca <HAL_ETH_IsRxDataAvailable>:
  *         the configuration information for ETHERNET module
  * @retval  1: A Packet is received
  *          0: no Packet received
  */
uint8_t HAL_ETH_IsRxDataAvailable(ETH_HandleTypeDef *heth)
{
 80038ca:	b480      	push	{r7}
 80038cc:	b089      	sub	sp, #36	; 0x24
 80038ce:	af00      	add	r7, sp, #0
 80038d0:	6078      	str	r0, [r7, #4]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	3344      	adds	r3, #68	; 0x44
 80038d6:	60bb      	str	r3, [r7, #8]
  uint32_t descidx = dmarxdesclist->CurRxDesc;
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	691b      	ldr	r3, [r3, #16]
 80038dc:	61fb      	str	r3, [r7, #28]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	69fa      	ldr	r2, [r7, #28]
 80038e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038e6:	61bb      	str	r3, [r7, #24]
  uint32_t descscancnt = 0;
 80038e8:	2300      	movs	r3, #0
 80038ea:	617b      	str	r3, [r7, #20]
  uint32_t appdesccnt = 0, firstappdescidx = 0;
 80038ec:	2300      	movs	r3, #0
 80038ee:	613b      	str	r3, [r7, #16]
 80038f0:	2300      	movs	r3, #0
 80038f2:	60fb      	str	r3, [r7, #12]

  if(dmarxdesclist->AppDescNbr != 0U)
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	699b      	ldr	r3, [r3, #24]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d06b      	beq.n	80039d4 <HAL_ETH_IsRxDataAvailable+0x10a>
  {
    /* data already received by not yet processed*/
    return 0;
 80038fc:	2300      	movs	r3, #0
 80038fe:	e0ce      	b.n	8003a9e <HAL_ETH_IsRxDataAvailable+0x1d4>
  }

  /* Check if descriptor is not owned by DMA */
  while((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (descscancnt < (uint32_t)ETH_RX_DESC_CNT))
  {
    descscancnt++;
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	3301      	adds	r3, #1
 8003904:	617b      	str	r3, [r7, #20]

    /* Check if last descriptor */
    if(READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 8003906:	69bb      	ldr	r3, [r7, #24]
 8003908:	68db      	ldr	r3, [r3, #12]
 800390a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800390e:	2b00      	cmp	r3, #0
 8003910:	d036      	beq.n	8003980 <HAL_ETH_IsRxDataAvailable+0xb6>
    {
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt += 1U;
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	3301      	adds	r3, #1
 8003916:	613b      	str	r3, [r7, #16]

      if(appdesccnt == 1U)
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	2b01      	cmp	r3, #1
 800391c:	d101      	bne.n	8003922 <HAL_ETH_IsRxDataAvailable+0x58>
      {
        WRITE_REG(firstappdescidx, descidx);
 800391e:	69fb      	ldr	r3, [r7, #28]
 8003920:	60fb      	str	r3, [r7, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8003922:	69fb      	ldr	r3, [r7, #28]
 8003924:	3301      	adds	r3, #1
 8003926:	61fb      	str	r3, [r7, #28]
 8003928:	69fb      	ldr	r3, [r7, #28]
 800392a:	2b03      	cmp	r3, #3
 800392c:	d902      	bls.n	8003934 <HAL_ETH_IsRxDataAvailable+0x6a>
 800392e:	69fb      	ldr	r3, [r7, #28]
 8003930:	3b04      	subs	r3, #4
 8003932:	61fb      	str	r3, [r7, #28]

      /* Check for Context descriptor */
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	69fa      	ldr	r2, [r7, #28]
 8003938:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800393c:	61bb      	str	r3, [r7, #24]

      if(READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_OWN)  == (uint32_t)RESET)
 800393e:	69bb      	ldr	r3, [r7, #24]
 8003940:	68db      	ldr	r3, [r3, #12]
 8003942:	2b00      	cmp	r3, #0
 8003944:	db11      	blt.n	800396a <HAL_ETH_IsRxDataAvailable+0xa0>
      {
        if(READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 8003946:	69bb      	ldr	r3, [r7, #24]
 8003948:	68db      	ldr	r3, [r3, #12]
 800394a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800394e:	2b00      	cmp	r3, #0
 8003950:	d00b      	beq.n	800396a <HAL_ETH_IsRxDataAvailable+0xa0>
        {
          /* Increment the number of descriptors to be passed to the application */
          dmarxdesclist->AppContextDesc = 1;
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	2201      	movs	r2, #1
 8003956:	61da      	str	r2, [r3, #28]
          /* Increment current rx descriptor index */
          INCR_RX_DESC_INDEX(descidx, 1U);
 8003958:	69fb      	ldr	r3, [r7, #28]
 800395a:	3301      	adds	r3, #1
 800395c:	61fb      	str	r3, [r7, #28]
 800395e:	69fb      	ldr	r3, [r7, #28]
 8003960:	2b03      	cmp	r3, #3
 8003962:	d902      	bls.n	800396a <HAL_ETH_IsRxDataAvailable+0xa0>
 8003964:	69fb      	ldr	r3, [r7, #28]
 8003966:	3b04      	subs	r3, #4
 8003968:	61fb      	str	r3, [r7, #28]
        }
      }
      /* Fill information to Rx descriptors list */
      dmarxdesclist->CurRxDesc = descidx;
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	69fa      	ldr	r2, [r7, #28]
 800396e:	611a      	str	r2, [r3, #16]
      dmarxdesclist->FirstAppDesc = firstappdescidx;
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	68fa      	ldr	r2, [r7, #12]
 8003974:	615a      	str	r2, [r3, #20]
      dmarxdesclist->AppDescNbr = appdesccnt;
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	693a      	ldr	r2, [r7, #16]
 800397a:	619a      	str	r2, [r3, #24]

      /* Return function status */
      return 1;
 800397c:	2301      	movs	r3, #1
 800397e:	e08e      	b.n	8003a9e <HAL_ETH_IsRxDataAvailable+0x1d4>
    }
    /* Check if first descriptor */
    else if(READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 8003980:	69bb      	ldr	r3, [r7, #24]
 8003982:	68db      	ldr	r3, [r3, #12]
 8003984:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003988:	2b00      	cmp	r3, #0
 800398a:	d012      	beq.n	80039b2 <HAL_ETH_IsRxDataAvailable+0xe8>
    {
      WRITE_REG(firstappdescidx, descidx);
 800398c:	69fb      	ldr	r3, [r7, #28]
 800398e:	60fb      	str	r3, [r7, #12]
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt = 1U;
 8003990:	2301      	movs	r3, #1
 8003992:	613b      	str	r3, [r7, #16]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8003994:	69fb      	ldr	r3, [r7, #28]
 8003996:	3301      	adds	r3, #1
 8003998:	61fb      	str	r3, [r7, #28]
 800399a:	69fb      	ldr	r3, [r7, #28]
 800399c:	2b03      	cmp	r3, #3
 800399e:	d902      	bls.n	80039a6 <HAL_ETH_IsRxDataAvailable+0xdc>
 80039a0:	69fb      	ldr	r3, [r7, #28]
 80039a2:	3b04      	subs	r3, #4
 80039a4:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	69fa      	ldr	r2, [r7, #28]
 80039aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039ae:	61bb      	str	r3, [r7, #24]
 80039b0:	e010      	b.n	80039d4 <HAL_ETH_IsRxDataAvailable+0x10a>
    }
    /* It should be an intermediate descriptor */
    else
    {
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt += 1U;
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	3301      	adds	r3, #1
 80039b6:	613b      	str	r3, [r7, #16]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80039b8:	69fb      	ldr	r3, [r7, #28]
 80039ba:	3301      	adds	r3, #1
 80039bc:	61fb      	str	r3, [r7, #28]
 80039be:	69fb      	ldr	r3, [r7, #28]
 80039c0:	2b03      	cmp	r3, #3
 80039c2:	d902      	bls.n	80039ca <HAL_ETH_IsRxDataAvailable+0x100>
 80039c4:	69fb      	ldr	r3, [r7, #28]
 80039c6:	3b04      	subs	r3, #4
 80039c8:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	69fa      	ldr	r2, [r7, #28]
 80039ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039d2:	61bb      	str	r3, [r7, #24]
  while((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (descscancnt < (uint32_t)ETH_RX_DESC_CNT))
 80039d4:	69bb      	ldr	r3, [r7, #24]
 80039d6:	68db      	ldr	r3, [r3, #12]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	db02      	blt.n	80039e2 <HAL_ETH_IsRxDataAvailable+0x118>
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	2b03      	cmp	r3, #3
 80039e0:	d98e      	bls.n	8003900 <HAL_ETH_IsRxDataAvailable+0x36>
    }
  }

  /* Build Descriptors if an incomplete Packet is received */
  if(appdesccnt > 0U)
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d056      	beq.n	8003a96 <HAL_ETH_IsRxDataAvailable+0x1cc>
  {
    dmarxdesclist->CurRxDesc = descidx;
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	69fa      	ldr	r2, [r7, #28]
 80039ec:	611a      	str	r2, [r3, #16]
    dmarxdesclist->FirstAppDesc = firstappdescidx;
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	68fa      	ldr	r2, [r7, #12]
 80039f2:	615a      	str	r2, [r3, #20]
    descidx = firstappdescidx;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	61fb      	str	r3, [r7, #28]
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	69fa      	ldr	r2, [r7, #28]
 80039fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a00:	61bb      	str	r3, [r7, #24]

    for(descscancnt = 0; descscancnt < appdesccnt; descscancnt++)
 8003a02:	2300      	movs	r3, #0
 8003a04:	617b      	str	r3, [r7, #20]
 8003a06:	e03b      	b.n	8003a80 <HAL_ETH_IsRxDataAvailable+0x1b6>
    {
      WRITE_REG(dmarxdesc->DESC0, dmarxdesc->BackupAddr0);
 8003a08:	69bb      	ldr	r3, [r7, #24]
 8003a0a:	691a      	ldr	r2, [r3, #16]
 8003a0c:	69bb      	ldr	r3, [r7, #24]
 8003a0e:	601a      	str	r2, [r3, #0]
      WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 8003a10:	69bb      	ldr	r3, [r7, #24]
 8003a12:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003a16:	60da      	str	r2, [r3, #12]

      if (READ_REG(dmarxdesc->BackupAddr1) != ((uint32_t)RESET))
 8003a18:	69bb      	ldr	r3, [r7, #24]
 8003a1a:	695b      	ldr	r3, [r3, #20]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d009      	beq.n	8003a34 <HAL_ETH_IsRxDataAvailable+0x16a>
      {
        WRITE_REG(dmarxdesc->DESC2, dmarxdesc->BackupAddr1);
 8003a20:	69bb      	ldr	r3, [r7, #24]
 8003a22:	695a      	ldr	r2, [r3, #20]
 8003a24:	69bb      	ldr	r3, [r7, #24]
 8003a26:	609a      	str	r2, [r3, #8]
        SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 8003a28:	69bb      	ldr	r3, [r7, #24]
 8003a2a:	68db      	ldr	r3, [r3, #12]
 8003a2c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003a30:	69bb      	ldr	r3, [r7, #24]
 8003a32:	60da      	str	r2, [r3, #12]
      }

      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 8003a34:	69bb      	ldr	r3, [r7, #24]
 8003a36:	68db      	ldr	r3, [r3, #12]
 8003a38:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003a3c:	69bb      	ldr	r3, [r7, #24]
 8003a3e:	60da      	str	r2, [r3, #12]

      if(dmarxdesclist->ItMode != ((uint32_t)RESET))
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	6a1b      	ldr	r3, [r3, #32]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d005      	beq.n	8003a54 <HAL_ETH_IsRxDataAvailable+0x18a>
      {
        SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8003a48:	69bb      	ldr	r3, [r7, #24]
 8003a4a:	68db      	ldr	r3, [r3, #12]
 8003a4c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003a50:	69bb      	ldr	r3, [r7, #24]
 8003a52:	60da      	str	r2, [r3, #12]
      }
      if(descscancnt < (appdesccnt - 1U))
 8003a54:	693b      	ldr	r3, [r7, #16]
 8003a56:	3b01      	subs	r3, #1
 8003a58:	697a      	ldr	r2, [r7, #20]
 8003a5a:	429a      	cmp	r2, r3
 8003a5c:	d20d      	bcs.n	8003a7a <HAL_ETH_IsRxDataAvailable+0x1b0>
      {
        /* Increment rx descriptor index */
        INCR_RX_DESC_INDEX(descidx, 1U);
 8003a5e:	69fb      	ldr	r3, [r7, #28]
 8003a60:	3301      	adds	r3, #1
 8003a62:	61fb      	str	r3, [r7, #28]
 8003a64:	69fb      	ldr	r3, [r7, #28]
 8003a66:	2b03      	cmp	r3, #3
 8003a68:	d902      	bls.n	8003a70 <HAL_ETH_IsRxDataAvailable+0x1a6>
 8003a6a:	69fb      	ldr	r3, [r7, #28]
 8003a6c:	3b04      	subs	r3, #4
 8003a6e:	61fb      	str	r3, [r7, #28]
        /* Get descriptor address */
        dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	69fa      	ldr	r2, [r7, #28]
 8003a74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a78:	61bb      	str	r3, [r7, #24]
    for(descscancnt = 0; descscancnt < appdesccnt; descscancnt++)
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	3301      	adds	r3, #1
 8003a7e:	617b      	str	r3, [r7, #20]
 8003a80:	697a      	ldr	r2, [r7, #20]
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	429a      	cmp	r2, r3
 8003a86:	d3bf      	bcc.n	8003a08 <HAL_ETH_IsRxDataAvailable+0x13e>
      }
    }

    /* Set the Tail pointer address to the last rx descriptor hold by the app */
    WRITE_REG(heth->Instance->DMACRDTPR, (uint32_t)dmarxdesc);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6819      	ldr	r1, [r3, #0]
 8003a8c:	69ba      	ldr	r2, [r7, #24]
 8003a8e:	f241 1328 	movw	r3, #4392	; 0x1128
 8003a92:	440b      	add	r3, r1
 8003a94:	601a      	str	r2, [r3, #0]
  }

  /* Fill information to Rx descriptors list: No received Packet */
  dmarxdesclist->AppDescNbr = 0U;
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	619a      	str	r2, [r3, #24]

  return 0;
 8003a9c:	2300      	movs	r3, #0
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	3724      	adds	r7, #36	; 0x24
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa8:	4770      	bx	lr

08003aaa <HAL_ETH_GetRxDataBuffer>:
  *         the configuration information for ETHERNET module
  * @param  RxBuffer: Pointer to a ETH_BufferTypeDef structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetRxDataBuffer(ETH_HandleTypeDef *heth, ETH_BufferTypeDef *RxBuffer)
{
 8003aaa:	b580      	push	{r7, lr}
 8003aac:	b08a      	sub	sp, #40	; 0x28
 8003aae:	af00      	add	r7, sp, #0
 8003ab0:	6078      	str	r0, [r7, #4]
 8003ab2:	6039      	str	r1, [r7, #0]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	3344      	adds	r3, #68	; 0x44
 8003ab8:	613b      	str	r3, [r7, #16]
  uint32_t descidx = dmarxdesclist->FirstAppDesc;
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	695b      	ldr	r3, [r3, #20]
 8003abe:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t index, accumulatedlen = 0, lastdesclen;
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	61fb      	str	r3, [r7, #28]
  __IO const ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ac8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003acc:	61bb      	str	r3, [r7, #24]
  ETH_BufferTypeDef *rxbuff = RxBuffer;
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	617b      	str	r3, [r7, #20]

  if(rxbuff == NULL)
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d104      	bne.n	8003ae2 <HAL_ETH_GetRxDataBuffer+0x38>
  {
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2201      	movs	r2, #1
 8003adc:	675a      	str	r2, [r3, #116]	; 0x74
    return HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e07d      	b.n	8003bde <HAL_ETH_GetRxDataBuffer+0x134>
  }

  if(dmarxdesclist->AppDescNbr == 0U)
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	699b      	ldr	r3, [r3, #24]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d10f      	bne.n	8003b0a <HAL_ETH_GetRxDataBuffer+0x60>
  {
    if(HAL_ETH_IsRxDataAvailable(heth) == 0U)
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	f7ff feed 	bl	80038ca <HAL_ETH_IsRxDataAvailable>
 8003af0:	4603      	mov	r3, r0
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d101      	bne.n	8003afa <HAL_ETH_GetRxDataBuffer+0x50>
    {
      /* No data to be transferred to the application */
      return HAL_ERROR;
 8003af6:	2301      	movs	r3, #1
 8003af8:	e071      	b.n	8003bde <HAL_ETH_GetRxDataBuffer+0x134>
    }
    else
    {
      descidx = dmarxdesclist->FirstAppDesc;
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	695b      	ldr	r3, [r3, #20]
 8003afe:	627b      	str	r3, [r7, #36]	; 0x24
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b08:	61bb      	str	r3, [r7, #24]
    }
  }

  /* Get intermediate descriptors buffers: in case of the Packet is split into multi descriptors */
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	623b      	str	r3, [r7, #32]
 8003b0e:	e031      	b.n	8003b74 <HAL_ETH_GetRxDataBuffer+0xca>
  {
    /* Get Address and length of the first buffer address */
    rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr0;
 8003b10:	69bb      	ldr	r3, [r7, #24]
 8003b12:	691b      	ldr	r3, [r3, #16]
 8003b14:	461a      	mov	r2, r3
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	601a      	str	r2, [r3, #0]
    rxbuff->len =  heth->Init.RxBuffLen;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	695a      	ldr	r2, [r3, #20]
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	605a      	str	r2, [r3, #4]

    /* Check if the second buffer address of this descriptor is valid */
    if(dmarxdesc->BackupAddr1 != 0U)
 8003b22:	69bb      	ldr	r3, [r7, #24]
 8003b24:	695b      	ldr	r3, [r3, #20]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d00b      	beq.n	8003b42 <HAL_ETH_GetRxDataBuffer+0x98>
    {
      /* Point to next buffer */
      rxbuff = rxbuff->next;
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	617b      	str	r3, [r7, #20]
      /* Get Address and length of the second buffer address */
      rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr1;
 8003b30:	69bb      	ldr	r3, [r7, #24]
 8003b32:	695b      	ldr	r3, [r3, #20]
 8003b34:	461a      	mov	r2, r3
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	601a      	str	r2, [r3, #0]
      rxbuff->len =  heth->Init.RxBuffLen;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	695a      	ldr	r2, [r3, #20]
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	605a      	str	r2, [r3, #4]
    {
      /* Nothing to do here */
    }

    /* get total length until this descriptor */
    accumulatedlen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL);
 8003b42:	69bb      	ldr	r3, [r7, #24]
 8003b44:	68db      	ldr	r3, [r3, #12]
 8003b46:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003b4a:	61fb      	str	r3, [r7, #28]

    /* Increment to next descriptor */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8003b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b4e:	3301      	adds	r3, #1
 8003b50:	627b      	str	r3, [r7, #36]	; 0x24
 8003b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b54:	2b03      	cmp	r3, #3
 8003b56:	d902      	bls.n	8003b5e <HAL_ETH_GetRxDataBuffer+0xb4>
 8003b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b5a:	3b04      	subs	r3, #4
 8003b5c:	627b      	str	r3, [r7, #36]	; 0x24
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b66:	61bb      	str	r3, [r7, #24]

    /* Point to next buffer */
    rxbuff = rxbuff->next;
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	617b      	str	r3, [r7, #20]
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 8003b6e:	6a3b      	ldr	r3, [r7, #32]
 8003b70:	3301      	adds	r3, #1
 8003b72:	623b      	str	r3, [r7, #32]
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	699b      	ldr	r3, [r3, #24]
 8003b78:	3b01      	subs	r3, #1
 8003b7a:	6a3a      	ldr	r2, [r7, #32]
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	d3c7      	bcc.n	8003b10 <HAL_ETH_GetRxDataBuffer+0x66>
  }

  /* last descriptor data length */
  lastdesclen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - accumulatedlen;
 8003b80:	69bb      	ldr	r3, [r7, #24]
 8003b82:	68db      	ldr	r3, [r3, #12]
 8003b84:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8003b88:	69fb      	ldr	r3, [r7, #28]
 8003b8a:	1ad3      	subs	r3, r2, r3
 8003b8c:	60fb      	str	r3, [r7, #12]

  /* Get Address of the first buffer address */
  rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr0;
 8003b8e:	69bb      	ldr	r3, [r7, #24]
 8003b90:	691b      	ldr	r3, [r3, #16]
 8003b92:	461a      	mov	r2, r3
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	601a      	str	r2, [r3, #0]

  /* data is in only one buffer */
  if(lastdesclen <= heth->Init.RxBuffLen)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	695b      	ldr	r3, [r3, #20]
 8003b9c:	68fa      	ldr	r2, [r7, #12]
 8003b9e:	429a      	cmp	r2, r3
 8003ba0:	d803      	bhi.n	8003baa <HAL_ETH_GetRxDataBuffer+0x100>
  {
    rxbuff->len = lastdesclen;
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	68fa      	ldr	r2, [r7, #12]
 8003ba6:	605a      	str	r2, [r3, #4]
 8003ba8:	e018      	b.n	8003bdc <HAL_ETH_GetRxDataBuffer+0x132>
  }
  /* data is in two buffers */
  else if(dmarxdesc->BackupAddr1 != 0U)
 8003baa:	69bb      	ldr	r3, [r7, #24]
 8003bac:	695b      	ldr	r3, [r3, #20]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d012      	beq.n	8003bd8 <HAL_ETH_GetRxDataBuffer+0x12e>
  {
    /* Get the Length of the first buffer address */
    rxbuff->len = heth->Init.RxBuffLen;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	695a      	ldr	r2, [r3, #20]
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	605a      	str	r2, [r3, #4]
    /* Point to next buffer */
    rxbuff = rxbuff->next;
 8003bba:	697b      	ldr	r3, [r7, #20]
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	617b      	str	r3, [r7, #20]
    /* Get the Address the Length of the second buffer address */
    rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr1;
 8003bc0:	69bb      	ldr	r3, [r7, #24]
 8003bc2:	695b      	ldr	r3, [r3, #20]
 8003bc4:	461a      	mov	r2, r3
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	601a      	str	r2, [r3, #0]
    rxbuff->len =  lastdesclen - (heth->Init.RxBuffLen);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	695b      	ldr	r3, [r3, #20]
 8003bce:	68fa      	ldr	r2, [r7, #12]
 8003bd0:	1ad2      	subs	r2, r2, r3
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	605a      	str	r2, [r3, #4]
 8003bd6:	e001      	b.n	8003bdc <HAL_ETH_GetRxDataBuffer+0x132>
  }
  else /* Buffer 2 not valid*/
  {
    return HAL_ERROR;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	e000      	b.n	8003bde <HAL_ETH_GetRxDataBuffer+0x134>
  }

  return HAL_OK;
 8003bdc:	2300      	movs	r3, #0
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	3728      	adds	r7, #40	; 0x28
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}

08003be6 <HAL_ETH_GetRxDataLength>:
  *         the configuration information for ETHERNET module
  * @param  Length: parameter to hold Rx packet length
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetRxDataLength(ETH_HandleTypeDef *heth, uint32_t *Length)
{
 8003be6:	b580      	push	{r7, lr}
 8003be8:	b086      	sub	sp, #24
 8003bea:	af00      	add	r7, sp, #0
 8003bec:	6078      	str	r0, [r7, #4]
 8003bee:	6039      	str	r1, [r7, #0]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	3344      	adds	r3, #68	; 0x44
 8003bf4:	613b      	str	r3, [r7, #16]
  uint32_t descidx = dmarxdesclist->FirstAppDesc;
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	695b      	ldr	r3, [r3, #20]
 8003bfa:	617b      	str	r3, [r7, #20]
  __IO const ETH_DMADescTypeDef *dmarxdesc;

  if(dmarxdesclist->AppDescNbr == 0U)
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	699b      	ldr	r3, [r3, #24]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d107      	bne.n	8003c14 <HAL_ETH_GetRxDataLength+0x2e>
  {
    if(HAL_ETH_IsRxDataAvailable(heth) == 0U)
 8003c04:	6878      	ldr	r0, [r7, #4]
 8003c06:	f7ff fe60 	bl	80038ca <HAL_ETH_IsRxDataAvailable>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d101      	bne.n	8003c14 <HAL_ETH_GetRxDataLength+0x2e>
    {
      /* No data to be transferred to the application */
      return HAL_ERROR;
 8003c10:	2301      	movs	r3, #1
 8003c12:	e017      	b.n	8003c44 <HAL_ETH_GetRxDataLength+0x5e>
    }
  }

  /* Get index of last descriptor */
  INCR_RX_DESC_INDEX(descidx, (dmarxdesclist->AppDescNbr - 1U));
 8003c14:	693b      	ldr	r3, [r7, #16]
 8003c16:	699a      	ldr	r2, [r3, #24]
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	4413      	add	r3, r2
 8003c1c:	3b01      	subs	r3, #1
 8003c1e:	617b      	str	r3, [r7, #20]
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	2b03      	cmp	r3, #3
 8003c24:	d902      	bls.n	8003c2c <HAL_ETH_GetRxDataLength+0x46>
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	3b04      	subs	r3, #4
 8003c2a:	617b      	str	r3, [r7, #20]
  /* Point to last descriptor */
  dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	697a      	ldr	r2, [r7, #20]
 8003c30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c34:	60fb      	str	r3, [r7, #12]

  *Length = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	68db      	ldr	r3, [r3, #12]
 8003c3a:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8003c42:	2300      	movs	r3, #0
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	3718      	adds	r7, #24
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bd80      	pop	{r7, pc}

08003c4c <HAL_ETH_BuildRxDescriptors>:
* @param  heth: pointer to a ETH_HandleTypeDef structure that contains
*         the configuration information for ETHERNET module
* @retval HAL status.
*/
HAL_StatusTypeDef HAL_ETH_BuildRxDescriptors(ETH_HandleTypeDef *heth)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b089      	sub	sp, #36	; 0x24
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	3344      	adds	r3, #68	; 0x44
 8003c58:	60fb      	str	r3, [r7, #12]
  uint32_t descindex = dmarxdesclist->FirstAppDesc;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	695b      	ldr	r3, [r3, #20]
 8003c5e:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descindex];
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	69fa      	ldr	r2, [r7, #28]
 8003c64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c68:	61bb      	str	r3, [r7, #24]
  uint32_t totalappdescnbr = dmarxdesclist->AppDescNbr;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	699b      	ldr	r3, [r3, #24]
 8003c6e:	617b      	str	r3, [r7, #20]
  uint32_t descscan;

  if(dmarxdesclist->AppDescNbr == 0U)
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	699b      	ldr	r3, [r3, #24]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d101      	bne.n	8003c7c <HAL_ETH_BuildRxDescriptors+0x30>
  {
    /* No Rx descriptors to build */
    return HAL_ERROR;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	e057      	b.n	8003d2c <HAL_ETH_BuildRxDescriptors+0xe0>
  }

  if(dmarxdesclist->AppContextDesc != 0U)
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	69db      	ldr	r3, [r3, #28]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d002      	beq.n	8003c8a <HAL_ETH_BuildRxDescriptors+0x3e>
  {
    /* A context descriptor is available */
    totalappdescnbr += 1U;
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	3301      	adds	r3, #1
 8003c88:	617b      	str	r3, [r7, #20]
  }

  for(descscan =0; descscan < totalappdescnbr; descscan++)
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	613b      	str	r3, [r7, #16]
 8003c8e:	e03b      	b.n	8003d08 <HAL_ETH_BuildRxDescriptors+0xbc>
  {
    WRITE_REG(dmarxdesc->DESC0, dmarxdesc->BackupAddr0);
 8003c90:	69bb      	ldr	r3, [r7, #24]
 8003c92:	691a      	ldr	r2, [r3, #16]
 8003c94:	69bb      	ldr	r3, [r7, #24]
 8003c96:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 8003c98:	69bb      	ldr	r3, [r7, #24]
 8003c9a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003c9e:	60da      	str	r2, [r3, #12]

    if (READ_REG(dmarxdesc->BackupAddr1) != 0U)
 8003ca0:	69bb      	ldr	r3, [r7, #24]
 8003ca2:	695b      	ldr	r3, [r3, #20]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d009      	beq.n	8003cbc <HAL_ETH_BuildRxDescriptors+0x70>
    {
      WRITE_REG(dmarxdesc->DESC2, dmarxdesc->BackupAddr1);
 8003ca8:	69bb      	ldr	r3, [r7, #24]
 8003caa:	695a      	ldr	r2, [r3, #20]
 8003cac:	69bb      	ldr	r3, [r7, #24]
 8003cae:	609a      	str	r2, [r3, #8]
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 8003cb0:	69bb      	ldr	r3, [r7, #24]
 8003cb2:	68db      	ldr	r3, [r3, #12]
 8003cb4:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003cb8:	69bb      	ldr	r3, [r7, #24]
 8003cba:	60da      	str	r2, [r3, #12]
    }

    SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 8003cbc:	69bb      	ldr	r3, [r7, #24]
 8003cbe:	68db      	ldr	r3, [r3, #12]
 8003cc0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003cc4:	69bb      	ldr	r3, [r7, #24]
 8003cc6:	60da      	str	r2, [r3, #12]

    if(dmarxdesclist->ItMode != 0U)
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	6a1b      	ldr	r3, [r3, #32]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d005      	beq.n	8003cdc <HAL_ETH_BuildRxDescriptors+0x90>
    {
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8003cd0:	69bb      	ldr	r3, [r7, #24]
 8003cd2:	68db      	ldr	r3, [r3, #12]
 8003cd4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003cd8:	69bb      	ldr	r3, [r7, #24]
 8003cda:	60da      	str	r2, [r3, #12]
    }

    if(descscan < (totalappdescnbr - 1U))
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	3b01      	subs	r3, #1
 8003ce0:	693a      	ldr	r2, [r7, #16]
 8003ce2:	429a      	cmp	r2, r3
 8003ce4:	d20d      	bcs.n	8003d02 <HAL_ETH_BuildRxDescriptors+0xb6>
    {
      /* Increment rx descriptor index */
      INCR_RX_DESC_INDEX(descindex, 1U);
 8003ce6:	69fb      	ldr	r3, [r7, #28]
 8003ce8:	3301      	adds	r3, #1
 8003cea:	61fb      	str	r3, [r7, #28]
 8003cec:	69fb      	ldr	r3, [r7, #28]
 8003cee:	2b03      	cmp	r3, #3
 8003cf0:	d902      	bls.n	8003cf8 <HAL_ETH_BuildRxDescriptors+0xac>
 8003cf2:	69fb      	ldr	r3, [r7, #28]
 8003cf4:	3b04      	subs	r3, #4
 8003cf6:	61fb      	str	r3, [r7, #28]
      /* Get descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descindex];
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	69fa      	ldr	r2, [r7, #28]
 8003cfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d00:	61bb      	str	r3, [r7, #24]
  for(descscan =0; descscan < totalappdescnbr; descscan++)
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	3301      	adds	r3, #1
 8003d06:	613b      	str	r3, [r7, #16]
 8003d08:	693a      	ldr	r2, [r7, #16]
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	d3bf      	bcc.n	8003c90 <HAL_ETH_BuildRxDescriptors+0x44>
    }
  }

  /* Set the Tail pointer address to the last rx descriptor hold by the app */
  WRITE_REG(heth->Instance->DMACRDTPR, (uint32_t)dmarxdesc);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6819      	ldr	r1, [r3, #0]
 8003d14:	69ba      	ldr	r2, [r7, #24]
 8003d16:	f241 1328 	movw	r3, #4392	; 0x1128
 8003d1a:	440b      	add	r3, r1
 8003d1c:	601a      	str	r2, [r3, #0]

  /* reset the Application desc number */
  WRITE_REG(dmarxdesclist->AppDescNbr, 0);
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	2200      	movs	r2, #0
 8003d22:	619a      	str	r2, [r3, #24]

  /*  reset the application context descriptor */
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2200      	movs	r2, #0
 8003d28:	661a      	str	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8003d2a:	2300      	movs	r3, #0
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	3724      	adds	r7, #36	; 0x24
 8003d30:	46bd      	mov	sp, r7
 8003d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d36:	4770      	bx	lr

08003d38 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b082      	sub	sp, #8
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_RI))
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d4e:	2b40      	cmp	r3, #64	; 0x40
 8003d50:	d113      	bne.n	8003d7a <HAL_ETH_IRQHandler+0x42>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_RIE))
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	f241 1334 	movw	r3, #4404	; 0x1134
 8003d5a:	4413      	add	r3, r2
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d62:	2b40      	cmp	r3, #64	; 0x40
 8003d64:	d109      	bne.n	8003d7a <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	f006 f93a 	bl	8009fe0 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8003d74:	f248 0240 	movw	r2, #32832	; 0x8040
 8003d78:	601a      	str	r2, [r3, #0]
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_TI))
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f003 0301 	and.w	r3, r3, #1
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	d113      	bne.n	8003db4 <HAL_ETH_IRQHandler+0x7c>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_TIE))
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681a      	ldr	r2, [r3, #0]
 8003d90:	f241 1334 	movw	r3, #4404	; 0x1134
 8003d94:	4413      	add	r3, r2
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f003 0301 	and.w	r3, r3, #1
 8003d9c:	2b01      	cmp	r3, #1
 8003d9e:	d109      	bne.n	8003db4 <HAL_ETH_IRQHandler+0x7c>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
        /*Call registered Transmit complete callback*/
        heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8003da0:	6878      	ldr	r0, [r7, #4]
 8003da2:	f000 f8b7 	bl	8003f14 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8003dae:	f248 0201 	movw	r2, #32769	; 0x8001
 8003db2:	601a      	str	r2, [r3, #0]
    }
  }


  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_AIS))
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003dc2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003dc6:	d149      	bne.n	8003e5c <HAL_ETH_IRQHandler+0x124>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_AIE))
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681a      	ldr	r2, [r3, #0]
 8003dcc:	f241 1334 	movw	r3, #4404	; 0x1134
 8003dd0:	4413      	add	r3, r2
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003dd8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ddc:	d13e      	bne.n	8003e5c <HAL_ETH_IRQHandler+0x124>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003de2:	f043 0208 	orr.w	r2, r3, #8
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	675a      	str	r2, [r3, #116]	; 0x74

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_FBE))
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003df8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dfc:	d11b      	bne.n	8003e36 <HAL_ETH_IRQHandler+0xfe>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8003e06:	681a      	ldr	r2, [r3, #0]
 8003e08:	f241 1302 	movw	r3, #4354	; 0x1102
 8003e0c:	4013      	ands	r3, r2
 8003e0e:	687a      	ldr	r2, [r7, #4]
 8003e10:	6793      	str	r3, [r2, #120]	; 0x78

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	f241 1334 	movw	r3, #4404	; 0x1134
 8003e1a:	4413      	add	r3, r2
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	687a      	ldr	r2, [r7, #4]
 8003e20:	6811      	ldr	r1, [r2, #0]
 8003e22:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003e26:	f241 1334 	movw	r3, #4404	; 0x1134
 8003e2a:	440b      	add	r3, r1
 8003e2c:	601a      	str	r2, [r3, #0]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	22e0      	movs	r2, #224	; 0xe0
 8003e32:	66da      	str	r2, [r3, #108]	; 0x6c
 8003e34:	e00f      	b.n	8003e56 <HAL_ETH_IRQHandler+0x11e>
      }
      else
      {
        /* Get DMA error status  */
       heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f403 42cd 	and.w	r2, r3, #26240	; 0x6680
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	679a      	str	r2, [r3, #120]	; 0x78
                                                       ETH_DMACSR_RBU | ETH_DMACSR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8003e50:	f44f 42cd 	mov.w	r2, #26240	; 0x6680
 8003e54:	601a      	str	r2, [r3, #0]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered DMA Error callback*/
      heth->DMAErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_DMAErrorCallback(heth);
 8003e56:	6878      	ldr	r0, [r7, #4]
 8003e58:	f000 f866 	bl	8003f28 <HAL_ETH_DMAErrorCallback>

    }
  }

  /* ETH MAC Error IT */
  if(__HAL_ETH_MAC_GET_IT(heth, (ETH_MACIER_RXSTSIE | ETH_MACIER_TXSTSIE)))
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003e64:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8003e68:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003e6c:	d10e      	bne.n	8003e8c <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Rx Tx status and clear Status register pending bit */
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	67da      	str	r2, [r3, #124]	; 0x7c

    heth->gState = HAL_ETH_STATE_ERROR;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	22e0      	movs	r2, #224	; 0xe0
 8003e7e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered MAC Error callback*/
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet MAC Error callback */
    HAL_ETH_MACErrorCallback(heth);
 8003e80:	6878      	ldr	r0, [r7, #4]
 8003e82:	f000 f85b 	bl	8003f3c <HAL_ETH_MACErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACErrorCode = (uint32_t)(0x0U);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	67da      	str	r2, [r3, #124]	; 0x7c
  }

  /* ETH PMT IT */
  if(__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003e94:	f003 0310 	and.w	r3, r3, #16
 8003e98:	2b10      	cmp	r3, #16
 8003e9a:	d10f      	bne.n	8003ebc <HAL_ETH_IRQHandler+0x184>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003ea4:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f000 f84e 	bl	8003f50 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }

  /* ETH EEE IT */
  if(__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_LPI_IT))
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003ec4:	f003 0320 	and.w	r3, r3, #32
 8003ec8:	2b20      	cmp	r3, #32
 8003eca:	d10f      	bne.n	8003eec <HAL_ETH_IRQHandler+0x1b4>
  {
    /* Get MAC LPI interrupt source and clear the status register pending bit */
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACPCSR, 0x0000000FU);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003ed4:	f003 020f 	and.w	r2, r3, #15
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered EEE callback*/
    heth->EEECallback(heth);
#else
    /* Ethernet EEE callback */
    HAL_ETH_EEECallback(heth);
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	f000 f840 	bl	8003f64 <HAL_ETH_EEECallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACLPIEvent = (uint32_t)(0x0U);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif
    }
  }
#else
  /* check ETH WAKEUP exti flag */
  if(__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8003eec:	4b08      	ldr	r3, [pc, #32]	; (8003f10 <HAL_ETH_IRQHandler+0x1d8>)
 8003eee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ef0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d006      	beq.n	8003f06 <HAL_ETH_IRQHandler+0x1ce>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8003ef8:	4b05      	ldr	r3, [pc, #20]	; (8003f10 <HAL_ETH_IRQHandler+0x1d8>)
 8003efa:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8003efe:	629a      	str	r2, [r3, #40]	; 0x28
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered WakeUp callback*/
      heth->WakeUpCallback(heth);
#else
      /* ETH WAKEUP callback */
      HAL_ETH_WakeUpCallback(heth);
 8003f00:	6878      	ldr	r0, [r7, #4]
 8003f02:	f000 f839 	bl	8003f78 <HAL_ETH_WakeUpCallback>
#endif
  }
#endif
}
 8003f06:	bf00      	nop
 8003f08:	3708      	adds	r7, #8
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}
 8003f0e:	bf00      	nop
 8003f10:	58000080 	.word	0x58000080

08003f14 <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b083      	sub	sp, #12
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 8003f1c:	bf00      	nop
 8003f1e:	370c      	adds	r7, #12
 8003f20:	46bd      	mov	sp, r7
 8003f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f26:	4770      	bx	lr

08003f28 <HAL_ETH_DMAErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_DMAErrorCallback(ETH_HandleTypeDef *heth)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b083      	sub	sp, #12
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_DMAErrorCallback could be implemented in the user file
  */
}
 8003f30:	bf00      	nop
 8003f32:	370c      	adds	r7, #12
 8003f34:	46bd      	mov	sp, r7
 8003f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3a:	4770      	bx	lr

08003f3c <HAL_ETH_MACErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_MACErrorCallback(ETH_HandleTypeDef *heth)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b083      	sub	sp, #12
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_MACErrorCallback could be implemented in the user file
  */
}
 8003f44:	bf00      	nop
 8003f46:	370c      	adds	r7, #12
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4e:	4770      	bx	lr

08003f50 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b083      	sub	sp, #12
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8003f58:	bf00      	nop
 8003f5a:	370c      	adds	r7, #12
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f62:	4770      	bx	lr

08003f64 <HAL_ETH_EEECallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_EEECallback(ETH_HandleTypeDef *heth)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b083      	sub	sp, #12
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_EEECallback could be implemented in the user file
  */
}
 8003f6c:	bf00      	nop
 8003f6e:	370c      	adds	r7, #12
 8003f70:	46bd      	mov	sp, r7
 8003f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f76:	4770      	bx	lr

08003f78 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b083      	sub	sp, #12
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8003f80:	bf00      	nop
 8003f82:	370c      	adds	r7, #12
 8003f84:	46bd      	mov	sp, r7
 8003f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8a:	4770      	bx	lr

08003f8c <HAL_ETH_ReadPHYRegister>:
  * @param  PHYReg: PHY register address, must be a value from 0 to 31
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg, uint32_t *pRegValue)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b086      	sub	sp, #24
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	60f8      	str	r0, [r7, #12]
 8003f94:	60b9      	str	r1, [r7, #8]
 8003f96:	607a      	str	r2, [r7, #4]
 8003f98:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg, tickstart;

  /* Check for the Busy flag */
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003fa2:	f003 0301 	and.w	r3, r3, #1
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d001      	beq.n	8003fae <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	e03e      	b.n	800402c <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003fb6:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr <<21));
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	055b      	lsls	r3, r3, #21
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	041b      	lsls	r3, r3, #16
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	f043 030c 	orr.w	r3, r3, #12
 8003fda:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	f043 0301 	orr.w	r3, r3, #1
 8003fe2:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	697a      	ldr	r2, [r7, #20]
 8003fea:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  tickstart = HAL_GetTick();
 8003fee:	f7fe fdfd 	bl	8002bec <HAL_GetTick>
 8003ff2:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8003ff4:	e009      	b.n	800400a <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT))
 8003ff6:	f7fe fdf9 	bl	8002bec <HAL_GetTick>
 8003ffa:	4602      	mov	r2, r0
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	1ad3      	subs	r3, r2, r3
 8004000:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004004:	d901      	bls.n	800400a <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	e010      	b.n	800402c <HAL_ETH_ReadPHYRegister+0xa0>
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004012:	f003 0301 	and.w	r3, r3, #1
 8004016:	2b00      	cmp	r3, #0
 8004018:	d1ed      	bne.n	8003ff6 <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8004022:	b29b      	uxth	r3, r3
 8004024:	461a      	mov	r2, r3
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800402a:	2300      	movs	r3, #0
}
 800402c:	4618      	mov	r0, r3
 800402e:	3718      	adds	r7, #24
 8004030:	46bd      	mov	sp, r7
 8004032:	bd80      	pop	{r7, pc}

08004034 <HAL_ETH_WritePHYRegister>:
  * @param  PHYReg: PHY register address, must be a value from 0 to 31
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg, uint32_t RegValue)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b086      	sub	sp, #24
 8004038:	af00      	add	r7, sp, #0
 800403a:	60f8      	str	r0, [r7, #12]
 800403c:	60b9      	str	r1, [r7, #8]
 800403e:	607a      	str	r2, [r7, #4]
 8004040:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg, tickstart;

  /* Check for the Busy flag */
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800404a:	f003 0301 	and.w	r3, r3, #1
 800404e:	2b00      	cmp	r3, #0
 8004050:	d001      	beq.n	8004056 <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	e03c      	b.n	80040d0 <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800405e:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr <<21));
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	055b      	lsls	r3, r3, #21
 800406a:	4313      	orrs	r3, r2
 800406c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	041b      	lsls	r3, r3, #16
 8004078:	4313      	orrs	r3, r2
 800407a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	f023 030c 	bic.w	r3, r3, #12
 8004082:	f043 0304 	orr.w	r3, r3, #4
 8004086:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	f043 0301 	orr.w	r3, r3, #1
 800408e:	617b      	str	r3, [r7, #20]


  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	b29a      	uxth	r2, r3
 8004094:	4b10      	ldr	r3, [pc, #64]	; (80040d8 <HAL_ETH_WritePHYRegister+0xa4>)
 8004096:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 800409a:	4a0f      	ldr	r2, [pc, #60]	; (80040d8 <HAL_ETH_WritePHYRegister+0xa4>)
 800409c:	697b      	ldr	r3, [r7, #20]
 800409e:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  tickstart = HAL_GetTick();
 80040a2:	f7fe fda3 	bl	8002bec <HAL_GetTick>
 80040a6:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80040a8:	e009      	b.n	80040be <HAL_ETH_WritePHYRegister+0x8a>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT))
 80040aa:	f7fe fd9f 	bl	8002bec <HAL_GetTick>
 80040ae:	4602      	mov	r2, r0
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	1ad3      	subs	r3, r2, r3
 80040b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80040b8:	d901      	bls.n	80040be <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	e008      	b.n	80040d0 <HAL_ETH_WritePHYRegister+0x9c>
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80040c6:	f003 0301 	and.w	r3, r3, #1
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d1ed      	bne.n	80040aa <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 80040ce:	2300      	movs	r3, #0
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	3718      	adds	r7, #24
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd80      	pop	{r7, pc}
 80040d8:	40028000 	.word	0x40028000

080040dc <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 80040dc:	b480      	push	{r7}
 80040de:	b083      	sub	sp, #12
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
 80040e4:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d101      	bne.n	80040f0 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 80040ec:	2301      	movs	r3, #1
 80040ee:	e1c3      	b.n	8004478 <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f003 020c 	and.w	r2, r3, #12
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	62da      	str	r2, [r3, #44]	; 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC)>> 4) > 0U) ? ENABLE : DISABLE;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f003 0310 	and.w	r3, r3, #16
 8004108:	2b00      	cmp	r3, #0
 800410a:	bf14      	ite	ne
 800410c:	2301      	movne	r3, #1
 800410e:	2300      	moveq	r3, #0
 8004110:	b2db      	uxtb	r3, r3
 8004112:	461a      	mov	r2, r3
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004132:	2b00      	cmp	r3, #0
 8004134:	bf0c      	ite	eq
 8004136:	2301      	moveq	r3, #1
 8004138:	2300      	movne	r3, #0
 800413a:	b2db      	uxtb	r3, r3
 800413c:	461a      	mov	r2, r3
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U) ? ENABLE : DISABLE;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800414e:	2b00      	cmp	r3, #0
 8004150:	bf14      	ite	ne
 8004152:	2301      	movne	r3, #1
 8004154:	2300      	moveq	r3, #0
 8004156:	b2db      	uxtb	r3, r3
 8004158:	461a      	mov	r2, r3
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004168:	2b00      	cmp	r3, #0
 800416a:	bf0c      	ite	eq
 800416c:	2301      	moveq	r3, #1
 800416e:	2300      	movne	r3, #0
 8004170:	b2db      	uxtb	r3, r3
 8004172:	461a      	mov	r2, r3
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004182:	2b00      	cmp	r3, #0
 8004184:	bf14      	ite	ne
 8004186:	2301      	movne	r3, #1
 8004188:	2300      	moveq	r3, #0
 800418a:	b2db      	uxtb	r3, r3
 800418c:	461a      	mov	r2, r3
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800419c:	2b00      	cmp	r3, #0
 800419e:	bf14      	ite	ne
 80041a0:	2301      	movne	r3, #1
 80041a2:	2300      	moveq	r3, #0
 80041a4:	b2db      	uxtb	r3, r3
 80041a6:	461a      	mov	r2, r3
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	bf14      	ite	ne
 80041d6:	2301      	movne	r3, #1
 80041d8:	2300      	moveq	r3, #0
 80041da:	b2db      	uxtb	r3, r3
 80041dc:	461a      	mov	r2, r3
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >>17) == 0U) ? ENABLE : DISABLE;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	bf0c      	ite	eq
 80041f0:	2301      	moveq	r3, #1
 80041f2:	2300      	movne	r3, #0
 80041f4:	b2db      	uxtb	r3, r3
 80041f6:	461a      	mov	r2, r3
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >>19) == 0U) ? ENABLE : DISABLE;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004206:	2b00      	cmp	r3, #0
 8004208:	bf0c      	ite	eq
 800420a:	2301      	moveq	r3, #1
 800420c:	2300      	movne	r3, #0
 800420e:	b2db      	uxtb	r3, r3
 8004210:	461a      	mov	r2, r3
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004220:	2b00      	cmp	r3, #0
 8004222:	bf14      	ite	ne
 8004224:	2301      	movne	r3, #1
 8004226:	2300      	moveq	r3, #0
 8004228:	b2db      	uxtb	r3, r3
 800422a:	461a      	mov	r2, r3
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800423a:	2b00      	cmp	r3, #0
 800423c:	bf14      	ite	ne
 800423e:	2301      	movne	r3, #1
 8004240:	2300      	moveq	r3, #0
 8004242:	b2db      	uxtb	r3, r3
 8004244:	461a      	mov	r2, r3
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004254:	2b00      	cmp	r3, #0
 8004256:	bf14      	ite	ne
 8004258:	2301      	movne	r3, #1
 800425a:	2300      	moveq	r3, #0
 800425c:	b2db      	uxtb	r3, r3
 800425e:	461a      	mov	r2, r3
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800426e:	2b00      	cmp	r3, #0
 8004270:	bf14      	ite	ne
 8004272:	2301      	movne	r3, #1
 8004274:	2300      	moveq	r3, #0
 8004276:	b2db      	uxtb	r3, r3
 8004278:	461a      	mov	r2, r3
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004296:	2b00      	cmp	r3, #0
 8004298:	bf14      	ite	ne
 800429a:	2301      	movne	r3, #1
 800429c:	2300      	moveq	r3, #0
 800429e:	b2db      	uxtb	r3, r3
 80042a0:	461a      	mov	r2, r3
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	635a      	str	r2, [r3, #52]	; 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	bf0c      	ite	eq
 80042d0:	2301      	moveq	r3, #1
 80042d2:	2300      	movne	r3, #0
 80042d4:	b2db      	uxtb	r3, r3
 80042d6:	461a      	mov	r2, r3
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	bf14      	ite	ne
 80042ec:	2301      	movne	r3, #1
 80042ee:	2300      	moveq	r3, #0
 80042f0:	b2db      	uxtb	r3, r3
 80042f2:	461a      	mov	r2, r3
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004304:	2b00      	cmp	r3, #0
 8004306:	bf14      	ite	ne
 8004308:	2301      	movne	r3, #1
 800430a:	2300      	moveq	r3, #0
 800430c:	b2db      	uxtb	r3, r3
 800430e:	461a      	mov	r2, r3
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U) ? ENABLE : DISABLE;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004320:	2b00      	cmp	r3, #0
 8004322:	bf14      	ite	ne
 8004324:	2301      	movne	r3, #1
 8004326:	2300      	moveq	r3, #0
 8004328:	b2db      	uxtb	r3, r3
 800432a:	461a      	mov	r2, r3
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	0e5b      	lsrs	r3, r3, #25
 800433a:	f003 021f 	and.w	r2, r3, #31
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	63da      	str	r2, [r3, #60]	; 0x3c


  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	68db      	ldr	r3, [r3, #12]
 8004348:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800434c:	2b00      	cmp	r3, #0
 800434e:	bf14      	ite	ne
 8004350:	2301      	movne	r3, #1
 8004352:	2300      	moveq	r3, #0
 8004354:	b2db      	uxtb	r3, r3
 8004356:	461a      	mov	r2, r3
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	68db      	ldr	r3, [r3, #12]
 8004364:	f003 020f 	and.w	r2, r3, #15
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	645a      	str	r2, [r3, #68]	; 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004372:	f003 0302 	and.w	r3, r3, #2
 8004376:	2b00      	cmp	r3, #0
 8004378:	bf14      	ite	ne
 800437a:	2301      	movne	r3, #1
 800437c:	2300      	moveq	r3, #0
 800437e:	b2db      	uxtb	r3, r3
 8004380:	461a      	mov	r2, r3
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800438e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004392:	2b00      	cmp	r3, #0
 8004394:	bf0c      	ite	eq
 8004396:	2301      	moveq	r3, #1
 8004398:	2300      	movne	r3, #0
 800439a:	b2db      	uxtb	r3, r3
 800439c:	461a      	mov	r2, r3
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043aa:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043b8:	0c1b      	lsrs	r3, r3, #16
 80043ba:	b29a      	uxth	r2, r3
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	649a      	str	r2, [r3, #72]	; 0x48


  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043c8:	f003 0301 	and.w	r3, r3, #1
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	bf14      	ite	ne
 80043d0:	2301      	movne	r3, #1
 80043d2:	2300      	moveq	r3, #0
 80043d4:	b2db      	uxtb	r3, r3
 80043d6:	461a      	mov	r2, r3
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U) ? ENABLE : DISABLE;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043e6:	f003 0302 	and.w	r3, r3, #2
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	bf14      	ite	ne
 80043ee:	2301      	movne	r3, #1
 80043f0:	2300      	moveq	r3, #0
 80043f2:	b2db      	uxtb	r3, r3
 80043f4:	461a      	mov	r2, r3
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8004404:	f003 0272 	and.w	r2, r3, #114	; 0x72
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	659a      	str	r2, [r3, #88]	; 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8004414:	f003 0223 	and.w	r2, r3, #35	; 0x23
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	65da      	str	r2, [r3, #92]	; 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8004424:	f003 0308 	and.w	r3, r3, #8
 8004428:	2b00      	cmp	r3, #0
 800442a:	bf14      	ite	ne
 800442c:	2301      	movne	r3, #1
 800442e:	2300      	moveq	r3, #0
 8004430:	b2db      	uxtb	r3, r3
 8004432:	461a      	mov	r2, r3
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8004442:	f003 0310 	and.w	r3, r3, #16
 8004446:	2b00      	cmp	r3, #0
 8004448:	bf14      	ite	ne
 800444a:	2301      	movne	r3, #1
 800444c:	2300      	moveq	r3, #0
 800444e:	b2db      	uxtb	r3, r3
 8004450:	461a      	mov	r2, r3
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8004460:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004464:	2b00      	cmp	r3, #0
 8004466:	bf0c      	ite	eq
 8004468:	2301      	moveq	r3, #1
 800446a:	2300      	movne	r3, #0
 800446c:	b2db      	uxtb	r3, r3
 800446e:	461a      	mov	r2, r3
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8004476:	2300      	movs	r3, #0
}
 8004478:	4618      	mov	r0, r3
 800447a:	370c      	adds	r7, #12
 800447c:	46bd      	mov	sp, r7
 800447e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004482:	4770      	bx	lr

08004484 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b082      	sub	sp, #8
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
 800448c:	6039      	str	r1, [r7, #0]
  if(macconf == NULL)
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d101      	bne.n	8004498 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8004494:	2301      	movs	r3, #1
 8004496:	e00a      	b.n	80044ae <HAL_ETH_SetMACConfig+0x2a>
  }

  if(heth->RxState == HAL_ETH_STATE_READY)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800449c:	2b10      	cmp	r3, #16
 800449e:	d105      	bne.n	80044ac <HAL_ETH_SetMACConfig+0x28>
  {
    ETH_SetMACConfig(heth, macconf);
 80044a0:	6839      	ldr	r1, [r7, #0]
 80044a2:	6878      	ldr	r0, [r7, #4]
 80044a4:	f000 f860 	bl	8004568 <ETH_SetMACConfig>

    return HAL_OK;
 80044a8:	2300      	movs	r3, #0
 80044aa:	e000      	b.n	80044ae <HAL_ETH_SetMACConfig+0x2a>
  }
  else
  {
    return HAL_ERROR;
 80044ac:	2301      	movs	r3, #1
  }
}
 80044ae:	4618      	mov	r0, r3
 80044b0:	3708      	adds	r7, #8
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}
	...

080044b8 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b084      	sub	sp, #16
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80044c8:	60fb      	str	r3, [r7, #12]

	/* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80044d0:	60fb      	str	r3, [r7, #12]

	/* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80044d2:	f001 ff93 	bl	80063fc <HAL_RCC_GetHCLKFreq>
 80044d6:	60b8      	str	r0, [r7, #8]

	/* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	4a1e      	ldr	r2, [pc, #120]	; (8004554 <HAL_ETH_SetMDIOClockRange+0x9c>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d908      	bls.n	80044f2 <HAL_ETH_SetMDIOClockRange+0x3a>
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	4a1d      	ldr	r2, [pc, #116]	; (8004558 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d804      	bhi.n	80044f2 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80044ee:	60fb      	str	r3, [r7, #12]
 80044f0:	e027      	b.n	8004542 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	4a18      	ldr	r2, [pc, #96]	; (8004558 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d908      	bls.n	800450c <HAL_ETH_SetMDIOClockRange+0x54>
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	4a17      	ldr	r2, [pc, #92]	; (800455c <HAL_ETH_SetMDIOClockRange+0xa4>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d204      	bcs.n	800450c <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8004508:	60fb      	str	r3, [r7, #12]
 800450a:	e01a      	b.n	8004542 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	4a13      	ldr	r2, [pc, #76]	; (800455c <HAL_ETH_SetMDIOClockRange+0xa4>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d303      	bcc.n	800451c <HAL_ETH_SetMDIOClockRange+0x64>
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	4a12      	ldr	r2, [pc, #72]	; (8004560 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d911      	bls.n	8004540 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	4a10      	ldr	r2, [pc, #64]	; (8004560 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d908      	bls.n	8004536 <HAL_ETH_SetMDIOClockRange+0x7e>
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	4a0f      	ldr	r2, [pc, #60]	; (8004564 <HAL_ETH_SetMDIOClockRange+0xac>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d804      	bhi.n	8004536 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004532:	60fb      	str	r3, [r7, #12]
 8004534:	e005      	b.n	8004542 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800453c:	60fb      	str	r3, [r7, #12]
 800453e:	e000      	b.n	8004542 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8004540:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	68fa      	ldr	r2, [r7, #12]
 8004548:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 800454c:	bf00      	nop
 800454e:	3710      	adds	r7, #16
 8004550:	46bd      	mov	sp, r7
 8004552:	bd80      	pop	{r7, pc}
 8004554:	01312cff 	.word	0x01312cff
 8004558:	02160ebf 	.word	0x02160ebf
 800455c:	03938700 	.word	0x03938700
 8004560:	05f5e0ff 	.word	0x05f5e0ff
 8004564:	08f0d17f 	.word	0x08f0d17f

08004568 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8004568:	b480      	push	{r7}
 800456a:	b085      	sub	sp, #20
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
 8004570:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 800457a:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	791b      	ldrb	r3, [r3, #4]
 8004580:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 8004582:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	7b1b      	ldrb	r3, [r3, #12]
 8004588:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 800458a:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	7b5b      	ldrb	r3, [r3, #13]
 8004590:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8004592:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	7b9b      	ldrb	r3, [r3, #14]
 8004598:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 800459a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	7bdb      	ldrb	r3, [r3, #15]
 80045a0:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80045a2:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80045a4:	683a      	ldr	r2, [r7, #0]
 80045a6:	7c12      	ldrb	r2, [r2, #16]
 80045a8:	2a00      	cmp	r2, #0
 80045aa:	d102      	bne.n	80045b2 <ETH_SetMACConfig+0x4a>
 80045ac:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80045b0:	e000      	b.n	80045b4 <ETH_SetMACConfig+0x4c>
 80045b2:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80045b4:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80045b6:	683a      	ldr	r2, [r7, #0]
 80045b8:	7c52      	ldrb	r2, [r2, #17]
 80045ba:	2a00      	cmp	r2, #0
 80045bc:	d102      	bne.n	80045c4 <ETH_SetMACConfig+0x5c>
 80045be:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80045c2:	e000      	b.n	80045c6 <ETH_SetMACConfig+0x5e>
 80045c4:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80045c6:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	7c9b      	ldrb	r3, [r3, #18]
 80045cc:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80045ce:	431a      	orrs	r2, r3
                                macconf->Speed |
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 80045d4:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 80045da:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	7f1b      	ldrb	r3, [r3, #28]
 80045e0:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 80045e2:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	7f5b      	ldrb	r3, [r3, #29]
 80045e8:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 80045ea:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 80045ec:	683a      	ldr	r2, [r7, #0]
 80045ee:	7f92      	ldrb	r2, [r2, #30]
 80045f0:	2a00      	cmp	r2, #0
 80045f2:	d102      	bne.n	80045fa <ETH_SetMACConfig+0x92>
 80045f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80045f8:	e000      	b.n	80045fc <ETH_SetMACConfig+0x94>
 80045fa:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 80045fc:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	7fdb      	ldrb	r3, [r3, #31]
 8004602:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8004604:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8004606:	683a      	ldr	r2, [r7, #0]
 8004608:	f892 2020 	ldrb.w	r2, [r2, #32]
 800460c:	2a00      	cmp	r2, #0
 800460e:	d102      	bne.n	8004616 <ETH_SetMACConfig+0xae>
 8004610:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004614:	e000      	b.n	8004618 <ETH_SetMACConfig+0xb0>
 8004616:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8004618:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 800461e:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004626:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8004628:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 800462e:	4313      	orrs	r3, r2
 8004630:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	681a      	ldr	r2, [r3, #0]
 8004638:	4b56      	ldr	r3, [pc, #344]	; (8004794 <ETH_SetMACConfig+0x22c>)
 800463a:	4013      	ands	r3, r2
 800463c:	687a      	ldr	r2, [r7, #4]
 800463e:	6812      	ldr	r2, [r2, #0]
 8004640:	68f9      	ldr	r1, [r7, #12]
 8004642:	430b      	orrs	r3, r1
 8004644:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800464a:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004652:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8004654:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800465c:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 800465e:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004666:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8004668:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 800466a:	683a      	ldr	r2, [r7, #0]
 800466c:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8004670:	2a00      	cmp	r2, #0
 8004672:	d102      	bne.n	800467a <ETH_SetMACConfig+0x112>
 8004674:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004678:	e000      	b.n	800467c <ETH_SetMACConfig+0x114>
 800467a:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 800467c:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8004682:	4313      	orrs	r3, r2
 8004684:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	685a      	ldr	r2, [r3, #4]
 800468c:	4b42      	ldr	r3, [pc, #264]	; (8004798 <ETH_SetMACConfig+0x230>)
 800468e:	4013      	ands	r3, r2
 8004690:	687a      	ldr	r2, [r7, #4]
 8004692:	6812      	ldr	r2, [r2, #0]
 8004694:	68f9      	ldr	r1, [r7, #12]
 8004696:	430b      	orrs	r3, r1
 8004698:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80046a0:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80046a6:	4313      	orrs	r3, r2
 80046a8:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	68da      	ldr	r2, [r3, #12]
 80046b0:	4b3a      	ldr	r3, [pc, #232]	; (800479c <ETH_SetMACConfig+0x234>)
 80046b2:	4013      	ands	r3, r2
 80046b4:	687a      	ldr	r2, [r7, #4]
 80046b6:	6812      	ldr	r2, [r2, #0]
 80046b8:	68f9      	ldr	r1, [r7, #12]
 80046ba:	430b      	orrs	r3, r1
 80046bc:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80046c4:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80046ca:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 80046cc:	683a      	ldr	r2, [r7, #0]
 80046ce:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80046d2:	2a00      	cmp	r2, #0
 80046d4:	d101      	bne.n	80046da <ETH_SetMACConfig+0x172>
 80046d6:	2280      	movs	r2, #128	; 0x80
 80046d8:	e000      	b.n	80046dc <ETH_SetMACConfig+0x174>
 80046da:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80046dc:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046e2:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80046e4:	4313      	orrs	r3, r2
 80046e6:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80046ee:	f64f 730d 	movw	r3, #65293	; 0xff0d
 80046f2:	4013      	ands	r3, r2
 80046f4:	687a      	ldr	r2, [r7, #4]
 80046f6:	6812      	ldr	r2, [r2, #0]
 80046f8:	68f9      	ldr	r1, [r7, #12]
 80046fa:	430b      	orrs	r3, r1
 80046fc:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8004704:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800470c:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800470e:	4313      	orrs	r3, r2
 8004710:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800471a:	f023 0103 	bic.w	r1, r3, #3
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	68fa      	ldr	r2, [r7, #12]
 8004724:	430a      	orrs	r2, r1
 8004726:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8004732:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	430a      	orrs	r2, r1
 8004740:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8004748:	683a      	ldr	r2, [r7, #0]
 800474a:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 800474e:	2a00      	cmp	r2, #0
 8004750:	d101      	bne.n	8004756 <ETH_SetMACConfig+0x1ee>
 8004752:	2240      	movs	r2, #64	; 0x40
 8004754:	e000      	b.n	8004758 <ETH_SetMACConfig+0x1f0>
 8004756:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8004758:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8004760:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8004762:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800476a:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 800476c:	4313      	orrs	r3, r2
 800476e:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8004778:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	68fa      	ldr	r2, [r7, #12]
 8004782:	430a      	orrs	r2, r1
 8004784:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8004788:	bf00      	nop
 800478a:	3714      	adds	r7, #20
 800478c:	46bd      	mov	sp, r7
 800478e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004792:	4770      	bx	lr
 8004794:	00048083 	.word	0x00048083
 8004798:	c0f88000 	.word	0xc0f88000
 800479c:	fffffef0 	.word	0xfffffef0

080047a0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b085      	sub	sp, #20
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
 80047a8:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047b2:	681a      	ldr	r2, [r3, #0]
 80047b4:	4b38      	ldr	r3, [pc, #224]	; (8004898 <ETH_SetDMAConfig+0xf8>)
 80047b6:	4013      	ands	r3, r2
 80047b8:	683a      	ldr	r2, [r7, #0]
 80047ba:	6812      	ldr	r2, [r2, #0]
 80047bc:	6879      	ldr	r1, [r7, #4]
 80047be:	6809      	ldr	r1, [r1, #0]
 80047c0:	431a      	orrs	r2, r3
 80047c2:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 80047c6:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	791b      	ldrb	r3, [r3, #4]
 80047cc:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80047d2:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	7b1b      	ldrb	r3, [r3, #12]
 80047d8:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80047da:	4313      	orrs	r3, r2
 80047dc:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681a      	ldr	r2, [r3, #0]
 80047e2:	f241 0304 	movw	r3, #4100	; 0x1004
 80047e6:	4413      	add	r3, r2
 80047e8:	681a      	ldr	r2, [r3, #0]
 80047ea:	4b2c      	ldr	r3, [pc, #176]	; (800489c <ETH_SetDMAConfig+0xfc>)
 80047ec:	4013      	ands	r3, r2
 80047ee:	687a      	ldr	r2, [r7, #4]
 80047f0:	6811      	ldr	r1, [r2, #0]
 80047f2:	68fa      	ldr	r2, [r7, #12]
 80047f4:	431a      	orrs	r2, r3
 80047f6:	f241 0304 	movw	r3, #4100	; 0x1004
 80047fa:	440b      	add	r3, r1
 80047fc:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	7b5b      	ldrb	r3, [r3, #13]
 8004802:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8004808:	4313      	orrs	r3, r2
 800480a:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8004814:	681a      	ldr	r2, [r3, #0]
 8004816:	4b22      	ldr	r3, [pc, #136]	; (80048a0 <ETH_SetDMAConfig+0x100>)
 8004818:	4013      	ands	r3, r2
 800481a:	687a      	ldr	r2, [r7, #4]
 800481c:	6811      	ldr	r1, [r2, #0]
 800481e:	68fa      	ldr	r2, [r7, #12]
 8004820:	431a      	orrs	r2, r3
 8004822:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 8004826:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	7d1b      	ldrb	r3, [r3, #20]
 8004830:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8004832:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	7f5b      	ldrb	r3, [r3, #29]
 8004838:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800483a:	4313      	orrs	r3, r2
 800483c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681a      	ldr	r2, [r3, #0]
 8004842:	f241 1304 	movw	r3, #4356	; 0x1104
 8004846:	4413      	add	r3, r2
 8004848:	681a      	ldr	r2, [r3, #0]
 800484a:	4b16      	ldr	r3, [pc, #88]	; (80048a4 <ETH_SetDMAConfig+0x104>)
 800484c:	4013      	ands	r3, r2
 800484e:	687a      	ldr	r2, [r7, #4]
 8004850:	6811      	ldr	r1, [r2, #0]
 8004852:	68fa      	ldr	r2, [r7, #12]
 8004854:	431a      	orrs	r2, r3
 8004856:	f241 1304 	movw	r3, #4356	; 0x1104
 800485a:	440b      	add	r3, r1
 800485c:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	7f1b      	ldrb	r3, [r3, #28]
 8004862:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8004868:	4313      	orrs	r3, r2
 800486a:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681a      	ldr	r2, [r3, #0]
 8004870:	f241 1308 	movw	r3, #4360	; 0x1108
 8004874:	4413      	add	r3, r2
 8004876:	681a      	ldr	r2, [r3, #0]
 8004878:	4b0b      	ldr	r3, [pc, #44]	; (80048a8 <ETH_SetDMAConfig+0x108>)
 800487a:	4013      	ands	r3, r2
 800487c:	687a      	ldr	r2, [r7, #4]
 800487e:	6811      	ldr	r1, [r2, #0]
 8004880:	68fa      	ldr	r2, [r7, #12]
 8004882:	431a      	orrs	r2, r3
 8004884:	f241 1308 	movw	r3, #4360	; 0x1108
 8004888:	440b      	add	r3, r1
 800488a:	601a      	str	r2, [r3, #0]
}
 800488c:	bf00      	nop
 800488e:	3714      	adds	r7, #20
 8004890:	46bd      	mov	sp, r7
 8004892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004896:	4770      	bx	lr
 8004898:	ffff87fd 	.word	0xffff87fd
 800489c:	ffff2ffe 	.word	0xffff2ffe
 80048a0:	fffec000 	.word	0xfffec000
 80048a4:	ffc0efef 	.word	0xffc0efef
 80048a8:	7fc0ffff 	.word	0x7fc0ffff

080048ac <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b0a4      	sub	sp, #144	; 0x90
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80048b4:	2301      	movs	r3, #1
 80048b6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80048ba:	2300      	movs	r3, #0
 80048bc:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80048be:	2300      	movs	r3, #0
 80048c0:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80048c4:	2300      	movs	r3, #0
 80048c6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 80048ca:	2301      	movs	r3, #1
 80048cc:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80048d0:	2301      	movs	r3, #1
 80048d2:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80048d6:	2301      	movs	r3, #1
 80048d8:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 80048dc:	2300      	movs	r3, #0
 80048de:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80048e2:	2301      	movs	r3, #1
 80048e4:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80048e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80048ec:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80048ee:	2300      	movs	r3, #0
 80048f0:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 80048f4:	2300      	movs	r3, #0
 80048f6:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80048f8:	2300      	movs	r3, #0
 80048fa:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80048fe:	2300      	movs	r3, #0
 8004900:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8004904:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8004908:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800490a:	2300      	movs	r3, #0
 800490c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8004910:	2300      	movs	r3, #0
 8004912:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8004914:	2301      	movs	r3, #1
 8004916:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800491a:	2300      	movs	r3, #0
 800491c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8004920:	2300      	movs	r3, #0
 8004922:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8004926:	2300      	movs	r3, #0
 8004928:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 800492a:	2300      	movs	r3, #0
 800492c:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800492e:	2300      	movs	r3, #0
 8004930:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8004932:	2300      	movs	r3, #0
 8004934:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8004938:	2300      	movs	r3, #0
 800493a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800493e:	2301      	movs	r3, #1
 8004940:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8004944:	2320      	movs	r3, #32
 8004946:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800494a:	2301      	movs	r3, #1
 800494c:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8004950:	2300      	movs	r3, #0
 8004952:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8004956:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 800495a:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 800495c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004960:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8004962:	2300      	movs	r3, #0
 8004964:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8004968:	2302      	movs	r3, #2
 800496a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 800496e:	2300      	movs	r3, #0
 8004970:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8004974:	2300      	movs	r3, #0
 8004976:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800497a:	2300      	movs	r3, #0
 800497c:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8004980:	2301      	movs	r3, #1
 8004982:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8004986:	2300      	movs	r3, #0
 8004988:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800498a:	2301      	movs	r3, #1
 800498c:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8004990:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004994:	4619      	mov	r1, r3
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f7ff fde6 	bl	8004568 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800499c:	2301      	movs	r3, #1
 800499e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80049a0:	2301      	movs	r3, #1
 80049a2:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80049a4:	2300      	movs	r3, #0
 80049a6:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80049a8:	2300      	movs	r3, #0
 80049aa:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 80049ae:	2300      	movs	r3, #0
 80049b0:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80049b2:	2300      	movs	r3, #0
 80049b4:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80049b6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80049ba:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80049bc:	2300      	movs	r3, #0
 80049be:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80049c0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80049c4:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 80049c6:	2300      	movs	r3, #0
 80049c8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 80049cc:	f44f 7306 	mov.w	r3, #536	; 0x218
 80049d0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80049d2:	f107 0308 	add.w	r3, r7, #8
 80049d6:	4619      	mov	r1, r3
 80049d8:	6878      	ldr	r0, [r7, #4]
 80049da:	f7ff fee1 	bl	80047a0 <ETH_SetDMAConfig>
}
 80049de:	bf00      	nop
 80049e0:	3790      	adds	r7, #144	; 0x90
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}
	...

080049e8 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b084      	sub	sp, #16
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80049f8:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004a00:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8004a02:	f001 fcfb 	bl	80063fc <HAL_RCC_GetHCLKFreq>
 8004a06:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	4a1e      	ldr	r2, [pc, #120]	; (8004a84 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d908      	bls.n	8004a22 <ETH_MAC_MDIO_ClkConfig+0x3a>
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	4a1d      	ldr	r2, [pc, #116]	; (8004a88 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d804      	bhi.n	8004a22 <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004a1e:	60fb      	str	r3, [r7, #12]
 8004a20:	e027      	b.n	8004a72 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	4a18      	ldr	r2, [pc, #96]	; (8004a88 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d908      	bls.n	8004a3c <ETH_MAC_MDIO_ClkConfig+0x54>
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	4a17      	ldr	r2, [pc, #92]	; (8004a8c <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d204      	bcs.n	8004a3c <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8004a38:	60fb      	str	r3, [r7, #12]
 8004a3a:	e01a      	b.n	8004a72 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	4a13      	ldr	r2, [pc, #76]	; (8004a8c <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d303      	bcc.n	8004a4c <ETH_MAC_MDIO_ClkConfig+0x64>
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	4a12      	ldr	r2, [pc, #72]	; (8004a90 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d911      	bls.n	8004a70 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	4a10      	ldr	r2, [pc, #64]	; (8004a90 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d908      	bls.n	8004a66 <ETH_MAC_MDIO_ClkConfig+0x7e>
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	4a0f      	ldr	r2, [pc, #60]	; (8004a94 <ETH_MAC_MDIO_ClkConfig+0xac>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d804      	bhi.n	8004a66 <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a62:	60fb      	str	r3, [r7, #12]
 8004a64:	e005      	b.n	8004a72 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004a6c:	60fb      	str	r3, [r7, #12]
 8004a6e:	e000      	b.n	8004a72 <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8004a70:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	68fa      	ldr	r2, [r7, #12]
 8004a78:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8004a7c:	bf00      	nop
 8004a7e:	3710      	adds	r7, #16
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bd80      	pop	{r7, pc}
 8004a84:	01312cff 	.word	0x01312cff
 8004a88:	02160ebf 	.word	0x02160ebf
 8004a8c:	03938700 	.word	0x03938700
 8004a90:	05f5e0ff 	.word	0x05f5e0ff
 8004a94:	08f0d17f 	.word	0x08f0d17f

08004a98 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b085      	sub	sp, #20
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	60fb      	str	r3, [r7, #12]
 8004aa4:	e01d      	b.n	8004ae2 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	68d9      	ldr	r1, [r3, #12]
 8004aaa:	68fa      	ldr	r2, [r7, #12]
 8004aac:	4613      	mov	r3, r2
 8004aae:	005b      	lsls	r3, r3, #1
 8004ab0:	4413      	add	r3, r2
 8004ab2:	00db      	lsls	r3, r3, #3
 8004ab4:	440b      	add	r3, r1
 8004ab6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	2200      	movs	r2, #0
 8004abc:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	2200      	movs	r2, #0
 8004ace:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8004ad0:	68b9      	ldr	r1, [r7, #8]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	68fa      	ldr	r2, [r7, #12]
 8004ad6:	3206      	adds	r2, #6
 8004ad8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	3301      	adds	r3, #1
 8004ae0:	60fb      	str	r3, [r7, #12]
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	2b03      	cmp	r3, #3
 8004ae6:	d9de      	bls.n	8004aa6 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2200      	movs	r2, #0
 8004aec:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681a      	ldr	r2, [r3, #0]
 8004af2:	f241 132c 	movw	r3, #4396	; 0x112c
 8004af6:	4413      	add	r3, r2
 8004af8:	2203      	movs	r2, #3
 8004afa:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	68d9      	ldr	r1, [r3, #12]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681a      	ldr	r2, [r3, #0]
 8004b04:	f241 1314 	movw	r3, #4372	; 0x1114
 8004b08:	4413      	add	r3, r2
 8004b0a:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	68da      	ldr	r2, [r3, #12]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8004b18:	601a      	str	r2, [r3, #0]
}
 8004b1a:	bf00      	nop
 8004b1c:	3714      	adds	r7, #20
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b24:	4770      	bx	lr

08004b26 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8004b26:	b480      	push	{r7}
 8004b28:	b085      	sub	sp, #20
 8004b2a:	af00      	add	r7, sp, #0
 8004b2c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004b2e:	2300      	movs	r3, #0
 8004b30:	60fb      	str	r3, [r7, #12]
 8004b32:	e024      	b.n	8004b7e <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6919      	ldr	r1, [r3, #16]
 8004b38:	68fa      	ldr	r2, [r7, #12]
 8004b3a:	4613      	mov	r3, r2
 8004b3c:	005b      	lsls	r3, r3, #1
 8004b3e:	4413      	add	r3, r2
 8004b40:	00db      	lsls	r3, r3, #3
 8004b42:	440b      	add	r3, r1
 8004b44:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	2200      	movs	r2, #0
 8004b56:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	2200      	movs	r2, #0
 8004b62:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	2200      	movs	r2, #0
 8004b68:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8004b6a:	68ba      	ldr	r2, [r7, #8]
 8004b6c:	6879      	ldr	r1, [r7, #4]
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	3310      	adds	r3, #16
 8004b72:	009b      	lsls	r3, r3, #2
 8004b74:	440b      	add	r3, r1
 8004b76:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	3301      	adds	r3, #1
 8004b7c:	60fb      	str	r3, [r7, #12]
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	2b03      	cmp	r3, #3
 8004b82:	d9d7      	bls.n	8004b34 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2200      	movs	r2, #0
 8004b88:	655a      	str	r2, [r3, #84]	; 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	659a      	str	r2, [r3, #88]	; 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2200      	movs	r2, #0
 8004b94:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	665a      	str	r2, [r3, #100]	; 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681a      	ldr	r2, [r3, #0]
 8004ba6:	f241 1330 	movw	r3, #4400	; 0x1130
 8004baa:	4413      	add	r3, r2
 8004bac:	2203      	movs	r2, #3
 8004bae:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6919      	ldr	r1, [r3, #16]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681a      	ldr	r2, [r3, #0]
 8004bb8:	f241 131c 	movw	r3, #4380	; 0x111c
 8004bbc:	4413      	add	r3, r2
 8004bbe:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	691b      	ldr	r3, [r3, #16]
 8004bc4:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681a      	ldr	r2, [r3, #0]
 8004bcc:	f241 1328 	movw	r3, #4392	; 0x1128
 8004bd0:	4413      	add	r3, r2
 8004bd2:	6019      	str	r1, [r3, #0]
}
 8004bd4:	bf00      	nop
 8004bd6:	3714      	adds	r7, #20
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bde:	4770      	bx	lr

08004be0 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8004be0:	b480      	push	{r7}
 8004be2:	b08d      	sub	sp, #52	; 0x34
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	60f8      	str	r0, [r7, #12]
 8004be8:	60b9      	str	r1, [r7, #8]
 8004bea:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	3318      	adds	r3, #24
 8004bf0:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8004bf2:	697b      	ldr	r3, [r7, #20]
 8004bf4:	691b      	ldr	r3, [r3, #16]
 8004bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8004bf8:	697b      	ldr	r3, [r7, #20]
 8004bfa:	691b      	ldr	r3, [r3, #16]
 8004bfc:	613b      	str	r3, [r7, #16]
  uint32_t descnbr = 0, idx;
 8004bfe:	2300      	movs	r3, #0
 8004c00:	62bb      	str	r3, [r7, #40]	; 0x28
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c0a:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8004c0c:	68bb      	ldr	r3, [r7, #8]
 8004c0e:	689b      	ldr	r3, [r3, #8]
 8004c10:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8004c12:	2300      	movs	r3, #0
 8004c14:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN) || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8004c16:	6a3b      	ldr	r3, [r7, #32]
 8004c18:	68db      	ldr	r3, [r3, #12]
 8004c1a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004c1e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c22:	d007      	beq.n	8004c34 <ETH_Prepare_Tx_Descriptors+0x54>
 8004c24:	697a      	ldr	r2, [r7, #20]
 8004c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c28:	3304      	adds	r3, #4
 8004c2a:	009b      	lsls	r3, r3, #2
 8004c2c:	4413      	add	r3, r2
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d001      	beq.n	8004c38 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8004c34:	2302      	movs	r3, #2
 8004c36:	e24a      	b.n	80050ce <ETH_Prepare_Tx_Descriptors+0x4ee>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f003 0304 	and.w	r3, r3, #4
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d044      	beq.n	8004cce <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 8004c44:	6a3b      	ldr	r3, [r7, #32]
 8004c46:	68da      	ldr	r2, [r3, #12]
 8004c48:	4b72      	ldr	r3, [pc, #456]	; (8004e14 <ETH_Prepare_Tx_Descriptors+0x234>)
 8004c4a:	4013      	ands	r3, r2
 8004c4c:	68ba      	ldr	r2, [r7, #8]
 8004c4e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004c50:	431a      	orrs	r2, r3
 8004c52:	6a3b      	ldr	r3, [r7, #32]
 8004c54:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 8004c56:	6a3b      	ldr	r3, [r7, #32]
 8004c58:	68db      	ldr	r3, [r3, #12]
 8004c5a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004c5e:	6a3b      	ldr	r3, [r7, #32]
 8004c60:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004c70:	661a      	str	r2, [r3, #96]	; 0x60

    /* if inner VLAN is enabled */
    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != 0U)
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f003 0308 	and.w	r3, r3, #8
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d027      	beq.n	8004cce <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 8004c7e:	6a3b      	ldr	r3, [r7, #32]
 8004c80:	689b      	ldr	r3, [r3, #8]
 8004c82:	b29a      	uxth	r2, r3
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c88:	041b      	lsls	r3, r3, #16
 8004c8a:	431a      	orrs	r2, r3
 8004c8c:	6a3b      	ldr	r3, [r7, #32]
 8004c8e:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 8004c90:	6a3b      	ldr	r3, [r7, #32]
 8004c92:	68db      	ldr	r3, [r3, #12]
 8004c94:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004c98:	6a3b      	ldr	r3, [r7, #32]
 8004c9a:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 8004c9c:	6a3b      	ldr	r3, [r7, #32]
 8004c9e:	68db      	ldr	r3, [r3, #12]
 8004ca0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ca8:	431a      	orrs	r2, r3
 8004caa:	6a3b      	ldr	r3, [r7, #32]
 8004cac:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004cbc:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8004ccc:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f003 0310 	and.w	r3, r3, #16
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d00e      	beq.n	8004cf8 <ETH_Prepare_Tx_Descriptors+0x118>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 8004cda:	6a3b      	ldr	r3, [r7, #32]
 8004cdc:	689a      	ldr	r2, [r3, #8]
 8004cde:	4b4e      	ldr	r3, [pc, #312]	; (8004e18 <ETH_Prepare_Tx_Descriptors+0x238>)
 8004ce0:	4013      	ands	r3, r2
 8004ce2:	68ba      	ldr	r2, [r7, #8]
 8004ce4:	6992      	ldr	r2, [r2, #24]
 8004ce6:	431a      	orrs	r2, r3
 8004ce8:	6a3b      	ldr	r3, [r7, #32]
 8004cea:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 8004cec:	6a3b      	ldr	r3, [r7, #32]
 8004cee:	68db      	ldr	r3, [r3, #12]
 8004cf0:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8004cf4:	6a3b      	ldr	r3, [r7, #32]
 8004cf6:	60da      	str	r2, [r3, #12]
  }

  if((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)|| (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U))
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f003 0304 	and.w	r3, r3, #4
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d105      	bne.n	8004d10 <ETH_Prepare_Tx_Descriptors+0x130>
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f003 0310 	and.w	r3, r3, #16
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d030      	beq.n	8004d72 <ETH_Prepare_Tx_Descriptors+0x192>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 8004d10:	6a3b      	ldr	r3, [r7, #32]
 8004d12:	68db      	ldr	r3, [r3, #12]
 8004d14:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004d18:	6a3b      	ldr	r3, [r7, #32]
 8004d1a:	60da      	str	r2, [r3, #12]
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8004d1c:	6a3b      	ldr	r3, [r7, #32]
 8004d1e:	68db      	ldr	r3, [r3, #12]
 8004d20:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004d24:	6a3b      	ldr	r3, [r7, #32]
 8004d26:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8004d28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d2a:	3301      	adds	r3, #1
 8004d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d30:	2b03      	cmp	r3, #3
 8004d32:	d902      	bls.n	8004d3a <ETH_Prepare_Tx_Descriptors+0x15a>
 8004d34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d36:	3b04      	subs	r3, #4
 8004d38:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d42:	623b      	str	r3, [r7, #32]

    descnbr += 1U;
 8004d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d46:	3301      	adds	r3, #1
 8004d48:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if(READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8004d4a:	6a3b      	ldr	r3, [r7, #32]
 8004d4c:	68db      	ldr	r3, [r3, #12]
 8004d4e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004d52:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d56:	d10c      	bne.n	8004d72 <ETH_Prepare_Tx_Descriptors+0x192>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	693a      	ldr	r2, [r7, #16]
 8004d5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d60:	623b      	str	r3, [r7, #32]
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8004d62:	6a3b      	ldr	r3, [r7, #32]
 8004d64:	68db      	ldr	r3, [r3, #12]
 8004d66:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004d6a:	6a3b      	ldr	r3, [r7, #32]
 8004d6c:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 8004d6e:	2302      	movs	r3, #2
 8004d70:	e1ad      	b.n	80050ce <ETH_Prepare_Tx_Descriptors+0x4ee>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 8004d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d74:	3301      	adds	r3, #1
 8004d76:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8004d78:	69fb      	ldr	r3, [r7, #28]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	461a      	mov	r2, r3
 8004d7e:	6a3b      	ldr	r3, [r7, #32]
 8004d80:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8004d82:	6a3b      	ldr	r3, [r7, #32]
 8004d84:	689a      	ldr	r2, [r3, #8]
 8004d86:	4b24      	ldr	r3, [pc, #144]	; (8004e18 <ETH_Prepare_Tx_Descriptors+0x238>)
 8004d88:	4013      	ands	r3, r2
 8004d8a:	69fa      	ldr	r2, [r7, #28]
 8004d8c:	6852      	ldr	r2, [r2, #4]
 8004d8e:	431a      	orrs	r2, r3
 8004d90:	6a3b      	ldr	r3, [r7, #32]
 8004d92:	609a      	str	r2, [r3, #8]

  if(txbuffer->next != NULL)
 8004d94:	69fb      	ldr	r3, [r7, #28]
 8004d96:	689b      	ldr	r3, [r3, #8]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d012      	beq.n	8004dc2 <ETH_Prepare_Tx_Descriptors+0x1e2>
  {
    txbuffer = txbuffer->next;
 8004d9c:	69fb      	ldr	r3, [r7, #28]
 8004d9e:	689b      	ldr	r3, [r3, #8]
 8004da0:	61fb      	str	r3, [r7, #28]
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8004da2:	69fb      	ldr	r3, [r7, #28]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	461a      	mov	r2, r3
 8004da8:	6a3b      	ldr	r3, [r7, #32]
 8004daa:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8004dac:	6a3b      	ldr	r3, [r7, #32]
 8004dae:	689a      	ldr	r2, [r3, #8]
 8004db0:	4b1a      	ldr	r3, [pc, #104]	; (8004e1c <ETH_Prepare_Tx_Descriptors+0x23c>)
 8004db2:	4013      	ands	r3, r2
 8004db4:	69fa      	ldr	r2, [r7, #28]
 8004db6:	6852      	ldr	r2, [r2, #4]
 8004db8:	0412      	lsls	r2, r2, #16
 8004dba:	431a      	orrs	r2, r3
 8004dbc:	6a3b      	ldr	r3, [r7, #32]
 8004dbe:	609a      	str	r2, [r3, #8]
 8004dc0:	e008      	b.n	8004dd4 <ETH_Prepare_Tx_Descriptors+0x1f4>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8004dc2:	6a3b      	ldr	r3, [r7, #32]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8004dc8:	6a3b      	ldr	r3, [r7, #32]
 8004dca:	689a      	ldr	r2, [r3, #8]
 8004dcc:	4b13      	ldr	r3, [pc, #76]	; (8004e1c <ETH_Prepare_Tx_Descriptors+0x23c>)
 8004dce:	4013      	ands	r3, r2
 8004dd0:	6a3a      	ldr	r2, [r7, #32]
 8004dd2:	6093      	str	r3, [r2, #8]
  }

  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f003 0310 	and.w	r3, r3, #16
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d021      	beq.n	8004e24 <ETH_Prepare_Tx_Descriptors+0x244>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 8004de0:	6a3b      	ldr	r3, [r7, #32]
 8004de2:	68db      	ldr	r3, [r3, #12]
 8004de4:	f423 02f0 	bic.w	r2, r3, #7864320	; 0x780000
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	6a1b      	ldr	r3, [r3, #32]
 8004dec:	04db      	lsls	r3, r3, #19
 8004dee:	431a      	orrs	r2, r3
 8004df0:	6a3b      	ldr	r3, [r7, #32]
 8004df2:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8004df4:	6a3b      	ldr	r3, [r7, #32]
 8004df6:	68da      	ldr	r2, [r3, #12]
 8004df8:	4b09      	ldr	r3, [pc, #36]	; (8004e20 <ETH_Prepare_Tx_Descriptors+0x240>)
 8004dfa:	4013      	ands	r3, r2
 8004dfc:	68ba      	ldr	r2, [r7, #8]
 8004dfe:	69d2      	ldr	r2, [r2, #28]
 8004e00:	431a      	orrs	r2, r3
 8004e02:	6a3b      	ldr	r3, [r7, #32]
 8004e04:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8004e06:	6a3b      	ldr	r3, [r7, #32]
 8004e08:	68db      	ldr	r3, [r3, #12]
 8004e0a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004e0e:	6a3b      	ldr	r3, [r7, #32]
 8004e10:	60da      	str	r2, [r3, #12]
 8004e12:	e02e      	b.n	8004e72 <ETH_Prepare_Tx_Descriptors+0x292>
 8004e14:	ffff0000 	.word	0xffff0000
 8004e18:	ffffc000 	.word	0xffffc000
 8004e1c:	c000ffff 	.word	0xc000ffff
 8004e20:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8004e24:	6a3b      	ldr	r3, [r7, #32]
 8004e26:	68da      	ldr	r2, [r3, #12]
 8004e28:	4b93      	ldr	r3, [pc, #588]	; (8005078 <ETH_Prepare_Tx_Descriptors+0x498>)
 8004e2a:	4013      	ands	r3, r2
 8004e2c:	68ba      	ldr	r2, [r7, #8]
 8004e2e:	6852      	ldr	r2, [r2, #4]
 8004e30:	431a      	orrs	r2, r3
 8004e32:	6a3b      	ldr	r3, [r7, #32]
 8004e34:	60da      	str	r2, [r3, #12]

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f003 0301 	and.w	r3, r3, #1
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d008      	beq.n	8004e54 <ETH_Prepare_Tx_Descriptors+0x274>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8004e42:	6a3b      	ldr	r3, [r7, #32]
 8004e44:	68db      	ldr	r3, [r3, #12]
 8004e46:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	695b      	ldr	r3, [r3, #20]
 8004e4e:	431a      	orrs	r2, r3
 8004e50:	6a3b      	ldr	r3, [r7, #32]
 8004e52:	60da      	str	r2, [r3, #12]
    }

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f003 0320 	and.w	r3, r3, #32
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d008      	beq.n	8004e72 <ETH_Prepare_Tx_Descriptors+0x292>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 8004e60:	6a3b      	ldr	r3, [r7, #32]
 8004e62:	68db      	ldr	r3, [r3, #12]
 8004e64:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	691b      	ldr	r3, [r3, #16]
 8004e6c:	431a      	orrs	r2, r3
 8004e6e:	6a3b      	ldr	r3, [r7, #32]
 8004e70:	60da      	str	r2, [r3, #12]
    }
  }

  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f003 0304 	and.w	r3, r3, #4
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d008      	beq.n	8004e90 <ETH_Prepare_Tx_Descriptors+0x2b0>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 8004e7e:	6a3b      	ldr	r3, [r7, #32]
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004e86:	68bb      	ldr	r3, [r7, #8]
 8004e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e8a:	431a      	orrs	r2, r3
 8004e8c:	6a3b      	ldr	r3, [r7, #32]
 8004e8e:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8004e90:	6a3b      	ldr	r3, [r7, #32]
 8004e92:	68db      	ldr	r3, [r3, #12]
 8004e94:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004e98:	6a3b      	ldr	r3, [r7, #32]
 8004e9a:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8004e9c:	6a3b      	ldr	r3, [r7, #32]
 8004e9e:	68db      	ldr	r3, [r3, #12]
 8004ea0:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004ea4:	6a3b      	ldr	r3, [r7, #32]
 8004ea6:	60da      	str	r2, [r3, #12]
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8004ea8:	6a3b      	ldr	r3, [r7, #32]
 8004eaa:	68db      	ldr	r3, [r3, #12]
 8004eac:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004eb0:	6a3b      	ldr	r3, [r7, #32]
 8004eb2:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != 0U)
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f003 0302 	and.w	r3, r3, #2
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	f000 80cb 	beq.w	8005058 <ETH_Prepare_Tx_Descriptors+0x478>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 8004ec2:	6a3b      	ldr	r3, [r7, #32]
 8004ec4:	68db      	ldr	r3, [r3, #12]
 8004ec6:	f023 7260 	bic.w	r2, r3, #58720256	; 0x3800000
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	68db      	ldr	r3, [r3, #12]
 8004ece:	431a      	orrs	r2, r3
 8004ed0:	6a3b      	ldr	r3, [r7, #32]
 8004ed2:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8004ed4:	e0c0      	b.n	8005058 <ETH_Prepare_Tx_Descriptors+0x478>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8004ed6:	6a3b      	ldr	r3, [r7, #32]
 8004ed8:	68db      	ldr	r3, [r3, #12]
 8004eda:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004ede:	6a3b      	ldr	r3, [r7, #32]
 8004ee0:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8004ee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ee4:	3301      	adds	r3, #1
 8004ee6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eea:	2b03      	cmp	r3, #3
 8004eec:	d902      	bls.n	8004ef4 <ETH_Prepare_Tx_Descriptors+0x314>
 8004eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ef0:	3b04      	subs	r3, #4
 8004ef2:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ef8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004efc:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8004efe:	6a3b      	ldr	r3, [r7, #32]
 8004f00:	68db      	ldr	r3, [r3, #12]
 8004f02:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004f06:	6a3b      	ldr	r3, [r7, #32]
 8004f08:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN) || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8004f0a:	6a3b      	ldr	r3, [r7, #32]
 8004f0c:	68db      	ldr	r3, [r3, #12]
 8004f0e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004f12:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f16:	d007      	beq.n	8004f28 <ETH_Prepare_Tx_Descriptors+0x348>
 8004f18:	697a      	ldr	r2, [r7, #20]
 8004f1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f1c:	3304      	adds	r3, #4
 8004f1e:	009b      	lsls	r3, r3, #2
 8004f20:	4413      	add	r3, r2
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d026      	beq.n	8004f76 <ETH_Prepare_Tx_Descriptors+0x396>
    {
      descidx = firstdescidx;
 8004f28:	693b      	ldr	r3, [r7, #16]
 8004f2a:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004f2c:	697b      	ldr	r3, [r7, #20]
 8004f2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f34:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for(idx = 0; idx < descnbr; idx ++)
 8004f36:	2300      	movs	r3, #0
 8004f38:	627b      	str	r3, [r7, #36]	; 0x24
 8004f3a:	e016      	b.n	8004f6a <ETH_Prepare_Tx_Descriptors+0x38a>
      {
        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8004f3c:	6a3b      	ldr	r3, [r7, #32]
 8004f3e:	68db      	ldr	r3, [r3, #12]
 8004f40:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004f44:	6a3b      	ldr	r3, [r7, #32]
 8004f46:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8004f48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f4a:	3301      	adds	r3, #1
 8004f4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f50:	2b03      	cmp	r3, #3
 8004f52:	d902      	bls.n	8004f5a <ETH_Prepare_Tx_Descriptors+0x37a>
 8004f54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f56:	3b04      	subs	r3, #4
 8004f58:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f62:	623b      	str	r3, [r7, #32]
      for(idx = 0; idx < descnbr; idx ++)
 8004f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f66:	3301      	adds	r3, #1
 8004f68:	627b      	str	r3, [r7, #36]	; 0x24
 8004f6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f6e:	429a      	cmp	r2, r3
 8004f70:	d3e4      	bcc.n	8004f3c <ETH_Prepare_Tx_Descriptors+0x35c>
      }

      return HAL_ETH_ERROR_BUSY;
 8004f72:	2302      	movs	r3, #2
 8004f74:	e0ab      	b.n	80050ce <ETH_Prepare_Tx_Descriptors+0x4ee>
    }

    descnbr += 1U;
 8004f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f78:	3301      	adds	r3, #1
 8004f7a:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8004f7c:	69fb      	ldr	r3, [r7, #28]
 8004f7e:	689b      	ldr	r3, [r3, #8]
 8004f80:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8004f82:	69fb      	ldr	r3, [r7, #28]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	461a      	mov	r2, r3
 8004f88:	6a3b      	ldr	r3, [r7, #32]
 8004f8a:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8004f8c:	6a3b      	ldr	r3, [r7, #32]
 8004f8e:	689a      	ldr	r2, [r3, #8]
 8004f90:	4b3a      	ldr	r3, [pc, #232]	; (800507c <ETH_Prepare_Tx_Descriptors+0x49c>)
 8004f92:	4013      	ands	r3, r2
 8004f94:	69fa      	ldr	r2, [r7, #28]
 8004f96:	6852      	ldr	r2, [r2, #4]
 8004f98:	431a      	orrs	r2, r3
 8004f9a:	6a3b      	ldr	r3, [r7, #32]
 8004f9c:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 8004f9e:	69fb      	ldr	r3, [r7, #28]
 8004fa0:	689b      	ldr	r3, [r3, #8]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d012      	beq.n	8004fcc <ETH_Prepare_Tx_Descriptors+0x3ec>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 8004fa6:	69fb      	ldr	r3, [r7, #28]
 8004fa8:	689b      	ldr	r3, [r3, #8]
 8004faa:	61fb      	str	r3, [r7, #28]
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8004fac:	69fb      	ldr	r3, [r7, #28]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	461a      	mov	r2, r3
 8004fb2:	6a3b      	ldr	r3, [r7, #32]
 8004fb4:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8004fb6:	6a3b      	ldr	r3, [r7, #32]
 8004fb8:	689a      	ldr	r2, [r3, #8]
 8004fba:	4b31      	ldr	r3, [pc, #196]	; (8005080 <ETH_Prepare_Tx_Descriptors+0x4a0>)
 8004fbc:	4013      	ands	r3, r2
 8004fbe:	69fa      	ldr	r2, [r7, #28]
 8004fc0:	6852      	ldr	r2, [r2, #4]
 8004fc2:	0412      	lsls	r2, r2, #16
 8004fc4:	431a      	orrs	r2, r3
 8004fc6:	6a3b      	ldr	r3, [r7, #32]
 8004fc8:	609a      	str	r2, [r3, #8]
 8004fca:	e008      	b.n	8004fde <ETH_Prepare_Tx_Descriptors+0x3fe>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0);
 8004fcc:	6a3b      	ldr	r3, [r7, #32]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8004fd2:	6a3b      	ldr	r3, [r7, #32]
 8004fd4:	689a      	ldr	r2, [r3, #8]
 8004fd6:	4b2a      	ldr	r3, [pc, #168]	; (8005080 <ETH_Prepare_Tx_Descriptors+0x4a0>)
 8004fd8:	4013      	ands	r3, r2
 8004fda:	6a3a      	ldr	r2, [r7, #32]
 8004fdc:	6093      	str	r3, [r2, #8]
    }

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f003 0310 	and.w	r3, r3, #16
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d00f      	beq.n	800500a <ETH_Prepare_Tx_Descriptors+0x42a>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8004fea:	6a3b      	ldr	r3, [r7, #32]
 8004fec:	68da      	ldr	r2, [r3, #12]
 8004fee:	4b25      	ldr	r3, [pc, #148]	; (8005084 <ETH_Prepare_Tx_Descriptors+0x4a4>)
 8004ff0:	4013      	ands	r3, r2
 8004ff2:	68ba      	ldr	r2, [r7, #8]
 8004ff4:	69d2      	ldr	r2, [r2, #28]
 8004ff6:	431a      	orrs	r2, r3
 8004ff8:	6a3b      	ldr	r3, [r7, #32]
 8004ffa:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8004ffc:	6a3b      	ldr	r3, [r7, #32]
 8004ffe:	68db      	ldr	r3, [r3, #12]
 8005000:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005004:	6a3b      	ldr	r3, [r7, #32]
 8005006:	60da      	str	r2, [r3, #12]
 8005008:	e017      	b.n	800503a <ETH_Prepare_Tx_Descriptors+0x45a>
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 800500a:	6a3b      	ldr	r3, [r7, #32]
 800500c:	68da      	ldr	r2, [r3, #12]
 800500e:	4b1a      	ldr	r3, [pc, #104]	; (8005078 <ETH_Prepare_Tx_Descriptors+0x498>)
 8005010:	4013      	ands	r3, r2
 8005012:	68ba      	ldr	r2, [r7, #8]
 8005014:	6852      	ldr	r2, [r2, #4]
 8005016:	431a      	orrs	r2, r3
 8005018:	6a3b      	ldr	r3, [r7, #32]
 800501a:	60da      	str	r2, [r3, #12]

      if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f003 0301 	and.w	r3, r3, #1
 8005024:	2b00      	cmp	r3, #0
 8005026:	d008      	beq.n	800503a <ETH_Prepare_Tx_Descriptors+0x45a>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8005028:	6a3b      	ldr	r3, [r7, #32]
 800502a:	68db      	ldr	r3, [r3, #12]
 800502c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	695b      	ldr	r3, [r3, #20]
 8005034:	431a      	orrs	r2, r3
 8005036:	6a3b      	ldr	r3, [r7, #32]
 8005038:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 800503a:	69bb      	ldr	r3, [r7, #24]
 800503c:	3301      	adds	r3, #1
 800503e:	61bb      	str	r3, [r7, #24]
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8005040:	6a3b      	ldr	r3, [r7, #32]
 8005042:	68db      	ldr	r3, [r3, #12]
 8005044:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005048:	6a3b      	ldr	r3, [r7, #32]
 800504a:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 800504c:	6a3b      	ldr	r3, [r7, #32]
 800504e:	68db      	ldr	r3, [r3, #12]
 8005050:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005054:	6a3b      	ldr	r3, [r7, #32]
 8005056:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 8005058:	69fb      	ldr	r3, [r7, #28]
 800505a:	689b      	ldr	r3, [r3, #8]
 800505c:	2b00      	cmp	r3, #0
 800505e:	f47f af3a 	bne.w	8004ed6 <ETH_Prepare_Tx_Descriptors+0x2f6>
  }

  if(ItMode != ((uint32_t)RESET))
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d00f      	beq.n	8005088 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8005068:	6a3b      	ldr	r3, [r7, #32]
 800506a:	689b      	ldr	r3, [r3, #8]
 800506c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005070:	6a3b      	ldr	r3, [r7, #32]
 8005072:	609a      	str	r2, [r3, #8]
 8005074:	e00e      	b.n	8005094 <ETH_Prepare_Tx_Descriptors+0x4b4>
 8005076:	bf00      	nop
 8005078:	ffff8000 	.word	0xffff8000
 800507c:	ffffc000 	.word	0xffffc000
 8005080:	c000ffff 	.word	0xc000ffff
 8005084:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8005088:	6a3b      	ldr	r3, [r7, #32]
 800508a:	689b      	ldr	r3, [r3, #8]
 800508c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005090:	6a3b      	ldr	r3, [r7, #32]
 8005092:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8005094:	6a3b      	ldr	r3, [r7, #32]
 8005096:	68db      	ldr	r3, [r3, #12]
 8005098:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800509c:	6a3b      	ldr	r3, [r7, #32]
 800509e:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 80050a0:	697b      	ldr	r3, [r7, #20]
 80050a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80050a4:	6979      	ldr	r1, [r7, #20]
 80050a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050a8:	3304      	adds	r3, #4
 80050aa:	009b      	lsls	r3, r3, #2
 80050ac:	440b      	add	r3, r1
 80050ae:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 80050b0:	697b      	ldr	r3, [r7, #20]
 80050b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80050b4:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80050b6:	b672      	cpsid	i
}
 80050b8:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80050be:	69bb      	ldr	r3, [r7, #24]
 80050c0:	4413      	add	r3, r2
 80050c2:	1c5a      	adds	r2, r3, #1
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 80050c8:	b662      	cpsie	i
}
 80050ca:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 80050cc:	2300      	movs	r3, #0
}
 80050ce:	4618      	mov	r0, r3
 80050d0:	3734      	adds	r7, #52	; 0x34
 80050d2:	46bd      	mov	sp, r7
 80050d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d8:	4770      	bx	lr
 80050da:	bf00      	nop

080050dc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80050dc:	b480      	push	{r7}
 80050de:	b089      	sub	sp, #36	; 0x24
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
 80050e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80050e6:	2300      	movs	r3, #0
 80050e8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80050ea:	4b89      	ldr	r3, [pc, #548]	; (8005310 <HAL_GPIO_Init+0x234>)
 80050ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80050ee:	e194      	b.n	800541a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	681a      	ldr	r2, [r3, #0]
 80050f4:	2101      	movs	r1, #1
 80050f6:	69fb      	ldr	r3, [r7, #28]
 80050f8:	fa01 f303 	lsl.w	r3, r1, r3
 80050fc:	4013      	ands	r3, r2
 80050fe:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005100:	693b      	ldr	r3, [r7, #16]
 8005102:	2b00      	cmp	r3, #0
 8005104:	f000 8186 	beq.w	8005414 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	2b01      	cmp	r3, #1
 800510e:	d00b      	beq.n	8005128 <HAL_GPIO_Init+0x4c>
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	2b02      	cmp	r3, #2
 8005116:	d007      	beq.n	8005128 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800511c:	2b11      	cmp	r3, #17
 800511e:	d003      	beq.n	8005128 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	2b12      	cmp	r3, #18
 8005126:	d130      	bne.n	800518a <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	689b      	ldr	r3, [r3, #8]
 800512c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800512e:	69fb      	ldr	r3, [r7, #28]
 8005130:	005b      	lsls	r3, r3, #1
 8005132:	2203      	movs	r2, #3
 8005134:	fa02 f303 	lsl.w	r3, r2, r3
 8005138:	43db      	mvns	r3, r3
 800513a:	69ba      	ldr	r2, [r7, #24]
 800513c:	4013      	ands	r3, r2
 800513e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	68da      	ldr	r2, [r3, #12]
 8005144:	69fb      	ldr	r3, [r7, #28]
 8005146:	005b      	lsls	r3, r3, #1
 8005148:	fa02 f303 	lsl.w	r3, r2, r3
 800514c:	69ba      	ldr	r2, [r7, #24]
 800514e:	4313      	orrs	r3, r2
 8005150:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	69ba      	ldr	r2, [r7, #24]
 8005156:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	685b      	ldr	r3, [r3, #4]
 800515c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800515e:	2201      	movs	r2, #1
 8005160:	69fb      	ldr	r3, [r7, #28]
 8005162:	fa02 f303 	lsl.w	r3, r2, r3
 8005166:	43db      	mvns	r3, r3
 8005168:	69ba      	ldr	r2, [r7, #24]
 800516a:	4013      	ands	r3, r2
 800516c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	685b      	ldr	r3, [r3, #4]
 8005172:	091b      	lsrs	r3, r3, #4
 8005174:	f003 0201 	and.w	r2, r3, #1
 8005178:	69fb      	ldr	r3, [r7, #28]
 800517a:	fa02 f303 	lsl.w	r3, r2, r3
 800517e:	69ba      	ldr	r2, [r7, #24]
 8005180:	4313      	orrs	r3, r2
 8005182:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	69ba      	ldr	r2, [r7, #24]
 8005188:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	68db      	ldr	r3, [r3, #12]
 800518e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005190:	69fb      	ldr	r3, [r7, #28]
 8005192:	005b      	lsls	r3, r3, #1
 8005194:	2203      	movs	r2, #3
 8005196:	fa02 f303 	lsl.w	r3, r2, r3
 800519a:	43db      	mvns	r3, r3
 800519c:	69ba      	ldr	r2, [r7, #24]
 800519e:	4013      	ands	r3, r2
 80051a0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	689a      	ldr	r2, [r3, #8]
 80051a6:	69fb      	ldr	r3, [r7, #28]
 80051a8:	005b      	lsls	r3, r3, #1
 80051aa:	fa02 f303 	lsl.w	r3, r2, r3
 80051ae:	69ba      	ldr	r2, [r7, #24]
 80051b0:	4313      	orrs	r3, r2
 80051b2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	69ba      	ldr	r2, [r7, #24]
 80051b8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	685b      	ldr	r3, [r3, #4]
 80051be:	2b02      	cmp	r3, #2
 80051c0:	d003      	beq.n	80051ca <HAL_GPIO_Init+0xee>
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	685b      	ldr	r3, [r3, #4]
 80051c6:	2b12      	cmp	r3, #18
 80051c8:	d123      	bne.n	8005212 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80051ca:	69fb      	ldr	r3, [r7, #28]
 80051cc:	08da      	lsrs	r2, r3, #3
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	3208      	adds	r2, #8
 80051d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80051d8:	69fb      	ldr	r3, [r7, #28]
 80051da:	f003 0307 	and.w	r3, r3, #7
 80051de:	009b      	lsls	r3, r3, #2
 80051e0:	220f      	movs	r2, #15
 80051e2:	fa02 f303 	lsl.w	r3, r2, r3
 80051e6:	43db      	mvns	r3, r3
 80051e8:	69ba      	ldr	r2, [r7, #24]
 80051ea:	4013      	ands	r3, r2
 80051ec:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	691a      	ldr	r2, [r3, #16]
 80051f2:	69fb      	ldr	r3, [r7, #28]
 80051f4:	f003 0307 	and.w	r3, r3, #7
 80051f8:	009b      	lsls	r3, r3, #2
 80051fa:	fa02 f303 	lsl.w	r3, r2, r3
 80051fe:	69ba      	ldr	r2, [r7, #24]
 8005200:	4313      	orrs	r3, r2
 8005202:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005204:	69fb      	ldr	r3, [r7, #28]
 8005206:	08da      	lsrs	r2, r3, #3
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	3208      	adds	r2, #8
 800520c:	69b9      	ldr	r1, [r7, #24]
 800520e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005218:	69fb      	ldr	r3, [r7, #28]
 800521a:	005b      	lsls	r3, r3, #1
 800521c:	2203      	movs	r2, #3
 800521e:	fa02 f303 	lsl.w	r3, r2, r3
 8005222:	43db      	mvns	r3, r3
 8005224:	69ba      	ldr	r2, [r7, #24]
 8005226:	4013      	ands	r3, r2
 8005228:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	f003 0203 	and.w	r2, r3, #3
 8005232:	69fb      	ldr	r3, [r7, #28]
 8005234:	005b      	lsls	r3, r3, #1
 8005236:	fa02 f303 	lsl.w	r3, r2, r3
 800523a:	69ba      	ldr	r2, [r7, #24]
 800523c:	4313      	orrs	r3, r2
 800523e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	69ba      	ldr	r2, [r7, #24]
 8005244:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800524e:	2b00      	cmp	r3, #0
 8005250:	f000 80e0 	beq.w	8005414 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005254:	4b2f      	ldr	r3, [pc, #188]	; (8005314 <HAL_GPIO_Init+0x238>)
 8005256:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800525a:	4a2e      	ldr	r2, [pc, #184]	; (8005314 <HAL_GPIO_Init+0x238>)
 800525c:	f043 0302 	orr.w	r3, r3, #2
 8005260:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005264:	4b2b      	ldr	r3, [pc, #172]	; (8005314 <HAL_GPIO_Init+0x238>)
 8005266:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800526a:	f003 0302 	and.w	r3, r3, #2
 800526e:	60fb      	str	r3, [r7, #12]
 8005270:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005272:	4a29      	ldr	r2, [pc, #164]	; (8005318 <HAL_GPIO_Init+0x23c>)
 8005274:	69fb      	ldr	r3, [r7, #28]
 8005276:	089b      	lsrs	r3, r3, #2
 8005278:	3302      	adds	r3, #2
 800527a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800527e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005280:	69fb      	ldr	r3, [r7, #28]
 8005282:	f003 0303 	and.w	r3, r3, #3
 8005286:	009b      	lsls	r3, r3, #2
 8005288:	220f      	movs	r2, #15
 800528a:	fa02 f303 	lsl.w	r3, r2, r3
 800528e:	43db      	mvns	r3, r3
 8005290:	69ba      	ldr	r2, [r7, #24]
 8005292:	4013      	ands	r3, r2
 8005294:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	4a20      	ldr	r2, [pc, #128]	; (800531c <HAL_GPIO_Init+0x240>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d052      	beq.n	8005344 <HAL_GPIO_Init+0x268>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	4a1f      	ldr	r2, [pc, #124]	; (8005320 <HAL_GPIO_Init+0x244>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d031      	beq.n	800530a <HAL_GPIO_Init+0x22e>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	4a1e      	ldr	r2, [pc, #120]	; (8005324 <HAL_GPIO_Init+0x248>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d02b      	beq.n	8005306 <HAL_GPIO_Init+0x22a>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	4a1d      	ldr	r2, [pc, #116]	; (8005328 <HAL_GPIO_Init+0x24c>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d025      	beq.n	8005302 <HAL_GPIO_Init+0x226>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	4a1c      	ldr	r2, [pc, #112]	; (800532c <HAL_GPIO_Init+0x250>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d01f      	beq.n	80052fe <HAL_GPIO_Init+0x222>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	4a1b      	ldr	r2, [pc, #108]	; (8005330 <HAL_GPIO_Init+0x254>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d019      	beq.n	80052fa <HAL_GPIO_Init+0x21e>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	4a1a      	ldr	r2, [pc, #104]	; (8005334 <HAL_GPIO_Init+0x258>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d013      	beq.n	80052f6 <HAL_GPIO_Init+0x21a>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	4a19      	ldr	r2, [pc, #100]	; (8005338 <HAL_GPIO_Init+0x25c>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d00d      	beq.n	80052f2 <HAL_GPIO_Init+0x216>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	4a18      	ldr	r2, [pc, #96]	; (800533c <HAL_GPIO_Init+0x260>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d007      	beq.n	80052ee <HAL_GPIO_Init+0x212>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	4a17      	ldr	r2, [pc, #92]	; (8005340 <HAL_GPIO_Init+0x264>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d101      	bne.n	80052ea <HAL_GPIO_Init+0x20e>
 80052e6:	2309      	movs	r3, #9
 80052e8:	e02d      	b.n	8005346 <HAL_GPIO_Init+0x26a>
 80052ea:	230a      	movs	r3, #10
 80052ec:	e02b      	b.n	8005346 <HAL_GPIO_Init+0x26a>
 80052ee:	2308      	movs	r3, #8
 80052f0:	e029      	b.n	8005346 <HAL_GPIO_Init+0x26a>
 80052f2:	2307      	movs	r3, #7
 80052f4:	e027      	b.n	8005346 <HAL_GPIO_Init+0x26a>
 80052f6:	2306      	movs	r3, #6
 80052f8:	e025      	b.n	8005346 <HAL_GPIO_Init+0x26a>
 80052fa:	2305      	movs	r3, #5
 80052fc:	e023      	b.n	8005346 <HAL_GPIO_Init+0x26a>
 80052fe:	2304      	movs	r3, #4
 8005300:	e021      	b.n	8005346 <HAL_GPIO_Init+0x26a>
 8005302:	2303      	movs	r3, #3
 8005304:	e01f      	b.n	8005346 <HAL_GPIO_Init+0x26a>
 8005306:	2302      	movs	r3, #2
 8005308:	e01d      	b.n	8005346 <HAL_GPIO_Init+0x26a>
 800530a:	2301      	movs	r3, #1
 800530c:	e01b      	b.n	8005346 <HAL_GPIO_Init+0x26a>
 800530e:	bf00      	nop
 8005310:	58000080 	.word	0x58000080
 8005314:	58024400 	.word	0x58024400
 8005318:	58000400 	.word	0x58000400
 800531c:	58020000 	.word	0x58020000
 8005320:	58020400 	.word	0x58020400
 8005324:	58020800 	.word	0x58020800
 8005328:	58020c00 	.word	0x58020c00
 800532c:	58021000 	.word	0x58021000
 8005330:	58021400 	.word	0x58021400
 8005334:	58021800 	.word	0x58021800
 8005338:	58021c00 	.word	0x58021c00
 800533c:	58022000 	.word	0x58022000
 8005340:	58022400 	.word	0x58022400
 8005344:	2300      	movs	r3, #0
 8005346:	69fa      	ldr	r2, [r7, #28]
 8005348:	f002 0203 	and.w	r2, r2, #3
 800534c:	0092      	lsls	r2, r2, #2
 800534e:	4093      	lsls	r3, r2
 8005350:	69ba      	ldr	r2, [r7, #24]
 8005352:	4313      	orrs	r3, r2
 8005354:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005356:	4938      	ldr	r1, [pc, #224]	; (8005438 <HAL_GPIO_Init+0x35c>)
 8005358:	69fb      	ldr	r3, [r7, #28]
 800535a:	089b      	lsrs	r3, r3, #2
 800535c:	3302      	adds	r3, #2
 800535e:	69ba      	ldr	r2, [r7, #24]
 8005360:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005364:	697b      	ldr	r3, [r7, #20]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800536a:	693b      	ldr	r3, [r7, #16]
 800536c:	43db      	mvns	r3, r3
 800536e:	69ba      	ldr	r2, [r7, #24]
 8005370:	4013      	ands	r3, r2
 8005372:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800537c:	2b00      	cmp	r3, #0
 800537e:	d003      	beq.n	8005388 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005380:	69ba      	ldr	r2, [r7, #24]
 8005382:	693b      	ldr	r3, [r7, #16]
 8005384:	4313      	orrs	r3, r2
 8005386:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005388:	697b      	ldr	r3, [r7, #20]
 800538a:	69ba      	ldr	r2, [r7, #24]
 800538c:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 800538e:	697b      	ldr	r3, [r7, #20]
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005394:	693b      	ldr	r3, [r7, #16]
 8005396:	43db      	mvns	r3, r3
 8005398:	69ba      	ldr	r2, [r7, #24]
 800539a:	4013      	ands	r3, r2
 800539c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d003      	beq.n	80053b2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80053aa:	69ba      	ldr	r2, [r7, #24]
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	4313      	orrs	r3, r2
 80053b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	69ba      	ldr	r2, [r7, #24]
 80053b6:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80053b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80053c0:	693b      	ldr	r3, [r7, #16]
 80053c2:	43db      	mvns	r3, r3
 80053c4:	69ba      	ldr	r2, [r7, #24]
 80053c6:	4013      	ands	r3, r2
 80053c8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d003      	beq.n	80053de <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 80053d6:	69ba      	ldr	r2, [r7, #24]
 80053d8:	693b      	ldr	r3, [r7, #16]
 80053da:	4313      	orrs	r3, r2
 80053dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80053de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80053e2:	69bb      	ldr	r3, [r7, #24]
 80053e4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80053e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80053ee:	693b      	ldr	r3, [r7, #16]
 80053f0:	43db      	mvns	r3, r3
 80053f2:	69ba      	ldr	r2, [r7, #24]
 80053f4:	4013      	ands	r3, r2
 80053f6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005400:	2b00      	cmp	r3, #0
 8005402:	d003      	beq.n	800540c <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8005404:	69ba      	ldr	r2, [r7, #24]
 8005406:	693b      	ldr	r3, [r7, #16]
 8005408:	4313      	orrs	r3, r2
 800540a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800540c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005410:	69bb      	ldr	r3, [r7, #24]
 8005412:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8005414:	69fb      	ldr	r3, [r7, #28]
 8005416:	3301      	adds	r3, #1
 8005418:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	681a      	ldr	r2, [r3, #0]
 800541e:	69fb      	ldr	r3, [r7, #28]
 8005420:	fa22 f303 	lsr.w	r3, r2, r3
 8005424:	2b00      	cmp	r3, #0
 8005426:	f47f ae63 	bne.w	80050f0 <HAL_GPIO_Init+0x14>
  }
}
 800542a:	bf00      	nop
 800542c:	bf00      	nop
 800542e:	3724      	adds	r7, #36	; 0x24
 8005430:	46bd      	mov	sp, r7
 8005432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005436:	4770      	bx	lr
 8005438:	58000400 	.word	0x58000400

0800543c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800543c:	b480      	push	{r7}
 800543e:	b085      	sub	sp, #20
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
 8005444:	460b      	mov	r3, r1
 8005446:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	691a      	ldr	r2, [r3, #16]
 800544c:	887b      	ldrh	r3, [r7, #2]
 800544e:	4013      	ands	r3, r2
 8005450:	2b00      	cmp	r3, #0
 8005452:	d002      	beq.n	800545a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005454:	2301      	movs	r3, #1
 8005456:	73fb      	strb	r3, [r7, #15]
 8005458:	e001      	b.n	800545e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800545a:	2300      	movs	r3, #0
 800545c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800545e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005460:	4618      	mov	r0, r3
 8005462:	3714      	adds	r7, #20
 8005464:	46bd      	mov	sp, r7
 8005466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546a:	4770      	bx	lr

0800546c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800546c:	b480      	push	{r7}
 800546e:	b083      	sub	sp, #12
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
 8005474:	460b      	mov	r3, r1
 8005476:	807b      	strh	r3, [r7, #2]
 8005478:	4613      	mov	r3, r2
 800547a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800547c:	787b      	ldrb	r3, [r7, #1]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d003      	beq.n	800548a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005482:	887a      	ldrh	r2, [r7, #2]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005488:	e003      	b.n	8005492 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800548a:	887b      	ldrh	r3, [r7, #2]
 800548c:	041a      	lsls	r2, r3, #16
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	619a      	str	r2, [r3, #24]
}
 8005492:	bf00      	nop
 8005494:	370c      	adds	r7, #12
 8005496:	46bd      	mov	sp, r7
 8005498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549c:	4770      	bx	lr

0800549e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800549e:	b480      	push	{r7}
 80054a0:	b085      	sub	sp, #20
 80054a2:	af00      	add	r7, sp, #0
 80054a4:	6078      	str	r0, [r7, #4]
 80054a6:	460b      	mov	r3, r1
 80054a8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	695b      	ldr	r3, [r3, #20]
 80054ae:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80054b0:	887a      	ldrh	r2, [r7, #2]
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	4013      	ands	r3, r2
 80054b6:	041a      	lsls	r2, r3, #16
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	43d9      	mvns	r1, r3
 80054bc:	887b      	ldrh	r3, [r7, #2]
 80054be:	400b      	ands	r3, r1
 80054c0:	431a      	orrs	r2, r3
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	619a      	str	r2, [r3, #24]
}
 80054c6:	bf00      	nop
 80054c8:	3714      	adds	r7, #20
 80054ca:	46bd      	mov	sp, r7
 80054cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d0:	4770      	bx	lr

080054d2 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80054d2:	b580      	push	{r7, lr}
 80054d4:	b082      	sub	sp, #8
 80054d6:	af00      	add	r7, sp, #0
 80054d8:	4603      	mov	r3, r0
 80054da:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 80054dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054e0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80054e4:	88fb      	ldrh	r3, [r7, #6]
 80054e6:	4013      	ands	r3, r2
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d008      	beq.n	80054fe <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80054ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80054f0:	88fb      	ldrh	r3, [r7, #6]
 80054f2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80054f6:	88fb      	ldrh	r3, [r7, #6]
 80054f8:	4618      	mov	r0, r3
 80054fa:	f7fb fde5 	bl	80010c8 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 80054fe:	bf00      	nop
 8005500:	3708      	adds	r7, #8
 8005502:	46bd      	mov	sp, r7
 8005504:	bd80      	pop	{r7, pc}
	...

08005508 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b084      	sub	sp, #16
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005510:	4b19      	ldr	r3, [pc, #100]	; (8005578 <HAL_PWREx_ConfigSupply+0x70>)
 8005512:	68db      	ldr	r3, [r3, #12]
 8005514:	f003 0304 	and.w	r3, r3, #4
 8005518:	2b04      	cmp	r3, #4
 800551a:	d00a      	beq.n	8005532 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800551c:	4b16      	ldr	r3, [pc, #88]	; (8005578 <HAL_PWREx_ConfigSupply+0x70>)
 800551e:	68db      	ldr	r3, [r3, #12]
 8005520:	f003 0307 	and.w	r3, r3, #7
 8005524:	687a      	ldr	r2, [r7, #4]
 8005526:	429a      	cmp	r2, r3
 8005528:	d001      	beq.n	800552e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800552a:	2301      	movs	r3, #1
 800552c:	e01f      	b.n	800556e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800552e:	2300      	movs	r3, #0
 8005530:	e01d      	b.n	800556e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005532:	4b11      	ldr	r3, [pc, #68]	; (8005578 <HAL_PWREx_ConfigSupply+0x70>)
 8005534:	68db      	ldr	r3, [r3, #12]
 8005536:	f023 0207 	bic.w	r2, r3, #7
 800553a:	490f      	ldr	r1, [pc, #60]	; (8005578 <HAL_PWREx_ConfigSupply+0x70>)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	4313      	orrs	r3, r2
 8005540:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005542:	f7fd fb53 	bl	8002bec <HAL_GetTick>
 8005546:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005548:	e009      	b.n	800555e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800554a:	f7fd fb4f 	bl	8002bec <HAL_GetTick>
 800554e:	4602      	mov	r2, r0
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	1ad3      	subs	r3, r2, r3
 8005554:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005558:	d901      	bls.n	800555e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800555a:	2301      	movs	r3, #1
 800555c:	e007      	b.n	800556e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800555e:	4b06      	ldr	r3, [pc, #24]	; (8005578 <HAL_PWREx_ConfigSupply+0x70>)
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005566:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800556a:	d1ee      	bne.n	800554a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800556c:	2300      	movs	r3, #0
}
 800556e:	4618      	mov	r0, r3
 8005570:	3710      	adds	r7, #16
 8005572:	46bd      	mov	sp, r7
 8005574:	bd80      	pop	{r7, pc}
 8005576:	bf00      	nop
 8005578:	58024800 	.word	0x58024800

0800557c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b08c      	sub	sp, #48	; 0x30
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d101      	bne.n	800558e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800558a:	2301      	movs	r3, #1
 800558c:	e3ff      	b.n	8005d8e <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f003 0301 	and.w	r3, r3, #1
 8005596:	2b00      	cmp	r3, #0
 8005598:	f000 8087 	beq.w	80056aa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800559c:	4b99      	ldr	r3, [pc, #612]	; (8005804 <HAL_RCC_OscConfig+0x288>)
 800559e:	691b      	ldr	r3, [r3, #16]
 80055a0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80055a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80055a6:	4b97      	ldr	r3, [pc, #604]	; (8005804 <HAL_RCC_OscConfig+0x288>)
 80055a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055aa:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80055ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055ae:	2b10      	cmp	r3, #16
 80055b0:	d007      	beq.n	80055c2 <HAL_RCC_OscConfig+0x46>
 80055b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055b4:	2b18      	cmp	r3, #24
 80055b6:	d110      	bne.n	80055da <HAL_RCC_OscConfig+0x5e>
 80055b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ba:	f003 0303 	and.w	r3, r3, #3
 80055be:	2b02      	cmp	r3, #2
 80055c0:	d10b      	bne.n	80055da <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055c2:	4b90      	ldr	r3, [pc, #576]	; (8005804 <HAL_RCC_OscConfig+0x288>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d06c      	beq.n	80056a8 <HAL_RCC_OscConfig+0x12c>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	685b      	ldr	r3, [r3, #4]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d168      	bne.n	80056a8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80055d6:	2301      	movs	r3, #1
 80055d8:	e3d9      	b.n	8005d8e <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055e2:	d106      	bne.n	80055f2 <HAL_RCC_OscConfig+0x76>
 80055e4:	4b87      	ldr	r3, [pc, #540]	; (8005804 <HAL_RCC_OscConfig+0x288>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4a86      	ldr	r2, [pc, #536]	; (8005804 <HAL_RCC_OscConfig+0x288>)
 80055ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055ee:	6013      	str	r3, [r2, #0]
 80055f0:	e02e      	b.n	8005650 <HAL_RCC_OscConfig+0xd4>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	685b      	ldr	r3, [r3, #4]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d10c      	bne.n	8005614 <HAL_RCC_OscConfig+0x98>
 80055fa:	4b82      	ldr	r3, [pc, #520]	; (8005804 <HAL_RCC_OscConfig+0x288>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a81      	ldr	r2, [pc, #516]	; (8005804 <HAL_RCC_OscConfig+0x288>)
 8005600:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005604:	6013      	str	r3, [r2, #0]
 8005606:	4b7f      	ldr	r3, [pc, #508]	; (8005804 <HAL_RCC_OscConfig+0x288>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4a7e      	ldr	r2, [pc, #504]	; (8005804 <HAL_RCC_OscConfig+0x288>)
 800560c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005610:	6013      	str	r3, [r2, #0]
 8005612:	e01d      	b.n	8005650 <HAL_RCC_OscConfig+0xd4>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	685b      	ldr	r3, [r3, #4]
 8005618:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800561c:	d10c      	bne.n	8005638 <HAL_RCC_OscConfig+0xbc>
 800561e:	4b79      	ldr	r3, [pc, #484]	; (8005804 <HAL_RCC_OscConfig+0x288>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4a78      	ldr	r2, [pc, #480]	; (8005804 <HAL_RCC_OscConfig+0x288>)
 8005624:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005628:	6013      	str	r3, [r2, #0]
 800562a:	4b76      	ldr	r3, [pc, #472]	; (8005804 <HAL_RCC_OscConfig+0x288>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4a75      	ldr	r2, [pc, #468]	; (8005804 <HAL_RCC_OscConfig+0x288>)
 8005630:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005634:	6013      	str	r3, [r2, #0]
 8005636:	e00b      	b.n	8005650 <HAL_RCC_OscConfig+0xd4>
 8005638:	4b72      	ldr	r3, [pc, #456]	; (8005804 <HAL_RCC_OscConfig+0x288>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4a71      	ldr	r2, [pc, #452]	; (8005804 <HAL_RCC_OscConfig+0x288>)
 800563e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005642:	6013      	str	r3, [r2, #0]
 8005644:	4b6f      	ldr	r3, [pc, #444]	; (8005804 <HAL_RCC_OscConfig+0x288>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4a6e      	ldr	r2, [pc, #440]	; (8005804 <HAL_RCC_OscConfig+0x288>)
 800564a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800564e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	685b      	ldr	r3, [r3, #4]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d013      	beq.n	8005680 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005658:	f7fd fac8 	bl	8002bec <HAL_GetTick>
 800565c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800565e:	e008      	b.n	8005672 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005660:	f7fd fac4 	bl	8002bec <HAL_GetTick>
 8005664:	4602      	mov	r2, r0
 8005666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005668:	1ad3      	subs	r3, r2, r3
 800566a:	2b64      	cmp	r3, #100	; 0x64
 800566c:	d901      	bls.n	8005672 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800566e:	2303      	movs	r3, #3
 8005670:	e38d      	b.n	8005d8e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005672:	4b64      	ldr	r3, [pc, #400]	; (8005804 <HAL_RCC_OscConfig+0x288>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800567a:	2b00      	cmp	r3, #0
 800567c:	d0f0      	beq.n	8005660 <HAL_RCC_OscConfig+0xe4>
 800567e:	e014      	b.n	80056aa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005680:	f7fd fab4 	bl	8002bec <HAL_GetTick>
 8005684:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005686:	e008      	b.n	800569a <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005688:	f7fd fab0 	bl	8002bec <HAL_GetTick>
 800568c:	4602      	mov	r2, r0
 800568e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005690:	1ad3      	subs	r3, r2, r3
 8005692:	2b64      	cmp	r3, #100	; 0x64
 8005694:	d901      	bls.n	800569a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005696:	2303      	movs	r3, #3
 8005698:	e379      	b.n	8005d8e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800569a:	4b5a      	ldr	r3, [pc, #360]	; (8005804 <HAL_RCC_OscConfig+0x288>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d1f0      	bne.n	8005688 <HAL_RCC_OscConfig+0x10c>
 80056a6:	e000      	b.n	80056aa <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f003 0302 	and.w	r3, r3, #2
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	f000 80ae 	beq.w	8005814 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80056b8:	4b52      	ldr	r3, [pc, #328]	; (8005804 <HAL_RCC_OscConfig+0x288>)
 80056ba:	691b      	ldr	r3, [r3, #16]
 80056bc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80056c0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80056c2:	4b50      	ldr	r3, [pc, #320]	; (8005804 <HAL_RCC_OscConfig+0x288>)
 80056c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056c6:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80056c8:	6a3b      	ldr	r3, [r7, #32]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d007      	beq.n	80056de <HAL_RCC_OscConfig+0x162>
 80056ce:	6a3b      	ldr	r3, [r7, #32]
 80056d0:	2b18      	cmp	r3, #24
 80056d2:	d13a      	bne.n	800574a <HAL_RCC_OscConfig+0x1ce>
 80056d4:	69fb      	ldr	r3, [r7, #28]
 80056d6:	f003 0303 	and.w	r3, r3, #3
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d135      	bne.n	800574a <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80056de:	4b49      	ldr	r3, [pc, #292]	; (8005804 <HAL_RCC_OscConfig+0x288>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f003 0304 	and.w	r3, r3, #4
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d005      	beq.n	80056f6 <HAL_RCC_OscConfig+0x17a>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	68db      	ldr	r3, [r3, #12]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d101      	bne.n	80056f6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80056f2:	2301      	movs	r3, #1
 80056f4:	e34b      	b.n	8005d8e <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056f6:	f7fd fa85 	bl	8002c04 <HAL_GetREVID>
 80056fa:	4603      	mov	r3, r0
 80056fc:	f241 0203 	movw	r2, #4099	; 0x1003
 8005700:	4293      	cmp	r3, r2
 8005702:	d817      	bhi.n	8005734 <HAL_RCC_OscConfig+0x1b8>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	691b      	ldr	r3, [r3, #16]
 8005708:	2b40      	cmp	r3, #64	; 0x40
 800570a:	d108      	bne.n	800571e <HAL_RCC_OscConfig+0x1a2>
 800570c:	4b3d      	ldr	r3, [pc, #244]	; (8005804 <HAL_RCC_OscConfig+0x288>)
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005714:	4a3b      	ldr	r2, [pc, #236]	; (8005804 <HAL_RCC_OscConfig+0x288>)
 8005716:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800571a:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800571c:	e07a      	b.n	8005814 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800571e:	4b39      	ldr	r3, [pc, #228]	; (8005804 <HAL_RCC_OscConfig+0x288>)
 8005720:	685b      	ldr	r3, [r3, #4]
 8005722:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	691b      	ldr	r3, [r3, #16]
 800572a:	031b      	lsls	r3, r3, #12
 800572c:	4935      	ldr	r1, [pc, #212]	; (8005804 <HAL_RCC_OscConfig+0x288>)
 800572e:	4313      	orrs	r3, r2
 8005730:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005732:	e06f      	b.n	8005814 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005734:	4b33      	ldr	r3, [pc, #204]	; (8005804 <HAL_RCC_OscConfig+0x288>)
 8005736:	685b      	ldr	r3, [r3, #4]
 8005738:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	691b      	ldr	r3, [r3, #16]
 8005740:	061b      	lsls	r3, r3, #24
 8005742:	4930      	ldr	r1, [pc, #192]	; (8005804 <HAL_RCC_OscConfig+0x288>)
 8005744:	4313      	orrs	r3, r2
 8005746:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005748:	e064      	b.n	8005814 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	68db      	ldr	r3, [r3, #12]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d045      	beq.n	80057de <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005752:	4b2c      	ldr	r3, [pc, #176]	; (8005804 <HAL_RCC_OscConfig+0x288>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f023 0219 	bic.w	r2, r3, #25
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	68db      	ldr	r3, [r3, #12]
 800575e:	4929      	ldr	r1, [pc, #164]	; (8005804 <HAL_RCC_OscConfig+0x288>)
 8005760:	4313      	orrs	r3, r2
 8005762:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005764:	f7fd fa42 	bl	8002bec <HAL_GetTick>
 8005768:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800576a:	e008      	b.n	800577e <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800576c:	f7fd fa3e 	bl	8002bec <HAL_GetTick>
 8005770:	4602      	mov	r2, r0
 8005772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005774:	1ad3      	subs	r3, r2, r3
 8005776:	2b02      	cmp	r3, #2
 8005778:	d901      	bls.n	800577e <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 800577a:	2303      	movs	r3, #3
 800577c:	e307      	b.n	8005d8e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800577e:	4b21      	ldr	r3, [pc, #132]	; (8005804 <HAL_RCC_OscConfig+0x288>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f003 0304 	and.w	r3, r3, #4
 8005786:	2b00      	cmp	r3, #0
 8005788:	d0f0      	beq.n	800576c <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800578a:	f7fd fa3b 	bl	8002c04 <HAL_GetREVID>
 800578e:	4603      	mov	r3, r0
 8005790:	f241 0203 	movw	r2, #4099	; 0x1003
 8005794:	4293      	cmp	r3, r2
 8005796:	d817      	bhi.n	80057c8 <HAL_RCC_OscConfig+0x24c>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	691b      	ldr	r3, [r3, #16]
 800579c:	2b40      	cmp	r3, #64	; 0x40
 800579e:	d108      	bne.n	80057b2 <HAL_RCC_OscConfig+0x236>
 80057a0:	4b18      	ldr	r3, [pc, #96]	; (8005804 <HAL_RCC_OscConfig+0x288>)
 80057a2:	685b      	ldr	r3, [r3, #4]
 80057a4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80057a8:	4a16      	ldr	r2, [pc, #88]	; (8005804 <HAL_RCC_OscConfig+0x288>)
 80057aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80057ae:	6053      	str	r3, [r2, #4]
 80057b0:	e030      	b.n	8005814 <HAL_RCC_OscConfig+0x298>
 80057b2:	4b14      	ldr	r3, [pc, #80]	; (8005804 <HAL_RCC_OscConfig+0x288>)
 80057b4:	685b      	ldr	r3, [r3, #4]
 80057b6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	691b      	ldr	r3, [r3, #16]
 80057be:	031b      	lsls	r3, r3, #12
 80057c0:	4910      	ldr	r1, [pc, #64]	; (8005804 <HAL_RCC_OscConfig+0x288>)
 80057c2:	4313      	orrs	r3, r2
 80057c4:	604b      	str	r3, [r1, #4]
 80057c6:	e025      	b.n	8005814 <HAL_RCC_OscConfig+0x298>
 80057c8:	4b0e      	ldr	r3, [pc, #56]	; (8005804 <HAL_RCC_OscConfig+0x288>)
 80057ca:	685b      	ldr	r3, [r3, #4]
 80057cc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	691b      	ldr	r3, [r3, #16]
 80057d4:	061b      	lsls	r3, r3, #24
 80057d6:	490b      	ldr	r1, [pc, #44]	; (8005804 <HAL_RCC_OscConfig+0x288>)
 80057d8:	4313      	orrs	r3, r2
 80057da:	604b      	str	r3, [r1, #4]
 80057dc:	e01a      	b.n	8005814 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80057de:	4b09      	ldr	r3, [pc, #36]	; (8005804 <HAL_RCC_OscConfig+0x288>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	4a08      	ldr	r2, [pc, #32]	; (8005804 <HAL_RCC_OscConfig+0x288>)
 80057e4:	f023 0301 	bic.w	r3, r3, #1
 80057e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057ea:	f7fd f9ff 	bl	8002bec <HAL_GetTick>
 80057ee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80057f0:	e00a      	b.n	8005808 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80057f2:	f7fd f9fb 	bl	8002bec <HAL_GetTick>
 80057f6:	4602      	mov	r2, r0
 80057f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057fa:	1ad3      	subs	r3, r2, r3
 80057fc:	2b02      	cmp	r3, #2
 80057fe:	d903      	bls.n	8005808 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8005800:	2303      	movs	r3, #3
 8005802:	e2c4      	b.n	8005d8e <HAL_RCC_OscConfig+0x812>
 8005804:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005808:	4ba4      	ldr	r3, [pc, #656]	; (8005a9c <HAL_RCC_OscConfig+0x520>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f003 0304 	and.w	r3, r3, #4
 8005810:	2b00      	cmp	r3, #0
 8005812:	d1ee      	bne.n	80057f2 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f003 0310 	and.w	r3, r3, #16
 800581c:	2b00      	cmp	r3, #0
 800581e:	f000 80a9 	beq.w	8005974 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005822:	4b9e      	ldr	r3, [pc, #632]	; (8005a9c <HAL_RCC_OscConfig+0x520>)
 8005824:	691b      	ldr	r3, [r3, #16]
 8005826:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800582a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800582c:	4b9b      	ldr	r3, [pc, #620]	; (8005a9c <HAL_RCC_OscConfig+0x520>)
 800582e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005830:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005832:	69bb      	ldr	r3, [r7, #24]
 8005834:	2b08      	cmp	r3, #8
 8005836:	d007      	beq.n	8005848 <HAL_RCC_OscConfig+0x2cc>
 8005838:	69bb      	ldr	r3, [r7, #24]
 800583a:	2b18      	cmp	r3, #24
 800583c:	d13a      	bne.n	80058b4 <HAL_RCC_OscConfig+0x338>
 800583e:	697b      	ldr	r3, [r7, #20]
 8005840:	f003 0303 	and.w	r3, r3, #3
 8005844:	2b01      	cmp	r3, #1
 8005846:	d135      	bne.n	80058b4 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005848:	4b94      	ldr	r3, [pc, #592]	; (8005a9c <HAL_RCC_OscConfig+0x520>)
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005850:	2b00      	cmp	r3, #0
 8005852:	d005      	beq.n	8005860 <HAL_RCC_OscConfig+0x2e4>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	69db      	ldr	r3, [r3, #28]
 8005858:	2b80      	cmp	r3, #128	; 0x80
 800585a:	d001      	beq.n	8005860 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 800585c:	2301      	movs	r3, #1
 800585e:	e296      	b.n	8005d8e <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005860:	f7fd f9d0 	bl	8002c04 <HAL_GetREVID>
 8005864:	4603      	mov	r3, r0
 8005866:	f241 0203 	movw	r2, #4099	; 0x1003
 800586a:	4293      	cmp	r3, r2
 800586c:	d817      	bhi.n	800589e <HAL_RCC_OscConfig+0x322>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6a1b      	ldr	r3, [r3, #32]
 8005872:	2b20      	cmp	r3, #32
 8005874:	d108      	bne.n	8005888 <HAL_RCC_OscConfig+0x30c>
 8005876:	4b89      	ldr	r3, [pc, #548]	; (8005a9c <HAL_RCC_OscConfig+0x520>)
 8005878:	685b      	ldr	r3, [r3, #4]
 800587a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800587e:	4a87      	ldr	r2, [pc, #540]	; (8005a9c <HAL_RCC_OscConfig+0x520>)
 8005880:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005884:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005886:	e075      	b.n	8005974 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005888:	4b84      	ldr	r3, [pc, #528]	; (8005a9c <HAL_RCC_OscConfig+0x520>)
 800588a:	685b      	ldr	r3, [r3, #4]
 800588c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6a1b      	ldr	r3, [r3, #32]
 8005894:	069b      	lsls	r3, r3, #26
 8005896:	4981      	ldr	r1, [pc, #516]	; (8005a9c <HAL_RCC_OscConfig+0x520>)
 8005898:	4313      	orrs	r3, r2
 800589a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800589c:	e06a      	b.n	8005974 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800589e:	4b7f      	ldr	r3, [pc, #508]	; (8005a9c <HAL_RCC_OscConfig+0x520>)
 80058a0:	68db      	ldr	r3, [r3, #12]
 80058a2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6a1b      	ldr	r3, [r3, #32]
 80058aa:	061b      	lsls	r3, r3, #24
 80058ac:	497b      	ldr	r1, [pc, #492]	; (8005a9c <HAL_RCC_OscConfig+0x520>)
 80058ae:	4313      	orrs	r3, r2
 80058b0:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80058b2:	e05f      	b.n	8005974 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	69db      	ldr	r3, [r3, #28]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d042      	beq.n	8005942 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80058bc:	4b77      	ldr	r3, [pc, #476]	; (8005a9c <HAL_RCC_OscConfig+0x520>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4a76      	ldr	r2, [pc, #472]	; (8005a9c <HAL_RCC_OscConfig+0x520>)
 80058c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058c8:	f7fd f990 	bl	8002bec <HAL_GetTick>
 80058cc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80058ce:	e008      	b.n	80058e2 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80058d0:	f7fd f98c 	bl	8002bec <HAL_GetTick>
 80058d4:	4602      	mov	r2, r0
 80058d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d8:	1ad3      	subs	r3, r2, r3
 80058da:	2b02      	cmp	r3, #2
 80058dc:	d901      	bls.n	80058e2 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 80058de:	2303      	movs	r3, #3
 80058e0:	e255      	b.n	8005d8e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80058e2:	4b6e      	ldr	r3, [pc, #440]	; (8005a9c <HAL_RCC_OscConfig+0x520>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d0f0      	beq.n	80058d0 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80058ee:	f7fd f989 	bl	8002c04 <HAL_GetREVID>
 80058f2:	4603      	mov	r3, r0
 80058f4:	f241 0203 	movw	r2, #4099	; 0x1003
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d817      	bhi.n	800592c <HAL_RCC_OscConfig+0x3b0>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6a1b      	ldr	r3, [r3, #32]
 8005900:	2b20      	cmp	r3, #32
 8005902:	d108      	bne.n	8005916 <HAL_RCC_OscConfig+0x39a>
 8005904:	4b65      	ldr	r3, [pc, #404]	; (8005a9c <HAL_RCC_OscConfig+0x520>)
 8005906:	685b      	ldr	r3, [r3, #4]
 8005908:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800590c:	4a63      	ldr	r2, [pc, #396]	; (8005a9c <HAL_RCC_OscConfig+0x520>)
 800590e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005912:	6053      	str	r3, [r2, #4]
 8005914:	e02e      	b.n	8005974 <HAL_RCC_OscConfig+0x3f8>
 8005916:	4b61      	ldr	r3, [pc, #388]	; (8005a9c <HAL_RCC_OscConfig+0x520>)
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6a1b      	ldr	r3, [r3, #32]
 8005922:	069b      	lsls	r3, r3, #26
 8005924:	495d      	ldr	r1, [pc, #372]	; (8005a9c <HAL_RCC_OscConfig+0x520>)
 8005926:	4313      	orrs	r3, r2
 8005928:	604b      	str	r3, [r1, #4]
 800592a:	e023      	b.n	8005974 <HAL_RCC_OscConfig+0x3f8>
 800592c:	4b5b      	ldr	r3, [pc, #364]	; (8005a9c <HAL_RCC_OscConfig+0x520>)
 800592e:	68db      	ldr	r3, [r3, #12]
 8005930:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6a1b      	ldr	r3, [r3, #32]
 8005938:	061b      	lsls	r3, r3, #24
 800593a:	4958      	ldr	r1, [pc, #352]	; (8005a9c <HAL_RCC_OscConfig+0x520>)
 800593c:	4313      	orrs	r3, r2
 800593e:	60cb      	str	r3, [r1, #12]
 8005940:	e018      	b.n	8005974 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005942:	4b56      	ldr	r3, [pc, #344]	; (8005a9c <HAL_RCC_OscConfig+0x520>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4a55      	ldr	r2, [pc, #340]	; (8005a9c <HAL_RCC_OscConfig+0x520>)
 8005948:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800594c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800594e:	f7fd f94d 	bl	8002bec <HAL_GetTick>
 8005952:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005954:	e008      	b.n	8005968 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005956:	f7fd f949 	bl	8002bec <HAL_GetTick>
 800595a:	4602      	mov	r2, r0
 800595c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800595e:	1ad3      	subs	r3, r2, r3
 8005960:	2b02      	cmp	r3, #2
 8005962:	d901      	bls.n	8005968 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8005964:	2303      	movs	r3, #3
 8005966:	e212      	b.n	8005d8e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005968:	4b4c      	ldr	r3, [pc, #304]	; (8005a9c <HAL_RCC_OscConfig+0x520>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005970:	2b00      	cmp	r3, #0
 8005972:	d1f0      	bne.n	8005956 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f003 0308 	and.w	r3, r3, #8
 800597c:	2b00      	cmp	r3, #0
 800597e:	d036      	beq.n	80059ee <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	695b      	ldr	r3, [r3, #20]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d019      	beq.n	80059bc <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005988:	4b44      	ldr	r3, [pc, #272]	; (8005a9c <HAL_RCC_OscConfig+0x520>)
 800598a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800598c:	4a43      	ldr	r2, [pc, #268]	; (8005a9c <HAL_RCC_OscConfig+0x520>)
 800598e:	f043 0301 	orr.w	r3, r3, #1
 8005992:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005994:	f7fd f92a 	bl	8002bec <HAL_GetTick>
 8005998:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800599a:	e008      	b.n	80059ae <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800599c:	f7fd f926 	bl	8002bec <HAL_GetTick>
 80059a0:	4602      	mov	r2, r0
 80059a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a4:	1ad3      	subs	r3, r2, r3
 80059a6:	2b02      	cmp	r3, #2
 80059a8:	d901      	bls.n	80059ae <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 80059aa:	2303      	movs	r3, #3
 80059ac:	e1ef      	b.n	8005d8e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80059ae:	4b3b      	ldr	r3, [pc, #236]	; (8005a9c <HAL_RCC_OscConfig+0x520>)
 80059b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059b2:	f003 0302 	and.w	r3, r3, #2
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d0f0      	beq.n	800599c <HAL_RCC_OscConfig+0x420>
 80059ba:	e018      	b.n	80059ee <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80059bc:	4b37      	ldr	r3, [pc, #220]	; (8005a9c <HAL_RCC_OscConfig+0x520>)
 80059be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059c0:	4a36      	ldr	r2, [pc, #216]	; (8005a9c <HAL_RCC_OscConfig+0x520>)
 80059c2:	f023 0301 	bic.w	r3, r3, #1
 80059c6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059c8:	f7fd f910 	bl	8002bec <HAL_GetTick>
 80059cc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80059ce:	e008      	b.n	80059e2 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80059d0:	f7fd f90c 	bl	8002bec <HAL_GetTick>
 80059d4:	4602      	mov	r2, r0
 80059d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059d8:	1ad3      	subs	r3, r2, r3
 80059da:	2b02      	cmp	r3, #2
 80059dc:	d901      	bls.n	80059e2 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 80059de:	2303      	movs	r3, #3
 80059e0:	e1d5      	b.n	8005d8e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80059e2:	4b2e      	ldr	r3, [pc, #184]	; (8005a9c <HAL_RCC_OscConfig+0x520>)
 80059e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059e6:	f003 0302 	and.w	r3, r3, #2
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d1f0      	bne.n	80059d0 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f003 0320 	and.w	r3, r3, #32
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d036      	beq.n	8005a68 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	699b      	ldr	r3, [r3, #24]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d019      	beq.n	8005a36 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005a02:	4b26      	ldr	r3, [pc, #152]	; (8005a9c <HAL_RCC_OscConfig+0x520>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4a25      	ldr	r2, [pc, #148]	; (8005a9c <HAL_RCC_OscConfig+0x520>)
 8005a08:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005a0c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005a0e:	f7fd f8ed 	bl	8002bec <HAL_GetTick>
 8005a12:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005a14:	e008      	b.n	8005a28 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005a16:	f7fd f8e9 	bl	8002bec <HAL_GetTick>
 8005a1a:	4602      	mov	r2, r0
 8005a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a1e:	1ad3      	subs	r3, r2, r3
 8005a20:	2b02      	cmp	r3, #2
 8005a22:	d901      	bls.n	8005a28 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8005a24:	2303      	movs	r3, #3
 8005a26:	e1b2      	b.n	8005d8e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005a28:	4b1c      	ldr	r3, [pc, #112]	; (8005a9c <HAL_RCC_OscConfig+0x520>)
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d0f0      	beq.n	8005a16 <HAL_RCC_OscConfig+0x49a>
 8005a34:	e018      	b.n	8005a68 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005a36:	4b19      	ldr	r3, [pc, #100]	; (8005a9c <HAL_RCC_OscConfig+0x520>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4a18      	ldr	r2, [pc, #96]	; (8005a9c <HAL_RCC_OscConfig+0x520>)
 8005a3c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005a40:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005a42:	f7fd f8d3 	bl	8002bec <HAL_GetTick>
 8005a46:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005a48:	e008      	b.n	8005a5c <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005a4a:	f7fd f8cf 	bl	8002bec <HAL_GetTick>
 8005a4e:	4602      	mov	r2, r0
 8005a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a52:	1ad3      	subs	r3, r2, r3
 8005a54:	2b02      	cmp	r3, #2
 8005a56:	d901      	bls.n	8005a5c <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8005a58:	2303      	movs	r3, #3
 8005a5a:	e198      	b.n	8005d8e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005a5c:	4b0f      	ldr	r3, [pc, #60]	; (8005a9c <HAL_RCC_OscConfig+0x520>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d1f0      	bne.n	8005a4a <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f003 0304 	and.w	r3, r3, #4
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	f000 8085 	beq.w	8005b80 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005a76:	4b0a      	ldr	r3, [pc, #40]	; (8005aa0 <HAL_RCC_OscConfig+0x524>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4a09      	ldr	r2, [pc, #36]	; (8005aa0 <HAL_RCC_OscConfig+0x524>)
 8005a7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a80:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005a82:	f7fd f8b3 	bl	8002bec <HAL_GetTick>
 8005a86:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005a88:	e00c      	b.n	8005aa4 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005a8a:	f7fd f8af 	bl	8002bec <HAL_GetTick>
 8005a8e:	4602      	mov	r2, r0
 8005a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a92:	1ad3      	subs	r3, r2, r3
 8005a94:	2b64      	cmp	r3, #100	; 0x64
 8005a96:	d905      	bls.n	8005aa4 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8005a98:	2303      	movs	r3, #3
 8005a9a:	e178      	b.n	8005d8e <HAL_RCC_OscConfig+0x812>
 8005a9c:	58024400 	.word	0x58024400
 8005aa0:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005aa4:	4b96      	ldr	r3, [pc, #600]	; (8005d00 <HAL_RCC_OscConfig+0x784>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d0ec      	beq.n	8005a8a <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	689b      	ldr	r3, [r3, #8]
 8005ab4:	2b01      	cmp	r3, #1
 8005ab6:	d106      	bne.n	8005ac6 <HAL_RCC_OscConfig+0x54a>
 8005ab8:	4b92      	ldr	r3, [pc, #584]	; (8005d04 <HAL_RCC_OscConfig+0x788>)
 8005aba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005abc:	4a91      	ldr	r2, [pc, #580]	; (8005d04 <HAL_RCC_OscConfig+0x788>)
 8005abe:	f043 0301 	orr.w	r3, r3, #1
 8005ac2:	6713      	str	r3, [r2, #112]	; 0x70
 8005ac4:	e02d      	b.n	8005b22 <HAL_RCC_OscConfig+0x5a6>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	689b      	ldr	r3, [r3, #8]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d10c      	bne.n	8005ae8 <HAL_RCC_OscConfig+0x56c>
 8005ace:	4b8d      	ldr	r3, [pc, #564]	; (8005d04 <HAL_RCC_OscConfig+0x788>)
 8005ad0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ad2:	4a8c      	ldr	r2, [pc, #560]	; (8005d04 <HAL_RCC_OscConfig+0x788>)
 8005ad4:	f023 0301 	bic.w	r3, r3, #1
 8005ad8:	6713      	str	r3, [r2, #112]	; 0x70
 8005ada:	4b8a      	ldr	r3, [pc, #552]	; (8005d04 <HAL_RCC_OscConfig+0x788>)
 8005adc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ade:	4a89      	ldr	r2, [pc, #548]	; (8005d04 <HAL_RCC_OscConfig+0x788>)
 8005ae0:	f023 0304 	bic.w	r3, r3, #4
 8005ae4:	6713      	str	r3, [r2, #112]	; 0x70
 8005ae6:	e01c      	b.n	8005b22 <HAL_RCC_OscConfig+0x5a6>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	689b      	ldr	r3, [r3, #8]
 8005aec:	2b05      	cmp	r3, #5
 8005aee:	d10c      	bne.n	8005b0a <HAL_RCC_OscConfig+0x58e>
 8005af0:	4b84      	ldr	r3, [pc, #528]	; (8005d04 <HAL_RCC_OscConfig+0x788>)
 8005af2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005af4:	4a83      	ldr	r2, [pc, #524]	; (8005d04 <HAL_RCC_OscConfig+0x788>)
 8005af6:	f043 0304 	orr.w	r3, r3, #4
 8005afa:	6713      	str	r3, [r2, #112]	; 0x70
 8005afc:	4b81      	ldr	r3, [pc, #516]	; (8005d04 <HAL_RCC_OscConfig+0x788>)
 8005afe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b00:	4a80      	ldr	r2, [pc, #512]	; (8005d04 <HAL_RCC_OscConfig+0x788>)
 8005b02:	f043 0301 	orr.w	r3, r3, #1
 8005b06:	6713      	str	r3, [r2, #112]	; 0x70
 8005b08:	e00b      	b.n	8005b22 <HAL_RCC_OscConfig+0x5a6>
 8005b0a:	4b7e      	ldr	r3, [pc, #504]	; (8005d04 <HAL_RCC_OscConfig+0x788>)
 8005b0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b0e:	4a7d      	ldr	r2, [pc, #500]	; (8005d04 <HAL_RCC_OscConfig+0x788>)
 8005b10:	f023 0301 	bic.w	r3, r3, #1
 8005b14:	6713      	str	r3, [r2, #112]	; 0x70
 8005b16:	4b7b      	ldr	r3, [pc, #492]	; (8005d04 <HAL_RCC_OscConfig+0x788>)
 8005b18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b1a:	4a7a      	ldr	r2, [pc, #488]	; (8005d04 <HAL_RCC_OscConfig+0x788>)
 8005b1c:	f023 0304 	bic.w	r3, r3, #4
 8005b20:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	689b      	ldr	r3, [r3, #8]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d015      	beq.n	8005b56 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b2a:	f7fd f85f 	bl	8002bec <HAL_GetTick>
 8005b2e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005b30:	e00a      	b.n	8005b48 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b32:	f7fd f85b 	bl	8002bec <HAL_GetTick>
 8005b36:	4602      	mov	r2, r0
 8005b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b3a:	1ad3      	subs	r3, r2, r3
 8005b3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d901      	bls.n	8005b48 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8005b44:	2303      	movs	r3, #3
 8005b46:	e122      	b.n	8005d8e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005b48:	4b6e      	ldr	r3, [pc, #440]	; (8005d04 <HAL_RCC_OscConfig+0x788>)
 8005b4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b4c:	f003 0302 	and.w	r3, r3, #2
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d0ee      	beq.n	8005b32 <HAL_RCC_OscConfig+0x5b6>
 8005b54:	e014      	b.n	8005b80 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b56:	f7fd f849 	bl	8002bec <HAL_GetTick>
 8005b5a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005b5c:	e00a      	b.n	8005b74 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b5e:	f7fd f845 	bl	8002bec <HAL_GetTick>
 8005b62:	4602      	mov	r2, r0
 8005b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b66:	1ad3      	subs	r3, r2, r3
 8005b68:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d901      	bls.n	8005b74 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8005b70:	2303      	movs	r3, #3
 8005b72:	e10c      	b.n	8005d8e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005b74:	4b63      	ldr	r3, [pc, #396]	; (8005d04 <HAL_RCC_OscConfig+0x788>)
 8005b76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b78:	f003 0302 	and.w	r3, r3, #2
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d1ee      	bne.n	8005b5e <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	f000 8101 	beq.w	8005d8c <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005b8a:	4b5e      	ldr	r3, [pc, #376]	; (8005d04 <HAL_RCC_OscConfig+0x788>)
 8005b8c:	691b      	ldr	r3, [r3, #16]
 8005b8e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005b92:	2b18      	cmp	r3, #24
 8005b94:	f000 80bc 	beq.w	8005d10 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b9c:	2b02      	cmp	r3, #2
 8005b9e:	f040 8095 	bne.w	8005ccc <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ba2:	4b58      	ldr	r3, [pc, #352]	; (8005d04 <HAL_RCC_OscConfig+0x788>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	4a57      	ldr	r2, [pc, #348]	; (8005d04 <HAL_RCC_OscConfig+0x788>)
 8005ba8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005bac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bae:	f7fd f81d 	bl	8002bec <HAL_GetTick>
 8005bb2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005bb4:	e008      	b.n	8005bc8 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005bb6:	f7fd f819 	bl	8002bec <HAL_GetTick>
 8005bba:	4602      	mov	r2, r0
 8005bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bbe:	1ad3      	subs	r3, r2, r3
 8005bc0:	2b02      	cmp	r3, #2
 8005bc2:	d901      	bls.n	8005bc8 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8005bc4:	2303      	movs	r3, #3
 8005bc6:	e0e2      	b.n	8005d8e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005bc8:	4b4e      	ldr	r3, [pc, #312]	; (8005d04 <HAL_RCC_OscConfig+0x788>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d1f0      	bne.n	8005bb6 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005bd4:	4b4b      	ldr	r3, [pc, #300]	; (8005d04 <HAL_RCC_OscConfig+0x788>)
 8005bd6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005bd8:	4b4b      	ldr	r3, [pc, #300]	; (8005d08 <HAL_RCC_OscConfig+0x78c>)
 8005bda:	4013      	ands	r3, r2
 8005bdc:	687a      	ldr	r2, [r7, #4]
 8005bde:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8005be0:	687a      	ldr	r2, [r7, #4]
 8005be2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005be4:	0112      	lsls	r2, r2, #4
 8005be6:	430a      	orrs	r2, r1
 8005be8:	4946      	ldr	r1, [pc, #280]	; (8005d04 <HAL_RCC_OscConfig+0x788>)
 8005bea:	4313      	orrs	r3, r2
 8005bec:	628b      	str	r3, [r1, #40]	; 0x28
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bf2:	3b01      	subs	r3, #1
 8005bf4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bfc:	3b01      	subs	r3, #1
 8005bfe:	025b      	lsls	r3, r3, #9
 8005c00:	b29b      	uxth	r3, r3
 8005c02:	431a      	orrs	r2, r3
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c08:	3b01      	subs	r3, #1
 8005c0a:	041b      	lsls	r3, r3, #16
 8005c0c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005c10:	431a      	orrs	r2, r3
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c16:	3b01      	subs	r3, #1
 8005c18:	061b      	lsls	r3, r3, #24
 8005c1a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005c1e:	4939      	ldr	r1, [pc, #228]	; (8005d04 <HAL_RCC_OscConfig+0x788>)
 8005c20:	4313      	orrs	r3, r2
 8005c22:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8005c24:	4b37      	ldr	r3, [pc, #220]	; (8005d04 <HAL_RCC_OscConfig+0x788>)
 8005c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c28:	4a36      	ldr	r2, [pc, #216]	; (8005d04 <HAL_RCC_OscConfig+0x788>)
 8005c2a:	f023 0301 	bic.w	r3, r3, #1
 8005c2e:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005c30:	4b34      	ldr	r3, [pc, #208]	; (8005d04 <HAL_RCC_OscConfig+0x788>)
 8005c32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c34:	4b35      	ldr	r3, [pc, #212]	; (8005d0c <HAL_RCC_OscConfig+0x790>)
 8005c36:	4013      	ands	r3, r2
 8005c38:	687a      	ldr	r2, [r7, #4]
 8005c3a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005c3c:	00d2      	lsls	r2, r2, #3
 8005c3e:	4931      	ldr	r1, [pc, #196]	; (8005d04 <HAL_RCC_OscConfig+0x788>)
 8005c40:	4313      	orrs	r3, r2
 8005c42:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005c44:	4b2f      	ldr	r3, [pc, #188]	; (8005d04 <HAL_RCC_OscConfig+0x788>)
 8005c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c48:	f023 020c 	bic.w	r2, r3, #12
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c50:	492c      	ldr	r1, [pc, #176]	; (8005d04 <HAL_RCC_OscConfig+0x788>)
 8005c52:	4313      	orrs	r3, r2
 8005c54:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005c56:	4b2b      	ldr	r3, [pc, #172]	; (8005d04 <HAL_RCC_OscConfig+0x788>)
 8005c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c5a:	f023 0202 	bic.w	r2, r3, #2
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c62:	4928      	ldr	r1, [pc, #160]	; (8005d04 <HAL_RCC_OscConfig+0x788>)
 8005c64:	4313      	orrs	r3, r2
 8005c66:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005c68:	4b26      	ldr	r3, [pc, #152]	; (8005d04 <HAL_RCC_OscConfig+0x788>)
 8005c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c6c:	4a25      	ldr	r2, [pc, #148]	; (8005d04 <HAL_RCC_OscConfig+0x788>)
 8005c6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c72:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c74:	4b23      	ldr	r3, [pc, #140]	; (8005d04 <HAL_RCC_OscConfig+0x788>)
 8005c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c78:	4a22      	ldr	r2, [pc, #136]	; (8005d04 <HAL_RCC_OscConfig+0x788>)
 8005c7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c7e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005c80:	4b20      	ldr	r3, [pc, #128]	; (8005d04 <HAL_RCC_OscConfig+0x788>)
 8005c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c84:	4a1f      	ldr	r2, [pc, #124]	; (8005d04 <HAL_RCC_OscConfig+0x788>)
 8005c86:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005c8a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8005c8c:	4b1d      	ldr	r3, [pc, #116]	; (8005d04 <HAL_RCC_OscConfig+0x788>)
 8005c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c90:	4a1c      	ldr	r2, [pc, #112]	; (8005d04 <HAL_RCC_OscConfig+0x788>)
 8005c92:	f043 0301 	orr.w	r3, r3, #1
 8005c96:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005c98:	4b1a      	ldr	r3, [pc, #104]	; (8005d04 <HAL_RCC_OscConfig+0x788>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	4a19      	ldr	r2, [pc, #100]	; (8005d04 <HAL_RCC_OscConfig+0x788>)
 8005c9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005ca2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ca4:	f7fc ffa2 	bl	8002bec <HAL_GetTick>
 8005ca8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005caa:	e008      	b.n	8005cbe <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005cac:	f7fc ff9e 	bl	8002bec <HAL_GetTick>
 8005cb0:	4602      	mov	r2, r0
 8005cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb4:	1ad3      	subs	r3, r2, r3
 8005cb6:	2b02      	cmp	r3, #2
 8005cb8:	d901      	bls.n	8005cbe <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8005cba:	2303      	movs	r3, #3
 8005cbc:	e067      	b.n	8005d8e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005cbe:	4b11      	ldr	r3, [pc, #68]	; (8005d04 <HAL_RCC_OscConfig+0x788>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d0f0      	beq.n	8005cac <HAL_RCC_OscConfig+0x730>
 8005cca:	e05f      	b.n	8005d8c <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ccc:	4b0d      	ldr	r3, [pc, #52]	; (8005d04 <HAL_RCC_OscConfig+0x788>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4a0c      	ldr	r2, [pc, #48]	; (8005d04 <HAL_RCC_OscConfig+0x788>)
 8005cd2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005cd6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cd8:	f7fc ff88 	bl	8002bec <HAL_GetTick>
 8005cdc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005cde:	e008      	b.n	8005cf2 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ce0:	f7fc ff84 	bl	8002bec <HAL_GetTick>
 8005ce4:	4602      	mov	r2, r0
 8005ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce8:	1ad3      	subs	r3, r2, r3
 8005cea:	2b02      	cmp	r3, #2
 8005cec:	d901      	bls.n	8005cf2 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8005cee:	2303      	movs	r3, #3
 8005cf0:	e04d      	b.n	8005d8e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005cf2:	4b04      	ldr	r3, [pc, #16]	; (8005d04 <HAL_RCC_OscConfig+0x788>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d1f0      	bne.n	8005ce0 <HAL_RCC_OscConfig+0x764>
 8005cfe:	e045      	b.n	8005d8c <HAL_RCC_OscConfig+0x810>
 8005d00:	58024800 	.word	0x58024800
 8005d04:	58024400 	.word	0x58024400
 8005d08:	fffffc0c 	.word	0xfffffc0c
 8005d0c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005d10:	4b21      	ldr	r3, [pc, #132]	; (8005d98 <HAL_RCC_OscConfig+0x81c>)
 8005d12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d14:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005d16:	4b20      	ldr	r3, [pc, #128]	; (8005d98 <HAL_RCC_OscConfig+0x81c>)
 8005d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d1a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d20:	2b01      	cmp	r3, #1
 8005d22:	d031      	beq.n	8005d88 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d24:	693b      	ldr	r3, [r7, #16]
 8005d26:	f003 0203 	and.w	r2, r3, #3
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d2e:	429a      	cmp	r2, r3
 8005d30:	d12a      	bne.n	8005d88 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005d32:	693b      	ldr	r3, [r7, #16]
 8005d34:	091b      	lsrs	r3, r3, #4
 8005d36:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d3e:	429a      	cmp	r2, r3
 8005d40:	d122      	bne.n	8005d88 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d4c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005d4e:	429a      	cmp	r2, r3
 8005d50:	d11a      	bne.n	8005d88 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	0a5b      	lsrs	r3, r3, #9
 8005d56:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d5e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005d60:	429a      	cmp	r2, r3
 8005d62:	d111      	bne.n	8005d88 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	0c1b      	lsrs	r3, r3, #16
 8005d68:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d70:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005d72:	429a      	cmp	r2, r3
 8005d74:	d108      	bne.n	8005d88 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	0e1b      	lsrs	r3, r3, #24
 8005d7a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d82:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005d84:	429a      	cmp	r2, r3
 8005d86:	d001      	beq.n	8005d8c <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8005d88:	2301      	movs	r3, #1
 8005d8a:	e000      	b.n	8005d8e <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8005d8c:	2300      	movs	r3, #0
}
 8005d8e:	4618      	mov	r0, r3
 8005d90:	3730      	adds	r7, #48	; 0x30
 8005d92:	46bd      	mov	sp, r7
 8005d94:	bd80      	pop	{r7, pc}
 8005d96:	bf00      	nop
 8005d98:	58024400 	.word	0x58024400

08005d9c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b086      	sub	sp, #24
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
 8005da4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d101      	bne.n	8005db0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005dac:	2301      	movs	r3, #1
 8005dae:	e19c      	b.n	80060ea <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005db0:	4b8a      	ldr	r3, [pc, #552]	; (8005fdc <HAL_RCC_ClockConfig+0x240>)
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f003 030f 	and.w	r3, r3, #15
 8005db8:	683a      	ldr	r2, [r7, #0]
 8005dba:	429a      	cmp	r2, r3
 8005dbc:	d910      	bls.n	8005de0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005dbe:	4b87      	ldr	r3, [pc, #540]	; (8005fdc <HAL_RCC_ClockConfig+0x240>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f023 020f 	bic.w	r2, r3, #15
 8005dc6:	4985      	ldr	r1, [pc, #532]	; (8005fdc <HAL_RCC_ClockConfig+0x240>)
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	4313      	orrs	r3, r2
 8005dcc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005dce:	4b83      	ldr	r3, [pc, #524]	; (8005fdc <HAL_RCC_ClockConfig+0x240>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f003 030f 	and.w	r3, r3, #15
 8005dd6:	683a      	ldr	r2, [r7, #0]
 8005dd8:	429a      	cmp	r2, r3
 8005dda:	d001      	beq.n	8005de0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005ddc:	2301      	movs	r3, #1
 8005dde:	e184      	b.n	80060ea <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f003 0304 	and.w	r3, r3, #4
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d010      	beq.n	8005e0e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	691a      	ldr	r2, [r3, #16]
 8005df0:	4b7b      	ldr	r3, [pc, #492]	; (8005fe0 <HAL_RCC_ClockConfig+0x244>)
 8005df2:	699b      	ldr	r3, [r3, #24]
 8005df4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005df8:	429a      	cmp	r2, r3
 8005dfa:	d908      	bls.n	8005e0e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005dfc:	4b78      	ldr	r3, [pc, #480]	; (8005fe0 <HAL_RCC_ClockConfig+0x244>)
 8005dfe:	699b      	ldr	r3, [r3, #24]
 8005e00:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	691b      	ldr	r3, [r3, #16]
 8005e08:	4975      	ldr	r1, [pc, #468]	; (8005fe0 <HAL_RCC_ClockConfig+0x244>)
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f003 0308 	and.w	r3, r3, #8
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d010      	beq.n	8005e3c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	695a      	ldr	r2, [r3, #20]
 8005e1e:	4b70      	ldr	r3, [pc, #448]	; (8005fe0 <HAL_RCC_ClockConfig+0x244>)
 8005e20:	69db      	ldr	r3, [r3, #28]
 8005e22:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005e26:	429a      	cmp	r2, r3
 8005e28:	d908      	bls.n	8005e3c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005e2a:	4b6d      	ldr	r3, [pc, #436]	; (8005fe0 <HAL_RCC_ClockConfig+0x244>)
 8005e2c:	69db      	ldr	r3, [r3, #28]
 8005e2e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	695b      	ldr	r3, [r3, #20]
 8005e36:	496a      	ldr	r1, [pc, #424]	; (8005fe0 <HAL_RCC_ClockConfig+0x244>)
 8005e38:	4313      	orrs	r3, r2
 8005e3a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f003 0310 	and.w	r3, r3, #16
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d010      	beq.n	8005e6a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	699a      	ldr	r2, [r3, #24]
 8005e4c:	4b64      	ldr	r3, [pc, #400]	; (8005fe0 <HAL_RCC_ClockConfig+0x244>)
 8005e4e:	69db      	ldr	r3, [r3, #28]
 8005e50:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005e54:	429a      	cmp	r2, r3
 8005e56:	d908      	bls.n	8005e6a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005e58:	4b61      	ldr	r3, [pc, #388]	; (8005fe0 <HAL_RCC_ClockConfig+0x244>)
 8005e5a:	69db      	ldr	r3, [r3, #28]
 8005e5c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	699b      	ldr	r3, [r3, #24]
 8005e64:	495e      	ldr	r1, [pc, #376]	; (8005fe0 <HAL_RCC_ClockConfig+0x244>)
 8005e66:	4313      	orrs	r3, r2
 8005e68:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f003 0320 	and.w	r3, r3, #32
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d010      	beq.n	8005e98 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	69da      	ldr	r2, [r3, #28]
 8005e7a:	4b59      	ldr	r3, [pc, #356]	; (8005fe0 <HAL_RCC_ClockConfig+0x244>)
 8005e7c:	6a1b      	ldr	r3, [r3, #32]
 8005e7e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005e82:	429a      	cmp	r2, r3
 8005e84:	d908      	bls.n	8005e98 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005e86:	4b56      	ldr	r3, [pc, #344]	; (8005fe0 <HAL_RCC_ClockConfig+0x244>)
 8005e88:	6a1b      	ldr	r3, [r3, #32]
 8005e8a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	69db      	ldr	r3, [r3, #28]
 8005e92:	4953      	ldr	r1, [pc, #332]	; (8005fe0 <HAL_RCC_ClockConfig+0x244>)
 8005e94:	4313      	orrs	r3, r2
 8005e96:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f003 0302 	and.w	r3, r3, #2
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d010      	beq.n	8005ec6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	68da      	ldr	r2, [r3, #12]
 8005ea8:	4b4d      	ldr	r3, [pc, #308]	; (8005fe0 <HAL_RCC_ClockConfig+0x244>)
 8005eaa:	699b      	ldr	r3, [r3, #24]
 8005eac:	f003 030f 	and.w	r3, r3, #15
 8005eb0:	429a      	cmp	r2, r3
 8005eb2:	d908      	bls.n	8005ec6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005eb4:	4b4a      	ldr	r3, [pc, #296]	; (8005fe0 <HAL_RCC_ClockConfig+0x244>)
 8005eb6:	699b      	ldr	r3, [r3, #24]
 8005eb8:	f023 020f 	bic.w	r2, r3, #15
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	68db      	ldr	r3, [r3, #12]
 8005ec0:	4947      	ldr	r1, [pc, #284]	; (8005fe0 <HAL_RCC_ClockConfig+0x244>)
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f003 0301 	and.w	r3, r3, #1
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d055      	beq.n	8005f7e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005ed2:	4b43      	ldr	r3, [pc, #268]	; (8005fe0 <HAL_RCC_ClockConfig+0x244>)
 8005ed4:	699b      	ldr	r3, [r3, #24]
 8005ed6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	689b      	ldr	r3, [r3, #8]
 8005ede:	4940      	ldr	r1, [pc, #256]	; (8005fe0 <HAL_RCC_ClockConfig+0x244>)
 8005ee0:	4313      	orrs	r3, r2
 8005ee2:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	685b      	ldr	r3, [r3, #4]
 8005ee8:	2b02      	cmp	r3, #2
 8005eea:	d107      	bne.n	8005efc <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005eec:	4b3c      	ldr	r3, [pc, #240]	; (8005fe0 <HAL_RCC_ClockConfig+0x244>)
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d121      	bne.n	8005f3c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005ef8:	2301      	movs	r3, #1
 8005efa:	e0f6      	b.n	80060ea <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	685b      	ldr	r3, [r3, #4]
 8005f00:	2b03      	cmp	r3, #3
 8005f02:	d107      	bne.n	8005f14 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005f04:	4b36      	ldr	r3, [pc, #216]	; (8005fe0 <HAL_RCC_ClockConfig+0x244>)
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d115      	bne.n	8005f3c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005f10:	2301      	movs	r3, #1
 8005f12:	e0ea      	b.n	80060ea <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	685b      	ldr	r3, [r3, #4]
 8005f18:	2b01      	cmp	r3, #1
 8005f1a:	d107      	bne.n	8005f2c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005f1c:	4b30      	ldr	r3, [pc, #192]	; (8005fe0 <HAL_RCC_ClockConfig+0x244>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d109      	bne.n	8005f3c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005f28:	2301      	movs	r3, #1
 8005f2a:	e0de      	b.n	80060ea <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005f2c:	4b2c      	ldr	r3, [pc, #176]	; (8005fe0 <HAL_RCC_ClockConfig+0x244>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f003 0304 	and.w	r3, r3, #4
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d101      	bne.n	8005f3c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005f38:	2301      	movs	r3, #1
 8005f3a:	e0d6      	b.n	80060ea <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005f3c:	4b28      	ldr	r3, [pc, #160]	; (8005fe0 <HAL_RCC_ClockConfig+0x244>)
 8005f3e:	691b      	ldr	r3, [r3, #16]
 8005f40:	f023 0207 	bic.w	r2, r3, #7
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	685b      	ldr	r3, [r3, #4]
 8005f48:	4925      	ldr	r1, [pc, #148]	; (8005fe0 <HAL_RCC_ClockConfig+0x244>)
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f4e:	f7fc fe4d 	bl	8002bec <HAL_GetTick>
 8005f52:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f54:	e00a      	b.n	8005f6c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f56:	f7fc fe49 	bl	8002bec <HAL_GetTick>
 8005f5a:	4602      	mov	r2, r0
 8005f5c:	697b      	ldr	r3, [r7, #20]
 8005f5e:	1ad3      	subs	r3, r2, r3
 8005f60:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d901      	bls.n	8005f6c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8005f68:	2303      	movs	r3, #3
 8005f6a:	e0be      	b.n	80060ea <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f6c:	4b1c      	ldr	r3, [pc, #112]	; (8005fe0 <HAL_RCC_ClockConfig+0x244>)
 8005f6e:	691b      	ldr	r3, [r3, #16]
 8005f70:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	685b      	ldr	r3, [r3, #4]
 8005f78:	00db      	lsls	r3, r3, #3
 8005f7a:	429a      	cmp	r2, r3
 8005f7c:	d1eb      	bne.n	8005f56 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f003 0302 	and.w	r3, r3, #2
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d010      	beq.n	8005fac <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	68da      	ldr	r2, [r3, #12]
 8005f8e:	4b14      	ldr	r3, [pc, #80]	; (8005fe0 <HAL_RCC_ClockConfig+0x244>)
 8005f90:	699b      	ldr	r3, [r3, #24]
 8005f92:	f003 030f 	and.w	r3, r3, #15
 8005f96:	429a      	cmp	r2, r3
 8005f98:	d208      	bcs.n	8005fac <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005f9a:	4b11      	ldr	r3, [pc, #68]	; (8005fe0 <HAL_RCC_ClockConfig+0x244>)
 8005f9c:	699b      	ldr	r3, [r3, #24]
 8005f9e:	f023 020f 	bic.w	r2, r3, #15
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	68db      	ldr	r3, [r3, #12]
 8005fa6:	490e      	ldr	r1, [pc, #56]	; (8005fe0 <HAL_RCC_ClockConfig+0x244>)
 8005fa8:	4313      	orrs	r3, r2
 8005faa:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005fac:	4b0b      	ldr	r3, [pc, #44]	; (8005fdc <HAL_RCC_ClockConfig+0x240>)
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f003 030f 	and.w	r3, r3, #15
 8005fb4:	683a      	ldr	r2, [r7, #0]
 8005fb6:	429a      	cmp	r2, r3
 8005fb8:	d214      	bcs.n	8005fe4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005fba:	4b08      	ldr	r3, [pc, #32]	; (8005fdc <HAL_RCC_ClockConfig+0x240>)
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f023 020f 	bic.w	r2, r3, #15
 8005fc2:	4906      	ldr	r1, [pc, #24]	; (8005fdc <HAL_RCC_ClockConfig+0x240>)
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	4313      	orrs	r3, r2
 8005fc8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005fca:	4b04      	ldr	r3, [pc, #16]	; (8005fdc <HAL_RCC_ClockConfig+0x240>)
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f003 030f 	and.w	r3, r3, #15
 8005fd2:	683a      	ldr	r2, [r7, #0]
 8005fd4:	429a      	cmp	r2, r3
 8005fd6:	d005      	beq.n	8005fe4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005fd8:	2301      	movs	r3, #1
 8005fda:	e086      	b.n	80060ea <HAL_RCC_ClockConfig+0x34e>
 8005fdc:	52002000 	.word	0x52002000
 8005fe0:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f003 0304 	and.w	r3, r3, #4
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d010      	beq.n	8006012 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	691a      	ldr	r2, [r3, #16]
 8005ff4:	4b3f      	ldr	r3, [pc, #252]	; (80060f4 <HAL_RCC_ClockConfig+0x358>)
 8005ff6:	699b      	ldr	r3, [r3, #24]
 8005ff8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005ffc:	429a      	cmp	r2, r3
 8005ffe:	d208      	bcs.n	8006012 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006000:	4b3c      	ldr	r3, [pc, #240]	; (80060f4 <HAL_RCC_ClockConfig+0x358>)
 8006002:	699b      	ldr	r3, [r3, #24]
 8006004:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	691b      	ldr	r3, [r3, #16]
 800600c:	4939      	ldr	r1, [pc, #228]	; (80060f4 <HAL_RCC_ClockConfig+0x358>)
 800600e:	4313      	orrs	r3, r2
 8006010:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f003 0308 	and.w	r3, r3, #8
 800601a:	2b00      	cmp	r3, #0
 800601c:	d010      	beq.n	8006040 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	695a      	ldr	r2, [r3, #20]
 8006022:	4b34      	ldr	r3, [pc, #208]	; (80060f4 <HAL_RCC_ClockConfig+0x358>)
 8006024:	69db      	ldr	r3, [r3, #28]
 8006026:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800602a:	429a      	cmp	r2, r3
 800602c:	d208      	bcs.n	8006040 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800602e:	4b31      	ldr	r3, [pc, #196]	; (80060f4 <HAL_RCC_ClockConfig+0x358>)
 8006030:	69db      	ldr	r3, [r3, #28]
 8006032:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	695b      	ldr	r3, [r3, #20]
 800603a:	492e      	ldr	r1, [pc, #184]	; (80060f4 <HAL_RCC_ClockConfig+0x358>)
 800603c:	4313      	orrs	r3, r2
 800603e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f003 0310 	and.w	r3, r3, #16
 8006048:	2b00      	cmp	r3, #0
 800604a:	d010      	beq.n	800606e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	699a      	ldr	r2, [r3, #24]
 8006050:	4b28      	ldr	r3, [pc, #160]	; (80060f4 <HAL_RCC_ClockConfig+0x358>)
 8006052:	69db      	ldr	r3, [r3, #28]
 8006054:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006058:	429a      	cmp	r2, r3
 800605a:	d208      	bcs.n	800606e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800605c:	4b25      	ldr	r3, [pc, #148]	; (80060f4 <HAL_RCC_ClockConfig+0x358>)
 800605e:	69db      	ldr	r3, [r3, #28]
 8006060:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	699b      	ldr	r3, [r3, #24]
 8006068:	4922      	ldr	r1, [pc, #136]	; (80060f4 <HAL_RCC_ClockConfig+0x358>)
 800606a:	4313      	orrs	r3, r2
 800606c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f003 0320 	and.w	r3, r3, #32
 8006076:	2b00      	cmp	r3, #0
 8006078:	d010      	beq.n	800609c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	69da      	ldr	r2, [r3, #28]
 800607e:	4b1d      	ldr	r3, [pc, #116]	; (80060f4 <HAL_RCC_ClockConfig+0x358>)
 8006080:	6a1b      	ldr	r3, [r3, #32]
 8006082:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006086:	429a      	cmp	r2, r3
 8006088:	d208      	bcs.n	800609c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800608a:	4b1a      	ldr	r3, [pc, #104]	; (80060f4 <HAL_RCC_ClockConfig+0x358>)
 800608c:	6a1b      	ldr	r3, [r3, #32]
 800608e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	69db      	ldr	r3, [r3, #28]
 8006096:	4917      	ldr	r1, [pc, #92]	; (80060f4 <HAL_RCC_ClockConfig+0x358>)
 8006098:	4313      	orrs	r3, r2
 800609a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800609c:	f000 f834 	bl	8006108 <HAL_RCC_GetSysClockFreq>
 80060a0:	4602      	mov	r2, r0
 80060a2:	4b14      	ldr	r3, [pc, #80]	; (80060f4 <HAL_RCC_ClockConfig+0x358>)
 80060a4:	699b      	ldr	r3, [r3, #24]
 80060a6:	0a1b      	lsrs	r3, r3, #8
 80060a8:	f003 030f 	and.w	r3, r3, #15
 80060ac:	4912      	ldr	r1, [pc, #72]	; (80060f8 <HAL_RCC_ClockConfig+0x35c>)
 80060ae:	5ccb      	ldrb	r3, [r1, r3]
 80060b0:	f003 031f 	and.w	r3, r3, #31
 80060b4:	fa22 f303 	lsr.w	r3, r2, r3
 80060b8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80060ba:	4b0e      	ldr	r3, [pc, #56]	; (80060f4 <HAL_RCC_ClockConfig+0x358>)
 80060bc:	699b      	ldr	r3, [r3, #24]
 80060be:	f003 030f 	and.w	r3, r3, #15
 80060c2:	4a0d      	ldr	r2, [pc, #52]	; (80060f8 <HAL_RCC_ClockConfig+0x35c>)
 80060c4:	5cd3      	ldrb	r3, [r2, r3]
 80060c6:	f003 031f 	and.w	r3, r3, #31
 80060ca:	693a      	ldr	r2, [r7, #16]
 80060cc:	fa22 f303 	lsr.w	r3, r2, r3
 80060d0:	4a0a      	ldr	r2, [pc, #40]	; (80060fc <HAL_RCC_ClockConfig+0x360>)
 80060d2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80060d4:	4a0a      	ldr	r2, [pc, #40]	; (8006100 <HAL_RCC_ClockConfig+0x364>)
 80060d6:	693b      	ldr	r3, [r7, #16]
 80060d8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80060da:	4b0a      	ldr	r3, [pc, #40]	; (8006104 <HAL_RCC_ClockConfig+0x368>)
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	4618      	mov	r0, r3
 80060e0:	f7fc f9a4 	bl	800242c <HAL_InitTick>
 80060e4:	4603      	mov	r3, r0
 80060e6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80060e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80060ea:	4618      	mov	r0, r3
 80060ec:	3718      	adds	r7, #24
 80060ee:	46bd      	mov	sp, r7
 80060f0:	bd80      	pop	{r7, pc}
 80060f2:	bf00      	nop
 80060f4:	58024400 	.word	0x58024400
 80060f8:	08026fe0 	.word	0x08026fe0
 80060fc:	240002d0 	.word	0x240002d0
 8006100:	240002cc 	.word	0x240002cc
 8006104:	240002d4 	.word	0x240002d4

08006108 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006108:	b480      	push	{r7}
 800610a:	b089      	sub	sp, #36	; 0x24
 800610c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800610e:	4bb3      	ldr	r3, [pc, #716]	; (80063dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006110:	691b      	ldr	r3, [r3, #16]
 8006112:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006116:	2b18      	cmp	r3, #24
 8006118:	f200 8155 	bhi.w	80063c6 <HAL_RCC_GetSysClockFreq+0x2be>
 800611c:	a201      	add	r2, pc, #4	; (adr r2, 8006124 <HAL_RCC_GetSysClockFreq+0x1c>)
 800611e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006122:	bf00      	nop
 8006124:	08006189 	.word	0x08006189
 8006128:	080063c7 	.word	0x080063c7
 800612c:	080063c7 	.word	0x080063c7
 8006130:	080063c7 	.word	0x080063c7
 8006134:	080063c7 	.word	0x080063c7
 8006138:	080063c7 	.word	0x080063c7
 800613c:	080063c7 	.word	0x080063c7
 8006140:	080063c7 	.word	0x080063c7
 8006144:	080061af 	.word	0x080061af
 8006148:	080063c7 	.word	0x080063c7
 800614c:	080063c7 	.word	0x080063c7
 8006150:	080063c7 	.word	0x080063c7
 8006154:	080063c7 	.word	0x080063c7
 8006158:	080063c7 	.word	0x080063c7
 800615c:	080063c7 	.word	0x080063c7
 8006160:	080063c7 	.word	0x080063c7
 8006164:	080061b5 	.word	0x080061b5
 8006168:	080063c7 	.word	0x080063c7
 800616c:	080063c7 	.word	0x080063c7
 8006170:	080063c7 	.word	0x080063c7
 8006174:	080063c7 	.word	0x080063c7
 8006178:	080063c7 	.word	0x080063c7
 800617c:	080063c7 	.word	0x080063c7
 8006180:	080063c7 	.word	0x080063c7
 8006184:	080061bb 	.word	0x080061bb
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006188:	4b94      	ldr	r3, [pc, #592]	; (80063dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f003 0320 	and.w	r3, r3, #32
 8006190:	2b00      	cmp	r3, #0
 8006192:	d009      	beq.n	80061a8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006194:	4b91      	ldr	r3, [pc, #580]	; (80063dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	08db      	lsrs	r3, r3, #3
 800619a:	f003 0303 	and.w	r3, r3, #3
 800619e:	4a90      	ldr	r2, [pc, #576]	; (80063e0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80061a0:	fa22 f303 	lsr.w	r3, r2, r3
 80061a4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80061a6:	e111      	b.n	80063cc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80061a8:	4b8d      	ldr	r3, [pc, #564]	; (80063e0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80061aa:	61bb      	str	r3, [r7, #24]
    break;
 80061ac:	e10e      	b.n	80063cc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80061ae:	4b8d      	ldr	r3, [pc, #564]	; (80063e4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80061b0:	61bb      	str	r3, [r7, #24]
    break;
 80061b2:	e10b      	b.n	80063cc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80061b4:	4b8c      	ldr	r3, [pc, #560]	; (80063e8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80061b6:	61bb      	str	r3, [r7, #24]
    break;
 80061b8:	e108      	b.n	80063cc <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80061ba:	4b88      	ldr	r3, [pc, #544]	; (80063dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80061bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061be:	f003 0303 	and.w	r3, r3, #3
 80061c2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80061c4:	4b85      	ldr	r3, [pc, #532]	; (80063dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80061c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061c8:	091b      	lsrs	r3, r3, #4
 80061ca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80061ce:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80061d0:	4b82      	ldr	r3, [pc, #520]	; (80063dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80061d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061d4:	f003 0301 	and.w	r3, r3, #1
 80061d8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80061da:	4b80      	ldr	r3, [pc, #512]	; (80063dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80061dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061de:	08db      	lsrs	r3, r3, #3
 80061e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80061e4:	68fa      	ldr	r2, [r7, #12]
 80061e6:	fb02 f303 	mul.w	r3, r2, r3
 80061ea:	ee07 3a90 	vmov	s15, r3
 80061ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061f2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80061f6:	693b      	ldr	r3, [r7, #16]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	f000 80e1 	beq.w	80063c0 <HAL_RCC_GetSysClockFreq+0x2b8>
 80061fe:	697b      	ldr	r3, [r7, #20]
 8006200:	2b02      	cmp	r3, #2
 8006202:	f000 8083 	beq.w	800630c <HAL_RCC_GetSysClockFreq+0x204>
 8006206:	697b      	ldr	r3, [r7, #20]
 8006208:	2b02      	cmp	r3, #2
 800620a:	f200 80a1 	bhi.w	8006350 <HAL_RCC_GetSysClockFreq+0x248>
 800620e:	697b      	ldr	r3, [r7, #20]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d003      	beq.n	800621c <HAL_RCC_GetSysClockFreq+0x114>
 8006214:	697b      	ldr	r3, [r7, #20]
 8006216:	2b01      	cmp	r3, #1
 8006218:	d056      	beq.n	80062c8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800621a:	e099      	b.n	8006350 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800621c:	4b6f      	ldr	r3, [pc, #444]	; (80063dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f003 0320 	and.w	r3, r3, #32
 8006224:	2b00      	cmp	r3, #0
 8006226:	d02d      	beq.n	8006284 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006228:	4b6c      	ldr	r3, [pc, #432]	; (80063dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	08db      	lsrs	r3, r3, #3
 800622e:	f003 0303 	and.w	r3, r3, #3
 8006232:	4a6b      	ldr	r2, [pc, #428]	; (80063e0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006234:	fa22 f303 	lsr.w	r3, r2, r3
 8006238:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	ee07 3a90 	vmov	s15, r3
 8006240:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006244:	693b      	ldr	r3, [r7, #16]
 8006246:	ee07 3a90 	vmov	s15, r3
 800624a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800624e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006252:	4b62      	ldr	r3, [pc, #392]	; (80063dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006256:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800625a:	ee07 3a90 	vmov	s15, r3
 800625e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006262:	ed97 6a02 	vldr	s12, [r7, #8]
 8006266:	eddf 5a61 	vldr	s11, [pc, #388]	; 80063ec <HAL_RCC_GetSysClockFreq+0x2e4>
 800626a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800626e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006272:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006276:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800627a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800627e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8006282:	e087      	b.n	8006394 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006284:	693b      	ldr	r3, [r7, #16]
 8006286:	ee07 3a90 	vmov	s15, r3
 800628a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800628e:	eddf 6a58 	vldr	s13, [pc, #352]	; 80063f0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8006292:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006296:	4b51      	ldr	r3, [pc, #324]	; (80063dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800629a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800629e:	ee07 3a90 	vmov	s15, r3
 80062a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80062aa:	eddf 5a50 	vldr	s11, [pc, #320]	; 80063ec <HAL_RCC_GetSysClockFreq+0x2e4>
 80062ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80062b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80062b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80062ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80062be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80062c6:	e065      	b.n	8006394 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80062c8:	693b      	ldr	r3, [r7, #16]
 80062ca:	ee07 3a90 	vmov	s15, r3
 80062ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062d2:	eddf 6a48 	vldr	s13, [pc, #288]	; 80063f4 <HAL_RCC_GetSysClockFreq+0x2ec>
 80062d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062da:	4b40      	ldr	r3, [pc, #256]	; (80063dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80062dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062e2:	ee07 3a90 	vmov	s15, r3
 80062e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80062ee:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80063ec <HAL_RCC_GetSysClockFreq+0x2e4>
 80062f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80062f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80062fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80062fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006302:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006306:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800630a:	e043      	b.n	8006394 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800630c:	693b      	ldr	r3, [r7, #16]
 800630e:	ee07 3a90 	vmov	s15, r3
 8006312:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006316:	eddf 6a38 	vldr	s13, [pc, #224]	; 80063f8 <HAL_RCC_GetSysClockFreq+0x2f0>
 800631a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800631e:	4b2f      	ldr	r3, [pc, #188]	; (80063dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006322:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006326:	ee07 3a90 	vmov	s15, r3
 800632a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800632e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006332:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80063ec <HAL_RCC_GetSysClockFreq+0x2e4>
 8006336:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800633a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800633e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006342:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006346:	ee67 7a27 	vmul.f32	s15, s14, s15
 800634a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800634e:	e021      	b.n	8006394 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006350:	693b      	ldr	r3, [r7, #16]
 8006352:	ee07 3a90 	vmov	s15, r3
 8006356:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800635a:	eddf 6a26 	vldr	s13, [pc, #152]	; 80063f4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800635e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006362:	4b1e      	ldr	r3, [pc, #120]	; (80063dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006366:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800636a:	ee07 3a90 	vmov	s15, r3
 800636e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006372:	ed97 6a02 	vldr	s12, [r7, #8]
 8006376:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80063ec <HAL_RCC_GetSysClockFreq+0x2e4>
 800637a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800637e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006382:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006386:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800638a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800638e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006392:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8006394:	4b11      	ldr	r3, [pc, #68]	; (80063dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006398:	0a5b      	lsrs	r3, r3, #9
 800639a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800639e:	3301      	adds	r3, #1
 80063a0:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	ee07 3a90 	vmov	s15, r3
 80063a8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80063ac:	edd7 6a07 	vldr	s13, [r7, #28]
 80063b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80063b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80063b8:	ee17 3a90 	vmov	r3, s15
 80063bc:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80063be:	e005      	b.n	80063cc <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80063c0:	2300      	movs	r3, #0
 80063c2:	61bb      	str	r3, [r7, #24]
    break;
 80063c4:	e002      	b.n	80063cc <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80063c6:	4b07      	ldr	r3, [pc, #28]	; (80063e4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80063c8:	61bb      	str	r3, [r7, #24]
    break;
 80063ca:	bf00      	nop
  }

  return sysclockfreq;
 80063cc:	69bb      	ldr	r3, [r7, #24]
}
 80063ce:	4618      	mov	r0, r3
 80063d0:	3724      	adds	r7, #36	; 0x24
 80063d2:	46bd      	mov	sp, r7
 80063d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d8:	4770      	bx	lr
 80063da:	bf00      	nop
 80063dc:	58024400 	.word	0x58024400
 80063e0:	03d09000 	.word	0x03d09000
 80063e4:	003d0900 	.word	0x003d0900
 80063e8:	007a1200 	.word	0x007a1200
 80063ec:	46000000 	.word	0x46000000
 80063f0:	4c742400 	.word	0x4c742400
 80063f4:	4a742400 	.word	0x4a742400
 80063f8:	4af42400 	.word	0x4af42400

080063fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b082      	sub	sp, #8
 8006400:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006402:	f7ff fe81 	bl	8006108 <HAL_RCC_GetSysClockFreq>
 8006406:	4602      	mov	r2, r0
 8006408:	4b10      	ldr	r3, [pc, #64]	; (800644c <HAL_RCC_GetHCLKFreq+0x50>)
 800640a:	699b      	ldr	r3, [r3, #24]
 800640c:	0a1b      	lsrs	r3, r3, #8
 800640e:	f003 030f 	and.w	r3, r3, #15
 8006412:	490f      	ldr	r1, [pc, #60]	; (8006450 <HAL_RCC_GetHCLKFreq+0x54>)
 8006414:	5ccb      	ldrb	r3, [r1, r3]
 8006416:	f003 031f 	and.w	r3, r3, #31
 800641a:	fa22 f303 	lsr.w	r3, r2, r3
 800641e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006420:	4b0a      	ldr	r3, [pc, #40]	; (800644c <HAL_RCC_GetHCLKFreq+0x50>)
 8006422:	699b      	ldr	r3, [r3, #24]
 8006424:	f003 030f 	and.w	r3, r3, #15
 8006428:	4a09      	ldr	r2, [pc, #36]	; (8006450 <HAL_RCC_GetHCLKFreq+0x54>)
 800642a:	5cd3      	ldrb	r3, [r2, r3]
 800642c:	f003 031f 	and.w	r3, r3, #31
 8006430:	687a      	ldr	r2, [r7, #4]
 8006432:	fa22 f303 	lsr.w	r3, r2, r3
 8006436:	4a07      	ldr	r2, [pc, #28]	; (8006454 <HAL_RCC_GetHCLKFreq+0x58>)
 8006438:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800643a:	4a07      	ldr	r2, [pc, #28]	; (8006458 <HAL_RCC_GetHCLKFreq+0x5c>)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006440:	4b04      	ldr	r3, [pc, #16]	; (8006454 <HAL_RCC_GetHCLKFreq+0x58>)
 8006442:	681b      	ldr	r3, [r3, #0]
}
 8006444:	4618      	mov	r0, r3
 8006446:	3708      	adds	r7, #8
 8006448:	46bd      	mov	sp, r7
 800644a:	bd80      	pop	{r7, pc}
 800644c:	58024400 	.word	0x58024400
 8006450:	08026fe0 	.word	0x08026fe0
 8006454:	240002d0 	.word	0x240002d0
 8006458:	240002cc 	.word	0x240002cc

0800645c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006460:	f7ff ffcc 	bl	80063fc <HAL_RCC_GetHCLKFreq>
 8006464:	4602      	mov	r2, r0
 8006466:	4b06      	ldr	r3, [pc, #24]	; (8006480 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006468:	69db      	ldr	r3, [r3, #28]
 800646a:	091b      	lsrs	r3, r3, #4
 800646c:	f003 0307 	and.w	r3, r3, #7
 8006470:	4904      	ldr	r1, [pc, #16]	; (8006484 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006472:	5ccb      	ldrb	r3, [r1, r3]
 8006474:	f003 031f 	and.w	r3, r3, #31
 8006478:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800647c:	4618      	mov	r0, r3
 800647e:	bd80      	pop	{r7, pc}
 8006480:	58024400 	.word	0x58024400
 8006484:	08026fe0 	.word	0x08026fe0

08006488 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006488:	b580      	push	{r7, lr}
 800648a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800648c:	f7ff ffb6 	bl	80063fc <HAL_RCC_GetHCLKFreq>
 8006490:	4602      	mov	r2, r0
 8006492:	4b06      	ldr	r3, [pc, #24]	; (80064ac <HAL_RCC_GetPCLK2Freq+0x24>)
 8006494:	69db      	ldr	r3, [r3, #28]
 8006496:	0a1b      	lsrs	r3, r3, #8
 8006498:	f003 0307 	and.w	r3, r3, #7
 800649c:	4904      	ldr	r1, [pc, #16]	; (80064b0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800649e:	5ccb      	ldrb	r3, [r1, r3]
 80064a0:	f003 031f 	and.w	r3, r3, #31
 80064a4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80064a8:	4618      	mov	r0, r3
 80064aa:	bd80      	pop	{r7, pc}
 80064ac:	58024400 	.word	0x58024400
 80064b0:	08026fe0 	.word	0x08026fe0

080064b4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80064b4:	b480      	push	{r7}
 80064b6:	b083      	sub	sp, #12
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
 80064bc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	223f      	movs	r2, #63	; 0x3f
 80064c2:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80064c4:	4b1a      	ldr	r3, [pc, #104]	; (8006530 <HAL_RCC_GetClockConfig+0x7c>)
 80064c6:	691b      	ldr	r3, [r3, #16]
 80064c8:	f003 0207 	and.w	r2, r3, #7
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80064d0:	4b17      	ldr	r3, [pc, #92]	; (8006530 <HAL_RCC_GetClockConfig+0x7c>)
 80064d2:	699b      	ldr	r3, [r3, #24]
 80064d4:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80064dc:	4b14      	ldr	r3, [pc, #80]	; (8006530 <HAL_RCC_GetClockConfig+0x7c>)
 80064de:	699b      	ldr	r3, [r3, #24]
 80064e0:	f003 020f 	and.w	r2, r3, #15
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80064e8:	4b11      	ldr	r3, [pc, #68]	; (8006530 <HAL_RCC_GetClockConfig+0x7c>)
 80064ea:	699b      	ldr	r3, [r3, #24]
 80064ec:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80064f4:	4b0e      	ldr	r3, [pc, #56]	; (8006530 <HAL_RCC_GetClockConfig+0x7c>)
 80064f6:	69db      	ldr	r3, [r3, #28]
 80064f8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8006500:	4b0b      	ldr	r3, [pc, #44]	; (8006530 <HAL_RCC_GetClockConfig+0x7c>)
 8006502:	69db      	ldr	r3, [r3, #28]
 8006504:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800650c:	4b08      	ldr	r3, [pc, #32]	; (8006530 <HAL_RCC_GetClockConfig+0x7c>)
 800650e:	6a1b      	ldr	r3, [r3, #32]
 8006510:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006518:	4b06      	ldr	r3, [pc, #24]	; (8006534 <HAL_RCC_GetClockConfig+0x80>)
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f003 020f 	and.w	r2, r3, #15
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	601a      	str	r2, [r3, #0]
}
 8006524:	bf00      	nop
 8006526:	370c      	adds	r7, #12
 8006528:	46bd      	mov	sp, r7
 800652a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652e:	4770      	bx	lr
 8006530:	58024400 	.word	0x58024400
 8006534:	52002000 	.word	0x52002000

08006538 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b086      	sub	sp, #24
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006540:	2300      	movs	r3, #0
 8006542:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006544:	2300      	movs	r3, #0
 8006546:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006550:	2b00      	cmp	r3, #0
 8006552:	d03f      	beq.n	80065d4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006558:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800655c:	d02a      	beq.n	80065b4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800655e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006562:	d824      	bhi.n	80065ae <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006564:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006568:	d018      	beq.n	800659c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800656a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800656e:	d81e      	bhi.n	80065ae <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006570:	2b00      	cmp	r3, #0
 8006572:	d003      	beq.n	800657c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006574:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006578:	d007      	beq.n	800658a <HAL_RCCEx_PeriphCLKConfig+0x52>
 800657a:	e018      	b.n	80065ae <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800657c:	4bab      	ldr	r3, [pc, #684]	; (800682c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800657e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006580:	4aaa      	ldr	r2, [pc, #680]	; (800682c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006582:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006586:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006588:	e015      	b.n	80065b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	3304      	adds	r3, #4
 800658e:	2102      	movs	r1, #2
 8006590:	4618      	mov	r0, r3
 8006592:	f001 f9cf 	bl	8007934 <RCCEx_PLL2_Config>
 8006596:	4603      	mov	r3, r0
 8006598:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800659a:	e00c      	b.n	80065b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	3324      	adds	r3, #36	; 0x24
 80065a0:	2102      	movs	r1, #2
 80065a2:	4618      	mov	r0, r3
 80065a4:	f001 fa78 	bl	8007a98 <RCCEx_PLL3_Config>
 80065a8:	4603      	mov	r3, r0
 80065aa:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80065ac:	e003      	b.n	80065b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80065ae:	2301      	movs	r3, #1
 80065b0:	75fb      	strb	r3, [r7, #23]
      break;
 80065b2:	e000      	b.n	80065b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80065b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80065b6:	7dfb      	ldrb	r3, [r7, #23]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d109      	bne.n	80065d0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80065bc:	4b9b      	ldr	r3, [pc, #620]	; (800682c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80065be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065c0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80065c8:	4998      	ldr	r1, [pc, #608]	; (800682c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80065ca:	4313      	orrs	r3, r2
 80065cc:	650b      	str	r3, [r1, #80]	; 0x50
 80065ce:	e001      	b.n	80065d4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065d0:	7dfb      	ldrb	r3, [r7, #23]
 80065d2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d03d      	beq.n	800665c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065e4:	2b04      	cmp	r3, #4
 80065e6:	d826      	bhi.n	8006636 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80065e8:	a201      	add	r2, pc, #4	; (adr r2, 80065f0 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80065ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065ee:	bf00      	nop
 80065f0:	08006605 	.word	0x08006605
 80065f4:	08006613 	.word	0x08006613
 80065f8:	08006625 	.word	0x08006625
 80065fc:	0800663d 	.word	0x0800663d
 8006600:	0800663d 	.word	0x0800663d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006604:	4b89      	ldr	r3, [pc, #548]	; (800682c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006608:	4a88      	ldr	r2, [pc, #544]	; (800682c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800660a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800660e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006610:	e015      	b.n	800663e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	3304      	adds	r3, #4
 8006616:	2100      	movs	r1, #0
 8006618:	4618      	mov	r0, r3
 800661a:	f001 f98b 	bl	8007934 <RCCEx_PLL2_Config>
 800661e:	4603      	mov	r3, r0
 8006620:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006622:	e00c      	b.n	800663e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	3324      	adds	r3, #36	; 0x24
 8006628:	2100      	movs	r1, #0
 800662a:	4618      	mov	r0, r3
 800662c:	f001 fa34 	bl	8007a98 <RCCEx_PLL3_Config>
 8006630:	4603      	mov	r3, r0
 8006632:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006634:	e003      	b.n	800663e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006636:	2301      	movs	r3, #1
 8006638:	75fb      	strb	r3, [r7, #23]
      break;
 800663a:	e000      	b.n	800663e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800663c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800663e:	7dfb      	ldrb	r3, [r7, #23]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d109      	bne.n	8006658 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006644:	4b79      	ldr	r3, [pc, #484]	; (800682c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006646:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006648:	f023 0207 	bic.w	r2, r3, #7
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006650:	4976      	ldr	r1, [pc, #472]	; (800682c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006652:	4313      	orrs	r3, r2
 8006654:	650b      	str	r3, [r1, #80]	; 0x50
 8006656:	e001      	b.n	800665c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006658:	7dfb      	ldrb	r3, [r7, #23]
 800665a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006664:	2b00      	cmp	r3, #0
 8006666:	d042      	beq.n	80066ee <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800666c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006670:	d02b      	beq.n	80066ca <HAL_RCCEx_PeriphCLKConfig+0x192>
 8006672:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006676:	d825      	bhi.n	80066c4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006678:	2bc0      	cmp	r3, #192	; 0xc0
 800667a:	d028      	beq.n	80066ce <HAL_RCCEx_PeriphCLKConfig+0x196>
 800667c:	2bc0      	cmp	r3, #192	; 0xc0
 800667e:	d821      	bhi.n	80066c4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006680:	2b80      	cmp	r3, #128	; 0x80
 8006682:	d016      	beq.n	80066b2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8006684:	2b80      	cmp	r3, #128	; 0x80
 8006686:	d81d      	bhi.n	80066c4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006688:	2b00      	cmp	r3, #0
 800668a:	d002      	beq.n	8006692 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800668c:	2b40      	cmp	r3, #64	; 0x40
 800668e:	d007      	beq.n	80066a0 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8006690:	e018      	b.n	80066c4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006692:	4b66      	ldr	r3, [pc, #408]	; (800682c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006696:	4a65      	ldr	r2, [pc, #404]	; (800682c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006698:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800669c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800669e:	e017      	b.n	80066d0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	3304      	adds	r3, #4
 80066a4:	2100      	movs	r1, #0
 80066a6:	4618      	mov	r0, r3
 80066a8:	f001 f944 	bl	8007934 <RCCEx_PLL2_Config>
 80066ac:	4603      	mov	r3, r0
 80066ae:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80066b0:	e00e      	b.n	80066d0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	3324      	adds	r3, #36	; 0x24
 80066b6:	2100      	movs	r1, #0
 80066b8:	4618      	mov	r0, r3
 80066ba:	f001 f9ed 	bl	8007a98 <RCCEx_PLL3_Config>
 80066be:	4603      	mov	r3, r0
 80066c0:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80066c2:	e005      	b.n	80066d0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80066c4:	2301      	movs	r3, #1
 80066c6:	75fb      	strb	r3, [r7, #23]
      break;
 80066c8:	e002      	b.n	80066d0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80066ca:	bf00      	nop
 80066cc:	e000      	b.n	80066d0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80066ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 80066d0:	7dfb      	ldrb	r3, [r7, #23]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d109      	bne.n	80066ea <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80066d6:	4b55      	ldr	r3, [pc, #340]	; (800682c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80066d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066da:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066e2:	4952      	ldr	r1, [pc, #328]	; (800682c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80066e4:	4313      	orrs	r3, r2
 80066e6:	650b      	str	r3, [r1, #80]	; 0x50
 80066e8:	e001      	b.n	80066ee <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066ea:	7dfb      	ldrb	r3, [r7, #23]
 80066ec:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d049      	beq.n	800678e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006700:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006704:	d030      	beq.n	8006768 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8006706:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800670a:	d82a      	bhi.n	8006762 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800670c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006710:	d02c      	beq.n	800676c <HAL_RCCEx_PeriphCLKConfig+0x234>
 8006712:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006716:	d824      	bhi.n	8006762 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006718:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800671c:	d018      	beq.n	8006750 <HAL_RCCEx_PeriphCLKConfig+0x218>
 800671e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006722:	d81e      	bhi.n	8006762 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006724:	2b00      	cmp	r3, #0
 8006726:	d003      	beq.n	8006730 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8006728:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800672c:	d007      	beq.n	800673e <HAL_RCCEx_PeriphCLKConfig+0x206>
 800672e:	e018      	b.n	8006762 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006730:	4b3e      	ldr	r3, [pc, #248]	; (800682c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006734:	4a3d      	ldr	r2, [pc, #244]	; (800682c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006736:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800673a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800673c:	e017      	b.n	800676e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	3304      	adds	r3, #4
 8006742:	2100      	movs	r1, #0
 8006744:	4618      	mov	r0, r3
 8006746:	f001 f8f5 	bl	8007934 <RCCEx_PLL2_Config>
 800674a:	4603      	mov	r3, r0
 800674c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800674e:	e00e      	b.n	800676e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	3324      	adds	r3, #36	; 0x24
 8006754:	2100      	movs	r1, #0
 8006756:	4618      	mov	r0, r3
 8006758:	f001 f99e 	bl	8007a98 <RCCEx_PLL3_Config>
 800675c:	4603      	mov	r3, r0
 800675e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006760:	e005      	b.n	800676e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8006762:	2301      	movs	r3, #1
 8006764:	75fb      	strb	r3, [r7, #23]
      break;
 8006766:	e002      	b.n	800676e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8006768:	bf00      	nop
 800676a:	e000      	b.n	800676e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800676c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800676e:	7dfb      	ldrb	r3, [r7, #23]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d10a      	bne.n	800678a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006774:	4b2d      	ldr	r3, [pc, #180]	; (800682c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006776:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006778:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006782:	492a      	ldr	r1, [pc, #168]	; (800682c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006784:	4313      	orrs	r3, r2
 8006786:	658b      	str	r3, [r1, #88]	; 0x58
 8006788:	e001      	b.n	800678e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800678a:	7dfb      	ldrb	r3, [r7, #23]
 800678c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006796:	2b00      	cmp	r3, #0
 8006798:	d04c      	beq.n	8006834 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80067a0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80067a4:	d030      	beq.n	8006808 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80067a6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80067aa:	d82a      	bhi.n	8006802 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80067ac:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80067b0:	d02c      	beq.n	800680c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 80067b2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80067b6:	d824      	bhi.n	8006802 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80067b8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80067bc:	d018      	beq.n	80067f0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80067be:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80067c2:	d81e      	bhi.n	8006802 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d003      	beq.n	80067d0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80067c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80067cc:	d007      	beq.n	80067de <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80067ce:	e018      	b.n	8006802 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80067d0:	4b16      	ldr	r3, [pc, #88]	; (800682c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80067d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067d4:	4a15      	ldr	r2, [pc, #84]	; (800682c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80067d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80067da:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80067dc:	e017      	b.n	800680e <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	3304      	adds	r3, #4
 80067e2:	2100      	movs	r1, #0
 80067e4:	4618      	mov	r0, r3
 80067e6:	f001 f8a5 	bl	8007934 <RCCEx_PLL2_Config>
 80067ea:	4603      	mov	r3, r0
 80067ec:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80067ee:	e00e      	b.n	800680e <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	3324      	adds	r3, #36	; 0x24
 80067f4:	2100      	movs	r1, #0
 80067f6:	4618      	mov	r0, r3
 80067f8:	f001 f94e 	bl	8007a98 <RCCEx_PLL3_Config>
 80067fc:	4603      	mov	r3, r0
 80067fe:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006800:	e005      	b.n	800680e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8006802:	2301      	movs	r3, #1
 8006804:	75fb      	strb	r3, [r7, #23]
      break;
 8006806:	e002      	b.n	800680e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8006808:	bf00      	nop
 800680a:	e000      	b.n	800680e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 800680c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800680e:	7dfb      	ldrb	r3, [r7, #23]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d10d      	bne.n	8006830 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006814:	4b05      	ldr	r3, [pc, #20]	; (800682c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006816:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006818:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006822:	4902      	ldr	r1, [pc, #8]	; (800682c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006824:	4313      	orrs	r3, r2
 8006826:	658b      	str	r3, [r1, #88]	; 0x58
 8006828:	e004      	b.n	8006834 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800682a:	bf00      	nop
 800682c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006830:	7dfb      	ldrb	r3, [r7, #23]
 8006832:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800683c:	2b00      	cmp	r3, #0
 800683e:	d032      	beq.n	80068a6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006844:	2b30      	cmp	r3, #48	; 0x30
 8006846:	d01c      	beq.n	8006882 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8006848:	2b30      	cmp	r3, #48	; 0x30
 800684a:	d817      	bhi.n	800687c <HAL_RCCEx_PeriphCLKConfig+0x344>
 800684c:	2b20      	cmp	r3, #32
 800684e:	d00c      	beq.n	800686a <HAL_RCCEx_PeriphCLKConfig+0x332>
 8006850:	2b20      	cmp	r3, #32
 8006852:	d813      	bhi.n	800687c <HAL_RCCEx_PeriphCLKConfig+0x344>
 8006854:	2b00      	cmp	r3, #0
 8006856:	d016      	beq.n	8006886 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8006858:	2b10      	cmp	r3, #16
 800685a:	d10f      	bne.n	800687c <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800685c:	4baf      	ldr	r3, [pc, #700]	; (8006b1c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800685e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006860:	4aae      	ldr	r2, [pc, #696]	; (8006b1c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006862:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006866:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8006868:	e00e      	b.n	8006888 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	3304      	adds	r3, #4
 800686e:	2102      	movs	r1, #2
 8006870:	4618      	mov	r0, r3
 8006872:	f001 f85f 	bl	8007934 <RCCEx_PLL2_Config>
 8006876:	4603      	mov	r3, r0
 8006878:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800687a:	e005      	b.n	8006888 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800687c:	2301      	movs	r3, #1
 800687e:	75fb      	strb	r3, [r7, #23]
      break;
 8006880:	e002      	b.n	8006888 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8006882:	bf00      	nop
 8006884:	e000      	b.n	8006888 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8006886:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006888:	7dfb      	ldrb	r3, [r7, #23]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d109      	bne.n	80068a2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800688e:	4ba3      	ldr	r3, [pc, #652]	; (8006b1c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006890:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006892:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800689a:	49a0      	ldr	r1, [pc, #640]	; (8006b1c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800689c:	4313      	orrs	r3, r2
 800689e:	64cb      	str	r3, [r1, #76]	; 0x4c
 80068a0:	e001      	b.n	80068a6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068a2:	7dfb      	ldrb	r3, [r7, #23]
 80068a4:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d047      	beq.n	8006942 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80068ba:	d030      	beq.n	800691e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 80068bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80068c0:	d82a      	bhi.n	8006918 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80068c2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80068c6:	d02c      	beq.n	8006922 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 80068c8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80068cc:	d824      	bhi.n	8006918 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80068ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068d2:	d018      	beq.n	8006906 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 80068d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068d8:	d81e      	bhi.n	8006918 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d003      	beq.n	80068e6 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 80068de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068e2:	d007      	beq.n	80068f4 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80068e4:	e018      	b.n	8006918 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80068e6:	4b8d      	ldr	r3, [pc, #564]	; (8006b1c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80068e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068ea:	4a8c      	ldr	r2, [pc, #560]	; (8006b1c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80068ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80068f0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80068f2:	e017      	b.n	8006924 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	3304      	adds	r3, #4
 80068f8:	2100      	movs	r1, #0
 80068fa:	4618      	mov	r0, r3
 80068fc:	f001 f81a 	bl	8007934 <RCCEx_PLL2_Config>
 8006900:	4603      	mov	r3, r0
 8006902:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006904:	e00e      	b.n	8006924 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	3324      	adds	r3, #36	; 0x24
 800690a:	2100      	movs	r1, #0
 800690c:	4618      	mov	r0, r3
 800690e:	f001 f8c3 	bl	8007a98 <RCCEx_PLL3_Config>
 8006912:	4603      	mov	r3, r0
 8006914:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006916:	e005      	b.n	8006924 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006918:	2301      	movs	r3, #1
 800691a:	75fb      	strb	r3, [r7, #23]
      break;
 800691c:	e002      	b.n	8006924 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800691e:	bf00      	nop
 8006920:	e000      	b.n	8006924 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8006922:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006924:	7dfb      	ldrb	r3, [r7, #23]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d109      	bne.n	800693e <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800692a:	4b7c      	ldr	r3, [pc, #496]	; (8006b1c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800692c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800692e:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006936:	4979      	ldr	r1, [pc, #484]	; (8006b1c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006938:	4313      	orrs	r3, r2
 800693a:	650b      	str	r3, [r1, #80]	; 0x50
 800693c:	e001      	b.n	8006942 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800693e:	7dfb      	ldrb	r3, [r7, #23]
 8006940:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800694a:	2b00      	cmp	r3, #0
 800694c:	d049      	beq.n	80069e2 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006952:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006956:	d02e      	beq.n	80069b6 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8006958:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800695c:	d828      	bhi.n	80069b0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800695e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006962:	d02a      	beq.n	80069ba <HAL_RCCEx_PeriphCLKConfig+0x482>
 8006964:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006968:	d822      	bhi.n	80069b0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800696a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800696e:	d026      	beq.n	80069be <HAL_RCCEx_PeriphCLKConfig+0x486>
 8006970:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006974:	d81c      	bhi.n	80069b0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8006976:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800697a:	d010      	beq.n	800699e <HAL_RCCEx_PeriphCLKConfig+0x466>
 800697c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006980:	d816      	bhi.n	80069b0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8006982:	2b00      	cmp	r3, #0
 8006984:	d01d      	beq.n	80069c2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8006986:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800698a:	d111      	bne.n	80069b0 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	3304      	adds	r3, #4
 8006990:	2101      	movs	r1, #1
 8006992:	4618      	mov	r0, r3
 8006994:	f000 ffce 	bl	8007934 <RCCEx_PLL2_Config>
 8006998:	4603      	mov	r3, r0
 800699a:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800699c:	e012      	b.n	80069c4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	3324      	adds	r3, #36	; 0x24
 80069a2:	2101      	movs	r1, #1
 80069a4:	4618      	mov	r0, r3
 80069a6:	f001 f877 	bl	8007a98 <RCCEx_PLL3_Config>
 80069aa:	4603      	mov	r3, r0
 80069ac:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80069ae:	e009      	b.n	80069c4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80069b0:	2301      	movs	r3, #1
 80069b2:	75fb      	strb	r3, [r7, #23]
      break;
 80069b4:	e006      	b.n	80069c4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80069b6:	bf00      	nop
 80069b8:	e004      	b.n	80069c4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80069ba:	bf00      	nop
 80069bc:	e002      	b.n	80069c4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80069be:	bf00      	nop
 80069c0:	e000      	b.n	80069c4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80069c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80069c4:	7dfb      	ldrb	r3, [r7, #23]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d109      	bne.n	80069de <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80069ca:	4b54      	ldr	r3, [pc, #336]	; (8006b1c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80069cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069ce:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80069d6:	4951      	ldr	r1, [pc, #324]	; (8006b1c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80069d8:	4313      	orrs	r3, r2
 80069da:	650b      	str	r3, [r1, #80]	; 0x50
 80069dc:	e001      	b.n	80069e2 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069de:	7dfb      	ldrb	r3, [r7, #23]
 80069e0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d04b      	beq.n	8006a86 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80069f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80069f8:	d02e      	beq.n	8006a58 <HAL_RCCEx_PeriphCLKConfig+0x520>
 80069fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80069fe:	d828      	bhi.n	8006a52 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8006a00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a04:	d02a      	beq.n	8006a5c <HAL_RCCEx_PeriphCLKConfig+0x524>
 8006a06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a0a:	d822      	bhi.n	8006a52 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8006a0c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006a10:	d026      	beq.n	8006a60 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8006a12:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006a16:	d81c      	bhi.n	8006a52 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8006a18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a1c:	d010      	beq.n	8006a40 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8006a1e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a22:	d816      	bhi.n	8006a52 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d01d      	beq.n	8006a64 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8006a28:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006a2c:	d111      	bne.n	8006a52 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	3304      	adds	r3, #4
 8006a32:	2101      	movs	r1, #1
 8006a34:	4618      	mov	r0, r3
 8006a36:	f000 ff7d 	bl	8007934 <RCCEx_PLL2_Config>
 8006a3a:	4603      	mov	r3, r0
 8006a3c:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006a3e:	e012      	b.n	8006a66 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	3324      	adds	r3, #36	; 0x24
 8006a44:	2101      	movs	r1, #1
 8006a46:	4618      	mov	r0, r3
 8006a48:	f001 f826 	bl	8007a98 <RCCEx_PLL3_Config>
 8006a4c:	4603      	mov	r3, r0
 8006a4e:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006a50:	e009      	b.n	8006a66 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8006a52:	2301      	movs	r3, #1
 8006a54:	75fb      	strb	r3, [r7, #23]
      break;
 8006a56:	e006      	b.n	8006a66 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8006a58:	bf00      	nop
 8006a5a:	e004      	b.n	8006a66 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8006a5c:	bf00      	nop
 8006a5e:	e002      	b.n	8006a66 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8006a60:	bf00      	nop
 8006a62:	e000      	b.n	8006a66 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8006a64:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006a66:	7dfb      	ldrb	r3, [r7, #23]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d10a      	bne.n	8006a82 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006a6c:	4b2b      	ldr	r3, [pc, #172]	; (8006b1c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006a6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a70:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006a7a:	4928      	ldr	r1, [pc, #160]	; (8006b1c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006a7c:	4313      	orrs	r3, r2
 8006a7e:	658b      	str	r3, [r1, #88]	; 0x58
 8006a80:	e001      	b.n	8006a86 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a82:	7dfb      	ldrb	r3, [r7, #23]
 8006a84:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d02f      	beq.n	8006af2 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a96:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a9a:	d00e      	beq.n	8006aba <HAL_RCCEx_PeriphCLKConfig+0x582>
 8006a9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006aa0:	d814      	bhi.n	8006acc <HAL_RCCEx_PeriphCLKConfig+0x594>
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d015      	beq.n	8006ad2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8006aa6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006aaa:	d10f      	bne.n	8006acc <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006aac:	4b1b      	ldr	r3, [pc, #108]	; (8006b1c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ab0:	4a1a      	ldr	r2, [pc, #104]	; (8006b1c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006ab2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ab6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006ab8:	e00c      	b.n	8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	3304      	adds	r3, #4
 8006abe:	2101      	movs	r1, #1
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	f000 ff37 	bl	8007934 <RCCEx_PLL2_Config>
 8006ac6:	4603      	mov	r3, r0
 8006ac8:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006aca:	e003      	b.n	8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006acc:	2301      	movs	r3, #1
 8006ace:	75fb      	strb	r3, [r7, #23]
      break;
 8006ad0:	e000      	b.n	8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8006ad2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ad4:	7dfb      	ldrb	r3, [r7, #23]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d109      	bne.n	8006aee <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006ada:	4b10      	ldr	r3, [pc, #64]	; (8006b1c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006adc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ade:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ae6:	490d      	ldr	r1, [pc, #52]	; (8006b1c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006ae8:	4313      	orrs	r3, r2
 8006aea:	650b      	str	r3, [r1, #80]	; 0x50
 8006aec:	e001      	b.n	8006af2 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006aee:	7dfb      	ldrb	r3, [r7, #23]
 8006af0:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d033      	beq.n	8006b66 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b02:	2b03      	cmp	r3, #3
 8006b04:	d81c      	bhi.n	8006b40 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8006b06:	a201      	add	r2, pc, #4	; (adr r2, 8006b0c <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8006b08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b0c:	08006b47 	.word	0x08006b47
 8006b10:	08006b21 	.word	0x08006b21
 8006b14:	08006b2f 	.word	0x08006b2f
 8006b18:	08006b47 	.word	0x08006b47
 8006b1c:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b20:	4bb8      	ldr	r3, [pc, #736]	; (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b24:	4ab7      	ldr	r2, [pc, #732]	; (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006b26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b2a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006b2c:	e00c      	b.n	8006b48 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	3304      	adds	r3, #4
 8006b32:	2102      	movs	r1, #2
 8006b34:	4618      	mov	r0, r3
 8006b36:	f000 fefd 	bl	8007934 <RCCEx_PLL2_Config>
 8006b3a:	4603      	mov	r3, r0
 8006b3c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006b3e:	e003      	b.n	8006b48 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006b40:	2301      	movs	r3, #1
 8006b42:	75fb      	strb	r3, [r7, #23]
      break;
 8006b44:	e000      	b.n	8006b48 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8006b46:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006b48:	7dfb      	ldrb	r3, [r7, #23]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d109      	bne.n	8006b62 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006b4e:	4bad      	ldr	r3, [pc, #692]	; (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006b50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b52:	f023 0203 	bic.w	r2, r3, #3
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b5a:	49aa      	ldr	r1, [pc, #680]	; (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006b5c:	4313      	orrs	r3, r2
 8006b5e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006b60:	e001      	b.n	8006b66 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b62:	7dfb      	ldrb	r3, [r7, #23]
 8006b64:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	f000 8086 	beq.w	8006c80 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006b74:	4ba4      	ldr	r3, [pc, #656]	; (8006e08 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	4aa3      	ldr	r2, [pc, #652]	; (8006e08 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8006b7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b7e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006b80:	f7fc f834 	bl	8002bec <HAL_GetTick>
 8006b84:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006b86:	e009      	b.n	8006b9c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b88:	f7fc f830 	bl	8002bec <HAL_GetTick>
 8006b8c:	4602      	mov	r2, r0
 8006b8e:	693b      	ldr	r3, [r7, #16]
 8006b90:	1ad3      	subs	r3, r2, r3
 8006b92:	2b64      	cmp	r3, #100	; 0x64
 8006b94:	d902      	bls.n	8006b9c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8006b96:	2303      	movs	r3, #3
 8006b98:	75fb      	strb	r3, [r7, #23]
        break;
 8006b9a:	e005      	b.n	8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006b9c:	4b9a      	ldr	r3, [pc, #616]	; (8006e08 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d0ef      	beq.n	8006b88 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8006ba8:	7dfb      	ldrb	r3, [r7, #23]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d166      	bne.n	8006c7c <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006bae:	4b95      	ldr	r3, [pc, #596]	; (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006bb0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006bb8:	4053      	eors	r3, r2
 8006bba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d013      	beq.n	8006bea <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006bc2:	4b90      	ldr	r3, [pc, #576]	; (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006bc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bc6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006bca:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006bcc:	4b8d      	ldr	r3, [pc, #564]	; (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006bce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bd0:	4a8c      	ldr	r2, [pc, #560]	; (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006bd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006bd6:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006bd8:	4b8a      	ldr	r3, [pc, #552]	; (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006bda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bdc:	4a89      	ldr	r2, [pc, #548]	; (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006bde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006be2:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006be4:	4a87      	ldr	r2, [pc, #540]	; (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006bf0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006bf4:	d115      	bne.n	8006c22 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bf6:	f7fb fff9 	bl	8002bec <HAL_GetTick>
 8006bfa:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006bfc:	e00b      	b.n	8006c16 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006bfe:	f7fb fff5 	bl	8002bec <HAL_GetTick>
 8006c02:	4602      	mov	r2, r0
 8006c04:	693b      	ldr	r3, [r7, #16]
 8006c06:	1ad3      	subs	r3, r2, r3
 8006c08:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d902      	bls.n	8006c16 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8006c10:	2303      	movs	r3, #3
 8006c12:	75fb      	strb	r3, [r7, #23]
            break;
 8006c14:	e005      	b.n	8006c22 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006c16:	4b7b      	ldr	r3, [pc, #492]	; (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006c18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c1a:	f003 0302 	and.w	r3, r3, #2
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d0ed      	beq.n	8006bfe <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8006c22:	7dfb      	ldrb	r3, [r7, #23]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d126      	bne.n	8006c76 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006c2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c32:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006c36:	d10d      	bne.n	8006c54 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8006c38:	4b72      	ldr	r3, [pc, #456]	; (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006c3a:	691b      	ldr	r3, [r3, #16]
 8006c3c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006c46:	0919      	lsrs	r1, r3, #4
 8006c48:	4b70      	ldr	r3, [pc, #448]	; (8006e0c <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8006c4a:	400b      	ands	r3, r1
 8006c4c:	496d      	ldr	r1, [pc, #436]	; (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006c4e:	4313      	orrs	r3, r2
 8006c50:	610b      	str	r3, [r1, #16]
 8006c52:	e005      	b.n	8006c60 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8006c54:	4b6b      	ldr	r3, [pc, #428]	; (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006c56:	691b      	ldr	r3, [r3, #16]
 8006c58:	4a6a      	ldr	r2, [pc, #424]	; (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006c5a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006c5e:	6113      	str	r3, [r2, #16]
 8006c60:	4b68      	ldr	r3, [pc, #416]	; (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006c62:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006c6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006c6e:	4965      	ldr	r1, [pc, #404]	; (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006c70:	4313      	orrs	r3, r2
 8006c72:	670b      	str	r3, [r1, #112]	; 0x70
 8006c74:	e004      	b.n	8006c80 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006c76:	7dfb      	ldrb	r3, [r7, #23]
 8006c78:	75bb      	strb	r3, [r7, #22]
 8006c7a:	e001      	b.n	8006c80 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c7c:	7dfb      	ldrb	r3, [r7, #23]
 8006c7e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f003 0301 	and.w	r3, r3, #1
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d07e      	beq.n	8006d8a <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006c90:	2b28      	cmp	r3, #40	; 0x28
 8006c92:	d867      	bhi.n	8006d64 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8006c94:	a201      	add	r2, pc, #4	; (adr r2, 8006c9c <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8006c96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c9a:	bf00      	nop
 8006c9c:	08006d6b 	.word	0x08006d6b
 8006ca0:	08006d65 	.word	0x08006d65
 8006ca4:	08006d65 	.word	0x08006d65
 8006ca8:	08006d65 	.word	0x08006d65
 8006cac:	08006d65 	.word	0x08006d65
 8006cb0:	08006d65 	.word	0x08006d65
 8006cb4:	08006d65 	.word	0x08006d65
 8006cb8:	08006d65 	.word	0x08006d65
 8006cbc:	08006d41 	.word	0x08006d41
 8006cc0:	08006d65 	.word	0x08006d65
 8006cc4:	08006d65 	.word	0x08006d65
 8006cc8:	08006d65 	.word	0x08006d65
 8006ccc:	08006d65 	.word	0x08006d65
 8006cd0:	08006d65 	.word	0x08006d65
 8006cd4:	08006d65 	.word	0x08006d65
 8006cd8:	08006d65 	.word	0x08006d65
 8006cdc:	08006d53 	.word	0x08006d53
 8006ce0:	08006d65 	.word	0x08006d65
 8006ce4:	08006d65 	.word	0x08006d65
 8006ce8:	08006d65 	.word	0x08006d65
 8006cec:	08006d65 	.word	0x08006d65
 8006cf0:	08006d65 	.word	0x08006d65
 8006cf4:	08006d65 	.word	0x08006d65
 8006cf8:	08006d65 	.word	0x08006d65
 8006cfc:	08006d6b 	.word	0x08006d6b
 8006d00:	08006d65 	.word	0x08006d65
 8006d04:	08006d65 	.word	0x08006d65
 8006d08:	08006d65 	.word	0x08006d65
 8006d0c:	08006d65 	.word	0x08006d65
 8006d10:	08006d65 	.word	0x08006d65
 8006d14:	08006d65 	.word	0x08006d65
 8006d18:	08006d65 	.word	0x08006d65
 8006d1c:	08006d6b 	.word	0x08006d6b
 8006d20:	08006d65 	.word	0x08006d65
 8006d24:	08006d65 	.word	0x08006d65
 8006d28:	08006d65 	.word	0x08006d65
 8006d2c:	08006d65 	.word	0x08006d65
 8006d30:	08006d65 	.word	0x08006d65
 8006d34:	08006d65 	.word	0x08006d65
 8006d38:	08006d65 	.word	0x08006d65
 8006d3c:	08006d6b 	.word	0x08006d6b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	3304      	adds	r3, #4
 8006d44:	2101      	movs	r1, #1
 8006d46:	4618      	mov	r0, r3
 8006d48:	f000 fdf4 	bl	8007934 <RCCEx_PLL2_Config>
 8006d4c:	4603      	mov	r3, r0
 8006d4e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006d50:	e00c      	b.n	8006d6c <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	3324      	adds	r3, #36	; 0x24
 8006d56:	2101      	movs	r1, #1
 8006d58:	4618      	mov	r0, r3
 8006d5a:	f000 fe9d 	bl	8007a98 <RCCEx_PLL3_Config>
 8006d5e:	4603      	mov	r3, r0
 8006d60:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006d62:	e003      	b.n	8006d6c <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006d64:	2301      	movs	r3, #1
 8006d66:	75fb      	strb	r3, [r7, #23]
      break;
 8006d68:	e000      	b.n	8006d6c <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8006d6a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d6c:	7dfb      	ldrb	r3, [r7, #23]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d109      	bne.n	8006d86 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006d72:	4b24      	ldr	r3, [pc, #144]	; (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006d74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d76:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006d7e:	4921      	ldr	r1, [pc, #132]	; (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006d80:	4313      	orrs	r3, r2
 8006d82:	654b      	str	r3, [r1, #84]	; 0x54
 8006d84:	e001      	b.n	8006d8a <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d86:	7dfb      	ldrb	r3, [r7, #23]
 8006d88:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f003 0302 	and.w	r3, r3, #2
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d03e      	beq.n	8006e14 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d9a:	2b05      	cmp	r3, #5
 8006d9c:	d820      	bhi.n	8006de0 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8006d9e:	a201      	add	r2, pc, #4	; (adr r2, 8006da4 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8006da0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006da4:	08006de7 	.word	0x08006de7
 8006da8:	08006dbd 	.word	0x08006dbd
 8006dac:	08006dcf 	.word	0x08006dcf
 8006db0:	08006de7 	.word	0x08006de7
 8006db4:	08006de7 	.word	0x08006de7
 8006db8:	08006de7 	.word	0x08006de7
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	3304      	adds	r3, #4
 8006dc0:	2101      	movs	r1, #1
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	f000 fdb6 	bl	8007934 <RCCEx_PLL2_Config>
 8006dc8:	4603      	mov	r3, r0
 8006dca:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006dcc:	e00c      	b.n	8006de8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	3324      	adds	r3, #36	; 0x24
 8006dd2:	2101      	movs	r1, #1
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	f000 fe5f 	bl	8007a98 <RCCEx_PLL3_Config>
 8006dda:	4603      	mov	r3, r0
 8006ddc:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006dde:	e003      	b.n	8006de8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006de0:	2301      	movs	r3, #1
 8006de2:	75fb      	strb	r3, [r7, #23]
      break;
 8006de4:	e000      	b.n	8006de8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8006de6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006de8:	7dfb      	ldrb	r3, [r7, #23]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d110      	bne.n	8006e10 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006dee:	4b05      	ldr	r3, [pc, #20]	; (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006df0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006df2:	f023 0207 	bic.w	r2, r3, #7
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006dfa:	4902      	ldr	r1, [pc, #8]	; (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006dfc:	4313      	orrs	r3, r2
 8006dfe:	654b      	str	r3, [r1, #84]	; 0x54
 8006e00:	e008      	b.n	8006e14 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8006e02:	bf00      	nop
 8006e04:	58024400 	.word	0x58024400
 8006e08:	58024800 	.word	0x58024800
 8006e0c:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e10:	7dfb      	ldrb	r3, [r7, #23]
 8006e12:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f003 0304 	and.w	r3, r3, #4
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d039      	beq.n	8006e94 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e26:	2b05      	cmp	r3, #5
 8006e28:	d820      	bhi.n	8006e6c <HAL_RCCEx_PeriphCLKConfig+0x934>
 8006e2a:	a201      	add	r2, pc, #4	; (adr r2, 8006e30 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8006e2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e30:	08006e73 	.word	0x08006e73
 8006e34:	08006e49 	.word	0x08006e49
 8006e38:	08006e5b 	.word	0x08006e5b
 8006e3c:	08006e73 	.word	0x08006e73
 8006e40:	08006e73 	.word	0x08006e73
 8006e44:	08006e73 	.word	0x08006e73
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	3304      	adds	r3, #4
 8006e4c:	2101      	movs	r1, #1
 8006e4e:	4618      	mov	r0, r3
 8006e50:	f000 fd70 	bl	8007934 <RCCEx_PLL2_Config>
 8006e54:	4603      	mov	r3, r0
 8006e56:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006e58:	e00c      	b.n	8006e74 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	3324      	adds	r3, #36	; 0x24
 8006e5e:	2101      	movs	r1, #1
 8006e60:	4618      	mov	r0, r3
 8006e62:	f000 fe19 	bl	8007a98 <RCCEx_PLL3_Config>
 8006e66:	4603      	mov	r3, r0
 8006e68:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006e6a:	e003      	b.n	8006e74 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006e6c:	2301      	movs	r3, #1
 8006e6e:	75fb      	strb	r3, [r7, #23]
      break;
 8006e70:	e000      	b.n	8006e74 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8006e72:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e74:	7dfb      	ldrb	r3, [r7, #23]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d10a      	bne.n	8006e90 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006e7a:	4bb7      	ldr	r3, [pc, #732]	; (8007158 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006e7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e7e:	f023 0207 	bic.w	r2, r3, #7
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e88:	49b3      	ldr	r1, [pc, #716]	; (8007158 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006e8a:	4313      	orrs	r3, r2
 8006e8c:	658b      	str	r3, [r1, #88]	; 0x58
 8006e8e:	e001      	b.n	8006e94 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e90:	7dfb      	ldrb	r3, [r7, #23]
 8006e92:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f003 0320 	and.w	r3, r3, #32
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d04b      	beq.n	8006f38 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ea6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006eaa:	d02e      	beq.n	8006f0a <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8006eac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006eb0:	d828      	bhi.n	8006f04 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006eb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006eb6:	d02a      	beq.n	8006f0e <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8006eb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ebc:	d822      	bhi.n	8006f04 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006ebe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006ec2:	d026      	beq.n	8006f12 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8006ec4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006ec8:	d81c      	bhi.n	8006f04 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006eca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ece:	d010      	beq.n	8006ef2 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8006ed0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ed4:	d816      	bhi.n	8006f04 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d01d      	beq.n	8006f16 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8006eda:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006ede:	d111      	bne.n	8006f04 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	3304      	adds	r3, #4
 8006ee4:	2100      	movs	r1, #0
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	f000 fd24 	bl	8007934 <RCCEx_PLL2_Config>
 8006eec:	4603      	mov	r3, r0
 8006eee:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006ef0:	e012      	b.n	8006f18 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	3324      	adds	r3, #36	; 0x24
 8006ef6:	2102      	movs	r1, #2
 8006ef8:	4618      	mov	r0, r3
 8006efa:	f000 fdcd 	bl	8007a98 <RCCEx_PLL3_Config>
 8006efe:	4603      	mov	r3, r0
 8006f00:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006f02:	e009      	b.n	8006f18 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006f04:	2301      	movs	r3, #1
 8006f06:	75fb      	strb	r3, [r7, #23]
      break;
 8006f08:	e006      	b.n	8006f18 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006f0a:	bf00      	nop
 8006f0c:	e004      	b.n	8006f18 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006f0e:	bf00      	nop
 8006f10:	e002      	b.n	8006f18 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006f12:	bf00      	nop
 8006f14:	e000      	b.n	8006f18 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006f16:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f18:	7dfb      	ldrb	r3, [r7, #23]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d10a      	bne.n	8006f34 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006f1e:	4b8e      	ldr	r3, [pc, #568]	; (8007158 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006f20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f22:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f2c:	498a      	ldr	r1, [pc, #552]	; (8007158 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006f2e:	4313      	orrs	r3, r2
 8006f30:	654b      	str	r3, [r1, #84]	; 0x54
 8006f32:	e001      	b.n	8006f38 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f34:	7dfb      	ldrb	r3, [r7, #23]
 8006f36:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d04b      	beq.n	8006fdc <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006f4a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006f4e:	d02e      	beq.n	8006fae <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8006f50:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006f54:	d828      	bhi.n	8006fa8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006f56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f5a:	d02a      	beq.n	8006fb2 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8006f5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f60:	d822      	bhi.n	8006fa8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006f62:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006f66:	d026      	beq.n	8006fb6 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8006f68:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006f6c:	d81c      	bhi.n	8006fa8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006f6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f72:	d010      	beq.n	8006f96 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8006f74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f78:	d816      	bhi.n	8006fa8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d01d      	beq.n	8006fba <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8006f7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f82:	d111      	bne.n	8006fa8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	3304      	adds	r3, #4
 8006f88:	2100      	movs	r1, #0
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	f000 fcd2 	bl	8007934 <RCCEx_PLL2_Config>
 8006f90:	4603      	mov	r3, r0
 8006f92:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006f94:	e012      	b.n	8006fbc <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	3324      	adds	r3, #36	; 0x24
 8006f9a:	2102      	movs	r1, #2
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	f000 fd7b 	bl	8007a98 <RCCEx_PLL3_Config>
 8006fa2:	4603      	mov	r3, r0
 8006fa4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006fa6:	e009      	b.n	8006fbc <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006fa8:	2301      	movs	r3, #1
 8006faa:	75fb      	strb	r3, [r7, #23]
      break;
 8006fac:	e006      	b.n	8006fbc <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006fae:	bf00      	nop
 8006fb0:	e004      	b.n	8006fbc <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006fb2:	bf00      	nop
 8006fb4:	e002      	b.n	8006fbc <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006fb6:	bf00      	nop
 8006fb8:	e000      	b.n	8006fbc <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006fba:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006fbc:	7dfb      	ldrb	r3, [r7, #23]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d10a      	bne.n	8006fd8 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006fc2:	4b65      	ldr	r3, [pc, #404]	; (8007158 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006fc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fc6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006fd0:	4961      	ldr	r1, [pc, #388]	; (8007158 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006fd2:	4313      	orrs	r3, r2
 8006fd4:	658b      	str	r3, [r1, #88]	; 0x58
 8006fd6:	e001      	b.n	8006fdc <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fd8:	7dfb      	ldrb	r3, [r7, #23]
 8006fda:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d04b      	beq.n	8007080 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006fee:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006ff2:	d02e      	beq.n	8007052 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8006ff4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006ff8:	d828      	bhi.n	800704c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8006ffa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ffe:	d02a      	beq.n	8007056 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8007000:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007004:	d822      	bhi.n	800704c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8007006:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800700a:	d026      	beq.n	800705a <HAL_RCCEx_PeriphCLKConfig+0xb22>
 800700c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007010:	d81c      	bhi.n	800704c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8007012:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007016:	d010      	beq.n	800703a <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8007018:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800701c:	d816      	bhi.n	800704c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800701e:	2b00      	cmp	r3, #0
 8007020:	d01d      	beq.n	800705e <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8007022:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007026:	d111      	bne.n	800704c <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	3304      	adds	r3, #4
 800702c:	2100      	movs	r1, #0
 800702e:	4618      	mov	r0, r3
 8007030:	f000 fc80 	bl	8007934 <RCCEx_PLL2_Config>
 8007034:	4603      	mov	r3, r0
 8007036:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007038:	e012      	b.n	8007060 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	3324      	adds	r3, #36	; 0x24
 800703e:	2102      	movs	r1, #2
 8007040:	4618      	mov	r0, r3
 8007042:	f000 fd29 	bl	8007a98 <RCCEx_PLL3_Config>
 8007046:	4603      	mov	r3, r0
 8007048:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800704a:	e009      	b.n	8007060 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800704c:	2301      	movs	r3, #1
 800704e:	75fb      	strb	r3, [r7, #23]
      break;
 8007050:	e006      	b.n	8007060 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8007052:	bf00      	nop
 8007054:	e004      	b.n	8007060 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8007056:	bf00      	nop
 8007058:	e002      	b.n	8007060 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800705a:	bf00      	nop
 800705c:	e000      	b.n	8007060 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800705e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007060:	7dfb      	ldrb	r3, [r7, #23]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d10a      	bne.n	800707c <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007066:	4b3c      	ldr	r3, [pc, #240]	; (8007158 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007068:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800706a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007074:	4938      	ldr	r1, [pc, #224]	; (8007158 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007076:	4313      	orrs	r3, r2
 8007078:	658b      	str	r3, [r1, #88]	; 0x58
 800707a:	e001      	b.n	8007080 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800707c:	7dfb      	ldrb	r3, [r7, #23]
 800707e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f003 0308 	and.w	r3, r3, #8
 8007088:	2b00      	cmp	r3, #0
 800708a:	d01a      	beq.n	80070c2 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007092:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007096:	d10a      	bne.n	80070ae <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	3324      	adds	r3, #36	; 0x24
 800709c:	2102      	movs	r1, #2
 800709e:	4618      	mov	r0, r3
 80070a0:	f000 fcfa 	bl	8007a98 <RCCEx_PLL3_Config>
 80070a4:	4603      	mov	r3, r0
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d001      	beq.n	80070ae <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 80070aa:	2301      	movs	r3, #1
 80070ac:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80070ae:	4b2a      	ldr	r3, [pc, #168]	; (8007158 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80070b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070b2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80070bc:	4926      	ldr	r1, [pc, #152]	; (8007158 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80070be:	4313      	orrs	r3, r2
 80070c0:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f003 0310 	and.w	r3, r3, #16
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d01a      	beq.n	8007104 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80070d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070d8:	d10a      	bne.n	80070f0 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	3324      	adds	r3, #36	; 0x24
 80070de:	2102      	movs	r1, #2
 80070e0:	4618      	mov	r0, r3
 80070e2:	f000 fcd9 	bl	8007a98 <RCCEx_PLL3_Config>
 80070e6:	4603      	mov	r3, r0
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d001      	beq.n	80070f0 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 80070ec:	2301      	movs	r3, #1
 80070ee:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80070f0:	4b19      	ldr	r3, [pc, #100]	; (8007158 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80070f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80070fe:	4916      	ldr	r1, [pc, #88]	; (8007158 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007100:	4313      	orrs	r3, r2
 8007102:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800710c:	2b00      	cmp	r3, #0
 800710e:	d036      	beq.n	800717e <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007116:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800711a:	d01f      	beq.n	800715c <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800711c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007120:	d817      	bhi.n	8007152 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8007122:	2b00      	cmp	r3, #0
 8007124:	d003      	beq.n	800712e <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8007126:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800712a:	d009      	beq.n	8007140 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 800712c:	e011      	b.n	8007152 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	3304      	adds	r3, #4
 8007132:	2100      	movs	r1, #0
 8007134:	4618      	mov	r0, r3
 8007136:	f000 fbfd 	bl	8007934 <RCCEx_PLL2_Config>
 800713a:	4603      	mov	r3, r0
 800713c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800713e:	e00e      	b.n	800715e <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	3324      	adds	r3, #36	; 0x24
 8007144:	2102      	movs	r1, #2
 8007146:	4618      	mov	r0, r3
 8007148:	f000 fca6 	bl	8007a98 <RCCEx_PLL3_Config>
 800714c:	4603      	mov	r3, r0
 800714e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007150:	e005      	b.n	800715e <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007152:	2301      	movs	r3, #1
 8007154:	75fb      	strb	r3, [r7, #23]
      break;
 8007156:	e002      	b.n	800715e <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8007158:	58024400 	.word	0x58024400
      break;
 800715c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800715e:	7dfb      	ldrb	r3, [r7, #23]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d10a      	bne.n	800717a <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007164:	4b93      	ldr	r3, [pc, #588]	; (80073b4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007166:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007168:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007172:	4990      	ldr	r1, [pc, #576]	; (80073b4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007174:	4313      	orrs	r3, r2
 8007176:	658b      	str	r3, [r1, #88]	; 0x58
 8007178:	e001      	b.n	800717e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800717a:	7dfb      	ldrb	r3, [r7, #23]
 800717c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007186:	2b00      	cmp	r3, #0
 8007188:	d033      	beq.n	80071f2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007190:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007194:	d01c      	beq.n	80071d0 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8007196:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800719a:	d816      	bhi.n	80071ca <HAL_RCCEx_PeriphCLKConfig+0xc92>
 800719c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80071a0:	d003      	beq.n	80071aa <HAL_RCCEx_PeriphCLKConfig+0xc72>
 80071a2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80071a6:	d007      	beq.n	80071b8 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 80071a8:	e00f      	b.n	80071ca <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80071aa:	4b82      	ldr	r3, [pc, #520]	; (80073b4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80071ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071ae:	4a81      	ldr	r2, [pc, #516]	; (80073b4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80071b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80071b4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80071b6:	e00c      	b.n	80071d2 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	3324      	adds	r3, #36	; 0x24
 80071bc:	2101      	movs	r1, #1
 80071be:	4618      	mov	r0, r3
 80071c0:	f000 fc6a 	bl	8007a98 <RCCEx_PLL3_Config>
 80071c4:	4603      	mov	r3, r0
 80071c6:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80071c8:	e003      	b.n	80071d2 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80071ca:	2301      	movs	r3, #1
 80071cc:	75fb      	strb	r3, [r7, #23]
      break;
 80071ce:	e000      	b.n	80071d2 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 80071d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80071d2:	7dfb      	ldrb	r3, [r7, #23]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d10a      	bne.n	80071ee <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80071d8:	4b76      	ldr	r3, [pc, #472]	; (80073b4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80071da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071dc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80071e6:	4973      	ldr	r1, [pc, #460]	; (80073b4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80071e8:	4313      	orrs	r3, r2
 80071ea:	654b      	str	r3, [r1, #84]	; 0x54
 80071ec:	e001      	b.n	80071f2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071ee:	7dfb      	ldrb	r3, [r7, #23]
 80071f0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d029      	beq.n	8007252 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007202:	2b00      	cmp	r3, #0
 8007204:	d003      	beq.n	800720e <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8007206:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800720a:	d007      	beq.n	800721c <HAL_RCCEx_PeriphCLKConfig+0xce4>
 800720c:	e00f      	b.n	800722e <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800720e:	4b69      	ldr	r3, [pc, #420]	; (80073b4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007212:	4a68      	ldr	r2, [pc, #416]	; (80073b4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007214:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007218:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800721a:	e00b      	b.n	8007234 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	3304      	adds	r3, #4
 8007220:	2102      	movs	r1, #2
 8007222:	4618      	mov	r0, r3
 8007224:	f000 fb86 	bl	8007934 <RCCEx_PLL2_Config>
 8007228:	4603      	mov	r3, r0
 800722a:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800722c:	e002      	b.n	8007234 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 800722e:	2301      	movs	r3, #1
 8007230:	75fb      	strb	r3, [r7, #23]
      break;
 8007232:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007234:	7dfb      	ldrb	r3, [r7, #23]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d109      	bne.n	800724e <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800723a:	4b5e      	ldr	r3, [pc, #376]	; (80073b4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800723c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800723e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007246:	495b      	ldr	r1, [pc, #364]	; (80073b4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007248:	4313      	orrs	r3, r2
 800724a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800724c:	e001      	b.n	8007252 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800724e:	7dfb      	ldrb	r3, [r7, #23]
 8007250:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800725a:	2b00      	cmp	r3, #0
 800725c:	d00a      	beq.n	8007274 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	3324      	adds	r3, #36	; 0x24
 8007262:	2102      	movs	r1, #2
 8007264:	4618      	mov	r0, r3
 8007266:	f000 fc17 	bl	8007a98 <RCCEx_PLL3_Config>
 800726a:	4603      	mov	r3, r0
 800726c:	2b00      	cmp	r3, #0
 800726e:	d001      	beq.n	8007274 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8007270:	2301      	movs	r3, #1
 8007272:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800727c:	2b00      	cmp	r3, #0
 800727e:	d030      	beq.n	80072e2 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007284:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007288:	d017      	beq.n	80072ba <HAL_RCCEx_PeriphCLKConfig+0xd82>
 800728a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800728e:	d811      	bhi.n	80072b4 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8007290:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007294:	d013      	beq.n	80072be <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8007296:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800729a:	d80b      	bhi.n	80072b4 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800729c:	2b00      	cmp	r3, #0
 800729e:	d010      	beq.n	80072c2 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 80072a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072a4:	d106      	bne.n	80072b4 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80072a6:	4b43      	ldr	r3, [pc, #268]	; (80073b4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80072a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072aa:	4a42      	ldr	r2, [pc, #264]	; (80073b4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80072ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80072b0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80072b2:	e007      	b.n	80072c4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80072b4:	2301      	movs	r3, #1
 80072b6:	75fb      	strb	r3, [r7, #23]
      break;
 80072b8:	e004      	b.n	80072c4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80072ba:	bf00      	nop
 80072bc:	e002      	b.n	80072c4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80072be:	bf00      	nop
 80072c0:	e000      	b.n	80072c4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80072c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80072c4:	7dfb      	ldrb	r3, [r7, #23]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d109      	bne.n	80072de <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80072ca:	4b3a      	ldr	r3, [pc, #232]	; (80073b4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80072cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072ce:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80072d6:	4937      	ldr	r1, [pc, #220]	; (80073b4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80072d8:	4313      	orrs	r3, r2
 80072da:	654b      	str	r3, [r1, #84]	; 0x54
 80072dc:	e001      	b.n	80072e2 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072de:	7dfb      	ldrb	r3, [r7, #23]
 80072e0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d008      	beq.n	8007300 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80072ee:	4b31      	ldr	r3, [pc, #196]	; (80073b4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80072f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072f2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072fa:	492e      	ldr	r1, [pc, #184]	; (80073b4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80072fc:	4313      	orrs	r3, r2
 80072fe:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007308:	2b00      	cmp	r3, #0
 800730a:	d009      	beq.n	8007320 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800730c:	4b29      	ldr	r3, [pc, #164]	; (80073b4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800730e:	691b      	ldr	r3, [r3, #16]
 8007310:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800731a:	4926      	ldr	r1, [pc, #152]	; (80073b4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800731c:	4313      	orrs	r3, r2
 800731e:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007328:	2b00      	cmp	r3, #0
 800732a:	d008      	beq.n	800733e <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800732c:	4b21      	ldr	r3, [pc, #132]	; (80073b4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800732e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007330:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007338:	491e      	ldr	r1, [pc, #120]	; (80073b4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800733a:	4313      	orrs	r3, r2
 800733c:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007346:	2b00      	cmp	r3, #0
 8007348:	d00d      	beq.n	8007366 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800734a:	4b1a      	ldr	r3, [pc, #104]	; (80073b4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800734c:	691b      	ldr	r3, [r3, #16]
 800734e:	4a19      	ldr	r2, [pc, #100]	; (80073b4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007350:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007354:	6113      	str	r3, [r2, #16]
 8007356:	4b17      	ldr	r3, [pc, #92]	; (80073b4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007358:	691a      	ldr	r2, [r3, #16]
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007360:	4914      	ldr	r1, [pc, #80]	; (80073b4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007362:	4313      	orrs	r3, r2
 8007364:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	2b00      	cmp	r3, #0
 800736c:	da08      	bge.n	8007380 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800736e:	4b11      	ldr	r3, [pc, #68]	; (80073b4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007370:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007372:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800737a:	490e      	ldr	r1, [pc, #56]	; (80073b4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800737c:	4313      	orrs	r3, r2
 800737e:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007388:	2b00      	cmp	r3, #0
 800738a:	d009      	beq.n	80073a0 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800738c:	4b09      	ldr	r3, [pc, #36]	; (80073b4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800738e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007390:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800739a:	4906      	ldr	r1, [pc, #24]	; (80073b4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800739c:	4313      	orrs	r3, r2
 800739e:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80073a0:	7dbb      	ldrb	r3, [r7, #22]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d101      	bne.n	80073aa <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 80073a6:	2300      	movs	r3, #0
 80073a8:	e000      	b.n	80073ac <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 80073aa:	2301      	movs	r3, #1
}
 80073ac:	4618      	mov	r0, r3
 80073ae:	3718      	adds	r7, #24
 80073b0:	46bd      	mov	sp, r7
 80073b2:	bd80      	pop	{r7, pc}
 80073b4:	58024400 	.word	0x58024400

080073b8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80073bc:	f7ff f81e 	bl	80063fc <HAL_RCC_GetHCLKFreq>
 80073c0:	4602      	mov	r2, r0
 80073c2:	4b06      	ldr	r3, [pc, #24]	; (80073dc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80073c4:	6a1b      	ldr	r3, [r3, #32]
 80073c6:	091b      	lsrs	r3, r3, #4
 80073c8:	f003 0307 	and.w	r3, r3, #7
 80073cc:	4904      	ldr	r1, [pc, #16]	; (80073e0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80073ce:	5ccb      	ldrb	r3, [r1, r3]
 80073d0:	f003 031f 	and.w	r3, r3, #31
 80073d4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80073d8:	4618      	mov	r0, r3
 80073da:	bd80      	pop	{r7, pc}
 80073dc:	58024400 	.word	0x58024400
 80073e0:	08026fe0 	.word	0x08026fe0

080073e4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80073e4:	b480      	push	{r7}
 80073e6:	b089      	sub	sp, #36	; 0x24
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80073ec:	4ba1      	ldr	r3, [pc, #644]	; (8007674 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80073ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073f0:	f003 0303 	and.w	r3, r3, #3
 80073f4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80073f6:	4b9f      	ldr	r3, [pc, #636]	; (8007674 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80073f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073fa:	0b1b      	lsrs	r3, r3, #12
 80073fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007400:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007402:	4b9c      	ldr	r3, [pc, #624]	; (8007674 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007406:	091b      	lsrs	r3, r3, #4
 8007408:	f003 0301 	and.w	r3, r3, #1
 800740c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800740e:	4b99      	ldr	r3, [pc, #612]	; (8007674 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007410:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007412:	08db      	lsrs	r3, r3, #3
 8007414:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007418:	693a      	ldr	r2, [r7, #16]
 800741a:	fb02 f303 	mul.w	r3, r2, r3
 800741e:	ee07 3a90 	vmov	s15, r3
 8007422:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007426:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800742a:	697b      	ldr	r3, [r7, #20]
 800742c:	2b00      	cmp	r3, #0
 800742e:	f000 8111 	beq.w	8007654 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007432:	69bb      	ldr	r3, [r7, #24]
 8007434:	2b02      	cmp	r3, #2
 8007436:	f000 8083 	beq.w	8007540 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800743a:	69bb      	ldr	r3, [r7, #24]
 800743c:	2b02      	cmp	r3, #2
 800743e:	f200 80a1 	bhi.w	8007584 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007442:	69bb      	ldr	r3, [r7, #24]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d003      	beq.n	8007450 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007448:	69bb      	ldr	r3, [r7, #24]
 800744a:	2b01      	cmp	r3, #1
 800744c:	d056      	beq.n	80074fc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800744e:	e099      	b.n	8007584 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007450:	4b88      	ldr	r3, [pc, #544]	; (8007674 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f003 0320 	and.w	r3, r3, #32
 8007458:	2b00      	cmp	r3, #0
 800745a:	d02d      	beq.n	80074b8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800745c:	4b85      	ldr	r3, [pc, #532]	; (8007674 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	08db      	lsrs	r3, r3, #3
 8007462:	f003 0303 	and.w	r3, r3, #3
 8007466:	4a84      	ldr	r2, [pc, #528]	; (8007678 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007468:	fa22 f303 	lsr.w	r3, r2, r3
 800746c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800746e:	68bb      	ldr	r3, [r7, #8]
 8007470:	ee07 3a90 	vmov	s15, r3
 8007474:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007478:	697b      	ldr	r3, [r7, #20]
 800747a:	ee07 3a90 	vmov	s15, r3
 800747e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007482:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007486:	4b7b      	ldr	r3, [pc, #492]	; (8007674 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007488:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800748a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800748e:	ee07 3a90 	vmov	s15, r3
 8007492:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007496:	ed97 6a03 	vldr	s12, [r7, #12]
 800749a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800767c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800749e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80074aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074b2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80074b6:	e087      	b.n	80075c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80074b8:	697b      	ldr	r3, [r7, #20]
 80074ba:	ee07 3a90 	vmov	s15, r3
 80074be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074c2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007680 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80074c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074ca:	4b6a      	ldr	r3, [pc, #424]	; (8007674 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80074cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074d2:	ee07 3a90 	vmov	s15, r3
 80074d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074da:	ed97 6a03 	vldr	s12, [r7, #12]
 80074de:	eddf 5a67 	vldr	s11, [pc, #412]	; 800767c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80074e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80074ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074f6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80074fa:	e065      	b.n	80075c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80074fc:	697b      	ldr	r3, [r7, #20]
 80074fe:	ee07 3a90 	vmov	s15, r3
 8007502:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007506:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007684 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800750a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800750e:	4b59      	ldr	r3, [pc, #356]	; (8007674 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007512:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007516:	ee07 3a90 	vmov	s15, r3
 800751a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800751e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007522:	eddf 5a56 	vldr	s11, [pc, #344]	; 800767c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007526:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800752a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800752e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007532:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007536:	ee67 7a27 	vmul.f32	s15, s14, s15
 800753a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800753e:	e043      	b.n	80075c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007540:	697b      	ldr	r3, [r7, #20]
 8007542:	ee07 3a90 	vmov	s15, r3
 8007546:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800754a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007688 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800754e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007552:	4b48      	ldr	r3, [pc, #288]	; (8007674 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007556:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800755a:	ee07 3a90 	vmov	s15, r3
 800755e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007562:	ed97 6a03 	vldr	s12, [r7, #12]
 8007566:	eddf 5a45 	vldr	s11, [pc, #276]	; 800767c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800756a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800756e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007572:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007576:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800757a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800757e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007582:	e021      	b.n	80075c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007584:	697b      	ldr	r3, [r7, #20]
 8007586:	ee07 3a90 	vmov	s15, r3
 800758a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800758e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007684 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007592:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007596:	4b37      	ldr	r3, [pc, #220]	; (8007674 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800759a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800759e:	ee07 3a90 	vmov	s15, r3
 80075a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80075aa:	eddf 5a34 	vldr	s11, [pc, #208]	; 800767c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80075ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80075ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075c2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80075c6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80075c8:	4b2a      	ldr	r3, [pc, #168]	; (8007674 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80075ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075cc:	0a5b      	lsrs	r3, r3, #9
 80075ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075d2:	ee07 3a90 	vmov	s15, r3
 80075d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80075de:	ee37 7a87 	vadd.f32	s14, s15, s14
 80075e2:	edd7 6a07 	vldr	s13, [r7, #28]
 80075e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80075ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80075ee:	ee17 2a90 	vmov	r2, s15
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80075f6:	4b1f      	ldr	r3, [pc, #124]	; (8007674 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80075f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075fa:	0c1b      	lsrs	r3, r3, #16
 80075fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007600:	ee07 3a90 	vmov	s15, r3
 8007604:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007608:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800760c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007610:	edd7 6a07 	vldr	s13, [r7, #28]
 8007614:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007618:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800761c:	ee17 2a90 	vmov	r2, s15
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8007624:	4b13      	ldr	r3, [pc, #76]	; (8007674 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007628:	0e1b      	lsrs	r3, r3, #24
 800762a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800762e:	ee07 3a90 	vmov	s15, r3
 8007632:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007636:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800763a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800763e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007642:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007646:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800764a:	ee17 2a90 	vmov	r2, s15
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007652:	e008      	b.n	8007666 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2200      	movs	r2, #0
 8007658:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2200      	movs	r2, #0
 800765e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2200      	movs	r2, #0
 8007664:	609a      	str	r2, [r3, #8]
}
 8007666:	bf00      	nop
 8007668:	3724      	adds	r7, #36	; 0x24
 800766a:	46bd      	mov	sp, r7
 800766c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007670:	4770      	bx	lr
 8007672:	bf00      	nop
 8007674:	58024400 	.word	0x58024400
 8007678:	03d09000 	.word	0x03d09000
 800767c:	46000000 	.word	0x46000000
 8007680:	4c742400 	.word	0x4c742400
 8007684:	4a742400 	.word	0x4a742400
 8007688:	4af42400 	.word	0x4af42400

0800768c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800768c:	b480      	push	{r7}
 800768e:	b089      	sub	sp, #36	; 0x24
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007694:	4ba1      	ldr	r3, [pc, #644]	; (800791c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007698:	f003 0303 	and.w	r3, r3, #3
 800769c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800769e:	4b9f      	ldr	r3, [pc, #636]	; (800791c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80076a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076a2:	0d1b      	lsrs	r3, r3, #20
 80076a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80076a8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80076aa:	4b9c      	ldr	r3, [pc, #624]	; (800791c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80076ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076ae:	0a1b      	lsrs	r3, r3, #8
 80076b0:	f003 0301 	and.w	r3, r3, #1
 80076b4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80076b6:	4b99      	ldr	r3, [pc, #612]	; (800791c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80076b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076ba:	08db      	lsrs	r3, r3, #3
 80076bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80076c0:	693a      	ldr	r2, [r7, #16]
 80076c2:	fb02 f303 	mul.w	r3, r2, r3
 80076c6:	ee07 3a90 	vmov	s15, r3
 80076ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076ce:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80076d2:	697b      	ldr	r3, [r7, #20]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	f000 8111 	beq.w	80078fc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80076da:	69bb      	ldr	r3, [r7, #24]
 80076dc:	2b02      	cmp	r3, #2
 80076de:	f000 8083 	beq.w	80077e8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80076e2:	69bb      	ldr	r3, [r7, #24]
 80076e4:	2b02      	cmp	r3, #2
 80076e6:	f200 80a1 	bhi.w	800782c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80076ea:	69bb      	ldr	r3, [r7, #24]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d003      	beq.n	80076f8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80076f0:	69bb      	ldr	r3, [r7, #24]
 80076f2:	2b01      	cmp	r3, #1
 80076f4:	d056      	beq.n	80077a4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80076f6:	e099      	b.n	800782c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80076f8:	4b88      	ldr	r3, [pc, #544]	; (800791c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	f003 0320 	and.w	r3, r3, #32
 8007700:	2b00      	cmp	r3, #0
 8007702:	d02d      	beq.n	8007760 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007704:	4b85      	ldr	r3, [pc, #532]	; (800791c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	08db      	lsrs	r3, r3, #3
 800770a:	f003 0303 	and.w	r3, r3, #3
 800770e:	4a84      	ldr	r2, [pc, #528]	; (8007920 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007710:	fa22 f303 	lsr.w	r3, r2, r3
 8007714:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007716:	68bb      	ldr	r3, [r7, #8]
 8007718:	ee07 3a90 	vmov	s15, r3
 800771c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007720:	697b      	ldr	r3, [r7, #20]
 8007722:	ee07 3a90 	vmov	s15, r3
 8007726:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800772a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800772e:	4b7b      	ldr	r3, [pc, #492]	; (800791c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007732:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007736:	ee07 3a90 	vmov	s15, r3
 800773a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800773e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007742:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007924 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007746:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800774a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800774e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007752:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007756:	ee67 7a27 	vmul.f32	s15, s14, s15
 800775a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800775e:	e087      	b.n	8007870 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007760:	697b      	ldr	r3, [r7, #20]
 8007762:	ee07 3a90 	vmov	s15, r3
 8007766:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800776a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007928 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800776e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007772:	4b6a      	ldr	r3, [pc, #424]	; (800791c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007776:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800777a:	ee07 3a90 	vmov	s15, r3
 800777e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007782:	ed97 6a03 	vldr	s12, [r7, #12]
 8007786:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007924 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800778a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800778e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007792:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007796:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800779a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800779e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80077a2:	e065      	b.n	8007870 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80077a4:	697b      	ldr	r3, [r7, #20]
 80077a6:	ee07 3a90 	vmov	s15, r3
 80077aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077ae:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800792c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80077b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80077b6:	4b59      	ldr	r3, [pc, #356]	; (800791c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80077b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077be:	ee07 3a90 	vmov	s15, r3
 80077c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80077ca:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007924 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80077ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80077d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80077da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077e2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80077e6:	e043      	b.n	8007870 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80077e8:	697b      	ldr	r3, [r7, #20]
 80077ea:	ee07 3a90 	vmov	s15, r3
 80077ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077f2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007930 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80077f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80077fa:	4b48      	ldr	r3, [pc, #288]	; (800791c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80077fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007802:	ee07 3a90 	vmov	s15, r3
 8007806:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800780a:	ed97 6a03 	vldr	s12, [r7, #12]
 800780e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007924 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007812:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007816:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800781a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800781e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007822:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007826:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800782a:	e021      	b.n	8007870 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800782c:	697b      	ldr	r3, [r7, #20]
 800782e:	ee07 3a90 	vmov	s15, r3
 8007832:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007836:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800792c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800783a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800783e:	4b37      	ldr	r3, [pc, #220]	; (800791c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007842:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007846:	ee07 3a90 	vmov	s15, r3
 800784a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800784e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007852:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007924 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007856:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800785a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800785e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007862:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007866:	ee67 7a27 	vmul.f32	s15, s14, s15
 800786a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800786e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8007870:	4b2a      	ldr	r3, [pc, #168]	; (800791c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007874:	0a5b      	lsrs	r3, r3, #9
 8007876:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800787a:	ee07 3a90 	vmov	s15, r3
 800787e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007882:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007886:	ee37 7a87 	vadd.f32	s14, s15, s14
 800788a:	edd7 6a07 	vldr	s13, [r7, #28]
 800788e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007892:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007896:	ee17 2a90 	vmov	r2, s15
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800789e:	4b1f      	ldr	r3, [pc, #124]	; (800791c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80078a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078a2:	0c1b      	lsrs	r3, r3, #16
 80078a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078a8:	ee07 3a90 	vmov	s15, r3
 80078ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078b0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80078b4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80078b8:	edd7 6a07 	vldr	s13, [r7, #28]
 80078bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80078c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80078c4:	ee17 2a90 	vmov	r2, s15
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80078cc:	4b13      	ldr	r3, [pc, #76]	; (800791c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80078ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078d0:	0e1b      	lsrs	r3, r3, #24
 80078d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078d6:	ee07 3a90 	vmov	s15, r3
 80078da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80078e2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80078e6:	edd7 6a07 	vldr	s13, [r7, #28]
 80078ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80078ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80078f2:	ee17 2a90 	vmov	r2, s15
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80078fa:	e008      	b.n	800790e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2200      	movs	r2, #0
 8007900:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2200      	movs	r2, #0
 8007906:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2200      	movs	r2, #0
 800790c:	609a      	str	r2, [r3, #8]
}
 800790e:	bf00      	nop
 8007910:	3724      	adds	r7, #36	; 0x24
 8007912:	46bd      	mov	sp, r7
 8007914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007918:	4770      	bx	lr
 800791a:	bf00      	nop
 800791c:	58024400 	.word	0x58024400
 8007920:	03d09000 	.word	0x03d09000
 8007924:	46000000 	.word	0x46000000
 8007928:	4c742400 	.word	0x4c742400
 800792c:	4a742400 	.word	0x4a742400
 8007930:	4af42400 	.word	0x4af42400

08007934 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007934:	b580      	push	{r7, lr}
 8007936:	b084      	sub	sp, #16
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
 800793c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800793e:	2300      	movs	r3, #0
 8007940:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007942:	4b53      	ldr	r3, [pc, #332]	; (8007a90 <RCCEx_PLL2_Config+0x15c>)
 8007944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007946:	f003 0303 	and.w	r3, r3, #3
 800794a:	2b03      	cmp	r3, #3
 800794c:	d101      	bne.n	8007952 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800794e:	2301      	movs	r3, #1
 8007950:	e099      	b.n	8007a86 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007952:	4b4f      	ldr	r3, [pc, #316]	; (8007a90 <RCCEx_PLL2_Config+0x15c>)
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	4a4e      	ldr	r2, [pc, #312]	; (8007a90 <RCCEx_PLL2_Config+0x15c>)
 8007958:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800795c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800795e:	f7fb f945 	bl	8002bec <HAL_GetTick>
 8007962:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007964:	e008      	b.n	8007978 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007966:	f7fb f941 	bl	8002bec <HAL_GetTick>
 800796a:	4602      	mov	r2, r0
 800796c:	68bb      	ldr	r3, [r7, #8]
 800796e:	1ad3      	subs	r3, r2, r3
 8007970:	2b02      	cmp	r3, #2
 8007972:	d901      	bls.n	8007978 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007974:	2303      	movs	r3, #3
 8007976:	e086      	b.n	8007a86 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007978:	4b45      	ldr	r3, [pc, #276]	; (8007a90 <RCCEx_PLL2_Config+0x15c>)
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007980:	2b00      	cmp	r3, #0
 8007982:	d1f0      	bne.n	8007966 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007984:	4b42      	ldr	r3, [pc, #264]	; (8007a90 <RCCEx_PLL2_Config+0x15c>)
 8007986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007988:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	031b      	lsls	r3, r3, #12
 8007992:	493f      	ldr	r1, [pc, #252]	; (8007a90 <RCCEx_PLL2_Config+0x15c>)
 8007994:	4313      	orrs	r3, r2
 8007996:	628b      	str	r3, [r1, #40]	; 0x28
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	685b      	ldr	r3, [r3, #4]
 800799c:	3b01      	subs	r3, #1
 800799e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	689b      	ldr	r3, [r3, #8]
 80079a6:	3b01      	subs	r3, #1
 80079a8:	025b      	lsls	r3, r3, #9
 80079aa:	b29b      	uxth	r3, r3
 80079ac:	431a      	orrs	r2, r3
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	68db      	ldr	r3, [r3, #12]
 80079b2:	3b01      	subs	r3, #1
 80079b4:	041b      	lsls	r3, r3, #16
 80079b6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80079ba:	431a      	orrs	r2, r3
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	691b      	ldr	r3, [r3, #16]
 80079c0:	3b01      	subs	r3, #1
 80079c2:	061b      	lsls	r3, r3, #24
 80079c4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80079c8:	4931      	ldr	r1, [pc, #196]	; (8007a90 <RCCEx_PLL2_Config+0x15c>)
 80079ca:	4313      	orrs	r3, r2
 80079cc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80079ce:	4b30      	ldr	r3, [pc, #192]	; (8007a90 <RCCEx_PLL2_Config+0x15c>)
 80079d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079d2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	695b      	ldr	r3, [r3, #20]
 80079da:	492d      	ldr	r1, [pc, #180]	; (8007a90 <RCCEx_PLL2_Config+0x15c>)
 80079dc:	4313      	orrs	r3, r2
 80079de:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80079e0:	4b2b      	ldr	r3, [pc, #172]	; (8007a90 <RCCEx_PLL2_Config+0x15c>)
 80079e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079e4:	f023 0220 	bic.w	r2, r3, #32
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	699b      	ldr	r3, [r3, #24]
 80079ec:	4928      	ldr	r1, [pc, #160]	; (8007a90 <RCCEx_PLL2_Config+0x15c>)
 80079ee:	4313      	orrs	r3, r2
 80079f0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80079f2:	4b27      	ldr	r3, [pc, #156]	; (8007a90 <RCCEx_PLL2_Config+0x15c>)
 80079f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079f6:	4a26      	ldr	r2, [pc, #152]	; (8007a90 <RCCEx_PLL2_Config+0x15c>)
 80079f8:	f023 0310 	bic.w	r3, r3, #16
 80079fc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80079fe:	4b24      	ldr	r3, [pc, #144]	; (8007a90 <RCCEx_PLL2_Config+0x15c>)
 8007a00:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007a02:	4b24      	ldr	r3, [pc, #144]	; (8007a94 <RCCEx_PLL2_Config+0x160>)
 8007a04:	4013      	ands	r3, r2
 8007a06:	687a      	ldr	r2, [r7, #4]
 8007a08:	69d2      	ldr	r2, [r2, #28]
 8007a0a:	00d2      	lsls	r2, r2, #3
 8007a0c:	4920      	ldr	r1, [pc, #128]	; (8007a90 <RCCEx_PLL2_Config+0x15c>)
 8007a0e:	4313      	orrs	r3, r2
 8007a10:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007a12:	4b1f      	ldr	r3, [pc, #124]	; (8007a90 <RCCEx_PLL2_Config+0x15c>)
 8007a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a16:	4a1e      	ldr	r2, [pc, #120]	; (8007a90 <RCCEx_PLL2_Config+0x15c>)
 8007a18:	f043 0310 	orr.w	r3, r3, #16
 8007a1c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d106      	bne.n	8007a32 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007a24:	4b1a      	ldr	r3, [pc, #104]	; (8007a90 <RCCEx_PLL2_Config+0x15c>)
 8007a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a28:	4a19      	ldr	r2, [pc, #100]	; (8007a90 <RCCEx_PLL2_Config+0x15c>)
 8007a2a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007a2e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007a30:	e00f      	b.n	8007a52 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007a32:	683b      	ldr	r3, [r7, #0]
 8007a34:	2b01      	cmp	r3, #1
 8007a36:	d106      	bne.n	8007a46 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007a38:	4b15      	ldr	r3, [pc, #84]	; (8007a90 <RCCEx_PLL2_Config+0x15c>)
 8007a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a3c:	4a14      	ldr	r2, [pc, #80]	; (8007a90 <RCCEx_PLL2_Config+0x15c>)
 8007a3e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007a42:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007a44:	e005      	b.n	8007a52 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007a46:	4b12      	ldr	r3, [pc, #72]	; (8007a90 <RCCEx_PLL2_Config+0x15c>)
 8007a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a4a:	4a11      	ldr	r2, [pc, #68]	; (8007a90 <RCCEx_PLL2_Config+0x15c>)
 8007a4c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007a50:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007a52:	4b0f      	ldr	r3, [pc, #60]	; (8007a90 <RCCEx_PLL2_Config+0x15c>)
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	4a0e      	ldr	r2, [pc, #56]	; (8007a90 <RCCEx_PLL2_Config+0x15c>)
 8007a58:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007a5c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007a5e:	f7fb f8c5 	bl	8002bec <HAL_GetTick>
 8007a62:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007a64:	e008      	b.n	8007a78 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007a66:	f7fb f8c1 	bl	8002bec <HAL_GetTick>
 8007a6a:	4602      	mov	r2, r0
 8007a6c:	68bb      	ldr	r3, [r7, #8]
 8007a6e:	1ad3      	subs	r3, r2, r3
 8007a70:	2b02      	cmp	r3, #2
 8007a72:	d901      	bls.n	8007a78 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007a74:	2303      	movs	r3, #3
 8007a76:	e006      	b.n	8007a86 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007a78:	4b05      	ldr	r3, [pc, #20]	; (8007a90 <RCCEx_PLL2_Config+0x15c>)
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d0f0      	beq.n	8007a66 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007a84:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a86:	4618      	mov	r0, r3
 8007a88:	3710      	adds	r7, #16
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	bd80      	pop	{r7, pc}
 8007a8e:	bf00      	nop
 8007a90:	58024400 	.word	0x58024400
 8007a94:	ffff0007 	.word	0xffff0007

08007a98 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b084      	sub	sp, #16
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
 8007aa0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007aa6:	4b53      	ldr	r3, [pc, #332]	; (8007bf4 <RCCEx_PLL3_Config+0x15c>)
 8007aa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007aaa:	f003 0303 	and.w	r3, r3, #3
 8007aae:	2b03      	cmp	r3, #3
 8007ab0:	d101      	bne.n	8007ab6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007ab2:	2301      	movs	r3, #1
 8007ab4:	e099      	b.n	8007bea <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007ab6:	4b4f      	ldr	r3, [pc, #316]	; (8007bf4 <RCCEx_PLL3_Config+0x15c>)
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	4a4e      	ldr	r2, [pc, #312]	; (8007bf4 <RCCEx_PLL3_Config+0x15c>)
 8007abc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007ac0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007ac2:	f7fb f893 	bl	8002bec <HAL_GetTick>
 8007ac6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007ac8:	e008      	b.n	8007adc <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007aca:	f7fb f88f 	bl	8002bec <HAL_GetTick>
 8007ace:	4602      	mov	r2, r0
 8007ad0:	68bb      	ldr	r3, [r7, #8]
 8007ad2:	1ad3      	subs	r3, r2, r3
 8007ad4:	2b02      	cmp	r3, #2
 8007ad6:	d901      	bls.n	8007adc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007ad8:	2303      	movs	r3, #3
 8007ada:	e086      	b.n	8007bea <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007adc:	4b45      	ldr	r3, [pc, #276]	; (8007bf4 <RCCEx_PLL3_Config+0x15c>)
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d1f0      	bne.n	8007aca <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007ae8:	4b42      	ldr	r3, [pc, #264]	; (8007bf4 <RCCEx_PLL3_Config+0x15c>)
 8007aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007aec:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	051b      	lsls	r3, r3, #20
 8007af6:	493f      	ldr	r1, [pc, #252]	; (8007bf4 <RCCEx_PLL3_Config+0x15c>)
 8007af8:	4313      	orrs	r3, r2
 8007afa:	628b      	str	r3, [r1, #40]	; 0x28
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	685b      	ldr	r3, [r3, #4]
 8007b00:	3b01      	subs	r3, #1
 8007b02:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	689b      	ldr	r3, [r3, #8]
 8007b0a:	3b01      	subs	r3, #1
 8007b0c:	025b      	lsls	r3, r3, #9
 8007b0e:	b29b      	uxth	r3, r3
 8007b10:	431a      	orrs	r2, r3
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	68db      	ldr	r3, [r3, #12]
 8007b16:	3b01      	subs	r3, #1
 8007b18:	041b      	lsls	r3, r3, #16
 8007b1a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007b1e:	431a      	orrs	r2, r3
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	691b      	ldr	r3, [r3, #16]
 8007b24:	3b01      	subs	r3, #1
 8007b26:	061b      	lsls	r3, r3, #24
 8007b28:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007b2c:	4931      	ldr	r1, [pc, #196]	; (8007bf4 <RCCEx_PLL3_Config+0x15c>)
 8007b2e:	4313      	orrs	r3, r2
 8007b30:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007b32:	4b30      	ldr	r3, [pc, #192]	; (8007bf4 <RCCEx_PLL3_Config+0x15c>)
 8007b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b36:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	695b      	ldr	r3, [r3, #20]
 8007b3e:	492d      	ldr	r1, [pc, #180]	; (8007bf4 <RCCEx_PLL3_Config+0x15c>)
 8007b40:	4313      	orrs	r3, r2
 8007b42:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007b44:	4b2b      	ldr	r3, [pc, #172]	; (8007bf4 <RCCEx_PLL3_Config+0x15c>)
 8007b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b48:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	699b      	ldr	r3, [r3, #24]
 8007b50:	4928      	ldr	r1, [pc, #160]	; (8007bf4 <RCCEx_PLL3_Config+0x15c>)
 8007b52:	4313      	orrs	r3, r2
 8007b54:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007b56:	4b27      	ldr	r3, [pc, #156]	; (8007bf4 <RCCEx_PLL3_Config+0x15c>)
 8007b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b5a:	4a26      	ldr	r2, [pc, #152]	; (8007bf4 <RCCEx_PLL3_Config+0x15c>)
 8007b5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007b60:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007b62:	4b24      	ldr	r3, [pc, #144]	; (8007bf4 <RCCEx_PLL3_Config+0x15c>)
 8007b64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007b66:	4b24      	ldr	r3, [pc, #144]	; (8007bf8 <RCCEx_PLL3_Config+0x160>)
 8007b68:	4013      	ands	r3, r2
 8007b6a:	687a      	ldr	r2, [r7, #4]
 8007b6c:	69d2      	ldr	r2, [r2, #28]
 8007b6e:	00d2      	lsls	r2, r2, #3
 8007b70:	4920      	ldr	r1, [pc, #128]	; (8007bf4 <RCCEx_PLL3_Config+0x15c>)
 8007b72:	4313      	orrs	r3, r2
 8007b74:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007b76:	4b1f      	ldr	r3, [pc, #124]	; (8007bf4 <RCCEx_PLL3_Config+0x15c>)
 8007b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b7a:	4a1e      	ldr	r2, [pc, #120]	; (8007bf4 <RCCEx_PLL3_Config+0x15c>)
 8007b7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b80:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007b82:	683b      	ldr	r3, [r7, #0]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d106      	bne.n	8007b96 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007b88:	4b1a      	ldr	r3, [pc, #104]	; (8007bf4 <RCCEx_PLL3_Config+0x15c>)
 8007b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b8c:	4a19      	ldr	r2, [pc, #100]	; (8007bf4 <RCCEx_PLL3_Config+0x15c>)
 8007b8e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007b92:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007b94:	e00f      	b.n	8007bb6 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007b96:	683b      	ldr	r3, [r7, #0]
 8007b98:	2b01      	cmp	r3, #1
 8007b9a:	d106      	bne.n	8007baa <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007b9c:	4b15      	ldr	r3, [pc, #84]	; (8007bf4 <RCCEx_PLL3_Config+0x15c>)
 8007b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ba0:	4a14      	ldr	r2, [pc, #80]	; (8007bf4 <RCCEx_PLL3_Config+0x15c>)
 8007ba2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007ba6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007ba8:	e005      	b.n	8007bb6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007baa:	4b12      	ldr	r3, [pc, #72]	; (8007bf4 <RCCEx_PLL3_Config+0x15c>)
 8007bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bae:	4a11      	ldr	r2, [pc, #68]	; (8007bf4 <RCCEx_PLL3_Config+0x15c>)
 8007bb0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007bb4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007bb6:	4b0f      	ldr	r3, [pc, #60]	; (8007bf4 <RCCEx_PLL3_Config+0x15c>)
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	4a0e      	ldr	r2, [pc, #56]	; (8007bf4 <RCCEx_PLL3_Config+0x15c>)
 8007bbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007bc0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007bc2:	f7fb f813 	bl	8002bec <HAL_GetTick>
 8007bc6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007bc8:	e008      	b.n	8007bdc <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007bca:	f7fb f80f 	bl	8002bec <HAL_GetTick>
 8007bce:	4602      	mov	r2, r0
 8007bd0:	68bb      	ldr	r3, [r7, #8]
 8007bd2:	1ad3      	subs	r3, r2, r3
 8007bd4:	2b02      	cmp	r3, #2
 8007bd6:	d901      	bls.n	8007bdc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007bd8:	2303      	movs	r3, #3
 8007bda:	e006      	b.n	8007bea <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007bdc:	4b05      	ldr	r3, [pc, #20]	; (8007bf4 <RCCEx_PLL3_Config+0x15c>)
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d0f0      	beq.n	8007bca <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007be8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bea:	4618      	mov	r0, r3
 8007bec:	3710      	adds	r7, #16
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	bd80      	pop	{r7, pc}
 8007bf2:	bf00      	nop
 8007bf4:	58024400 	.word	0x58024400
 8007bf8:	ffff0007 	.word	0xffff0007

08007bfc <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b084      	sub	sp, #16
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_length;
#else
  uint32_t crc_length = 0UL;
 8007c04:	2300      	movs	r3, #0
 8007c06:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d101      	bne.n	8007c12 <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 8007c0e:	2301      	movs	r3, #1
 8007c10:	e0eb      	b.n	8007dea <HAL_SPI_Init+0x1ee>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	2200      	movs	r2, #0
 8007c16:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	4a75      	ldr	r2, [pc, #468]	; (8007df4 <HAL_SPI_Init+0x1f8>)
 8007c1e:	4293      	cmp	r3, r2
 8007c20:	d00f      	beq.n	8007c42 <HAL_SPI_Init+0x46>
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	4a74      	ldr	r2, [pc, #464]	; (8007df8 <HAL_SPI_Init+0x1fc>)
 8007c28:	4293      	cmp	r3, r2
 8007c2a:	d00a      	beq.n	8007c42 <HAL_SPI_Init+0x46>
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	4a72      	ldr	r2, [pc, #456]	; (8007dfc <HAL_SPI_Init+0x200>)
 8007c32:	4293      	cmp	r3, r2
 8007c34:	d005      	beq.n	8007c42 <HAL_SPI_Init+0x46>
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	68db      	ldr	r3, [r3, #12]
 8007c3a:	2b0f      	cmp	r3, #15
 8007c3c:	d901      	bls.n	8007c42 <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 8007c3e:	2301      	movs	r3, #1
 8007c40:	e0d3      	b.n	8007dea <HAL_SPI_Init+0x1ee>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8007c42:	6878      	ldr	r0, [r7, #4]
 8007c44:	f000 fcc8 	bl	80085d8 <SPI_GetPacketSize>
 8007c48:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	4a69      	ldr	r2, [pc, #420]	; (8007df4 <HAL_SPI_Init+0x1f8>)
 8007c50:	4293      	cmp	r3, r2
 8007c52:	d00c      	beq.n	8007c6e <HAL_SPI_Init+0x72>
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	4a67      	ldr	r2, [pc, #412]	; (8007df8 <HAL_SPI_Init+0x1fc>)
 8007c5a:	4293      	cmp	r3, r2
 8007c5c:	d007      	beq.n	8007c6e <HAL_SPI_Init+0x72>
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	4a66      	ldr	r2, [pc, #408]	; (8007dfc <HAL_SPI_Init+0x200>)
 8007c64:	4293      	cmp	r3, r2
 8007c66:	d002      	beq.n	8007c6e <HAL_SPI_Init+0x72>
 8007c68:	68bb      	ldr	r3, [r7, #8]
 8007c6a:	2b08      	cmp	r3, #8
 8007c6c:	d811      	bhi.n	8007c92 <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007c72:	4a60      	ldr	r2, [pc, #384]	; (8007df4 <HAL_SPI_Init+0x1f8>)
 8007c74:	4293      	cmp	r3, r2
 8007c76:	d009      	beq.n	8007c8c <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	4a5e      	ldr	r2, [pc, #376]	; (8007df8 <HAL_SPI_Init+0x1fc>)
 8007c7e:	4293      	cmp	r3, r2
 8007c80:	d004      	beq.n	8007c8c <HAL_SPI_Init+0x90>
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	4a5d      	ldr	r2, [pc, #372]	; (8007dfc <HAL_SPI_Init+0x200>)
 8007c88:	4293      	cmp	r3, r2
 8007c8a:	d104      	bne.n	8007c96 <HAL_SPI_Init+0x9a>
 8007c8c:	68bb      	ldr	r3, [r7, #8]
 8007c8e:	2b10      	cmp	r3, #16
 8007c90:	d901      	bls.n	8007c96 <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 8007c92:	2301      	movs	r3, #1
 8007c94:	e0a9      	b.n	8007dea <HAL_SPI_Init+0x1ee>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007c9c:	b2db      	uxtb	r3, r3
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d106      	bne.n	8007cb0 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007caa:	6878      	ldr	r0, [r7, #4]
 8007cac:	f7fa faea 	bl	8002284 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2202      	movs	r2, #2
 8007cb4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	681a      	ldr	r2, [r3, #0]
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	f022 0201 	bic.w	r2, r2, #1
 8007cc6:	601a      	str	r2, [r3, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	699b      	ldr	r3, [r3, #24]
 8007ccc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007cd0:	d119      	bne.n	8007d06 <HAL_SPI_Init+0x10a>
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	685b      	ldr	r3, [r3, #4]
 8007cd6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007cda:	d103      	bne.n	8007ce4 <HAL_SPI_Init+0xe8>
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d008      	beq.n	8007cf6 <HAL_SPI_Init+0xfa>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	685b      	ldr	r3, [r3, #4]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d10c      	bne.n	8007d06 <HAL_SPI_Init+0x10a>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cf0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007cf4:	d107      	bne.n	8007d06 <HAL_SPI_Init+0x10a>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	681a      	ldr	r2, [r3, #0]
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007d04:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	69da      	ldr	r2, [r3, #28]
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d0e:	431a      	orrs	r2, r3
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	431a      	orrs	r2, r3
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d18:	ea42 0103 	orr.w	r1, r2, r3
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	68da      	ldr	r2, [r3, #12]
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	430a      	orrs	r2, r1
 8007d26:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d30:	431a      	orrs	r2, r3
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d36:	431a      	orrs	r2, r3
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	699b      	ldr	r3, [r3, #24]
 8007d3c:	431a      	orrs	r2, r3
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	691b      	ldr	r3, [r3, #16]
 8007d42:	431a      	orrs	r2, r3
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	695b      	ldr	r3, [r3, #20]
 8007d48:	431a      	orrs	r2, r3
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	6a1b      	ldr	r3, [r3, #32]
 8007d4e:	431a      	orrs	r2, r3
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	685b      	ldr	r3, [r3, #4]
 8007d54:	431a      	orrs	r2, r3
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d5a:	431a      	orrs	r2, r3
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	689b      	ldr	r3, [r3, #8]
 8007d60:	431a      	orrs	r2, r3
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d66:	ea42 0103 	orr.w	r1, r2, r3
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	430a      	orrs	r2, r1
 8007d74:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	685b      	ldr	r3, [r3, #4]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d113      	bne.n	8007da6 <HAL_SPI_Init+0x1aa>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	689b      	ldr	r3, [r3, #8]
 8007d84:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007d90:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	689b      	ldr	r3, [r3, #8]
 8007d98:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007da4:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	f022 0201 	bic.w	r2, r2, #1
 8007db4:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	685b      	ldr	r3, [r3, #4]
 8007dba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d00a      	beq.n	8007dd8 <HAL_SPI_Init+0x1dc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	68db      	ldr	r3, [r3, #12]
 8007dc8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	430a      	orrs	r2, r1
 8007dd6:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	2200      	movs	r2, #0
 8007ddc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2201      	movs	r2, #1
 8007de4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8007de8:	2300      	movs	r3, #0
}
 8007dea:	4618      	mov	r0, r3
 8007dec:	3710      	adds	r7, #16
 8007dee:	46bd      	mov	sp, r7
 8007df0:	bd80      	pop	{r7, pc}
 8007df2:	bf00      	nop
 8007df4:	40013000 	.word	0x40013000
 8007df8:	40003800 	.word	0x40003800
 8007dfc:	40003c00 	.word	0x40003c00

08007e00 <HAL_SPI_Transmit_IT>:
  * @param  pData: pointer to data buffer
  * @param  Size : amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8007e00:	b480      	push	{r7}
 8007e02:	b087      	sub	sp, #28
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	60f8      	str	r0, [r7, #12]
 8007e08:	60b9      	str	r1, [r7, #8]
 8007e0a:	4613      	mov	r3, r2
 8007e0c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007e0e:	2300      	movs	r3, #0
 8007e10:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007e18:	2b01      	cmp	r3, #1
 8007e1a:	d101      	bne.n	8007e20 <HAL_SPI_Transmit_IT+0x20>
 8007e1c:	2302      	movs	r3, #2
 8007e1e:	e08d      	b.n	8007f3c <HAL_SPI_Transmit_IT+0x13c>
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	2201      	movs	r2, #1
 8007e24:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  if ((pData == NULL) || (Size == 0UL))
 8007e28:	68bb      	ldr	r3, [r7, #8]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d002      	beq.n	8007e34 <HAL_SPI_Transmit_IT+0x34>
 8007e2e:	88fb      	ldrh	r3, [r7, #6]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d107      	bne.n	8007e44 <HAL_SPI_Transmit_IT+0x44>
  {
    errorcode = HAL_ERROR;
 8007e34:	2301      	movs	r3, #1
 8007e36:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8007e40:	7dfb      	ldrb	r3, [r7, #23]
 8007e42:	e07b      	b.n	8007f3c <HAL_SPI_Transmit_IT+0x13c>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007e4a:	b2db      	uxtb	r3, r3
 8007e4c:	2b01      	cmp	r3, #1
 8007e4e:	d007      	beq.n	8007e60 <HAL_SPI_Transmit_IT+0x60>
  {
    errorcode = HAL_BUSY;
 8007e50:	2302      	movs	r3, #2
 8007e52:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	2200      	movs	r2, #0
 8007e58:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8007e5c:	7dfb      	ldrb	r3, [r7, #23]
 8007e5e:	e06d      	b.n	8007f3c <HAL_SPI_Transmit_IT+0x13c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	2203      	movs	r2, #3
 8007e64:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	68ba      	ldr	r2, [r7, #8]
 8007e74:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	88fa      	ldrh	r2, [r7, #6]
 8007e7a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	88fa      	ldrh	r2, [r7, #6]
 8007e82:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	2200      	movs	r2, #0
 8007e8a:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	2200      	movs	r2, #0
 8007e90:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	2200      	movs	r2, #0
 8007e98:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxISR       = NULL;
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	671a      	str	r2, [r3, #112]	; 0x70

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	68db      	ldr	r3, [r3, #12]
 8007ea6:	2b0f      	cmp	r3, #15
 8007ea8:	d903      	bls.n	8007eb2 <HAL_SPI_Transmit_IT+0xb2>
  {
    hspi->TxISR = SPI_TxISR_32BIT;
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	4a26      	ldr	r2, [pc, #152]	; (8007f48 <HAL_SPI_Transmit_IT+0x148>)
 8007eae:	675a      	str	r2, [r3, #116]	; 0x74
 8007eb0:	e00a      	b.n	8007ec8 <HAL_SPI_Transmit_IT+0xc8>
  }
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	68db      	ldr	r3, [r3, #12]
 8007eb6:	2b07      	cmp	r3, #7
 8007eb8:	d903      	bls.n	8007ec2 <HAL_SPI_Transmit_IT+0xc2>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	4a23      	ldr	r2, [pc, #140]	; (8007f4c <HAL_SPI_Transmit_IT+0x14c>)
 8007ebe:	675a      	str	r2, [r3, #116]	; 0x74
 8007ec0:	e002      	b.n	8007ec8 <HAL_SPI_Transmit_IT+0xc8>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	4a22      	ldr	r2, [pc, #136]	; (8007f50 <HAL_SPI_Transmit_IT+0x150>)
 8007ec6:	675a      	str	r2, [r3, #116]	; 0x74
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	689b      	ldr	r3, [r3, #8]
 8007ecc:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8007ed0:	d107      	bne.n	8007ee2 <HAL_SPI_Transmit_IT+0xe2>
  {
    SPI_1LINE_TX(hspi);
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	681a      	ldr	r2, [r3, #0]
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007ee0:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	685a      	ldr	r2, [r3, #4]
 8007ee8:	4b1a      	ldr	r3, [pc, #104]	; (8007f54 <HAL_SPI_Transmit_IT+0x154>)
 8007eea:	4013      	ands	r3, r2
 8007eec:	88f9      	ldrh	r1, [r7, #6]
 8007eee:	68fa      	ldr	r2, [r7, #12]
 8007ef0:	6812      	ldr	r2, [r2, #0]
 8007ef2:	430b      	orrs	r3, r1
 8007ef4:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	681a      	ldr	r2, [r3, #0]
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	f042 0201 	orr.w	r2, r2, #1
 8007f04:	601a      	str	r2, [r3, #0]

  /* Enable EOT, TXP, FRE, MODF, UDR and TSERF interrupts */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF | SPI_IT_TSERF));
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	6919      	ldr	r1, [r3, #16]
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	681a      	ldr	r2, [r3, #0]
 8007f10:	f240 732a 	movw	r3, #1834	; 0x72a
 8007f14:	430b      	orrs	r3, r1
 8007f16:	6113      	str	r3, [r2, #16]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	685b      	ldr	r3, [r3, #4]
 8007f1c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007f20:	d107      	bne.n	8007f32 <HAL_SPI_Transmit_IT+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	681a      	ldr	r2, [r3, #0]
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007f30:	601a      	str	r2, [r3, #0]
  }

  __HAL_UNLOCK(hspi);
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	2200      	movs	r2, #0
 8007f36:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  return errorcode;
 8007f3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	371c      	adds	r7, #28
 8007f40:	46bd      	mov	sp, r7
 8007f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f46:	4770      	bx	lr
 8007f48:	08008441 	.word	0x08008441
 8007f4c:	080083e3 	.word	0x080083e3
 8007f50:	08008389 	.word	0x08008389
 8007f54:	ffff0000 	.word	0xffff0000

08007f58 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b08a      	sub	sp, #40	; 0x28
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	691b      	ldr	r3, [r3, #16]
 8007f66:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	695b      	ldr	r3, [r3, #20]
 8007f6e:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8007f70:	6a3a      	ldr	r2, [r7, #32]
 8007f72:	69fb      	ldr	r3, [r7, #28]
 8007f74:	4013      	ands	r3, r2
 8007f76:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	689b      	ldr	r3, [r3, #8]
 8007f7e:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8007f80:	2300      	movs	r3, #0
 8007f82:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007f8a:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	3330      	adds	r3, #48	; 0x30
 8007f92:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8007f94:	69bb      	ldr	r3, [r7, #24]
 8007f96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d113      	bne.n	8007fc6 <HAL_SPI_IRQHandler+0x6e>
 8007f9e:	69bb      	ldr	r3, [r7, #24]
 8007fa0:	f003 0320 	and.w	r3, r3, #32
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d10e      	bne.n	8007fc6 <HAL_SPI_IRQHandler+0x6e>
 8007fa8:	69bb      	ldr	r3, [r7, #24]
 8007faa:	f003 0304 	and.w	r3, r3, #4
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d009      	beq.n	8007fc6 <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007fb6:	6878      	ldr	r0, [r7, #4]
 8007fb8:	4798      	blx	r3
    hspi->RxISR(hspi);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fbe:	6878      	ldr	r0, [r7, #4]
 8007fc0:	4798      	blx	r3
    handled = 1UL;
 8007fc2:	2301      	movs	r3, #1
 8007fc4:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8007fc6:	69bb      	ldr	r3, [r7, #24]
 8007fc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d10f      	bne.n	8007ff0 <HAL_SPI_IRQHandler+0x98>
 8007fd0:	69bb      	ldr	r3, [r7, #24]
 8007fd2:	f003 0301 	and.w	r3, r3, #1
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d00a      	beq.n	8007ff0 <HAL_SPI_IRQHandler+0x98>
 8007fda:	69bb      	ldr	r3, [r7, #24]
 8007fdc:	f003 0304 	and.w	r3, r3, #4
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d105      	bne.n	8007ff0 <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fe8:	6878      	ldr	r0, [r7, #4]
 8007fea:	4798      	blx	r3
    handled = 1UL;
 8007fec:	2301      	movs	r3, #1
 8007fee:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8007ff0:	69bb      	ldr	r3, [r7, #24]
 8007ff2:	f003 0320 	and.w	r3, r3, #32
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d10f      	bne.n	800801a <HAL_SPI_IRQHandler+0xc2>
 8007ffa:	69bb      	ldr	r3, [r7, #24]
 8007ffc:	f003 0302 	and.w	r3, r3, #2
 8008000:	2b00      	cmp	r3, #0
 8008002:	d00a      	beq.n	800801a <HAL_SPI_IRQHandler+0xc2>
 8008004:	69bb      	ldr	r3, [r7, #24]
 8008006:	f003 0304 	and.w	r3, r3, #4
 800800a:	2b00      	cmp	r3, #0
 800800c:	d105      	bne.n	800801a <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008012:	6878      	ldr	r0, [r7, #4]
 8008014:	4798      	blx	r3
    handled = 1UL;
 8008016:	2301      	movs	r3, #1
 8008018:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_HSPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 800801a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800801c:	2b00      	cmp	r3, #0
 800801e:	f040 816f 	bne.w	8008300 <HAL_SPI_IRQHandler+0x3a8>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8008022:	69bb      	ldr	r3, [r7, #24]
 8008024:	f003 0308 	and.w	r3, r3, #8
 8008028:	2b00      	cmp	r3, #0
 800802a:	f000 80a0 	beq.w	800816e <HAL_SPI_IRQHandler+0x216>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	699a      	ldr	r2, [r3, #24]
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	f042 0208 	orr.w	r2, r2, #8
 800803c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	699a      	ldr	r2, [r3, #24]
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	f042 0210 	orr.w	r2, r2, #16
 800804c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	699a      	ldr	r2, [r3, #24]
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800805c:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	691a      	ldr	r2, [r3, #16]
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	f022 0208 	bic.w	r2, r2, #8
 800806c:	611a      	str	r2, [r3, #16]

    /* DMA Normal Mode */
    if (HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN) ||                    // IT based transfer is done
 800806e:	697b      	ldr	r3, [r7, #20]
 8008070:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008074:	2b00      	cmp	r3, #0
 8008076:	d00f      	beq.n	8008098 <HAL_SPI_IRQHandler+0x140>
 8008078:	7cfb      	ldrb	r3, [r7, #19]
 800807a:	2b04      	cmp	r3, #4
 800807c:	d004      	beq.n	8008088 <HAL_SPI_IRQHandler+0x130>
      ((State != HAL_SPI_STATE_BUSY_RX) && (hspi->hdmatx->Init.Mode == DMA_NORMAL)) ||  // DMA is used in normal mode
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008082:	69db      	ldr	r3, [r3, #28]
 8008084:	2b00      	cmp	r3, #0
 8008086:	d007      	beq.n	8008098 <HAL_SPI_IRQHandler+0x140>
 8008088:	7cfb      	ldrb	r3, [r7, #19]
 800808a:	2b03      	cmp	r3, #3
 800808c:	d059      	beq.n	8008142 <HAL_SPI_IRQHandler+0x1ea>
      ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)))    // DMA is used in normal mode
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008092:	69db      	ldr	r3, [r3, #28]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d154      	bne.n	8008142 <HAL_SPI_IRQHandler+0x1ea>
    {
      /* For the IT based receive extra polling maybe required for last packet */
      if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	689b      	ldr	r3, [r3, #8]
 800809e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d13d      	bne.n	8008122 <HAL_SPI_IRQHandler+0x1ca>
      {
        /* Pooling remaining data */
        while (hspi->RxXferCount != 0UL)
 80080a6:	e036      	b.n	8008116 <HAL_SPI_IRQHandler+0x1be>
        {
          /* Receive data in 32 Bit mode */
          if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	68db      	ldr	r3, [r3, #12]
 80080ac:	2b0f      	cmp	r3, #15
 80080ae:	d90b      	bls.n	80080c8 <HAL_SPI_IRQHandler+0x170>
          {
            *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681a      	ldr	r2, [r3, #0]
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80080b8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80080ba:	601a      	str	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint32_t);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80080c0:	1d1a      	adds	r2, r3, #4
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	665a      	str	r2, [r3, #100]	; 0x64
 80080c6:	e01d      	b.n	8008104 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 16 Bit mode */
          else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	68db      	ldr	r3, [r3, #12]
 80080cc:	2b07      	cmp	r3, #7
 80080ce:	d90b      	bls.n	80080e8 <HAL_SPI_IRQHandler+0x190>
          {
#if defined (__GNUC__)
            *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80080d4:	68fa      	ldr	r2, [r7, #12]
 80080d6:	8812      	ldrh	r2, [r2, #0]
 80080d8:	b292      	uxth	r2, r2
 80080da:	801a      	strh	r2, [r3, #0]
#else
            *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
            hspi->pRxBuffPtr += sizeof(uint16_t);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80080e0:	1c9a      	adds	r2, r3, #2
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	665a      	str	r2, [r3, #100]	; 0x64
 80080e6:	e00d      	b.n	8008104 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 8 Bit mode */
          else
          {
            *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80080f4:	7812      	ldrb	r2, [r2, #0]
 80080f6:	b2d2      	uxtb	r2, r2
 80080f8:	701a      	strb	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint8_t);
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80080fe:	1c5a      	adds	r2, r3, #1
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	665a      	str	r2, [r3, #100]	; 0x64
          }

          hspi->RxXferCount--;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800810a:	b29b      	uxth	r3, r3
 800810c:	3b01      	subs	r3, #1
 800810e:	b29a      	uxth	r2, r3
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        while (hspi->RxXferCount != 0UL)
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800811c:	b29b      	uxth	r3, r3
 800811e:	2b00      	cmp	r3, #0
 8008120:	d1c2      	bne.n	80080a8 <HAL_SPI_IRQHandler+0x150>
        }
      }

      /* Call SPI Standard close procedure */
      SPI_CloseTransfer(hspi);
 8008122:	6878      	ldr	r0, [r7, #4]
 8008124:	f000 f9b8 	bl	8008498 <SPI_CloseTransfer>

      hspi->State = HAL_SPI_STATE_READY;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2201      	movs	r2, #1
 800812c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
      if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008136:	2b00      	cmp	r3, #0
 8008138:	d003      	beq.n	8008142 <HAL_SPI_IRQHandler+0x1ea>
      {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800813a:	6878      	ldr	r0, [r7, #4]
 800813c:	f000 f900 	bl	8008340 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
        return;
 8008140:	e0e3      	b.n	800830a <HAL_SPI_IRQHandler+0x3b2>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8008142:	7cfb      	ldrb	r3, [r7, #19]
 8008144:	2b05      	cmp	r3, #5
 8008146:	d103      	bne.n	8008150 <HAL_SPI_IRQHandler+0x1f8>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8008148:	6878      	ldr	r0, [r7, #4]
 800814a:	f000 f8ef 	bl	800832c <HAL_SPI_TxRxCpltCallback>
	else
    {
      /* End of the appropriate call */
    }

    return;
 800814e:	e0d9      	b.n	8008304 <HAL_SPI_IRQHandler+0x3ac>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8008150:	7cfb      	ldrb	r3, [r7, #19]
 8008152:	2b04      	cmp	r3, #4
 8008154:	d103      	bne.n	800815e <HAL_SPI_IRQHandler+0x206>
      HAL_SPI_RxCpltCallback(hspi);
 8008156:	6878      	ldr	r0, [r7, #4]
 8008158:	f000 f8de 	bl	8008318 <HAL_SPI_RxCpltCallback>
    return;
 800815c:	e0d2      	b.n	8008304 <HAL_SPI_IRQHandler+0x3ac>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800815e:	7cfb      	ldrb	r3, [r7, #19]
 8008160:	2b03      	cmp	r3, #3
 8008162:	f040 80cf 	bne.w	8008304 <HAL_SPI_IRQHandler+0x3ac>
      HAL_SPI_TxCpltCallback(hspi);
 8008166:	6878      	ldr	r0, [r7, #4]
 8008168:	f7f9 f836 	bl	80011d8 <HAL_SPI_TxCpltCallback>
    return;
 800816c:	e0ca      	b.n	8008304 <HAL_SPI_IRQHandler+0x3ac>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800816e:	69fb      	ldr	r3, [r7, #28]
 8008170:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008174:	2b00      	cmp	r3, #0
 8008176:	d00d      	beq.n	8008194 <HAL_SPI_IRQHandler+0x23c>
 8008178:	6a3b      	ldr	r3, [r7, #32]
 800817a:	f003 0308 	and.w	r3, r3, #8
 800817e:	2b00      	cmp	r3, #0
 8008180:	d008      	beq.n	8008194 <HAL_SPI_IRQHandler+0x23c>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	699a      	ldr	r2, [r3, #24]
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008190:	619a      	str	r2, [r3, #24]

    return;
 8008192:	e0ba      	b.n	800830a <HAL_SPI_IRQHandler+0x3b2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8008194:	69bb      	ldr	r3, [r7, #24]
 8008196:	f403 7358 	and.w	r3, r3, #864	; 0x360
 800819a:	2b00      	cmp	r3, #0
 800819c:	f000 80b5 	beq.w	800830a <HAL_SPI_IRQHandler+0x3b2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 80081a0:	69bb      	ldr	r3, [r7, #24]
 80081a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d00f      	beq.n	80081ca <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80081b0:	f043 0204 	orr.w	r2, r3, #4
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	699a      	ldr	r2, [r3, #24]
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80081c8:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 80081ca:	69bb      	ldr	r3, [r7, #24]
 80081cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d00f      	beq.n	80081f4 <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80081da:	f043 0201 	orr.w	r2, r3, #1
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	699a      	ldr	r2, [r3, #24]
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80081f2:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 80081f4:	69bb      	ldr	r3, [r7, #24]
 80081f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d00f      	beq.n	800821e <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008204:	f043 0208 	orr.w	r2, r3, #8
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	699a      	ldr	r2, [r3, #24]
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800821c:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800821e:	69bb      	ldr	r3, [r7, #24]
 8008220:	f003 0320 	and.w	r3, r3, #32
 8008224:	2b00      	cmp	r3, #0
 8008226:	d00f      	beq.n	8008248 <HAL_SPI_IRQHandler+0x2f0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800822e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	699a      	ldr	r2, [r3, #24]
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	f042 0220 	orr.w	r2, r2, #32
 8008246:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800824e:	2b00      	cmp	r3, #0
 8008250:	d05a      	beq.n	8008308 <HAL_SPI_IRQHandler+0x3b0>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	681a      	ldr	r2, [r3, #0]
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f022 0201 	bic.w	r2, r2, #1
 8008260:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR);
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	6919      	ldr	r1, [r3, #16]
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681a      	ldr	r2, [r3, #0]
 800826c:	4b28      	ldr	r3, [pc, #160]	; (8008310 <HAL_SPI_IRQHandler+0x3b8>)
 800826e:	400b      	ands	r3, r1
 8008270:	6113      	str	r3, [r2, #16]

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8008272:	697b      	ldr	r3, [r7, #20]
 8008274:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008278:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800827c:	d138      	bne.n	80082f0 <HAL_SPI_IRQHandler+0x398>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	689a      	ldr	r2, [r3, #8]
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800828c:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008292:	2b00      	cmp	r3, #0
 8008294:	d013      	beq.n	80082be <HAL_SPI_IRQHandler+0x366>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800829a:	4a1e      	ldr	r2, [pc, #120]	; (8008314 <HAL_SPI_IRQHandler+0x3bc>)
 800829c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80082a2:	4618      	mov	r0, r3
 80082a4:	f7fa fe2a 	bl	8002efc <HAL_DMA_Abort_IT>
 80082a8:	4603      	mov	r3, r0
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d007      	beq.n	80082be <HAL_SPI_IRQHandler+0x366>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80082b4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d020      	beq.n	8008308 <HAL_SPI_IRQHandler+0x3b0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80082ca:	4a12      	ldr	r2, [pc, #72]	; (8008314 <HAL_SPI_IRQHandler+0x3bc>)
 80082cc:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80082d2:	4618      	mov	r0, r3
 80082d4:	f7fa fe12 	bl	8002efc <HAL_DMA_Abort_IT>
 80082d8:	4603      	mov	r3, r0
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d014      	beq.n	8008308 <HAL_SPI_IRQHandler+0x3b0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80082e4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80082ee:	e00b      	b.n	8008308 <HAL_SPI_IRQHandler+0x3b0>
        hspi->State = HAL_SPI_STATE_READY;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	2201      	movs	r2, #1
 80082f4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 80082f8:	6878      	ldr	r0, [r7, #4]
 80082fa:	f000 f821 	bl	8008340 <HAL_SPI_ErrorCallback>
    return;
 80082fe:	e003      	b.n	8008308 <HAL_SPI_IRQHandler+0x3b0>
    return;
 8008300:	bf00      	nop
 8008302:	e002      	b.n	800830a <HAL_SPI_IRQHandler+0x3b2>
    return;
 8008304:	bf00      	nop
 8008306:	e000      	b.n	800830a <HAL_SPI_IRQHandler+0x3b2>
    return;
 8008308:	bf00      	nop
  }
}
 800830a:	3728      	adds	r7, #40	; 0x28
 800830c:	46bd      	mov	sp, r7
 800830e:	bd80      	pop	{r7, pc}
 8008310:	fffffc94 	.word	0xfffffc94
 8008314:	08008355 	.word	0x08008355

08008318 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008318:	b480      	push	{r7}
 800831a:	b083      	sub	sp, #12
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8008320:	bf00      	nop
 8008322:	370c      	adds	r7, #12
 8008324:	46bd      	mov	sp, r7
 8008326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832a:	4770      	bx	lr

0800832c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800832c:	b480      	push	{r7}
 800832e:	b083      	sub	sp, #12
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8008334:	bf00      	nop
 8008336:	370c      	adds	r7, #12
 8008338:	46bd      	mov	sp, r7
 800833a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833e:	4770      	bx	lr

08008340 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8008340:	b480      	push	{r7}
 8008342:	b083      	sub	sp, #12
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8008348:	bf00      	nop
 800834a:	370c      	adds	r7, #12
 800834c:	46bd      	mov	sp, r7
 800834e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008352:	4770      	bx	lr

08008354 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008354:	b580      	push	{r7, lr}
 8008356:	b084      	sub	sp, #16
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008360:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	2200      	movs	r2, #0
 8008366:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	2200      	movs	r2, #0
 800836e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	2201      	movs	r2, #1
 8008376:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800837a:	68f8      	ldr	r0, [r7, #12]
 800837c:	f7ff ffe0 	bl	8008340 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008380:	bf00      	nop
 8008382:	3710      	adds	r7, #16
 8008384:	46bd      	mov	sp, r7
 8008386:	bd80      	pop	{r7, pc}

08008388 <SPI_TxISR_8BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(SPI_HandleTypeDef *hspi)
{
 8008388:	b480      	push	{r7}
 800838a:	b083      	sub	sp, #12
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
  /* Transmit data in 8 Bit mode */
  *(__IO uint8_t *)&hspi->Instance->TXDR = *((uint8_t *)hspi->pTxBuffPtr);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	3320      	adds	r3, #32
 800839a:	7812      	ldrb	r2, [r2, #0]
 800839c:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr += sizeof(uint8_t);
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083a2:	1c5a      	adds	r2, r3, #1
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount--;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80083ae:	b29b      	uxth	r3, r3
 80083b0:	3b01      	subs	r3, #1
 80083b2:	b29a      	uxth	r2, r3
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Disable IT if no more data excepted */
  if (hspi->TxXferCount == 0UL)
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80083c0:	b29b      	uxth	r3, r3
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d107      	bne.n	80083d6 <SPI_TxISR_8BIT+0x4e>
      /* Disable TXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
    }
#else
    /* Disable TXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	691a      	ldr	r2, [r3, #16]
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	f022 0202 	bic.w	r2, r2, #2
 80083d4:	611a      	str	r2, [r3, #16]
#endif /* USE_HSPI_RELOAD_TRANSFER */
  }
}
 80083d6:	bf00      	nop
 80083d8:	370c      	adds	r7, #12
 80083da:	46bd      	mov	sp, r7
 80083dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e0:	4770      	bx	lr

080083e2 <SPI_TxISR_16BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(SPI_HandleTypeDef *hspi)
{
 80083e2:	b480      	push	{r7}
 80083e4:	b085      	sub	sp, #20
 80083e6:	af00      	add	r7, sp, #0
 80083e8:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	3320      	adds	r3, #32
 80083f0:	60fb      	str	r3, [r7, #12]

  *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083f6:	881a      	ldrh	r2, [r3, #0]
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	801a      	strh	r2, [r3, #0]
#else
  *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008400:	1c9a      	adds	r2, r3, #2
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount--;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800840c:	b29b      	uxth	r3, r3
 800840e:	3b01      	subs	r3, #1
 8008410:	b29a      	uxth	r2, r3
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Disable IT if no more data excepted */
  if (hspi->TxXferCount == 0UL)
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800841e:	b29b      	uxth	r3, r3
 8008420:	2b00      	cmp	r3, #0
 8008422:	d107      	bne.n	8008434 <SPI_TxISR_16BIT+0x52>
      /* Disable TXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
    }
#else
    /* Disable TXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	691a      	ldr	r2, [r3, #16]
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	f022 0202 	bic.w	r2, r2, #2
 8008432:	611a      	str	r2, [r3, #16]
#endif /* USE_HSPI_RELOAD_TRANSFER */
  }
}
 8008434:	bf00      	nop
 8008436:	3714      	adds	r7, #20
 8008438:	46bd      	mov	sp, r7
 800843a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843e:	4770      	bx	lr

08008440 <SPI_TxISR_32BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_32BIT(SPI_HandleTypeDef *hspi)
{
 8008440:	b480      	push	{r7}
 8008442:	b083      	sub	sp, #12
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]
  /* Transmit data in 32 Bit mode */
  *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	6812      	ldr	r2, [r2, #0]
 8008452:	621a      	str	r2, [r3, #32]
  hspi->pTxBuffPtr += sizeof(uint32_t);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008458:	1d1a      	adds	r2, r3, #4
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount--;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008464:	b29b      	uxth	r3, r3
 8008466:	3b01      	subs	r3, #1
 8008468:	b29a      	uxth	r2, r3
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Disable IT if no more data excepted */
  if (hspi->TxXferCount == 0UL)
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008476:	b29b      	uxth	r3, r3
 8008478:	2b00      	cmp	r3, #0
 800847a:	d107      	bne.n	800848c <SPI_TxISR_32BIT+0x4c>
      /* Disable TXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
    }
#else
    /* Disable TXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	691a      	ldr	r2, [r3, #16]
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	f022 0202 	bic.w	r2, r2, #2
 800848a:	611a      	str	r2, [r3, #16]
#endif /* USE_HSPI_RELOAD_TRANSFER */
  }
}
 800848c:	bf00      	nop
 800848e:	370c      	adds	r7, #12
 8008490:	46bd      	mov	sp, r7
 8008492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008496:	4770      	bx	lr

08008498 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8008498:	b480      	push	{r7}
 800849a:	b085      	sub	sp, #20
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	695b      	ldr	r3, [r3, #20]
 80084a6:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	699a      	ldr	r2, [r3, #24]
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	f042 0208 	orr.w	r2, r2, #8
 80084b6:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	699a      	ldr	r2, [r3, #24]
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	f042 0210 	orr.w	r2, r2, #16
 80084c6:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	681a      	ldr	r2, [r3, #0]
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	f022 0201 	bic.w	r2, r2, #1
 80084d6:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	6919      	ldr	r1, [r3, #16]
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681a      	ldr	r2, [r3, #0]
 80084e2:	4b3c      	ldr	r3, [pc, #240]	; (80085d4 <SPI_CloseTransfer+0x13c>)
 80084e4:	400b      	ands	r3, r1
 80084e6:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	689a      	ldr	r2, [r3, #8]
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80084f6:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80084fe:	b2db      	uxtb	r3, r3
 8008500:	2b04      	cmp	r3, #4
 8008502:	d014      	beq.n	800852e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	f003 0320 	and.w	r3, r3, #32
 800850a:	2b00      	cmp	r3, #0
 800850c:	d00f      	beq.n	800852e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008514:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	699a      	ldr	r2, [r3, #24]
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	f042 0220 	orr.w	r2, r2, #32
 800852c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008534:	b2db      	uxtb	r3, r3
 8008536:	2b03      	cmp	r3, #3
 8008538:	d014      	beq.n	8008564 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008540:	2b00      	cmp	r3, #0
 8008542:	d00f      	beq.n	8008564 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800854a:	f043 0204 	orr.w	r2, r3, #4
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	699a      	ldr	r2, [r3, #24]
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008562:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800856a:	2b00      	cmp	r3, #0
 800856c:	d00f      	beq.n	800858e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008574:	f043 0201 	orr.w	r2, r3, #1
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	699a      	ldr	r2, [r3, #24]
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800858c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008594:	2b00      	cmp	r3, #0
 8008596:	d00f      	beq.n	80085b8 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800859e:	f043 0208 	orr.w	r2, r3, #8
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	699a      	ldr	r2, [r3, #24]
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80085b6:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	2200      	movs	r2, #0
 80085bc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	2200      	movs	r2, #0
 80085c4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 80085c8:	bf00      	nop
 80085ca:	3714      	adds	r7, #20
 80085cc:	46bd      	mov	sp, r7
 80085ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d2:	4770      	bx	lr
 80085d4:	fffffc90 	.word	0xfffffc90

080085d8 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 80085d8:	b480      	push	{r7}
 80085da:	b085      	sub	sp, #20
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085e4:	095b      	lsrs	r3, r3, #5
 80085e6:	3301      	adds	r3, #1
 80085e8:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	68db      	ldr	r3, [r3, #12]
 80085ee:	3301      	adds	r3, #1
 80085f0:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80085f2:	68bb      	ldr	r3, [r7, #8]
 80085f4:	3307      	adds	r3, #7
 80085f6:	08db      	lsrs	r3, r3, #3
 80085f8:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80085fa:	68bb      	ldr	r3, [r7, #8]
 80085fc:	68fa      	ldr	r2, [r7, #12]
 80085fe:	fb02 f303 	mul.w	r3, r2, r3
}
 8008602:	4618      	mov	r0, r3
 8008604:	3714      	adds	r7, #20
 8008606:	46bd      	mov	sp, r7
 8008608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860c:	4770      	bx	lr

0800860e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800860e:	b580      	push	{r7, lr}
 8008610:	b082      	sub	sp, #8
 8008612:	af00      	add	r7, sp, #0
 8008614:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	2b00      	cmp	r3, #0
 800861a:	d101      	bne.n	8008620 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800861c:	2301      	movs	r3, #1
 800861e:	e049      	b.n	80086b4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008626:	b2db      	uxtb	r3, r3
 8008628:	2b00      	cmp	r3, #0
 800862a:	d106      	bne.n	800863a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	2200      	movs	r2, #0
 8008630:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008634:	6878      	ldr	r0, [r7, #4]
 8008636:	f000 f841 	bl	80086bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	2202      	movs	r2, #2
 800863e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681a      	ldr	r2, [r3, #0]
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	3304      	adds	r3, #4
 800864a:	4619      	mov	r1, r3
 800864c:	4610      	mov	r0, r2
 800864e:	f000 f9f7 	bl	8008a40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	2201      	movs	r2, #1
 8008656:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	2201      	movs	r2, #1
 800865e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	2201      	movs	r2, #1
 8008666:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	2201      	movs	r2, #1
 800866e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	2201      	movs	r2, #1
 8008676:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	2201      	movs	r2, #1
 800867e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	2201      	movs	r2, #1
 8008686:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	2201      	movs	r2, #1
 800868e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	2201      	movs	r2, #1
 8008696:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	2201      	movs	r2, #1
 800869e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	2201      	movs	r2, #1
 80086a6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	2201      	movs	r2, #1
 80086ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80086b2:	2300      	movs	r3, #0
}
 80086b4:	4618      	mov	r0, r3
 80086b6:	3708      	adds	r7, #8
 80086b8:	46bd      	mov	sp, r7
 80086ba:	bd80      	pop	{r7, pc}

080086bc <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80086bc:	b480      	push	{r7}
 80086be:	b083      	sub	sp, #12
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80086c4:	bf00      	nop
 80086c6:	370c      	adds	r7, #12
 80086c8:	46bd      	mov	sp, r7
 80086ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ce:	4770      	bx	lr

080086d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80086d0:	b480      	push	{r7}
 80086d2:	b085      	sub	sp, #20
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80086de:	b2db      	uxtb	r3, r3
 80086e0:	2b01      	cmp	r3, #1
 80086e2:	d001      	beq.n	80086e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80086e4:	2301      	movs	r3, #1
 80086e6:	e04f      	b.n	8008788 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	2202      	movs	r2, #2
 80086ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	68da      	ldr	r2, [r3, #12]
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	f042 0201 	orr.w	r2, r2, #1
 80086fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	4a23      	ldr	r2, [pc, #140]	; (8008794 <HAL_TIM_Base_Start_IT+0xc4>)
 8008706:	4293      	cmp	r3, r2
 8008708:	d01d      	beq.n	8008746 <HAL_TIM_Base_Start_IT+0x76>
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008712:	d018      	beq.n	8008746 <HAL_TIM_Base_Start_IT+0x76>
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	4a1f      	ldr	r2, [pc, #124]	; (8008798 <HAL_TIM_Base_Start_IT+0xc8>)
 800871a:	4293      	cmp	r3, r2
 800871c:	d013      	beq.n	8008746 <HAL_TIM_Base_Start_IT+0x76>
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	4a1e      	ldr	r2, [pc, #120]	; (800879c <HAL_TIM_Base_Start_IT+0xcc>)
 8008724:	4293      	cmp	r3, r2
 8008726:	d00e      	beq.n	8008746 <HAL_TIM_Base_Start_IT+0x76>
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	4a1c      	ldr	r2, [pc, #112]	; (80087a0 <HAL_TIM_Base_Start_IT+0xd0>)
 800872e:	4293      	cmp	r3, r2
 8008730:	d009      	beq.n	8008746 <HAL_TIM_Base_Start_IT+0x76>
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	4a1b      	ldr	r2, [pc, #108]	; (80087a4 <HAL_TIM_Base_Start_IT+0xd4>)
 8008738:	4293      	cmp	r3, r2
 800873a:	d004      	beq.n	8008746 <HAL_TIM_Base_Start_IT+0x76>
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	4a19      	ldr	r2, [pc, #100]	; (80087a8 <HAL_TIM_Base_Start_IT+0xd8>)
 8008742:	4293      	cmp	r3, r2
 8008744:	d115      	bne.n	8008772 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	689a      	ldr	r2, [r3, #8]
 800874c:	4b17      	ldr	r3, [pc, #92]	; (80087ac <HAL_TIM_Base_Start_IT+0xdc>)
 800874e:	4013      	ands	r3, r2
 8008750:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	2b06      	cmp	r3, #6
 8008756:	d015      	beq.n	8008784 <HAL_TIM_Base_Start_IT+0xb4>
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800875e:	d011      	beq.n	8008784 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	681a      	ldr	r2, [r3, #0]
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	f042 0201 	orr.w	r2, r2, #1
 800876e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008770:	e008      	b.n	8008784 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	681a      	ldr	r2, [r3, #0]
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	f042 0201 	orr.w	r2, r2, #1
 8008780:	601a      	str	r2, [r3, #0]
 8008782:	e000      	b.n	8008786 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008784:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008786:	2300      	movs	r3, #0
}
 8008788:	4618      	mov	r0, r3
 800878a:	3714      	adds	r7, #20
 800878c:	46bd      	mov	sp, r7
 800878e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008792:	4770      	bx	lr
 8008794:	40010000 	.word	0x40010000
 8008798:	40000400 	.word	0x40000400
 800879c:	40000800 	.word	0x40000800
 80087a0:	40000c00 	.word	0x40000c00
 80087a4:	40010400 	.word	0x40010400
 80087a8:	40001800 	.word	0x40001800
 80087ac:	00010007 	.word	0x00010007

080087b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80087b0:	b580      	push	{r7, lr}
 80087b2:	b082      	sub	sp, #8
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	691b      	ldr	r3, [r3, #16]
 80087be:	f003 0302 	and.w	r3, r3, #2
 80087c2:	2b02      	cmp	r3, #2
 80087c4:	d122      	bne.n	800880c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	68db      	ldr	r3, [r3, #12]
 80087cc:	f003 0302 	and.w	r3, r3, #2
 80087d0:	2b02      	cmp	r3, #2
 80087d2:	d11b      	bne.n	800880c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	f06f 0202 	mvn.w	r2, #2
 80087dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	2201      	movs	r2, #1
 80087e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	699b      	ldr	r3, [r3, #24]
 80087ea:	f003 0303 	and.w	r3, r3, #3
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d003      	beq.n	80087fa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80087f2:	6878      	ldr	r0, [r7, #4]
 80087f4:	f000 f905 	bl	8008a02 <HAL_TIM_IC_CaptureCallback>
 80087f8:	e005      	b.n	8008806 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80087fa:	6878      	ldr	r0, [r7, #4]
 80087fc:	f000 f8f7 	bl	80089ee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008800:	6878      	ldr	r0, [r7, #4]
 8008802:	f000 f908 	bl	8008a16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	2200      	movs	r2, #0
 800880a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	691b      	ldr	r3, [r3, #16]
 8008812:	f003 0304 	and.w	r3, r3, #4
 8008816:	2b04      	cmp	r3, #4
 8008818:	d122      	bne.n	8008860 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	68db      	ldr	r3, [r3, #12]
 8008820:	f003 0304 	and.w	r3, r3, #4
 8008824:	2b04      	cmp	r3, #4
 8008826:	d11b      	bne.n	8008860 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	f06f 0204 	mvn.w	r2, #4
 8008830:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	2202      	movs	r2, #2
 8008836:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	699b      	ldr	r3, [r3, #24]
 800883e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008842:	2b00      	cmp	r3, #0
 8008844:	d003      	beq.n	800884e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008846:	6878      	ldr	r0, [r7, #4]
 8008848:	f000 f8db 	bl	8008a02 <HAL_TIM_IC_CaptureCallback>
 800884c:	e005      	b.n	800885a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800884e:	6878      	ldr	r0, [r7, #4]
 8008850:	f000 f8cd 	bl	80089ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008854:	6878      	ldr	r0, [r7, #4]
 8008856:	f000 f8de 	bl	8008a16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	2200      	movs	r2, #0
 800885e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	691b      	ldr	r3, [r3, #16]
 8008866:	f003 0308 	and.w	r3, r3, #8
 800886a:	2b08      	cmp	r3, #8
 800886c:	d122      	bne.n	80088b4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	68db      	ldr	r3, [r3, #12]
 8008874:	f003 0308 	and.w	r3, r3, #8
 8008878:	2b08      	cmp	r3, #8
 800887a:	d11b      	bne.n	80088b4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	f06f 0208 	mvn.w	r2, #8
 8008884:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	2204      	movs	r2, #4
 800888a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	69db      	ldr	r3, [r3, #28]
 8008892:	f003 0303 	and.w	r3, r3, #3
 8008896:	2b00      	cmp	r3, #0
 8008898:	d003      	beq.n	80088a2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800889a:	6878      	ldr	r0, [r7, #4]
 800889c:	f000 f8b1 	bl	8008a02 <HAL_TIM_IC_CaptureCallback>
 80088a0:	e005      	b.n	80088ae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80088a2:	6878      	ldr	r0, [r7, #4]
 80088a4:	f000 f8a3 	bl	80089ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80088a8:	6878      	ldr	r0, [r7, #4]
 80088aa:	f000 f8b4 	bl	8008a16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	2200      	movs	r2, #0
 80088b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	691b      	ldr	r3, [r3, #16]
 80088ba:	f003 0310 	and.w	r3, r3, #16
 80088be:	2b10      	cmp	r3, #16
 80088c0:	d122      	bne.n	8008908 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	68db      	ldr	r3, [r3, #12]
 80088c8:	f003 0310 	and.w	r3, r3, #16
 80088cc:	2b10      	cmp	r3, #16
 80088ce:	d11b      	bne.n	8008908 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	f06f 0210 	mvn.w	r2, #16
 80088d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	2208      	movs	r2, #8
 80088de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	69db      	ldr	r3, [r3, #28]
 80088e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d003      	beq.n	80088f6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80088ee:	6878      	ldr	r0, [r7, #4]
 80088f0:	f000 f887 	bl	8008a02 <HAL_TIM_IC_CaptureCallback>
 80088f4:	e005      	b.n	8008902 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80088f6:	6878      	ldr	r0, [r7, #4]
 80088f8:	f000 f879 	bl	80089ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80088fc:	6878      	ldr	r0, [r7, #4]
 80088fe:	f000 f88a 	bl	8008a16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	2200      	movs	r2, #0
 8008906:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	691b      	ldr	r3, [r3, #16]
 800890e:	f003 0301 	and.w	r3, r3, #1
 8008912:	2b01      	cmp	r3, #1
 8008914:	d10e      	bne.n	8008934 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	68db      	ldr	r3, [r3, #12]
 800891c:	f003 0301 	and.w	r3, r3, #1
 8008920:	2b01      	cmp	r3, #1
 8008922:	d107      	bne.n	8008934 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	f06f 0201 	mvn.w	r2, #1
 800892c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800892e:	6878      	ldr	r0, [r7, #4]
 8008930:	f7f9 fc72 	bl	8002218 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	691b      	ldr	r3, [r3, #16]
 800893a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800893e:	2b80      	cmp	r3, #128	; 0x80
 8008940:	d10e      	bne.n	8008960 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	68db      	ldr	r3, [r3, #12]
 8008948:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800894c:	2b80      	cmp	r3, #128	; 0x80
 800894e:	d107      	bne.n	8008960 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008958:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800895a:	6878      	ldr	r0, [r7, #4]
 800895c:	f000 f914 	bl	8008b88 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	691b      	ldr	r3, [r3, #16]
 8008966:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800896a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800896e:	d10e      	bne.n	800898e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	68db      	ldr	r3, [r3, #12]
 8008976:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800897a:	2b80      	cmp	r3, #128	; 0x80
 800897c:	d107      	bne.n	800898e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008986:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008988:	6878      	ldr	r0, [r7, #4]
 800898a:	f000 f907 	bl	8008b9c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	691b      	ldr	r3, [r3, #16]
 8008994:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008998:	2b40      	cmp	r3, #64	; 0x40
 800899a:	d10e      	bne.n	80089ba <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	68db      	ldr	r3, [r3, #12]
 80089a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089a6:	2b40      	cmp	r3, #64	; 0x40
 80089a8:	d107      	bne.n	80089ba <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80089b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80089b4:	6878      	ldr	r0, [r7, #4]
 80089b6:	f000 f838 	bl	8008a2a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	691b      	ldr	r3, [r3, #16]
 80089c0:	f003 0320 	and.w	r3, r3, #32
 80089c4:	2b20      	cmp	r3, #32
 80089c6:	d10e      	bne.n	80089e6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	68db      	ldr	r3, [r3, #12]
 80089ce:	f003 0320 	and.w	r3, r3, #32
 80089d2:	2b20      	cmp	r3, #32
 80089d4:	d107      	bne.n	80089e6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	f06f 0220 	mvn.w	r2, #32
 80089de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80089e0:	6878      	ldr	r0, [r7, #4]
 80089e2:	f000 f8c7 	bl	8008b74 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80089e6:	bf00      	nop
 80089e8:	3708      	adds	r7, #8
 80089ea:	46bd      	mov	sp, r7
 80089ec:	bd80      	pop	{r7, pc}

080089ee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80089ee:	b480      	push	{r7}
 80089f0:	b083      	sub	sp, #12
 80089f2:	af00      	add	r7, sp, #0
 80089f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80089f6:	bf00      	nop
 80089f8:	370c      	adds	r7, #12
 80089fa:	46bd      	mov	sp, r7
 80089fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a00:	4770      	bx	lr

08008a02 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008a02:	b480      	push	{r7}
 8008a04:	b083      	sub	sp, #12
 8008a06:	af00      	add	r7, sp, #0
 8008a08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008a0a:	bf00      	nop
 8008a0c:	370c      	adds	r7, #12
 8008a0e:	46bd      	mov	sp, r7
 8008a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a14:	4770      	bx	lr

08008a16 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008a16:	b480      	push	{r7}
 8008a18:	b083      	sub	sp, #12
 8008a1a:	af00      	add	r7, sp, #0
 8008a1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008a1e:	bf00      	nop
 8008a20:	370c      	adds	r7, #12
 8008a22:	46bd      	mov	sp, r7
 8008a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a28:	4770      	bx	lr

08008a2a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008a2a:	b480      	push	{r7}
 8008a2c:	b083      	sub	sp, #12
 8008a2e:	af00      	add	r7, sp, #0
 8008a30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008a32:	bf00      	nop
 8008a34:	370c      	adds	r7, #12
 8008a36:	46bd      	mov	sp, r7
 8008a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3c:	4770      	bx	lr
	...

08008a40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008a40:	b480      	push	{r7}
 8008a42:	b085      	sub	sp, #20
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
 8008a48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	4a40      	ldr	r2, [pc, #256]	; (8008b54 <TIM_Base_SetConfig+0x114>)
 8008a54:	4293      	cmp	r3, r2
 8008a56:	d013      	beq.n	8008a80 <TIM_Base_SetConfig+0x40>
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a5e:	d00f      	beq.n	8008a80 <TIM_Base_SetConfig+0x40>
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	4a3d      	ldr	r2, [pc, #244]	; (8008b58 <TIM_Base_SetConfig+0x118>)
 8008a64:	4293      	cmp	r3, r2
 8008a66:	d00b      	beq.n	8008a80 <TIM_Base_SetConfig+0x40>
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	4a3c      	ldr	r2, [pc, #240]	; (8008b5c <TIM_Base_SetConfig+0x11c>)
 8008a6c:	4293      	cmp	r3, r2
 8008a6e:	d007      	beq.n	8008a80 <TIM_Base_SetConfig+0x40>
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	4a3b      	ldr	r2, [pc, #236]	; (8008b60 <TIM_Base_SetConfig+0x120>)
 8008a74:	4293      	cmp	r3, r2
 8008a76:	d003      	beq.n	8008a80 <TIM_Base_SetConfig+0x40>
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	4a3a      	ldr	r2, [pc, #232]	; (8008b64 <TIM_Base_SetConfig+0x124>)
 8008a7c:	4293      	cmp	r3, r2
 8008a7e:	d108      	bne.n	8008a92 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008a88:	683b      	ldr	r3, [r7, #0]
 8008a8a:	685b      	ldr	r3, [r3, #4]
 8008a8c:	68fa      	ldr	r2, [r7, #12]
 8008a8e:	4313      	orrs	r3, r2
 8008a90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	4a2f      	ldr	r2, [pc, #188]	; (8008b54 <TIM_Base_SetConfig+0x114>)
 8008a96:	4293      	cmp	r3, r2
 8008a98:	d01f      	beq.n	8008ada <TIM_Base_SetConfig+0x9a>
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008aa0:	d01b      	beq.n	8008ada <TIM_Base_SetConfig+0x9a>
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	4a2c      	ldr	r2, [pc, #176]	; (8008b58 <TIM_Base_SetConfig+0x118>)
 8008aa6:	4293      	cmp	r3, r2
 8008aa8:	d017      	beq.n	8008ada <TIM_Base_SetConfig+0x9a>
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	4a2b      	ldr	r2, [pc, #172]	; (8008b5c <TIM_Base_SetConfig+0x11c>)
 8008aae:	4293      	cmp	r3, r2
 8008ab0:	d013      	beq.n	8008ada <TIM_Base_SetConfig+0x9a>
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	4a2a      	ldr	r2, [pc, #168]	; (8008b60 <TIM_Base_SetConfig+0x120>)
 8008ab6:	4293      	cmp	r3, r2
 8008ab8:	d00f      	beq.n	8008ada <TIM_Base_SetConfig+0x9a>
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	4a29      	ldr	r2, [pc, #164]	; (8008b64 <TIM_Base_SetConfig+0x124>)
 8008abe:	4293      	cmp	r3, r2
 8008ac0:	d00b      	beq.n	8008ada <TIM_Base_SetConfig+0x9a>
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	4a28      	ldr	r2, [pc, #160]	; (8008b68 <TIM_Base_SetConfig+0x128>)
 8008ac6:	4293      	cmp	r3, r2
 8008ac8:	d007      	beq.n	8008ada <TIM_Base_SetConfig+0x9a>
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	4a27      	ldr	r2, [pc, #156]	; (8008b6c <TIM_Base_SetConfig+0x12c>)
 8008ace:	4293      	cmp	r3, r2
 8008ad0:	d003      	beq.n	8008ada <TIM_Base_SetConfig+0x9a>
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	4a26      	ldr	r2, [pc, #152]	; (8008b70 <TIM_Base_SetConfig+0x130>)
 8008ad6:	4293      	cmp	r3, r2
 8008ad8:	d108      	bne.n	8008aec <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008ae0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008ae2:	683b      	ldr	r3, [r7, #0]
 8008ae4:	68db      	ldr	r3, [r3, #12]
 8008ae6:	68fa      	ldr	r2, [r7, #12]
 8008ae8:	4313      	orrs	r3, r2
 8008aea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008af2:	683b      	ldr	r3, [r7, #0]
 8008af4:	695b      	ldr	r3, [r3, #20]
 8008af6:	4313      	orrs	r3, r2
 8008af8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	68fa      	ldr	r2, [r7, #12]
 8008afe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008b00:	683b      	ldr	r3, [r7, #0]
 8008b02:	689a      	ldr	r2, [r3, #8]
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008b08:	683b      	ldr	r3, [r7, #0]
 8008b0a:	681a      	ldr	r2, [r3, #0]
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	4a10      	ldr	r2, [pc, #64]	; (8008b54 <TIM_Base_SetConfig+0x114>)
 8008b14:	4293      	cmp	r3, r2
 8008b16:	d00f      	beq.n	8008b38 <TIM_Base_SetConfig+0xf8>
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	4a12      	ldr	r2, [pc, #72]	; (8008b64 <TIM_Base_SetConfig+0x124>)
 8008b1c:	4293      	cmp	r3, r2
 8008b1e:	d00b      	beq.n	8008b38 <TIM_Base_SetConfig+0xf8>
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	4a11      	ldr	r2, [pc, #68]	; (8008b68 <TIM_Base_SetConfig+0x128>)
 8008b24:	4293      	cmp	r3, r2
 8008b26:	d007      	beq.n	8008b38 <TIM_Base_SetConfig+0xf8>
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	4a10      	ldr	r2, [pc, #64]	; (8008b6c <TIM_Base_SetConfig+0x12c>)
 8008b2c:	4293      	cmp	r3, r2
 8008b2e:	d003      	beq.n	8008b38 <TIM_Base_SetConfig+0xf8>
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	4a0f      	ldr	r2, [pc, #60]	; (8008b70 <TIM_Base_SetConfig+0x130>)
 8008b34:	4293      	cmp	r3, r2
 8008b36:	d103      	bne.n	8008b40 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008b38:	683b      	ldr	r3, [r7, #0]
 8008b3a:	691a      	ldr	r2, [r3, #16]
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	2201      	movs	r2, #1
 8008b44:	615a      	str	r2, [r3, #20]
}
 8008b46:	bf00      	nop
 8008b48:	3714      	adds	r7, #20
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b50:	4770      	bx	lr
 8008b52:	bf00      	nop
 8008b54:	40010000 	.word	0x40010000
 8008b58:	40000400 	.word	0x40000400
 8008b5c:	40000800 	.word	0x40000800
 8008b60:	40000c00 	.word	0x40000c00
 8008b64:	40010400 	.word	0x40010400
 8008b68:	40014000 	.word	0x40014000
 8008b6c:	40014400 	.word	0x40014400
 8008b70:	40014800 	.word	0x40014800

08008b74 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008b74:	b480      	push	{r7}
 8008b76:	b083      	sub	sp, #12
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008b7c:	bf00      	nop
 8008b7e:	370c      	adds	r7, #12
 8008b80:	46bd      	mov	sp, r7
 8008b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b86:	4770      	bx	lr

08008b88 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008b88:	b480      	push	{r7}
 8008b8a:	b083      	sub	sp, #12
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008b90:	bf00      	nop
 8008b92:	370c      	adds	r7, #12
 8008b94:	46bd      	mov	sp, r7
 8008b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9a:	4770      	bx	lr

08008b9c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008b9c:	b480      	push	{r7}
 8008b9e:	b083      	sub	sp, #12
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008ba4:	bf00      	nop
 8008ba6:	370c      	adds	r7, #12
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bae:	4770      	bx	lr

08008bb0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	b082      	sub	sp, #8
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d101      	bne.n	8008bc2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008bbe:	2301      	movs	r3, #1
 8008bc0:	e042      	b.n	8008c48 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d106      	bne.n	8008bda <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	2200      	movs	r2, #0
 8008bd0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008bd4:	6878      	ldr	r0, [r7, #4]
 8008bd6:	f7f9 fbc3 	bl	8002360 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	2224      	movs	r2, #36	; 0x24
 8008bde:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	681a      	ldr	r2, [r3, #0]
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	f022 0201 	bic.w	r2, r2, #1
 8008bf0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008bf2:	6878      	ldr	r0, [r7, #4]
 8008bf4:	f000 f8c2 	bl	8008d7c <UART_SetConfig>
 8008bf8:	4603      	mov	r3, r0
 8008bfa:	2b01      	cmp	r3, #1
 8008bfc:	d101      	bne.n	8008c02 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008bfe:	2301      	movs	r3, #1
 8008c00:	e022      	b.n	8008c48 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d002      	beq.n	8008c10 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8008c0a:	6878      	ldr	r0, [r7, #4]
 8008c0c:	f000 fe16 	bl	800983c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	685a      	ldr	r2, [r3, #4]
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008c1e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	689a      	ldr	r2, [r3, #8]
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008c2e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	681a      	ldr	r2, [r3, #0]
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	f042 0201 	orr.w	r2, r2, #1
 8008c3e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008c40:	6878      	ldr	r0, [r7, #4]
 8008c42:	f000 fe9d 	bl	8009980 <UART_CheckIdleState>
 8008c46:	4603      	mov	r3, r0
}
 8008c48:	4618      	mov	r0, r3
 8008c4a:	3708      	adds	r7, #8
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	bd80      	pop	{r7, pc}

08008c50 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008c50:	b580      	push	{r7, lr}
 8008c52:	b08a      	sub	sp, #40	; 0x28
 8008c54:	af02      	add	r7, sp, #8
 8008c56:	60f8      	str	r0, [r7, #12]
 8008c58:	60b9      	str	r1, [r7, #8]
 8008c5a:	603b      	str	r3, [r7, #0]
 8008c5c:	4613      	mov	r3, r2
 8008c5e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008c66:	2b20      	cmp	r3, #32
 8008c68:	f040 8083 	bne.w	8008d72 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8008c6c:	68bb      	ldr	r3, [r7, #8]
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d002      	beq.n	8008c78 <HAL_UART_Transmit+0x28>
 8008c72:	88fb      	ldrh	r3, [r7, #6]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d101      	bne.n	8008c7c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8008c78:	2301      	movs	r3, #1
 8008c7a:	e07b      	b.n	8008d74 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008c82:	2b01      	cmp	r3, #1
 8008c84:	d101      	bne.n	8008c8a <HAL_UART_Transmit+0x3a>
 8008c86:	2302      	movs	r3, #2
 8008c88:	e074      	b.n	8008d74 <HAL_UART_Transmit+0x124>
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	2201      	movs	r2, #1
 8008c8e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	2200      	movs	r2, #0
 8008c96:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	2221      	movs	r2, #33	; 0x21
 8008c9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008ca2:	f7f9 ffa3 	bl	8002bec <HAL_GetTick>
 8008ca6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	88fa      	ldrh	r2, [r7, #6]
 8008cac:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	88fa      	ldrh	r2, [r7, #6]
 8008cb4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	689b      	ldr	r3, [r3, #8]
 8008cbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008cc0:	d108      	bne.n	8008cd4 <HAL_UART_Transmit+0x84>
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	691b      	ldr	r3, [r3, #16]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d104      	bne.n	8008cd4 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8008cca:	2300      	movs	r3, #0
 8008ccc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008cce:	68bb      	ldr	r3, [r7, #8]
 8008cd0:	61bb      	str	r3, [r7, #24]
 8008cd2:	e003      	b.n	8008cdc <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8008cd4:	68bb      	ldr	r3, [r7, #8]
 8008cd6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008cd8:	2300      	movs	r3, #0
 8008cda:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	2200      	movs	r2, #0
 8008ce0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8008ce4:	e02c      	b.n	8008d40 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008ce6:	683b      	ldr	r3, [r7, #0]
 8008ce8:	9300      	str	r3, [sp, #0]
 8008cea:	697b      	ldr	r3, [r7, #20]
 8008cec:	2200      	movs	r2, #0
 8008cee:	2180      	movs	r1, #128	; 0x80
 8008cf0:	68f8      	ldr	r0, [r7, #12]
 8008cf2:	f000 fe90 	bl	8009a16 <UART_WaitOnFlagUntilTimeout>
 8008cf6:	4603      	mov	r3, r0
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d001      	beq.n	8008d00 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8008cfc:	2303      	movs	r3, #3
 8008cfe:	e039      	b.n	8008d74 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8008d00:	69fb      	ldr	r3, [r7, #28]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d10b      	bne.n	8008d1e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008d06:	69bb      	ldr	r3, [r7, #24]
 8008d08:	881b      	ldrh	r3, [r3, #0]
 8008d0a:	461a      	mov	r2, r3
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008d14:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008d16:	69bb      	ldr	r3, [r7, #24]
 8008d18:	3302      	adds	r3, #2
 8008d1a:	61bb      	str	r3, [r7, #24]
 8008d1c:	e007      	b.n	8008d2e <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008d1e:	69fb      	ldr	r3, [r7, #28]
 8008d20:	781a      	ldrb	r2, [r3, #0]
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008d28:	69fb      	ldr	r3, [r7, #28]
 8008d2a:	3301      	adds	r3, #1
 8008d2c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008d34:	b29b      	uxth	r3, r3
 8008d36:	3b01      	subs	r3, #1
 8008d38:	b29a      	uxth	r2, r3
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008d46:	b29b      	uxth	r3, r3
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d1cc      	bne.n	8008ce6 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008d4c:	683b      	ldr	r3, [r7, #0]
 8008d4e:	9300      	str	r3, [sp, #0]
 8008d50:	697b      	ldr	r3, [r7, #20]
 8008d52:	2200      	movs	r2, #0
 8008d54:	2140      	movs	r1, #64	; 0x40
 8008d56:	68f8      	ldr	r0, [r7, #12]
 8008d58:	f000 fe5d 	bl	8009a16 <UART_WaitOnFlagUntilTimeout>
 8008d5c:	4603      	mov	r3, r0
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d001      	beq.n	8008d66 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8008d62:	2303      	movs	r3, #3
 8008d64:	e006      	b.n	8008d74 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	2220      	movs	r2, #32
 8008d6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8008d6e:	2300      	movs	r3, #0
 8008d70:	e000      	b.n	8008d74 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8008d72:	2302      	movs	r3, #2
  }
}
 8008d74:	4618      	mov	r0, r3
 8008d76:	3720      	adds	r7, #32
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	bd80      	pop	{r7, pc}

08008d7c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008d7c:	b5b0      	push	{r4, r5, r7, lr}
 8008d7e:	b08e      	sub	sp, #56	; 0x38
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008d84:	2300      	movs	r3, #0
 8008d86:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	689a      	ldr	r2, [r3, #8]
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	691b      	ldr	r3, [r3, #16]
 8008d92:	431a      	orrs	r2, r3
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	695b      	ldr	r3, [r3, #20]
 8008d98:	431a      	orrs	r2, r3
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	69db      	ldr	r3, [r3, #28]
 8008d9e:	4313      	orrs	r3, r2
 8008da0:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	681a      	ldr	r2, [r3, #0]
 8008da8:	4bbf      	ldr	r3, [pc, #764]	; (80090a8 <UART_SetConfig+0x32c>)
 8008daa:	4013      	ands	r3, r2
 8008dac:	687a      	ldr	r2, [r7, #4]
 8008dae:	6812      	ldr	r2, [r2, #0]
 8008db0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008db2:	430b      	orrs	r3, r1
 8008db4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	685b      	ldr	r3, [r3, #4]
 8008dbc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	68da      	ldr	r2, [r3, #12]
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	430a      	orrs	r2, r1
 8008dca:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	699b      	ldr	r3, [r3, #24]
 8008dd0:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	4ab5      	ldr	r2, [pc, #724]	; (80090ac <UART_SetConfig+0x330>)
 8008dd8:	4293      	cmp	r3, r2
 8008dda:	d004      	beq.n	8008de6 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	6a1b      	ldr	r3, [r3, #32]
 8008de0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008de2:	4313      	orrs	r3, r2
 8008de4:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	689a      	ldr	r2, [r3, #8]
 8008dec:	4bb0      	ldr	r3, [pc, #704]	; (80090b0 <UART_SetConfig+0x334>)
 8008dee:	4013      	ands	r3, r2
 8008df0:	687a      	ldr	r2, [r7, #4]
 8008df2:	6812      	ldr	r2, [r2, #0]
 8008df4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008df6:	430b      	orrs	r3, r1
 8008df8:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e00:	f023 010f 	bic.w	r1, r3, #15
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	430a      	orrs	r2, r1
 8008e0e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	4aa7      	ldr	r2, [pc, #668]	; (80090b4 <UART_SetConfig+0x338>)
 8008e16:	4293      	cmp	r3, r2
 8008e18:	d176      	bne.n	8008f08 <UART_SetConfig+0x18c>
 8008e1a:	4ba7      	ldr	r3, [pc, #668]	; (80090b8 <UART_SetConfig+0x33c>)
 8008e1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e1e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008e22:	2b28      	cmp	r3, #40	; 0x28
 8008e24:	d86c      	bhi.n	8008f00 <UART_SetConfig+0x184>
 8008e26:	a201      	add	r2, pc, #4	; (adr r2, 8008e2c <UART_SetConfig+0xb0>)
 8008e28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e2c:	08008ed1 	.word	0x08008ed1
 8008e30:	08008f01 	.word	0x08008f01
 8008e34:	08008f01 	.word	0x08008f01
 8008e38:	08008f01 	.word	0x08008f01
 8008e3c:	08008f01 	.word	0x08008f01
 8008e40:	08008f01 	.word	0x08008f01
 8008e44:	08008f01 	.word	0x08008f01
 8008e48:	08008f01 	.word	0x08008f01
 8008e4c:	08008ed9 	.word	0x08008ed9
 8008e50:	08008f01 	.word	0x08008f01
 8008e54:	08008f01 	.word	0x08008f01
 8008e58:	08008f01 	.word	0x08008f01
 8008e5c:	08008f01 	.word	0x08008f01
 8008e60:	08008f01 	.word	0x08008f01
 8008e64:	08008f01 	.word	0x08008f01
 8008e68:	08008f01 	.word	0x08008f01
 8008e6c:	08008ee1 	.word	0x08008ee1
 8008e70:	08008f01 	.word	0x08008f01
 8008e74:	08008f01 	.word	0x08008f01
 8008e78:	08008f01 	.word	0x08008f01
 8008e7c:	08008f01 	.word	0x08008f01
 8008e80:	08008f01 	.word	0x08008f01
 8008e84:	08008f01 	.word	0x08008f01
 8008e88:	08008f01 	.word	0x08008f01
 8008e8c:	08008ee9 	.word	0x08008ee9
 8008e90:	08008f01 	.word	0x08008f01
 8008e94:	08008f01 	.word	0x08008f01
 8008e98:	08008f01 	.word	0x08008f01
 8008e9c:	08008f01 	.word	0x08008f01
 8008ea0:	08008f01 	.word	0x08008f01
 8008ea4:	08008f01 	.word	0x08008f01
 8008ea8:	08008f01 	.word	0x08008f01
 8008eac:	08008ef1 	.word	0x08008ef1
 8008eb0:	08008f01 	.word	0x08008f01
 8008eb4:	08008f01 	.word	0x08008f01
 8008eb8:	08008f01 	.word	0x08008f01
 8008ebc:	08008f01 	.word	0x08008f01
 8008ec0:	08008f01 	.word	0x08008f01
 8008ec4:	08008f01 	.word	0x08008f01
 8008ec8:	08008f01 	.word	0x08008f01
 8008ecc:	08008ef9 	.word	0x08008ef9
 8008ed0:	2301      	movs	r3, #1
 8008ed2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008ed6:	e222      	b.n	800931e <UART_SetConfig+0x5a2>
 8008ed8:	2304      	movs	r3, #4
 8008eda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008ede:	e21e      	b.n	800931e <UART_SetConfig+0x5a2>
 8008ee0:	2308      	movs	r3, #8
 8008ee2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008ee6:	e21a      	b.n	800931e <UART_SetConfig+0x5a2>
 8008ee8:	2310      	movs	r3, #16
 8008eea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008eee:	e216      	b.n	800931e <UART_SetConfig+0x5a2>
 8008ef0:	2320      	movs	r3, #32
 8008ef2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008ef6:	e212      	b.n	800931e <UART_SetConfig+0x5a2>
 8008ef8:	2340      	movs	r3, #64	; 0x40
 8008efa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008efe:	e20e      	b.n	800931e <UART_SetConfig+0x5a2>
 8008f00:	2380      	movs	r3, #128	; 0x80
 8008f02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f06:	e20a      	b.n	800931e <UART_SetConfig+0x5a2>
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	4a6b      	ldr	r2, [pc, #428]	; (80090bc <UART_SetConfig+0x340>)
 8008f0e:	4293      	cmp	r3, r2
 8008f10:	d130      	bne.n	8008f74 <UART_SetConfig+0x1f8>
 8008f12:	4b69      	ldr	r3, [pc, #420]	; (80090b8 <UART_SetConfig+0x33c>)
 8008f14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f16:	f003 0307 	and.w	r3, r3, #7
 8008f1a:	2b05      	cmp	r3, #5
 8008f1c:	d826      	bhi.n	8008f6c <UART_SetConfig+0x1f0>
 8008f1e:	a201      	add	r2, pc, #4	; (adr r2, 8008f24 <UART_SetConfig+0x1a8>)
 8008f20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f24:	08008f3d 	.word	0x08008f3d
 8008f28:	08008f45 	.word	0x08008f45
 8008f2c:	08008f4d 	.word	0x08008f4d
 8008f30:	08008f55 	.word	0x08008f55
 8008f34:	08008f5d 	.word	0x08008f5d
 8008f38:	08008f65 	.word	0x08008f65
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f42:	e1ec      	b.n	800931e <UART_SetConfig+0x5a2>
 8008f44:	2304      	movs	r3, #4
 8008f46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f4a:	e1e8      	b.n	800931e <UART_SetConfig+0x5a2>
 8008f4c:	2308      	movs	r3, #8
 8008f4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f52:	e1e4      	b.n	800931e <UART_SetConfig+0x5a2>
 8008f54:	2310      	movs	r3, #16
 8008f56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f5a:	e1e0      	b.n	800931e <UART_SetConfig+0x5a2>
 8008f5c:	2320      	movs	r3, #32
 8008f5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f62:	e1dc      	b.n	800931e <UART_SetConfig+0x5a2>
 8008f64:	2340      	movs	r3, #64	; 0x40
 8008f66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f6a:	e1d8      	b.n	800931e <UART_SetConfig+0x5a2>
 8008f6c:	2380      	movs	r3, #128	; 0x80
 8008f6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f72:	e1d4      	b.n	800931e <UART_SetConfig+0x5a2>
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	4a51      	ldr	r2, [pc, #324]	; (80090c0 <UART_SetConfig+0x344>)
 8008f7a:	4293      	cmp	r3, r2
 8008f7c:	d130      	bne.n	8008fe0 <UART_SetConfig+0x264>
 8008f7e:	4b4e      	ldr	r3, [pc, #312]	; (80090b8 <UART_SetConfig+0x33c>)
 8008f80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f82:	f003 0307 	and.w	r3, r3, #7
 8008f86:	2b05      	cmp	r3, #5
 8008f88:	d826      	bhi.n	8008fd8 <UART_SetConfig+0x25c>
 8008f8a:	a201      	add	r2, pc, #4	; (adr r2, 8008f90 <UART_SetConfig+0x214>)
 8008f8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f90:	08008fa9 	.word	0x08008fa9
 8008f94:	08008fb1 	.word	0x08008fb1
 8008f98:	08008fb9 	.word	0x08008fb9
 8008f9c:	08008fc1 	.word	0x08008fc1
 8008fa0:	08008fc9 	.word	0x08008fc9
 8008fa4:	08008fd1 	.word	0x08008fd1
 8008fa8:	2300      	movs	r3, #0
 8008faa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008fae:	e1b6      	b.n	800931e <UART_SetConfig+0x5a2>
 8008fb0:	2304      	movs	r3, #4
 8008fb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008fb6:	e1b2      	b.n	800931e <UART_SetConfig+0x5a2>
 8008fb8:	2308      	movs	r3, #8
 8008fba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008fbe:	e1ae      	b.n	800931e <UART_SetConfig+0x5a2>
 8008fc0:	2310      	movs	r3, #16
 8008fc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008fc6:	e1aa      	b.n	800931e <UART_SetConfig+0x5a2>
 8008fc8:	2320      	movs	r3, #32
 8008fca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008fce:	e1a6      	b.n	800931e <UART_SetConfig+0x5a2>
 8008fd0:	2340      	movs	r3, #64	; 0x40
 8008fd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008fd6:	e1a2      	b.n	800931e <UART_SetConfig+0x5a2>
 8008fd8:	2380      	movs	r3, #128	; 0x80
 8008fda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008fde:	e19e      	b.n	800931e <UART_SetConfig+0x5a2>
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	4a37      	ldr	r2, [pc, #220]	; (80090c4 <UART_SetConfig+0x348>)
 8008fe6:	4293      	cmp	r3, r2
 8008fe8:	d130      	bne.n	800904c <UART_SetConfig+0x2d0>
 8008fea:	4b33      	ldr	r3, [pc, #204]	; (80090b8 <UART_SetConfig+0x33c>)
 8008fec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008fee:	f003 0307 	and.w	r3, r3, #7
 8008ff2:	2b05      	cmp	r3, #5
 8008ff4:	d826      	bhi.n	8009044 <UART_SetConfig+0x2c8>
 8008ff6:	a201      	add	r2, pc, #4	; (adr r2, 8008ffc <UART_SetConfig+0x280>)
 8008ff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ffc:	08009015 	.word	0x08009015
 8009000:	0800901d 	.word	0x0800901d
 8009004:	08009025 	.word	0x08009025
 8009008:	0800902d 	.word	0x0800902d
 800900c:	08009035 	.word	0x08009035
 8009010:	0800903d 	.word	0x0800903d
 8009014:	2300      	movs	r3, #0
 8009016:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800901a:	e180      	b.n	800931e <UART_SetConfig+0x5a2>
 800901c:	2304      	movs	r3, #4
 800901e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009022:	e17c      	b.n	800931e <UART_SetConfig+0x5a2>
 8009024:	2308      	movs	r3, #8
 8009026:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800902a:	e178      	b.n	800931e <UART_SetConfig+0x5a2>
 800902c:	2310      	movs	r3, #16
 800902e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009032:	e174      	b.n	800931e <UART_SetConfig+0x5a2>
 8009034:	2320      	movs	r3, #32
 8009036:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800903a:	e170      	b.n	800931e <UART_SetConfig+0x5a2>
 800903c:	2340      	movs	r3, #64	; 0x40
 800903e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009042:	e16c      	b.n	800931e <UART_SetConfig+0x5a2>
 8009044:	2380      	movs	r3, #128	; 0x80
 8009046:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800904a:	e168      	b.n	800931e <UART_SetConfig+0x5a2>
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	4a1d      	ldr	r2, [pc, #116]	; (80090c8 <UART_SetConfig+0x34c>)
 8009052:	4293      	cmp	r3, r2
 8009054:	d142      	bne.n	80090dc <UART_SetConfig+0x360>
 8009056:	4b18      	ldr	r3, [pc, #96]	; (80090b8 <UART_SetConfig+0x33c>)
 8009058:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800905a:	f003 0307 	and.w	r3, r3, #7
 800905e:	2b05      	cmp	r3, #5
 8009060:	d838      	bhi.n	80090d4 <UART_SetConfig+0x358>
 8009062:	a201      	add	r2, pc, #4	; (adr r2, 8009068 <UART_SetConfig+0x2ec>)
 8009064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009068:	08009081 	.word	0x08009081
 800906c:	08009089 	.word	0x08009089
 8009070:	08009091 	.word	0x08009091
 8009074:	08009099 	.word	0x08009099
 8009078:	080090a1 	.word	0x080090a1
 800907c:	080090cd 	.word	0x080090cd
 8009080:	2300      	movs	r3, #0
 8009082:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009086:	e14a      	b.n	800931e <UART_SetConfig+0x5a2>
 8009088:	2304      	movs	r3, #4
 800908a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800908e:	e146      	b.n	800931e <UART_SetConfig+0x5a2>
 8009090:	2308      	movs	r3, #8
 8009092:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009096:	e142      	b.n	800931e <UART_SetConfig+0x5a2>
 8009098:	2310      	movs	r3, #16
 800909a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800909e:	e13e      	b.n	800931e <UART_SetConfig+0x5a2>
 80090a0:	2320      	movs	r3, #32
 80090a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80090a6:	e13a      	b.n	800931e <UART_SetConfig+0x5a2>
 80090a8:	cfff69f3 	.word	0xcfff69f3
 80090ac:	58000c00 	.word	0x58000c00
 80090b0:	11fff4ff 	.word	0x11fff4ff
 80090b4:	40011000 	.word	0x40011000
 80090b8:	58024400 	.word	0x58024400
 80090bc:	40004400 	.word	0x40004400
 80090c0:	40004800 	.word	0x40004800
 80090c4:	40004c00 	.word	0x40004c00
 80090c8:	40005000 	.word	0x40005000
 80090cc:	2340      	movs	r3, #64	; 0x40
 80090ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80090d2:	e124      	b.n	800931e <UART_SetConfig+0x5a2>
 80090d4:	2380      	movs	r3, #128	; 0x80
 80090d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80090da:	e120      	b.n	800931e <UART_SetConfig+0x5a2>
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	4acc      	ldr	r2, [pc, #816]	; (8009414 <UART_SetConfig+0x698>)
 80090e2:	4293      	cmp	r3, r2
 80090e4:	d176      	bne.n	80091d4 <UART_SetConfig+0x458>
 80090e6:	4bcc      	ldr	r3, [pc, #816]	; (8009418 <UART_SetConfig+0x69c>)
 80090e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80090ee:	2b28      	cmp	r3, #40	; 0x28
 80090f0:	d86c      	bhi.n	80091cc <UART_SetConfig+0x450>
 80090f2:	a201      	add	r2, pc, #4	; (adr r2, 80090f8 <UART_SetConfig+0x37c>)
 80090f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090f8:	0800919d 	.word	0x0800919d
 80090fc:	080091cd 	.word	0x080091cd
 8009100:	080091cd 	.word	0x080091cd
 8009104:	080091cd 	.word	0x080091cd
 8009108:	080091cd 	.word	0x080091cd
 800910c:	080091cd 	.word	0x080091cd
 8009110:	080091cd 	.word	0x080091cd
 8009114:	080091cd 	.word	0x080091cd
 8009118:	080091a5 	.word	0x080091a5
 800911c:	080091cd 	.word	0x080091cd
 8009120:	080091cd 	.word	0x080091cd
 8009124:	080091cd 	.word	0x080091cd
 8009128:	080091cd 	.word	0x080091cd
 800912c:	080091cd 	.word	0x080091cd
 8009130:	080091cd 	.word	0x080091cd
 8009134:	080091cd 	.word	0x080091cd
 8009138:	080091ad 	.word	0x080091ad
 800913c:	080091cd 	.word	0x080091cd
 8009140:	080091cd 	.word	0x080091cd
 8009144:	080091cd 	.word	0x080091cd
 8009148:	080091cd 	.word	0x080091cd
 800914c:	080091cd 	.word	0x080091cd
 8009150:	080091cd 	.word	0x080091cd
 8009154:	080091cd 	.word	0x080091cd
 8009158:	080091b5 	.word	0x080091b5
 800915c:	080091cd 	.word	0x080091cd
 8009160:	080091cd 	.word	0x080091cd
 8009164:	080091cd 	.word	0x080091cd
 8009168:	080091cd 	.word	0x080091cd
 800916c:	080091cd 	.word	0x080091cd
 8009170:	080091cd 	.word	0x080091cd
 8009174:	080091cd 	.word	0x080091cd
 8009178:	080091bd 	.word	0x080091bd
 800917c:	080091cd 	.word	0x080091cd
 8009180:	080091cd 	.word	0x080091cd
 8009184:	080091cd 	.word	0x080091cd
 8009188:	080091cd 	.word	0x080091cd
 800918c:	080091cd 	.word	0x080091cd
 8009190:	080091cd 	.word	0x080091cd
 8009194:	080091cd 	.word	0x080091cd
 8009198:	080091c5 	.word	0x080091c5
 800919c:	2301      	movs	r3, #1
 800919e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80091a2:	e0bc      	b.n	800931e <UART_SetConfig+0x5a2>
 80091a4:	2304      	movs	r3, #4
 80091a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80091aa:	e0b8      	b.n	800931e <UART_SetConfig+0x5a2>
 80091ac:	2308      	movs	r3, #8
 80091ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80091b2:	e0b4      	b.n	800931e <UART_SetConfig+0x5a2>
 80091b4:	2310      	movs	r3, #16
 80091b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80091ba:	e0b0      	b.n	800931e <UART_SetConfig+0x5a2>
 80091bc:	2320      	movs	r3, #32
 80091be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80091c2:	e0ac      	b.n	800931e <UART_SetConfig+0x5a2>
 80091c4:	2340      	movs	r3, #64	; 0x40
 80091c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80091ca:	e0a8      	b.n	800931e <UART_SetConfig+0x5a2>
 80091cc:	2380      	movs	r3, #128	; 0x80
 80091ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80091d2:	e0a4      	b.n	800931e <UART_SetConfig+0x5a2>
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	4a90      	ldr	r2, [pc, #576]	; (800941c <UART_SetConfig+0x6a0>)
 80091da:	4293      	cmp	r3, r2
 80091dc:	d130      	bne.n	8009240 <UART_SetConfig+0x4c4>
 80091de:	4b8e      	ldr	r3, [pc, #568]	; (8009418 <UART_SetConfig+0x69c>)
 80091e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091e2:	f003 0307 	and.w	r3, r3, #7
 80091e6:	2b05      	cmp	r3, #5
 80091e8:	d826      	bhi.n	8009238 <UART_SetConfig+0x4bc>
 80091ea:	a201      	add	r2, pc, #4	; (adr r2, 80091f0 <UART_SetConfig+0x474>)
 80091ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091f0:	08009209 	.word	0x08009209
 80091f4:	08009211 	.word	0x08009211
 80091f8:	08009219 	.word	0x08009219
 80091fc:	08009221 	.word	0x08009221
 8009200:	08009229 	.word	0x08009229
 8009204:	08009231 	.word	0x08009231
 8009208:	2300      	movs	r3, #0
 800920a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800920e:	e086      	b.n	800931e <UART_SetConfig+0x5a2>
 8009210:	2304      	movs	r3, #4
 8009212:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009216:	e082      	b.n	800931e <UART_SetConfig+0x5a2>
 8009218:	2308      	movs	r3, #8
 800921a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800921e:	e07e      	b.n	800931e <UART_SetConfig+0x5a2>
 8009220:	2310      	movs	r3, #16
 8009222:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009226:	e07a      	b.n	800931e <UART_SetConfig+0x5a2>
 8009228:	2320      	movs	r3, #32
 800922a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800922e:	e076      	b.n	800931e <UART_SetConfig+0x5a2>
 8009230:	2340      	movs	r3, #64	; 0x40
 8009232:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009236:	e072      	b.n	800931e <UART_SetConfig+0x5a2>
 8009238:	2380      	movs	r3, #128	; 0x80
 800923a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800923e:	e06e      	b.n	800931e <UART_SetConfig+0x5a2>
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	4a76      	ldr	r2, [pc, #472]	; (8009420 <UART_SetConfig+0x6a4>)
 8009246:	4293      	cmp	r3, r2
 8009248:	d130      	bne.n	80092ac <UART_SetConfig+0x530>
 800924a:	4b73      	ldr	r3, [pc, #460]	; (8009418 <UART_SetConfig+0x69c>)
 800924c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800924e:	f003 0307 	and.w	r3, r3, #7
 8009252:	2b05      	cmp	r3, #5
 8009254:	d826      	bhi.n	80092a4 <UART_SetConfig+0x528>
 8009256:	a201      	add	r2, pc, #4	; (adr r2, 800925c <UART_SetConfig+0x4e0>)
 8009258:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800925c:	08009275 	.word	0x08009275
 8009260:	0800927d 	.word	0x0800927d
 8009264:	08009285 	.word	0x08009285
 8009268:	0800928d 	.word	0x0800928d
 800926c:	08009295 	.word	0x08009295
 8009270:	0800929d 	.word	0x0800929d
 8009274:	2300      	movs	r3, #0
 8009276:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800927a:	e050      	b.n	800931e <UART_SetConfig+0x5a2>
 800927c:	2304      	movs	r3, #4
 800927e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009282:	e04c      	b.n	800931e <UART_SetConfig+0x5a2>
 8009284:	2308      	movs	r3, #8
 8009286:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800928a:	e048      	b.n	800931e <UART_SetConfig+0x5a2>
 800928c:	2310      	movs	r3, #16
 800928e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009292:	e044      	b.n	800931e <UART_SetConfig+0x5a2>
 8009294:	2320      	movs	r3, #32
 8009296:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800929a:	e040      	b.n	800931e <UART_SetConfig+0x5a2>
 800929c:	2340      	movs	r3, #64	; 0x40
 800929e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80092a2:	e03c      	b.n	800931e <UART_SetConfig+0x5a2>
 80092a4:	2380      	movs	r3, #128	; 0x80
 80092a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80092aa:	e038      	b.n	800931e <UART_SetConfig+0x5a2>
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	4a5c      	ldr	r2, [pc, #368]	; (8009424 <UART_SetConfig+0x6a8>)
 80092b2:	4293      	cmp	r3, r2
 80092b4:	d130      	bne.n	8009318 <UART_SetConfig+0x59c>
 80092b6:	4b58      	ldr	r3, [pc, #352]	; (8009418 <UART_SetConfig+0x69c>)
 80092b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092ba:	f003 0307 	and.w	r3, r3, #7
 80092be:	2b05      	cmp	r3, #5
 80092c0:	d826      	bhi.n	8009310 <UART_SetConfig+0x594>
 80092c2:	a201      	add	r2, pc, #4	; (adr r2, 80092c8 <UART_SetConfig+0x54c>)
 80092c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092c8:	080092e1 	.word	0x080092e1
 80092cc:	080092e9 	.word	0x080092e9
 80092d0:	080092f1 	.word	0x080092f1
 80092d4:	080092f9 	.word	0x080092f9
 80092d8:	08009301 	.word	0x08009301
 80092dc:	08009309 	.word	0x08009309
 80092e0:	2302      	movs	r3, #2
 80092e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80092e6:	e01a      	b.n	800931e <UART_SetConfig+0x5a2>
 80092e8:	2304      	movs	r3, #4
 80092ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80092ee:	e016      	b.n	800931e <UART_SetConfig+0x5a2>
 80092f0:	2308      	movs	r3, #8
 80092f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80092f6:	e012      	b.n	800931e <UART_SetConfig+0x5a2>
 80092f8:	2310      	movs	r3, #16
 80092fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80092fe:	e00e      	b.n	800931e <UART_SetConfig+0x5a2>
 8009300:	2320      	movs	r3, #32
 8009302:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009306:	e00a      	b.n	800931e <UART_SetConfig+0x5a2>
 8009308:	2340      	movs	r3, #64	; 0x40
 800930a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800930e:	e006      	b.n	800931e <UART_SetConfig+0x5a2>
 8009310:	2380      	movs	r3, #128	; 0x80
 8009312:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009316:	e002      	b.n	800931e <UART_SetConfig+0x5a2>
 8009318:	2380      	movs	r3, #128	; 0x80
 800931a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	4a40      	ldr	r2, [pc, #256]	; (8009424 <UART_SetConfig+0x6a8>)
 8009324:	4293      	cmp	r3, r2
 8009326:	f040 80ef 	bne.w	8009508 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800932a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800932e:	2b20      	cmp	r3, #32
 8009330:	dc46      	bgt.n	80093c0 <UART_SetConfig+0x644>
 8009332:	2b02      	cmp	r3, #2
 8009334:	f2c0 8081 	blt.w	800943a <UART_SetConfig+0x6be>
 8009338:	3b02      	subs	r3, #2
 800933a:	2b1e      	cmp	r3, #30
 800933c:	d87d      	bhi.n	800943a <UART_SetConfig+0x6be>
 800933e:	a201      	add	r2, pc, #4	; (adr r2, 8009344 <UART_SetConfig+0x5c8>)
 8009340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009344:	080093c7 	.word	0x080093c7
 8009348:	0800943b 	.word	0x0800943b
 800934c:	080093cf 	.word	0x080093cf
 8009350:	0800943b 	.word	0x0800943b
 8009354:	0800943b 	.word	0x0800943b
 8009358:	0800943b 	.word	0x0800943b
 800935c:	080093df 	.word	0x080093df
 8009360:	0800943b 	.word	0x0800943b
 8009364:	0800943b 	.word	0x0800943b
 8009368:	0800943b 	.word	0x0800943b
 800936c:	0800943b 	.word	0x0800943b
 8009370:	0800943b 	.word	0x0800943b
 8009374:	0800943b 	.word	0x0800943b
 8009378:	0800943b 	.word	0x0800943b
 800937c:	080093ef 	.word	0x080093ef
 8009380:	0800943b 	.word	0x0800943b
 8009384:	0800943b 	.word	0x0800943b
 8009388:	0800943b 	.word	0x0800943b
 800938c:	0800943b 	.word	0x0800943b
 8009390:	0800943b 	.word	0x0800943b
 8009394:	0800943b 	.word	0x0800943b
 8009398:	0800943b 	.word	0x0800943b
 800939c:	0800943b 	.word	0x0800943b
 80093a0:	0800943b 	.word	0x0800943b
 80093a4:	0800943b 	.word	0x0800943b
 80093a8:	0800943b 	.word	0x0800943b
 80093ac:	0800943b 	.word	0x0800943b
 80093b0:	0800943b 	.word	0x0800943b
 80093b4:	0800943b 	.word	0x0800943b
 80093b8:	0800943b 	.word	0x0800943b
 80093bc:	0800942d 	.word	0x0800942d
 80093c0:	2b40      	cmp	r3, #64	; 0x40
 80093c2:	d036      	beq.n	8009432 <UART_SetConfig+0x6b6>
 80093c4:	e039      	b.n	800943a <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80093c6:	f7fd fff7 	bl	80073b8 <HAL_RCCEx_GetD3PCLK1Freq>
 80093ca:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80093cc:	e03b      	b.n	8009446 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80093ce:	f107 0314 	add.w	r3, r7, #20
 80093d2:	4618      	mov	r0, r3
 80093d4:	f7fe f806 	bl	80073e4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80093d8:	69bb      	ldr	r3, [r7, #24]
 80093da:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80093dc:	e033      	b.n	8009446 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80093de:	f107 0308 	add.w	r3, r7, #8
 80093e2:	4618      	mov	r0, r3
 80093e4:	f7fe f952 	bl	800768c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80093ec:	e02b      	b.n	8009446 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80093ee:	4b0a      	ldr	r3, [pc, #40]	; (8009418 <UART_SetConfig+0x69c>)
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	f003 0320 	and.w	r3, r3, #32
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d009      	beq.n	800940e <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80093fa:	4b07      	ldr	r3, [pc, #28]	; (8009418 <UART_SetConfig+0x69c>)
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	08db      	lsrs	r3, r3, #3
 8009400:	f003 0303 	and.w	r3, r3, #3
 8009404:	4a08      	ldr	r2, [pc, #32]	; (8009428 <UART_SetConfig+0x6ac>)
 8009406:	fa22 f303 	lsr.w	r3, r2, r3
 800940a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800940c:	e01b      	b.n	8009446 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800940e:	4b06      	ldr	r3, [pc, #24]	; (8009428 <UART_SetConfig+0x6ac>)
 8009410:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009412:	e018      	b.n	8009446 <UART_SetConfig+0x6ca>
 8009414:	40011400 	.word	0x40011400
 8009418:	58024400 	.word	0x58024400
 800941c:	40007800 	.word	0x40007800
 8009420:	40007c00 	.word	0x40007c00
 8009424:	58000c00 	.word	0x58000c00
 8009428:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800942c:	4bc4      	ldr	r3, [pc, #784]	; (8009740 <UART_SetConfig+0x9c4>)
 800942e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009430:	e009      	b.n	8009446 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009432:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009436:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009438:	e005      	b.n	8009446 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800943a:	2300      	movs	r3, #0
 800943c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800943e:	2301      	movs	r3, #1
 8009440:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8009444:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009448:	2b00      	cmp	r3, #0
 800944a:	f000 81da 	beq.w	8009802 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009452:	4abc      	ldr	r2, [pc, #752]	; (8009744 <UART_SetConfig+0x9c8>)
 8009454:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009458:	461a      	mov	r2, r3
 800945a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800945c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009460:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	685a      	ldr	r2, [r3, #4]
 8009466:	4613      	mov	r3, r2
 8009468:	005b      	lsls	r3, r3, #1
 800946a:	4413      	add	r3, r2
 800946c:	6a3a      	ldr	r2, [r7, #32]
 800946e:	429a      	cmp	r2, r3
 8009470:	d305      	bcc.n	800947e <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	685b      	ldr	r3, [r3, #4]
 8009476:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009478:	6a3a      	ldr	r2, [r7, #32]
 800947a:	429a      	cmp	r2, r3
 800947c:	d903      	bls.n	8009486 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800947e:	2301      	movs	r3, #1
 8009480:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009484:	e1bd      	b.n	8009802 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009488:	4618      	mov	r0, r3
 800948a:	f04f 0100 	mov.w	r1, #0
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009492:	4aac      	ldr	r2, [pc, #688]	; (8009744 <UART_SetConfig+0x9c8>)
 8009494:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009498:	b29a      	uxth	r2, r3
 800949a:	f04f 0300 	mov.w	r3, #0
 800949e:	f7f7 f943 	bl	8000728 <__aeabi_uldivmod>
 80094a2:	4602      	mov	r2, r0
 80094a4:	460b      	mov	r3, r1
 80094a6:	4610      	mov	r0, r2
 80094a8:	4619      	mov	r1, r3
 80094aa:	f04f 0200 	mov.w	r2, #0
 80094ae:	f04f 0300 	mov.w	r3, #0
 80094b2:	020b      	lsls	r3, r1, #8
 80094b4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80094b8:	0202      	lsls	r2, r0, #8
 80094ba:	6879      	ldr	r1, [r7, #4]
 80094bc:	6849      	ldr	r1, [r1, #4]
 80094be:	0849      	lsrs	r1, r1, #1
 80094c0:	4608      	mov	r0, r1
 80094c2:	f04f 0100 	mov.w	r1, #0
 80094c6:	1814      	adds	r4, r2, r0
 80094c8:	eb43 0501 	adc.w	r5, r3, r1
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	685b      	ldr	r3, [r3, #4]
 80094d0:	461a      	mov	r2, r3
 80094d2:	f04f 0300 	mov.w	r3, #0
 80094d6:	4620      	mov	r0, r4
 80094d8:	4629      	mov	r1, r5
 80094da:	f7f7 f925 	bl	8000728 <__aeabi_uldivmod>
 80094de:	4602      	mov	r2, r0
 80094e0:	460b      	mov	r3, r1
 80094e2:	4613      	mov	r3, r2
 80094e4:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80094e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80094ec:	d308      	bcc.n	8009500 <UART_SetConfig+0x784>
 80094ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80094f4:	d204      	bcs.n	8009500 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80094fc:	60da      	str	r2, [r3, #12]
 80094fe:	e180      	b.n	8009802 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 8009500:	2301      	movs	r3, #1
 8009502:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009506:	e17c      	b.n	8009802 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	69db      	ldr	r3, [r3, #28]
 800950c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009510:	f040 80bf 	bne.w	8009692 <UART_SetConfig+0x916>
  {
    switch (clocksource)
 8009514:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009518:	2b20      	cmp	r3, #32
 800951a:	dc49      	bgt.n	80095b0 <UART_SetConfig+0x834>
 800951c:	2b00      	cmp	r3, #0
 800951e:	db7c      	blt.n	800961a <UART_SetConfig+0x89e>
 8009520:	2b20      	cmp	r3, #32
 8009522:	d87a      	bhi.n	800961a <UART_SetConfig+0x89e>
 8009524:	a201      	add	r2, pc, #4	; (adr r2, 800952c <UART_SetConfig+0x7b0>)
 8009526:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800952a:	bf00      	nop
 800952c:	080095b7 	.word	0x080095b7
 8009530:	080095bf 	.word	0x080095bf
 8009534:	0800961b 	.word	0x0800961b
 8009538:	0800961b 	.word	0x0800961b
 800953c:	080095c7 	.word	0x080095c7
 8009540:	0800961b 	.word	0x0800961b
 8009544:	0800961b 	.word	0x0800961b
 8009548:	0800961b 	.word	0x0800961b
 800954c:	080095d7 	.word	0x080095d7
 8009550:	0800961b 	.word	0x0800961b
 8009554:	0800961b 	.word	0x0800961b
 8009558:	0800961b 	.word	0x0800961b
 800955c:	0800961b 	.word	0x0800961b
 8009560:	0800961b 	.word	0x0800961b
 8009564:	0800961b 	.word	0x0800961b
 8009568:	0800961b 	.word	0x0800961b
 800956c:	080095e7 	.word	0x080095e7
 8009570:	0800961b 	.word	0x0800961b
 8009574:	0800961b 	.word	0x0800961b
 8009578:	0800961b 	.word	0x0800961b
 800957c:	0800961b 	.word	0x0800961b
 8009580:	0800961b 	.word	0x0800961b
 8009584:	0800961b 	.word	0x0800961b
 8009588:	0800961b 	.word	0x0800961b
 800958c:	0800961b 	.word	0x0800961b
 8009590:	0800961b 	.word	0x0800961b
 8009594:	0800961b 	.word	0x0800961b
 8009598:	0800961b 	.word	0x0800961b
 800959c:	0800961b 	.word	0x0800961b
 80095a0:	0800961b 	.word	0x0800961b
 80095a4:	0800961b 	.word	0x0800961b
 80095a8:	0800961b 	.word	0x0800961b
 80095ac:	0800960d 	.word	0x0800960d
 80095b0:	2b40      	cmp	r3, #64	; 0x40
 80095b2:	d02e      	beq.n	8009612 <UART_SetConfig+0x896>
 80095b4:	e031      	b.n	800961a <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80095b6:	f7fc ff51 	bl	800645c <HAL_RCC_GetPCLK1Freq>
 80095ba:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80095bc:	e033      	b.n	8009626 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80095be:	f7fc ff63 	bl	8006488 <HAL_RCC_GetPCLK2Freq>
 80095c2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80095c4:	e02f      	b.n	8009626 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80095c6:	f107 0314 	add.w	r3, r7, #20
 80095ca:	4618      	mov	r0, r3
 80095cc:	f7fd ff0a 	bl	80073e4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80095d0:	69bb      	ldr	r3, [r7, #24]
 80095d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80095d4:	e027      	b.n	8009626 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80095d6:	f107 0308 	add.w	r3, r7, #8
 80095da:	4618      	mov	r0, r3
 80095dc:	f7fe f856 	bl	800768c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80095e4:	e01f      	b.n	8009626 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80095e6:	4b58      	ldr	r3, [pc, #352]	; (8009748 <UART_SetConfig+0x9cc>)
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	f003 0320 	and.w	r3, r3, #32
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d009      	beq.n	8009606 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80095f2:	4b55      	ldr	r3, [pc, #340]	; (8009748 <UART_SetConfig+0x9cc>)
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	08db      	lsrs	r3, r3, #3
 80095f8:	f003 0303 	and.w	r3, r3, #3
 80095fc:	4a53      	ldr	r2, [pc, #332]	; (800974c <UART_SetConfig+0x9d0>)
 80095fe:	fa22 f303 	lsr.w	r3, r2, r3
 8009602:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009604:	e00f      	b.n	8009626 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 8009606:	4b51      	ldr	r3, [pc, #324]	; (800974c <UART_SetConfig+0x9d0>)
 8009608:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800960a:	e00c      	b.n	8009626 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800960c:	4b4c      	ldr	r3, [pc, #304]	; (8009740 <UART_SetConfig+0x9c4>)
 800960e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009610:	e009      	b.n	8009626 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009612:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009616:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009618:	e005      	b.n	8009626 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800961a:	2300      	movs	r3, #0
 800961c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800961e:	2301      	movs	r3, #1
 8009620:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8009624:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009628:	2b00      	cmp	r3, #0
 800962a:	f000 80ea 	beq.w	8009802 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009632:	4a44      	ldr	r2, [pc, #272]	; (8009744 <UART_SetConfig+0x9c8>)
 8009634:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009638:	461a      	mov	r2, r3
 800963a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800963c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009640:	005a      	lsls	r2, r3, #1
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	685b      	ldr	r3, [r3, #4]
 8009646:	085b      	lsrs	r3, r3, #1
 8009648:	441a      	add	r2, r3
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	685b      	ldr	r3, [r3, #4]
 800964e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009652:	b29b      	uxth	r3, r3
 8009654:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009658:	2b0f      	cmp	r3, #15
 800965a:	d916      	bls.n	800968a <UART_SetConfig+0x90e>
 800965c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800965e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009662:	d212      	bcs.n	800968a <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009666:	b29b      	uxth	r3, r3
 8009668:	f023 030f 	bic.w	r3, r3, #15
 800966c:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800966e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009670:	085b      	lsrs	r3, r3, #1
 8009672:	b29b      	uxth	r3, r3
 8009674:	f003 0307 	and.w	r3, r3, #7
 8009678:	b29a      	uxth	r2, r3
 800967a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800967c:	4313      	orrs	r3, r2
 800967e:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8009686:	60da      	str	r2, [r3, #12]
 8009688:	e0bb      	b.n	8009802 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800968a:	2301      	movs	r3, #1
 800968c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009690:	e0b7      	b.n	8009802 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009692:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009696:	2b20      	cmp	r3, #32
 8009698:	dc4a      	bgt.n	8009730 <UART_SetConfig+0x9b4>
 800969a:	2b00      	cmp	r3, #0
 800969c:	f2c0 8086 	blt.w	80097ac <UART_SetConfig+0xa30>
 80096a0:	2b20      	cmp	r3, #32
 80096a2:	f200 8083 	bhi.w	80097ac <UART_SetConfig+0xa30>
 80096a6:	a201      	add	r2, pc, #4	; (adr r2, 80096ac <UART_SetConfig+0x930>)
 80096a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096ac:	08009737 	.word	0x08009737
 80096b0:	08009751 	.word	0x08009751
 80096b4:	080097ad 	.word	0x080097ad
 80096b8:	080097ad 	.word	0x080097ad
 80096bc:	08009759 	.word	0x08009759
 80096c0:	080097ad 	.word	0x080097ad
 80096c4:	080097ad 	.word	0x080097ad
 80096c8:	080097ad 	.word	0x080097ad
 80096cc:	08009769 	.word	0x08009769
 80096d0:	080097ad 	.word	0x080097ad
 80096d4:	080097ad 	.word	0x080097ad
 80096d8:	080097ad 	.word	0x080097ad
 80096dc:	080097ad 	.word	0x080097ad
 80096e0:	080097ad 	.word	0x080097ad
 80096e4:	080097ad 	.word	0x080097ad
 80096e8:	080097ad 	.word	0x080097ad
 80096ec:	08009779 	.word	0x08009779
 80096f0:	080097ad 	.word	0x080097ad
 80096f4:	080097ad 	.word	0x080097ad
 80096f8:	080097ad 	.word	0x080097ad
 80096fc:	080097ad 	.word	0x080097ad
 8009700:	080097ad 	.word	0x080097ad
 8009704:	080097ad 	.word	0x080097ad
 8009708:	080097ad 	.word	0x080097ad
 800970c:	080097ad 	.word	0x080097ad
 8009710:	080097ad 	.word	0x080097ad
 8009714:	080097ad 	.word	0x080097ad
 8009718:	080097ad 	.word	0x080097ad
 800971c:	080097ad 	.word	0x080097ad
 8009720:	080097ad 	.word	0x080097ad
 8009724:	080097ad 	.word	0x080097ad
 8009728:	080097ad 	.word	0x080097ad
 800972c:	0800979f 	.word	0x0800979f
 8009730:	2b40      	cmp	r3, #64	; 0x40
 8009732:	d037      	beq.n	80097a4 <UART_SetConfig+0xa28>
 8009734:	e03a      	b.n	80097ac <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009736:	f7fc fe91 	bl	800645c <HAL_RCC_GetPCLK1Freq>
 800973a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800973c:	e03c      	b.n	80097b8 <UART_SetConfig+0xa3c>
 800973e:	bf00      	nop
 8009740:	003d0900 	.word	0x003d0900
 8009744:	08026ff0 	.word	0x08026ff0
 8009748:	58024400 	.word	0x58024400
 800974c:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009750:	f7fc fe9a 	bl	8006488 <HAL_RCC_GetPCLK2Freq>
 8009754:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009756:	e02f      	b.n	80097b8 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009758:	f107 0314 	add.w	r3, r7, #20
 800975c:	4618      	mov	r0, r3
 800975e:	f7fd fe41 	bl	80073e4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009762:	69bb      	ldr	r3, [r7, #24]
 8009764:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009766:	e027      	b.n	80097b8 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009768:	f107 0308 	add.w	r3, r7, #8
 800976c:	4618      	mov	r0, r3
 800976e:	f7fd ff8d 	bl	800768c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009776:	e01f      	b.n	80097b8 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009778:	4b2c      	ldr	r3, [pc, #176]	; (800982c <UART_SetConfig+0xab0>)
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	f003 0320 	and.w	r3, r3, #32
 8009780:	2b00      	cmp	r3, #0
 8009782:	d009      	beq.n	8009798 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009784:	4b29      	ldr	r3, [pc, #164]	; (800982c <UART_SetConfig+0xab0>)
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	08db      	lsrs	r3, r3, #3
 800978a:	f003 0303 	and.w	r3, r3, #3
 800978e:	4a28      	ldr	r2, [pc, #160]	; (8009830 <UART_SetConfig+0xab4>)
 8009790:	fa22 f303 	lsr.w	r3, r2, r3
 8009794:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009796:	e00f      	b.n	80097b8 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 8009798:	4b25      	ldr	r3, [pc, #148]	; (8009830 <UART_SetConfig+0xab4>)
 800979a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800979c:	e00c      	b.n	80097b8 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800979e:	4b25      	ldr	r3, [pc, #148]	; (8009834 <UART_SetConfig+0xab8>)
 80097a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80097a2:	e009      	b.n	80097b8 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80097a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80097a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80097aa:	e005      	b.n	80097b8 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 80097ac:	2300      	movs	r3, #0
 80097ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80097b0:	2301      	movs	r3, #1
 80097b2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80097b6:	bf00      	nop
    }

    if (pclk != 0U)
 80097b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d021      	beq.n	8009802 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097c2:	4a1d      	ldr	r2, [pc, #116]	; (8009838 <UART_SetConfig+0xabc>)
 80097c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80097c8:	461a      	mov	r2, r3
 80097ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097cc:	fbb3 f2f2 	udiv	r2, r3, r2
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	685b      	ldr	r3, [r3, #4]
 80097d4:	085b      	lsrs	r3, r3, #1
 80097d6:	441a      	add	r2, r3
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	685b      	ldr	r3, [r3, #4]
 80097dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80097e0:	b29b      	uxth	r3, r3
 80097e2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80097e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097e6:	2b0f      	cmp	r3, #15
 80097e8:	d908      	bls.n	80097fc <UART_SetConfig+0xa80>
 80097ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80097f0:	d204      	bcs.n	80097fc <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80097f8:	60da      	str	r2, [r3, #12]
 80097fa:	e002      	b.n	8009802 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 80097fc:	2301      	movs	r3, #1
 80097fe:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	2201      	movs	r2, #1
 8009806:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	2201      	movs	r2, #1
 800980e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	2200      	movs	r2, #0
 8009816:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	2200      	movs	r2, #0
 800981c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800981e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8009822:	4618      	mov	r0, r3
 8009824:	3738      	adds	r7, #56	; 0x38
 8009826:	46bd      	mov	sp, r7
 8009828:	bdb0      	pop	{r4, r5, r7, pc}
 800982a:	bf00      	nop
 800982c:	58024400 	.word	0x58024400
 8009830:	03d09000 	.word	0x03d09000
 8009834:	003d0900 	.word	0x003d0900
 8009838:	08026ff0 	.word	0x08026ff0

0800983c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800983c:	b480      	push	{r7}
 800983e:	b083      	sub	sp, #12
 8009840:	af00      	add	r7, sp, #0
 8009842:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009848:	f003 0301 	and.w	r3, r3, #1
 800984c:	2b00      	cmp	r3, #0
 800984e:	d00a      	beq.n	8009866 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	685b      	ldr	r3, [r3, #4]
 8009856:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	430a      	orrs	r2, r1
 8009864:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800986a:	f003 0302 	and.w	r3, r3, #2
 800986e:	2b00      	cmp	r3, #0
 8009870:	d00a      	beq.n	8009888 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	685b      	ldr	r3, [r3, #4]
 8009878:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	430a      	orrs	r2, r1
 8009886:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800988c:	f003 0304 	and.w	r3, r3, #4
 8009890:	2b00      	cmp	r3, #0
 8009892:	d00a      	beq.n	80098aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	685b      	ldr	r3, [r3, #4]
 800989a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	430a      	orrs	r2, r1
 80098a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098ae:	f003 0308 	and.w	r3, r3, #8
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d00a      	beq.n	80098cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	685b      	ldr	r3, [r3, #4]
 80098bc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	430a      	orrs	r2, r1
 80098ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098d0:	f003 0310 	and.w	r3, r3, #16
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d00a      	beq.n	80098ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	689b      	ldr	r3, [r3, #8]
 80098de:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	430a      	orrs	r2, r1
 80098ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098f2:	f003 0320 	and.w	r3, r3, #32
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d00a      	beq.n	8009910 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	689b      	ldr	r3, [r3, #8]
 8009900:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	430a      	orrs	r2, r1
 800990e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009914:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009918:	2b00      	cmp	r3, #0
 800991a:	d01a      	beq.n	8009952 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	685b      	ldr	r3, [r3, #4]
 8009922:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	430a      	orrs	r2, r1
 8009930:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009936:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800993a:	d10a      	bne.n	8009952 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	685b      	ldr	r3, [r3, #4]
 8009942:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	430a      	orrs	r2, r1
 8009950:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009956:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800995a:	2b00      	cmp	r3, #0
 800995c:	d00a      	beq.n	8009974 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	685b      	ldr	r3, [r3, #4]
 8009964:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	430a      	orrs	r2, r1
 8009972:	605a      	str	r2, [r3, #4]
  }
}
 8009974:	bf00      	nop
 8009976:	370c      	adds	r7, #12
 8009978:	46bd      	mov	sp, r7
 800997a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997e:	4770      	bx	lr

08009980 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009980:	b580      	push	{r7, lr}
 8009982:	b086      	sub	sp, #24
 8009984:	af02      	add	r7, sp, #8
 8009986:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	2200      	movs	r2, #0
 800998c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009990:	f7f9 f92c 	bl	8002bec <HAL_GetTick>
 8009994:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	f003 0308 	and.w	r3, r3, #8
 80099a0:	2b08      	cmp	r3, #8
 80099a2:	d10e      	bne.n	80099c2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80099a4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80099a8:	9300      	str	r3, [sp, #0]
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	2200      	movs	r2, #0
 80099ae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80099b2:	6878      	ldr	r0, [r7, #4]
 80099b4:	f000 f82f 	bl	8009a16 <UART_WaitOnFlagUntilTimeout>
 80099b8:	4603      	mov	r3, r0
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d001      	beq.n	80099c2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80099be:	2303      	movs	r3, #3
 80099c0:	e025      	b.n	8009a0e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	f003 0304 	and.w	r3, r3, #4
 80099cc:	2b04      	cmp	r3, #4
 80099ce:	d10e      	bne.n	80099ee <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80099d0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80099d4:	9300      	str	r3, [sp, #0]
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	2200      	movs	r2, #0
 80099da:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80099de:	6878      	ldr	r0, [r7, #4]
 80099e0:	f000 f819 	bl	8009a16 <UART_WaitOnFlagUntilTimeout>
 80099e4:	4603      	mov	r3, r0
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d001      	beq.n	80099ee <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80099ea:	2303      	movs	r3, #3
 80099ec:	e00f      	b.n	8009a0e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	2220      	movs	r2, #32
 80099f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	2220      	movs	r2, #32
 80099fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	2200      	movs	r2, #0
 8009a02:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	2200      	movs	r2, #0
 8009a08:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009a0c:	2300      	movs	r3, #0
}
 8009a0e:	4618      	mov	r0, r3
 8009a10:	3710      	adds	r7, #16
 8009a12:	46bd      	mov	sp, r7
 8009a14:	bd80      	pop	{r7, pc}

08009a16 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009a16:	b580      	push	{r7, lr}
 8009a18:	b084      	sub	sp, #16
 8009a1a:	af00      	add	r7, sp, #0
 8009a1c:	60f8      	str	r0, [r7, #12]
 8009a1e:	60b9      	str	r1, [r7, #8]
 8009a20:	603b      	str	r3, [r7, #0]
 8009a22:	4613      	mov	r3, r2
 8009a24:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009a26:	e062      	b.n	8009aee <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009a28:	69bb      	ldr	r3, [r7, #24]
 8009a2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a2e:	d05e      	beq.n	8009aee <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009a30:	f7f9 f8dc 	bl	8002bec <HAL_GetTick>
 8009a34:	4602      	mov	r2, r0
 8009a36:	683b      	ldr	r3, [r7, #0]
 8009a38:	1ad3      	subs	r3, r2, r3
 8009a3a:	69ba      	ldr	r2, [r7, #24]
 8009a3c:	429a      	cmp	r2, r3
 8009a3e:	d302      	bcc.n	8009a46 <UART_WaitOnFlagUntilTimeout+0x30>
 8009a40:	69bb      	ldr	r3, [r7, #24]
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d11d      	bne.n	8009a82 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	681a      	ldr	r2, [r3, #0]
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009a54:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	689a      	ldr	r2, [r3, #8]
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	f022 0201 	bic.w	r2, r2, #1
 8009a64:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	2220      	movs	r2, #32
 8009a6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	2220      	movs	r2, #32
 8009a72:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	2200      	movs	r2, #0
 8009a7a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8009a7e:	2303      	movs	r3, #3
 8009a80:	e045      	b.n	8009b0e <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	f003 0304 	and.w	r3, r3, #4
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d02e      	beq.n	8009aee <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	69db      	ldr	r3, [r3, #28]
 8009a96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009a9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009a9e:	d126      	bne.n	8009aee <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009aa8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	681a      	ldr	r2, [r3, #0]
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009ab8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	689a      	ldr	r2, [r3, #8]
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	f022 0201 	bic.w	r2, r2, #1
 8009ac8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	2220      	movs	r2, #32
 8009ace:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	2220      	movs	r2, #32
 8009ad6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	2220      	movs	r2, #32
 8009ade:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	2200      	movs	r2, #0
 8009ae6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8009aea:	2303      	movs	r3, #3
 8009aec:	e00f      	b.n	8009b0e <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	69da      	ldr	r2, [r3, #28]
 8009af4:	68bb      	ldr	r3, [r7, #8]
 8009af6:	4013      	ands	r3, r2
 8009af8:	68ba      	ldr	r2, [r7, #8]
 8009afa:	429a      	cmp	r2, r3
 8009afc:	bf0c      	ite	eq
 8009afe:	2301      	moveq	r3, #1
 8009b00:	2300      	movne	r3, #0
 8009b02:	b2db      	uxtb	r3, r3
 8009b04:	461a      	mov	r2, r3
 8009b06:	79fb      	ldrb	r3, [r7, #7]
 8009b08:	429a      	cmp	r2, r3
 8009b0a:	d08d      	beq.n	8009a28 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009b0c:	2300      	movs	r3, #0
}
 8009b0e:	4618      	mov	r0, r3
 8009b10:	3710      	adds	r7, #16
 8009b12:	46bd      	mov	sp, r7
 8009b14:	bd80      	pop	{r7, pc}

08009b16 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009b16:	b480      	push	{r7}
 8009b18:	b085      	sub	sp, #20
 8009b1a:	af00      	add	r7, sp, #0
 8009b1c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009b24:	2b01      	cmp	r3, #1
 8009b26:	d101      	bne.n	8009b2c <HAL_UARTEx_DisableFifoMode+0x16>
 8009b28:	2302      	movs	r3, #2
 8009b2a:	e027      	b.n	8009b7c <HAL_UARTEx_DisableFifoMode+0x66>
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	2201      	movs	r2, #1
 8009b30:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	2224      	movs	r2, #36	; 0x24
 8009b38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	681a      	ldr	r2, [r3, #0]
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	f022 0201 	bic.w	r2, r2, #1
 8009b52:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009b5a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	2200      	movs	r2, #0
 8009b60:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	68fa      	ldr	r2, [r7, #12]
 8009b68:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	2220      	movs	r2, #32
 8009b6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	2200      	movs	r2, #0
 8009b76:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009b7a:	2300      	movs	r3, #0
}
 8009b7c:	4618      	mov	r0, r3
 8009b7e:	3714      	adds	r7, #20
 8009b80:	46bd      	mov	sp, r7
 8009b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b86:	4770      	bx	lr

08009b88 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009b88:	b580      	push	{r7, lr}
 8009b8a:	b084      	sub	sp, #16
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	6078      	str	r0, [r7, #4]
 8009b90:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009b98:	2b01      	cmp	r3, #1
 8009b9a:	d101      	bne.n	8009ba0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009b9c:	2302      	movs	r3, #2
 8009b9e:	e02d      	b.n	8009bfc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	2201      	movs	r2, #1
 8009ba4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	2224      	movs	r2, #36	; 0x24
 8009bac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	681a      	ldr	r2, [r3, #0]
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	f022 0201 	bic.w	r2, r2, #1
 8009bc6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	689b      	ldr	r3, [r3, #8]
 8009bce:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	683a      	ldr	r2, [r7, #0]
 8009bd8:	430a      	orrs	r2, r1
 8009bda:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009bdc:	6878      	ldr	r0, [r7, #4]
 8009bde:	f000 f84f 	bl	8009c80 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	68fa      	ldr	r2, [r7, #12]
 8009be8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	2220      	movs	r2, #32
 8009bee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	2200      	movs	r2, #0
 8009bf6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009bfa:	2300      	movs	r3, #0
}
 8009bfc:	4618      	mov	r0, r3
 8009bfe:	3710      	adds	r7, #16
 8009c00:	46bd      	mov	sp, r7
 8009c02:	bd80      	pop	{r7, pc}

08009c04 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009c04:	b580      	push	{r7, lr}
 8009c06:	b084      	sub	sp, #16
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	6078      	str	r0, [r7, #4]
 8009c0c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009c14:	2b01      	cmp	r3, #1
 8009c16:	d101      	bne.n	8009c1c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009c18:	2302      	movs	r3, #2
 8009c1a:	e02d      	b.n	8009c78 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	2201      	movs	r2, #1
 8009c20:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	2224      	movs	r2, #36	; 0x24
 8009c28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	681a      	ldr	r2, [r3, #0]
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	f022 0201 	bic.w	r2, r2, #1
 8009c42:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	689b      	ldr	r3, [r3, #8]
 8009c4a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	683a      	ldr	r2, [r7, #0]
 8009c54:	430a      	orrs	r2, r1
 8009c56:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009c58:	6878      	ldr	r0, [r7, #4]
 8009c5a:	f000 f811 	bl	8009c80 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	68fa      	ldr	r2, [r7, #12]
 8009c64:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	2220      	movs	r2, #32
 8009c6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	2200      	movs	r2, #0
 8009c72:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009c76:	2300      	movs	r3, #0
}
 8009c78:	4618      	mov	r0, r3
 8009c7a:	3710      	adds	r7, #16
 8009c7c:	46bd      	mov	sp, r7
 8009c7e:	bd80      	pop	{r7, pc}

08009c80 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009c80:	b480      	push	{r7}
 8009c82:	b085      	sub	sp, #20
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d108      	bne.n	8009ca2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	2201      	movs	r2, #1
 8009c94:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	2201      	movs	r2, #1
 8009c9c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009ca0:	e031      	b.n	8009d06 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009ca2:	2310      	movs	r3, #16
 8009ca4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009ca6:	2310      	movs	r3, #16
 8009ca8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	689b      	ldr	r3, [r3, #8]
 8009cb0:	0e5b      	lsrs	r3, r3, #25
 8009cb2:	b2db      	uxtb	r3, r3
 8009cb4:	f003 0307 	and.w	r3, r3, #7
 8009cb8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	689b      	ldr	r3, [r3, #8]
 8009cc0:	0f5b      	lsrs	r3, r3, #29
 8009cc2:	b2db      	uxtb	r3, r3
 8009cc4:	f003 0307 	and.w	r3, r3, #7
 8009cc8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009cca:	7bbb      	ldrb	r3, [r7, #14]
 8009ccc:	7b3a      	ldrb	r2, [r7, #12]
 8009cce:	4911      	ldr	r1, [pc, #68]	; (8009d14 <UARTEx_SetNbDataToProcess+0x94>)
 8009cd0:	5c8a      	ldrb	r2, [r1, r2]
 8009cd2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009cd6:	7b3a      	ldrb	r2, [r7, #12]
 8009cd8:	490f      	ldr	r1, [pc, #60]	; (8009d18 <UARTEx_SetNbDataToProcess+0x98>)
 8009cda:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009cdc:	fb93 f3f2 	sdiv	r3, r3, r2
 8009ce0:	b29a      	uxth	r2, r3
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009ce8:	7bfb      	ldrb	r3, [r7, #15]
 8009cea:	7b7a      	ldrb	r2, [r7, #13]
 8009cec:	4909      	ldr	r1, [pc, #36]	; (8009d14 <UARTEx_SetNbDataToProcess+0x94>)
 8009cee:	5c8a      	ldrb	r2, [r1, r2]
 8009cf0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009cf4:	7b7a      	ldrb	r2, [r7, #13]
 8009cf6:	4908      	ldr	r1, [pc, #32]	; (8009d18 <UARTEx_SetNbDataToProcess+0x98>)
 8009cf8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009cfa:	fb93 f3f2 	sdiv	r3, r3, r2
 8009cfe:	b29a      	uxth	r2, r3
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009d06:	bf00      	nop
 8009d08:	3714      	adds	r7, #20
 8009d0a:	46bd      	mov	sp, r7
 8009d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d10:	4770      	bx	lr
 8009d12:	bf00      	nop
 8009d14:	08027008 	.word	0x08027008
 8009d18:	08027010 	.word	0x08027010

08009d1c <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8009d1c:	b5b0      	push	{r4, r5, r7, lr}
 8009d1e:	b08c      	sub	sp, #48	; 0x30
 8009d20:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8009d22:	2100      	movs	r1, #0
 8009d24:	2000      	movs	r0, #0
 8009d26:	f007 fb13 	bl	8011350 <tcpip_init>
//  ipaddr.addr = 0;
//  netmask.addr = 0;
//  gw.addr = 0;
  /* IP addresses initialization with DHCP (IPv4) */
#if LWIP_DHCP
  ipaddr.addr = 0;
 8009d2a:	4b22      	ldr	r3, [pc, #136]	; (8009db4 <MX_LWIP_Init+0x98>)
 8009d2c:	2200      	movs	r2, #0
 8009d2e:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 8009d30:	4b21      	ldr	r3, [pc, #132]	; (8009db8 <MX_LWIP_Init+0x9c>)
 8009d32:	2200      	movs	r2, #0
 8009d34:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 8009d36:	4b21      	ldr	r3, [pc, #132]	; (8009dbc <MX_LWIP_Init+0xa0>)
 8009d38:	2200      	movs	r2, #0
 8009d3a:	601a      	str	r2, [r3, #0]
  IP_ADDR4(&netmask,NETMASK_ADDR0,NETMASK_ADDR1,NETMASK_ADDR2,NETMASK_ADDR3);
  IP_ADDR4(&gw,GW_ADDR0,GW_ADDR1,GW_ADDR2,GW_ADDR3);
#endif

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8009d3c:	4b20      	ldr	r3, [pc, #128]	; (8009dc0 <MX_LWIP_Init+0xa4>)
 8009d3e:	9302      	str	r3, [sp, #8]
 8009d40:	4b20      	ldr	r3, [pc, #128]	; (8009dc4 <MX_LWIP_Init+0xa8>)
 8009d42:	9301      	str	r3, [sp, #4]
 8009d44:	2300      	movs	r3, #0
 8009d46:	9300      	str	r3, [sp, #0]
 8009d48:	4b1c      	ldr	r3, [pc, #112]	; (8009dbc <MX_LWIP_Init+0xa0>)
 8009d4a:	4a1b      	ldr	r2, [pc, #108]	; (8009db8 <MX_LWIP_Init+0x9c>)
 8009d4c:	4919      	ldr	r1, [pc, #100]	; (8009db4 <MX_LWIP_Init+0x98>)
 8009d4e:	481e      	ldr	r0, [pc, #120]	; (8009dc8 <MX_LWIP_Init+0xac>)
 8009d50:	f008 f980 	bl	8012054 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8009d54:	481c      	ldr	r0, [pc, #112]	; (8009dc8 <MX_LWIP_Init+0xac>)
 8009d56:	f008 fb37 	bl	80123c8 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8009d5a:	4b1b      	ldr	r3, [pc, #108]	; (8009dc8 <MX_LWIP_Init+0xac>)
 8009d5c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8009d60:	089b      	lsrs	r3, r3, #2
 8009d62:	f003 0301 	and.w	r3, r3, #1
 8009d66:	b2db      	uxtb	r3, r3
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d003      	beq.n	8009d74 <MX_LWIP_Init+0x58>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8009d6c:	4816      	ldr	r0, [pc, #88]	; (8009dc8 <MX_LWIP_Init+0xac>)
 8009d6e:	f008 fb3b 	bl	80123e8 <netif_set_up>
 8009d72:	e002      	b.n	8009d7a <MX_LWIP_Init+0x5e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8009d74:	4814      	ldr	r0, [pc, #80]	; (8009dc8 <MX_LWIP_Init+0xac>)
 8009d76:	f008 fba3 	bl	80124c0 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8009d7a:	4914      	ldr	r1, [pc, #80]	; (8009dcc <MX_LWIP_Init+0xb0>)
 8009d7c:	4812      	ldr	r0, [pc, #72]	; (8009dc8 <MX_LWIP_Init+0xac>)
 8009d7e:	f008 fc39 	bl	80125f4 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthLink, ethernet_link_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE *2);
 8009d82:	4b13      	ldr	r3, [pc, #76]	; (8009dd0 <MX_LWIP_Init+0xb4>)
 8009d84:	1d3c      	adds	r4, r7, #4
 8009d86:	461d      	mov	r5, r3
 8009d88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009d8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009d8c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8009d90:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthLink), &gnetif);
 8009d94:	1d3b      	adds	r3, r7, #4
 8009d96:	490c      	ldr	r1, [pc, #48]	; (8009dc8 <MX_LWIP_Init+0xac>)
 8009d98:	4618      	mov	r0, r3
 8009d9a:	f000 fcfe 	bl	800a79a <osThreadCreate>
/* USER CODE END H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

  /* Start DHCP negotiation for a network interface (IPv4) */
//  dhcp_start(&gnetif);
#if LWIP_DHCP
  dhcp_start(&gnetif);
 8009d9e:	480a      	ldr	r0, [pc, #40]	; (8009dc8 <MX_LWIP_Init+0xac>)
 8009da0:	f010 fd84 	bl	801a8ac <dhcp_start>
#endif

/* USER CODE BEGIN 3 */
  ethernet_link_status_updated(&gnetif);
 8009da4:	4808      	ldr	r0, [pc, #32]	; (8009dc8 <MX_LWIP_Init+0xac>)
 8009da6:	f000 f815 	bl	8009dd4 <ethernet_link_status_updated>
/* USER CODE END 3 */
}
 8009daa:	bf00      	nop
 8009dac:	3720      	adds	r7, #32
 8009dae:	46bd      	mov	sp, r7
 8009db0:	bdb0      	pop	{r4, r5, r7, pc}
 8009db2:	bf00      	nop
 8009db4:	24004c64 	.word	0x24004c64
 8009db8:	24004c68 	.word	0x24004c68
 8009dbc:	24004c6c 	.word	0x24004c6c
 8009dc0:	08011261 	.word	0x08011261
 8009dc4:	0800a4e5 	.word	0x0800a4e5
 8009dc8:	24004c2c 	.word	0x24004c2c
 8009dcc:	08009dd5 	.word	0x08009dd5
 8009dd0:	08023304 	.word	0x08023304

08009dd4 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8009dd4:	b580      	push	{r7, lr}
 8009dd6:	b082      	sub	sp, #8
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	6078      	str	r0, [r7, #4]
  if (netif_is_up(netif))
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8009de2:	f003 0301 	and.w	r3, r3, #1
 8009de6:	b2db      	uxtb	r3, r3
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d00b      	beq.n	8009e04 <ethernet_link_status_updated+0x30>
  {
/* USER CODE BEGIN 5 */
	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8009dec:	2201      	movs	r2, #1
 8009dee:	2102      	movs	r1, #2
 8009df0:	480e      	ldr	r0, [pc, #56]	; (8009e2c <ethernet_link_status_updated+0x58>)
 8009df2:	f7fb fb3b 	bl	800546c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8009df6:	2200      	movs	r2, #0
 8009df8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8009dfc:	480c      	ldr	r0, [pc, #48]	; (8009e30 <ethernet_link_status_updated+0x5c>)
 8009dfe:	f7fb fb35 	bl	800546c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
	  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
/* USER CODE END 6 */
  }
}
 8009e02:	e00f      	b.n	8009e24 <ethernet_link_status_updated+0x50>
	  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8009e04:	2200      	movs	r2, #0
 8009e06:	2101      	movs	r1, #1
 8009e08:	4809      	ldr	r0, [pc, #36]	; (8009e30 <ethernet_link_status_updated+0x5c>)
 8009e0a:	f7fb fb2f 	bl	800546c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8009e0e:	2200      	movs	r2, #0
 8009e10:	2102      	movs	r1, #2
 8009e12:	4806      	ldr	r0, [pc, #24]	; (8009e2c <ethernet_link_status_updated+0x58>)
 8009e14:	f7fb fb2a 	bl	800546c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8009e18:	2201      	movs	r2, #1
 8009e1a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8009e1e:	4804      	ldr	r0, [pc, #16]	; (8009e30 <ethernet_link_status_updated+0x5c>)
 8009e20:	f7fb fb24 	bl	800546c <HAL_GPIO_WritePin>
}
 8009e24:	bf00      	nop
 8009e26:	3708      	adds	r7, #8
 8009e28:	46bd      	mov	sp, r7
 8009e2a:	bd80      	pop	{r7, pc}
 8009e2c:	58021000 	.word	0x58021000
 8009e30:	58020400 	.word	0x58020400

08009e34 <HAL_ETH_MspInit>:
/* Private functions ---------------------------------------------------------*/
void pbuf_free_custom(struct pbuf *p);
void Error_Handler(void);

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8009e34:	b580      	push	{r7, lr}
 8009e36:	b08e      	sub	sp, #56	; 0x38
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009e3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009e40:	2200      	movs	r2, #0
 8009e42:	601a      	str	r2, [r3, #0]
 8009e44:	605a      	str	r2, [r3, #4]
 8009e46:	609a      	str	r2, [r3, #8]
 8009e48:	60da      	str	r2, [r3, #12]
 8009e4a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	4a5d      	ldr	r2, [pc, #372]	; (8009fc8 <HAL_ETH_MspInit+0x194>)
 8009e52:	4293      	cmp	r3, r2
 8009e54:	f040 80b3 	bne.w	8009fbe <HAL_ETH_MspInit+0x18a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8009e58:	4b5c      	ldr	r3, [pc, #368]	; (8009fcc <HAL_ETH_MspInit+0x198>)
 8009e5a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8009e5e:	4a5b      	ldr	r2, [pc, #364]	; (8009fcc <HAL_ETH_MspInit+0x198>)
 8009e60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009e64:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8009e68:	4b58      	ldr	r3, [pc, #352]	; (8009fcc <HAL_ETH_MspInit+0x198>)
 8009e6a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8009e6e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009e72:	623b      	str	r3, [r7, #32]
 8009e74:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8009e76:	4b55      	ldr	r3, [pc, #340]	; (8009fcc <HAL_ETH_MspInit+0x198>)
 8009e78:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8009e7c:	4a53      	ldr	r2, [pc, #332]	; (8009fcc <HAL_ETH_MspInit+0x198>)
 8009e7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009e82:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8009e86:	4b51      	ldr	r3, [pc, #324]	; (8009fcc <HAL_ETH_MspInit+0x198>)
 8009e88:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8009e8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009e90:	61fb      	str	r3, [r7, #28]
 8009e92:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8009e94:	4b4d      	ldr	r3, [pc, #308]	; (8009fcc <HAL_ETH_MspInit+0x198>)
 8009e96:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8009e9a:	4a4c      	ldr	r2, [pc, #304]	; (8009fcc <HAL_ETH_MspInit+0x198>)
 8009e9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009ea0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8009ea4:	4b49      	ldr	r3, [pc, #292]	; (8009fcc <HAL_ETH_MspInit+0x198>)
 8009ea6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8009eaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009eae:	61bb      	str	r3, [r7, #24]
 8009eb0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009eb2:	4b46      	ldr	r3, [pc, #280]	; (8009fcc <HAL_ETH_MspInit+0x198>)
 8009eb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009eb8:	4a44      	ldr	r2, [pc, #272]	; (8009fcc <HAL_ETH_MspInit+0x198>)
 8009eba:	f043 0304 	orr.w	r3, r3, #4
 8009ebe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8009ec2:	4b42      	ldr	r3, [pc, #264]	; (8009fcc <HAL_ETH_MspInit+0x198>)
 8009ec4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009ec8:	f003 0304 	and.w	r3, r3, #4
 8009ecc:	617b      	str	r3, [r7, #20]
 8009ece:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009ed0:	4b3e      	ldr	r3, [pc, #248]	; (8009fcc <HAL_ETH_MspInit+0x198>)
 8009ed2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009ed6:	4a3d      	ldr	r2, [pc, #244]	; (8009fcc <HAL_ETH_MspInit+0x198>)
 8009ed8:	f043 0301 	orr.w	r3, r3, #1
 8009edc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8009ee0:	4b3a      	ldr	r3, [pc, #232]	; (8009fcc <HAL_ETH_MspInit+0x198>)
 8009ee2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009ee6:	f003 0301 	and.w	r3, r3, #1
 8009eea:	613b      	str	r3, [r7, #16]
 8009eec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009eee:	4b37      	ldr	r3, [pc, #220]	; (8009fcc <HAL_ETH_MspInit+0x198>)
 8009ef0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009ef4:	4a35      	ldr	r2, [pc, #212]	; (8009fcc <HAL_ETH_MspInit+0x198>)
 8009ef6:	f043 0302 	orr.w	r3, r3, #2
 8009efa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8009efe:	4b33      	ldr	r3, [pc, #204]	; (8009fcc <HAL_ETH_MspInit+0x198>)
 8009f00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009f04:	f003 0302 	and.w	r3, r3, #2
 8009f08:	60fb      	str	r3, [r7, #12]
 8009f0a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8009f0c:	4b2f      	ldr	r3, [pc, #188]	; (8009fcc <HAL_ETH_MspInit+0x198>)
 8009f0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009f12:	4a2e      	ldr	r2, [pc, #184]	; (8009fcc <HAL_ETH_MspInit+0x198>)
 8009f14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f18:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8009f1c:	4b2b      	ldr	r3, [pc, #172]	; (8009fcc <HAL_ETH_MspInit+0x198>)
 8009f1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009f22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f26:	60bb      	str	r3, [r7, #8]
 8009f28:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8009f2a:	2332      	movs	r3, #50	; 0x32
 8009f2c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009f2e:	2302      	movs	r3, #2
 8009f30:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009f32:	2300      	movs	r3, #0
 8009f34:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8009f36:	2302      	movs	r3, #2
 8009f38:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009f3a:	230b      	movs	r3, #11
 8009f3c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009f3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009f42:	4619      	mov	r1, r3
 8009f44:	4822      	ldr	r0, [pc, #136]	; (8009fd0 <HAL_ETH_MspInit+0x19c>)
 8009f46:	f7fb f8c9 	bl	80050dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8009f4a:	2386      	movs	r3, #134	; 0x86
 8009f4c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009f4e:	2302      	movs	r3, #2
 8009f50:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009f52:	2300      	movs	r3, #0
 8009f54:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8009f56:	2302      	movs	r3, #2
 8009f58:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009f5a:	230b      	movs	r3, #11
 8009f5c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009f5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009f62:	4619      	mov	r1, r3
 8009f64:	481b      	ldr	r0, [pc, #108]	; (8009fd4 <HAL_ETH_MspInit+0x1a0>)
 8009f66:	f7fb f8b9 	bl	80050dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8009f6a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009f6e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009f70:	2302      	movs	r3, #2
 8009f72:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009f74:	2300      	movs	r3, #0
 8009f76:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8009f78:	2302      	movs	r3, #2
 8009f7a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009f7c:	230b      	movs	r3, #11
 8009f7e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009f80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009f84:	4619      	mov	r1, r3
 8009f86:	4814      	ldr	r0, [pc, #80]	; (8009fd8 <HAL_ETH_MspInit+0x1a4>)
 8009f88:	f7fb f8a8 	bl	80050dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8009f8c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8009f90:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009f92:	2302      	movs	r3, #2
 8009f94:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009f96:	2300      	movs	r3, #0
 8009f98:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8009f9a:	2302      	movs	r3, #2
 8009f9c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009f9e:	230b      	movs	r3, #11
 8009fa0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8009fa2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009fa6:	4619      	mov	r1, r3
 8009fa8:	480c      	ldr	r0, [pc, #48]	; (8009fdc <HAL_ETH_MspInit+0x1a8>)
 8009faa:	f7fb f897 	bl	80050dc <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8009fae:	2200      	movs	r2, #0
 8009fb0:	2105      	movs	r1, #5
 8009fb2:	203d      	movs	r0, #61	; 0x3d
 8009fb4:	f7f8 fefe 	bl	8002db4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8009fb8:	203d      	movs	r0, #61	; 0x3d
 8009fba:	f7f8 ff15 	bl	8002de8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8009fbe:	bf00      	nop
 8009fc0:	3738      	adds	r7, #56	; 0x38
 8009fc2:	46bd      	mov	sp, r7
 8009fc4:	bd80      	pop	{r7, pc}
 8009fc6:	bf00      	nop
 8009fc8:	40028000 	.word	0x40028000
 8009fcc:	58024400 	.word	0x58024400
 8009fd0:	58020800 	.word	0x58020800
 8009fd4:	58020000 	.word	0x58020000
 8009fd8:	58020400 	.word	0x58020400
 8009fdc:	58021800 	.word	0x58021800

08009fe0 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8009fe0:	b580      	push	{r7, lr}
 8009fe2:	b082      	sub	sp, #8
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 8009fe8:	4b04      	ldr	r3, [pc, #16]	; (8009ffc <HAL_ETH_RxCpltCallback+0x1c>)
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	4618      	mov	r0, r3
 8009fee:	f000 fd5d 	bl	800aaac <osSemaphoreRelease>
}
 8009ff2:	bf00      	nop
 8009ff4:	3708      	adds	r7, #8
 8009ff6:	46bd      	mov	sp, r7
 8009ff8:	bd80      	pop	{r7, pc}
 8009ffa:	bf00      	nop
 8009ffc:	2400074c 	.word	0x2400074c

0800a000 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800a000:	b5b0      	push	{r4, r5, r7, lr}
 800a002:	b0ac      	sub	sp, #176	; 0xb0
 800a004:	af00      	add	r7, sp, #0
 800a006:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 800a008:	2300      	movs	r3, #0
 800a00a:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
  uint32_t idx = 0;
 800a00e:	2300      	movs	r3, #0
 800a010:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  ETH_MACConfigTypeDef MACConf;
  int32_t PHYLinkState;
  uint32_t duplex, speed = 0;
 800a014:	2300      	movs	r3, #0
 800a016:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800a01a:	4b91      	ldr	r3, [pc, #580]	; (800a260 <low_level_init+0x260>)
 800a01c:	4a91      	ldr	r2, [pc, #580]	; (800a264 <low_level_init+0x264>)
 800a01e:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x02;
 800a020:	2302      	movs	r3, #2
 800a022:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  MACAddr[1] = 0x00;
 800a026:	2300      	movs	r3, #0
 800a028:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  MACAddr[2] = 0x00;
 800a02c:	2300      	movs	r3, #0
 800a02e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  MACAddr[3] = 0x00;
 800a032:	2300      	movs	r3, #0
 800a034:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  MACAddr[4] = 0x00;
 800a038:	2300      	movs	r3, #0
 800a03a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  MACAddr[5] = 0x00;
 800a03e:	2300      	movs	r3, #0
 800a040:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  heth.Init.MACAddr = &MACAddr[0];
 800a044:	4a86      	ldr	r2, [pc, #536]	; (800a260 <low_level_init+0x260>)
 800a046:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a04a:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800a04c:	4b84      	ldr	r3, [pc, #528]	; (800a260 <low_level_init+0x260>)
 800a04e:	2201      	movs	r2, #1
 800a050:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800a052:	4b83      	ldr	r3, [pc, #524]	; (800a260 <low_level_init+0x260>)
 800a054:	4a84      	ldr	r2, [pc, #528]	; (800a268 <low_level_init+0x268>)
 800a056:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800a058:	4b81      	ldr	r3, [pc, #516]	; (800a260 <low_level_init+0x260>)
 800a05a:	4a84      	ldr	r2, [pc, #528]	; (800a26c <low_level_init+0x26c>)
 800a05c:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800a05e:	4b80      	ldr	r3, [pc, #512]	; (800a260 <low_level_init+0x260>)
 800a060:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800a064:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800a066:	487e      	ldr	r0, [pc, #504]	; (800a260 <low_level_init+0x260>)
 800a068:	f7f9 f98c 	bl	8003384 <HAL_ETH_Init>
 800a06c:	4603      	mov	r3, r0
 800a06e:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800a072:	2234      	movs	r2, #52	; 0x34
 800a074:	2100      	movs	r1, #0
 800a076:	487e      	ldr	r0, [pc, #504]	; (800a270 <low_level_init+0x270>)
 800a078:	f014 fc76 	bl	801e968 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800a07c:	4b7c      	ldr	r3, [pc, #496]	; (800a270 <low_level_init+0x270>)
 800a07e:	2221      	movs	r2, #33	; 0x21
 800a080:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800a082:	4b7b      	ldr	r3, [pc, #492]	; (800a270 <low_level_init+0x270>)
 800a084:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800a088:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800a08a:	4b79      	ldr	r3, [pc, #484]	; (800a270 <low_level_init+0x270>)
 800a08c:	2200      	movs	r2, #0
 800a08e:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800a090:	4878      	ldr	r0, [pc, #480]	; (800a274 <low_level_init+0x274>)
 800a092:	f007 fe99 	bl	8011dc8 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	2206      	movs	r2, #6
 800a09a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800a09e:	4b70      	ldr	r3, [pc, #448]	; (800a260 <low_level_init+0x260>)
 800a0a0:	685b      	ldr	r3, [r3, #4]
 800a0a2:	781a      	ldrb	r2, [r3, #0]
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800a0aa:	4b6d      	ldr	r3, [pc, #436]	; (800a260 <low_level_init+0x260>)
 800a0ac:	685b      	ldr	r3, [r3, #4]
 800a0ae:	785a      	ldrb	r2, [r3, #1]
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800a0b6:	4b6a      	ldr	r3, [pc, #424]	; (800a260 <low_level_init+0x260>)
 800a0b8:	685b      	ldr	r3, [r3, #4]
 800a0ba:	789a      	ldrb	r2, [r3, #2]
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800a0c2:	4b67      	ldr	r3, [pc, #412]	; (800a260 <low_level_init+0x260>)
 800a0c4:	685b      	ldr	r3, [r3, #4]
 800a0c6:	78da      	ldrb	r2, [r3, #3]
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800a0ce:	4b64      	ldr	r3, [pc, #400]	; (800a260 <low_level_init+0x260>)
 800a0d0:	685b      	ldr	r3, [r3, #4]
 800a0d2:	791a      	ldrb	r2, [r3, #4]
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800a0da:	4b61      	ldr	r3, [pc, #388]	; (800a260 <low_level_init+0x260>)
 800a0dc:	685b      	ldr	r3, [r3, #4]
 800a0de:	795a      	ldrb	r2, [r3, #5]
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800a0ec:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a0f4:	f043 030a 	orr.w	r3, r3, #10
 800a0f8:	b2da      	uxtb	r2, r3
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  for(idx = 0; idx < ETH_RX_DESC_CNT; idx ++)
 800a100:	2300      	movs	r3, #0
 800a102:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a106:	e012      	b.n	800a12e <low_level_init+0x12e>
  {
    HAL_ETH_DescAssignMemory(&heth, idx, Rx_Buff[idx], NULL);
 800a108:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a10c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800a110:	fb02 f303 	mul.w	r3, r2, r3
 800a114:	4a58      	ldr	r2, [pc, #352]	; (800a278 <low_level_init+0x278>)
 800a116:	441a      	add	r2, r3
 800a118:	2300      	movs	r3, #0
 800a11a:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 800a11e:	4850      	ldr	r0, [pc, #320]	; (800a260 <low_level_init+0x260>)
 800a120:	f7f9 fa0a 	bl	8003538 <HAL_ETH_DescAssignMemory>
  for(idx = 0; idx < ETH_RX_DESC_CNT; idx ++)
 800a124:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a128:	3301      	adds	r3, #1
 800a12a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a12e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a132:	2b03      	cmp	r3, #3
 800a134:	d9e8      	bls.n	800a108 <low_level_init+0x108>
  }

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
 800a136:	2300      	movs	r3, #0
 800a138:	62bb      	str	r3, [r7, #40]	; 0x28
 800a13a:	2300      	movs	r3, #0
 800a13c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RxPktSemaphore = osSemaphoreCreate(osSemaphore(SEM) , 1 );
 800a13e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a142:	2101      	movs	r1, #1
 800a144:	4618      	mov	r0, r3
 800a146:	f000 fc31 	bl	800a9ac <osSemaphoreCreate>
 800a14a:	4603      	mov	r3, r0
 800a14c:	4a4b      	ldr	r2, [pc, #300]	; (800a27c <low_level_init+0x27c>)
 800a14e:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 800a150:	4b4b      	ldr	r3, [pc, #300]	; (800a280 <low_level_init+0x280>)
 800a152:	f107 040c 	add.w	r4, r7, #12
 800a156:	461d      	mov	r5, r3
 800a158:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a15a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a15c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a160:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 800a164:	f107 030c 	add.w	r3, r7, #12
 800a168:	6879      	ldr	r1, [r7, #4]
 800a16a:	4618      	mov	r0, r3
 800a16c:	f000 fb15 	bl	800a79a <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800a170:	4944      	ldr	r1, [pc, #272]	; (800a284 <low_level_init+0x284>)
 800a172:	4845      	ldr	r0, [pc, #276]	; (800a288 <low_level_init+0x288>)
 800a174:	f7f8 fb89 	bl	800288a <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 800a178:	4843      	ldr	r0, [pc, #268]	; (800a288 <low_level_init+0x288>)
 800a17a:	f7f8 fbb8 	bl	80028ee <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 800a17e:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 800a182:	2b00      	cmp	r3, #0
 800a184:	d165      	bne.n	800a252 <low_level_init+0x252>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800a186:	4840      	ldr	r0, [pc, #256]	; (800a288 <low_level_init+0x288>)
 800a188:	f7f8 fc59 	bl	8002a3e <LAN8742_GetLinkState>
 800a18c:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 800a190:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a194:	2b01      	cmp	r3, #1
 800a196:	dc06      	bgt.n	800a1a6 <low_level_init+0x1a6>
    {
      netif_set_link_down(netif);
 800a198:	6878      	ldr	r0, [r7, #4]
 800a19a:	f008 f9fb 	bl	8012594 <netif_set_link_down>
      netif_set_down(netif);
 800a19e:	6878      	ldr	r0, [r7, #4]
 800a1a0:	f008 f98e 	bl	80124c0 <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800a1a4:	e057      	b.n	800a256 <low_level_init+0x256>
 800a1a6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a1aa:	3b02      	subs	r3, #2
 800a1ac:	2b03      	cmp	r3, #3
 800a1ae:	d82b      	bhi.n	800a208 <low_level_init+0x208>
 800a1b0:	a201      	add	r2, pc, #4	; (adr r2, 800a1b8 <low_level_init+0x1b8>)
 800a1b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1b6:	bf00      	nop
 800a1b8:	0800a1c9 	.word	0x0800a1c9
 800a1bc:	0800a1db 	.word	0x0800a1db
 800a1c0:	0800a1eb 	.word	0x0800a1eb
 800a1c4:	0800a1fb 	.word	0x0800a1fb
        duplex = ETH_FULLDUPLEX_MODE;
 800a1c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a1cc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_100M;
 800a1d0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a1d4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 800a1d8:	e01f      	b.n	800a21a <low_level_init+0x21a>
        duplex = ETH_HALFDUPLEX_MODE;
 800a1da:	2300      	movs	r3, #0
 800a1dc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_100M;
 800a1e0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a1e4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 800a1e8:	e017      	b.n	800a21a <low_level_init+0x21a>
        duplex = ETH_FULLDUPLEX_MODE;
 800a1ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a1ee:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_10M;
 800a1f2:	2300      	movs	r3, #0
 800a1f4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 800a1f8:	e00f      	b.n	800a21a <low_level_init+0x21a>
        duplex = ETH_HALFDUPLEX_MODE;
 800a1fa:	2300      	movs	r3, #0
 800a1fc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_10M;
 800a200:	2300      	movs	r3, #0
 800a202:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 800a206:	e008      	b.n	800a21a <low_level_init+0x21a>
        duplex = ETH_FULLDUPLEX_MODE;
 800a208:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a20c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_100M;
 800a210:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a214:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 800a218:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 800a21a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a21e:	4619      	mov	r1, r3
 800a220:	480f      	ldr	r0, [pc, #60]	; (800a260 <low_level_init+0x260>)
 800a222:	f7f9 ff5b 	bl	80040dc <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 800a226:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a22a:	653b      	str	r3, [r7, #80]	; 0x50
    MACConf.Speed = speed;
 800a22c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a230:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 800a232:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a236:	4619      	mov	r1, r3
 800a238:	4809      	ldr	r0, [pc, #36]	; (800a260 <low_level_init+0x260>)
 800a23a:	f7fa f923 	bl	8004484 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 800a23e:	4808      	ldr	r0, [pc, #32]	; (800a260 <low_level_init+0x260>)
 800a240:	f7f9 f9bb 	bl	80035ba <HAL_ETH_Start_IT>
    netif_set_up(netif);
 800a244:	6878      	ldr	r0, [r7, #4]
 800a246:	f008 f8cf 	bl	80123e8 <netif_set_up>
    netif_set_link_up(netif);
 800a24a:	6878      	ldr	r0, [r7, #4]
 800a24c:	f008 f96a 	bl	8012524 <netif_set_link_up>
}
 800a250:	e001      	b.n	800a256 <low_level_init+0x256>
    Error_Handler();
 800a252:	f7f7 fff3 	bl	800223c <Error_Handler>
}
 800a256:	bf00      	nop
 800a258:	37b0      	adds	r7, #176	; 0xb0
 800a25a:	46bd      	mov	sp, r7
 800a25c:	bdb0      	pop	{r4, r5, r7, pc}
 800a25e:	bf00      	nop
 800a260:	24004d5c 	.word	0x24004d5c
 800a264:	40028000 	.word	0x40028000
 800a268:	30040060 	.word	0x30040060
 800a26c:	30040000 	.word	0x30040000
 800a270:	24004de4 	.word	0x24004de4
 800a274:	08027018 	.word	0x08027018
 800a278:	30040200 	.word	0x30040200
 800a27c:	2400074c 	.word	0x2400074c
 800a280:	08023328 	.word	0x08023328
 800a284:	240002dc 	.word	0x240002dc
 800a288:	24004d3c 	.word	0x24004d3c

0800a28c <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800a28c:	b580      	push	{r7, lr}
 800a28e:	b092      	sub	sp, #72	; 0x48
 800a290:	af00      	add	r7, sp, #0
 800a292:	6078      	str	r0, [r7, #4]
 800a294:	6039      	str	r1, [r7, #0]
  uint32_t i=0;
 800a296:	2300      	movs	r3, #0
 800a298:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q;
  err_t errval = ERR_OK;
 800a29a:	2300      	movs	r3, #0
 800a29c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT];

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800a2a0:	f107 030c 	add.w	r3, r7, #12
 800a2a4:	2230      	movs	r2, #48	; 0x30
 800a2a6:	2100      	movs	r1, #0
 800a2a8:	4618      	mov	r0, r3
 800a2aa:	f014 fb5d 	bl	801e968 <memset>

  for(q = p; q != NULL; q = q->next)
 800a2ae:	683b      	ldr	r3, [r7, #0]
 800a2b0:	643b      	str	r3, [r7, #64]	; 0x40
 800a2b2:	e049      	b.n	800a348 <low_level_output+0xbc>
  {
    if(i >= ETH_TX_DESC_CNT)
 800a2b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a2b6:	2b03      	cmp	r3, #3
 800a2b8:	d902      	bls.n	800a2c0 <low_level_output+0x34>
      return ERR_IF;
 800a2ba:	f06f 030b 	mvn.w	r3, #11
 800a2be:	e056      	b.n	800a36e <low_level_output+0xe2>

    Txbuffer[i].buffer = q->payload;
 800a2c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a2c2:	6859      	ldr	r1, [r3, #4]
 800a2c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a2c6:	4613      	mov	r3, r2
 800a2c8:	005b      	lsls	r3, r3, #1
 800a2ca:	4413      	add	r3, r2
 800a2cc:	009b      	lsls	r3, r3, #2
 800a2ce:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800a2d2:	4413      	add	r3, r2
 800a2d4:	3b3c      	subs	r3, #60	; 0x3c
 800a2d6:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800a2d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a2da:	895b      	ldrh	r3, [r3, #10]
 800a2dc:	4619      	mov	r1, r3
 800a2de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a2e0:	4613      	mov	r3, r2
 800a2e2:	005b      	lsls	r3, r3, #1
 800a2e4:	4413      	add	r3, r2
 800a2e6:	009b      	lsls	r3, r3, #2
 800a2e8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800a2ec:	4413      	add	r3, r2
 800a2ee:	3b38      	subs	r3, #56	; 0x38
 800a2f0:	6019      	str	r1, [r3, #0]

    if(i>0)
 800a2f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d012      	beq.n	800a31e <low_level_output+0x92>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800a2f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a2fa:	1e5a      	subs	r2, r3, #1
 800a2fc:	f107 000c 	add.w	r0, r7, #12
 800a300:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a302:	460b      	mov	r3, r1
 800a304:	005b      	lsls	r3, r3, #1
 800a306:	440b      	add	r3, r1
 800a308:	009b      	lsls	r3, r3, #2
 800a30a:	18c1      	adds	r1, r0, r3
 800a30c:	4613      	mov	r3, r2
 800a30e:	005b      	lsls	r3, r3, #1
 800a310:	4413      	add	r3, r2
 800a312:	009b      	lsls	r3, r3, #2
 800a314:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800a318:	4413      	add	r3, r2
 800a31a:	3b34      	subs	r3, #52	; 0x34
 800a31c:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800a31e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	2b00      	cmp	r3, #0
 800a324:	d10a      	bne.n	800a33c <low_level_output+0xb0>
    {
      Txbuffer[i].next = NULL;
 800a326:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a328:	4613      	mov	r3, r2
 800a32a:	005b      	lsls	r3, r3, #1
 800a32c:	4413      	add	r3, r2
 800a32e:	009b      	lsls	r3, r3, #2
 800a330:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800a334:	4413      	add	r3, r2
 800a336:	3b34      	subs	r3, #52	; 0x34
 800a338:	2200      	movs	r2, #0
 800a33a:	601a      	str	r2, [r3, #0]
    }

    i++;
 800a33c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a33e:	3301      	adds	r3, #1
 800a340:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 800a342:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	643b      	str	r3, [r7, #64]	; 0x40
 800a348:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d1b2      	bne.n	800a2b4 <low_level_output+0x28>
  }

  TxConfig.Length =  p->tot_len;
 800a34e:	683b      	ldr	r3, [r7, #0]
 800a350:	891b      	ldrh	r3, [r3, #8]
 800a352:	461a      	mov	r2, r3
 800a354:	4b08      	ldr	r3, [pc, #32]	; (800a378 <low_level_output+0xec>)
 800a356:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800a358:	4a07      	ldr	r2, [pc, #28]	; (800a378 <low_level_output+0xec>)
 800a35a:	f107 030c 	add.w	r3, r7, #12
 800a35e:	6093      	str	r3, [r2, #8]

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 800a360:	2214      	movs	r2, #20
 800a362:	4905      	ldr	r1, [pc, #20]	; (800a378 <low_level_output+0xec>)
 800a364:	4805      	ldr	r0, [pc, #20]	; (800a37c <low_level_output+0xf0>)
 800a366:	f7f9 fa27 	bl	80037b8 <HAL_ETH_Transmit>

  return errval;
 800a36a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800a36e:	4618      	mov	r0, r3
 800a370:	3748      	adds	r7, #72	; 0x48
 800a372:	46bd      	mov	sp, r7
 800a374:	bd80      	pop	{r7, pc}
 800a376:	bf00      	nop
 800a378:	24004de4 	.word	0x24004de4
 800a37c:	24004d5c 	.word	0x24004d5c

0800a380 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800a380:	b580      	push	{r7, lr}
 800a382:	b098      	sub	sp, #96	; 0x60
 800a384:	af02      	add	r7, sp, #8
 800a386:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800a388:	2300      	movs	r3, #0
 800a38a:	657b      	str	r3, [r7, #84]	; 0x54
  ETH_BufferTypeDef RxBuff[ETH_RX_DESC_CNT];
  uint32_t framelength = 0, i = 0;
 800a38c:	2300      	movs	r3, #0
 800a38e:	60bb      	str	r3, [r7, #8]
 800a390:	2300      	movs	r3, #0
 800a392:	653b      	str	r3, [r7, #80]	; 0x50
  struct pbuf_custom* custom_pbuf;

  memset(RxBuff, 0 , ETH_RX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800a394:	f107 030c 	add.w	r3, r7, #12
 800a398:	2230      	movs	r2, #48	; 0x30
 800a39a:	2100      	movs	r1, #0
 800a39c:	4618      	mov	r0, r3
 800a39e:	f014 fae3 	bl	801e968 <memset>

  for(i = 0; i < ETH_RX_DESC_CNT -1; i++)
 800a3a2:	2300      	movs	r3, #0
 800a3a4:	653b      	str	r3, [r7, #80]	; 0x50
 800a3a6:	e015      	b.n	800a3d4 <low_level_input+0x54>
  {
    RxBuff[i].next=&RxBuff[i+1];
 800a3a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a3aa:	1c5a      	adds	r2, r3, #1
 800a3ac:	f107 010c 	add.w	r1, r7, #12
 800a3b0:	4613      	mov	r3, r2
 800a3b2:	005b      	lsls	r3, r3, #1
 800a3b4:	4413      	add	r3, r2
 800a3b6:	009b      	lsls	r3, r3, #2
 800a3b8:	4419      	add	r1, r3
 800a3ba:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a3bc:	4613      	mov	r3, r2
 800a3be:	005b      	lsls	r3, r3, #1
 800a3c0:	4413      	add	r3, r2
 800a3c2:	009b      	lsls	r3, r3, #2
 800a3c4:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800a3c8:	4413      	add	r3, r2
 800a3ca:	3b44      	subs	r3, #68	; 0x44
 800a3cc:	6019      	str	r1, [r3, #0]
  for(i = 0; i < ETH_RX_DESC_CNT -1; i++)
 800a3ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a3d0:	3301      	adds	r3, #1
 800a3d2:	653b      	str	r3, [r7, #80]	; 0x50
 800a3d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a3d6:	2b02      	cmp	r3, #2
 800a3d8:	d9e6      	bls.n	800a3a8 <low_level_input+0x28>
  }

  if (HAL_ETH_GetRxDataBuffer(&heth, RxBuff) == HAL_OK)
 800a3da:	f107 030c 	add.w	r3, r7, #12
 800a3de:	4619      	mov	r1, r3
 800a3e0:	4828      	ldr	r0, [pc, #160]	; (800a484 <low_level_input+0x104>)
 800a3e2:	f7f9 fb62 	bl	8003aaa <HAL_ETH_GetRxDataBuffer>
 800a3e6:	4603      	mov	r3, r0
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d145      	bne.n	800a478 <low_level_input+0xf8>
  {
    HAL_ETH_GetRxDataLength(&heth, &framelength);
 800a3ec:	f107 0308 	add.w	r3, r7, #8
 800a3f0:	4619      	mov	r1, r3
 800a3f2:	4824      	ldr	r0, [pc, #144]	; (800a484 <low_level_input+0x104>)
 800a3f4:	f7f9 fbf7 	bl	8003be6 <HAL_ETH_GetRxDataLength>

    /* Build Rx descriptor to be ready for next data reception */
    HAL_ETH_BuildRxDescriptors(&heth);
 800a3f8:	4822      	ldr	r0, [pc, #136]	; (800a484 <low_level_input+0x104>)
 800a3fa:	f7f9 fc27 	bl	8003c4c <HAL_ETH_BuildRxDescriptors>

#if !defined(DUAL_CORE) || defined(CORE_CM7)
    /* Invalidate data cache for ETH Rx Buffers */
    SCB_InvalidateDCache_by_Addr((uint32_t *)RxBuff->buffer, framelength);
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	68ba      	ldr	r2, [r7, #8]
 800a402:	64bb      	str	r3, [r7, #72]	; 0x48
 800a404:	647a      	str	r2, [r7, #68]	; 0x44
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 800a406:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a408:	2b00      	cmp	r3, #0
 800a40a:	dd1d      	ble.n	800a448 <low_level_input+0xc8>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 800a40c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a40e:	f003 021f 	and.w	r2, r3, #31
 800a412:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a414:	4413      	add	r3, r2
 800a416:	643b      	str	r3, [r7, #64]	; 0x40
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 800a418:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a41a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("dsb 0xF":::"memory");
 800a41c:	f3bf 8f4f 	dsb	sy
}
 800a420:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 800a422:	4a19      	ldr	r2, [pc, #100]	; (800a488 <low_level_input+0x108>)
 800a424:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a426:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 800a42a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a42c:	3320      	adds	r3, #32
 800a42e:	63fb      	str	r3, [r7, #60]	; 0x3c
        op_size -= __SCB_DCACHE_LINE_SIZE;
 800a430:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a432:	3b20      	subs	r3, #32
 800a434:	643b      	str	r3, [r7, #64]	; 0x40
      } while ( op_size > 0 );
 800a436:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a438:	2b00      	cmp	r3, #0
 800a43a:	dcf2      	bgt.n	800a422 <low_level_input+0xa2>
  __ASM volatile ("dsb 0xF":::"memory");
 800a43c:	f3bf 8f4f 	dsb	sy
}
 800a440:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800a442:	f3bf 8f6f 	isb	sy
}
 800a446:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 800a448:	bf00      	nop
#endif

    custom_pbuf  = (struct pbuf_custom*)LWIP_MEMPOOL_ALLOC(RX_POOL);
 800a44a:	4810      	ldr	r0, [pc, #64]	; (800a48c <low_level_input+0x10c>)
 800a44c:	f007 fd38 	bl	8011ec0 <memp_malloc_pool>
 800a450:	64f8      	str	r0, [r7, #76]	; 0x4c
    if(custom_pbuf != NULL)
 800a452:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a454:	2b00      	cmp	r3, #0
 800a456:	d00f      	beq.n	800a478 <low_level_input+0xf8>
    {
      custom_pbuf->custom_free_function = pbuf_free_custom;
 800a458:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a45a:	4a0d      	ldr	r2, [pc, #52]	; (800a490 <low_level_input+0x110>)
 800a45c:	611a      	str	r2, [r3, #16]
      p = pbuf_alloced_custom(PBUF_RAW, framelength, PBUF_REF, custom_pbuf, RxBuff->buffer, framelength);
 800a45e:	68bb      	ldr	r3, [r7, #8]
 800a460:	b299      	uxth	r1, r3
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	68ba      	ldr	r2, [r7, #8]
 800a466:	b292      	uxth	r2, r2
 800a468:	9201      	str	r2, [sp, #4]
 800a46a:	9300      	str	r3, [sp, #0]
 800a46c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a46e:	2241      	movs	r2, #65	; 0x41
 800a470:	2000      	movs	r0, #0
 800a472:	f008 fab3 	bl	80129dc <pbuf_alloced_custom>
 800a476:	6578      	str	r0, [r7, #84]	; 0x54
    }
  }

  return p;
 800a478:	6d7b      	ldr	r3, [r7, #84]	; 0x54
}
 800a47a:	4618      	mov	r0, r3
 800a47c:	3758      	adds	r7, #88	; 0x58
 800a47e:	46bd      	mov	sp, r7
 800a480:	bd80      	pop	{r7, pc}
 800a482:	bf00      	nop
 800a484:	24004d5c 	.word	0x24004d5c
 800a488:	e000ed00 	.word	0xe000ed00
 800a48c:	08027018 	.word	0x08027018
 800a490:	0800a541 	.word	0x0800a541

0800a494 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 800a494:	b580      	push	{r7, lr}
 800a496:	b084      	sub	sp, #16
 800a498:	af00      	add	r7, sp, #0
 800a49a:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800a4a0:	4b0f      	ldr	r3, [pc, #60]	; (800a4e0 <ethernetif_input+0x4c>)
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	f04f 31ff 	mov.w	r1, #4294967295
 800a4a8:	4618      	mov	r0, r3
 800a4aa:	f000 fab1 	bl	800aa10 <osSemaphoreWait>
 800a4ae:	4603      	mov	r3, r0
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d1f5      	bne.n	800a4a0 <ethernetif_input+0xc>
    {
      do
      {
        p = low_level_input( netif );
 800a4b4:	68f8      	ldr	r0, [r7, #12]
 800a4b6:	f7ff ff63 	bl	800a380 <low_level_input>
 800a4ba:	60b8      	str	r0, [r7, #8]
        if (p != NULL)
 800a4bc:	68bb      	ldr	r3, [r7, #8]
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d00a      	beq.n	800a4d8 <ethernetif_input+0x44>
        {
          if (netif->input( p, netif) != ERR_OK )
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	691b      	ldr	r3, [r3, #16]
 800a4c6:	68f9      	ldr	r1, [r7, #12]
 800a4c8:	68b8      	ldr	r0, [r7, #8]
 800a4ca:	4798      	blx	r3
 800a4cc:	4603      	mov	r3, r0
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d002      	beq.n	800a4d8 <ethernetif_input+0x44>
          {
            pbuf_free(p);
 800a4d2:	68b8      	ldr	r0, [r7, #8]
 800a4d4:	f008 fc6e 	bl	8012db4 <pbuf_free>
          }
        }
      } while(p!=NULL);
 800a4d8:	68bb      	ldr	r3, [r7, #8]
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d1ea      	bne.n	800a4b4 <ethernetif_input+0x20>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800a4de:	e7df      	b.n	800a4a0 <ethernetif_input+0xc>
 800a4e0:	2400074c 	.word	0x2400074c

0800a4e4 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800a4e4:	b580      	push	{r7, lr}
 800a4e6:	b082      	sub	sp, #8
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d106      	bne.n	800a500 <ethernetif_init+0x1c>
 800a4f2:	4b0e      	ldr	r3, [pc, #56]	; (800a52c <ethernetif_init+0x48>)
 800a4f4:	f44f 7212 	mov.w	r2, #584	; 0x248
 800a4f8:	490d      	ldr	r1, [pc, #52]	; (800a530 <ethernetif_init+0x4c>)
 800a4fa:	480e      	ldr	r0, [pc, #56]	; (800a534 <ethernetif_init+0x50>)
 800a4fc:	f015 f882 	bl	801f604 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	2273      	movs	r2, #115	; 0x73
 800a504:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	2274      	movs	r2, #116	; 0x74
 800a50c:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	4a09      	ldr	r2, [pc, #36]	; (800a538 <ethernetif_init+0x54>)
 800a514:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	4a08      	ldr	r2, [pc, #32]	; (800a53c <ethernetif_init+0x58>)
 800a51a:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800a51c:	6878      	ldr	r0, [r7, #4]
 800a51e:	f7ff fd6f 	bl	800a000 <low_level_init>

  return ERR_OK;
 800a522:	2300      	movs	r3, #0
}
 800a524:	4618      	mov	r0, r3
 800a526:	3708      	adds	r7, #8
 800a528:	46bd      	mov	sp, r7
 800a52a:	bd80      	pop	{r7, pc}
 800a52c:	08023344 	.word	0x08023344
 800a530:	08023360 	.word	0x08023360
 800a534:	08023370 	.word	0x08023370
 800a538:	0801c779 	.word	0x0801c779
 800a53c:	0800a28d 	.word	0x0800a28d

0800a540 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800a540:	b580      	push	{r7, lr}
 800a542:	b084      	sub	sp, #16
 800a544:	af00      	add	r7, sp, #0
 800a546:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	60fb      	str	r3, [r7, #12]

  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800a54c:	68f9      	ldr	r1, [r7, #12]
 800a54e:	4803      	ldr	r0, [pc, #12]	; (800a55c <pbuf_free_custom+0x1c>)
 800a550:	f007 fd2a 	bl	8011fa8 <memp_free_pool>
}
 800a554:	bf00      	nop
 800a556:	3710      	adds	r7, #16
 800a558:	46bd      	mov	sp, r7
 800a55a:	bd80      	pop	{r7, pc}
 800a55c:	08027018 	.word	0x08027018

0800a560 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800a560:	b580      	push	{r7, lr}
 800a562:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800a564:	f7f8 fb42 	bl	8002bec <HAL_GetTick>
 800a568:	4603      	mov	r3, r0
}
 800a56a:	4618      	mov	r0, r3
 800a56c:	bd80      	pop	{r7, pc}
	...

0800a570 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800a570:	b580      	push	{r7, lr}
 800a572:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800a574:	4802      	ldr	r0, [pc, #8]	; (800a580 <ETH_PHY_IO_Init+0x10>)
 800a576:	f7f9 ff9f 	bl	80044b8 <HAL_ETH_SetMDIOClockRange>

  return 0;
 800a57a:	2300      	movs	r3, #0
}
 800a57c:	4618      	mov	r0, r3
 800a57e:	bd80      	pop	{r7, pc}
 800a580:	24004d5c 	.word	0x24004d5c

0800a584 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800a584:	b480      	push	{r7}
 800a586:	af00      	add	r7, sp, #0
  return 0;
 800a588:	2300      	movs	r3, #0
}
 800a58a:	4618      	mov	r0, r3
 800a58c:	46bd      	mov	sp, r7
 800a58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a592:	4770      	bx	lr

0800a594 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800a594:	b580      	push	{r7, lr}
 800a596:	b084      	sub	sp, #16
 800a598:	af00      	add	r7, sp, #0
 800a59a:	60f8      	str	r0, [r7, #12]
 800a59c:	60b9      	str	r1, [r7, #8]
 800a59e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	68ba      	ldr	r2, [r7, #8]
 800a5a4:	68f9      	ldr	r1, [r7, #12]
 800a5a6:	4807      	ldr	r0, [pc, #28]	; (800a5c4 <ETH_PHY_IO_ReadReg+0x30>)
 800a5a8:	f7f9 fcf0 	bl	8003f8c <HAL_ETH_ReadPHYRegister>
 800a5ac:	4603      	mov	r3, r0
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d002      	beq.n	800a5b8 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800a5b2:	f04f 33ff 	mov.w	r3, #4294967295
 800a5b6:	e000      	b.n	800a5ba <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800a5b8:	2300      	movs	r3, #0
}
 800a5ba:	4618      	mov	r0, r3
 800a5bc:	3710      	adds	r7, #16
 800a5be:	46bd      	mov	sp, r7
 800a5c0:	bd80      	pop	{r7, pc}
 800a5c2:	bf00      	nop
 800a5c4:	24004d5c 	.word	0x24004d5c

0800a5c8 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800a5c8:	b580      	push	{r7, lr}
 800a5ca:	b084      	sub	sp, #16
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	60f8      	str	r0, [r7, #12]
 800a5d0:	60b9      	str	r1, [r7, #8]
 800a5d2:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	68ba      	ldr	r2, [r7, #8]
 800a5d8:	68f9      	ldr	r1, [r7, #12]
 800a5da:	4807      	ldr	r0, [pc, #28]	; (800a5f8 <ETH_PHY_IO_WriteReg+0x30>)
 800a5dc:	f7f9 fd2a 	bl	8004034 <HAL_ETH_WritePHYRegister>
 800a5e0:	4603      	mov	r3, r0
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d002      	beq.n	800a5ec <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800a5e6:	f04f 33ff 	mov.w	r3, #4294967295
 800a5ea:	e000      	b.n	800a5ee <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 800a5ec:	2300      	movs	r3, #0
}
 800a5ee:	4618      	mov	r0, r3
 800a5f0:	3710      	adds	r7, #16
 800a5f2:	46bd      	mov	sp, r7
 800a5f4:	bd80      	pop	{r7, pc}
 800a5f6:	bf00      	nop
 800a5f8:	24004d5c 	.word	0x24004d5c

0800a5fc <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800a5fc:	b580      	push	{r7, lr}
 800a5fe:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800a600:	f7f8 faf4 	bl	8002bec <HAL_GetTick>
 800a604:	4603      	mov	r3, r0
}
 800a606:	4618      	mov	r0, r3
 800a608:	bd80      	pop	{r7, pc}
	...

0800a60c <ethernet_link_thread>:
  * @param  argument: netif
  * @retval None
  */

void ethernet_link_thread(void const * argument)
{
 800a60c:	b580      	push	{r7, lr}
 800a60e:	b0a0      	sub	sp, #128	; 0x80
 800a610:	af00      	add	r7, sp, #0
 800a612:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf;
  int32_t PHYLinkState;
  uint32_t linkchanged = 0, speed = 0, duplex =0;
 800a614:	2300      	movs	r3, #0
 800a616:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a618:	2300      	movs	r3, #0
 800a61a:	67bb      	str	r3, [r7, #120]	; 0x78
 800a61c:	2300      	movs	r3, #0
 800a61e:	677b      	str	r3, [r7, #116]	; 0x74

  struct netif *netif = (struct netif *) argument;
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	673b      	str	r3, [r7, #112]	; 0x70

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800a624:	483a      	ldr	r0, [pc, #232]	; (800a710 <ethernet_link_thread+0x104>)
 800a626:	f7f8 fa0a 	bl	8002a3e <LAN8742_GetLinkState>
 800a62a:	66f8      	str	r0, [r7, #108]	; 0x6c

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800a62c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a62e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a632:	089b      	lsrs	r3, r3, #2
 800a634:	f003 0301 	and.w	r3, r3, #1
 800a638:	b2db      	uxtb	r3, r3
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d00c      	beq.n	800a658 <ethernet_link_thread+0x4c>
 800a63e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a640:	2b01      	cmp	r3, #1
 800a642:	dc09      	bgt.n	800a658 <ethernet_link_thread+0x4c>
  {
    HAL_ETH_Stop_IT(&heth);
 800a644:	4833      	ldr	r0, [pc, #204]	; (800a714 <ethernet_link_thread+0x108>)
 800a646:	f7f9 f83d 	bl	80036c4 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 800a64a:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800a64c:	f007 ff38 	bl	80124c0 <netif_set_down>
    netif_set_link_down(netif);
 800a650:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800a652:	f007 ff9f 	bl	8012594 <netif_set_link_down>
 800a656:	e056      	b.n	800a706 <ethernet_link_thread+0xfa>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800a658:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a65a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a65e:	f003 0304 	and.w	r3, r3, #4
 800a662:	2b00      	cmp	r3, #0
 800a664:	d14f      	bne.n	800a706 <ethernet_link_thread+0xfa>
 800a666:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a668:	2b01      	cmp	r3, #1
 800a66a:	dd4c      	ble.n	800a706 <ethernet_link_thread+0xfa>
 800a66c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a66e:	3b02      	subs	r3, #2
 800a670:	2b03      	cmp	r3, #3
 800a672:	d82b      	bhi.n	800a6cc <ethernet_link_thread+0xc0>
 800a674:	a201      	add	r2, pc, #4	; (adr r2, 800a67c <ethernet_link_thread+0x70>)
 800a676:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a67a:	bf00      	nop
 800a67c:	0800a68d 	.word	0x0800a68d
 800a680:	0800a69f 	.word	0x0800a69f
 800a684:	0800a6af 	.word	0x0800a6af
 800a688:	0800a6bf 	.word	0x0800a6bf
  {
    switch (PHYLinkState)
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800a68c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a690:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800a692:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a696:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800a698:	2301      	movs	r3, #1
 800a69a:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800a69c:	e017      	b.n	800a6ce <ethernet_link_thread+0xc2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800a69e:	2300      	movs	r3, #0
 800a6a0:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800a6a2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a6a6:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800a6a8:	2301      	movs	r3, #1
 800a6aa:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800a6ac:	e00f      	b.n	800a6ce <ethernet_link_thread+0xc2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800a6ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a6b2:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800a6b4:	2300      	movs	r3, #0
 800a6b6:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800a6b8:	2301      	movs	r3, #1
 800a6ba:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800a6bc:	e007      	b.n	800a6ce <ethernet_link_thread+0xc2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800a6be:	2300      	movs	r3, #0
 800a6c0:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800a6c2:	2300      	movs	r3, #0
 800a6c4:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800a6c6:	2301      	movs	r3, #1
 800a6c8:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800a6ca:	e000      	b.n	800a6ce <ethernet_link_thread+0xc2>
    default:
      break;
 800a6cc:	bf00      	nop
    }

    if(linkchanged)
 800a6ce:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d018      	beq.n	800a706 <ethernet_link_thread+0xfa>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800a6d4:	f107 0308 	add.w	r3, r7, #8
 800a6d8:	4619      	mov	r1, r3
 800a6da:	480e      	ldr	r0, [pc, #56]	; (800a714 <ethernet_link_thread+0x108>)
 800a6dc:	f7f9 fcfe 	bl	80040dc <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800a6e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a6e2:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 800a6e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a6e6:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800a6e8:	f107 0308 	add.w	r3, r7, #8
 800a6ec:	4619      	mov	r1, r3
 800a6ee:	4809      	ldr	r0, [pc, #36]	; (800a714 <ethernet_link_thread+0x108>)
 800a6f0:	f7f9 fec8 	bl	8004484 <HAL_ETH_SetMACConfig>

      HAL_ETH_Start_IT(&heth);
 800a6f4:	4807      	ldr	r0, [pc, #28]	; (800a714 <ethernet_link_thread+0x108>)
 800a6f6:	f7f8 ff60 	bl	80035ba <HAL_ETH_Start_IT>
      netif_set_up(netif);
 800a6fa:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800a6fc:	f007 fe74 	bl	80123e8 <netif_set_up>
      netif_set_link_up(netif);
 800a700:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800a702:	f007 ff0f 	bl	8012524 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 800a706:	2064      	movs	r0, #100	; 0x64
 800a708:	f000 f89f 	bl	800a84a <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800a70c:	e78a      	b.n	800a624 <ethernet_link_thread+0x18>
 800a70e:	bf00      	nop
 800a710:	24004d3c 	.word	0x24004d3c
 800a714:	24004d5c 	.word	0x24004d5c

0800a718 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800a718:	b480      	push	{r7}
 800a71a:	b085      	sub	sp, #20
 800a71c:	af00      	add	r7, sp, #0
 800a71e:	4603      	mov	r3, r0
 800a720:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800a722:	2300      	movs	r3, #0
 800a724:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800a726:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a72a:	2b84      	cmp	r3, #132	; 0x84
 800a72c:	d005      	beq.n	800a73a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800a72e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	4413      	add	r3, r2
 800a736:	3303      	adds	r3, #3
 800a738:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800a73a:	68fb      	ldr	r3, [r7, #12]
}
 800a73c:	4618      	mov	r0, r3
 800a73e:	3714      	adds	r7, #20
 800a740:	46bd      	mov	sp, r7
 800a742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a746:	4770      	bx	lr

0800a748 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800a748:	b480      	push	{r7}
 800a74a:	b083      	sub	sp, #12
 800a74c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a74e:	f3ef 8305 	mrs	r3, IPSR
 800a752:	607b      	str	r3, [r7, #4]
  return(result);
 800a754:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800a756:	2b00      	cmp	r3, #0
 800a758:	bf14      	ite	ne
 800a75a:	2301      	movne	r3, #1
 800a75c:	2300      	moveq	r3, #0
 800a75e:	b2db      	uxtb	r3, r3
}
 800a760:	4618      	mov	r0, r3
 800a762:	370c      	adds	r7, #12
 800a764:	46bd      	mov	sp, r7
 800a766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a76a:	4770      	bx	lr

0800a76c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800a76c:	b580      	push	{r7, lr}
 800a76e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800a770:	f001 fdc2 	bl	800c2f8 <vTaskStartScheduler>
  
  return osOK;
 800a774:	2300      	movs	r3, #0
}
 800a776:	4618      	mov	r0, r3
 800a778:	bd80      	pop	{r7, pc}

0800a77a <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800a77a:	b580      	push	{r7, lr}
 800a77c:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800a77e:	f7ff ffe3 	bl	800a748 <inHandlerMode>
 800a782:	4603      	mov	r3, r0
 800a784:	2b00      	cmp	r3, #0
 800a786:	d003      	beq.n	800a790 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800a788:	f001 fed0 	bl	800c52c <xTaskGetTickCountFromISR>
 800a78c:	4603      	mov	r3, r0
 800a78e:	e002      	b.n	800a796 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800a790:	f001 febc 	bl	800c50c <xTaskGetTickCount>
 800a794:	4603      	mov	r3, r0
  }
}
 800a796:	4618      	mov	r0, r3
 800a798:	bd80      	pop	{r7, pc}

0800a79a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800a79a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a79c:	b089      	sub	sp, #36	; 0x24
 800a79e:	af04      	add	r7, sp, #16
 800a7a0:	6078      	str	r0, [r7, #4]
 800a7a2:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	695b      	ldr	r3, [r3, #20]
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d020      	beq.n	800a7ee <osThreadCreate+0x54>
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	699b      	ldr	r3, [r3, #24]
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d01c      	beq.n	800a7ee <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	685c      	ldr	r4, [r3, #4]
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	681d      	ldr	r5, [r3, #0]
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	691e      	ldr	r6, [r3, #16]
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800a7c6:	4618      	mov	r0, r3
 800a7c8:	f7ff ffa6 	bl	800a718 <makeFreeRtosPriority>
 800a7cc:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	695b      	ldr	r3, [r3, #20]
 800a7d2:	687a      	ldr	r2, [r7, #4]
 800a7d4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a7d6:	9202      	str	r2, [sp, #8]
 800a7d8:	9301      	str	r3, [sp, #4]
 800a7da:	9100      	str	r1, [sp, #0]
 800a7dc:	683b      	ldr	r3, [r7, #0]
 800a7de:	4632      	mov	r2, r6
 800a7e0:	4629      	mov	r1, r5
 800a7e2:	4620      	mov	r0, r4
 800a7e4:	f001 fb30 	bl	800be48 <xTaskCreateStatic>
 800a7e8:	4603      	mov	r3, r0
 800a7ea:	60fb      	str	r3, [r7, #12]
 800a7ec:	e01c      	b.n	800a828 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	685c      	ldr	r4, [r3, #4]
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a7fa:	b29e      	uxth	r6, r3
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800a802:	4618      	mov	r0, r3
 800a804:	f7ff ff88 	bl	800a718 <makeFreeRtosPriority>
 800a808:	4602      	mov	r2, r0
 800a80a:	f107 030c 	add.w	r3, r7, #12
 800a80e:	9301      	str	r3, [sp, #4]
 800a810:	9200      	str	r2, [sp, #0]
 800a812:	683b      	ldr	r3, [r7, #0]
 800a814:	4632      	mov	r2, r6
 800a816:	4629      	mov	r1, r5
 800a818:	4620      	mov	r0, r4
 800a81a:	f001 fb72 	bl	800bf02 <xTaskCreate>
 800a81e:	4603      	mov	r3, r0
 800a820:	2b01      	cmp	r3, #1
 800a822:	d001      	beq.n	800a828 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800a824:	2300      	movs	r3, #0
 800a826:	e000      	b.n	800a82a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800a828:	68fb      	ldr	r3, [r7, #12]
}
 800a82a:	4618      	mov	r0, r3
 800a82c:	3714      	adds	r7, #20
 800a82e:	46bd      	mov	sp, r7
 800a830:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a832 <osThreadTerminate>:
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadTerminate shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadTerminate (osThreadId thread_id)
{
 800a832:	b580      	push	{r7, lr}
 800a834:	b082      	sub	sp, #8
 800a836:	af00      	add	r7, sp, #0
 800a838:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskDelete == 1)
  vTaskDelete(thread_id);
 800a83a:	6878      	ldr	r0, [r7, #4]
 800a83c:	f001 fc98 	bl	800c170 <vTaskDelete>
  return osOK;
 800a840:	2300      	movs	r3, #0
#else
  return osErrorOS;
#endif
}
 800a842:	4618      	mov	r0, r3
 800a844:	3708      	adds	r7, #8
 800a846:	46bd      	mov	sp, r7
 800a848:	bd80      	pop	{r7, pc}

0800a84a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800a84a:	b580      	push	{r7, lr}
 800a84c:	b084      	sub	sp, #16
 800a84e:	af00      	add	r7, sp, #0
 800a850:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d001      	beq.n	800a860 <osDelay+0x16>
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	e000      	b.n	800a862 <osDelay+0x18>
 800a860:	2301      	movs	r3, #1
 800a862:	4618      	mov	r0, r3
 800a864:	f001 fd14 	bl	800c290 <vTaskDelay>
  
  return osOK;
 800a868:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800a86a:	4618      	mov	r0, r3
 800a86c:	3710      	adds	r7, #16
 800a86e:	46bd      	mov	sp, r7
 800a870:	bd80      	pop	{r7, pc}

0800a872 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800a872:	b580      	push	{r7, lr}
 800a874:	b082      	sub	sp, #8
 800a876:	af00      	add	r7, sp, #0
 800a878:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	685b      	ldr	r3, [r3, #4]
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d007      	beq.n	800a892 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	685b      	ldr	r3, [r3, #4]
 800a886:	4619      	mov	r1, r3
 800a888:	2001      	movs	r0, #1
 800a88a:	f000 fc7e 	bl	800b18a <xQueueCreateMutexStatic>
 800a88e:	4603      	mov	r3, r0
 800a890:	e003      	b.n	800a89a <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800a892:	2001      	movs	r0, #1
 800a894:	f000 fc61 	bl	800b15a <xQueueCreateMutex>
 800a898:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800a89a:	4618      	mov	r0, r3
 800a89c:	3708      	adds	r7, #8
 800a89e:	46bd      	mov	sp, r7
 800a8a0:	bd80      	pop	{r7, pc}
	...

0800a8a4 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800a8a4:	b580      	push	{r7, lr}
 800a8a6:	b084      	sub	sp, #16
 800a8a8:	af00      	add	r7, sp, #0
 800a8aa:	6078      	str	r0, [r7, #4]
 800a8ac:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800a8ae:	2300      	movs	r3, #0
 800a8b0:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d101      	bne.n	800a8bc <osMutexWait+0x18>
    return osErrorParameter;
 800a8b8:	2380      	movs	r3, #128	; 0x80
 800a8ba:	e03a      	b.n	800a932 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 800a8bc:	2300      	movs	r3, #0
 800a8be:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800a8c0:	683b      	ldr	r3, [r7, #0]
 800a8c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8c6:	d103      	bne.n	800a8d0 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 800a8c8:	f04f 33ff 	mov.w	r3, #4294967295
 800a8cc:	60fb      	str	r3, [r7, #12]
 800a8ce:	e009      	b.n	800a8e4 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 800a8d0:	683b      	ldr	r3, [r7, #0]
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d006      	beq.n	800a8e4 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800a8d6:	683b      	ldr	r3, [r7, #0]
 800a8d8:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d101      	bne.n	800a8e4 <osMutexWait+0x40>
      ticks = 1;
 800a8e0:	2301      	movs	r3, #1
 800a8e2:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800a8e4:	f7ff ff30 	bl	800a748 <inHandlerMode>
 800a8e8:	4603      	mov	r3, r0
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d017      	beq.n	800a91e <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800a8ee:	f107 0308 	add.w	r3, r7, #8
 800a8f2:	461a      	mov	r2, r3
 800a8f4:	2100      	movs	r1, #0
 800a8f6:	6878      	ldr	r0, [r7, #4]
 800a8f8:	f001 f874 	bl	800b9e4 <xQueueReceiveFromISR>
 800a8fc:	4603      	mov	r3, r0
 800a8fe:	2b01      	cmp	r3, #1
 800a900:	d001      	beq.n	800a906 <osMutexWait+0x62>
      return osErrorOS;
 800a902:	23ff      	movs	r3, #255	; 0xff
 800a904:	e015      	b.n	800a932 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800a906:	68bb      	ldr	r3, [r7, #8]
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d011      	beq.n	800a930 <osMutexWait+0x8c>
 800a90c:	4b0b      	ldr	r3, [pc, #44]	; (800a93c <osMutexWait+0x98>)
 800a90e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a912:	601a      	str	r2, [r3, #0]
 800a914:	f3bf 8f4f 	dsb	sy
 800a918:	f3bf 8f6f 	isb	sy
 800a91c:	e008      	b.n	800a930 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800a91e:	68f9      	ldr	r1, [r7, #12]
 800a920:	6878      	ldr	r0, [r7, #4]
 800a922:	f000 ff53 	bl	800b7cc <xQueueSemaphoreTake>
 800a926:	4603      	mov	r3, r0
 800a928:	2b01      	cmp	r3, #1
 800a92a:	d001      	beq.n	800a930 <osMutexWait+0x8c>
    return osErrorOS;
 800a92c:	23ff      	movs	r3, #255	; 0xff
 800a92e:	e000      	b.n	800a932 <osMutexWait+0x8e>
  }
  
  return osOK;
 800a930:	2300      	movs	r3, #0
}
 800a932:	4618      	mov	r0, r3
 800a934:	3710      	adds	r7, #16
 800a936:	46bd      	mov	sp, r7
 800a938:	bd80      	pop	{r7, pc}
 800a93a:	bf00      	nop
 800a93c:	e000ed04 	.word	0xe000ed04

0800a940 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800a940:	b580      	push	{r7, lr}
 800a942:	b084      	sub	sp, #16
 800a944:	af00      	add	r7, sp, #0
 800a946:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800a948:	2300      	movs	r3, #0
 800a94a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800a94c:	2300      	movs	r3, #0
 800a94e:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 800a950:	f7ff fefa 	bl	800a748 <inHandlerMode>
 800a954:	4603      	mov	r3, r0
 800a956:	2b00      	cmp	r3, #0
 800a958:	d016      	beq.n	800a988 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800a95a:	f107 0308 	add.w	r3, r7, #8
 800a95e:	4619      	mov	r1, r3
 800a960:	6878      	ldr	r0, [r7, #4]
 800a962:	f000 fdc6 	bl	800b4f2 <xQueueGiveFromISR>
 800a966:	4603      	mov	r3, r0
 800a968:	2b01      	cmp	r3, #1
 800a96a:	d001      	beq.n	800a970 <osMutexRelease+0x30>
      return osErrorOS;
 800a96c:	23ff      	movs	r3, #255	; 0xff
 800a96e:	e017      	b.n	800a9a0 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800a970:	68bb      	ldr	r3, [r7, #8]
 800a972:	2b00      	cmp	r3, #0
 800a974:	d013      	beq.n	800a99e <osMutexRelease+0x5e>
 800a976:	4b0c      	ldr	r3, [pc, #48]	; (800a9a8 <osMutexRelease+0x68>)
 800a978:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a97c:	601a      	str	r2, [r3, #0]
 800a97e:	f3bf 8f4f 	dsb	sy
 800a982:	f3bf 8f6f 	isb	sy
 800a986:	e00a      	b.n	800a99e <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800a988:	2300      	movs	r3, #0
 800a98a:	2200      	movs	r2, #0
 800a98c:	2100      	movs	r1, #0
 800a98e:	6878      	ldr	r0, [r7, #4]
 800a990:	f000 fc16 	bl	800b1c0 <xQueueGenericSend>
 800a994:	4603      	mov	r3, r0
 800a996:	2b01      	cmp	r3, #1
 800a998:	d001      	beq.n	800a99e <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800a99a:	23ff      	movs	r3, #255	; 0xff
 800a99c:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800a99e:	68fb      	ldr	r3, [r7, #12]
}
 800a9a0:	4618      	mov	r0, r3
 800a9a2:	3710      	adds	r7, #16
 800a9a4:	46bd      	mov	sp, r7
 800a9a6:	bd80      	pop	{r7, pc}
 800a9a8:	e000ed04 	.word	0xe000ed04

0800a9ac <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800a9ac:	b580      	push	{r7, lr}
 800a9ae:	b086      	sub	sp, #24
 800a9b0:	af02      	add	r7, sp, #8
 800a9b2:	6078      	str	r0, [r7, #4]
 800a9b4:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	685b      	ldr	r3, [r3, #4]
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d00f      	beq.n	800a9de <osSemaphoreCreate+0x32>
    if (count == 1) {
 800a9be:	683b      	ldr	r3, [r7, #0]
 800a9c0:	2b01      	cmp	r3, #1
 800a9c2:	d10a      	bne.n	800a9da <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	685b      	ldr	r3, [r3, #4]
 800a9c8:	2203      	movs	r2, #3
 800a9ca:	9200      	str	r2, [sp, #0]
 800a9cc:	2200      	movs	r2, #0
 800a9ce:	2100      	movs	r1, #0
 800a9d0:	2001      	movs	r0, #1
 800a9d2:	f000 fad7 	bl	800af84 <xQueueGenericCreateStatic>
 800a9d6:	4603      	mov	r3, r0
 800a9d8:	e016      	b.n	800aa08 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800a9da:	2300      	movs	r3, #0
 800a9dc:	e014      	b.n	800aa08 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800a9de:	683b      	ldr	r3, [r7, #0]
 800a9e0:	2b01      	cmp	r3, #1
 800a9e2:	d110      	bne.n	800aa06 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800a9e4:	2203      	movs	r2, #3
 800a9e6:	2100      	movs	r1, #0
 800a9e8:	2001      	movs	r0, #1
 800a9ea:	f000 fb43 	bl	800b074 <xQueueGenericCreate>
 800a9ee:	60f8      	str	r0, [r7, #12]
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d005      	beq.n	800aa02 <osSemaphoreCreate+0x56>
 800a9f6:	2300      	movs	r3, #0
 800a9f8:	2200      	movs	r2, #0
 800a9fa:	2100      	movs	r1, #0
 800a9fc:	68f8      	ldr	r0, [r7, #12]
 800a9fe:	f000 fbdf 	bl	800b1c0 <xQueueGenericSend>
      return sema;
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	e000      	b.n	800aa08 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800aa06:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800aa08:	4618      	mov	r0, r3
 800aa0a:	3710      	adds	r7, #16
 800aa0c:	46bd      	mov	sp, r7
 800aa0e:	bd80      	pop	{r7, pc}

0800aa10 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800aa10:	b580      	push	{r7, lr}
 800aa12:	b084      	sub	sp, #16
 800aa14:	af00      	add	r7, sp, #0
 800aa16:	6078      	str	r0, [r7, #4]
 800aa18:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800aa1a:	2300      	movs	r3, #0
 800aa1c:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d101      	bne.n	800aa28 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800aa24:	2380      	movs	r3, #128	; 0x80
 800aa26:	e03a      	b.n	800aa9e <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800aa28:	2300      	movs	r3, #0
 800aa2a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800aa2c:	683b      	ldr	r3, [r7, #0]
 800aa2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa32:	d103      	bne.n	800aa3c <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800aa34:	f04f 33ff 	mov.w	r3, #4294967295
 800aa38:	60fb      	str	r3, [r7, #12]
 800aa3a:	e009      	b.n	800aa50 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800aa3c:	683b      	ldr	r3, [r7, #0]
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d006      	beq.n	800aa50 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800aa42:	683b      	ldr	r3, [r7, #0]
 800aa44:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d101      	bne.n	800aa50 <osSemaphoreWait+0x40>
      ticks = 1;
 800aa4c:	2301      	movs	r3, #1
 800aa4e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800aa50:	f7ff fe7a 	bl	800a748 <inHandlerMode>
 800aa54:	4603      	mov	r3, r0
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d017      	beq.n	800aa8a <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800aa5a:	f107 0308 	add.w	r3, r7, #8
 800aa5e:	461a      	mov	r2, r3
 800aa60:	2100      	movs	r1, #0
 800aa62:	6878      	ldr	r0, [r7, #4]
 800aa64:	f000 ffbe 	bl	800b9e4 <xQueueReceiveFromISR>
 800aa68:	4603      	mov	r3, r0
 800aa6a:	2b01      	cmp	r3, #1
 800aa6c:	d001      	beq.n	800aa72 <osSemaphoreWait+0x62>
      return osErrorOS;
 800aa6e:	23ff      	movs	r3, #255	; 0xff
 800aa70:	e015      	b.n	800aa9e <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800aa72:	68bb      	ldr	r3, [r7, #8]
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d011      	beq.n	800aa9c <osSemaphoreWait+0x8c>
 800aa78:	4b0b      	ldr	r3, [pc, #44]	; (800aaa8 <osSemaphoreWait+0x98>)
 800aa7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa7e:	601a      	str	r2, [r3, #0]
 800aa80:	f3bf 8f4f 	dsb	sy
 800aa84:	f3bf 8f6f 	isb	sy
 800aa88:	e008      	b.n	800aa9c <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800aa8a:	68f9      	ldr	r1, [r7, #12]
 800aa8c:	6878      	ldr	r0, [r7, #4]
 800aa8e:	f000 fe9d 	bl	800b7cc <xQueueSemaphoreTake>
 800aa92:	4603      	mov	r3, r0
 800aa94:	2b01      	cmp	r3, #1
 800aa96:	d001      	beq.n	800aa9c <osSemaphoreWait+0x8c>
    return osErrorOS;
 800aa98:	23ff      	movs	r3, #255	; 0xff
 800aa9a:	e000      	b.n	800aa9e <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800aa9c:	2300      	movs	r3, #0
}
 800aa9e:	4618      	mov	r0, r3
 800aaa0:	3710      	adds	r7, #16
 800aaa2:	46bd      	mov	sp, r7
 800aaa4:	bd80      	pop	{r7, pc}
 800aaa6:	bf00      	nop
 800aaa8:	e000ed04 	.word	0xe000ed04

0800aaac <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800aaac:	b580      	push	{r7, lr}
 800aaae:	b084      	sub	sp, #16
 800aab0:	af00      	add	r7, sp, #0
 800aab2:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800aab4:	2300      	movs	r3, #0
 800aab6:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800aab8:	2300      	movs	r3, #0
 800aaba:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800aabc:	f7ff fe44 	bl	800a748 <inHandlerMode>
 800aac0:	4603      	mov	r3, r0
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d016      	beq.n	800aaf4 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800aac6:	f107 0308 	add.w	r3, r7, #8
 800aaca:	4619      	mov	r1, r3
 800aacc:	6878      	ldr	r0, [r7, #4]
 800aace:	f000 fd10 	bl	800b4f2 <xQueueGiveFromISR>
 800aad2:	4603      	mov	r3, r0
 800aad4:	2b01      	cmp	r3, #1
 800aad6:	d001      	beq.n	800aadc <osSemaphoreRelease+0x30>
      return osErrorOS;
 800aad8:	23ff      	movs	r3, #255	; 0xff
 800aada:	e017      	b.n	800ab0c <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800aadc:	68bb      	ldr	r3, [r7, #8]
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d013      	beq.n	800ab0a <osSemaphoreRelease+0x5e>
 800aae2:	4b0c      	ldr	r3, [pc, #48]	; (800ab14 <osSemaphoreRelease+0x68>)
 800aae4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aae8:	601a      	str	r2, [r3, #0]
 800aaea:	f3bf 8f4f 	dsb	sy
 800aaee:	f3bf 8f6f 	isb	sy
 800aaf2:	e00a      	b.n	800ab0a <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800aaf4:	2300      	movs	r3, #0
 800aaf6:	2200      	movs	r2, #0
 800aaf8:	2100      	movs	r1, #0
 800aafa:	6878      	ldr	r0, [r7, #4]
 800aafc:	f000 fb60 	bl	800b1c0 <xQueueGenericSend>
 800ab00:	4603      	mov	r3, r0
 800ab02:	2b01      	cmp	r3, #1
 800ab04:	d001      	beq.n	800ab0a <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800ab06:	23ff      	movs	r3, #255	; 0xff
 800ab08:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800ab0a:	68fb      	ldr	r3, [r7, #12]
}
 800ab0c:	4618      	mov	r0, r3
 800ab0e:	3710      	adds	r7, #16
 800ab10:	46bd      	mov	sp, r7
 800ab12:	bd80      	pop	{r7, pc}
 800ab14:	e000ed04 	.word	0xe000ed04

0800ab18 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 800ab18:	b580      	push	{r7, lr}
 800ab1a:	b082      	sub	sp, #8
 800ab1c:	af00      	add	r7, sp, #0
 800ab1e:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800ab20:	f7ff fe12 	bl	800a748 <inHandlerMode>
 800ab24:	4603      	mov	r3, r0
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d001      	beq.n	800ab2e <osSemaphoreDelete+0x16>
    return osErrorISR;
 800ab2a:	2382      	movs	r3, #130	; 0x82
 800ab2c:	e003      	b.n	800ab36 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 800ab2e:	6878      	ldr	r0, [r7, #4]
 800ab30:	f001 f814 	bl	800bb5c <vQueueDelete>

  return osOK; 
 800ab34:	2300      	movs	r3, #0
}
 800ab36:	4618      	mov	r0, r3
 800ab38:	3708      	adds	r7, #8
 800ab3a:	46bd      	mov	sp, r7
 800ab3c:	bd80      	pop	{r7, pc}

0800ab3e <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800ab3e:	b590      	push	{r4, r7, lr}
 800ab40:	b085      	sub	sp, #20
 800ab42:	af02      	add	r7, sp, #8
 800ab44:	6078      	str	r0, [r7, #4]
 800ab46:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	689b      	ldr	r3, [r3, #8]
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d011      	beq.n	800ab74 <osMessageCreate+0x36>
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	68db      	ldr	r3, [r3, #12]
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d00d      	beq.n	800ab74 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	6818      	ldr	r0, [r3, #0]
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	6859      	ldr	r1, [r3, #4]
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	689a      	ldr	r2, [r3, #8]
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	68db      	ldr	r3, [r3, #12]
 800ab68:	2400      	movs	r4, #0
 800ab6a:	9400      	str	r4, [sp, #0]
 800ab6c:	f000 fa0a 	bl	800af84 <xQueueGenericCreateStatic>
 800ab70:	4603      	mov	r3, r0
 800ab72:	e008      	b.n	800ab86 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	6818      	ldr	r0, [r3, #0]
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	685b      	ldr	r3, [r3, #4]
 800ab7c:	2200      	movs	r2, #0
 800ab7e:	4619      	mov	r1, r3
 800ab80:	f000 fa78 	bl	800b074 <xQueueGenericCreate>
 800ab84:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800ab86:	4618      	mov	r0, r3
 800ab88:	370c      	adds	r7, #12
 800ab8a:	46bd      	mov	sp, r7
 800ab8c:	bd90      	pop	{r4, r7, pc}
	...

0800ab90 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800ab90:	b580      	push	{r7, lr}
 800ab92:	b086      	sub	sp, #24
 800ab94:	af00      	add	r7, sp, #0
 800ab96:	60f8      	str	r0, [r7, #12]
 800ab98:	60b9      	str	r1, [r7, #8]
 800ab9a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800ab9c:	2300      	movs	r3, #0
 800ab9e:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800aba4:	697b      	ldr	r3, [r7, #20]
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d101      	bne.n	800abae <osMessagePut+0x1e>
    ticks = 1;
 800abaa:	2301      	movs	r3, #1
 800abac:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800abae:	f7ff fdcb 	bl	800a748 <inHandlerMode>
 800abb2:	4603      	mov	r3, r0
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d018      	beq.n	800abea <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800abb8:	f107 0210 	add.w	r2, r7, #16
 800abbc:	f107 0108 	add.w	r1, r7, #8
 800abc0:	2300      	movs	r3, #0
 800abc2:	68f8      	ldr	r0, [r7, #12]
 800abc4:	f000 fbfa 	bl	800b3bc <xQueueGenericSendFromISR>
 800abc8:	4603      	mov	r3, r0
 800abca:	2b01      	cmp	r3, #1
 800abcc:	d001      	beq.n	800abd2 <osMessagePut+0x42>
      return osErrorOS;
 800abce:	23ff      	movs	r3, #255	; 0xff
 800abd0:	e018      	b.n	800ac04 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800abd2:	693b      	ldr	r3, [r7, #16]
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d014      	beq.n	800ac02 <osMessagePut+0x72>
 800abd8:	4b0c      	ldr	r3, [pc, #48]	; (800ac0c <osMessagePut+0x7c>)
 800abda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800abde:	601a      	str	r2, [r3, #0]
 800abe0:	f3bf 8f4f 	dsb	sy
 800abe4:	f3bf 8f6f 	isb	sy
 800abe8:	e00b      	b.n	800ac02 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800abea:	f107 0108 	add.w	r1, r7, #8
 800abee:	2300      	movs	r3, #0
 800abf0:	697a      	ldr	r2, [r7, #20]
 800abf2:	68f8      	ldr	r0, [r7, #12]
 800abf4:	f000 fae4 	bl	800b1c0 <xQueueGenericSend>
 800abf8:	4603      	mov	r3, r0
 800abfa:	2b01      	cmp	r3, #1
 800abfc:	d001      	beq.n	800ac02 <osMessagePut+0x72>
      return osErrorOS;
 800abfe:	23ff      	movs	r3, #255	; 0xff
 800ac00:	e000      	b.n	800ac04 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800ac02:	2300      	movs	r3, #0
}
 800ac04:	4618      	mov	r0, r3
 800ac06:	3718      	adds	r7, #24
 800ac08:	46bd      	mov	sp, r7
 800ac0a:	bd80      	pop	{r7, pc}
 800ac0c:	e000ed04 	.word	0xe000ed04

0800ac10 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800ac10:	b590      	push	{r4, r7, lr}
 800ac12:	b08b      	sub	sp, #44	; 0x2c
 800ac14:	af00      	add	r7, sp, #0
 800ac16:	60f8      	str	r0, [r7, #12]
 800ac18:	60b9      	str	r1, [r7, #8]
 800ac1a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800ac1c:	68bb      	ldr	r3, [r7, #8]
 800ac1e:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800ac20:	2300      	movs	r3, #0
 800ac22:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800ac24:	68bb      	ldr	r3, [r7, #8]
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d10a      	bne.n	800ac40 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800ac2a:	2380      	movs	r3, #128	; 0x80
 800ac2c:	617b      	str	r3, [r7, #20]
    return event;
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	461c      	mov	r4, r3
 800ac32:	f107 0314 	add.w	r3, r7, #20
 800ac36:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ac3a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800ac3e:	e054      	b.n	800acea <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800ac40:	2300      	movs	r3, #0
 800ac42:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800ac44:	2300      	movs	r3, #0
 800ac46:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac4e:	d103      	bne.n	800ac58 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800ac50:	f04f 33ff 	mov.w	r3, #4294967295
 800ac54:	627b      	str	r3, [r7, #36]	; 0x24
 800ac56:	e009      	b.n	800ac6c <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d006      	beq.n	800ac6c <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800ac62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d101      	bne.n	800ac6c <osMessageGet+0x5c>
      ticks = 1;
 800ac68:	2301      	movs	r3, #1
 800ac6a:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800ac6c:	f7ff fd6c 	bl	800a748 <inHandlerMode>
 800ac70:	4603      	mov	r3, r0
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d01c      	beq.n	800acb0 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800ac76:	f107 0220 	add.w	r2, r7, #32
 800ac7a:	f107 0314 	add.w	r3, r7, #20
 800ac7e:	3304      	adds	r3, #4
 800ac80:	4619      	mov	r1, r3
 800ac82:	68b8      	ldr	r0, [r7, #8]
 800ac84:	f000 feae 	bl	800b9e4 <xQueueReceiveFromISR>
 800ac88:	4603      	mov	r3, r0
 800ac8a:	2b01      	cmp	r3, #1
 800ac8c:	d102      	bne.n	800ac94 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800ac8e:	2310      	movs	r3, #16
 800ac90:	617b      	str	r3, [r7, #20]
 800ac92:	e001      	b.n	800ac98 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800ac94:	2300      	movs	r3, #0
 800ac96:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800ac98:	6a3b      	ldr	r3, [r7, #32]
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d01d      	beq.n	800acda <osMessageGet+0xca>
 800ac9e:	4b15      	ldr	r3, [pc, #84]	; (800acf4 <osMessageGet+0xe4>)
 800aca0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aca4:	601a      	str	r2, [r3, #0]
 800aca6:	f3bf 8f4f 	dsb	sy
 800acaa:	f3bf 8f6f 	isb	sy
 800acae:	e014      	b.n	800acda <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800acb0:	f107 0314 	add.w	r3, r7, #20
 800acb4:	3304      	adds	r3, #4
 800acb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800acb8:	4619      	mov	r1, r3
 800acba:	68b8      	ldr	r0, [r7, #8]
 800acbc:	f000 fca6 	bl	800b60c <xQueueReceive>
 800acc0:	4603      	mov	r3, r0
 800acc2:	2b01      	cmp	r3, #1
 800acc4:	d102      	bne.n	800accc <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800acc6:	2310      	movs	r3, #16
 800acc8:	617b      	str	r3, [r7, #20]
 800acca:	e006      	b.n	800acda <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800accc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d101      	bne.n	800acd6 <osMessageGet+0xc6>
 800acd2:	2300      	movs	r3, #0
 800acd4:	e000      	b.n	800acd8 <osMessageGet+0xc8>
 800acd6:	2340      	movs	r3, #64	; 0x40
 800acd8:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	461c      	mov	r4, r3
 800acde:	f107 0314 	add.w	r3, r7, #20
 800ace2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ace6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800acea:	68f8      	ldr	r0, [r7, #12]
 800acec:	372c      	adds	r7, #44	; 0x2c
 800acee:	46bd      	mov	sp, r7
 800acf0:	bd90      	pop	{r4, r7, pc}
 800acf2:	bf00      	nop
 800acf4:	e000ed04 	.word	0xe000ed04

0800acf8 <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 800acf8:	b580      	push	{r7, lr}
 800acfa:	b082      	sub	sp, #8
 800acfc:	af00      	add	r7, sp, #0
 800acfe:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800ad00:	f7ff fd22 	bl	800a748 <inHandlerMode>
 800ad04:	4603      	mov	r3, r0
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d004      	beq.n	800ad14 <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 800ad0a:	6878      	ldr	r0, [r7, #4]
 800ad0c:	f000 ff08 	bl	800bb20 <uxQueueMessagesWaitingFromISR>
 800ad10:	4603      	mov	r3, r0
 800ad12:	e003      	b.n	800ad1c <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 800ad14:	6878      	ldr	r0, [r7, #4]
 800ad16:	f000 fee5 	bl	800bae4 <uxQueueMessagesWaiting>
 800ad1a:	4603      	mov	r3, r0
  }
}
 800ad1c:	4618      	mov	r0, r3
 800ad1e:	3708      	adds	r7, #8
 800ad20:	46bd      	mov	sp, r7
 800ad22:	bd80      	pop	{r7, pc}

0800ad24 <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 800ad24:	b580      	push	{r7, lr}
 800ad26:	b082      	sub	sp, #8
 800ad28:	af00      	add	r7, sp, #0
 800ad2a:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800ad2c:	f7ff fd0c 	bl	800a748 <inHandlerMode>
 800ad30:	4603      	mov	r3, r0
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d001      	beq.n	800ad3a <osMessageDelete+0x16>
    return osErrorISR;
 800ad36:	2382      	movs	r3, #130	; 0x82
 800ad38:	e003      	b.n	800ad42 <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 800ad3a:	6878      	ldr	r0, [r7, #4]
 800ad3c:	f000 ff0e 	bl	800bb5c <vQueueDelete>

  return osOK; 
 800ad40:	2300      	movs	r3, #0
}
 800ad42:	4618      	mov	r0, r3
 800ad44:	3708      	adds	r7, #8
 800ad46:	46bd      	mov	sp, r7
 800ad48:	bd80      	pop	{r7, pc}

0800ad4a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800ad4a:	b480      	push	{r7}
 800ad4c:	b083      	sub	sp, #12
 800ad4e:	af00      	add	r7, sp, #0
 800ad50:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	f103 0208 	add.w	r2, r3, #8
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	f04f 32ff 	mov.w	r2, #4294967295
 800ad62:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	f103 0208 	add.w	r2, r3, #8
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	f103 0208 	add.w	r2, r3, #8
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	2200      	movs	r2, #0
 800ad7c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800ad7e:	bf00      	nop
 800ad80:	370c      	adds	r7, #12
 800ad82:	46bd      	mov	sp, r7
 800ad84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad88:	4770      	bx	lr

0800ad8a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ad8a:	b480      	push	{r7}
 800ad8c:	b083      	sub	sp, #12
 800ad8e:	af00      	add	r7, sp, #0
 800ad90:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	2200      	movs	r2, #0
 800ad96:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ad98:	bf00      	nop
 800ad9a:	370c      	adds	r7, #12
 800ad9c:	46bd      	mov	sp, r7
 800ad9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada2:	4770      	bx	lr

0800ada4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ada4:	b480      	push	{r7}
 800ada6:	b085      	sub	sp, #20
 800ada8:	af00      	add	r7, sp, #0
 800adaa:	6078      	str	r0, [r7, #4]
 800adac:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	685b      	ldr	r3, [r3, #4]
 800adb2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800adb4:	683b      	ldr	r3, [r7, #0]
 800adb6:	68fa      	ldr	r2, [r7, #12]
 800adb8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	689a      	ldr	r2, [r3, #8]
 800adbe:	683b      	ldr	r3, [r7, #0]
 800adc0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	689b      	ldr	r3, [r3, #8]
 800adc6:	683a      	ldr	r2, [r7, #0]
 800adc8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	683a      	ldr	r2, [r7, #0]
 800adce:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800add0:	683b      	ldr	r3, [r7, #0]
 800add2:	687a      	ldr	r2, [r7, #4]
 800add4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	1c5a      	adds	r2, r3, #1
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	601a      	str	r2, [r3, #0]
}
 800ade0:	bf00      	nop
 800ade2:	3714      	adds	r7, #20
 800ade4:	46bd      	mov	sp, r7
 800ade6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adea:	4770      	bx	lr

0800adec <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800adec:	b480      	push	{r7}
 800adee:	b085      	sub	sp, #20
 800adf0:	af00      	add	r7, sp, #0
 800adf2:	6078      	str	r0, [r7, #4]
 800adf4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800adf6:	683b      	ldr	r3, [r7, #0]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800adfc:	68bb      	ldr	r3, [r7, #8]
 800adfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae02:	d103      	bne.n	800ae0c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	691b      	ldr	r3, [r3, #16]
 800ae08:	60fb      	str	r3, [r7, #12]
 800ae0a:	e00c      	b.n	800ae26 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	3308      	adds	r3, #8
 800ae10:	60fb      	str	r3, [r7, #12]
 800ae12:	e002      	b.n	800ae1a <vListInsert+0x2e>
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	685b      	ldr	r3, [r3, #4]
 800ae18:	60fb      	str	r3, [r7, #12]
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	685b      	ldr	r3, [r3, #4]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	68ba      	ldr	r2, [r7, #8]
 800ae22:	429a      	cmp	r2, r3
 800ae24:	d2f6      	bcs.n	800ae14 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	685a      	ldr	r2, [r3, #4]
 800ae2a:	683b      	ldr	r3, [r7, #0]
 800ae2c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ae2e:	683b      	ldr	r3, [r7, #0]
 800ae30:	685b      	ldr	r3, [r3, #4]
 800ae32:	683a      	ldr	r2, [r7, #0]
 800ae34:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ae36:	683b      	ldr	r3, [r7, #0]
 800ae38:	68fa      	ldr	r2, [r7, #12]
 800ae3a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	683a      	ldr	r2, [r7, #0]
 800ae40:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800ae42:	683b      	ldr	r3, [r7, #0]
 800ae44:	687a      	ldr	r2, [r7, #4]
 800ae46:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	1c5a      	adds	r2, r3, #1
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	601a      	str	r2, [r3, #0]
}
 800ae52:	bf00      	nop
 800ae54:	3714      	adds	r7, #20
 800ae56:	46bd      	mov	sp, r7
 800ae58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae5c:	4770      	bx	lr

0800ae5e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ae5e:	b480      	push	{r7}
 800ae60:	b085      	sub	sp, #20
 800ae62:	af00      	add	r7, sp, #0
 800ae64:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	691b      	ldr	r3, [r3, #16]
 800ae6a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	685b      	ldr	r3, [r3, #4]
 800ae70:	687a      	ldr	r2, [r7, #4]
 800ae72:	6892      	ldr	r2, [r2, #8]
 800ae74:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	689b      	ldr	r3, [r3, #8]
 800ae7a:	687a      	ldr	r2, [r7, #4]
 800ae7c:	6852      	ldr	r2, [r2, #4]
 800ae7e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	685b      	ldr	r3, [r3, #4]
 800ae84:	687a      	ldr	r2, [r7, #4]
 800ae86:	429a      	cmp	r2, r3
 800ae88:	d103      	bne.n	800ae92 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	689a      	ldr	r2, [r3, #8]
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	2200      	movs	r2, #0
 800ae96:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	1e5a      	subs	r2, r3, #1
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	681b      	ldr	r3, [r3, #0]
}
 800aea6:	4618      	mov	r0, r3
 800aea8:	3714      	adds	r7, #20
 800aeaa:	46bd      	mov	sp, r7
 800aeac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeb0:	4770      	bx	lr
	...

0800aeb4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800aeb4:	b580      	push	{r7, lr}
 800aeb6:	b084      	sub	sp, #16
 800aeb8:	af00      	add	r7, sp, #0
 800aeba:	6078      	str	r0, [r7, #4]
 800aebc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d10a      	bne.n	800aede <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800aec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aecc:	f383 8811 	msr	BASEPRI, r3
 800aed0:	f3bf 8f6f 	isb	sy
 800aed4:	f3bf 8f4f 	dsb	sy
 800aed8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800aeda:	bf00      	nop
 800aedc:	e7fe      	b.n	800aedc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800aede:	f002 f979 	bl	800d1d4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	681a      	ldr	r2, [r3, #0]
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aeea:	68f9      	ldr	r1, [r7, #12]
 800aeec:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800aeee:	fb01 f303 	mul.w	r3, r1, r3
 800aef2:	441a      	add	r2, r3
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	2200      	movs	r2, #0
 800aefc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	681a      	ldr	r2, [r3, #0]
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	681a      	ldr	r2, [r3, #0]
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af0e:	3b01      	subs	r3, #1
 800af10:	68f9      	ldr	r1, [r7, #12]
 800af12:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800af14:	fb01 f303 	mul.w	r3, r1, r3
 800af18:	441a      	add	r2, r3
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	22ff      	movs	r2, #255	; 0xff
 800af22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	22ff      	movs	r2, #255	; 0xff
 800af2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800af2e:	683b      	ldr	r3, [r7, #0]
 800af30:	2b00      	cmp	r3, #0
 800af32:	d114      	bne.n	800af5e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	691b      	ldr	r3, [r3, #16]
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d01a      	beq.n	800af72 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	3310      	adds	r3, #16
 800af40:	4618      	mov	r0, r3
 800af42:	f001 fc3d 	bl	800c7c0 <xTaskRemoveFromEventList>
 800af46:	4603      	mov	r3, r0
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d012      	beq.n	800af72 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800af4c:	4b0c      	ldr	r3, [pc, #48]	; (800af80 <xQueueGenericReset+0xcc>)
 800af4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af52:	601a      	str	r2, [r3, #0]
 800af54:	f3bf 8f4f 	dsb	sy
 800af58:	f3bf 8f6f 	isb	sy
 800af5c:	e009      	b.n	800af72 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	3310      	adds	r3, #16
 800af62:	4618      	mov	r0, r3
 800af64:	f7ff fef1 	bl	800ad4a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	3324      	adds	r3, #36	; 0x24
 800af6c:	4618      	mov	r0, r3
 800af6e:	f7ff feec 	bl	800ad4a <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800af72:	f002 f95f 	bl	800d234 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800af76:	2301      	movs	r3, #1
}
 800af78:	4618      	mov	r0, r3
 800af7a:	3710      	adds	r7, #16
 800af7c:	46bd      	mov	sp, r7
 800af7e:	bd80      	pop	{r7, pc}
 800af80:	e000ed04 	.word	0xe000ed04

0800af84 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800af84:	b580      	push	{r7, lr}
 800af86:	b08e      	sub	sp, #56	; 0x38
 800af88:	af02      	add	r7, sp, #8
 800af8a:	60f8      	str	r0, [r7, #12]
 800af8c:	60b9      	str	r1, [r7, #8]
 800af8e:	607a      	str	r2, [r7, #4]
 800af90:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	2b00      	cmp	r3, #0
 800af96:	d10a      	bne.n	800afae <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800af98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af9c:	f383 8811 	msr	BASEPRI, r3
 800afa0:	f3bf 8f6f 	isb	sy
 800afa4:	f3bf 8f4f 	dsb	sy
 800afa8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800afaa:	bf00      	nop
 800afac:	e7fe      	b.n	800afac <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800afae:	683b      	ldr	r3, [r7, #0]
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d10a      	bne.n	800afca <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800afb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afb8:	f383 8811 	msr	BASEPRI, r3
 800afbc:	f3bf 8f6f 	isb	sy
 800afc0:	f3bf 8f4f 	dsb	sy
 800afc4:	627b      	str	r3, [r7, #36]	; 0x24
}
 800afc6:	bf00      	nop
 800afc8:	e7fe      	b.n	800afc8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d002      	beq.n	800afd6 <xQueueGenericCreateStatic+0x52>
 800afd0:	68bb      	ldr	r3, [r7, #8]
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d001      	beq.n	800afda <xQueueGenericCreateStatic+0x56>
 800afd6:	2301      	movs	r3, #1
 800afd8:	e000      	b.n	800afdc <xQueueGenericCreateStatic+0x58>
 800afda:	2300      	movs	r3, #0
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d10a      	bne.n	800aff6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800afe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afe4:	f383 8811 	msr	BASEPRI, r3
 800afe8:	f3bf 8f6f 	isb	sy
 800afec:	f3bf 8f4f 	dsb	sy
 800aff0:	623b      	str	r3, [r7, #32]
}
 800aff2:	bf00      	nop
 800aff4:	e7fe      	b.n	800aff4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d102      	bne.n	800b002 <xQueueGenericCreateStatic+0x7e>
 800affc:	68bb      	ldr	r3, [r7, #8]
 800affe:	2b00      	cmp	r3, #0
 800b000:	d101      	bne.n	800b006 <xQueueGenericCreateStatic+0x82>
 800b002:	2301      	movs	r3, #1
 800b004:	e000      	b.n	800b008 <xQueueGenericCreateStatic+0x84>
 800b006:	2300      	movs	r3, #0
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d10a      	bne.n	800b022 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800b00c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b010:	f383 8811 	msr	BASEPRI, r3
 800b014:	f3bf 8f6f 	isb	sy
 800b018:	f3bf 8f4f 	dsb	sy
 800b01c:	61fb      	str	r3, [r7, #28]
}
 800b01e:	bf00      	nop
 800b020:	e7fe      	b.n	800b020 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b022:	2348      	movs	r3, #72	; 0x48
 800b024:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b026:	697b      	ldr	r3, [r7, #20]
 800b028:	2b48      	cmp	r3, #72	; 0x48
 800b02a:	d00a      	beq.n	800b042 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800b02c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b030:	f383 8811 	msr	BASEPRI, r3
 800b034:	f3bf 8f6f 	isb	sy
 800b038:	f3bf 8f4f 	dsb	sy
 800b03c:	61bb      	str	r3, [r7, #24]
}
 800b03e:	bf00      	nop
 800b040:	e7fe      	b.n	800b040 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b042:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b044:	683b      	ldr	r3, [r7, #0]
 800b046:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800b048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d00d      	beq.n	800b06a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b04e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b050:	2201      	movs	r2, #1
 800b052:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b056:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800b05a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b05c:	9300      	str	r3, [sp, #0]
 800b05e:	4613      	mov	r3, r2
 800b060:	687a      	ldr	r2, [r7, #4]
 800b062:	68b9      	ldr	r1, [r7, #8]
 800b064:	68f8      	ldr	r0, [r7, #12]
 800b066:	f000 f83f 	bl	800b0e8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b06a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800b06c:	4618      	mov	r0, r3
 800b06e:	3730      	adds	r7, #48	; 0x30
 800b070:	46bd      	mov	sp, r7
 800b072:	bd80      	pop	{r7, pc}

0800b074 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b074:	b580      	push	{r7, lr}
 800b076:	b08a      	sub	sp, #40	; 0x28
 800b078:	af02      	add	r7, sp, #8
 800b07a:	60f8      	str	r0, [r7, #12]
 800b07c:	60b9      	str	r1, [r7, #8]
 800b07e:	4613      	mov	r3, r2
 800b080:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	2b00      	cmp	r3, #0
 800b086:	d10a      	bne.n	800b09e <xQueueGenericCreate+0x2a>
	__asm volatile
 800b088:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b08c:	f383 8811 	msr	BASEPRI, r3
 800b090:	f3bf 8f6f 	isb	sy
 800b094:	f3bf 8f4f 	dsb	sy
 800b098:	613b      	str	r3, [r7, #16]
}
 800b09a:	bf00      	nop
 800b09c:	e7fe      	b.n	800b09c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	68ba      	ldr	r2, [r7, #8]
 800b0a2:	fb02 f303 	mul.w	r3, r2, r3
 800b0a6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b0a8:	69fb      	ldr	r3, [r7, #28]
 800b0aa:	3348      	adds	r3, #72	; 0x48
 800b0ac:	4618      	mov	r0, r3
 800b0ae:	f002 f9b3 	bl	800d418 <pvPortMalloc>
 800b0b2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800b0b4:	69bb      	ldr	r3, [r7, #24]
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d011      	beq.n	800b0de <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800b0ba:	69bb      	ldr	r3, [r7, #24]
 800b0bc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b0be:	697b      	ldr	r3, [r7, #20]
 800b0c0:	3348      	adds	r3, #72	; 0x48
 800b0c2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b0c4:	69bb      	ldr	r3, [r7, #24]
 800b0c6:	2200      	movs	r2, #0
 800b0c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b0cc:	79fa      	ldrb	r2, [r7, #7]
 800b0ce:	69bb      	ldr	r3, [r7, #24]
 800b0d0:	9300      	str	r3, [sp, #0]
 800b0d2:	4613      	mov	r3, r2
 800b0d4:	697a      	ldr	r2, [r7, #20]
 800b0d6:	68b9      	ldr	r1, [r7, #8]
 800b0d8:	68f8      	ldr	r0, [r7, #12]
 800b0da:	f000 f805 	bl	800b0e8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b0de:	69bb      	ldr	r3, [r7, #24]
	}
 800b0e0:	4618      	mov	r0, r3
 800b0e2:	3720      	adds	r7, #32
 800b0e4:	46bd      	mov	sp, r7
 800b0e6:	bd80      	pop	{r7, pc}

0800b0e8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b0e8:	b580      	push	{r7, lr}
 800b0ea:	b084      	sub	sp, #16
 800b0ec:	af00      	add	r7, sp, #0
 800b0ee:	60f8      	str	r0, [r7, #12]
 800b0f0:	60b9      	str	r1, [r7, #8]
 800b0f2:	607a      	str	r2, [r7, #4]
 800b0f4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b0f6:	68bb      	ldr	r3, [r7, #8]
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d103      	bne.n	800b104 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b0fc:	69bb      	ldr	r3, [r7, #24]
 800b0fe:	69ba      	ldr	r2, [r7, #24]
 800b100:	601a      	str	r2, [r3, #0]
 800b102:	e002      	b.n	800b10a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b104:	69bb      	ldr	r3, [r7, #24]
 800b106:	687a      	ldr	r2, [r7, #4]
 800b108:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b10a:	69bb      	ldr	r3, [r7, #24]
 800b10c:	68fa      	ldr	r2, [r7, #12]
 800b10e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b110:	69bb      	ldr	r3, [r7, #24]
 800b112:	68ba      	ldr	r2, [r7, #8]
 800b114:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b116:	2101      	movs	r1, #1
 800b118:	69b8      	ldr	r0, [r7, #24]
 800b11a:	f7ff fecb 	bl	800aeb4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b11e:	bf00      	nop
 800b120:	3710      	adds	r7, #16
 800b122:	46bd      	mov	sp, r7
 800b124:	bd80      	pop	{r7, pc}

0800b126 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800b126:	b580      	push	{r7, lr}
 800b128:	b082      	sub	sp, #8
 800b12a:	af00      	add	r7, sp, #0
 800b12c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	2b00      	cmp	r3, #0
 800b132:	d00e      	beq.n	800b152 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	2200      	movs	r2, #0
 800b138:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	2200      	movs	r2, #0
 800b13e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	2200      	movs	r2, #0
 800b144:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800b146:	2300      	movs	r3, #0
 800b148:	2200      	movs	r2, #0
 800b14a:	2100      	movs	r1, #0
 800b14c:	6878      	ldr	r0, [r7, #4]
 800b14e:	f000 f837 	bl	800b1c0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800b152:	bf00      	nop
 800b154:	3708      	adds	r7, #8
 800b156:	46bd      	mov	sp, r7
 800b158:	bd80      	pop	{r7, pc}

0800b15a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800b15a:	b580      	push	{r7, lr}
 800b15c:	b086      	sub	sp, #24
 800b15e:	af00      	add	r7, sp, #0
 800b160:	4603      	mov	r3, r0
 800b162:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800b164:	2301      	movs	r3, #1
 800b166:	617b      	str	r3, [r7, #20]
 800b168:	2300      	movs	r3, #0
 800b16a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800b16c:	79fb      	ldrb	r3, [r7, #7]
 800b16e:	461a      	mov	r2, r3
 800b170:	6939      	ldr	r1, [r7, #16]
 800b172:	6978      	ldr	r0, [r7, #20]
 800b174:	f7ff ff7e 	bl	800b074 <xQueueGenericCreate>
 800b178:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800b17a:	68f8      	ldr	r0, [r7, #12]
 800b17c:	f7ff ffd3 	bl	800b126 <prvInitialiseMutex>

		return xNewQueue;
 800b180:	68fb      	ldr	r3, [r7, #12]
	}
 800b182:	4618      	mov	r0, r3
 800b184:	3718      	adds	r7, #24
 800b186:	46bd      	mov	sp, r7
 800b188:	bd80      	pop	{r7, pc}

0800b18a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800b18a:	b580      	push	{r7, lr}
 800b18c:	b088      	sub	sp, #32
 800b18e:	af02      	add	r7, sp, #8
 800b190:	4603      	mov	r3, r0
 800b192:	6039      	str	r1, [r7, #0]
 800b194:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800b196:	2301      	movs	r3, #1
 800b198:	617b      	str	r3, [r7, #20]
 800b19a:	2300      	movs	r3, #0
 800b19c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800b19e:	79fb      	ldrb	r3, [r7, #7]
 800b1a0:	9300      	str	r3, [sp, #0]
 800b1a2:	683b      	ldr	r3, [r7, #0]
 800b1a4:	2200      	movs	r2, #0
 800b1a6:	6939      	ldr	r1, [r7, #16]
 800b1a8:	6978      	ldr	r0, [r7, #20]
 800b1aa:	f7ff feeb 	bl	800af84 <xQueueGenericCreateStatic>
 800b1ae:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800b1b0:	68f8      	ldr	r0, [r7, #12]
 800b1b2:	f7ff ffb8 	bl	800b126 <prvInitialiseMutex>

		return xNewQueue;
 800b1b6:	68fb      	ldr	r3, [r7, #12]
	}
 800b1b8:	4618      	mov	r0, r3
 800b1ba:	3718      	adds	r7, #24
 800b1bc:	46bd      	mov	sp, r7
 800b1be:	bd80      	pop	{r7, pc}

0800b1c0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b1c0:	b580      	push	{r7, lr}
 800b1c2:	b08e      	sub	sp, #56	; 0x38
 800b1c4:	af00      	add	r7, sp, #0
 800b1c6:	60f8      	str	r0, [r7, #12]
 800b1c8:	60b9      	str	r1, [r7, #8]
 800b1ca:	607a      	str	r2, [r7, #4]
 800b1cc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b1ce:	2300      	movs	r3, #0
 800b1d0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b1d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d10a      	bne.n	800b1f2 <xQueueGenericSend+0x32>
	__asm volatile
 800b1dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1e0:	f383 8811 	msr	BASEPRI, r3
 800b1e4:	f3bf 8f6f 	isb	sy
 800b1e8:	f3bf 8f4f 	dsb	sy
 800b1ec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b1ee:	bf00      	nop
 800b1f0:	e7fe      	b.n	800b1f0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b1f2:	68bb      	ldr	r3, [r7, #8]
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d103      	bne.n	800b200 <xQueueGenericSend+0x40>
 800b1f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d101      	bne.n	800b204 <xQueueGenericSend+0x44>
 800b200:	2301      	movs	r3, #1
 800b202:	e000      	b.n	800b206 <xQueueGenericSend+0x46>
 800b204:	2300      	movs	r3, #0
 800b206:	2b00      	cmp	r3, #0
 800b208:	d10a      	bne.n	800b220 <xQueueGenericSend+0x60>
	__asm volatile
 800b20a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b20e:	f383 8811 	msr	BASEPRI, r3
 800b212:	f3bf 8f6f 	isb	sy
 800b216:	f3bf 8f4f 	dsb	sy
 800b21a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b21c:	bf00      	nop
 800b21e:	e7fe      	b.n	800b21e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b220:	683b      	ldr	r3, [r7, #0]
 800b222:	2b02      	cmp	r3, #2
 800b224:	d103      	bne.n	800b22e <xQueueGenericSend+0x6e>
 800b226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b228:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b22a:	2b01      	cmp	r3, #1
 800b22c:	d101      	bne.n	800b232 <xQueueGenericSend+0x72>
 800b22e:	2301      	movs	r3, #1
 800b230:	e000      	b.n	800b234 <xQueueGenericSend+0x74>
 800b232:	2300      	movs	r3, #0
 800b234:	2b00      	cmp	r3, #0
 800b236:	d10a      	bne.n	800b24e <xQueueGenericSend+0x8e>
	__asm volatile
 800b238:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b23c:	f383 8811 	msr	BASEPRI, r3
 800b240:	f3bf 8f6f 	isb	sy
 800b244:	f3bf 8f4f 	dsb	sy
 800b248:	623b      	str	r3, [r7, #32]
}
 800b24a:	bf00      	nop
 800b24c:	e7fe      	b.n	800b24c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b24e:	f001 fc73 	bl	800cb38 <xTaskGetSchedulerState>
 800b252:	4603      	mov	r3, r0
 800b254:	2b00      	cmp	r3, #0
 800b256:	d102      	bne.n	800b25e <xQueueGenericSend+0x9e>
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d101      	bne.n	800b262 <xQueueGenericSend+0xa2>
 800b25e:	2301      	movs	r3, #1
 800b260:	e000      	b.n	800b264 <xQueueGenericSend+0xa4>
 800b262:	2300      	movs	r3, #0
 800b264:	2b00      	cmp	r3, #0
 800b266:	d10a      	bne.n	800b27e <xQueueGenericSend+0xbe>
	__asm volatile
 800b268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b26c:	f383 8811 	msr	BASEPRI, r3
 800b270:	f3bf 8f6f 	isb	sy
 800b274:	f3bf 8f4f 	dsb	sy
 800b278:	61fb      	str	r3, [r7, #28]
}
 800b27a:	bf00      	nop
 800b27c:	e7fe      	b.n	800b27c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b27e:	f001 ffa9 	bl	800d1d4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b284:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b288:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b28a:	429a      	cmp	r2, r3
 800b28c:	d302      	bcc.n	800b294 <xQueueGenericSend+0xd4>
 800b28e:	683b      	ldr	r3, [r7, #0]
 800b290:	2b02      	cmp	r3, #2
 800b292:	d129      	bne.n	800b2e8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b294:	683a      	ldr	r2, [r7, #0]
 800b296:	68b9      	ldr	r1, [r7, #8]
 800b298:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b29a:	f000 fc9a 	bl	800bbd2 <prvCopyDataToQueue>
 800b29e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b2a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d010      	beq.n	800b2ca <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b2a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2aa:	3324      	adds	r3, #36	; 0x24
 800b2ac:	4618      	mov	r0, r3
 800b2ae:	f001 fa87 	bl	800c7c0 <xTaskRemoveFromEventList>
 800b2b2:	4603      	mov	r3, r0
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d013      	beq.n	800b2e0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b2b8:	4b3f      	ldr	r3, [pc, #252]	; (800b3b8 <xQueueGenericSend+0x1f8>)
 800b2ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b2be:	601a      	str	r2, [r3, #0]
 800b2c0:	f3bf 8f4f 	dsb	sy
 800b2c4:	f3bf 8f6f 	isb	sy
 800b2c8:	e00a      	b.n	800b2e0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b2ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d007      	beq.n	800b2e0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b2d0:	4b39      	ldr	r3, [pc, #228]	; (800b3b8 <xQueueGenericSend+0x1f8>)
 800b2d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b2d6:	601a      	str	r2, [r3, #0]
 800b2d8:	f3bf 8f4f 	dsb	sy
 800b2dc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b2e0:	f001 ffa8 	bl	800d234 <vPortExitCritical>
				return pdPASS;
 800b2e4:	2301      	movs	r3, #1
 800b2e6:	e063      	b.n	800b3b0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d103      	bne.n	800b2f6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b2ee:	f001 ffa1 	bl	800d234 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b2f2:	2300      	movs	r3, #0
 800b2f4:	e05c      	b.n	800b3b0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b2f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d106      	bne.n	800b30a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b2fc:	f107 0314 	add.w	r3, r7, #20
 800b300:	4618      	mov	r0, r3
 800b302:	f001 fabf 	bl	800c884 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b306:	2301      	movs	r3, #1
 800b308:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b30a:	f001 ff93 	bl	800d234 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b30e:	f001 f853 	bl	800c3b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b312:	f001 ff5f 	bl	800d1d4 <vPortEnterCritical>
 800b316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b318:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b31c:	b25b      	sxtb	r3, r3
 800b31e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b322:	d103      	bne.n	800b32c <xQueueGenericSend+0x16c>
 800b324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b326:	2200      	movs	r2, #0
 800b328:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b32c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b32e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b332:	b25b      	sxtb	r3, r3
 800b334:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b338:	d103      	bne.n	800b342 <xQueueGenericSend+0x182>
 800b33a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b33c:	2200      	movs	r2, #0
 800b33e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b342:	f001 ff77 	bl	800d234 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b346:	1d3a      	adds	r2, r7, #4
 800b348:	f107 0314 	add.w	r3, r7, #20
 800b34c:	4611      	mov	r1, r2
 800b34e:	4618      	mov	r0, r3
 800b350:	f001 faae 	bl	800c8b0 <xTaskCheckForTimeOut>
 800b354:	4603      	mov	r3, r0
 800b356:	2b00      	cmp	r3, #0
 800b358:	d124      	bne.n	800b3a4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b35a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b35c:	f000 fd31 	bl	800bdc2 <prvIsQueueFull>
 800b360:	4603      	mov	r3, r0
 800b362:	2b00      	cmp	r3, #0
 800b364:	d018      	beq.n	800b398 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b368:	3310      	adds	r3, #16
 800b36a:	687a      	ldr	r2, [r7, #4]
 800b36c:	4611      	mov	r1, r2
 800b36e:	4618      	mov	r0, r3
 800b370:	f001 fa02 	bl	800c778 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b374:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b376:	f000 fcbc 	bl	800bcf2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b37a:	f001 f82b 	bl	800c3d4 <xTaskResumeAll>
 800b37e:	4603      	mov	r3, r0
 800b380:	2b00      	cmp	r3, #0
 800b382:	f47f af7c 	bne.w	800b27e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800b386:	4b0c      	ldr	r3, [pc, #48]	; (800b3b8 <xQueueGenericSend+0x1f8>)
 800b388:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b38c:	601a      	str	r2, [r3, #0]
 800b38e:	f3bf 8f4f 	dsb	sy
 800b392:	f3bf 8f6f 	isb	sy
 800b396:	e772      	b.n	800b27e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b398:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b39a:	f000 fcaa 	bl	800bcf2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b39e:	f001 f819 	bl	800c3d4 <xTaskResumeAll>
 800b3a2:	e76c      	b.n	800b27e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b3a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b3a6:	f000 fca4 	bl	800bcf2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b3aa:	f001 f813 	bl	800c3d4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b3ae:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b3b0:	4618      	mov	r0, r3
 800b3b2:	3738      	adds	r7, #56	; 0x38
 800b3b4:	46bd      	mov	sp, r7
 800b3b6:	bd80      	pop	{r7, pc}
 800b3b8:	e000ed04 	.word	0xe000ed04

0800b3bc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b3bc:	b580      	push	{r7, lr}
 800b3be:	b090      	sub	sp, #64	; 0x40
 800b3c0:	af00      	add	r7, sp, #0
 800b3c2:	60f8      	str	r0, [r7, #12]
 800b3c4:	60b9      	str	r1, [r7, #8]
 800b3c6:	607a      	str	r2, [r7, #4]
 800b3c8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800b3ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d10a      	bne.n	800b3ea <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800b3d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3d8:	f383 8811 	msr	BASEPRI, r3
 800b3dc:	f3bf 8f6f 	isb	sy
 800b3e0:	f3bf 8f4f 	dsb	sy
 800b3e4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b3e6:	bf00      	nop
 800b3e8:	e7fe      	b.n	800b3e8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b3ea:	68bb      	ldr	r3, [r7, #8]
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d103      	bne.n	800b3f8 <xQueueGenericSendFromISR+0x3c>
 800b3f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d101      	bne.n	800b3fc <xQueueGenericSendFromISR+0x40>
 800b3f8:	2301      	movs	r3, #1
 800b3fa:	e000      	b.n	800b3fe <xQueueGenericSendFromISR+0x42>
 800b3fc:	2300      	movs	r3, #0
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d10a      	bne.n	800b418 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800b402:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b406:	f383 8811 	msr	BASEPRI, r3
 800b40a:	f3bf 8f6f 	isb	sy
 800b40e:	f3bf 8f4f 	dsb	sy
 800b412:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b414:	bf00      	nop
 800b416:	e7fe      	b.n	800b416 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b418:	683b      	ldr	r3, [r7, #0]
 800b41a:	2b02      	cmp	r3, #2
 800b41c:	d103      	bne.n	800b426 <xQueueGenericSendFromISR+0x6a>
 800b41e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b420:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b422:	2b01      	cmp	r3, #1
 800b424:	d101      	bne.n	800b42a <xQueueGenericSendFromISR+0x6e>
 800b426:	2301      	movs	r3, #1
 800b428:	e000      	b.n	800b42c <xQueueGenericSendFromISR+0x70>
 800b42a:	2300      	movs	r3, #0
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d10a      	bne.n	800b446 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800b430:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b434:	f383 8811 	msr	BASEPRI, r3
 800b438:	f3bf 8f6f 	isb	sy
 800b43c:	f3bf 8f4f 	dsb	sy
 800b440:	623b      	str	r3, [r7, #32]
}
 800b442:	bf00      	nop
 800b444:	e7fe      	b.n	800b444 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b446:	f001 ffa7 	bl	800d398 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b44a:	f3ef 8211 	mrs	r2, BASEPRI
 800b44e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b452:	f383 8811 	msr	BASEPRI, r3
 800b456:	f3bf 8f6f 	isb	sy
 800b45a:	f3bf 8f4f 	dsb	sy
 800b45e:	61fa      	str	r2, [r7, #28]
 800b460:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b462:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b464:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b468:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b46a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b46c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b46e:	429a      	cmp	r2, r3
 800b470:	d302      	bcc.n	800b478 <xQueueGenericSendFromISR+0xbc>
 800b472:	683b      	ldr	r3, [r7, #0]
 800b474:	2b02      	cmp	r3, #2
 800b476:	d12f      	bne.n	800b4d8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b47a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b47e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b486:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b488:	683a      	ldr	r2, [r7, #0]
 800b48a:	68b9      	ldr	r1, [r7, #8]
 800b48c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b48e:	f000 fba0 	bl	800bbd2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b492:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800b496:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b49a:	d112      	bne.n	800b4c2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b49c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b49e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d016      	beq.n	800b4d2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b4a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4a6:	3324      	adds	r3, #36	; 0x24
 800b4a8:	4618      	mov	r0, r3
 800b4aa:	f001 f989 	bl	800c7c0 <xTaskRemoveFromEventList>
 800b4ae:	4603      	mov	r3, r0
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d00e      	beq.n	800b4d2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d00b      	beq.n	800b4d2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	2201      	movs	r2, #1
 800b4be:	601a      	str	r2, [r3, #0]
 800b4c0:	e007      	b.n	800b4d2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b4c2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b4c6:	3301      	adds	r3, #1
 800b4c8:	b2db      	uxtb	r3, r3
 800b4ca:	b25a      	sxtb	r2, r3
 800b4cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b4d2:	2301      	movs	r3, #1
 800b4d4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800b4d6:	e001      	b.n	800b4dc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b4d8:	2300      	movs	r3, #0
 800b4da:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b4dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4de:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b4e0:	697b      	ldr	r3, [r7, #20]
 800b4e2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b4e6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b4e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800b4ea:	4618      	mov	r0, r3
 800b4ec:	3740      	adds	r7, #64	; 0x40
 800b4ee:	46bd      	mov	sp, r7
 800b4f0:	bd80      	pop	{r7, pc}

0800b4f2 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b4f2:	b580      	push	{r7, lr}
 800b4f4:	b08e      	sub	sp, #56	; 0x38
 800b4f6:	af00      	add	r7, sp, #0
 800b4f8:	6078      	str	r0, [r7, #4]
 800b4fa:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800b500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b502:	2b00      	cmp	r3, #0
 800b504:	d10a      	bne.n	800b51c <xQueueGiveFromISR+0x2a>
	__asm volatile
 800b506:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b50a:	f383 8811 	msr	BASEPRI, r3
 800b50e:	f3bf 8f6f 	isb	sy
 800b512:	f3bf 8f4f 	dsb	sy
 800b516:	623b      	str	r3, [r7, #32]
}
 800b518:	bf00      	nop
 800b51a:	e7fe      	b.n	800b51a <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800b51c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b51e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b520:	2b00      	cmp	r3, #0
 800b522:	d00a      	beq.n	800b53a <xQueueGiveFromISR+0x48>
	__asm volatile
 800b524:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b528:	f383 8811 	msr	BASEPRI, r3
 800b52c:	f3bf 8f6f 	isb	sy
 800b530:	f3bf 8f4f 	dsb	sy
 800b534:	61fb      	str	r3, [r7, #28]
}
 800b536:	bf00      	nop
 800b538:	e7fe      	b.n	800b538 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800b53a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d103      	bne.n	800b54a <xQueueGiveFromISR+0x58>
 800b542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b544:	689b      	ldr	r3, [r3, #8]
 800b546:	2b00      	cmp	r3, #0
 800b548:	d101      	bne.n	800b54e <xQueueGiveFromISR+0x5c>
 800b54a:	2301      	movs	r3, #1
 800b54c:	e000      	b.n	800b550 <xQueueGiveFromISR+0x5e>
 800b54e:	2300      	movs	r3, #0
 800b550:	2b00      	cmp	r3, #0
 800b552:	d10a      	bne.n	800b56a <xQueueGiveFromISR+0x78>
	__asm volatile
 800b554:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b558:	f383 8811 	msr	BASEPRI, r3
 800b55c:	f3bf 8f6f 	isb	sy
 800b560:	f3bf 8f4f 	dsb	sy
 800b564:	61bb      	str	r3, [r7, #24]
}
 800b566:	bf00      	nop
 800b568:	e7fe      	b.n	800b568 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b56a:	f001 ff15 	bl	800d398 <vPortValidateInterruptPriority>
	__asm volatile
 800b56e:	f3ef 8211 	mrs	r2, BASEPRI
 800b572:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b576:	f383 8811 	msr	BASEPRI, r3
 800b57a:	f3bf 8f6f 	isb	sy
 800b57e:	f3bf 8f4f 	dsb	sy
 800b582:	617a      	str	r2, [r7, #20]
 800b584:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800b586:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b588:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b58a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b58c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b58e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800b590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b592:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b594:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b596:	429a      	cmp	r2, r3
 800b598:	d22b      	bcs.n	800b5f2 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b59a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b59c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b5a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b5a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5a6:	1c5a      	adds	r2, r3, #1
 800b5a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5aa:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b5ac:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b5b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5b4:	d112      	bne.n	800b5dc <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b5b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d016      	beq.n	800b5ec <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b5be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5c0:	3324      	adds	r3, #36	; 0x24
 800b5c2:	4618      	mov	r0, r3
 800b5c4:	f001 f8fc 	bl	800c7c0 <xTaskRemoveFromEventList>
 800b5c8:	4603      	mov	r3, r0
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d00e      	beq.n	800b5ec <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b5ce:	683b      	ldr	r3, [r7, #0]
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d00b      	beq.n	800b5ec <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b5d4:	683b      	ldr	r3, [r7, #0]
 800b5d6:	2201      	movs	r2, #1
 800b5d8:	601a      	str	r2, [r3, #0]
 800b5da:	e007      	b.n	800b5ec <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b5dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b5e0:	3301      	adds	r3, #1
 800b5e2:	b2db      	uxtb	r3, r3
 800b5e4:	b25a      	sxtb	r2, r3
 800b5e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b5ec:	2301      	movs	r3, #1
 800b5ee:	637b      	str	r3, [r7, #52]	; 0x34
 800b5f0:	e001      	b.n	800b5f6 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b5f2:	2300      	movs	r3, #0
 800b5f4:	637b      	str	r3, [r7, #52]	; 0x34
 800b5f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5f8:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	f383 8811 	msr	BASEPRI, r3
}
 800b600:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b602:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b604:	4618      	mov	r0, r3
 800b606:	3738      	adds	r7, #56	; 0x38
 800b608:	46bd      	mov	sp, r7
 800b60a:	bd80      	pop	{r7, pc}

0800b60c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b60c:	b580      	push	{r7, lr}
 800b60e:	b08c      	sub	sp, #48	; 0x30
 800b610:	af00      	add	r7, sp, #0
 800b612:	60f8      	str	r0, [r7, #12]
 800b614:	60b9      	str	r1, [r7, #8]
 800b616:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b618:	2300      	movs	r3, #0
 800b61a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b622:	2b00      	cmp	r3, #0
 800b624:	d10a      	bne.n	800b63c <xQueueReceive+0x30>
	__asm volatile
 800b626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b62a:	f383 8811 	msr	BASEPRI, r3
 800b62e:	f3bf 8f6f 	isb	sy
 800b632:	f3bf 8f4f 	dsb	sy
 800b636:	623b      	str	r3, [r7, #32]
}
 800b638:	bf00      	nop
 800b63a:	e7fe      	b.n	800b63a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b63c:	68bb      	ldr	r3, [r7, #8]
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d103      	bne.n	800b64a <xQueueReceive+0x3e>
 800b642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b646:	2b00      	cmp	r3, #0
 800b648:	d101      	bne.n	800b64e <xQueueReceive+0x42>
 800b64a:	2301      	movs	r3, #1
 800b64c:	e000      	b.n	800b650 <xQueueReceive+0x44>
 800b64e:	2300      	movs	r3, #0
 800b650:	2b00      	cmp	r3, #0
 800b652:	d10a      	bne.n	800b66a <xQueueReceive+0x5e>
	__asm volatile
 800b654:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b658:	f383 8811 	msr	BASEPRI, r3
 800b65c:	f3bf 8f6f 	isb	sy
 800b660:	f3bf 8f4f 	dsb	sy
 800b664:	61fb      	str	r3, [r7, #28]
}
 800b666:	bf00      	nop
 800b668:	e7fe      	b.n	800b668 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b66a:	f001 fa65 	bl	800cb38 <xTaskGetSchedulerState>
 800b66e:	4603      	mov	r3, r0
 800b670:	2b00      	cmp	r3, #0
 800b672:	d102      	bne.n	800b67a <xQueueReceive+0x6e>
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	2b00      	cmp	r3, #0
 800b678:	d101      	bne.n	800b67e <xQueueReceive+0x72>
 800b67a:	2301      	movs	r3, #1
 800b67c:	e000      	b.n	800b680 <xQueueReceive+0x74>
 800b67e:	2300      	movs	r3, #0
 800b680:	2b00      	cmp	r3, #0
 800b682:	d10a      	bne.n	800b69a <xQueueReceive+0x8e>
	__asm volatile
 800b684:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b688:	f383 8811 	msr	BASEPRI, r3
 800b68c:	f3bf 8f6f 	isb	sy
 800b690:	f3bf 8f4f 	dsb	sy
 800b694:	61bb      	str	r3, [r7, #24]
}
 800b696:	bf00      	nop
 800b698:	e7fe      	b.n	800b698 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b69a:	f001 fd9b 	bl	800d1d4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b69e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6a2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b6a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d01f      	beq.n	800b6ea <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b6aa:	68b9      	ldr	r1, [r7, #8]
 800b6ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b6ae:	f000 fafa 	bl	800bca6 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b6b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6b4:	1e5a      	subs	r2, r3, #1
 800b6b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6b8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b6ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6bc:	691b      	ldr	r3, [r3, #16]
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d00f      	beq.n	800b6e2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b6c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6c4:	3310      	adds	r3, #16
 800b6c6:	4618      	mov	r0, r3
 800b6c8:	f001 f87a 	bl	800c7c0 <xTaskRemoveFromEventList>
 800b6cc:	4603      	mov	r3, r0
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d007      	beq.n	800b6e2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b6d2:	4b3d      	ldr	r3, [pc, #244]	; (800b7c8 <xQueueReceive+0x1bc>)
 800b6d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b6d8:	601a      	str	r2, [r3, #0]
 800b6da:	f3bf 8f4f 	dsb	sy
 800b6de:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b6e2:	f001 fda7 	bl	800d234 <vPortExitCritical>
				return pdPASS;
 800b6e6:	2301      	movs	r3, #1
 800b6e8:	e069      	b.n	800b7be <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d103      	bne.n	800b6f8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b6f0:	f001 fda0 	bl	800d234 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b6f4:	2300      	movs	r3, #0
 800b6f6:	e062      	b.n	800b7be <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b6f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d106      	bne.n	800b70c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b6fe:	f107 0310 	add.w	r3, r7, #16
 800b702:	4618      	mov	r0, r3
 800b704:	f001 f8be 	bl	800c884 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b708:	2301      	movs	r3, #1
 800b70a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b70c:	f001 fd92 	bl	800d234 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b710:	f000 fe52 	bl	800c3b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b714:	f001 fd5e 	bl	800d1d4 <vPortEnterCritical>
 800b718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b71a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b71e:	b25b      	sxtb	r3, r3
 800b720:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b724:	d103      	bne.n	800b72e <xQueueReceive+0x122>
 800b726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b728:	2200      	movs	r2, #0
 800b72a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b72e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b730:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b734:	b25b      	sxtb	r3, r3
 800b736:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b73a:	d103      	bne.n	800b744 <xQueueReceive+0x138>
 800b73c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b73e:	2200      	movs	r2, #0
 800b740:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b744:	f001 fd76 	bl	800d234 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b748:	1d3a      	adds	r2, r7, #4
 800b74a:	f107 0310 	add.w	r3, r7, #16
 800b74e:	4611      	mov	r1, r2
 800b750:	4618      	mov	r0, r3
 800b752:	f001 f8ad 	bl	800c8b0 <xTaskCheckForTimeOut>
 800b756:	4603      	mov	r3, r0
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d123      	bne.n	800b7a4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b75c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b75e:	f000 fb1a 	bl	800bd96 <prvIsQueueEmpty>
 800b762:	4603      	mov	r3, r0
 800b764:	2b00      	cmp	r3, #0
 800b766:	d017      	beq.n	800b798 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b76a:	3324      	adds	r3, #36	; 0x24
 800b76c:	687a      	ldr	r2, [r7, #4]
 800b76e:	4611      	mov	r1, r2
 800b770:	4618      	mov	r0, r3
 800b772:	f001 f801 	bl	800c778 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b776:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b778:	f000 fabb 	bl	800bcf2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b77c:	f000 fe2a 	bl	800c3d4 <xTaskResumeAll>
 800b780:	4603      	mov	r3, r0
 800b782:	2b00      	cmp	r3, #0
 800b784:	d189      	bne.n	800b69a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800b786:	4b10      	ldr	r3, [pc, #64]	; (800b7c8 <xQueueReceive+0x1bc>)
 800b788:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b78c:	601a      	str	r2, [r3, #0]
 800b78e:	f3bf 8f4f 	dsb	sy
 800b792:	f3bf 8f6f 	isb	sy
 800b796:	e780      	b.n	800b69a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b798:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b79a:	f000 faaa 	bl	800bcf2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b79e:	f000 fe19 	bl	800c3d4 <xTaskResumeAll>
 800b7a2:	e77a      	b.n	800b69a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b7a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b7a6:	f000 faa4 	bl	800bcf2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b7aa:	f000 fe13 	bl	800c3d4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b7ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b7b0:	f000 faf1 	bl	800bd96 <prvIsQueueEmpty>
 800b7b4:	4603      	mov	r3, r0
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	f43f af6f 	beq.w	800b69a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b7bc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b7be:	4618      	mov	r0, r3
 800b7c0:	3730      	adds	r7, #48	; 0x30
 800b7c2:	46bd      	mov	sp, r7
 800b7c4:	bd80      	pop	{r7, pc}
 800b7c6:	bf00      	nop
 800b7c8:	e000ed04 	.word	0xe000ed04

0800b7cc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800b7cc:	b580      	push	{r7, lr}
 800b7ce:	b08e      	sub	sp, #56	; 0x38
 800b7d0:	af00      	add	r7, sp, #0
 800b7d2:	6078      	str	r0, [r7, #4]
 800b7d4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800b7d6:	2300      	movs	r3, #0
 800b7d8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800b7de:	2300      	movs	r3, #0
 800b7e0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b7e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d10a      	bne.n	800b7fe <xQueueSemaphoreTake+0x32>
	__asm volatile
 800b7e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7ec:	f383 8811 	msr	BASEPRI, r3
 800b7f0:	f3bf 8f6f 	isb	sy
 800b7f4:	f3bf 8f4f 	dsb	sy
 800b7f8:	623b      	str	r3, [r7, #32]
}
 800b7fa:	bf00      	nop
 800b7fc:	e7fe      	b.n	800b7fc <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800b7fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b802:	2b00      	cmp	r3, #0
 800b804:	d00a      	beq.n	800b81c <xQueueSemaphoreTake+0x50>
	__asm volatile
 800b806:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b80a:	f383 8811 	msr	BASEPRI, r3
 800b80e:	f3bf 8f6f 	isb	sy
 800b812:	f3bf 8f4f 	dsb	sy
 800b816:	61fb      	str	r3, [r7, #28]
}
 800b818:	bf00      	nop
 800b81a:	e7fe      	b.n	800b81a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b81c:	f001 f98c 	bl	800cb38 <xTaskGetSchedulerState>
 800b820:	4603      	mov	r3, r0
 800b822:	2b00      	cmp	r3, #0
 800b824:	d102      	bne.n	800b82c <xQueueSemaphoreTake+0x60>
 800b826:	683b      	ldr	r3, [r7, #0]
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d101      	bne.n	800b830 <xQueueSemaphoreTake+0x64>
 800b82c:	2301      	movs	r3, #1
 800b82e:	e000      	b.n	800b832 <xQueueSemaphoreTake+0x66>
 800b830:	2300      	movs	r3, #0
 800b832:	2b00      	cmp	r3, #0
 800b834:	d10a      	bne.n	800b84c <xQueueSemaphoreTake+0x80>
	__asm volatile
 800b836:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b83a:	f383 8811 	msr	BASEPRI, r3
 800b83e:	f3bf 8f6f 	isb	sy
 800b842:	f3bf 8f4f 	dsb	sy
 800b846:	61bb      	str	r3, [r7, #24]
}
 800b848:	bf00      	nop
 800b84a:	e7fe      	b.n	800b84a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b84c:	f001 fcc2 	bl	800d1d4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800b850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b854:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800b856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d024      	beq.n	800b8a6 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800b85c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b85e:	1e5a      	subs	r2, r3, #1
 800b860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b862:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d104      	bne.n	800b876 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800b86c:	f001 fb0c 	bl	800ce88 <pvTaskIncrementMutexHeldCount>
 800b870:	4602      	mov	r2, r0
 800b872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b874:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b878:	691b      	ldr	r3, [r3, #16]
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d00f      	beq.n	800b89e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b87e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b880:	3310      	adds	r3, #16
 800b882:	4618      	mov	r0, r3
 800b884:	f000 ff9c 	bl	800c7c0 <xTaskRemoveFromEventList>
 800b888:	4603      	mov	r3, r0
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d007      	beq.n	800b89e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b88e:	4b54      	ldr	r3, [pc, #336]	; (800b9e0 <xQueueSemaphoreTake+0x214>)
 800b890:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b894:	601a      	str	r2, [r3, #0]
 800b896:	f3bf 8f4f 	dsb	sy
 800b89a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b89e:	f001 fcc9 	bl	800d234 <vPortExitCritical>
				return pdPASS;
 800b8a2:	2301      	movs	r3, #1
 800b8a4:	e097      	b.n	800b9d6 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b8a6:	683b      	ldr	r3, [r7, #0]
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d111      	bne.n	800b8d0 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800b8ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d00a      	beq.n	800b8c8 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800b8b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8b6:	f383 8811 	msr	BASEPRI, r3
 800b8ba:	f3bf 8f6f 	isb	sy
 800b8be:	f3bf 8f4f 	dsb	sy
 800b8c2:	617b      	str	r3, [r7, #20]
}
 800b8c4:	bf00      	nop
 800b8c6:	e7fe      	b.n	800b8c6 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800b8c8:	f001 fcb4 	bl	800d234 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b8cc:	2300      	movs	r3, #0
 800b8ce:	e082      	b.n	800b9d6 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b8d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d106      	bne.n	800b8e4 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b8d6:	f107 030c 	add.w	r3, r7, #12
 800b8da:	4618      	mov	r0, r3
 800b8dc:	f000 ffd2 	bl	800c884 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b8e0:	2301      	movs	r3, #1
 800b8e2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b8e4:	f001 fca6 	bl	800d234 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b8e8:	f000 fd66 	bl	800c3b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b8ec:	f001 fc72 	bl	800d1d4 <vPortEnterCritical>
 800b8f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8f2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b8f6:	b25b      	sxtb	r3, r3
 800b8f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8fc:	d103      	bne.n	800b906 <xQueueSemaphoreTake+0x13a>
 800b8fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b900:	2200      	movs	r2, #0
 800b902:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b908:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b90c:	b25b      	sxtb	r3, r3
 800b90e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b912:	d103      	bne.n	800b91c <xQueueSemaphoreTake+0x150>
 800b914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b916:	2200      	movs	r2, #0
 800b918:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b91c:	f001 fc8a 	bl	800d234 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b920:	463a      	mov	r2, r7
 800b922:	f107 030c 	add.w	r3, r7, #12
 800b926:	4611      	mov	r1, r2
 800b928:	4618      	mov	r0, r3
 800b92a:	f000 ffc1 	bl	800c8b0 <xTaskCheckForTimeOut>
 800b92e:	4603      	mov	r3, r0
 800b930:	2b00      	cmp	r3, #0
 800b932:	d132      	bne.n	800b99a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b934:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b936:	f000 fa2e 	bl	800bd96 <prvIsQueueEmpty>
 800b93a:	4603      	mov	r3, r0
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d026      	beq.n	800b98e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	2b00      	cmp	r3, #0
 800b946:	d109      	bne.n	800b95c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800b948:	f001 fc44 	bl	800d1d4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b94c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b94e:	689b      	ldr	r3, [r3, #8]
 800b950:	4618      	mov	r0, r3
 800b952:	f001 f90f 	bl	800cb74 <xTaskPriorityInherit>
 800b956:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800b958:	f001 fc6c 	bl	800d234 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b95c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b95e:	3324      	adds	r3, #36	; 0x24
 800b960:	683a      	ldr	r2, [r7, #0]
 800b962:	4611      	mov	r1, r2
 800b964:	4618      	mov	r0, r3
 800b966:	f000 ff07 	bl	800c778 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b96a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b96c:	f000 f9c1 	bl	800bcf2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b970:	f000 fd30 	bl	800c3d4 <xTaskResumeAll>
 800b974:	4603      	mov	r3, r0
 800b976:	2b00      	cmp	r3, #0
 800b978:	f47f af68 	bne.w	800b84c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800b97c:	4b18      	ldr	r3, [pc, #96]	; (800b9e0 <xQueueSemaphoreTake+0x214>)
 800b97e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b982:	601a      	str	r2, [r3, #0]
 800b984:	f3bf 8f4f 	dsb	sy
 800b988:	f3bf 8f6f 	isb	sy
 800b98c:	e75e      	b.n	800b84c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800b98e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b990:	f000 f9af 	bl	800bcf2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b994:	f000 fd1e 	bl	800c3d4 <xTaskResumeAll>
 800b998:	e758      	b.n	800b84c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800b99a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b99c:	f000 f9a9 	bl	800bcf2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b9a0:	f000 fd18 	bl	800c3d4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b9a4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b9a6:	f000 f9f6 	bl	800bd96 <prvIsQueueEmpty>
 800b9aa:	4603      	mov	r3, r0
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	f43f af4d 	beq.w	800b84c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800b9b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d00d      	beq.n	800b9d4 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800b9b8:	f001 fc0c 	bl	800d1d4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800b9bc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b9be:	f000 f8f0 	bl	800bba2 <prvGetDisinheritPriorityAfterTimeout>
 800b9c2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800b9c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9c6:	689b      	ldr	r3, [r3, #8]
 800b9c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b9ca:	4618      	mov	r0, r3
 800b9cc:	f001 f9ce 	bl	800cd6c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800b9d0:	f001 fc30 	bl	800d234 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b9d4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b9d6:	4618      	mov	r0, r3
 800b9d8:	3738      	adds	r7, #56	; 0x38
 800b9da:	46bd      	mov	sp, r7
 800b9dc:	bd80      	pop	{r7, pc}
 800b9de:	bf00      	nop
 800b9e0:	e000ed04 	.word	0xe000ed04

0800b9e4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b9e4:	b580      	push	{r7, lr}
 800b9e6:	b08e      	sub	sp, #56	; 0x38
 800b9e8:	af00      	add	r7, sp, #0
 800b9ea:	60f8      	str	r0, [r7, #12]
 800b9ec:	60b9      	str	r1, [r7, #8]
 800b9ee:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b9f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d10a      	bne.n	800ba10 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800b9fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9fe:	f383 8811 	msr	BASEPRI, r3
 800ba02:	f3bf 8f6f 	isb	sy
 800ba06:	f3bf 8f4f 	dsb	sy
 800ba0a:	623b      	str	r3, [r7, #32]
}
 800ba0c:	bf00      	nop
 800ba0e:	e7fe      	b.n	800ba0e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ba10:	68bb      	ldr	r3, [r7, #8]
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d103      	bne.n	800ba1e <xQueueReceiveFromISR+0x3a>
 800ba16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d101      	bne.n	800ba22 <xQueueReceiveFromISR+0x3e>
 800ba1e:	2301      	movs	r3, #1
 800ba20:	e000      	b.n	800ba24 <xQueueReceiveFromISR+0x40>
 800ba22:	2300      	movs	r3, #0
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d10a      	bne.n	800ba3e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800ba28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba2c:	f383 8811 	msr	BASEPRI, r3
 800ba30:	f3bf 8f6f 	isb	sy
 800ba34:	f3bf 8f4f 	dsb	sy
 800ba38:	61fb      	str	r3, [r7, #28]
}
 800ba3a:	bf00      	nop
 800ba3c:	e7fe      	b.n	800ba3c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ba3e:	f001 fcab 	bl	800d398 <vPortValidateInterruptPriority>
	__asm volatile
 800ba42:	f3ef 8211 	mrs	r2, BASEPRI
 800ba46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba4a:	f383 8811 	msr	BASEPRI, r3
 800ba4e:	f3bf 8f6f 	isb	sy
 800ba52:	f3bf 8f4f 	dsb	sy
 800ba56:	61ba      	str	r2, [r7, #24]
 800ba58:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800ba5a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ba5c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ba5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba62:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ba64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d02f      	beq.n	800baca <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800ba6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba6c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ba70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ba74:	68b9      	ldr	r1, [r7, #8]
 800ba76:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ba78:	f000 f915 	bl	800bca6 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ba7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba7e:	1e5a      	subs	r2, r3, #1
 800ba80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba82:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800ba84:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ba88:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba8c:	d112      	bne.n	800bab4 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ba8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba90:	691b      	ldr	r3, [r3, #16]
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d016      	beq.n	800bac4 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ba96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba98:	3310      	adds	r3, #16
 800ba9a:	4618      	mov	r0, r3
 800ba9c:	f000 fe90 	bl	800c7c0 <xTaskRemoveFromEventList>
 800baa0:	4603      	mov	r3, r0
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d00e      	beq.n	800bac4 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d00b      	beq.n	800bac4 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	2201      	movs	r2, #1
 800bab0:	601a      	str	r2, [r3, #0]
 800bab2:	e007      	b.n	800bac4 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800bab4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bab8:	3301      	adds	r3, #1
 800baba:	b2db      	uxtb	r3, r3
 800babc:	b25a      	sxtb	r2, r3
 800babe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bac0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800bac4:	2301      	movs	r3, #1
 800bac6:	637b      	str	r3, [r7, #52]	; 0x34
 800bac8:	e001      	b.n	800bace <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800baca:	2300      	movs	r3, #0
 800bacc:	637b      	str	r3, [r7, #52]	; 0x34
 800bace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bad0:	613b      	str	r3, [r7, #16]
	__asm volatile
 800bad2:	693b      	ldr	r3, [r7, #16]
 800bad4:	f383 8811 	msr	BASEPRI, r3
}
 800bad8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bada:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800badc:	4618      	mov	r0, r3
 800bade:	3738      	adds	r7, #56	; 0x38
 800bae0:	46bd      	mov	sp, r7
 800bae2:	bd80      	pop	{r7, pc}

0800bae4 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800bae4:	b580      	push	{r7, lr}
 800bae6:	b084      	sub	sp, #16
 800bae8:	af00      	add	r7, sp, #0
 800baea:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d10a      	bne.n	800bb08 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 800baf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baf6:	f383 8811 	msr	BASEPRI, r3
 800bafa:	f3bf 8f6f 	isb	sy
 800bafe:	f3bf 8f4f 	dsb	sy
 800bb02:	60bb      	str	r3, [r7, #8]
}
 800bb04:	bf00      	nop
 800bb06:	e7fe      	b.n	800bb06 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 800bb08:	f001 fb64 	bl	800d1d4 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb10:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800bb12:	f001 fb8f 	bl	800d234 <vPortExitCritical>

	return uxReturn;
 800bb16:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800bb18:	4618      	mov	r0, r3
 800bb1a:	3710      	adds	r7, #16
 800bb1c:	46bd      	mov	sp, r7
 800bb1e:	bd80      	pop	{r7, pc}

0800bb20 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800bb20:	b480      	push	{r7}
 800bb22:	b087      	sub	sp, #28
 800bb24:	af00      	add	r7, sp, #0
 800bb26:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800bb2c:	697b      	ldr	r3, [r7, #20]
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d10a      	bne.n	800bb48 <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 800bb32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb36:	f383 8811 	msr	BASEPRI, r3
 800bb3a:	f3bf 8f6f 	isb	sy
 800bb3e:	f3bf 8f4f 	dsb	sy
 800bb42:	60fb      	str	r3, [r7, #12]
}
 800bb44:	bf00      	nop
 800bb46:	e7fe      	b.n	800bb46 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 800bb48:	697b      	ldr	r3, [r7, #20]
 800bb4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb4c:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800bb4e:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800bb50:	4618      	mov	r0, r3
 800bb52:	371c      	adds	r7, #28
 800bb54:	46bd      	mov	sp, r7
 800bb56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb5a:	4770      	bx	lr

0800bb5c <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800bb5c:	b580      	push	{r7, lr}
 800bb5e:	b084      	sub	sp, #16
 800bb60:	af00      	add	r7, sp, #0
 800bb62:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d10a      	bne.n	800bb84 <vQueueDelete+0x28>
	__asm volatile
 800bb6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb72:	f383 8811 	msr	BASEPRI, r3
 800bb76:	f3bf 8f6f 	isb	sy
 800bb7a:	f3bf 8f4f 	dsb	sy
 800bb7e:	60bb      	str	r3, [r7, #8]
}
 800bb80:	bf00      	nop
 800bb82:	e7fe      	b.n	800bb82 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800bb84:	68f8      	ldr	r0, [r7, #12]
 800bb86:	f000 f935 	bl	800bdf4 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d102      	bne.n	800bb9a <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800bb94:	68f8      	ldr	r0, [r7, #12]
 800bb96:	f001 fd0b 	bl	800d5b0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800bb9a:	bf00      	nop
 800bb9c:	3710      	adds	r7, #16
 800bb9e:	46bd      	mov	sp, r7
 800bba0:	bd80      	pop	{r7, pc}

0800bba2 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800bba2:	b480      	push	{r7}
 800bba4:	b085      	sub	sp, #20
 800bba6:	af00      	add	r7, sp, #0
 800bba8:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d006      	beq.n	800bbc0 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	f1c3 0307 	rsb	r3, r3, #7
 800bbbc:	60fb      	str	r3, [r7, #12]
 800bbbe:	e001      	b.n	800bbc4 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800bbc0:	2300      	movs	r3, #0
 800bbc2:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800bbc4:	68fb      	ldr	r3, [r7, #12]
	}
 800bbc6:	4618      	mov	r0, r3
 800bbc8:	3714      	adds	r7, #20
 800bbca:	46bd      	mov	sp, r7
 800bbcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbd0:	4770      	bx	lr

0800bbd2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800bbd2:	b580      	push	{r7, lr}
 800bbd4:	b086      	sub	sp, #24
 800bbd6:	af00      	add	r7, sp, #0
 800bbd8:	60f8      	str	r0, [r7, #12]
 800bbda:	60b9      	str	r1, [r7, #8]
 800bbdc:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800bbde:	2300      	movs	r3, #0
 800bbe0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbe6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d10d      	bne.n	800bc0c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d14d      	bne.n	800bc94 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	689b      	ldr	r3, [r3, #8]
 800bbfc:	4618      	mov	r0, r3
 800bbfe:	f001 f82f 	bl	800cc60 <xTaskPriorityDisinherit>
 800bc02:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	2200      	movs	r2, #0
 800bc08:	609a      	str	r2, [r3, #8]
 800bc0a:	e043      	b.n	800bc94 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d119      	bne.n	800bc46 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	6858      	ldr	r0, [r3, #4]
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc1a:	461a      	mov	r2, r3
 800bc1c:	68b9      	ldr	r1, [r7, #8]
 800bc1e:	f012 fe7b 	bl	801e918 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	685a      	ldr	r2, [r3, #4]
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc2a:	441a      	add	r2, r3
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	685a      	ldr	r2, [r3, #4]
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	689b      	ldr	r3, [r3, #8]
 800bc38:	429a      	cmp	r2, r3
 800bc3a:	d32b      	bcc.n	800bc94 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	681a      	ldr	r2, [r3, #0]
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	605a      	str	r2, [r3, #4]
 800bc44:	e026      	b.n	800bc94 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	68d8      	ldr	r0, [r3, #12]
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc4e:	461a      	mov	r2, r3
 800bc50:	68b9      	ldr	r1, [r7, #8]
 800bc52:	f012 fe61 	bl	801e918 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	68da      	ldr	r2, [r3, #12]
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc5e:	425b      	negs	r3, r3
 800bc60:	441a      	add	r2, r3
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	68da      	ldr	r2, [r3, #12]
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	429a      	cmp	r2, r3
 800bc70:	d207      	bcs.n	800bc82 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	689a      	ldr	r2, [r3, #8]
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc7a:	425b      	negs	r3, r3
 800bc7c:	441a      	add	r2, r3
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	2b02      	cmp	r3, #2
 800bc86:	d105      	bne.n	800bc94 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bc88:	693b      	ldr	r3, [r7, #16]
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d002      	beq.n	800bc94 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800bc8e:	693b      	ldr	r3, [r7, #16]
 800bc90:	3b01      	subs	r3, #1
 800bc92:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800bc94:	693b      	ldr	r3, [r7, #16]
 800bc96:	1c5a      	adds	r2, r3, #1
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800bc9c:	697b      	ldr	r3, [r7, #20]
}
 800bc9e:	4618      	mov	r0, r3
 800bca0:	3718      	adds	r7, #24
 800bca2:	46bd      	mov	sp, r7
 800bca4:	bd80      	pop	{r7, pc}

0800bca6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800bca6:	b580      	push	{r7, lr}
 800bca8:	b082      	sub	sp, #8
 800bcaa:	af00      	add	r7, sp, #0
 800bcac:	6078      	str	r0, [r7, #4]
 800bcae:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d018      	beq.n	800bcea <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	68da      	ldr	r2, [r3, #12]
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcc0:	441a      	add	r2, r3
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	68da      	ldr	r2, [r3, #12]
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	689b      	ldr	r3, [r3, #8]
 800bcce:	429a      	cmp	r2, r3
 800bcd0:	d303      	bcc.n	800bcda <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	681a      	ldr	r2, [r3, #0]
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	68d9      	ldr	r1, [r3, #12]
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bce2:	461a      	mov	r2, r3
 800bce4:	6838      	ldr	r0, [r7, #0]
 800bce6:	f012 fe17 	bl	801e918 <memcpy>
	}
}
 800bcea:	bf00      	nop
 800bcec:	3708      	adds	r7, #8
 800bcee:	46bd      	mov	sp, r7
 800bcf0:	bd80      	pop	{r7, pc}

0800bcf2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800bcf2:	b580      	push	{r7, lr}
 800bcf4:	b084      	sub	sp, #16
 800bcf6:	af00      	add	r7, sp, #0
 800bcf8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800bcfa:	f001 fa6b 	bl	800d1d4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bd04:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bd06:	e011      	b.n	800bd2c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d012      	beq.n	800bd36 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	3324      	adds	r3, #36	; 0x24
 800bd14:	4618      	mov	r0, r3
 800bd16:	f000 fd53 	bl	800c7c0 <xTaskRemoveFromEventList>
 800bd1a:	4603      	mov	r3, r0
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d001      	beq.n	800bd24 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800bd20:	f000 fe28 	bl	800c974 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800bd24:	7bfb      	ldrb	r3, [r7, #15]
 800bd26:	3b01      	subs	r3, #1
 800bd28:	b2db      	uxtb	r3, r3
 800bd2a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bd2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	dce9      	bgt.n	800bd08 <prvUnlockQueue+0x16>
 800bd34:	e000      	b.n	800bd38 <prvUnlockQueue+0x46>
					break;
 800bd36:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	22ff      	movs	r2, #255	; 0xff
 800bd3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800bd40:	f001 fa78 	bl	800d234 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800bd44:	f001 fa46 	bl	800d1d4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bd4e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bd50:	e011      	b.n	800bd76 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	691b      	ldr	r3, [r3, #16]
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d012      	beq.n	800bd80 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	3310      	adds	r3, #16
 800bd5e:	4618      	mov	r0, r3
 800bd60:	f000 fd2e 	bl	800c7c0 <xTaskRemoveFromEventList>
 800bd64:	4603      	mov	r3, r0
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d001      	beq.n	800bd6e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800bd6a:	f000 fe03 	bl	800c974 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800bd6e:	7bbb      	ldrb	r3, [r7, #14]
 800bd70:	3b01      	subs	r3, #1
 800bd72:	b2db      	uxtb	r3, r3
 800bd74:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bd76:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	dce9      	bgt.n	800bd52 <prvUnlockQueue+0x60>
 800bd7e:	e000      	b.n	800bd82 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800bd80:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	22ff      	movs	r2, #255	; 0xff
 800bd86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800bd8a:	f001 fa53 	bl	800d234 <vPortExitCritical>
}
 800bd8e:	bf00      	nop
 800bd90:	3710      	adds	r7, #16
 800bd92:	46bd      	mov	sp, r7
 800bd94:	bd80      	pop	{r7, pc}

0800bd96 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800bd96:	b580      	push	{r7, lr}
 800bd98:	b084      	sub	sp, #16
 800bd9a:	af00      	add	r7, sp, #0
 800bd9c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bd9e:	f001 fa19 	bl	800d1d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d102      	bne.n	800bdb0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800bdaa:	2301      	movs	r3, #1
 800bdac:	60fb      	str	r3, [r7, #12]
 800bdae:	e001      	b.n	800bdb4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800bdb0:	2300      	movs	r3, #0
 800bdb2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bdb4:	f001 fa3e 	bl	800d234 <vPortExitCritical>

	return xReturn;
 800bdb8:	68fb      	ldr	r3, [r7, #12]
}
 800bdba:	4618      	mov	r0, r3
 800bdbc:	3710      	adds	r7, #16
 800bdbe:	46bd      	mov	sp, r7
 800bdc0:	bd80      	pop	{r7, pc}

0800bdc2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800bdc2:	b580      	push	{r7, lr}
 800bdc4:	b084      	sub	sp, #16
 800bdc6:	af00      	add	r7, sp, #0
 800bdc8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bdca:	f001 fa03 	bl	800d1d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bdd6:	429a      	cmp	r2, r3
 800bdd8:	d102      	bne.n	800bde0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800bdda:	2301      	movs	r3, #1
 800bddc:	60fb      	str	r3, [r7, #12]
 800bdde:	e001      	b.n	800bde4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800bde0:	2300      	movs	r3, #0
 800bde2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bde4:	f001 fa26 	bl	800d234 <vPortExitCritical>

	return xReturn;
 800bde8:	68fb      	ldr	r3, [r7, #12]
}
 800bdea:	4618      	mov	r0, r3
 800bdec:	3710      	adds	r7, #16
 800bdee:	46bd      	mov	sp, r7
 800bdf0:	bd80      	pop	{r7, pc}
	...

0800bdf4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800bdf4:	b480      	push	{r7}
 800bdf6:	b085      	sub	sp, #20
 800bdf8:	af00      	add	r7, sp, #0
 800bdfa:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bdfc:	2300      	movs	r3, #0
 800bdfe:	60fb      	str	r3, [r7, #12]
 800be00:	e016      	b.n	800be30 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800be02:	4a10      	ldr	r2, [pc, #64]	; (800be44 <vQueueUnregisterQueue+0x50>)
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	00db      	lsls	r3, r3, #3
 800be08:	4413      	add	r3, r2
 800be0a:	685b      	ldr	r3, [r3, #4]
 800be0c:	687a      	ldr	r2, [r7, #4]
 800be0e:	429a      	cmp	r2, r3
 800be10:	d10b      	bne.n	800be2a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800be12:	4a0c      	ldr	r2, [pc, #48]	; (800be44 <vQueueUnregisterQueue+0x50>)
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	2100      	movs	r1, #0
 800be18:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800be1c:	4a09      	ldr	r2, [pc, #36]	; (800be44 <vQueueUnregisterQueue+0x50>)
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	00db      	lsls	r3, r3, #3
 800be22:	4413      	add	r3, r2
 800be24:	2200      	movs	r2, #0
 800be26:	605a      	str	r2, [r3, #4]
				break;
 800be28:	e006      	b.n	800be38 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	3301      	adds	r3, #1
 800be2e:	60fb      	str	r3, [r7, #12]
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	2b07      	cmp	r3, #7
 800be34:	d9e5      	bls.n	800be02 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800be36:	bf00      	nop
 800be38:	bf00      	nop
 800be3a:	3714      	adds	r7, #20
 800be3c:	46bd      	mov	sp, r7
 800be3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be42:	4770      	bx	lr
 800be44:	24004e18 	.word	0x24004e18

0800be48 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800be48:	b580      	push	{r7, lr}
 800be4a:	b08e      	sub	sp, #56	; 0x38
 800be4c:	af04      	add	r7, sp, #16
 800be4e:	60f8      	str	r0, [r7, #12]
 800be50:	60b9      	str	r1, [r7, #8]
 800be52:	607a      	str	r2, [r7, #4]
 800be54:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800be56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d10a      	bne.n	800be72 <xTaskCreateStatic+0x2a>
	__asm volatile
 800be5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be60:	f383 8811 	msr	BASEPRI, r3
 800be64:	f3bf 8f6f 	isb	sy
 800be68:	f3bf 8f4f 	dsb	sy
 800be6c:	623b      	str	r3, [r7, #32]
}
 800be6e:	bf00      	nop
 800be70:	e7fe      	b.n	800be70 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800be72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be74:	2b00      	cmp	r3, #0
 800be76:	d10a      	bne.n	800be8e <xTaskCreateStatic+0x46>
	__asm volatile
 800be78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be7c:	f383 8811 	msr	BASEPRI, r3
 800be80:	f3bf 8f6f 	isb	sy
 800be84:	f3bf 8f4f 	dsb	sy
 800be88:	61fb      	str	r3, [r7, #28]
}
 800be8a:	bf00      	nop
 800be8c:	e7fe      	b.n	800be8c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800be8e:	2354      	movs	r3, #84	; 0x54
 800be90:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800be92:	693b      	ldr	r3, [r7, #16]
 800be94:	2b54      	cmp	r3, #84	; 0x54
 800be96:	d00a      	beq.n	800beae <xTaskCreateStatic+0x66>
	__asm volatile
 800be98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be9c:	f383 8811 	msr	BASEPRI, r3
 800bea0:	f3bf 8f6f 	isb	sy
 800bea4:	f3bf 8f4f 	dsb	sy
 800bea8:	61bb      	str	r3, [r7, #24]
}
 800beaa:	bf00      	nop
 800beac:	e7fe      	b.n	800beac <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800beae:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800beb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d01e      	beq.n	800bef4 <xTaskCreateStatic+0xac>
 800beb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d01b      	beq.n	800bef4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bebe:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800bec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bec2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bec4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800bec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bec8:	2202      	movs	r2, #2
 800beca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800bece:	2300      	movs	r3, #0
 800bed0:	9303      	str	r3, [sp, #12]
 800bed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bed4:	9302      	str	r3, [sp, #8]
 800bed6:	f107 0314 	add.w	r3, r7, #20
 800beda:	9301      	str	r3, [sp, #4]
 800bedc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bede:	9300      	str	r3, [sp, #0]
 800bee0:	683b      	ldr	r3, [r7, #0]
 800bee2:	687a      	ldr	r2, [r7, #4]
 800bee4:	68b9      	ldr	r1, [r7, #8]
 800bee6:	68f8      	ldr	r0, [r7, #12]
 800bee8:	f000 f850 	bl	800bf8c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800beec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800beee:	f000 f8d5 	bl	800c09c <prvAddNewTaskToReadyList>
 800bef2:	e001      	b.n	800bef8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800bef4:	2300      	movs	r3, #0
 800bef6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800bef8:	697b      	ldr	r3, [r7, #20]
	}
 800befa:	4618      	mov	r0, r3
 800befc:	3728      	adds	r7, #40	; 0x28
 800befe:	46bd      	mov	sp, r7
 800bf00:	bd80      	pop	{r7, pc}

0800bf02 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800bf02:	b580      	push	{r7, lr}
 800bf04:	b08c      	sub	sp, #48	; 0x30
 800bf06:	af04      	add	r7, sp, #16
 800bf08:	60f8      	str	r0, [r7, #12]
 800bf0a:	60b9      	str	r1, [r7, #8]
 800bf0c:	603b      	str	r3, [r7, #0]
 800bf0e:	4613      	mov	r3, r2
 800bf10:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800bf12:	88fb      	ldrh	r3, [r7, #6]
 800bf14:	009b      	lsls	r3, r3, #2
 800bf16:	4618      	mov	r0, r3
 800bf18:	f001 fa7e 	bl	800d418 <pvPortMalloc>
 800bf1c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800bf1e:	697b      	ldr	r3, [r7, #20]
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d00e      	beq.n	800bf42 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800bf24:	2054      	movs	r0, #84	; 0x54
 800bf26:	f001 fa77 	bl	800d418 <pvPortMalloc>
 800bf2a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800bf2c:	69fb      	ldr	r3, [r7, #28]
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d003      	beq.n	800bf3a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800bf32:	69fb      	ldr	r3, [r7, #28]
 800bf34:	697a      	ldr	r2, [r7, #20]
 800bf36:	631a      	str	r2, [r3, #48]	; 0x30
 800bf38:	e005      	b.n	800bf46 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800bf3a:	6978      	ldr	r0, [r7, #20]
 800bf3c:	f001 fb38 	bl	800d5b0 <vPortFree>
 800bf40:	e001      	b.n	800bf46 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800bf42:	2300      	movs	r3, #0
 800bf44:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800bf46:	69fb      	ldr	r3, [r7, #28]
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d017      	beq.n	800bf7c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800bf4c:	69fb      	ldr	r3, [r7, #28]
 800bf4e:	2200      	movs	r2, #0
 800bf50:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800bf54:	88fa      	ldrh	r2, [r7, #6]
 800bf56:	2300      	movs	r3, #0
 800bf58:	9303      	str	r3, [sp, #12]
 800bf5a:	69fb      	ldr	r3, [r7, #28]
 800bf5c:	9302      	str	r3, [sp, #8]
 800bf5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf60:	9301      	str	r3, [sp, #4]
 800bf62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf64:	9300      	str	r3, [sp, #0]
 800bf66:	683b      	ldr	r3, [r7, #0]
 800bf68:	68b9      	ldr	r1, [r7, #8]
 800bf6a:	68f8      	ldr	r0, [r7, #12]
 800bf6c:	f000 f80e 	bl	800bf8c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bf70:	69f8      	ldr	r0, [r7, #28]
 800bf72:	f000 f893 	bl	800c09c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800bf76:	2301      	movs	r3, #1
 800bf78:	61bb      	str	r3, [r7, #24]
 800bf7a:	e002      	b.n	800bf82 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800bf7c:	f04f 33ff 	mov.w	r3, #4294967295
 800bf80:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800bf82:	69bb      	ldr	r3, [r7, #24]
	}
 800bf84:	4618      	mov	r0, r3
 800bf86:	3720      	adds	r7, #32
 800bf88:	46bd      	mov	sp, r7
 800bf8a:	bd80      	pop	{r7, pc}

0800bf8c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800bf8c:	b580      	push	{r7, lr}
 800bf8e:	b088      	sub	sp, #32
 800bf90:	af00      	add	r7, sp, #0
 800bf92:	60f8      	str	r0, [r7, #12]
 800bf94:	60b9      	str	r1, [r7, #8]
 800bf96:	607a      	str	r2, [r7, #4]
 800bf98:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800bf9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bf9e:	6879      	ldr	r1, [r7, #4]
 800bfa0:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800bfa4:	440b      	add	r3, r1
 800bfa6:	009b      	lsls	r3, r3, #2
 800bfa8:	4413      	add	r3, r2
 800bfaa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800bfac:	69bb      	ldr	r3, [r7, #24]
 800bfae:	f023 0307 	bic.w	r3, r3, #7
 800bfb2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800bfb4:	69bb      	ldr	r3, [r7, #24]
 800bfb6:	f003 0307 	and.w	r3, r3, #7
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d00a      	beq.n	800bfd4 <prvInitialiseNewTask+0x48>
	__asm volatile
 800bfbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfc2:	f383 8811 	msr	BASEPRI, r3
 800bfc6:	f3bf 8f6f 	isb	sy
 800bfca:	f3bf 8f4f 	dsb	sy
 800bfce:	617b      	str	r3, [r7, #20]
}
 800bfd0:	bf00      	nop
 800bfd2:	e7fe      	b.n	800bfd2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800bfd4:	68bb      	ldr	r3, [r7, #8]
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d01f      	beq.n	800c01a <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bfda:	2300      	movs	r3, #0
 800bfdc:	61fb      	str	r3, [r7, #28]
 800bfde:	e012      	b.n	800c006 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800bfe0:	68ba      	ldr	r2, [r7, #8]
 800bfe2:	69fb      	ldr	r3, [r7, #28]
 800bfe4:	4413      	add	r3, r2
 800bfe6:	7819      	ldrb	r1, [r3, #0]
 800bfe8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bfea:	69fb      	ldr	r3, [r7, #28]
 800bfec:	4413      	add	r3, r2
 800bfee:	3334      	adds	r3, #52	; 0x34
 800bff0:	460a      	mov	r2, r1
 800bff2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800bff4:	68ba      	ldr	r2, [r7, #8]
 800bff6:	69fb      	ldr	r3, [r7, #28]
 800bff8:	4413      	add	r3, r2
 800bffa:	781b      	ldrb	r3, [r3, #0]
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d006      	beq.n	800c00e <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c000:	69fb      	ldr	r3, [r7, #28]
 800c002:	3301      	adds	r3, #1
 800c004:	61fb      	str	r3, [r7, #28]
 800c006:	69fb      	ldr	r3, [r7, #28]
 800c008:	2b0f      	cmp	r3, #15
 800c00a:	d9e9      	bls.n	800bfe0 <prvInitialiseNewTask+0x54>
 800c00c:	e000      	b.n	800c010 <prvInitialiseNewTask+0x84>
			{
				break;
 800c00e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c012:	2200      	movs	r2, #0
 800c014:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c018:	e003      	b.n	800c022 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c01a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c01c:	2200      	movs	r2, #0
 800c01e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c024:	2b06      	cmp	r3, #6
 800c026:	d901      	bls.n	800c02c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c028:	2306      	movs	r3, #6
 800c02a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c02c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c02e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c030:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c034:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c036:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800c038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c03a:	2200      	movs	r2, #0
 800c03c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c03e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c040:	3304      	adds	r3, #4
 800c042:	4618      	mov	r0, r3
 800c044:	f7fe fea1 	bl	800ad8a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c04a:	3318      	adds	r3, #24
 800c04c:	4618      	mov	r0, r3
 800c04e:	f7fe fe9c 	bl	800ad8a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c054:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c056:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c05a:	f1c3 0207 	rsb	r2, r3, #7
 800c05e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c060:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c064:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c066:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c06a:	2200      	movs	r2, #0
 800c06c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c06e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c070:	2200      	movs	r2, #0
 800c072:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c076:	683a      	ldr	r2, [r7, #0]
 800c078:	68f9      	ldr	r1, [r7, #12]
 800c07a:	69b8      	ldr	r0, [r7, #24]
 800c07c:	f000 ff7e 	bl	800cf7c <pxPortInitialiseStack>
 800c080:	4602      	mov	r2, r0
 800c082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c084:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d002      	beq.n	800c092 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c08c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c08e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c090:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c092:	bf00      	nop
 800c094:	3720      	adds	r7, #32
 800c096:	46bd      	mov	sp, r7
 800c098:	bd80      	pop	{r7, pc}
	...

0800c09c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c09c:	b580      	push	{r7, lr}
 800c09e:	b082      	sub	sp, #8
 800c0a0:	af00      	add	r7, sp, #0
 800c0a2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c0a4:	f001 f896 	bl	800d1d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c0a8:	4b2a      	ldr	r3, [pc, #168]	; (800c154 <prvAddNewTaskToReadyList+0xb8>)
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	3301      	adds	r3, #1
 800c0ae:	4a29      	ldr	r2, [pc, #164]	; (800c154 <prvAddNewTaskToReadyList+0xb8>)
 800c0b0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c0b2:	4b29      	ldr	r3, [pc, #164]	; (800c158 <prvAddNewTaskToReadyList+0xbc>)
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d109      	bne.n	800c0ce <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c0ba:	4a27      	ldr	r2, [pc, #156]	; (800c158 <prvAddNewTaskToReadyList+0xbc>)
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c0c0:	4b24      	ldr	r3, [pc, #144]	; (800c154 <prvAddNewTaskToReadyList+0xb8>)
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	2b01      	cmp	r3, #1
 800c0c6:	d110      	bne.n	800c0ea <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c0c8:	f000 fc78 	bl	800c9bc <prvInitialiseTaskLists>
 800c0cc:	e00d      	b.n	800c0ea <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c0ce:	4b23      	ldr	r3, [pc, #140]	; (800c15c <prvAddNewTaskToReadyList+0xc0>)
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d109      	bne.n	800c0ea <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c0d6:	4b20      	ldr	r3, [pc, #128]	; (800c158 <prvAddNewTaskToReadyList+0xbc>)
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0e0:	429a      	cmp	r2, r3
 800c0e2:	d802      	bhi.n	800c0ea <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c0e4:	4a1c      	ldr	r2, [pc, #112]	; (800c158 <prvAddNewTaskToReadyList+0xbc>)
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c0ea:	4b1d      	ldr	r3, [pc, #116]	; (800c160 <prvAddNewTaskToReadyList+0xc4>)
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	3301      	adds	r3, #1
 800c0f0:	4a1b      	ldr	r2, [pc, #108]	; (800c160 <prvAddNewTaskToReadyList+0xc4>)
 800c0f2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0f8:	2201      	movs	r2, #1
 800c0fa:	409a      	lsls	r2, r3
 800c0fc:	4b19      	ldr	r3, [pc, #100]	; (800c164 <prvAddNewTaskToReadyList+0xc8>)
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	4313      	orrs	r3, r2
 800c102:	4a18      	ldr	r2, [pc, #96]	; (800c164 <prvAddNewTaskToReadyList+0xc8>)
 800c104:	6013      	str	r3, [r2, #0]
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c10a:	4613      	mov	r3, r2
 800c10c:	009b      	lsls	r3, r3, #2
 800c10e:	4413      	add	r3, r2
 800c110:	009b      	lsls	r3, r3, #2
 800c112:	4a15      	ldr	r2, [pc, #84]	; (800c168 <prvAddNewTaskToReadyList+0xcc>)
 800c114:	441a      	add	r2, r3
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	3304      	adds	r3, #4
 800c11a:	4619      	mov	r1, r3
 800c11c:	4610      	mov	r0, r2
 800c11e:	f7fe fe41 	bl	800ada4 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c122:	f001 f887 	bl	800d234 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c126:	4b0d      	ldr	r3, [pc, #52]	; (800c15c <prvAddNewTaskToReadyList+0xc0>)
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d00e      	beq.n	800c14c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c12e:	4b0a      	ldr	r3, [pc, #40]	; (800c158 <prvAddNewTaskToReadyList+0xbc>)
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c138:	429a      	cmp	r2, r3
 800c13a:	d207      	bcs.n	800c14c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c13c:	4b0b      	ldr	r3, [pc, #44]	; (800c16c <prvAddNewTaskToReadyList+0xd0>)
 800c13e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c142:	601a      	str	r2, [r3, #0]
 800c144:	f3bf 8f4f 	dsb	sy
 800c148:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c14c:	bf00      	nop
 800c14e:	3708      	adds	r7, #8
 800c150:	46bd      	mov	sp, r7
 800c152:	bd80      	pop	{r7, pc}
 800c154:	24000854 	.word	0x24000854
 800c158:	24000754 	.word	0x24000754
 800c15c:	24000860 	.word	0x24000860
 800c160:	24000870 	.word	0x24000870
 800c164:	2400085c 	.word	0x2400085c
 800c168:	24000758 	.word	0x24000758
 800c16c:	e000ed04 	.word	0xe000ed04

0800c170 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800c170:	b580      	push	{r7, lr}
 800c172:	b084      	sub	sp, #16
 800c174:	af00      	add	r7, sp, #0
 800c176:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800c178:	f001 f82c 	bl	800d1d4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d102      	bne.n	800c188 <vTaskDelete+0x18>
 800c182:	4b39      	ldr	r3, [pc, #228]	; (800c268 <vTaskDelete+0xf8>)
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	e000      	b.n	800c18a <vTaskDelete+0x1a>
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	3304      	adds	r3, #4
 800c190:	4618      	mov	r0, r3
 800c192:	f7fe fe64 	bl	800ae5e <uxListRemove>
 800c196:	4603      	mov	r3, r0
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d115      	bne.n	800c1c8 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1a0:	4932      	ldr	r1, [pc, #200]	; (800c26c <vTaskDelete+0xfc>)
 800c1a2:	4613      	mov	r3, r2
 800c1a4:	009b      	lsls	r3, r3, #2
 800c1a6:	4413      	add	r3, r2
 800c1a8:	009b      	lsls	r3, r3, #2
 800c1aa:	440b      	add	r3, r1
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d10a      	bne.n	800c1c8 <vTaskDelete+0x58>
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1b6:	2201      	movs	r2, #1
 800c1b8:	fa02 f303 	lsl.w	r3, r2, r3
 800c1bc:	43da      	mvns	r2, r3
 800c1be:	4b2c      	ldr	r3, [pc, #176]	; (800c270 <vTaskDelete+0x100>)
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	4013      	ands	r3, r2
 800c1c4:	4a2a      	ldr	r2, [pc, #168]	; (800c270 <vTaskDelete+0x100>)
 800c1c6:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d004      	beq.n	800c1da <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	3318      	adds	r3, #24
 800c1d4:	4618      	mov	r0, r3
 800c1d6:	f7fe fe42 	bl	800ae5e <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800c1da:	4b26      	ldr	r3, [pc, #152]	; (800c274 <vTaskDelete+0x104>)
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	3301      	adds	r3, #1
 800c1e0:	4a24      	ldr	r2, [pc, #144]	; (800c274 <vTaskDelete+0x104>)
 800c1e2:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800c1e4:	4b20      	ldr	r3, [pc, #128]	; (800c268 <vTaskDelete+0xf8>)
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	68fa      	ldr	r2, [r7, #12]
 800c1ea:	429a      	cmp	r2, r3
 800c1ec:	d10b      	bne.n	800c206 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	3304      	adds	r3, #4
 800c1f2:	4619      	mov	r1, r3
 800c1f4:	4820      	ldr	r0, [pc, #128]	; (800c278 <vTaskDelete+0x108>)
 800c1f6:	f7fe fdd5 	bl	800ada4 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800c1fa:	4b20      	ldr	r3, [pc, #128]	; (800c27c <vTaskDelete+0x10c>)
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	3301      	adds	r3, #1
 800c200:	4a1e      	ldr	r2, [pc, #120]	; (800c27c <vTaskDelete+0x10c>)
 800c202:	6013      	str	r3, [r2, #0]
 800c204:	e009      	b.n	800c21a <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800c206:	4b1e      	ldr	r3, [pc, #120]	; (800c280 <vTaskDelete+0x110>)
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	3b01      	subs	r3, #1
 800c20c:	4a1c      	ldr	r2, [pc, #112]	; (800c280 <vTaskDelete+0x110>)
 800c20e:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 800c210:	68f8      	ldr	r0, [r7, #12]
 800c212:	f000 fc41 	bl	800ca98 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800c216:	f000 fc6f 	bl	800caf8 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 800c21a:	f001 f80b 	bl	800d234 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800c21e:	4b19      	ldr	r3, [pc, #100]	; (800c284 <vTaskDelete+0x114>)
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	2b00      	cmp	r3, #0
 800c224:	d01b      	beq.n	800c25e <vTaskDelete+0xee>
		{
			if( pxTCB == pxCurrentTCB )
 800c226:	4b10      	ldr	r3, [pc, #64]	; (800c268 <vTaskDelete+0xf8>)
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	68fa      	ldr	r2, [r7, #12]
 800c22c:	429a      	cmp	r2, r3
 800c22e:	d116      	bne.n	800c25e <vTaskDelete+0xee>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800c230:	4b15      	ldr	r3, [pc, #84]	; (800c288 <vTaskDelete+0x118>)
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	2b00      	cmp	r3, #0
 800c236:	d00a      	beq.n	800c24e <vTaskDelete+0xde>
	__asm volatile
 800c238:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c23c:	f383 8811 	msr	BASEPRI, r3
 800c240:	f3bf 8f6f 	isb	sy
 800c244:	f3bf 8f4f 	dsb	sy
 800c248:	60bb      	str	r3, [r7, #8]
}
 800c24a:	bf00      	nop
 800c24c:	e7fe      	b.n	800c24c <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 800c24e:	4b0f      	ldr	r3, [pc, #60]	; (800c28c <vTaskDelete+0x11c>)
 800c250:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c254:	601a      	str	r2, [r3, #0]
 800c256:	f3bf 8f4f 	dsb	sy
 800c25a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c25e:	bf00      	nop
 800c260:	3710      	adds	r7, #16
 800c262:	46bd      	mov	sp, r7
 800c264:	bd80      	pop	{r7, pc}
 800c266:	bf00      	nop
 800c268:	24000754 	.word	0x24000754
 800c26c:	24000758 	.word	0x24000758
 800c270:	2400085c 	.word	0x2400085c
 800c274:	24000870 	.word	0x24000870
 800c278:	24000828 	.word	0x24000828
 800c27c:	2400083c 	.word	0x2400083c
 800c280:	24000854 	.word	0x24000854
 800c284:	24000860 	.word	0x24000860
 800c288:	2400087c 	.word	0x2400087c
 800c28c:	e000ed04 	.word	0xe000ed04

0800c290 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c290:	b580      	push	{r7, lr}
 800c292:	b084      	sub	sp, #16
 800c294:	af00      	add	r7, sp, #0
 800c296:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c298:	2300      	movs	r3, #0
 800c29a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d017      	beq.n	800c2d2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c2a2:	4b13      	ldr	r3, [pc, #76]	; (800c2f0 <vTaskDelay+0x60>)
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d00a      	beq.n	800c2c0 <vTaskDelay+0x30>
	__asm volatile
 800c2aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2ae:	f383 8811 	msr	BASEPRI, r3
 800c2b2:	f3bf 8f6f 	isb	sy
 800c2b6:	f3bf 8f4f 	dsb	sy
 800c2ba:	60bb      	str	r3, [r7, #8]
}
 800c2bc:	bf00      	nop
 800c2be:	e7fe      	b.n	800c2be <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800c2c0:	f000 f87a 	bl	800c3b8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c2c4:	2100      	movs	r1, #0
 800c2c6:	6878      	ldr	r0, [r7, #4]
 800c2c8:	f000 fdf2 	bl	800ceb0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c2cc:	f000 f882 	bl	800c3d4 <xTaskResumeAll>
 800c2d0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c2d2:	68fb      	ldr	r3, [r7, #12]
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d107      	bne.n	800c2e8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800c2d8:	4b06      	ldr	r3, [pc, #24]	; (800c2f4 <vTaskDelay+0x64>)
 800c2da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c2de:	601a      	str	r2, [r3, #0]
 800c2e0:	f3bf 8f4f 	dsb	sy
 800c2e4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c2e8:	bf00      	nop
 800c2ea:	3710      	adds	r7, #16
 800c2ec:	46bd      	mov	sp, r7
 800c2ee:	bd80      	pop	{r7, pc}
 800c2f0:	2400087c 	.word	0x2400087c
 800c2f4:	e000ed04 	.word	0xe000ed04

0800c2f8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c2f8:	b580      	push	{r7, lr}
 800c2fa:	b08a      	sub	sp, #40	; 0x28
 800c2fc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c2fe:	2300      	movs	r3, #0
 800c300:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c302:	2300      	movs	r3, #0
 800c304:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c306:	463a      	mov	r2, r7
 800c308:	1d39      	adds	r1, r7, #4
 800c30a:	f107 0308 	add.w	r3, r7, #8
 800c30e:	4618      	mov	r0, r3
 800c310:	f7f4 fbbe 	bl	8000a90 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c314:	6839      	ldr	r1, [r7, #0]
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	68ba      	ldr	r2, [r7, #8]
 800c31a:	9202      	str	r2, [sp, #8]
 800c31c:	9301      	str	r3, [sp, #4]
 800c31e:	2300      	movs	r3, #0
 800c320:	9300      	str	r3, [sp, #0]
 800c322:	2300      	movs	r3, #0
 800c324:	460a      	mov	r2, r1
 800c326:	491e      	ldr	r1, [pc, #120]	; (800c3a0 <vTaskStartScheduler+0xa8>)
 800c328:	481e      	ldr	r0, [pc, #120]	; (800c3a4 <vTaskStartScheduler+0xac>)
 800c32a:	f7ff fd8d 	bl	800be48 <xTaskCreateStatic>
 800c32e:	4603      	mov	r3, r0
 800c330:	4a1d      	ldr	r2, [pc, #116]	; (800c3a8 <vTaskStartScheduler+0xb0>)
 800c332:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c334:	4b1c      	ldr	r3, [pc, #112]	; (800c3a8 <vTaskStartScheduler+0xb0>)
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d002      	beq.n	800c342 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c33c:	2301      	movs	r3, #1
 800c33e:	617b      	str	r3, [r7, #20]
 800c340:	e001      	b.n	800c346 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c342:	2300      	movs	r3, #0
 800c344:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c346:	697b      	ldr	r3, [r7, #20]
 800c348:	2b01      	cmp	r3, #1
 800c34a:	d116      	bne.n	800c37a <vTaskStartScheduler+0x82>
	__asm volatile
 800c34c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c350:	f383 8811 	msr	BASEPRI, r3
 800c354:	f3bf 8f6f 	isb	sy
 800c358:	f3bf 8f4f 	dsb	sy
 800c35c:	613b      	str	r3, [r7, #16]
}
 800c35e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c360:	4b12      	ldr	r3, [pc, #72]	; (800c3ac <vTaskStartScheduler+0xb4>)
 800c362:	f04f 32ff 	mov.w	r2, #4294967295
 800c366:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c368:	4b11      	ldr	r3, [pc, #68]	; (800c3b0 <vTaskStartScheduler+0xb8>)
 800c36a:	2201      	movs	r2, #1
 800c36c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c36e:	4b11      	ldr	r3, [pc, #68]	; (800c3b4 <vTaskStartScheduler+0xbc>)
 800c370:	2200      	movs	r2, #0
 800c372:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c374:	f000 fe8c 	bl	800d090 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c378:	e00e      	b.n	800c398 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c37a:	697b      	ldr	r3, [r7, #20]
 800c37c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c380:	d10a      	bne.n	800c398 <vTaskStartScheduler+0xa0>
	__asm volatile
 800c382:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c386:	f383 8811 	msr	BASEPRI, r3
 800c38a:	f3bf 8f6f 	isb	sy
 800c38e:	f3bf 8f4f 	dsb	sy
 800c392:	60fb      	str	r3, [r7, #12]
}
 800c394:	bf00      	nop
 800c396:	e7fe      	b.n	800c396 <vTaskStartScheduler+0x9e>
}
 800c398:	bf00      	nop
 800c39a:	3718      	adds	r7, #24
 800c39c:	46bd      	mov	sp, r7
 800c39e:	bd80      	pop	{r7, pc}
 800c3a0:	08023398 	.word	0x08023398
 800c3a4:	0800c98d 	.word	0x0800c98d
 800c3a8:	24000878 	.word	0x24000878
 800c3ac:	24000874 	.word	0x24000874
 800c3b0:	24000860 	.word	0x24000860
 800c3b4:	24000858 	.word	0x24000858

0800c3b8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c3b8:	b480      	push	{r7}
 800c3ba:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800c3bc:	4b04      	ldr	r3, [pc, #16]	; (800c3d0 <vTaskSuspendAll+0x18>)
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	3301      	adds	r3, #1
 800c3c2:	4a03      	ldr	r2, [pc, #12]	; (800c3d0 <vTaskSuspendAll+0x18>)
 800c3c4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800c3c6:	bf00      	nop
 800c3c8:	46bd      	mov	sp, r7
 800c3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ce:	4770      	bx	lr
 800c3d0:	2400087c 	.word	0x2400087c

0800c3d4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c3d4:	b580      	push	{r7, lr}
 800c3d6:	b084      	sub	sp, #16
 800c3d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c3da:	2300      	movs	r3, #0
 800c3dc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c3de:	2300      	movs	r3, #0
 800c3e0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c3e2:	4b41      	ldr	r3, [pc, #260]	; (800c4e8 <xTaskResumeAll+0x114>)
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d10a      	bne.n	800c400 <xTaskResumeAll+0x2c>
	__asm volatile
 800c3ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3ee:	f383 8811 	msr	BASEPRI, r3
 800c3f2:	f3bf 8f6f 	isb	sy
 800c3f6:	f3bf 8f4f 	dsb	sy
 800c3fa:	603b      	str	r3, [r7, #0]
}
 800c3fc:	bf00      	nop
 800c3fe:	e7fe      	b.n	800c3fe <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c400:	f000 fee8 	bl	800d1d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c404:	4b38      	ldr	r3, [pc, #224]	; (800c4e8 <xTaskResumeAll+0x114>)
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	3b01      	subs	r3, #1
 800c40a:	4a37      	ldr	r2, [pc, #220]	; (800c4e8 <xTaskResumeAll+0x114>)
 800c40c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c40e:	4b36      	ldr	r3, [pc, #216]	; (800c4e8 <xTaskResumeAll+0x114>)
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	2b00      	cmp	r3, #0
 800c414:	d161      	bne.n	800c4da <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c416:	4b35      	ldr	r3, [pc, #212]	; (800c4ec <xTaskResumeAll+0x118>)
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d05d      	beq.n	800c4da <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c41e:	e02e      	b.n	800c47e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c420:	4b33      	ldr	r3, [pc, #204]	; (800c4f0 <xTaskResumeAll+0x11c>)
 800c422:	68db      	ldr	r3, [r3, #12]
 800c424:	68db      	ldr	r3, [r3, #12]
 800c426:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	3318      	adds	r3, #24
 800c42c:	4618      	mov	r0, r3
 800c42e:	f7fe fd16 	bl	800ae5e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	3304      	adds	r3, #4
 800c436:	4618      	mov	r0, r3
 800c438:	f7fe fd11 	bl	800ae5e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c43c:	68fb      	ldr	r3, [r7, #12]
 800c43e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c440:	2201      	movs	r2, #1
 800c442:	409a      	lsls	r2, r3
 800c444:	4b2b      	ldr	r3, [pc, #172]	; (800c4f4 <xTaskResumeAll+0x120>)
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	4313      	orrs	r3, r2
 800c44a:	4a2a      	ldr	r2, [pc, #168]	; (800c4f4 <xTaskResumeAll+0x120>)
 800c44c:	6013      	str	r3, [r2, #0]
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c452:	4613      	mov	r3, r2
 800c454:	009b      	lsls	r3, r3, #2
 800c456:	4413      	add	r3, r2
 800c458:	009b      	lsls	r3, r3, #2
 800c45a:	4a27      	ldr	r2, [pc, #156]	; (800c4f8 <xTaskResumeAll+0x124>)
 800c45c:	441a      	add	r2, r3
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	3304      	adds	r3, #4
 800c462:	4619      	mov	r1, r3
 800c464:	4610      	mov	r0, r2
 800c466:	f7fe fc9d 	bl	800ada4 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c46e:	4b23      	ldr	r3, [pc, #140]	; (800c4fc <xTaskResumeAll+0x128>)
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c474:	429a      	cmp	r2, r3
 800c476:	d302      	bcc.n	800c47e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800c478:	4b21      	ldr	r3, [pc, #132]	; (800c500 <xTaskResumeAll+0x12c>)
 800c47a:	2201      	movs	r2, #1
 800c47c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c47e:	4b1c      	ldr	r3, [pc, #112]	; (800c4f0 <xTaskResumeAll+0x11c>)
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	2b00      	cmp	r3, #0
 800c484:	d1cc      	bne.n	800c420 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d001      	beq.n	800c490 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c48c:	f000 fb34 	bl	800caf8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800c490:	4b1c      	ldr	r3, [pc, #112]	; (800c504 <xTaskResumeAll+0x130>)
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d010      	beq.n	800c4be <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c49c:	f000 f858 	bl	800c550 <xTaskIncrementTick>
 800c4a0:	4603      	mov	r3, r0
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d002      	beq.n	800c4ac <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800c4a6:	4b16      	ldr	r3, [pc, #88]	; (800c500 <xTaskResumeAll+0x12c>)
 800c4a8:	2201      	movs	r2, #1
 800c4aa:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	3b01      	subs	r3, #1
 800c4b0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d1f1      	bne.n	800c49c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800c4b8:	4b12      	ldr	r3, [pc, #72]	; (800c504 <xTaskResumeAll+0x130>)
 800c4ba:	2200      	movs	r2, #0
 800c4bc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c4be:	4b10      	ldr	r3, [pc, #64]	; (800c500 <xTaskResumeAll+0x12c>)
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d009      	beq.n	800c4da <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c4c6:	2301      	movs	r3, #1
 800c4c8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c4ca:	4b0f      	ldr	r3, [pc, #60]	; (800c508 <xTaskResumeAll+0x134>)
 800c4cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c4d0:	601a      	str	r2, [r3, #0]
 800c4d2:	f3bf 8f4f 	dsb	sy
 800c4d6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c4da:	f000 feab 	bl	800d234 <vPortExitCritical>

	return xAlreadyYielded;
 800c4de:	68bb      	ldr	r3, [r7, #8]
}
 800c4e0:	4618      	mov	r0, r3
 800c4e2:	3710      	adds	r7, #16
 800c4e4:	46bd      	mov	sp, r7
 800c4e6:	bd80      	pop	{r7, pc}
 800c4e8:	2400087c 	.word	0x2400087c
 800c4ec:	24000854 	.word	0x24000854
 800c4f0:	24000814 	.word	0x24000814
 800c4f4:	2400085c 	.word	0x2400085c
 800c4f8:	24000758 	.word	0x24000758
 800c4fc:	24000754 	.word	0x24000754
 800c500:	24000868 	.word	0x24000868
 800c504:	24000864 	.word	0x24000864
 800c508:	e000ed04 	.word	0xe000ed04

0800c50c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c50c:	b480      	push	{r7}
 800c50e:	b083      	sub	sp, #12
 800c510:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c512:	4b05      	ldr	r3, [pc, #20]	; (800c528 <xTaskGetTickCount+0x1c>)
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c518:	687b      	ldr	r3, [r7, #4]
}
 800c51a:	4618      	mov	r0, r3
 800c51c:	370c      	adds	r7, #12
 800c51e:	46bd      	mov	sp, r7
 800c520:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c524:	4770      	bx	lr
 800c526:	bf00      	nop
 800c528:	24000858 	.word	0x24000858

0800c52c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800c52c:	b580      	push	{r7, lr}
 800c52e:	b082      	sub	sp, #8
 800c530:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c532:	f000 ff31 	bl	800d398 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800c536:	2300      	movs	r3, #0
 800c538:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800c53a:	4b04      	ldr	r3, [pc, #16]	; (800c54c <xTaskGetTickCountFromISR+0x20>)
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c540:	683b      	ldr	r3, [r7, #0]
}
 800c542:	4618      	mov	r0, r3
 800c544:	3708      	adds	r7, #8
 800c546:	46bd      	mov	sp, r7
 800c548:	bd80      	pop	{r7, pc}
 800c54a:	bf00      	nop
 800c54c:	24000858 	.word	0x24000858

0800c550 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c550:	b580      	push	{r7, lr}
 800c552:	b086      	sub	sp, #24
 800c554:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c556:	2300      	movs	r3, #0
 800c558:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c55a:	4b4e      	ldr	r3, [pc, #312]	; (800c694 <xTaskIncrementTick+0x144>)
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	2b00      	cmp	r3, #0
 800c560:	f040 808e 	bne.w	800c680 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c564:	4b4c      	ldr	r3, [pc, #304]	; (800c698 <xTaskIncrementTick+0x148>)
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	3301      	adds	r3, #1
 800c56a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c56c:	4a4a      	ldr	r2, [pc, #296]	; (800c698 <xTaskIncrementTick+0x148>)
 800c56e:	693b      	ldr	r3, [r7, #16]
 800c570:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c572:	693b      	ldr	r3, [r7, #16]
 800c574:	2b00      	cmp	r3, #0
 800c576:	d120      	bne.n	800c5ba <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800c578:	4b48      	ldr	r3, [pc, #288]	; (800c69c <xTaskIncrementTick+0x14c>)
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d00a      	beq.n	800c598 <xTaskIncrementTick+0x48>
	__asm volatile
 800c582:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c586:	f383 8811 	msr	BASEPRI, r3
 800c58a:	f3bf 8f6f 	isb	sy
 800c58e:	f3bf 8f4f 	dsb	sy
 800c592:	603b      	str	r3, [r7, #0]
}
 800c594:	bf00      	nop
 800c596:	e7fe      	b.n	800c596 <xTaskIncrementTick+0x46>
 800c598:	4b40      	ldr	r3, [pc, #256]	; (800c69c <xTaskIncrementTick+0x14c>)
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	60fb      	str	r3, [r7, #12]
 800c59e:	4b40      	ldr	r3, [pc, #256]	; (800c6a0 <xTaskIncrementTick+0x150>)
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	4a3e      	ldr	r2, [pc, #248]	; (800c69c <xTaskIncrementTick+0x14c>)
 800c5a4:	6013      	str	r3, [r2, #0]
 800c5a6:	4a3e      	ldr	r2, [pc, #248]	; (800c6a0 <xTaskIncrementTick+0x150>)
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	6013      	str	r3, [r2, #0]
 800c5ac:	4b3d      	ldr	r3, [pc, #244]	; (800c6a4 <xTaskIncrementTick+0x154>)
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	3301      	adds	r3, #1
 800c5b2:	4a3c      	ldr	r2, [pc, #240]	; (800c6a4 <xTaskIncrementTick+0x154>)
 800c5b4:	6013      	str	r3, [r2, #0]
 800c5b6:	f000 fa9f 	bl	800caf8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c5ba:	4b3b      	ldr	r3, [pc, #236]	; (800c6a8 <xTaskIncrementTick+0x158>)
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	693a      	ldr	r2, [r7, #16]
 800c5c0:	429a      	cmp	r2, r3
 800c5c2:	d348      	bcc.n	800c656 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c5c4:	4b35      	ldr	r3, [pc, #212]	; (800c69c <xTaskIncrementTick+0x14c>)
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d104      	bne.n	800c5d8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c5ce:	4b36      	ldr	r3, [pc, #216]	; (800c6a8 <xTaskIncrementTick+0x158>)
 800c5d0:	f04f 32ff 	mov.w	r2, #4294967295
 800c5d4:	601a      	str	r2, [r3, #0]
					break;
 800c5d6:	e03e      	b.n	800c656 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c5d8:	4b30      	ldr	r3, [pc, #192]	; (800c69c <xTaskIncrementTick+0x14c>)
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	68db      	ldr	r3, [r3, #12]
 800c5de:	68db      	ldr	r3, [r3, #12]
 800c5e0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c5e2:	68bb      	ldr	r3, [r7, #8]
 800c5e4:	685b      	ldr	r3, [r3, #4]
 800c5e6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c5e8:	693a      	ldr	r2, [r7, #16]
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	429a      	cmp	r2, r3
 800c5ee:	d203      	bcs.n	800c5f8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c5f0:	4a2d      	ldr	r2, [pc, #180]	; (800c6a8 <xTaskIncrementTick+0x158>)
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c5f6:	e02e      	b.n	800c656 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c5f8:	68bb      	ldr	r3, [r7, #8]
 800c5fa:	3304      	adds	r3, #4
 800c5fc:	4618      	mov	r0, r3
 800c5fe:	f7fe fc2e 	bl	800ae5e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c602:	68bb      	ldr	r3, [r7, #8]
 800c604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c606:	2b00      	cmp	r3, #0
 800c608:	d004      	beq.n	800c614 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c60a:	68bb      	ldr	r3, [r7, #8]
 800c60c:	3318      	adds	r3, #24
 800c60e:	4618      	mov	r0, r3
 800c610:	f7fe fc25 	bl	800ae5e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c614:	68bb      	ldr	r3, [r7, #8]
 800c616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c618:	2201      	movs	r2, #1
 800c61a:	409a      	lsls	r2, r3
 800c61c:	4b23      	ldr	r3, [pc, #140]	; (800c6ac <xTaskIncrementTick+0x15c>)
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	4313      	orrs	r3, r2
 800c622:	4a22      	ldr	r2, [pc, #136]	; (800c6ac <xTaskIncrementTick+0x15c>)
 800c624:	6013      	str	r3, [r2, #0]
 800c626:	68bb      	ldr	r3, [r7, #8]
 800c628:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c62a:	4613      	mov	r3, r2
 800c62c:	009b      	lsls	r3, r3, #2
 800c62e:	4413      	add	r3, r2
 800c630:	009b      	lsls	r3, r3, #2
 800c632:	4a1f      	ldr	r2, [pc, #124]	; (800c6b0 <xTaskIncrementTick+0x160>)
 800c634:	441a      	add	r2, r3
 800c636:	68bb      	ldr	r3, [r7, #8]
 800c638:	3304      	adds	r3, #4
 800c63a:	4619      	mov	r1, r3
 800c63c:	4610      	mov	r0, r2
 800c63e:	f7fe fbb1 	bl	800ada4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c642:	68bb      	ldr	r3, [r7, #8]
 800c644:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c646:	4b1b      	ldr	r3, [pc, #108]	; (800c6b4 <xTaskIncrementTick+0x164>)
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c64c:	429a      	cmp	r2, r3
 800c64e:	d3b9      	bcc.n	800c5c4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800c650:	2301      	movs	r3, #1
 800c652:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c654:	e7b6      	b.n	800c5c4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c656:	4b17      	ldr	r3, [pc, #92]	; (800c6b4 <xTaskIncrementTick+0x164>)
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c65c:	4914      	ldr	r1, [pc, #80]	; (800c6b0 <xTaskIncrementTick+0x160>)
 800c65e:	4613      	mov	r3, r2
 800c660:	009b      	lsls	r3, r3, #2
 800c662:	4413      	add	r3, r2
 800c664:	009b      	lsls	r3, r3, #2
 800c666:	440b      	add	r3, r1
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	2b01      	cmp	r3, #1
 800c66c:	d901      	bls.n	800c672 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800c66e:	2301      	movs	r3, #1
 800c670:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800c672:	4b11      	ldr	r3, [pc, #68]	; (800c6b8 <xTaskIncrementTick+0x168>)
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	2b00      	cmp	r3, #0
 800c678:	d007      	beq.n	800c68a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800c67a:	2301      	movs	r3, #1
 800c67c:	617b      	str	r3, [r7, #20]
 800c67e:	e004      	b.n	800c68a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800c680:	4b0e      	ldr	r3, [pc, #56]	; (800c6bc <xTaskIncrementTick+0x16c>)
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	3301      	adds	r3, #1
 800c686:	4a0d      	ldr	r2, [pc, #52]	; (800c6bc <xTaskIncrementTick+0x16c>)
 800c688:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800c68a:	697b      	ldr	r3, [r7, #20]
}
 800c68c:	4618      	mov	r0, r3
 800c68e:	3718      	adds	r7, #24
 800c690:	46bd      	mov	sp, r7
 800c692:	bd80      	pop	{r7, pc}
 800c694:	2400087c 	.word	0x2400087c
 800c698:	24000858 	.word	0x24000858
 800c69c:	2400080c 	.word	0x2400080c
 800c6a0:	24000810 	.word	0x24000810
 800c6a4:	2400086c 	.word	0x2400086c
 800c6a8:	24000874 	.word	0x24000874
 800c6ac:	2400085c 	.word	0x2400085c
 800c6b0:	24000758 	.word	0x24000758
 800c6b4:	24000754 	.word	0x24000754
 800c6b8:	24000868 	.word	0x24000868
 800c6bc:	24000864 	.word	0x24000864

0800c6c0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c6c0:	b480      	push	{r7}
 800c6c2:	b087      	sub	sp, #28
 800c6c4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c6c6:	4b27      	ldr	r3, [pc, #156]	; (800c764 <vTaskSwitchContext+0xa4>)
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d003      	beq.n	800c6d6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c6ce:	4b26      	ldr	r3, [pc, #152]	; (800c768 <vTaskSwitchContext+0xa8>)
 800c6d0:	2201      	movs	r2, #1
 800c6d2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c6d4:	e03f      	b.n	800c756 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800c6d6:	4b24      	ldr	r3, [pc, #144]	; (800c768 <vTaskSwitchContext+0xa8>)
 800c6d8:	2200      	movs	r2, #0
 800c6da:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c6dc:	4b23      	ldr	r3, [pc, #140]	; (800c76c <vTaskSwitchContext+0xac>)
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	fab3 f383 	clz	r3, r3
 800c6e8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800c6ea:	7afb      	ldrb	r3, [r7, #11]
 800c6ec:	f1c3 031f 	rsb	r3, r3, #31
 800c6f0:	617b      	str	r3, [r7, #20]
 800c6f2:	491f      	ldr	r1, [pc, #124]	; (800c770 <vTaskSwitchContext+0xb0>)
 800c6f4:	697a      	ldr	r2, [r7, #20]
 800c6f6:	4613      	mov	r3, r2
 800c6f8:	009b      	lsls	r3, r3, #2
 800c6fa:	4413      	add	r3, r2
 800c6fc:	009b      	lsls	r3, r3, #2
 800c6fe:	440b      	add	r3, r1
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	2b00      	cmp	r3, #0
 800c704:	d10a      	bne.n	800c71c <vTaskSwitchContext+0x5c>
	__asm volatile
 800c706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c70a:	f383 8811 	msr	BASEPRI, r3
 800c70e:	f3bf 8f6f 	isb	sy
 800c712:	f3bf 8f4f 	dsb	sy
 800c716:	607b      	str	r3, [r7, #4]
}
 800c718:	bf00      	nop
 800c71a:	e7fe      	b.n	800c71a <vTaskSwitchContext+0x5a>
 800c71c:	697a      	ldr	r2, [r7, #20]
 800c71e:	4613      	mov	r3, r2
 800c720:	009b      	lsls	r3, r3, #2
 800c722:	4413      	add	r3, r2
 800c724:	009b      	lsls	r3, r3, #2
 800c726:	4a12      	ldr	r2, [pc, #72]	; (800c770 <vTaskSwitchContext+0xb0>)
 800c728:	4413      	add	r3, r2
 800c72a:	613b      	str	r3, [r7, #16]
 800c72c:	693b      	ldr	r3, [r7, #16]
 800c72e:	685b      	ldr	r3, [r3, #4]
 800c730:	685a      	ldr	r2, [r3, #4]
 800c732:	693b      	ldr	r3, [r7, #16]
 800c734:	605a      	str	r2, [r3, #4]
 800c736:	693b      	ldr	r3, [r7, #16]
 800c738:	685a      	ldr	r2, [r3, #4]
 800c73a:	693b      	ldr	r3, [r7, #16]
 800c73c:	3308      	adds	r3, #8
 800c73e:	429a      	cmp	r2, r3
 800c740:	d104      	bne.n	800c74c <vTaskSwitchContext+0x8c>
 800c742:	693b      	ldr	r3, [r7, #16]
 800c744:	685b      	ldr	r3, [r3, #4]
 800c746:	685a      	ldr	r2, [r3, #4]
 800c748:	693b      	ldr	r3, [r7, #16]
 800c74a:	605a      	str	r2, [r3, #4]
 800c74c:	693b      	ldr	r3, [r7, #16]
 800c74e:	685b      	ldr	r3, [r3, #4]
 800c750:	68db      	ldr	r3, [r3, #12]
 800c752:	4a08      	ldr	r2, [pc, #32]	; (800c774 <vTaskSwitchContext+0xb4>)
 800c754:	6013      	str	r3, [r2, #0]
}
 800c756:	bf00      	nop
 800c758:	371c      	adds	r7, #28
 800c75a:	46bd      	mov	sp, r7
 800c75c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c760:	4770      	bx	lr
 800c762:	bf00      	nop
 800c764:	2400087c 	.word	0x2400087c
 800c768:	24000868 	.word	0x24000868
 800c76c:	2400085c 	.word	0x2400085c
 800c770:	24000758 	.word	0x24000758
 800c774:	24000754 	.word	0x24000754

0800c778 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c778:	b580      	push	{r7, lr}
 800c77a:	b084      	sub	sp, #16
 800c77c:	af00      	add	r7, sp, #0
 800c77e:	6078      	str	r0, [r7, #4]
 800c780:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	2b00      	cmp	r3, #0
 800c786:	d10a      	bne.n	800c79e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800c788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c78c:	f383 8811 	msr	BASEPRI, r3
 800c790:	f3bf 8f6f 	isb	sy
 800c794:	f3bf 8f4f 	dsb	sy
 800c798:	60fb      	str	r3, [r7, #12]
}
 800c79a:	bf00      	nop
 800c79c:	e7fe      	b.n	800c79c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c79e:	4b07      	ldr	r3, [pc, #28]	; (800c7bc <vTaskPlaceOnEventList+0x44>)
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	3318      	adds	r3, #24
 800c7a4:	4619      	mov	r1, r3
 800c7a6:	6878      	ldr	r0, [r7, #4]
 800c7a8:	f7fe fb20 	bl	800adec <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c7ac:	2101      	movs	r1, #1
 800c7ae:	6838      	ldr	r0, [r7, #0]
 800c7b0:	f000 fb7e 	bl	800ceb0 <prvAddCurrentTaskToDelayedList>
}
 800c7b4:	bf00      	nop
 800c7b6:	3710      	adds	r7, #16
 800c7b8:	46bd      	mov	sp, r7
 800c7ba:	bd80      	pop	{r7, pc}
 800c7bc:	24000754 	.word	0x24000754

0800c7c0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c7c0:	b580      	push	{r7, lr}
 800c7c2:	b086      	sub	sp, #24
 800c7c4:	af00      	add	r7, sp, #0
 800c7c6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	68db      	ldr	r3, [r3, #12]
 800c7cc:	68db      	ldr	r3, [r3, #12]
 800c7ce:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c7d0:	693b      	ldr	r3, [r7, #16]
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d10a      	bne.n	800c7ec <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800c7d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7da:	f383 8811 	msr	BASEPRI, r3
 800c7de:	f3bf 8f6f 	isb	sy
 800c7e2:	f3bf 8f4f 	dsb	sy
 800c7e6:	60fb      	str	r3, [r7, #12]
}
 800c7e8:	bf00      	nop
 800c7ea:	e7fe      	b.n	800c7ea <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c7ec:	693b      	ldr	r3, [r7, #16]
 800c7ee:	3318      	adds	r3, #24
 800c7f0:	4618      	mov	r0, r3
 800c7f2:	f7fe fb34 	bl	800ae5e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c7f6:	4b1d      	ldr	r3, [pc, #116]	; (800c86c <xTaskRemoveFromEventList+0xac>)
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d11c      	bne.n	800c838 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c7fe:	693b      	ldr	r3, [r7, #16]
 800c800:	3304      	adds	r3, #4
 800c802:	4618      	mov	r0, r3
 800c804:	f7fe fb2b 	bl	800ae5e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c808:	693b      	ldr	r3, [r7, #16]
 800c80a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c80c:	2201      	movs	r2, #1
 800c80e:	409a      	lsls	r2, r3
 800c810:	4b17      	ldr	r3, [pc, #92]	; (800c870 <xTaskRemoveFromEventList+0xb0>)
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	4313      	orrs	r3, r2
 800c816:	4a16      	ldr	r2, [pc, #88]	; (800c870 <xTaskRemoveFromEventList+0xb0>)
 800c818:	6013      	str	r3, [r2, #0]
 800c81a:	693b      	ldr	r3, [r7, #16]
 800c81c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c81e:	4613      	mov	r3, r2
 800c820:	009b      	lsls	r3, r3, #2
 800c822:	4413      	add	r3, r2
 800c824:	009b      	lsls	r3, r3, #2
 800c826:	4a13      	ldr	r2, [pc, #76]	; (800c874 <xTaskRemoveFromEventList+0xb4>)
 800c828:	441a      	add	r2, r3
 800c82a:	693b      	ldr	r3, [r7, #16]
 800c82c:	3304      	adds	r3, #4
 800c82e:	4619      	mov	r1, r3
 800c830:	4610      	mov	r0, r2
 800c832:	f7fe fab7 	bl	800ada4 <vListInsertEnd>
 800c836:	e005      	b.n	800c844 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c838:	693b      	ldr	r3, [r7, #16]
 800c83a:	3318      	adds	r3, #24
 800c83c:	4619      	mov	r1, r3
 800c83e:	480e      	ldr	r0, [pc, #56]	; (800c878 <xTaskRemoveFromEventList+0xb8>)
 800c840:	f7fe fab0 	bl	800ada4 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c844:	693b      	ldr	r3, [r7, #16]
 800c846:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c848:	4b0c      	ldr	r3, [pc, #48]	; (800c87c <xTaskRemoveFromEventList+0xbc>)
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c84e:	429a      	cmp	r2, r3
 800c850:	d905      	bls.n	800c85e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c852:	2301      	movs	r3, #1
 800c854:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c856:	4b0a      	ldr	r3, [pc, #40]	; (800c880 <xTaskRemoveFromEventList+0xc0>)
 800c858:	2201      	movs	r2, #1
 800c85a:	601a      	str	r2, [r3, #0]
 800c85c:	e001      	b.n	800c862 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800c85e:	2300      	movs	r3, #0
 800c860:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c862:	697b      	ldr	r3, [r7, #20]
}
 800c864:	4618      	mov	r0, r3
 800c866:	3718      	adds	r7, #24
 800c868:	46bd      	mov	sp, r7
 800c86a:	bd80      	pop	{r7, pc}
 800c86c:	2400087c 	.word	0x2400087c
 800c870:	2400085c 	.word	0x2400085c
 800c874:	24000758 	.word	0x24000758
 800c878:	24000814 	.word	0x24000814
 800c87c:	24000754 	.word	0x24000754
 800c880:	24000868 	.word	0x24000868

0800c884 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c884:	b480      	push	{r7}
 800c886:	b083      	sub	sp, #12
 800c888:	af00      	add	r7, sp, #0
 800c88a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c88c:	4b06      	ldr	r3, [pc, #24]	; (800c8a8 <vTaskInternalSetTimeOutState+0x24>)
 800c88e:	681a      	ldr	r2, [r3, #0]
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c894:	4b05      	ldr	r3, [pc, #20]	; (800c8ac <vTaskInternalSetTimeOutState+0x28>)
 800c896:	681a      	ldr	r2, [r3, #0]
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	605a      	str	r2, [r3, #4]
}
 800c89c:	bf00      	nop
 800c89e:	370c      	adds	r7, #12
 800c8a0:	46bd      	mov	sp, r7
 800c8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8a6:	4770      	bx	lr
 800c8a8:	2400086c 	.word	0x2400086c
 800c8ac:	24000858 	.word	0x24000858

0800c8b0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c8b0:	b580      	push	{r7, lr}
 800c8b2:	b088      	sub	sp, #32
 800c8b4:	af00      	add	r7, sp, #0
 800c8b6:	6078      	str	r0, [r7, #4]
 800c8b8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d10a      	bne.n	800c8d6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800c8c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8c4:	f383 8811 	msr	BASEPRI, r3
 800c8c8:	f3bf 8f6f 	isb	sy
 800c8cc:	f3bf 8f4f 	dsb	sy
 800c8d0:	613b      	str	r3, [r7, #16]
}
 800c8d2:	bf00      	nop
 800c8d4:	e7fe      	b.n	800c8d4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c8d6:	683b      	ldr	r3, [r7, #0]
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d10a      	bne.n	800c8f2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800c8dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8e0:	f383 8811 	msr	BASEPRI, r3
 800c8e4:	f3bf 8f6f 	isb	sy
 800c8e8:	f3bf 8f4f 	dsb	sy
 800c8ec:	60fb      	str	r3, [r7, #12]
}
 800c8ee:	bf00      	nop
 800c8f0:	e7fe      	b.n	800c8f0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800c8f2:	f000 fc6f 	bl	800d1d4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c8f6:	4b1d      	ldr	r3, [pc, #116]	; (800c96c <xTaskCheckForTimeOut+0xbc>)
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	685b      	ldr	r3, [r3, #4]
 800c900:	69ba      	ldr	r2, [r7, #24]
 800c902:	1ad3      	subs	r3, r2, r3
 800c904:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c906:	683b      	ldr	r3, [r7, #0]
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c90e:	d102      	bne.n	800c916 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c910:	2300      	movs	r3, #0
 800c912:	61fb      	str	r3, [r7, #28]
 800c914:	e023      	b.n	800c95e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	681a      	ldr	r2, [r3, #0]
 800c91a:	4b15      	ldr	r3, [pc, #84]	; (800c970 <xTaskCheckForTimeOut+0xc0>)
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	429a      	cmp	r2, r3
 800c920:	d007      	beq.n	800c932 <xTaskCheckForTimeOut+0x82>
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	685b      	ldr	r3, [r3, #4]
 800c926:	69ba      	ldr	r2, [r7, #24]
 800c928:	429a      	cmp	r2, r3
 800c92a:	d302      	bcc.n	800c932 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c92c:	2301      	movs	r3, #1
 800c92e:	61fb      	str	r3, [r7, #28]
 800c930:	e015      	b.n	800c95e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c932:	683b      	ldr	r3, [r7, #0]
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	697a      	ldr	r2, [r7, #20]
 800c938:	429a      	cmp	r2, r3
 800c93a:	d20b      	bcs.n	800c954 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c93c:	683b      	ldr	r3, [r7, #0]
 800c93e:	681a      	ldr	r2, [r3, #0]
 800c940:	697b      	ldr	r3, [r7, #20]
 800c942:	1ad2      	subs	r2, r2, r3
 800c944:	683b      	ldr	r3, [r7, #0]
 800c946:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c948:	6878      	ldr	r0, [r7, #4]
 800c94a:	f7ff ff9b 	bl	800c884 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c94e:	2300      	movs	r3, #0
 800c950:	61fb      	str	r3, [r7, #28]
 800c952:	e004      	b.n	800c95e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800c954:	683b      	ldr	r3, [r7, #0]
 800c956:	2200      	movs	r2, #0
 800c958:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c95a:	2301      	movs	r3, #1
 800c95c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c95e:	f000 fc69 	bl	800d234 <vPortExitCritical>

	return xReturn;
 800c962:	69fb      	ldr	r3, [r7, #28]
}
 800c964:	4618      	mov	r0, r3
 800c966:	3720      	adds	r7, #32
 800c968:	46bd      	mov	sp, r7
 800c96a:	bd80      	pop	{r7, pc}
 800c96c:	24000858 	.word	0x24000858
 800c970:	2400086c 	.word	0x2400086c

0800c974 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c974:	b480      	push	{r7}
 800c976:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c978:	4b03      	ldr	r3, [pc, #12]	; (800c988 <vTaskMissedYield+0x14>)
 800c97a:	2201      	movs	r2, #1
 800c97c:	601a      	str	r2, [r3, #0]
}
 800c97e:	bf00      	nop
 800c980:	46bd      	mov	sp, r7
 800c982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c986:	4770      	bx	lr
 800c988:	24000868 	.word	0x24000868

0800c98c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c98c:	b580      	push	{r7, lr}
 800c98e:	b082      	sub	sp, #8
 800c990:	af00      	add	r7, sp, #0
 800c992:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c994:	f000 f852 	bl	800ca3c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c998:	4b06      	ldr	r3, [pc, #24]	; (800c9b4 <prvIdleTask+0x28>)
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	2b01      	cmp	r3, #1
 800c99e:	d9f9      	bls.n	800c994 <prvIdleTask+0x8>
			{
				taskYIELD();
 800c9a0:	4b05      	ldr	r3, [pc, #20]	; (800c9b8 <prvIdleTask+0x2c>)
 800c9a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c9a6:	601a      	str	r2, [r3, #0]
 800c9a8:	f3bf 8f4f 	dsb	sy
 800c9ac:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c9b0:	e7f0      	b.n	800c994 <prvIdleTask+0x8>
 800c9b2:	bf00      	nop
 800c9b4:	24000758 	.word	0x24000758
 800c9b8:	e000ed04 	.word	0xe000ed04

0800c9bc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c9bc:	b580      	push	{r7, lr}
 800c9be:	b082      	sub	sp, #8
 800c9c0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c9c2:	2300      	movs	r3, #0
 800c9c4:	607b      	str	r3, [r7, #4]
 800c9c6:	e00c      	b.n	800c9e2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c9c8:	687a      	ldr	r2, [r7, #4]
 800c9ca:	4613      	mov	r3, r2
 800c9cc:	009b      	lsls	r3, r3, #2
 800c9ce:	4413      	add	r3, r2
 800c9d0:	009b      	lsls	r3, r3, #2
 800c9d2:	4a12      	ldr	r2, [pc, #72]	; (800ca1c <prvInitialiseTaskLists+0x60>)
 800c9d4:	4413      	add	r3, r2
 800c9d6:	4618      	mov	r0, r3
 800c9d8:	f7fe f9b7 	bl	800ad4a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	3301      	adds	r3, #1
 800c9e0:	607b      	str	r3, [r7, #4]
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	2b06      	cmp	r3, #6
 800c9e6:	d9ef      	bls.n	800c9c8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c9e8:	480d      	ldr	r0, [pc, #52]	; (800ca20 <prvInitialiseTaskLists+0x64>)
 800c9ea:	f7fe f9ae 	bl	800ad4a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c9ee:	480d      	ldr	r0, [pc, #52]	; (800ca24 <prvInitialiseTaskLists+0x68>)
 800c9f0:	f7fe f9ab 	bl	800ad4a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c9f4:	480c      	ldr	r0, [pc, #48]	; (800ca28 <prvInitialiseTaskLists+0x6c>)
 800c9f6:	f7fe f9a8 	bl	800ad4a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c9fa:	480c      	ldr	r0, [pc, #48]	; (800ca2c <prvInitialiseTaskLists+0x70>)
 800c9fc:	f7fe f9a5 	bl	800ad4a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ca00:	480b      	ldr	r0, [pc, #44]	; (800ca30 <prvInitialiseTaskLists+0x74>)
 800ca02:	f7fe f9a2 	bl	800ad4a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ca06:	4b0b      	ldr	r3, [pc, #44]	; (800ca34 <prvInitialiseTaskLists+0x78>)
 800ca08:	4a05      	ldr	r2, [pc, #20]	; (800ca20 <prvInitialiseTaskLists+0x64>)
 800ca0a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ca0c:	4b0a      	ldr	r3, [pc, #40]	; (800ca38 <prvInitialiseTaskLists+0x7c>)
 800ca0e:	4a05      	ldr	r2, [pc, #20]	; (800ca24 <prvInitialiseTaskLists+0x68>)
 800ca10:	601a      	str	r2, [r3, #0]
}
 800ca12:	bf00      	nop
 800ca14:	3708      	adds	r7, #8
 800ca16:	46bd      	mov	sp, r7
 800ca18:	bd80      	pop	{r7, pc}
 800ca1a:	bf00      	nop
 800ca1c:	24000758 	.word	0x24000758
 800ca20:	240007e4 	.word	0x240007e4
 800ca24:	240007f8 	.word	0x240007f8
 800ca28:	24000814 	.word	0x24000814
 800ca2c:	24000828 	.word	0x24000828
 800ca30:	24000840 	.word	0x24000840
 800ca34:	2400080c 	.word	0x2400080c
 800ca38:	24000810 	.word	0x24000810

0800ca3c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ca3c:	b580      	push	{r7, lr}
 800ca3e:	b082      	sub	sp, #8
 800ca40:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ca42:	e019      	b.n	800ca78 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ca44:	f000 fbc6 	bl	800d1d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ca48:	4b10      	ldr	r3, [pc, #64]	; (800ca8c <prvCheckTasksWaitingTermination+0x50>)
 800ca4a:	68db      	ldr	r3, [r3, #12]
 800ca4c:	68db      	ldr	r3, [r3, #12]
 800ca4e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	3304      	adds	r3, #4
 800ca54:	4618      	mov	r0, r3
 800ca56:	f7fe fa02 	bl	800ae5e <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ca5a:	4b0d      	ldr	r3, [pc, #52]	; (800ca90 <prvCheckTasksWaitingTermination+0x54>)
 800ca5c:	681b      	ldr	r3, [r3, #0]
 800ca5e:	3b01      	subs	r3, #1
 800ca60:	4a0b      	ldr	r2, [pc, #44]	; (800ca90 <prvCheckTasksWaitingTermination+0x54>)
 800ca62:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ca64:	4b0b      	ldr	r3, [pc, #44]	; (800ca94 <prvCheckTasksWaitingTermination+0x58>)
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	3b01      	subs	r3, #1
 800ca6a:	4a0a      	ldr	r2, [pc, #40]	; (800ca94 <prvCheckTasksWaitingTermination+0x58>)
 800ca6c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ca6e:	f000 fbe1 	bl	800d234 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ca72:	6878      	ldr	r0, [r7, #4]
 800ca74:	f000 f810 	bl	800ca98 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ca78:	4b06      	ldr	r3, [pc, #24]	; (800ca94 <prvCheckTasksWaitingTermination+0x58>)
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d1e1      	bne.n	800ca44 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ca80:	bf00      	nop
 800ca82:	bf00      	nop
 800ca84:	3708      	adds	r7, #8
 800ca86:	46bd      	mov	sp, r7
 800ca88:	bd80      	pop	{r7, pc}
 800ca8a:	bf00      	nop
 800ca8c:	24000828 	.word	0x24000828
 800ca90:	24000854 	.word	0x24000854
 800ca94:	2400083c 	.word	0x2400083c

0800ca98 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ca98:	b580      	push	{r7, lr}
 800ca9a:	b084      	sub	sp, #16
 800ca9c:	af00      	add	r7, sp, #0
 800ca9e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d108      	bne.n	800cabc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800caae:	4618      	mov	r0, r3
 800cab0:	f000 fd7e 	bl	800d5b0 <vPortFree>
				vPortFree( pxTCB );
 800cab4:	6878      	ldr	r0, [r7, #4]
 800cab6:	f000 fd7b 	bl	800d5b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800caba:	e018      	b.n	800caee <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800cac2:	2b01      	cmp	r3, #1
 800cac4:	d103      	bne.n	800cace <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800cac6:	6878      	ldr	r0, [r7, #4]
 800cac8:	f000 fd72 	bl	800d5b0 <vPortFree>
	}
 800cacc:	e00f      	b.n	800caee <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800cad4:	2b02      	cmp	r3, #2
 800cad6:	d00a      	beq.n	800caee <prvDeleteTCB+0x56>
	__asm volatile
 800cad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cadc:	f383 8811 	msr	BASEPRI, r3
 800cae0:	f3bf 8f6f 	isb	sy
 800cae4:	f3bf 8f4f 	dsb	sy
 800cae8:	60fb      	str	r3, [r7, #12]
}
 800caea:	bf00      	nop
 800caec:	e7fe      	b.n	800caec <prvDeleteTCB+0x54>
	}
 800caee:	bf00      	nop
 800caf0:	3710      	adds	r7, #16
 800caf2:	46bd      	mov	sp, r7
 800caf4:	bd80      	pop	{r7, pc}
	...

0800caf8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800caf8:	b480      	push	{r7}
 800cafa:	b083      	sub	sp, #12
 800cafc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cafe:	4b0c      	ldr	r3, [pc, #48]	; (800cb30 <prvResetNextTaskUnblockTime+0x38>)
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	d104      	bne.n	800cb12 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800cb08:	4b0a      	ldr	r3, [pc, #40]	; (800cb34 <prvResetNextTaskUnblockTime+0x3c>)
 800cb0a:	f04f 32ff 	mov.w	r2, #4294967295
 800cb0e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800cb10:	e008      	b.n	800cb24 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cb12:	4b07      	ldr	r3, [pc, #28]	; (800cb30 <prvResetNextTaskUnblockTime+0x38>)
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	68db      	ldr	r3, [r3, #12]
 800cb18:	68db      	ldr	r3, [r3, #12]
 800cb1a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	685b      	ldr	r3, [r3, #4]
 800cb20:	4a04      	ldr	r2, [pc, #16]	; (800cb34 <prvResetNextTaskUnblockTime+0x3c>)
 800cb22:	6013      	str	r3, [r2, #0]
}
 800cb24:	bf00      	nop
 800cb26:	370c      	adds	r7, #12
 800cb28:	46bd      	mov	sp, r7
 800cb2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb2e:	4770      	bx	lr
 800cb30:	2400080c 	.word	0x2400080c
 800cb34:	24000874 	.word	0x24000874

0800cb38 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800cb38:	b480      	push	{r7}
 800cb3a:	b083      	sub	sp, #12
 800cb3c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800cb3e:	4b0b      	ldr	r3, [pc, #44]	; (800cb6c <xTaskGetSchedulerState+0x34>)
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d102      	bne.n	800cb4c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800cb46:	2301      	movs	r3, #1
 800cb48:	607b      	str	r3, [r7, #4]
 800cb4a:	e008      	b.n	800cb5e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cb4c:	4b08      	ldr	r3, [pc, #32]	; (800cb70 <xTaskGetSchedulerState+0x38>)
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d102      	bne.n	800cb5a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800cb54:	2302      	movs	r3, #2
 800cb56:	607b      	str	r3, [r7, #4]
 800cb58:	e001      	b.n	800cb5e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800cb5a:	2300      	movs	r3, #0
 800cb5c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800cb5e:	687b      	ldr	r3, [r7, #4]
	}
 800cb60:	4618      	mov	r0, r3
 800cb62:	370c      	adds	r7, #12
 800cb64:	46bd      	mov	sp, r7
 800cb66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb6a:	4770      	bx	lr
 800cb6c:	24000860 	.word	0x24000860
 800cb70:	2400087c 	.word	0x2400087c

0800cb74 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800cb74:	b580      	push	{r7, lr}
 800cb76:	b084      	sub	sp, #16
 800cb78:	af00      	add	r7, sp, #0
 800cb7a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800cb80:	2300      	movs	r3, #0
 800cb82:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d05e      	beq.n	800cc48 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800cb8a:	68bb      	ldr	r3, [r7, #8]
 800cb8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb8e:	4b31      	ldr	r3, [pc, #196]	; (800cc54 <xTaskPriorityInherit+0xe0>)
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb94:	429a      	cmp	r2, r3
 800cb96:	d24e      	bcs.n	800cc36 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800cb98:	68bb      	ldr	r3, [r7, #8]
 800cb9a:	699b      	ldr	r3, [r3, #24]
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	db06      	blt.n	800cbae <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cba0:	4b2c      	ldr	r3, [pc, #176]	; (800cc54 <xTaskPriorityInherit+0xe0>)
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cba6:	f1c3 0207 	rsb	r2, r3, #7
 800cbaa:	68bb      	ldr	r3, [r7, #8]
 800cbac:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800cbae:	68bb      	ldr	r3, [r7, #8]
 800cbb0:	6959      	ldr	r1, [r3, #20]
 800cbb2:	68bb      	ldr	r3, [r7, #8]
 800cbb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cbb6:	4613      	mov	r3, r2
 800cbb8:	009b      	lsls	r3, r3, #2
 800cbba:	4413      	add	r3, r2
 800cbbc:	009b      	lsls	r3, r3, #2
 800cbbe:	4a26      	ldr	r2, [pc, #152]	; (800cc58 <xTaskPriorityInherit+0xe4>)
 800cbc0:	4413      	add	r3, r2
 800cbc2:	4299      	cmp	r1, r3
 800cbc4:	d12f      	bne.n	800cc26 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cbc6:	68bb      	ldr	r3, [r7, #8]
 800cbc8:	3304      	adds	r3, #4
 800cbca:	4618      	mov	r0, r3
 800cbcc:	f7fe f947 	bl	800ae5e <uxListRemove>
 800cbd0:	4603      	mov	r3, r0
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d10a      	bne.n	800cbec <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800cbd6:	68bb      	ldr	r3, [r7, #8]
 800cbd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbda:	2201      	movs	r2, #1
 800cbdc:	fa02 f303 	lsl.w	r3, r2, r3
 800cbe0:	43da      	mvns	r2, r3
 800cbe2:	4b1e      	ldr	r3, [pc, #120]	; (800cc5c <xTaskPriorityInherit+0xe8>)
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	4013      	ands	r3, r2
 800cbe8:	4a1c      	ldr	r2, [pc, #112]	; (800cc5c <xTaskPriorityInherit+0xe8>)
 800cbea:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800cbec:	4b19      	ldr	r3, [pc, #100]	; (800cc54 <xTaskPriorityInherit+0xe0>)
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cbf2:	68bb      	ldr	r3, [r7, #8]
 800cbf4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800cbf6:	68bb      	ldr	r3, [r7, #8]
 800cbf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbfa:	2201      	movs	r2, #1
 800cbfc:	409a      	lsls	r2, r3
 800cbfe:	4b17      	ldr	r3, [pc, #92]	; (800cc5c <xTaskPriorityInherit+0xe8>)
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	4313      	orrs	r3, r2
 800cc04:	4a15      	ldr	r2, [pc, #84]	; (800cc5c <xTaskPriorityInherit+0xe8>)
 800cc06:	6013      	str	r3, [r2, #0]
 800cc08:	68bb      	ldr	r3, [r7, #8]
 800cc0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc0c:	4613      	mov	r3, r2
 800cc0e:	009b      	lsls	r3, r3, #2
 800cc10:	4413      	add	r3, r2
 800cc12:	009b      	lsls	r3, r3, #2
 800cc14:	4a10      	ldr	r2, [pc, #64]	; (800cc58 <xTaskPriorityInherit+0xe4>)
 800cc16:	441a      	add	r2, r3
 800cc18:	68bb      	ldr	r3, [r7, #8]
 800cc1a:	3304      	adds	r3, #4
 800cc1c:	4619      	mov	r1, r3
 800cc1e:	4610      	mov	r0, r2
 800cc20:	f7fe f8c0 	bl	800ada4 <vListInsertEnd>
 800cc24:	e004      	b.n	800cc30 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800cc26:	4b0b      	ldr	r3, [pc, #44]	; (800cc54 <xTaskPriorityInherit+0xe0>)
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc2c:	68bb      	ldr	r3, [r7, #8]
 800cc2e:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800cc30:	2301      	movs	r3, #1
 800cc32:	60fb      	str	r3, [r7, #12]
 800cc34:	e008      	b.n	800cc48 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800cc36:	68bb      	ldr	r3, [r7, #8]
 800cc38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cc3a:	4b06      	ldr	r3, [pc, #24]	; (800cc54 <xTaskPriorityInherit+0xe0>)
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc40:	429a      	cmp	r2, r3
 800cc42:	d201      	bcs.n	800cc48 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800cc44:	2301      	movs	r3, #1
 800cc46:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800cc48:	68fb      	ldr	r3, [r7, #12]
	}
 800cc4a:	4618      	mov	r0, r3
 800cc4c:	3710      	adds	r7, #16
 800cc4e:	46bd      	mov	sp, r7
 800cc50:	bd80      	pop	{r7, pc}
 800cc52:	bf00      	nop
 800cc54:	24000754 	.word	0x24000754
 800cc58:	24000758 	.word	0x24000758
 800cc5c:	2400085c 	.word	0x2400085c

0800cc60 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800cc60:	b580      	push	{r7, lr}
 800cc62:	b086      	sub	sp, #24
 800cc64:	af00      	add	r7, sp, #0
 800cc66:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800cc6c:	2300      	movs	r3, #0
 800cc6e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d06e      	beq.n	800cd54 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800cc76:	4b3a      	ldr	r3, [pc, #232]	; (800cd60 <xTaskPriorityDisinherit+0x100>)
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	693a      	ldr	r2, [r7, #16]
 800cc7c:	429a      	cmp	r2, r3
 800cc7e:	d00a      	beq.n	800cc96 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800cc80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc84:	f383 8811 	msr	BASEPRI, r3
 800cc88:	f3bf 8f6f 	isb	sy
 800cc8c:	f3bf 8f4f 	dsb	sy
 800cc90:	60fb      	str	r3, [r7, #12]
}
 800cc92:	bf00      	nop
 800cc94:	e7fe      	b.n	800cc94 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800cc96:	693b      	ldr	r3, [r7, #16]
 800cc98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d10a      	bne.n	800ccb4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800cc9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cca2:	f383 8811 	msr	BASEPRI, r3
 800cca6:	f3bf 8f6f 	isb	sy
 800ccaa:	f3bf 8f4f 	dsb	sy
 800ccae:	60bb      	str	r3, [r7, #8]
}
 800ccb0:	bf00      	nop
 800ccb2:	e7fe      	b.n	800ccb2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800ccb4:	693b      	ldr	r3, [r7, #16]
 800ccb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ccb8:	1e5a      	subs	r2, r3, #1
 800ccba:	693b      	ldr	r3, [r7, #16]
 800ccbc:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ccbe:	693b      	ldr	r3, [r7, #16]
 800ccc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ccc2:	693b      	ldr	r3, [r7, #16]
 800ccc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ccc6:	429a      	cmp	r2, r3
 800ccc8:	d044      	beq.n	800cd54 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ccca:	693b      	ldr	r3, [r7, #16]
 800cccc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d140      	bne.n	800cd54 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ccd2:	693b      	ldr	r3, [r7, #16]
 800ccd4:	3304      	adds	r3, #4
 800ccd6:	4618      	mov	r0, r3
 800ccd8:	f7fe f8c1 	bl	800ae5e <uxListRemove>
 800ccdc:	4603      	mov	r3, r0
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d115      	bne.n	800cd0e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800cce2:	693b      	ldr	r3, [r7, #16]
 800cce4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cce6:	491f      	ldr	r1, [pc, #124]	; (800cd64 <xTaskPriorityDisinherit+0x104>)
 800cce8:	4613      	mov	r3, r2
 800ccea:	009b      	lsls	r3, r3, #2
 800ccec:	4413      	add	r3, r2
 800ccee:	009b      	lsls	r3, r3, #2
 800ccf0:	440b      	add	r3, r1
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	d10a      	bne.n	800cd0e <xTaskPriorityDisinherit+0xae>
 800ccf8:	693b      	ldr	r3, [r7, #16]
 800ccfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ccfc:	2201      	movs	r2, #1
 800ccfe:	fa02 f303 	lsl.w	r3, r2, r3
 800cd02:	43da      	mvns	r2, r3
 800cd04:	4b18      	ldr	r3, [pc, #96]	; (800cd68 <xTaskPriorityDisinherit+0x108>)
 800cd06:	681b      	ldr	r3, [r3, #0]
 800cd08:	4013      	ands	r3, r2
 800cd0a:	4a17      	ldr	r2, [pc, #92]	; (800cd68 <xTaskPriorityDisinherit+0x108>)
 800cd0c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800cd0e:	693b      	ldr	r3, [r7, #16]
 800cd10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cd12:	693b      	ldr	r3, [r7, #16]
 800cd14:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cd16:	693b      	ldr	r3, [r7, #16]
 800cd18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd1a:	f1c3 0207 	rsb	r2, r3, #7
 800cd1e:	693b      	ldr	r3, [r7, #16]
 800cd20:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800cd22:	693b      	ldr	r3, [r7, #16]
 800cd24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd26:	2201      	movs	r2, #1
 800cd28:	409a      	lsls	r2, r3
 800cd2a:	4b0f      	ldr	r3, [pc, #60]	; (800cd68 <xTaskPriorityDisinherit+0x108>)
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	4313      	orrs	r3, r2
 800cd30:	4a0d      	ldr	r2, [pc, #52]	; (800cd68 <xTaskPriorityDisinherit+0x108>)
 800cd32:	6013      	str	r3, [r2, #0]
 800cd34:	693b      	ldr	r3, [r7, #16]
 800cd36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd38:	4613      	mov	r3, r2
 800cd3a:	009b      	lsls	r3, r3, #2
 800cd3c:	4413      	add	r3, r2
 800cd3e:	009b      	lsls	r3, r3, #2
 800cd40:	4a08      	ldr	r2, [pc, #32]	; (800cd64 <xTaskPriorityDisinherit+0x104>)
 800cd42:	441a      	add	r2, r3
 800cd44:	693b      	ldr	r3, [r7, #16]
 800cd46:	3304      	adds	r3, #4
 800cd48:	4619      	mov	r1, r3
 800cd4a:	4610      	mov	r0, r2
 800cd4c:	f7fe f82a 	bl	800ada4 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800cd50:	2301      	movs	r3, #1
 800cd52:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800cd54:	697b      	ldr	r3, [r7, #20]
	}
 800cd56:	4618      	mov	r0, r3
 800cd58:	3718      	adds	r7, #24
 800cd5a:	46bd      	mov	sp, r7
 800cd5c:	bd80      	pop	{r7, pc}
 800cd5e:	bf00      	nop
 800cd60:	24000754 	.word	0x24000754
 800cd64:	24000758 	.word	0x24000758
 800cd68:	2400085c 	.word	0x2400085c

0800cd6c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800cd6c:	b580      	push	{r7, lr}
 800cd6e:	b088      	sub	sp, #32
 800cd70:	af00      	add	r7, sp, #0
 800cd72:	6078      	str	r0, [r7, #4]
 800cd74:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800cd7a:	2301      	movs	r3, #1
 800cd7c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d077      	beq.n	800ce74 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800cd84:	69bb      	ldr	r3, [r7, #24]
 800cd86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d10a      	bne.n	800cda2 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800cd8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd90:	f383 8811 	msr	BASEPRI, r3
 800cd94:	f3bf 8f6f 	isb	sy
 800cd98:	f3bf 8f4f 	dsb	sy
 800cd9c:	60fb      	str	r3, [r7, #12]
}
 800cd9e:	bf00      	nop
 800cda0:	e7fe      	b.n	800cda0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800cda2:	69bb      	ldr	r3, [r7, #24]
 800cda4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cda6:	683a      	ldr	r2, [r7, #0]
 800cda8:	429a      	cmp	r2, r3
 800cdaa:	d902      	bls.n	800cdb2 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800cdac:	683b      	ldr	r3, [r7, #0]
 800cdae:	61fb      	str	r3, [r7, #28]
 800cdb0:	e002      	b.n	800cdb8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800cdb2:	69bb      	ldr	r3, [r7, #24]
 800cdb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cdb6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800cdb8:	69bb      	ldr	r3, [r7, #24]
 800cdba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdbc:	69fa      	ldr	r2, [r7, #28]
 800cdbe:	429a      	cmp	r2, r3
 800cdc0:	d058      	beq.n	800ce74 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800cdc2:	69bb      	ldr	r3, [r7, #24]
 800cdc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cdc6:	697a      	ldr	r2, [r7, #20]
 800cdc8:	429a      	cmp	r2, r3
 800cdca:	d153      	bne.n	800ce74 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800cdcc:	4b2b      	ldr	r3, [pc, #172]	; (800ce7c <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	69ba      	ldr	r2, [r7, #24]
 800cdd2:	429a      	cmp	r2, r3
 800cdd4:	d10a      	bne.n	800cdec <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800cdd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdda:	f383 8811 	msr	BASEPRI, r3
 800cdde:	f3bf 8f6f 	isb	sy
 800cde2:	f3bf 8f4f 	dsb	sy
 800cde6:	60bb      	str	r3, [r7, #8]
}
 800cde8:	bf00      	nop
 800cdea:	e7fe      	b.n	800cdea <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800cdec:	69bb      	ldr	r3, [r7, #24]
 800cdee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdf0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800cdf2:	69bb      	ldr	r3, [r7, #24]
 800cdf4:	69fa      	ldr	r2, [r7, #28]
 800cdf6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800cdf8:	69bb      	ldr	r3, [r7, #24]
 800cdfa:	699b      	ldr	r3, [r3, #24]
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	db04      	blt.n	800ce0a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ce00:	69fb      	ldr	r3, [r7, #28]
 800ce02:	f1c3 0207 	rsb	r2, r3, #7
 800ce06:	69bb      	ldr	r3, [r7, #24]
 800ce08:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ce0a:	69bb      	ldr	r3, [r7, #24]
 800ce0c:	6959      	ldr	r1, [r3, #20]
 800ce0e:	693a      	ldr	r2, [r7, #16]
 800ce10:	4613      	mov	r3, r2
 800ce12:	009b      	lsls	r3, r3, #2
 800ce14:	4413      	add	r3, r2
 800ce16:	009b      	lsls	r3, r3, #2
 800ce18:	4a19      	ldr	r2, [pc, #100]	; (800ce80 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800ce1a:	4413      	add	r3, r2
 800ce1c:	4299      	cmp	r1, r3
 800ce1e:	d129      	bne.n	800ce74 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ce20:	69bb      	ldr	r3, [r7, #24]
 800ce22:	3304      	adds	r3, #4
 800ce24:	4618      	mov	r0, r3
 800ce26:	f7fe f81a 	bl	800ae5e <uxListRemove>
 800ce2a:	4603      	mov	r3, r0
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	d10a      	bne.n	800ce46 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800ce30:	69bb      	ldr	r3, [r7, #24]
 800ce32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce34:	2201      	movs	r2, #1
 800ce36:	fa02 f303 	lsl.w	r3, r2, r3
 800ce3a:	43da      	mvns	r2, r3
 800ce3c:	4b11      	ldr	r3, [pc, #68]	; (800ce84 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	4013      	ands	r3, r2
 800ce42:	4a10      	ldr	r2, [pc, #64]	; (800ce84 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800ce44:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800ce46:	69bb      	ldr	r3, [r7, #24]
 800ce48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce4a:	2201      	movs	r2, #1
 800ce4c:	409a      	lsls	r2, r3
 800ce4e:	4b0d      	ldr	r3, [pc, #52]	; (800ce84 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	4313      	orrs	r3, r2
 800ce54:	4a0b      	ldr	r2, [pc, #44]	; (800ce84 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800ce56:	6013      	str	r3, [r2, #0]
 800ce58:	69bb      	ldr	r3, [r7, #24]
 800ce5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce5c:	4613      	mov	r3, r2
 800ce5e:	009b      	lsls	r3, r3, #2
 800ce60:	4413      	add	r3, r2
 800ce62:	009b      	lsls	r3, r3, #2
 800ce64:	4a06      	ldr	r2, [pc, #24]	; (800ce80 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800ce66:	441a      	add	r2, r3
 800ce68:	69bb      	ldr	r3, [r7, #24]
 800ce6a:	3304      	adds	r3, #4
 800ce6c:	4619      	mov	r1, r3
 800ce6e:	4610      	mov	r0, r2
 800ce70:	f7fd ff98 	bl	800ada4 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ce74:	bf00      	nop
 800ce76:	3720      	adds	r7, #32
 800ce78:	46bd      	mov	sp, r7
 800ce7a:	bd80      	pop	{r7, pc}
 800ce7c:	24000754 	.word	0x24000754
 800ce80:	24000758 	.word	0x24000758
 800ce84:	2400085c 	.word	0x2400085c

0800ce88 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800ce88:	b480      	push	{r7}
 800ce8a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800ce8c:	4b07      	ldr	r3, [pc, #28]	; (800ceac <pvTaskIncrementMutexHeldCount+0x24>)
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	d004      	beq.n	800ce9e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800ce94:	4b05      	ldr	r3, [pc, #20]	; (800ceac <pvTaskIncrementMutexHeldCount+0x24>)
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ce9a:	3201      	adds	r2, #1
 800ce9c:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800ce9e:	4b03      	ldr	r3, [pc, #12]	; (800ceac <pvTaskIncrementMutexHeldCount+0x24>)
 800cea0:	681b      	ldr	r3, [r3, #0]
	}
 800cea2:	4618      	mov	r0, r3
 800cea4:	46bd      	mov	sp, r7
 800cea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceaa:	4770      	bx	lr
 800ceac:	24000754 	.word	0x24000754

0800ceb0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ceb0:	b580      	push	{r7, lr}
 800ceb2:	b084      	sub	sp, #16
 800ceb4:	af00      	add	r7, sp, #0
 800ceb6:	6078      	str	r0, [r7, #4]
 800ceb8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ceba:	4b29      	ldr	r3, [pc, #164]	; (800cf60 <prvAddCurrentTaskToDelayedList+0xb0>)
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cec0:	4b28      	ldr	r3, [pc, #160]	; (800cf64 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	3304      	adds	r3, #4
 800cec6:	4618      	mov	r0, r3
 800cec8:	f7fd ffc9 	bl	800ae5e <uxListRemove>
 800cecc:	4603      	mov	r3, r0
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d10b      	bne.n	800ceea <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800ced2:	4b24      	ldr	r3, [pc, #144]	; (800cf64 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ced4:	681b      	ldr	r3, [r3, #0]
 800ced6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ced8:	2201      	movs	r2, #1
 800ceda:	fa02 f303 	lsl.w	r3, r2, r3
 800cede:	43da      	mvns	r2, r3
 800cee0:	4b21      	ldr	r3, [pc, #132]	; (800cf68 <prvAddCurrentTaskToDelayedList+0xb8>)
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	4013      	ands	r3, r2
 800cee6:	4a20      	ldr	r2, [pc, #128]	; (800cf68 <prvAddCurrentTaskToDelayedList+0xb8>)
 800cee8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cef0:	d10a      	bne.n	800cf08 <prvAddCurrentTaskToDelayedList+0x58>
 800cef2:	683b      	ldr	r3, [r7, #0]
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d007      	beq.n	800cf08 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cef8:	4b1a      	ldr	r3, [pc, #104]	; (800cf64 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cefa:	681b      	ldr	r3, [r3, #0]
 800cefc:	3304      	adds	r3, #4
 800cefe:	4619      	mov	r1, r3
 800cf00:	481a      	ldr	r0, [pc, #104]	; (800cf6c <prvAddCurrentTaskToDelayedList+0xbc>)
 800cf02:	f7fd ff4f 	bl	800ada4 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800cf06:	e026      	b.n	800cf56 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800cf08:	68fa      	ldr	r2, [r7, #12]
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	4413      	add	r3, r2
 800cf0e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800cf10:	4b14      	ldr	r3, [pc, #80]	; (800cf64 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	68ba      	ldr	r2, [r7, #8]
 800cf16:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800cf18:	68ba      	ldr	r2, [r7, #8]
 800cf1a:	68fb      	ldr	r3, [r7, #12]
 800cf1c:	429a      	cmp	r2, r3
 800cf1e:	d209      	bcs.n	800cf34 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cf20:	4b13      	ldr	r3, [pc, #76]	; (800cf70 <prvAddCurrentTaskToDelayedList+0xc0>)
 800cf22:	681a      	ldr	r2, [r3, #0]
 800cf24:	4b0f      	ldr	r3, [pc, #60]	; (800cf64 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	3304      	adds	r3, #4
 800cf2a:	4619      	mov	r1, r3
 800cf2c:	4610      	mov	r0, r2
 800cf2e:	f7fd ff5d 	bl	800adec <vListInsert>
}
 800cf32:	e010      	b.n	800cf56 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cf34:	4b0f      	ldr	r3, [pc, #60]	; (800cf74 <prvAddCurrentTaskToDelayedList+0xc4>)
 800cf36:	681a      	ldr	r2, [r3, #0]
 800cf38:	4b0a      	ldr	r3, [pc, #40]	; (800cf64 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	3304      	adds	r3, #4
 800cf3e:	4619      	mov	r1, r3
 800cf40:	4610      	mov	r0, r2
 800cf42:	f7fd ff53 	bl	800adec <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800cf46:	4b0c      	ldr	r3, [pc, #48]	; (800cf78 <prvAddCurrentTaskToDelayedList+0xc8>)
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	68ba      	ldr	r2, [r7, #8]
 800cf4c:	429a      	cmp	r2, r3
 800cf4e:	d202      	bcs.n	800cf56 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800cf50:	4a09      	ldr	r2, [pc, #36]	; (800cf78 <prvAddCurrentTaskToDelayedList+0xc8>)
 800cf52:	68bb      	ldr	r3, [r7, #8]
 800cf54:	6013      	str	r3, [r2, #0]
}
 800cf56:	bf00      	nop
 800cf58:	3710      	adds	r7, #16
 800cf5a:	46bd      	mov	sp, r7
 800cf5c:	bd80      	pop	{r7, pc}
 800cf5e:	bf00      	nop
 800cf60:	24000858 	.word	0x24000858
 800cf64:	24000754 	.word	0x24000754
 800cf68:	2400085c 	.word	0x2400085c
 800cf6c:	24000840 	.word	0x24000840
 800cf70:	24000810 	.word	0x24000810
 800cf74:	2400080c 	.word	0x2400080c
 800cf78:	24000874 	.word	0x24000874

0800cf7c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800cf7c:	b480      	push	{r7}
 800cf7e:	b085      	sub	sp, #20
 800cf80:	af00      	add	r7, sp, #0
 800cf82:	60f8      	str	r0, [r7, #12]
 800cf84:	60b9      	str	r1, [r7, #8]
 800cf86:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800cf88:	68fb      	ldr	r3, [r7, #12]
 800cf8a:	3b04      	subs	r3, #4
 800cf8c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800cf8e:	68fb      	ldr	r3, [r7, #12]
 800cf90:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800cf94:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	3b04      	subs	r3, #4
 800cf9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800cf9c:	68bb      	ldr	r3, [r7, #8]
 800cf9e:	f023 0201 	bic.w	r2, r3, #1
 800cfa2:	68fb      	ldr	r3, [r7, #12]
 800cfa4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	3b04      	subs	r3, #4
 800cfaa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800cfac:	4a0c      	ldr	r2, [pc, #48]	; (800cfe0 <pxPortInitialiseStack+0x64>)
 800cfae:	68fb      	ldr	r3, [r7, #12]
 800cfb0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800cfb2:	68fb      	ldr	r3, [r7, #12]
 800cfb4:	3b14      	subs	r3, #20
 800cfb6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800cfb8:	687a      	ldr	r2, [r7, #4]
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800cfbe:	68fb      	ldr	r3, [r7, #12]
 800cfc0:	3b04      	subs	r3, #4
 800cfc2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800cfc4:	68fb      	ldr	r3, [r7, #12]
 800cfc6:	f06f 0202 	mvn.w	r2, #2
 800cfca:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800cfcc:	68fb      	ldr	r3, [r7, #12]
 800cfce:	3b20      	subs	r3, #32
 800cfd0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800cfd2:	68fb      	ldr	r3, [r7, #12]
}
 800cfd4:	4618      	mov	r0, r3
 800cfd6:	3714      	adds	r7, #20
 800cfd8:	46bd      	mov	sp, r7
 800cfda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfde:	4770      	bx	lr
 800cfe0:	0800cfe5 	.word	0x0800cfe5

0800cfe4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800cfe4:	b480      	push	{r7}
 800cfe6:	b085      	sub	sp, #20
 800cfe8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800cfea:	2300      	movs	r3, #0
 800cfec:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800cfee:	4b12      	ldr	r3, [pc, #72]	; (800d038 <prvTaskExitError+0x54>)
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cff6:	d00a      	beq.n	800d00e <prvTaskExitError+0x2a>
	__asm volatile
 800cff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cffc:	f383 8811 	msr	BASEPRI, r3
 800d000:	f3bf 8f6f 	isb	sy
 800d004:	f3bf 8f4f 	dsb	sy
 800d008:	60fb      	str	r3, [r7, #12]
}
 800d00a:	bf00      	nop
 800d00c:	e7fe      	b.n	800d00c <prvTaskExitError+0x28>
	__asm volatile
 800d00e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d012:	f383 8811 	msr	BASEPRI, r3
 800d016:	f3bf 8f6f 	isb	sy
 800d01a:	f3bf 8f4f 	dsb	sy
 800d01e:	60bb      	str	r3, [r7, #8]
}
 800d020:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d022:	bf00      	nop
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	2b00      	cmp	r3, #0
 800d028:	d0fc      	beq.n	800d024 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d02a:	bf00      	nop
 800d02c:	bf00      	nop
 800d02e:	3714      	adds	r7, #20
 800d030:	46bd      	mov	sp, r7
 800d032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d036:	4770      	bx	lr
 800d038:	240002f0 	.word	0x240002f0
 800d03c:	00000000 	.word	0x00000000

0800d040 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d040:	4b07      	ldr	r3, [pc, #28]	; (800d060 <pxCurrentTCBConst2>)
 800d042:	6819      	ldr	r1, [r3, #0]
 800d044:	6808      	ldr	r0, [r1, #0]
 800d046:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d04a:	f380 8809 	msr	PSP, r0
 800d04e:	f3bf 8f6f 	isb	sy
 800d052:	f04f 0000 	mov.w	r0, #0
 800d056:	f380 8811 	msr	BASEPRI, r0
 800d05a:	4770      	bx	lr
 800d05c:	f3af 8000 	nop.w

0800d060 <pxCurrentTCBConst2>:
 800d060:	24000754 	.word	0x24000754
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d064:	bf00      	nop
 800d066:	bf00      	nop

0800d068 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d068:	4808      	ldr	r0, [pc, #32]	; (800d08c <prvPortStartFirstTask+0x24>)
 800d06a:	6800      	ldr	r0, [r0, #0]
 800d06c:	6800      	ldr	r0, [r0, #0]
 800d06e:	f380 8808 	msr	MSP, r0
 800d072:	f04f 0000 	mov.w	r0, #0
 800d076:	f380 8814 	msr	CONTROL, r0
 800d07a:	b662      	cpsie	i
 800d07c:	b661      	cpsie	f
 800d07e:	f3bf 8f4f 	dsb	sy
 800d082:	f3bf 8f6f 	isb	sy
 800d086:	df00      	svc	0
 800d088:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d08a:	bf00      	nop
 800d08c:	e000ed08 	.word	0xe000ed08

0800d090 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d090:	b580      	push	{r7, lr}
 800d092:	b086      	sub	sp, #24
 800d094:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d096:	4b46      	ldr	r3, [pc, #280]	; (800d1b0 <xPortStartScheduler+0x120>)
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	4a46      	ldr	r2, [pc, #280]	; (800d1b4 <xPortStartScheduler+0x124>)
 800d09c:	4293      	cmp	r3, r2
 800d09e:	d10a      	bne.n	800d0b6 <xPortStartScheduler+0x26>
	__asm volatile
 800d0a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0a4:	f383 8811 	msr	BASEPRI, r3
 800d0a8:	f3bf 8f6f 	isb	sy
 800d0ac:	f3bf 8f4f 	dsb	sy
 800d0b0:	613b      	str	r3, [r7, #16]
}
 800d0b2:	bf00      	nop
 800d0b4:	e7fe      	b.n	800d0b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d0b6:	4b3e      	ldr	r3, [pc, #248]	; (800d1b0 <xPortStartScheduler+0x120>)
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	4a3f      	ldr	r2, [pc, #252]	; (800d1b8 <xPortStartScheduler+0x128>)
 800d0bc:	4293      	cmp	r3, r2
 800d0be:	d10a      	bne.n	800d0d6 <xPortStartScheduler+0x46>
	__asm volatile
 800d0c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0c4:	f383 8811 	msr	BASEPRI, r3
 800d0c8:	f3bf 8f6f 	isb	sy
 800d0cc:	f3bf 8f4f 	dsb	sy
 800d0d0:	60fb      	str	r3, [r7, #12]
}
 800d0d2:	bf00      	nop
 800d0d4:	e7fe      	b.n	800d0d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d0d6:	4b39      	ldr	r3, [pc, #228]	; (800d1bc <xPortStartScheduler+0x12c>)
 800d0d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d0da:	697b      	ldr	r3, [r7, #20]
 800d0dc:	781b      	ldrb	r3, [r3, #0]
 800d0de:	b2db      	uxtb	r3, r3
 800d0e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d0e2:	697b      	ldr	r3, [r7, #20]
 800d0e4:	22ff      	movs	r2, #255	; 0xff
 800d0e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d0e8:	697b      	ldr	r3, [r7, #20]
 800d0ea:	781b      	ldrb	r3, [r3, #0]
 800d0ec:	b2db      	uxtb	r3, r3
 800d0ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d0f0:	78fb      	ldrb	r3, [r7, #3]
 800d0f2:	b2db      	uxtb	r3, r3
 800d0f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800d0f8:	b2da      	uxtb	r2, r3
 800d0fa:	4b31      	ldr	r3, [pc, #196]	; (800d1c0 <xPortStartScheduler+0x130>)
 800d0fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d0fe:	4b31      	ldr	r3, [pc, #196]	; (800d1c4 <xPortStartScheduler+0x134>)
 800d100:	2207      	movs	r2, #7
 800d102:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d104:	e009      	b.n	800d11a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800d106:	4b2f      	ldr	r3, [pc, #188]	; (800d1c4 <xPortStartScheduler+0x134>)
 800d108:	681b      	ldr	r3, [r3, #0]
 800d10a:	3b01      	subs	r3, #1
 800d10c:	4a2d      	ldr	r2, [pc, #180]	; (800d1c4 <xPortStartScheduler+0x134>)
 800d10e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d110:	78fb      	ldrb	r3, [r7, #3]
 800d112:	b2db      	uxtb	r3, r3
 800d114:	005b      	lsls	r3, r3, #1
 800d116:	b2db      	uxtb	r3, r3
 800d118:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d11a:	78fb      	ldrb	r3, [r7, #3]
 800d11c:	b2db      	uxtb	r3, r3
 800d11e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d122:	2b80      	cmp	r3, #128	; 0x80
 800d124:	d0ef      	beq.n	800d106 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d126:	4b27      	ldr	r3, [pc, #156]	; (800d1c4 <xPortStartScheduler+0x134>)
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	f1c3 0307 	rsb	r3, r3, #7
 800d12e:	2b04      	cmp	r3, #4
 800d130:	d00a      	beq.n	800d148 <xPortStartScheduler+0xb8>
	__asm volatile
 800d132:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d136:	f383 8811 	msr	BASEPRI, r3
 800d13a:	f3bf 8f6f 	isb	sy
 800d13e:	f3bf 8f4f 	dsb	sy
 800d142:	60bb      	str	r3, [r7, #8]
}
 800d144:	bf00      	nop
 800d146:	e7fe      	b.n	800d146 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d148:	4b1e      	ldr	r3, [pc, #120]	; (800d1c4 <xPortStartScheduler+0x134>)
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	021b      	lsls	r3, r3, #8
 800d14e:	4a1d      	ldr	r2, [pc, #116]	; (800d1c4 <xPortStartScheduler+0x134>)
 800d150:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d152:	4b1c      	ldr	r3, [pc, #112]	; (800d1c4 <xPortStartScheduler+0x134>)
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d15a:	4a1a      	ldr	r2, [pc, #104]	; (800d1c4 <xPortStartScheduler+0x134>)
 800d15c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	b2da      	uxtb	r2, r3
 800d162:	697b      	ldr	r3, [r7, #20]
 800d164:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d166:	4b18      	ldr	r3, [pc, #96]	; (800d1c8 <xPortStartScheduler+0x138>)
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	4a17      	ldr	r2, [pc, #92]	; (800d1c8 <xPortStartScheduler+0x138>)
 800d16c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d170:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d172:	4b15      	ldr	r3, [pc, #84]	; (800d1c8 <xPortStartScheduler+0x138>)
 800d174:	681b      	ldr	r3, [r3, #0]
 800d176:	4a14      	ldr	r2, [pc, #80]	; (800d1c8 <xPortStartScheduler+0x138>)
 800d178:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800d17c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d17e:	f000 f8dd 	bl	800d33c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d182:	4b12      	ldr	r3, [pc, #72]	; (800d1cc <xPortStartScheduler+0x13c>)
 800d184:	2200      	movs	r2, #0
 800d186:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d188:	f000 f8fc 	bl	800d384 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d18c:	4b10      	ldr	r3, [pc, #64]	; (800d1d0 <xPortStartScheduler+0x140>)
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	4a0f      	ldr	r2, [pc, #60]	; (800d1d0 <xPortStartScheduler+0x140>)
 800d192:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800d196:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d198:	f7ff ff66 	bl	800d068 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d19c:	f7ff fa90 	bl	800c6c0 <vTaskSwitchContext>
	prvTaskExitError();
 800d1a0:	f7ff ff20 	bl	800cfe4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d1a4:	2300      	movs	r3, #0
}
 800d1a6:	4618      	mov	r0, r3
 800d1a8:	3718      	adds	r7, #24
 800d1aa:	46bd      	mov	sp, r7
 800d1ac:	bd80      	pop	{r7, pc}
 800d1ae:	bf00      	nop
 800d1b0:	e000ed00 	.word	0xe000ed00
 800d1b4:	410fc271 	.word	0x410fc271
 800d1b8:	410fc270 	.word	0x410fc270
 800d1bc:	e000e400 	.word	0xe000e400
 800d1c0:	24000880 	.word	0x24000880
 800d1c4:	24000884 	.word	0x24000884
 800d1c8:	e000ed20 	.word	0xe000ed20
 800d1cc:	240002f0 	.word	0x240002f0
 800d1d0:	e000ef34 	.word	0xe000ef34

0800d1d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d1d4:	b480      	push	{r7}
 800d1d6:	b083      	sub	sp, #12
 800d1d8:	af00      	add	r7, sp, #0
	__asm volatile
 800d1da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1de:	f383 8811 	msr	BASEPRI, r3
 800d1e2:	f3bf 8f6f 	isb	sy
 800d1e6:	f3bf 8f4f 	dsb	sy
 800d1ea:	607b      	str	r3, [r7, #4]
}
 800d1ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d1ee:	4b0f      	ldr	r3, [pc, #60]	; (800d22c <vPortEnterCritical+0x58>)
 800d1f0:	681b      	ldr	r3, [r3, #0]
 800d1f2:	3301      	adds	r3, #1
 800d1f4:	4a0d      	ldr	r2, [pc, #52]	; (800d22c <vPortEnterCritical+0x58>)
 800d1f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d1f8:	4b0c      	ldr	r3, [pc, #48]	; (800d22c <vPortEnterCritical+0x58>)
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	2b01      	cmp	r3, #1
 800d1fe:	d10f      	bne.n	800d220 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d200:	4b0b      	ldr	r3, [pc, #44]	; (800d230 <vPortEnterCritical+0x5c>)
 800d202:	681b      	ldr	r3, [r3, #0]
 800d204:	b2db      	uxtb	r3, r3
 800d206:	2b00      	cmp	r3, #0
 800d208:	d00a      	beq.n	800d220 <vPortEnterCritical+0x4c>
	__asm volatile
 800d20a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d20e:	f383 8811 	msr	BASEPRI, r3
 800d212:	f3bf 8f6f 	isb	sy
 800d216:	f3bf 8f4f 	dsb	sy
 800d21a:	603b      	str	r3, [r7, #0]
}
 800d21c:	bf00      	nop
 800d21e:	e7fe      	b.n	800d21e <vPortEnterCritical+0x4a>
	}
}
 800d220:	bf00      	nop
 800d222:	370c      	adds	r7, #12
 800d224:	46bd      	mov	sp, r7
 800d226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d22a:	4770      	bx	lr
 800d22c:	240002f0 	.word	0x240002f0
 800d230:	e000ed04 	.word	0xe000ed04

0800d234 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d234:	b480      	push	{r7}
 800d236:	b083      	sub	sp, #12
 800d238:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d23a:	4b12      	ldr	r3, [pc, #72]	; (800d284 <vPortExitCritical+0x50>)
 800d23c:	681b      	ldr	r3, [r3, #0]
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d10a      	bne.n	800d258 <vPortExitCritical+0x24>
	__asm volatile
 800d242:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d246:	f383 8811 	msr	BASEPRI, r3
 800d24a:	f3bf 8f6f 	isb	sy
 800d24e:	f3bf 8f4f 	dsb	sy
 800d252:	607b      	str	r3, [r7, #4]
}
 800d254:	bf00      	nop
 800d256:	e7fe      	b.n	800d256 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d258:	4b0a      	ldr	r3, [pc, #40]	; (800d284 <vPortExitCritical+0x50>)
 800d25a:	681b      	ldr	r3, [r3, #0]
 800d25c:	3b01      	subs	r3, #1
 800d25e:	4a09      	ldr	r2, [pc, #36]	; (800d284 <vPortExitCritical+0x50>)
 800d260:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d262:	4b08      	ldr	r3, [pc, #32]	; (800d284 <vPortExitCritical+0x50>)
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	2b00      	cmp	r3, #0
 800d268:	d105      	bne.n	800d276 <vPortExitCritical+0x42>
 800d26a:	2300      	movs	r3, #0
 800d26c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d26e:	683b      	ldr	r3, [r7, #0]
 800d270:	f383 8811 	msr	BASEPRI, r3
}
 800d274:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d276:	bf00      	nop
 800d278:	370c      	adds	r7, #12
 800d27a:	46bd      	mov	sp, r7
 800d27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d280:	4770      	bx	lr
 800d282:	bf00      	nop
 800d284:	240002f0 	.word	0x240002f0
	...

0800d290 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d290:	f3ef 8009 	mrs	r0, PSP
 800d294:	f3bf 8f6f 	isb	sy
 800d298:	4b15      	ldr	r3, [pc, #84]	; (800d2f0 <pxCurrentTCBConst>)
 800d29a:	681a      	ldr	r2, [r3, #0]
 800d29c:	f01e 0f10 	tst.w	lr, #16
 800d2a0:	bf08      	it	eq
 800d2a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d2a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2aa:	6010      	str	r0, [r2, #0]
 800d2ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d2b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d2b4:	f380 8811 	msr	BASEPRI, r0
 800d2b8:	f3bf 8f4f 	dsb	sy
 800d2bc:	f3bf 8f6f 	isb	sy
 800d2c0:	f7ff f9fe 	bl	800c6c0 <vTaskSwitchContext>
 800d2c4:	f04f 0000 	mov.w	r0, #0
 800d2c8:	f380 8811 	msr	BASEPRI, r0
 800d2cc:	bc09      	pop	{r0, r3}
 800d2ce:	6819      	ldr	r1, [r3, #0]
 800d2d0:	6808      	ldr	r0, [r1, #0]
 800d2d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2d6:	f01e 0f10 	tst.w	lr, #16
 800d2da:	bf08      	it	eq
 800d2dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d2e0:	f380 8809 	msr	PSP, r0
 800d2e4:	f3bf 8f6f 	isb	sy
 800d2e8:	4770      	bx	lr
 800d2ea:	bf00      	nop
 800d2ec:	f3af 8000 	nop.w

0800d2f0 <pxCurrentTCBConst>:
 800d2f0:	24000754 	.word	0x24000754
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d2f4:	bf00      	nop
 800d2f6:	bf00      	nop

0800d2f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d2f8:	b580      	push	{r7, lr}
 800d2fa:	b082      	sub	sp, #8
 800d2fc:	af00      	add	r7, sp, #0
	__asm volatile
 800d2fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d302:	f383 8811 	msr	BASEPRI, r3
 800d306:	f3bf 8f6f 	isb	sy
 800d30a:	f3bf 8f4f 	dsb	sy
 800d30e:	607b      	str	r3, [r7, #4]
}
 800d310:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d312:	f7ff f91d 	bl	800c550 <xTaskIncrementTick>
 800d316:	4603      	mov	r3, r0
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d003      	beq.n	800d324 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d31c:	4b06      	ldr	r3, [pc, #24]	; (800d338 <SysTick_Handler+0x40>)
 800d31e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d322:	601a      	str	r2, [r3, #0]
 800d324:	2300      	movs	r3, #0
 800d326:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d328:	683b      	ldr	r3, [r7, #0]
 800d32a:	f383 8811 	msr	BASEPRI, r3
}
 800d32e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d330:	bf00      	nop
 800d332:	3708      	adds	r7, #8
 800d334:	46bd      	mov	sp, r7
 800d336:	bd80      	pop	{r7, pc}
 800d338:	e000ed04 	.word	0xe000ed04

0800d33c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d33c:	b480      	push	{r7}
 800d33e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d340:	4b0b      	ldr	r3, [pc, #44]	; (800d370 <vPortSetupTimerInterrupt+0x34>)
 800d342:	2200      	movs	r2, #0
 800d344:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d346:	4b0b      	ldr	r3, [pc, #44]	; (800d374 <vPortSetupTimerInterrupt+0x38>)
 800d348:	2200      	movs	r2, #0
 800d34a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d34c:	4b0a      	ldr	r3, [pc, #40]	; (800d378 <vPortSetupTimerInterrupt+0x3c>)
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	4a0a      	ldr	r2, [pc, #40]	; (800d37c <vPortSetupTimerInterrupt+0x40>)
 800d352:	fba2 2303 	umull	r2, r3, r2, r3
 800d356:	099b      	lsrs	r3, r3, #6
 800d358:	4a09      	ldr	r2, [pc, #36]	; (800d380 <vPortSetupTimerInterrupt+0x44>)
 800d35a:	3b01      	subs	r3, #1
 800d35c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d35e:	4b04      	ldr	r3, [pc, #16]	; (800d370 <vPortSetupTimerInterrupt+0x34>)
 800d360:	2207      	movs	r2, #7
 800d362:	601a      	str	r2, [r3, #0]
}
 800d364:	bf00      	nop
 800d366:	46bd      	mov	sp, r7
 800d368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d36c:	4770      	bx	lr
 800d36e:	bf00      	nop
 800d370:	e000e010 	.word	0xe000e010
 800d374:	e000e018 	.word	0xe000e018
 800d378:	240002cc 	.word	0x240002cc
 800d37c:	10624dd3 	.word	0x10624dd3
 800d380:	e000e014 	.word	0xe000e014

0800d384 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d384:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800d394 <vPortEnableVFP+0x10>
 800d388:	6801      	ldr	r1, [r0, #0]
 800d38a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800d38e:	6001      	str	r1, [r0, #0]
 800d390:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d392:	bf00      	nop
 800d394:	e000ed88 	.word	0xe000ed88

0800d398 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d398:	b480      	push	{r7}
 800d39a:	b085      	sub	sp, #20
 800d39c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d39e:	f3ef 8305 	mrs	r3, IPSR
 800d3a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d3a4:	68fb      	ldr	r3, [r7, #12]
 800d3a6:	2b0f      	cmp	r3, #15
 800d3a8:	d914      	bls.n	800d3d4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d3aa:	4a17      	ldr	r2, [pc, #92]	; (800d408 <vPortValidateInterruptPriority+0x70>)
 800d3ac:	68fb      	ldr	r3, [r7, #12]
 800d3ae:	4413      	add	r3, r2
 800d3b0:	781b      	ldrb	r3, [r3, #0]
 800d3b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d3b4:	4b15      	ldr	r3, [pc, #84]	; (800d40c <vPortValidateInterruptPriority+0x74>)
 800d3b6:	781b      	ldrb	r3, [r3, #0]
 800d3b8:	7afa      	ldrb	r2, [r7, #11]
 800d3ba:	429a      	cmp	r2, r3
 800d3bc:	d20a      	bcs.n	800d3d4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800d3be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3c2:	f383 8811 	msr	BASEPRI, r3
 800d3c6:	f3bf 8f6f 	isb	sy
 800d3ca:	f3bf 8f4f 	dsb	sy
 800d3ce:	607b      	str	r3, [r7, #4]
}
 800d3d0:	bf00      	nop
 800d3d2:	e7fe      	b.n	800d3d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d3d4:	4b0e      	ldr	r3, [pc, #56]	; (800d410 <vPortValidateInterruptPriority+0x78>)
 800d3d6:	681b      	ldr	r3, [r3, #0]
 800d3d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d3dc:	4b0d      	ldr	r3, [pc, #52]	; (800d414 <vPortValidateInterruptPriority+0x7c>)
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	429a      	cmp	r2, r3
 800d3e2:	d90a      	bls.n	800d3fa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800d3e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3e8:	f383 8811 	msr	BASEPRI, r3
 800d3ec:	f3bf 8f6f 	isb	sy
 800d3f0:	f3bf 8f4f 	dsb	sy
 800d3f4:	603b      	str	r3, [r7, #0]
}
 800d3f6:	bf00      	nop
 800d3f8:	e7fe      	b.n	800d3f8 <vPortValidateInterruptPriority+0x60>
	}
 800d3fa:	bf00      	nop
 800d3fc:	3714      	adds	r7, #20
 800d3fe:	46bd      	mov	sp, r7
 800d400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d404:	4770      	bx	lr
 800d406:	bf00      	nop
 800d408:	e000e3f0 	.word	0xe000e3f0
 800d40c:	24000880 	.word	0x24000880
 800d410:	e000ed0c 	.word	0xe000ed0c
 800d414:	24000884 	.word	0x24000884

0800d418 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d418:	b580      	push	{r7, lr}
 800d41a:	b08a      	sub	sp, #40	; 0x28
 800d41c:	af00      	add	r7, sp, #0
 800d41e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d420:	2300      	movs	r3, #0
 800d422:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d424:	f7fe ffc8 	bl	800c3b8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d428:	4b5b      	ldr	r3, [pc, #364]	; (800d598 <pvPortMalloc+0x180>)
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d101      	bne.n	800d434 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d430:	f000 f920 	bl	800d674 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d434:	4b59      	ldr	r3, [pc, #356]	; (800d59c <pvPortMalloc+0x184>)
 800d436:	681a      	ldr	r2, [r3, #0]
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	4013      	ands	r3, r2
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	f040 8093 	bne.w	800d568 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	2b00      	cmp	r3, #0
 800d446:	d01d      	beq.n	800d484 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800d448:	2208      	movs	r2, #8
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	4413      	add	r3, r2
 800d44e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	f003 0307 	and.w	r3, r3, #7
 800d456:	2b00      	cmp	r3, #0
 800d458:	d014      	beq.n	800d484 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	f023 0307 	bic.w	r3, r3, #7
 800d460:	3308      	adds	r3, #8
 800d462:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	f003 0307 	and.w	r3, r3, #7
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d00a      	beq.n	800d484 <pvPortMalloc+0x6c>
	__asm volatile
 800d46e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d472:	f383 8811 	msr	BASEPRI, r3
 800d476:	f3bf 8f6f 	isb	sy
 800d47a:	f3bf 8f4f 	dsb	sy
 800d47e:	617b      	str	r3, [r7, #20]
}
 800d480:	bf00      	nop
 800d482:	e7fe      	b.n	800d482 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	2b00      	cmp	r3, #0
 800d488:	d06e      	beq.n	800d568 <pvPortMalloc+0x150>
 800d48a:	4b45      	ldr	r3, [pc, #276]	; (800d5a0 <pvPortMalloc+0x188>)
 800d48c:	681b      	ldr	r3, [r3, #0]
 800d48e:	687a      	ldr	r2, [r7, #4]
 800d490:	429a      	cmp	r2, r3
 800d492:	d869      	bhi.n	800d568 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d494:	4b43      	ldr	r3, [pc, #268]	; (800d5a4 <pvPortMalloc+0x18c>)
 800d496:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d498:	4b42      	ldr	r3, [pc, #264]	; (800d5a4 <pvPortMalloc+0x18c>)
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d49e:	e004      	b.n	800d4aa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800d4a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d4a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4a6:	681b      	ldr	r3, [r3, #0]
 800d4a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d4aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4ac:	685b      	ldr	r3, [r3, #4]
 800d4ae:	687a      	ldr	r2, [r7, #4]
 800d4b0:	429a      	cmp	r2, r3
 800d4b2:	d903      	bls.n	800d4bc <pvPortMalloc+0xa4>
 800d4b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4b6:	681b      	ldr	r3, [r3, #0]
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	d1f1      	bne.n	800d4a0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d4bc:	4b36      	ldr	r3, [pc, #216]	; (800d598 <pvPortMalloc+0x180>)
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d4c2:	429a      	cmp	r2, r3
 800d4c4:	d050      	beq.n	800d568 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d4c6:	6a3b      	ldr	r3, [r7, #32]
 800d4c8:	681b      	ldr	r3, [r3, #0]
 800d4ca:	2208      	movs	r2, #8
 800d4cc:	4413      	add	r3, r2
 800d4ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d4d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4d2:	681a      	ldr	r2, [r3, #0]
 800d4d4:	6a3b      	ldr	r3, [r7, #32]
 800d4d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d4d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4da:	685a      	ldr	r2, [r3, #4]
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	1ad2      	subs	r2, r2, r3
 800d4e0:	2308      	movs	r3, #8
 800d4e2:	005b      	lsls	r3, r3, #1
 800d4e4:	429a      	cmp	r2, r3
 800d4e6:	d91f      	bls.n	800d528 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d4e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	4413      	add	r3, r2
 800d4ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d4f0:	69bb      	ldr	r3, [r7, #24]
 800d4f2:	f003 0307 	and.w	r3, r3, #7
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d00a      	beq.n	800d510 <pvPortMalloc+0xf8>
	__asm volatile
 800d4fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4fe:	f383 8811 	msr	BASEPRI, r3
 800d502:	f3bf 8f6f 	isb	sy
 800d506:	f3bf 8f4f 	dsb	sy
 800d50a:	613b      	str	r3, [r7, #16]
}
 800d50c:	bf00      	nop
 800d50e:	e7fe      	b.n	800d50e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d512:	685a      	ldr	r2, [r3, #4]
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	1ad2      	subs	r2, r2, r3
 800d518:	69bb      	ldr	r3, [r7, #24]
 800d51a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d51c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d51e:	687a      	ldr	r2, [r7, #4]
 800d520:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d522:	69b8      	ldr	r0, [r7, #24]
 800d524:	f000 f908 	bl	800d738 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d528:	4b1d      	ldr	r3, [pc, #116]	; (800d5a0 <pvPortMalloc+0x188>)
 800d52a:	681a      	ldr	r2, [r3, #0]
 800d52c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d52e:	685b      	ldr	r3, [r3, #4]
 800d530:	1ad3      	subs	r3, r2, r3
 800d532:	4a1b      	ldr	r2, [pc, #108]	; (800d5a0 <pvPortMalloc+0x188>)
 800d534:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d536:	4b1a      	ldr	r3, [pc, #104]	; (800d5a0 <pvPortMalloc+0x188>)
 800d538:	681a      	ldr	r2, [r3, #0]
 800d53a:	4b1b      	ldr	r3, [pc, #108]	; (800d5a8 <pvPortMalloc+0x190>)
 800d53c:	681b      	ldr	r3, [r3, #0]
 800d53e:	429a      	cmp	r2, r3
 800d540:	d203      	bcs.n	800d54a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d542:	4b17      	ldr	r3, [pc, #92]	; (800d5a0 <pvPortMalloc+0x188>)
 800d544:	681b      	ldr	r3, [r3, #0]
 800d546:	4a18      	ldr	r2, [pc, #96]	; (800d5a8 <pvPortMalloc+0x190>)
 800d548:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d54a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d54c:	685a      	ldr	r2, [r3, #4]
 800d54e:	4b13      	ldr	r3, [pc, #76]	; (800d59c <pvPortMalloc+0x184>)
 800d550:	681b      	ldr	r3, [r3, #0]
 800d552:	431a      	orrs	r2, r3
 800d554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d556:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d55a:	2200      	movs	r2, #0
 800d55c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d55e:	4b13      	ldr	r3, [pc, #76]	; (800d5ac <pvPortMalloc+0x194>)
 800d560:	681b      	ldr	r3, [r3, #0]
 800d562:	3301      	adds	r3, #1
 800d564:	4a11      	ldr	r2, [pc, #68]	; (800d5ac <pvPortMalloc+0x194>)
 800d566:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d568:	f7fe ff34 	bl	800c3d4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d56c:	69fb      	ldr	r3, [r7, #28]
 800d56e:	f003 0307 	and.w	r3, r3, #7
 800d572:	2b00      	cmp	r3, #0
 800d574:	d00a      	beq.n	800d58c <pvPortMalloc+0x174>
	__asm volatile
 800d576:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d57a:	f383 8811 	msr	BASEPRI, r3
 800d57e:	f3bf 8f6f 	isb	sy
 800d582:	f3bf 8f4f 	dsb	sy
 800d586:	60fb      	str	r3, [r7, #12]
}
 800d588:	bf00      	nop
 800d58a:	e7fe      	b.n	800d58a <pvPortMalloc+0x172>
	return pvReturn;
 800d58c:	69fb      	ldr	r3, [r7, #28]
}
 800d58e:	4618      	mov	r0, r3
 800d590:	3728      	adds	r7, #40	; 0x28
 800d592:	46bd      	mov	sp, r7
 800d594:	bd80      	pop	{r7, pc}
 800d596:	bf00      	nop
 800d598:	24004490 	.word	0x24004490
 800d59c:	240044a4 	.word	0x240044a4
 800d5a0:	24004494 	.word	0x24004494
 800d5a4:	24004488 	.word	0x24004488
 800d5a8:	24004498 	.word	0x24004498
 800d5ac:	2400449c 	.word	0x2400449c

0800d5b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d5b0:	b580      	push	{r7, lr}
 800d5b2:	b086      	sub	sp, #24
 800d5b4:	af00      	add	r7, sp, #0
 800d5b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d04d      	beq.n	800d65e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d5c2:	2308      	movs	r3, #8
 800d5c4:	425b      	negs	r3, r3
 800d5c6:	697a      	ldr	r2, [r7, #20]
 800d5c8:	4413      	add	r3, r2
 800d5ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d5cc:	697b      	ldr	r3, [r7, #20]
 800d5ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d5d0:	693b      	ldr	r3, [r7, #16]
 800d5d2:	685a      	ldr	r2, [r3, #4]
 800d5d4:	4b24      	ldr	r3, [pc, #144]	; (800d668 <vPortFree+0xb8>)
 800d5d6:	681b      	ldr	r3, [r3, #0]
 800d5d8:	4013      	ands	r3, r2
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	d10a      	bne.n	800d5f4 <vPortFree+0x44>
	__asm volatile
 800d5de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5e2:	f383 8811 	msr	BASEPRI, r3
 800d5e6:	f3bf 8f6f 	isb	sy
 800d5ea:	f3bf 8f4f 	dsb	sy
 800d5ee:	60fb      	str	r3, [r7, #12]
}
 800d5f0:	bf00      	nop
 800d5f2:	e7fe      	b.n	800d5f2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d5f4:	693b      	ldr	r3, [r7, #16]
 800d5f6:	681b      	ldr	r3, [r3, #0]
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d00a      	beq.n	800d612 <vPortFree+0x62>
	__asm volatile
 800d5fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d600:	f383 8811 	msr	BASEPRI, r3
 800d604:	f3bf 8f6f 	isb	sy
 800d608:	f3bf 8f4f 	dsb	sy
 800d60c:	60bb      	str	r3, [r7, #8]
}
 800d60e:	bf00      	nop
 800d610:	e7fe      	b.n	800d610 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d612:	693b      	ldr	r3, [r7, #16]
 800d614:	685a      	ldr	r2, [r3, #4]
 800d616:	4b14      	ldr	r3, [pc, #80]	; (800d668 <vPortFree+0xb8>)
 800d618:	681b      	ldr	r3, [r3, #0]
 800d61a:	4013      	ands	r3, r2
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d01e      	beq.n	800d65e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d620:	693b      	ldr	r3, [r7, #16]
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	2b00      	cmp	r3, #0
 800d626:	d11a      	bne.n	800d65e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d628:	693b      	ldr	r3, [r7, #16]
 800d62a:	685a      	ldr	r2, [r3, #4]
 800d62c:	4b0e      	ldr	r3, [pc, #56]	; (800d668 <vPortFree+0xb8>)
 800d62e:	681b      	ldr	r3, [r3, #0]
 800d630:	43db      	mvns	r3, r3
 800d632:	401a      	ands	r2, r3
 800d634:	693b      	ldr	r3, [r7, #16]
 800d636:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d638:	f7fe febe 	bl	800c3b8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d63c:	693b      	ldr	r3, [r7, #16]
 800d63e:	685a      	ldr	r2, [r3, #4]
 800d640:	4b0a      	ldr	r3, [pc, #40]	; (800d66c <vPortFree+0xbc>)
 800d642:	681b      	ldr	r3, [r3, #0]
 800d644:	4413      	add	r3, r2
 800d646:	4a09      	ldr	r2, [pc, #36]	; (800d66c <vPortFree+0xbc>)
 800d648:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d64a:	6938      	ldr	r0, [r7, #16]
 800d64c:	f000 f874 	bl	800d738 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d650:	4b07      	ldr	r3, [pc, #28]	; (800d670 <vPortFree+0xc0>)
 800d652:	681b      	ldr	r3, [r3, #0]
 800d654:	3301      	adds	r3, #1
 800d656:	4a06      	ldr	r2, [pc, #24]	; (800d670 <vPortFree+0xc0>)
 800d658:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d65a:	f7fe febb 	bl	800c3d4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d65e:	bf00      	nop
 800d660:	3718      	adds	r7, #24
 800d662:	46bd      	mov	sp, r7
 800d664:	bd80      	pop	{r7, pc}
 800d666:	bf00      	nop
 800d668:	240044a4 	.word	0x240044a4
 800d66c:	24004494 	.word	0x24004494
 800d670:	240044a0 	.word	0x240044a0

0800d674 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d674:	b480      	push	{r7}
 800d676:	b085      	sub	sp, #20
 800d678:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d67a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800d67e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d680:	4b27      	ldr	r3, [pc, #156]	; (800d720 <prvHeapInit+0xac>)
 800d682:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d684:	68fb      	ldr	r3, [r7, #12]
 800d686:	f003 0307 	and.w	r3, r3, #7
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	d00c      	beq.n	800d6a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d68e:	68fb      	ldr	r3, [r7, #12]
 800d690:	3307      	adds	r3, #7
 800d692:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	f023 0307 	bic.w	r3, r3, #7
 800d69a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d69c:	68ba      	ldr	r2, [r7, #8]
 800d69e:	68fb      	ldr	r3, [r7, #12]
 800d6a0:	1ad3      	subs	r3, r2, r3
 800d6a2:	4a1f      	ldr	r2, [pc, #124]	; (800d720 <prvHeapInit+0xac>)
 800d6a4:	4413      	add	r3, r2
 800d6a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d6a8:	68fb      	ldr	r3, [r7, #12]
 800d6aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d6ac:	4a1d      	ldr	r2, [pc, #116]	; (800d724 <prvHeapInit+0xb0>)
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d6b2:	4b1c      	ldr	r3, [pc, #112]	; (800d724 <prvHeapInit+0xb0>)
 800d6b4:	2200      	movs	r2, #0
 800d6b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	68ba      	ldr	r2, [r7, #8]
 800d6bc:	4413      	add	r3, r2
 800d6be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d6c0:	2208      	movs	r2, #8
 800d6c2:	68fb      	ldr	r3, [r7, #12]
 800d6c4:	1a9b      	subs	r3, r3, r2
 800d6c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d6c8:	68fb      	ldr	r3, [r7, #12]
 800d6ca:	f023 0307 	bic.w	r3, r3, #7
 800d6ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d6d0:	68fb      	ldr	r3, [r7, #12]
 800d6d2:	4a15      	ldr	r2, [pc, #84]	; (800d728 <prvHeapInit+0xb4>)
 800d6d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d6d6:	4b14      	ldr	r3, [pc, #80]	; (800d728 <prvHeapInit+0xb4>)
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	2200      	movs	r2, #0
 800d6dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d6de:	4b12      	ldr	r3, [pc, #72]	; (800d728 <prvHeapInit+0xb4>)
 800d6e0:	681b      	ldr	r3, [r3, #0]
 800d6e2:	2200      	movs	r2, #0
 800d6e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d6ea:	683b      	ldr	r3, [r7, #0]
 800d6ec:	68fa      	ldr	r2, [r7, #12]
 800d6ee:	1ad2      	subs	r2, r2, r3
 800d6f0:	683b      	ldr	r3, [r7, #0]
 800d6f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d6f4:	4b0c      	ldr	r3, [pc, #48]	; (800d728 <prvHeapInit+0xb4>)
 800d6f6:	681a      	ldr	r2, [r3, #0]
 800d6f8:	683b      	ldr	r3, [r7, #0]
 800d6fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d6fc:	683b      	ldr	r3, [r7, #0]
 800d6fe:	685b      	ldr	r3, [r3, #4]
 800d700:	4a0a      	ldr	r2, [pc, #40]	; (800d72c <prvHeapInit+0xb8>)
 800d702:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d704:	683b      	ldr	r3, [r7, #0]
 800d706:	685b      	ldr	r3, [r3, #4]
 800d708:	4a09      	ldr	r2, [pc, #36]	; (800d730 <prvHeapInit+0xbc>)
 800d70a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d70c:	4b09      	ldr	r3, [pc, #36]	; (800d734 <prvHeapInit+0xc0>)
 800d70e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d712:	601a      	str	r2, [r3, #0]
}
 800d714:	bf00      	nop
 800d716:	3714      	adds	r7, #20
 800d718:	46bd      	mov	sp, r7
 800d71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d71e:	4770      	bx	lr
 800d720:	24000888 	.word	0x24000888
 800d724:	24004488 	.word	0x24004488
 800d728:	24004490 	.word	0x24004490
 800d72c:	24004498 	.word	0x24004498
 800d730:	24004494 	.word	0x24004494
 800d734:	240044a4 	.word	0x240044a4

0800d738 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d738:	b480      	push	{r7}
 800d73a:	b085      	sub	sp, #20
 800d73c:	af00      	add	r7, sp, #0
 800d73e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d740:	4b28      	ldr	r3, [pc, #160]	; (800d7e4 <prvInsertBlockIntoFreeList+0xac>)
 800d742:	60fb      	str	r3, [r7, #12]
 800d744:	e002      	b.n	800d74c <prvInsertBlockIntoFreeList+0x14>
 800d746:	68fb      	ldr	r3, [r7, #12]
 800d748:	681b      	ldr	r3, [r3, #0]
 800d74a:	60fb      	str	r3, [r7, #12]
 800d74c:	68fb      	ldr	r3, [r7, #12]
 800d74e:	681b      	ldr	r3, [r3, #0]
 800d750:	687a      	ldr	r2, [r7, #4]
 800d752:	429a      	cmp	r2, r3
 800d754:	d8f7      	bhi.n	800d746 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d756:	68fb      	ldr	r3, [r7, #12]
 800d758:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d75a:	68fb      	ldr	r3, [r7, #12]
 800d75c:	685b      	ldr	r3, [r3, #4]
 800d75e:	68ba      	ldr	r2, [r7, #8]
 800d760:	4413      	add	r3, r2
 800d762:	687a      	ldr	r2, [r7, #4]
 800d764:	429a      	cmp	r2, r3
 800d766:	d108      	bne.n	800d77a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d768:	68fb      	ldr	r3, [r7, #12]
 800d76a:	685a      	ldr	r2, [r3, #4]
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	685b      	ldr	r3, [r3, #4]
 800d770:	441a      	add	r2, r3
 800d772:	68fb      	ldr	r3, [r7, #12]
 800d774:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d776:	68fb      	ldr	r3, [r7, #12]
 800d778:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	685b      	ldr	r3, [r3, #4]
 800d782:	68ba      	ldr	r2, [r7, #8]
 800d784:	441a      	add	r2, r3
 800d786:	68fb      	ldr	r3, [r7, #12]
 800d788:	681b      	ldr	r3, [r3, #0]
 800d78a:	429a      	cmp	r2, r3
 800d78c:	d118      	bne.n	800d7c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d78e:	68fb      	ldr	r3, [r7, #12]
 800d790:	681a      	ldr	r2, [r3, #0]
 800d792:	4b15      	ldr	r3, [pc, #84]	; (800d7e8 <prvInsertBlockIntoFreeList+0xb0>)
 800d794:	681b      	ldr	r3, [r3, #0]
 800d796:	429a      	cmp	r2, r3
 800d798:	d00d      	beq.n	800d7b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	685a      	ldr	r2, [r3, #4]
 800d79e:	68fb      	ldr	r3, [r7, #12]
 800d7a0:	681b      	ldr	r3, [r3, #0]
 800d7a2:	685b      	ldr	r3, [r3, #4]
 800d7a4:	441a      	add	r2, r3
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d7aa:	68fb      	ldr	r3, [r7, #12]
 800d7ac:	681b      	ldr	r3, [r3, #0]
 800d7ae:	681a      	ldr	r2, [r3, #0]
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	601a      	str	r2, [r3, #0]
 800d7b4:	e008      	b.n	800d7c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d7b6:	4b0c      	ldr	r3, [pc, #48]	; (800d7e8 <prvInsertBlockIntoFreeList+0xb0>)
 800d7b8:	681a      	ldr	r2, [r3, #0]
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	601a      	str	r2, [r3, #0]
 800d7be:	e003      	b.n	800d7c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d7c0:	68fb      	ldr	r3, [r7, #12]
 800d7c2:	681a      	ldr	r2, [r3, #0]
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d7c8:	68fa      	ldr	r2, [r7, #12]
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	429a      	cmp	r2, r3
 800d7ce:	d002      	beq.n	800d7d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d7d0:	68fb      	ldr	r3, [r7, #12]
 800d7d2:	687a      	ldr	r2, [r7, #4]
 800d7d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d7d6:	bf00      	nop
 800d7d8:	3714      	adds	r7, #20
 800d7da:	46bd      	mov	sp, r7
 800d7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7e0:	4770      	bx	lr
 800d7e2:	bf00      	nop
 800d7e4:	24004488 	.word	0x24004488
 800d7e8:	24004490 	.word	0x24004490

0800d7ec <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 800d7ec:	b580      	push	{r7, lr}
 800d7ee:	b084      	sub	sp, #16
 800d7f0:	af00      	add	r7, sp, #0
 800d7f2:	6078      	str	r0, [r7, #4]
 800d7f4:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800d7f6:	683b      	ldr	r3, [r7, #0]
 800d7f8:	681b      	ldr	r3, [r3, #0]
 800d7fa:	330c      	adds	r3, #12
 800d7fc:	461a      	mov	r2, r3
 800d7fe:	6839      	ldr	r1, [r7, #0]
 800d800:	6878      	ldr	r0, [r7, #4]
 800d802:	f003 fd8f 	bl	8011324 <tcpip_send_msg_wait_sem>
 800d806:	4603      	mov	r3, r0
 800d808:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800d80a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d103      	bne.n	800d81a <netconn_apimsg+0x2e>
    return apimsg->err;
 800d812:	683b      	ldr	r3, [r7, #0]
 800d814:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800d818:	e001      	b.n	800d81e <netconn_apimsg+0x32>
  }
  return err;
 800d81a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d81e:	4618      	mov	r0, r3
 800d820:	3710      	adds	r7, #16
 800d822:	46bd      	mov	sp, r7
 800d824:	bd80      	pop	{r7, pc}
	...

0800d828 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 800d828:	b580      	push	{r7, lr}
 800d82a:	b08c      	sub	sp, #48	; 0x30
 800d82c:	af00      	add	r7, sp, #0
 800d82e:	4603      	mov	r3, r0
 800d830:	603a      	str	r2, [r7, #0]
 800d832:	71fb      	strb	r3, [r7, #7]
 800d834:	460b      	mov	r3, r1
 800d836:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 800d838:	79fb      	ldrb	r3, [r7, #7]
 800d83a:	6839      	ldr	r1, [r7, #0]
 800d83c:	4618      	mov	r0, r3
 800d83e:	f001 f9a3 	bl	800eb88 <netconn_alloc>
 800d842:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 800d844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d846:	2b00      	cmp	r3, #0
 800d848:	d054      	beq.n	800d8f4 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 800d84a:	79bb      	ldrb	r3, [r7, #6]
 800d84c:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 800d84e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d850:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 800d852:	f107 0308 	add.w	r3, r7, #8
 800d856:	4619      	mov	r1, r3
 800d858:	4829      	ldr	r0, [pc, #164]	; (800d900 <netconn_new_with_proto_and_callback+0xd8>)
 800d85a:	f7ff ffc7 	bl	800d7ec <netconn_apimsg>
 800d85e:	4603      	mov	r3, r0
 800d860:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 800d864:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800d868:	2b00      	cmp	r3, #0
 800d86a:	d043      	beq.n	800d8f4 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 800d86c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d86e:	685b      	ldr	r3, [r3, #4]
 800d870:	2b00      	cmp	r3, #0
 800d872:	d005      	beq.n	800d880 <netconn_new_with_proto_and_callback+0x58>
 800d874:	4b23      	ldr	r3, [pc, #140]	; (800d904 <netconn_new_with_proto_and_callback+0xdc>)
 800d876:	22a3      	movs	r2, #163	; 0xa3
 800d878:	4923      	ldr	r1, [pc, #140]	; (800d908 <netconn_new_with_proto_and_callback+0xe0>)
 800d87a:	4824      	ldr	r0, [pc, #144]	; (800d90c <netconn_new_with_proto_and_callback+0xe4>)
 800d87c:	f011 fec2 	bl	801f604 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 800d880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d882:	3310      	adds	r3, #16
 800d884:	4618      	mov	r0, r3
 800d886:	f010 fed8 	bl	801e63a <sys_mbox_valid>
 800d88a:	4603      	mov	r3, r0
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	d105      	bne.n	800d89c <netconn_new_with_proto_and_callback+0x74>
 800d890:	4b1c      	ldr	r3, [pc, #112]	; (800d904 <netconn_new_with_proto_and_callback+0xdc>)
 800d892:	22a4      	movs	r2, #164	; 0xa4
 800d894:	491e      	ldr	r1, [pc, #120]	; (800d910 <netconn_new_with_proto_and_callback+0xe8>)
 800d896:	481d      	ldr	r0, [pc, #116]	; (800d90c <netconn_new_with_proto_and_callback+0xe4>)
 800d898:	f011 feb4 	bl	801f604 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 800d89c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d89e:	3314      	adds	r3, #20
 800d8a0:	4618      	mov	r0, r3
 800d8a2:	f010 feca 	bl	801e63a <sys_mbox_valid>
 800d8a6:	4603      	mov	r3, r0
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d005      	beq.n	800d8b8 <netconn_new_with_proto_and_callback+0x90>
 800d8ac:	4b15      	ldr	r3, [pc, #84]	; (800d904 <netconn_new_with_proto_and_callback+0xdc>)
 800d8ae:	22a6      	movs	r2, #166	; 0xa6
 800d8b0:	4918      	ldr	r1, [pc, #96]	; (800d914 <netconn_new_with_proto_and_callback+0xec>)
 800d8b2:	4816      	ldr	r0, [pc, #88]	; (800d90c <netconn_new_with_proto_and_callback+0xe4>)
 800d8b4:	f011 fea6 	bl	801f604 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 800d8b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8ba:	330c      	adds	r3, #12
 800d8bc:	4618      	mov	r0, r3
 800d8be:	f010 ff4d 	bl	801e75c <sys_sem_valid>
 800d8c2:	4603      	mov	r3, r0
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d105      	bne.n	800d8d4 <netconn_new_with_proto_and_callback+0xac>
 800d8c8:	4b0e      	ldr	r3, [pc, #56]	; (800d904 <netconn_new_with_proto_and_callback+0xdc>)
 800d8ca:	22a9      	movs	r2, #169	; 0xa9
 800d8cc:	4912      	ldr	r1, [pc, #72]	; (800d918 <netconn_new_with_proto_and_callback+0xf0>)
 800d8ce:	480f      	ldr	r0, [pc, #60]	; (800d90c <netconn_new_with_proto_and_callback+0xe4>)
 800d8d0:	f011 fe98 	bl	801f604 <iprintf>
      sys_sem_free(&conn->op_completed);
 800d8d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8d6:	330c      	adds	r3, #12
 800d8d8:	4618      	mov	r0, r3
 800d8da:	f010 ff32 	bl	801e742 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 800d8de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8e0:	3310      	adds	r3, #16
 800d8e2:	4618      	mov	r0, r3
 800d8e4:	f010 fe22 	bl	801e52c <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 800d8e8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d8ea:	2007      	movs	r0, #7
 800d8ec:	f004 fb80 	bl	8011ff0 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 800d8f0:	2300      	movs	r3, #0
 800d8f2:	e000      	b.n	800d8f6 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 800d8f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800d8f6:	4618      	mov	r0, r3
 800d8f8:	3730      	adds	r7, #48	; 0x30
 800d8fa:	46bd      	mov	sp, r7
 800d8fc:	bd80      	pop	{r7, pc}
 800d8fe:	bf00      	nop
 800d900:	0800eb5d 	.word	0x0800eb5d
 800d904:	080233a0 	.word	0x080233a0
 800d908:	080233d4 	.word	0x080233d4
 800d90c:	080233f8 	.word	0x080233f8
 800d910:	08023420 	.word	0x08023420
 800d914:	08023438 	.word	0x08023438
 800d918:	0802345c 	.word	0x0802345c

0800d91c <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 800d91c:	b580      	push	{r7, lr}
 800d91e:	b08c      	sub	sp, #48	; 0x30
 800d920:	af00      	add	r7, sp, #0
 800d922:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	2b00      	cmp	r3, #0
 800d928:	d101      	bne.n	800d92e <netconn_prepare_delete+0x12>
    return ERR_OK;
 800d92a:	2300      	movs	r3, #0
 800d92c:	e014      	b.n	800d958 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800d932:	2329      	movs	r3, #41	; 0x29
 800d934:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 800d936:	f107 030c 	add.w	r3, r7, #12
 800d93a:	4619      	mov	r1, r3
 800d93c:	4808      	ldr	r0, [pc, #32]	; (800d960 <netconn_prepare_delete+0x44>)
 800d93e:	f7ff ff55 	bl	800d7ec <netconn_apimsg>
 800d942:	4603      	mov	r3, r0
 800d944:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 800d948:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	d002      	beq.n	800d956 <netconn_prepare_delete+0x3a>
    return err;
 800d950:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800d954:	e000      	b.n	800d958 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 800d956:	2300      	movs	r3, #0
}
 800d958:	4618      	mov	r0, r3
 800d95a:	3730      	adds	r7, #48	; 0x30
 800d95c:	46bd      	mov	sp, r7
 800d95e:	bd80      	pop	{r7, pc}
 800d960:	0800f0c1 	.word	0x0800f0c1

0800d964 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 800d964:	b580      	push	{r7, lr}
 800d966:	b084      	sub	sp, #16
 800d968:	af00      	add	r7, sp, #0
 800d96a:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d101      	bne.n	800d976 <netconn_delete+0x12>
    return ERR_OK;
 800d972:	2300      	movs	r3, #0
 800d974:	e00d      	b.n	800d992 <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 800d976:	6878      	ldr	r0, [r7, #4]
 800d978:	f7ff ffd0 	bl	800d91c <netconn_prepare_delete>
 800d97c:	4603      	mov	r3, r0
 800d97e:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 800d980:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d984:	2b00      	cmp	r3, #0
 800d986:	d102      	bne.n	800d98e <netconn_delete+0x2a>
    netconn_free(conn);
 800d988:	6878      	ldr	r0, [r7, #4]
 800d98a:	f001 f96b 	bl	800ec64 <netconn_free>
  }
  return err;
 800d98e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d992:	4618      	mov	r0, r3
 800d994:	3710      	adds	r7, #16
 800d996:	46bd      	mov	sp, r7
 800d998:	bd80      	pop	{r7, pc}
	...

0800d99c <netconn_getaddr>:
 * @return ERR_CONN for invalid connections
 *         ERR_OK if the information was retrieved
 */
err_t
netconn_getaddr(struct netconn *conn, ip_addr_t *addr, u16_t *port, u8_t local)
{
 800d99c:	b580      	push	{r7, lr}
 800d99e:	b08e      	sub	sp, #56	; 0x38
 800d9a0:	af00      	add	r7, sp, #0
 800d9a2:	60f8      	str	r0, [r7, #12]
 800d9a4:	60b9      	str	r1, [r7, #8]
 800d9a6:	607a      	str	r2, [r7, #4]
 800d9a8:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_getaddr: invalid conn", (conn != NULL), return ERR_ARG;);
 800d9aa:	68fb      	ldr	r3, [r7, #12]
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d109      	bne.n	800d9c4 <netconn_getaddr+0x28>
 800d9b0:	4b1d      	ldr	r3, [pc, #116]	; (800da28 <netconn_getaddr+0x8c>)
 800d9b2:	f44f 7289 	mov.w	r2, #274	; 0x112
 800d9b6:	491d      	ldr	r1, [pc, #116]	; (800da2c <netconn_getaddr+0x90>)
 800d9b8:	481d      	ldr	r0, [pc, #116]	; (800da30 <netconn_getaddr+0x94>)
 800d9ba:	f011 fe23 	bl	801f604 <iprintf>
 800d9be:	f06f 030f 	mvn.w	r3, #15
 800d9c2:	e02d      	b.n	800da20 <netconn_getaddr+0x84>
  LWIP_ERROR("netconn_getaddr: invalid addr", (addr != NULL), return ERR_ARG;);
 800d9c4:	68bb      	ldr	r3, [r7, #8]
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d109      	bne.n	800d9de <netconn_getaddr+0x42>
 800d9ca:	4b17      	ldr	r3, [pc, #92]	; (800da28 <netconn_getaddr+0x8c>)
 800d9cc:	f240 1213 	movw	r2, #275	; 0x113
 800d9d0:	4918      	ldr	r1, [pc, #96]	; (800da34 <netconn_getaddr+0x98>)
 800d9d2:	4817      	ldr	r0, [pc, #92]	; (800da30 <netconn_getaddr+0x94>)
 800d9d4:	f011 fe16 	bl	801f604 <iprintf>
 800d9d8:	f06f 030f 	mvn.w	r3, #15
 800d9dc:	e020      	b.n	800da20 <netconn_getaddr+0x84>
  LWIP_ERROR("netconn_getaddr: invalid port", (port != NULL), return ERR_ARG;);
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d109      	bne.n	800d9f8 <netconn_getaddr+0x5c>
 800d9e4:	4b10      	ldr	r3, [pc, #64]	; (800da28 <netconn_getaddr+0x8c>)
 800d9e6:	f44f 728a 	mov.w	r2, #276	; 0x114
 800d9ea:	4913      	ldr	r1, [pc, #76]	; (800da38 <netconn_getaddr+0x9c>)
 800d9ec:	4810      	ldr	r0, [pc, #64]	; (800da30 <netconn_getaddr+0x94>)
 800d9ee:	f011 fe09 	bl	801f604 <iprintf>
 800d9f2:	f06f 030f 	mvn.w	r3, #15
 800d9f6:	e013      	b.n	800da20 <netconn_getaddr+0x84>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800d9f8:	68fb      	ldr	r3, [r7, #12]
 800d9fa:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.ad.local = local;
 800d9fc:	78fb      	ldrb	r3, [r7, #3]
 800d9fe:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
#if LWIP_MPU_COMPATIBLE
  err = netconn_apimsg(lwip_netconn_do_getaddr, &API_MSG_VAR_REF(msg));
  *addr = msg->msg.ad.ipaddr;
  *port = msg->msg.ad.port;
#else /* LWIP_MPU_COMPATIBLE */
  msg.msg.ad.ipaddr = addr;
 800da02:	68bb      	ldr	r3, [r7, #8]
 800da04:	61fb      	str	r3, [r7, #28]
  msg.msg.ad.port = port;
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	623b      	str	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_getaddr, &msg);
 800da0a:	f107 0314 	add.w	r3, r7, #20
 800da0e:	4619      	mov	r1, r3
 800da10:	480a      	ldr	r0, [pc, #40]	; (800da3c <netconn_getaddr+0xa0>)
 800da12:	f7ff feeb 	bl	800d7ec <netconn_apimsg>
 800da16:	4603      	mov	r3, r0
 800da18:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
#endif /* LWIP_MPU_COMPATIBLE */
  API_MSG_VAR_FREE(msg);

  return err;
 800da1c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800da20:	4618      	mov	r0, r3
 800da22:	3738      	adds	r7, #56	; 0x38
 800da24:	46bd      	mov	sp, r7
 800da26:	bd80      	pop	{r7, pc}
 800da28:	080233a0 	.word	0x080233a0
 800da2c:	08023478 	.word	0x08023478
 800da30:	080233f8 	.word	0x080233f8
 800da34:	08023498 	.word	0x08023498
 800da38:	080234b8 	.word	0x080234b8
 800da3c:	0800f9e1 	.word	0x0800f9e1

0800da40 <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 800da40:	b580      	push	{r7, lr}
 800da42:	b08e      	sub	sp, #56	; 0x38
 800da44:	af00      	add	r7, sp, #0
 800da46:	60f8      	str	r0, [r7, #12]
 800da48:	60b9      	str	r1, [r7, #8]
 800da4a:	4613      	mov	r3, r2
 800da4c:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 800da4e:	68fb      	ldr	r3, [r7, #12]
 800da50:	2b00      	cmp	r3, #0
 800da52:	d109      	bne.n	800da68 <netconn_bind+0x28>
 800da54:	4b11      	ldr	r3, [pc, #68]	; (800da9c <netconn_bind+0x5c>)
 800da56:	f44f 729c 	mov.w	r2, #312	; 0x138
 800da5a:	4911      	ldr	r1, [pc, #68]	; (800daa0 <netconn_bind+0x60>)
 800da5c:	4811      	ldr	r0, [pc, #68]	; (800daa4 <netconn_bind+0x64>)
 800da5e:	f011 fdd1 	bl	801f604 <iprintf>
 800da62:	f06f 030f 	mvn.w	r3, #15
 800da66:	e015      	b.n	800da94 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 800da68:	68bb      	ldr	r3, [r7, #8]
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d101      	bne.n	800da72 <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 800da6e:	4b0e      	ldr	r3, [pc, #56]	; (800daa8 <netconn_bind+0x68>)
 800da70:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800da72:	68fb      	ldr	r3, [r7, #12]
 800da74:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 800da76:	68bb      	ldr	r3, [r7, #8]
 800da78:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 800da7a:	88fb      	ldrh	r3, [r7, #6]
 800da7c:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 800da7e:	f107 0314 	add.w	r3, r7, #20
 800da82:	4619      	mov	r1, r3
 800da84:	4809      	ldr	r0, [pc, #36]	; (800daac <netconn_bind+0x6c>)
 800da86:	f7ff feb1 	bl	800d7ec <netconn_apimsg>
 800da8a:	4603      	mov	r3, r0
 800da8c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 800da90:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800da94:	4618      	mov	r0, r3
 800da96:	3738      	adds	r7, #56	; 0x38
 800da98:	46bd      	mov	sp, r7
 800da9a:	bd80      	pop	{r7, pc}
 800da9c:	080233a0 	.word	0x080233a0
 800daa0:	080234d8 	.word	0x080234d8
 800daa4:	080233f8 	.word	0x080233f8
 800daa8:	0802718c 	.word	0x0802718c
 800daac:	0800f289 	.word	0x0800f289

0800dab0 <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 800dab0:	b580      	push	{r7, lr}
 800dab2:	b08c      	sub	sp, #48	; 0x30
 800dab4:	af00      	add	r7, sp, #0
 800dab6:	6078      	str	r0, [r7, #4]
 800dab8:	460b      	mov	r3, r1
 800daba:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d109      	bne.n	800dad6 <netconn_listen_with_backlog+0x26>
 800dac2:	4b0d      	ldr	r3, [pc, #52]	; (800daf8 <netconn_listen_with_backlog+0x48>)
 800dac4:	f240 12bb 	movw	r2, #443	; 0x1bb
 800dac8:	490c      	ldr	r1, [pc, #48]	; (800dafc <netconn_listen_with_backlog+0x4c>)
 800daca:	480d      	ldr	r0, [pc, #52]	; (800db00 <netconn_listen_with_backlog+0x50>)
 800dacc:	f011 fd9a 	bl	801f604 <iprintf>
 800dad0:	f06f 030f 	mvn.w	r3, #15
 800dad4:	e00c      	b.n	800daf0 <netconn_listen_with_backlog+0x40>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	60fb      	str	r3, [r7, #12]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 800dada:	f107 030c 	add.w	r3, r7, #12
 800dade:	4619      	mov	r1, r3
 800dae0:	4808      	ldr	r0, [pc, #32]	; (800db04 <netconn_listen_with_backlog+0x54>)
 800dae2:	f7ff fe83 	bl	800d7ec <netconn_apimsg>
 800dae6:	4603      	mov	r3, r0
 800dae8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800daec:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 800daf0:	4618      	mov	r0, r3
 800daf2:	3730      	adds	r7, #48	; 0x30
 800daf4:	46bd      	mov	sp, r7
 800daf6:	bd80      	pop	{r7, pc}
 800daf8:	080233a0 	.word	0x080233a0
 800dafc:	08023558 	.word	0x08023558
 800db00:	080233f8 	.word	0x080233f8
 800db04:	0800f2fd 	.word	0x0800f2fd

0800db08 <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 800db08:	b580      	push	{r7, lr}
 800db0a:	b086      	sub	sp, #24
 800db0c:	af00      	add	r7, sp, #0
 800db0e:	6078      	str	r0, [r7, #4]
 800db10:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 800db12:	683b      	ldr	r3, [r7, #0]
 800db14:	2b00      	cmp	r3, #0
 800db16:	d109      	bne.n	800db2c <netconn_accept+0x24>
 800db18:	4b3d      	ldr	r3, [pc, #244]	; (800dc10 <netconn_accept+0x108>)
 800db1a:	f240 12e1 	movw	r2, #481	; 0x1e1
 800db1e:	493d      	ldr	r1, [pc, #244]	; (800dc14 <netconn_accept+0x10c>)
 800db20:	483d      	ldr	r0, [pc, #244]	; (800dc18 <netconn_accept+0x110>)
 800db22:	f011 fd6f 	bl	801f604 <iprintf>
 800db26:	f06f 030f 	mvn.w	r3, #15
 800db2a:	e06c      	b.n	800dc06 <netconn_accept+0xfe>
  *new_conn = NULL;
 800db2c:	683b      	ldr	r3, [r7, #0]
 800db2e:	2200      	movs	r2, #0
 800db30:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	2b00      	cmp	r3, #0
 800db36:	d109      	bne.n	800db4c <netconn_accept+0x44>
 800db38:	4b35      	ldr	r3, [pc, #212]	; (800dc10 <netconn_accept+0x108>)
 800db3a:	f240 12e3 	movw	r2, #483	; 0x1e3
 800db3e:	4937      	ldr	r1, [pc, #220]	; (800dc1c <netconn_accept+0x114>)
 800db40:	4835      	ldr	r0, [pc, #212]	; (800dc18 <netconn_accept+0x110>)
 800db42:	f011 fd5f 	bl	801f604 <iprintf>
 800db46:	f06f 030f 	mvn.w	r3, #15
 800db4a:	e05c      	b.n	800dc06 <netconn_accept+0xfe>

  /* NOTE: Although the opengroup spec says a pending error shall be returned to
           send/recv/getsockopt(SO_ERROR) only, we return it for listening
           connections also, to handle embedded-system errors */
  err = netconn_err(conn);
 800db4c:	6878      	ldr	r0, [r7, #4]
 800db4e:	f000 fb99 	bl	800e284 <netconn_err>
 800db52:	4603      	mov	r3, r0
 800db54:	74fb      	strb	r3, [r7, #19]
  if (err != ERR_OK) {
 800db56:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	d002      	beq.n	800db64 <netconn_accept+0x5c>
    /* return pending error */
    return err;
 800db5e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800db62:	e050      	b.n	800dc06 <netconn_accept+0xfe>
  }
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	3314      	adds	r3, #20
 800db68:	4618      	mov	r0, r3
 800db6a:	f010 fd66 	bl	801e63a <sys_mbox_valid>
 800db6e:	4603      	mov	r3, r0
 800db70:	2b00      	cmp	r3, #0
 800db72:	d005      	beq.n	800db80 <netconn_accept+0x78>
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	7f1b      	ldrb	r3, [r3, #28]
 800db78:	f003 0301 	and.w	r3, r3, #1
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	d002      	beq.n	800db86 <netconn_accept+0x7e>
    /* don't accept if closed: this might block the application task
       waiting on acceptmbox forever! */
    return ERR_CLSD;
 800db80:	f06f 030e 	mvn.w	r3, #14
 800db84:	e03f      	b.n	800dc06 <netconn_accept+0xfe>
  }

  API_MSG_VAR_ALLOC_ACCEPT(msg);

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn)) {
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	7f1b      	ldrb	r3, [r3, #28]
 800db8a:	f003 0302 	and.w	r3, r3, #2
 800db8e:	2b00      	cmp	r3, #0
 800db90:	d00e      	beq.n	800dbb0 <netconn_accept+0xa8>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	3314      	adds	r3, #20
 800db96:	f107 020c 	add.w	r2, r7, #12
 800db9a:	4611      	mov	r1, r2
 800db9c:	4618      	mov	r0, r3
 800db9e:	f010 fd30 	bl	801e602 <sys_arch_mbox_tryfetch>
 800dba2:	4603      	mov	r3, r0
 800dba4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dba8:	d10a      	bne.n	800dbc0 <netconn_accept+0xb8>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_WOULDBLOCK;
 800dbaa:	f06f 0306 	mvn.w	r3, #6
 800dbae:	e02a      	b.n	800dc06 <netconn_accept+0xfe>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	3314      	adds	r3, #20
 800dbb4:	f107 010c 	add.w	r1, r7, #12
 800dbb8:	2200      	movs	r2, #0
 800dbba:	4618      	mov	r0, r3
 800dbbc:	f010 fce2 	bl	801e584 <sys_arch_mbox_fetch>
    }
  }
#endif

  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	d005      	beq.n	800dbd4 <netconn_accept+0xcc>
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbcc:	2200      	movs	r2, #0
 800dbce:	2101      	movs	r1, #1
 800dbd0:	6878      	ldr	r0, [r7, #4]
 800dbd2:	4798      	blx	r3

  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 800dbd4:	68fb      	ldr	r3, [r7, #12]
 800dbd6:	f107 0213 	add.w	r2, r7, #19
 800dbda:	4611      	mov	r1, r2
 800dbdc:	4618      	mov	r0, r3
 800dbde:	f000 fba3 	bl	800e328 <lwip_netconn_is_err_msg>
 800dbe2:	4603      	mov	r3, r0
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	d002      	beq.n	800dbee <netconn_accept+0xe6>
    /* a connection has been aborted: e.g. out of pcbs or out of netconns during accept */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return err;
 800dbe8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800dbec:	e00b      	b.n	800dc06 <netconn_accept+0xfe>
  }
  if (accept_ptr == NULL) {
 800dbee:	68fb      	ldr	r3, [r7, #12]
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d102      	bne.n	800dbfa <netconn_accept+0xf2>
    /* connection has been aborted */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return ERR_CLSD;
 800dbf4:	f06f 030e 	mvn.w	r3, #14
 800dbf8:	e005      	b.n	800dc06 <netconn_accept+0xfe>
  }
  newconn = (struct netconn *)accept_ptr;
 800dbfa:	68fb      	ldr	r3, [r7, #12]
 800dbfc:	617b      	str	r3, [r7, #20]
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 800dbfe:	683b      	ldr	r3, [r7, #0]
 800dc00:	697a      	ldr	r2, [r7, #20]
 800dc02:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800dc04:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 800dc06:	4618      	mov	r0, r3
 800dc08:	3718      	adds	r7, #24
 800dc0a:	46bd      	mov	sp, r7
 800dc0c:	bd80      	pop	{r7, pc}
 800dc0e:	bf00      	nop
 800dc10:	080233a0 	.word	0x080233a0
 800dc14:	08023578 	.word	0x08023578
 800dc18:	080233f8 	.word	0x080233f8
 800dc1c:	08023598 	.word	0x08023598

0800dc20 <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 800dc20:	b580      	push	{r7, lr}
 800dc22:	b088      	sub	sp, #32
 800dc24:	af00      	add	r7, sp, #0
 800dc26:	60f8      	str	r0, [r7, #12]
 800dc28:	60b9      	str	r1, [r7, #8]
 800dc2a:	4613      	mov	r3, r2
 800dc2c:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 800dc2e:	2300      	movs	r3, #0
 800dc30:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800dc32:	68bb      	ldr	r3, [r7, #8]
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	d109      	bne.n	800dc4c <netconn_recv_data+0x2c>
 800dc38:	4b58      	ldr	r3, [pc, #352]	; (800dd9c <netconn_recv_data+0x17c>)
 800dc3a:	f44f 7212 	mov.w	r2, #584	; 0x248
 800dc3e:	4958      	ldr	r1, [pc, #352]	; (800dda0 <netconn_recv_data+0x180>)
 800dc40:	4858      	ldr	r0, [pc, #352]	; (800dda4 <netconn_recv_data+0x184>)
 800dc42:	f011 fcdf 	bl	801f604 <iprintf>
 800dc46:	f06f 030f 	mvn.w	r3, #15
 800dc4a:	e0a2      	b.n	800dd92 <netconn_recv_data+0x172>
  *new_buf = NULL;
 800dc4c:	68bb      	ldr	r3, [r7, #8]
 800dc4e:	2200      	movs	r2, #0
 800dc50:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800dc52:	68fb      	ldr	r3, [r7, #12]
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	d109      	bne.n	800dc6c <netconn_recv_data+0x4c>
 800dc58:	4b50      	ldr	r3, [pc, #320]	; (800dd9c <netconn_recv_data+0x17c>)
 800dc5a:	f240 224a 	movw	r2, #586	; 0x24a
 800dc5e:	4952      	ldr	r1, [pc, #328]	; (800dda8 <netconn_recv_data+0x188>)
 800dc60:	4850      	ldr	r0, [pc, #320]	; (800dda4 <netconn_recv_data+0x184>)
 800dc62:	f011 fccf 	bl	801f604 <iprintf>
 800dc66:	f06f 030f 	mvn.w	r3, #15
 800dc6a:	e092      	b.n	800dd92 <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800dc6c:	68fb      	ldr	r3, [r7, #12]
 800dc6e:	3310      	adds	r3, #16
 800dc70:	4618      	mov	r0, r3
 800dc72:	f010 fce2 	bl	801e63a <sys_mbox_valid>
 800dc76:	4603      	mov	r3, r0
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d10e      	bne.n	800dc9a <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 800dc7c:	68f8      	ldr	r0, [r7, #12]
 800dc7e:	f000 fb01 	bl	800e284 <netconn_err>
 800dc82:	4603      	mov	r3, r0
 800dc84:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 800dc86:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	d002      	beq.n	800dc94 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 800dc8e:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800dc92:	e07e      	b.n	800dd92 <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 800dc94:	f06f 030a 	mvn.w	r3, #10
 800dc98:	e07b      	b.n	800dd92 <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800dc9a:	68fb      	ldr	r3, [r7, #12]
 800dc9c:	7f1b      	ldrb	r3, [r3, #28]
 800dc9e:	f003 0302 	and.w	r3, r3, #2
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	d10f      	bne.n	800dcc6 <netconn_recv_data+0xa6>
 800dca6:	79fb      	ldrb	r3, [r7, #7]
 800dca8:	f003 0304 	and.w	r3, r3, #4
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	d10a      	bne.n	800dcc6 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800dcb0:	68fb      	ldr	r3, [r7, #12]
 800dcb2:	7f1b      	ldrb	r3, [r3, #28]
 800dcb4:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d104      	bne.n	800dcc6 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800dcbc:	68fb      	ldr	r3, [r7, #12]
 800dcbe:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d023      	beq.n	800dd0e <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 800dcc6:	68fb      	ldr	r3, [r7, #12]
 800dcc8:	3310      	adds	r3, #16
 800dcca:	f107 0218 	add.w	r2, r7, #24
 800dcce:	4611      	mov	r1, r2
 800dcd0:	4618      	mov	r0, r3
 800dcd2:	f010 fc96 	bl	801e602 <sys_arch_mbox_tryfetch>
 800dcd6:	4603      	mov	r3, r0
 800dcd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dcdc:	d11f      	bne.n	800dd1e <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 800dcde:	68f8      	ldr	r0, [r7, #12]
 800dce0:	f000 fad0 	bl	800e284 <netconn_err>
 800dce4:	4603      	mov	r3, r0
 800dce6:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 800dce8:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	d002      	beq.n	800dcf6 <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 800dcf0:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800dcf4:	e04d      	b.n	800dd92 <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 800dcf6:	68fb      	ldr	r3, [r7, #12]
 800dcf8:	7f1b      	ldrb	r3, [r3, #28]
 800dcfa:	f003 0301 	and.w	r3, r3, #1
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	d002      	beq.n	800dd08 <netconn_recv_data+0xe8>
        return ERR_CONN;
 800dd02:	f06f 030a 	mvn.w	r3, #10
 800dd06:	e044      	b.n	800dd92 <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 800dd08:	f06f 0306 	mvn.w	r3, #6
 800dd0c:	e041      	b.n	800dd92 <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 800dd0e:	68fb      	ldr	r3, [r7, #12]
 800dd10:	3310      	adds	r3, #16
 800dd12:	f107 0118 	add.w	r1, r7, #24
 800dd16:	2200      	movs	r2, #0
 800dd18:	4618      	mov	r0, r3
 800dd1a:	f010 fc33 	bl	801e584 <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800dd1e:	68fb      	ldr	r3, [r7, #12]
 800dd20:	781b      	ldrb	r3, [r3, #0]
 800dd22:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800dd26:	2b10      	cmp	r3, #16
 800dd28:	d117      	bne.n	800dd5a <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 800dd2a:	69bb      	ldr	r3, [r7, #24]
 800dd2c:	f107 0217 	add.w	r2, r7, #23
 800dd30:	4611      	mov	r1, r2
 800dd32:	4618      	mov	r0, r3
 800dd34:	f000 faf8 	bl	800e328 <lwip_netconn_is_err_msg>
 800dd38:	4603      	mov	r3, r0
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	d009      	beq.n	800dd52 <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 800dd3e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800dd42:	f113 0f0f 	cmn.w	r3, #15
 800dd46:	d101      	bne.n	800dd4c <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 800dd48:	2300      	movs	r3, #0
 800dd4a:	e022      	b.n	800dd92 <netconn_recv_data+0x172>
      }
      return err;
 800dd4c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800dd50:	e01f      	b.n	800dd92 <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 800dd52:	69bb      	ldr	r3, [r7, #24]
 800dd54:	891b      	ldrh	r3, [r3, #8]
 800dd56:	83fb      	strh	r3, [r7, #30]
 800dd58:	e00d      	b.n	800dd76 <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 800dd5a:	69bb      	ldr	r3, [r7, #24]
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d106      	bne.n	800dd6e <netconn_recv_data+0x14e>
 800dd60:	4b0e      	ldr	r3, [pc, #56]	; (800dd9c <netconn_recv_data+0x17c>)
 800dd62:	f240 2291 	movw	r2, #657	; 0x291
 800dd66:	4911      	ldr	r1, [pc, #68]	; (800ddac <netconn_recv_data+0x18c>)
 800dd68:	480e      	ldr	r0, [pc, #56]	; (800dda4 <netconn_recv_data+0x184>)
 800dd6a:	f011 fc4b 	bl	801f604 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 800dd6e:	69bb      	ldr	r3, [r7, #24]
 800dd70:	681b      	ldr	r3, [r3, #0]
 800dd72:	891b      	ldrh	r3, [r3, #8]
 800dd74:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 800dd76:	68fb      	ldr	r3, [r7, #12]
 800dd78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	d005      	beq.n	800dd8a <netconn_recv_data+0x16a>
 800dd7e:	68fb      	ldr	r3, [r7, #12]
 800dd80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd82:	8bfa      	ldrh	r2, [r7, #30]
 800dd84:	2101      	movs	r1, #1
 800dd86:	68f8      	ldr	r0, [r7, #12]
 800dd88:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 800dd8a:	69ba      	ldr	r2, [r7, #24]
 800dd8c:	68bb      	ldr	r3, [r7, #8]
 800dd8e:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800dd90:	2300      	movs	r3, #0
}
 800dd92:	4618      	mov	r0, r3
 800dd94:	3720      	adds	r7, #32
 800dd96:	46bd      	mov	sp, r7
 800dd98:	bd80      	pop	{r7, pc}
 800dd9a:	bf00      	nop
 800dd9c:	080233a0 	.word	0x080233a0
 800dda0:	080235b8 	.word	0x080235b8
 800dda4:	080233f8 	.word	0x080233f8
 800dda8:	080235d8 	.word	0x080235d8
 800ddac:	080235f4 	.word	0x080235f4

0800ddb0 <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 800ddb0:	b580      	push	{r7, lr}
 800ddb2:	b084      	sub	sp, #16
 800ddb4:	af00      	add	r7, sp, #0
 800ddb6:	60f8      	str	r0, [r7, #12]
 800ddb8:	60b9      	str	r1, [r7, #8]
 800ddba:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800ddbc:	68fb      	ldr	r3, [r7, #12]
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	d005      	beq.n	800ddce <netconn_tcp_recvd_msg+0x1e>
 800ddc2:	68fb      	ldr	r3, [r7, #12]
 800ddc4:	781b      	ldrb	r3, [r3, #0]
 800ddc6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ddca:	2b10      	cmp	r3, #16
 800ddcc:	d009      	beq.n	800dde2 <netconn_tcp_recvd_msg+0x32>
 800ddce:	4b0c      	ldr	r3, [pc, #48]	; (800de00 <netconn_tcp_recvd_msg+0x50>)
 800ddd0:	f240 22a7 	movw	r2, #679	; 0x2a7
 800ddd4:	490b      	ldr	r1, [pc, #44]	; (800de04 <netconn_tcp_recvd_msg+0x54>)
 800ddd6:	480c      	ldr	r0, [pc, #48]	; (800de08 <netconn_tcp_recvd_msg+0x58>)
 800ddd8:	f011 fc14 	bl	801f604 <iprintf>
 800dddc:	f06f 030f 	mvn.w	r3, #15
 800dde0:	e00a      	b.n	800ddf8 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	68fa      	ldr	r2, [r7, #12]
 800dde6:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	68ba      	ldr	r2, [r7, #8]
 800ddec:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 800ddee:	6879      	ldr	r1, [r7, #4]
 800ddf0:	4806      	ldr	r0, [pc, #24]	; (800de0c <netconn_tcp_recvd_msg+0x5c>)
 800ddf2:	f7ff fcfb 	bl	800d7ec <netconn_apimsg>
 800ddf6:	4603      	mov	r3, r0
}
 800ddf8:	4618      	mov	r0, r3
 800ddfa:	3710      	adds	r7, #16
 800ddfc:	46bd      	mov	sp, r7
 800ddfe:	bd80      	pop	{r7, pc}
 800de00:	080233a0 	.word	0x080233a0
 800de04:	08023600 	.word	0x08023600
 800de08:	080233f8 	.word	0x080233f8
 800de0c:	0800f4c7 	.word	0x0800f4c7

0800de10 <netconn_tcp_recvd>:

err_t
netconn_tcp_recvd(struct netconn *conn, size_t len)
{
 800de10:	b580      	push	{r7, lr}
 800de12:	b08c      	sub	sp, #48	; 0x30
 800de14:	af00      	add	r7, sp, #0
 800de16:	6078      	str	r0, [r7, #4]
 800de18:	6039      	str	r1, [r7, #0]
  err_t err;
  API_MSG_VAR_DECLARE(msg);
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	d005      	beq.n	800de2c <netconn_tcp_recvd+0x1c>
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	781b      	ldrb	r3, [r3, #0]
 800de24:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800de28:	2b10      	cmp	r3, #16
 800de2a:	d009      	beq.n	800de40 <netconn_tcp_recvd+0x30>
 800de2c:	4b0c      	ldr	r3, [pc, #48]	; (800de60 <netconn_tcp_recvd+0x50>)
 800de2e:	f240 22b5 	movw	r2, #693	; 0x2b5
 800de32:	490c      	ldr	r1, [pc, #48]	; (800de64 <netconn_tcp_recvd+0x54>)
 800de34:	480c      	ldr	r0, [pc, #48]	; (800de68 <netconn_tcp_recvd+0x58>)
 800de36:	f011 fbe5 	bl	801f604 <iprintf>
 800de3a:	f06f 030f 	mvn.w	r3, #15
 800de3e:	e00b      	b.n	800de58 <netconn_tcp_recvd+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  API_MSG_VAR_ALLOC(msg);
  err = netconn_tcp_recvd_msg(conn, len, &API_VAR_REF(msg));
 800de40:	f107 030c 	add.w	r3, r7, #12
 800de44:	461a      	mov	r2, r3
 800de46:	6839      	ldr	r1, [r7, #0]
 800de48:	6878      	ldr	r0, [r7, #4]
 800de4a:	f7ff ffb1 	bl	800ddb0 <netconn_tcp_recvd_msg>
 800de4e:	4603      	mov	r3, r0
 800de50:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);
  return err;
 800de54:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800de58:	4618      	mov	r0, r3
 800de5a:	3730      	adds	r7, #48	; 0x30
 800de5c:	46bd      	mov	sp, r7
 800de5e:	bd80      	pop	{r7, pc}
 800de60:	080233a0 	.word	0x080233a0
 800de64:	08023600 	.word	0x08023600
 800de68:	080233f8 	.word	0x080233f8

0800de6c <netconn_recv_data_tcp>:

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 800de6c:	b580      	push	{r7, lr}
 800de6e:	b090      	sub	sp, #64	; 0x40
 800de70:	af00      	add	r7, sp, #0
 800de72:	60f8      	str	r0, [r7, #12]
 800de74:	60b9      	str	r1, [r7, #8]
 800de76:	4613      	mov	r3, r2
 800de78:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800de7a:	68fb      	ldr	r3, [r7, #12]
 800de7c:	3310      	adds	r3, #16
 800de7e:	4618      	mov	r0, r3
 800de80:	f010 fbdb 	bl	801e63a <sys_mbox_valid>
 800de84:	4603      	mov	r3, r0
 800de86:	2b00      	cmp	r3, #0
 800de88:	d102      	bne.n	800de90 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 800de8a:	f06f 030a 	mvn.w	r3, #10
 800de8e:	e06d      	b.n	800df6c <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 800de90:	68fb      	ldr	r3, [r7, #12]
 800de92:	7f1b      	ldrb	r3, [r3, #28]
 800de94:	b25b      	sxtb	r3, r3
 800de96:	2b00      	cmp	r3, #0
 800de98:	da07      	bge.n	800deaa <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 800de9a:	68fb      	ldr	r3, [r7, #12]
 800de9c:	7f1b      	ldrb	r3, [r3, #28]
 800de9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dea2:	b2da      	uxtb	r2, r3
 800dea4:	68fb      	ldr	r3, [r7, #12]
 800dea6:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 800dea8:	e039      	b.n	800df1e <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 800deaa:	79fb      	ldrb	r3, [r7, #7]
 800deac:	461a      	mov	r2, r3
 800deae:	68b9      	ldr	r1, [r7, #8]
 800deb0:	68f8      	ldr	r0, [r7, #12]
 800deb2:	f7ff feb5 	bl	800dc20 <netconn_recv_data>
 800deb6:	4603      	mov	r3, r0
 800deb8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 800debc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d002      	beq.n	800deca <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 800dec4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800dec8:	e050      	b.n	800df6c <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 800deca:	68bb      	ldr	r3, [r7, #8]
 800decc:	681b      	ldr	r3, [r3, #0]
 800dece:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 800ded0:	79fb      	ldrb	r3, [r7, #7]
 800ded2:	f003 0308 	and.w	r3, r3, #8
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	d10e      	bne.n	800def8 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 800deda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dedc:	2b00      	cmp	r3, #0
 800dede:	d002      	beq.n	800dee6 <netconn_recv_data_tcp+0x7a>
 800dee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dee2:	891b      	ldrh	r3, [r3, #8]
 800dee4:	e000      	b.n	800dee8 <netconn_recv_data_tcp+0x7c>
 800dee6:	2301      	movs	r3, #1
 800dee8:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 800deea:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800deec:	f107 0214 	add.w	r2, r7, #20
 800def0:	4619      	mov	r1, r3
 800def2:	68f8      	ldr	r0, [r7, #12]
 800def4:	f7ff ff5c 	bl	800ddb0 <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 800def8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800defa:	2b00      	cmp	r3, #0
 800defc:	d134      	bne.n	800df68 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 800defe:	79fb      	ldrb	r3, [r7, #7]
 800df00:	f003 0310 	and.w	r3, r3, #16
 800df04:	2b00      	cmp	r3, #0
 800df06:	d009      	beq.n	800df1c <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 800df08:	68fb      	ldr	r3, [r7, #12]
 800df0a:	7f1b      	ldrb	r3, [r3, #28]
 800df0c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800df10:	b2da      	uxtb	r2, r3
 800df12:	68fb      	ldr	r3, [r7, #12]
 800df14:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 800df16:	f06f 0306 	mvn.w	r3, #6
 800df1a:	e027      	b.n	800df6c <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 800df1c:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800df1e:	68fb      	ldr	r3, [r7, #12]
 800df20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df22:	2b00      	cmp	r3, #0
 800df24:	d005      	beq.n	800df32 <netconn_recv_data_tcp+0xc6>
 800df26:	68fb      	ldr	r3, [r7, #12]
 800df28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df2a:	2200      	movs	r2, #0
 800df2c:	2101      	movs	r1, #1
 800df2e:	68f8      	ldr	r0, [r7, #12]
 800df30:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 800df32:	68fb      	ldr	r3, [r7, #12]
 800df34:	685b      	ldr	r3, [r3, #4]
 800df36:	2b00      	cmp	r3, #0
 800df38:	d10f      	bne.n	800df5a <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 800df3a:	68f8      	ldr	r0, [r7, #12]
 800df3c:	f000 f9a2 	bl	800e284 <netconn_err>
 800df40:	4603      	mov	r3, r0
 800df42:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 800df46:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	d002      	beq.n	800df54 <netconn_recv_data_tcp+0xe8>
          return err;
 800df4e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800df52:	e00b      	b.n	800df6c <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 800df54:	f06f 030d 	mvn.w	r3, #13
 800df58:	e008      	b.n	800df6c <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 800df5a:	2101      	movs	r1, #1
 800df5c:	68f8      	ldr	r0, [r7, #12]
 800df5e:	f000 f961 	bl	800e224 <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 800df62:	f06f 030e 	mvn.w	r3, #14
 800df66:	e001      	b.n	800df6c <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 800df68:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800df6c:	4618      	mov	r0, r3
 800df6e:	3740      	adds	r7, #64	; 0x40
 800df70:	46bd      	mov	sp, r7
 800df72:	bd80      	pop	{r7, pc}

0800df74 <netconn_recv_tcp_pbuf_flags>:
 *                memory error or another error, @see netconn_recv_data)
 *         ERR_ARG if conn is not a TCP netconn
 */
err_t
netconn_recv_tcp_pbuf_flags(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 800df74:	b580      	push	{r7, lr}
 800df76:	b084      	sub	sp, #16
 800df78:	af00      	add	r7, sp, #0
 800df7a:	60f8      	str	r0, [r7, #12]
 800df7c:	60b9      	str	r1, [r7, #8]
 800df7e:	4613      	mov	r3, r2
 800df80:	71fb      	strb	r3, [r7, #7]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800df82:	68fb      	ldr	r3, [r7, #12]
 800df84:	2b00      	cmp	r3, #0
 800df86:	d005      	beq.n	800df94 <netconn_recv_tcp_pbuf_flags+0x20>
 800df88:	68fb      	ldr	r3, [r7, #12]
 800df8a:	781b      	ldrb	r3, [r3, #0]
 800df8c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800df90:	2b10      	cmp	r3, #16
 800df92:	d009      	beq.n	800dfa8 <netconn_recv_tcp_pbuf_flags+0x34>
 800df94:	4b0a      	ldr	r3, [pc, #40]	; (800dfc0 <netconn_recv_tcp_pbuf_flags+0x4c>)
 800df96:	f240 3225 	movw	r2, #805	; 0x325
 800df9a:	490a      	ldr	r1, [pc, #40]	; (800dfc4 <netconn_recv_tcp_pbuf_flags+0x50>)
 800df9c:	480a      	ldr	r0, [pc, #40]	; (800dfc8 <netconn_recv_tcp_pbuf_flags+0x54>)
 800df9e:	f011 fb31 	bl	801f604 <iprintf>
 800dfa2:	f06f 030f 	mvn.w	r3, #15
 800dfa6:	e006      	b.n	800dfb6 <netconn_recv_tcp_pbuf_flags+0x42>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  return netconn_recv_data_tcp(conn, new_buf, apiflags);
 800dfa8:	79fb      	ldrb	r3, [r7, #7]
 800dfaa:	461a      	mov	r2, r3
 800dfac:	68b9      	ldr	r1, [r7, #8]
 800dfae:	68f8      	ldr	r0, [r7, #12]
 800dfb0:	f7ff ff5c 	bl	800de6c <netconn_recv_data_tcp>
 800dfb4:	4603      	mov	r3, r0
}
 800dfb6:	4618      	mov	r0, r3
 800dfb8:	3710      	adds	r7, #16
 800dfba:	46bd      	mov	sp, r7
 800dfbc:	bd80      	pop	{r7, pc}
 800dfbe:	bf00      	nop
 800dfc0:	080233a0 	.word	0x080233a0
 800dfc4:	08023600 	.word	0x08023600
 800dfc8:	080233f8 	.word	0x080233f8

0800dfcc <netconn_recv_udp_raw_netbuf_flags>:
 *                memory error or another error)
 *         ERR_ARG if conn is not a UDP/RAW netconn
 */
err_t
netconn_recv_udp_raw_netbuf_flags(struct netconn *conn, struct netbuf **new_buf, u8_t apiflags)
{
 800dfcc:	b580      	push	{r7, lr}
 800dfce:	b084      	sub	sp, #16
 800dfd0:	af00      	add	r7, sp, #0
 800dfd2:	60f8      	str	r0, [r7, #12]
 800dfd4:	60b9      	str	r1, [r7, #8]
 800dfd6:	4613      	mov	r3, r2
 800dfd8:	71fb      	strb	r3, [r7, #7]
  LWIP_ERROR("netconn_recv_udp_raw_netbuf: invalid conn", (conn != NULL) &&
 800dfda:	68fb      	ldr	r3, [r7, #12]
 800dfdc:	2b00      	cmp	r3, #0
 800dfde:	d005      	beq.n	800dfec <netconn_recv_udp_raw_netbuf_flags+0x20>
 800dfe0:	68fb      	ldr	r3, [r7, #12]
 800dfe2:	781b      	ldrb	r3, [r3, #0]
 800dfe4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800dfe8:	2b10      	cmp	r3, #16
 800dfea:	d109      	bne.n	800e000 <netconn_recv_udp_raw_netbuf_flags+0x34>
 800dfec:	4b0a      	ldr	r3, [pc, #40]	; (800e018 <netconn_recv_udp_raw_netbuf_flags+0x4c>)
 800dfee:	f44f 7253 	mov.w	r2, #844	; 0x34c
 800dff2:	490a      	ldr	r1, [pc, #40]	; (800e01c <netconn_recv_udp_raw_netbuf_flags+0x50>)
 800dff4:	480a      	ldr	r0, [pc, #40]	; (800e020 <netconn_recv_udp_raw_netbuf_flags+0x54>)
 800dff6:	f011 fb05 	bl	801f604 <iprintf>
 800dffa:	f06f 030f 	mvn.w	r3, #15
 800dffe:	e006      	b.n	800e00e <netconn_recv_udp_raw_netbuf_flags+0x42>
             NETCONNTYPE_GROUP(netconn_type(conn)) != NETCONN_TCP, return ERR_ARG;);

  return netconn_recv_data(conn, (void **)new_buf, apiflags);
 800e000:	79fb      	ldrb	r3, [r7, #7]
 800e002:	461a      	mov	r2, r3
 800e004:	68b9      	ldr	r1, [r7, #8]
 800e006:	68f8      	ldr	r0, [r7, #12]
 800e008:	f7ff fe0a 	bl	800dc20 <netconn_recv_data>
 800e00c:	4603      	mov	r3, r0
}
 800e00e:	4618      	mov	r0, r3
 800e010:	3710      	adds	r7, #16
 800e012:	46bd      	mov	sp, r7
 800e014:	bd80      	pop	{r7, pc}
 800e016:	bf00      	nop
 800e018:	080233a0 	.word	0x080233a0
 800e01c:	08023624 	.word	0x08023624
 800e020:	080233f8 	.word	0x080233f8

0800e024 <netconn_send>:
 * @param buf a netbuf containing the data to send
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_send(struct netconn *conn, struct netbuf *buf)
{
 800e024:	b580      	push	{r7, lr}
 800e026:	b08c      	sub	sp, #48	; 0x30
 800e028:	af00      	add	r7, sp, #0
 800e02a:	6078      	str	r0, [r7, #4]
 800e02c:	6039      	str	r1, [r7, #0]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	2b00      	cmp	r3, #0
 800e032:	d109      	bne.n	800e048 <netconn_send+0x24>
 800e034:	4b0e      	ldr	r3, [pc, #56]	; (800e070 <netconn_send+0x4c>)
 800e036:	f240 32b2 	movw	r2, #946	; 0x3b2
 800e03a:	490e      	ldr	r1, [pc, #56]	; (800e074 <netconn_send+0x50>)
 800e03c:	480e      	ldr	r0, [pc, #56]	; (800e078 <netconn_send+0x54>)
 800e03e:	f011 fae1 	bl	801f604 <iprintf>
 800e042:	f06f 030f 	mvn.w	r3, #15
 800e046:	e00e      	b.n	800e066 <netconn_send+0x42>

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_send: sending %"U16_F" bytes\n", buf->p->tot_len));

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	60fb      	str	r3, [r7, #12]
  API_MSG_VAR_REF(msg).msg.b = buf;
 800e04c:	683b      	ldr	r3, [r7, #0]
 800e04e:	617b      	str	r3, [r7, #20]
  err = netconn_apimsg(lwip_netconn_do_send, &API_MSG_VAR_REF(msg));
 800e050:	f107 030c 	add.w	r3, r7, #12
 800e054:	4619      	mov	r1, r3
 800e056:	4809      	ldr	r0, [pc, #36]	; (800e07c <netconn_send+0x58>)
 800e058:	f7ff fbc8 	bl	800d7ec <netconn_apimsg>
 800e05c:	4603      	mov	r3, r0
 800e05e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800e062:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800e066:	4618      	mov	r0, r3
 800e068:	3730      	adds	r7, #48	; 0x30
 800e06a:	46bd      	mov	sp, r7
 800e06c:	bd80      	pop	{r7, pc}
 800e06e:	bf00      	nop
 800e070:	080233a0 	.word	0x080233a0
 800e074:	0802365c 	.word	0x0802365c
 800e078:	080233f8 	.word	0x080233f8
 800e07c:	0800f42d 	.word	0x0800f42d

0800e080 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 800e080:	b580      	push	{r7, lr}
 800e082:	b088      	sub	sp, #32
 800e084:	af02      	add	r7, sp, #8
 800e086:	60f8      	str	r0, [r7, #12]
 800e088:	60b9      	str	r1, [r7, #8]
 800e08a:	607a      	str	r2, [r7, #4]
 800e08c:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 800e08e:	68bb      	ldr	r3, [r7, #8]
 800e090:	613b      	str	r3, [r7, #16]
  vector.len = size;
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 800e096:	78fa      	ldrb	r2, [r7, #3]
 800e098:	f107 0110 	add.w	r1, r7, #16
 800e09c:	6a3b      	ldr	r3, [r7, #32]
 800e09e:	9300      	str	r3, [sp, #0]
 800e0a0:	4613      	mov	r3, r2
 800e0a2:	2201      	movs	r2, #1
 800e0a4:	68f8      	ldr	r0, [r7, #12]
 800e0a6:	f000 f805 	bl	800e0b4 <netconn_write_vectors_partly>
 800e0aa:	4603      	mov	r3, r0
}
 800e0ac:	4618      	mov	r0, r3
 800e0ae:	3718      	adds	r7, #24
 800e0b0:	46bd      	mov	sp, r7
 800e0b2:	bd80      	pop	{r7, pc}

0800e0b4 <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 800e0b4:	b580      	push	{r7, lr}
 800e0b6:	b092      	sub	sp, #72	; 0x48
 800e0b8:	af00      	add	r7, sp, #0
 800e0ba:	60f8      	str	r0, [r7, #12]
 800e0bc:	60b9      	str	r1, [r7, #8]
 800e0be:	4611      	mov	r1, r2
 800e0c0:	461a      	mov	r2, r3
 800e0c2:	460b      	mov	r3, r1
 800e0c4:	80fb      	strh	r3, [r7, #6]
 800e0c6:	4613      	mov	r3, r2
 800e0c8:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 800e0ca:	68fb      	ldr	r3, [r7, #12]
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	d109      	bne.n	800e0e4 <netconn_write_vectors_partly+0x30>
 800e0d0:	4b4e      	ldr	r3, [pc, #312]	; (800e20c <netconn_write_vectors_partly+0x158>)
 800e0d2:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800e0d6:	494e      	ldr	r1, [pc, #312]	; (800e210 <netconn_write_vectors_partly+0x15c>)
 800e0d8:	484e      	ldr	r0, [pc, #312]	; (800e214 <netconn_write_vectors_partly+0x160>)
 800e0da:	f011 fa93 	bl	801f604 <iprintf>
 800e0de:	f06f 030f 	mvn.w	r3, #15
 800e0e2:	e08e      	b.n	800e202 <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 800e0e4:	68fb      	ldr	r3, [r7, #12]
 800e0e6:	781b      	ldrb	r3, [r3, #0]
 800e0e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e0ec:	2b10      	cmp	r3, #16
 800e0ee:	d009      	beq.n	800e104 <netconn_write_vectors_partly+0x50>
 800e0f0:	4b46      	ldr	r3, [pc, #280]	; (800e20c <netconn_write_vectors_partly+0x158>)
 800e0f2:	f240 32ef 	movw	r2, #1007	; 0x3ef
 800e0f6:	4948      	ldr	r1, [pc, #288]	; (800e218 <netconn_write_vectors_partly+0x164>)
 800e0f8:	4846      	ldr	r0, [pc, #280]	; (800e214 <netconn_write_vectors_partly+0x160>)
 800e0fa:	f011 fa83 	bl	801f604 <iprintf>
 800e0fe:	f06f 0305 	mvn.w	r3, #5
 800e102:	e07e      	b.n	800e202 <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800e104:	68fb      	ldr	r3, [r7, #12]
 800e106:	7f1b      	ldrb	r3, [r3, #28]
 800e108:	f003 0302 	and.w	r3, r3, #2
 800e10c:	2b00      	cmp	r3, #0
 800e10e:	d104      	bne.n	800e11a <netconn_write_vectors_partly+0x66>
 800e110:	797b      	ldrb	r3, [r7, #5]
 800e112:	f003 0304 	and.w	r3, r3, #4
 800e116:	2b00      	cmp	r3, #0
 800e118:	d001      	beq.n	800e11e <netconn_write_vectors_partly+0x6a>
 800e11a:	2301      	movs	r3, #1
 800e11c:	e000      	b.n	800e120 <netconn_write_vectors_partly+0x6c>
 800e11e:	2300      	movs	r3, #0
 800e120:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 800e124:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800e128:	2b00      	cmp	r3, #0
 800e12a:	d005      	beq.n	800e138 <netconn_write_vectors_partly+0x84>
 800e12c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e12e:	2b00      	cmp	r3, #0
 800e130:	d102      	bne.n	800e138 <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 800e132:	f06f 0305 	mvn.w	r3, #5
 800e136:	e064      	b.n	800e202 <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 800e138:	2300      	movs	r3, #0
 800e13a:	647b      	str	r3, [r7, #68]	; 0x44
  for (i = 0; i < vectorcnt; i++) {
 800e13c:	2300      	movs	r3, #0
 800e13e:	643b      	str	r3, [r7, #64]	; 0x40
 800e140:	e015      	b.n	800e16e <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 800e142:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e144:	00db      	lsls	r3, r3, #3
 800e146:	68ba      	ldr	r2, [r7, #8]
 800e148:	4413      	add	r3, r2
 800e14a:	685b      	ldr	r3, [r3, #4]
 800e14c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e14e:	4413      	add	r3, r2
 800e150:	647b      	str	r3, [r7, #68]	; 0x44
    if (size < vectors[i].len) {
 800e152:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e154:	00db      	lsls	r3, r3, #3
 800e156:	68ba      	ldr	r2, [r7, #8]
 800e158:	4413      	add	r3, r2
 800e15a:	685b      	ldr	r3, [r3, #4]
 800e15c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e15e:	429a      	cmp	r2, r3
 800e160:	d202      	bcs.n	800e168 <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 800e162:	f06f 0305 	mvn.w	r3, #5
 800e166:	e04c      	b.n	800e202 <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 800e168:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e16a:	3301      	adds	r3, #1
 800e16c:	643b      	str	r3, [r7, #64]	; 0x40
 800e16e:	88fb      	ldrh	r3, [r7, #6]
 800e170:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e172:	429a      	cmp	r2, r3
 800e174:	dbe5      	blt.n	800e142 <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 800e176:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e178:	2b00      	cmp	r3, #0
 800e17a:	d101      	bne.n	800e180 <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 800e17c:	2300      	movs	r3, #0
 800e17e:	e040      	b.n	800e202 <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 800e180:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e182:	2b00      	cmp	r3, #0
 800e184:	da0a      	bge.n	800e19c <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 800e186:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d102      	bne.n	800e192 <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 800e18c:	f06f 0305 	mvn.w	r3, #5
 800e190:	e037      	b.n	800e202 <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 800e192:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800e196:	63bb      	str	r3, [r7, #56]	; 0x38
    size = (size_t)limited;
 800e198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e19a:	647b      	str	r3, [r7, #68]	; 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 800e19c:	68fb      	ldr	r3, [r7, #12]
 800e19e:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 800e1a0:	68bb      	ldr	r3, [r7, #8]
 800e1a2:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 800e1a4:	88fb      	ldrh	r3, [r7, #6]
 800e1a6:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 800e1a8:	2300      	movs	r3, #0
 800e1aa:	627b      	str	r3, [r7, #36]	; 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 800e1ac:	797b      	ldrb	r3, [r7, #5]
 800e1ae:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 800e1b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e1b4:	62bb      	str	r3, [r7, #40]	; 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 800e1b6:	2300      	movs	r3, #0
 800e1b8:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 800e1ba:	f107 0314 	add.w	r3, r7, #20
 800e1be:	4619      	mov	r1, r3
 800e1c0:	4816      	ldr	r0, [pc, #88]	; (800e21c <netconn_write_vectors_partly+0x168>)
 800e1c2:	f7ff fb13 	bl	800d7ec <netconn_apimsg>
 800e1c6:	4603      	mov	r3, r0
 800e1c8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (err == ERR_OK) {
 800e1cc:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800e1d0:	2b00      	cmp	r3, #0
 800e1d2:	d114      	bne.n	800e1fe <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 800e1d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e1d6:	2b00      	cmp	r3, #0
 800e1d8:	d002      	beq.n	800e1e0 <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 800e1da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e1dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e1de:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 800e1e0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	d10a      	bne.n	800e1fe <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 800e1e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e1ec:	429a      	cmp	r2, r3
 800e1ee:	d006      	beq.n	800e1fe <netconn_write_vectors_partly+0x14a>
 800e1f0:	4b06      	ldr	r3, [pc, #24]	; (800e20c <netconn_write_vectors_partly+0x158>)
 800e1f2:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800e1f6:	490a      	ldr	r1, [pc, #40]	; (800e220 <netconn_write_vectors_partly+0x16c>)
 800e1f8:	4806      	ldr	r0, [pc, #24]	; (800e214 <netconn_write_vectors_partly+0x160>)
 800e1fa:	f011 fa03 	bl	801f604 <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 800e1fe:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800e202:	4618      	mov	r0, r3
 800e204:	3748      	adds	r7, #72	; 0x48
 800e206:	46bd      	mov	sp, r7
 800e208:	bd80      	pop	{r7, pc}
 800e20a:	bf00      	nop
 800e20c:	080233a0 	.word	0x080233a0
 800e210:	08023678 	.word	0x08023678
 800e214:	080233f8 	.word	0x080233f8
 800e218:	08023694 	.word	0x08023694
 800e21c:	0800f8c9 	.word	0x0800f8c9
 800e220:	080236b8 	.word	0x080236b8

0800e224 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 800e224:	b580      	push	{r7, lr}
 800e226:	b08c      	sub	sp, #48	; 0x30
 800e228:	af00      	add	r7, sp, #0
 800e22a:	6078      	str	r0, [r7, #4]
 800e22c:	460b      	mov	r3, r1
 800e22e:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	2b00      	cmp	r3, #0
 800e234:	d109      	bne.n	800e24a <netconn_close_shutdown+0x26>
 800e236:	4b0f      	ldr	r3, [pc, #60]	; (800e274 <netconn_close_shutdown+0x50>)
 800e238:	f240 4247 	movw	r2, #1095	; 0x447
 800e23c:	490e      	ldr	r1, [pc, #56]	; (800e278 <netconn_close_shutdown+0x54>)
 800e23e:	480f      	ldr	r0, [pc, #60]	; (800e27c <netconn_close_shutdown+0x58>)
 800e240:	f011 f9e0 	bl	801f604 <iprintf>
 800e244:	f06f 030f 	mvn.w	r3, #15
 800e248:	e010      	b.n	800e26c <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 800e24e:	78fb      	ldrb	r3, [r7, #3]
 800e250:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800e252:	2329      	movs	r3, #41	; 0x29
 800e254:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 800e256:	f107 030c 	add.w	r3, r7, #12
 800e25a:	4619      	mov	r1, r3
 800e25c:	4808      	ldr	r0, [pc, #32]	; (800e280 <netconn_close_shutdown+0x5c>)
 800e25e:	f7ff fac5 	bl	800d7ec <netconn_apimsg>
 800e262:	4603      	mov	r3, r0
 800e264:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800e268:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800e26c:	4618      	mov	r0, r3
 800e26e:	3730      	adds	r7, #48	; 0x30
 800e270:	46bd      	mov	sp, r7
 800e272:	bd80      	pop	{r7, pc}
 800e274:	080233a0 	.word	0x080233a0
 800e278:	080236dc 	.word	0x080236dc
 800e27c:	080233f8 	.word	0x080233f8
 800e280:	0800faed 	.word	0x0800faed

0800e284 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 800e284:	b580      	push	{r7, lr}
 800e286:	b084      	sub	sp, #16
 800e288:	af00      	add	r7, sp, #0
 800e28a:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	2b00      	cmp	r3, #0
 800e290:	d101      	bne.n	800e296 <netconn_err+0x12>
    return ERR_OK;
 800e292:	2300      	movs	r3, #0
 800e294:	e00d      	b.n	800e2b2 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 800e296:	f010 faeb 	bl	801e870 <sys_arch_protect>
 800e29a:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	7a1b      	ldrb	r3, [r3, #8]
 800e2a0:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	2200      	movs	r2, #0
 800e2a6:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 800e2a8:	68f8      	ldr	r0, [r7, #12]
 800e2aa:	f010 faef 	bl	801e88c <sys_arch_unprotect>
  return err;
 800e2ae:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800e2b2:	4618      	mov	r0, r3
 800e2b4:	3710      	adds	r7, #16
 800e2b6:	46bd      	mov	sp, r7
 800e2b8:	bd80      	pop	{r7, pc}
	...

0800e2bc <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 800e2bc:	b580      	push	{r7, lr}
 800e2be:	b082      	sub	sp, #8
 800e2c0:	af00      	add	r7, sp, #0
 800e2c2:	4603      	mov	r3, r0
 800e2c4:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 800e2c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e2ca:	f113 0f0d 	cmn.w	r3, #13
 800e2ce:	d009      	beq.n	800e2e4 <lwip_netconn_err_to_msg+0x28>
 800e2d0:	f113 0f0d 	cmn.w	r3, #13
 800e2d4:	dc0c      	bgt.n	800e2f0 <lwip_netconn_err_to_msg+0x34>
 800e2d6:	f113 0f0f 	cmn.w	r3, #15
 800e2da:	d007      	beq.n	800e2ec <lwip_netconn_err_to_msg+0x30>
 800e2dc:	f113 0f0e 	cmn.w	r3, #14
 800e2e0:	d002      	beq.n	800e2e8 <lwip_netconn_err_to_msg+0x2c>
 800e2e2:	e005      	b.n	800e2f0 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 800e2e4:	4b0a      	ldr	r3, [pc, #40]	; (800e310 <lwip_netconn_err_to_msg+0x54>)
 800e2e6:	e00e      	b.n	800e306 <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 800e2e8:	4b0a      	ldr	r3, [pc, #40]	; (800e314 <lwip_netconn_err_to_msg+0x58>)
 800e2ea:	e00c      	b.n	800e306 <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 800e2ec:	4b0a      	ldr	r3, [pc, #40]	; (800e318 <lwip_netconn_err_to_msg+0x5c>)
 800e2ee:	e00a      	b.n	800e306 <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 800e2f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e2f4:	2b00      	cmp	r3, #0
 800e2f6:	d005      	beq.n	800e304 <lwip_netconn_err_to_msg+0x48>
 800e2f8:	4b08      	ldr	r3, [pc, #32]	; (800e31c <lwip_netconn_err_to_msg+0x60>)
 800e2fa:	227d      	movs	r2, #125	; 0x7d
 800e2fc:	4908      	ldr	r1, [pc, #32]	; (800e320 <lwip_netconn_err_to_msg+0x64>)
 800e2fe:	4809      	ldr	r0, [pc, #36]	; (800e324 <lwip_netconn_err_to_msg+0x68>)
 800e300:	f011 f980 	bl	801f604 <iprintf>
      return NULL;
 800e304:	2300      	movs	r3, #0
  }
}
 800e306:	4618      	mov	r0, r3
 800e308:	3708      	adds	r7, #8
 800e30a:	46bd      	mov	sp, r7
 800e30c:	bd80      	pop	{r7, pc}
 800e30e:	bf00      	nop
 800e310:	08027024 	.word	0x08027024
 800e314:	08027025 	.word	0x08027025
 800e318:	08027026 	.word	0x08027026
 800e31c:	080236f8 	.word	0x080236f8
 800e320:	0802372c 	.word	0x0802372c
 800e324:	0802373c 	.word	0x0802373c

0800e328 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 800e328:	b580      	push	{r7, lr}
 800e32a:	b082      	sub	sp, #8
 800e32c:	af00      	add	r7, sp, #0
 800e32e:	6078      	str	r0, [r7, #4]
 800e330:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 800e332:	683b      	ldr	r3, [r7, #0]
 800e334:	2b00      	cmp	r3, #0
 800e336:	d105      	bne.n	800e344 <lwip_netconn_is_err_msg+0x1c>
 800e338:	4b12      	ldr	r3, [pc, #72]	; (800e384 <lwip_netconn_is_err_msg+0x5c>)
 800e33a:	2285      	movs	r2, #133	; 0x85
 800e33c:	4912      	ldr	r1, [pc, #72]	; (800e388 <lwip_netconn_is_err_msg+0x60>)
 800e33e:	4813      	ldr	r0, [pc, #76]	; (800e38c <lwip_netconn_is_err_msg+0x64>)
 800e340:	f011 f960 	bl	801f604 <iprintf>

  if (msg == &netconn_aborted) {
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	4a12      	ldr	r2, [pc, #72]	; (800e390 <lwip_netconn_is_err_msg+0x68>)
 800e348:	4293      	cmp	r3, r2
 800e34a:	d104      	bne.n	800e356 <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 800e34c:	683b      	ldr	r3, [r7, #0]
 800e34e:	22f3      	movs	r2, #243	; 0xf3
 800e350:	701a      	strb	r2, [r3, #0]
    return 1;
 800e352:	2301      	movs	r3, #1
 800e354:	e012      	b.n	800e37c <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	4a0e      	ldr	r2, [pc, #56]	; (800e394 <lwip_netconn_is_err_msg+0x6c>)
 800e35a:	4293      	cmp	r3, r2
 800e35c:	d104      	bne.n	800e368 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 800e35e:	683b      	ldr	r3, [r7, #0]
 800e360:	22f2      	movs	r2, #242	; 0xf2
 800e362:	701a      	strb	r2, [r3, #0]
    return 1;
 800e364:	2301      	movs	r3, #1
 800e366:	e009      	b.n	800e37c <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	4a0b      	ldr	r2, [pc, #44]	; (800e398 <lwip_netconn_is_err_msg+0x70>)
 800e36c:	4293      	cmp	r3, r2
 800e36e:	d104      	bne.n	800e37a <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 800e370:	683b      	ldr	r3, [r7, #0]
 800e372:	22f1      	movs	r2, #241	; 0xf1
 800e374:	701a      	strb	r2, [r3, #0]
    return 1;
 800e376:	2301      	movs	r3, #1
 800e378:	e000      	b.n	800e37c <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 800e37a:	2300      	movs	r3, #0
}
 800e37c:	4618      	mov	r0, r3
 800e37e:	3708      	adds	r7, #8
 800e380:	46bd      	mov	sp, r7
 800e382:	bd80      	pop	{r7, pc}
 800e384:	080236f8 	.word	0x080236f8
 800e388:	08023764 	.word	0x08023764
 800e38c:	0802373c 	.word	0x0802373c
 800e390:	08027024 	.word	0x08027024
 800e394:	08027025 	.word	0x08027025
 800e398:	08027026 	.word	0x08027026

0800e39c <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 800e39c:	b580      	push	{r7, lr}
 800e39e:	b088      	sub	sp, #32
 800e3a0:	af00      	add	r7, sp, #0
 800e3a2:	60f8      	str	r0, [r7, #12]
 800e3a4:	60b9      	str	r1, [r7, #8]
 800e3a6:	607a      	str	r2, [r7, #4]
 800e3a8:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 800e3aa:	68bb      	ldr	r3, [r7, #8]
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	d105      	bne.n	800e3bc <recv_udp+0x20>
 800e3b0:	4b34      	ldr	r3, [pc, #208]	; (800e484 <recv_udp+0xe8>)
 800e3b2:	22e5      	movs	r2, #229	; 0xe5
 800e3b4:	4934      	ldr	r1, [pc, #208]	; (800e488 <recv_udp+0xec>)
 800e3b6:	4835      	ldr	r0, [pc, #212]	; (800e48c <recv_udp+0xf0>)
 800e3b8:	f011 f924 	bl	801f604 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 800e3bc:	68fb      	ldr	r3, [r7, #12]
 800e3be:	2b00      	cmp	r3, #0
 800e3c0:	d105      	bne.n	800e3ce <recv_udp+0x32>
 800e3c2:	4b30      	ldr	r3, [pc, #192]	; (800e484 <recv_udp+0xe8>)
 800e3c4:	22e6      	movs	r2, #230	; 0xe6
 800e3c6:	4932      	ldr	r1, [pc, #200]	; (800e490 <recv_udp+0xf4>)
 800e3c8:	4830      	ldr	r0, [pc, #192]	; (800e48c <recv_udp+0xf0>)
 800e3ca:	f011 f91b 	bl	801f604 <iprintf>
  conn = (struct netconn *)arg;
 800e3ce:	68fb      	ldr	r3, [r7, #12]
 800e3d0:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800e3d2:	69fb      	ldr	r3, [r7, #28]
 800e3d4:	2b00      	cmp	r3, #0
 800e3d6:	d103      	bne.n	800e3e0 <recv_udp+0x44>
    pbuf_free(p);
 800e3d8:	6878      	ldr	r0, [r7, #4]
 800e3da:	f004 fceb 	bl	8012db4 <pbuf_free>
    return;
 800e3de:	e04d      	b.n	800e47c <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 800e3e0:	69fb      	ldr	r3, [r7, #28]
 800e3e2:	685b      	ldr	r3, [r3, #4]
 800e3e4:	68ba      	ldr	r2, [r7, #8]
 800e3e6:	429a      	cmp	r2, r3
 800e3e8:	d005      	beq.n	800e3f6 <recv_udp+0x5a>
 800e3ea:	4b26      	ldr	r3, [pc, #152]	; (800e484 <recv_udp+0xe8>)
 800e3ec:	22ee      	movs	r2, #238	; 0xee
 800e3ee:	4929      	ldr	r1, [pc, #164]	; (800e494 <recv_udp+0xf8>)
 800e3f0:	4826      	ldr	r0, [pc, #152]	; (800e48c <recv_udp+0xf0>)
 800e3f2:	f011 f907 	bl	801f604 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800e3f6:	69fb      	ldr	r3, [r7, #28]
 800e3f8:	3310      	adds	r3, #16
 800e3fa:	4618      	mov	r0, r3
 800e3fc:	f010 f91d 	bl	801e63a <sys_mbox_valid>
 800e400:	4603      	mov	r3, r0
 800e402:	2b00      	cmp	r3, #0
 800e404:	d103      	bne.n	800e40e <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 800e406:	6878      	ldr	r0, [r7, #4]
 800e408:	f004 fcd4 	bl	8012db4 <pbuf_free>
    return;
 800e40c:	e036      	b.n	800e47c <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800e40e:	2006      	movs	r0, #6
 800e410:	f003 fd78 	bl	8011f04 <memp_malloc>
 800e414:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 800e416:	69bb      	ldr	r3, [r7, #24]
 800e418:	2b00      	cmp	r3, #0
 800e41a:	d103      	bne.n	800e424 <recv_udp+0x88>
    pbuf_free(p);
 800e41c:	6878      	ldr	r0, [r7, #4]
 800e41e:	f004 fcc9 	bl	8012db4 <pbuf_free>
    return;
 800e422:	e02b      	b.n	800e47c <recv_udp+0xe0>
  } else {
    buf->p = p;
 800e424:	69bb      	ldr	r3, [r7, #24]
 800e426:	687a      	ldr	r2, [r7, #4]
 800e428:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800e42a:	69bb      	ldr	r3, [r7, #24]
 800e42c:	687a      	ldr	r2, [r7, #4]
 800e42e:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 800e430:	683b      	ldr	r3, [r7, #0]
 800e432:	2b00      	cmp	r3, #0
 800e434:	d002      	beq.n	800e43c <recv_udp+0xa0>
 800e436:	683b      	ldr	r3, [r7, #0]
 800e438:	681b      	ldr	r3, [r3, #0]
 800e43a:	e000      	b.n	800e43e <recv_udp+0xa2>
 800e43c:	2300      	movs	r3, #0
 800e43e:	69ba      	ldr	r2, [r7, #24]
 800e440:	6093      	str	r3, [r2, #8]
    buf->port = port;
 800e442:	69bb      	ldr	r3, [r7, #24]
 800e444:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800e446:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	891b      	ldrh	r3, [r3, #8]
 800e44c:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 800e44e:	69fb      	ldr	r3, [r7, #28]
 800e450:	3310      	adds	r3, #16
 800e452:	69b9      	ldr	r1, [r7, #24]
 800e454:	4618      	mov	r0, r3
 800e456:	f010 f87b 	bl	801e550 <sys_mbox_trypost>
 800e45a:	4603      	mov	r3, r0
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	d003      	beq.n	800e468 <recv_udp+0xcc>
    netbuf_delete(buf);
 800e460:	69b8      	ldr	r0, [r7, #24]
 800e462:	f001 fbed 	bl	800fc40 <netbuf_delete>
    return;
 800e466:	e009      	b.n	800e47c <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800e468:	69fb      	ldr	r3, [r7, #28]
 800e46a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	d005      	beq.n	800e47c <recv_udp+0xe0>
 800e470:	69fb      	ldr	r3, [r7, #28]
 800e472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e474:	8afa      	ldrh	r2, [r7, #22]
 800e476:	2100      	movs	r1, #0
 800e478:	69f8      	ldr	r0, [r7, #28]
 800e47a:	4798      	blx	r3
  }
}
 800e47c:	3720      	adds	r7, #32
 800e47e:	46bd      	mov	sp, r7
 800e480:	bd80      	pop	{r7, pc}
 800e482:	bf00      	nop
 800e484:	080236f8 	.word	0x080236f8
 800e488:	08023770 	.word	0x08023770
 800e48c:	0802373c 	.word	0x0802373c
 800e490:	08023794 	.word	0x08023794
 800e494:	080237b4 	.word	0x080237b4

0800e498 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800e498:	b580      	push	{r7, lr}
 800e49a:	b088      	sub	sp, #32
 800e49c:	af00      	add	r7, sp, #0
 800e49e:	60f8      	str	r0, [r7, #12]
 800e4a0:	60b9      	str	r1, [r7, #8]
 800e4a2:	607a      	str	r2, [r7, #4]
 800e4a4:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 800e4a6:	68bb      	ldr	r3, [r7, #8]
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	d106      	bne.n	800e4ba <recv_tcp+0x22>
 800e4ac:	4b36      	ldr	r3, [pc, #216]	; (800e588 <recv_tcp+0xf0>)
 800e4ae:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800e4b2:	4936      	ldr	r1, [pc, #216]	; (800e58c <recv_tcp+0xf4>)
 800e4b4:	4836      	ldr	r0, [pc, #216]	; (800e590 <recv_tcp+0xf8>)
 800e4b6:	f011 f8a5 	bl	801f604 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 800e4ba:	68fb      	ldr	r3, [r7, #12]
 800e4bc:	2b00      	cmp	r3, #0
 800e4be:	d106      	bne.n	800e4ce <recv_tcp+0x36>
 800e4c0:	4b31      	ldr	r3, [pc, #196]	; (800e588 <recv_tcp+0xf0>)
 800e4c2:	f240 122d 	movw	r2, #301	; 0x12d
 800e4c6:	4933      	ldr	r1, [pc, #204]	; (800e594 <recv_tcp+0xfc>)
 800e4c8:	4831      	ldr	r0, [pc, #196]	; (800e590 <recv_tcp+0xf8>)
 800e4ca:	f011 f89b 	bl	801f604 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 800e4ce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	d006      	beq.n	800e4e4 <recv_tcp+0x4c>
 800e4d6:	4b2c      	ldr	r3, [pc, #176]	; (800e588 <recv_tcp+0xf0>)
 800e4d8:	f44f 7297 	mov.w	r2, #302	; 0x12e
 800e4dc:	492e      	ldr	r1, [pc, #184]	; (800e598 <recv_tcp+0x100>)
 800e4de:	482c      	ldr	r0, [pc, #176]	; (800e590 <recv_tcp+0xf8>)
 800e4e0:	f011 f890 	bl	801f604 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 800e4e4:	68fb      	ldr	r3, [r7, #12]
 800e4e6:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 800e4e8:	697b      	ldr	r3, [r7, #20]
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	d102      	bne.n	800e4f4 <recv_tcp+0x5c>
    return ERR_VAL;
 800e4ee:	f06f 0305 	mvn.w	r3, #5
 800e4f2:	e045      	b.n	800e580 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 800e4f4:	697b      	ldr	r3, [r7, #20]
 800e4f6:	685b      	ldr	r3, [r3, #4]
 800e4f8:	68ba      	ldr	r2, [r7, #8]
 800e4fa:	429a      	cmp	r2, r3
 800e4fc:	d006      	beq.n	800e50c <recv_tcp+0x74>
 800e4fe:	4b22      	ldr	r3, [pc, #136]	; (800e588 <recv_tcp+0xf0>)
 800e500:	f240 1235 	movw	r2, #309	; 0x135
 800e504:	4925      	ldr	r1, [pc, #148]	; (800e59c <recv_tcp+0x104>)
 800e506:	4822      	ldr	r0, [pc, #136]	; (800e590 <recv_tcp+0xf8>)
 800e508:	f011 f87c 	bl	801f604 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800e50c:	697b      	ldr	r3, [r7, #20]
 800e50e:	3310      	adds	r3, #16
 800e510:	4618      	mov	r0, r3
 800e512:	f010 f892 	bl	801e63a <sys_mbox_valid>
 800e516:	4603      	mov	r3, r0
 800e518:	2b00      	cmp	r3, #0
 800e51a:	d10d      	bne.n	800e538 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	2b00      	cmp	r3, #0
 800e520:	d008      	beq.n	800e534 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	891b      	ldrh	r3, [r3, #8]
 800e526:	4619      	mov	r1, r3
 800e528:	68b8      	ldr	r0, [r7, #8]
 800e52a:	f005 fc0b 	bl	8013d44 <tcp_recved>
      pbuf_free(p);
 800e52e:	6878      	ldr	r0, [r7, #4]
 800e530:	f004 fc40 	bl	8012db4 <pbuf_free>
    }
    return ERR_OK;
 800e534:	2300      	movs	r3, #0
 800e536:	e023      	b.n	800e580 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	d005      	beq.n	800e54a <recv_tcp+0xb2>
    msg = p;
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	891b      	ldrh	r3, [r3, #8]
 800e546:	83fb      	strh	r3, [r7, #30]
 800e548:	e003      	b.n	800e552 <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 800e54a:	4b15      	ldr	r3, [pc, #84]	; (800e5a0 <recv_tcp+0x108>)
 800e54c:	61bb      	str	r3, [r7, #24]
    len = 0;
 800e54e:	2300      	movs	r3, #0
 800e550:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 800e552:	697b      	ldr	r3, [r7, #20]
 800e554:	3310      	adds	r3, #16
 800e556:	69b9      	ldr	r1, [r7, #24]
 800e558:	4618      	mov	r0, r3
 800e55a:	f00f fff9 	bl	801e550 <sys_mbox_trypost>
 800e55e:	4603      	mov	r3, r0
 800e560:	2b00      	cmp	r3, #0
 800e562:	d002      	beq.n	800e56a <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 800e564:	f04f 33ff 	mov.w	r3, #4294967295
 800e568:	e00a      	b.n	800e580 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800e56a:	697b      	ldr	r3, [r7, #20]
 800e56c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e56e:	2b00      	cmp	r3, #0
 800e570:	d005      	beq.n	800e57e <recv_tcp+0xe6>
 800e572:	697b      	ldr	r3, [r7, #20]
 800e574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e576:	8bfa      	ldrh	r2, [r7, #30]
 800e578:	2100      	movs	r1, #0
 800e57a:	6978      	ldr	r0, [r7, #20]
 800e57c:	4798      	blx	r3
  }

  return ERR_OK;
 800e57e:	2300      	movs	r3, #0
}
 800e580:	4618      	mov	r0, r3
 800e582:	3720      	adds	r7, #32
 800e584:	46bd      	mov	sp, r7
 800e586:	bd80      	pop	{r7, pc}
 800e588:	080236f8 	.word	0x080236f8
 800e58c:	080237d4 	.word	0x080237d4
 800e590:	0802373c 	.word	0x0802373c
 800e594:	080237f8 	.word	0x080237f8
 800e598:	08023818 	.word	0x08023818
 800e59c:	08023830 	.word	0x08023830
 800e5a0:	08027026 	.word	0x08027026

0800e5a4 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 800e5a4:	b580      	push	{r7, lr}
 800e5a6:	b084      	sub	sp, #16
 800e5a8:	af00      	add	r7, sp, #0
 800e5aa:	6078      	str	r0, [r7, #4]
 800e5ac:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800e5b2:	68fb      	ldr	r3, [r7, #12]
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	d106      	bne.n	800e5c6 <poll_tcp+0x22>
 800e5b8:	4b29      	ldr	r3, [pc, #164]	; (800e660 <poll_tcp+0xbc>)
 800e5ba:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 800e5be:	4929      	ldr	r1, [pc, #164]	; (800e664 <poll_tcp+0xc0>)
 800e5c0:	4829      	ldr	r0, [pc, #164]	; (800e668 <poll_tcp+0xc4>)
 800e5c2:	f011 f81f 	bl	801f604 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 800e5c6:	68fb      	ldr	r3, [r7, #12]
 800e5c8:	785b      	ldrb	r3, [r3, #1]
 800e5ca:	2b01      	cmp	r3, #1
 800e5cc:	d104      	bne.n	800e5d8 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800e5ce:	2101      	movs	r1, #1
 800e5d0:	68f8      	ldr	r0, [r7, #12]
 800e5d2:	f000 ffad 	bl	800f530 <lwip_netconn_do_writemore>
 800e5d6:	e016      	b.n	800e606 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 800e5d8:	68fb      	ldr	r3, [r7, #12]
 800e5da:	785b      	ldrb	r3, [r3, #1]
 800e5dc:	2b04      	cmp	r3, #4
 800e5de:	d112      	bne.n	800e606 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 800e5e0:	68fb      	ldr	r3, [r7, #12]
 800e5e2:	6a1b      	ldr	r3, [r3, #32]
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	d00a      	beq.n	800e5fe <poll_tcp+0x5a>
 800e5e8:	68fb      	ldr	r3, [r7, #12]
 800e5ea:	6a1b      	ldr	r3, [r3, #32]
 800e5ec:	7a5b      	ldrb	r3, [r3, #9]
 800e5ee:	2b00      	cmp	r3, #0
 800e5f0:	d005      	beq.n	800e5fe <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 800e5f2:	68fb      	ldr	r3, [r7, #12]
 800e5f4:	6a1b      	ldr	r3, [r3, #32]
 800e5f6:	7a5a      	ldrb	r2, [r3, #9]
 800e5f8:	3a01      	subs	r2, #1
 800e5fa:	b2d2      	uxtb	r2, r2
 800e5fc:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800e5fe:	2101      	movs	r1, #1
 800e600:	68f8      	ldr	r0, [r7, #12]
 800e602:	f000 fbf7 	bl	800edf4 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 800e606:	68fb      	ldr	r3, [r7, #12]
 800e608:	7f1b      	ldrb	r3, [r3, #28]
 800e60a:	f003 0310 	and.w	r3, r3, #16
 800e60e:	2b00      	cmp	r3, #0
 800e610:	d021      	beq.n	800e656 <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800e612:	68fb      	ldr	r3, [r7, #12]
 800e614:	685b      	ldr	r3, [r3, #4]
 800e616:	2b00      	cmp	r3, #0
 800e618:	d01d      	beq.n	800e656 <poll_tcp+0xb2>
 800e61a:	68fb      	ldr	r3, [r7, #12]
 800e61c:	685b      	ldr	r3, [r3, #4]
 800e61e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800e622:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800e626:	d316      	bcc.n	800e656 <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800e628:	68fb      	ldr	r3, [r7, #12]
 800e62a:	685b      	ldr	r3, [r3, #4]
 800e62c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800e630:	2b04      	cmp	r3, #4
 800e632:	d810      	bhi.n	800e656 <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800e634:	68fb      	ldr	r3, [r7, #12]
 800e636:	7f1b      	ldrb	r3, [r3, #28]
 800e638:	f023 0310 	bic.w	r3, r3, #16
 800e63c:	b2da      	uxtb	r2, r3
 800e63e:	68fb      	ldr	r3, [r7, #12]
 800e640:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800e642:	68fb      	ldr	r3, [r7, #12]
 800e644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e646:	2b00      	cmp	r3, #0
 800e648:	d005      	beq.n	800e656 <poll_tcp+0xb2>
 800e64a:	68fb      	ldr	r3, [r7, #12]
 800e64c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e64e:	2200      	movs	r2, #0
 800e650:	2102      	movs	r1, #2
 800e652:	68f8      	ldr	r0, [r7, #12]
 800e654:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800e656:	2300      	movs	r3, #0
}
 800e658:	4618      	mov	r0, r3
 800e65a:	3710      	adds	r7, #16
 800e65c:	46bd      	mov	sp, r7
 800e65e:	bd80      	pop	{r7, pc}
 800e660:	080236f8 	.word	0x080236f8
 800e664:	08023850 	.word	0x08023850
 800e668:	0802373c 	.word	0x0802373c

0800e66c <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 800e66c:	b580      	push	{r7, lr}
 800e66e:	b086      	sub	sp, #24
 800e670:	af00      	add	r7, sp, #0
 800e672:	60f8      	str	r0, [r7, #12]
 800e674:	60b9      	str	r1, [r7, #8]
 800e676:	4613      	mov	r3, r2
 800e678:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 800e67a:	68fb      	ldr	r3, [r7, #12]
 800e67c:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800e67e:	697b      	ldr	r3, [r7, #20]
 800e680:	2b00      	cmp	r3, #0
 800e682:	d106      	bne.n	800e692 <sent_tcp+0x26>
 800e684:	4b20      	ldr	r3, [pc, #128]	; (800e708 <sent_tcp+0x9c>)
 800e686:	f240 1293 	movw	r2, #403	; 0x193
 800e68a:	4920      	ldr	r1, [pc, #128]	; (800e70c <sent_tcp+0xa0>)
 800e68c:	4820      	ldr	r0, [pc, #128]	; (800e710 <sent_tcp+0xa4>)
 800e68e:	f010 ffb9 	bl	801f604 <iprintf>

  if (conn) {
 800e692:	697b      	ldr	r3, [r7, #20]
 800e694:	2b00      	cmp	r3, #0
 800e696:	d032      	beq.n	800e6fe <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 800e698:	697b      	ldr	r3, [r7, #20]
 800e69a:	785b      	ldrb	r3, [r3, #1]
 800e69c:	2b01      	cmp	r3, #1
 800e69e:	d104      	bne.n	800e6aa <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800e6a0:	2101      	movs	r1, #1
 800e6a2:	6978      	ldr	r0, [r7, #20]
 800e6a4:	f000 ff44 	bl	800f530 <lwip_netconn_do_writemore>
 800e6a8:	e007      	b.n	800e6ba <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 800e6aa:	697b      	ldr	r3, [r7, #20]
 800e6ac:	785b      	ldrb	r3, [r3, #1]
 800e6ae:	2b04      	cmp	r3, #4
 800e6b0:	d103      	bne.n	800e6ba <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800e6b2:	2101      	movs	r1, #1
 800e6b4:	6978      	ldr	r0, [r7, #20]
 800e6b6:	f000 fb9d 	bl	800edf4 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800e6ba:	697b      	ldr	r3, [r7, #20]
 800e6bc:	685b      	ldr	r3, [r3, #4]
 800e6be:	2b00      	cmp	r3, #0
 800e6c0:	d01d      	beq.n	800e6fe <sent_tcp+0x92>
 800e6c2:	697b      	ldr	r3, [r7, #20]
 800e6c4:	685b      	ldr	r3, [r3, #4]
 800e6c6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800e6ca:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800e6ce:	d316      	bcc.n	800e6fe <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800e6d0:	697b      	ldr	r3, [r7, #20]
 800e6d2:	685b      	ldr	r3, [r3, #4]
 800e6d4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800e6d8:	2b04      	cmp	r3, #4
 800e6da:	d810      	bhi.n	800e6fe <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800e6dc:	697b      	ldr	r3, [r7, #20]
 800e6de:	7f1b      	ldrb	r3, [r3, #28]
 800e6e0:	f023 0310 	bic.w	r3, r3, #16
 800e6e4:	b2da      	uxtb	r2, r3
 800e6e6:	697b      	ldr	r3, [r7, #20]
 800e6e8:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 800e6ea:	697b      	ldr	r3, [r7, #20]
 800e6ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	d005      	beq.n	800e6fe <sent_tcp+0x92>
 800e6f2:	697b      	ldr	r3, [r7, #20]
 800e6f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6f6:	88fa      	ldrh	r2, [r7, #6]
 800e6f8:	2102      	movs	r1, #2
 800e6fa:	6978      	ldr	r0, [r7, #20]
 800e6fc:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800e6fe:	2300      	movs	r3, #0
}
 800e700:	4618      	mov	r0, r3
 800e702:	3718      	adds	r7, #24
 800e704:	46bd      	mov	sp, r7
 800e706:	bd80      	pop	{r7, pc}
 800e708:	080236f8 	.word	0x080236f8
 800e70c:	08023850 	.word	0x08023850
 800e710:	0802373c 	.word	0x0802373c

0800e714 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 800e714:	b580      	push	{r7, lr}
 800e716:	b088      	sub	sp, #32
 800e718:	af00      	add	r7, sp, #0
 800e71a:	6078      	str	r0, [r7, #4]
 800e71c:	460b      	mov	r3, r1
 800e71e:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800e724:	69fb      	ldr	r3, [r7, #28]
 800e726:	2b00      	cmp	r3, #0
 800e728:	d106      	bne.n	800e738 <err_tcp+0x24>
 800e72a:	4b5f      	ldr	r3, [pc, #380]	; (800e8a8 <err_tcp+0x194>)
 800e72c:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 800e730:	495e      	ldr	r1, [pc, #376]	; (800e8ac <err_tcp+0x198>)
 800e732:	485f      	ldr	r0, [pc, #380]	; (800e8b0 <err_tcp+0x19c>)
 800e734:	f010 ff66 	bl	801f604 <iprintf>

  SYS_ARCH_PROTECT(lev);
 800e738:	f010 f89a 	bl	801e870 <sys_arch_protect>
 800e73c:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 800e73e:	69fb      	ldr	r3, [r7, #28]
 800e740:	2200      	movs	r2, #0
 800e742:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 800e744:	69fb      	ldr	r3, [r7, #28]
 800e746:	78fa      	ldrb	r2, [r7, #3]
 800e748:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 800e74a:	69fb      	ldr	r3, [r7, #28]
 800e74c:	7f1b      	ldrb	r3, [r3, #28]
 800e74e:	f043 0301 	orr.w	r3, r3, #1
 800e752:	b2da      	uxtb	r2, r3
 800e754:	69fb      	ldr	r3, [r7, #28]
 800e756:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 800e758:	69fb      	ldr	r3, [r7, #28]
 800e75a:	785b      	ldrb	r3, [r3, #1]
 800e75c:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 800e75e:	69fb      	ldr	r3, [r7, #28]
 800e760:	2200      	movs	r2, #0
 800e762:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 800e764:	69b8      	ldr	r0, [r7, #24]
 800e766:	f010 f891 	bl	801e88c <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800e76a:	69fb      	ldr	r3, [r7, #28]
 800e76c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e76e:	2b00      	cmp	r3, #0
 800e770:	d005      	beq.n	800e77e <err_tcp+0x6a>
 800e772:	69fb      	ldr	r3, [r7, #28]
 800e774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e776:	2200      	movs	r2, #0
 800e778:	2104      	movs	r1, #4
 800e77a:	69f8      	ldr	r0, [r7, #28]
 800e77c:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800e77e:	69fb      	ldr	r3, [r7, #28]
 800e780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e782:	2b00      	cmp	r3, #0
 800e784:	d005      	beq.n	800e792 <err_tcp+0x7e>
 800e786:	69fb      	ldr	r3, [r7, #28]
 800e788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e78a:	2200      	movs	r2, #0
 800e78c:	2100      	movs	r1, #0
 800e78e:	69f8      	ldr	r0, [r7, #28]
 800e790:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800e792:	69fb      	ldr	r3, [r7, #28]
 800e794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e796:	2b00      	cmp	r3, #0
 800e798:	d005      	beq.n	800e7a6 <err_tcp+0x92>
 800e79a:	69fb      	ldr	r3, [r7, #28]
 800e79c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e79e:	2200      	movs	r2, #0
 800e7a0:	2102      	movs	r1, #2
 800e7a2:	69f8      	ldr	r0, [r7, #28]
 800e7a4:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 800e7a6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e7aa:	4618      	mov	r0, r3
 800e7ac:	f7ff fd86 	bl	800e2bc <lwip_netconn_err_to_msg>
 800e7b0:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800e7b2:	69fb      	ldr	r3, [r7, #28]
 800e7b4:	3310      	adds	r3, #16
 800e7b6:	4618      	mov	r0, r3
 800e7b8:	f00f ff3f 	bl	801e63a <sys_mbox_valid>
 800e7bc:	4603      	mov	r3, r0
 800e7be:	2b00      	cmp	r3, #0
 800e7c0:	d005      	beq.n	800e7ce <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 800e7c2:	69fb      	ldr	r3, [r7, #28]
 800e7c4:	3310      	adds	r3, #16
 800e7c6:	6939      	ldr	r1, [r7, #16]
 800e7c8:	4618      	mov	r0, r3
 800e7ca:	f00f fec1 	bl	801e550 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800e7ce:	69fb      	ldr	r3, [r7, #28]
 800e7d0:	3314      	adds	r3, #20
 800e7d2:	4618      	mov	r0, r3
 800e7d4:	f00f ff31 	bl	801e63a <sys_mbox_valid>
 800e7d8:	4603      	mov	r3, r0
 800e7da:	2b00      	cmp	r3, #0
 800e7dc:	d005      	beq.n	800e7ea <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 800e7de:	69fb      	ldr	r3, [r7, #28]
 800e7e0:	3314      	adds	r3, #20
 800e7e2:	6939      	ldr	r1, [r7, #16]
 800e7e4:	4618      	mov	r0, r3
 800e7e6:	f00f feb3 	bl	801e550 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 800e7ea:	7dfb      	ldrb	r3, [r7, #23]
 800e7ec:	2b01      	cmp	r3, #1
 800e7ee:	d005      	beq.n	800e7fc <err_tcp+0xe8>
 800e7f0:	7dfb      	ldrb	r3, [r7, #23]
 800e7f2:	2b04      	cmp	r3, #4
 800e7f4:	d002      	beq.n	800e7fc <err_tcp+0xe8>
 800e7f6:	7dfb      	ldrb	r3, [r7, #23]
 800e7f8:	2b03      	cmp	r3, #3
 800e7fa:	d143      	bne.n	800e884 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 800e7fc:	69fb      	ldr	r3, [r7, #28]
 800e7fe:	7f1b      	ldrb	r3, [r3, #28]
 800e800:	f003 0304 	and.w	r3, r3, #4
 800e804:	2b00      	cmp	r3, #0
 800e806:	bf14      	ite	ne
 800e808:	2301      	movne	r3, #1
 800e80a:	2300      	moveq	r3, #0
 800e80c:	b2db      	uxtb	r3, r3
 800e80e:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 800e810:	69fb      	ldr	r3, [r7, #28]
 800e812:	7f1b      	ldrb	r3, [r3, #28]
 800e814:	f023 0304 	bic.w	r3, r3, #4
 800e818:	b2da      	uxtb	r2, r3
 800e81a:	69fb      	ldr	r3, [r7, #28]
 800e81c:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 800e81e:	68fb      	ldr	r3, [r7, #12]
 800e820:	2b00      	cmp	r3, #0
 800e822:	d13b      	bne.n	800e89c <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800e824:	69fb      	ldr	r3, [r7, #28]
 800e826:	6a1b      	ldr	r3, [r3, #32]
 800e828:	2b00      	cmp	r3, #0
 800e82a:	d106      	bne.n	800e83a <err_tcp+0x126>
 800e82c:	4b1e      	ldr	r3, [pc, #120]	; (800e8a8 <err_tcp+0x194>)
 800e82e:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800e832:	4920      	ldr	r1, [pc, #128]	; (800e8b4 <err_tcp+0x1a0>)
 800e834:	481e      	ldr	r0, [pc, #120]	; (800e8b0 <err_tcp+0x19c>)
 800e836:	f010 fee5 	bl	801f604 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 800e83a:	7dfb      	ldrb	r3, [r7, #23]
 800e83c:	2b04      	cmp	r3, #4
 800e83e:	d104      	bne.n	800e84a <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 800e840:	69fb      	ldr	r3, [r7, #28]
 800e842:	6a1b      	ldr	r3, [r3, #32]
 800e844:	2200      	movs	r2, #0
 800e846:	711a      	strb	r2, [r3, #4]
 800e848:	e003      	b.n	800e852 <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 800e84a:	69fb      	ldr	r3, [r7, #28]
 800e84c:	6a1b      	ldr	r3, [r3, #32]
 800e84e:	78fa      	ldrb	r2, [r7, #3]
 800e850:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800e852:	69fb      	ldr	r3, [r7, #28]
 800e854:	6a1b      	ldr	r3, [r3, #32]
 800e856:	681b      	ldr	r3, [r3, #0]
 800e858:	330c      	adds	r3, #12
 800e85a:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800e85c:	68b8      	ldr	r0, [r7, #8]
 800e85e:	f00f ff7d 	bl	801e75c <sys_sem_valid>
 800e862:	4603      	mov	r3, r0
 800e864:	2b00      	cmp	r3, #0
 800e866:	d106      	bne.n	800e876 <err_tcp+0x162>
 800e868:	4b0f      	ldr	r3, [pc, #60]	; (800e8a8 <err_tcp+0x194>)
 800e86a:	f240 12ef 	movw	r2, #495	; 0x1ef
 800e86e:	4912      	ldr	r1, [pc, #72]	; (800e8b8 <err_tcp+0x1a4>)
 800e870:	480f      	ldr	r0, [pc, #60]	; (800e8b0 <err_tcp+0x19c>)
 800e872:	f010 fec7 	bl	801f604 <iprintf>
      conn->current_msg = NULL;
 800e876:	69fb      	ldr	r3, [r7, #28]
 800e878:	2200      	movs	r2, #0
 800e87a:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 800e87c:	68b8      	ldr	r0, [r7, #8]
 800e87e:	f00f ff53 	bl	801e728 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 800e882:	e00b      	b.n	800e89c <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 800e884:	69fb      	ldr	r3, [r7, #28]
 800e886:	6a1b      	ldr	r3, [r3, #32]
 800e888:	2b00      	cmp	r3, #0
 800e88a:	d008      	beq.n	800e89e <err_tcp+0x18a>
 800e88c:	4b06      	ldr	r3, [pc, #24]	; (800e8a8 <err_tcp+0x194>)
 800e88e:	f240 12f7 	movw	r2, #503	; 0x1f7
 800e892:	490a      	ldr	r1, [pc, #40]	; (800e8bc <err_tcp+0x1a8>)
 800e894:	4806      	ldr	r0, [pc, #24]	; (800e8b0 <err_tcp+0x19c>)
 800e896:	f010 feb5 	bl	801f604 <iprintf>
  }
}
 800e89a:	e000      	b.n	800e89e <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 800e89c:	bf00      	nop
}
 800e89e:	bf00      	nop
 800e8a0:	3720      	adds	r7, #32
 800e8a2:	46bd      	mov	sp, r7
 800e8a4:	bd80      	pop	{r7, pc}
 800e8a6:	bf00      	nop
 800e8a8:	080236f8 	.word	0x080236f8
 800e8ac:	08023850 	.word	0x08023850
 800e8b0:	0802373c 	.word	0x0802373c
 800e8b4:	08023860 	.word	0x08023860
 800e8b8:	0802387c 	.word	0x0802387c
 800e8bc:	08023898 	.word	0x08023898

0800e8c0 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 800e8c0:	b580      	push	{r7, lr}
 800e8c2:	b084      	sub	sp, #16
 800e8c4:	af00      	add	r7, sp, #0
 800e8c6:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	685b      	ldr	r3, [r3, #4]
 800e8cc:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 800e8ce:	6879      	ldr	r1, [r7, #4]
 800e8d0:	68f8      	ldr	r0, [r7, #12]
 800e8d2:	f006 f8fd 	bl	8014ad0 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 800e8d6:	490a      	ldr	r1, [pc, #40]	; (800e900 <setup_tcp+0x40>)
 800e8d8:	68f8      	ldr	r0, [r7, #12]
 800e8da:	f006 f90b 	bl	8014af4 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 800e8de:	4909      	ldr	r1, [pc, #36]	; (800e904 <setup_tcp+0x44>)
 800e8e0:	68f8      	ldr	r0, [r7, #12]
 800e8e2:	f006 f929 	bl	8014b38 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 800e8e6:	2202      	movs	r2, #2
 800e8e8:	4907      	ldr	r1, [pc, #28]	; (800e908 <setup_tcp+0x48>)
 800e8ea:	68f8      	ldr	r0, [r7, #12]
 800e8ec:	f006 f980 	bl	8014bf0 <tcp_poll>
  tcp_err(pcb, err_tcp);
 800e8f0:	4906      	ldr	r1, [pc, #24]	; (800e90c <setup_tcp+0x4c>)
 800e8f2:	68f8      	ldr	r0, [r7, #12]
 800e8f4:	f006 f942 	bl	8014b7c <tcp_err>
}
 800e8f8:	bf00      	nop
 800e8fa:	3710      	adds	r7, #16
 800e8fc:	46bd      	mov	sp, r7
 800e8fe:	bd80      	pop	{r7, pc}
 800e900:	0800e499 	.word	0x0800e499
 800e904:	0800e66d 	.word	0x0800e66d
 800e908:	0800e5a5 	.word	0x0800e5a5
 800e90c:	0800e715 	.word	0x0800e715

0800e910 <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 800e910:	b590      	push	{r4, r7, lr}
 800e912:	b089      	sub	sp, #36	; 0x24
 800e914:	af00      	add	r7, sp, #0
 800e916:	60f8      	str	r0, [r7, #12]
 800e918:	60b9      	str	r1, [r7, #8]
 800e91a:	4613      	mov	r3, r2
 800e91c:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 800e91e:	68fb      	ldr	r3, [r7, #12]
 800e920:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800e922:	69fb      	ldr	r3, [r7, #28]
 800e924:	2b00      	cmp	r3, #0
 800e926:	d102      	bne.n	800e92e <accept_function+0x1e>
    return ERR_VAL;
 800e928:	f06f 0305 	mvn.w	r3, #5
 800e92c:	e0a1      	b.n	800ea72 <accept_function+0x162>
  }
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800e92e:	69fb      	ldr	r3, [r7, #28]
 800e930:	3314      	adds	r3, #20
 800e932:	4618      	mov	r0, r3
 800e934:	f00f fe81 	bl	801e63a <sys_mbox_valid>
 800e938:	4603      	mov	r3, r0
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	d102      	bne.n	800e944 <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 800e93e:	f06f 0305 	mvn.w	r3, #5
 800e942:	e096      	b.n	800ea72 <accept_function+0x162>
  }

  if (newpcb == NULL) {
 800e944:	68bb      	ldr	r3, [r7, #8]
 800e946:	2b00      	cmp	r3, #0
 800e948:	d11b      	bne.n	800e982 <accept_function+0x72>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 800e94a:	69fb      	ldr	r3, [r7, #28]
 800e94c:	f103 0414 	add.w	r4, r3, #20
 800e950:	f06f 000c 	mvn.w	r0, #12
 800e954:	f7ff fcb2 	bl	800e2bc <lwip_netconn_err_to_msg>
 800e958:	4603      	mov	r3, r0
 800e95a:	4619      	mov	r1, r3
 800e95c:	4620      	mov	r0, r4
 800e95e:	f00f fdf7 	bl	801e550 <sys_mbox_trypost>
 800e962:	4603      	mov	r3, r0
 800e964:	2b00      	cmp	r3, #0
 800e966:	d109      	bne.n	800e97c <accept_function+0x6c>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800e968:	69fb      	ldr	r3, [r7, #28]
 800e96a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	d005      	beq.n	800e97c <accept_function+0x6c>
 800e970:	69fb      	ldr	r3, [r7, #28]
 800e972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e974:	2200      	movs	r2, #0
 800e976:	2100      	movs	r1, #0
 800e978:	69f8      	ldr	r0, [r7, #28]
 800e97a:	4798      	blx	r3
    }
    return ERR_VAL;
 800e97c:	f06f 0305 	mvn.w	r3, #5
 800e980:	e077      	b.n	800ea72 <accept_function+0x162>
  }
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 800e982:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e986:	2b00      	cmp	r3, #0
 800e988:	d006      	beq.n	800e998 <accept_function+0x88>
 800e98a:	4b3c      	ldr	r3, [pc, #240]	; (800ea7c <accept_function+0x16c>)
 800e98c:	f240 222a 	movw	r2, #554	; 0x22a
 800e990:	493b      	ldr	r1, [pc, #236]	; (800ea80 <accept_function+0x170>)
 800e992:	483c      	ldr	r0, [pc, #240]	; (800ea84 <accept_function+0x174>)
 800e994:	f010 fe36 	bl	801f604 <iprintf>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->state: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 800e998:	69fb      	ldr	r3, [r7, #28]
 800e99a:	781a      	ldrb	r2, [r3, #0]
 800e99c:	69fb      	ldr	r3, [r7, #28]
 800e99e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9a0:	4619      	mov	r1, r3
 800e9a2:	4610      	mov	r0, r2
 800e9a4:	f000 f8f0 	bl	800eb88 <netconn_alloc>
 800e9a8:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 800e9aa:	69bb      	ldr	r3, [r7, #24]
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	d11b      	bne.n	800e9e8 <accept_function+0xd8>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 800e9b0:	69fb      	ldr	r3, [r7, #28]
 800e9b2:	f103 0414 	add.w	r4, r3, #20
 800e9b6:	f06f 000c 	mvn.w	r0, #12
 800e9ba:	f7ff fc7f 	bl	800e2bc <lwip_netconn_err_to_msg>
 800e9be:	4603      	mov	r3, r0
 800e9c0:	4619      	mov	r1, r3
 800e9c2:	4620      	mov	r0, r4
 800e9c4:	f00f fdc4 	bl	801e550 <sys_mbox_trypost>
 800e9c8:	4603      	mov	r3, r0
 800e9ca:	2b00      	cmp	r3, #0
 800e9cc:	d109      	bne.n	800e9e2 <accept_function+0xd2>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800e9ce:	69fb      	ldr	r3, [r7, #28]
 800e9d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	d005      	beq.n	800e9e2 <accept_function+0xd2>
 800e9d6:	69fb      	ldr	r3, [r7, #28]
 800e9d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9da:	2200      	movs	r2, #0
 800e9dc:	2100      	movs	r1, #0
 800e9de:	69f8      	ldr	r0, [r7, #28]
 800e9e0:	4798      	blx	r3
    }
    return ERR_MEM;
 800e9e2:	f04f 33ff 	mov.w	r3, #4294967295
 800e9e6:	e044      	b.n	800ea72 <accept_function+0x162>
  }
  newconn->pcb.tcp = newpcb;
 800e9e8:	69bb      	ldr	r3, [r7, #24]
 800e9ea:	68ba      	ldr	r2, [r7, #8]
 800e9ec:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 800e9ee:	69b8      	ldr	r0, [r7, #24]
 800e9f0:	f7ff ff66 	bl	800e8c0 <setup_tcp>

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 800e9f4:	69fb      	ldr	r3, [r7, #28]
 800e9f6:	3314      	adds	r3, #20
 800e9f8:	69b9      	ldr	r1, [r7, #24]
 800e9fa:	4618      	mov	r0, r3
 800e9fc:	f00f fda8 	bl	801e550 <sys_mbox_trypost>
 800ea00:	4603      	mov	r3, r0
 800ea02:	2b00      	cmp	r3, #0
 800ea04:	d02a      	beq.n	800ea5c <accept_function+0x14c>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 800ea06:	69bb      	ldr	r3, [r7, #24]
 800ea08:	685b      	ldr	r3, [r3, #4]
 800ea0a:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 800ea0c:	2100      	movs	r1, #0
 800ea0e:	6978      	ldr	r0, [r7, #20]
 800ea10:	f006 f85e 	bl	8014ad0 <tcp_arg>
    tcp_recv(pcb, NULL);
 800ea14:	2100      	movs	r1, #0
 800ea16:	6978      	ldr	r0, [r7, #20]
 800ea18:	f006 f86c 	bl	8014af4 <tcp_recv>
    tcp_sent(pcb, NULL);
 800ea1c:	2100      	movs	r1, #0
 800ea1e:	6978      	ldr	r0, [r7, #20]
 800ea20:	f006 f88a 	bl	8014b38 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 800ea24:	2200      	movs	r2, #0
 800ea26:	2100      	movs	r1, #0
 800ea28:	6978      	ldr	r0, [r7, #20]
 800ea2a:	f006 f8e1 	bl	8014bf0 <tcp_poll>
    tcp_err(pcb, NULL);
 800ea2e:	2100      	movs	r1, #0
 800ea30:	6978      	ldr	r0, [r7, #20]
 800ea32:	f006 f8a3 	bl	8014b7c <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 800ea36:	69bb      	ldr	r3, [r7, #24]
 800ea38:	2200      	movs	r2, #0
 800ea3a:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 800ea3c:	69bb      	ldr	r3, [r7, #24]
 800ea3e:	3310      	adds	r3, #16
 800ea40:	4618      	mov	r0, r3
 800ea42:	f00f fd73 	bl	801e52c <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 800ea46:	69bb      	ldr	r3, [r7, #24]
 800ea48:	3310      	adds	r3, #16
 800ea4a:	4618      	mov	r0, r3
 800ea4c:	f00f fe06 	bl	801e65c <sys_mbox_set_invalid>
    netconn_free(newconn);
 800ea50:	69b8      	ldr	r0, [r7, #24]
 800ea52:	f000 f907 	bl	800ec64 <netconn_free>
    return ERR_MEM;
 800ea56:	f04f 33ff 	mov.w	r3, #4294967295
 800ea5a:	e00a      	b.n	800ea72 <accept_function+0x162>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800ea5c:	69fb      	ldr	r3, [r7, #28]
 800ea5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea60:	2b00      	cmp	r3, #0
 800ea62:	d005      	beq.n	800ea70 <accept_function+0x160>
 800ea64:	69fb      	ldr	r3, [r7, #28]
 800ea66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea68:	2200      	movs	r2, #0
 800ea6a:	2100      	movs	r1, #0
 800ea6c:	69f8      	ldr	r0, [r7, #28]
 800ea6e:	4798      	blx	r3
  }

  return ERR_OK;
 800ea70:	2300      	movs	r3, #0
}
 800ea72:	4618      	mov	r0, r3
 800ea74:	3724      	adds	r7, #36	; 0x24
 800ea76:	46bd      	mov	sp, r7
 800ea78:	bd90      	pop	{r4, r7, pc}
 800ea7a:	bf00      	nop
 800ea7c:	080236f8 	.word	0x080236f8
 800ea80:	080238b4 	.word	0x080238b4
 800ea84:	0802373c 	.word	0x0802373c

0800ea88 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 800ea88:	b590      	push	{r4, r7, lr}
 800ea8a:	b085      	sub	sp, #20
 800ea8c:	af00      	add	r7, sp, #0
 800ea8e:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 800ea90:	2300      	movs	r3, #0
 800ea92:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	681b      	ldr	r3, [r3, #0]
 800ea98:	685b      	ldr	r3, [r3, #4]
 800ea9a:	2b00      	cmp	r3, #0
 800ea9c:	d006      	beq.n	800eaac <pcb_new+0x24>
 800ea9e:	4b2b      	ldr	r3, [pc, #172]	; (800eb4c <pcb_new+0xc4>)
 800eaa0:	f240 2265 	movw	r2, #613	; 0x265
 800eaa4:	492a      	ldr	r1, [pc, #168]	; (800eb50 <pcb_new+0xc8>)
 800eaa6:	482b      	ldr	r0, [pc, #172]	; (800eb54 <pcb_new+0xcc>)
 800eaa8:	f010 fdac 	bl	801f604 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	681b      	ldr	r3, [r3, #0]
 800eab0:	781b      	ldrb	r3, [r3, #0]
 800eab2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800eab6:	2b10      	cmp	r3, #16
 800eab8:	d022      	beq.n	800eb00 <pcb_new+0x78>
 800eaba:	2b20      	cmp	r3, #32
 800eabc:	d133      	bne.n	800eb26 <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	681c      	ldr	r4, [r3, #0]
 800eac2:	7bfb      	ldrb	r3, [r7, #15]
 800eac4:	4618      	mov	r0, r3
 800eac6:	f00b fb36 	bl	801a136 <udp_new_ip_type>
 800eaca:	4603      	mov	r3, r0
 800eacc:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	681b      	ldr	r3, [r3, #0]
 800ead2:	685b      	ldr	r3, [r3, #4]
 800ead4:	2b00      	cmp	r3, #0
 800ead6:	d02a      	beq.n	800eb2e <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	681b      	ldr	r3, [r3, #0]
 800eadc:	781b      	ldrb	r3, [r3, #0]
 800eade:	2b22      	cmp	r3, #34	; 0x22
 800eae0:	d104      	bne.n	800eaec <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	681b      	ldr	r3, [r3, #0]
 800eae6:	685b      	ldr	r3, [r3, #4]
 800eae8:	2201      	movs	r2, #1
 800eaea:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	681b      	ldr	r3, [r3, #0]
 800eaf0:	6858      	ldr	r0, [r3, #4]
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	681b      	ldr	r3, [r3, #0]
 800eaf6:	461a      	mov	r2, r3
 800eaf8:	4917      	ldr	r1, [pc, #92]	; (800eb58 <pcb_new+0xd0>)
 800eafa:	f00b faa3 	bl	801a044 <udp_recv>
      }
      break;
 800eafe:	e016      	b.n	800eb2e <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	681c      	ldr	r4, [r3, #0]
 800eb04:	7bfb      	ldrb	r3, [r7, #15]
 800eb06:	4618      	mov	r0, r3
 800eb08:	f005 ffd4 	bl	8014ab4 <tcp_new_ip_type>
 800eb0c:	4603      	mov	r3, r0
 800eb0e:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	681b      	ldr	r3, [r3, #0]
 800eb14:	685b      	ldr	r3, [r3, #4]
 800eb16:	2b00      	cmp	r3, #0
 800eb18:	d00b      	beq.n	800eb32 <pcb_new+0xaa>
        setup_tcp(msg->conn);
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	681b      	ldr	r3, [r3, #0]
 800eb1e:	4618      	mov	r0, r3
 800eb20:	f7ff fece 	bl	800e8c0 <setup_tcp>
      }
      break;
 800eb24:	e005      	b.n	800eb32 <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	22fa      	movs	r2, #250	; 0xfa
 800eb2a:	711a      	strb	r2, [r3, #4]
      return;
 800eb2c:	e00a      	b.n	800eb44 <pcb_new+0xbc>
      break;
 800eb2e:	bf00      	nop
 800eb30:	e000      	b.n	800eb34 <pcb_new+0xac>
      break;
 800eb32:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	681b      	ldr	r3, [r3, #0]
 800eb38:	685b      	ldr	r3, [r3, #4]
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	d102      	bne.n	800eb44 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	22ff      	movs	r2, #255	; 0xff
 800eb42:	711a      	strb	r2, [r3, #4]
  }
}
 800eb44:	3714      	adds	r7, #20
 800eb46:	46bd      	mov	sp, r7
 800eb48:	bd90      	pop	{r4, r7, pc}
 800eb4a:	bf00      	nop
 800eb4c:	080236f8 	.word	0x080236f8
 800eb50:	080238dc 	.word	0x080238dc
 800eb54:	0802373c 	.word	0x0802373c
 800eb58:	0800e39d 	.word	0x0800e39d

0800eb5c <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 800eb5c:	b580      	push	{r7, lr}
 800eb5e:	b084      	sub	sp, #16
 800eb60:	af00      	add	r7, sp, #0
 800eb62:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 800eb68:	68fb      	ldr	r3, [r7, #12]
 800eb6a:	2200      	movs	r2, #0
 800eb6c:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 800eb6e:	68fb      	ldr	r3, [r7, #12]
 800eb70:	681b      	ldr	r3, [r3, #0]
 800eb72:	685b      	ldr	r3, [r3, #4]
 800eb74:	2b00      	cmp	r3, #0
 800eb76:	d102      	bne.n	800eb7e <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 800eb78:	68f8      	ldr	r0, [r7, #12]
 800eb7a:	f7ff ff85 	bl	800ea88 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 800eb7e:	bf00      	nop
 800eb80:	3710      	adds	r7, #16
 800eb82:	46bd      	mov	sp, r7
 800eb84:	bd80      	pop	{r7, pc}
	...

0800eb88 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 800eb88:	b580      	push	{r7, lr}
 800eb8a:	b086      	sub	sp, #24
 800eb8c:	af00      	add	r7, sp, #0
 800eb8e:	4603      	mov	r3, r0
 800eb90:	6039      	str	r1, [r7, #0]
 800eb92:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 800eb94:	2300      	movs	r3, #0
 800eb96:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 800eb98:	2007      	movs	r0, #7
 800eb9a:	f003 f9b3 	bl	8011f04 <memp_malloc>
 800eb9e:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 800eba0:	68fb      	ldr	r3, [r7, #12]
 800eba2:	2b00      	cmp	r3, #0
 800eba4:	d101      	bne.n	800ebaa <netconn_alloc+0x22>
    return NULL;
 800eba6:	2300      	movs	r3, #0
 800eba8:	e052      	b.n	800ec50 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 800ebaa:	68fb      	ldr	r3, [r7, #12]
 800ebac:	2200      	movs	r2, #0
 800ebae:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 800ebb0:	68fb      	ldr	r3, [r7, #12]
 800ebb2:	79fa      	ldrb	r2, [r7, #7]
 800ebb4:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 800ebb6:	68fb      	ldr	r3, [r7, #12]
 800ebb8:	2200      	movs	r2, #0
 800ebba:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 800ebbc:	79fb      	ldrb	r3, [r7, #7]
 800ebbe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ebc2:	2b10      	cmp	r3, #16
 800ebc4:	d004      	beq.n	800ebd0 <netconn_alloc+0x48>
 800ebc6:	2b20      	cmp	r3, #32
 800ebc8:	d105      	bne.n	800ebd6 <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 800ebca:	2306      	movs	r3, #6
 800ebcc:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800ebce:	e00a      	b.n	800ebe6 <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 800ebd0:	2306      	movs	r3, #6
 800ebd2:	617b      	str	r3, [r7, #20]
      break;
 800ebd4:	e007      	b.n	800ebe6 <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 800ebd6:	4b20      	ldr	r3, [pc, #128]	; (800ec58 <netconn_alloc+0xd0>)
 800ebd8:	f240 22e5 	movw	r2, #741	; 0x2e5
 800ebdc:	491f      	ldr	r1, [pc, #124]	; (800ec5c <netconn_alloc+0xd4>)
 800ebde:	4820      	ldr	r0, [pc, #128]	; (800ec60 <netconn_alloc+0xd8>)
 800ebe0:	f010 fd10 	bl	801f604 <iprintf>
      goto free_and_return;
 800ebe4:	e02f      	b.n	800ec46 <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 800ebe6:	68fb      	ldr	r3, [r7, #12]
 800ebe8:	3310      	adds	r3, #16
 800ebea:	6979      	ldr	r1, [r7, #20]
 800ebec:	4618      	mov	r0, r3
 800ebee:	f00f fc7b 	bl	801e4e8 <sys_mbox_new>
 800ebf2:	4603      	mov	r3, r0
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	d125      	bne.n	800ec44 <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 800ebf8:	68fb      	ldr	r3, [r7, #12]
 800ebfa:	330c      	adds	r3, #12
 800ebfc:	2100      	movs	r1, #0
 800ebfe:	4618      	mov	r0, r3
 800ec00:	f00f fd39 	bl	801e676 <sys_sem_new>
 800ec04:	4603      	mov	r3, r0
 800ec06:	2b00      	cmp	r3, #0
 800ec08:	d005      	beq.n	800ec16 <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 800ec0a:	68fb      	ldr	r3, [r7, #12]
 800ec0c:	3310      	adds	r3, #16
 800ec0e:	4618      	mov	r0, r3
 800ec10:	f00f fc8c 	bl	801e52c <sys_mbox_free>
    goto free_and_return;
 800ec14:	e017      	b.n	800ec46 <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 800ec16:	68fb      	ldr	r3, [r7, #12]
 800ec18:	3314      	adds	r3, #20
 800ec1a:	4618      	mov	r0, r3
 800ec1c:	f00f fd1e 	bl	801e65c <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 800ec20:	68fb      	ldr	r3, [r7, #12]
 800ec22:	2200      	movs	r2, #0
 800ec24:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 800ec26:	68fb      	ldr	r3, [r7, #12]
 800ec28:	f04f 32ff 	mov.w	r2, #4294967295
 800ec2c:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 800ec2e:	68fb      	ldr	r3, [r7, #12]
 800ec30:	683a      	ldr	r2, [r7, #0]
 800ec32:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 800ec34:	68fb      	ldr	r3, [r7, #12]
 800ec36:	2200      	movs	r2, #0
 800ec38:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 800ec3a:	68fb      	ldr	r3, [r7, #12]
 800ec3c:	7cfa      	ldrb	r2, [r7, #19]
 800ec3e:	771a      	strb	r2, [r3, #28]
  return conn;
 800ec40:	68fb      	ldr	r3, [r7, #12]
 800ec42:	e005      	b.n	800ec50 <netconn_alloc+0xc8>
    goto free_and_return;
 800ec44:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 800ec46:	68f9      	ldr	r1, [r7, #12]
 800ec48:	2007      	movs	r0, #7
 800ec4a:	f003 f9d1 	bl	8011ff0 <memp_free>
  return NULL;
 800ec4e:	2300      	movs	r3, #0
}
 800ec50:	4618      	mov	r0, r3
 800ec52:	3718      	adds	r7, #24
 800ec54:	46bd      	mov	sp, r7
 800ec56:	bd80      	pop	{r7, pc}
 800ec58:	080236f8 	.word	0x080236f8
 800ec5c:	080238fc 	.word	0x080238fc
 800ec60:	0802373c 	.word	0x0802373c

0800ec64 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 800ec64:	b580      	push	{r7, lr}
 800ec66:	b082      	sub	sp, #8
 800ec68:	af00      	add	r7, sp, #0
 800ec6a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	685b      	ldr	r3, [r3, #4]
 800ec70:	2b00      	cmp	r3, #0
 800ec72:	d006      	beq.n	800ec82 <netconn_free+0x1e>
 800ec74:	4b1b      	ldr	r3, [pc, #108]	; (800ece4 <netconn_free+0x80>)
 800ec76:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800ec7a:	491b      	ldr	r1, [pc, #108]	; (800ece8 <netconn_free+0x84>)
 800ec7c:	481b      	ldr	r0, [pc, #108]	; (800ecec <netconn_free+0x88>)
 800ec7e:	f010 fcc1 	bl	801f604 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	3310      	adds	r3, #16
 800ec86:	4618      	mov	r0, r3
 800ec88:	f00f fcd7 	bl	801e63a <sys_mbox_valid>
 800ec8c:	4603      	mov	r3, r0
 800ec8e:	2b00      	cmp	r3, #0
 800ec90:	d006      	beq.n	800eca0 <netconn_free+0x3c>
 800ec92:	4b14      	ldr	r3, [pc, #80]	; (800ece4 <netconn_free+0x80>)
 800ec94:	f240 3223 	movw	r2, #803	; 0x323
 800ec98:	4915      	ldr	r1, [pc, #84]	; (800ecf0 <netconn_free+0x8c>)
 800ec9a:	4814      	ldr	r0, [pc, #80]	; (800ecec <netconn_free+0x88>)
 800ec9c:	f010 fcb2 	bl	801f604 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	3314      	adds	r3, #20
 800eca4:	4618      	mov	r0, r3
 800eca6:	f00f fcc8 	bl	801e63a <sys_mbox_valid>
 800ecaa:	4603      	mov	r3, r0
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	d006      	beq.n	800ecbe <netconn_free+0x5a>
 800ecb0:	4b0c      	ldr	r3, [pc, #48]	; (800ece4 <netconn_free+0x80>)
 800ecb2:	f240 3226 	movw	r2, #806	; 0x326
 800ecb6:	490f      	ldr	r1, [pc, #60]	; (800ecf4 <netconn_free+0x90>)
 800ecb8:	480c      	ldr	r0, [pc, #48]	; (800ecec <netconn_free+0x88>)
 800ecba:	f010 fca3 	bl	801f604 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	330c      	adds	r3, #12
 800ecc2:	4618      	mov	r0, r3
 800ecc4:	f00f fd3d 	bl	801e742 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	330c      	adds	r3, #12
 800eccc:	4618      	mov	r0, r3
 800ecce:	f00f fd56 	bl	801e77e <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 800ecd2:	6879      	ldr	r1, [r7, #4]
 800ecd4:	2007      	movs	r0, #7
 800ecd6:	f003 f98b 	bl	8011ff0 <memp_free>
}
 800ecda:	bf00      	nop
 800ecdc:	3708      	adds	r7, #8
 800ecde:	46bd      	mov	sp, r7
 800ece0:	bd80      	pop	{r7, pc}
 800ece2:	bf00      	nop
 800ece4:	080236f8 	.word	0x080236f8
 800ece8:	08023924 	.word	0x08023924
 800ecec:	0802373c 	.word	0x0802373c
 800ecf0:	08023954 	.word	0x08023954
 800ecf4:	08023990 	.word	0x08023990

0800ecf8 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 800ecf8:	b580      	push	{r7, lr}
 800ecfa:	b086      	sub	sp, #24
 800ecfc:	af00      	add	r7, sp, #0
 800ecfe:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	3310      	adds	r3, #16
 800ed04:	4618      	mov	r0, r3
 800ed06:	f00f fc98 	bl	801e63a <sys_mbox_valid>
 800ed0a:	4603      	mov	r3, r0
 800ed0c:	2b00      	cmp	r3, #0
 800ed0e:	d02f      	beq.n	800ed70 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800ed10:	e018      	b.n	800ed44 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	781b      	ldrb	r3, [r3, #0]
 800ed16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ed1a:	2b10      	cmp	r3, #16
 800ed1c:	d10e      	bne.n	800ed3c <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 800ed1e:	693b      	ldr	r3, [r7, #16]
 800ed20:	f107 020f 	add.w	r2, r7, #15
 800ed24:	4611      	mov	r1, r2
 800ed26:	4618      	mov	r0, r3
 800ed28:	f7ff fafe 	bl	800e328 <lwip_netconn_is_err_msg>
 800ed2c:	4603      	mov	r3, r0
 800ed2e:	2b00      	cmp	r3, #0
 800ed30:	d108      	bne.n	800ed44 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 800ed32:	693b      	ldr	r3, [r7, #16]
 800ed34:	4618      	mov	r0, r3
 800ed36:	f004 f83d 	bl	8012db4 <pbuf_free>
 800ed3a:	e003      	b.n	800ed44 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 800ed3c:	693b      	ldr	r3, [r7, #16]
 800ed3e:	4618      	mov	r0, r3
 800ed40:	f000 ff7e 	bl	800fc40 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	3310      	adds	r3, #16
 800ed48:	f107 0210 	add.w	r2, r7, #16
 800ed4c:	4611      	mov	r1, r2
 800ed4e:	4618      	mov	r0, r3
 800ed50:	f00f fc57 	bl	801e602 <sys_arch_mbox_tryfetch>
 800ed54:	4603      	mov	r3, r0
 800ed56:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed5a:	d1da      	bne.n	800ed12 <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	3310      	adds	r3, #16
 800ed60:	4618      	mov	r0, r3
 800ed62:	f00f fbe3 	bl	801e52c <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	3310      	adds	r3, #16
 800ed6a:	4618      	mov	r0, r3
 800ed6c:	f00f fc76 	bl	801e65c <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	3314      	adds	r3, #20
 800ed74:	4618      	mov	r0, r3
 800ed76:	f00f fc60 	bl	801e63a <sys_mbox_valid>
 800ed7a:	4603      	mov	r3, r0
 800ed7c:	2b00      	cmp	r3, #0
 800ed7e:	d034      	beq.n	800edea <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800ed80:	e01d      	b.n	800edbe <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 800ed82:	693b      	ldr	r3, [r7, #16]
 800ed84:	f107 020e 	add.w	r2, r7, #14
 800ed88:	4611      	mov	r1, r2
 800ed8a:	4618      	mov	r0, r3
 800ed8c:	f7ff facc 	bl	800e328 <lwip_netconn_is_err_msg>
 800ed90:	4603      	mov	r3, r0
 800ed92:	2b00      	cmp	r3, #0
 800ed94:	d113      	bne.n	800edbe <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 800ed96:	693b      	ldr	r3, [r7, #16]
 800ed98:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 800ed9a:	6978      	ldr	r0, [r7, #20]
 800ed9c:	f7ff ffac 	bl	800ecf8 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 800eda0:	697b      	ldr	r3, [r7, #20]
 800eda2:	685b      	ldr	r3, [r3, #4]
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	d007      	beq.n	800edb8 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 800eda8:	697b      	ldr	r3, [r7, #20]
 800edaa:	685b      	ldr	r3, [r3, #4]
 800edac:	4618      	mov	r0, r3
 800edae:	f004 fe01 	bl	80139b4 <tcp_abort>
            newconn->pcb.tcp = NULL;
 800edb2:	697b      	ldr	r3, [r7, #20]
 800edb4:	2200      	movs	r2, #0
 800edb6:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 800edb8:	6978      	ldr	r0, [r7, #20]
 800edba:	f7ff ff53 	bl	800ec64 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	3314      	adds	r3, #20
 800edc2:	f107 0210 	add.w	r2, r7, #16
 800edc6:	4611      	mov	r1, r2
 800edc8:	4618      	mov	r0, r3
 800edca:	f00f fc1a 	bl	801e602 <sys_arch_mbox_tryfetch>
 800edce:	4603      	mov	r3, r0
 800edd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800edd4:	d1d5      	bne.n	800ed82 <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	3314      	adds	r3, #20
 800edda:	4618      	mov	r0, r3
 800eddc:	f00f fba6 	bl	801e52c <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	3314      	adds	r3, #20
 800ede4:	4618      	mov	r0, r3
 800ede6:	f00f fc39 	bl	801e65c <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 800edea:	bf00      	nop
 800edec:	3718      	adds	r7, #24
 800edee:	46bd      	mov	sp, r7
 800edf0:	bd80      	pop	{r7, pc}
	...

0800edf4 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800edf4:	b580      	push	{r7, lr}
 800edf6:	b086      	sub	sp, #24
 800edf8:	af00      	add	r7, sp, #0
 800edfa:	6078      	str	r0, [r7, #4]
 800edfc:	460b      	mov	r3, r1
 800edfe:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 800ee00:	2300      	movs	r3, #0
 800ee02:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	2b00      	cmp	r3, #0
 800ee08:	d106      	bne.n	800ee18 <lwip_netconn_do_close_internal+0x24>
 800ee0a:	4ba1      	ldr	r3, [pc, #644]	; (800f090 <lwip_netconn_do_close_internal+0x29c>)
 800ee0c:	f240 32a2 	movw	r2, #930	; 0x3a2
 800ee10:	49a0      	ldr	r1, [pc, #640]	; (800f094 <lwip_netconn_do_close_internal+0x2a0>)
 800ee12:	48a1      	ldr	r0, [pc, #644]	; (800f098 <lwip_netconn_do_close_internal+0x2a4>)
 800ee14:	f010 fbf6 	bl	801f604 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	781b      	ldrb	r3, [r3, #0]
 800ee1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ee20:	2b10      	cmp	r3, #16
 800ee22:	d006      	beq.n	800ee32 <lwip_netconn_do_close_internal+0x3e>
 800ee24:	4b9a      	ldr	r3, [pc, #616]	; (800f090 <lwip_netconn_do_close_internal+0x29c>)
 800ee26:	f240 32a3 	movw	r2, #931	; 0x3a3
 800ee2a:	499c      	ldr	r1, [pc, #624]	; (800f09c <lwip_netconn_do_close_internal+0x2a8>)
 800ee2c:	489a      	ldr	r0, [pc, #616]	; (800f098 <lwip_netconn_do_close_internal+0x2a4>)
 800ee2e:	f010 fbe9 	bl	801f604 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	785b      	ldrb	r3, [r3, #1]
 800ee36:	2b04      	cmp	r3, #4
 800ee38:	d006      	beq.n	800ee48 <lwip_netconn_do_close_internal+0x54>
 800ee3a:	4b95      	ldr	r3, [pc, #596]	; (800f090 <lwip_netconn_do_close_internal+0x29c>)
 800ee3c:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 800ee40:	4997      	ldr	r1, [pc, #604]	; (800f0a0 <lwip_netconn_do_close_internal+0x2ac>)
 800ee42:	4895      	ldr	r0, [pc, #596]	; (800f098 <lwip_netconn_do_close_internal+0x2a4>)
 800ee44:	f010 fbde 	bl	801f604 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	685b      	ldr	r3, [r3, #4]
 800ee4c:	2b00      	cmp	r3, #0
 800ee4e:	d106      	bne.n	800ee5e <lwip_netconn_do_close_internal+0x6a>
 800ee50:	4b8f      	ldr	r3, [pc, #572]	; (800f090 <lwip_netconn_do_close_internal+0x29c>)
 800ee52:	f240 32a5 	movw	r2, #933	; 0x3a5
 800ee56:	4993      	ldr	r1, [pc, #588]	; (800f0a4 <lwip_netconn_do_close_internal+0x2b0>)
 800ee58:	488f      	ldr	r0, [pc, #572]	; (800f098 <lwip_netconn_do_close_internal+0x2a4>)
 800ee5a:	f010 fbd3 	bl	801f604 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	6a1b      	ldr	r3, [r3, #32]
 800ee62:	2b00      	cmp	r3, #0
 800ee64:	d106      	bne.n	800ee74 <lwip_netconn_do_close_internal+0x80>
 800ee66:	4b8a      	ldr	r3, [pc, #552]	; (800f090 <lwip_netconn_do_close_internal+0x29c>)
 800ee68:	f240 32a6 	movw	r2, #934	; 0x3a6
 800ee6c:	498e      	ldr	r1, [pc, #568]	; (800f0a8 <lwip_netconn_do_close_internal+0x2b4>)
 800ee6e:	488a      	ldr	r0, [pc, #552]	; (800f098 <lwip_netconn_do_close_internal+0x2a4>)
 800ee70:	f010 fbc8 	bl	801f604 <iprintf>

  tpcb = conn->pcb.tcp;
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	685b      	ldr	r3, [r3, #4]
 800ee78:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	6a1b      	ldr	r3, [r3, #32]
 800ee7e:	7a1b      	ldrb	r3, [r3, #8]
 800ee80:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 800ee82:	7bfb      	ldrb	r3, [r7, #15]
 800ee84:	f003 0301 	and.w	r3, r3, #1
 800ee88:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 800ee8a:	7bfb      	ldrb	r3, [r7, #15]
 800ee8c:	f003 0302 	and.w	r3, r3, #2
 800ee90:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 800ee92:	7bfb      	ldrb	r3, [r7, #15]
 800ee94:	2b03      	cmp	r3, #3
 800ee96:	d102      	bne.n	800ee9e <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 800ee98:	2301      	movs	r3, #1
 800ee9a:	75bb      	strb	r3, [r7, #22]
 800ee9c:	e01f      	b.n	800eede <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 800ee9e:	7bbb      	ldrb	r3, [r7, #14]
 800eea0:	2b00      	cmp	r3, #0
 800eea2:	d00e      	beq.n	800eec2 <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 800eea4:	693b      	ldr	r3, [r7, #16]
 800eea6:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 800eea8:	2b05      	cmp	r3, #5
 800eeaa:	d007      	beq.n	800eebc <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 800eeac:	693b      	ldr	r3, [r7, #16]
 800eeae:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 800eeb0:	2b06      	cmp	r3, #6
 800eeb2:	d003      	beq.n	800eebc <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 800eeb4:	693b      	ldr	r3, [r7, #16]
 800eeb6:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 800eeb8:	2b08      	cmp	r3, #8
 800eeba:	d102      	bne.n	800eec2 <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 800eebc:	2301      	movs	r3, #1
 800eebe:	75bb      	strb	r3, [r7, #22]
 800eec0:	e00d      	b.n	800eede <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 800eec2:	7b7b      	ldrb	r3, [r7, #13]
 800eec4:	2b00      	cmp	r3, #0
 800eec6:	d008      	beq.n	800eeda <lwip_netconn_do_close_internal+0xe6>
 800eec8:	693b      	ldr	r3, [r7, #16]
 800eeca:	8b5b      	ldrh	r3, [r3, #26]
 800eecc:	f003 0310 	and.w	r3, r3, #16
 800eed0:	2b00      	cmp	r3, #0
 800eed2:	d002      	beq.n	800eeda <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 800eed4:	2301      	movs	r3, #1
 800eed6:	75bb      	strb	r3, [r7, #22]
 800eed8:	e001      	b.n	800eede <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 800eeda:	2300      	movs	r3, #0
 800eedc:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 800eede:	7dbb      	ldrb	r3, [r7, #22]
 800eee0:	2b00      	cmp	r3, #0
 800eee2:	d003      	beq.n	800eeec <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 800eee4:	2100      	movs	r1, #0
 800eee6:	6938      	ldr	r0, [r7, #16]
 800eee8:	f005 fdf2 	bl	8014ad0 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 800eeec:	693b      	ldr	r3, [r7, #16]
 800eeee:	7d1b      	ldrb	r3, [r3, #20]
 800eef0:	2b01      	cmp	r3, #1
 800eef2:	d104      	bne.n	800eefe <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 800eef4:	2100      	movs	r1, #0
 800eef6:	6938      	ldr	r0, [r7, #16]
 800eef8:	f005 fe62 	bl	8014bc0 <tcp_accept>
 800eefc:	e01d      	b.n	800ef3a <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 800eefe:	7bbb      	ldrb	r3, [r7, #14]
 800ef00:	2b00      	cmp	r3, #0
 800ef02:	d007      	beq.n	800ef14 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 800ef04:	2100      	movs	r1, #0
 800ef06:	6938      	ldr	r0, [r7, #16]
 800ef08:	f005 fdf4 	bl	8014af4 <tcp_recv>
      tcp_accept(tpcb, NULL);
 800ef0c:	2100      	movs	r1, #0
 800ef0e:	6938      	ldr	r0, [r7, #16]
 800ef10:	f005 fe56 	bl	8014bc0 <tcp_accept>
    }
    if (shut_tx) {
 800ef14:	7b7b      	ldrb	r3, [r7, #13]
 800ef16:	2b00      	cmp	r3, #0
 800ef18:	d003      	beq.n	800ef22 <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 800ef1a:	2100      	movs	r1, #0
 800ef1c:	6938      	ldr	r0, [r7, #16]
 800ef1e:	f005 fe0b 	bl	8014b38 <tcp_sent>
    }
    if (shut_close) {
 800ef22:	7dbb      	ldrb	r3, [r7, #22]
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	d008      	beq.n	800ef3a <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 800ef28:	2200      	movs	r2, #0
 800ef2a:	2100      	movs	r1, #0
 800ef2c:	6938      	ldr	r0, [r7, #16]
 800ef2e:	f005 fe5f 	bl	8014bf0 <tcp_poll>
      tcp_err(tpcb, NULL);
 800ef32:	2100      	movs	r1, #0
 800ef34:	6938      	ldr	r0, [r7, #16]
 800ef36:	f005 fe21 	bl	8014b7c <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 800ef3a:	7dbb      	ldrb	r3, [r7, #22]
 800ef3c:	2b00      	cmp	r3, #0
 800ef3e:	d005      	beq.n	800ef4c <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 800ef40:	6938      	ldr	r0, [r7, #16]
 800ef42:	f004 fbf1 	bl	8013728 <tcp_close>
 800ef46:	4603      	mov	r3, r0
 800ef48:	75fb      	strb	r3, [r7, #23]
 800ef4a:	e007      	b.n	800ef5c <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800ef4c:	7bbb      	ldrb	r3, [r7, #14]
 800ef4e:	7b7a      	ldrb	r2, [r7, #13]
 800ef50:	4619      	mov	r1, r3
 800ef52:	6938      	ldr	r0, [r7, #16]
 800ef54:	f004 fc14 	bl	8013780 <tcp_shutdown>
 800ef58:	4603      	mov	r3, r0
 800ef5a:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 800ef5c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ef60:	2b00      	cmp	r3, #0
 800ef62:	d102      	bne.n	800ef6a <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 800ef64:	2301      	movs	r3, #1
 800ef66:	757b      	strb	r3, [r7, #21]
 800ef68:	e016      	b.n	800ef98 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 800ef6a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ef6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef72:	d10f      	bne.n	800ef94 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	6a1b      	ldr	r3, [r3, #32]
 800ef78:	7a5b      	ldrb	r3, [r3, #9]
 800ef7a:	2b00      	cmp	r3, #0
 800ef7c:	d10c      	bne.n	800ef98 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 800ef7e:	2301      	movs	r3, #1
 800ef80:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 800ef82:	7dbb      	ldrb	r3, [r7, #22]
 800ef84:	2b00      	cmp	r3, #0
 800ef86:	d007      	beq.n	800ef98 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 800ef88:	6938      	ldr	r0, [r7, #16]
 800ef8a:	f004 fd13 	bl	80139b4 <tcp_abort>
          err = ERR_OK;
 800ef8e:	2300      	movs	r3, #0
 800ef90:	75fb      	strb	r3, [r7, #23]
 800ef92:	e001      	b.n	800ef98 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 800ef94:	2301      	movs	r3, #1
 800ef96:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 800ef98:	7d7b      	ldrb	r3, [r7, #21]
 800ef9a:	2b00      	cmp	r3, #0
 800ef9c:	d044      	beq.n	800f028 <lwip_netconn_do_close_internal+0x234>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	6a1b      	ldr	r3, [r3, #32]
 800efa2:	681b      	ldr	r3, [r3, #0]
 800efa4:	330c      	adds	r3, #12
 800efa6:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	6a1b      	ldr	r3, [r3, #32]
 800efac:	7dfa      	ldrb	r2, [r7, #23]
 800efae:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	2200      	movs	r2, #0
 800efb4:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	2200      	movs	r2, #0
 800efba:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 800efbc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800efc0:	2b00      	cmp	r3, #0
 800efc2:	d129      	bne.n	800f018 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 800efc4:	7dbb      	ldrb	r3, [r7, #22]
 800efc6:	2b00      	cmp	r3, #0
 800efc8:	d00c      	beq.n	800efe4 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	2200      	movs	r2, #0
 800efce:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800efd4:	2b00      	cmp	r3, #0
 800efd6:	d005      	beq.n	800efe4 <lwip_netconn_do_close_internal+0x1f0>
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800efdc:	2200      	movs	r2, #0
 800efde:	2104      	movs	r1, #4
 800efe0:	6878      	ldr	r0, [r7, #4]
 800efe2:	4798      	blx	r3
      }
      if (shut_rx) {
 800efe4:	7bbb      	ldrb	r3, [r7, #14]
 800efe6:	2b00      	cmp	r3, #0
 800efe8:	d009      	beq.n	800effe <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800efee:	2b00      	cmp	r3, #0
 800eff0:	d005      	beq.n	800effe <lwip_netconn_do_close_internal+0x20a>
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eff6:	2200      	movs	r2, #0
 800eff8:	2100      	movs	r1, #0
 800effa:	6878      	ldr	r0, [r7, #4]
 800effc:	4798      	blx	r3
      }
      if (shut_tx) {
 800effe:	7b7b      	ldrb	r3, [r7, #13]
 800f000:	2b00      	cmp	r3, #0
 800f002:	d009      	beq.n	800f018 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f008:	2b00      	cmp	r3, #0
 800f00a:	d005      	beq.n	800f018 <lwip_netconn_do_close_internal+0x224>
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f010:	2200      	movs	r2, #0
 800f012:	2102      	movs	r1, #2
 800f014:	6878      	ldr	r0, [r7, #4]
 800f016:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800f018:	78fb      	ldrb	r3, [r7, #3]
 800f01a:	2b00      	cmp	r3, #0
 800f01c:	d002      	beq.n	800f024 <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 800f01e:	68b8      	ldr	r0, [r7, #8]
 800f020:	f00f fb82 	bl	801e728 <sys_sem_signal>
    }
    return ERR_OK;
 800f024:	2300      	movs	r3, #0
 800f026:	e02e      	b.n	800f086 <lwip_netconn_do_close_internal+0x292>
  }
  if (!close_finished) {
 800f028:	7d7b      	ldrb	r3, [r7, #21]
 800f02a:	2b00      	cmp	r3, #0
 800f02c:	d11e      	bne.n	800f06c <lwip_netconn_do_close_internal+0x278>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800f02e:	693b      	ldr	r3, [r7, #16]
 800f030:	7d1b      	ldrb	r3, [r3, #20]
 800f032:	2b01      	cmp	r3, #1
 800f034:	d106      	bne.n	800f044 <lwip_netconn_do_close_internal+0x250>
 800f036:	4b16      	ldr	r3, [pc, #88]	; (800f090 <lwip_netconn_do_close_internal+0x29c>)
 800f038:	f240 4241 	movw	r2, #1089	; 0x441
 800f03c:	491b      	ldr	r1, [pc, #108]	; (800f0ac <lwip_netconn_do_close_internal+0x2b8>)
 800f03e:	4816      	ldr	r0, [pc, #88]	; (800f098 <lwip_netconn_do_close_internal+0x2a4>)
 800f040:	f010 fae0 	bl	801f604 <iprintf>
    if (shut_tx) {
 800f044:	7b7b      	ldrb	r3, [r7, #13]
 800f046:	2b00      	cmp	r3, #0
 800f048:	d003      	beq.n	800f052 <lwip_netconn_do_close_internal+0x25e>
      tcp_sent(tpcb, sent_tcp);
 800f04a:	4919      	ldr	r1, [pc, #100]	; (800f0b0 <lwip_netconn_do_close_internal+0x2bc>)
 800f04c:	6938      	ldr	r0, [r7, #16]
 800f04e:	f005 fd73 	bl	8014b38 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 800f052:	2201      	movs	r2, #1
 800f054:	4917      	ldr	r1, [pc, #92]	; (800f0b4 <lwip_netconn_do_close_internal+0x2c0>)
 800f056:	6938      	ldr	r0, [r7, #16]
 800f058:	f005 fdca 	bl	8014bf0 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 800f05c:	4916      	ldr	r1, [pc, #88]	; (800f0b8 <lwip_netconn_do_close_internal+0x2c4>)
 800f05e:	6938      	ldr	r0, [r7, #16]
 800f060:	f005 fd8c 	bl	8014b7c <tcp_err>
    tcp_arg(tpcb, conn);
 800f064:	6879      	ldr	r1, [r7, #4]
 800f066:	6938      	ldr	r0, [r7, #16]
 800f068:	f005 fd32 	bl	8014ad0 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 800f06c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f070:	2b00      	cmp	r3, #0
 800f072:	d106      	bne.n	800f082 <lwip_netconn_do_close_internal+0x28e>
 800f074:	4b06      	ldr	r3, [pc, #24]	; (800f090 <lwip_netconn_do_close_internal+0x29c>)
 800f076:	f240 424d 	movw	r2, #1101	; 0x44d
 800f07a:	4910      	ldr	r1, [pc, #64]	; (800f0bc <lwip_netconn_do_close_internal+0x2c8>)
 800f07c:	4806      	ldr	r0, [pc, #24]	; (800f098 <lwip_netconn_do_close_internal+0x2a4>)
 800f07e:	f010 fac1 	bl	801f604 <iprintf>
  return err;
 800f082:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f086:	4618      	mov	r0, r3
 800f088:	3718      	adds	r7, #24
 800f08a:	46bd      	mov	sp, r7
 800f08c:	bd80      	pop	{r7, pc}
 800f08e:	bf00      	nop
 800f090:	080236f8 	.word	0x080236f8
 800f094:	080239cc 	.word	0x080239cc
 800f098:	0802373c 	.word	0x0802373c
 800f09c:	080239dc 	.word	0x080239dc
 800f0a0:	080239fc 	.word	0x080239fc
 800f0a4:	08023a20 	.word	0x08023a20
 800f0a8:	08023860 	.word	0x08023860
 800f0ac:	08023a34 	.word	0x08023a34
 800f0b0:	0800e66d 	.word	0x0800e66d
 800f0b4:	0800e5a5 	.word	0x0800e5a5
 800f0b8:	0800e715 	.word	0x0800e715
 800f0bc:	08023a58 	.word	0x08023a58

0800f0c0 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 800f0c0:	b580      	push	{r7, lr}
 800f0c2:	b084      	sub	sp, #16
 800f0c4:	af00      	add	r7, sp, #0
 800f0c6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 800f0cc:	68fb      	ldr	r3, [r7, #12]
 800f0ce:	681b      	ldr	r3, [r3, #0]
 800f0d0:	785b      	ldrb	r3, [r3, #1]
 800f0d2:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 800f0d4:	7afb      	ldrb	r3, [r7, #11]
 800f0d6:	2b00      	cmp	r3, #0
 800f0d8:	d00d      	beq.n	800f0f6 <lwip_netconn_do_delconn+0x36>
 800f0da:	68fb      	ldr	r3, [r7, #12]
 800f0dc:	681b      	ldr	r3, [r3, #0]
 800f0de:	781b      	ldrb	r3, [r3, #0]
 800f0e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f0e4:	2b10      	cmp	r3, #16
 800f0e6:	d006      	beq.n	800f0f6 <lwip_netconn_do_delconn+0x36>
 800f0e8:	4b60      	ldr	r3, [pc, #384]	; (800f26c <lwip_netconn_do_delconn+0x1ac>)
 800f0ea:	f240 425e 	movw	r2, #1118	; 0x45e
 800f0ee:	4960      	ldr	r1, [pc, #384]	; (800f270 <lwip_netconn_do_delconn+0x1b0>)
 800f0f0:	4860      	ldr	r0, [pc, #384]	; (800f274 <lwip_netconn_do_delconn+0x1b4>)
 800f0f2:	f010 fa87 	bl	801f604 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 800f0f6:	7afb      	ldrb	r3, [r7, #11]
 800f0f8:	2b00      	cmp	r3, #0
 800f0fa:	d005      	beq.n	800f108 <lwip_netconn_do_delconn+0x48>
 800f0fc:	7afb      	ldrb	r3, [r7, #11]
 800f0fe:	2b02      	cmp	r3, #2
 800f100:	d002      	beq.n	800f108 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 800f102:	7afb      	ldrb	r3, [r7, #11]
 800f104:	2b03      	cmp	r3, #3
 800f106:	d109      	bne.n	800f11c <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 800f108:	7afb      	ldrb	r3, [r7, #11]
 800f10a:	2b03      	cmp	r3, #3
 800f10c:	d10a      	bne.n	800f124 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 800f10e:	68fb      	ldr	r3, [r7, #12]
 800f110:	681b      	ldr	r3, [r3, #0]
 800f112:	7f1b      	ldrb	r3, [r3, #28]
 800f114:	f003 0304 	and.w	r3, r3, #4
 800f118:	2b00      	cmp	r3, #0
 800f11a:	d103      	bne.n	800f124 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 800f11c:	68fb      	ldr	r3, [r7, #12]
 800f11e:	22fb      	movs	r2, #251	; 0xfb
 800f120:	711a      	strb	r2, [r3, #4]
 800f122:	e097      	b.n	800f254 <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 800f124:	7afb      	ldrb	r3, [r7, #11]
 800f126:	2b03      	cmp	r3, #3
 800f128:	d10d      	bne.n	800f146 <lwip_netconn_do_delconn+0x86>
 800f12a:	68fb      	ldr	r3, [r7, #12]
 800f12c:	681b      	ldr	r3, [r3, #0]
 800f12e:	7f1b      	ldrb	r3, [r3, #28]
 800f130:	f003 0304 	and.w	r3, r3, #4
 800f134:	2b00      	cmp	r3, #0
 800f136:	d106      	bne.n	800f146 <lwip_netconn_do_delconn+0x86>
 800f138:	4b4c      	ldr	r3, [pc, #304]	; (800f26c <lwip_netconn_do_delconn+0x1ac>)
 800f13a:	f240 427a 	movw	r2, #1146	; 0x47a
 800f13e:	494e      	ldr	r1, [pc, #312]	; (800f278 <lwip_netconn_do_delconn+0x1b8>)
 800f140:	484c      	ldr	r0, [pc, #304]	; (800f274 <lwip_netconn_do_delconn+0x1b4>)
 800f142:	f010 fa5f 	bl	801f604 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 800f146:	68fb      	ldr	r3, [r7, #12]
 800f148:	2200      	movs	r2, #0
 800f14a:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 800f14c:	68fb      	ldr	r3, [r7, #12]
 800f14e:	681b      	ldr	r3, [r3, #0]
 800f150:	4618      	mov	r0, r3
 800f152:	f7ff fdd1 	bl	800ecf8 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 800f156:	68fb      	ldr	r3, [r7, #12]
 800f158:	681b      	ldr	r3, [r3, #0]
 800f15a:	685b      	ldr	r3, [r3, #4]
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	d05f      	beq.n	800f220 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800f160:	68fb      	ldr	r3, [r7, #12]
 800f162:	681b      	ldr	r3, [r3, #0]
 800f164:	781b      	ldrb	r3, [r3, #0]
 800f166:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f16a:	2b10      	cmp	r3, #16
 800f16c:	d00d      	beq.n	800f18a <lwip_netconn_do_delconn+0xca>
 800f16e:	2b20      	cmp	r3, #32
 800f170:	d151      	bne.n	800f216 <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 800f172:	68fb      	ldr	r3, [r7, #12]
 800f174:	681b      	ldr	r3, [r3, #0]
 800f176:	685b      	ldr	r3, [r3, #4]
 800f178:	2200      	movs	r2, #0
 800f17a:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 800f17c:	68fb      	ldr	r3, [r7, #12]
 800f17e:	681b      	ldr	r3, [r3, #0]
 800f180:	685b      	ldr	r3, [r3, #4]
 800f182:	4618      	mov	r0, r3
 800f184:	f00a ff7e 	bl	801a084 <udp_remove>
          break;
 800f188:	e046      	b.n	800f218 <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800f18a:	68fb      	ldr	r3, [r7, #12]
 800f18c:	681b      	ldr	r3, [r3, #0]
 800f18e:	6a1b      	ldr	r3, [r3, #32]
 800f190:	2b00      	cmp	r3, #0
 800f192:	d006      	beq.n	800f1a2 <lwip_netconn_do_delconn+0xe2>
 800f194:	4b35      	ldr	r3, [pc, #212]	; (800f26c <lwip_netconn_do_delconn+0x1ac>)
 800f196:	f240 4294 	movw	r2, #1172	; 0x494
 800f19a:	4938      	ldr	r1, [pc, #224]	; (800f27c <lwip_netconn_do_delconn+0x1bc>)
 800f19c:	4835      	ldr	r0, [pc, #212]	; (800f274 <lwip_netconn_do_delconn+0x1b4>)
 800f19e:	f010 fa31 	bl	801f604 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 800f1a2:	68fb      	ldr	r3, [r7, #12]
 800f1a4:	681b      	ldr	r3, [r3, #0]
 800f1a6:	2204      	movs	r2, #4
 800f1a8:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 800f1aa:	68fb      	ldr	r3, [r7, #12]
 800f1ac:	2203      	movs	r2, #3
 800f1ae:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 800f1b0:	68fb      	ldr	r3, [r7, #12]
 800f1b2:	681b      	ldr	r3, [r3, #0]
 800f1b4:	68fa      	ldr	r2, [r7, #12]
 800f1b6:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800f1b8:	68fb      	ldr	r3, [r7, #12]
 800f1ba:	681b      	ldr	r3, [r3, #0]
 800f1bc:	2100      	movs	r1, #0
 800f1be:	4618      	mov	r0, r3
 800f1c0:	f7ff fe18 	bl	800edf4 <lwip_netconn_do_close_internal>
 800f1c4:	4603      	mov	r3, r0
 800f1c6:	2b00      	cmp	r3, #0
 800f1c8:	d04b      	beq.n	800f262 <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800f1ca:	68fb      	ldr	r3, [r7, #12]
 800f1cc:	681b      	ldr	r3, [r3, #0]
 800f1ce:	785b      	ldrb	r3, [r3, #1]
 800f1d0:	2b04      	cmp	r3, #4
 800f1d2:	d006      	beq.n	800f1e2 <lwip_netconn_do_delconn+0x122>
 800f1d4:	4b25      	ldr	r3, [pc, #148]	; (800f26c <lwip_netconn_do_delconn+0x1ac>)
 800f1d6:	f240 429a 	movw	r2, #1178	; 0x49a
 800f1da:	4929      	ldr	r1, [pc, #164]	; (800f280 <lwip_netconn_do_delconn+0x1c0>)
 800f1dc:	4825      	ldr	r0, [pc, #148]	; (800f274 <lwip_netconn_do_delconn+0x1b4>)
 800f1de:	f010 fa11 	bl	801f604 <iprintf>
            UNLOCK_TCPIP_CORE();
 800f1e2:	4828      	ldr	r0, [pc, #160]	; (800f284 <lwip_netconn_do_delconn+0x1c4>)
 800f1e4:	f00f fb11 	bl	801e80a <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800f1e8:	68fb      	ldr	r3, [r7, #12]
 800f1ea:	681b      	ldr	r3, [r3, #0]
 800f1ec:	330c      	adds	r3, #12
 800f1ee:	2100      	movs	r1, #0
 800f1f0:	4618      	mov	r0, r3
 800f1f2:	f00f fa68 	bl	801e6c6 <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 800f1f6:	4823      	ldr	r0, [pc, #140]	; (800f284 <lwip_netconn_do_delconn+0x1c4>)
 800f1f8:	f00f faf8 	bl	801e7ec <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800f1fc:	68fb      	ldr	r3, [r7, #12]
 800f1fe:	681b      	ldr	r3, [r3, #0]
 800f200:	785b      	ldrb	r3, [r3, #1]
 800f202:	2b00      	cmp	r3, #0
 800f204:	d02d      	beq.n	800f262 <lwip_netconn_do_delconn+0x1a2>
 800f206:	4b19      	ldr	r3, [pc, #100]	; (800f26c <lwip_netconn_do_delconn+0x1ac>)
 800f208:	f240 429e 	movw	r2, #1182	; 0x49e
 800f20c:	491c      	ldr	r1, [pc, #112]	; (800f280 <lwip_netconn_do_delconn+0x1c0>)
 800f20e:	4819      	ldr	r0, [pc, #100]	; (800f274 <lwip_netconn_do_delconn+0x1b4>)
 800f210:	f010 f9f8 	bl	801f604 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 800f214:	e025      	b.n	800f262 <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 800f216:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 800f218:	68fb      	ldr	r3, [r7, #12]
 800f21a:	681b      	ldr	r3, [r3, #0]
 800f21c:	2200      	movs	r2, #0
 800f21e:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 800f220:	68fb      	ldr	r3, [r7, #12]
 800f222:	681b      	ldr	r3, [r3, #0]
 800f224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f226:	2b00      	cmp	r3, #0
 800f228:	d007      	beq.n	800f23a <lwip_netconn_do_delconn+0x17a>
 800f22a:	68fb      	ldr	r3, [r7, #12]
 800f22c:	681b      	ldr	r3, [r3, #0]
 800f22e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f230:	68fa      	ldr	r2, [r7, #12]
 800f232:	6810      	ldr	r0, [r2, #0]
 800f234:	2200      	movs	r2, #0
 800f236:	2100      	movs	r1, #0
 800f238:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 800f23a:	68fb      	ldr	r3, [r7, #12]
 800f23c:	681b      	ldr	r3, [r3, #0]
 800f23e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f240:	2b00      	cmp	r3, #0
 800f242:	d007      	beq.n	800f254 <lwip_netconn_do_delconn+0x194>
 800f244:	68fb      	ldr	r3, [r7, #12]
 800f246:	681b      	ldr	r3, [r3, #0]
 800f248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f24a:	68fa      	ldr	r2, [r7, #12]
 800f24c:	6810      	ldr	r0, [r2, #0]
 800f24e:	2200      	movs	r2, #0
 800f250:	2102      	movs	r1, #2
 800f252:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800f254:	68fb      	ldr	r3, [r7, #12]
 800f256:	681b      	ldr	r3, [r3, #0]
 800f258:	330c      	adds	r3, #12
 800f25a:	4618      	mov	r0, r3
 800f25c:	f00f fa7e 	bl	801e75c <sys_sem_valid>
 800f260:	e000      	b.n	800f264 <lwip_netconn_do_delconn+0x1a4>
          return;
 800f262:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 800f264:	3710      	adds	r7, #16
 800f266:	46bd      	mov	sp, r7
 800f268:	bd80      	pop	{r7, pc}
 800f26a:	bf00      	nop
 800f26c:	080236f8 	.word	0x080236f8
 800f270:	08023a68 	.word	0x08023a68
 800f274:	0802373c 	.word	0x0802373c
 800f278:	08023a7c 	.word	0x08023a7c
 800f27c:	08023a9c 	.word	0x08023a9c
 800f280:	08023ab8 	.word	0x08023ab8
 800f284:	24004e58 	.word	0x24004e58

0800f288 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 800f288:	b580      	push	{r7, lr}
 800f28a:	b084      	sub	sp, #16
 800f28c:	af00      	add	r7, sp, #0
 800f28e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800f294:	68bb      	ldr	r3, [r7, #8]
 800f296:	681b      	ldr	r3, [r3, #0]
 800f298:	685b      	ldr	r3, [r3, #4]
 800f29a:	2b00      	cmp	r3, #0
 800f29c:	d025      	beq.n	800f2ea <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800f29e:	68bb      	ldr	r3, [r7, #8]
 800f2a0:	681b      	ldr	r3, [r3, #0]
 800f2a2:	781b      	ldrb	r3, [r3, #0]
 800f2a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f2a8:	2b10      	cmp	r3, #16
 800f2aa:	d00e      	beq.n	800f2ca <lwip_netconn_do_bind+0x42>
 800f2ac:	2b20      	cmp	r3, #32
 800f2ae:	d119      	bne.n	800f2e4 <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800f2b0:	68bb      	ldr	r3, [r7, #8]
 800f2b2:	681b      	ldr	r3, [r3, #0]
 800f2b4:	6858      	ldr	r0, [r3, #4]
 800f2b6:	68bb      	ldr	r3, [r7, #8]
 800f2b8:	6899      	ldr	r1, [r3, #8]
 800f2ba:	68bb      	ldr	r3, [r7, #8]
 800f2bc:	899b      	ldrh	r3, [r3, #12]
 800f2be:	461a      	mov	r2, r3
 800f2c0:	f00a fdca 	bl	8019e58 <udp_bind>
 800f2c4:	4603      	mov	r3, r0
 800f2c6:	73fb      	strb	r3, [r7, #15]
        break;
 800f2c8:	e011      	b.n	800f2ee <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800f2ca:	68bb      	ldr	r3, [r7, #8]
 800f2cc:	681b      	ldr	r3, [r3, #0]
 800f2ce:	6858      	ldr	r0, [r3, #4]
 800f2d0:	68bb      	ldr	r3, [r7, #8]
 800f2d2:	6899      	ldr	r1, [r3, #8]
 800f2d4:	68bb      	ldr	r3, [r7, #8]
 800f2d6:	899b      	ldrh	r3, [r3, #12]
 800f2d8:	461a      	mov	r2, r3
 800f2da:	f004 fb77 	bl	80139cc <tcp_bind>
 800f2de:	4603      	mov	r3, r0
 800f2e0:	73fb      	strb	r3, [r7, #15]
        break;
 800f2e2:	e004      	b.n	800f2ee <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 800f2e4:	23fa      	movs	r3, #250	; 0xfa
 800f2e6:	73fb      	strb	r3, [r7, #15]
        break;
 800f2e8:	e001      	b.n	800f2ee <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 800f2ea:	23fa      	movs	r3, #250	; 0xfa
 800f2ec:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 800f2ee:	68bb      	ldr	r3, [r7, #8]
 800f2f0:	7bfa      	ldrb	r2, [r7, #15]
 800f2f2:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800f2f4:	bf00      	nop
 800f2f6:	3710      	adds	r7, #16
 800f2f8:	46bd      	mov	sp, r7
 800f2fa:	bd80      	pop	{r7, pc}

0800f2fc <lwip_netconn_do_listen>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 800f2fc:	b580      	push	{r7, lr}
 800f2fe:	b086      	sub	sp, #24
 800f300:	af00      	add	r7, sp, #0
 800f302:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	617b      	str	r3, [r7, #20]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800f308:	697b      	ldr	r3, [r7, #20]
 800f30a:	681b      	ldr	r3, [r3, #0]
 800f30c:	685b      	ldr	r3, [r3, #4]
 800f30e:	2b00      	cmp	r3, #0
 800f310:	d07f      	beq.n	800f412 <lwip_netconn_do_listen+0x116>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800f312:	697b      	ldr	r3, [r7, #20]
 800f314:	681b      	ldr	r3, [r3, #0]
 800f316:	781b      	ldrb	r3, [r3, #0]
 800f318:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f31c:	2b10      	cmp	r3, #16
 800f31e:	d175      	bne.n	800f40c <lwip_netconn_do_listen+0x110>
      if (msg->conn->state == NETCONN_NONE) {
 800f320:	697b      	ldr	r3, [r7, #20]
 800f322:	681b      	ldr	r3, [r3, #0]
 800f324:	785b      	ldrb	r3, [r3, #1]
 800f326:	2b00      	cmp	r3, #0
 800f328:	d165      	bne.n	800f3f6 <lwip_netconn_do_listen+0xfa>
        struct tcp_pcb *lpcb;
        if (msg->conn->pcb.tcp->state != CLOSED) {
 800f32a:	697b      	ldr	r3, [r7, #20]
 800f32c:	681b      	ldr	r3, [r3, #0]
 800f32e:	685b      	ldr	r3, [r3, #4]
 800f330:	7d1b      	ldrb	r3, [r3, #20]
 800f332:	2b00      	cmp	r3, #0
 800f334:	d002      	beq.n	800f33c <lwip_netconn_do_listen+0x40>
          /* connection is not closed, cannot listen */
          err = ERR_VAL;
 800f336:	23fa      	movs	r3, #250	; 0xfa
 800f338:	72fb      	strb	r3, [r7, #11]
 800f33a:	e06c      	b.n	800f416 <lwip_netconn_do_listen+0x11a>
        } else {
          u8_t backlog;
#if TCP_LISTEN_BACKLOG
          backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
          backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 800f33c:	23ff      	movs	r3, #255	; 0xff
 800f33e:	74fb      	strb	r3, [r7, #19]
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 800f340:	697b      	ldr	r3, [r7, #20]
 800f342:	681b      	ldr	r3, [r3, #0]
 800f344:	685b      	ldr	r3, [r3, #4]
 800f346:	f107 020b 	add.w	r2, r7, #11
 800f34a:	7cf9      	ldrb	r1, [r7, #19]
 800f34c:	4618      	mov	r0, r3
 800f34e:	f004 fbf5 	bl	8013b3c <tcp_listen_with_backlog_and_err>
 800f352:	60f8      	str	r0, [r7, #12]

          if (lpcb == NULL) {
 800f354:	68fb      	ldr	r3, [r7, #12]
 800f356:	2b00      	cmp	r3, #0
 800f358:	d05d      	beq.n	800f416 <lwip_netconn_do_listen+0x11a>
            /* in this case, the old pcb is still allocated */
          } else {
            /* delete the recvmbox and allocate the acceptmbox */
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 800f35a:	697b      	ldr	r3, [r7, #20]
 800f35c:	681b      	ldr	r3, [r3, #0]
 800f35e:	3310      	adds	r3, #16
 800f360:	4618      	mov	r0, r3
 800f362:	f00f f96a 	bl	801e63a <sys_mbox_valid>
 800f366:	4603      	mov	r3, r0
 800f368:	2b00      	cmp	r3, #0
 800f36a:	d00b      	beq.n	800f384 <lwip_netconn_do_listen+0x88>
              /** @todo: should we drain the recvmbox here? */
              sys_mbox_free(&msg->conn->recvmbox);
 800f36c:	697b      	ldr	r3, [r7, #20]
 800f36e:	681b      	ldr	r3, [r3, #0]
 800f370:	3310      	adds	r3, #16
 800f372:	4618      	mov	r0, r3
 800f374:	f00f f8da 	bl	801e52c <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 800f378:	697b      	ldr	r3, [r7, #20]
 800f37a:	681b      	ldr	r3, [r3, #0]
 800f37c:	3310      	adds	r3, #16
 800f37e:	4618      	mov	r0, r3
 800f380:	f00f f96c 	bl	801e65c <sys_mbox_set_invalid>
            }
            err = ERR_OK;
 800f384:	2300      	movs	r3, #0
 800f386:	72fb      	strb	r3, [r7, #11]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 800f388:	697b      	ldr	r3, [r7, #20]
 800f38a:	681b      	ldr	r3, [r3, #0]
 800f38c:	3314      	adds	r3, #20
 800f38e:	4618      	mov	r0, r3
 800f390:	f00f f953 	bl	801e63a <sys_mbox_valid>
 800f394:	4603      	mov	r3, r0
 800f396:	2b00      	cmp	r3, #0
 800f398:	d108      	bne.n	800f3ac <lwip_netconn_do_listen+0xb0>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 800f39a:	697b      	ldr	r3, [r7, #20]
 800f39c:	681b      	ldr	r3, [r3, #0]
 800f39e:	3314      	adds	r3, #20
 800f3a0:	2106      	movs	r1, #6
 800f3a2:	4618      	mov	r0, r3
 800f3a4:	f00f f8a0 	bl	801e4e8 <sys_mbox_new>
 800f3a8:	4603      	mov	r3, r0
 800f3aa:	72fb      	strb	r3, [r7, #11]
            }
            if (err == ERR_OK) {
 800f3ac:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800f3b0:	2b00      	cmp	r3, #0
 800f3b2:	d118      	bne.n	800f3e6 <lwip_netconn_do_listen+0xea>
              msg->conn->state = NETCONN_LISTEN;
 800f3b4:	697b      	ldr	r3, [r7, #20]
 800f3b6:	681b      	ldr	r3, [r3, #0]
 800f3b8:	2202      	movs	r2, #2
 800f3ba:	705a      	strb	r2, [r3, #1]
              msg->conn->pcb.tcp = lpcb;
 800f3bc:	697b      	ldr	r3, [r7, #20]
 800f3be:	681b      	ldr	r3, [r3, #0]
 800f3c0:	68fa      	ldr	r2, [r7, #12]
 800f3c2:	605a      	str	r2, [r3, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 800f3c4:	697b      	ldr	r3, [r7, #20]
 800f3c6:	681b      	ldr	r3, [r3, #0]
 800f3c8:	685a      	ldr	r2, [r3, #4]
 800f3ca:	697b      	ldr	r3, [r7, #20]
 800f3cc:	681b      	ldr	r3, [r3, #0]
 800f3ce:	4619      	mov	r1, r3
 800f3d0:	4610      	mov	r0, r2
 800f3d2:	f005 fb7d 	bl	8014ad0 <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 800f3d6:	697b      	ldr	r3, [r7, #20]
 800f3d8:	681b      	ldr	r3, [r3, #0]
 800f3da:	685b      	ldr	r3, [r3, #4]
 800f3dc:	4912      	ldr	r1, [pc, #72]	; (800f428 <lwip_netconn_do_listen+0x12c>)
 800f3de:	4618      	mov	r0, r3
 800f3e0:	f005 fbee 	bl	8014bc0 <tcp_accept>
 800f3e4:	e017      	b.n	800f416 <lwip_netconn_do_listen+0x11a>
            } else {
              /* since the old pcb is already deallocated, free lpcb now */
              tcp_close(lpcb);
 800f3e6:	68f8      	ldr	r0, [r7, #12]
 800f3e8:	f004 f99e 	bl	8013728 <tcp_close>
              msg->conn->pcb.tcp = NULL;
 800f3ec:	697b      	ldr	r3, [r7, #20]
 800f3ee:	681b      	ldr	r3, [r3, #0]
 800f3f0:	2200      	movs	r2, #0
 800f3f2:	605a      	str	r2, [r3, #4]
 800f3f4:	e00f      	b.n	800f416 <lwip_netconn_do_listen+0x11a>
            }
          }
        }
      } else if (msg->conn->state == NETCONN_LISTEN) {
 800f3f6:	697b      	ldr	r3, [r7, #20]
 800f3f8:	681b      	ldr	r3, [r3, #0]
 800f3fa:	785b      	ldrb	r3, [r3, #1]
 800f3fc:	2b02      	cmp	r3, #2
 800f3fe:	d102      	bne.n	800f406 <lwip_netconn_do_listen+0x10a>
        /* already listening, allow updating of the backlog */
        err = ERR_OK;
 800f400:	2300      	movs	r3, #0
 800f402:	72fb      	strb	r3, [r7, #11]
 800f404:	e007      	b.n	800f416 <lwip_netconn_do_listen+0x11a>
        tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
      } else {
        err = ERR_CONN;
 800f406:	23f5      	movs	r3, #245	; 0xf5
 800f408:	72fb      	strb	r3, [r7, #11]
 800f40a:	e004      	b.n	800f416 <lwip_netconn_do_listen+0x11a>
      }
    } else {
      err = ERR_ARG;
 800f40c:	23f0      	movs	r3, #240	; 0xf0
 800f40e:	72fb      	strb	r3, [r7, #11]
 800f410:	e001      	b.n	800f416 <lwip_netconn_do_listen+0x11a>
    }
  } else {
    err = ERR_CONN;
 800f412:	23f5      	movs	r3, #245	; 0xf5
 800f414:	72fb      	strb	r3, [r7, #11]
  }
  msg->err = err;
 800f416:	f997 200b 	ldrsb.w	r2, [r7, #11]
 800f41a:	697b      	ldr	r3, [r7, #20]
 800f41c:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800f41e:	bf00      	nop
 800f420:	3718      	adds	r7, #24
 800f422:	46bd      	mov	sp, r7
 800f424:	bd80      	pop	{r7, pc}
 800f426:	bf00      	nop
 800f428:	0800e911 	.word	0x0800e911

0800f42c <lwip_netconn_do_send>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_send(void *m)
{
 800f42c:	b580      	push	{r7, lr}
 800f42e:	b084      	sub	sp, #16
 800f430:	af00      	add	r7, sp, #0
 800f432:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800f438:	68bb      	ldr	r3, [r7, #8]
 800f43a:	681b      	ldr	r3, [r3, #0]
 800f43c:	4618      	mov	r0, r3
 800f43e:	f7fe ff21 	bl	800e284 <netconn_err>
 800f442:	4603      	mov	r3, r0
 800f444:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800f446:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f44a:	2b00      	cmp	r3, #0
 800f44c:	d134      	bne.n	800f4b8 <lwip_netconn_do_send+0x8c>
    if (msg->conn->pcb.tcp != NULL) {
 800f44e:	68bb      	ldr	r3, [r7, #8]
 800f450:	681b      	ldr	r3, [r3, #0]
 800f452:	685b      	ldr	r3, [r3, #4]
 800f454:	2b00      	cmp	r3, #0
 800f456:	d02d      	beq.n	800f4b4 <lwip_netconn_do_send+0x88>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800f458:	68bb      	ldr	r3, [r7, #8]
 800f45a:	681b      	ldr	r3, [r3, #0]
 800f45c:	781b      	ldrb	r3, [r3, #0]
 800f45e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f462:	2b20      	cmp	r3, #32
 800f464:	d123      	bne.n	800f4ae <lwip_netconn_do_send+0x82>
            err = udp_sendto_chksum(msg->conn->pcb.udp, msg->msg.b->p,
                                    &msg->msg.b->addr, msg->msg.b->port,
                                    msg->msg.b->flags & NETBUF_FLAG_CHKSUM, msg->msg.b->toport_chksum);
          }
#else /* LWIP_CHECKSUM_ON_COPY */
          if (ip_addr_isany_val(msg->msg.b->addr) || IP_IS_ANY_TYPE_VAL(msg->msg.b->addr)) {
 800f466:	68bb      	ldr	r3, [r7, #8]
 800f468:	689b      	ldr	r3, [r3, #8]
 800f46a:	689b      	ldr	r3, [r3, #8]
 800f46c:	2b00      	cmp	r3, #0
 800f46e:	d10c      	bne.n	800f48a <lwip_netconn_do_send+0x5e>
            err = udp_send(msg->conn->pcb.udp, msg->msg.b->p);
 800f470:	68bb      	ldr	r3, [r7, #8]
 800f472:	681b      	ldr	r3, [r3, #0]
 800f474:	685a      	ldr	r2, [r3, #4]
 800f476:	68bb      	ldr	r3, [r7, #8]
 800f478:	689b      	ldr	r3, [r3, #8]
 800f47a:	681b      	ldr	r3, [r3, #0]
 800f47c:	4619      	mov	r1, r3
 800f47e:	4610      	mov	r0, r2
 800f480:	f00a fb00 	bl	8019a84 <udp_send>
 800f484:	4603      	mov	r3, r0
 800f486:	73fb      	strb	r3, [r7, #15]
          } else {
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
          }
#endif /* LWIP_CHECKSUM_ON_COPY */
          break;
 800f488:	e016      	b.n	800f4b8 <lwip_netconn_do_send+0x8c>
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
 800f48a:	68bb      	ldr	r3, [r7, #8]
 800f48c:	681b      	ldr	r3, [r3, #0]
 800f48e:	6858      	ldr	r0, [r3, #4]
 800f490:	68bb      	ldr	r3, [r7, #8]
 800f492:	689b      	ldr	r3, [r3, #8]
 800f494:	6819      	ldr	r1, [r3, #0]
 800f496:	68bb      	ldr	r3, [r7, #8]
 800f498:	689b      	ldr	r3, [r3, #8]
 800f49a:	f103 0208 	add.w	r2, r3, #8
 800f49e:	68bb      	ldr	r3, [r7, #8]
 800f4a0:	689b      	ldr	r3, [r3, #8]
 800f4a2:	899b      	ldrh	r3, [r3, #12]
 800f4a4:	f00a fb22 	bl	8019aec <udp_sendto>
 800f4a8:	4603      	mov	r3, r0
 800f4aa:	73fb      	strb	r3, [r7, #15]
          break;
 800f4ac:	e004      	b.n	800f4b8 <lwip_netconn_do_send+0x8c>
#endif /* LWIP_UDP */
        default:
          err = ERR_CONN;
 800f4ae:	23f5      	movs	r3, #245	; 0xf5
 800f4b0:	73fb      	strb	r3, [r7, #15]
          break;
 800f4b2:	e001      	b.n	800f4b8 <lwip_netconn_do_send+0x8c>
      }
    } else {
      err = ERR_CONN;
 800f4b4:	23f5      	movs	r3, #245	; 0xf5
 800f4b6:	73fb      	strb	r3, [r7, #15]
    }
  }
  msg->err = err;
 800f4b8:	68bb      	ldr	r3, [r7, #8]
 800f4ba:	7bfa      	ldrb	r2, [r7, #15]
 800f4bc:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800f4be:	bf00      	nop
 800f4c0:	3710      	adds	r7, #16
 800f4c2:	46bd      	mov	sp, r7
 800f4c4:	bd80      	pop	{r7, pc}

0800f4c6 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 800f4c6:	b580      	push	{r7, lr}
 800f4c8:	b086      	sub	sp, #24
 800f4ca:	af00      	add	r7, sp, #0
 800f4cc:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 800f4d2:	693b      	ldr	r3, [r7, #16]
 800f4d4:	2200      	movs	r2, #0
 800f4d6:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 800f4d8:	693b      	ldr	r3, [r7, #16]
 800f4da:	681b      	ldr	r3, [r3, #0]
 800f4dc:	685b      	ldr	r3, [r3, #4]
 800f4de:	2b00      	cmp	r3, #0
 800f4e0:	d022      	beq.n	800f528 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800f4e2:	693b      	ldr	r3, [r7, #16]
 800f4e4:	681b      	ldr	r3, [r3, #0]
 800f4e6:	781b      	ldrb	r3, [r3, #0]
 800f4e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f4ec:	2b10      	cmp	r3, #16
 800f4ee:	d11b      	bne.n	800f528 <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 800f4f0:	693b      	ldr	r3, [r7, #16]
 800f4f2:	689b      	ldr	r3, [r3, #8]
 800f4f4:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 800f4f6:	697b      	ldr	r3, [r7, #20]
 800f4f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f4fc:	d202      	bcs.n	800f504 <lwip_netconn_do_recv+0x3e>
 800f4fe:	697b      	ldr	r3, [r7, #20]
 800f500:	b29b      	uxth	r3, r3
 800f502:	e001      	b.n	800f508 <lwip_netconn_do_recv+0x42>
 800f504:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f508:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 800f50a:	693b      	ldr	r3, [r7, #16]
 800f50c:	681b      	ldr	r3, [r3, #0]
 800f50e:	685b      	ldr	r3, [r3, #4]
 800f510:	89fa      	ldrh	r2, [r7, #14]
 800f512:	4611      	mov	r1, r2
 800f514:	4618      	mov	r0, r3
 800f516:	f004 fc15 	bl	8013d44 <tcp_recved>
        remaining -= recved;
 800f51a:	89fb      	ldrh	r3, [r7, #14]
 800f51c:	697a      	ldr	r2, [r7, #20]
 800f51e:	1ad3      	subs	r3, r2, r3
 800f520:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 800f522:	697b      	ldr	r3, [r7, #20]
 800f524:	2b00      	cmp	r3, #0
 800f526:	d1e6      	bne.n	800f4f6 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 800f528:	bf00      	nop
 800f52a:	3718      	adds	r7, #24
 800f52c:	46bd      	mov	sp, r7
 800f52e:	bd80      	pop	{r7, pc}

0800f530 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800f530:	b580      	push	{r7, lr}
 800f532:	b088      	sub	sp, #32
 800f534:	af00      	add	r7, sp, #0
 800f536:	6078      	str	r0, [r7, #4]
 800f538:	460b      	mov	r3, r1
 800f53a:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 800f53c:	2300      	movs	r3, #0
 800f53e:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	2b00      	cmp	r3, #0
 800f544:	d106      	bne.n	800f554 <lwip_netconn_do_writemore+0x24>
 800f546:	4b96      	ldr	r3, [pc, #600]	; (800f7a0 <lwip_netconn_do_writemore+0x270>)
 800f548:	f240 6273 	movw	r2, #1651	; 0x673
 800f54c:	4995      	ldr	r1, [pc, #596]	; (800f7a4 <lwip_netconn_do_writemore+0x274>)
 800f54e:	4896      	ldr	r0, [pc, #600]	; (800f7a8 <lwip_netconn_do_writemore+0x278>)
 800f550:	f010 f858 	bl	801f604 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	785b      	ldrb	r3, [r3, #1]
 800f558:	2b01      	cmp	r3, #1
 800f55a:	d006      	beq.n	800f56a <lwip_netconn_do_writemore+0x3a>
 800f55c:	4b90      	ldr	r3, [pc, #576]	; (800f7a0 <lwip_netconn_do_writemore+0x270>)
 800f55e:	f240 6274 	movw	r2, #1652	; 0x674
 800f562:	4992      	ldr	r1, [pc, #584]	; (800f7ac <lwip_netconn_do_writemore+0x27c>)
 800f564:	4890      	ldr	r0, [pc, #576]	; (800f7a8 <lwip_netconn_do_writemore+0x278>)
 800f566:	f010 f84d 	bl	801f604 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800f56a:	687b      	ldr	r3, [r7, #4]
 800f56c:	6a1b      	ldr	r3, [r3, #32]
 800f56e:	2b00      	cmp	r3, #0
 800f570:	d106      	bne.n	800f580 <lwip_netconn_do_writemore+0x50>
 800f572:	4b8b      	ldr	r3, [pc, #556]	; (800f7a0 <lwip_netconn_do_writemore+0x270>)
 800f574:	f240 6275 	movw	r2, #1653	; 0x675
 800f578:	498d      	ldr	r1, [pc, #564]	; (800f7b0 <lwip_netconn_do_writemore+0x280>)
 800f57a:	488b      	ldr	r0, [pc, #556]	; (800f7a8 <lwip_netconn_do_writemore+0x278>)
 800f57c:	f010 f842 	bl	801f604 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	685b      	ldr	r3, [r3, #4]
 800f584:	2b00      	cmp	r3, #0
 800f586:	d106      	bne.n	800f596 <lwip_netconn_do_writemore+0x66>
 800f588:	4b85      	ldr	r3, [pc, #532]	; (800f7a0 <lwip_netconn_do_writemore+0x270>)
 800f58a:	f240 6276 	movw	r2, #1654	; 0x676
 800f58e:	4989      	ldr	r1, [pc, #548]	; (800f7b4 <lwip_netconn_do_writemore+0x284>)
 800f590:	4885      	ldr	r0, [pc, #532]	; (800f7a8 <lwip_netconn_do_writemore+0x278>)
 800f592:	f010 f837 	bl	801f604 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	6a1b      	ldr	r3, [r3, #32]
 800f59a:	699a      	ldr	r2, [r3, #24]
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	6a1b      	ldr	r3, [r3, #32]
 800f5a0:	695b      	ldr	r3, [r3, #20]
 800f5a2:	429a      	cmp	r2, r3
 800f5a4:	d306      	bcc.n	800f5b4 <lwip_netconn_do_writemore+0x84>
 800f5a6:	4b7e      	ldr	r3, [pc, #504]	; (800f7a0 <lwip_netconn_do_writemore+0x270>)
 800f5a8:	f240 6277 	movw	r2, #1655	; 0x677
 800f5ac:	4982      	ldr	r1, [pc, #520]	; (800f7b8 <lwip_netconn_do_writemore+0x288>)
 800f5ae:	487e      	ldr	r0, [pc, #504]	; (800f7a8 <lwip_netconn_do_writemore+0x278>)
 800f5b0:	f010 f828 	bl	801f604 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	6a1b      	ldr	r3, [r3, #32]
 800f5b8:	899b      	ldrh	r3, [r3, #12]
 800f5ba:	2b00      	cmp	r3, #0
 800f5bc:	d106      	bne.n	800f5cc <lwip_netconn_do_writemore+0x9c>
 800f5be:	4b78      	ldr	r3, [pc, #480]	; (800f7a0 <lwip_netconn_do_writemore+0x270>)
 800f5c0:	f240 6279 	movw	r2, #1657	; 0x679
 800f5c4:	497d      	ldr	r1, [pc, #500]	; (800f7bc <lwip_netconn_do_writemore+0x28c>)
 800f5c6:	4878      	ldr	r0, [pc, #480]	; (800f7a8 <lwip_netconn_do_writemore+0x278>)
 800f5c8:	f010 f81c 	bl	801f604 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	6a1b      	ldr	r3, [r3, #32]
 800f5d0:	7f1b      	ldrb	r3, [r3, #28]
 800f5d2:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	7f1b      	ldrb	r3, [r3, #28]
 800f5d8:	f003 0302 	and.w	r3, r3, #2
 800f5dc:	2b00      	cmp	r3, #0
 800f5de:	d104      	bne.n	800f5ea <lwip_netconn_do_writemore+0xba>
 800f5e0:	7ebb      	ldrb	r3, [r7, #26]
 800f5e2:	f003 0304 	and.w	r3, r3, #4
 800f5e6:	2b00      	cmp	r3, #0
 800f5e8:	d001      	beq.n	800f5ee <lwip_netconn_do_writemore+0xbe>
 800f5ea:	2301      	movs	r3, #1
 800f5ec:	e000      	b.n	800f5f0 <lwip_netconn_do_writemore+0xc0>
 800f5ee:	2300      	movs	r3, #0
 800f5f0:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	6a1b      	ldr	r3, [r3, #32]
 800f5f6:	689b      	ldr	r3, [r3, #8]
 800f5f8:	681a      	ldr	r2, [r3, #0]
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	6a1b      	ldr	r3, [r3, #32]
 800f5fe:	691b      	ldr	r3, [r3, #16]
 800f600:	4413      	add	r3, r2
 800f602:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	6a1b      	ldr	r3, [r3, #32]
 800f608:	689b      	ldr	r3, [r3, #8]
 800f60a:	685a      	ldr	r2, [r3, #4]
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	6a1b      	ldr	r3, [r3, #32]
 800f610:	691b      	ldr	r3, [r3, #16]
 800f612:	1ad3      	subs	r3, r2, r3
 800f614:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 800f616:	693b      	ldr	r3, [r7, #16]
 800f618:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f61c:	d307      	bcc.n	800f62e <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 800f61e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f622:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800f624:	7ebb      	ldrb	r3, [r7, #26]
 800f626:	f043 0302 	orr.w	r3, r3, #2
 800f62a:	76bb      	strb	r3, [r7, #26]
 800f62c:	e001      	b.n	800f632 <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 800f62e:	693b      	ldr	r3, [r7, #16]
 800f630:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	685b      	ldr	r3, [r3, #4]
 800f636:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800f63a:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 800f63c:	89fa      	ldrh	r2, [r7, #14]
 800f63e:	8bbb      	ldrh	r3, [r7, #28]
 800f640:	429a      	cmp	r2, r3
 800f642:	d216      	bcs.n	800f672 <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 800f644:	89fb      	ldrh	r3, [r7, #14]
 800f646:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 800f648:	7e3b      	ldrb	r3, [r7, #24]
 800f64a:	2b00      	cmp	r3, #0
 800f64c:	d00d      	beq.n	800f66a <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 800f64e:	8bbb      	ldrh	r3, [r7, #28]
 800f650:	2b00      	cmp	r3, #0
 800f652:	d10e      	bne.n	800f672 <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	6a1b      	ldr	r3, [r3, #32]
 800f658:	699b      	ldr	r3, [r3, #24]
 800f65a:	2b00      	cmp	r3, #0
 800f65c:	d102      	bne.n	800f664 <lwip_netconn_do_writemore+0x134>
 800f65e:	f06f 0306 	mvn.w	r3, #6
 800f662:	e000      	b.n	800f666 <lwip_netconn_do_writemore+0x136>
 800f664:	2300      	movs	r3, #0
 800f666:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 800f668:	e07d      	b.n	800f766 <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 800f66a:	7ebb      	ldrb	r3, [r7, #26]
 800f66c:	f043 0302 	orr.w	r3, r3, #2
 800f670:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	6a1b      	ldr	r3, [r3, #32]
 800f676:	691a      	ldr	r2, [r3, #16]
 800f678:	8bbb      	ldrh	r3, [r7, #28]
 800f67a:	441a      	add	r2, r3
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	6a1b      	ldr	r3, [r3, #32]
 800f680:	689b      	ldr	r3, [r3, #8]
 800f682:	685b      	ldr	r3, [r3, #4]
 800f684:	429a      	cmp	r2, r3
 800f686:	d906      	bls.n	800f696 <lwip_netconn_do_writemore+0x166>
 800f688:	4b45      	ldr	r3, [pc, #276]	; (800f7a0 <lwip_netconn_do_writemore+0x270>)
 800f68a:	f240 62a3 	movw	r2, #1699	; 0x6a3
 800f68e:	494c      	ldr	r1, [pc, #304]	; (800f7c0 <lwip_netconn_do_writemore+0x290>)
 800f690:	4845      	ldr	r0, [pc, #276]	; (800f7a8 <lwip_netconn_do_writemore+0x278>)
 800f692:	f00f ffb7 	bl	801f604 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 800f696:	8bbb      	ldrh	r3, [r7, #28]
 800f698:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f69c:	4293      	cmp	r3, r2
 800f69e:	d103      	bne.n	800f6a8 <lwip_netconn_do_writemore+0x178>
 800f6a0:	693b      	ldr	r3, [r7, #16]
 800f6a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f6a6:	d209      	bcs.n	800f6bc <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800f6a8:	693b      	ldr	r3, [r7, #16]
 800f6aa:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 800f6ac:	8bba      	ldrh	r2, [r7, #28]
 800f6ae:	429a      	cmp	r2, r3
 800f6b0:	d10b      	bne.n	800f6ca <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	6a1b      	ldr	r3, [r3, #32]
 800f6b6:	899b      	ldrh	r3, [r3, #12]
 800f6b8:	2b01      	cmp	r3, #1
 800f6ba:	d906      	bls.n	800f6ca <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 800f6bc:	2301      	movs	r3, #1
 800f6be:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800f6c0:	7ebb      	ldrb	r3, [r7, #26]
 800f6c2:	f043 0302 	orr.w	r3, r3, #2
 800f6c6:	76bb      	strb	r3, [r7, #26]
 800f6c8:	e001      	b.n	800f6ce <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 800f6ca:	2300      	movs	r3, #0
 800f6cc:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	6858      	ldr	r0, [r3, #4]
 800f6d2:	7ebb      	ldrb	r3, [r7, #26]
 800f6d4:	8bba      	ldrh	r2, [r7, #28]
 800f6d6:	6979      	ldr	r1, [r7, #20]
 800f6d8:	f008 f938 	bl	801794c <tcp_write>
 800f6dc:	4603      	mov	r3, r0
 800f6de:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 800f6e0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800f6e4:	2b00      	cmp	r3, #0
 800f6e6:	d12c      	bne.n	800f742 <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	6a1b      	ldr	r3, [r3, #32]
 800f6ec:	6999      	ldr	r1, [r3, #24]
 800f6ee:	8bba      	ldrh	r2, [r7, #28]
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	6a1b      	ldr	r3, [r3, #32]
 800f6f4:	440a      	add	r2, r1
 800f6f6:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	6a1b      	ldr	r3, [r3, #32]
 800f6fc:	6919      	ldr	r1, [r3, #16]
 800f6fe:	8bba      	ldrh	r2, [r7, #28]
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	6a1b      	ldr	r3, [r3, #32]
 800f704:	440a      	add	r2, r1
 800f706:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	6a1b      	ldr	r3, [r3, #32]
 800f70c:	691a      	ldr	r2, [r3, #16]
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	6a1b      	ldr	r3, [r3, #32]
 800f712:	689b      	ldr	r3, [r3, #8]
 800f714:	685b      	ldr	r3, [r3, #4]
 800f716:	429a      	cmp	r2, r3
 800f718:	d113      	bne.n	800f742 <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	6a1b      	ldr	r3, [r3, #32]
 800f71e:	899a      	ldrh	r2, [r3, #12]
 800f720:	3a01      	subs	r2, #1
 800f722:	b292      	uxth	r2, r2
 800f724:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	6a1b      	ldr	r3, [r3, #32]
 800f72a:	899b      	ldrh	r3, [r3, #12]
 800f72c:	2b00      	cmp	r3, #0
 800f72e:	d008      	beq.n	800f742 <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	6a1b      	ldr	r3, [r3, #32]
 800f734:	689a      	ldr	r2, [r3, #8]
 800f736:	3208      	adds	r2, #8
 800f738:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	6a1b      	ldr	r3, [r3, #32]
 800f73e:	2200      	movs	r2, #0
 800f740:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 800f742:	7e7b      	ldrb	r3, [r7, #25]
 800f744:	2b00      	cmp	r3, #0
 800f746:	d004      	beq.n	800f752 <lwip_netconn_do_writemore+0x222>
 800f748:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800f74c:	2b00      	cmp	r3, #0
 800f74e:	f43f af50 	beq.w	800f5f2 <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800f752:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800f756:	2b00      	cmp	r3, #0
 800f758:	d004      	beq.n	800f764 <lwip_netconn_do_writemore+0x234>
 800f75a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800f75e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f762:	d146      	bne.n	800f7f2 <lwip_netconn_do_writemore+0x2c2>
err_mem:
 800f764:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800f766:	7e3b      	ldrb	r3, [r7, #24]
 800f768:	2b00      	cmp	r3, #0
 800f76a:	d02b      	beq.n	800f7c4 <lwip_netconn_do_writemore+0x294>
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	6a1b      	ldr	r3, [r3, #32]
 800f770:	699a      	ldr	r2, [r3, #24]
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	6a1b      	ldr	r3, [r3, #32]
 800f776:	695b      	ldr	r3, [r3, #20]
 800f778:	429a      	cmp	r2, r3
 800f77a:	d223      	bcs.n	800f7c4 <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f780:	2b00      	cmp	r3, #0
 800f782:	d005      	beq.n	800f790 <lwip_netconn_do_writemore+0x260>
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f788:	2200      	movs	r2, #0
 800f78a:	2103      	movs	r1, #3
 800f78c:	6878      	ldr	r0, [r7, #4]
 800f78e:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	7f1b      	ldrb	r3, [r3, #28]
 800f794:	f043 0310 	orr.w	r3, r3, #16
 800f798:	b2da      	uxtb	r2, r3
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	771a      	strb	r2, [r3, #28]
 800f79e:	e028      	b.n	800f7f2 <lwip_netconn_do_writemore+0x2c2>
 800f7a0:	080236f8 	.word	0x080236f8
 800f7a4:	08023850 	.word	0x08023850
 800f7a8:	0802373c 	.word	0x0802373c
 800f7ac:	08023b58 	.word	0x08023b58
 800f7b0:	08023860 	.word	0x08023860
 800f7b4:	08023b78 	.word	0x08023b78
 800f7b8:	08023b90 	.word	0x08023b90
 800f7bc:	08023bd0 	.word	0x08023bd0
 800f7c0:	08023bf8 	.word	0x08023bf8
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	685b      	ldr	r3, [r3, #4]
 800f7c8:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800f7cc:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800f7d0:	d305      	bcc.n	800f7de <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	685b      	ldr	r3, [r3, #4]
 800f7d6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800f7da:	2b04      	cmp	r3, #4
 800f7dc:	d909      	bls.n	800f7f2 <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7e2:	2b00      	cmp	r3, #0
 800f7e4:	d005      	beq.n	800f7f2 <lwip_netconn_do_writemore+0x2c2>
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7ea:	2200      	movs	r2, #0
 800f7ec:	2103      	movs	r1, #3
 800f7ee:	6878      	ldr	r0, [r7, #4]
 800f7f0:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 800f7f2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800f7f6:	2b00      	cmp	r3, #0
 800f7f8:	d11d      	bne.n	800f836 <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	6a1b      	ldr	r3, [r3, #32]
 800f7fe:	699a      	ldr	r2, [r3, #24]
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	6a1b      	ldr	r3, [r3, #32]
 800f804:	695b      	ldr	r3, [r3, #20]
 800f806:	429a      	cmp	r2, r3
 800f808:	d002      	beq.n	800f810 <lwip_netconn_do_writemore+0x2e0>
 800f80a:	7e3b      	ldrb	r3, [r7, #24]
 800f80c:	2b00      	cmp	r3, #0
 800f80e:	d001      	beq.n	800f814 <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 800f810:	2301      	movs	r3, #1
 800f812:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	685b      	ldr	r3, [r3, #4]
 800f818:	4618      	mov	r0, r3
 800f81a:	f008 fe81 	bl	8018520 <tcp_output>
 800f81e:	4603      	mov	r3, r0
 800f820:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 800f822:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800f826:	f113 0f04 	cmn.w	r3, #4
 800f82a:	d12c      	bne.n	800f886 <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800f82c:	7b3b      	ldrb	r3, [r7, #12]
 800f82e:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800f830:	2301      	movs	r3, #1
 800f832:	76fb      	strb	r3, [r7, #27]
 800f834:	e027      	b.n	800f886 <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 800f836:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800f83a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f83e:	d120      	bne.n	800f882 <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	685b      	ldr	r3, [r3, #4]
 800f844:	4618      	mov	r0, r3
 800f846:	f008 fe6b 	bl	8018520 <tcp_output>
 800f84a:	4603      	mov	r3, r0
 800f84c:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 800f84e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800f852:	f113 0f04 	cmn.w	r3, #4
 800f856:	d104      	bne.n	800f862 <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800f858:	7b7b      	ldrb	r3, [r7, #13]
 800f85a:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800f85c:	2301      	movs	r3, #1
 800f85e:	76fb      	strb	r3, [r7, #27]
 800f860:	e011      	b.n	800f886 <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 800f862:	7e3b      	ldrb	r3, [r7, #24]
 800f864:	2b00      	cmp	r3, #0
 800f866:	d00e      	beq.n	800f886 <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	6a1b      	ldr	r3, [r3, #32]
 800f86c:	699b      	ldr	r3, [r3, #24]
 800f86e:	2b00      	cmp	r3, #0
 800f870:	d102      	bne.n	800f878 <lwip_netconn_do_writemore+0x348>
 800f872:	f06f 0306 	mvn.w	r3, #6
 800f876:	e000      	b.n	800f87a <lwip_netconn_do_writemore+0x34a>
 800f878:	2300      	movs	r3, #0
 800f87a:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800f87c:	2301      	movs	r3, #1
 800f87e:	76fb      	strb	r3, [r7, #27]
 800f880:	e001      	b.n	800f886 <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 800f882:	2301      	movs	r3, #1
 800f884:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 800f886:	7efb      	ldrb	r3, [r7, #27]
 800f888:	2b00      	cmp	r3, #0
 800f88a:	d015      	beq.n	800f8b8 <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	6a1b      	ldr	r3, [r3, #32]
 800f890:	681b      	ldr	r3, [r3, #0]
 800f892:	330c      	adds	r3, #12
 800f894:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	6a1b      	ldr	r3, [r3, #32]
 800f89a:	7ffa      	ldrb	r2, [r7, #31]
 800f89c:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	2200      	movs	r2, #0
 800f8a2:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	2200      	movs	r2, #0
 800f8a8:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800f8aa:	78fb      	ldrb	r3, [r7, #3]
 800f8ac:	2b00      	cmp	r3, #0
 800f8ae:	d006      	beq.n	800f8be <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 800f8b0:	68b8      	ldr	r0, [r7, #8]
 800f8b2:	f00e ff39 	bl	801e728 <sys_sem_signal>
 800f8b6:	e002      	b.n	800f8be <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 800f8b8:	f04f 33ff 	mov.w	r3, #4294967295
 800f8bc:	e000      	b.n	800f8c0 <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 800f8be:	2300      	movs	r3, #0
}
 800f8c0:	4618      	mov	r0, r3
 800f8c2:	3720      	adds	r7, #32
 800f8c4:	46bd      	mov	sp, r7
 800f8c6:	bd80      	pop	{r7, pc}

0800f8c8 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 800f8c8:	b580      	push	{r7, lr}
 800f8ca:	b084      	sub	sp, #16
 800f8cc:	af00      	add	r7, sp, #0
 800f8ce:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800f8d4:	68bb      	ldr	r3, [r7, #8]
 800f8d6:	681b      	ldr	r3, [r3, #0]
 800f8d8:	4618      	mov	r0, r3
 800f8da:	f7fe fcd3 	bl	800e284 <netconn_err>
 800f8de:	4603      	mov	r3, r0
 800f8e0:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800f8e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f8e6:	2b00      	cmp	r3, #0
 800f8e8:	d166      	bne.n	800f9b8 <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800f8ea:	68bb      	ldr	r3, [r7, #8]
 800f8ec:	681b      	ldr	r3, [r3, #0]
 800f8ee:	781b      	ldrb	r3, [r3, #0]
 800f8f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f8f4:	2b10      	cmp	r3, #16
 800f8f6:	d15d      	bne.n	800f9b4 <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 800f8f8:	68bb      	ldr	r3, [r7, #8]
 800f8fa:	681b      	ldr	r3, [r3, #0]
 800f8fc:	785b      	ldrb	r3, [r3, #1]
 800f8fe:	2b00      	cmp	r3, #0
 800f900:	d002      	beq.n	800f908 <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 800f902:	23fb      	movs	r3, #251	; 0xfb
 800f904:	73fb      	strb	r3, [r7, #15]
 800f906:	e057      	b.n	800f9b8 <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 800f908:	68bb      	ldr	r3, [r7, #8]
 800f90a:	681b      	ldr	r3, [r3, #0]
 800f90c:	685b      	ldr	r3, [r3, #4]
 800f90e:	2b00      	cmp	r3, #0
 800f910:	d04d      	beq.n	800f9ae <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 800f912:	68bb      	ldr	r3, [r7, #8]
 800f914:	681b      	ldr	r3, [r3, #0]
 800f916:	2201      	movs	r2, #1
 800f918:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800f91a:	68bb      	ldr	r3, [r7, #8]
 800f91c:	681b      	ldr	r3, [r3, #0]
 800f91e:	6a1b      	ldr	r3, [r3, #32]
 800f920:	2b00      	cmp	r3, #0
 800f922:	d006      	beq.n	800f932 <lwip_netconn_do_write+0x6a>
 800f924:	4b28      	ldr	r3, [pc, #160]	; (800f9c8 <lwip_netconn_do_write+0x100>)
 800f926:	f240 7223 	movw	r2, #1827	; 0x723
 800f92a:	4928      	ldr	r1, [pc, #160]	; (800f9cc <lwip_netconn_do_write+0x104>)
 800f92c:	4828      	ldr	r0, [pc, #160]	; (800f9d0 <lwip_netconn_do_write+0x108>)
 800f92e:	f00f fe69 	bl	801f604 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 800f932:	68bb      	ldr	r3, [r7, #8]
 800f934:	695b      	ldr	r3, [r3, #20]
 800f936:	2b00      	cmp	r3, #0
 800f938:	d106      	bne.n	800f948 <lwip_netconn_do_write+0x80>
 800f93a:	4b23      	ldr	r3, [pc, #140]	; (800f9c8 <lwip_netconn_do_write+0x100>)
 800f93c:	f240 7224 	movw	r2, #1828	; 0x724
 800f940:	4924      	ldr	r1, [pc, #144]	; (800f9d4 <lwip_netconn_do_write+0x10c>)
 800f942:	4823      	ldr	r0, [pc, #140]	; (800f9d0 <lwip_netconn_do_write+0x108>)
 800f944:	f00f fe5e 	bl	801f604 <iprintf>
        msg->conn->current_msg = msg;
 800f948:	68bb      	ldr	r3, [r7, #8]
 800f94a:	681b      	ldr	r3, [r3, #0]
 800f94c:	68ba      	ldr	r2, [r7, #8]
 800f94e:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 800f950:	68bb      	ldr	r3, [r7, #8]
 800f952:	681b      	ldr	r3, [r3, #0]
 800f954:	2100      	movs	r1, #0
 800f956:	4618      	mov	r0, r3
 800f958:	f7ff fdea 	bl	800f530 <lwip_netconn_do_writemore>
 800f95c:	4603      	mov	r3, r0
 800f95e:	2b00      	cmp	r3, #0
 800f960:	d02e      	beq.n	800f9c0 <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 800f962:	68bb      	ldr	r3, [r7, #8]
 800f964:	681b      	ldr	r3, [r3, #0]
 800f966:	785b      	ldrb	r3, [r3, #1]
 800f968:	2b01      	cmp	r3, #1
 800f96a:	d006      	beq.n	800f97a <lwip_netconn_do_write+0xb2>
 800f96c:	4b16      	ldr	r3, [pc, #88]	; (800f9c8 <lwip_netconn_do_write+0x100>)
 800f96e:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 800f972:	4919      	ldr	r1, [pc, #100]	; (800f9d8 <lwip_netconn_do_write+0x110>)
 800f974:	4816      	ldr	r0, [pc, #88]	; (800f9d0 <lwip_netconn_do_write+0x108>)
 800f976:	f00f fe45 	bl	801f604 <iprintf>
          UNLOCK_TCPIP_CORE();
 800f97a:	4818      	ldr	r0, [pc, #96]	; (800f9dc <lwip_netconn_do_write+0x114>)
 800f97c:	f00e ff45 	bl	801e80a <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800f980:	68bb      	ldr	r3, [r7, #8]
 800f982:	681b      	ldr	r3, [r3, #0]
 800f984:	330c      	adds	r3, #12
 800f986:	2100      	movs	r1, #0
 800f988:	4618      	mov	r0, r3
 800f98a:	f00e fe9c 	bl	801e6c6 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 800f98e:	4813      	ldr	r0, [pc, #76]	; (800f9dc <lwip_netconn_do_write+0x114>)
 800f990:	f00e ff2c 	bl	801e7ec <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 800f994:	68bb      	ldr	r3, [r7, #8]
 800f996:	681b      	ldr	r3, [r3, #0]
 800f998:	785b      	ldrb	r3, [r3, #1]
 800f99a:	2b01      	cmp	r3, #1
 800f99c:	d110      	bne.n	800f9c0 <lwip_netconn_do_write+0xf8>
 800f99e:	4b0a      	ldr	r3, [pc, #40]	; (800f9c8 <lwip_netconn_do_write+0x100>)
 800f9a0:	f240 722c 	movw	r2, #1836	; 0x72c
 800f9a4:	490c      	ldr	r1, [pc, #48]	; (800f9d8 <lwip_netconn_do_write+0x110>)
 800f9a6:	480a      	ldr	r0, [pc, #40]	; (800f9d0 <lwip_netconn_do_write+0x108>)
 800f9a8:	f00f fe2c 	bl	801f604 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 800f9ac:	e008      	b.n	800f9c0 <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 800f9ae:	23f5      	movs	r3, #245	; 0xf5
 800f9b0:	73fb      	strb	r3, [r7, #15]
 800f9b2:	e001      	b.n	800f9b8 <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 800f9b4:	23fa      	movs	r3, #250	; 0xfa
 800f9b6:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 800f9b8:	68bb      	ldr	r3, [r7, #8]
 800f9ba:	7bfa      	ldrb	r2, [r7, #15]
 800f9bc:	711a      	strb	r2, [r3, #4]
 800f9be:	e000      	b.n	800f9c2 <lwip_netconn_do_write+0xfa>
        return;
 800f9c0:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 800f9c2:	3710      	adds	r7, #16
 800f9c4:	46bd      	mov	sp, r7
 800f9c6:	bd80      	pop	{r7, pc}
 800f9c8:	080236f8 	.word	0x080236f8
 800f9cc:	08023a9c 	.word	0x08023a9c
 800f9d0:	0802373c 	.word	0x0802373c
 800f9d4:	08023c24 	.word	0x08023c24
 800f9d8:	08023ab8 	.word	0x08023ab8
 800f9dc:	24004e58 	.word	0x24004e58

0800f9e0 <lwip_netconn_do_getaddr>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_getaddr(void *m)
{
 800f9e0:	b580      	push	{r7, lr}
 800f9e2:	b084      	sub	sp, #16
 800f9e4:	af00      	add	r7, sp, #0
 800f9e6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	60fb      	str	r3, [r7, #12]

  if (msg->conn->pcb.ip != NULL) {
 800f9ec:	68fb      	ldr	r3, [r7, #12]
 800f9ee:	681b      	ldr	r3, [r3, #0]
 800f9f0:	685b      	ldr	r3, [r3, #4]
 800f9f2:	2b00      	cmp	r3, #0
 800f9f4:	d06b      	beq.n	800face <lwip_netconn_do_getaddr+0xee>
    if (msg->msg.ad.local) {
 800f9f6:	68fb      	ldr	r3, [r7, #12]
 800f9f8:	7c1b      	ldrb	r3, [r3, #16]
 800f9fa:	2b00      	cmp	r3, #0
 800f9fc:	d007      	beq.n	800fa0e <lwip_netconn_do_getaddr+0x2e>
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
 800f9fe:	68fb      	ldr	r3, [r7, #12]
 800fa00:	681b      	ldr	r3, [r3, #0]
 800fa02:	685a      	ldr	r2, [r3, #4]
 800fa04:	68fb      	ldr	r3, [r7, #12]
 800fa06:	689b      	ldr	r3, [r3, #8]
 800fa08:	6812      	ldr	r2, [r2, #0]
 800fa0a:	601a      	str	r2, [r3, #0]
 800fa0c:	e006      	b.n	800fa1c <lwip_netconn_do_getaddr+0x3c>
                   msg->conn->pcb.ip->local_ip);
    } else {
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
 800fa0e:	68fb      	ldr	r3, [r7, #12]
 800fa10:	681b      	ldr	r3, [r3, #0]
 800fa12:	685a      	ldr	r2, [r3, #4]
 800fa14:	68fb      	ldr	r3, [r7, #12]
 800fa16:	689b      	ldr	r3, [r3, #8]
 800fa18:	6852      	ldr	r2, [r2, #4]
 800fa1a:	601a      	str	r2, [r3, #0]
                   msg->conn->pcb.ip->remote_ip);
    }

    msg->err = ERR_OK;
 800fa1c:	68fb      	ldr	r3, [r7, #12]
 800fa1e:	2200      	movs	r2, #0
 800fa20:	711a      	strb	r2, [r3, #4]
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800fa22:	68fb      	ldr	r3, [r7, #12]
 800fa24:	681b      	ldr	r3, [r3, #0]
 800fa26:	781b      	ldrb	r3, [r3, #0]
 800fa28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800fa2c:	2b10      	cmp	r3, #16
 800fa2e:	d021      	beq.n	800fa74 <lwip_netconn_do_getaddr+0x94>
 800fa30:	2b20      	cmp	r3, #32
 800fa32:	d144      	bne.n	800fabe <lwip_netconn_do_getaddr+0xde>
        }
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        if (msg->msg.ad.local) {
 800fa34:	68fb      	ldr	r3, [r7, #12]
 800fa36:	7c1b      	ldrb	r3, [r3, #16]
 800fa38:	2b00      	cmp	r3, #0
 800fa3a:	d007      	beq.n	800fa4c <lwip_netconn_do_getaddr+0x6c>
          API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->local_port;
 800fa3c:	68fb      	ldr	r3, [r7, #12]
 800fa3e:	681b      	ldr	r3, [r3, #0]
 800fa40:	685a      	ldr	r2, [r3, #4]
 800fa42:	68fb      	ldr	r3, [r7, #12]
 800fa44:	68db      	ldr	r3, [r3, #12]
 800fa46:	8a52      	ldrh	r2, [r2, #18]
 800fa48:	801a      	strh	r2, [r3, #0]
            msg->err = ERR_CONN;
          } else {
            API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->remote_port;
          }
        }
        break;
 800fa4a:	e044      	b.n	800fad6 <lwip_netconn_do_getaddr+0xf6>
          if ((msg->conn->pcb.udp->flags & UDP_FLAGS_CONNECTED) == 0) {
 800fa4c:	68fb      	ldr	r3, [r7, #12]
 800fa4e:	681b      	ldr	r3, [r3, #0]
 800fa50:	685b      	ldr	r3, [r3, #4]
 800fa52:	7c1b      	ldrb	r3, [r3, #16]
 800fa54:	f003 0304 	and.w	r3, r3, #4
 800fa58:	2b00      	cmp	r3, #0
 800fa5a:	d103      	bne.n	800fa64 <lwip_netconn_do_getaddr+0x84>
            msg->err = ERR_CONN;
 800fa5c:	68fb      	ldr	r3, [r7, #12]
 800fa5e:	22f5      	movs	r2, #245	; 0xf5
 800fa60:	711a      	strb	r2, [r3, #4]
        break;
 800fa62:	e038      	b.n	800fad6 <lwip_netconn_do_getaddr+0xf6>
            API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->remote_port;
 800fa64:	68fb      	ldr	r3, [r7, #12]
 800fa66:	681b      	ldr	r3, [r3, #0]
 800fa68:	685a      	ldr	r2, [r3, #4]
 800fa6a:	68fb      	ldr	r3, [r7, #12]
 800fa6c:	68db      	ldr	r3, [r3, #12]
 800fa6e:	8a92      	ldrh	r2, [r2, #20]
 800fa70:	801a      	strh	r2, [r3, #0]
        break;
 800fa72:	e030      	b.n	800fad6 <lwip_netconn_do_getaddr+0xf6>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        if ((msg->msg.ad.local == 0) &&
 800fa74:	68fb      	ldr	r3, [r7, #12]
 800fa76:	7c1b      	ldrb	r3, [r3, #16]
 800fa78:	2b00      	cmp	r3, #0
 800fa7a:	d10f      	bne.n	800fa9c <lwip_netconn_do_getaddr+0xbc>
            ((msg->conn->pcb.tcp->state == CLOSED) || (msg->conn->pcb.tcp->state == LISTEN))) {
 800fa7c:	68fb      	ldr	r3, [r7, #12]
 800fa7e:	681b      	ldr	r3, [r3, #0]
 800fa80:	685b      	ldr	r3, [r3, #4]
 800fa82:	7d1b      	ldrb	r3, [r3, #20]
        if ((msg->msg.ad.local == 0) &&
 800fa84:	2b00      	cmp	r3, #0
 800fa86:	d005      	beq.n	800fa94 <lwip_netconn_do_getaddr+0xb4>
            ((msg->conn->pcb.tcp->state == CLOSED) || (msg->conn->pcb.tcp->state == LISTEN))) {
 800fa88:	68fb      	ldr	r3, [r7, #12]
 800fa8a:	681b      	ldr	r3, [r3, #0]
 800fa8c:	685b      	ldr	r3, [r3, #4]
 800fa8e:	7d1b      	ldrb	r3, [r3, #20]
 800fa90:	2b01      	cmp	r3, #1
 800fa92:	d103      	bne.n	800fa9c <lwip_netconn_do_getaddr+0xbc>
          /* pcb is not connected and remote name is requested */
          msg->err = ERR_CONN;
 800fa94:	68fb      	ldr	r3, [r7, #12]
 800fa96:	22f5      	movs	r2, #245	; 0xf5
 800fa98:	711a      	strb	r2, [r3, #4]
        } else {
          API_EXPR_DEREF(msg->msg.ad.port) = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
        }
        break;
 800fa9a:	e01c      	b.n	800fad6 <lwip_netconn_do_getaddr+0xf6>
          API_EXPR_DEREF(msg->msg.ad.port) = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
 800fa9c:	68fb      	ldr	r3, [r7, #12]
 800fa9e:	7c1b      	ldrb	r3, [r3, #16]
 800faa0:	2b00      	cmp	r3, #0
 800faa2:	d004      	beq.n	800faae <lwip_netconn_do_getaddr+0xce>
 800faa4:	68fb      	ldr	r3, [r7, #12]
 800faa6:	681b      	ldr	r3, [r3, #0]
 800faa8:	685b      	ldr	r3, [r3, #4]
 800faaa:	8adb      	ldrh	r3, [r3, #22]
 800faac:	e003      	b.n	800fab6 <lwip_netconn_do_getaddr+0xd6>
 800faae:	68fb      	ldr	r3, [r7, #12]
 800fab0:	681b      	ldr	r3, [r3, #0]
 800fab2:	685b      	ldr	r3, [r3, #4]
 800fab4:	8b1b      	ldrh	r3, [r3, #24]
 800fab6:	68fa      	ldr	r2, [r7, #12]
 800fab8:	68d2      	ldr	r2, [r2, #12]
 800faba:	8013      	strh	r3, [r2, #0]
        break;
 800fabc:	e00b      	b.n	800fad6 <lwip_netconn_do_getaddr+0xf6>
#endif /* LWIP_TCP */
      default:
        LWIP_ASSERT("invalid netconn_type", 0);
 800fabe:	4b08      	ldr	r3, [pc, #32]	; (800fae0 <lwip_netconn_do_getaddr+0x100>)
 800fac0:	f240 727d 	movw	r2, #1917	; 0x77d
 800fac4:	4907      	ldr	r1, [pc, #28]	; (800fae4 <lwip_netconn_do_getaddr+0x104>)
 800fac6:	4808      	ldr	r0, [pc, #32]	; (800fae8 <lwip_netconn_do_getaddr+0x108>)
 800fac8:	f00f fd9c 	bl	801f604 <iprintf>
        break;
 800facc:	e003      	b.n	800fad6 <lwip_netconn_do_getaddr+0xf6>
    }
  } else {
    msg->err = ERR_CONN;
 800face:	68fb      	ldr	r3, [r7, #12]
 800fad0:	22f5      	movs	r2, #245	; 0xf5
 800fad2:	711a      	strb	r2, [r3, #4]
  }
  TCPIP_APIMSG_ACK(msg);
}
 800fad4:	bf00      	nop
 800fad6:	bf00      	nop
 800fad8:	3710      	adds	r7, #16
 800fada:	46bd      	mov	sp, r7
 800fadc:	bd80      	pop	{r7, pc}
 800fade:	bf00      	nop
 800fae0:	080236f8 	.word	0x080236f8
 800fae4:	08023c38 	.word	0x08023c38
 800fae8:	0802373c 	.word	0x0802373c

0800faec <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 800faec:	b580      	push	{r7, lr}
 800faee:	b084      	sub	sp, #16
 800faf0:	af00      	add	r7, sp, #0
 800faf2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 800faf8:	68fb      	ldr	r3, [r7, #12]
 800fafa:	681b      	ldr	r3, [r3, #0]
 800fafc:	785b      	ldrb	r3, [r3, #1]
 800fafe:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 800fb00:	68fb      	ldr	r3, [r7, #12]
 800fb02:	681b      	ldr	r3, [r3, #0]
 800fb04:	685b      	ldr	r3, [r3, #4]
 800fb06:	2b00      	cmp	r3, #0
 800fb08:	d069      	beq.n	800fbde <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800fb0a:	68fb      	ldr	r3, [r7, #12]
 800fb0c:	681b      	ldr	r3, [r3, #0]
 800fb0e:	781b      	ldrb	r3, [r3, #0]
 800fb10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 800fb14:	2b10      	cmp	r3, #16
 800fb16:	d162      	bne.n	800fbde <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800fb18:	68fb      	ldr	r3, [r7, #12]
 800fb1a:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800fb1c:	2b03      	cmp	r3, #3
 800fb1e:	d002      	beq.n	800fb26 <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800fb20:	7afb      	ldrb	r3, [r7, #11]
 800fb22:	2b02      	cmp	r3, #2
 800fb24:	d05b      	beq.n	800fbde <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 800fb26:	7afb      	ldrb	r3, [r7, #11]
 800fb28:	2b03      	cmp	r3, #3
 800fb2a:	d103      	bne.n	800fb34 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 800fb2c:	68fb      	ldr	r3, [r7, #12]
 800fb2e:	22f5      	movs	r2, #245	; 0xf5
 800fb30:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800fb32:	e059      	b.n	800fbe8 <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 800fb34:	7afb      	ldrb	r3, [r7, #11]
 800fb36:	2b01      	cmp	r3, #1
 800fb38:	d103      	bne.n	800fb42 <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 800fb3a:	68fb      	ldr	r3, [r7, #12]
 800fb3c:	22fb      	movs	r2, #251	; 0xfb
 800fb3e:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800fb40:	e052      	b.n	800fbe8 <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 800fb42:	68fb      	ldr	r3, [r7, #12]
 800fb44:	7a1b      	ldrb	r3, [r3, #8]
 800fb46:	f003 0301 	and.w	r3, r3, #1
 800fb4a:	2b00      	cmp	r3, #0
 800fb4c:	d004      	beq.n	800fb58 <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 800fb4e:	68fb      	ldr	r3, [r7, #12]
 800fb50:	681b      	ldr	r3, [r3, #0]
 800fb52:	4618      	mov	r0, r3
 800fb54:	f7ff f8d0 	bl	800ecf8 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800fb58:	68fb      	ldr	r3, [r7, #12]
 800fb5a:	681b      	ldr	r3, [r3, #0]
 800fb5c:	6a1b      	ldr	r3, [r3, #32]
 800fb5e:	2b00      	cmp	r3, #0
 800fb60:	d006      	beq.n	800fb70 <lwip_netconn_do_close+0x84>
 800fb62:	4b23      	ldr	r3, [pc, #140]	; (800fbf0 <lwip_netconn_do_close+0x104>)
 800fb64:	f240 72bd 	movw	r2, #1981	; 0x7bd
 800fb68:	4922      	ldr	r1, [pc, #136]	; (800fbf4 <lwip_netconn_do_close+0x108>)
 800fb6a:	4823      	ldr	r0, [pc, #140]	; (800fbf8 <lwip_netconn_do_close+0x10c>)
 800fb6c:	f00f fd4a 	bl	801f604 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 800fb70:	68fb      	ldr	r3, [r7, #12]
 800fb72:	681b      	ldr	r3, [r3, #0]
 800fb74:	2204      	movs	r2, #4
 800fb76:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 800fb78:	68fb      	ldr	r3, [r7, #12]
 800fb7a:	681b      	ldr	r3, [r3, #0]
 800fb7c:	68fa      	ldr	r2, [r7, #12]
 800fb7e:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800fb80:	68fb      	ldr	r3, [r7, #12]
 800fb82:	681b      	ldr	r3, [r3, #0]
 800fb84:	2100      	movs	r1, #0
 800fb86:	4618      	mov	r0, r3
 800fb88:	f7ff f934 	bl	800edf4 <lwip_netconn_do_close_internal>
 800fb8c:	4603      	mov	r3, r0
 800fb8e:	2b00      	cmp	r3, #0
 800fb90:	d029      	beq.n	800fbe6 <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800fb92:	68fb      	ldr	r3, [r7, #12]
 800fb94:	681b      	ldr	r3, [r3, #0]
 800fb96:	785b      	ldrb	r3, [r3, #1]
 800fb98:	2b04      	cmp	r3, #4
 800fb9a:	d006      	beq.n	800fbaa <lwip_netconn_do_close+0xbe>
 800fb9c:	4b14      	ldr	r3, [pc, #80]	; (800fbf0 <lwip_netconn_do_close+0x104>)
 800fb9e:	f240 72c2 	movw	r2, #1986	; 0x7c2
 800fba2:	4916      	ldr	r1, [pc, #88]	; (800fbfc <lwip_netconn_do_close+0x110>)
 800fba4:	4814      	ldr	r0, [pc, #80]	; (800fbf8 <lwip_netconn_do_close+0x10c>)
 800fba6:	f00f fd2d 	bl	801f604 <iprintf>
        UNLOCK_TCPIP_CORE();
 800fbaa:	4815      	ldr	r0, [pc, #84]	; (800fc00 <lwip_netconn_do_close+0x114>)
 800fbac:	f00e fe2d 	bl	801e80a <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800fbb0:	68fb      	ldr	r3, [r7, #12]
 800fbb2:	681b      	ldr	r3, [r3, #0]
 800fbb4:	330c      	adds	r3, #12
 800fbb6:	2100      	movs	r1, #0
 800fbb8:	4618      	mov	r0, r3
 800fbba:	f00e fd84 	bl	801e6c6 <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 800fbbe:	4810      	ldr	r0, [pc, #64]	; (800fc00 <lwip_netconn_do_close+0x114>)
 800fbc0:	f00e fe14 	bl	801e7ec <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800fbc4:	68fb      	ldr	r3, [r7, #12]
 800fbc6:	681b      	ldr	r3, [r3, #0]
 800fbc8:	785b      	ldrb	r3, [r3, #1]
 800fbca:	2b00      	cmp	r3, #0
 800fbcc:	d00b      	beq.n	800fbe6 <lwip_netconn_do_close+0xfa>
 800fbce:	4b08      	ldr	r3, [pc, #32]	; (800fbf0 <lwip_netconn_do_close+0x104>)
 800fbd0:	f240 72c6 	movw	r2, #1990	; 0x7c6
 800fbd4:	4909      	ldr	r1, [pc, #36]	; (800fbfc <lwip_netconn_do_close+0x110>)
 800fbd6:	4808      	ldr	r0, [pc, #32]	; (800fbf8 <lwip_netconn_do_close+0x10c>)
 800fbd8:	f00f fd14 	bl	801f604 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 800fbdc:	e003      	b.n	800fbe6 <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 800fbde:	68fb      	ldr	r3, [r7, #12]
 800fbe0:	22f5      	movs	r2, #245	; 0xf5
 800fbe2:	711a      	strb	r2, [r3, #4]
 800fbe4:	e000      	b.n	800fbe8 <lwip_netconn_do_close+0xfc>
      return;
 800fbe6:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 800fbe8:	3710      	adds	r7, #16
 800fbea:	46bd      	mov	sp, r7
 800fbec:	bd80      	pop	{r7, pc}
 800fbee:	bf00      	nop
 800fbf0:	080236f8 	.word	0x080236f8
 800fbf4:	08023a9c 	.word	0x08023a9c
 800fbf8:	0802373c 	.word	0x0802373c
 800fbfc:	08023ab8 	.word	0x08023ab8
 800fc00:	24004e58 	.word	0x24004e58

0800fc04 <err_to_errno>:
  EIO            /* ERR_ARG        -16     Illegal argument.        */
};

int
err_to_errno(err_t err)
{
 800fc04:	b480      	push	{r7}
 800fc06:	b083      	sub	sp, #12
 800fc08:	af00      	add	r7, sp, #0
 800fc0a:	4603      	mov	r3, r0
 800fc0c:	71fb      	strb	r3, [r7, #7]
  if ((err > 0) || (-err >= (err_t)LWIP_ARRAYSIZE(err_to_errno_table))) {
 800fc0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fc12:	2b00      	cmp	r3, #0
 800fc14:	dc04      	bgt.n	800fc20 <err_to_errno+0x1c>
 800fc16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fc1a:	f113 0f10 	cmn.w	r3, #16
 800fc1e:	da01      	bge.n	800fc24 <err_to_errno+0x20>
    return EIO;
 800fc20:	2305      	movs	r3, #5
 800fc22:	e005      	b.n	800fc30 <err_to_errno+0x2c>
  }
  return err_to_errno_table[-err];
 800fc24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fc28:	425b      	negs	r3, r3
 800fc2a:	4a04      	ldr	r2, [pc, #16]	; (800fc3c <err_to_errno+0x38>)
 800fc2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 800fc30:	4618      	mov	r0, r3
 800fc32:	370c      	adds	r7, #12
 800fc34:	46bd      	mov	sp, r7
 800fc36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc3a:	4770      	bx	lr
 800fc3c:	08027028 	.word	0x08027028

0800fc40 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 800fc40:	b580      	push	{r7, lr}
 800fc42:	b082      	sub	sp, #8
 800fc44:	af00      	add	r7, sp, #0
 800fc46:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	2b00      	cmp	r3, #0
 800fc4c:	d013      	beq.n	800fc76 <netbuf_delete+0x36>
    if (buf->p != NULL) {
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	681b      	ldr	r3, [r3, #0]
 800fc52:	2b00      	cmp	r3, #0
 800fc54:	d00b      	beq.n	800fc6e <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	681b      	ldr	r3, [r3, #0]
 800fc5a:	4618      	mov	r0, r3
 800fc5c:	f003 f8aa 	bl	8012db4 <pbuf_free>
      buf->p = buf->ptr = NULL;
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	2200      	movs	r2, #0
 800fc64:	605a      	str	r2, [r3, #4]
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	685a      	ldr	r2, [r3, #4]
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 800fc6e:	6879      	ldr	r1, [r7, #4]
 800fc70:	2006      	movs	r0, #6
 800fc72:	f002 f9bd 	bl	8011ff0 <memp_free>
  }
}
 800fc76:	bf00      	nop
 800fc78:	3708      	adds	r7, #8
 800fc7a:	46bd      	mov	sp, r7
 800fc7c:	bd80      	pop	{r7, pc}
	...

0800fc80 <netbuf_free>:
 *
 * @param buf pointer to the netbuf which contains the packet buffer to free
 */
void
netbuf_free(struct netbuf *buf)
{
 800fc80:	b580      	push	{r7, lr}
 800fc82:	b082      	sub	sp, #8
 800fc84:	af00      	add	r7, sp, #0
 800fc86:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_free: invalid buf", (buf != NULL), return;);
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	2b00      	cmp	r3, #0
 800fc8c:	d106      	bne.n	800fc9c <netbuf_free+0x1c>
 800fc8e:	4b0d      	ldr	r3, [pc, #52]	; (800fcc4 <netbuf_free+0x44>)
 800fc90:	2281      	movs	r2, #129	; 0x81
 800fc92:	490d      	ldr	r1, [pc, #52]	; (800fcc8 <netbuf_free+0x48>)
 800fc94:	480d      	ldr	r0, [pc, #52]	; (800fccc <netbuf_free+0x4c>)
 800fc96:	f00f fcb5 	bl	801f604 <iprintf>
 800fc9a:	e00f      	b.n	800fcbc <netbuf_free+0x3c>
  if (buf->p != NULL) {
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	681b      	ldr	r3, [r3, #0]
 800fca0:	2b00      	cmp	r3, #0
 800fca2:	d004      	beq.n	800fcae <netbuf_free+0x2e>
    pbuf_free(buf->p);
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	681b      	ldr	r3, [r3, #0]
 800fca8:	4618      	mov	r0, r3
 800fcaa:	f003 f883 	bl	8012db4 <pbuf_free>
  }
  buf->p = buf->ptr = NULL;
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	2200      	movs	r2, #0
 800fcb2:	605a      	str	r2, [r3, #4]
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	685a      	ldr	r2, [r3, #4]
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	601a      	str	r2, [r3, #0]
#if LWIP_CHECKSUM_ON_COPY
  buf->flags = 0;
  buf->toport_chksum = 0;
#endif /* LWIP_CHECKSUM_ON_COPY */
}
 800fcbc:	3708      	adds	r7, #8
 800fcbe:	46bd      	mov	sp, r7
 800fcc0:	bd80      	pop	{r7, pc}
 800fcc2:	bf00      	nop
 800fcc4:	08023c50 	.word	0x08023c50
 800fcc8:	08023cec 	.word	0x08023cec
 800fccc:	08023ca0 	.word	0x08023ca0

0800fcd0 <netbuf_ref>:
 * @return ERR_OK if data is referenced
 *         ERR_MEM if data couldn't be referenced due to lack of memory
 */
err_t
netbuf_ref(struct netbuf *buf, const void *dataptr, u16_t size)
{
 800fcd0:	b580      	push	{r7, lr}
 800fcd2:	b084      	sub	sp, #16
 800fcd4:	af00      	add	r7, sp, #0
 800fcd6:	60f8      	str	r0, [r7, #12]
 800fcd8:	60b9      	str	r1, [r7, #8]
 800fcda:	4613      	mov	r3, r2
 800fcdc:	80fb      	strh	r3, [r7, #6]
  LWIP_ERROR("netbuf_ref: invalid buf", (buf != NULL), return ERR_ARG;);
 800fcde:	68fb      	ldr	r3, [r7, #12]
 800fce0:	2b00      	cmp	r3, #0
 800fce2:	d108      	bne.n	800fcf6 <netbuf_ref+0x26>
 800fce4:	4b1c      	ldr	r3, [pc, #112]	; (800fd58 <netbuf_ref+0x88>)
 800fce6:	2299      	movs	r2, #153	; 0x99
 800fce8:	491c      	ldr	r1, [pc, #112]	; (800fd5c <netbuf_ref+0x8c>)
 800fcea:	481d      	ldr	r0, [pc, #116]	; (800fd60 <netbuf_ref+0x90>)
 800fcec:	f00f fc8a 	bl	801f604 <iprintf>
 800fcf0:	f06f 030f 	mvn.w	r3, #15
 800fcf4:	e02b      	b.n	800fd4e <netbuf_ref+0x7e>
  if (buf->p != NULL) {
 800fcf6:	68fb      	ldr	r3, [r7, #12]
 800fcf8:	681b      	ldr	r3, [r3, #0]
 800fcfa:	2b00      	cmp	r3, #0
 800fcfc:	d004      	beq.n	800fd08 <netbuf_ref+0x38>
    pbuf_free(buf->p);
 800fcfe:	68fb      	ldr	r3, [r7, #12]
 800fd00:	681b      	ldr	r3, [r3, #0]
 800fd02:	4618      	mov	r0, r3
 800fd04:	f003 f856 	bl	8012db4 <pbuf_free>
  }
  buf->p = pbuf_alloc(PBUF_TRANSPORT, 0, PBUF_REF);
 800fd08:	2241      	movs	r2, #65	; 0x41
 800fd0a:	2100      	movs	r1, #0
 800fd0c:	2036      	movs	r0, #54	; 0x36
 800fd0e:	f002 fd3b 	bl	8012788 <pbuf_alloc>
 800fd12:	4602      	mov	r2, r0
 800fd14:	68fb      	ldr	r3, [r7, #12]
 800fd16:	601a      	str	r2, [r3, #0]
  if (buf->p == NULL) {
 800fd18:	68fb      	ldr	r3, [r7, #12]
 800fd1a:	681b      	ldr	r3, [r3, #0]
 800fd1c:	2b00      	cmp	r3, #0
 800fd1e:	d105      	bne.n	800fd2c <netbuf_ref+0x5c>
    buf->ptr = NULL;
 800fd20:	68fb      	ldr	r3, [r7, #12]
 800fd22:	2200      	movs	r2, #0
 800fd24:	605a      	str	r2, [r3, #4]
    return ERR_MEM;
 800fd26:	f04f 33ff 	mov.w	r3, #4294967295
 800fd2a:	e010      	b.n	800fd4e <netbuf_ref+0x7e>
  }
  ((struct pbuf_rom *)buf->p)->payload = dataptr;
 800fd2c:	68fb      	ldr	r3, [r7, #12]
 800fd2e:	681b      	ldr	r3, [r3, #0]
 800fd30:	68ba      	ldr	r2, [r7, #8]
 800fd32:	605a      	str	r2, [r3, #4]
  buf->p->len = buf->p->tot_len = size;
 800fd34:	68fb      	ldr	r3, [r7, #12]
 800fd36:	681b      	ldr	r3, [r3, #0]
 800fd38:	88fa      	ldrh	r2, [r7, #6]
 800fd3a:	811a      	strh	r2, [r3, #8]
 800fd3c:	68fa      	ldr	r2, [r7, #12]
 800fd3e:	6812      	ldr	r2, [r2, #0]
 800fd40:	891b      	ldrh	r3, [r3, #8]
 800fd42:	8153      	strh	r3, [r2, #10]
  buf->ptr = buf->p;
 800fd44:	68fb      	ldr	r3, [r7, #12]
 800fd46:	681a      	ldr	r2, [r3, #0]
 800fd48:	68fb      	ldr	r3, [r7, #12]
 800fd4a:	605a      	str	r2, [r3, #4]
  return ERR_OK;
 800fd4c:	2300      	movs	r3, #0
}
 800fd4e:	4618      	mov	r0, r3
 800fd50:	3710      	adds	r7, #16
 800fd52:	46bd      	mov	sp, r7
 800fd54:	bd80      	pop	{r7, pc}
 800fd56:	bf00      	nop
 800fd58:	08023c50 	.word	0x08023c50
 800fd5c:	08023d08 	.word	0x08023d08
 800fd60:	08023ca0 	.word	0x08023ca0

0800fd64 <tryget_socket_unconn_nouse>:
#endif /* LWIP_NETCONN_FULLDUPLEX */

/* Translate a socket 'int' into a pointer (only fails if the index is invalid) */
static struct lwip_sock *
tryget_socket_unconn_nouse(int fd)
{
 800fd64:	b480      	push	{r7}
 800fd66:	b085      	sub	sp, #20
 800fd68:	af00      	add	r7, sp, #0
 800fd6a:	6078      	str	r0, [r7, #4]
  int s = fd - LWIP_SOCKET_OFFSET;
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	60fb      	str	r3, [r7, #12]
  if ((s < 0) || (s >= NUM_SOCKETS)) {
 800fd70:	68fb      	ldr	r3, [r7, #12]
 800fd72:	2b00      	cmp	r3, #0
 800fd74:	db02      	blt.n	800fd7c <tryget_socket_unconn_nouse+0x18>
 800fd76:	68fb      	ldr	r3, [r7, #12]
 800fd78:	2b03      	cmp	r3, #3
 800fd7a:	dd01      	ble.n	800fd80 <tryget_socket_unconn_nouse+0x1c>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("tryget_socket_unconn(%d): invalid\n", fd));
    return NULL;
 800fd7c:	2300      	movs	r3, #0
 800fd7e:	e003      	b.n	800fd88 <tryget_socket_unconn_nouse+0x24>
  }
  return &sockets[s];
 800fd80:	68fb      	ldr	r3, [r7, #12]
 800fd82:	011b      	lsls	r3, r3, #4
 800fd84:	4a03      	ldr	r2, [pc, #12]	; (800fd94 <tryget_socket_unconn_nouse+0x30>)
 800fd86:	4413      	add	r3, r2
}
 800fd88:	4618      	mov	r0, r3
 800fd8a:	3714      	adds	r7, #20
 800fd8c:	46bd      	mov	sp, r7
 800fd8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd92:	4770      	bx	lr
 800fd94:	240044a8 	.word	0x240044a8

0800fd98 <tryget_socket_unconn>:
}

/* Translate a socket 'int' into a pointer (only fails if the index is invalid) */
static struct lwip_sock *
tryget_socket_unconn(int fd)
{
 800fd98:	b580      	push	{r7, lr}
 800fd9a:	b084      	sub	sp, #16
 800fd9c:	af00      	add	r7, sp, #0
 800fd9e:	6078      	str	r0, [r7, #4]
  struct lwip_sock *ret = tryget_socket_unconn_nouse(fd);
 800fda0:	6878      	ldr	r0, [r7, #4]
 800fda2:	f7ff ffdf 	bl	800fd64 <tryget_socket_unconn_nouse>
 800fda6:	60f8      	str	r0, [r7, #12]
  if (ret != NULL) {
    if (!sock_inc_used(ret)) {
      return NULL;
    }
  }
  return ret;
 800fda8:	68fb      	ldr	r3, [r7, #12]
}
 800fdaa:	4618      	mov	r0, r3
 800fdac:	3710      	adds	r7, #16
 800fdae:	46bd      	mov	sp, r7
 800fdb0:	bd80      	pop	{r7, pc}

0800fdb2 <tryget_socket>:
 * @param fd externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
tryget_socket(int fd)
{
 800fdb2:	b580      	push	{r7, lr}
 800fdb4:	b084      	sub	sp, #16
 800fdb6:	af00      	add	r7, sp, #0
 800fdb8:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock = tryget_socket_unconn(fd);
 800fdba:	6878      	ldr	r0, [r7, #4]
 800fdbc:	f7ff ffec 	bl	800fd98 <tryget_socket_unconn>
 800fdc0:	60f8      	str	r0, [r7, #12]
  if (sock != NULL) {
 800fdc2:	68fb      	ldr	r3, [r7, #12]
 800fdc4:	2b00      	cmp	r3, #0
 800fdc6:	d005      	beq.n	800fdd4 <tryget_socket+0x22>
    if (sock->conn) {
 800fdc8:	68fb      	ldr	r3, [r7, #12]
 800fdca:	681b      	ldr	r3, [r3, #0]
 800fdcc:	2b00      	cmp	r3, #0
 800fdce:	d001      	beq.n	800fdd4 <tryget_socket+0x22>
      return sock;
 800fdd0:	68fb      	ldr	r3, [r7, #12]
 800fdd2:	e000      	b.n	800fdd6 <tryget_socket+0x24>
    }
    done_socket(sock);
  }
  return NULL;
 800fdd4:	2300      	movs	r3, #0
}
 800fdd6:	4618      	mov	r0, r3
 800fdd8:	3710      	adds	r7, #16
 800fdda:	46bd      	mov	sp, r7
 800fddc:	bd80      	pop	{r7, pc}
	...

0800fde0 <get_socket>:
 * @param fd externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
get_socket(int fd)
{
 800fde0:	b580      	push	{r7, lr}
 800fde2:	b084      	sub	sp, #16
 800fde4:	af00      	add	r7, sp, #0
 800fde6:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock = tryget_socket(fd);
 800fde8:	6878      	ldr	r0, [r7, #4]
 800fdea:	f7ff ffe2 	bl	800fdb2 <tryget_socket>
 800fdee:	60f8      	str	r0, [r7, #12]
  if (!sock) {
 800fdf0:	68fb      	ldr	r3, [r7, #12]
 800fdf2:	2b00      	cmp	r3, #0
 800fdf4:	d104      	bne.n	800fe00 <get_socket+0x20>
    if ((fd < LWIP_SOCKET_OFFSET) || (fd >= (LWIP_SOCKET_OFFSET + NUM_SOCKETS))) {
      LWIP_DEBUGF(SOCKETS_DEBUG, ("get_socket(%d): invalid\n", fd));
    }
    set_errno(EBADF);
 800fdf6:	4b05      	ldr	r3, [pc, #20]	; (800fe0c <get_socket+0x2c>)
 800fdf8:	2209      	movs	r2, #9
 800fdfa:	601a      	str	r2, [r3, #0]
    return NULL;
 800fdfc:	2300      	movs	r3, #0
 800fdfe:	e000      	b.n	800fe02 <get_socket+0x22>
  }
  return sock;
 800fe00:	68fb      	ldr	r3, [r7, #12]
}
 800fe02:	4618      	mov	r0, r3
 800fe04:	3710      	adds	r7, #16
 800fe06:	46bd      	mov	sp, r7
 800fe08:	bd80      	pop	{r7, pc}
 800fe0a:	bf00      	nop
 800fe0c:	24007f80 	.word	0x24007f80

0800fe10 <alloc_socket>:
 *                 0 if socket has been created by socket()
 * @return the index of the new socket; -1 on error
 */
static int
alloc_socket(struct netconn *newconn, int accepted)
{
 800fe10:	b580      	push	{r7, lr}
 800fe12:	b084      	sub	sp, #16
 800fe14:	af00      	add	r7, sp, #0
 800fe16:	6078      	str	r0, [r7, #4]
 800fe18:	6039      	str	r1, [r7, #0]
  int i;
  SYS_ARCH_DECL_PROTECT(lev);
  LWIP_UNUSED_ARG(accepted);

  /* allocate a new socket identifier */
  for (i = 0; i < NUM_SOCKETS; ++i) {
 800fe1a:	2300      	movs	r3, #0
 800fe1c:	60fb      	str	r3, [r7, #12]
 800fe1e:	e052      	b.n	800fec6 <alloc_socket+0xb6>
    /* Protect socket array */
    SYS_ARCH_PROTECT(lev);
 800fe20:	f00e fd26 	bl	801e870 <sys_arch_protect>
 800fe24:	60b8      	str	r0, [r7, #8]
    if (!sockets[i].conn) {
 800fe26:	4a2c      	ldr	r2, [pc, #176]	; (800fed8 <alloc_socket+0xc8>)
 800fe28:	68fb      	ldr	r3, [r7, #12]
 800fe2a:	011b      	lsls	r3, r3, #4
 800fe2c:	4413      	add	r3, r2
 800fe2e:	681b      	ldr	r3, [r3, #0]
 800fe30:	2b00      	cmp	r3, #0
 800fe32:	d142      	bne.n	800feba <alloc_socket+0xaa>
        continue;
      }
      sockets[i].fd_used    = 1;
      sockets[i].fd_free_pending = 0;
#endif
      sockets[i].conn       = newconn;
 800fe34:	4a28      	ldr	r2, [pc, #160]	; (800fed8 <alloc_socket+0xc8>)
 800fe36:	68fb      	ldr	r3, [r7, #12]
 800fe38:	011b      	lsls	r3, r3, #4
 800fe3a:	4413      	add	r3, r2
 800fe3c:	687a      	ldr	r2, [r7, #4]
 800fe3e:	601a      	str	r2, [r3, #0]
      /* The socket is not yet known to anyone, so no need to protect
         after having marked it as used. */
      SYS_ARCH_UNPROTECT(lev);
 800fe40:	68b8      	ldr	r0, [r7, #8]
 800fe42:	f00e fd23 	bl	801e88c <sys_arch_unprotect>
      sockets[i].lastdata.pbuf = NULL;
 800fe46:	4a24      	ldr	r2, [pc, #144]	; (800fed8 <alloc_socket+0xc8>)
 800fe48:	68fb      	ldr	r3, [r7, #12]
 800fe4a:	011b      	lsls	r3, r3, #4
 800fe4c:	4413      	add	r3, r2
 800fe4e:	3304      	adds	r3, #4
 800fe50:	2200      	movs	r2, #0
 800fe52:	601a      	str	r2, [r3, #0]
#if LWIP_SOCKET_SELECT || LWIP_SOCKET_POLL
      LWIP_ASSERT("sockets[i].select_waiting == 0", sockets[i].select_waiting == 0);
 800fe54:	4a20      	ldr	r2, [pc, #128]	; (800fed8 <alloc_socket+0xc8>)
 800fe56:	68fb      	ldr	r3, [r7, #12]
 800fe58:	011b      	lsls	r3, r3, #4
 800fe5a:	4413      	add	r3, r2
 800fe5c:	330e      	adds	r3, #14
 800fe5e:	781b      	ldrb	r3, [r3, #0]
 800fe60:	2b00      	cmp	r3, #0
 800fe62:	d006      	beq.n	800fe72 <alloc_socket+0x62>
 800fe64:	4b1d      	ldr	r3, [pc, #116]	; (800fedc <alloc_socket+0xcc>)
 800fe66:	f240 220e 	movw	r2, #526	; 0x20e
 800fe6a:	491d      	ldr	r1, [pc, #116]	; (800fee0 <alloc_socket+0xd0>)
 800fe6c:	481d      	ldr	r0, [pc, #116]	; (800fee4 <alloc_socket+0xd4>)
 800fe6e:	f00f fbc9 	bl	801f604 <iprintf>
      sockets[i].rcvevent   = 0;
 800fe72:	4a19      	ldr	r2, [pc, #100]	; (800fed8 <alloc_socket+0xc8>)
 800fe74:	68fb      	ldr	r3, [r7, #12]
 800fe76:	011b      	lsls	r3, r3, #4
 800fe78:	4413      	add	r3, r2
 800fe7a:	3308      	adds	r3, #8
 800fe7c:	2200      	movs	r2, #0
 800fe7e:	801a      	strh	r2, [r3, #0]
      /* TCP sendbuf is empty, but the socket is not yet writable until connected
       * (unless it has been created by accept()). */
      sockets[i].sendevent  = (NETCONNTYPE_GROUP(newconn->type) == NETCONN_TCP ? (accepted != 0) : 1);
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	781b      	ldrb	r3, [r3, #0]
 800fe84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800fe88:	2b10      	cmp	r3, #16
 800fe8a:	d102      	bne.n	800fe92 <alloc_socket+0x82>
 800fe8c:	683b      	ldr	r3, [r7, #0]
 800fe8e:	2b00      	cmp	r3, #0
 800fe90:	d001      	beq.n	800fe96 <alloc_socket+0x86>
 800fe92:	2301      	movs	r3, #1
 800fe94:	e000      	b.n	800fe98 <alloc_socket+0x88>
 800fe96:	2300      	movs	r3, #0
 800fe98:	b299      	uxth	r1, r3
 800fe9a:	4a0f      	ldr	r2, [pc, #60]	; (800fed8 <alloc_socket+0xc8>)
 800fe9c:	68fb      	ldr	r3, [r7, #12]
 800fe9e:	011b      	lsls	r3, r3, #4
 800fea0:	4413      	add	r3, r2
 800fea2:	330a      	adds	r3, #10
 800fea4:	460a      	mov	r2, r1
 800fea6:	801a      	strh	r2, [r3, #0]
      sockets[i].errevent   = 0;
 800fea8:	4a0b      	ldr	r2, [pc, #44]	; (800fed8 <alloc_socket+0xc8>)
 800feaa:	68fb      	ldr	r3, [r7, #12]
 800feac:	011b      	lsls	r3, r3, #4
 800feae:	4413      	add	r3, r2
 800feb0:	330c      	adds	r3, #12
 800feb2:	2200      	movs	r2, #0
 800feb4:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_SOCKET_SELECT || LWIP_SOCKET_POLL */
      return i + LWIP_SOCKET_OFFSET;
 800feb6:	68fb      	ldr	r3, [r7, #12]
 800feb8:	e00a      	b.n	800fed0 <alloc_socket+0xc0>
    }
    SYS_ARCH_UNPROTECT(lev);
 800feba:	68b8      	ldr	r0, [r7, #8]
 800febc:	f00e fce6 	bl	801e88c <sys_arch_unprotect>
  for (i = 0; i < NUM_SOCKETS; ++i) {
 800fec0:	68fb      	ldr	r3, [r7, #12]
 800fec2:	3301      	adds	r3, #1
 800fec4:	60fb      	str	r3, [r7, #12]
 800fec6:	68fb      	ldr	r3, [r7, #12]
 800fec8:	2b03      	cmp	r3, #3
 800feca:	dda9      	ble.n	800fe20 <alloc_socket+0x10>
  }
  return -1;
 800fecc:	f04f 33ff 	mov.w	r3, #4294967295
}
 800fed0:	4618      	mov	r0, r3
 800fed2:	3710      	adds	r7, #16
 800fed4:	46bd      	mov	sp, r7
 800fed6:	bd80      	pop	{r7, pc}
 800fed8:	240044a8 	.word	0x240044a8
 800fedc:	08023de8 	.word	0x08023de8
 800fee0:	08023e1c 	.word	0x08023e1c
 800fee4:	08023e3c 	.word	0x08023e3c

0800fee8 <free_socket_locked>:
 * @param lastdata lastdata is stored here, must be freed externally
 */
static int
free_socket_locked(struct lwip_sock *sock, int is_tcp, struct netconn **conn,
                   union lwip_sock_lastdata *lastdata)
{
 800fee8:	b480      	push	{r7}
 800feea:	b085      	sub	sp, #20
 800feec:	af00      	add	r7, sp, #0
 800feee:	60f8      	str	r0, [r7, #12]
 800fef0:	60b9      	str	r1, [r7, #8]
 800fef2:	607a      	str	r2, [r7, #4]
 800fef4:	603b      	str	r3, [r7, #0]
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  LWIP_UNUSED_ARG(is_tcp);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  *lastdata = sock->lastdata;
 800fef6:	683b      	ldr	r3, [r7, #0]
 800fef8:	68fa      	ldr	r2, [r7, #12]
 800fefa:	6852      	ldr	r2, [r2, #4]
 800fefc:	601a      	str	r2, [r3, #0]
  sock->lastdata.pbuf = NULL;
 800fefe:	68fb      	ldr	r3, [r7, #12]
 800ff00:	2200      	movs	r2, #0
 800ff02:	605a      	str	r2, [r3, #4]
  *conn = sock->conn;
 800ff04:	68fb      	ldr	r3, [r7, #12]
 800ff06:	681a      	ldr	r2, [r3, #0]
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	601a      	str	r2, [r3, #0]
  sock->conn = NULL;
 800ff0c:	68fb      	ldr	r3, [r7, #12]
 800ff0e:	2200      	movs	r2, #0
 800ff10:	601a      	str	r2, [r3, #0]
  return 1;
 800ff12:	2301      	movs	r3, #1
}
 800ff14:	4618      	mov	r0, r3
 800ff16:	3714      	adds	r7, #20
 800ff18:	46bd      	mov	sp, r7
 800ff1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff1e:	4770      	bx	lr

0800ff20 <free_socket_free_elements>:

/** Free a socket's leftover members.
 */
static void
free_socket_free_elements(int is_tcp, struct netconn *conn, union lwip_sock_lastdata *lastdata)
{
 800ff20:	b580      	push	{r7, lr}
 800ff22:	b084      	sub	sp, #16
 800ff24:	af00      	add	r7, sp, #0
 800ff26:	60f8      	str	r0, [r7, #12]
 800ff28:	60b9      	str	r1, [r7, #8]
 800ff2a:	607a      	str	r2, [r7, #4]
  if (lastdata->pbuf != NULL) {
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	681b      	ldr	r3, [r3, #0]
 800ff30:	2b00      	cmp	r3, #0
 800ff32:	d00d      	beq.n	800ff50 <free_socket_free_elements+0x30>
    if (is_tcp) {
 800ff34:	68fb      	ldr	r3, [r7, #12]
 800ff36:	2b00      	cmp	r3, #0
 800ff38:	d005      	beq.n	800ff46 <free_socket_free_elements+0x26>
      pbuf_free(lastdata->pbuf);
 800ff3a:	687b      	ldr	r3, [r7, #4]
 800ff3c:	681b      	ldr	r3, [r3, #0]
 800ff3e:	4618      	mov	r0, r3
 800ff40:	f002 ff38 	bl	8012db4 <pbuf_free>
 800ff44:	e004      	b.n	800ff50 <free_socket_free_elements+0x30>
    } else {
      netbuf_delete(lastdata->netbuf);
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	681b      	ldr	r3, [r3, #0]
 800ff4a:	4618      	mov	r0, r3
 800ff4c:	f7ff fe78 	bl	800fc40 <netbuf_delete>
    }
  }
  if (conn != NULL) {
 800ff50:	68bb      	ldr	r3, [r7, #8]
 800ff52:	2b00      	cmp	r3, #0
 800ff54:	d002      	beq.n	800ff5c <free_socket_free_elements+0x3c>
    /* netconn_prepare_delete() has already been called, here we only free the conn */
    netconn_delete(conn);
 800ff56:	68b8      	ldr	r0, [r7, #8]
 800ff58:	f7fd fd04 	bl	800d964 <netconn_delete>
  }
}
 800ff5c:	bf00      	nop
 800ff5e:	3710      	adds	r7, #16
 800ff60:	46bd      	mov	sp, r7
 800ff62:	bd80      	pop	{r7, pc}

0800ff64 <free_socket>:
 * @param sock the socket to free
 * @param is_tcp != 0 for TCP sockets, used to free lastdata
 */
static void
free_socket(struct lwip_sock *sock, int is_tcp)
{
 800ff64:	b580      	push	{r7, lr}
 800ff66:	b086      	sub	sp, #24
 800ff68:	af00      	add	r7, sp, #0
 800ff6a:	6078      	str	r0, [r7, #4]
 800ff6c:	6039      	str	r1, [r7, #0]
  struct netconn *conn;
  union lwip_sock_lastdata lastdata;
  SYS_ARCH_DECL_PROTECT(lev);

  /* Protect socket array */
  SYS_ARCH_PROTECT(lev);
 800ff6e:	f00e fc7f 	bl	801e870 <sys_arch_protect>
 800ff72:	6178      	str	r0, [r7, #20]

  freed = free_socket_locked(sock, is_tcp, &conn, &lastdata);
 800ff74:	f107 0308 	add.w	r3, r7, #8
 800ff78:	f107 020c 	add.w	r2, r7, #12
 800ff7c:	6839      	ldr	r1, [r7, #0]
 800ff7e:	6878      	ldr	r0, [r7, #4]
 800ff80:	f7ff ffb2 	bl	800fee8 <free_socket_locked>
 800ff84:	6138      	str	r0, [r7, #16]
  SYS_ARCH_UNPROTECT(lev);
 800ff86:	6978      	ldr	r0, [r7, #20]
 800ff88:	f00e fc80 	bl	801e88c <sys_arch_unprotect>
  /* don't use 'sock' after this line, as another task might have allocated it */

  if (freed) {
 800ff8c:	693b      	ldr	r3, [r7, #16]
 800ff8e:	2b00      	cmp	r3, #0
 800ff90:	d006      	beq.n	800ffa0 <free_socket+0x3c>
    free_socket_free_elements(is_tcp, conn, &lastdata);
 800ff92:	68fb      	ldr	r3, [r7, #12]
 800ff94:	f107 0208 	add.w	r2, r7, #8
 800ff98:	4619      	mov	r1, r3
 800ff9a:	6838      	ldr	r0, [r7, #0]
 800ff9c:	f7ff ffc0 	bl	800ff20 <free_socket_free_elements>
  }
}
 800ffa0:	bf00      	nop
 800ffa2:	3718      	adds	r7, #24
 800ffa4:	46bd      	mov	sp, r7
 800ffa6:	bd80      	pop	{r7, pc}

0800ffa8 <lwip_accept>:
 * Exceptions are documented!
 */

int
lwip_accept(int s, struct sockaddr *addr, socklen_t *addrlen)
{
 800ffa8:	b590      	push	{r4, r7, lr}
 800ffaa:	b099      	sub	sp, #100	; 0x64
 800ffac:	af00      	add	r7, sp, #0
 800ffae:	60f8      	str	r0, [r7, #12]
 800ffb0:	60b9      	str	r1, [r7, #8]
 800ffb2:	607a      	str	r2, [r7, #4]
  struct lwip_sock *sock, *nsock;
  struct netconn *newconn;
  ip_addr_t naddr;
  u16_t port = 0;
 800ffb4:	2300      	movs	r3, #0
 800ffb6:	84fb      	strh	r3, [r7, #38]	; 0x26
  err_t err;
  int recvevent;
  SYS_ARCH_DECL_PROTECT(lev);

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d)...\n", s));
  sock = get_socket(s);
 800ffb8:	68f8      	ldr	r0, [r7, #12]
 800ffba:	f7ff ff11 	bl	800fde0 <get_socket>
 800ffbe:	65b8      	str	r0, [r7, #88]	; 0x58
  if (!sock) {
 800ffc0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ffc2:	2b00      	cmp	r3, #0
 800ffc4:	d102      	bne.n	800ffcc <lwip_accept+0x24>
    return -1;
 800ffc6:	f04f 33ff 	mov.w	r3, #4294967295
 800ffca:	e0f8      	b.n	80101be <lwip_accept+0x216>
  }

  /* wait for a new connection */
  err = netconn_accept(sock->conn, &newconn);
 800ffcc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ffce:	681b      	ldr	r3, [r3, #0]
 800ffd0:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800ffd4:	4611      	mov	r1, r2
 800ffd6:	4618      	mov	r0, r3
 800ffd8:	f7fd fd96 	bl	800db08 <netconn_accept>
 800ffdc:	4603      	mov	r3, r0
 800ffde:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  if (err != ERR_OK) {
 800ffe2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800ffe6:	2b00      	cmp	r3, #0
 800ffe8:	d02c      	beq.n	8010044 <lwip_accept+0x9c>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d): netconn_acept failed, err=%d\n", s, err));
    if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
 800ffea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ffec:	681b      	ldr	r3, [r3, #0]
 800ffee:	781b      	ldrb	r3, [r3, #0]
 800fff0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800fff4:	2b10      	cmp	r3, #16
 800fff6:	d008      	beq.n	801000a <lwip_accept+0x62>
      sock_set_errno(sock, EOPNOTSUPP);
 800fff8:	235f      	movs	r3, #95	; 0x5f
 800fffa:	633b      	str	r3, [r7, #48]	; 0x30
 800fffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fffe:	2b00      	cmp	r3, #0
 8010000:	d01d      	beq.n	801003e <lwip_accept+0x96>
 8010002:	4a71      	ldr	r2, [pc, #452]	; (80101c8 <lwip_accept+0x220>)
 8010004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010006:	6013      	str	r3, [r2, #0]
 8010008:	e019      	b.n	801003e <lwip_accept+0x96>
    } else if (err == ERR_CLSD) {
 801000a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 801000e:	f113 0f0f 	cmn.w	r3, #15
 8010012:	d108      	bne.n	8010026 <lwip_accept+0x7e>
      sock_set_errno(sock, EINVAL);
 8010014:	2316      	movs	r3, #22
 8010016:	637b      	str	r3, [r7, #52]	; 0x34
 8010018:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801001a:	2b00      	cmp	r3, #0
 801001c:	d00f      	beq.n	801003e <lwip_accept+0x96>
 801001e:	4a6a      	ldr	r2, [pc, #424]	; (80101c8 <lwip_accept+0x220>)
 8010020:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010022:	6013      	str	r3, [r2, #0]
 8010024:	e00b      	b.n	801003e <lwip_accept+0x96>
    } else {
      sock_set_errno(sock, err_to_errno(err));
 8010026:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 801002a:	4618      	mov	r0, r3
 801002c:	f7ff fdea 	bl	800fc04 <err_to_errno>
 8010030:	63b8      	str	r0, [r7, #56]	; 0x38
 8010032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010034:	2b00      	cmp	r3, #0
 8010036:	d002      	beq.n	801003e <lwip_accept+0x96>
 8010038:	4a63      	ldr	r2, [pc, #396]	; (80101c8 <lwip_accept+0x220>)
 801003a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801003c:	6013      	str	r3, [r2, #0]
    }
    done_socket(sock);
    return -1;
 801003e:	f04f 33ff 	mov.w	r3, #4294967295
 8010042:	e0bc      	b.n	80101be <lwip_accept+0x216>
  }
  LWIP_ASSERT("newconn != NULL", newconn != NULL);
 8010044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010046:	2b00      	cmp	r3, #0
 8010048:	d106      	bne.n	8010058 <lwip_accept+0xb0>
 801004a:	4b60      	ldr	r3, [pc, #384]	; (80101cc <lwip_accept+0x224>)
 801004c:	f240 228b 	movw	r2, #651	; 0x28b
 8010050:	495f      	ldr	r1, [pc, #380]	; (80101d0 <lwip_accept+0x228>)
 8010052:	4860      	ldr	r0, [pc, #384]	; (80101d4 <lwip_accept+0x22c>)
 8010054:	f00f fad6 	bl	801f604 <iprintf>

  newsock = alloc_socket(newconn, 1);
 8010058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801005a:	2101      	movs	r1, #1
 801005c:	4618      	mov	r0, r3
 801005e:	f7ff fed7 	bl	800fe10 <alloc_socket>
 8010062:	6538      	str	r0, [r7, #80]	; 0x50
  if (newsock == -1) {
 8010064:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010066:	f1b3 3fff 	cmp.w	r3, #4294967295
 801006a:	d10e      	bne.n	801008a <lwip_accept+0xe2>
    netconn_delete(newconn);
 801006c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801006e:	4618      	mov	r0, r3
 8010070:	f7fd fc78 	bl	800d964 <netconn_delete>
    sock_set_errno(sock, ENFILE);
 8010074:	2317      	movs	r3, #23
 8010076:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010078:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801007a:	2b00      	cmp	r3, #0
 801007c:	d002      	beq.n	8010084 <lwip_accept+0xdc>
 801007e:	4a52      	ldr	r2, [pc, #328]	; (80101c8 <lwip_accept+0x220>)
 8010080:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010082:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 8010084:	f04f 33ff 	mov.w	r3, #4294967295
 8010088:	e099      	b.n	80101be <lwip_accept+0x216>
  }
  LWIP_ASSERT("invalid socket index", (newsock >= LWIP_SOCKET_OFFSET) && (newsock < NUM_SOCKETS + LWIP_SOCKET_OFFSET));
 801008a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801008c:	2b00      	cmp	r3, #0
 801008e:	db02      	blt.n	8010096 <lwip_accept+0xee>
 8010090:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010092:	2b03      	cmp	r3, #3
 8010094:	dd06      	ble.n	80100a4 <lwip_accept+0xfc>
 8010096:	4b4d      	ldr	r3, [pc, #308]	; (80101cc <lwip_accept+0x224>)
 8010098:	f44f 7225 	mov.w	r2, #660	; 0x294
 801009c:	494e      	ldr	r1, [pc, #312]	; (80101d8 <lwip_accept+0x230>)
 801009e:	484d      	ldr	r0, [pc, #308]	; (80101d4 <lwip_accept+0x22c>)
 80100a0:	f00f fab0 	bl	801f604 <iprintf>
  nsock = &sockets[newsock - LWIP_SOCKET_OFFSET];
 80100a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80100a6:	011b      	lsls	r3, r3, #4
 80100a8:	4a4c      	ldr	r2, [pc, #304]	; (80101dc <lwip_accept+0x234>)
 80100aa:	4413      	add	r3, r2
 80100ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  /* See event_callback: If data comes in right away after an accept, even
   * though the server task might not have created a new socket yet.
   * In that case, newconn->socket is counted down (newconn->socket--),
   * so nsock->rcvevent is >= 1 here!
   */
  SYS_ARCH_PROTECT(lev);
 80100ae:	f00e fbdf 	bl	801e870 <sys_arch_protect>
 80100b2:	64b8      	str	r0, [r7, #72]	; 0x48
  recvevent = (s16_t)(-1 - newconn->socket);
 80100b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100b6:	699b      	ldr	r3, [r3, #24]
 80100b8:	b21b      	sxth	r3, r3
 80100ba:	43db      	mvns	r3, r3
 80100bc:	b21b      	sxth	r3, r3
 80100be:	65fb      	str	r3, [r7, #92]	; 0x5c
  newconn->socket = newsock;
 80100c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100c2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80100c4:	619a      	str	r2, [r3, #24]
  SYS_ARCH_UNPROTECT(lev);
 80100c6:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80100c8:	f00e fbe0 	bl	801e88c <sys_arch_unprotect>

  if (newconn->callback) {
 80100cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80100d0:	2b00      	cmp	r3, #0
 80100d2:	d012      	beq.n	80100fa <lwip_accept+0x152>
    LOCK_TCPIP_CORE();
 80100d4:	4842      	ldr	r0, [pc, #264]	; (80101e0 <lwip_accept+0x238>)
 80100d6:	f00e fb89 	bl	801e7ec <sys_mutex_lock>
    while (recvevent > 0) {
 80100da:	e008      	b.n	80100ee <lwip_accept+0x146>
      recvevent--;
 80100dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80100de:	3b01      	subs	r3, #1
 80100e0:	65fb      	str	r3, [r7, #92]	; 0x5c
      newconn->callback(newconn, NETCONN_EVT_RCVPLUS, 0);
 80100e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80100e6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80100e8:	2200      	movs	r2, #0
 80100ea:	2100      	movs	r1, #0
 80100ec:	4798      	blx	r3
    while (recvevent > 0) {
 80100ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80100f0:	2b00      	cmp	r3, #0
 80100f2:	dcf3      	bgt.n	80100dc <lwip_accept+0x134>
    }
    UNLOCK_TCPIP_CORE();
 80100f4:	483a      	ldr	r0, [pc, #232]	; (80101e0 <lwip_accept+0x238>)
 80100f6:	f00e fb88 	bl	801e80a <sys_mutex_unlock>
  }

  /* Note that POSIX only requires us to check addr is non-NULL. addrlen must
   * not be NULL if addr is valid.
   */
  if ((addr != NULL) && (addrlen != NULL)) {
 80100fa:	68bb      	ldr	r3, [r7, #8]
 80100fc:	2b00      	cmp	r3, #0
 80100fe:	d055      	beq.n	80101ac <lwip_accept+0x204>
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	2b00      	cmp	r3, #0
 8010104:	d052      	beq.n	80101ac <lwip_accept+0x204>
    union sockaddr_aligned tempaddr;
    /* get the IP address and port of the remote host */
    err = netconn_peer(newconn, &naddr, &port);
 8010106:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010108:	f107 0226 	add.w	r2, r7, #38	; 0x26
 801010c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8010110:	2300      	movs	r3, #0
 8010112:	f7fd fc43 	bl	800d99c <netconn_getaddr>
 8010116:	4603      	mov	r3, r0
 8010118:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    if (err != ERR_OK) {
 801011c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8010120:	2b00      	cmp	r3, #0
 8010122:	d016      	beq.n	8010152 <lwip_accept+0x1aa>
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d): netconn_peer failed, err=%d\n", s, err));
      netconn_delete(newconn);
 8010124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010126:	4618      	mov	r0, r3
 8010128:	f7fd fc1c 	bl	800d964 <netconn_delete>
      free_socket(nsock, 1);
 801012c:	2101      	movs	r1, #1
 801012e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8010130:	f7ff ff18 	bl	800ff64 <free_socket>
      sock_set_errno(sock, err_to_errno(err));
 8010134:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8010138:	4618      	mov	r0, r3
 801013a:	f7ff fd63 	bl	800fc04 <err_to_errno>
 801013e:	6478      	str	r0, [r7, #68]	; 0x44
 8010140:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010142:	2b00      	cmp	r3, #0
 8010144:	d002      	beq.n	801014c <lwip_accept+0x1a4>
 8010146:	4a20      	ldr	r2, [pc, #128]	; (80101c8 <lwip_accept+0x220>)
 8010148:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801014a:	6013      	str	r3, [r2, #0]
      done_socket(sock);
      return -1;
 801014c:	f04f 33ff 	mov.w	r3, #4294967295
 8010150:	e035      	b.n	80101be <lwip_accept+0x216>
    }

    IPADDR_PORT_TO_SOCKADDR(&tempaddr, &naddr, port);
 8010152:	f107 0314 	add.w	r3, r7, #20
 8010156:	2210      	movs	r2, #16
 8010158:	701a      	strb	r2, [r3, #0]
 801015a:	f107 0314 	add.w	r3, r7, #20
 801015e:	2202      	movs	r2, #2
 8010160:	705a      	strb	r2, [r3, #1]
 8010162:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010164:	f107 0414 	add.w	r4, r7, #20
 8010168:	4618      	mov	r0, r3
 801016a:	f001 f93b 	bl	80113e4 <lwip_htons>
 801016e:	4603      	mov	r3, r0
 8010170:	8063      	strh	r3, [r4, #2]
 8010172:	f107 0314 	add.w	r3, r7, #20
 8010176:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010178:	605a      	str	r2, [r3, #4]
 801017a:	f107 0314 	add.w	r3, r7, #20
 801017e:	3308      	adds	r3, #8
 8010180:	2208      	movs	r2, #8
 8010182:	2100      	movs	r1, #0
 8010184:	4618      	mov	r0, r3
 8010186:	f00e fbef 	bl	801e968 <memset>
    if (*addrlen > tempaddr.sa.sa_len) {
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	681b      	ldr	r3, [r3, #0]
 801018e:	7d3a      	ldrb	r2, [r7, #20]
 8010190:	4293      	cmp	r3, r2
 8010192:	d903      	bls.n	801019c <lwip_accept+0x1f4>
      *addrlen = tempaddr.sa.sa_len;
 8010194:	7d3b      	ldrb	r3, [r7, #20]
 8010196:	461a      	mov	r2, r3
 8010198:	687b      	ldr	r3, [r7, #4]
 801019a:	601a      	str	r2, [r3, #0]
    }
    MEMCPY(addr, &tempaddr, *addrlen);
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	681a      	ldr	r2, [r3, #0]
 80101a0:	f107 0314 	add.w	r3, r7, #20
 80101a4:	4619      	mov	r1, r3
 80101a6:	68b8      	ldr	r0, [r7, #8]
 80101a8:	f00e fbb6 	bl	801e918 <memcpy>
    LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F"\n", port));
  } else {
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d) returning new sock=%d", s, newsock));
  }

  sock_set_errno(sock, 0);
 80101ac:	2300      	movs	r3, #0
 80101ae:	643b      	str	r3, [r7, #64]	; 0x40
 80101b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80101b2:	2b00      	cmp	r3, #0
 80101b4:	d002      	beq.n	80101bc <lwip_accept+0x214>
 80101b6:	4a04      	ldr	r2, [pc, #16]	; (80101c8 <lwip_accept+0x220>)
 80101b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80101ba:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  done_socket(nsock);
  return newsock;
 80101bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 80101be:	4618      	mov	r0, r3
 80101c0:	3764      	adds	r7, #100	; 0x64
 80101c2:	46bd      	mov	sp, r7
 80101c4:	bd90      	pop	{r4, r7, pc}
 80101c6:	bf00      	nop
 80101c8:	24007f80 	.word	0x24007f80
 80101cc:	08023de8 	.word	0x08023de8
 80101d0:	08023e64 	.word	0x08023e64
 80101d4:	08023e3c 	.word	0x08023e3c
 80101d8:	08023e74 	.word	0x08023e74
 80101dc:	240044a8 	.word	0x240044a8
 80101e0:	24004e58 	.word	0x24004e58

080101e4 <lwip_bind>:

int
lwip_bind(int s, const struct sockaddr *name, socklen_t namelen)
{
 80101e4:	b580      	push	{r7, lr}
 80101e6:	b08a      	sub	sp, #40	; 0x28
 80101e8:	af00      	add	r7, sp, #0
 80101ea:	60f8      	str	r0, [r7, #12]
 80101ec:	60b9      	str	r1, [r7, #8]
 80101ee:	607a      	str	r2, [r7, #4]
  struct lwip_sock *sock;
  ip_addr_t local_addr;
  u16_t local_port;
  err_t err;

  sock = get_socket(s);
 80101f0:	68f8      	ldr	r0, [r7, #12]
 80101f2:	f7ff fdf5 	bl	800fde0 <get_socket>
 80101f6:	6278      	str	r0, [r7, #36]	; 0x24
  if (!sock) {
 80101f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101fa:	2b00      	cmp	r3, #0
 80101fc:	d102      	bne.n	8010204 <lwip_bind+0x20>
    return -1;
 80101fe:	f04f 33ff 	mov.w	r3, #4294967295
 8010202:	e051      	b.n	80102a8 <lwip_bind+0xc4>
    done_socket(sock);
    return -1;
  }

  /* check size, family and alignment of 'name' */
  LWIP_ERROR("lwip_bind: invalid address", (IS_SOCK_ADDR_LEN_VALID(namelen) &&
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	2b10      	cmp	r3, #16
 8010208:	d108      	bne.n	801021c <lwip_bind+0x38>
 801020a:	68bb      	ldr	r3, [r7, #8]
 801020c:	785b      	ldrb	r3, [r3, #1]
 801020e:	2b02      	cmp	r3, #2
 8010210:	d104      	bne.n	801021c <lwip_bind+0x38>
 8010212:	68bb      	ldr	r3, [r7, #8]
 8010214:	f003 0303 	and.w	r3, r3, #3
 8010218:	2b00      	cmp	r3, #0
 801021a:	d014      	beq.n	8010246 <lwip_bind+0x62>
 801021c:	4b24      	ldr	r3, [pc, #144]	; (80102b0 <lwip_bind+0xcc>)
 801021e:	f240 22e2 	movw	r2, #738	; 0x2e2
 8010222:	4924      	ldr	r1, [pc, #144]	; (80102b4 <lwip_bind+0xd0>)
 8010224:	4824      	ldr	r0, [pc, #144]	; (80102b8 <lwip_bind+0xd4>)
 8010226:	f00f f9ed 	bl	801f604 <iprintf>
 801022a:	f06f 000f 	mvn.w	r0, #15
 801022e:	f7ff fce9 	bl	800fc04 <err_to_errno>
 8010232:	6178      	str	r0, [r7, #20]
 8010234:	697b      	ldr	r3, [r7, #20]
 8010236:	2b00      	cmp	r3, #0
 8010238:	d002      	beq.n	8010240 <lwip_bind+0x5c>
 801023a:	4a20      	ldr	r2, [pc, #128]	; (80102bc <lwip_bind+0xd8>)
 801023c:	697b      	ldr	r3, [r7, #20]
 801023e:	6013      	str	r3, [r2, #0]
 8010240:	f04f 33ff 	mov.w	r3, #4294967295
 8010244:	e030      	b.n	80102a8 <lwip_bind+0xc4>
             IS_SOCK_ADDR_TYPE_VALID(name) && IS_SOCK_ADDR_ALIGNED(name)),
             sock_set_errno(sock, err_to_errno(ERR_ARG)); done_socket(sock); return -1;);
  LWIP_UNUSED_ARG(namelen);

  SOCKADDR_TO_IPADDR_PORT(name, &local_addr, local_port);
 8010246:	68bb      	ldr	r3, [r7, #8]
 8010248:	685b      	ldr	r3, [r3, #4]
 801024a:	613b      	str	r3, [r7, #16]
 801024c:	68bb      	ldr	r3, [r7, #8]
 801024e:	885b      	ldrh	r3, [r3, #2]
 8010250:	4618      	mov	r0, r3
 8010252:	f001 f8c7 	bl	80113e4 <lwip_htons>
 8010256:	4603      	mov	r3, r0
 8010258:	847b      	strh	r3, [r7, #34]	; 0x22
    unmap_ipv4_mapped_ipv6(ip_2_ip4(&local_addr), ip_2_ip6(&local_addr));
    IP_SET_TYPE_VAL(local_addr, IPADDR_TYPE_V4);
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  err = netconn_bind(sock->conn, &local_addr, local_port);
 801025a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801025c:	681b      	ldr	r3, [r3, #0]
 801025e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8010260:	f107 0110 	add.w	r1, r7, #16
 8010264:	4618      	mov	r0, r3
 8010266:	f7fd fbeb 	bl	800da40 <netconn_bind>
 801026a:	4603      	mov	r3, r0
 801026c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

  if (err != ERR_OK) {
 8010270:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 8010274:	2b00      	cmp	r3, #0
 8010276:	d00e      	beq.n	8010296 <lwip_bind+0xb2>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_bind(%d) failed, err=%d\n", s, err));
    sock_set_errno(sock, err_to_errno(err));
 8010278:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 801027c:	4618      	mov	r0, r3
 801027e:	f7ff fcc1 	bl	800fc04 <err_to_errno>
 8010282:	61b8      	str	r0, [r7, #24]
 8010284:	69bb      	ldr	r3, [r7, #24]
 8010286:	2b00      	cmp	r3, #0
 8010288:	d002      	beq.n	8010290 <lwip_bind+0xac>
 801028a:	4a0c      	ldr	r2, [pc, #48]	; (80102bc <lwip_bind+0xd8>)
 801028c:	69bb      	ldr	r3, [r7, #24]
 801028e:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 8010290:	f04f 33ff 	mov.w	r3, #4294967295
 8010294:	e008      	b.n	80102a8 <lwip_bind+0xc4>
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_bind(%d) succeeded\n", s));
  sock_set_errno(sock, 0);
 8010296:	2300      	movs	r3, #0
 8010298:	61fb      	str	r3, [r7, #28]
 801029a:	69fb      	ldr	r3, [r7, #28]
 801029c:	2b00      	cmp	r3, #0
 801029e:	d002      	beq.n	80102a6 <lwip_bind+0xc2>
 80102a0:	4a06      	ldr	r2, [pc, #24]	; (80102bc <lwip_bind+0xd8>)
 80102a2:	69fb      	ldr	r3, [r7, #28]
 80102a4:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return 0;
 80102a6:	2300      	movs	r3, #0
}
 80102a8:	4618      	mov	r0, r3
 80102aa:	3728      	adds	r7, #40	; 0x28
 80102ac:	46bd      	mov	sp, r7
 80102ae:	bd80      	pop	{r7, pc}
 80102b0:	08023de8 	.word	0x08023de8
 80102b4:	08023e8c 	.word	0x08023e8c
 80102b8:	08023e3c 	.word	0x08023e3c
 80102bc:	24007f80 	.word	0x24007f80

080102c0 <lwip_close>:

int
lwip_close(int s)
{
 80102c0:	b580      	push	{r7, lr}
 80102c2:	b086      	sub	sp, #24
 80102c4:	af00      	add	r7, sp, #0
 80102c6:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock;
  int is_tcp = 0;
 80102c8:	2300      	movs	r3, #0
 80102ca:	617b      	str	r3, [r7, #20]
  err_t err;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_close(%d)\n", s));

  sock = get_socket(s);
 80102cc:	6878      	ldr	r0, [r7, #4]
 80102ce:	f7ff fd87 	bl	800fde0 <get_socket>
 80102d2:	6138      	str	r0, [r7, #16]
  if (!sock) {
 80102d4:	693b      	ldr	r3, [r7, #16]
 80102d6:	2b00      	cmp	r3, #0
 80102d8:	d102      	bne.n	80102e0 <lwip_close+0x20>
    return -1;
 80102da:	f04f 33ff 	mov.w	r3, #4294967295
 80102de:	e039      	b.n	8010354 <lwip_close+0x94>
  }

  if (sock->conn != NULL) {
 80102e0:	693b      	ldr	r3, [r7, #16]
 80102e2:	681b      	ldr	r3, [r3, #0]
 80102e4:	2b00      	cmp	r3, #0
 80102e6:	d00b      	beq.n	8010300 <lwip_close+0x40>
    is_tcp = NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP;
 80102e8:	693b      	ldr	r3, [r7, #16]
 80102ea:	681b      	ldr	r3, [r3, #0]
 80102ec:	781b      	ldrb	r3, [r3, #0]
 80102ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80102f2:	2b10      	cmp	r3, #16
 80102f4:	bf0c      	ite	eq
 80102f6:	2301      	moveq	r3, #1
 80102f8:	2300      	movne	r3, #0
 80102fa:	b2db      	uxtb	r3, r3
 80102fc:	617b      	str	r3, [r7, #20]
 80102fe:	e00a      	b.n	8010316 <lwip_close+0x56>
  } else {
    LWIP_ASSERT("sock->lastdata == NULL", sock->lastdata.pbuf == NULL);
 8010300:	693b      	ldr	r3, [r7, #16]
 8010302:	685b      	ldr	r3, [r3, #4]
 8010304:	2b00      	cmp	r3, #0
 8010306:	d006      	beq.n	8010316 <lwip_close+0x56>
 8010308:	4b14      	ldr	r3, [pc, #80]	; (801035c <lwip_close+0x9c>)
 801030a:	f44f 7245 	mov.w	r2, #788	; 0x314
 801030e:	4914      	ldr	r1, [pc, #80]	; (8010360 <lwip_close+0xa0>)
 8010310:	4814      	ldr	r0, [pc, #80]	; (8010364 <lwip_close+0xa4>)
 8010312:	f00f f977 	bl	801f604 <iprintf>
#if LWIP_IPV6_MLD
  /* drop all possibly joined MLD6 memberships */
  lwip_socket_drop_registered_mld6_memberships(s);
#endif /* LWIP_IPV6_MLD */

  err = netconn_prepare_delete(sock->conn);
 8010316:	693b      	ldr	r3, [r7, #16]
 8010318:	681b      	ldr	r3, [r3, #0]
 801031a:	4618      	mov	r0, r3
 801031c:	f7fd fafe 	bl	800d91c <netconn_prepare_delete>
 8010320:	4603      	mov	r3, r0
 8010322:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8010324:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010328:	2b00      	cmp	r3, #0
 801032a:	d00e      	beq.n	801034a <lwip_close+0x8a>
    sock_set_errno(sock, err_to_errno(err));
 801032c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010330:	4618      	mov	r0, r3
 8010332:	f7ff fc67 	bl	800fc04 <err_to_errno>
 8010336:	60b8      	str	r0, [r7, #8]
 8010338:	68bb      	ldr	r3, [r7, #8]
 801033a:	2b00      	cmp	r3, #0
 801033c:	d002      	beq.n	8010344 <lwip_close+0x84>
 801033e:	4a0a      	ldr	r2, [pc, #40]	; (8010368 <lwip_close+0xa8>)
 8010340:	68bb      	ldr	r3, [r7, #8]
 8010342:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 8010344:	f04f 33ff 	mov.w	r3, #4294967295
 8010348:	e004      	b.n	8010354 <lwip_close+0x94>
  }

  free_socket(sock, is_tcp);
 801034a:	6979      	ldr	r1, [r7, #20]
 801034c:	6938      	ldr	r0, [r7, #16]
 801034e:	f7ff fe09 	bl	800ff64 <free_socket>
  set_errno(0);
  return 0;
 8010352:	2300      	movs	r3, #0
}
 8010354:	4618      	mov	r0, r3
 8010356:	3718      	adds	r7, #24
 8010358:	46bd      	mov	sp, r7
 801035a:	bd80      	pop	{r7, pc}
 801035c:	08023de8 	.word	0x08023de8
 8010360:	08023ea8 	.word	0x08023ea8
 8010364:	08023e3c 	.word	0x08023e3c
 8010368:	24007f80 	.word	0x24007f80

0801036c <lwip_listen>:
 * @param backlog (ATTENTION: needs TCP_LISTEN_BACKLOG=1)
 * @return 0 on success, non-zero on failure
 */
int
lwip_listen(int s, int backlog)
{
 801036c:	b580      	push	{r7, lr}
 801036e:	b088      	sub	sp, #32
 8010370:	af00      	add	r7, sp, #0
 8010372:	6078      	str	r0, [r7, #4]
 8010374:	6039      	str	r1, [r7, #0]
  struct lwip_sock *sock;
  err_t err;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_listen(%d, backlog=%d)\n", s, backlog));

  sock = get_socket(s);
 8010376:	6878      	ldr	r0, [r7, #4]
 8010378:	f7ff fd32 	bl	800fde0 <get_socket>
 801037c:	61f8      	str	r0, [r7, #28]
  if (!sock) {
 801037e:	69fb      	ldr	r3, [r7, #28]
 8010380:	2b00      	cmp	r3, #0
 8010382:	d102      	bne.n	801038a <lwip_listen+0x1e>
    return -1;
 8010384:	f04f 33ff 	mov.w	r3, #4294967295
 8010388:	e03e      	b.n	8010408 <lwip_listen+0x9c>
  }

  /* limit the "backlog" parameter to fit in an u8_t */
  backlog = LWIP_MIN(LWIP_MAX(backlog, 0), 0xff);
 801038a:	683b      	ldr	r3, [r7, #0]
 801038c:	2bfe      	cmp	r3, #254	; 0xfe
 801038e:	dc03      	bgt.n	8010398 <lwip_listen+0x2c>
 8010390:	683b      	ldr	r3, [r7, #0]
 8010392:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8010396:	e000      	b.n	801039a <lwip_listen+0x2e>
 8010398:	23ff      	movs	r3, #255	; 0xff
 801039a:	603b      	str	r3, [r7, #0]

  err = netconn_listen_with_backlog(sock->conn, (u8_t)backlog);
 801039c:	69fb      	ldr	r3, [r7, #28]
 801039e:	681b      	ldr	r3, [r3, #0]
 80103a0:	683a      	ldr	r2, [r7, #0]
 80103a2:	b2d2      	uxtb	r2, r2
 80103a4:	4611      	mov	r1, r2
 80103a6:	4618      	mov	r0, r3
 80103a8:	f7fd fb82 	bl	800dab0 <netconn_listen_with_backlog>
 80103ac:	4603      	mov	r3, r0
 80103ae:	76fb      	strb	r3, [r7, #27]

  if (err != ERR_OK) {
 80103b0:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80103b4:	2b00      	cmp	r3, #0
 80103b6:	d01e      	beq.n	80103f6 <lwip_listen+0x8a>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_listen(%d) failed, err=%d\n", s, err));
    if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
 80103b8:	69fb      	ldr	r3, [r7, #28]
 80103ba:	681b      	ldr	r3, [r3, #0]
 80103bc:	781b      	ldrb	r3, [r3, #0]
 80103be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80103c2:	2b10      	cmp	r3, #16
 80103c4:	d008      	beq.n	80103d8 <lwip_listen+0x6c>
      sock_set_errno(sock, EOPNOTSUPP);
 80103c6:	235f      	movs	r3, #95	; 0x5f
 80103c8:	60fb      	str	r3, [r7, #12]
 80103ca:	68fb      	ldr	r3, [r7, #12]
 80103cc:	2b00      	cmp	r3, #0
 80103ce:	d00f      	beq.n	80103f0 <lwip_listen+0x84>
 80103d0:	4a0f      	ldr	r2, [pc, #60]	; (8010410 <lwip_listen+0xa4>)
 80103d2:	68fb      	ldr	r3, [r7, #12]
 80103d4:	6013      	str	r3, [r2, #0]
 80103d6:	e00b      	b.n	80103f0 <lwip_listen+0x84>
    } else {
      sock_set_errno(sock, err_to_errno(err));
 80103d8:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80103dc:	4618      	mov	r0, r3
 80103de:	f7ff fc11 	bl	800fc04 <err_to_errno>
 80103e2:	6138      	str	r0, [r7, #16]
 80103e4:	693b      	ldr	r3, [r7, #16]
 80103e6:	2b00      	cmp	r3, #0
 80103e8:	d002      	beq.n	80103f0 <lwip_listen+0x84>
 80103ea:	4a09      	ldr	r2, [pc, #36]	; (8010410 <lwip_listen+0xa4>)
 80103ec:	693b      	ldr	r3, [r7, #16]
 80103ee:	6013      	str	r3, [r2, #0]
    }
    done_socket(sock);
    return -1;
 80103f0:	f04f 33ff 	mov.w	r3, #4294967295
 80103f4:	e008      	b.n	8010408 <lwip_listen+0x9c>
  }

  sock_set_errno(sock, 0);
 80103f6:	2300      	movs	r3, #0
 80103f8:	617b      	str	r3, [r7, #20]
 80103fa:	697b      	ldr	r3, [r7, #20]
 80103fc:	2b00      	cmp	r3, #0
 80103fe:	d002      	beq.n	8010406 <lwip_listen+0x9a>
 8010400:	4a03      	ldr	r2, [pc, #12]	; (8010410 <lwip_listen+0xa4>)
 8010402:	697b      	ldr	r3, [r7, #20]
 8010404:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return 0;
 8010406:	2300      	movs	r3, #0
}
 8010408:	4618      	mov	r0, r3
 801040a:	3720      	adds	r7, #32
 801040c:	46bd      	mov	sp, r7
 801040e:	bd80      	pop	{r7, pc}
 8010410:	24007f80 	.word	0x24007f80

08010414 <lwip_recv_tcp>:
 * until "len" bytes are received or we're otherwise done.
 * Keeps sock->lastdata for peeking or partly copying.
 */
static ssize_t
lwip_recv_tcp(struct lwip_sock *sock, void *mem, size_t len, int flags)
{
 8010414:	b580      	push	{r7, lr}
 8010416:	b08c      	sub	sp, #48	; 0x30
 8010418:	af00      	add	r7, sp, #0
 801041a:	60f8      	str	r0, [r7, #12]
 801041c:	60b9      	str	r1, [r7, #8]
 801041e:	607a      	str	r2, [r7, #4]
 8010420:	603b      	str	r3, [r7, #0]
  u8_t apiflags = NETCONN_NOAUTORCVD;
 8010422:	2308      	movs	r3, #8
 8010424:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  ssize_t recvd = 0;
 8010428:	2300      	movs	r3, #0
 801042a:	62bb      	str	r3, [r7, #40]	; 0x28
  ssize_t recv_left = (len <= SSIZE_MAX) ? (ssize_t)len : SSIZE_MAX;
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	2b00      	cmp	r3, #0
 8010430:	db01      	blt.n	8010436 <lwip_recv_tcp+0x22>
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	e001      	b.n	801043a <lwip_recv_tcp+0x26>
 8010436:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801043a:	627b      	str	r3, [r7, #36]	; 0x24

  LWIP_ASSERT("no socket given", sock != NULL);
 801043c:	68fb      	ldr	r3, [r7, #12]
 801043e:	2b00      	cmp	r3, #0
 8010440:	d106      	bne.n	8010450 <lwip_recv_tcp+0x3c>
 8010442:	4b74      	ldr	r3, [pc, #464]	; (8010614 <lwip_recv_tcp+0x200>)
 8010444:	f240 329e 	movw	r2, #926	; 0x39e
 8010448:	4973      	ldr	r1, [pc, #460]	; (8010618 <lwip_recv_tcp+0x204>)
 801044a:	4874      	ldr	r0, [pc, #464]	; (801061c <lwip_recv_tcp+0x208>)
 801044c:	f00f f8da 	bl	801f604 <iprintf>
  LWIP_ASSERT("this should be checked internally", NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP);
 8010450:	68fb      	ldr	r3, [r7, #12]
 8010452:	681b      	ldr	r3, [r3, #0]
 8010454:	781b      	ldrb	r3, [r3, #0]
 8010456:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801045a:	2b10      	cmp	r3, #16
 801045c:	d006      	beq.n	801046c <lwip_recv_tcp+0x58>
 801045e:	4b6d      	ldr	r3, [pc, #436]	; (8010614 <lwip_recv_tcp+0x200>)
 8010460:	f240 329f 	movw	r2, #927	; 0x39f
 8010464:	496e      	ldr	r1, [pc, #440]	; (8010620 <lwip_recv_tcp+0x20c>)
 8010466:	486d      	ldr	r0, [pc, #436]	; (801061c <lwip_recv_tcp+0x208>)
 8010468:	f00f f8cc 	bl	801f604 <iprintf>

  if (flags & MSG_DONTWAIT) {
 801046c:	683b      	ldr	r3, [r7, #0]
 801046e:	f003 0308 	and.w	r3, r3, #8
 8010472:	2b00      	cmp	r3, #0
 8010474:	d005      	beq.n	8010482 <lwip_recv_tcp+0x6e>
    apiflags |= NETCONN_DONTBLOCK;
 8010476:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801047a:	f043 0304 	orr.w	r3, r3, #4
 801047e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    err_t err;
    u16_t copylen;

    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: top while sock->lastdata=%p\n", (void *)sock->lastdata.pbuf));
    /* Check if there is data left from the last recv operation. */
    if (sock->lastdata.pbuf) {
 8010482:	68fb      	ldr	r3, [r7, #12]
 8010484:	685b      	ldr	r3, [r3, #4]
 8010486:	2b00      	cmp	r3, #0
 8010488:	d003      	beq.n	8010492 <lwip_recv_tcp+0x7e>
      p = sock->lastdata.pbuf;
 801048a:	68fb      	ldr	r3, [r7, #12]
 801048c:	685b      	ldr	r3, [r3, #4]
 801048e:	617b      	str	r3, [r7, #20]
 8010490:	e036      	b.n	8010500 <lwip_recv_tcp+0xec>
    } else {
      /* No data was left from the previous operation, so we try to get
         some from the network. */
      err = netconn_recv_tcp_pbuf_flags(sock->conn, &p, apiflags);
 8010492:	68fb      	ldr	r3, [r7, #12]
 8010494:	681b      	ldr	r3, [r3, #0]
 8010496:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 801049a:	f107 0114 	add.w	r1, r7, #20
 801049e:	4618      	mov	r0, r3
 80104a0:	f7fd fd68 	bl	800df74 <netconn_recv_tcp_pbuf_flags>
 80104a4:	4603      	mov	r3, r0
 80104a6:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: netconn_recv err=%d, pbuf=%p\n",
                                  err, (void *)p));

      if (err != ERR_OK) {
 80104aa:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 80104ae:	2b00      	cmp	r3, #0
 80104b0:	d019      	beq.n	80104e6 <lwip_recv_tcp+0xd2>
        if (recvd > 0) {
 80104b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104b4:	2b00      	cmp	r3, #0
 80104b6:	f300 808d 	bgt.w	80105d4 <lwip_recv_tcp+0x1c0>
          goto lwip_recv_tcp_done;
        }
        /* We should really do some error checking here. */
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: p == NULL, error is \"%s\"!\n",
                                    lwip_strerr(err)));
        sock_set_errno(sock, err_to_errno(err));
 80104ba:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 80104be:	4618      	mov	r0, r3
 80104c0:	f7ff fba0 	bl	800fc04 <err_to_errno>
 80104c4:	61f8      	str	r0, [r7, #28]
 80104c6:	69fb      	ldr	r3, [r7, #28]
 80104c8:	2b00      	cmp	r3, #0
 80104ca:	d002      	beq.n	80104d2 <lwip_recv_tcp+0xbe>
 80104cc:	4a55      	ldr	r2, [pc, #340]	; (8010624 <lwip_recv_tcp+0x210>)
 80104ce:	69fb      	ldr	r3, [r7, #28]
 80104d0:	6013      	str	r3, [r2, #0]
        if (err == ERR_CLSD) {
 80104d2:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 80104d6:	f113 0f0f 	cmn.w	r3, #15
 80104da:	d101      	bne.n	80104e0 <lwip_recv_tcp+0xcc>
          return 0;
 80104dc:	2300      	movs	r3, #0
 80104de:	e094      	b.n	801060a <lwip_recv_tcp+0x1f6>
        } else {
          return -1;
 80104e0:	f04f 33ff 	mov.w	r3, #4294967295
 80104e4:	e091      	b.n	801060a <lwip_recv_tcp+0x1f6>
        }
      }
      LWIP_ASSERT("p != NULL", p != NULL);
 80104e6:	697b      	ldr	r3, [r7, #20]
 80104e8:	2b00      	cmp	r3, #0
 80104ea:	d106      	bne.n	80104fa <lwip_recv_tcp+0xe6>
 80104ec:	4b49      	ldr	r3, [pc, #292]	; (8010614 <lwip_recv_tcp+0x200>)
 80104ee:	f240 32c5 	movw	r2, #965	; 0x3c5
 80104f2:	494d      	ldr	r1, [pc, #308]	; (8010628 <lwip_recv_tcp+0x214>)
 80104f4:	4849      	ldr	r0, [pc, #292]	; (801061c <lwip_recv_tcp+0x208>)
 80104f6:	f00f f885 	bl	801f604 <iprintf>
      sock->lastdata.pbuf = p;
 80104fa:	697a      	ldr	r2, [r7, #20]
 80104fc:	68fb      	ldr	r3, [r7, #12]
 80104fe:	605a      	str	r2, [r3, #4]
    }

    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: buflen=%"U16_F" recv_left=%d off=%d\n",
                                p->tot_len, (int)recv_left, (int)recvd));

    if (recv_left > p->tot_len) {
 8010500:	697b      	ldr	r3, [r7, #20]
 8010502:	891b      	ldrh	r3, [r3, #8]
 8010504:	461a      	mov	r2, r3
 8010506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010508:	4293      	cmp	r3, r2
 801050a:	dd03      	ble.n	8010514 <lwip_recv_tcp+0x100>
      copylen = p->tot_len;
 801050c:	697b      	ldr	r3, [r7, #20]
 801050e:	891b      	ldrh	r3, [r3, #8]
 8010510:	847b      	strh	r3, [r7, #34]	; 0x22
 8010512:	e001      	b.n	8010518 <lwip_recv_tcp+0x104>
    } else {
      copylen = (u16_t)recv_left;
 8010514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010516:	847b      	strh	r3, [r7, #34]	; 0x22
    }
    if (recvd + copylen < recvd) {
 8010518:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801051a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801051c:	4413      	add	r3, r2
 801051e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010520:	429a      	cmp	r2, r3
 8010522:	dd03      	ble.n	801052c <lwip_recv_tcp+0x118>
      /* overflow */
      copylen = (u16_t)(SSIZE_MAX - recvd);
 8010524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010526:	b29b      	uxth	r3, r3
 8010528:	43db      	mvns	r3, r3
 801052a:	847b      	strh	r3, [r7, #34]	; 0x22
    }

    /* copy the contents of the received buffer into
    the supplied memory pointer mem */
    pbuf_copy_partial(p, (u8_t *)mem + recvd, copylen, 0);
 801052c:	6978      	ldr	r0, [r7, #20]
 801052e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010530:	68ba      	ldr	r2, [r7, #8]
 8010532:	18d1      	adds	r1, r2, r3
 8010534:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8010536:	2300      	movs	r3, #0
 8010538:	f002 fe42 	bl	80131c0 <pbuf_copy_partial>

    recvd += copylen;
 801053c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801053e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010540:	4413      	add	r3, r2
 8010542:	62bb      	str	r3, [r7, #40]	; 0x28

    /* TCP combines multiple pbufs for one recv */
    LWIP_ASSERT("invalid copylen, len would underflow", recv_left >= copylen);
 8010544:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010546:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010548:	429a      	cmp	r2, r3
 801054a:	da06      	bge.n	801055a <lwip_recv_tcp+0x146>
 801054c:	4b31      	ldr	r3, [pc, #196]	; (8010614 <lwip_recv_tcp+0x200>)
 801054e:	f240 32dd 	movw	r2, #989	; 0x3dd
 8010552:	4936      	ldr	r1, [pc, #216]	; (801062c <lwip_recv_tcp+0x218>)
 8010554:	4831      	ldr	r0, [pc, #196]	; (801061c <lwip_recv_tcp+0x208>)
 8010556:	f00f f855 	bl	801f604 <iprintf>
    recv_left -= copylen;
 801055a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801055c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801055e:	1ad3      	subs	r3, r2, r3
 8010560:	627b      	str	r3, [r7, #36]	; 0x24

    /* Unless we peek the incoming message... */
    if ((flags & MSG_PEEK) == 0) {
 8010562:	683b      	ldr	r3, [r7, #0]
 8010564:	f003 0301 	and.w	r3, r3, #1
 8010568:	2b00      	cmp	r3, #0
 801056a:	d123      	bne.n	80105b4 <lwip_recv_tcp+0x1a0>
      /* ... check if there is data left in the pbuf */
      LWIP_ASSERT("invalid copylen", p->tot_len >= copylen);
 801056c:	697b      	ldr	r3, [r7, #20]
 801056e:	891b      	ldrh	r3, [r3, #8]
 8010570:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8010572:	429a      	cmp	r2, r3
 8010574:	d906      	bls.n	8010584 <lwip_recv_tcp+0x170>
 8010576:	4b27      	ldr	r3, [pc, #156]	; (8010614 <lwip_recv_tcp+0x200>)
 8010578:	f240 32e3 	movw	r2, #995	; 0x3e3
 801057c:	492c      	ldr	r1, [pc, #176]	; (8010630 <lwip_recv_tcp+0x21c>)
 801057e:	4827      	ldr	r0, [pc, #156]	; (801061c <lwip_recv_tcp+0x208>)
 8010580:	f00f f840 	bl	801f604 <iprintf>
      if (p->tot_len - copylen > 0) {
 8010584:	697b      	ldr	r3, [r7, #20]
 8010586:	891b      	ldrh	r3, [r3, #8]
 8010588:	461a      	mov	r2, r3
 801058a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801058c:	1ad3      	subs	r3, r2, r3
 801058e:	2b00      	cmp	r3, #0
 8010590:	dd09      	ble.n	80105a6 <lwip_recv_tcp+0x192>
        /* If so, it should be saved in the sock structure for the next recv call.
           We store the pbuf but hide/free the consumed data: */
        sock->lastdata.pbuf = pbuf_free_header(p, copylen);
 8010592:	697b      	ldr	r3, [r7, #20]
 8010594:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8010596:	4611      	mov	r1, r2
 8010598:	4618      	mov	r0, r3
 801059a:	f002 fbd8 	bl	8012d4e <pbuf_free_header>
 801059e:	4602      	mov	r2, r0
 80105a0:	68fb      	ldr	r3, [r7, #12]
 80105a2:	605a      	str	r2, [r3, #4]
 80105a4:	e006      	b.n	80105b4 <lwip_recv_tcp+0x1a0>
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: lastdata now pbuf=%p\n", (void *)sock->lastdata.pbuf));
      } else {
        sock->lastdata.pbuf = NULL;
 80105a6:	68fb      	ldr	r3, [r7, #12]
 80105a8:	2200      	movs	r2, #0
 80105aa:	605a      	str	r2, [r3, #4]
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: deleting pbuf=%p\n", (void *)p));
        pbuf_free(p);
 80105ac:	697b      	ldr	r3, [r7, #20]
 80105ae:	4618      	mov	r0, r3
 80105b0:	f002 fc00 	bl	8012db4 <pbuf_free>
      }
    }
    /* once we have some data to return, only add more if we don't need to wait */
    apiflags |= NETCONN_DONTBLOCK | NETCONN_NOFIN;
 80105b4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80105b8:	f043 0314 	orr.w	r3, r3, #20
 80105bc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    /* @todo: do we need to support peeking more than one pbuf? */
  } while ((recv_left > 0) && !(flags & MSG_PEEK));
 80105c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105c2:	2b00      	cmp	r3, #0
 80105c4:	dd08      	ble.n	80105d8 <lwip_recv_tcp+0x1c4>
 80105c6:	683b      	ldr	r3, [r7, #0]
 80105c8:	f003 0301 	and.w	r3, r3, #1
 80105cc:	2b00      	cmp	r3, #0
 80105ce:	f43f af58 	beq.w	8010482 <lwip_recv_tcp+0x6e>
lwip_recv_tcp_done:
 80105d2:	e001      	b.n	80105d8 <lwip_recv_tcp+0x1c4>
          goto lwip_recv_tcp_done;
 80105d4:	bf00      	nop
 80105d6:	e000      	b.n	80105da <lwip_recv_tcp+0x1c6>
lwip_recv_tcp_done:
 80105d8:	bf00      	nop
  if ((recvd > 0) && !(flags & MSG_PEEK)) {
 80105da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105dc:	2b00      	cmp	r3, #0
 80105de:	dd0b      	ble.n	80105f8 <lwip_recv_tcp+0x1e4>
 80105e0:	683b      	ldr	r3, [r7, #0]
 80105e2:	f003 0301 	and.w	r3, r3, #1
 80105e6:	2b00      	cmp	r3, #0
 80105e8:	d106      	bne.n	80105f8 <lwip_recv_tcp+0x1e4>
    /* ensure window update after copying all data */
    netconn_tcp_recvd(sock->conn, (size_t)recvd);
 80105ea:	68fb      	ldr	r3, [r7, #12]
 80105ec:	681b      	ldr	r3, [r3, #0]
 80105ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80105f0:	4611      	mov	r1, r2
 80105f2:	4618      	mov	r0, r3
 80105f4:	f7fd fc0c 	bl	800de10 <netconn_tcp_recvd>
  }
  sock_set_errno(sock, 0);
 80105f8:	2300      	movs	r3, #0
 80105fa:	61bb      	str	r3, [r7, #24]
 80105fc:	69bb      	ldr	r3, [r7, #24]
 80105fe:	2b00      	cmp	r3, #0
 8010600:	d002      	beq.n	8010608 <lwip_recv_tcp+0x1f4>
 8010602:	4a08      	ldr	r2, [pc, #32]	; (8010624 <lwip_recv_tcp+0x210>)
 8010604:	69bb      	ldr	r3, [r7, #24]
 8010606:	6013      	str	r3, [r2, #0]
  return recvd;
 8010608:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 801060a:	4618      	mov	r0, r3
 801060c:	3730      	adds	r7, #48	; 0x30
 801060e:	46bd      	mov	sp, r7
 8010610:	bd80      	pop	{r7, pc}
 8010612:	bf00      	nop
 8010614:	08023de8 	.word	0x08023de8
 8010618:	08023ee0 	.word	0x08023ee0
 801061c:	08023e3c 	.word	0x08023e3c
 8010620:	08023ef0 	.word	0x08023ef0
 8010624:	24007f80 	.word	0x24007f80
 8010628:	08023f14 	.word	0x08023f14
 801062c:	08023f20 	.word	0x08023f20
 8010630:	08023f48 	.word	0x08023f48

08010634 <lwip_sock_make_addr>:

/* Convert a netbuf's address data to struct sockaddr */
static int
lwip_sock_make_addr(struct netconn *conn, ip_addr_t *fromaddr, u16_t port,
                    struct sockaddr *from, socklen_t *fromlen)
{
 8010634:	b590      	push	{r4, r7, lr}
 8010636:	b08b      	sub	sp, #44	; 0x2c
 8010638:	af00      	add	r7, sp, #0
 801063a:	60f8      	str	r0, [r7, #12]
 801063c:	60b9      	str	r1, [r7, #8]
 801063e:	603b      	str	r3, [r7, #0]
 8010640:	4613      	mov	r3, r2
 8010642:	80fb      	strh	r3, [r7, #6]
  int truncated = 0;
 8010644:	2300      	movs	r3, #0
 8010646:	627b      	str	r3, [r7, #36]	; 0x24
  union sockaddr_aligned saddr;

  LWIP_UNUSED_ARG(conn);

  LWIP_ASSERT("fromaddr != NULL", fromaddr != NULL);
 8010648:	68bb      	ldr	r3, [r7, #8]
 801064a:	2b00      	cmp	r3, #0
 801064c:	d106      	bne.n	801065c <lwip_sock_make_addr+0x28>
 801064e:	4b2b      	ldr	r3, [pc, #172]	; (80106fc <lwip_sock_make_addr+0xc8>)
 8010650:	f240 4207 	movw	r2, #1031	; 0x407
 8010654:	492a      	ldr	r1, [pc, #168]	; (8010700 <lwip_sock_make_addr+0xcc>)
 8010656:	482b      	ldr	r0, [pc, #172]	; (8010704 <lwip_sock_make_addr+0xd0>)
 8010658:	f00e ffd4 	bl	801f604 <iprintf>
  LWIP_ASSERT("from != NULL", from != NULL);
 801065c:	683b      	ldr	r3, [r7, #0]
 801065e:	2b00      	cmp	r3, #0
 8010660:	d106      	bne.n	8010670 <lwip_sock_make_addr+0x3c>
 8010662:	4b26      	ldr	r3, [pc, #152]	; (80106fc <lwip_sock_make_addr+0xc8>)
 8010664:	f44f 6281 	mov.w	r2, #1032	; 0x408
 8010668:	4927      	ldr	r1, [pc, #156]	; (8010708 <lwip_sock_make_addr+0xd4>)
 801066a:	4826      	ldr	r0, [pc, #152]	; (8010704 <lwip_sock_make_addr+0xd0>)
 801066c:	f00e ffca 	bl	801f604 <iprintf>
  LWIP_ASSERT("fromlen != NULL", fromlen != NULL);
 8010670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010672:	2b00      	cmp	r3, #0
 8010674:	d106      	bne.n	8010684 <lwip_sock_make_addr+0x50>
 8010676:	4b21      	ldr	r3, [pc, #132]	; (80106fc <lwip_sock_make_addr+0xc8>)
 8010678:	f240 4209 	movw	r2, #1033	; 0x409
 801067c:	4923      	ldr	r1, [pc, #140]	; (801070c <lwip_sock_make_addr+0xd8>)
 801067e:	4821      	ldr	r0, [pc, #132]	; (8010704 <lwip_sock_make_addr+0xd0>)
 8010680:	f00e ffc0 	bl	801f604 <iprintf>
    ip4_2_ipv4_mapped_ipv6(ip_2_ip6(fromaddr), ip_2_ip4(fromaddr));
    IP_SET_TYPE(fromaddr, IPADDR_TYPE_V6);
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  IPADDR_PORT_TO_SOCKADDR(&saddr, fromaddr, port);
 8010684:	f107 0314 	add.w	r3, r7, #20
 8010688:	2210      	movs	r2, #16
 801068a:	701a      	strb	r2, [r3, #0]
 801068c:	f107 0314 	add.w	r3, r7, #20
 8010690:	2202      	movs	r2, #2
 8010692:	705a      	strb	r2, [r3, #1]
 8010694:	f107 0414 	add.w	r4, r7, #20
 8010698:	88fb      	ldrh	r3, [r7, #6]
 801069a:	4618      	mov	r0, r3
 801069c:	f000 fea2 	bl	80113e4 <lwip_htons>
 80106a0:	4603      	mov	r3, r0
 80106a2:	8063      	strh	r3, [r4, #2]
 80106a4:	f107 0314 	add.w	r3, r7, #20
 80106a8:	68ba      	ldr	r2, [r7, #8]
 80106aa:	6812      	ldr	r2, [r2, #0]
 80106ac:	605a      	str	r2, [r3, #4]
 80106ae:	f107 0314 	add.w	r3, r7, #20
 80106b2:	3308      	adds	r3, #8
 80106b4:	2208      	movs	r2, #8
 80106b6:	2100      	movs	r1, #0
 80106b8:	4618      	mov	r0, r3
 80106ba:	f00e f955 	bl	801e968 <memset>
  if (*fromlen < saddr.sa.sa_len) {
 80106be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106c0:	681b      	ldr	r3, [r3, #0]
 80106c2:	7d3a      	ldrb	r2, [r7, #20]
 80106c4:	4293      	cmp	r3, r2
 80106c6:	d202      	bcs.n	80106ce <lwip_sock_make_addr+0x9a>
    truncated = 1;
 80106c8:	2301      	movs	r3, #1
 80106ca:	627b      	str	r3, [r7, #36]	; 0x24
 80106cc:	e008      	b.n	80106e0 <lwip_sock_make_addr+0xac>
  } else if (*fromlen > saddr.sa.sa_len) {
 80106ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106d0:	681b      	ldr	r3, [r3, #0]
 80106d2:	7d3a      	ldrb	r2, [r7, #20]
 80106d4:	4293      	cmp	r3, r2
 80106d6:	d903      	bls.n	80106e0 <lwip_sock_make_addr+0xac>
    *fromlen = saddr.sa.sa_len;
 80106d8:	7d3b      	ldrb	r3, [r7, #20]
 80106da:	461a      	mov	r2, r3
 80106dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106de:	601a      	str	r2, [r3, #0]
  }
  MEMCPY(from, &saddr, *fromlen);
 80106e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106e2:	681a      	ldr	r2, [r3, #0]
 80106e4:	f107 0314 	add.w	r3, r7, #20
 80106e8:	4619      	mov	r1, r3
 80106ea:	6838      	ldr	r0, [r7, #0]
 80106ec:	f00e f914 	bl	801e918 <memcpy>
  return truncated;
 80106f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80106f2:	4618      	mov	r0, r3
 80106f4:	372c      	adds	r7, #44	; 0x2c
 80106f6:	46bd      	mov	sp, r7
 80106f8:	bd90      	pop	{r4, r7, pc}
 80106fa:	bf00      	nop
 80106fc:	08023de8 	.word	0x08023de8
 8010700:	08023f58 	.word	0x08023f58
 8010704:	08023e3c 	.word	0x08023e3c
 8010708:	08023f6c 	.word	0x08023f6c
 801070c:	08023f7c 	.word	0x08023f7c

08010710 <lwip_recv_tcp_from>:

#if LWIP_TCP
/* Helper function to get a tcp socket's remote address info */
static int
lwip_recv_tcp_from(struct lwip_sock *sock, struct sockaddr *from, socklen_t *fromlen, const char *dbg_fn, int dbg_s, ssize_t dbg_ret)
{
 8010710:	b580      	push	{r7, lr}
 8010712:	b088      	sub	sp, #32
 8010714:	af02      	add	r7, sp, #8
 8010716:	60f8      	str	r0, [r7, #12]
 8010718:	60b9      	str	r1, [r7, #8]
 801071a:	607a      	str	r2, [r7, #4]
 801071c:	603b      	str	r3, [r7, #0]
  if (sock == NULL) {
 801071e:	68fb      	ldr	r3, [r7, #12]
 8010720:	2b00      	cmp	r3, #0
 8010722:	d101      	bne.n	8010728 <lwip_recv_tcp_from+0x18>
    return 0;
 8010724:	2300      	movs	r3, #0
 8010726:	e021      	b.n	801076c <lwip_recv_tcp_from+0x5c>
  LWIP_UNUSED_ARG(dbg_fn);
  LWIP_UNUSED_ARG(dbg_s);
  LWIP_UNUSED_ARG(dbg_ret);

#if !SOCKETS_DEBUG
  if (from && fromlen)
 8010728:	68bb      	ldr	r3, [r7, #8]
 801072a:	2b00      	cmp	r3, #0
 801072c:	d01d      	beq.n	801076a <lwip_recv_tcp_from+0x5a>
 801072e:	687b      	ldr	r3, [r7, #4]
 8010730:	2b00      	cmp	r3, #0
 8010732:	d01a      	beq.n	801076a <lwip_recv_tcp_from+0x5a>
#endif /* !SOCKETS_DEBUG */
  {
    /* get remote addr/port from tcp_pcb */
    u16_t port;
    ip_addr_t tmpaddr;
    netconn_getaddr(sock->conn, &tmpaddr, &port, 0);
 8010734:	68fb      	ldr	r3, [r7, #12]
 8010736:	6818      	ldr	r0, [r3, #0]
 8010738:	f107 0216 	add.w	r2, r7, #22
 801073c:	f107 0110 	add.w	r1, r7, #16
 8010740:	2300      	movs	r3, #0
 8010742:	f7fd f92b 	bl	800d99c <netconn_getaddr>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("%s(%d):  addr=", dbg_fn, dbg_s));
    ip_addr_debug_print_val(SOCKETS_DEBUG, tmpaddr);
    LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F" len=%d\n", port, (int)dbg_ret));
    if (from && fromlen) {
 8010746:	68bb      	ldr	r3, [r7, #8]
 8010748:	2b00      	cmp	r3, #0
 801074a:	d00e      	beq.n	801076a <lwip_recv_tcp_from+0x5a>
 801074c:	687b      	ldr	r3, [r7, #4]
 801074e:	2b00      	cmp	r3, #0
 8010750:	d00b      	beq.n	801076a <lwip_recv_tcp_from+0x5a>
      return lwip_sock_make_addr(sock->conn, &tmpaddr, port, from, fromlen);
 8010752:	68fb      	ldr	r3, [r7, #12]
 8010754:	6818      	ldr	r0, [r3, #0]
 8010756:	8afa      	ldrh	r2, [r7, #22]
 8010758:	f107 0110 	add.w	r1, r7, #16
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	9300      	str	r3, [sp, #0]
 8010760:	68bb      	ldr	r3, [r7, #8]
 8010762:	f7ff ff67 	bl	8010634 <lwip_sock_make_addr>
 8010766:	4603      	mov	r3, r0
 8010768:	e000      	b.n	801076c <lwip_recv_tcp_from+0x5c>
    }
  }
  return 0;
 801076a:	2300      	movs	r3, #0
}
 801076c:	4618      	mov	r0, r3
 801076e:	3718      	adds	r7, #24
 8010770:	46bd      	mov	sp, r7
 8010772:	bd80      	pop	{r7, pc}

08010774 <lwip_recvfrom_udp_raw>:
/* Helper function to receive a netbuf from a udp or raw netconn.
 * Keeps sock->lastdata for peeking.
 */
static err_t
lwip_recvfrom_udp_raw(struct lwip_sock *sock, int flags, struct msghdr *msg, u16_t *datagram_len, int dbg_s)
{
 8010774:	b590      	push	{r4, r7, lr}
 8010776:	b08d      	sub	sp, #52	; 0x34
 8010778:	af02      	add	r7, sp, #8
 801077a:	60f8      	str	r0, [r7, #12]
 801077c:	60b9      	str	r1, [r7, #8]
 801077e:	607a      	str	r2, [r7, #4]
 8010780:	603b      	str	r3, [r7, #0]
  err_t err;
  u16_t buflen, copylen, copied;
  int i;

  LWIP_UNUSED_ARG(dbg_s);
  LWIP_ERROR("lwip_recvfrom_udp_raw: invalid arguments", (msg->msg_iov != NULL) || (msg->msg_iovlen <= 0), return ERR_ARG;);
 8010782:	687b      	ldr	r3, [r7, #4]
 8010784:	689b      	ldr	r3, [r3, #8]
 8010786:	2b00      	cmp	r3, #0
 8010788:	d10d      	bne.n	80107a6 <lwip_recvfrom_udp_raw+0x32>
 801078a:	687b      	ldr	r3, [r7, #4]
 801078c:	68db      	ldr	r3, [r3, #12]
 801078e:	2b00      	cmp	r3, #0
 8010790:	dd09      	ble.n	80107a6 <lwip_recvfrom_udp_raw+0x32>
 8010792:	4b5e      	ldr	r3, [pc, #376]	; (801090c <lwip_recvfrom_udp_raw+0x198>)
 8010794:	f240 4249 	movw	r2, #1097	; 0x449
 8010798:	495d      	ldr	r1, [pc, #372]	; (8010910 <lwip_recvfrom_udp_raw+0x19c>)
 801079a:	485e      	ldr	r0, [pc, #376]	; (8010914 <lwip_recvfrom_udp_raw+0x1a0>)
 801079c:	f00e ff32 	bl	801f604 <iprintf>
 80107a0:	f06f 030f 	mvn.w	r3, #15
 80107a4:	e0ad      	b.n	8010902 <lwip_recvfrom_udp_raw+0x18e>

  if (flags & MSG_DONTWAIT) {
 80107a6:	68bb      	ldr	r3, [r7, #8]
 80107a8:	f003 0308 	and.w	r3, r3, #8
 80107ac:	2b00      	cmp	r3, #0
 80107ae:	d003      	beq.n	80107b8 <lwip_recvfrom_udp_raw+0x44>
    apiflags = NETCONN_DONTBLOCK;
 80107b0:	2304      	movs	r3, #4
 80107b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80107b6:	e002      	b.n	80107be <lwip_recvfrom_udp_raw+0x4a>
  } else {
    apiflags = 0;
 80107b8:	2300      	movs	r3, #0
 80107ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw[UDP/RAW]: top sock->lastdata=%p\n", (void *)sock->lastdata.netbuf));
  /* Check if there is data left from the last recv operation. */
  buf = sock->lastdata.netbuf;
 80107be:	68fb      	ldr	r3, [r7, #12]
 80107c0:	685b      	ldr	r3, [r3, #4]
 80107c2:	613b      	str	r3, [r7, #16]
  if (buf == NULL) {
 80107c4:	693b      	ldr	r3, [r7, #16]
 80107c6:	2b00      	cmp	r3, #0
 80107c8:	d11e      	bne.n	8010808 <lwip_recvfrom_udp_raw+0x94>
    /* No data was left from the previous operation, so we try to get
        some from the network. */
    err = netconn_recv_udp_raw_netbuf_flags(sock->conn, &buf, apiflags);
 80107ca:	68fb      	ldr	r3, [r7, #12]
 80107cc:	681b      	ldr	r3, [r3, #0]
 80107ce:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80107d2:	f107 0110 	add.w	r1, r7, #16
 80107d6:	4618      	mov	r0, r3
 80107d8:	f7fd fbf8 	bl	800dfcc <netconn_recv_udp_raw_netbuf_flags>
 80107dc:	4603      	mov	r3, r0
 80107de:	76fb      	strb	r3, [r7, #27]
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw[UDP/RAW]: netconn_recv err=%d, netbuf=%p\n",
                                err, (void *)buf));

    if (err != ERR_OK) {
 80107e0:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80107e4:	2b00      	cmp	r3, #0
 80107e6:	d002      	beq.n	80107ee <lwip_recvfrom_udp_raw+0x7a>
      return err;
 80107e8:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80107ec:	e089      	b.n	8010902 <lwip_recvfrom_udp_raw+0x18e>
    }
    LWIP_ASSERT("buf != NULL", buf != NULL);
 80107ee:	693b      	ldr	r3, [r7, #16]
 80107f0:	2b00      	cmp	r3, #0
 80107f2:	d106      	bne.n	8010802 <lwip_recvfrom_udp_raw+0x8e>
 80107f4:	4b45      	ldr	r3, [pc, #276]	; (801090c <lwip_recvfrom_udp_raw+0x198>)
 80107f6:	f240 425e 	movw	r2, #1118	; 0x45e
 80107fa:	4947      	ldr	r1, [pc, #284]	; (8010918 <lwip_recvfrom_udp_raw+0x1a4>)
 80107fc:	4845      	ldr	r0, [pc, #276]	; (8010914 <lwip_recvfrom_udp_raw+0x1a0>)
 80107fe:	f00e ff01 	bl	801f604 <iprintf>
    sock->lastdata.netbuf = buf;
 8010802:	693a      	ldr	r2, [r7, #16]
 8010804:	68fb      	ldr	r3, [r7, #12]
 8010806:	605a      	str	r2, [r3, #4]
  }
  buflen = buf->p->tot_len;
 8010808:	693b      	ldr	r3, [r7, #16]
 801080a:	681b      	ldr	r3, [r3, #0]
 801080c:	891b      	ldrh	r3, [r3, #8]
 801080e:	833b      	strh	r3, [r7, #24]
  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw: buflen=%"U16_F"\n", buflen));

  copied = 0;
 8010810:	2300      	movs	r3, #0
 8010812:	847b      	strh	r3, [r7, #34]	; 0x22
  /* copy the pbuf payload into the iovs */
  for (i = 0; (i < msg->msg_iovlen) && (copied < buflen); i++) {
 8010814:	2300      	movs	r3, #0
 8010816:	61fb      	str	r3, [r7, #28]
 8010818:	e029      	b.n	801086e <lwip_recvfrom_udp_raw+0xfa>
    u16_t len_left = (u16_t)(buflen - copied);
 801081a:	8b3a      	ldrh	r2, [r7, #24]
 801081c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801081e:	1ad3      	subs	r3, r2, r3
 8010820:	82fb      	strh	r3, [r7, #22]
    if (msg->msg_iov[i].iov_len > len_left) {
 8010822:	687b      	ldr	r3, [r7, #4]
 8010824:	689a      	ldr	r2, [r3, #8]
 8010826:	69fb      	ldr	r3, [r7, #28]
 8010828:	00db      	lsls	r3, r3, #3
 801082a:	4413      	add	r3, r2
 801082c:	685a      	ldr	r2, [r3, #4]
 801082e:	8afb      	ldrh	r3, [r7, #22]
 8010830:	429a      	cmp	r2, r3
 8010832:	d902      	bls.n	801083a <lwip_recvfrom_udp_raw+0xc6>
      copylen = len_left;
 8010834:	8afb      	ldrh	r3, [r7, #22]
 8010836:	84bb      	strh	r3, [r7, #36]	; 0x24
 8010838:	e006      	b.n	8010848 <lwip_recvfrom_udp_raw+0xd4>
    } else {
      copylen = (u16_t)msg->msg_iov[i].iov_len;
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	689a      	ldr	r2, [r3, #8]
 801083e:	69fb      	ldr	r3, [r7, #28]
 8010840:	00db      	lsls	r3, r3, #3
 8010842:	4413      	add	r3, r2
 8010844:	685b      	ldr	r3, [r3, #4]
 8010846:	84bb      	strh	r3, [r7, #36]	; 0x24
    }

    /* copy the contents of the received buffer into
        the supplied memory buffer */
    pbuf_copy_partial(buf->p, (u8_t *)msg->msg_iov[i].iov_base, copylen, copied);
 8010848:	693b      	ldr	r3, [r7, #16]
 801084a:	6818      	ldr	r0, [r3, #0]
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	689a      	ldr	r2, [r3, #8]
 8010850:	69fb      	ldr	r3, [r7, #28]
 8010852:	00db      	lsls	r3, r3, #3
 8010854:	4413      	add	r3, r2
 8010856:	6819      	ldr	r1, [r3, #0]
 8010858:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801085a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801085c:	f002 fcb0 	bl	80131c0 <pbuf_copy_partial>
    copied = (u16_t)(copied + copylen);
 8010860:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8010862:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010864:	4413      	add	r3, r2
 8010866:	847b      	strh	r3, [r7, #34]	; 0x22
  for (i = 0; (i < msg->msg_iovlen) && (copied < buflen); i++) {
 8010868:	69fb      	ldr	r3, [r7, #28]
 801086a:	3301      	adds	r3, #1
 801086c:	61fb      	str	r3, [r7, #28]
 801086e:	687b      	ldr	r3, [r7, #4]
 8010870:	68db      	ldr	r3, [r3, #12]
 8010872:	69fa      	ldr	r2, [r7, #28]
 8010874:	429a      	cmp	r2, r3
 8010876:	da03      	bge.n	8010880 <lwip_recvfrom_udp_raw+0x10c>
 8010878:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801087a:	8b3b      	ldrh	r3, [r7, #24]
 801087c:	429a      	cmp	r2, r3
 801087e:	d3cc      	bcc.n	801081a <lwip_recvfrom_udp_raw+0xa6>
  }

  /* Check to see from where the data was.*/
#if !SOCKETS_DEBUG
  if (msg->msg_name && msg->msg_namelen)
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	681b      	ldr	r3, [r3, #0]
 8010884:	2b00      	cmp	r3, #0
 8010886:	d01a      	beq.n	80108be <lwip_recvfrom_udp_raw+0x14a>
 8010888:	687b      	ldr	r3, [r7, #4]
 801088a:	685b      	ldr	r3, [r3, #4]
 801088c:	2b00      	cmp	r3, #0
 801088e:	d016      	beq.n	80108be <lwip_recvfrom_udp_raw+0x14a>
#endif /* !SOCKETS_DEBUG */
  {
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw(%d):  addr=", dbg_s));
    ip_addr_debug_print_val(SOCKETS_DEBUG, *netbuf_fromaddr(buf));
    LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F" len=%d\n", netbuf_fromport(buf), copied));
    if (msg->msg_name && msg->msg_namelen) {
 8010890:	687b      	ldr	r3, [r7, #4]
 8010892:	681b      	ldr	r3, [r3, #0]
 8010894:	2b00      	cmp	r3, #0
 8010896:	d012      	beq.n	80108be <lwip_recvfrom_udp_raw+0x14a>
 8010898:	687b      	ldr	r3, [r7, #4]
 801089a:	685b      	ldr	r3, [r3, #4]
 801089c:	2b00      	cmp	r3, #0
 801089e:	d00e      	beq.n	80108be <lwip_recvfrom_udp_raw+0x14a>
      lwip_sock_make_addr(sock->conn, netbuf_fromaddr(buf), netbuf_fromport(buf),
 80108a0:	68fb      	ldr	r3, [r7, #12]
 80108a2:	6818      	ldr	r0, [r3, #0]
 80108a4:	693b      	ldr	r3, [r7, #16]
 80108a6:	f103 0108 	add.w	r1, r3, #8
 80108aa:	693b      	ldr	r3, [r7, #16]
 80108ac:	899a      	ldrh	r2, [r3, #12]
                          (struct sockaddr *)msg->msg_name, &msg->msg_namelen);
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	681c      	ldr	r4, [r3, #0]
      lwip_sock_make_addr(sock->conn, netbuf_fromaddr(buf), netbuf_fromport(buf),
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	3304      	adds	r3, #4
 80108b6:	9300      	str	r3, [sp, #0]
 80108b8:	4623      	mov	r3, r4
 80108ba:	f7ff febb 	bl	8010634 <lwip_sock_make_addr>
    }
  }

  /* Initialize flag output */
  msg->msg_flags = 0;
 80108be:	687b      	ldr	r3, [r7, #4]
 80108c0:	2200      	movs	r2, #0
 80108c2:	619a      	str	r2, [r3, #24]

  if (msg->msg_control) {
 80108c4:	687b      	ldr	r3, [r7, #4]
 80108c6:	691b      	ldr	r3, [r3, #16]
 80108c8:	2b00      	cmp	r3, #0
 80108ca:	d007      	beq.n	80108dc <lwip_recvfrom_udp_raw+0x168>
    u8_t wrote_msg = 0;
 80108cc:	2300      	movs	r3, #0
 80108ce:	757b      	strb	r3, [r7, #21]
#endif /* LWIP_IPV4 */
      }
    }
#endif /* LWIP_NETBUF_RECVINFO */

    if (!wrote_msg) {
 80108d0:	7d7b      	ldrb	r3, [r7, #21]
 80108d2:	2b00      	cmp	r3, #0
 80108d4:	d102      	bne.n	80108dc <lwip_recvfrom_udp_raw+0x168>
      msg->msg_controllen = 0;
 80108d6:	687b      	ldr	r3, [r7, #4]
 80108d8:	2200      	movs	r2, #0
 80108da:	615a      	str	r2, [r3, #20]
    }
  }

  /* If we don't peek the incoming message: zero lastdata pointer and free the netbuf */
  if ((flags & MSG_PEEK) == 0) {
 80108dc:	68bb      	ldr	r3, [r7, #8]
 80108de:	f003 0301 	and.w	r3, r3, #1
 80108e2:	2b00      	cmp	r3, #0
 80108e4:	d106      	bne.n	80108f4 <lwip_recvfrom_udp_raw+0x180>
    sock->lastdata.netbuf = NULL;
 80108e6:	68fb      	ldr	r3, [r7, #12]
 80108e8:	2200      	movs	r2, #0
 80108ea:	605a      	str	r2, [r3, #4]
    netbuf_delete(buf);
 80108ec:	693b      	ldr	r3, [r7, #16]
 80108ee:	4618      	mov	r0, r3
 80108f0:	f7ff f9a6 	bl	800fc40 <netbuf_delete>
  }
  if (datagram_len) {
 80108f4:	683b      	ldr	r3, [r7, #0]
 80108f6:	2b00      	cmp	r3, #0
 80108f8:	d002      	beq.n	8010900 <lwip_recvfrom_udp_raw+0x18c>
    *datagram_len = buflen;
 80108fa:	683b      	ldr	r3, [r7, #0]
 80108fc:	8b3a      	ldrh	r2, [r7, #24]
 80108fe:	801a      	strh	r2, [r3, #0]
  }
  return ERR_OK;
 8010900:	2300      	movs	r3, #0
}
 8010902:	4618      	mov	r0, r3
 8010904:	372c      	adds	r7, #44	; 0x2c
 8010906:	46bd      	mov	sp, r7
 8010908:	bd90      	pop	{r4, r7, pc}
 801090a:	bf00      	nop
 801090c:	08023de8 	.word	0x08023de8
 8010910:	08023f8c 	.word	0x08023f8c
 8010914:	08023e3c 	.word	0x08023e3c
 8010918:	08023fb8 	.word	0x08023fb8

0801091c <lwip_recvfrom>:

ssize_t
lwip_recvfrom(int s, void *mem, size_t len, int flags,
              struct sockaddr *from, socklen_t *fromlen)
{
 801091c:	b580      	push	{r7, lr}
 801091e:	b096      	sub	sp, #88	; 0x58
 8010920:	af02      	add	r7, sp, #8
 8010922:	60f8      	str	r0, [r7, #12]
 8010924:	60b9      	str	r1, [r7, #8]
 8010926:	607a      	str	r2, [r7, #4]
 8010928:	603b      	str	r3, [r7, #0]
  struct lwip_sock *sock;
  ssize_t ret;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom(%d, %p, %"SZT_F", 0x%x, ..)\n", s, mem, len, flags));
  sock = get_socket(s);
 801092a:	68f8      	ldr	r0, [r7, #12]
 801092c:	f7ff fa58 	bl	800fde0 <get_socket>
 8010930:	64f8      	str	r0, [r7, #76]	; 0x4c
  if (!sock) {
 8010932:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010934:	2b00      	cmp	r3, #0
 8010936:	d102      	bne.n	801093e <lwip_recvfrom+0x22>
    return -1;
 8010938:	f04f 33ff 	mov.w	r3, #4294967295
 801093c:	e078      	b.n	8010a30 <lwip_recvfrom+0x114>
  }
#if LWIP_TCP
  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 801093e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010940:	681b      	ldr	r3, [r3, #0]
 8010942:	781b      	ldrb	r3, [r3, #0]
 8010944:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010948:	2b10      	cmp	r3, #16
 801094a:	d112      	bne.n	8010972 <lwip_recvfrom+0x56>
    ret = lwip_recv_tcp(sock, mem, len, flags);
 801094c:	683b      	ldr	r3, [r7, #0]
 801094e:	687a      	ldr	r2, [r7, #4]
 8010950:	68b9      	ldr	r1, [r7, #8]
 8010952:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8010954:	f7ff fd5e 	bl	8010414 <lwip_recv_tcp>
 8010958:	6478      	str	r0, [r7, #68]	; 0x44
    lwip_recv_tcp_from(sock, from, fromlen, "lwip_recvfrom", s, ret);
 801095a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801095c:	9301      	str	r3, [sp, #4]
 801095e:	68fb      	ldr	r3, [r7, #12]
 8010960:	9300      	str	r3, [sp, #0]
 8010962:	4b35      	ldr	r3, [pc, #212]	; (8010a38 <lwip_recvfrom+0x11c>)
 8010964:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8010966:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8010968:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801096a:	f7ff fed1 	bl	8010710 <lwip_recv_tcp_from>
    done_socket(sock);
    return ret;
 801096e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010970:	e05e      	b.n	8010a30 <lwip_recvfrom+0x114>
  } else
#endif
  {
    u16_t datagram_len = 0;
 8010972:	2300      	movs	r3, #0
 8010974:	877b      	strh	r3, [r7, #58]	; 0x3a
    struct iovec vec;
    struct msghdr msg;
    err_t err;
    vec.iov_base = mem;
 8010976:	68bb      	ldr	r3, [r7, #8]
 8010978:	633b      	str	r3, [r7, #48]	; 0x30
    vec.iov_len = len;
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	637b      	str	r3, [r7, #52]	; 0x34
    msg.msg_control = NULL;
 801097e:	2300      	movs	r3, #0
 8010980:	627b      	str	r3, [r7, #36]	; 0x24
    msg.msg_controllen = 0;
 8010982:	2300      	movs	r3, #0
 8010984:	62bb      	str	r3, [r7, #40]	; 0x28
    msg.msg_flags = 0;
 8010986:	2300      	movs	r3, #0
 8010988:	62fb      	str	r3, [r7, #44]	; 0x2c
    msg.msg_iov = &vec;
 801098a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801098e:	61fb      	str	r3, [r7, #28]
    msg.msg_iovlen = 1;
 8010990:	2301      	movs	r3, #1
 8010992:	623b      	str	r3, [r7, #32]
    msg.msg_name = from;
 8010994:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010996:	617b      	str	r3, [r7, #20]
    msg.msg_namelen = (fromlen ? *fromlen : 0);
 8010998:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801099a:	2b00      	cmp	r3, #0
 801099c:	d002      	beq.n	80109a4 <lwip_recvfrom+0x88>
 801099e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80109a0:	681b      	ldr	r3, [r3, #0]
 80109a2:	e000      	b.n	80109a6 <lwip_recvfrom+0x8a>
 80109a4:	2300      	movs	r3, #0
 80109a6:	61bb      	str	r3, [r7, #24]
    err = lwip_recvfrom_udp_raw(sock, flags, &msg, &datagram_len, s);
 80109a8:	f107 013a 	add.w	r1, r7, #58	; 0x3a
 80109ac:	f107 0214 	add.w	r2, r7, #20
 80109b0:	68fb      	ldr	r3, [r7, #12]
 80109b2:	9300      	str	r3, [sp, #0]
 80109b4:	460b      	mov	r3, r1
 80109b6:	6839      	ldr	r1, [r7, #0]
 80109b8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80109ba:	f7ff fedb 	bl	8010774 <lwip_recvfrom_udp_raw>
 80109be:	4603      	mov	r3, r0
 80109c0:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
    if (err != ERR_OK) {
 80109c4:	f997 304b 	ldrsb.w	r3, [r7, #75]	; 0x4b
 80109c8:	2b00      	cmp	r3, #0
 80109ca:	d00e      	beq.n	80109ea <lwip_recvfrom+0xce>
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom[UDP/RAW](%d): buf == NULL, error is \"%s\"!\n",
                                  s, lwip_strerr(err)));
      sock_set_errno(sock, err_to_errno(err));
 80109cc:	f997 304b 	ldrsb.w	r3, [r7, #75]	; 0x4b
 80109d0:	4618      	mov	r0, r3
 80109d2:	f7ff f917 	bl	800fc04 <err_to_errno>
 80109d6:	63f8      	str	r0, [r7, #60]	; 0x3c
 80109d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80109da:	2b00      	cmp	r3, #0
 80109dc:	d002      	beq.n	80109e4 <lwip_recvfrom+0xc8>
 80109de:	4a17      	ldr	r2, [pc, #92]	; (8010a3c <lwip_recvfrom+0x120>)
 80109e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80109e2:	6013      	str	r3, [r2, #0]
      done_socket(sock);
      return -1;
 80109e4:	f04f 33ff 	mov.w	r3, #4294967295
 80109e8:	e022      	b.n	8010a30 <lwip_recvfrom+0x114>
    }
    ret = (ssize_t)LWIP_MIN(LWIP_MIN(len, datagram_len), SSIZE_MAX);
 80109ea:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80109ec:	461a      	mov	r2, r3
 80109ee:	687b      	ldr	r3, [r7, #4]
 80109f0:	4293      	cmp	r3, r2
 80109f2:	bf28      	it	cs
 80109f4:	4613      	movcs	r3, r2
 80109f6:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80109fa:	4293      	cmp	r3, r2
 80109fc:	d206      	bcs.n	8010a0c <lwip_recvfrom+0xf0>
 80109fe:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010a00:	461a      	mov	r2, r3
 8010a02:	687b      	ldr	r3, [r7, #4]
 8010a04:	4293      	cmp	r3, r2
 8010a06:	bf28      	it	cs
 8010a08:	4613      	movcs	r3, r2
 8010a0a:	e001      	b.n	8010a10 <lwip_recvfrom+0xf4>
 8010a0c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8010a10:	647b      	str	r3, [r7, #68]	; 0x44
    if (fromlen) {
 8010a12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010a14:	2b00      	cmp	r3, #0
 8010a16:	d002      	beq.n	8010a1e <lwip_recvfrom+0x102>
      *fromlen = msg.msg_namelen;
 8010a18:	69ba      	ldr	r2, [r7, #24]
 8010a1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010a1c:	601a      	str	r2, [r3, #0]
    }
  }

  sock_set_errno(sock, 0);
 8010a1e:	2300      	movs	r3, #0
 8010a20:	643b      	str	r3, [r7, #64]	; 0x40
 8010a22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010a24:	2b00      	cmp	r3, #0
 8010a26:	d002      	beq.n	8010a2e <lwip_recvfrom+0x112>
 8010a28:	4a04      	ldr	r2, [pc, #16]	; (8010a3c <lwip_recvfrom+0x120>)
 8010a2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010a2c:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return ret;
 8010a2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8010a30:	4618      	mov	r0, r3
 8010a32:	3750      	adds	r7, #80	; 0x50
 8010a34:	46bd      	mov	sp, r7
 8010a36:	bd80      	pop	{r7, pc}
 8010a38:	08023fc4 	.word	0x08023fc4
 8010a3c:	24007f80 	.word	0x24007f80

08010a40 <lwip_read>:

ssize_t
lwip_read(int s, void *mem, size_t len)
{
 8010a40:	b580      	push	{r7, lr}
 8010a42:	b086      	sub	sp, #24
 8010a44:	af02      	add	r7, sp, #8
 8010a46:	60f8      	str	r0, [r7, #12]
 8010a48:	60b9      	str	r1, [r7, #8]
 8010a4a:	607a      	str	r2, [r7, #4]
  return lwip_recvfrom(s, mem, len, 0, NULL, NULL);
 8010a4c:	2300      	movs	r3, #0
 8010a4e:	9301      	str	r3, [sp, #4]
 8010a50:	2300      	movs	r3, #0
 8010a52:	9300      	str	r3, [sp, #0]
 8010a54:	2300      	movs	r3, #0
 8010a56:	687a      	ldr	r2, [r7, #4]
 8010a58:	68b9      	ldr	r1, [r7, #8]
 8010a5a:	68f8      	ldr	r0, [r7, #12]
 8010a5c:	f7ff ff5e 	bl	801091c <lwip_recvfrom>
 8010a60:	4603      	mov	r3, r0
}
 8010a62:	4618      	mov	r0, r3
 8010a64:	3710      	adds	r7, #16
 8010a66:	46bd      	mov	sp, r7
 8010a68:	bd80      	pop	{r7, pc}
	...

08010a6c <lwip_send>:
#endif /* LWIP_UDP || LWIP_RAW */
}

ssize_t
lwip_send(int s, const void *data, size_t size, int flags)
{
 8010a6c:	b580      	push	{r7, lr}
 8010a6e:	b08a      	sub	sp, #40	; 0x28
 8010a70:	af02      	add	r7, sp, #8
 8010a72:	60f8      	str	r0, [r7, #12]
 8010a74:	60b9      	str	r1, [r7, #8]
 8010a76:	607a      	str	r2, [r7, #4]
 8010a78:	603b      	str	r3, [r7, #0]
  size_t written;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d, data=%p, size=%"SZT_F", flags=0x%x)\n",
                              s, data, size, flags));

  sock = get_socket(s);
 8010a7a:	68f8      	ldr	r0, [r7, #12]
 8010a7c:	f7ff f9b0 	bl	800fde0 <get_socket>
 8010a80:	61f8      	str	r0, [r7, #28]
  if (!sock) {
 8010a82:	69fb      	ldr	r3, [r7, #28]
 8010a84:	2b00      	cmp	r3, #0
 8010a86:	d102      	bne.n	8010a8e <lwip_send+0x22>
    return -1;
 8010a88:	f04f 33ff 	mov.w	r3, #4294967295
 8010a8c:	e046      	b.n	8010b1c <lwip_send+0xb0>
  }

  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
 8010a8e:	69fb      	ldr	r3, [r7, #28]
 8010a90:	681b      	ldr	r3, [r3, #0]
 8010a92:	781b      	ldrb	r3, [r3, #0]
 8010a94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010a98:	2b10      	cmp	r3, #16
 8010a9a:	d00b      	beq.n	8010ab4 <lwip_send+0x48>
#if (LWIP_UDP || LWIP_RAW)
    done_socket(sock);
    return lwip_sendto(s, data, size, flags, NULL, 0);
 8010a9c:	2300      	movs	r3, #0
 8010a9e:	9301      	str	r3, [sp, #4]
 8010aa0:	2300      	movs	r3, #0
 8010aa2:	9300      	str	r3, [sp, #0]
 8010aa4:	683b      	ldr	r3, [r7, #0]
 8010aa6:	687a      	ldr	r2, [r7, #4]
 8010aa8:	68b9      	ldr	r1, [r7, #8]
 8010aaa:	68f8      	ldr	r0, [r7, #12]
 8010aac:	f000 f83c 	bl	8010b28 <lwip_sendto>
 8010ab0:	4603      	mov	r3, r0
 8010ab2:	e033      	b.n	8010b1c <lwip_send+0xb0>
    return -1;
#endif /* (LWIP_UDP || LWIP_RAW) */
  }

  write_flags = (u8_t)(NETCONN_COPY |
                       ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
 8010ab4:	683b      	ldr	r3, [r7, #0]
 8010ab6:	f003 0310 	and.w	r3, r3, #16
  write_flags = (u8_t)(NETCONN_COPY |
 8010aba:	2b00      	cmp	r3, #0
 8010abc:	d001      	beq.n	8010ac2 <lwip_send+0x56>
 8010abe:	2203      	movs	r2, #3
 8010ac0:	e000      	b.n	8010ac4 <lwip_send+0x58>
 8010ac2:	2201      	movs	r2, #1
                       ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
 8010ac4:	683b      	ldr	r3, [r7, #0]
 8010ac6:	105b      	asrs	r3, r3, #1
 8010ac8:	b25b      	sxtb	r3, r3
 8010aca:	f003 0304 	and.w	r3, r3, #4
 8010ace:	b25b      	sxtb	r3, r3
 8010ad0:	4313      	orrs	r3, r2
 8010ad2:	b25b      	sxtb	r3, r3
  write_flags = (u8_t)(NETCONN_COPY |
 8010ad4:	76fb      	strb	r3, [r7, #27]
                       ((flags & MSG_DONTWAIT) ? NETCONN_DONTBLOCK : 0));
  written = 0;
 8010ad6:	2300      	movs	r3, #0
 8010ad8:	613b      	str	r3, [r7, #16]
  err = netconn_write_partly(sock->conn, data, size, write_flags, &written);
 8010ada:	69fb      	ldr	r3, [r7, #28]
 8010adc:	6818      	ldr	r0, [r3, #0]
 8010ade:	7efa      	ldrb	r2, [r7, #27]
 8010ae0:	f107 0310 	add.w	r3, r7, #16
 8010ae4:	9300      	str	r3, [sp, #0]
 8010ae6:	4613      	mov	r3, r2
 8010ae8:	687a      	ldr	r2, [r7, #4]
 8010aea:	68b9      	ldr	r1, [r7, #8]
 8010aec:	f7fd fac8 	bl	800e080 <netconn_write_partly>
 8010af0:	4603      	mov	r3, r0
 8010af2:	76bb      	strb	r3, [r7, #26]

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d) err=%d written=%"SZT_F"\n", s, err, written));
  sock_set_errno(sock, err_to_errno(err));
 8010af4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8010af8:	4618      	mov	r0, r3
 8010afa:	f7ff f883 	bl	800fc04 <err_to_errno>
 8010afe:	6178      	str	r0, [r7, #20]
 8010b00:	697b      	ldr	r3, [r7, #20]
 8010b02:	2b00      	cmp	r3, #0
 8010b04:	d002      	beq.n	8010b0c <lwip_send+0xa0>
 8010b06:	4a07      	ldr	r2, [pc, #28]	; (8010b24 <lwip_send+0xb8>)
 8010b08:	697b      	ldr	r3, [r7, #20]
 8010b0a:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  /* casting 'written' to ssize_t is OK here since the netconn API limits it to SSIZE_MAX */
  return (err == ERR_OK ? (ssize_t)written : -1);
 8010b0c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8010b10:	2b00      	cmp	r3, #0
 8010b12:	d101      	bne.n	8010b18 <lwip_send+0xac>
 8010b14:	693b      	ldr	r3, [r7, #16]
 8010b16:	e001      	b.n	8010b1c <lwip_send+0xb0>
 8010b18:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010b1c:	4618      	mov	r0, r3
 8010b1e:	3720      	adds	r7, #32
 8010b20:	46bd      	mov	sp, r7
 8010b22:	bd80      	pop	{r7, pc}
 8010b24:	24007f80 	.word	0x24007f80

08010b28 <lwip_sendto>:
}

ssize_t
lwip_sendto(int s, const void *data, size_t size, int flags,
            const struct sockaddr *to, socklen_t tolen)
{
 8010b28:	b580      	push	{r7, lr}
 8010b2a:	b08e      	sub	sp, #56	; 0x38
 8010b2c:	af00      	add	r7, sp, #0
 8010b2e:	60f8      	str	r0, [r7, #12]
 8010b30:	60b9      	str	r1, [r7, #8]
 8010b32:	607a      	str	r2, [r7, #4]
 8010b34:	603b      	str	r3, [r7, #0]
  err_t err;
  u16_t short_size;
  u16_t remote_port;
  struct netbuf buf;

  sock = get_socket(s);
 8010b36:	68f8      	ldr	r0, [r7, #12]
 8010b38:	f7ff f952 	bl	800fde0 <get_socket>
 8010b3c:	6338      	str	r0, [r7, #48]	; 0x30
  if (!sock) {
 8010b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b40:	2b00      	cmp	r3, #0
 8010b42:	d102      	bne.n	8010b4a <lwip_sendto+0x22>
    return -1;
 8010b44:	f04f 33ff 	mov.w	r3, #4294967295
 8010b48:	e093      	b.n	8010c72 <lwip_sendto+0x14a>
  }

  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 8010b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b4c:	681b      	ldr	r3, [r3, #0]
 8010b4e:	781b      	ldrb	r3, [r3, #0]
 8010b50:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010b54:	2b10      	cmp	r3, #16
 8010b56:	d107      	bne.n	8010b68 <lwip_sendto+0x40>
#if LWIP_TCP
    done_socket(sock);
    return lwip_send(s, data, size, flags);
 8010b58:	683b      	ldr	r3, [r7, #0]
 8010b5a:	687a      	ldr	r2, [r7, #4]
 8010b5c:	68b9      	ldr	r1, [r7, #8]
 8010b5e:	68f8      	ldr	r0, [r7, #12]
 8010b60:	f7ff ff84 	bl	8010a6c <lwip_send>
 8010b64:	4603      	mov	r3, r0
 8010b66:	e084      	b.n	8010c72 <lwip_sendto+0x14a>
    done_socket(sock);
    return -1;
#endif /* LWIP_TCP */
  }

  if (size > LWIP_MIN(0xFFFF, SSIZE_MAX)) {
 8010b68:	687b      	ldr	r3, [r7, #4]
 8010b6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010b6e:	d30a      	bcc.n	8010b86 <lwip_sendto+0x5e>
    /* cannot fit into one datagram (at least for us) */
    sock_set_errno(sock, EMSGSIZE);
 8010b70:	235a      	movs	r3, #90	; 0x5a
 8010b72:	623b      	str	r3, [r7, #32]
 8010b74:	6a3b      	ldr	r3, [r7, #32]
 8010b76:	2b00      	cmp	r3, #0
 8010b78:	d002      	beq.n	8010b80 <lwip_sendto+0x58>
 8010b7a:	4a40      	ldr	r2, [pc, #256]	; (8010c7c <lwip_sendto+0x154>)
 8010b7c:	6a3b      	ldr	r3, [r7, #32]
 8010b7e:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 8010b80:	f04f 33ff 	mov.w	r3, #4294967295
 8010b84:	e075      	b.n	8010c72 <lwip_sendto+0x14a>
  }
  short_size = (u16_t)size;
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	85fb      	strh	r3, [r7, #46]	; 0x2e
  LWIP_ERROR("lwip_sendto: invalid address", (((to == NULL) && (tolen == 0)) ||
 8010b8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010b8c:	2b00      	cmp	r3, #0
 8010b8e:	d102      	bne.n	8010b96 <lwip_sendto+0x6e>
 8010b90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010b92:	2b00      	cmp	r3, #0
 8010b94:	d023      	beq.n	8010bde <lwip_sendto+0xb6>
 8010b96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010b98:	2b10      	cmp	r3, #16
 8010b9a:	d10b      	bne.n	8010bb4 <lwip_sendto+0x8c>
 8010b9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010b9e:	2b00      	cmp	r3, #0
 8010ba0:	d008      	beq.n	8010bb4 <lwip_sendto+0x8c>
 8010ba2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010ba4:	785b      	ldrb	r3, [r3, #1]
 8010ba6:	2b02      	cmp	r3, #2
 8010ba8:	d104      	bne.n	8010bb4 <lwip_sendto+0x8c>
 8010baa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010bac:	f003 0303 	and.w	r3, r3, #3
 8010bb0:	2b00      	cmp	r3, #0
 8010bb2:	d014      	beq.n	8010bde <lwip_sendto+0xb6>
 8010bb4:	4b32      	ldr	r3, [pc, #200]	; (8010c80 <lwip_sendto+0x158>)
 8010bb6:	f240 6252 	movw	r2, #1618	; 0x652
 8010bba:	4932      	ldr	r1, [pc, #200]	; (8010c84 <lwip_sendto+0x15c>)
 8010bbc:	4832      	ldr	r0, [pc, #200]	; (8010c88 <lwip_sendto+0x160>)
 8010bbe:	f00e fd21 	bl	801f604 <iprintf>
 8010bc2:	f06f 000f 	mvn.w	r0, #15
 8010bc6:	f7ff f81d 	bl	800fc04 <err_to_errno>
 8010bca:	62b8      	str	r0, [r7, #40]	; 0x28
 8010bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bce:	2b00      	cmp	r3, #0
 8010bd0:	d002      	beq.n	8010bd8 <lwip_sendto+0xb0>
 8010bd2:	4a2a      	ldr	r2, [pc, #168]	; (8010c7c <lwip_sendto+0x154>)
 8010bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bd6:	6013      	str	r3, [r2, #0]
 8010bd8:	f04f 33ff 	mov.w	r3, #4294967295
 8010bdc:	e049      	b.n	8010c72 <lwip_sendto+0x14a>
              ((to != NULL) && (IS_SOCK_ADDR_TYPE_VALID(to) && IS_SOCK_ADDR_ALIGNED(to))))),
             sock_set_errno(sock, err_to_errno(ERR_ARG)); done_socket(sock); return -1;);
  LWIP_UNUSED_ARG(tolen);

  /* initialize a buffer */
  buf.p = buf.ptr = NULL;
 8010bde:	2300      	movs	r3, #0
 8010be0:	617b      	str	r3, [r7, #20]
 8010be2:	697b      	ldr	r3, [r7, #20]
 8010be4:	613b      	str	r3, [r7, #16]
#if LWIP_CHECKSUM_ON_COPY
  buf.flags = 0;
#endif /* LWIP_CHECKSUM_ON_COPY */
  if (to) {
 8010be6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010be8:	2b00      	cmp	r3, #0
 8010bea:	d00a      	beq.n	8010c02 <lwip_sendto+0xda>
    SOCKADDR_TO_IPADDR_PORT(to, &buf.addr, remote_port);
 8010bec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010bee:	685b      	ldr	r3, [r3, #4]
 8010bf0:	61bb      	str	r3, [r7, #24]
 8010bf2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010bf4:	885b      	ldrh	r3, [r3, #2]
 8010bf6:	4618      	mov	r0, r3
 8010bf8:	f000 fbf4 	bl	80113e4 <lwip_htons>
 8010bfc:	4603      	mov	r3, r0
 8010bfe:	86bb      	strh	r3, [r7, #52]	; 0x34
 8010c00:	e003      	b.n	8010c0a <lwip_sendto+0xe2>
  } else {
    remote_port = 0;
 8010c02:	2300      	movs	r3, #0
 8010c04:	86bb      	strh	r3, [r7, #52]	; 0x34
    ip_addr_set_any(NETCONNTYPE_ISIPV6(netconn_type(sock->conn)), &buf.addr);
 8010c06:	2300      	movs	r3, #0
 8010c08:	61bb      	str	r3, [r7, #24]
  }
  netbuf_fromport(&buf) = remote_port;
 8010c0a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8010c0c:	83bb      	strh	r3, [r7, #28]
      MEMCPY(buf.p->payload, data, short_size);
    }
    err = ERR_OK;
  }
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  err = netbuf_ref(&buf, data, short_size);
 8010c0e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8010c10:	f107 0310 	add.w	r3, r7, #16
 8010c14:	68b9      	ldr	r1, [r7, #8]
 8010c16:	4618      	mov	r0, r3
 8010c18:	f7ff f85a 	bl	800fcd0 <netbuf_ref>
 8010c1c:	4603      	mov	r3, r0
 8010c1e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (err == ERR_OK) {
 8010c22:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8010c26:	2b00      	cmp	r3, #0
 8010c28:	d10a      	bne.n	8010c40 <lwip_sendto+0x118>
      IP_SET_TYPE_VAL(buf.addr, IPADDR_TYPE_V4);
    }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

    /* send the data */
    err = netconn_send(sock->conn, &buf);
 8010c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c2c:	681b      	ldr	r3, [r3, #0]
 8010c2e:	f107 0210 	add.w	r2, r7, #16
 8010c32:	4611      	mov	r1, r2
 8010c34:	4618      	mov	r0, r3
 8010c36:	f7fd f9f5 	bl	800e024 <netconn_send>
 8010c3a:	4603      	mov	r3, r0
 8010c3c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }

  /* deallocated the buffer */
  netbuf_free(&buf);
 8010c40:	f107 0310 	add.w	r3, r7, #16
 8010c44:	4618      	mov	r0, r3
 8010c46:	f7ff f81b 	bl	800fc80 <netbuf_free>

  sock_set_errno(sock, err_to_errno(err));
 8010c4a:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8010c4e:	4618      	mov	r0, r3
 8010c50:	f7fe ffd8 	bl	800fc04 <err_to_errno>
 8010c54:	6278      	str	r0, [r7, #36]	; 0x24
 8010c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c58:	2b00      	cmp	r3, #0
 8010c5a:	d002      	beq.n	8010c62 <lwip_sendto+0x13a>
 8010c5c:	4a07      	ldr	r2, [pc, #28]	; (8010c7c <lwip_sendto+0x154>)
 8010c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c60:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return (err == ERR_OK ? short_size : -1);
 8010c62:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8010c66:	2b00      	cmp	r3, #0
 8010c68:	d101      	bne.n	8010c6e <lwip_sendto+0x146>
 8010c6a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010c6c:	e001      	b.n	8010c72 <lwip_sendto+0x14a>
 8010c6e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010c72:	4618      	mov	r0, r3
 8010c74:	3738      	adds	r7, #56	; 0x38
 8010c76:	46bd      	mov	sp, r7
 8010c78:	bd80      	pop	{r7, pc}
 8010c7a:	bf00      	nop
 8010c7c:	24007f80 	.word	0x24007f80
 8010c80:	08023de8 	.word	0x08023de8
 8010c84:	080240c8 	.word	0x080240c8
 8010c88:	08023e3c 	.word	0x08023e3c

08010c8c <lwip_socket>:

int
lwip_socket(int domain, int type, int protocol)
{
 8010c8c:	b580      	push	{r7, lr}
 8010c8e:	b086      	sub	sp, #24
 8010c90:	af00      	add	r7, sp, #0
 8010c92:	60f8      	str	r0, [r7, #12]
 8010c94:	60b9      	str	r1, [r7, #8]
 8010c96:	607a      	str	r2, [r7, #4]
  int i;

  LWIP_UNUSED_ARG(domain); /* @todo: check this */

  /* create a netconn */
  switch (type) {
 8010c98:	68bb      	ldr	r3, [r7, #8]
 8010c9a:	2b03      	cmp	r3, #3
 8010c9c:	d009      	beq.n	8010cb2 <lwip_socket+0x26>
 8010c9e:	68bb      	ldr	r3, [r7, #8]
 8010ca0:	2b03      	cmp	r3, #3
 8010ca2:	dc23      	bgt.n	8010cec <lwip_socket+0x60>
 8010ca4:	68bb      	ldr	r3, [r7, #8]
 8010ca6:	2b01      	cmp	r3, #1
 8010ca8:	d019      	beq.n	8010cde <lwip_socket+0x52>
 8010caa:	68bb      	ldr	r3, [r7, #8]
 8010cac:	2b02      	cmp	r3, #2
 8010cae:	d009      	beq.n	8010cc4 <lwip_socket+0x38>
 8010cb0:	e01c      	b.n	8010cec <lwip_socket+0x60>
    case SOCK_RAW:
      conn = netconn_new_with_proto_and_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_RAW),
 8010cb2:	687b      	ldr	r3, [r7, #4]
 8010cb4:	b2db      	uxtb	r3, r3
 8010cb6:	4a22      	ldr	r2, [pc, #136]	; (8010d40 <lwip_socket+0xb4>)
 8010cb8:	4619      	mov	r1, r3
 8010cba:	2040      	movs	r0, #64	; 0x40
 8010cbc:	f7fc fdb4 	bl	800d828 <netconn_new_with_proto_and_callback>
 8010cc0:	6178      	str	r0, [r7, #20]
             (u8_t)protocol, DEFAULT_SOCKET_EVENTCB);
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_RAW, %d) = ",
                                  domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
      break;
 8010cc2:	e019      	b.n	8010cf8 <lwip_socket+0x6c>
    case SOCK_DGRAM:
      conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain,
 8010cc4:	687b      	ldr	r3, [r7, #4]
 8010cc6:	2b88      	cmp	r3, #136	; 0x88
 8010cc8:	d101      	bne.n	8010cce <lwip_socket+0x42>
 8010cca:	2321      	movs	r3, #33	; 0x21
 8010ccc:	e000      	b.n	8010cd0 <lwip_socket+0x44>
 8010cce:	2320      	movs	r3, #32
 8010cd0:	4a1b      	ldr	r2, [pc, #108]	; (8010d40 <lwip_socket+0xb4>)
 8010cd2:	2100      	movs	r1, #0
 8010cd4:	4618      	mov	r0, r3
 8010cd6:	f7fc fda7 	bl	800d828 <netconn_new_with_proto_and_callback>
 8010cda:	6178      	str	r0, [r7, #20]
      if (conn) {
        /* netconn layer enables pktinfo by default, sockets default to off */
        conn->flags &= ~NETCONN_FLAG_PKTINFO;
      }
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 8010cdc:	e00c      	b.n	8010cf8 <lwip_socket+0x6c>
    case SOCK_STREAM:
      conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_TCP), DEFAULT_SOCKET_EVENTCB);
 8010cde:	4a18      	ldr	r2, [pc, #96]	; (8010d40 <lwip_socket+0xb4>)
 8010ce0:	2100      	movs	r1, #0
 8010ce2:	2010      	movs	r0, #16
 8010ce4:	f7fc fda0 	bl	800d828 <netconn_new_with_proto_and_callback>
 8010ce8:	6178      	str	r0, [r7, #20]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_STREAM, %d) = ",
                                  domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
      break;
 8010cea:	e005      	b.n	8010cf8 <lwip_socket+0x6c>
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%d, %d/UNKNOWN, %d) = -1\n",
                                  domain, type, protocol));
      set_errno(EINVAL);
 8010cec:	4b15      	ldr	r3, [pc, #84]	; (8010d44 <lwip_socket+0xb8>)
 8010cee:	2216      	movs	r2, #22
 8010cf0:	601a      	str	r2, [r3, #0]
      return -1;
 8010cf2:	f04f 33ff 	mov.w	r3, #4294967295
 8010cf6:	e01e      	b.n	8010d36 <lwip_socket+0xaa>
  }

  if (!conn) {
 8010cf8:	697b      	ldr	r3, [r7, #20]
 8010cfa:	2b00      	cmp	r3, #0
 8010cfc:	d105      	bne.n	8010d0a <lwip_socket+0x7e>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("-1 / ENOBUFS (could not create netconn)\n"));
    set_errno(ENOBUFS);
 8010cfe:	4b11      	ldr	r3, [pc, #68]	; (8010d44 <lwip_socket+0xb8>)
 8010d00:	2269      	movs	r2, #105	; 0x69
 8010d02:	601a      	str	r2, [r3, #0]
    return -1;
 8010d04:	f04f 33ff 	mov.w	r3, #4294967295
 8010d08:	e015      	b.n	8010d36 <lwip_socket+0xaa>
  }

  i = alloc_socket(conn, 0);
 8010d0a:	2100      	movs	r1, #0
 8010d0c:	6978      	ldr	r0, [r7, #20]
 8010d0e:	f7ff f87f 	bl	800fe10 <alloc_socket>
 8010d12:	6138      	str	r0, [r7, #16]

  if (i == -1) {
 8010d14:	693b      	ldr	r3, [r7, #16]
 8010d16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010d1a:	d108      	bne.n	8010d2e <lwip_socket+0xa2>
    netconn_delete(conn);
 8010d1c:	6978      	ldr	r0, [r7, #20]
 8010d1e:	f7fc fe21 	bl	800d964 <netconn_delete>
    set_errno(ENFILE);
 8010d22:	4b08      	ldr	r3, [pc, #32]	; (8010d44 <lwip_socket+0xb8>)
 8010d24:	2217      	movs	r2, #23
 8010d26:	601a      	str	r2, [r3, #0]
    return -1;
 8010d28:	f04f 33ff 	mov.w	r3, #4294967295
 8010d2c:	e003      	b.n	8010d36 <lwip_socket+0xaa>
  }
  conn->socket = i;
 8010d2e:	697b      	ldr	r3, [r7, #20]
 8010d30:	693a      	ldr	r2, [r7, #16]
 8010d32:	619a      	str	r2, [r3, #24]
  done_socket(&sockets[i - LWIP_SOCKET_OFFSET]);
  LWIP_DEBUGF(SOCKETS_DEBUG, ("%d\n", i));
  set_errno(0);
  return i;
 8010d34:	693b      	ldr	r3, [r7, #16]
}
 8010d36:	4618      	mov	r0, r3
 8010d38:	3718      	adds	r7, #24
 8010d3a:	46bd      	mov	sp, r7
 8010d3c:	bd80      	pop	{r7, pc}
 8010d3e:	bf00      	nop
 8010d40:	08010df1 	.word	0x08010df1
 8010d44:	24007f80 	.word	0x24007f80

08010d48 <lwip_write>:

ssize_t
lwip_write(int s, const void *data, size_t size)
{
 8010d48:	b580      	push	{r7, lr}
 8010d4a:	b084      	sub	sp, #16
 8010d4c:	af00      	add	r7, sp, #0
 8010d4e:	60f8      	str	r0, [r7, #12]
 8010d50:	60b9      	str	r1, [r7, #8]
 8010d52:	607a      	str	r2, [r7, #4]
  return lwip_send(s, data, size, 0);
 8010d54:	2300      	movs	r3, #0
 8010d56:	687a      	ldr	r2, [r7, #4]
 8010d58:	68b9      	ldr	r1, [r7, #8]
 8010d5a:	68f8      	ldr	r0, [r7, #12]
 8010d5c:	f7ff fe86 	bl	8010a6c <lwip_send>
 8010d60:	4603      	mov	r3, r0
}
 8010d62:	4618      	mov	r0, r3
 8010d64:	3710      	adds	r7, #16
 8010d66:	46bd      	mov	sp, r7
 8010d68:	bd80      	pop	{r7, pc}

08010d6a <lwip_poll_should_wake>:
 * Check whether event_callback should wake up a thread waiting in
 * lwip_poll.
 */
static int
lwip_poll_should_wake(const struct lwip_select_cb *scb, int fd, int has_recvevent, int has_sendevent, int has_errevent)
{
 8010d6a:	b480      	push	{r7}
 8010d6c:	b087      	sub	sp, #28
 8010d6e:	af00      	add	r7, sp, #0
 8010d70:	60f8      	str	r0, [r7, #12]
 8010d72:	60b9      	str	r1, [r7, #8]
 8010d74:	607a      	str	r2, [r7, #4]
 8010d76:	603b      	str	r3, [r7, #0]
  nfds_t fdi;
  for (fdi = 0; fdi < scb->poll_nfds; fdi++) {
 8010d78:	2300      	movs	r3, #0
 8010d7a:	617b      	str	r3, [r7, #20]
 8010d7c:	e02c      	b.n	8010dd8 <lwip_poll_should_wake+0x6e>
    const struct pollfd *pollfd = &scb->poll_fds[fdi];
 8010d7e:	68fb      	ldr	r3, [r7, #12]
 8010d80:	695a      	ldr	r2, [r3, #20]
 8010d82:	697b      	ldr	r3, [r7, #20]
 8010d84:	00db      	lsls	r3, r3, #3
 8010d86:	4413      	add	r3, r2
 8010d88:	613b      	str	r3, [r7, #16]
    if (pollfd->fd == fd) {
 8010d8a:	693b      	ldr	r3, [r7, #16]
 8010d8c:	681b      	ldr	r3, [r3, #0]
 8010d8e:	68ba      	ldr	r2, [r7, #8]
 8010d90:	429a      	cmp	r2, r3
 8010d92:	d11e      	bne.n	8010dd2 <lwip_poll_should_wake+0x68>
      /* Do not update pollfd->revents right here;
         that would be a data race because lwip_pollscan
         accesses revents without protecting. */
      if (has_recvevent && (pollfd->events & POLLIN) != 0) {
 8010d94:	687b      	ldr	r3, [r7, #4]
 8010d96:	2b00      	cmp	r3, #0
 8010d98:	d009      	beq.n	8010dae <lwip_poll_should_wake+0x44>
 8010d9a:	693b      	ldr	r3, [r7, #16]
 8010d9c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8010da0:	b29b      	uxth	r3, r3
 8010da2:	f003 0301 	and.w	r3, r3, #1
 8010da6:	2b00      	cmp	r3, #0
 8010da8:	d001      	beq.n	8010dae <lwip_poll_should_wake+0x44>
        return 1;
 8010daa:	2301      	movs	r3, #1
 8010dac:	e01a      	b.n	8010de4 <lwip_poll_should_wake+0x7a>
      }
      if (has_sendevent && (pollfd->events & POLLOUT) != 0) {
 8010dae:	683b      	ldr	r3, [r7, #0]
 8010db0:	2b00      	cmp	r3, #0
 8010db2:	d009      	beq.n	8010dc8 <lwip_poll_should_wake+0x5e>
 8010db4:	693b      	ldr	r3, [r7, #16]
 8010db6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8010dba:	b29b      	uxth	r3, r3
 8010dbc:	f003 0302 	and.w	r3, r3, #2
 8010dc0:	2b00      	cmp	r3, #0
 8010dc2:	d001      	beq.n	8010dc8 <lwip_poll_should_wake+0x5e>
        return 1;
 8010dc4:	2301      	movs	r3, #1
 8010dc6:	e00d      	b.n	8010de4 <lwip_poll_should_wake+0x7a>
      }
      if (has_errevent) {
 8010dc8:	6a3b      	ldr	r3, [r7, #32]
 8010dca:	2b00      	cmp	r3, #0
 8010dcc:	d001      	beq.n	8010dd2 <lwip_poll_should_wake+0x68>
        /* POLLERR is output only. */
        return 1;
 8010dce:	2301      	movs	r3, #1
 8010dd0:	e008      	b.n	8010de4 <lwip_poll_should_wake+0x7a>
  for (fdi = 0; fdi < scb->poll_nfds; fdi++) {
 8010dd2:	697b      	ldr	r3, [r7, #20]
 8010dd4:	3301      	adds	r3, #1
 8010dd6:	617b      	str	r3, [r7, #20]
 8010dd8:	68fb      	ldr	r3, [r7, #12]
 8010dda:	699b      	ldr	r3, [r3, #24]
 8010ddc:	697a      	ldr	r2, [r7, #20]
 8010dde:	429a      	cmp	r2, r3
 8010de0:	d3cd      	bcc.n	8010d7e <lwip_poll_should_wake+0x14>
      }
    }
  }
  return 0;
 8010de2:	2300      	movs	r3, #0
}
 8010de4:	4618      	mov	r0, r3
 8010de6:	371c      	adds	r7, #28
 8010de8:	46bd      	mov	sp, r7
 8010dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dee:	4770      	bx	lr

08010df0 <event_callback>:
 *   NETCONN_EVT_ERROR
 * This requirement will be asserted in select_check_waiters()
 */
static void
event_callback(struct netconn *conn, enum netconn_evt evt, u16_t len)
{
 8010df0:	b580      	push	{r7, lr}
 8010df2:	b08a      	sub	sp, #40	; 0x28
 8010df4:	af00      	add	r7, sp, #0
 8010df6:	6078      	str	r0, [r7, #4]
 8010df8:	460b      	mov	r3, r1
 8010dfa:	70fb      	strb	r3, [r7, #3]
 8010dfc:	4613      	mov	r3, r2
 8010dfe:	803b      	strh	r3, [r7, #0]
  SYS_ARCH_DECL_PROTECT(lev);

  LWIP_UNUSED_ARG(len);

  /* Get socket */
  if (conn) {
 8010e00:	687b      	ldr	r3, [r7, #4]
 8010e02:	2b00      	cmp	r3, #0
 8010e04:	f000 80a4 	beq.w	8010f50 <event_callback+0x160>
    s = conn->socket;
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	699b      	ldr	r3, [r3, #24]
 8010e0c:	627b      	str	r3, [r7, #36]	; 0x24
    if (s < 0) {
 8010e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e10:	2b00      	cmp	r3, #0
 8010e12:	da18      	bge.n	8010e46 <event_callback+0x56>
      /* Data comes in right away after an accept, even though
       * the server task might not have created a new socket yet.
       * Just count down (or up) if that's the case and we
       * will use the data later. Note that only receive events
       * can happen before the new socket is set up. */
      SYS_ARCH_PROTECT(lev);
 8010e14:	f00d fd2c 	bl	801e870 <sys_arch_protect>
 8010e18:	61f8      	str	r0, [r7, #28]
      if (conn->socket < 0) {
 8010e1a:	687b      	ldr	r3, [r7, #4]
 8010e1c:	699b      	ldr	r3, [r3, #24]
 8010e1e:	2b00      	cmp	r3, #0
 8010e20:	da0b      	bge.n	8010e3a <event_callback+0x4a>
        if (evt == NETCONN_EVT_RCVPLUS) {
 8010e22:	78fb      	ldrb	r3, [r7, #3]
 8010e24:	2b00      	cmp	r3, #0
 8010e26:	d104      	bne.n	8010e32 <event_callback+0x42>
          /* conn->socket is -1 on initialization
             lwip_accept adjusts sock->recvevent if conn->socket < -1 */
          conn->socket--;
 8010e28:	687b      	ldr	r3, [r7, #4]
 8010e2a:	699b      	ldr	r3, [r3, #24]
 8010e2c:	1e5a      	subs	r2, r3, #1
 8010e2e:	687b      	ldr	r3, [r7, #4]
 8010e30:	619a      	str	r2, [r3, #24]
        }
        SYS_ARCH_UNPROTECT(lev);
 8010e32:	69f8      	ldr	r0, [r7, #28]
 8010e34:	f00d fd2a 	bl	801e88c <sys_arch_unprotect>
        return;
 8010e38:	e08d      	b.n	8010f56 <event_callback+0x166>
      }
      s = conn->socket;
 8010e3a:	687b      	ldr	r3, [r7, #4]
 8010e3c:	699b      	ldr	r3, [r3, #24]
 8010e3e:	627b      	str	r3, [r7, #36]	; 0x24
      SYS_ARCH_UNPROTECT(lev);
 8010e40:	69f8      	ldr	r0, [r7, #28]
 8010e42:	f00d fd23 	bl	801e88c <sys_arch_unprotect>
    }

    sock = get_socket(s);
 8010e46:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010e48:	f7fe ffca 	bl	800fde0 <get_socket>
 8010e4c:	61b8      	str	r0, [r7, #24]
    if (!sock) {
 8010e4e:	69bb      	ldr	r3, [r7, #24]
 8010e50:	2b00      	cmp	r3, #0
 8010e52:	d07f      	beq.n	8010f54 <event_callback+0x164>
    }
  } else {
    return;
  }

  check_waiters = 1;
 8010e54:	2301      	movs	r3, #1
 8010e56:	623b      	str	r3, [r7, #32]
  SYS_ARCH_PROTECT(lev);
 8010e58:	f00d fd0a 	bl	801e870 <sys_arch_protect>
 8010e5c:	61f8      	str	r0, [r7, #28]
  /* Set event as required */
  switch (evt) {
 8010e5e:	78fb      	ldrb	r3, [r7, #3]
 8010e60:	2b04      	cmp	r3, #4
 8010e62:	d83e      	bhi.n	8010ee2 <event_callback+0xf2>
 8010e64:	a201      	add	r2, pc, #4	; (adr r2, 8010e6c <event_callback+0x7c>)
 8010e66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010e6a:	bf00      	nop
 8010e6c:	08010e81 	.word	0x08010e81
 8010e70:	08010ea3 	.word	0x08010ea3
 8010e74:	08010ebb 	.word	0x08010ebb
 8010e78:	08010ecf 	.word	0x08010ecf
 8010e7c:	08010edb 	.word	0x08010edb
    case NETCONN_EVT_RCVPLUS:
      sock->rcvevent++;
 8010e80:	69bb      	ldr	r3, [r7, #24]
 8010e82:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8010e86:	b29b      	uxth	r3, r3
 8010e88:	3301      	adds	r3, #1
 8010e8a:	b29b      	uxth	r3, r3
 8010e8c:	b21a      	sxth	r2, r3
 8010e8e:	69bb      	ldr	r3, [r7, #24]
 8010e90:	811a      	strh	r2, [r3, #8]
      if (sock->rcvevent > 1) {
 8010e92:	69bb      	ldr	r3, [r7, #24]
 8010e94:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8010e98:	2b01      	cmp	r3, #1
 8010e9a:	dd2a      	ble.n	8010ef2 <event_callback+0x102>
        check_waiters = 0;
 8010e9c:	2300      	movs	r3, #0
 8010e9e:	623b      	str	r3, [r7, #32]
      }
      break;
 8010ea0:	e027      	b.n	8010ef2 <event_callback+0x102>
    case NETCONN_EVT_RCVMINUS:
      sock->rcvevent--;
 8010ea2:	69bb      	ldr	r3, [r7, #24]
 8010ea4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8010ea8:	b29b      	uxth	r3, r3
 8010eaa:	3b01      	subs	r3, #1
 8010eac:	b29b      	uxth	r3, r3
 8010eae:	b21a      	sxth	r2, r3
 8010eb0:	69bb      	ldr	r3, [r7, #24]
 8010eb2:	811a      	strh	r2, [r3, #8]
      check_waiters = 0;
 8010eb4:	2300      	movs	r3, #0
 8010eb6:	623b      	str	r3, [r7, #32]
      break;
 8010eb8:	e01c      	b.n	8010ef4 <event_callback+0x104>
    case NETCONN_EVT_SENDPLUS:
      if (sock->sendevent) {
 8010eba:	69bb      	ldr	r3, [r7, #24]
 8010ebc:	895b      	ldrh	r3, [r3, #10]
 8010ebe:	2b00      	cmp	r3, #0
 8010ec0:	d001      	beq.n	8010ec6 <event_callback+0xd6>
        check_waiters = 0;
 8010ec2:	2300      	movs	r3, #0
 8010ec4:	623b      	str	r3, [r7, #32]
      }
      sock->sendevent = 1;
 8010ec6:	69bb      	ldr	r3, [r7, #24]
 8010ec8:	2201      	movs	r2, #1
 8010eca:	815a      	strh	r2, [r3, #10]
      break;
 8010ecc:	e012      	b.n	8010ef4 <event_callback+0x104>
    case NETCONN_EVT_SENDMINUS:
      sock->sendevent = 0;
 8010ece:	69bb      	ldr	r3, [r7, #24]
 8010ed0:	2200      	movs	r2, #0
 8010ed2:	815a      	strh	r2, [r3, #10]
      check_waiters = 0;
 8010ed4:	2300      	movs	r3, #0
 8010ed6:	623b      	str	r3, [r7, #32]
      break;
 8010ed8:	e00c      	b.n	8010ef4 <event_callback+0x104>
    case NETCONN_EVT_ERROR:
      sock->errevent = 1;
 8010eda:	69bb      	ldr	r3, [r7, #24]
 8010edc:	2201      	movs	r2, #1
 8010ede:	819a      	strh	r2, [r3, #12]
      break;
 8010ee0:	e008      	b.n	8010ef4 <event_callback+0x104>
    default:
      LWIP_ASSERT("unknown event", 0);
 8010ee2:	4b1e      	ldr	r3, [pc, #120]	; (8010f5c <event_callback+0x16c>)
 8010ee4:	f44f 621f 	mov.w	r2, #2544	; 0x9f0
 8010ee8:	491d      	ldr	r1, [pc, #116]	; (8010f60 <event_callback+0x170>)
 8010eea:	481e      	ldr	r0, [pc, #120]	; (8010f64 <event_callback+0x174>)
 8010eec:	f00e fb8a 	bl	801f604 <iprintf>
      break;
 8010ef0:	e000      	b.n	8010ef4 <event_callback+0x104>
      break;
 8010ef2:	bf00      	nop
  }

  if (sock->select_waiting && check_waiters) {
 8010ef4:	69bb      	ldr	r3, [r7, #24]
 8010ef6:	7b9b      	ldrb	r3, [r3, #14]
 8010ef8:	2b00      	cmp	r3, #0
 8010efa:	d025      	beq.n	8010f48 <event_callback+0x158>
 8010efc:	6a3b      	ldr	r3, [r7, #32]
 8010efe:	2b00      	cmp	r3, #0
 8010f00:	d022      	beq.n	8010f48 <event_callback+0x158>
    /* Save which events are active */
    int has_recvevent, has_sendevent, has_errevent;
    has_recvevent = sock->rcvevent > 0;
 8010f02:	69bb      	ldr	r3, [r7, #24]
 8010f04:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8010f08:	2b00      	cmp	r3, #0
 8010f0a:	bfcc      	ite	gt
 8010f0c:	2301      	movgt	r3, #1
 8010f0e:	2300      	movle	r3, #0
 8010f10:	b2db      	uxtb	r3, r3
 8010f12:	617b      	str	r3, [r7, #20]
    has_sendevent = sock->sendevent != 0;
 8010f14:	69bb      	ldr	r3, [r7, #24]
 8010f16:	895b      	ldrh	r3, [r3, #10]
 8010f18:	2b00      	cmp	r3, #0
 8010f1a:	bf14      	ite	ne
 8010f1c:	2301      	movne	r3, #1
 8010f1e:	2300      	moveq	r3, #0
 8010f20:	b2db      	uxtb	r3, r3
 8010f22:	613b      	str	r3, [r7, #16]
    has_errevent = sock->errevent != 0;
 8010f24:	69bb      	ldr	r3, [r7, #24]
 8010f26:	899b      	ldrh	r3, [r3, #12]
 8010f28:	2b00      	cmp	r3, #0
 8010f2a:	bf14      	ite	ne
 8010f2c:	2301      	movne	r3, #1
 8010f2e:	2300      	moveq	r3, #0
 8010f30:	b2db      	uxtb	r3, r3
 8010f32:	60fb      	str	r3, [r7, #12]
    SYS_ARCH_UNPROTECT(lev);
 8010f34:	69f8      	ldr	r0, [r7, #28]
 8010f36:	f00d fca9 	bl	801e88c <sys_arch_unprotect>
    /* Check any select calls waiting on this socket */
    select_check_waiters(s, has_recvevent, has_sendevent, has_errevent);
 8010f3a:	68fb      	ldr	r3, [r7, #12]
 8010f3c:	693a      	ldr	r2, [r7, #16]
 8010f3e:	6979      	ldr	r1, [r7, #20]
 8010f40:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010f42:	f000 f811 	bl	8010f68 <select_check_waiters>
  if (sock->select_waiting && check_waiters) {
 8010f46:	e006      	b.n	8010f56 <event_callback+0x166>
  } else {
    SYS_ARCH_UNPROTECT(lev);
 8010f48:	69f8      	ldr	r0, [r7, #28]
 8010f4a:	f00d fc9f 	bl	801e88c <sys_arch_unprotect>
 8010f4e:	e002      	b.n	8010f56 <event_callback+0x166>
    return;
 8010f50:	bf00      	nop
 8010f52:	e000      	b.n	8010f56 <event_callback+0x166>
      return;
 8010f54:	bf00      	nop
  }
  done_socket(sock);
}
 8010f56:	3728      	adds	r7, #40	; 0x28
 8010f58:	46bd      	mov	sp, r7
 8010f5a:	bd80      	pop	{r7, pc}
 8010f5c:	08023de8 	.word	0x08023de8
 8010f60:	08024164 	.word	0x08024164
 8010f64:	08023e3c 	.word	0x08023e3c

08010f68 <select_check_waiters>:
 * of the loop, thus creating a possibility where a thread could modify the
 * select_cb_list during our UNPROTECT/PROTECT. We use a generational counter to
 * detect this change and restart the list walk. The list is expected to be small
 */
static void select_check_waiters(int s, int has_recvevent, int has_sendevent, int has_errevent)
{
 8010f68:	b580      	push	{r7, lr}
 8010f6a:	b088      	sub	sp, #32
 8010f6c:	af02      	add	r7, sp, #8
 8010f6e:	60f8      	str	r0, [r7, #12]
 8010f70:	60b9      	str	r1, [r7, #8]
 8010f72:	607a      	str	r2, [r7, #4]
 8010f74:	603b      	str	r3, [r7, #0]
  SYS_ARCH_PROTECT(lev);
again:
  /* remember the state of select_cb_list to detect changes */
  last_select_cb_ctr = select_cb_ctr;
#endif /* !LWIP_TCPIP_CORE_LOCKING */
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 8010f76:	4b3e      	ldr	r3, [pc, #248]	; (8011070 <select_check_waiters+0x108>)
 8010f78:	681b      	ldr	r3, [r3, #0]
 8010f7a:	617b      	str	r3, [r7, #20]
 8010f7c:	e06f      	b.n	801105e <select_check_waiters+0xf6>
    if (scb->sem_signalled == 0) {
 8010f7e:	697b      	ldr	r3, [r7, #20]
 8010f80:	69db      	ldr	r3, [r3, #28]
 8010f82:	2b00      	cmp	r3, #0
 8010f84:	d168      	bne.n	8011058 <select_check_waiters+0xf0>
      /* semaphore not signalled yet */
      int do_signal = 0;
 8010f86:	2300      	movs	r3, #0
 8010f88:	613b      	str	r3, [r7, #16]
#if LWIP_SOCKET_POLL
      if (scb->poll_fds != NULL) {
 8010f8a:	697b      	ldr	r3, [r7, #20]
 8010f8c:	695b      	ldr	r3, [r3, #20]
 8010f8e:	2b00      	cmp	r3, #0
 8010f90:	d009      	beq.n	8010fa6 <select_check_waiters+0x3e>
        do_signal = lwip_poll_should_wake(scb, s, has_recvevent, has_sendevent, has_errevent);
 8010f92:	683b      	ldr	r3, [r7, #0]
 8010f94:	9300      	str	r3, [sp, #0]
 8010f96:	687b      	ldr	r3, [r7, #4]
 8010f98:	68ba      	ldr	r2, [r7, #8]
 8010f9a:	68f9      	ldr	r1, [r7, #12]
 8010f9c:	6978      	ldr	r0, [r7, #20]
 8010f9e:	f7ff fee4 	bl	8010d6a <lwip_poll_should_wake>
 8010fa2:	6138      	str	r0, [r7, #16]
 8010fa4:	e04d      	b.n	8011042 <select_check_waiters+0xda>
      else
#endif /* LWIP_SOCKET_SELECT && LWIP_SOCKET_POLL */
#if LWIP_SOCKET_SELECT
      {
        /* Test this select call for our socket */
        if (has_recvevent) {
 8010fa6:	68bb      	ldr	r3, [r7, #8]
 8010fa8:	2b00      	cmp	r3, #0
 8010faa:	d014      	beq.n	8010fd6 <select_check_waiters+0x6e>
          if (scb->readset && FD_ISSET(s, scb->readset)) {
 8010fac:	697b      	ldr	r3, [r7, #20]
 8010fae:	689b      	ldr	r3, [r3, #8]
 8010fb0:	2b00      	cmp	r3, #0
 8010fb2:	d010      	beq.n	8010fd6 <select_check_waiters+0x6e>
 8010fb4:	697b      	ldr	r3, [r7, #20]
 8010fb6:	689b      	ldr	r3, [r3, #8]
 8010fb8:	68fa      	ldr	r2, [r7, #12]
 8010fba:	0952      	lsrs	r2, r2, #5
 8010fbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010fc0:	68fa      	ldr	r2, [r7, #12]
 8010fc2:	f002 021f 	and.w	r2, r2, #31
 8010fc6:	2101      	movs	r1, #1
 8010fc8:	fa01 f202 	lsl.w	r2, r1, r2
 8010fcc:	4013      	ands	r3, r2
 8010fce:	2b00      	cmp	r3, #0
 8010fd0:	d001      	beq.n	8010fd6 <select_check_waiters+0x6e>
            do_signal = 1;
 8010fd2:	2301      	movs	r3, #1
 8010fd4:	613b      	str	r3, [r7, #16]
          }
        }
        if (has_sendevent) {
 8010fd6:	687b      	ldr	r3, [r7, #4]
 8010fd8:	2b00      	cmp	r3, #0
 8010fda:	d017      	beq.n	801100c <select_check_waiters+0xa4>
          if (!do_signal && scb->writeset && FD_ISSET(s, scb->writeset)) {
 8010fdc:	693b      	ldr	r3, [r7, #16]
 8010fde:	2b00      	cmp	r3, #0
 8010fe0:	d114      	bne.n	801100c <select_check_waiters+0xa4>
 8010fe2:	697b      	ldr	r3, [r7, #20]
 8010fe4:	68db      	ldr	r3, [r3, #12]
 8010fe6:	2b00      	cmp	r3, #0
 8010fe8:	d010      	beq.n	801100c <select_check_waiters+0xa4>
 8010fea:	697b      	ldr	r3, [r7, #20]
 8010fec:	68db      	ldr	r3, [r3, #12]
 8010fee:	68fa      	ldr	r2, [r7, #12]
 8010ff0:	0952      	lsrs	r2, r2, #5
 8010ff2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010ff6:	68fa      	ldr	r2, [r7, #12]
 8010ff8:	f002 021f 	and.w	r2, r2, #31
 8010ffc:	2101      	movs	r1, #1
 8010ffe:	fa01 f202 	lsl.w	r2, r1, r2
 8011002:	4013      	ands	r3, r2
 8011004:	2b00      	cmp	r3, #0
 8011006:	d001      	beq.n	801100c <select_check_waiters+0xa4>
            do_signal = 1;
 8011008:	2301      	movs	r3, #1
 801100a:	613b      	str	r3, [r7, #16]
          }
        }
        if (has_errevent) {
 801100c:	683b      	ldr	r3, [r7, #0]
 801100e:	2b00      	cmp	r3, #0
 8011010:	d017      	beq.n	8011042 <select_check_waiters+0xda>
          if (!do_signal && scb->exceptset && FD_ISSET(s, scb->exceptset)) {
 8011012:	693b      	ldr	r3, [r7, #16]
 8011014:	2b00      	cmp	r3, #0
 8011016:	d114      	bne.n	8011042 <select_check_waiters+0xda>
 8011018:	697b      	ldr	r3, [r7, #20]
 801101a:	691b      	ldr	r3, [r3, #16]
 801101c:	2b00      	cmp	r3, #0
 801101e:	d010      	beq.n	8011042 <select_check_waiters+0xda>
 8011020:	697b      	ldr	r3, [r7, #20]
 8011022:	691b      	ldr	r3, [r3, #16]
 8011024:	68fa      	ldr	r2, [r7, #12]
 8011026:	0952      	lsrs	r2, r2, #5
 8011028:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801102c:	68fa      	ldr	r2, [r7, #12]
 801102e:	f002 021f 	and.w	r2, r2, #31
 8011032:	2101      	movs	r1, #1
 8011034:	fa01 f202 	lsl.w	r2, r1, r2
 8011038:	4013      	ands	r3, r2
 801103a:	2b00      	cmp	r3, #0
 801103c:	d001      	beq.n	8011042 <select_check_waiters+0xda>
            do_signal = 1;
 801103e:	2301      	movs	r3, #1
 8011040:	613b      	str	r3, [r7, #16]
          }
        }
      }
#endif /* LWIP_SOCKET_SELECT */
      if (do_signal) {
 8011042:	693b      	ldr	r3, [r7, #16]
 8011044:	2b00      	cmp	r3, #0
 8011046:	d007      	beq.n	8011058 <select_check_waiters+0xf0>
        scb->sem_signalled = 1;
 8011048:	697b      	ldr	r3, [r7, #20]
 801104a:	2201      	movs	r2, #1
 801104c:	61da      	str	r2, [r3, #28]
        /* For !LWIP_TCPIP_CORE_LOCKING, we don't call SYS_ARCH_UNPROTECT() before signaling
           the semaphore, as this might lead to the select thread taking itself off the list,
           invalidating the semaphore. */
        sys_sem_signal(SELECT_SEM_PTR(scb->sem));
 801104e:	697b      	ldr	r3, [r7, #20]
 8011050:	3320      	adds	r3, #32
 8011052:	4618      	mov	r0, r3
 8011054:	f00d fb68 	bl	801e728 <sys_sem_signal>
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 8011058:	697b      	ldr	r3, [r7, #20]
 801105a:	681b      	ldr	r3, [r3, #0]
 801105c:	617b      	str	r3, [r7, #20]
 801105e:	697b      	ldr	r3, [r7, #20]
 8011060:	2b00      	cmp	r3, #0
 8011062:	d18c      	bne.n	8010f7e <select_check_waiters+0x16>
    /* remember the state of select_cb_list to detect changes */
    last_select_cb_ctr = select_cb_ctr;
  }
  SYS_ARCH_UNPROTECT(lev);
#endif
}
 8011064:	bf00      	nop
 8011066:	bf00      	nop
 8011068:	3718      	adds	r7, #24
 801106a:	46bd      	mov	sp, r7
 801106c:	bd80      	pop	{r7, pc}
 801106e:	bf00      	nop
 8011070:	240044e8 	.word	0x240044e8

08011074 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8011074:	b580      	push	{r7, lr}
 8011076:	b084      	sub	sp, #16
 8011078:	af00      	add	r7, sp, #0
 801107a:	6078      	str	r0, [r7, #4]
 801107c:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 801107e:	f008 fb07 	bl	8019690 <sys_timeouts_sleeptime>
 8011082:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8011084:	68fb      	ldr	r3, [r7, #12]
 8011086:	f1b3 3fff 	cmp.w	r3, #4294967295
 801108a:	d10b      	bne.n	80110a4 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 801108c:	4813      	ldr	r0, [pc, #76]	; (80110dc <tcpip_timeouts_mbox_fetch+0x68>)
 801108e:	f00d fbbc 	bl	801e80a <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8011092:	2200      	movs	r2, #0
 8011094:	6839      	ldr	r1, [r7, #0]
 8011096:	6878      	ldr	r0, [r7, #4]
 8011098:	f00d fa74 	bl	801e584 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 801109c:	480f      	ldr	r0, [pc, #60]	; (80110dc <tcpip_timeouts_mbox_fetch+0x68>)
 801109e:	f00d fba5 	bl	801e7ec <sys_mutex_lock>
    return;
 80110a2:	e018      	b.n	80110d6 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 80110a4:	68fb      	ldr	r3, [r7, #12]
 80110a6:	2b00      	cmp	r3, #0
 80110a8:	d102      	bne.n	80110b0 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 80110aa:	f008 fab7 	bl	801961c <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 80110ae:	e7e6      	b.n	801107e <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 80110b0:	480a      	ldr	r0, [pc, #40]	; (80110dc <tcpip_timeouts_mbox_fetch+0x68>)
 80110b2:	f00d fbaa 	bl	801e80a <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 80110b6:	68fa      	ldr	r2, [r7, #12]
 80110b8:	6839      	ldr	r1, [r7, #0]
 80110ba:	6878      	ldr	r0, [r7, #4]
 80110bc:	f00d fa62 	bl	801e584 <sys_arch_mbox_fetch>
 80110c0:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 80110c2:	4806      	ldr	r0, [pc, #24]	; (80110dc <tcpip_timeouts_mbox_fetch+0x68>)
 80110c4:	f00d fb92 	bl	801e7ec <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 80110c8:	68bb      	ldr	r3, [r7, #8]
 80110ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80110ce:	d102      	bne.n	80110d6 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 80110d0:	f008 faa4 	bl	801961c <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 80110d4:	e7d3      	b.n	801107e <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 80110d6:	3710      	adds	r7, #16
 80110d8:	46bd      	mov	sp, r7
 80110da:	bd80      	pop	{r7, pc}
 80110dc:	24004e58 	.word	0x24004e58

080110e0 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 80110e0:	b580      	push	{r7, lr}
 80110e2:	b084      	sub	sp, #16
 80110e4:	af00      	add	r7, sp, #0
 80110e6:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 80110e8:	4810      	ldr	r0, [pc, #64]	; (801112c <tcpip_thread+0x4c>)
 80110ea:	f00d fb7f 	bl	801e7ec <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 80110ee:	4b10      	ldr	r3, [pc, #64]	; (8011130 <tcpip_thread+0x50>)
 80110f0:	681b      	ldr	r3, [r3, #0]
 80110f2:	2b00      	cmp	r3, #0
 80110f4:	d005      	beq.n	8011102 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 80110f6:	4b0e      	ldr	r3, [pc, #56]	; (8011130 <tcpip_thread+0x50>)
 80110f8:	681b      	ldr	r3, [r3, #0]
 80110fa:	4a0e      	ldr	r2, [pc, #56]	; (8011134 <tcpip_thread+0x54>)
 80110fc:	6812      	ldr	r2, [r2, #0]
 80110fe:	4610      	mov	r0, r2
 8011100:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8011102:	f107 030c 	add.w	r3, r7, #12
 8011106:	4619      	mov	r1, r3
 8011108:	480b      	ldr	r0, [pc, #44]	; (8011138 <tcpip_thread+0x58>)
 801110a:	f7ff ffb3 	bl	8011074 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 801110e:	68fb      	ldr	r3, [r7, #12]
 8011110:	2b00      	cmp	r3, #0
 8011112:	d106      	bne.n	8011122 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8011114:	4b09      	ldr	r3, [pc, #36]	; (801113c <tcpip_thread+0x5c>)
 8011116:	2291      	movs	r2, #145	; 0x91
 8011118:	4909      	ldr	r1, [pc, #36]	; (8011140 <tcpip_thread+0x60>)
 801111a:	480a      	ldr	r0, [pc, #40]	; (8011144 <tcpip_thread+0x64>)
 801111c:	f00e fa72 	bl	801f604 <iprintf>
      continue;
 8011120:	e003      	b.n	801112a <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 8011122:	68fb      	ldr	r3, [r7, #12]
 8011124:	4618      	mov	r0, r3
 8011126:	f000 f80f 	bl	8011148 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 801112a:	e7ea      	b.n	8011102 <tcpip_thread+0x22>
 801112c:	24004e58 	.word	0x24004e58
 8011130:	240044ec 	.word	0x240044ec
 8011134:	240044f0 	.word	0x240044f0
 8011138:	240044f4 	.word	0x240044f4
 801113c:	080241b8 	.word	0x080241b8
 8011140:	080241e8 	.word	0x080241e8
 8011144:	08024208 	.word	0x08024208

08011148 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8011148:	b580      	push	{r7, lr}
 801114a:	b082      	sub	sp, #8
 801114c:	af00      	add	r7, sp, #0
 801114e:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8011150:	687b      	ldr	r3, [r7, #4]
 8011152:	781b      	ldrb	r3, [r3, #0]
 8011154:	2b02      	cmp	r3, #2
 8011156:	d026      	beq.n	80111a6 <tcpip_thread_handle_msg+0x5e>
 8011158:	2b02      	cmp	r3, #2
 801115a:	dc2b      	bgt.n	80111b4 <tcpip_thread_handle_msg+0x6c>
 801115c:	2b00      	cmp	r3, #0
 801115e:	d002      	beq.n	8011166 <tcpip_thread_handle_msg+0x1e>
 8011160:	2b01      	cmp	r3, #1
 8011162:	d015      	beq.n	8011190 <tcpip_thread_handle_msg+0x48>
 8011164:	e026      	b.n	80111b4 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 8011166:	687b      	ldr	r3, [r7, #4]
 8011168:	68db      	ldr	r3, [r3, #12]
 801116a:	687a      	ldr	r2, [r7, #4]
 801116c:	6850      	ldr	r0, [r2, #4]
 801116e:	687a      	ldr	r2, [r7, #4]
 8011170:	6892      	ldr	r2, [r2, #8]
 8011172:	4611      	mov	r1, r2
 8011174:	4798      	blx	r3
 8011176:	4603      	mov	r3, r0
 8011178:	2b00      	cmp	r3, #0
 801117a:	d004      	beq.n	8011186 <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 801117c:	687b      	ldr	r3, [r7, #4]
 801117e:	685b      	ldr	r3, [r3, #4]
 8011180:	4618      	mov	r0, r3
 8011182:	f001 fe17 	bl	8012db4 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8011186:	6879      	ldr	r1, [r7, #4]
 8011188:	2009      	movs	r0, #9
 801118a:	f000 ff31 	bl	8011ff0 <memp_free>
      break;
 801118e:	e018      	b.n	80111c2 <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	685b      	ldr	r3, [r3, #4]
 8011194:	687a      	ldr	r2, [r7, #4]
 8011196:	6892      	ldr	r2, [r2, #8]
 8011198:	4610      	mov	r0, r2
 801119a:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 801119c:	6879      	ldr	r1, [r7, #4]
 801119e:	2008      	movs	r0, #8
 80111a0:	f000 ff26 	bl	8011ff0 <memp_free>
      break;
 80111a4:	e00d      	b.n	80111c2 <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 80111a6:	687b      	ldr	r3, [r7, #4]
 80111a8:	685b      	ldr	r3, [r3, #4]
 80111aa:	687a      	ldr	r2, [r7, #4]
 80111ac:	6892      	ldr	r2, [r2, #8]
 80111ae:	4610      	mov	r0, r2
 80111b0:	4798      	blx	r3
      break;
 80111b2:	e006      	b.n	80111c2 <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80111b4:	4b05      	ldr	r3, [pc, #20]	; (80111cc <tcpip_thread_handle_msg+0x84>)
 80111b6:	22cf      	movs	r2, #207	; 0xcf
 80111b8:	4905      	ldr	r1, [pc, #20]	; (80111d0 <tcpip_thread_handle_msg+0x88>)
 80111ba:	4806      	ldr	r0, [pc, #24]	; (80111d4 <tcpip_thread_handle_msg+0x8c>)
 80111bc:	f00e fa22 	bl	801f604 <iprintf>
      break;
 80111c0:	bf00      	nop
  }
}
 80111c2:	bf00      	nop
 80111c4:	3708      	adds	r7, #8
 80111c6:	46bd      	mov	sp, r7
 80111c8:	bd80      	pop	{r7, pc}
 80111ca:	bf00      	nop
 80111cc:	080241b8 	.word	0x080241b8
 80111d0:	080241e8 	.word	0x080241e8
 80111d4:	08024208 	.word	0x08024208

080111d8 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 80111d8:	b580      	push	{r7, lr}
 80111da:	b086      	sub	sp, #24
 80111dc:	af00      	add	r7, sp, #0
 80111de:	60f8      	str	r0, [r7, #12]
 80111e0:	60b9      	str	r1, [r7, #8]
 80111e2:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 80111e4:	481a      	ldr	r0, [pc, #104]	; (8011250 <tcpip_inpkt+0x78>)
 80111e6:	f00d fa28 	bl	801e63a <sys_mbox_valid>
 80111ea:	4603      	mov	r3, r0
 80111ec:	2b00      	cmp	r3, #0
 80111ee:	d105      	bne.n	80111fc <tcpip_inpkt+0x24>
 80111f0:	4b18      	ldr	r3, [pc, #96]	; (8011254 <tcpip_inpkt+0x7c>)
 80111f2:	22fc      	movs	r2, #252	; 0xfc
 80111f4:	4918      	ldr	r1, [pc, #96]	; (8011258 <tcpip_inpkt+0x80>)
 80111f6:	4819      	ldr	r0, [pc, #100]	; (801125c <tcpip_inpkt+0x84>)
 80111f8:	f00e fa04 	bl	801f604 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 80111fc:	2009      	movs	r0, #9
 80111fe:	f000 fe81 	bl	8011f04 <memp_malloc>
 8011202:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8011204:	697b      	ldr	r3, [r7, #20]
 8011206:	2b00      	cmp	r3, #0
 8011208:	d102      	bne.n	8011210 <tcpip_inpkt+0x38>
    return ERR_MEM;
 801120a:	f04f 33ff 	mov.w	r3, #4294967295
 801120e:	e01a      	b.n	8011246 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8011210:	697b      	ldr	r3, [r7, #20]
 8011212:	2200      	movs	r2, #0
 8011214:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 8011216:	697b      	ldr	r3, [r7, #20]
 8011218:	68fa      	ldr	r2, [r7, #12]
 801121a:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 801121c:	697b      	ldr	r3, [r7, #20]
 801121e:	68ba      	ldr	r2, [r7, #8]
 8011220:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 8011222:	697b      	ldr	r3, [r7, #20]
 8011224:	687a      	ldr	r2, [r7, #4]
 8011226:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8011228:	6979      	ldr	r1, [r7, #20]
 801122a:	4809      	ldr	r0, [pc, #36]	; (8011250 <tcpip_inpkt+0x78>)
 801122c:	f00d f990 	bl	801e550 <sys_mbox_trypost>
 8011230:	4603      	mov	r3, r0
 8011232:	2b00      	cmp	r3, #0
 8011234:	d006      	beq.n	8011244 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8011236:	6979      	ldr	r1, [r7, #20]
 8011238:	2009      	movs	r0, #9
 801123a:	f000 fed9 	bl	8011ff0 <memp_free>
    return ERR_MEM;
 801123e:	f04f 33ff 	mov.w	r3, #4294967295
 8011242:	e000      	b.n	8011246 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 8011244:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8011246:	4618      	mov	r0, r3
 8011248:	3718      	adds	r7, #24
 801124a:	46bd      	mov	sp, r7
 801124c:	bd80      	pop	{r7, pc}
 801124e:	bf00      	nop
 8011250:	240044f4 	.word	0x240044f4
 8011254:	080241b8 	.word	0x080241b8
 8011258:	08024230 	.word	0x08024230
 801125c:	08024208 	.word	0x08024208

08011260 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8011260:	b580      	push	{r7, lr}
 8011262:	b082      	sub	sp, #8
 8011264:	af00      	add	r7, sp, #0
 8011266:	6078      	str	r0, [r7, #4]
 8011268:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 801126a:	683b      	ldr	r3, [r7, #0]
 801126c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8011270:	f003 0318 	and.w	r3, r3, #24
 8011274:	2b00      	cmp	r3, #0
 8011276:	d006      	beq.n	8011286 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8011278:	4a08      	ldr	r2, [pc, #32]	; (801129c <tcpip_input+0x3c>)
 801127a:	6839      	ldr	r1, [r7, #0]
 801127c:	6878      	ldr	r0, [r7, #4]
 801127e:	f7ff ffab 	bl	80111d8 <tcpip_inpkt>
 8011282:	4603      	mov	r3, r0
 8011284:	e005      	b.n	8011292 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 8011286:	4a06      	ldr	r2, [pc, #24]	; (80112a0 <tcpip_input+0x40>)
 8011288:	6839      	ldr	r1, [r7, #0]
 801128a:	6878      	ldr	r0, [r7, #4]
 801128c:	f7ff ffa4 	bl	80111d8 <tcpip_inpkt>
 8011290:	4603      	mov	r3, r0
}
 8011292:	4618      	mov	r0, r3
 8011294:	3708      	adds	r7, #8
 8011296:	46bd      	mov	sp, r7
 8011298:	bd80      	pop	{r7, pc}
 801129a:	bf00      	nop
 801129c:	0801e33d 	.word	0x0801e33d
 80112a0:	0801d215 	.word	0x0801d215

080112a4 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 80112a4:	b580      	push	{r7, lr}
 80112a6:	b084      	sub	sp, #16
 80112a8:	af00      	add	r7, sp, #0
 80112aa:	6078      	str	r0, [r7, #4]
 80112ac:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 80112ae:	4819      	ldr	r0, [pc, #100]	; (8011314 <tcpip_try_callback+0x70>)
 80112b0:	f00d f9c3 	bl	801e63a <sys_mbox_valid>
 80112b4:	4603      	mov	r3, r0
 80112b6:	2b00      	cmp	r3, #0
 80112b8:	d106      	bne.n	80112c8 <tcpip_try_callback+0x24>
 80112ba:	4b17      	ldr	r3, [pc, #92]	; (8011318 <tcpip_try_callback+0x74>)
 80112bc:	f240 125d 	movw	r2, #349	; 0x15d
 80112c0:	4916      	ldr	r1, [pc, #88]	; (801131c <tcpip_try_callback+0x78>)
 80112c2:	4817      	ldr	r0, [pc, #92]	; (8011320 <tcpip_try_callback+0x7c>)
 80112c4:	f00e f99e 	bl	801f604 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 80112c8:	2008      	movs	r0, #8
 80112ca:	f000 fe1b 	bl	8011f04 <memp_malloc>
 80112ce:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 80112d0:	68fb      	ldr	r3, [r7, #12]
 80112d2:	2b00      	cmp	r3, #0
 80112d4:	d102      	bne.n	80112dc <tcpip_try_callback+0x38>
    return ERR_MEM;
 80112d6:	f04f 33ff 	mov.w	r3, #4294967295
 80112da:	e017      	b.n	801130c <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 80112dc:	68fb      	ldr	r3, [r7, #12]
 80112de:	2201      	movs	r2, #1
 80112e0:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 80112e2:	68fb      	ldr	r3, [r7, #12]
 80112e4:	687a      	ldr	r2, [r7, #4]
 80112e6:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 80112e8:	68fb      	ldr	r3, [r7, #12]
 80112ea:	683a      	ldr	r2, [r7, #0]
 80112ec:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80112ee:	68f9      	ldr	r1, [r7, #12]
 80112f0:	4808      	ldr	r0, [pc, #32]	; (8011314 <tcpip_try_callback+0x70>)
 80112f2:	f00d f92d 	bl	801e550 <sys_mbox_trypost>
 80112f6:	4603      	mov	r3, r0
 80112f8:	2b00      	cmp	r3, #0
 80112fa:	d006      	beq.n	801130a <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 80112fc:	68f9      	ldr	r1, [r7, #12]
 80112fe:	2008      	movs	r0, #8
 8011300:	f000 fe76 	bl	8011ff0 <memp_free>
    return ERR_MEM;
 8011304:	f04f 33ff 	mov.w	r3, #4294967295
 8011308:	e000      	b.n	801130c <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 801130a:	2300      	movs	r3, #0
}
 801130c:	4618      	mov	r0, r3
 801130e:	3710      	adds	r7, #16
 8011310:	46bd      	mov	sp, r7
 8011312:	bd80      	pop	{r7, pc}
 8011314:	240044f4 	.word	0x240044f4
 8011318:	080241b8 	.word	0x080241b8
 801131c:	08024230 	.word	0x08024230
 8011320:	08024208 	.word	0x08024208

08011324 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 8011324:	b580      	push	{r7, lr}
 8011326:	b084      	sub	sp, #16
 8011328:	af00      	add	r7, sp, #0
 801132a:	60f8      	str	r0, [r7, #12]
 801132c:	60b9      	str	r1, [r7, #8]
 801132e:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 8011330:	4806      	ldr	r0, [pc, #24]	; (801134c <tcpip_send_msg_wait_sem+0x28>)
 8011332:	f00d fa5b 	bl	801e7ec <sys_mutex_lock>
  fn(apimsg);
 8011336:	68fb      	ldr	r3, [r7, #12]
 8011338:	68b8      	ldr	r0, [r7, #8]
 801133a:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 801133c:	4803      	ldr	r0, [pc, #12]	; (801134c <tcpip_send_msg_wait_sem+0x28>)
 801133e:	f00d fa64 	bl	801e80a <sys_mutex_unlock>
  return ERR_OK;
 8011342:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 8011344:	4618      	mov	r0, r3
 8011346:	3710      	adds	r7, #16
 8011348:	46bd      	mov	sp, r7
 801134a:	bd80      	pop	{r7, pc}
 801134c:	24004e58 	.word	0x24004e58

08011350 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8011350:	b580      	push	{r7, lr}
 8011352:	b084      	sub	sp, #16
 8011354:	af02      	add	r7, sp, #8
 8011356:	6078      	str	r0, [r7, #4]
 8011358:	6039      	str	r1, [r7, #0]
  lwip_init();
 801135a:	f000 f92d 	bl	80115b8 <lwip_init>

  tcpip_init_done = initfunc;
 801135e:	4a17      	ldr	r2, [pc, #92]	; (80113bc <tcpip_init+0x6c>)
 8011360:	687b      	ldr	r3, [r7, #4]
 8011362:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8011364:	4a16      	ldr	r2, [pc, #88]	; (80113c0 <tcpip_init+0x70>)
 8011366:	683b      	ldr	r3, [r7, #0]
 8011368:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 801136a:	2106      	movs	r1, #6
 801136c:	4815      	ldr	r0, [pc, #84]	; (80113c4 <tcpip_init+0x74>)
 801136e:	f00d f8bb 	bl	801e4e8 <sys_mbox_new>
 8011372:	4603      	mov	r3, r0
 8011374:	2b00      	cmp	r3, #0
 8011376:	d006      	beq.n	8011386 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8011378:	4b13      	ldr	r3, [pc, #76]	; (80113c8 <tcpip_init+0x78>)
 801137a:	f240 2261 	movw	r2, #609	; 0x261
 801137e:	4913      	ldr	r1, [pc, #76]	; (80113cc <tcpip_init+0x7c>)
 8011380:	4813      	ldr	r0, [pc, #76]	; (80113d0 <tcpip_init+0x80>)
 8011382:	f00e f93f 	bl	801f604 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8011386:	4813      	ldr	r0, [pc, #76]	; (80113d4 <tcpip_init+0x84>)
 8011388:	f00d fa14 	bl	801e7b4 <sys_mutex_new>
 801138c:	4603      	mov	r3, r0
 801138e:	2b00      	cmp	r3, #0
 8011390:	d006      	beq.n	80113a0 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8011392:	4b0d      	ldr	r3, [pc, #52]	; (80113c8 <tcpip_init+0x78>)
 8011394:	f240 2265 	movw	r2, #613	; 0x265
 8011398:	490f      	ldr	r1, [pc, #60]	; (80113d8 <tcpip_init+0x88>)
 801139a:	480d      	ldr	r0, [pc, #52]	; (80113d0 <tcpip_init+0x80>)
 801139c:	f00e f932 	bl	801f604 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 80113a0:	2300      	movs	r3, #0
 80113a2:	9300      	str	r3, [sp, #0]
 80113a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80113a8:	2200      	movs	r2, #0
 80113aa:	490c      	ldr	r1, [pc, #48]	; (80113dc <tcpip_init+0x8c>)
 80113ac:	480c      	ldr	r0, [pc, #48]	; (80113e0 <tcpip_init+0x90>)
 80113ae:	f00d fa39 	bl	801e824 <sys_thread_new>
}
 80113b2:	bf00      	nop
 80113b4:	3708      	adds	r7, #8
 80113b6:	46bd      	mov	sp, r7
 80113b8:	bd80      	pop	{r7, pc}
 80113ba:	bf00      	nop
 80113bc:	240044ec 	.word	0x240044ec
 80113c0:	240044f0 	.word	0x240044f0
 80113c4:	240044f4 	.word	0x240044f4
 80113c8:	080241b8 	.word	0x080241b8
 80113cc:	08024240 	.word	0x08024240
 80113d0:	08024208 	.word	0x08024208
 80113d4:	24004e58 	.word	0x24004e58
 80113d8:	08024264 	.word	0x08024264
 80113dc:	080110e1 	.word	0x080110e1
 80113e0:	08024288 	.word	0x08024288

080113e4 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 80113e4:	b480      	push	{r7}
 80113e6:	b083      	sub	sp, #12
 80113e8:	af00      	add	r7, sp, #0
 80113ea:	4603      	mov	r3, r0
 80113ec:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 80113ee:	88fb      	ldrh	r3, [r7, #6]
 80113f0:	021b      	lsls	r3, r3, #8
 80113f2:	b21a      	sxth	r2, r3
 80113f4:	88fb      	ldrh	r3, [r7, #6]
 80113f6:	0a1b      	lsrs	r3, r3, #8
 80113f8:	b29b      	uxth	r3, r3
 80113fa:	b21b      	sxth	r3, r3
 80113fc:	4313      	orrs	r3, r2
 80113fe:	b21b      	sxth	r3, r3
 8011400:	b29b      	uxth	r3, r3
}
 8011402:	4618      	mov	r0, r3
 8011404:	370c      	adds	r7, #12
 8011406:	46bd      	mov	sp, r7
 8011408:	f85d 7b04 	ldr.w	r7, [sp], #4
 801140c:	4770      	bx	lr

0801140e <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 801140e:	b480      	push	{r7}
 8011410:	b083      	sub	sp, #12
 8011412:	af00      	add	r7, sp, #0
 8011414:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8011416:	687b      	ldr	r3, [r7, #4]
 8011418:	061a      	lsls	r2, r3, #24
 801141a:	687b      	ldr	r3, [r7, #4]
 801141c:	021b      	lsls	r3, r3, #8
 801141e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8011422:	431a      	orrs	r2, r3
 8011424:	687b      	ldr	r3, [r7, #4]
 8011426:	0a1b      	lsrs	r3, r3, #8
 8011428:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801142c:	431a      	orrs	r2, r3
 801142e:	687b      	ldr	r3, [r7, #4]
 8011430:	0e1b      	lsrs	r3, r3, #24
 8011432:	4313      	orrs	r3, r2
}
 8011434:	4618      	mov	r0, r3
 8011436:	370c      	adds	r7, #12
 8011438:	46bd      	mov	sp, r7
 801143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801143e:	4770      	bx	lr

08011440 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 8011440:	b480      	push	{r7}
 8011442:	b089      	sub	sp, #36	; 0x24
 8011444:	af00      	add	r7, sp, #0
 8011446:	6078      	str	r0, [r7, #4]
 8011448:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 801144a:	687b      	ldr	r3, [r7, #4]
 801144c:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 801144e:	2300      	movs	r3, #0
 8011450:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 8011452:	2300      	movs	r3, #0
 8011454:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 8011456:	69fb      	ldr	r3, [r7, #28]
 8011458:	f003 0301 	and.w	r3, r3, #1
 801145c:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 801145e:	693b      	ldr	r3, [r7, #16]
 8011460:	2b00      	cmp	r3, #0
 8011462:	d00d      	beq.n	8011480 <lwip_standard_chksum+0x40>
 8011464:	683b      	ldr	r3, [r7, #0]
 8011466:	2b00      	cmp	r3, #0
 8011468:	dd0a      	ble.n	8011480 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 801146a:	69fa      	ldr	r2, [r7, #28]
 801146c:	1c53      	adds	r3, r2, #1
 801146e:	61fb      	str	r3, [r7, #28]
 8011470:	f107 030e 	add.w	r3, r7, #14
 8011474:	3301      	adds	r3, #1
 8011476:	7812      	ldrb	r2, [r2, #0]
 8011478:	701a      	strb	r2, [r3, #0]
    len--;
 801147a:	683b      	ldr	r3, [r7, #0]
 801147c:	3b01      	subs	r3, #1
 801147e:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 8011480:	69fb      	ldr	r3, [r7, #28]
 8011482:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 8011484:	e00a      	b.n	801149c <lwip_standard_chksum+0x5c>
    sum += *ps++;
 8011486:	69bb      	ldr	r3, [r7, #24]
 8011488:	1c9a      	adds	r2, r3, #2
 801148a:	61ba      	str	r2, [r7, #24]
 801148c:	881b      	ldrh	r3, [r3, #0]
 801148e:	461a      	mov	r2, r3
 8011490:	697b      	ldr	r3, [r7, #20]
 8011492:	4413      	add	r3, r2
 8011494:	617b      	str	r3, [r7, #20]
    len -= 2;
 8011496:	683b      	ldr	r3, [r7, #0]
 8011498:	3b02      	subs	r3, #2
 801149a:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 801149c:	683b      	ldr	r3, [r7, #0]
 801149e:	2b01      	cmp	r3, #1
 80114a0:	dcf1      	bgt.n	8011486 <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 80114a2:	683b      	ldr	r3, [r7, #0]
 80114a4:	2b00      	cmp	r3, #0
 80114a6:	dd04      	ble.n	80114b2 <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 80114a8:	f107 030e 	add.w	r3, r7, #14
 80114ac:	69ba      	ldr	r2, [r7, #24]
 80114ae:	7812      	ldrb	r2, [r2, #0]
 80114b0:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 80114b2:	89fb      	ldrh	r3, [r7, #14]
 80114b4:	461a      	mov	r2, r3
 80114b6:	697b      	ldr	r3, [r7, #20]
 80114b8:	4413      	add	r3, r2
 80114ba:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 80114bc:	697b      	ldr	r3, [r7, #20]
 80114be:	0c1a      	lsrs	r2, r3, #16
 80114c0:	697b      	ldr	r3, [r7, #20]
 80114c2:	b29b      	uxth	r3, r3
 80114c4:	4413      	add	r3, r2
 80114c6:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 80114c8:	697b      	ldr	r3, [r7, #20]
 80114ca:	0c1a      	lsrs	r2, r3, #16
 80114cc:	697b      	ldr	r3, [r7, #20]
 80114ce:	b29b      	uxth	r3, r3
 80114d0:	4413      	add	r3, r2
 80114d2:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 80114d4:	693b      	ldr	r3, [r7, #16]
 80114d6:	2b00      	cmp	r3, #0
 80114d8:	d007      	beq.n	80114ea <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 80114da:	697b      	ldr	r3, [r7, #20]
 80114dc:	021b      	lsls	r3, r3, #8
 80114de:	b29a      	uxth	r2, r3
 80114e0:	697b      	ldr	r3, [r7, #20]
 80114e2:	0a1b      	lsrs	r3, r3, #8
 80114e4:	b2db      	uxtb	r3, r3
 80114e6:	4313      	orrs	r3, r2
 80114e8:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 80114ea:	697b      	ldr	r3, [r7, #20]
 80114ec:	b29b      	uxth	r3, r3
}
 80114ee:	4618      	mov	r0, r3
 80114f0:	3724      	adds	r7, #36	; 0x24
 80114f2:	46bd      	mov	sp, r7
 80114f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114f8:	4770      	bx	lr

080114fa <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 80114fa:	b580      	push	{r7, lr}
 80114fc:	b082      	sub	sp, #8
 80114fe:	af00      	add	r7, sp, #0
 8011500:	6078      	str	r0, [r7, #4]
 8011502:	460b      	mov	r3, r1
 8011504:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 8011506:	887b      	ldrh	r3, [r7, #2]
 8011508:	4619      	mov	r1, r3
 801150a:	6878      	ldr	r0, [r7, #4]
 801150c:	f7ff ff98 	bl	8011440 <lwip_standard_chksum>
 8011510:	4603      	mov	r3, r0
 8011512:	43db      	mvns	r3, r3
 8011514:	b29b      	uxth	r3, r3
}
 8011516:	4618      	mov	r0, r3
 8011518:	3708      	adds	r7, #8
 801151a:	46bd      	mov	sp, r7
 801151c:	bd80      	pop	{r7, pc}

0801151e <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 801151e:	b580      	push	{r7, lr}
 8011520:	b086      	sub	sp, #24
 8011522:	af00      	add	r7, sp, #0
 8011524:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 8011526:	2300      	movs	r3, #0
 8011528:	60fb      	str	r3, [r7, #12]

  acc = 0;
 801152a:	2300      	movs	r3, #0
 801152c:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 801152e:	687b      	ldr	r3, [r7, #4]
 8011530:	613b      	str	r3, [r7, #16]
 8011532:	e02b      	b.n	801158c <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 8011534:	693b      	ldr	r3, [r7, #16]
 8011536:	685a      	ldr	r2, [r3, #4]
 8011538:	693b      	ldr	r3, [r7, #16]
 801153a:	895b      	ldrh	r3, [r3, #10]
 801153c:	4619      	mov	r1, r3
 801153e:	4610      	mov	r0, r2
 8011540:	f7ff ff7e 	bl	8011440 <lwip_standard_chksum>
 8011544:	4603      	mov	r3, r0
 8011546:	461a      	mov	r2, r3
 8011548:	697b      	ldr	r3, [r7, #20]
 801154a:	4413      	add	r3, r2
 801154c:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 801154e:	697b      	ldr	r3, [r7, #20]
 8011550:	0c1a      	lsrs	r2, r3, #16
 8011552:	697b      	ldr	r3, [r7, #20]
 8011554:	b29b      	uxth	r3, r3
 8011556:	4413      	add	r3, r2
 8011558:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 801155a:	693b      	ldr	r3, [r7, #16]
 801155c:	895b      	ldrh	r3, [r3, #10]
 801155e:	f003 0301 	and.w	r3, r3, #1
 8011562:	b29b      	uxth	r3, r3
 8011564:	2b00      	cmp	r3, #0
 8011566:	d00e      	beq.n	8011586 <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 8011568:	68fb      	ldr	r3, [r7, #12]
 801156a:	2b00      	cmp	r3, #0
 801156c:	bf0c      	ite	eq
 801156e:	2301      	moveq	r3, #1
 8011570:	2300      	movne	r3, #0
 8011572:	b2db      	uxtb	r3, r3
 8011574:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 8011576:	697b      	ldr	r3, [r7, #20]
 8011578:	021b      	lsls	r3, r3, #8
 801157a:	b29a      	uxth	r2, r3
 801157c:	697b      	ldr	r3, [r7, #20]
 801157e:	0a1b      	lsrs	r3, r3, #8
 8011580:	b2db      	uxtb	r3, r3
 8011582:	4313      	orrs	r3, r2
 8011584:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 8011586:	693b      	ldr	r3, [r7, #16]
 8011588:	681b      	ldr	r3, [r3, #0]
 801158a:	613b      	str	r3, [r7, #16]
 801158c:	693b      	ldr	r3, [r7, #16]
 801158e:	2b00      	cmp	r3, #0
 8011590:	d1d0      	bne.n	8011534 <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 8011592:	68fb      	ldr	r3, [r7, #12]
 8011594:	2b00      	cmp	r3, #0
 8011596:	d007      	beq.n	80115a8 <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 8011598:	697b      	ldr	r3, [r7, #20]
 801159a:	021b      	lsls	r3, r3, #8
 801159c:	b29a      	uxth	r2, r3
 801159e:	697b      	ldr	r3, [r7, #20]
 80115a0:	0a1b      	lsrs	r3, r3, #8
 80115a2:	b2db      	uxtb	r3, r3
 80115a4:	4313      	orrs	r3, r2
 80115a6:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 80115a8:	697b      	ldr	r3, [r7, #20]
 80115aa:	b29b      	uxth	r3, r3
 80115ac:	43db      	mvns	r3, r3
 80115ae:	b29b      	uxth	r3, r3
}
 80115b0:	4618      	mov	r0, r3
 80115b2:	3718      	adds	r7, #24
 80115b4:	46bd      	mov	sp, r7
 80115b6:	bd80      	pop	{r7, pc}

080115b8 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80115b8:	b580      	push	{r7, lr}
 80115ba:	b082      	sub	sp, #8
 80115bc:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 80115be:	2300      	movs	r3, #0
 80115c0:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 80115c2:	f00d f8e9 	bl	801e798 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 80115c6:	f000 f8d5 	bl	8011774 <mem_init>
  memp_init();
 80115ca:	f000 fc2d 	bl	8011e28 <memp_init>
  pbuf_init();
  netif_init();
 80115ce:	f000 fd39 	bl	8012044 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 80115d2:	f008 f895 	bl	8019700 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 80115d6:	f001 fe97 	bl	8013308 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 80115da:	f007 ffd7 	bl	801958c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 80115de:	bf00      	nop
 80115e0:	3708      	adds	r7, #8
 80115e2:	46bd      	mov	sp, r7
 80115e4:	bd80      	pop	{r7, pc}
	...

080115e8 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 80115e8:	b480      	push	{r7}
 80115ea:	b083      	sub	sp, #12
 80115ec:	af00      	add	r7, sp, #0
 80115ee:	4603      	mov	r3, r0
 80115f0:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 80115f2:	4b05      	ldr	r3, [pc, #20]	; (8011608 <ptr_to_mem+0x20>)
 80115f4:	681a      	ldr	r2, [r3, #0]
 80115f6:	88fb      	ldrh	r3, [r7, #6]
 80115f8:	4413      	add	r3, r2
}
 80115fa:	4618      	mov	r0, r3
 80115fc:	370c      	adds	r7, #12
 80115fe:	46bd      	mov	sp, r7
 8011600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011604:	4770      	bx	lr
 8011606:	bf00      	nop
 8011608:	240044f8 	.word	0x240044f8

0801160c <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 801160c:	b480      	push	{r7}
 801160e:	b083      	sub	sp, #12
 8011610:	af00      	add	r7, sp, #0
 8011612:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8011614:	4b05      	ldr	r3, [pc, #20]	; (801162c <mem_to_ptr+0x20>)
 8011616:	681b      	ldr	r3, [r3, #0]
 8011618:	687a      	ldr	r2, [r7, #4]
 801161a:	1ad3      	subs	r3, r2, r3
 801161c:	b29b      	uxth	r3, r3
}
 801161e:	4618      	mov	r0, r3
 8011620:	370c      	adds	r7, #12
 8011622:	46bd      	mov	sp, r7
 8011624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011628:	4770      	bx	lr
 801162a:	bf00      	nop
 801162c:	240044f8 	.word	0x240044f8

08011630 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8011630:	b590      	push	{r4, r7, lr}
 8011632:	b085      	sub	sp, #20
 8011634:	af00      	add	r7, sp, #0
 8011636:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8011638:	4b45      	ldr	r3, [pc, #276]	; (8011750 <plug_holes+0x120>)
 801163a:	681b      	ldr	r3, [r3, #0]
 801163c:	687a      	ldr	r2, [r7, #4]
 801163e:	429a      	cmp	r2, r3
 8011640:	d206      	bcs.n	8011650 <plug_holes+0x20>
 8011642:	4b44      	ldr	r3, [pc, #272]	; (8011754 <plug_holes+0x124>)
 8011644:	f240 12df 	movw	r2, #479	; 0x1df
 8011648:	4943      	ldr	r1, [pc, #268]	; (8011758 <plug_holes+0x128>)
 801164a:	4844      	ldr	r0, [pc, #272]	; (801175c <plug_holes+0x12c>)
 801164c:	f00d ffda 	bl	801f604 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8011650:	4b43      	ldr	r3, [pc, #268]	; (8011760 <plug_holes+0x130>)
 8011652:	681b      	ldr	r3, [r3, #0]
 8011654:	687a      	ldr	r2, [r7, #4]
 8011656:	429a      	cmp	r2, r3
 8011658:	d306      	bcc.n	8011668 <plug_holes+0x38>
 801165a:	4b3e      	ldr	r3, [pc, #248]	; (8011754 <plug_holes+0x124>)
 801165c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8011660:	4940      	ldr	r1, [pc, #256]	; (8011764 <plug_holes+0x134>)
 8011662:	483e      	ldr	r0, [pc, #248]	; (801175c <plug_holes+0x12c>)
 8011664:	f00d ffce 	bl	801f604 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8011668:	687b      	ldr	r3, [r7, #4]
 801166a:	791b      	ldrb	r3, [r3, #4]
 801166c:	2b00      	cmp	r3, #0
 801166e:	d006      	beq.n	801167e <plug_holes+0x4e>
 8011670:	4b38      	ldr	r3, [pc, #224]	; (8011754 <plug_holes+0x124>)
 8011672:	f240 12e1 	movw	r2, #481	; 0x1e1
 8011676:	493c      	ldr	r1, [pc, #240]	; (8011768 <plug_holes+0x138>)
 8011678:	4838      	ldr	r0, [pc, #224]	; (801175c <plug_holes+0x12c>)
 801167a:	f00d ffc3 	bl	801f604 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 801167e:	687b      	ldr	r3, [r7, #4]
 8011680:	881b      	ldrh	r3, [r3, #0]
 8011682:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8011686:	d906      	bls.n	8011696 <plug_holes+0x66>
 8011688:	4b32      	ldr	r3, [pc, #200]	; (8011754 <plug_holes+0x124>)
 801168a:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 801168e:	4937      	ldr	r1, [pc, #220]	; (801176c <plug_holes+0x13c>)
 8011690:	4832      	ldr	r0, [pc, #200]	; (801175c <plug_holes+0x12c>)
 8011692:	f00d ffb7 	bl	801f604 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8011696:	687b      	ldr	r3, [r7, #4]
 8011698:	881b      	ldrh	r3, [r3, #0]
 801169a:	4618      	mov	r0, r3
 801169c:	f7ff ffa4 	bl	80115e8 <ptr_to_mem>
 80116a0:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 80116a2:	687a      	ldr	r2, [r7, #4]
 80116a4:	68fb      	ldr	r3, [r7, #12]
 80116a6:	429a      	cmp	r2, r3
 80116a8:	d024      	beq.n	80116f4 <plug_holes+0xc4>
 80116aa:	68fb      	ldr	r3, [r7, #12]
 80116ac:	791b      	ldrb	r3, [r3, #4]
 80116ae:	2b00      	cmp	r3, #0
 80116b0:	d120      	bne.n	80116f4 <plug_holes+0xc4>
 80116b2:	4b2b      	ldr	r3, [pc, #172]	; (8011760 <plug_holes+0x130>)
 80116b4:	681b      	ldr	r3, [r3, #0]
 80116b6:	68fa      	ldr	r2, [r7, #12]
 80116b8:	429a      	cmp	r2, r3
 80116ba:	d01b      	beq.n	80116f4 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 80116bc:	4b2c      	ldr	r3, [pc, #176]	; (8011770 <plug_holes+0x140>)
 80116be:	681b      	ldr	r3, [r3, #0]
 80116c0:	68fa      	ldr	r2, [r7, #12]
 80116c2:	429a      	cmp	r2, r3
 80116c4:	d102      	bne.n	80116cc <plug_holes+0x9c>
      lfree = mem;
 80116c6:	4a2a      	ldr	r2, [pc, #168]	; (8011770 <plug_holes+0x140>)
 80116c8:	687b      	ldr	r3, [r7, #4]
 80116ca:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 80116cc:	68fb      	ldr	r3, [r7, #12]
 80116ce:	881a      	ldrh	r2, [r3, #0]
 80116d0:	687b      	ldr	r3, [r7, #4]
 80116d2:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 80116d4:	68fb      	ldr	r3, [r7, #12]
 80116d6:	881b      	ldrh	r3, [r3, #0]
 80116d8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80116dc:	d00a      	beq.n	80116f4 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 80116de:	68fb      	ldr	r3, [r7, #12]
 80116e0:	881b      	ldrh	r3, [r3, #0]
 80116e2:	4618      	mov	r0, r3
 80116e4:	f7ff ff80 	bl	80115e8 <ptr_to_mem>
 80116e8:	4604      	mov	r4, r0
 80116ea:	6878      	ldr	r0, [r7, #4]
 80116ec:	f7ff ff8e 	bl	801160c <mem_to_ptr>
 80116f0:	4603      	mov	r3, r0
 80116f2:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 80116f4:	687b      	ldr	r3, [r7, #4]
 80116f6:	885b      	ldrh	r3, [r3, #2]
 80116f8:	4618      	mov	r0, r3
 80116fa:	f7ff ff75 	bl	80115e8 <ptr_to_mem>
 80116fe:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8011700:	68ba      	ldr	r2, [r7, #8]
 8011702:	687b      	ldr	r3, [r7, #4]
 8011704:	429a      	cmp	r2, r3
 8011706:	d01f      	beq.n	8011748 <plug_holes+0x118>
 8011708:	68bb      	ldr	r3, [r7, #8]
 801170a:	791b      	ldrb	r3, [r3, #4]
 801170c:	2b00      	cmp	r3, #0
 801170e:	d11b      	bne.n	8011748 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8011710:	4b17      	ldr	r3, [pc, #92]	; (8011770 <plug_holes+0x140>)
 8011712:	681b      	ldr	r3, [r3, #0]
 8011714:	687a      	ldr	r2, [r7, #4]
 8011716:	429a      	cmp	r2, r3
 8011718:	d102      	bne.n	8011720 <plug_holes+0xf0>
      lfree = pmem;
 801171a:	4a15      	ldr	r2, [pc, #84]	; (8011770 <plug_holes+0x140>)
 801171c:	68bb      	ldr	r3, [r7, #8]
 801171e:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8011720:	687b      	ldr	r3, [r7, #4]
 8011722:	881a      	ldrh	r2, [r3, #0]
 8011724:	68bb      	ldr	r3, [r7, #8]
 8011726:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8011728:	687b      	ldr	r3, [r7, #4]
 801172a:	881b      	ldrh	r3, [r3, #0]
 801172c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8011730:	d00a      	beq.n	8011748 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8011732:	687b      	ldr	r3, [r7, #4]
 8011734:	881b      	ldrh	r3, [r3, #0]
 8011736:	4618      	mov	r0, r3
 8011738:	f7ff ff56 	bl	80115e8 <ptr_to_mem>
 801173c:	4604      	mov	r4, r0
 801173e:	68b8      	ldr	r0, [r7, #8]
 8011740:	f7ff ff64 	bl	801160c <mem_to_ptr>
 8011744:	4603      	mov	r3, r0
 8011746:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8011748:	bf00      	nop
 801174a:	3714      	adds	r7, #20
 801174c:	46bd      	mov	sp, r7
 801174e:	bd90      	pop	{r4, r7, pc}
 8011750:	240044f8 	.word	0x240044f8
 8011754:	08024298 	.word	0x08024298
 8011758:	080242c8 	.word	0x080242c8
 801175c:	080242e0 	.word	0x080242e0
 8011760:	240044fc 	.word	0x240044fc
 8011764:	08024308 	.word	0x08024308
 8011768:	08024324 	.word	0x08024324
 801176c:	08024340 	.word	0x08024340
 8011770:	24004504 	.word	0x24004504

08011774 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8011774:	b580      	push	{r7, lr}
 8011776:	b082      	sub	sp, #8
 8011778:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 801177a:	4b1d      	ldr	r3, [pc, #116]	; (80117f0 <mem_init+0x7c>)
 801177c:	4a1d      	ldr	r2, [pc, #116]	; (80117f4 <mem_init+0x80>)
 801177e:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8011780:	4b1b      	ldr	r3, [pc, #108]	; (80117f0 <mem_init+0x7c>)
 8011782:	681b      	ldr	r3, [r3, #0]
 8011784:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8011786:	687b      	ldr	r3, [r7, #4]
 8011788:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 801178c:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 801178e:	687b      	ldr	r3, [r7, #4]
 8011790:	2200      	movs	r2, #0
 8011792:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8011794:	687b      	ldr	r3, [r7, #4]
 8011796:	2200      	movs	r2, #0
 8011798:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 801179a:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 801179e:	f7ff ff23 	bl	80115e8 <ptr_to_mem>
 80117a2:	4603      	mov	r3, r0
 80117a4:	4a14      	ldr	r2, [pc, #80]	; (80117f8 <mem_init+0x84>)
 80117a6:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 80117a8:	4b13      	ldr	r3, [pc, #76]	; (80117f8 <mem_init+0x84>)
 80117aa:	681b      	ldr	r3, [r3, #0]
 80117ac:	2201      	movs	r2, #1
 80117ae:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 80117b0:	4b11      	ldr	r3, [pc, #68]	; (80117f8 <mem_init+0x84>)
 80117b2:	681b      	ldr	r3, [r3, #0]
 80117b4:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80117b8:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 80117ba:	4b0f      	ldr	r3, [pc, #60]	; (80117f8 <mem_init+0x84>)
 80117bc:	681b      	ldr	r3, [r3, #0]
 80117be:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80117c2:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 80117c4:	4b0a      	ldr	r3, [pc, #40]	; (80117f0 <mem_init+0x7c>)
 80117c6:	681b      	ldr	r3, [r3, #0]
 80117c8:	4a0c      	ldr	r2, [pc, #48]	; (80117fc <mem_init+0x88>)
 80117ca:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 80117cc:	480c      	ldr	r0, [pc, #48]	; (8011800 <mem_init+0x8c>)
 80117ce:	f00c fff1 	bl	801e7b4 <sys_mutex_new>
 80117d2:	4603      	mov	r3, r0
 80117d4:	2b00      	cmp	r3, #0
 80117d6:	d006      	beq.n	80117e6 <mem_init+0x72>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 80117d8:	4b0a      	ldr	r3, [pc, #40]	; (8011804 <mem_init+0x90>)
 80117da:	f240 221f 	movw	r2, #543	; 0x21f
 80117de:	490a      	ldr	r1, [pc, #40]	; (8011808 <mem_init+0x94>)
 80117e0:	480a      	ldr	r0, [pc, #40]	; (801180c <mem_init+0x98>)
 80117e2:	f00d ff0f 	bl	801f604 <iprintf>
  }
}
 80117e6:	bf00      	nop
 80117e8:	3708      	adds	r7, #8
 80117ea:	46bd      	mov	sp, r7
 80117ec:	bd80      	pop	{r7, pc}
 80117ee:	bf00      	nop
 80117f0:	240044f8 	.word	0x240044f8
 80117f4:	30044000 	.word	0x30044000
 80117f8:	240044fc 	.word	0x240044fc
 80117fc:	24004504 	.word	0x24004504
 8011800:	24004500 	.word	0x24004500
 8011804:	08024298 	.word	0x08024298
 8011808:	0802436c 	.word	0x0802436c
 801180c:	080242e0 	.word	0x080242e0

08011810 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8011810:	b580      	push	{r7, lr}
 8011812:	b086      	sub	sp, #24
 8011814:	af00      	add	r7, sp, #0
 8011816:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8011818:	6878      	ldr	r0, [r7, #4]
 801181a:	f7ff fef7 	bl	801160c <mem_to_ptr>
 801181e:	4603      	mov	r3, r0
 8011820:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8011822:	687b      	ldr	r3, [r7, #4]
 8011824:	881b      	ldrh	r3, [r3, #0]
 8011826:	4618      	mov	r0, r3
 8011828:	f7ff fede 	bl	80115e8 <ptr_to_mem>
 801182c:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	885b      	ldrh	r3, [r3, #2]
 8011832:	4618      	mov	r0, r3
 8011834:	f7ff fed8 	bl	80115e8 <ptr_to_mem>
 8011838:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 801183a:	687b      	ldr	r3, [r7, #4]
 801183c:	881b      	ldrh	r3, [r3, #0]
 801183e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8011842:	d818      	bhi.n	8011876 <mem_link_valid+0x66>
 8011844:	687b      	ldr	r3, [r7, #4]
 8011846:	885b      	ldrh	r3, [r3, #2]
 8011848:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801184c:	d813      	bhi.n	8011876 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 801184e:	687b      	ldr	r3, [r7, #4]
 8011850:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8011852:	8afa      	ldrh	r2, [r7, #22]
 8011854:	429a      	cmp	r2, r3
 8011856:	d004      	beq.n	8011862 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8011858:	68fb      	ldr	r3, [r7, #12]
 801185a:	881b      	ldrh	r3, [r3, #0]
 801185c:	8afa      	ldrh	r2, [r7, #22]
 801185e:	429a      	cmp	r2, r3
 8011860:	d109      	bne.n	8011876 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8011862:	4b08      	ldr	r3, [pc, #32]	; (8011884 <mem_link_valid+0x74>)
 8011864:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8011866:	693a      	ldr	r2, [r7, #16]
 8011868:	429a      	cmp	r2, r3
 801186a:	d006      	beq.n	801187a <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 801186c:	693b      	ldr	r3, [r7, #16]
 801186e:	885b      	ldrh	r3, [r3, #2]
 8011870:	8afa      	ldrh	r2, [r7, #22]
 8011872:	429a      	cmp	r2, r3
 8011874:	d001      	beq.n	801187a <mem_link_valid+0x6a>
    return 0;
 8011876:	2300      	movs	r3, #0
 8011878:	e000      	b.n	801187c <mem_link_valid+0x6c>
  }
  return 1;
 801187a:	2301      	movs	r3, #1
}
 801187c:	4618      	mov	r0, r3
 801187e:	3718      	adds	r7, #24
 8011880:	46bd      	mov	sp, r7
 8011882:	bd80      	pop	{r7, pc}
 8011884:	240044fc 	.word	0x240044fc

08011888 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8011888:	b580      	push	{r7, lr}
 801188a:	b088      	sub	sp, #32
 801188c:	af00      	add	r7, sp, #0
 801188e:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8011890:	687b      	ldr	r3, [r7, #4]
 8011892:	2b00      	cmp	r3, #0
 8011894:	d070      	beq.n	8011978 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8011896:	687b      	ldr	r3, [r7, #4]
 8011898:	f003 0303 	and.w	r3, r3, #3
 801189c:	2b00      	cmp	r3, #0
 801189e:	d00d      	beq.n	80118bc <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 80118a0:	4b37      	ldr	r3, [pc, #220]	; (8011980 <mem_free+0xf8>)
 80118a2:	f240 2273 	movw	r2, #627	; 0x273
 80118a6:	4937      	ldr	r1, [pc, #220]	; (8011984 <mem_free+0xfc>)
 80118a8:	4837      	ldr	r0, [pc, #220]	; (8011988 <mem_free+0x100>)
 80118aa:	f00d feab 	bl	801f604 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80118ae:	f00c ffdf 	bl	801e870 <sys_arch_protect>
 80118b2:	60f8      	str	r0, [r7, #12]
 80118b4:	68f8      	ldr	r0, [r7, #12]
 80118b6:	f00c ffe9 	bl	801e88c <sys_arch_unprotect>
    return;
 80118ba:	e05e      	b.n	801197a <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80118bc:	687b      	ldr	r3, [r7, #4]
 80118be:	3b08      	subs	r3, #8
 80118c0:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 80118c2:	4b32      	ldr	r3, [pc, #200]	; (801198c <mem_free+0x104>)
 80118c4:	681b      	ldr	r3, [r3, #0]
 80118c6:	69fa      	ldr	r2, [r7, #28]
 80118c8:	429a      	cmp	r2, r3
 80118ca:	d306      	bcc.n	80118da <mem_free+0x52>
 80118cc:	687b      	ldr	r3, [r7, #4]
 80118ce:	f103 020c 	add.w	r2, r3, #12
 80118d2:	4b2f      	ldr	r3, [pc, #188]	; (8011990 <mem_free+0x108>)
 80118d4:	681b      	ldr	r3, [r3, #0]
 80118d6:	429a      	cmp	r2, r3
 80118d8:	d90d      	bls.n	80118f6 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 80118da:	4b29      	ldr	r3, [pc, #164]	; (8011980 <mem_free+0xf8>)
 80118dc:	f240 227f 	movw	r2, #639	; 0x27f
 80118e0:	492c      	ldr	r1, [pc, #176]	; (8011994 <mem_free+0x10c>)
 80118e2:	4829      	ldr	r0, [pc, #164]	; (8011988 <mem_free+0x100>)
 80118e4:	f00d fe8e 	bl	801f604 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80118e8:	f00c ffc2 	bl	801e870 <sys_arch_protect>
 80118ec:	6138      	str	r0, [r7, #16]
 80118ee:	6938      	ldr	r0, [r7, #16]
 80118f0:	f00c ffcc 	bl	801e88c <sys_arch_unprotect>
    return;
 80118f4:	e041      	b.n	801197a <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 80118f6:	4828      	ldr	r0, [pc, #160]	; (8011998 <mem_free+0x110>)
 80118f8:	f00c ff78 	bl	801e7ec <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 80118fc:	69fb      	ldr	r3, [r7, #28]
 80118fe:	791b      	ldrb	r3, [r3, #4]
 8011900:	2b00      	cmp	r3, #0
 8011902:	d110      	bne.n	8011926 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8011904:	4b1e      	ldr	r3, [pc, #120]	; (8011980 <mem_free+0xf8>)
 8011906:	f44f 7223 	mov.w	r2, #652	; 0x28c
 801190a:	4924      	ldr	r1, [pc, #144]	; (801199c <mem_free+0x114>)
 801190c:	481e      	ldr	r0, [pc, #120]	; (8011988 <mem_free+0x100>)
 801190e:	f00d fe79 	bl	801f604 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8011912:	4821      	ldr	r0, [pc, #132]	; (8011998 <mem_free+0x110>)
 8011914:	f00c ff79 	bl	801e80a <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8011918:	f00c ffaa 	bl	801e870 <sys_arch_protect>
 801191c:	6178      	str	r0, [r7, #20]
 801191e:	6978      	ldr	r0, [r7, #20]
 8011920:	f00c ffb4 	bl	801e88c <sys_arch_unprotect>
    return;
 8011924:	e029      	b.n	801197a <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 8011926:	69f8      	ldr	r0, [r7, #28]
 8011928:	f7ff ff72 	bl	8011810 <mem_link_valid>
 801192c:	4603      	mov	r3, r0
 801192e:	2b00      	cmp	r3, #0
 8011930:	d110      	bne.n	8011954 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8011932:	4b13      	ldr	r3, [pc, #76]	; (8011980 <mem_free+0xf8>)
 8011934:	f240 2295 	movw	r2, #661	; 0x295
 8011938:	4919      	ldr	r1, [pc, #100]	; (80119a0 <mem_free+0x118>)
 801193a:	4813      	ldr	r0, [pc, #76]	; (8011988 <mem_free+0x100>)
 801193c:	f00d fe62 	bl	801f604 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8011940:	4815      	ldr	r0, [pc, #84]	; (8011998 <mem_free+0x110>)
 8011942:	f00c ff62 	bl	801e80a <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8011946:	f00c ff93 	bl	801e870 <sys_arch_protect>
 801194a:	61b8      	str	r0, [r7, #24]
 801194c:	69b8      	ldr	r0, [r7, #24]
 801194e:	f00c ff9d 	bl	801e88c <sys_arch_unprotect>
    return;
 8011952:	e012      	b.n	801197a <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 8011954:	69fb      	ldr	r3, [r7, #28]
 8011956:	2200      	movs	r2, #0
 8011958:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 801195a:	4b12      	ldr	r3, [pc, #72]	; (80119a4 <mem_free+0x11c>)
 801195c:	681b      	ldr	r3, [r3, #0]
 801195e:	69fa      	ldr	r2, [r7, #28]
 8011960:	429a      	cmp	r2, r3
 8011962:	d202      	bcs.n	801196a <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8011964:	4a0f      	ldr	r2, [pc, #60]	; (80119a4 <mem_free+0x11c>)
 8011966:	69fb      	ldr	r3, [r7, #28]
 8011968:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 801196a:	69f8      	ldr	r0, [r7, #28]
 801196c:	f7ff fe60 	bl	8011630 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8011970:	4809      	ldr	r0, [pc, #36]	; (8011998 <mem_free+0x110>)
 8011972:	f00c ff4a 	bl	801e80a <sys_mutex_unlock>
 8011976:	e000      	b.n	801197a <mem_free+0xf2>
    return;
 8011978:	bf00      	nop
}
 801197a:	3720      	adds	r7, #32
 801197c:	46bd      	mov	sp, r7
 801197e:	bd80      	pop	{r7, pc}
 8011980:	08024298 	.word	0x08024298
 8011984:	08024388 	.word	0x08024388
 8011988:	080242e0 	.word	0x080242e0
 801198c:	240044f8 	.word	0x240044f8
 8011990:	240044fc 	.word	0x240044fc
 8011994:	080243ac 	.word	0x080243ac
 8011998:	24004500 	.word	0x24004500
 801199c:	080243c8 	.word	0x080243c8
 80119a0:	080243f0 	.word	0x080243f0
 80119a4:	24004504 	.word	0x24004504

080119a8 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 80119a8:	b580      	push	{r7, lr}
 80119aa:	b088      	sub	sp, #32
 80119ac:	af00      	add	r7, sp, #0
 80119ae:	6078      	str	r0, [r7, #4]
 80119b0:	460b      	mov	r3, r1
 80119b2:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 80119b4:	887b      	ldrh	r3, [r7, #2]
 80119b6:	3303      	adds	r3, #3
 80119b8:	b29b      	uxth	r3, r3
 80119ba:	f023 0303 	bic.w	r3, r3, #3
 80119be:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 80119c0:	8bfb      	ldrh	r3, [r7, #30]
 80119c2:	2b0b      	cmp	r3, #11
 80119c4:	d801      	bhi.n	80119ca <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 80119c6:	230c      	movs	r3, #12
 80119c8:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 80119ca:	8bfb      	ldrh	r3, [r7, #30]
 80119cc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80119d0:	d803      	bhi.n	80119da <mem_trim+0x32>
 80119d2:	8bfa      	ldrh	r2, [r7, #30]
 80119d4:	887b      	ldrh	r3, [r7, #2]
 80119d6:	429a      	cmp	r2, r3
 80119d8:	d201      	bcs.n	80119de <mem_trim+0x36>
    return NULL;
 80119da:	2300      	movs	r3, #0
 80119dc:	e0d8      	b.n	8011b90 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80119de:	4b6e      	ldr	r3, [pc, #440]	; (8011b98 <mem_trim+0x1f0>)
 80119e0:	681b      	ldr	r3, [r3, #0]
 80119e2:	687a      	ldr	r2, [r7, #4]
 80119e4:	429a      	cmp	r2, r3
 80119e6:	d304      	bcc.n	80119f2 <mem_trim+0x4a>
 80119e8:	4b6c      	ldr	r3, [pc, #432]	; (8011b9c <mem_trim+0x1f4>)
 80119ea:	681b      	ldr	r3, [r3, #0]
 80119ec:	687a      	ldr	r2, [r7, #4]
 80119ee:	429a      	cmp	r2, r3
 80119f0:	d306      	bcc.n	8011a00 <mem_trim+0x58>
 80119f2:	4b6b      	ldr	r3, [pc, #428]	; (8011ba0 <mem_trim+0x1f8>)
 80119f4:	f240 22d1 	movw	r2, #721	; 0x2d1
 80119f8:	496a      	ldr	r1, [pc, #424]	; (8011ba4 <mem_trim+0x1fc>)
 80119fa:	486b      	ldr	r0, [pc, #428]	; (8011ba8 <mem_trim+0x200>)
 80119fc:	f00d fe02 	bl	801f604 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8011a00:	4b65      	ldr	r3, [pc, #404]	; (8011b98 <mem_trim+0x1f0>)
 8011a02:	681b      	ldr	r3, [r3, #0]
 8011a04:	687a      	ldr	r2, [r7, #4]
 8011a06:	429a      	cmp	r2, r3
 8011a08:	d304      	bcc.n	8011a14 <mem_trim+0x6c>
 8011a0a:	4b64      	ldr	r3, [pc, #400]	; (8011b9c <mem_trim+0x1f4>)
 8011a0c:	681b      	ldr	r3, [r3, #0]
 8011a0e:	687a      	ldr	r2, [r7, #4]
 8011a10:	429a      	cmp	r2, r3
 8011a12:	d307      	bcc.n	8011a24 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8011a14:	f00c ff2c 	bl	801e870 <sys_arch_protect>
 8011a18:	60b8      	str	r0, [r7, #8]
 8011a1a:	68b8      	ldr	r0, [r7, #8]
 8011a1c:	f00c ff36 	bl	801e88c <sys_arch_unprotect>
    return rmem;
 8011a20:	687b      	ldr	r3, [r7, #4]
 8011a22:	e0b5      	b.n	8011b90 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8011a24:	687b      	ldr	r3, [r7, #4]
 8011a26:	3b08      	subs	r3, #8
 8011a28:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8011a2a:	69b8      	ldr	r0, [r7, #24]
 8011a2c:	f7ff fdee 	bl	801160c <mem_to_ptr>
 8011a30:	4603      	mov	r3, r0
 8011a32:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8011a34:	69bb      	ldr	r3, [r7, #24]
 8011a36:	881a      	ldrh	r2, [r3, #0]
 8011a38:	8afb      	ldrh	r3, [r7, #22]
 8011a3a:	1ad3      	subs	r3, r2, r3
 8011a3c:	b29b      	uxth	r3, r3
 8011a3e:	3b08      	subs	r3, #8
 8011a40:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8011a42:	8bfa      	ldrh	r2, [r7, #30]
 8011a44:	8abb      	ldrh	r3, [r7, #20]
 8011a46:	429a      	cmp	r2, r3
 8011a48:	d906      	bls.n	8011a58 <mem_trim+0xb0>
 8011a4a:	4b55      	ldr	r3, [pc, #340]	; (8011ba0 <mem_trim+0x1f8>)
 8011a4c:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8011a50:	4956      	ldr	r1, [pc, #344]	; (8011bac <mem_trim+0x204>)
 8011a52:	4855      	ldr	r0, [pc, #340]	; (8011ba8 <mem_trim+0x200>)
 8011a54:	f00d fdd6 	bl	801f604 <iprintf>
  if (newsize > size) {
 8011a58:	8bfa      	ldrh	r2, [r7, #30]
 8011a5a:	8abb      	ldrh	r3, [r7, #20]
 8011a5c:	429a      	cmp	r2, r3
 8011a5e:	d901      	bls.n	8011a64 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 8011a60:	2300      	movs	r3, #0
 8011a62:	e095      	b.n	8011b90 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 8011a64:	8bfa      	ldrh	r2, [r7, #30]
 8011a66:	8abb      	ldrh	r3, [r7, #20]
 8011a68:	429a      	cmp	r2, r3
 8011a6a:	d101      	bne.n	8011a70 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 8011a6c:	687b      	ldr	r3, [r7, #4]
 8011a6e:	e08f      	b.n	8011b90 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8011a70:	484f      	ldr	r0, [pc, #316]	; (8011bb0 <mem_trim+0x208>)
 8011a72:	f00c febb 	bl	801e7ec <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 8011a76:	69bb      	ldr	r3, [r7, #24]
 8011a78:	881b      	ldrh	r3, [r3, #0]
 8011a7a:	4618      	mov	r0, r3
 8011a7c:	f7ff fdb4 	bl	80115e8 <ptr_to_mem>
 8011a80:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8011a82:	693b      	ldr	r3, [r7, #16]
 8011a84:	791b      	ldrb	r3, [r3, #4]
 8011a86:	2b00      	cmp	r3, #0
 8011a88:	d13f      	bne.n	8011b0a <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8011a8a:	69bb      	ldr	r3, [r7, #24]
 8011a8c:	881b      	ldrh	r3, [r3, #0]
 8011a8e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8011a92:	d106      	bne.n	8011aa2 <mem_trim+0xfa>
 8011a94:	4b42      	ldr	r3, [pc, #264]	; (8011ba0 <mem_trim+0x1f8>)
 8011a96:	f240 22f5 	movw	r2, #757	; 0x2f5
 8011a9a:	4946      	ldr	r1, [pc, #280]	; (8011bb4 <mem_trim+0x20c>)
 8011a9c:	4842      	ldr	r0, [pc, #264]	; (8011ba8 <mem_trim+0x200>)
 8011a9e:	f00d fdb1 	bl	801f604 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8011aa2:	693b      	ldr	r3, [r7, #16]
 8011aa4:	881b      	ldrh	r3, [r3, #0]
 8011aa6:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8011aa8:	8afa      	ldrh	r2, [r7, #22]
 8011aaa:	8bfb      	ldrh	r3, [r7, #30]
 8011aac:	4413      	add	r3, r2
 8011aae:	b29b      	uxth	r3, r3
 8011ab0:	3308      	adds	r3, #8
 8011ab2:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8011ab4:	4b40      	ldr	r3, [pc, #256]	; (8011bb8 <mem_trim+0x210>)
 8011ab6:	681b      	ldr	r3, [r3, #0]
 8011ab8:	693a      	ldr	r2, [r7, #16]
 8011aba:	429a      	cmp	r2, r3
 8011abc:	d106      	bne.n	8011acc <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 8011abe:	89fb      	ldrh	r3, [r7, #14]
 8011ac0:	4618      	mov	r0, r3
 8011ac2:	f7ff fd91 	bl	80115e8 <ptr_to_mem>
 8011ac6:	4603      	mov	r3, r0
 8011ac8:	4a3b      	ldr	r2, [pc, #236]	; (8011bb8 <mem_trim+0x210>)
 8011aca:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8011acc:	89fb      	ldrh	r3, [r7, #14]
 8011ace:	4618      	mov	r0, r3
 8011ad0:	f7ff fd8a 	bl	80115e8 <ptr_to_mem>
 8011ad4:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8011ad6:	693b      	ldr	r3, [r7, #16]
 8011ad8:	2200      	movs	r2, #0
 8011ada:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8011adc:	693b      	ldr	r3, [r7, #16]
 8011ade:	89ba      	ldrh	r2, [r7, #12]
 8011ae0:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8011ae2:	693b      	ldr	r3, [r7, #16]
 8011ae4:	8afa      	ldrh	r2, [r7, #22]
 8011ae6:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8011ae8:	69bb      	ldr	r3, [r7, #24]
 8011aea:	89fa      	ldrh	r2, [r7, #14]
 8011aec:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8011aee:	693b      	ldr	r3, [r7, #16]
 8011af0:	881b      	ldrh	r3, [r3, #0]
 8011af2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8011af6:	d047      	beq.n	8011b88 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8011af8:	693b      	ldr	r3, [r7, #16]
 8011afa:	881b      	ldrh	r3, [r3, #0]
 8011afc:	4618      	mov	r0, r3
 8011afe:	f7ff fd73 	bl	80115e8 <ptr_to_mem>
 8011b02:	4602      	mov	r2, r0
 8011b04:	89fb      	ldrh	r3, [r7, #14]
 8011b06:	8053      	strh	r3, [r2, #2]
 8011b08:	e03e      	b.n	8011b88 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8011b0a:	8bfb      	ldrh	r3, [r7, #30]
 8011b0c:	f103 0214 	add.w	r2, r3, #20
 8011b10:	8abb      	ldrh	r3, [r7, #20]
 8011b12:	429a      	cmp	r2, r3
 8011b14:	d838      	bhi.n	8011b88 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8011b16:	8afa      	ldrh	r2, [r7, #22]
 8011b18:	8bfb      	ldrh	r3, [r7, #30]
 8011b1a:	4413      	add	r3, r2
 8011b1c:	b29b      	uxth	r3, r3
 8011b1e:	3308      	adds	r3, #8
 8011b20:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8011b22:	69bb      	ldr	r3, [r7, #24]
 8011b24:	881b      	ldrh	r3, [r3, #0]
 8011b26:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8011b2a:	d106      	bne.n	8011b3a <mem_trim+0x192>
 8011b2c:	4b1c      	ldr	r3, [pc, #112]	; (8011ba0 <mem_trim+0x1f8>)
 8011b2e:	f240 3216 	movw	r2, #790	; 0x316
 8011b32:	4920      	ldr	r1, [pc, #128]	; (8011bb4 <mem_trim+0x20c>)
 8011b34:	481c      	ldr	r0, [pc, #112]	; (8011ba8 <mem_trim+0x200>)
 8011b36:	f00d fd65 	bl	801f604 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8011b3a:	89fb      	ldrh	r3, [r7, #14]
 8011b3c:	4618      	mov	r0, r3
 8011b3e:	f7ff fd53 	bl	80115e8 <ptr_to_mem>
 8011b42:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8011b44:	4b1c      	ldr	r3, [pc, #112]	; (8011bb8 <mem_trim+0x210>)
 8011b46:	681b      	ldr	r3, [r3, #0]
 8011b48:	693a      	ldr	r2, [r7, #16]
 8011b4a:	429a      	cmp	r2, r3
 8011b4c:	d202      	bcs.n	8011b54 <mem_trim+0x1ac>
      lfree = mem2;
 8011b4e:	4a1a      	ldr	r2, [pc, #104]	; (8011bb8 <mem_trim+0x210>)
 8011b50:	693b      	ldr	r3, [r7, #16]
 8011b52:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8011b54:	693b      	ldr	r3, [r7, #16]
 8011b56:	2200      	movs	r2, #0
 8011b58:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8011b5a:	69bb      	ldr	r3, [r7, #24]
 8011b5c:	881a      	ldrh	r2, [r3, #0]
 8011b5e:	693b      	ldr	r3, [r7, #16]
 8011b60:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8011b62:	693b      	ldr	r3, [r7, #16]
 8011b64:	8afa      	ldrh	r2, [r7, #22]
 8011b66:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8011b68:	69bb      	ldr	r3, [r7, #24]
 8011b6a:	89fa      	ldrh	r2, [r7, #14]
 8011b6c:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8011b6e:	693b      	ldr	r3, [r7, #16]
 8011b70:	881b      	ldrh	r3, [r3, #0]
 8011b72:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8011b76:	d007      	beq.n	8011b88 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8011b78:	693b      	ldr	r3, [r7, #16]
 8011b7a:	881b      	ldrh	r3, [r3, #0]
 8011b7c:	4618      	mov	r0, r3
 8011b7e:	f7ff fd33 	bl	80115e8 <ptr_to_mem>
 8011b82:	4602      	mov	r2, r0
 8011b84:	89fb      	ldrh	r3, [r7, #14]
 8011b86:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8011b88:	4809      	ldr	r0, [pc, #36]	; (8011bb0 <mem_trim+0x208>)
 8011b8a:	f00c fe3e 	bl	801e80a <sys_mutex_unlock>
  return rmem;
 8011b8e:	687b      	ldr	r3, [r7, #4]
}
 8011b90:	4618      	mov	r0, r3
 8011b92:	3720      	adds	r7, #32
 8011b94:	46bd      	mov	sp, r7
 8011b96:	bd80      	pop	{r7, pc}
 8011b98:	240044f8 	.word	0x240044f8
 8011b9c:	240044fc 	.word	0x240044fc
 8011ba0:	08024298 	.word	0x08024298
 8011ba4:	08024424 	.word	0x08024424
 8011ba8:	080242e0 	.word	0x080242e0
 8011bac:	0802443c 	.word	0x0802443c
 8011bb0:	24004500 	.word	0x24004500
 8011bb4:	0802445c 	.word	0x0802445c
 8011bb8:	24004504 	.word	0x24004504

08011bbc <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8011bbc:	b580      	push	{r7, lr}
 8011bbe:	b088      	sub	sp, #32
 8011bc0:	af00      	add	r7, sp, #0
 8011bc2:	4603      	mov	r3, r0
 8011bc4:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8011bc6:	88fb      	ldrh	r3, [r7, #6]
 8011bc8:	2b00      	cmp	r3, #0
 8011bca:	d101      	bne.n	8011bd0 <mem_malloc+0x14>
    return NULL;
 8011bcc:	2300      	movs	r3, #0
 8011bce:	e0e2      	b.n	8011d96 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8011bd0:	88fb      	ldrh	r3, [r7, #6]
 8011bd2:	3303      	adds	r3, #3
 8011bd4:	b29b      	uxth	r3, r3
 8011bd6:	f023 0303 	bic.w	r3, r3, #3
 8011bda:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8011bdc:	8bbb      	ldrh	r3, [r7, #28]
 8011bde:	2b0b      	cmp	r3, #11
 8011be0:	d801      	bhi.n	8011be6 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8011be2:	230c      	movs	r3, #12
 8011be4:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8011be6:	8bbb      	ldrh	r3, [r7, #28]
 8011be8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8011bec:	d803      	bhi.n	8011bf6 <mem_malloc+0x3a>
 8011bee:	8bba      	ldrh	r2, [r7, #28]
 8011bf0:	88fb      	ldrh	r3, [r7, #6]
 8011bf2:	429a      	cmp	r2, r3
 8011bf4:	d201      	bcs.n	8011bfa <mem_malloc+0x3e>
    return NULL;
 8011bf6:	2300      	movs	r3, #0
 8011bf8:	e0cd      	b.n	8011d96 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8011bfa:	4869      	ldr	r0, [pc, #420]	; (8011da0 <mem_malloc+0x1e4>)
 8011bfc:	f00c fdf6 	bl	801e7ec <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8011c00:	4b68      	ldr	r3, [pc, #416]	; (8011da4 <mem_malloc+0x1e8>)
 8011c02:	681b      	ldr	r3, [r3, #0]
 8011c04:	4618      	mov	r0, r3
 8011c06:	f7ff fd01 	bl	801160c <mem_to_ptr>
 8011c0a:	4603      	mov	r3, r0
 8011c0c:	83fb      	strh	r3, [r7, #30]
 8011c0e:	e0b7      	b.n	8011d80 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8011c10:	8bfb      	ldrh	r3, [r7, #30]
 8011c12:	4618      	mov	r0, r3
 8011c14:	f7ff fce8 	bl	80115e8 <ptr_to_mem>
 8011c18:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8011c1a:	697b      	ldr	r3, [r7, #20]
 8011c1c:	791b      	ldrb	r3, [r3, #4]
 8011c1e:	2b00      	cmp	r3, #0
 8011c20:	f040 80a7 	bne.w	8011d72 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8011c24:	697b      	ldr	r3, [r7, #20]
 8011c26:	881b      	ldrh	r3, [r3, #0]
 8011c28:	461a      	mov	r2, r3
 8011c2a:	8bfb      	ldrh	r3, [r7, #30]
 8011c2c:	1ad3      	subs	r3, r2, r3
 8011c2e:	f1a3 0208 	sub.w	r2, r3, #8
 8011c32:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8011c34:	429a      	cmp	r2, r3
 8011c36:	f0c0 809c 	bcc.w	8011d72 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8011c3a:	697b      	ldr	r3, [r7, #20]
 8011c3c:	881b      	ldrh	r3, [r3, #0]
 8011c3e:	461a      	mov	r2, r3
 8011c40:	8bfb      	ldrh	r3, [r7, #30]
 8011c42:	1ad3      	subs	r3, r2, r3
 8011c44:	f1a3 0208 	sub.w	r2, r3, #8
 8011c48:	8bbb      	ldrh	r3, [r7, #28]
 8011c4a:	3314      	adds	r3, #20
 8011c4c:	429a      	cmp	r2, r3
 8011c4e:	d333      	bcc.n	8011cb8 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8011c50:	8bfa      	ldrh	r2, [r7, #30]
 8011c52:	8bbb      	ldrh	r3, [r7, #28]
 8011c54:	4413      	add	r3, r2
 8011c56:	b29b      	uxth	r3, r3
 8011c58:	3308      	adds	r3, #8
 8011c5a:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8011c5c:	8a7b      	ldrh	r3, [r7, #18]
 8011c5e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8011c62:	d106      	bne.n	8011c72 <mem_malloc+0xb6>
 8011c64:	4b50      	ldr	r3, [pc, #320]	; (8011da8 <mem_malloc+0x1ec>)
 8011c66:	f240 3287 	movw	r2, #903	; 0x387
 8011c6a:	4950      	ldr	r1, [pc, #320]	; (8011dac <mem_malloc+0x1f0>)
 8011c6c:	4850      	ldr	r0, [pc, #320]	; (8011db0 <mem_malloc+0x1f4>)
 8011c6e:	f00d fcc9 	bl	801f604 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8011c72:	8a7b      	ldrh	r3, [r7, #18]
 8011c74:	4618      	mov	r0, r3
 8011c76:	f7ff fcb7 	bl	80115e8 <ptr_to_mem>
 8011c7a:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8011c7c:	68fb      	ldr	r3, [r7, #12]
 8011c7e:	2200      	movs	r2, #0
 8011c80:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8011c82:	697b      	ldr	r3, [r7, #20]
 8011c84:	881a      	ldrh	r2, [r3, #0]
 8011c86:	68fb      	ldr	r3, [r7, #12]
 8011c88:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8011c8a:	68fb      	ldr	r3, [r7, #12]
 8011c8c:	8bfa      	ldrh	r2, [r7, #30]
 8011c8e:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8011c90:	697b      	ldr	r3, [r7, #20]
 8011c92:	8a7a      	ldrh	r2, [r7, #18]
 8011c94:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8011c96:	697b      	ldr	r3, [r7, #20]
 8011c98:	2201      	movs	r2, #1
 8011c9a:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8011c9c:	68fb      	ldr	r3, [r7, #12]
 8011c9e:	881b      	ldrh	r3, [r3, #0]
 8011ca0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8011ca4:	d00b      	beq.n	8011cbe <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8011ca6:	68fb      	ldr	r3, [r7, #12]
 8011ca8:	881b      	ldrh	r3, [r3, #0]
 8011caa:	4618      	mov	r0, r3
 8011cac:	f7ff fc9c 	bl	80115e8 <ptr_to_mem>
 8011cb0:	4602      	mov	r2, r0
 8011cb2:	8a7b      	ldrh	r3, [r7, #18]
 8011cb4:	8053      	strh	r3, [r2, #2]
 8011cb6:	e002      	b.n	8011cbe <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8011cb8:	697b      	ldr	r3, [r7, #20]
 8011cba:	2201      	movs	r2, #1
 8011cbc:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8011cbe:	4b39      	ldr	r3, [pc, #228]	; (8011da4 <mem_malloc+0x1e8>)
 8011cc0:	681b      	ldr	r3, [r3, #0]
 8011cc2:	697a      	ldr	r2, [r7, #20]
 8011cc4:	429a      	cmp	r2, r3
 8011cc6:	d127      	bne.n	8011d18 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 8011cc8:	4b36      	ldr	r3, [pc, #216]	; (8011da4 <mem_malloc+0x1e8>)
 8011cca:	681b      	ldr	r3, [r3, #0]
 8011ccc:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8011cce:	e005      	b.n	8011cdc <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8011cd0:	69bb      	ldr	r3, [r7, #24]
 8011cd2:	881b      	ldrh	r3, [r3, #0]
 8011cd4:	4618      	mov	r0, r3
 8011cd6:	f7ff fc87 	bl	80115e8 <ptr_to_mem>
 8011cda:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8011cdc:	69bb      	ldr	r3, [r7, #24]
 8011cde:	791b      	ldrb	r3, [r3, #4]
 8011ce0:	2b00      	cmp	r3, #0
 8011ce2:	d004      	beq.n	8011cee <mem_malloc+0x132>
 8011ce4:	4b33      	ldr	r3, [pc, #204]	; (8011db4 <mem_malloc+0x1f8>)
 8011ce6:	681b      	ldr	r3, [r3, #0]
 8011ce8:	69ba      	ldr	r2, [r7, #24]
 8011cea:	429a      	cmp	r2, r3
 8011cec:	d1f0      	bne.n	8011cd0 <mem_malloc+0x114>
          }
          lfree = cur;
 8011cee:	4a2d      	ldr	r2, [pc, #180]	; (8011da4 <mem_malloc+0x1e8>)
 8011cf0:	69bb      	ldr	r3, [r7, #24]
 8011cf2:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8011cf4:	4b2b      	ldr	r3, [pc, #172]	; (8011da4 <mem_malloc+0x1e8>)
 8011cf6:	681a      	ldr	r2, [r3, #0]
 8011cf8:	4b2e      	ldr	r3, [pc, #184]	; (8011db4 <mem_malloc+0x1f8>)
 8011cfa:	681b      	ldr	r3, [r3, #0]
 8011cfc:	429a      	cmp	r2, r3
 8011cfe:	d00b      	beq.n	8011d18 <mem_malloc+0x15c>
 8011d00:	4b28      	ldr	r3, [pc, #160]	; (8011da4 <mem_malloc+0x1e8>)
 8011d02:	681b      	ldr	r3, [r3, #0]
 8011d04:	791b      	ldrb	r3, [r3, #4]
 8011d06:	2b00      	cmp	r3, #0
 8011d08:	d006      	beq.n	8011d18 <mem_malloc+0x15c>
 8011d0a:	4b27      	ldr	r3, [pc, #156]	; (8011da8 <mem_malloc+0x1ec>)
 8011d0c:	f240 32b5 	movw	r2, #949	; 0x3b5
 8011d10:	4929      	ldr	r1, [pc, #164]	; (8011db8 <mem_malloc+0x1fc>)
 8011d12:	4827      	ldr	r0, [pc, #156]	; (8011db0 <mem_malloc+0x1f4>)
 8011d14:	f00d fc76 	bl	801f604 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8011d18:	4821      	ldr	r0, [pc, #132]	; (8011da0 <mem_malloc+0x1e4>)
 8011d1a:	f00c fd76 	bl	801e80a <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8011d1e:	8bba      	ldrh	r2, [r7, #28]
 8011d20:	697b      	ldr	r3, [r7, #20]
 8011d22:	4413      	add	r3, r2
 8011d24:	3308      	adds	r3, #8
 8011d26:	4a23      	ldr	r2, [pc, #140]	; (8011db4 <mem_malloc+0x1f8>)
 8011d28:	6812      	ldr	r2, [r2, #0]
 8011d2a:	4293      	cmp	r3, r2
 8011d2c:	d906      	bls.n	8011d3c <mem_malloc+0x180>
 8011d2e:	4b1e      	ldr	r3, [pc, #120]	; (8011da8 <mem_malloc+0x1ec>)
 8011d30:	f240 32b9 	movw	r2, #953	; 0x3b9
 8011d34:	4921      	ldr	r1, [pc, #132]	; (8011dbc <mem_malloc+0x200>)
 8011d36:	481e      	ldr	r0, [pc, #120]	; (8011db0 <mem_malloc+0x1f4>)
 8011d38:	f00d fc64 	bl	801f604 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8011d3c:	697b      	ldr	r3, [r7, #20]
 8011d3e:	f003 0303 	and.w	r3, r3, #3
 8011d42:	2b00      	cmp	r3, #0
 8011d44:	d006      	beq.n	8011d54 <mem_malloc+0x198>
 8011d46:	4b18      	ldr	r3, [pc, #96]	; (8011da8 <mem_malloc+0x1ec>)
 8011d48:	f240 32bb 	movw	r2, #955	; 0x3bb
 8011d4c:	491c      	ldr	r1, [pc, #112]	; (8011dc0 <mem_malloc+0x204>)
 8011d4e:	4818      	ldr	r0, [pc, #96]	; (8011db0 <mem_malloc+0x1f4>)
 8011d50:	f00d fc58 	bl	801f604 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8011d54:	697b      	ldr	r3, [r7, #20]
 8011d56:	f003 0303 	and.w	r3, r3, #3
 8011d5a:	2b00      	cmp	r3, #0
 8011d5c:	d006      	beq.n	8011d6c <mem_malloc+0x1b0>
 8011d5e:	4b12      	ldr	r3, [pc, #72]	; (8011da8 <mem_malloc+0x1ec>)
 8011d60:	f240 32bd 	movw	r2, #957	; 0x3bd
 8011d64:	4917      	ldr	r1, [pc, #92]	; (8011dc4 <mem_malloc+0x208>)
 8011d66:	4812      	ldr	r0, [pc, #72]	; (8011db0 <mem_malloc+0x1f4>)
 8011d68:	f00d fc4c 	bl	801f604 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8011d6c:	697b      	ldr	r3, [r7, #20]
 8011d6e:	3308      	adds	r3, #8
 8011d70:	e011      	b.n	8011d96 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 8011d72:	8bfb      	ldrh	r3, [r7, #30]
 8011d74:	4618      	mov	r0, r3
 8011d76:	f7ff fc37 	bl	80115e8 <ptr_to_mem>
 8011d7a:	4603      	mov	r3, r0
 8011d7c:	881b      	ldrh	r3, [r3, #0]
 8011d7e:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8011d80:	8bfa      	ldrh	r2, [r7, #30]
 8011d82:	8bbb      	ldrh	r3, [r7, #28]
 8011d84:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8011d88:	429a      	cmp	r2, r3
 8011d8a:	f4ff af41 	bcc.w	8011c10 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8011d8e:	4804      	ldr	r0, [pc, #16]	; (8011da0 <mem_malloc+0x1e4>)
 8011d90:	f00c fd3b 	bl	801e80a <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8011d94:	2300      	movs	r3, #0
}
 8011d96:	4618      	mov	r0, r3
 8011d98:	3720      	adds	r7, #32
 8011d9a:	46bd      	mov	sp, r7
 8011d9c:	bd80      	pop	{r7, pc}
 8011d9e:	bf00      	nop
 8011da0:	24004500 	.word	0x24004500
 8011da4:	24004504 	.word	0x24004504
 8011da8:	08024298 	.word	0x08024298
 8011dac:	0802445c 	.word	0x0802445c
 8011db0:	080242e0 	.word	0x080242e0
 8011db4:	240044fc 	.word	0x240044fc
 8011db8:	08024470 	.word	0x08024470
 8011dbc:	0802448c 	.word	0x0802448c
 8011dc0:	080244bc 	.word	0x080244bc
 8011dc4:	080244ec 	.word	0x080244ec

08011dc8 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8011dc8:	b480      	push	{r7}
 8011dca:	b085      	sub	sp, #20
 8011dcc:	af00      	add	r7, sp, #0
 8011dce:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8011dd0:	687b      	ldr	r3, [r7, #4]
 8011dd2:	689b      	ldr	r3, [r3, #8]
 8011dd4:	2200      	movs	r2, #0
 8011dd6:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8011dd8:	687b      	ldr	r3, [r7, #4]
 8011dda:	685b      	ldr	r3, [r3, #4]
 8011ddc:	3303      	adds	r3, #3
 8011dde:	f023 0303 	bic.w	r3, r3, #3
 8011de2:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8011de4:	2300      	movs	r3, #0
 8011de6:	60fb      	str	r3, [r7, #12]
 8011de8:	e011      	b.n	8011e0e <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8011dea:	687b      	ldr	r3, [r7, #4]
 8011dec:	689b      	ldr	r3, [r3, #8]
 8011dee:	681a      	ldr	r2, [r3, #0]
 8011df0:	68bb      	ldr	r3, [r7, #8]
 8011df2:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8011df4:	687b      	ldr	r3, [r7, #4]
 8011df6:	689b      	ldr	r3, [r3, #8]
 8011df8:	68ba      	ldr	r2, [r7, #8]
 8011dfa:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8011dfc:	687b      	ldr	r3, [r7, #4]
 8011dfe:	881b      	ldrh	r3, [r3, #0]
 8011e00:	461a      	mov	r2, r3
 8011e02:	68bb      	ldr	r3, [r7, #8]
 8011e04:	4413      	add	r3, r2
 8011e06:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8011e08:	68fb      	ldr	r3, [r7, #12]
 8011e0a:	3301      	adds	r3, #1
 8011e0c:	60fb      	str	r3, [r7, #12]
 8011e0e:	687b      	ldr	r3, [r7, #4]
 8011e10:	885b      	ldrh	r3, [r3, #2]
 8011e12:	461a      	mov	r2, r3
 8011e14:	68fb      	ldr	r3, [r7, #12]
 8011e16:	4293      	cmp	r3, r2
 8011e18:	dbe7      	blt.n	8011dea <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8011e1a:	bf00      	nop
 8011e1c:	bf00      	nop
 8011e1e:	3714      	adds	r7, #20
 8011e20:	46bd      	mov	sp, r7
 8011e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e26:	4770      	bx	lr

08011e28 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8011e28:	b580      	push	{r7, lr}
 8011e2a:	b082      	sub	sp, #8
 8011e2c:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8011e2e:	2300      	movs	r3, #0
 8011e30:	80fb      	strh	r3, [r7, #6]
 8011e32:	e009      	b.n	8011e48 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8011e34:	88fb      	ldrh	r3, [r7, #6]
 8011e36:	4a08      	ldr	r2, [pc, #32]	; (8011e58 <memp_init+0x30>)
 8011e38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011e3c:	4618      	mov	r0, r3
 8011e3e:	f7ff ffc3 	bl	8011dc8 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8011e42:	88fb      	ldrh	r3, [r7, #6]
 8011e44:	3301      	adds	r3, #1
 8011e46:	80fb      	strh	r3, [r7, #6]
 8011e48:	88fb      	ldrh	r3, [r7, #6]
 8011e4a:	2b0c      	cmp	r3, #12
 8011e4c:	d9f2      	bls.n	8011e34 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8011e4e:	bf00      	nop
 8011e50:	bf00      	nop
 8011e52:	3708      	adds	r7, #8
 8011e54:	46bd      	mov	sp, r7
 8011e56:	bd80      	pop	{r7, pc}
 8011e58:	08027108 	.word	0x08027108

08011e5c <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8011e5c:	b580      	push	{r7, lr}
 8011e5e:	b084      	sub	sp, #16
 8011e60:	af00      	add	r7, sp, #0
 8011e62:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8011e64:	f00c fd04 	bl	801e870 <sys_arch_protect>
 8011e68:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 8011e6a:	687b      	ldr	r3, [r7, #4]
 8011e6c:	689b      	ldr	r3, [r3, #8]
 8011e6e:	681b      	ldr	r3, [r3, #0]
 8011e70:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8011e72:	68bb      	ldr	r3, [r7, #8]
 8011e74:	2b00      	cmp	r3, #0
 8011e76:	d015      	beq.n	8011ea4 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8011e78:	687b      	ldr	r3, [r7, #4]
 8011e7a:	689b      	ldr	r3, [r3, #8]
 8011e7c:	68ba      	ldr	r2, [r7, #8]
 8011e7e:	6812      	ldr	r2, [r2, #0]
 8011e80:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8011e82:	68bb      	ldr	r3, [r7, #8]
 8011e84:	f003 0303 	and.w	r3, r3, #3
 8011e88:	2b00      	cmp	r3, #0
 8011e8a:	d006      	beq.n	8011e9a <do_memp_malloc_pool+0x3e>
 8011e8c:	4b09      	ldr	r3, [pc, #36]	; (8011eb4 <do_memp_malloc_pool+0x58>)
 8011e8e:	f44f 728c 	mov.w	r2, #280	; 0x118
 8011e92:	4909      	ldr	r1, [pc, #36]	; (8011eb8 <do_memp_malloc_pool+0x5c>)
 8011e94:	4809      	ldr	r0, [pc, #36]	; (8011ebc <do_memp_malloc_pool+0x60>)
 8011e96:	f00d fbb5 	bl	801f604 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8011e9a:	68f8      	ldr	r0, [r7, #12]
 8011e9c:	f00c fcf6 	bl	801e88c <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8011ea0:	68bb      	ldr	r3, [r7, #8]
 8011ea2:	e003      	b.n	8011eac <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8011ea4:	68f8      	ldr	r0, [r7, #12]
 8011ea6:	f00c fcf1 	bl	801e88c <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8011eaa:	2300      	movs	r3, #0
}
 8011eac:	4618      	mov	r0, r3
 8011eae:	3710      	adds	r7, #16
 8011eb0:	46bd      	mov	sp, r7
 8011eb2:	bd80      	pop	{r7, pc}
 8011eb4:	08024510 	.word	0x08024510
 8011eb8:	08024540 	.word	0x08024540
 8011ebc:	08024564 	.word	0x08024564

08011ec0 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8011ec0:	b580      	push	{r7, lr}
 8011ec2:	b082      	sub	sp, #8
 8011ec4:	af00      	add	r7, sp, #0
 8011ec6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8011ec8:	687b      	ldr	r3, [r7, #4]
 8011eca:	2b00      	cmp	r3, #0
 8011ecc:	d106      	bne.n	8011edc <memp_malloc_pool+0x1c>
 8011ece:	4b0a      	ldr	r3, [pc, #40]	; (8011ef8 <memp_malloc_pool+0x38>)
 8011ed0:	f44f 729e 	mov.w	r2, #316	; 0x13c
 8011ed4:	4909      	ldr	r1, [pc, #36]	; (8011efc <memp_malloc_pool+0x3c>)
 8011ed6:	480a      	ldr	r0, [pc, #40]	; (8011f00 <memp_malloc_pool+0x40>)
 8011ed8:	f00d fb94 	bl	801f604 <iprintf>
  if (desc == NULL) {
 8011edc:	687b      	ldr	r3, [r7, #4]
 8011ede:	2b00      	cmp	r3, #0
 8011ee0:	d101      	bne.n	8011ee6 <memp_malloc_pool+0x26>
    return NULL;
 8011ee2:	2300      	movs	r3, #0
 8011ee4:	e003      	b.n	8011eee <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8011ee6:	6878      	ldr	r0, [r7, #4]
 8011ee8:	f7ff ffb8 	bl	8011e5c <do_memp_malloc_pool>
 8011eec:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8011eee:	4618      	mov	r0, r3
 8011ef0:	3708      	adds	r7, #8
 8011ef2:	46bd      	mov	sp, r7
 8011ef4:	bd80      	pop	{r7, pc}
 8011ef6:	bf00      	nop
 8011ef8:	08024510 	.word	0x08024510
 8011efc:	0802458c 	.word	0x0802458c
 8011f00:	08024564 	.word	0x08024564

08011f04 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8011f04:	b580      	push	{r7, lr}
 8011f06:	b084      	sub	sp, #16
 8011f08:	af00      	add	r7, sp, #0
 8011f0a:	4603      	mov	r3, r0
 8011f0c:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8011f0e:	79fb      	ldrb	r3, [r7, #7]
 8011f10:	2b0c      	cmp	r3, #12
 8011f12:	d908      	bls.n	8011f26 <memp_malloc+0x22>
 8011f14:	4b0a      	ldr	r3, [pc, #40]	; (8011f40 <memp_malloc+0x3c>)
 8011f16:	f240 1257 	movw	r2, #343	; 0x157
 8011f1a:	490a      	ldr	r1, [pc, #40]	; (8011f44 <memp_malloc+0x40>)
 8011f1c:	480a      	ldr	r0, [pc, #40]	; (8011f48 <memp_malloc+0x44>)
 8011f1e:	f00d fb71 	bl	801f604 <iprintf>
 8011f22:	2300      	movs	r3, #0
 8011f24:	e008      	b.n	8011f38 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8011f26:	79fb      	ldrb	r3, [r7, #7]
 8011f28:	4a08      	ldr	r2, [pc, #32]	; (8011f4c <memp_malloc+0x48>)
 8011f2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011f2e:	4618      	mov	r0, r3
 8011f30:	f7ff ff94 	bl	8011e5c <do_memp_malloc_pool>
 8011f34:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8011f36:	68fb      	ldr	r3, [r7, #12]
}
 8011f38:	4618      	mov	r0, r3
 8011f3a:	3710      	adds	r7, #16
 8011f3c:	46bd      	mov	sp, r7
 8011f3e:	bd80      	pop	{r7, pc}
 8011f40:	08024510 	.word	0x08024510
 8011f44:	080245a0 	.word	0x080245a0
 8011f48:	08024564 	.word	0x08024564
 8011f4c:	08027108 	.word	0x08027108

08011f50 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8011f50:	b580      	push	{r7, lr}
 8011f52:	b084      	sub	sp, #16
 8011f54:	af00      	add	r7, sp, #0
 8011f56:	6078      	str	r0, [r7, #4]
 8011f58:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8011f5a:	683b      	ldr	r3, [r7, #0]
 8011f5c:	f003 0303 	and.w	r3, r3, #3
 8011f60:	2b00      	cmp	r3, #0
 8011f62:	d006      	beq.n	8011f72 <do_memp_free_pool+0x22>
 8011f64:	4b0d      	ldr	r3, [pc, #52]	; (8011f9c <do_memp_free_pool+0x4c>)
 8011f66:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8011f6a:	490d      	ldr	r1, [pc, #52]	; (8011fa0 <do_memp_free_pool+0x50>)
 8011f6c:	480d      	ldr	r0, [pc, #52]	; (8011fa4 <do_memp_free_pool+0x54>)
 8011f6e:	f00d fb49 	bl	801f604 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8011f72:	683b      	ldr	r3, [r7, #0]
 8011f74:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 8011f76:	f00c fc7b 	bl	801e870 <sys_arch_protect>
 8011f7a:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8011f7c:	687b      	ldr	r3, [r7, #4]
 8011f7e:	689b      	ldr	r3, [r3, #8]
 8011f80:	681a      	ldr	r2, [r3, #0]
 8011f82:	68fb      	ldr	r3, [r7, #12]
 8011f84:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8011f86:	687b      	ldr	r3, [r7, #4]
 8011f88:	689b      	ldr	r3, [r3, #8]
 8011f8a:	68fa      	ldr	r2, [r7, #12]
 8011f8c:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 8011f8e:	68b8      	ldr	r0, [r7, #8]
 8011f90:	f00c fc7c 	bl	801e88c <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 8011f94:	bf00      	nop
 8011f96:	3710      	adds	r7, #16
 8011f98:	46bd      	mov	sp, r7
 8011f9a:	bd80      	pop	{r7, pc}
 8011f9c:	08024510 	.word	0x08024510
 8011fa0:	080245c0 	.word	0x080245c0
 8011fa4:	08024564 	.word	0x08024564

08011fa8 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8011fa8:	b580      	push	{r7, lr}
 8011faa:	b082      	sub	sp, #8
 8011fac:	af00      	add	r7, sp, #0
 8011fae:	6078      	str	r0, [r7, #4]
 8011fb0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8011fb2:	687b      	ldr	r3, [r7, #4]
 8011fb4:	2b00      	cmp	r3, #0
 8011fb6:	d106      	bne.n	8011fc6 <memp_free_pool+0x1e>
 8011fb8:	4b0a      	ldr	r3, [pc, #40]	; (8011fe4 <memp_free_pool+0x3c>)
 8011fba:	f240 1295 	movw	r2, #405	; 0x195
 8011fbe:	490a      	ldr	r1, [pc, #40]	; (8011fe8 <memp_free_pool+0x40>)
 8011fc0:	480a      	ldr	r0, [pc, #40]	; (8011fec <memp_free_pool+0x44>)
 8011fc2:	f00d fb1f 	bl	801f604 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8011fc6:	687b      	ldr	r3, [r7, #4]
 8011fc8:	2b00      	cmp	r3, #0
 8011fca:	d007      	beq.n	8011fdc <memp_free_pool+0x34>
 8011fcc:	683b      	ldr	r3, [r7, #0]
 8011fce:	2b00      	cmp	r3, #0
 8011fd0:	d004      	beq.n	8011fdc <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8011fd2:	6839      	ldr	r1, [r7, #0]
 8011fd4:	6878      	ldr	r0, [r7, #4]
 8011fd6:	f7ff ffbb 	bl	8011f50 <do_memp_free_pool>
 8011fda:	e000      	b.n	8011fde <memp_free_pool+0x36>
    return;
 8011fdc:	bf00      	nop
}
 8011fde:	3708      	adds	r7, #8
 8011fe0:	46bd      	mov	sp, r7
 8011fe2:	bd80      	pop	{r7, pc}
 8011fe4:	08024510 	.word	0x08024510
 8011fe8:	0802458c 	.word	0x0802458c
 8011fec:	08024564 	.word	0x08024564

08011ff0 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8011ff0:	b580      	push	{r7, lr}
 8011ff2:	b082      	sub	sp, #8
 8011ff4:	af00      	add	r7, sp, #0
 8011ff6:	4603      	mov	r3, r0
 8011ff8:	6039      	str	r1, [r7, #0]
 8011ffa:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8011ffc:	79fb      	ldrb	r3, [r7, #7]
 8011ffe:	2b0c      	cmp	r3, #12
 8012000:	d907      	bls.n	8012012 <memp_free+0x22>
 8012002:	4b0c      	ldr	r3, [pc, #48]	; (8012034 <memp_free+0x44>)
 8012004:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8012008:	490b      	ldr	r1, [pc, #44]	; (8012038 <memp_free+0x48>)
 801200a:	480c      	ldr	r0, [pc, #48]	; (801203c <memp_free+0x4c>)
 801200c:	f00d fafa 	bl	801f604 <iprintf>
 8012010:	e00c      	b.n	801202c <memp_free+0x3c>

  if (mem == NULL) {
 8012012:	683b      	ldr	r3, [r7, #0]
 8012014:	2b00      	cmp	r3, #0
 8012016:	d008      	beq.n	801202a <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8012018:	79fb      	ldrb	r3, [r7, #7]
 801201a:	4a09      	ldr	r2, [pc, #36]	; (8012040 <memp_free+0x50>)
 801201c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012020:	6839      	ldr	r1, [r7, #0]
 8012022:	4618      	mov	r0, r3
 8012024:	f7ff ff94 	bl	8011f50 <do_memp_free_pool>
 8012028:	e000      	b.n	801202c <memp_free+0x3c>
    return;
 801202a:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 801202c:	3708      	adds	r7, #8
 801202e:	46bd      	mov	sp, r7
 8012030:	bd80      	pop	{r7, pc}
 8012032:	bf00      	nop
 8012034:	08024510 	.word	0x08024510
 8012038:	080245e0 	.word	0x080245e0
 801203c:	08024564 	.word	0x08024564
 8012040:	08027108 	.word	0x08027108

08012044 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8012044:	b480      	push	{r7}
 8012046:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8012048:	bf00      	nop
 801204a:	46bd      	mov	sp, r7
 801204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012050:	4770      	bx	lr
	...

08012054 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8012054:	b580      	push	{r7, lr}
 8012056:	b086      	sub	sp, #24
 8012058:	af00      	add	r7, sp, #0
 801205a:	60f8      	str	r0, [r7, #12]
 801205c:	60b9      	str	r1, [r7, #8]
 801205e:	607a      	str	r2, [r7, #4]
 8012060:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8012062:	68fb      	ldr	r3, [r7, #12]
 8012064:	2b00      	cmp	r3, #0
 8012066:	d108      	bne.n	801207a <netif_add+0x26>
 8012068:	4b5b      	ldr	r3, [pc, #364]	; (80121d8 <netif_add+0x184>)
 801206a:	f240 1227 	movw	r2, #295	; 0x127
 801206e:	495b      	ldr	r1, [pc, #364]	; (80121dc <netif_add+0x188>)
 8012070:	485b      	ldr	r0, [pc, #364]	; (80121e0 <netif_add+0x18c>)
 8012072:	f00d fac7 	bl	801f604 <iprintf>
 8012076:	2300      	movs	r3, #0
 8012078:	e0a9      	b.n	80121ce <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 801207a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801207c:	2b00      	cmp	r3, #0
 801207e:	d108      	bne.n	8012092 <netif_add+0x3e>
 8012080:	4b55      	ldr	r3, [pc, #340]	; (80121d8 <netif_add+0x184>)
 8012082:	f44f 7294 	mov.w	r2, #296	; 0x128
 8012086:	4957      	ldr	r1, [pc, #348]	; (80121e4 <netif_add+0x190>)
 8012088:	4855      	ldr	r0, [pc, #340]	; (80121e0 <netif_add+0x18c>)
 801208a:	f00d fabb 	bl	801f604 <iprintf>
 801208e:	2300      	movs	r3, #0
 8012090:	e09d      	b.n	80121ce <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8012092:	68bb      	ldr	r3, [r7, #8]
 8012094:	2b00      	cmp	r3, #0
 8012096:	d101      	bne.n	801209c <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8012098:	4b53      	ldr	r3, [pc, #332]	; (80121e8 <netif_add+0x194>)
 801209a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 801209c:	687b      	ldr	r3, [r7, #4]
 801209e:	2b00      	cmp	r3, #0
 80120a0:	d101      	bne.n	80120a6 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 80120a2:	4b51      	ldr	r3, [pc, #324]	; (80121e8 <netif_add+0x194>)
 80120a4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80120a6:	683b      	ldr	r3, [r7, #0]
 80120a8:	2b00      	cmp	r3, #0
 80120aa:	d101      	bne.n	80120b0 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 80120ac:	4b4e      	ldr	r3, [pc, #312]	; (80121e8 <netif_add+0x194>)
 80120ae:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 80120b0:	68fb      	ldr	r3, [r7, #12]
 80120b2:	2200      	movs	r2, #0
 80120b4:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 80120b6:	68fb      	ldr	r3, [r7, #12]
 80120b8:	2200      	movs	r2, #0
 80120ba:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 80120bc:	68fb      	ldr	r3, [r7, #12]
 80120be:	2200      	movs	r2, #0
 80120c0:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 80120c2:	68fb      	ldr	r3, [r7, #12]
 80120c4:	4a49      	ldr	r2, [pc, #292]	; (80121ec <netif_add+0x198>)
 80120c6:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 80120c8:	68fb      	ldr	r3, [r7, #12]
 80120ca:	2200      	movs	r2, #0
 80120cc:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 80120ce:	68fb      	ldr	r3, [r7, #12]
 80120d0:	2200      	movs	r2, #0
 80120d2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 80120d6:	68fb      	ldr	r3, [r7, #12]
 80120d8:	3324      	adds	r3, #36	; 0x24
 80120da:	2204      	movs	r2, #4
 80120dc:	2100      	movs	r1, #0
 80120de:	4618      	mov	r0, r3
 80120e0:	f00c fc42 	bl	801e968 <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 80120e4:	68fb      	ldr	r3, [r7, #12]
 80120e6:	2200      	movs	r2, #0
 80120e8:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 80120ea:	68fb      	ldr	r3, [r7, #12]
 80120ec:	6a3a      	ldr	r2, [r7, #32]
 80120ee:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 80120f0:	4b3f      	ldr	r3, [pc, #252]	; (80121f0 <netif_add+0x19c>)
 80120f2:	781a      	ldrb	r2, [r3, #0]
 80120f4:	68fb      	ldr	r3, [r7, #12]
 80120f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 80120fa:	68fb      	ldr	r3, [r7, #12]
 80120fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80120fe:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8012100:	683b      	ldr	r3, [r7, #0]
 8012102:	687a      	ldr	r2, [r7, #4]
 8012104:	68b9      	ldr	r1, [r7, #8]
 8012106:	68f8      	ldr	r0, [r7, #12]
 8012108:	f000 f914 	bl	8012334 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 801210c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801210e:	68f8      	ldr	r0, [r7, #12]
 8012110:	4798      	blx	r3
 8012112:	4603      	mov	r3, r0
 8012114:	2b00      	cmp	r3, #0
 8012116:	d001      	beq.n	801211c <netif_add+0xc8>
    return NULL;
 8012118:	2300      	movs	r3, #0
 801211a:	e058      	b.n	80121ce <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 801211c:	68fb      	ldr	r3, [r7, #12]
 801211e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8012122:	2bff      	cmp	r3, #255	; 0xff
 8012124:	d103      	bne.n	801212e <netif_add+0xda>
        netif->num = 0;
 8012126:	68fb      	ldr	r3, [r7, #12]
 8012128:	2200      	movs	r2, #0
 801212a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 801212e:	2300      	movs	r3, #0
 8012130:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8012132:	4b30      	ldr	r3, [pc, #192]	; (80121f4 <netif_add+0x1a0>)
 8012134:	681b      	ldr	r3, [r3, #0]
 8012136:	617b      	str	r3, [r7, #20]
 8012138:	e02b      	b.n	8012192 <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 801213a:	697a      	ldr	r2, [r7, #20]
 801213c:	68fb      	ldr	r3, [r7, #12]
 801213e:	429a      	cmp	r2, r3
 8012140:	d106      	bne.n	8012150 <netif_add+0xfc>
 8012142:	4b25      	ldr	r3, [pc, #148]	; (80121d8 <netif_add+0x184>)
 8012144:	f240 128b 	movw	r2, #395	; 0x18b
 8012148:	492b      	ldr	r1, [pc, #172]	; (80121f8 <netif_add+0x1a4>)
 801214a:	4825      	ldr	r0, [pc, #148]	; (80121e0 <netif_add+0x18c>)
 801214c:	f00d fa5a 	bl	801f604 <iprintf>
        num_netifs++;
 8012150:	693b      	ldr	r3, [r7, #16]
 8012152:	3301      	adds	r3, #1
 8012154:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8012156:	693b      	ldr	r3, [r7, #16]
 8012158:	2bff      	cmp	r3, #255	; 0xff
 801215a:	dd06      	ble.n	801216a <netif_add+0x116>
 801215c:	4b1e      	ldr	r3, [pc, #120]	; (80121d8 <netif_add+0x184>)
 801215e:	f240 128d 	movw	r2, #397	; 0x18d
 8012162:	4926      	ldr	r1, [pc, #152]	; (80121fc <netif_add+0x1a8>)
 8012164:	481e      	ldr	r0, [pc, #120]	; (80121e0 <netif_add+0x18c>)
 8012166:	f00d fa4d 	bl	801f604 <iprintf>
        if (netif2->num == netif->num) {
 801216a:	697b      	ldr	r3, [r7, #20]
 801216c:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8012170:	68fb      	ldr	r3, [r7, #12]
 8012172:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8012176:	429a      	cmp	r2, r3
 8012178:	d108      	bne.n	801218c <netif_add+0x138>
          netif->num++;
 801217a:	68fb      	ldr	r3, [r7, #12]
 801217c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8012180:	3301      	adds	r3, #1
 8012182:	b2da      	uxtb	r2, r3
 8012184:	68fb      	ldr	r3, [r7, #12]
 8012186:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 801218a:	e005      	b.n	8012198 <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 801218c:	697b      	ldr	r3, [r7, #20]
 801218e:	681b      	ldr	r3, [r3, #0]
 8012190:	617b      	str	r3, [r7, #20]
 8012192:	697b      	ldr	r3, [r7, #20]
 8012194:	2b00      	cmp	r3, #0
 8012196:	d1d0      	bne.n	801213a <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 8012198:	697b      	ldr	r3, [r7, #20]
 801219a:	2b00      	cmp	r3, #0
 801219c:	d1be      	bne.n	801211c <netif_add+0xc8>
  }
  if (netif->num == 254) {
 801219e:	68fb      	ldr	r3, [r7, #12]
 80121a0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80121a4:	2bfe      	cmp	r3, #254	; 0xfe
 80121a6:	d103      	bne.n	80121b0 <netif_add+0x15c>
    netif_num = 0;
 80121a8:	4b11      	ldr	r3, [pc, #68]	; (80121f0 <netif_add+0x19c>)
 80121aa:	2200      	movs	r2, #0
 80121ac:	701a      	strb	r2, [r3, #0]
 80121ae:	e006      	b.n	80121be <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 80121b0:	68fb      	ldr	r3, [r7, #12]
 80121b2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80121b6:	3301      	adds	r3, #1
 80121b8:	b2da      	uxtb	r2, r3
 80121ba:	4b0d      	ldr	r3, [pc, #52]	; (80121f0 <netif_add+0x19c>)
 80121bc:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 80121be:	4b0d      	ldr	r3, [pc, #52]	; (80121f4 <netif_add+0x1a0>)
 80121c0:	681a      	ldr	r2, [r3, #0]
 80121c2:	68fb      	ldr	r3, [r7, #12]
 80121c4:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 80121c6:	4a0b      	ldr	r2, [pc, #44]	; (80121f4 <netif_add+0x1a0>)
 80121c8:	68fb      	ldr	r3, [r7, #12]
 80121ca:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 80121cc:	68fb      	ldr	r3, [r7, #12]
}
 80121ce:	4618      	mov	r0, r3
 80121d0:	3718      	adds	r7, #24
 80121d2:	46bd      	mov	sp, r7
 80121d4:	bd80      	pop	{r7, pc}
 80121d6:	bf00      	nop
 80121d8:	080245fc 	.word	0x080245fc
 80121dc:	08024690 	.word	0x08024690
 80121e0:	0802464c 	.word	0x0802464c
 80121e4:	080246ac 	.word	0x080246ac
 80121e8:	0802718c 	.word	0x0802718c
 80121ec:	08012617 	.word	0x08012617
 80121f0:	2400453c 	.word	0x2400453c
 80121f4:	24007f2c 	.word	0x24007f2c
 80121f8:	080246d0 	.word	0x080246d0
 80121fc:	080246e4 	.word	0x080246e4

08012200 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8012200:	b580      	push	{r7, lr}
 8012202:	b082      	sub	sp, #8
 8012204:	af00      	add	r7, sp, #0
 8012206:	6078      	str	r0, [r7, #4]
 8012208:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 801220a:	6839      	ldr	r1, [r7, #0]
 801220c:	6878      	ldr	r0, [r7, #4]
 801220e:	f002 fe95 	bl	8014f3c <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8012212:	6839      	ldr	r1, [r7, #0]
 8012214:	6878      	ldr	r0, [r7, #4]
 8012216:	f007 ff9b 	bl	801a150 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 801221a:	bf00      	nop
 801221c:	3708      	adds	r7, #8
 801221e:	46bd      	mov	sp, r7
 8012220:	bd80      	pop	{r7, pc}
	...

08012224 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8012224:	b580      	push	{r7, lr}
 8012226:	b086      	sub	sp, #24
 8012228:	af00      	add	r7, sp, #0
 801222a:	60f8      	str	r0, [r7, #12]
 801222c:	60b9      	str	r1, [r7, #8]
 801222e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8012230:	68bb      	ldr	r3, [r7, #8]
 8012232:	2b00      	cmp	r3, #0
 8012234:	d106      	bne.n	8012244 <netif_do_set_ipaddr+0x20>
 8012236:	4b1d      	ldr	r3, [pc, #116]	; (80122ac <netif_do_set_ipaddr+0x88>)
 8012238:	f240 12cb 	movw	r2, #459	; 0x1cb
 801223c:	491c      	ldr	r1, [pc, #112]	; (80122b0 <netif_do_set_ipaddr+0x8c>)
 801223e:	481d      	ldr	r0, [pc, #116]	; (80122b4 <netif_do_set_ipaddr+0x90>)
 8012240:	f00d f9e0 	bl	801f604 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8012244:	687b      	ldr	r3, [r7, #4]
 8012246:	2b00      	cmp	r3, #0
 8012248:	d106      	bne.n	8012258 <netif_do_set_ipaddr+0x34>
 801224a:	4b18      	ldr	r3, [pc, #96]	; (80122ac <netif_do_set_ipaddr+0x88>)
 801224c:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8012250:	4917      	ldr	r1, [pc, #92]	; (80122b0 <netif_do_set_ipaddr+0x8c>)
 8012252:	4818      	ldr	r0, [pc, #96]	; (80122b4 <netif_do_set_ipaddr+0x90>)
 8012254:	f00d f9d6 	bl	801f604 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8012258:	68bb      	ldr	r3, [r7, #8]
 801225a:	681a      	ldr	r2, [r3, #0]
 801225c:	68fb      	ldr	r3, [r7, #12]
 801225e:	3304      	adds	r3, #4
 8012260:	681b      	ldr	r3, [r3, #0]
 8012262:	429a      	cmp	r2, r3
 8012264:	d01c      	beq.n	80122a0 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8012266:	68bb      	ldr	r3, [r7, #8]
 8012268:	681b      	ldr	r3, [r3, #0]
 801226a:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 801226c:	68fb      	ldr	r3, [r7, #12]
 801226e:	3304      	adds	r3, #4
 8012270:	681a      	ldr	r2, [r3, #0]
 8012272:	687b      	ldr	r3, [r7, #4]
 8012274:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8012276:	f107 0314 	add.w	r3, r7, #20
 801227a:	4619      	mov	r1, r3
 801227c:	6878      	ldr	r0, [r7, #4]
 801227e:	f7ff ffbf 	bl	8012200 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8012282:	68bb      	ldr	r3, [r7, #8]
 8012284:	2b00      	cmp	r3, #0
 8012286:	d002      	beq.n	801228e <netif_do_set_ipaddr+0x6a>
 8012288:	68bb      	ldr	r3, [r7, #8]
 801228a:	681b      	ldr	r3, [r3, #0]
 801228c:	e000      	b.n	8012290 <netif_do_set_ipaddr+0x6c>
 801228e:	2300      	movs	r3, #0
 8012290:	68fa      	ldr	r2, [r7, #12]
 8012292:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8012294:	2101      	movs	r1, #1
 8012296:	68f8      	ldr	r0, [r7, #12]
 8012298:	f000 f8d2 	bl	8012440 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 801229c:	2301      	movs	r3, #1
 801229e:	e000      	b.n	80122a2 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 80122a0:	2300      	movs	r3, #0
}
 80122a2:	4618      	mov	r0, r3
 80122a4:	3718      	adds	r7, #24
 80122a6:	46bd      	mov	sp, r7
 80122a8:	bd80      	pop	{r7, pc}
 80122aa:	bf00      	nop
 80122ac:	080245fc 	.word	0x080245fc
 80122b0:	08024714 	.word	0x08024714
 80122b4:	0802464c 	.word	0x0802464c

080122b8 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 80122b8:	b480      	push	{r7}
 80122ba:	b085      	sub	sp, #20
 80122bc:	af00      	add	r7, sp, #0
 80122be:	60f8      	str	r0, [r7, #12]
 80122c0:	60b9      	str	r1, [r7, #8]
 80122c2:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 80122c4:	68bb      	ldr	r3, [r7, #8]
 80122c6:	681a      	ldr	r2, [r3, #0]
 80122c8:	68fb      	ldr	r3, [r7, #12]
 80122ca:	3308      	adds	r3, #8
 80122cc:	681b      	ldr	r3, [r3, #0]
 80122ce:	429a      	cmp	r2, r3
 80122d0:	d00a      	beq.n	80122e8 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 80122d2:	68bb      	ldr	r3, [r7, #8]
 80122d4:	2b00      	cmp	r3, #0
 80122d6:	d002      	beq.n	80122de <netif_do_set_netmask+0x26>
 80122d8:	68bb      	ldr	r3, [r7, #8]
 80122da:	681b      	ldr	r3, [r3, #0]
 80122dc:	e000      	b.n	80122e0 <netif_do_set_netmask+0x28>
 80122de:	2300      	movs	r3, #0
 80122e0:	68fa      	ldr	r2, [r7, #12]
 80122e2:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 80122e4:	2301      	movs	r3, #1
 80122e6:	e000      	b.n	80122ea <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 80122e8:	2300      	movs	r3, #0
}
 80122ea:	4618      	mov	r0, r3
 80122ec:	3714      	adds	r7, #20
 80122ee:	46bd      	mov	sp, r7
 80122f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122f4:	4770      	bx	lr

080122f6 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 80122f6:	b480      	push	{r7}
 80122f8:	b085      	sub	sp, #20
 80122fa:	af00      	add	r7, sp, #0
 80122fc:	60f8      	str	r0, [r7, #12]
 80122fe:	60b9      	str	r1, [r7, #8]
 8012300:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8012302:	68bb      	ldr	r3, [r7, #8]
 8012304:	681a      	ldr	r2, [r3, #0]
 8012306:	68fb      	ldr	r3, [r7, #12]
 8012308:	330c      	adds	r3, #12
 801230a:	681b      	ldr	r3, [r3, #0]
 801230c:	429a      	cmp	r2, r3
 801230e:	d00a      	beq.n	8012326 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8012310:	68bb      	ldr	r3, [r7, #8]
 8012312:	2b00      	cmp	r3, #0
 8012314:	d002      	beq.n	801231c <netif_do_set_gw+0x26>
 8012316:	68bb      	ldr	r3, [r7, #8]
 8012318:	681b      	ldr	r3, [r3, #0]
 801231a:	e000      	b.n	801231e <netif_do_set_gw+0x28>
 801231c:	2300      	movs	r3, #0
 801231e:	68fa      	ldr	r2, [r7, #12]
 8012320:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8012322:	2301      	movs	r3, #1
 8012324:	e000      	b.n	8012328 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8012326:	2300      	movs	r3, #0
}
 8012328:	4618      	mov	r0, r3
 801232a:	3714      	adds	r7, #20
 801232c:	46bd      	mov	sp, r7
 801232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012332:	4770      	bx	lr

08012334 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8012334:	b580      	push	{r7, lr}
 8012336:	b088      	sub	sp, #32
 8012338:	af00      	add	r7, sp, #0
 801233a:	60f8      	str	r0, [r7, #12]
 801233c:	60b9      	str	r1, [r7, #8]
 801233e:	607a      	str	r2, [r7, #4]
 8012340:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8012342:	2300      	movs	r3, #0
 8012344:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8012346:	2300      	movs	r3, #0
 8012348:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801234a:	68bb      	ldr	r3, [r7, #8]
 801234c:	2b00      	cmp	r3, #0
 801234e:	d101      	bne.n	8012354 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8012350:	4b1c      	ldr	r3, [pc, #112]	; (80123c4 <netif_set_addr+0x90>)
 8012352:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8012354:	687b      	ldr	r3, [r7, #4]
 8012356:	2b00      	cmp	r3, #0
 8012358:	d101      	bne.n	801235e <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 801235a:	4b1a      	ldr	r3, [pc, #104]	; (80123c4 <netif_set_addr+0x90>)
 801235c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 801235e:	683b      	ldr	r3, [r7, #0]
 8012360:	2b00      	cmp	r3, #0
 8012362:	d101      	bne.n	8012368 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8012364:	4b17      	ldr	r3, [pc, #92]	; (80123c4 <netif_set_addr+0x90>)
 8012366:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8012368:	68bb      	ldr	r3, [r7, #8]
 801236a:	2b00      	cmp	r3, #0
 801236c:	d003      	beq.n	8012376 <netif_set_addr+0x42>
 801236e:	68bb      	ldr	r3, [r7, #8]
 8012370:	681b      	ldr	r3, [r3, #0]
 8012372:	2b00      	cmp	r3, #0
 8012374:	d101      	bne.n	801237a <netif_set_addr+0x46>
 8012376:	2301      	movs	r3, #1
 8012378:	e000      	b.n	801237c <netif_set_addr+0x48>
 801237a:	2300      	movs	r3, #0
 801237c:	617b      	str	r3, [r7, #20]
  if (remove) {
 801237e:	697b      	ldr	r3, [r7, #20]
 8012380:	2b00      	cmp	r3, #0
 8012382:	d006      	beq.n	8012392 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8012384:	f107 0310 	add.w	r3, r7, #16
 8012388:	461a      	mov	r2, r3
 801238a:	68b9      	ldr	r1, [r7, #8]
 801238c:	68f8      	ldr	r0, [r7, #12]
 801238e:	f7ff ff49 	bl	8012224 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8012392:	69fa      	ldr	r2, [r7, #28]
 8012394:	6879      	ldr	r1, [r7, #4]
 8012396:	68f8      	ldr	r0, [r7, #12]
 8012398:	f7ff ff8e 	bl	80122b8 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 801239c:	69ba      	ldr	r2, [r7, #24]
 801239e:	6839      	ldr	r1, [r7, #0]
 80123a0:	68f8      	ldr	r0, [r7, #12]
 80123a2:	f7ff ffa8 	bl	80122f6 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 80123a6:	697b      	ldr	r3, [r7, #20]
 80123a8:	2b00      	cmp	r3, #0
 80123aa:	d106      	bne.n	80123ba <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80123ac:	f107 0310 	add.w	r3, r7, #16
 80123b0:	461a      	mov	r2, r3
 80123b2:	68b9      	ldr	r1, [r7, #8]
 80123b4:	68f8      	ldr	r0, [r7, #12]
 80123b6:	f7ff ff35 	bl	8012224 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 80123ba:	bf00      	nop
 80123bc:	3720      	adds	r7, #32
 80123be:	46bd      	mov	sp, r7
 80123c0:	bd80      	pop	{r7, pc}
 80123c2:	bf00      	nop
 80123c4:	0802718c 	.word	0x0802718c

080123c8 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 80123c8:	b480      	push	{r7}
 80123ca:	b083      	sub	sp, #12
 80123cc:	af00      	add	r7, sp, #0
 80123ce:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 80123d0:	4a04      	ldr	r2, [pc, #16]	; (80123e4 <netif_set_default+0x1c>)
 80123d2:	687b      	ldr	r3, [r7, #4]
 80123d4:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 80123d6:	bf00      	nop
 80123d8:	370c      	adds	r7, #12
 80123da:	46bd      	mov	sp, r7
 80123dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123e0:	4770      	bx	lr
 80123e2:	bf00      	nop
 80123e4:	24007f30 	.word	0x24007f30

080123e8 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 80123e8:	b580      	push	{r7, lr}
 80123ea:	b082      	sub	sp, #8
 80123ec:	af00      	add	r7, sp, #0
 80123ee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 80123f0:	687b      	ldr	r3, [r7, #4]
 80123f2:	2b00      	cmp	r3, #0
 80123f4:	d107      	bne.n	8012406 <netif_set_up+0x1e>
 80123f6:	4b0f      	ldr	r3, [pc, #60]	; (8012434 <netif_set_up+0x4c>)
 80123f8:	f44f 7254 	mov.w	r2, #848	; 0x350
 80123fc:	490e      	ldr	r1, [pc, #56]	; (8012438 <netif_set_up+0x50>)
 80123fe:	480f      	ldr	r0, [pc, #60]	; (801243c <netif_set_up+0x54>)
 8012400:	f00d f900 	bl	801f604 <iprintf>
 8012404:	e013      	b.n	801242e <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8012406:	687b      	ldr	r3, [r7, #4]
 8012408:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801240c:	f003 0301 	and.w	r3, r3, #1
 8012410:	2b00      	cmp	r3, #0
 8012412:	d10c      	bne.n	801242e <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8012414:	687b      	ldr	r3, [r7, #4]
 8012416:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801241a:	f043 0301 	orr.w	r3, r3, #1
 801241e:	b2da      	uxtb	r2, r3
 8012420:	687b      	ldr	r3, [r7, #4]
 8012422:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8012426:	2103      	movs	r1, #3
 8012428:	6878      	ldr	r0, [r7, #4]
 801242a:	f000 f809 	bl	8012440 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 801242e:	3708      	adds	r7, #8
 8012430:	46bd      	mov	sp, r7
 8012432:	bd80      	pop	{r7, pc}
 8012434:	080245fc 	.word	0x080245fc
 8012438:	08024784 	.word	0x08024784
 801243c:	0802464c 	.word	0x0802464c

08012440 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8012440:	b580      	push	{r7, lr}
 8012442:	b082      	sub	sp, #8
 8012444:	af00      	add	r7, sp, #0
 8012446:	6078      	str	r0, [r7, #4]
 8012448:	460b      	mov	r3, r1
 801244a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 801244c:	687b      	ldr	r3, [r7, #4]
 801244e:	2b00      	cmp	r3, #0
 8012450:	d106      	bne.n	8012460 <netif_issue_reports+0x20>
 8012452:	4b18      	ldr	r3, [pc, #96]	; (80124b4 <netif_issue_reports+0x74>)
 8012454:	f240 326d 	movw	r2, #877	; 0x36d
 8012458:	4917      	ldr	r1, [pc, #92]	; (80124b8 <netif_issue_reports+0x78>)
 801245a:	4818      	ldr	r0, [pc, #96]	; (80124bc <netif_issue_reports+0x7c>)
 801245c:	f00d f8d2 	bl	801f604 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8012460:	687b      	ldr	r3, [r7, #4]
 8012462:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012466:	f003 0304 	and.w	r3, r3, #4
 801246a:	2b00      	cmp	r3, #0
 801246c:	d01e      	beq.n	80124ac <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 801246e:	687b      	ldr	r3, [r7, #4]
 8012470:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012474:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8012478:	2b00      	cmp	r3, #0
 801247a:	d017      	beq.n	80124ac <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 801247c:	78fb      	ldrb	r3, [r7, #3]
 801247e:	f003 0301 	and.w	r3, r3, #1
 8012482:	2b00      	cmp	r3, #0
 8012484:	d013      	beq.n	80124ae <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8012486:	687b      	ldr	r3, [r7, #4]
 8012488:	3304      	adds	r3, #4
 801248a:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 801248c:	2b00      	cmp	r3, #0
 801248e:	d00e      	beq.n	80124ae <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8012490:	687b      	ldr	r3, [r7, #4]
 8012492:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012496:	f003 0308 	and.w	r3, r3, #8
 801249a:	2b00      	cmp	r3, #0
 801249c:	d007      	beq.n	80124ae <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 801249e:	687b      	ldr	r3, [r7, #4]
 80124a0:	3304      	adds	r3, #4
 80124a2:	4619      	mov	r1, r3
 80124a4:	6878      	ldr	r0, [r7, #4]
 80124a6:	f00a fc55 	bl	801cd54 <etharp_request>
 80124aa:	e000      	b.n	80124ae <netif_issue_reports+0x6e>
    return;
 80124ac:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 80124ae:	3708      	adds	r7, #8
 80124b0:	46bd      	mov	sp, r7
 80124b2:	bd80      	pop	{r7, pc}
 80124b4:	080245fc 	.word	0x080245fc
 80124b8:	080247a0 	.word	0x080247a0
 80124bc:	0802464c 	.word	0x0802464c

080124c0 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 80124c0:	b580      	push	{r7, lr}
 80124c2:	b082      	sub	sp, #8
 80124c4:	af00      	add	r7, sp, #0
 80124c6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 80124c8:	687b      	ldr	r3, [r7, #4]
 80124ca:	2b00      	cmp	r3, #0
 80124cc:	d107      	bne.n	80124de <netif_set_down+0x1e>
 80124ce:	4b12      	ldr	r3, [pc, #72]	; (8012518 <netif_set_down+0x58>)
 80124d0:	f240 329b 	movw	r2, #923	; 0x39b
 80124d4:	4911      	ldr	r1, [pc, #68]	; (801251c <netif_set_down+0x5c>)
 80124d6:	4812      	ldr	r0, [pc, #72]	; (8012520 <netif_set_down+0x60>)
 80124d8:	f00d f894 	bl	801f604 <iprintf>
 80124dc:	e019      	b.n	8012512 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 80124de:	687b      	ldr	r3, [r7, #4]
 80124e0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80124e4:	f003 0301 	and.w	r3, r3, #1
 80124e8:	2b00      	cmp	r3, #0
 80124ea:	d012      	beq.n	8012512 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 80124ec:	687b      	ldr	r3, [r7, #4]
 80124ee:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80124f2:	f023 0301 	bic.w	r3, r3, #1
 80124f6:	b2da      	uxtb	r2, r3
 80124f8:	687b      	ldr	r3, [r7, #4]
 80124fa:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80124fe:	687b      	ldr	r3, [r7, #4]
 8012500:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012504:	f003 0308 	and.w	r3, r3, #8
 8012508:	2b00      	cmp	r3, #0
 801250a:	d002      	beq.n	8012512 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 801250c:	6878      	ldr	r0, [r7, #4]
 801250e:	f009 ffdb 	bl	801c4c8 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8012512:	3708      	adds	r7, #8
 8012514:	46bd      	mov	sp, r7
 8012516:	bd80      	pop	{r7, pc}
 8012518:	080245fc 	.word	0x080245fc
 801251c:	080247c4 	.word	0x080247c4
 8012520:	0802464c 	.word	0x0802464c

08012524 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8012524:	b580      	push	{r7, lr}
 8012526:	b082      	sub	sp, #8
 8012528:	af00      	add	r7, sp, #0
 801252a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 801252c:	687b      	ldr	r3, [r7, #4]
 801252e:	2b00      	cmp	r3, #0
 8012530:	d107      	bne.n	8012542 <netif_set_link_up+0x1e>
 8012532:	4b15      	ldr	r3, [pc, #84]	; (8012588 <netif_set_link_up+0x64>)
 8012534:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8012538:	4914      	ldr	r1, [pc, #80]	; (801258c <netif_set_link_up+0x68>)
 801253a:	4815      	ldr	r0, [pc, #84]	; (8012590 <netif_set_link_up+0x6c>)
 801253c:	f00d f862 	bl	801f604 <iprintf>
 8012540:	e01e      	b.n	8012580 <netif_set_link_up+0x5c>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8012542:	687b      	ldr	r3, [r7, #4]
 8012544:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012548:	f003 0304 	and.w	r3, r3, #4
 801254c:	2b00      	cmp	r3, #0
 801254e:	d117      	bne.n	8012580 <netif_set_link_up+0x5c>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8012550:	687b      	ldr	r3, [r7, #4]
 8012552:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012556:	f043 0304 	orr.w	r3, r3, #4
 801255a:	b2da      	uxtb	r2, r3
 801255c:	687b      	ldr	r3, [r7, #4]
 801255e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if LWIP_DHCP
    dhcp_network_changed(netif);
 8012562:	6878      	ldr	r0, [r7, #4]
 8012564:	f008 fa20 	bl	801a9a8 <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8012568:	2103      	movs	r1, #3
 801256a:	6878      	ldr	r0, [r7, #4]
 801256c:	f7ff ff68 	bl	8012440 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8012570:	687b      	ldr	r3, [r7, #4]
 8012572:	69db      	ldr	r3, [r3, #28]
 8012574:	2b00      	cmp	r3, #0
 8012576:	d003      	beq.n	8012580 <netif_set_link_up+0x5c>
 8012578:	687b      	ldr	r3, [r7, #4]
 801257a:	69db      	ldr	r3, [r3, #28]
 801257c:	6878      	ldr	r0, [r7, #4]
 801257e:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8012580:	3708      	adds	r7, #8
 8012582:	46bd      	mov	sp, r7
 8012584:	bd80      	pop	{r7, pc}
 8012586:	bf00      	nop
 8012588:	080245fc 	.word	0x080245fc
 801258c:	080247e4 	.word	0x080247e4
 8012590:	0802464c 	.word	0x0802464c

08012594 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8012594:	b580      	push	{r7, lr}
 8012596:	b082      	sub	sp, #8
 8012598:	af00      	add	r7, sp, #0
 801259a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 801259c:	687b      	ldr	r3, [r7, #4]
 801259e:	2b00      	cmp	r3, #0
 80125a0:	d107      	bne.n	80125b2 <netif_set_link_down+0x1e>
 80125a2:	4b11      	ldr	r3, [pc, #68]	; (80125e8 <netif_set_link_down+0x54>)
 80125a4:	f240 4206 	movw	r2, #1030	; 0x406
 80125a8:	4910      	ldr	r1, [pc, #64]	; (80125ec <netif_set_link_down+0x58>)
 80125aa:	4811      	ldr	r0, [pc, #68]	; (80125f0 <netif_set_link_down+0x5c>)
 80125ac:	f00d f82a 	bl	801f604 <iprintf>
 80125b0:	e017      	b.n	80125e2 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 80125b2:	687b      	ldr	r3, [r7, #4]
 80125b4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80125b8:	f003 0304 	and.w	r3, r3, #4
 80125bc:	2b00      	cmp	r3, #0
 80125be:	d010      	beq.n	80125e2 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 80125c0:	687b      	ldr	r3, [r7, #4]
 80125c2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80125c6:	f023 0304 	bic.w	r3, r3, #4
 80125ca:	b2da      	uxtb	r2, r3
 80125cc:	687b      	ldr	r3, [r7, #4]
 80125ce:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    NETIF_LINK_CALLBACK(netif);
 80125d2:	687b      	ldr	r3, [r7, #4]
 80125d4:	69db      	ldr	r3, [r3, #28]
 80125d6:	2b00      	cmp	r3, #0
 80125d8:	d003      	beq.n	80125e2 <netif_set_link_down+0x4e>
 80125da:	687b      	ldr	r3, [r7, #4]
 80125dc:	69db      	ldr	r3, [r3, #28]
 80125de:	6878      	ldr	r0, [r7, #4]
 80125e0:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80125e2:	3708      	adds	r7, #8
 80125e4:	46bd      	mov	sp, r7
 80125e6:	bd80      	pop	{r7, pc}
 80125e8:	080245fc 	.word	0x080245fc
 80125ec:	08024808 	.word	0x08024808
 80125f0:	0802464c 	.word	0x0802464c

080125f4 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 80125f4:	b480      	push	{r7}
 80125f6:	b083      	sub	sp, #12
 80125f8:	af00      	add	r7, sp, #0
 80125fa:	6078      	str	r0, [r7, #4]
 80125fc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 80125fe:	687b      	ldr	r3, [r7, #4]
 8012600:	2b00      	cmp	r3, #0
 8012602:	d002      	beq.n	801260a <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8012604:	687b      	ldr	r3, [r7, #4]
 8012606:	683a      	ldr	r2, [r7, #0]
 8012608:	61da      	str	r2, [r3, #28]
  }
}
 801260a:	bf00      	nop
 801260c:	370c      	adds	r7, #12
 801260e:	46bd      	mov	sp, r7
 8012610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012614:	4770      	bx	lr

08012616 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8012616:	b480      	push	{r7}
 8012618:	b085      	sub	sp, #20
 801261a:	af00      	add	r7, sp, #0
 801261c:	60f8      	str	r0, [r7, #12]
 801261e:	60b9      	str	r1, [r7, #8]
 8012620:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8012622:	f06f 030b 	mvn.w	r3, #11
}
 8012626:	4618      	mov	r0, r3
 8012628:	3714      	adds	r7, #20
 801262a:	46bd      	mov	sp, r7
 801262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012630:	4770      	bx	lr
	...

08012634 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8012634:	b480      	push	{r7}
 8012636:	b085      	sub	sp, #20
 8012638:	af00      	add	r7, sp, #0
 801263a:	4603      	mov	r3, r0
 801263c:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 801263e:	79fb      	ldrb	r3, [r7, #7]
 8012640:	2b00      	cmp	r3, #0
 8012642:	d013      	beq.n	801266c <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8012644:	4b0d      	ldr	r3, [pc, #52]	; (801267c <netif_get_by_index+0x48>)
 8012646:	681b      	ldr	r3, [r3, #0]
 8012648:	60fb      	str	r3, [r7, #12]
 801264a:	e00c      	b.n	8012666 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 801264c:	68fb      	ldr	r3, [r7, #12]
 801264e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8012652:	3301      	adds	r3, #1
 8012654:	b2db      	uxtb	r3, r3
 8012656:	79fa      	ldrb	r2, [r7, #7]
 8012658:	429a      	cmp	r2, r3
 801265a:	d101      	bne.n	8012660 <netif_get_by_index+0x2c>
        return netif; /* found! */
 801265c:	68fb      	ldr	r3, [r7, #12]
 801265e:	e006      	b.n	801266e <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8012660:	68fb      	ldr	r3, [r7, #12]
 8012662:	681b      	ldr	r3, [r3, #0]
 8012664:	60fb      	str	r3, [r7, #12]
 8012666:	68fb      	ldr	r3, [r7, #12]
 8012668:	2b00      	cmp	r3, #0
 801266a:	d1ef      	bne.n	801264c <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 801266c:	2300      	movs	r3, #0
}
 801266e:	4618      	mov	r0, r3
 8012670:	3714      	adds	r7, #20
 8012672:	46bd      	mov	sp, r7
 8012674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012678:	4770      	bx	lr
 801267a:	bf00      	nop
 801267c:	24007f2c 	.word	0x24007f2c

08012680 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8012680:	b580      	push	{r7, lr}
 8012682:	b082      	sub	sp, #8
 8012684:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8012686:	f00c f8f3 	bl	801e870 <sys_arch_protect>
 801268a:	6038      	str	r0, [r7, #0]
 801268c:	4b0d      	ldr	r3, [pc, #52]	; (80126c4 <pbuf_free_ooseq+0x44>)
 801268e:	2200      	movs	r2, #0
 8012690:	701a      	strb	r2, [r3, #0]
 8012692:	6838      	ldr	r0, [r7, #0]
 8012694:	f00c f8fa 	bl	801e88c <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8012698:	4b0b      	ldr	r3, [pc, #44]	; (80126c8 <pbuf_free_ooseq+0x48>)
 801269a:	681b      	ldr	r3, [r3, #0]
 801269c:	607b      	str	r3, [r7, #4]
 801269e:	e00a      	b.n	80126b6 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 80126a0:	687b      	ldr	r3, [r7, #4]
 80126a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80126a4:	2b00      	cmp	r3, #0
 80126a6:	d003      	beq.n	80126b0 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 80126a8:	6878      	ldr	r0, [r7, #4]
 80126aa:	f002 fc85 	bl	8014fb8 <tcp_free_ooseq>
      return;
 80126ae:	e005      	b.n	80126bc <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80126b0:	687b      	ldr	r3, [r7, #4]
 80126b2:	68db      	ldr	r3, [r3, #12]
 80126b4:	607b      	str	r3, [r7, #4]
 80126b6:	687b      	ldr	r3, [r7, #4]
 80126b8:	2b00      	cmp	r3, #0
 80126ba:	d1f1      	bne.n	80126a0 <pbuf_free_ooseq+0x20>
    }
  }
}
 80126bc:	3708      	adds	r7, #8
 80126be:	46bd      	mov	sp, r7
 80126c0:	bd80      	pop	{r7, pc}
 80126c2:	bf00      	nop
 80126c4:	24007f34 	.word	0x24007f34
 80126c8:	24007f3c 	.word	0x24007f3c

080126cc <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 80126cc:	b580      	push	{r7, lr}
 80126ce:	b082      	sub	sp, #8
 80126d0:	af00      	add	r7, sp, #0
 80126d2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 80126d4:	f7ff ffd4 	bl	8012680 <pbuf_free_ooseq>
}
 80126d8:	bf00      	nop
 80126da:	3708      	adds	r7, #8
 80126dc:	46bd      	mov	sp, r7
 80126de:	bd80      	pop	{r7, pc}

080126e0 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 80126e0:	b580      	push	{r7, lr}
 80126e2:	b082      	sub	sp, #8
 80126e4:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 80126e6:	f00c f8c3 	bl	801e870 <sys_arch_protect>
 80126ea:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 80126ec:	4b0f      	ldr	r3, [pc, #60]	; (801272c <pbuf_pool_is_empty+0x4c>)
 80126ee:	781b      	ldrb	r3, [r3, #0]
 80126f0:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 80126f2:	4b0e      	ldr	r3, [pc, #56]	; (801272c <pbuf_pool_is_empty+0x4c>)
 80126f4:	2201      	movs	r2, #1
 80126f6:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 80126f8:	6878      	ldr	r0, [r7, #4]
 80126fa:	f00c f8c7 	bl	801e88c <sys_arch_unprotect>

  if (!queued) {
 80126fe:	78fb      	ldrb	r3, [r7, #3]
 8012700:	2b00      	cmp	r3, #0
 8012702:	d10f      	bne.n	8012724 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8012704:	2100      	movs	r1, #0
 8012706:	480a      	ldr	r0, [pc, #40]	; (8012730 <pbuf_pool_is_empty+0x50>)
 8012708:	f7fe fdcc 	bl	80112a4 <tcpip_try_callback>
 801270c:	4603      	mov	r3, r0
 801270e:	2b00      	cmp	r3, #0
 8012710:	d008      	beq.n	8012724 <pbuf_pool_is_empty+0x44>
 8012712:	f00c f8ad 	bl	801e870 <sys_arch_protect>
 8012716:	6078      	str	r0, [r7, #4]
 8012718:	4b04      	ldr	r3, [pc, #16]	; (801272c <pbuf_pool_is_empty+0x4c>)
 801271a:	2200      	movs	r2, #0
 801271c:	701a      	strb	r2, [r3, #0]
 801271e:	6878      	ldr	r0, [r7, #4]
 8012720:	f00c f8b4 	bl	801e88c <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8012724:	bf00      	nop
 8012726:	3708      	adds	r7, #8
 8012728:	46bd      	mov	sp, r7
 801272a:	bd80      	pop	{r7, pc}
 801272c:	24007f34 	.word	0x24007f34
 8012730:	080126cd 	.word	0x080126cd

08012734 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8012734:	b480      	push	{r7}
 8012736:	b085      	sub	sp, #20
 8012738:	af00      	add	r7, sp, #0
 801273a:	60f8      	str	r0, [r7, #12]
 801273c:	60b9      	str	r1, [r7, #8]
 801273e:	4611      	mov	r1, r2
 8012740:	461a      	mov	r2, r3
 8012742:	460b      	mov	r3, r1
 8012744:	80fb      	strh	r3, [r7, #6]
 8012746:	4613      	mov	r3, r2
 8012748:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 801274a:	68fb      	ldr	r3, [r7, #12]
 801274c:	2200      	movs	r2, #0
 801274e:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8012750:	68fb      	ldr	r3, [r7, #12]
 8012752:	68ba      	ldr	r2, [r7, #8]
 8012754:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8012756:	68fb      	ldr	r3, [r7, #12]
 8012758:	88fa      	ldrh	r2, [r7, #6]
 801275a:	811a      	strh	r2, [r3, #8]
  p->len = len;
 801275c:	68fb      	ldr	r3, [r7, #12]
 801275e:	88ba      	ldrh	r2, [r7, #4]
 8012760:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8012762:	8b3b      	ldrh	r3, [r7, #24]
 8012764:	b2da      	uxtb	r2, r3
 8012766:	68fb      	ldr	r3, [r7, #12]
 8012768:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 801276a:	68fb      	ldr	r3, [r7, #12]
 801276c:	7f3a      	ldrb	r2, [r7, #28]
 801276e:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8012770:	68fb      	ldr	r3, [r7, #12]
 8012772:	2201      	movs	r2, #1
 8012774:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8012776:	68fb      	ldr	r3, [r7, #12]
 8012778:	2200      	movs	r2, #0
 801277a:	73da      	strb	r2, [r3, #15]
}
 801277c:	bf00      	nop
 801277e:	3714      	adds	r7, #20
 8012780:	46bd      	mov	sp, r7
 8012782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012786:	4770      	bx	lr

08012788 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8012788:	b580      	push	{r7, lr}
 801278a:	b08c      	sub	sp, #48	; 0x30
 801278c:	af02      	add	r7, sp, #8
 801278e:	4603      	mov	r3, r0
 8012790:	71fb      	strb	r3, [r7, #7]
 8012792:	460b      	mov	r3, r1
 8012794:	80bb      	strh	r3, [r7, #4]
 8012796:	4613      	mov	r3, r2
 8012798:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 801279a:	79fb      	ldrb	r3, [r7, #7]
 801279c:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 801279e:	887b      	ldrh	r3, [r7, #2]
 80127a0:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80127a4:	d07f      	beq.n	80128a6 <pbuf_alloc+0x11e>
 80127a6:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80127aa:	f300 80c8 	bgt.w	801293e <pbuf_alloc+0x1b6>
 80127ae:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 80127b2:	d010      	beq.n	80127d6 <pbuf_alloc+0x4e>
 80127b4:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 80127b8:	f300 80c1 	bgt.w	801293e <pbuf_alloc+0x1b6>
 80127bc:	2b01      	cmp	r3, #1
 80127be:	d002      	beq.n	80127c6 <pbuf_alloc+0x3e>
 80127c0:	2b41      	cmp	r3, #65	; 0x41
 80127c2:	f040 80bc 	bne.w	801293e <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 80127c6:	887a      	ldrh	r2, [r7, #2]
 80127c8:	88bb      	ldrh	r3, [r7, #4]
 80127ca:	4619      	mov	r1, r3
 80127cc:	2000      	movs	r0, #0
 80127ce:	f000 f8d1 	bl	8012974 <pbuf_alloc_reference>
 80127d2:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 80127d4:	e0bd      	b.n	8012952 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 80127d6:	2300      	movs	r3, #0
 80127d8:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 80127da:	2300      	movs	r3, #0
 80127dc:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 80127de:	88bb      	ldrh	r3, [r7, #4]
 80127e0:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80127e2:	200c      	movs	r0, #12
 80127e4:	f7ff fb8e 	bl	8011f04 <memp_malloc>
 80127e8:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 80127ea:	693b      	ldr	r3, [r7, #16]
 80127ec:	2b00      	cmp	r3, #0
 80127ee:	d109      	bne.n	8012804 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 80127f0:	f7ff ff76 	bl	80126e0 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 80127f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127f6:	2b00      	cmp	r3, #0
 80127f8:	d002      	beq.n	8012800 <pbuf_alloc+0x78>
            pbuf_free(p);
 80127fa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80127fc:	f000 fada 	bl	8012db4 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8012800:	2300      	movs	r3, #0
 8012802:	e0a7      	b.n	8012954 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8012804:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012806:	3303      	adds	r3, #3
 8012808:	b29b      	uxth	r3, r3
 801280a:	f023 0303 	bic.w	r3, r3, #3
 801280e:	b29b      	uxth	r3, r3
 8012810:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8012814:	b29b      	uxth	r3, r3
 8012816:	8b7a      	ldrh	r2, [r7, #26]
 8012818:	4293      	cmp	r3, r2
 801281a:	bf28      	it	cs
 801281c:	4613      	movcs	r3, r2
 801281e:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8012820:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012822:	3310      	adds	r3, #16
 8012824:	693a      	ldr	r2, [r7, #16]
 8012826:	4413      	add	r3, r2
 8012828:	3303      	adds	r3, #3
 801282a:	f023 0303 	bic.w	r3, r3, #3
 801282e:	4618      	mov	r0, r3
 8012830:	89f9      	ldrh	r1, [r7, #14]
 8012832:	8b7a      	ldrh	r2, [r7, #26]
 8012834:	2300      	movs	r3, #0
 8012836:	9301      	str	r3, [sp, #4]
 8012838:	887b      	ldrh	r3, [r7, #2]
 801283a:	9300      	str	r3, [sp, #0]
 801283c:	460b      	mov	r3, r1
 801283e:	4601      	mov	r1, r0
 8012840:	6938      	ldr	r0, [r7, #16]
 8012842:	f7ff ff77 	bl	8012734 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8012846:	693b      	ldr	r3, [r7, #16]
 8012848:	685b      	ldr	r3, [r3, #4]
 801284a:	f003 0303 	and.w	r3, r3, #3
 801284e:	2b00      	cmp	r3, #0
 8012850:	d006      	beq.n	8012860 <pbuf_alloc+0xd8>
 8012852:	4b42      	ldr	r3, [pc, #264]	; (801295c <pbuf_alloc+0x1d4>)
 8012854:	f44f 7280 	mov.w	r2, #256	; 0x100
 8012858:	4941      	ldr	r1, [pc, #260]	; (8012960 <pbuf_alloc+0x1d8>)
 801285a:	4842      	ldr	r0, [pc, #264]	; (8012964 <pbuf_alloc+0x1dc>)
 801285c:	f00c fed2 	bl	801f604 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8012860:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012862:	3303      	adds	r3, #3
 8012864:	f023 0303 	bic.w	r3, r3, #3
 8012868:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 801286c:	d106      	bne.n	801287c <pbuf_alloc+0xf4>
 801286e:	4b3b      	ldr	r3, [pc, #236]	; (801295c <pbuf_alloc+0x1d4>)
 8012870:	f44f 7281 	mov.w	r2, #258	; 0x102
 8012874:	493c      	ldr	r1, [pc, #240]	; (8012968 <pbuf_alloc+0x1e0>)
 8012876:	483b      	ldr	r0, [pc, #236]	; (8012964 <pbuf_alloc+0x1dc>)
 8012878:	f00c fec4 	bl	801f604 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 801287c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801287e:	2b00      	cmp	r3, #0
 8012880:	d102      	bne.n	8012888 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8012882:	693b      	ldr	r3, [r7, #16]
 8012884:	627b      	str	r3, [r7, #36]	; 0x24
 8012886:	e002      	b.n	801288e <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8012888:	69fb      	ldr	r3, [r7, #28]
 801288a:	693a      	ldr	r2, [r7, #16]
 801288c:	601a      	str	r2, [r3, #0]
        }
        last = q;
 801288e:	693b      	ldr	r3, [r7, #16]
 8012890:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8012892:	8b7a      	ldrh	r2, [r7, #26]
 8012894:	89fb      	ldrh	r3, [r7, #14]
 8012896:	1ad3      	subs	r3, r2, r3
 8012898:	837b      	strh	r3, [r7, #26]
        offset = 0;
 801289a:	2300      	movs	r3, #0
 801289c:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 801289e:	8b7b      	ldrh	r3, [r7, #26]
 80128a0:	2b00      	cmp	r3, #0
 80128a2:	d19e      	bne.n	80127e2 <pbuf_alloc+0x5a>
      break;
 80128a4:	e055      	b.n	8012952 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 80128a6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80128a8:	3303      	adds	r3, #3
 80128aa:	b29b      	uxth	r3, r3
 80128ac:	f023 0303 	bic.w	r3, r3, #3
 80128b0:	b29a      	uxth	r2, r3
 80128b2:	88bb      	ldrh	r3, [r7, #4]
 80128b4:	3303      	adds	r3, #3
 80128b6:	b29b      	uxth	r3, r3
 80128b8:	f023 0303 	bic.w	r3, r3, #3
 80128bc:	b29b      	uxth	r3, r3
 80128be:	4413      	add	r3, r2
 80128c0:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 80128c2:	8b3b      	ldrh	r3, [r7, #24]
 80128c4:	3310      	adds	r3, #16
 80128c6:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80128c8:	8b3a      	ldrh	r2, [r7, #24]
 80128ca:	88bb      	ldrh	r3, [r7, #4]
 80128cc:	3303      	adds	r3, #3
 80128ce:	f023 0303 	bic.w	r3, r3, #3
 80128d2:	429a      	cmp	r2, r3
 80128d4:	d306      	bcc.n	80128e4 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 80128d6:	8afa      	ldrh	r2, [r7, #22]
 80128d8:	88bb      	ldrh	r3, [r7, #4]
 80128da:	3303      	adds	r3, #3
 80128dc:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80128e0:	429a      	cmp	r2, r3
 80128e2:	d201      	bcs.n	80128e8 <pbuf_alloc+0x160>
        return NULL;
 80128e4:	2300      	movs	r3, #0
 80128e6:	e035      	b.n	8012954 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 80128e8:	8afb      	ldrh	r3, [r7, #22]
 80128ea:	4618      	mov	r0, r3
 80128ec:	f7ff f966 	bl	8011bbc <mem_malloc>
 80128f0:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 80128f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128f4:	2b00      	cmp	r3, #0
 80128f6:	d101      	bne.n	80128fc <pbuf_alloc+0x174>
        return NULL;
 80128f8:	2300      	movs	r3, #0
 80128fa:	e02b      	b.n	8012954 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 80128fc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80128fe:	3310      	adds	r3, #16
 8012900:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012902:	4413      	add	r3, r2
 8012904:	3303      	adds	r3, #3
 8012906:	f023 0303 	bic.w	r3, r3, #3
 801290a:	4618      	mov	r0, r3
 801290c:	88b9      	ldrh	r1, [r7, #4]
 801290e:	88ba      	ldrh	r2, [r7, #4]
 8012910:	2300      	movs	r3, #0
 8012912:	9301      	str	r3, [sp, #4]
 8012914:	887b      	ldrh	r3, [r7, #2]
 8012916:	9300      	str	r3, [sp, #0]
 8012918:	460b      	mov	r3, r1
 801291a:	4601      	mov	r1, r0
 801291c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801291e:	f7ff ff09 	bl	8012734 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8012922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012924:	685b      	ldr	r3, [r3, #4]
 8012926:	f003 0303 	and.w	r3, r3, #3
 801292a:	2b00      	cmp	r3, #0
 801292c:	d010      	beq.n	8012950 <pbuf_alloc+0x1c8>
 801292e:	4b0b      	ldr	r3, [pc, #44]	; (801295c <pbuf_alloc+0x1d4>)
 8012930:	f44f 7291 	mov.w	r2, #290	; 0x122
 8012934:	490d      	ldr	r1, [pc, #52]	; (801296c <pbuf_alloc+0x1e4>)
 8012936:	480b      	ldr	r0, [pc, #44]	; (8012964 <pbuf_alloc+0x1dc>)
 8012938:	f00c fe64 	bl	801f604 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 801293c:	e008      	b.n	8012950 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 801293e:	4b07      	ldr	r3, [pc, #28]	; (801295c <pbuf_alloc+0x1d4>)
 8012940:	f240 1227 	movw	r2, #295	; 0x127
 8012944:	490a      	ldr	r1, [pc, #40]	; (8012970 <pbuf_alloc+0x1e8>)
 8012946:	4807      	ldr	r0, [pc, #28]	; (8012964 <pbuf_alloc+0x1dc>)
 8012948:	f00c fe5c 	bl	801f604 <iprintf>
      return NULL;
 801294c:	2300      	movs	r3, #0
 801294e:	e001      	b.n	8012954 <pbuf_alloc+0x1cc>
      break;
 8012950:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8012952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8012954:	4618      	mov	r0, r3
 8012956:	3728      	adds	r7, #40	; 0x28
 8012958:	46bd      	mov	sp, r7
 801295a:	bd80      	pop	{r7, pc}
 801295c:	0802482c 	.word	0x0802482c
 8012960:	0802485c 	.word	0x0802485c
 8012964:	0802488c 	.word	0x0802488c
 8012968:	080248b4 	.word	0x080248b4
 801296c:	080248e8 	.word	0x080248e8
 8012970:	08024914 	.word	0x08024914

08012974 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8012974:	b580      	push	{r7, lr}
 8012976:	b086      	sub	sp, #24
 8012978:	af02      	add	r7, sp, #8
 801297a:	6078      	str	r0, [r7, #4]
 801297c:	460b      	mov	r3, r1
 801297e:	807b      	strh	r3, [r7, #2]
 8012980:	4613      	mov	r3, r2
 8012982:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8012984:	883b      	ldrh	r3, [r7, #0]
 8012986:	2b41      	cmp	r3, #65	; 0x41
 8012988:	d009      	beq.n	801299e <pbuf_alloc_reference+0x2a>
 801298a:	883b      	ldrh	r3, [r7, #0]
 801298c:	2b01      	cmp	r3, #1
 801298e:	d006      	beq.n	801299e <pbuf_alloc_reference+0x2a>
 8012990:	4b0f      	ldr	r3, [pc, #60]	; (80129d0 <pbuf_alloc_reference+0x5c>)
 8012992:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8012996:	490f      	ldr	r1, [pc, #60]	; (80129d4 <pbuf_alloc_reference+0x60>)
 8012998:	480f      	ldr	r0, [pc, #60]	; (80129d8 <pbuf_alloc_reference+0x64>)
 801299a:	f00c fe33 	bl	801f604 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 801299e:	200b      	movs	r0, #11
 80129a0:	f7ff fab0 	bl	8011f04 <memp_malloc>
 80129a4:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 80129a6:	68fb      	ldr	r3, [r7, #12]
 80129a8:	2b00      	cmp	r3, #0
 80129aa:	d101      	bne.n	80129b0 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 80129ac:	2300      	movs	r3, #0
 80129ae:	e00b      	b.n	80129c8 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 80129b0:	8879      	ldrh	r1, [r7, #2]
 80129b2:	887a      	ldrh	r2, [r7, #2]
 80129b4:	2300      	movs	r3, #0
 80129b6:	9301      	str	r3, [sp, #4]
 80129b8:	883b      	ldrh	r3, [r7, #0]
 80129ba:	9300      	str	r3, [sp, #0]
 80129bc:	460b      	mov	r3, r1
 80129be:	6879      	ldr	r1, [r7, #4]
 80129c0:	68f8      	ldr	r0, [r7, #12]
 80129c2:	f7ff feb7 	bl	8012734 <pbuf_init_alloced_pbuf>
  return p;
 80129c6:	68fb      	ldr	r3, [r7, #12]
}
 80129c8:	4618      	mov	r0, r3
 80129ca:	3710      	adds	r7, #16
 80129cc:	46bd      	mov	sp, r7
 80129ce:	bd80      	pop	{r7, pc}
 80129d0:	0802482c 	.word	0x0802482c
 80129d4:	08024930 	.word	0x08024930
 80129d8:	0802488c 	.word	0x0802488c

080129dc <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 80129dc:	b580      	push	{r7, lr}
 80129de:	b088      	sub	sp, #32
 80129e0:	af02      	add	r7, sp, #8
 80129e2:	607b      	str	r3, [r7, #4]
 80129e4:	4603      	mov	r3, r0
 80129e6:	73fb      	strb	r3, [r7, #15]
 80129e8:	460b      	mov	r3, r1
 80129ea:	81bb      	strh	r3, [r7, #12]
 80129ec:	4613      	mov	r3, r2
 80129ee:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 80129f0:	7bfb      	ldrb	r3, [r7, #15]
 80129f2:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80129f4:	8a7b      	ldrh	r3, [r7, #18]
 80129f6:	3303      	adds	r3, #3
 80129f8:	f023 0203 	bic.w	r2, r3, #3
 80129fc:	89bb      	ldrh	r3, [r7, #12]
 80129fe:	441a      	add	r2, r3
 8012a00:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012a02:	429a      	cmp	r2, r3
 8012a04:	d901      	bls.n	8012a0a <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8012a06:	2300      	movs	r3, #0
 8012a08:	e018      	b.n	8012a3c <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8012a0a:	6a3b      	ldr	r3, [r7, #32]
 8012a0c:	2b00      	cmp	r3, #0
 8012a0e:	d007      	beq.n	8012a20 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8012a10:	8a7b      	ldrh	r3, [r7, #18]
 8012a12:	3303      	adds	r3, #3
 8012a14:	f023 0303 	bic.w	r3, r3, #3
 8012a18:	6a3a      	ldr	r2, [r7, #32]
 8012a1a:	4413      	add	r3, r2
 8012a1c:	617b      	str	r3, [r7, #20]
 8012a1e:	e001      	b.n	8012a24 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8012a20:	2300      	movs	r3, #0
 8012a22:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8012a24:	6878      	ldr	r0, [r7, #4]
 8012a26:	89b9      	ldrh	r1, [r7, #12]
 8012a28:	89ba      	ldrh	r2, [r7, #12]
 8012a2a:	2302      	movs	r3, #2
 8012a2c:	9301      	str	r3, [sp, #4]
 8012a2e:	897b      	ldrh	r3, [r7, #10]
 8012a30:	9300      	str	r3, [sp, #0]
 8012a32:	460b      	mov	r3, r1
 8012a34:	6979      	ldr	r1, [r7, #20]
 8012a36:	f7ff fe7d 	bl	8012734 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8012a3a:	687b      	ldr	r3, [r7, #4]
}
 8012a3c:	4618      	mov	r0, r3
 8012a3e:	3718      	adds	r7, #24
 8012a40:	46bd      	mov	sp, r7
 8012a42:	bd80      	pop	{r7, pc}

08012a44 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8012a44:	b580      	push	{r7, lr}
 8012a46:	b084      	sub	sp, #16
 8012a48:	af00      	add	r7, sp, #0
 8012a4a:	6078      	str	r0, [r7, #4]
 8012a4c:	460b      	mov	r3, r1
 8012a4e:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8012a50:	687b      	ldr	r3, [r7, #4]
 8012a52:	2b00      	cmp	r3, #0
 8012a54:	d106      	bne.n	8012a64 <pbuf_realloc+0x20>
 8012a56:	4b3a      	ldr	r3, [pc, #232]	; (8012b40 <pbuf_realloc+0xfc>)
 8012a58:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8012a5c:	4939      	ldr	r1, [pc, #228]	; (8012b44 <pbuf_realloc+0x100>)
 8012a5e:	483a      	ldr	r0, [pc, #232]	; (8012b48 <pbuf_realloc+0x104>)
 8012a60:	f00c fdd0 	bl	801f604 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8012a64:	687b      	ldr	r3, [r7, #4]
 8012a66:	891b      	ldrh	r3, [r3, #8]
 8012a68:	887a      	ldrh	r2, [r7, #2]
 8012a6a:	429a      	cmp	r2, r3
 8012a6c:	d263      	bcs.n	8012b36 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8012a6e:	687b      	ldr	r3, [r7, #4]
 8012a70:	891a      	ldrh	r2, [r3, #8]
 8012a72:	887b      	ldrh	r3, [r7, #2]
 8012a74:	1ad3      	subs	r3, r2, r3
 8012a76:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8012a78:	887b      	ldrh	r3, [r7, #2]
 8012a7a:	817b      	strh	r3, [r7, #10]
  q = p;
 8012a7c:	687b      	ldr	r3, [r7, #4]
 8012a7e:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8012a80:	e018      	b.n	8012ab4 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8012a82:	68fb      	ldr	r3, [r7, #12]
 8012a84:	895b      	ldrh	r3, [r3, #10]
 8012a86:	897a      	ldrh	r2, [r7, #10]
 8012a88:	1ad3      	subs	r3, r2, r3
 8012a8a:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8012a8c:	68fb      	ldr	r3, [r7, #12]
 8012a8e:	891a      	ldrh	r2, [r3, #8]
 8012a90:	893b      	ldrh	r3, [r7, #8]
 8012a92:	1ad3      	subs	r3, r2, r3
 8012a94:	b29a      	uxth	r2, r3
 8012a96:	68fb      	ldr	r3, [r7, #12]
 8012a98:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8012a9a:	68fb      	ldr	r3, [r7, #12]
 8012a9c:	681b      	ldr	r3, [r3, #0]
 8012a9e:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8012aa0:	68fb      	ldr	r3, [r7, #12]
 8012aa2:	2b00      	cmp	r3, #0
 8012aa4:	d106      	bne.n	8012ab4 <pbuf_realloc+0x70>
 8012aa6:	4b26      	ldr	r3, [pc, #152]	; (8012b40 <pbuf_realloc+0xfc>)
 8012aa8:	f240 12af 	movw	r2, #431	; 0x1af
 8012aac:	4927      	ldr	r1, [pc, #156]	; (8012b4c <pbuf_realloc+0x108>)
 8012aae:	4826      	ldr	r0, [pc, #152]	; (8012b48 <pbuf_realloc+0x104>)
 8012ab0:	f00c fda8 	bl	801f604 <iprintf>
  while (rem_len > q->len) {
 8012ab4:	68fb      	ldr	r3, [r7, #12]
 8012ab6:	895b      	ldrh	r3, [r3, #10]
 8012ab8:	897a      	ldrh	r2, [r7, #10]
 8012aba:	429a      	cmp	r2, r3
 8012abc:	d8e1      	bhi.n	8012a82 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8012abe:	68fb      	ldr	r3, [r7, #12]
 8012ac0:	7b1b      	ldrb	r3, [r3, #12]
 8012ac2:	f003 030f 	and.w	r3, r3, #15
 8012ac6:	2b00      	cmp	r3, #0
 8012ac8:	d121      	bne.n	8012b0e <pbuf_realloc+0xca>
 8012aca:	68fb      	ldr	r3, [r7, #12]
 8012acc:	895b      	ldrh	r3, [r3, #10]
 8012ace:	897a      	ldrh	r2, [r7, #10]
 8012ad0:	429a      	cmp	r2, r3
 8012ad2:	d01c      	beq.n	8012b0e <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8012ad4:	68fb      	ldr	r3, [r7, #12]
 8012ad6:	7b5b      	ldrb	r3, [r3, #13]
 8012ad8:	f003 0302 	and.w	r3, r3, #2
 8012adc:	2b00      	cmp	r3, #0
 8012ade:	d116      	bne.n	8012b0e <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8012ae0:	68fb      	ldr	r3, [r7, #12]
 8012ae2:	685a      	ldr	r2, [r3, #4]
 8012ae4:	68fb      	ldr	r3, [r7, #12]
 8012ae6:	1ad3      	subs	r3, r2, r3
 8012ae8:	b29a      	uxth	r2, r3
 8012aea:	897b      	ldrh	r3, [r7, #10]
 8012aec:	4413      	add	r3, r2
 8012aee:	b29b      	uxth	r3, r3
 8012af0:	4619      	mov	r1, r3
 8012af2:	68f8      	ldr	r0, [r7, #12]
 8012af4:	f7fe ff58 	bl	80119a8 <mem_trim>
 8012af8:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8012afa:	68fb      	ldr	r3, [r7, #12]
 8012afc:	2b00      	cmp	r3, #0
 8012afe:	d106      	bne.n	8012b0e <pbuf_realloc+0xca>
 8012b00:	4b0f      	ldr	r3, [pc, #60]	; (8012b40 <pbuf_realloc+0xfc>)
 8012b02:	f240 12bd 	movw	r2, #445	; 0x1bd
 8012b06:	4912      	ldr	r1, [pc, #72]	; (8012b50 <pbuf_realloc+0x10c>)
 8012b08:	480f      	ldr	r0, [pc, #60]	; (8012b48 <pbuf_realloc+0x104>)
 8012b0a:	f00c fd7b 	bl	801f604 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8012b0e:	68fb      	ldr	r3, [r7, #12]
 8012b10:	897a      	ldrh	r2, [r7, #10]
 8012b12:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8012b14:	68fb      	ldr	r3, [r7, #12]
 8012b16:	895a      	ldrh	r2, [r3, #10]
 8012b18:	68fb      	ldr	r3, [r7, #12]
 8012b1a:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8012b1c:	68fb      	ldr	r3, [r7, #12]
 8012b1e:	681b      	ldr	r3, [r3, #0]
 8012b20:	2b00      	cmp	r3, #0
 8012b22:	d004      	beq.n	8012b2e <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8012b24:	68fb      	ldr	r3, [r7, #12]
 8012b26:	681b      	ldr	r3, [r3, #0]
 8012b28:	4618      	mov	r0, r3
 8012b2a:	f000 f943 	bl	8012db4 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8012b2e:	68fb      	ldr	r3, [r7, #12]
 8012b30:	2200      	movs	r2, #0
 8012b32:	601a      	str	r2, [r3, #0]
 8012b34:	e000      	b.n	8012b38 <pbuf_realloc+0xf4>
    return;
 8012b36:	bf00      	nop

}
 8012b38:	3710      	adds	r7, #16
 8012b3a:	46bd      	mov	sp, r7
 8012b3c:	bd80      	pop	{r7, pc}
 8012b3e:	bf00      	nop
 8012b40:	0802482c 	.word	0x0802482c
 8012b44:	08024944 	.word	0x08024944
 8012b48:	0802488c 	.word	0x0802488c
 8012b4c:	0802495c 	.word	0x0802495c
 8012b50:	08024974 	.word	0x08024974

08012b54 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8012b54:	b580      	push	{r7, lr}
 8012b56:	b086      	sub	sp, #24
 8012b58:	af00      	add	r7, sp, #0
 8012b5a:	60f8      	str	r0, [r7, #12]
 8012b5c:	60b9      	str	r1, [r7, #8]
 8012b5e:	4613      	mov	r3, r2
 8012b60:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8012b62:	68fb      	ldr	r3, [r7, #12]
 8012b64:	2b00      	cmp	r3, #0
 8012b66:	d106      	bne.n	8012b76 <pbuf_add_header_impl+0x22>
 8012b68:	4b2b      	ldr	r3, [pc, #172]	; (8012c18 <pbuf_add_header_impl+0xc4>)
 8012b6a:	f240 12df 	movw	r2, #479	; 0x1df
 8012b6e:	492b      	ldr	r1, [pc, #172]	; (8012c1c <pbuf_add_header_impl+0xc8>)
 8012b70:	482b      	ldr	r0, [pc, #172]	; (8012c20 <pbuf_add_header_impl+0xcc>)
 8012b72:	f00c fd47 	bl	801f604 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8012b76:	68fb      	ldr	r3, [r7, #12]
 8012b78:	2b00      	cmp	r3, #0
 8012b7a:	d003      	beq.n	8012b84 <pbuf_add_header_impl+0x30>
 8012b7c:	68bb      	ldr	r3, [r7, #8]
 8012b7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012b82:	d301      	bcc.n	8012b88 <pbuf_add_header_impl+0x34>
    return 1;
 8012b84:	2301      	movs	r3, #1
 8012b86:	e043      	b.n	8012c10 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8012b88:	68bb      	ldr	r3, [r7, #8]
 8012b8a:	2b00      	cmp	r3, #0
 8012b8c:	d101      	bne.n	8012b92 <pbuf_add_header_impl+0x3e>
    return 0;
 8012b8e:	2300      	movs	r3, #0
 8012b90:	e03e      	b.n	8012c10 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8012b92:	68bb      	ldr	r3, [r7, #8]
 8012b94:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8012b96:	68fb      	ldr	r3, [r7, #12]
 8012b98:	891a      	ldrh	r2, [r3, #8]
 8012b9a:	8a7b      	ldrh	r3, [r7, #18]
 8012b9c:	4413      	add	r3, r2
 8012b9e:	b29b      	uxth	r3, r3
 8012ba0:	8a7a      	ldrh	r2, [r7, #18]
 8012ba2:	429a      	cmp	r2, r3
 8012ba4:	d901      	bls.n	8012baa <pbuf_add_header_impl+0x56>
    return 1;
 8012ba6:	2301      	movs	r3, #1
 8012ba8:	e032      	b.n	8012c10 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8012baa:	68fb      	ldr	r3, [r7, #12]
 8012bac:	7b1b      	ldrb	r3, [r3, #12]
 8012bae:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8012bb0:	8a3b      	ldrh	r3, [r7, #16]
 8012bb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012bb6:	2b00      	cmp	r3, #0
 8012bb8:	d00c      	beq.n	8012bd4 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8012bba:	68fb      	ldr	r3, [r7, #12]
 8012bbc:	685a      	ldr	r2, [r3, #4]
 8012bbe:	68bb      	ldr	r3, [r7, #8]
 8012bc0:	425b      	negs	r3, r3
 8012bc2:	4413      	add	r3, r2
 8012bc4:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8012bc6:	68fb      	ldr	r3, [r7, #12]
 8012bc8:	3310      	adds	r3, #16
 8012bca:	697a      	ldr	r2, [r7, #20]
 8012bcc:	429a      	cmp	r2, r3
 8012bce:	d20d      	bcs.n	8012bec <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8012bd0:	2301      	movs	r3, #1
 8012bd2:	e01d      	b.n	8012c10 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8012bd4:	79fb      	ldrb	r3, [r7, #7]
 8012bd6:	2b00      	cmp	r3, #0
 8012bd8:	d006      	beq.n	8012be8 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8012bda:	68fb      	ldr	r3, [r7, #12]
 8012bdc:	685a      	ldr	r2, [r3, #4]
 8012bde:	68bb      	ldr	r3, [r7, #8]
 8012be0:	425b      	negs	r3, r3
 8012be2:	4413      	add	r3, r2
 8012be4:	617b      	str	r3, [r7, #20]
 8012be6:	e001      	b.n	8012bec <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8012be8:	2301      	movs	r3, #1
 8012bea:	e011      	b.n	8012c10 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8012bec:	68fb      	ldr	r3, [r7, #12]
 8012bee:	697a      	ldr	r2, [r7, #20]
 8012bf0:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8012bf2:	68fb      	ldr	r3, [r7, #12]
 8012bf4:	895a      	ldrh	r2, [r3, #10]
 8012bf6:	8a7b      	ldrh	r3, [r7, #18]
 8012bf8:	4413      	add	r3, r2
 8012bfa:	b29a      	uxth	r2, r3
 8012bfc:	68fb      	ldr	r3, [r7, #12]
 8012bfe:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8012c00:	68fb      	ldr	r3, [r7, #12]
 8012c02:	891a      	ldrh	r2, [r3, #8]
 8012c04:	8a7b      	ldrh	r3, [r7, #18]
 8012c06:	4413      	add	r3, r2
 8012c08:	b29a      	uxth	r2, r3
 8012c0a:	68fb      	ldr	r3, [r7, #12]
 8012c0c:	811a      	strh	r2, [r3, #8]


  return 0;
 8012c0e:	2300      	movs	r3, #0
}
 8012c10:	4618      	mov	r0, r3
 8012c12:	3718      	adds	r7, #24
 8012c14:	46bd      	mov	sp, r7
 8012c16:	bd80      	pop	{r7, pc}
 8012c18:	0802482c 	.word	0x0802482c
 8012c1c:	08024990 	.word	0x08024990
 8012c20:	0802488c 	.word	0x0802488c

08012c24 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8012c24:	b580      	push	{r7, lr}
 8012c26:	b082      	sub	sp, #8
 8012c28:	af00      	add	r7, sp, #0
 8012c2a:	6078      	str	r0, [r7, #4]
 8012c2c:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8012c2e:	2200      	movs	r2, #0
 8012c30:	6839      	ldr	r1, [r7, #0]
 8012c32:	6878      	ldr	r0, [r7, #4]
 8012c34:	f7ff ff8e 	bl	8012b54 <pbuf_add_header_impl>
 8012c38:	4603      	mov	r3, r0
}
 8012c3a:	4618      	mov	r0, r3
 8012c3c:	3708      	adds	r7, #8
 8012c3e:	46bd      	mov	sp, r7
 8012c40:	bd80      	pop	{r7, pc}
	...

08012c44 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8012c44:	b580      	push	{r7, lr}
 8012c46:	b084      	sub	sp, #16
 8012c48:	af00      	add	r7, sp, #0
 8012c4a:	6078      	str	r0, [r7, #4]
 8012c4c:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8012c4e:	687b      	ldr	r3, [r7, #4]
 8012c50:	2b00      	cmp	r3, #0
 8012c52:	d106      	bne.n	8012c62 <pbuf_remove_header+0x1e>
 8012c54:	4b20      	ldr	r3, [pc, #128]	; (8012cd8 <pbuf_remove_header+0x94>)
 8012c56:	f240 224b 	movw	r2, #587	; 0x24b
 8012c5a:	4920      	ldr	r1, [pc, #128]	; (8012cdc <pbuf_remove_header+0x98>)
 8012c5c:	4820      	ldr	r0, [pc, #128]	; (8012ce0 <pbuf_remove_header+0x9c>)
 8012c5e:	f00c fcd1 	bl	801f604 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8012c62:	687b      	ldr	r3, [r7, #4]
 8012c64:	2b00      	cmp	r3, #0
 8012c66:	d003      	beq.n	8012c70 <pbuf_remove_header+0x2c>
 8012c68:	683b      	ldr	r3, [r7, #0]
 8012c6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012c6e:	d301      	bcc.n	8012c74 <pbuf_remove_header+0x30>
    return 1;
 8012c70:	2301      	movs	r3, #1
 8012c72:	e02c      	b.n	8012cce <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8012c74:	683b      	ldr	r3, [r7, #0]
 8012c76:	2b00      	cmp	r3, #0
 8012c78:	d101      	bne.n	8012c7e <pbuf_remove_header+0x3a>
    return 0;
 8012c7a:	2300      	movs	r3, #0
 8012c7c:	e027      	b.n	8012cce <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8012c7e:	683b      	ldr	r3, [r7, #0]
 8012c80:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8012c82:	687b      	ldr	r3, [r7, #4]
 8012c84:	895b      	ldrh	r3, [r3, #10]
 8012c86:	89fa      	ldrh	r2, [r7, #14]
 8012c88:	429a      	cmp	r2, r3
 8012c8a:	d908      	bls.n	8012c9e <pbuf_remove_header+0x5a>
 8012c8c:	4b12      	ldr	r3, [pc, #72]	; (8012cd8 <pbuf_remove_header+0x94>)
 8012c8e:	f240 2255 	movw	r2, #597	; 0x255
 8012c92:	4914      	ldr	r1, [pc, #80]	; (8012ce4 <pbuf_remove_header+0xa0>)
 8012c94:	4812      	ldr	r0, [pc, #72]	; (8012ce0 <pbuf_remove_header+0x9c>)
 8012c96:	f00c fcb5 	bl	801f604 <iprintf>
 8012c9a:	2301      	movs	r3, #1
 8012c9c:	e017      	b.n	8012cce <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8012c9e:	687b      	ldr	r3, [r7, #4]
 8012ca0:	685b      	ldr	r3, [r3, #4]
 8012ca2:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8012ca4:	687b      	ldr	r3, [r7, #4]
 8012ca6:	685a      	ldr	r2, [r3, #4]
 8012ca8:	683b      	ldr	r3, [r7, #0]
 8012caa:	441a      	add	r2, r3
 8012cac:	687b      	ldr	r3, [r7, #4]
 8012cae:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8012cb0:	687b      	ldr	r3, [r7, #4]
 8012cb2:	895a      	ldrh	r2, [r3, #10]
 8012cb4:	89fb      	ldrh	r3, [r7, #14]
 8012cb6:	1ad3      	subs	r3, r2, r3
 8012cb8:	b29a      	uxth	r2, r3
 8012cba:	687b      	ldr	r3, [r7, #4]
 8012cbc:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8012cbe:	687b      	ldr	r3, [r7, #4]
 8012cc0:	891a      	ldrh	r2, [r3, #8]
 8012cc2:	89fb      	ldrh	r3, [r7, #14]
 8012cc4:	1ad3      	subs	r3, r2, r3
 8012cc6:	b29a      	uxth	r2, r3
 8012cc8:	687b      	ldr	r3, [r7, #4]
 8012cca:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8012ccc:	2300      	movs	r3, #0
}
 8012cce:	4618      	mov	r0, r3
 8012cd0:	3710      	adds	r7, #16
 8012cd2:	46bd      	mov	sp, r7
 8012cd4:	bd80      	pop	{r7, pc}
 8012cd6:	bf00      	nop
 8012cd8:	0802482c 	.word	0x0802482c
 8012cdc:	08024990 	.word	0x08024990
 8012ce0:	0802488c 	.word	0x0802488c
 8012ce4:	0802499c 	.word	0x0802499c

08012ce8 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8012ce8:	b580      	push	{r7, lr}
 8012cea:	b082      	sub	sp, #8
 8012cec:	af00      	add	r7, sp, #0
 8012cee:	6078      	str	r0, [r7, #4]
 8012cf0:	460b      	mov	r3, r1
 8012cf2:	807b      	strh	r3, [r7, #2]
 8012cf4:	4613      	mov	r3, r2
 8012cf6:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8012cf8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8012cfc:	2b00      	cmp	r3, #0
 8012cfe:	da08      	bge.n	8012d12 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8012d00:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8012d04:	425b      	negs	r3, r3
 8012d06:	4619      	mov	r1, r3
 8012d08:	6878      	ldr	r0, [r7, #4]
 8012d0a:	f7ff ff9b 	bl	8012c44 <pbuf_remove_header>
 8012d0e:	4603      	mov	r3, r0
 8012d10:	e007      	b.n	8012d22 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8012d12:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8012d16:	787a      	ldrb	r2, [r7, #1]
 8012d18:	4619      	mov	r1, r3
 8012d1a:	6878      	ldr	r0, [r7, #4]
 8012d1c:	f7ff ff1a 	bl	8012b54 <pbuf_add_header_impl>
 8012d20:	4603      	mov	r3, r0
  }
}
 8012d22:	4618      	mov	r0, r3
 8012d24:	3708      	adds	r7, #8
 8012d26:	46bd      	mov	sp, r7
 8012d28:	bd80      	pop	{r7, pc}

08012d2a <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8012d2a:	b580      	push	{r7, lr}
 8012d2c:	b082      	sub	sp, #8
 8012d2e:	af00      	add	r7, sp, #0
 8012d30:	6078      	str	r0, [r7, #4]
 8012d32:	460b      	mov	r3, r1
 8012d34:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8012d36:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8012d3a:	2201      	movs	r2, #1
 8012d3c:	4619      	mov	r1, r3
 8012d3e:	6878      	ldr	r0, [r7, #4]
 8012d40:	f7ff ffd2 	bl	8012ce8 <pbuf_header_impl>
 8012d44:	4603      	mov	r3, r0
}
 8012d46:	4618      	mov	r0, r3
 8012d48:	3708      	adds	r7, #8
 8012d4a:	46bd      	mov	sp, r7
 8012d4c:	bd80      	pop	{r7, pc}

08012d4e <pbuf_free_header>:
 *                   takes an u16_t not s16_t!
 * @return the new head pbuf
 */
struct pbuf *
pbuf_free_header(struct pbuf *q, u16_t size)
{
 8012d4e:	b580      	push	{r7, lr}
 8012d50:	b086      	sub	sp, #24
 8012d52:	af00      	add	r7, sp, #0
 8012d54:	6078      	str	r0, [r7, #4]
 8012d56:	460b      	mov	r3, r1
 8012d58:	807b      	strh	r3, [r7, #2]
  struct pbuf *p = q;
 8012d5a:	687b      	ldr	r3, [r7, #4]
 8012d5c:	617b      	str	r3, [r7, #20]
  u16_t free_left = size;
 8012d5e:	887b      	ldrh	r3, [r7, #2]
 8012d60:	827b      	strh	r3, [r7, #18]
  while (free_left && p) {
 8012d62:	e01c      	b.n	8012d9e <pbuf_free_header+0x50>
    if (free_left >= p->len) {
 8012d64:	697b      	ldr	r3, [r7, #20]
 8012d66:	895b      	ldrh	r3, [r3, #10]
 8012d68:	8a7a      	ldrh	r2, [r7, #18]
 8012d6a:	429a      	cmp	r2, r3
 8012d6c:	d310      	bcc.n	8012d90 <pbuf_free_header+0x42>
      struct pbuf *f = p;
 8012d6e:	697b      	ldr	r3, [r7, #20]
 8012d70:	60fb      	str	r3, [r7, #12]
      free_left = (u16_t)(free_left - p->len);
 8012d72:	697b      	ldr	r3, [r7, #20]
 8012d74:	895b      	ldrh	r3, [r3, #10]
 8012d76:	8a7a      	ldrh	r2, [r7, #18]
 8012d78:	1ad3      	subs	r3, r2, r3
 8012d7a:	827b      	strh	r3, [r7, #18]
      p = p->next;
 8012d7c:	697b      	ldr	r3, [r7, #20]
 8012d7e:	681b      	ldr	r3, [r3, #0]
 8012d80:	617b      	str	r3, [r7, #20]
      f->next = 0;
 8012d82:	68fb      	ldr	r3, [r7, #12]
 8012d84:	2200      	movs	r2, #0
 8012d86:	601a      	str	r2, [r3, #0]
      pbuf_free(f);
 8012d88:	68f8      	ldr	r0, [r7, #12]
 8012d8a:	f000 f813 	bl	8012db4 <pbuf_free>
 8012d8e:	e006      	b.n	8012d9e <pbuf_free_header+0x50>
    } else {
      pbuf_remove_header(p, free_left);
 8012d90:	8a7b      	ldrh	r3, [r7, #18]
 8012d92:	4619      	mov	r1, r3
 8012d94:	6978      	ldr	r0, [r7, #20]
 8012d96:	f7ff ff55 	bl	8012c44 <pbuf_remove_header>
      free_left = 0;
 8012d9a:	2300      	movs	r3, #0
 8012d9c:	827b      	strh	r3, [r7, #18]
  while (free_left && p) {
 8012d9e:	8a7b      	ldrh	r3, [r7, #18]
 8012da0:	2b00      	cmp	r3, #0
 8012da2:	d002      	beq.n	8012daa <pbuf_free_header+0x5c>
 8012da4:	697b      	ldr	r3, [r7, #20]
 8012da6:	2b00      	cmp	r3, #0
 8012da8:	d1dc      	bne.n	8012d64 <pbuf_free_header+0x16>
    }
  }
  return p;
 8012daa:	697b      	ldr	r3, [r7, #20]
}
 8012dac:	4618      	mov	r0, r3
 8012dae:	3718      	adds	r7, #24
 8012db0:	46bd      	mov	sp, r7
 8012db2:	bd80      	pop	{r7, pc}

08012db4 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8012db4:	b580      	push	{r7, lr}
 8012db6:	b088      	sub	sp, #32
 8012db8:	af00      	add	r7, sp, #0
 8012dba:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8012dbc:	687b      	ldr	r3, [r7, #4]
 8012dbe:	2b00      	cmp	r3, #0
 8012dc0:	d10b      	bne.n	8012dda <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8012dc2:	687b      	ldr	r3, [r7, #4]
 8012dc4:	2b00      	cmp	r3, #0
 8012dc6:	d106      	bne.n	8012dd6 <pbuf_free+0x22>
 8012dc8:	4b3b      	ldr	r3, [pc, #236]	; (8012eb8 <pbuf_free+0x104>)
 8012dca:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8012dce:	493b      	ldr	r1, [pc, #236]	; (8012ebc <pbuf_free+0x108>)
 8012dd0:	483b      	ldr	r0, [pc, #236]	; (8012ec0 <pbuf_free+0x10c>)
 8012dd2:	f00c fc17 	bl	801f604 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8012dd6:	2300      	movs	r3, #0
 8012dd8:	e069      	b.n	8012eae <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8012dda:	2300      	movs	r3, #0
 8012ddc:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8012dde:	e062      	b.n	8012ea6 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 8012de0:	f00b fd46 	bl	801e870 <sys_arch_protect>
 8012de4:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8012de6:	687b      	ldr	r3, [r7, #4]
 8012de8:	7b9b      	ldrb	r3, [r3, #14]
 8012dea:	2b00      	cmp	r3, #0
 8012dec:	d106      	bne.n	8012dfc <pbuf_free+0x48>
 8012dee:	4b32      	ldr	r3, [pc, #200]	; (8012eb8 <pbuf_free+0x104>)
 8012df0:	f240 22f1 	movw	r2, #753	; 0x2f1
 8012df4:	4933      	ldr	r1, [pc, #204]	; (8012ec4 <pbuf_free+0x110>)
 8012df6:	4832      	ldr	r0, [pc, #200]	; (8012ec0 <pbuf_free+0x10c>)
 8012df8:	f00c fc04 	bl	801f604 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8012dfc:	687b      	ldr	r3, [r7, #4]
 8012dfe:	7b9b      	ldrb	r3, [r3, #14]
 8012e00:	3b01      	subs	r3, #1
 8012e02:	b2da      	uxtb	r2, r3
 8012e04:	687b      	ldr	r3, [r7, #4]
 8012e06:	739a      	strb	r2, [r3, #14]
 8012e08:	687b      	ldr	r3, [r7, #4]
 8012e0a:	7b9b      	ldrb	r3, [r3, #14]
 8012e0c:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 8012e0e:	69b8      	ldr	r0, [r7, #24]
 8012e10:	f00b fd3c 	bl	801e88c <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8012e14:	7dfb      	ldrb	r3, [r7, #23]
 8012e16:	2b00      	cmp	r3, #0
 8012e18:	d143      	bne.n	8012ea2 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8012e1a:	687b      	ldr	r3, [r7, #4]
 8012e1c:	681b      	ldr	r3, [r3, #0]
 8012e1e:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8012e20:	687b      	ldr	r3, [r7, #4]
 8012e22:	7b1b      	ldrb	r3, [r3, #12]
 8012e24:	f003 030f 	and.w	r3, r3, #15
 8012e28:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8012e2a:	687b      	ldr	r3, [r7, #4]
 8012e2c:	7b5b      	ldrb	r3, [r3, #13]
 8012e2e:	f003 0302 	and.w	r3, r3, #2
 8012e32:	2b00      	cmp	r3, #0
 8012e34:	d011      	beq.n	8012e5a <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8012e36:	687b      	ldr	r3, [r7, #4]
 8012e38:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8012e3a:	68bb      	ldr	r3, [r7, #8]
 8012e3c:	691b      	ldr	r3, [r3, #16]
 8012e3e:	2b00      	cmp	r3, #0
 8012e40:	d106      	bne.n	8012e50 <pbuf_free+0x9c>
 8012e42:	4b1d      	ldr	r3, [pc, #116]	; (8012eb8 <pbuf_free+0x104>)
 8012e44:	f240 22ff 	movw	r2, #767	; 0x2ff
 8012e48:	491f      	ldr	r1, [pc, #124]	; (8012ec8 <pbuf_free+0x114>)
 8012e4a:	481d      	ldr	r0, [pc, #116]	; (8012ec0 <pbuf_free+0x10c>)
 8012e4c:	f00c fbda 	bl	801f604 <iprintf>
        pc->custom_free_function(p);
 8012e50:	68bb      	ldr	r3, [r7, #8]
 8012e52:	691b      	ldr	r3, [r3, #16]
 8012e54:	6878      	ldr	r0, [r7, #4]
 8012e56:	4798      	blx	r3
 8012e58:	e01d      	b.n	8012e96 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8012e5a:	7bfb      	ldrb	r3, [r7, #15]
 8012e5c:	2b02      	cmp	r3, #2
 8012e5e:	d104      	bne.n	8012e6a <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 8012e60:	6879      	ldr	r1, [r7, #4]
 8012e62:	200c      	movs	r0, #12
 8012e64:	f7ff f8c4 	bl	8011ff0 <memp_free>
 8012e68:	e015      	b.n	8012e96 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8012e6a:	7bfb      	ldrb	r3, [r7, #15]
 8012e6c:	2b01      	cmp	r3, #1
 8012e6e:	d104      	bne.n	8012e7a <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 8012e70:	6879      	ldr	r1, [r7, #4]
 8012e72:	200b      	movs	r0, #11
 8012e74:	f7ff f8bc 	bl	8011ff0 <memp_free>
 8012e78:	e00d      	b.n	8012e96 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8012e7a:	7bfb      	ldrb	r3, [r7, #15]
 8012e7c:	2b00      	cmp	r3, #0
 8012e7e:	d103      	bne.n	8012e88 <pbuf_free+0xd4>
          mem_free(p);
 8012e80:	6878      	ldr	r0, [r7, #4]
 8012e82:	f7fe fd01 	bl	8011888 <mem_free>
 8012e86:	e006      	b.n	8012e96 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8012e88:	4b0b      	ldr	r3, [pc, #44]	; (8012eb8 <pbuf_free+0x104>)
 8012e8a:	f240 320f 	movw	r2, #783	; 0x30f
 8012e8e:	490f      	ldr	r1, [pc, #60]	; (8012ecc <pbuf_free+0x118>)
 8012e90:	480b      	ldr	r0, [pc, #44]	; (8012ec0 <pbuf_free+0x10c>)
 8012e92:	f00c fbb7 	bl	801f604 <iprintf>
        }
      }
      count++;
 8012e96:	7ffb      	ldrb	r3, [r7, #31]
 8012e98:	3301      	adds	r3, #1
 8012e9a:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 8012e9c:	693b      	ldr	r3, [r7, #16]
 8012e9e:	607b      	str	r3, [r7, #4]
 8012ea0:	e001      	b.n	8012ea6 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8012ea2:	2300      	movs	r3, #0
 8012ea4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8012ea6:	687b      	ldr	r3, [r7, #4]
 8012ea8:	2b00      	cmp	r3, #0
 8012eaa:	d199      	bne.n	8012de0 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8012eac:	7ffb      	ldrb	r3, [r7, #31]
}
 8012eae:	4618      	mov	r0, r3
 8012eb0:	3720      	adds	r7, #32
 8012eb2:	46bd      	mov	sp, r7
 8012eb4:	bd80      	pop	{r7, pc}
 8012eb6:	bf00      	nop
 8012eb8:	0802482c 	.word	0x0802482c
 8012ebc:	08024990 	.word	0x08024990
 8012ec0:	0802488c 	.word	0x0802488c
 8012ec4:	080249bc 	.word	0x080249bc
 8012ec8:	080249d4 	.word	0x080249d4
 8012ecc:	080249f8 	.word	0x080249f8

08012ed0 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8012ed0:	b480      	push	{r7}
 8012ed2:	b085      	sub	sp, #20
 8012ed4:	af00      	add	r7, sp, #0
 8012ed6:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8012ed8:	2300      	movs	r3, #0
 8012eda:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8012edc:	e005      	b.n	8012eea <pbuf_clen+0x1a>
    ++len;
 8012ede:	89fb      	ldrh	r3, [r7, #14]
 8012ee0:	3301      	adds	r3, #1
 8012ee2:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8012ee4:	687b      	ldr	r3, [r7, #4]
 8012ee6:	681b      	ldr	r3, [r3, #0]
 8012ee8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8012eea:	687b      	ldr	r3, [r7, #4]
 8012eec:	2b00      	cmp	r3, #0
 8012eee:	d1f6      	bne.n	8012ede <pbuf_clen+0xe>
  }
  return len;
 8012ef0:	89fb      	ldrh	r3, [r7, #14]
}
 8012ef2:	4618      	mov	r0, r3
 8012ef4:	3714      	adds	r7, #20
 8012ef6:	46bd      	mov	sp, r7
 8012ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012efc:	4770      	bx	lr
	...

08012f00 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8012f00:	b580      	push	{r7, lr}
 8012f02:	b084      	sub	sp, #16
 8012f04:	af00      	add	r7, sp, #0
 8012f06:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8012f08:	687b      	ldr	r3, [r7, #4]
 8012f0a:	2b00      	cmp	r3, #0
 8012f0c:	d016      	beq.n	8012f3c <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8012f0e:	f00b fcaf 	bl	801e870 <sys_arch_protect>
 8012f12:	60f8      	str	r0, [r7, #12]
 8012f14:	687b      	ldr	r3, [r7, #4]
 8012f16:	7b9b      	ldrb	r3, [r3, #14]
 8012f18:	3301      	adds	r3, #1
 8012f1a:	b2da      	uxtb	r2, r3
 8012f1c:	687b      	ldr	r3, [r7, #4]
 8012f1e:	739a      	strb	r2, [r3, #14]
 8012f20:	68f8      	ldr	r0, [r7, #12]
 8012f22:	f00b fcb3 	bl	801e88c <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8012f26:	687b      	ldr	r3, [r7, #4]
 8012f28:	7b9b      	ldrb	r3, [r3, #14]
 8012f2a:	2b00      	cmp	r3, #0
 8012f2c:	d106      	bne.n	8012f3c <pbuf_ref+0x3c>
 8012f2e:	4b05      	ldr	r3, [pc, #20]	; (8012f44 <pbuf_ref+0x44>)
 8012f30:	f240 3242 	movw	r2, #834	; 0x342
 8012f34:	4904      	ldr	r1, [pc, #16]	; (8012f48 <pbuf_ref+0x48>)
 8012f36:	4805      	ldr	r0, [pc, #20]	; (8012f4c <pbuf_ref+0x4c>)
 8012f38:	f00c fb64 	bl	801f604 <iprintf>
  }
}
 8012f3c:	bf00      	nop
 8012f3e:	3710      	adds	r7, #16
 8012f40:	46bd      	mov	sp, r7
 8012f42:	bd80      	pop	{r7, pc}
 8012f44:	0802482c 	.word	0x0802482c
 8012f48:	08024a0c 	.word	0x08024a0c
 8012f4c:	0802488c 	.word	0x0802488c

08012f50 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8012f50:	b580      	push	{r7, lr}
 8012f52:	b084      	sub	sp, #16
 8012f54:	af00      	add	r7, sp, #0
 8012f56:	6078      	str	r0, [r7, #4]
 8012f58:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8012f5a:	687b      	ldr	r3, [r7, #4]
 8012f5c:	2b00      	cmp	r3, #0
 8012f5e:	d002      	beq.n	8012f66 <pbuf_cat+0x16>
 8012f60:	683b      	ldr	r3, [r7, #0]
 8012f62:	2b00      	cmp	r3, #0
 8012f64:	d107      	bne.n	8012f76 <pbuf_cat+0x26>
 8012f66:	4b20      	ldr	r3, [pc, #128]	; (8012fe8 <pbuf_cat+0x98>)
 8012f68:	f240 3259 	movw	r2, #857	; 0x359
 8012f6c:	491f      	ldr	r1, [pc, #124]	; (8012fec <pbuf_cat+0x9c>)
 8012f6e:	4820      	ldr	r0, [pc, #128]	; (8012ff0 <pbuf_cat+0xa0>)
 8012f70:	f00c fb48 	bl	801f604 <iprintf>
 8012f74:	e034      	b.n	8012fe0 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8012f76:	687b      	ldr	r3, [r7, #4]
 8012f78:	60fb      	str	r3, [r7, #12]
 8012f7a:	e00a      	b.n	8012f92 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8012f7c:	68fb      	ldr	r3, [r7, #12]
 8012f7e:	891a      	ldrh	r2, [r3, #8]
 8012f80:	683b      	ldr	r3, [r7, #0]
 8012f82:	891b      	ldrh	r3, [r3, #8]
 8012f84:	4413      	add	r3, r2
 8012f86:	b29a      	uxth	r2, r3
 8012f88:	68fb      	ldr	r3, [r7, #12]
 8012f8a:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8012f8c:	68fb      	ldr	r3, [r7, #12]
 8012f8e:	681b      	ldr	r3, [r3, #0]
 8012f90:	60fb      	str	r3, [r7, #12]
 8012f92:	68fb      	ldr	r3, [r7, #12]
 8012f94:	681b      	ldr	r3, [r3, #0]
 8012f96:	2b00      	cmp	r3, #0
 8012f98:	d1f0      	bne.n	8012f7c <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8012f9a:	68fb      	ldr	r3, [r7, #12]
 8012f9c:	891a      	ldrh	r2, [r3, #8]
 8012f9e:	68fb      	ldr	r3, [r7, #12]
 8012fa0:	895b      	ldrh	r3, [r3, #10]
 8012fa2:	429a      	cmp	r2, r3
 8012fa4:	d006      	beq.n	8012fb4 <pbuf_cat+0x64>
 8012fa6:	4b10      	ldr	r3, [pc, #64]	; (8012fe8 <pbuf_cat+0x98>)
 8012fa8:	f240 3262 	movw	r2, #866	; 0x362
 8012fac:	4911      	ldr	r1, [pc, #68]	; (8012ff4 <pbuf_cat+0xa4>)
 8012fae:	4810      	ldr	r0, [pc, #64]	; (8012ff0 <pbuf_cat+0xa0>)
 8012fb0:	f00c fb28 	bl	801f604 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8012fb4:	68fb      	ldr	r3, [r7, #12]
 8012fb6:	681b      	ldr	r3, [r3, #0]
 8012fb8:	2b00      	cmp	r3, #0
 8012fba:	d006      	beq.n	8012fca <pbuf_cat+0x7a>
 8012fbc:	4b0a      	ldr	r3, [pc, #40]	; (8012fe8 <pbuf_cat+0x98>)
 8012fbe:	f240 3263 	movw	r2, #867	; 0x363
 8012fc2:	490d      	ldr	r1, [pc, #52]	; (8012ff8 <pbuf_cat+0xa8>)
 8012fc4:	480a      	ldr	r0, [pc, #40]	; (8012ff0 <pbuf_cat+0xa0>)
 8012fc6:	f00c fb1d 	bl	801f604 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8012fca:	68fb      	ldr	r3, [r7, #12]
 8012fcc:	891a      	ldrh	r2, [r3, #8]
 8012fce:	683b      	ldr	r3, [r7, #0]
 8012fd0:	891b      	ldrh	r3, [r3, #8]
 8012fd2:	4413      	add	r3, r2
 8012fd4:	b29a      	uxth	r2, r3
 8012fd6:	68fb      	ldr	r3, [r7, #12]
 8012fd8:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8012fda:	68fb      	ldr	r3, [r7, #12]
 8012fdc:	683a      	ldr	r2, [r7, #0]
 8012fde:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8012fe0:	3710      	adds	r7, #16
 8012fe2:	46bd      	mov	sp, r7
 8012fe4:	bd80      	pop	{r7, pc}
 8012fe6:	bf00      	nop
 8012fe8:	0802482c 	.word	0x0802482c
 8012fec:	08024a20 	.word	0x08024a20
 8012ff0:	0802488c 	.word	0x0802488c
 8012ff4:	08024a58 	.word	0x08024a58
 8012ff8:	08024a88 	.word	0x08024a88

08012ffc <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8012ffc:	b580      	push	{r7, lr}
 8012ffe:	b082      	sub	sp, #8
 8013000:	af00      	add	r7, sp, #0
 8013002:	6078      	str	r0, [r7, #4]
 8013004:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8013006:	6839      	ldr	r1, [r7, #0]
 8013008:	6878      	ldr	r0, [r7, #4]
 801300a:	f7ff ffa1 	bl	8012f50 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 801300e:	6838      	ldr	r0, [r7, #0]
 8013010:	f7ff ff76 	bl	8012f00 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8013014:	bf00      	nop
 8013016:	3708      	adds	r7, #8
 8013018:	46bd      	mov	sp, r7
 801301a:	bd80      	pop	{r7, pc}

0801301c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 801301c:	b580      	push	{r7, lr}
 801301e:	b086      	sub	sp, #24
 8013020:	af00      	add	r7, sp, #0
 8013022:	6078      	str	r0, [r7, #4]
 8013024:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8013026:	2300      	movs	r3, #0
 8013028:	617b      	str	r3, [r7, #20]
 801302a:	2300      	movs	r3, #0
 801302c:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 801302e:	687b      	ldr	r3, [r7, #4]
 8013030:	2b00      	cmp	r3, #0
 8013032:	d008      	beq.n	8013046 <pbuf_copy+0x2a>
 8013034:	683b      	ldr	r3, [r7, #0]
 8013036:	2b00      	cmp	r3, #0
 8013038:	d005      	beq.n	8013046 <pbuf_copy+0x2a>
 801303a:	687b      	ldr	r3, [r7, #4]
 801303c:	891a      	ldrh	r2, [r3, #8]
 801303e:	683b      	ldr	r3, [r7, #0]
 8013040:	891b      	ldrh	r3, [r3, #8]
 8013042:	429a      	cmp	r2, r3
 8013044:	d209      	bcs.n	801305a <pbuf_copy+0x3e>
 8013046:	4b57      	ldr	r3, [pc, #348]	; (80131a4 <pbuf_copy+0x188>)
 8013048:	f240 32c9 	movw	r2, #969	; 0x3c9
 801304c:	4956      	ldr	r1, [pc, #344]	; (80131a8 <pbuf_copy+0x18c>)
 801304e:	4857      	ldr	r0, [pc, #348]	; (80131ac <pbuf_copy+0x190>)
 8013050:	f00c fad8 	bl	801f604 <iprintf>
 8013054:	f06f 030f 	mvn.w	r3, #15
 8013058:	e09f      	b.n	801319a <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 801305a:	687b      	ldr	r3, [r7, #4]
 801305c:	895b      	ldrh	r3, [r3, #10]
 801305e:	461a      	mov	r2, r3
 8013060:	697b      	ldr	r3, [r7, #20]
 8013062:	1ad2      	subs	r2, r2, r3
 8013064:	683b      	ldr	r3, [r7, #0]
 8013066:	895b      	ldrh	r3, [r3, #10]
 8013068:	4619      	mov	r1, r3
 801306a:	693b      	ldr	r3, [r7, #16]
 801306c:	1acb      	subs	r3, r1, r3
 801306e:	429a      	cmp	r2, r3
 8013070:	d306      	bcc.n	8013080 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8013072:	683b      	ldr	r3, [r7, #0]
 8013074:	895b      	ldrh	r3, [r3, #10]
 8013076:	461a      	mov	r2, r3
 8013078:	693b      	ldr	r3, [r7, #16]
 801307a:	1ad3      	subs	r3, r2, r3
 801307c:	60fb      	str	r3, [r7, #12]
 801307e:	e005      	b.n	801308c <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8013080:	687b      	ldr	r3, [r7, #4]
 8013082:	895b      	ldrh	r3, [r3, #10]
 8013084:	461a      	mov	r2, r3
 8013086:	697b      	ldr	r3, [r7, #20]
 8013088:	1ad3      	subs	r3, r2, r3
 801308a:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 801308c:	687b      	ldr	r3, [r7, #4]
 801308e:	685a      	ldr	r2, [r3, #4]
 8013090:	697b      	ldr	r3, [r7, #20]
 8013092:	18d0      	adds	r0, r2, r3
 8013094:	683b      	ldr	r3, [r7, #0]
 8013096:	685a      	ldr	r2, [r3, #4]
 8013098:	693b      	ldr	r3, [r7, #16]
 801309a:	4413      	add	r3, r2
 801309c:	68fa      	ldr	r2, [r7, #12]
 801309e:	4619      	mov	r1, r3
 80130a0:	f00b fc3a 	bl	801e918 <memcpy>
    offset_to += len;
 80130a4:	697a      	ldr	r2, [r7, #20]
 80130a6:	68fb      	ldr	r3, [r7, #12]
 80130a8:	4413      	add	r3, r2
 80130aa:	617b      	str	r3, [r7, #20]
    offset_from += len;
 80130ac:	693a      	ldr	r2, [r7, #16]
 80130ae:	68fb      	ldr	r3, [r7, #12]
 80130b0:	4413      	add	r3, r2
 80130b2:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80130b4:	687b      	ldr	r3, [r7, #4]
 80130b6:	895b      	ldrh	r3, [r3, #10]
 80130b8:	461a      	mov	r2, r3
 80130ba:	697b      	ldr	r3, [r7, #20]
 80130bc:	4293      	cmp	r3, r2
 80130be:	d906      	bls.n	80130ce <pbuf_copy+0xb2>
 80130c0:	4b38      	ldr	r3, [pc, #224]	; (80131a4 <pbuf_copy+0x188>)
 80130c2:	f240 32d9 	movw	r2, #985	; 0x3d9
 80130c6:	493a      	ldr	r1, [pc, #232]	; (80131b0 <pbuf_copy+0x194>)
 80130c8:	4838      	ldr	r0, [pc, #224]	; (80131ac <pbuf_copy+0x190>)
 80130ca:	f00c fa9b 	bl	801f604 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 80130ce:	683b      	ldr	r3, [r7, #0]
 80130d0:	895b      	ldrh	r3, [r3, #10]
 80130d2:	461a      	mov	r2, r3
 80130d4:	693b      	ldr	r3, [r7, #16]
 80130d6:	4293      	cmp	r3, r2
 80130d8:	d906      	bls.n	80130e8 <pbuf_copy+0xcc>
 80130da:	4b32      	ldr	r3, [pc, #200]	; (80131a4 <pbuf_copy+0x188>)
 80130dc:	f240 32da 	movw	r2, #986	; 0x3da
 80130e0:	4934      	ldr	r1, [pc, #208]	; (80131b4 <pbuf_copy+0x198>)
 80130e2:	4832      	ldr	r0, [pc, #200]	; (80131ac <pbuf_copy+0x190>)
 80130e4:	f00c fa8e 	bl	801f604 <iprintf>
    if (offset_from >= p_from->len) {
 80130e8:	683b      	ldr	r3, [r7, #0]
 80130ea:	895b      	ldrh	r3, [r3, #10]
 80130ec:	461a      	mov	r2, r3
 80130ee:	693b      	ldr	r3, [r7, #16]
 80130f0:	4293      	cmp	r3, r2
 80130f2:	d304      	bcc.n	80130fe <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 80130f4:	2300      	movs	r3, #0
 80130f6:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 80130f8:	683b      	ldr	r3, [r7, #0]
 80130fa:	681b      	ldr	r3, [r3, #0]
 80130fc:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 80130fe:	687b      	ldr	r3, [r7, #4]
 8013100:	895b      	ldrh	r3, [r3, #10]
 8013102:	461a      	mov	r2, r3
 8013104:	697b      	ldr	r3, [r7, #20]
 8013106:	4293      	cmp	r3, r2
 8013108:	d114      	bne.n	8013134 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 801310a:	2300      	movs	r3, #0
 801310c:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 801310e:	687b      	ldr	r3, [r7, #4]
 8013110:	681b      	ldr	r3, [r3, #0]
 8013112:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8013114:	687b      	ldr	r3, [r7, #4]
 8013116:	2b00      	cmp	r3, #0
 8013118:	d10c      	bne.n	8013134 <pbuf_copy+0x118>
 801311a:	683b      	ldr	r3, [r7, #0]
 801311c:	2b00      	cmp	r3, #0
 801311e:	d009      	beq.n	8013134 <pbuf_copy+0x118>
 8013120:	4b20      	ldr	r3, [pc, #128]	; (80131a4 <pbuf_copy+0x188>)
 8013122:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8013126:	4924      	ldr	r1, [pc, #144]	; (80131b8 <pbuf_copy+0x19c>)
 8013128:	4820      	ldr	r0, [pc, #128]	; (80131ac <pbuf_copy+0x190>)
 801312a:	f00c fa6b 	bl	801f604 <iprintf>
 801312e:	f06f 030f 	mvn.w	r3, #15
 8013132:	e032      	b.n	801319a <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8013134:	683b      	ldr	r3, [r7, #0]
 8013136:	2b00      	cmp	r3, #0
 8013138:	d013      	beq.n	8013162 <pbuf_copy+0x146>
 801313a:	683b      	ldr	r3, [r7, #0]
 801313c:	895a      	ldrh	r2, [r3, #10]
 801313e:	683b      	ldr	r3, [r7, #0]
 8013140:	891b      	ldrh	r3, [r3, #8]
 8013142:	429a      	cmp	r2, r3
 8013144:	d10d      	bne.n	8013162 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8013146:	683b      	ldr	r3, [r7, #0]
 8013148:	681b      	ldr	r3, [r3, #0]
 801314a:	2b00      	cmp	r3, #0
 801314c:	d009      	beq.n	8013162 <pbuf_copy+0x146>
 801314e:	4b15      	ldr	r3, [pc, #84]	; (80131a4 <pbuf_copy+0x188>)
 8013150:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8013154:	4919      	ldr	r1, [pc, #100]	; (80131bc <pbuf_copy+0x1a0>)
 8013156:	4815      	ldr	r0, [pc, #84]	; (80131ac <pbuf_copy+0x190>)
 8013158:	f00c fa54 	bl	801f604 <iprintf>
 801315c:	f06f 0305 	mvn.w	r3, #5
 8013160:	e01b      	b.n	801319a <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8013162:	687b      	ldr	r3, [r7, #4]
 8013164:	2b00      	cmp	r3, #0
 8013166:	d013      	beq.n	8013190 <pbuf_copy+0x174>
 8013168:	687b      	ldr	r3, [r7, #4]
 801316a:	895a      	ldrh	r2, [r3, #10]
 801316c:	687b      	ldr	r3, [r7, #4]
 801316e:	891b      	ldrh	r3, [r3, #8]
 8013170:	429a      	cmp	r2, r3
 8013172:	d10d      	bne.n	8013190 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8013174:	687b      	ldr	r3, [r7, #4]
 8013176:	681b      	ldr	r3, [r3, #0]
 8013178:	2b00      	cmp	r3, #0
 801317a:	d009      	beq.n	8013190 <pbuf_copy+0x174>
 801317c:	4b09      	ldr	r3, [pc, #36]	; (80131a4 <pbuf_copy+0x188>)
 801317e:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8013182:	490e      	ldr	r1, [pc, #56]	; (80131bc <pbuf_copy+0x1a0>)
 8013184:	4809      	ldr	r0, [pc, #36]	; (80131ac <pbuf_copy+0x190>)
 8013186:	f00c fa3d 	bl	801f604 <iprintf>
 801318a:	f06f 0305 	mvn.w	r3, #5
 801318e:	e004      	b.n	801319a <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8013190:	683b      	ldr	r3, [r7, #0]
 8013192:	2b00      	cmp	r3, #0
 8013194:	f47f af61 	bne.w	801305a <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8013198:	2300      	movs	r3, #0
}
 801319a:	4618      	mov	r0, r3
 801319c:	3718      	adds	r7, #24
 801319e:	46bd      	mov	sp, r7
 80131a0:	bd80      	pop	{r7, pc}
 80131a2:	bf00      	nop
 80131a4:	0802482c 	.word	0x0802482c
 80131a8:	08024ad4 	.word	0x08024ad4
 80131ac:	0802488c 	.word	0x0802488c
 80131b0:	08024b04 	.word	0x08024b04
 80131b4:	08024b1c 	.word	0x08024b1c
 80131b8:	08024b38 	.word	0x08024b38
 80131bc:	08024b48 	.word	0x08024b48

080131c0 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 80131c0:	b580      	push	{r7, lr}
 80131c2:	b088      	sub	sp, #32
 80131c4:	af00      	add	r7, sp, #0
 80131c6:	60f8      	str	r0, [r7, #12]
 80131c8:	60b9      	str	r1, [r7, #8]
 80131ca:	4611      	mov	r1, r2
 80131cc:	461a      	mov	r2, r3
 80131ce:	460b      	mov	r3, r1
 80131d0:	80fb      	strh	r3, [r7, #6]
 80131d2:	4613      	mov	r3, r2
 80131d4:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 80131d6:	2300      	movs	r3, #0
 80131d8:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 80131da:	2300      	movs	r3, #0
 80131dc:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 80131de:	68fb      	ldr	r3, [r7, #12]
 80131e0:	2b00      	cmp	r3, #0
 80131e2:	d108      	bne.n	80131f6 <pbuf_copy_partial+0x36>
 80131e4:	4b2b      	ldr	r3, [pc, #172]	; (8013294 <pbuf_copy_partial+0xd4>)
 80131e6:	f240 420a 	movw	r2, #1034	; 0x40a
 80131ea:	492b      	ldr	r1, [pc, #172]	; (8013298 <pbuf_copy_partial+0xd8>)
 80131ec:	482b      	ldr	r0, [pc, #172]	; (801329c <pbuf_copy_partial+0xdc>)
 80131ee:	f00c fa09 	bl	801f604 <iprintf>
 80131f2:	2300      	movs	r3, #0
 80131f4:	e04a      	b.n	801328c <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80131f6:	68bb      	ldr	r3, [r7, #8]
 80131f8:	2b00      	cmp	r3, #0
 80131fa:	d108      	bne.n	801320e <pbuf_copy_partial+0x4e>
 80131fc:	4b25      	ldr	r3, [pc, #148]	; (8013294 <pbuf_copy_partial+0xd4>)
 80131fe:	f240 420b 	movw	r2, #1035	; 0x40b
 8013202:	4927      	ldr	r1, [pc, #156]	; (80132a0 <pbuf_copy_partial+0xe0>)
 8013204:	4825      	ldr	r0, [pc, #148]	; (801329c <pbuf_copy_partial+0xdc>)
 8013206:	f00c f9fd 	bl	801f604 <iprintf>
 801320a:	2300      	movs	r3, #0
 801320c:	e03e      	b.n	801328c <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 801320e:	68fb      	ldr	r3, [r7, #12]
 8013210:	61fb      	str	r3, [r7, #28]
 8013212:	e034      	b.n	801327e <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8013214:	88bb      	ldrh	r3, [r7, #4]
 8013216:	2b00      	cmp	r3, #0
 8013218:	d00a      	beq.n	8013230 <pbuf_copy_partial+0x70>
 801321a:	69fb      	ldr	r3, [r7, #28]
 801321c:	895b      	ldrh	r3, [r3, #10]
 801321e:	88ba      	ldrh	r2, [r7, #4]
 8013220:	429a      	cmp	r2, r3
 8013222:	d305      	bcc.n	8013230 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8013224:	69fb      	ldr	r3, [r7, #28]
 8013226:	895b      	ldrh	r3, [r3, #10]
 8013228:	88ba      	ldrh	r2, [r7, #4]
 801322a:	1ad3      	subs	r3, r2, r3
 801322c:	80bb      	strh	r3, [r7, #4]
 801322e:	e023      	b.n	8013278 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8013230:	69fb      	ldr	r3, [r7, #28]
 8013232:	895a      	ldrh	r2, [r3, #10]
 8013234:	88bb      	ldrh	r3, [r7, #4]
 8013236:	1ad3      	subs	r3, r2, r3
 8013238:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 801323a:	8b3a      	ldrh	r2, [r7, #24]
 801323c:	88fb      	ldrh	r3, [r7, #6]
 801323e:	429a      	cmp	r2, r3
 8013240:	d901      	bls.n	8013246 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8013242:	88fb      	ldrh	r3, [r7, #6]
 8013244:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8013246:	8b7b      	ldrh	r3, [r7, #26]
 8013248:	68ba      	ldr	r2, [r7, #8]
 801324a:	18d0      	adds	r0, r2, r3
 801324c:	69fb      	ldr	r3, [r7, #28]
 801324e:	685a      	ldr	r2, [r3, #4]
 8013250:	88bb      	ldrh	r3, [r7, #4]
 8013252:	4413      	add	r3, r2
 8013254:	8b3a      	ldrh	r2, [r7, #24]
 8013256:	4619      	mov	r1, r3
 8013258:	f00b fb5e 	bl	801e918 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 801325c:	8afa      	ldrh	r2, [r7, #22]
 801325e:	8b3b      	ldrh	r3, [r7, #24]
 8013260:	4413      	add	r3, r2
 8013262:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8013264:	8b7a      	ldrh	r2, [r7, #26]
 8013266:	8b3b      	ldrh	r3, [r7, #24]
 8013268:	4413      	add	r3, r2
 801326a:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 801326c:	88fa      	ldrh	r2, [r7, #6]
 801326e:	8b3b      	ldrh	r3, [r7, #24]
 8013270:	1ad3      	subs	r3, r2, r3
 8013272:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8013274:	2300      	movs	r3, #0
 8013276:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8013278:	69fb      	ldr	r3, [r7, #28]
 801327a:	681b      	ldr	r3, [r3, #0]
 801327c:	61fb      	str	r3, [r7, #28]
 801327e:	88fb      	ldrh	r3, [r7, #6]
 8013280:	2b00      	cmp	r3, #0
 8013282:	d002      	beq.n	801328a <pbuf_copy_partial+0xca>
 8013284:	69fb      	ldr	r3, [r7, #28]
 8013286:	2b00      	cmp	r3, #0
 8013288:	d1c4      	bne.n	8013214 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 801328a:	8afb      	ldrh	r3, [r7, #22]
}
 801328c:	4618      	mov	r0, r3
 801328e:	3720      	adds	r7, #32
 8013290:	46bd      	mov	sp, r7
 8013292:	bd80      	pop	{r7, pc}
 8013294:	0802482c 	.word	0x0802482c
 8013298:	08024b74 	.word	0x08024b74
 801329c:	0802488c 	.word	0x0802488c
 80132a0:	08024b94 	.word	0x08024b94

080132a4 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 80132a4:	b580      	push	{r7, lr}
 80132a6:	b084      	sub	sp, #16
 80132a8:	af00      	add	r7, sp, #0
 80132aa:	4603      	mov	r3, r0
 80132ac:	603a      	str	r2, [r7, #0]
 80132ae:	71fb      	strb	r3, [r7, #7]
 80132b0:	460b      	mov	r3, r1
 80132b2:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 80132b4:	683b      	ldr	r3, [r7, #0]
 80132b6:	8919      	ldrh	r1, [r3, #8]
 80132b8:	88ba      	ldrh	r2, [r7, #4]
 80132ba:	79fb      	ldrb	r3, [r7, #7]
 80132bc:	4618      	mov	r0, r3
 80132be:	f7ff fa63 	bl	8012788 <pbuf_alloc>
 80132c2:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 80132c4:	68fb      	ldr	r3, [r7, #12]
 80132c6:	2b00      	cmp	r3, #0
 80132c8:	d101      	bne.n	80132ce <pbuf_clone+0x2a>
    return NULL;
 80132ca:	2300      	movs	r3, #0
 80132cc:	e011      	b.n	80132f2 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 80132ce:	6839      	ldr	r1, [r7, #0]
 80132d0:	68f8      	ldr	r0, [r7, #12]
 80132d2:	f7ff fea3 	bl	801301c <pbuf_copy>
 80132d6:	4603      	mov	r3, r0
 80132d8:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 80132da:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80132de:	2b00      	cmp	r3, #0
 80132e0:	d006      	beq.n	80132f0 <pbuf_clone+0x4c>
 80132e2:	4b06      	ldr	r3, [pc, #24]	; (80132fc <pbuf_clone+0x58>)
 80132e4:	f240 5224 	movw	r2, #1316	; 0x524
 80132e8:	4905      	ldr	r1, [pc, #20]	; (8013300 <pbuf_clone+0x5c>)
 80132ea:	4806      	ldr	r0, [pc, #24]	; (8013304 <pbuf_clone+0x60>)
 80132ec:	f00c f98a 	bl	801f604 <iprintf>
  return q;
 80132f0:	68fb      	ldr	r3, [r7, #12]
}
 80132f2:	4618      	mov	r0, r3
 80132f4:	3710      	adds	r7, #16
 80132f6:	46bd      	mov	sp, r7
 80132f8:	bd80      	pop	{r7, pc}
 80132fa:	bf00      	nop
 80132fc:	0802482c 	.word	0x0802482c
 8013300:	08024ca0 	.word	0x08024ca0
 8013304:	0802488c 	.word	0x0802488c

08013308 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8013308:	b580      	push	{r7, lr}
 801330a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801330c:	f00c f992 	bl	801f634 <rand>
 8013310:	4603      	mov	r3, r0
 8013312:	b29b      	uxth	r3, r3
 8013314:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8013318:	b29b      	uxth	r3, r3
 801331a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801331e:	b29a      	uxth	r2, r3
 8013320:	4b01      	ldr	r3, [pc, #4]	; (8013328 <tcp_init+0x20>)
 8013322:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8013324:	bf00      	nop
 8013326:	bd80      	pop	{r7, pc}
 8013328:	240002f4 	.word	0x240002f4

0801332c <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 801332c:	b580      	push	{r7, lr}
 801332e:	b082      	sub	sp, #8
 8013330:	af00      	add	r7, sp, #0
 8013332:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8013334:	687b      	ldr	r3, [r7, #4]
 8013336:	7d1b      	ldrb	r3, [r3, #20]
 8013338:	2b01      	cmp	r3, #1
 801333a:	d105      	bne.n	8013348 <tcp_free+0x1c>
 801333c:	4b06      	ldr	r3, [pc, #24]	; (8013358 <tcp_free+0x2c>)
 801333e:	22d4      	movs	r2, #212	; 0xd4
 8013340:	4906      	ldr	r1, [pc, #24]	; (801335c <tcp_free+0x30>)
 8013342:	4807      	ldr	r0, [pc, #28]	; (8013360 <tcp_free+0x34>)
 8013344:	f00c f95e 	bl	801f604 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8013348:	6879      	ldr	r1, [r7, #4]
 801334a:	2001      	movs	r0, #1
 801334c:	f7fe fe50 	bl	8011ff0 <memp_free>
}
 8013350:	bf00      	nop
 8013352:	3708      	adds	r7, #8
 8013354:	46bd      	mov	sp, r7
 8013356:	bd80      	pop	{r7, pc}
 8013358:	08024d2c 	.word	0x08024d2c
 801335c:	08024d5c 	.word	0x08024d5c
 8013360:	08024d70 	.word	0x08024d70

08013364 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8013364:	b580      	push	{r7, lr}
 8013366:	b082      	sub	sp, #8
 8013368:	af00      	add	r7, sp, #0
 801336a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 801336c:	687b      	ldr	r3, [r7, #4]
 801336e:	7d1b      	ldrb	r3, [r3, #20]
 8013370:	2b01      	cmp	r3, #1
 8013372:	d105      	bne.n	8013380 <tcp_free_listen+0x1c>
 8013374:	4b06      	ldr	r3, [pc, #24]	; (8013390 <tcp_free_listen+0x2c>)
 8013376:	22df      	movs	r2, #223	; 0xdf
 8013378:	4906      	ldr	r1, [pc, #24]	; (8013394 <tcp_free_listen+0x30>)
 801337a:	4807      	ldr	r0, [pc, #28]	; (8013398 <tcp_free_listen+0x34>)
 801337c:	f00c f942 	bl	801f604 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8013380:	6879      	ldr	r1, [r7, #4]
 8013382:	2002      	movs	r0, #2
 8013384:	f7fe fe34 	bl	8011ff0 <memp_free>
}
 8013388:	bf00      	nop
 801338a:	3708      	adds	r7, #8
 801338c:	46bd      	mov	sp, r7
 801338e:	bd80      	pop	{r7, pc}
 8013390:	08024d2c 	.word	0x08024d2c
 8013394:	08024d98 	.word	0x08024d98
 8013398:	08024d70 	.word	0x08024d70

0801339c <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 801339c:	b580      	push	{r7, lr}
 801339e:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 80133a0:	f001 f8a6 	bl	80144f0 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 80133a4:	4b07      	ldr	r3, [pc, #28]	; (80133c4 <tcp_tmr+0x28>)
 80133a6:	781b      	ldrb	r3, [r3, #0]
 80133a8:	3301      	adds	r3, #1
 80133aa:	b2da      	uxtb	r2, r3
 80133ac:	4b05      	ldr	r3, [pc, #20]	; (80133c4 <tcp_tmr+0x28>)
 80133ae:	701a      	strb	r2, [r3, #0]
 80133b0:	4b04      	ldr	r3, [pc, #16]	; (80133c4 <tcp_tmr+0x28>)
 80133b2:	781b      	ldrb	r3, [r3, #0]
 80133b4:	f003 0301 	and.w	r3, r3, #1
 80133b8:	2b00      	cmp	r3, #0
 80133ba:	d001      	beq.n	80133c0 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 80133bc:	f000 fd58 	bl	8013e70 <tcp_slowtmr>
  }
}
 80133c0:	bf00      	nop
 80133c2:	bd80      	pop	{r7, pc}
 80133c4:	2400453d 	.word	0x2400453d

080133c8 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 80133c8:	b580      	push	{r7, lr}
 80133ca:	b084      	sub	sp, #16
 80133cc:	af00      	add	r7, sp, #0
 80133ce:	6078      	str	r0, [r7, #4]
 80133d0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 80133d2:	683b      	ldr	r3, [r7, #0]
 80133d4:	2b00      	cmp	r3, #0
 80133d6:	d105      	bne.n	80133e4 <tcp_remove_listener+0x1c>
 80133d8:	4b0d      	ldr	r3, [pc, #52]	; (8013410 <tcp_remove_listener+0x48>)
 80133da:	22ff      	movs	r2, #255	; 0xff
 80133dc:	490d      	ldr	r1, [pc, #52]	; (8013414 <tcp_remove_listener+0x4c>)
 80133de:	480e      	ldr	r0, [pc, #56]	; (8013418 <tcp_remove_listener+0x50>)
 80133e0:	f00c f910 	bl	801f604 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80133e4:	687b      	ldr	r3, [r7, #4]
 80133e6:	60fb      	str	r3, [r7, #12]
 80133e8:	e00a      	b.n	8013400 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 80133ea:	68fb      	ldr	r3, [r7, #12]
 80133ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80133ee:	683a      	ldr	r2, [r7, #0]
 80133f0:	429a      	cmp	r2, r3
 80133f2:	d102      	bne.n	80133fa <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 80133f4:	68fb      	ldr	r3, [r7, #12]
 80133f6:	2200      	movs	r2, #0
 80133f8:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80133fa:	68fb      	ldr	r3, [r7, #12]
 80133fc:	68db      	ldr	r3, [r3, #12]
 80133fe:	60fb      	str	r3, [r7, #12]
 8013400:	68fb      	ldr	r3, [r7, #12]
 8013402:	2b00      	cmp	r3, #0
 8013404:	d1f1      	bne.n	80133ea <tcp_remove_listener+0x22>
    }
  }
}
 8013406:	bf00      	nop
 8013408:	bf00      	nop
 801340a:	3710      	adds	r7, #16
 801340c:	46bd      	mov	sp, r7
 801340e:	bd80      	pop	{r7, pc}
 8013410:	08024d2c 	.word	0x08024d2c
 8013414:	08024db4 	.word	0x08024db4
 8013418:	08024d70 	.word	0x08024d70

0801341c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 801341c:	b580      	push	{r7, lr}
 801341e:	b084      	sub	sp, #16
 8013420:	af00      	add	r7, sp, #0
 8013422:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8013424:	687b      	ldr	r3, [r7, #4]
 8013426:	2b00      	cmp	r3, #0
 8013428:	d106      	bne.n	8013438 <tcp_listen_closed+0x1c>
 801342a:	4b14      	ldr	r3, [pc, #80]	; (801347c <tcp_listen_closed+0x60>)
 801342c:	f240 1211 	movw	r2, #273	; 0x111
 8013430:	4913      	ldr	r1, [pc, #76]	; (8013480 <tcp_listen_closed+0x64>)
 8013432:	4814      	ldr	r0, [pc, #80]	; (8013484 <tcp_listen_closed+0x68>)
 8013434:	f00c f8e6 	bl	801f604 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8013438:	687b      	ldr	r3, [r7, #4]
 801343a:	7d1b      	ldrb	r3, [r3, #20]
 801343c:	2b01      	cmp	r3, #1
 801343e:	d006      	beq.n	801344e <tcp_listen_closed+0x32>
 8013440:	4b0e      	ldr	r3, [pc, #56]	; (801347c <tcp_listen_closed+0x60>)
 8013442:	f44f 7289 	mov.w	r2, #274	; 0x112
 8013446:	4910      	ldr	r1, [pc, #64]	; (8013488 <tcp_listen_closed+0x6c>)
 8013448:	480e      	ldr	r0, [pc, #56]	; (8013484 <tcp_listen_closed+0x68>)
 801344a:	f00c f8db 	bl	801f604 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 801344e:	2301      	movs	r3, #1
 8013450:	60fb      	str	r3, [r7, #12]
 8013452:	e00b      	b.n	801346c <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8013454:	4a0d      	ldr	r2, [pc, #52]	; (801348c <tcp_listen_closed+0x70>)
 8013456:	68fb      	ldr	r3, [r7, #12]
 8013458:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801345c:	681b      	ldr	r3, [r3, #0]
 801345e:	6879      	ldr	r1, [r7, #4]
 8013460:	4618      	mov	r0, r3
 8013462:	f7ff ffb1 	bl	80133c8 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8013466:	68fb      	ldr	r3, [r7, #12]
 8013468:	3301      	adds	r3, #1
 801346a:	60fb      	str	r3, [r7, #12]
 801346c:	68fb      	ldr	r3, [r7, #12]
 801346e:	2b03      	cmp	r3, #3
 8013470:	d9f0      	bls.n	8013454 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8013472:	bf00      	nop
 8013474:	bf00      	nop
 8013476:	3710      	adds	r7, #16
 8013478:	46bd      	mov	sp, r7
 801347a:	bd80      	pop	{r7, pc}
 801347c:	08024d2c 	.word	0x08024d2c
 8013480:	08024ddc 	.word	0x08024ddc
 8013484:	08024d70 	.word	0x08024d70
 8013488:	08024de8 	.word	0x08024de8
 801348c:	08027154 	.word	0x08027154

08013490 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8013490:	b5b0      	push	{r4, r5, r7, lr}
 8013492:	b088      	sub	sp, #32
 8013494:	af04      	add	r7, sp, #16
 8013496:	6078      	str	r0, [r7, #4]
 8013498:	460b      	mov	r3, r1
 801349a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 801349c:	687b      	ldr	r3, [r7, #4]
 801349e:	2b00      	cmp	r3, #0
 80134a0:	d106      	bne.n	80134b0 <tcp_close_shutdown+0x20>
 80134a2:	4b63      	ldr	r3, [pc, #396]	; (8013630 <tcp_close_shutdown+0x1a0>)
 80134a4:	f44f 72af 	mov.w	r2, #350	; 0x15e
 80134a8:	4962      	ldr	r1, [pc, #392]	; (8013634 <tcp_close_shutdown+0x1a4>)
 80134aa:	4863      	ldr	r0, [pc, #396]	; (8013638 <tcp_close_shutdown+0x1a8>)
 80134ac:	f00c f8aa 	bl	801f604 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 80134b0:	78fb      	ldrb	r3, [r7, #3]
 80134b2:	2b00      	cmp	r3, #0
 80134b4:	d066      	beq.n	8013584 <tcp_close_shutdown+0xf4>
 80134b6:	687b      	ldr	r3, [r7, #4]
 80134b8:	7d1b      	ldrb	r3, [r3, #20]
 80134ba:	2b04      	cmp	r3, #4
 80134bc:	d003      	beq.n	80134c6 <tcp_close_shutdown+0x36>
 80134be:	687b      	ldr	r3, [r7, #4]
 80134c0:	7d1b      	ldrb	r3, [r3, #20]
 80134c2:	2b07      	cmp	r3, #7
 80134c4:	d15e      	bne.n	8013584 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 80134c6:	687b      	ldr	r3, [r7, #4]
 80134c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80134ca:	2b00      	cmp	r3, #0
 80134cc:	d104      	bne.n	80134d8 <tcp_close_shutdown+0x48>
 80134ce:	687b      	ldr	r3, [r7, #4]
 80134d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80134d2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80134d6:	d055      	beq.n	8013584 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 80134d8:	687b      	ldr	r3, [r7, #4]
 80134da:	8b5b      	ldrh	r3, [r3, #26]
 80134dc:	f003 0310 	and.w	r3, r3, #16
 80134e0:	2b00      	cmp	r3, #0
 80134e2:	d106      	bne.n	80134f2 <tcp_close_shutdown+0x62>
 80134e4:	4b52      	ldr	r3, [pc, #328]	; (8013630 <tcp_close_shutdown+0x1a0>)
 80134e6:	f44f 72b2 	mov.w	r2, #356	; 0x164
 80134ea:	4954      	ldr	r1, [pc, #336]	; (801363c <tcp_close_shutdown+0x1ac>)
 80134ec:	4852      	ldr	r0, [pc, #328]	; (8013638 <tcp_close_shutdown+0x1a8>)
 80134ee:	f00c f889 	bl	801f604 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80134f2:	687b      	ldr	r3, [r7, #4]
 80134f4:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80134f6:	687b      	ldr	r3, [r7, #4]
 80134f8:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80134fa:	687d      	ldr	r5, [r7, #4]
 80134fc:	687b      	ldr	r3, [r7, #4]
 80134fe:	3304      	adds	r3, #4
 8013500:	687a      	ldr	r2, [r7, #4]
 8013502:	8ad2      	ldrh	r2, [r2, #22]
 8013504:	6879      	ldr	r1, [r7, #4]
 8013506:	8b09      	ldrh	r1, [r1, #24]
 8013508:	9102      	str	r1, [sp, #8]
 801350a:	9201      	str	r2, [sp, #4]
 801350c:	9300      	str	r3, [sp, #0]
 801350e:	462b      	mov	r3, r5
 8013510:	4622      	mov	r2, r4
 8013512:	4601      	mov	r1, r0
 8013514:	6878      	ldr	r0, [r7, #4]
 8013516:	f005 fdb7 	bl	8019088 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 801351a:	6878      	ldr	r0, [r7, #4]
 801351c:	f001 fb98 	bl	8014c50 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8013520:	4b47      	ldr	r3, [pc, #284]	; (8013640 <tcp_close_shutdown+0x1b0>)
 8013522:	681b      	ldr	r3, [r3, #0]
 8013524:	687a      	ldr	r2, [r7, #4]
 8013526:	429a      	cmp	r2, r3
 8013528:	d105      	bne.n	8013536 <tcp_close_shutdown+0xa6>
 801352a:	4b45      	ldr	r3, [pc, #276]	; (8013640 <tcp_close_shutdown+0x1b0>)
 801352c:	681b      	ldr	r3, [r3, #0]
 801352e:	68db      	ldr	r3, [r3, #12]
 8013530:	4a43      	ldr	r2, [pc, #268]	; (8013640 <tcp_close_shutdown+0x1b0>)
 8013532:	6013      	str	r3, [r2, #0]
 8013534:	e013      	b.n	801355e <tcp_close_shutdown+0xce>
 8013536:	4b42      	ldr	r3, [pc, #264]	; (8013640 <tcp_close_shutdown+0x1b0>)
 8013538:	681b      	ldr	r3, [r3, #0]
 801353a:	60fb      	str	r3, [r7, #12]
 801353c:	e00c      	b.n	8013558 <tcp_close_shutdown+0xc8>
 801353e:	68fb      	ldr	r3, [r7, #12]
 8013540:	68db      	ldr	r3, [r3, #12]
 8013542:	687a      	ldr	r2, [r7, #4]
 8013544:	429a      	cmp	r2, r3
 8013546:	d104      	bne.n	8013552 <tcp_close_shutdown+0xc2>
 8013548:	687b      	ldr	r3, [r7, #4]
 801354a:	68da      	ldr	r2, [r3, #12]
 801354c:	68fb      	ldr	r3, [r7, #12]
 801354e:	60da      	str	r2, [r3, #12]
 8013550:	e005      	b.n	801355e <tcp_close_shutdown+0xce>
 8013552:	68fb      	ldr	r3, [r7, #12]
 8013554:	68db      	ldr	r3, [r3, #12]
 8013556:	60fb      	str	r3, [r7, #12]
 8013558:	68fb      	ldr	r3, [r7, #12]
 801355a:	2b00      	cmp	r3, #0
 801355c:	d1ef      	bne.n	801353e <tcp_close_shutdown+0xae>
 801355e:	687b      	ldr	r3, [r7, #4]
 8013560:	2200      	movs	r2, #0
 8013562:	60da      	str	r2, [r3, #12]
 8013564:	4b37      	ldr	r3, [pc, #220]	; (8013644 <tcp_close_shutdown+0x1b4>)
 8013566:	2201      	movs	r2, #1
 8013568:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 801356a:	4b37      	ldr	r3, [pc, #220]	; (8013648 <tcp_close_shutdown+0x1b8>)
 801356c:	681b      	ldr	r3, [r3, #0]
 801356e:	687a      	ldr	r2, [r7, #4]
 8013570:	429a      	cmp	r2, r3
 8013572:	d102      	bne.n	801357a <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8013574:	f004 f82c 	bl	80175d0 <tcp_trigger_input_pcb_close>
 8013578:	e002      	b.n	8013580 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 801357a:	6878      	ldr	r0, [r7, #4]
 801357c:	f7ff fed6 	bl	801332c <tcp_free>
      }
      return ERR_OK;
 8013580:	2300      	movs	r3, #0
 8013582:	e050      	b.n	8013626 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8013584:	687b      	ldr	r3, [r7, #4]
 8013586:	7d1b      	ldrb	r3, [r3, #20]
 8013588:	2b02      	cmp	r3, #2
 801358a:	d03b      	beq.n	8013604 <tcp_close_shutdown+0x174>
 801358c:	2b02      	cmp	r3, #2
 801358e:	dc44      	bgt.n	801361a <tcp_close_shutdown+0x18a>
 8013590:	2b00      	cmp	r3, #0
 8013592:	d002      	beq.n	801359a <tcp_close_shutdown+0x10a>
 8013594:	2b01      	cmp	r3, #1
 8013596:	d02a      	beq.n	80135ee <tcp_close_shutdown+0x15e>
 8013598:	e03f      	b.n	801361a <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 801359a:	687b      	ldr	r3, [r7, #4]
 801359c:	8adb      	ldrh	r3, [r3, #22]
 801359e:	2b00      	cmp	r3, #0
 80135a0:	d021      	beq.n	80135e6 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80135a2:	4b2a      	ldr	r3, [pc, #168]	; (801364c <tcp_close_shutdown+0x1bc>)
 80135a4:	681b      	ldr	r3, [r3, #0]
 80135a6:	687a      	ldr	r2, [r7, #4]
 80135a8:	429a      	cmp	r2, r3
 80135aa:	d105      	bne.n	80135b8 <tcp_close_shutdown+0x128>
 80135ac:	4b27      	ldr	r3, [pc, #156]	; (801364c <tcp_close_shutdown+0x1bc>)
 80135ae:	681b      	ldr	r3, [r3, #0]
 80135b0:	68db      	ldr	r3, [r3, #12]
 80135b2:	4a26      	ldr	r2, [pc, #152]	; (801364c <tcp_close_shutdown+0x1bc>)
 80135b4:	6013      	str	r3, [r2, #0]
 80135b6:	e013      	b.n	80135e0 <tcp_close_shutdown+0x150>
 80135b8:	4b24      	ldr	r3, [pc, #144]	; (801364c <tcp_close_shutdown+0x1bc>)
 80135ba:	681b      	ldr	r3, [r3, #0]
 80135bc:	60bb      	str	r3, [r7, #8]
 80135be:	e00c      	b.n	80135da <tcp_close_shutdown+0x14a>
 80135c0:	68bb      	ldr	r3, [r7, #8]
 80135c2:	68db      	ldr	r3, [r3, #12]
 80135c4:	687a      	ldr	r2, [r7, #4]
 80135c6:	429a      	cmp	r2, r3
 80135c8:	d104      	bne.n	80135d4 <tcp_close_shutdown+0x144>
 80135ca:	687b      	ldr	r3, [r7, #4]
 80135cc:	68da      	ldr	r2, [r3, #12]
 80135ce:	68bb      	ldr	r3, [r7, #8]
 80135d0:	60da      	str	r2, [r3, #12]
 80135d2:	e005      	b.n	80135e0 <tcp_close_shutdown+0x150>
 80135d4:	68bb      	ldr	r3, [r7, #8]
 80135d6:	68db      	ldr	r3, [r3, #12]
 80135d8:	60bb      	str	r3, [r7, #8]
 80135da:	68bb      	ldr	r3, [r7, #8]
 80135dc:	2b00      	cmp	r3, #0
 80135de:	d1ef      	bne.n	80135c0 <tcp_close_shutdown+0x130>
 80135e0:	687b      	ldr	r3, [r7, #4]
 80135e2:	2200      	movs	r2, #0
 80135e4:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 80135e6:	6878      	ldr	r0, [r7, #4]
 80135e8:	f7ff fea0 	bl	801332c <tcp_free>
      break;
 80135ec:	e01a      	b.n	8013624 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 80135ee:	6878      	ldr	r0, [r7, #4]
 80135f0:	f7ff ff14 	bl	801341c <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 80135f4:	6879      	ldr	r1, [r7, #4]
 80135f6:	4816      	ldr	r0, [pc, #88]	; (8013650 <tcp_close_shutdown+0x1c0>)
 80135f8:	f001 fb7a 	bl	8014cf0 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 80135fc:	6878      	ldr	r0, [r7, #4]
 80135fe:	f7ff feb1 	bl	8013364 <tcp_free_listen>
      break;
 8013602:	e00f      	b.n	8013624 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8013604:	6879      	ldr	r1, [r7, #4]
 8013606:	480e      	ldr	r0, [pc, #56]	; (8013640 <tcp_close_shutdown+0x1b0>)
 8013608:	f001 fb72 	bl	8014cf0 <tcp_pcb_remove>
 801360c:	4b0d      	ldr	r3, [pc, #52]	; (8013644 <tcp_close_shutdown+0x1b4>)
 801360e:	2201      	movs	r2, #1
 8013610:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8013612:	6878      	ldr	r0, [r7, #4]
 8013614:	f7ff fe8a 	bl	801332c <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8013618:	e004      	b.n	8013624 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 801361a:	6878      	ldr	r0, [r7, #4]
 801361c:	f000 f81a 	bl	8013654 <tcp_close_shutdown_fin>
 8013620:	4603      	mov	r3, r0
 8013622:	e000      	b.n	8013626 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8013624:	2300      	movs	r3, #0
}
 8013626:	4618      	mov	r0, r3
 8013628:	3710      	adds	r7, #16
 801362a:	46bd      	mov	sp, r7
 801362c:	bdb0      	pop	{r4, r5, r7, pc}
 801362e:	bf00      	nop
 8013630:	08024d2c 	.word	0x08024d2c
 8013634:	08024e00 	.word	0x08024e00
 8013638:	08024d70 	.word	0x08024d70
 801363c:	08024e20 	.word	0x08024e20
 8013640:	24007f3c 	.word	0x24007f3c
 8013644:	24007f38 	.word	0x24007f38
 8013648:	24007f50 	.word	0x24007f50
 801364c:	24007f48 	.word	0x24007f48
 8013650:	24007f44 	.word	0x24007f44

08013654 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8013654:	b580      	push	{r7, lr}
 8013656:	b084      	sub	sp, #16
 8013658:	af00      	add	r7, sp, #0
 801365a:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 801365c:	687b      	ldr	r3, [r7, #4]
 801365e:	2b00      	cmp	r3, #0
 8013660:	d106      	bne.n	8013670 <tcp_close_shutdown_fin+0x1c>
 8013662:	4b2e      	ldr	r3, [pc, #184]	; (801371c <tcp_close_shutdown_fin+0xc8>)
 8013664:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8013668:	492d      	ldr	r1, [pc, #180]	; (8013720 <tcp_close_shutdown_fin+0xcc>)
 801366a:	482e      	ldr	r0, [pc, #184]	; (8013724 <tcp_close_shutdown_fin+0xd0>)
 801366c:	f00b ffca 	bl	801f604 <iprintf>

  switch (pcb->state) {
 8013670:	687b      	ldr	r3, [r7, #4]
 8013672:	7d1b      	ldrb	r3, [r3, #20]
 8013674:	2b07      	cmp	r3, #7
 8013676:	d020      	beq.n	80136ba <tcp_close_shutdown_fin+0x66>
 8013678:	2b07      	cmp	r3, #7
 801367a:	dc2b      	bgt.n	80136d4 <tcp_close_shutdown_fin+0x80>
 801367c:	2b03      	cmp	r3, #3
 801367e:	d002      	beq.n	8013686 <tcp_close_shutdown_fin+0x32>
 8013680:	2b04      	cmp	r3, #4
 8013682:	d00d      	beq.n	80136a0 <tcp_close_shutdown_fin+0x4c>
 8013684:	e026      	b.n	80136d4 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8013686:	6878      	ldr	r0, [r7, #4]
 8013688:	f004 fe0c 	bl	80182a4 <tcp_send_fin>
 801368c:	4603      	mov	r3, r0
 801368e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8013690:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013694:	2b00      	cmp	r3, #0
 8013696:	d11f      	bne.n	80136d8 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8013698:	687b      	ldr	r3, [r7, #4]
 801369a:	2205      	movs	r2, #5
 801369c:	751a      	strb	r2, [r3, #20]
      }
      break;
 801369e:	e01b      	b.n	80136d8 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 80136a0:	6878      	ldr	r0, [r7, #4]
 80136a2:	f004 fdff 	bl	80182a4 <tcp_send_fin>
 80136a6:	4603      	mov	r3, r0
 80136a8:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80136aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80136ae:	2b00      	cmp	r3, #0
 80136b0:	d114      	bne.n	80136dc <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 80136b2:	687b      	ldr	r3, [r7, #4]
 80136b4:	2205      	movs	r2, #5
 80136b6:	751a      	strb	r2, [r3, #20]
      }
      break;
 80136b8:	e010      	b.n	80136dc <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 80136ba:	6878      	ldr	r0, [r7, #4]
 80136bc:	f004 fdf2 	bl	80182a4 <tcp_send_fin>
 80136c0:	4603      	mov	r3, r0
 80136c2:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80136c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80136c8:	2b00      	cmp	r3, #0
 80136ca:	d109      	bne.n	80136e0 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 80136cc:	687b      	ldr	r3, [r7, #4]
 80136ce:	2209      	movs	r2, #9
 80136d0:	751a      	strb	r2, [r3, #20]
      }
      break;
 80136d2:	e005      	b.n	80136e0 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 80136d4:	2300      	movs	r3, #0
 80136d6:	e01c      	b.n	8013712 <tcp_close_shutdown_fin+0xbe>
      break;
 80136d8:	bf00      	nop
 80136da:	e002      	b.n	80136e2 <tcp_close_shutdown_fin+0x8e>
      break;
 80136dc:	bf00      	nop
 80136de:	e000      	b.n	80136e2 <tcp_close_shutdown_fin+0x8e>
      break;
 80136e0:	bf00      	nop
  }

  if (err == ERR_OK) {
 80136e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80136e6:	2b00      	cmp	r3, #0
 80136e8:	d103      	bne.n	80136f2 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 80136ea:	6878      	ldr	r0, [r7, #4]
 80136ec:	f004 ff18 	bl	8018520 <tcp_output>
 80136f0:	e00d      	b.n	801370e <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 80136f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80136f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80136fa:	d108      	bne.n	801370e <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 80136fc:	687b      	ldr	r3, [r7, #4]
 80136fe:	8b5b      	ldrh	r3, [r3, #26]
 8013700:	f043 0308 	orr.w	r3, r3, #8
 8013704:	b29a      	uxth	r2, r3
 8013706:	687b      	ldr	r3, [r7, #4]
 8013708:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 801370a:	2300      	movs	r3, #0
 801370c:	e001      	b.n	8013712 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 801370e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013712:	4618      	mov	r0, r3
 8013714:	3710      	adds	r7, #16
 8013716:	46bd      	mov	sp, r7
 8013718:	bd80      	pop	{r7, pc}
 801371a:	bf00      	nop
 801371c:	08024d2c 	.word	0x08024d2c
 8013720:	08024ddc 	.word	0x08024ddc
 8013724:	08024d70 	.word	0x08024d70

08013728 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8013728:	b580      	push	{r7, lr}
 801372a:	b082      	sub	sp, #8
 801372c:	af00      	add	r7, sp, #0
 801372e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8013730:	687b      	ldr	r3, [r7, #4]
 8013732:	2b00      	cmp	r3, #0
 8013734:	d109      	bne.n	801374a <tcp_close+0x22>
 8013736:	4b0f      	ldr	r3, [pc, #60]	; (8013774 <tcp_close+0x4c>)
 8013738:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 801373c:	490e      	ldr	r1, [pc, #56]	; (8013778 <tcp_close+0x50>)
 801373e:	480f      	ldr	r0, [pc, #60]	; (801377c <tcp_close+0x54>)
 8013740:	f00b ff60 	bl	801f604 <iprintf>
 8013744:	f06f 030f 	mvn.w	r3, #15
 8013748:	e00f      	b.n	801376a <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 801374a:	687b      	ldr	r3, [r7, #4]
 801374c:	7d1b      	ldrb	r3, [r3, #20]
 801374e:	2b01      	cmp	r3, #1
 8013750:	d006      	beq.n	8013760 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8013752:	687b      	ldr	r3, [r7, #4]
 8013754:	8b5b      	ldrh	r3, [r3, #26]
 8013756:	f043 0310 	orr.w	r3, r3, #16
 801375a:	b29a      	uxth	r2, r3
 801375c:	687b      	ldr	r3, [r7, #4]
 801375e:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8013760:	2101      	movs	r1, #1
 8013762:	6878      	ldr	r0, [r7, #4]
 8013764:	f7ff fe94 	bl	8013490 <tcp_close_shutdown>
 8013768:	4603      	mov	r3, r0
}
 801376a:	4618      	mov	r0, r3
 801376c:	3708      	adds	r7, #8
 801376e:	46bd      	mov	sp, r7
 8013770:	bd80      	pop	{r7, pc}
 8013772:	bf00      	nop
 8013774:	08024d2c 	.word	0x08024d2c
 8013778:	08024e3c 	.word	0x08024e3c
 801377c:	08024d70 	.word	0x08024d70

08013780 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 8013780:	b580      	push	{r7, lr}
 8013782:	b084      	sub	sp, #16
 8013784:	af00      	add	r7, sp, #0
 8013786:	60f8      	str	r0, [r7, #12]
 8013788:	60b9      	str	r1, [r7, #8]
 801378a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 801378c:	68fb      	ldr	r3, [r7, #12]
 801378e:	2b00      	cmp	r3, #0
 8013790:	d109      	bne.n	80137a6 <tcp_shutdown+0x26>
 8013792:	4b26      	ldr	r3, [pc, #152]	; (801382c <tcp_shutdown+0xac>)
 8013794:	f240 2207 	movw	r2, #519	; 0x207
 8013798:	4925      	ldr	r1, [pc, #148]	; (8013830 <tcp_shutdown+0xb0>)
 801379a:	4826      	ldr	r0, [pc, #152]	; (8013834 <tcp_shutdown+0xb4>)
 801379c:	f00b ff32 	bl	801f604 <iprintf>
 80137a0:	f06f 030f 	mvn.w	r3, #15
 80137a4:	e03d      	b.n	8013822 <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 80137a6:	68fb      	ldr	r3, [r7, #12]
 80137a8:	7d1b      	ldrb	r3, [r3, #20]
 80137aa:	2b01      	cmp	r3, #1
 80137ac:	d102      	bne.n	80137b4 <tcp_shutdown+0x34>
    return ERR_CONN;
 80137ae:	f06f 030a 	mvn.w	r3, #10
 80137b2:	e036      	b.n	8013822 <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 80137b4:	68bb      	ldr	r3, [r7, #8]
 80137b6:	2b00      	cmp	r3, #0
 80137b8:	d01b      	beq.n	80137f2 <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 80137ba:	68fb      	ldr	r3, [r7, #12]
 80137bc:	8b5b      	ldrh	r3, [r3, #26]
 80137be:	f043 0310 	orr.w	r3, r3, #16
 80137c2:	b29a      	uxth	r2, r3
 80137c4:	68fb      	ldr	r3, [r7, #12]
 80137c6:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 80137c8:	687b      	ldr	r3, [r7, #4]
 80137ca:	2b00      	cmp	r3, #0
 80137cc:	d005      	beq.n	80137da <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 80137ce:	2101      	movs	r1, #1
 80137d0:	68f8      	ldr	r0, [r7, #12]
 80137d2:	f7ff fe5d 	bl	8013490 <tcp_close_shutdown>
 80137d6:	4603      	mov	r3, r0
 80137d8:	e023      	b.n	8013822 <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 80137da:	68fb      	ldr	r3, [r7, #12]
 80137dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80137de:	2b00      	cmp	r3, #0
 80137e0:	d007      	beq.n	80137f2 <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 80137e2:	68fb      	ldr	r3, [r7, #12]
 80137e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80137e6:	4618      	mov	r0, r3
 80137e8:	f7ff fae4 	bl	8012db4 <pbuf_free>
      pcb->refused_data = NULL;
 80137ec:	68fb      	ldr	r3, [r7, #12]
 80137ee:	2200      	movs	r2, #0
 80137f0:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 80137f2:	687b      	ldr	r3, [r7, #4]
 80137f4:	2b00      	cmp	r3, #0
 80137f6:	d013      	beq.n	8013820 <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 80137f8:	68fb      	ldr	r3, [r7, #12]
 80137fa:	7d1b      	ldrb	r3, [r3, #20]
 80137fc:	2b04      	cmp	r3, #4
 80137fe:	dc02      	bgt.n	8013806 <tcp_shutdown+0x86>
 8013800:	2b03      	cmp	r3, #3
 8013802:	da02      	bge.n	801380a <tcp_shutdown+0x8a>
 8013804:	e009      	b.n	801381a <tcp_shutdown+0x9a>
 8013806:	2b07      	cmp	r3, #7
 8013808:	d107      	bne.n	801381a <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 801380a:	68bb      	ldr	r3, [r7, #8]
 801380c:	b2db      	uxtb	r3, r3
 801380e:	4619      	mov	r1, r3
 8013810:	68f8      	ldr	r0, [r7, #12]
 8013812:	f7ff fe3d 	bl	8013490 <tcp_close_shutdown>
 8013816:	4603      	mov	r3, r0
 8013818:	e003      	b.n	8013822 <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 801381a:	f06f 030a 	mvn.w	r3, #10
 801381e:	e000      	b.n	8013822 <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 8013820:	2300      	movs	r3, #0
}
 8013822:	4618      	mov	r0, r3
 8013824:	3710      	adds	r7, #16
 8013826:	46bd      	mov	sp, r7
 8013828:	bd80      	pop	{r7, pc}
 801382a:	bf00      	nop
 801382c:	08024d2c 	.word	0x08024d2c
 8013830:	08024e54 	.word	0x08024e54
 8013834:	08024d70 	.word	0x08024d70

08013838 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8013838:	b580      	push	{r7, lr}
 801383a:	b08e      	sub	sp, #56	; 0x38
 801383c:	af04      	add	r7, sp, #16
 801383e:	6078      	str	r0, [r7, #4]
 8013840:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8013842:	687b      	ldr	r3, [r7, #4]
 8013844:	2b00      	cmp	r3, #0
 8013846:	d107      	bne.n	8013858 <tcp_abandon+0x20>
 8013848:	4b52      	ldr	r3, [pc, #328]	; (8013994 <tcp_abandon+0x15c>)
 801384a:	f240 223d 	movw	r2, #573	; 0x23d
 801384e:	4952      	ldr	r1, [pc, #328]	; (8013998 <tcp_abandon+0x160>)
 8013850:	4852      	ldr	r0, [pc, #328]	; (801399c <tcp_abandon+0x164>)
 8013852:	f00b fed7 	bl	801f604 <iprintf>
 8013856:	e099      	b.n	801398c <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8013858:	687b      	ldr	r3, [r7, #4]
 801385a:	7d1b      	ldrb	r3, [r3, #20]
 801385c:	2b01      	cmp	r3, #1
 801385e:	d106      	bne.n	801386e <tcp_abandon+0x36>
 8013860:	4b4c      	ldr	r3, [pc, #304]	; (8013994 <tcp_abandon+0x15c>)
 8013862:	f44f 7210 	mov.w	r2, #576	; 0x240
 8013866:	494e      	ldr	r1, [pc, #312]	; (80139a0 <tcp_abandon+0x168>)
 8013868:	484c      	ldr	r0, [pc, #304]	; (801399c <tcp_abandon+0x164>)
 801386a:	f00b fecb 	bl	801f604 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 801386e:	687b      	ldr	r3, [r7, #4]
 8013870:	7d1b      	ldrb	r3, [r3, #20]
 8013872:	2b0a      	cmp	r3, #10
 8013874:	d107      	bne.n	8013886 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8013876:	6879      	ldr	r1, [r7, #4]
 8013878:	484a      	ldr	r0, [pc, #296]	; (80139a4 <tcp_abandon+0x16c>)
 801387a:	f001 fa39 	bl	8014cf0 <tcp_pcb_remove>
    tcp_free(pcb);
 801387e:	6878      	ldr	r0, [r7, #4]
 8013880:	f7ff fd54 	bl	801332c <tcp_free>
 8013884:	e082      	b.n	801398c <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8013886:	2300      	movs	r3, #0
 8013888:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 801388a:	2300      	movs	r3, #0
 801388c:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 801388e:	687b      	ldr	r3, [r7, #4]
 8013890:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013892:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8013894:	687b      	ldr	r3, [r7, #4]
 8013896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013898:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 801389a:	687b      	ldr	r3, [r7, #4]
 801389c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80138a0:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 80138a2:	687b      	ldr	r3, [r7, #4]
 80138a4:	691b      	ldr	r3, [r3, #16]
 80138a6:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 80138a8:	687b      	ldr	r3, [r7, #4]
 80138aa:	7d1b      	ldrb	r3, [r3, #20]
 80138ac:	2b00      	cmp	r3, #0
 80138ae:	d126      	bne.n	80138fe <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 80138b0:	687b      	ldr	r3, [r7, #4]
 80138b2:	8adb      	ldrh	r3, [r3, #22]
 80138b4:	2b00      	cmp	r3, #0
 80138b6:	d02e      	beq.n	8013916 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80138b8:	4b3b      	ldr	r3, [pc, #236]	; (80139a8 <tcp_abandon+0x170>)
 80138ba:	681b      	ldr	r3, [r3, #0]
 80138bc:	687a      	ldr	r2, [r7, #4]
 80138be:	429a      	cmp	r2, r3
 80138c0:	d105      	bne.n	80138ce <tcp_abandon+0x96>
 80138c2:	4b39      	ldr	r3, [pc, #228]	; (80139a8 <tcp_abandon+0x170>)
 80138c4:	681b      	ldr	r3, [r3, #0]
 80138c6:	68db      	ldr	r3, [r3, #12]
 80138c8:	4a37      	ldr	r2, [pc, #220]	; (80139a8 <tcp_abandon+0x170>)
 80138ca:	6013      	str	r3, [r2, #0]
 80138cc:	e013      	b.n	80138f6 <tcp_abandon+0xbe>
 80138ce:	4b36      	ldr	r3, [pc, #216]	; (80139a8 <tcp_abandon+0x170>)
 80138d0:	681b      	ldr	r3, [r3, #0]
 80138d2:	61fb      	str	r3, [r7, #28]
 80138d4:	e00c      	b.n	80138f0 <tcp_abandon+0xb8>
 80138d6:	69fb      	ldr	r3, [r7, #28]
 80138d8:	68db      	ldr	r3, [r3, #12]
 80138da:	687a      	ldr	r2, [r7, #4]
 80138dc:	429a      	cmp	r2, r3
 80138de:	d104      	bne.n	80138ea <tcp_abandon+0xb2>
 80138e0:	687b      	ldr	r3, [r7, #4]
 80138e2:	68da      	ldr	r2, [r3, #12]
 80138e4:	69fb      	ldr	r3, [r7, #28]
 80138e6:	60da      	str	r2, [r3, #12]
 80138e8:	e005      	b.n	80138f6 <tcp_abandon+0xbe>
 80138ea:	69fb      	ldr	r3, [r7, #28]
 80138ec:	68db      	ldr	r3, [r3, #12]
 80138ee:	61fb      	str	r3, [r7, #28]
 80138f0:	69fb      	ldr	r3, [r7, #28]
 80138f2:	2b00      	cmp	r3, #0
 80138f4:	d1ef      	bne.n	80138d6 <tcp_abandon+0x9e>
 80138f6:	687b      	ldr	r3, [r7, #4]
 80138f8:	2200      	movs	r2, #0
 80138fa:	60da      	str	r2, [r3, #12]
 80138fc:	e00b      	b.n	8013916 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 80138fe:	683b      	ldr	r3, [r7, #0]
 8013900:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8013902:	687b      	ldr	r3, [r7, #4]
 8013904:	8adb      	ldrh	r3, [r3, #22]
 8013906:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8013908:	6879      	ldr	r1, [r7, #4]
 801390a:	4828      	ldr	r0, [pc, #160]	; (80139ac <tcp_abandon+0x174>)
 801390c:	f001 f9f0 	bl	8014cf0 <tcp_pcb_remove>
 8013910:	4b27      	ldr	r3, [pc, #156]	; (80139b0 <tcp_abandon+0x178>)
 8013912:	2201      	movs	r2, #1
 8013914:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8013916:	687b      	ldr	r3, [r7, #4]
 8013918:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801391a:	2b00      	cmp	r3, #0
 801391c:	d004      	beq.n	8013928 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 801391e:	687b      	ldr	r3, [r7, #4]
 8013920:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013922:	4618      	mov	r0, r3
 8013924:	f000 fec4 	bl	80146b0 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8013928:	687b      	ldr	r3, [r7, #4]
 801392a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801392c:	2b00      	cmp	r3, #0
 801392e:	d004      	beq.n	801393a <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8013930:	687b      	ldr	r3, [r7, #4]
 8013932:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013934:	4618      	mov	r0, r3
 8013936:	f000 febb 	bl	80146b0 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 801393a:	687b      	ldr	r3, [r7, #4]
 801393c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801393e:	2b00      	cmp	r3, #0
 8013940:	d004      	beq.n	801394c <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8013942:	687b      	ldr	r3, [r7, #4]
 8013944:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013946:	4618      	mov	r0, r3
 8013948:	f000 feb2 	bl	80146b0 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 801394c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801394e:	2b00      	cmp	r3, #0
 8013950:	d00e      	beq.n	8013970 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8013952:	6879      	ldr	r1, [r7, #4]
 8013954:	687b      	ldr	r3, [r7, #4]
 8013956:	3304      	adds	r3, #4
 8013958:	687a      	ldr	r2, [r7, #4]
 801395a:	8b12      	ldrh	r2, [r2, #24]
 801395c:	9202      	str	r2, [sp, #8]
 801395e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8013960:	9201      	str	r2, [sp, #4]
 8013962:	9300      	str	r3, [sp, #0]
 8013964:	460b      	mov	r3, r1
 8013966:	697a      	ldr	r2, [r7, #20]
 8013968:	69b9      	ldr	r1, [r7, #24]
 801396a:	6878      	ldr	r0, [r7, #4]
 801396c:	f005 fb8c 	bl	8019088 <tcp_rst>
    }
    last_state = pcb->state;
 8013970:	687b      	ldr	r3, [r7, #4]
 8013972:	7d1b      	ldrb	r3, [r3, #20]
 8013974:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8013976:	6878      	ldr	r0, [r7, #4]
 8013978:	f7ff fcd8 	bl	801332c <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 801397c:	693b      	ldr	r3, [r7, #16]
 801397e:	2b00      	cmp	r3, #0
 8013980:	d004      	beq.n	801398c <tcp_abandon+0x154>
 8013982:	693b      	ldr	r3, [r7, #16]
 8013984:	f06f 010c 	mvn.w	r1, #12
 8013988:	68f8      	ldr	r0, [r7, #12]
 801398a:	4798      	blx	r3
  }
}
 801398c:	3728      	adds	r7, #40	; 0x28
 801398e:	46bd      	mov	sp, r7
 8013990:	bd80      	pop	{r7, pc}
 8013992:	bf00      	nop
 8013994:	08024d2c 	.word	0x08024d2c
 8013998:	08024e70 	.word	0x08024e70
 801399c:	08024d70 	.word	0x08024d70
 80139a0:	08024e8c 	.word	0x08024e8c
 80139a4:	24007f4c 	.word	0x24007f4c
 80139a8:	24007f48 	.word	0x24007f48
 80139ac:	24007f3c 	.word	0x24007f3c
 80139b0:	24007f38 	.word	0x24007f38

080139b4 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 80139b4:	b580      	push	{r7, lr}
 80139b6:	b082      	sub	sp, #8
 80139b8:	af00      	add	r7, sp, #0
 80139ba:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 80139bc:	2101      	movs	r1, #1
 80139be:	6878      	ldr	r0, [r7, #4]
 80139c0:	f7ff ff3a 	bl	8013838 <tcp_abandon>
}
 80139c4:	bf00      	nop
 80139c6:	3708      	adds	r7, #8
 80139c8:	46bd      	mov	sp, r7
 80139ca:	bd80      	pop	{r7, pc}

080139cc <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80139cc:	b580      	push	{r7, lr}
 80139ce:	b088      	sub	sp, #32
 80139d0:	af00      	add	r7, sp, #0
 80139d2:	60f8      	str	r0, [r7, #12]
 80139d4:	60b9      	str	r1, [r7, #8]
 80139d6:	4613      	mov	r3, r2
 80139d8:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 80139da:	2304      	movs	r3, #4
 80139dc:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80139de:	68bb      	ldr	r3, [r7, #8]
 80139e0:	2b00      	cmp	r3, #0
 80139e2:	d101      	bne.n	80139e8 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 80139e4:	4b3e      	ldr	r3, [pc, #248]	; (8013ae0 <tcp_bind+0x114>)
 80139e6:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 80139e8:	68fb      	ldr	r3, [r7, #12]
 80139ea:	2b00      	cmp	r3, #0
 80139ec:	d109      	bne.n	8013a02 <tcp_bind+0x36>
 80139ee:	4b3d      	ldr	r3, [pc, #244]	; (8013ae4 <tcp_bind+0x118>)
 80139f0:	f240 22a9 	movw	r2, #681	; 0x2a9
 80139f4:	493c      	ldr	r1, [pc, #240]	; (8013ae8 <tcp_bind+0x11c>)
 80139f6:	483d      	ldr	r0, [pc, #244]	; (8013aec <tcp_bind+0x120>)
 80139f8:	f00b fe04 	bl	801f604 <iprintf>
 80139fc:	f06f 030f 	mvn.w	r3, #15
 8013a00:	e06a      	b.n	8013ad8 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8013a02:	68fb      	ldr	r3, [r7, #12]
 8013a04:	7d1b      	ldrb	r3, [r3, #20]
 8013a06:	2b00      	cmp	r3, #0
 8013a08:	d009      	beq.n	8013a1e <tcp_bind+0x52>
 8013a0a:	4b36      	ldr	r3, [pc, #216]	; (8013ae4 <tcp_bind+0x118>)
 8013a0c:	f240 22ab 	movw	r2, #683	; 0x2ab
 8013a10:	4937      	ldr	r1, [pc, #220]	; (8013af0 <tcp_bind+0x124>)
 8013a12:	4836      	ldr	r0, [pc, #216]	; (8013aec <tcp_bind+0x120>)
 8013a14:	f00b fdf6 	bl	801f604 <iprintf>
 8013a18:	f06f 0305 	mvn.w	r3, #5
 8013a1c:	e05c      	b.n	8013ad8 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 8013a1e:	88fb      	ldrh	r3, [r7, #6]
 8013a20:	2b00      	cmp	r3, #0
 8013a22:	d109      	bne.n	8013a38 <tcp_bind+0x6c>
    port = tcp_new_port();
 8013a24:	f000 f9de 	bl	8013de4 <tcp_new_port>
 8013a28:	4603      	mov	r3, r0
 8013a2a:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8013a2c:	88fb      	ldrh	r3, [r7, #6]
 8013a2e:	2b00      	cmp	r3, #0
 8013a30:	d135      	bne.n	8013a9e <tcp_bind+0xd2>
      return ERR_BUF;
 8013a32:	f06f 0301 	mvn.w	r3, #1
 8013a36:	e04f      	b.n	8013ad8 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 8013a38:	2300      	movs	r3, #0
 8013a3a:	61fb      	str	r3, [r7, #28]
 8013a3c:	e02b      	b.n	8013a96 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8013a3e:	4a2d      	ldr	r2, [pc, #180]	; (8013af4 <tcp_bind+0x128>)
 8013a40:	69fb      	ldr	r3, [r7, #28]
 8013a42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013a46:	681b      	ldr	r3, [r3, #0]
 8013a48:	61bb      	str	r3, [r7, #24]
 8013a4a:	e01e      	b.n	8013a8a <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 8013a4c:	69bb      	ldr	r3, [r7, #24]
 8013a4e:	8adb      	ldrh	r3, [r3, #22]
 8013a50:	88fa      	ldrh	r2, [r7, #6]
 8013a52:	429a      	cmp	r2, r3
 8013a54:	d116      	bne.n	8013a84 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 8013a56:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8013a58:	2b00      	cmp	r3, #0
 8013a5a:	d010      	beq.n	8013a7e <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 8013a5c:	69bb      	ldr	r3, [r7, #24]
 8013a5e:	681b      	ldr	r3, [r3, #0]
 8013a60:	2b00      	cmp	r3, #0
 8013a62:	d00c      	beq.n	8013a7e <tcp_bind+0xb2>
 8013a64:	68bb      	ldr	r3, [r7, #8]
 8013a66:	2b00      	cmp	r3, #0
 8013a68:	d009      	beq.n	8013a7e <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 8013a6a:	68bb      	ldr	r3, [r7, #8]
 8013a6c:	681b      	ldr	r3, [r3, #0]
 8013a6e:	2b00      	cmp	r3, #0
 8013a70:	d005      	beq.n	8013a7e <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 8013a72:	69bb      	ldr	r3, [r7, #24]
 8013a74:	681a      	ldr	r2, [r3, #0]
 8013a76:	68bb      	ldr	r3, [r7, #8]
 8013a78:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8013a7a:	429a      	cmp	r2, r3
 8013a7c:	d102      	bne.n	8013a84 <tcp_bind+0xb8>
              return ERR_USE;
 8013a7e:	f06f 0307 	mvn.w	r3, #7
 8013a82:	e029      	b.n	8013ad8 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8013a84:	69bb      	ldr	r3, [r7, #24]
 8013a86:	68db      	ldr	r3, [r3, #12]
 8013a88:	61bb      	str	r3, [r7, #24]
 8013a8a:	69bb      	ldr	r3, [r7, #24]
 8013a8c:	2b00      	cmp	r3, #0
 8013a8e:	d1dd      	bne.n	8013a4c <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 8013a90:	69fb      	ldr	r3, [r7, #28]
 8013a92:	3301      	adds	r3, #1
 8013a94:	61fb      	str	r3, [r7, #28]
 8013a96:	69fa      	ldr	r2, [r7, #28]
 8013a98:	697b      	ldr	r3, [r7, #20]
 8013a9a:	429a      	cmp	r2, r3
 8013a9c:	dbcf      	blt.n	8013a3e <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 8013a9e:	68bb      	ldr	r3, [r7, #8]
 8013aa0:	2b00      	cmp	r3, #0
 8013aa2:	d00c      	beq.n	8013abe <tcp_bind+0xf2>
 8013aa4:	68bb      	ldr	r3, [r7, #8]
 8013aa6:	681b      	ldr	r3, [r3, #0]
 8013aa8:	2b00      	cmp	r3, #0
 8013aaa:	d008      	beq.n	8013abe <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 8013aac:	68bb      	ldr	r3, [r7, #8]
 8013aae:	2b00      	cmp	r3, #0
 8013ab0:	d002      	beq.n	8013ab8 <tcp_bind+0xec>
 8013ab2:	68bb      	ldr	r3, [r7, #8]
 8013ab4:	681b      	ldr	r3, [r3, #0]
 8013ab6:	e000      	b.n	8013aba <tcp_bind+0xee>
 8013ab8:	2300      	movs	r3, #0
 8013aba:	68fa      	ldr	r2, [r7, #12]
 8013abc:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 8013abe:	68fb      	ldr	r3, [r7, #12]
 8013ac0:	88fa      	ldrh	r2, [r7, #6]
 8013ac2:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8013ac4:	4b0c      	ldr	r3, [pc, #48]	; (8013af8 <tcp_bind+0x12c>)
 8013ac6:	681a      	ldr	r2, [r3, #0]
 8013ac8:	68fb      	ldr	r3, [r7, #12]
 8013aca:	60da      	str	r2, [r3, #12]
 8013acc:	4a0a      	ldr	r2, [pc, #40]	; (8013af8 <tcp_bind+0x12c>)
 8013ace:	68fb      	ldr	r3, [r7, #12]
 8013ad0:	6013      	str	r3, [r2, #0]
 8013ad2:	f005 fc9b 	bl	801940c <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 8013ad6:	2300      	movs	r3, #0
}
 8013ad8:	4618      	mov	r0, r3
 8013ada:	3720      	adds	r7, #32
 8013adc:	46bd      	mov	sp, r7
 8013ade:	bd80      	pop	{r7, pc}
 8013ae0:	0802718c 	.word	0x0802718c
 8013ae4:	08024d2c 	.word	0x08024d2c
 8013ae8:	08024ec0 	.word	0x08024ec0
 8013aec:	08024d70 	.word	0x08024d70
 8013af0:	08024ed8 	.word	0x08024ed8
 8013af4:	08027154 	.word	0x08027154
 8013af8:	24007f48 	.word	0x24007f48

08013afc <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8013afc:	b580      	push	{r7, lr}
 8013afe:	b084      	sub	sp, #16
 8013b00:	af00      	add	r7, sp, #0
 8013b02:	60f8      	str	r0, [r7, #12]
 8013b04:	60b9      	str	r1, [r7, #8]
 8013b06:	4613      	mov	r3, r2
 8013b08:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 8013b0a:	68bb      	ldr	r3, [r7, #8]
 8013b0c:	2b00      	cmp	r3, #0
 8013b0e:	d106      	bne.n	8013b1e <tcp_accept_null+0x22>
 8013b10:	4b07      	ldr	r3, [pc, #28]	; (8013b30 <tcp_accept_null+0x34>)
 8013b12:	f240 320f 	movw	r2, #783	; 0x30f
 8013b16:	4907      	ldr	r1, [pc, #28]	; (8013b34 <tcp_accept_null+0x38>)
 8013b18:	4807      	ldr	r0, [pc, #28]	; (8013b38 <tcp_accept_null+0x3c>)
 8013b1a:	f00b fd73 	bl	801f604 <iprintf>

  tcp_abort(pcb);
 8013b1e:	68b8      	ldr	r0, [r7, #8]
 8013b20:	f7ff ff48 	bl	80139b4 <tcp_abort>

  return ERR_ABRT;
 8013b24:	f06f 030c 	mvn.w	r3, #12
}
 8013b28:	4618      	mov	r0, r3
 8013b2a:	3710      	adds	r7, #16
 8013b2c:	46bd      	mov	sp, r7
 8013b2e:	bd80      	pop	{r7, pc}
 8013b30:	08024d2c 	.word	0x08024d2c
 8013b34:	08024f00 	.word	0x08024f00
 8013b38:	08024d70 	.word	0x08024d70

08013b3c <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 8013b3c:	b580      	push	{r7, lr}
 8013b3e:	b088      	sub	sp, #32
 8013b40:	af00      	add	r7, sp, #0
 8013b42:	60f8      	str	r0, [r7, #12]
 8013b44:	460b      	mov	r3, r1
 8013b46:	607a      	str	r2, [r7, #4]
 8013b48:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 8013b4a:	2300      	movs	r3, #0
 8013b4c:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 8013b4e:	68fb      	ldr	r3, [r7, #12]
 8013b50:	2b00      	cmp	r3, #0
 8013b52:	d109      	bne.n	8013b68 <tcp_listen_with_backlog_and_err+0x2c>
 8013b54:	4b47      	ldr	r3, [pc, #284]	; (8013c74 <tcp_listen_with_backlog_and_err+0x138>)
 8013b56:	f240 3259 	movw	r2, #857	; 0x359
 8013b5a:	4947      	ldr	r1, [pc, #284]	; (8013c78 <tcp_listen_with_backlog_and_err+0x13c>)
 8013b5c:	4847      	ldr	r0, [pc, #284]	; (8013c7c <tcp_listen_with_backlog_and_err+0x140>)
 8013b5e:	f00b fd51 	bl	801f604 <iprintf>
 8013b62:	23f0      	movs	r3, #240	; 0xf0
 8013b64:	76fb      	strb	r3, [r7, #27]
 8013b66:	e079      	b.n	8013c5c <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8013b68:	68fb      	ldr	r3, [r7, #12]
 8013b6a:	7d1b      	ldrb	r3, [r3, #20]
 8013b6c:	2b00      	cmp	r3, #0
 8013b6e:	d009      	beq.n	8013b84 <tcp_listen_with_backlog_and_err+0x48>
 8013b70:	4b40      	ldr	r3, [pc, #256]	; (8013c74 <tcp_listen_with_backlog_and_err+0x138>)
 8013b72:	f240 325a 	movw	r2, #858	; 0x35a
 8013b76:	4942      	ldr	r1, [pc, #264]	; (8013c80 <tcp_listen_with_backlog_and_err+0x144>)
 8013b78:	4840      	ldr	r0, [pc, #256]	; (8013c7c <tcp_listen_with_backlog_and_err+0x140>)
 8013b7a:	f00b fd43 	bl	801f604 <iprintf>
 8013b7e:	23f1      	movs	r3, #241	; 0xf1
 8013b80:	76fb      	strb	r3, [r7, #27]
 8013b82:	e06b      	b.n	8013c5c <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 8013b84:	68fb      	ldr	r3, [r7, #12]
 8013b86:	7d1b      	ldrb	r3, [r3, #20]
 8013b88:	2b01      	cmp	r3, #1
 8013b8a:	d104      	bne.n	8013b96 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 8013b8c:	68fb      	ldr	r3, [r7, #12]
 8013b8e:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 8013b90:	23f7      	movs	r3, #247	; 0xf7
 8013b92:	76fb      	strb	r3, [r7, #27]
    goto done;
 8013b94:	e062      	b.n	8013c5c <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8013b96:	2002      	movs	r0, #2
 8013b98:	f7fe f9b4 	bl	8011f04 <memp_malloc>
 8013b9c:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 8013b9e:	69fb      	ldr	r3, [r7, #28]
 8013ba0:	2b00      	cmp	r3, #0
 8013ba2:	d102      	bne.n	8013baa <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 8013ba4:	23ff      	movs	r3, #255	; 0xff
 8013ba6:	76fb      	strb	r3, [r7, #27]
    goto done;
 8013ba8:	e058      	b.n	8013c5c <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 8013baa:	68fb      	ldr	r3, [r7, #12]
 8013bac:	691a      	ldr	r2, [r3, #16]
 8013bae:	69fb      	ldr	r3, [r7, #28]
 8013bb0:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 8013bb2:	68fb      	ldr	r3, [r7, #12]
 8013bb4:	8ada      	ldrh	r2, [r3, #22]
 8013bb6:	69fb      	ldr	r3, [r7, #28]
 8013bb8:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 8013bba:	69fb      	ldr	r3, [r7, #28]
 8013bbc:	2201      	movs	r2, #1
 8013bbe:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 8013bc0:	68fb      	ldr	r3, [r7, #12]
 8013bc2:	7d5a      	ldrb	r2, [r3, #21]
 8013bc4:	69fb      	ldr	r3, [r7, #28]
 8013bc6:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 8013bc8:	68fb      	ldr	r3, [r7, #12]
 8013bca:	7a5a      	ldrb	r2, [r3, #9]
 8013bcc:	69fb      	ldr	r3, [r7, #28]
 8013bce:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 8013bd0:	69fb      	ldr	r3, [r7, #28]
 8013bd2:	2200      	movs	r2, #0
 8013bd4:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 8013bd6:	68fb      	ldr	r3, [r7, #12]
 8013bd8:	7ada      	ldrb	r2, [r3, #11]
 8013bda:	69fb      	ldr	r3, [r7, #28]
 8013bdc:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 8013bde:	68fb      	ldr	r3, [r7, #12]
 8013be0:	7a9a      	ldrb	r2, [r3, #10]
 8013be2:	69fb      	ldr	r3, [r7, #28]
 8013be4:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8013be6:	68fb      	ldr	r3, [r7, #12]
 8013be8:	681a      	ldr	r2, [r3, #0]
 8013bea:	69fb      	ldr	r3, [r7, #28]
 8013bec:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 8013bee:	68fb      	ldr	r3, [r7, #12]
 8013bf0:	8adb      	ldrh	r3, [r3, #22]
 8013bf2:	2b00      	cmp	r3, #0
 8013bf4:	d021      	beq.n	8013c3a <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8013bf6:	4b23      	ldr	r3, [pc, #140]	; (8013c84 <tcp_listen_with_backlog_and_err+0x148>)
 8013bf8:	681b      	ldr	r3, [r3, #0]
 8013bfa:	68fa      	ldr	r2, [r7, #12]
 8013bfc:	429a      	cmp	r2, r3
 8013bfe:	d105      	bne.n	8013c0c <tcp_listen_with_backlog_and_err+0xd0>
 8013c00:	4b20      	ldr	r3, [pc, #128]	; (8013c84 <tcp_listen_with_backlog_and_err+0x148>)
 8013c02:	681b      	ldr	r3, [r3, #0]
 8013c04:	68db      	ldr	r3, [r3, #12]
 8013c06:	4a1f      	ldr	r2, [pc, #124]	; (8013c84 <tcp_listen_with_backlog_and_err+0x148>)
 8013c08:	6013      	str	r3, [r2, #0]
 8013c0a:	e013      	b.n	8013c34 <tcp_listen_with_backlog_and_err+0xf8>
 8013c0c:	4b1d      	ldr	r3, [pc, #116]	; (8013c84 <tcp_listen_with_backlog_and_err+0x148>)
 8013c0e:	681b      	ldr	r3, [r3, #0]
 8013c10:	617b      	str	r3, [r7, #20]
 8013c12:	e00c      	b.n	8013c2e <tcp_listen_with_backlog_and_err+0xf2>
 8013c14:	697b      	ldr	r3, [r7, #20]
 8013c16:	68db      	ldr	r3, [r3, #12]
 8013c18:	68fa      	ldr	r2, [r7, #12]
 8013c1a:	429a      	cmp	r2, r3
 8013c1c:	d104      	bne.n	8013c28 <tcp_listen_with_backlog_and_err+0xec>
 8013c1e:	68fb      	ldr	r3, [r7, #12]
 8013c20:	68da      	ldr	r2, [r3, #12]
 8013c22:	697b      	ldr	r3, [r7, #20]
 8013c24:	60da      	str	r2, [r3, #12]
 8013c26:	e005      	b.n	8013c34 <tcp_listen_with_backlog_and_err+0xf8>
 8013c28:	697b      	ldr	r3, [r7, #20]
 8013c2a:	68db      	ldr	r3, [r3, #12]
 8013c2c:	617b      	str	r3, [r7, #20]
 8013c2e:	697b      	ldr	r3, [r7, #20]
 8013c30:	2b00      	cmp	r3, #0
 8013c32:	d1ef      	bne.n	8013c14 <tcp_listen_with_backlog_and_err+0xd8>
 8013c34:	68fb      	ldr	r3, [r7, #12]
 8013c36:	2200      	movs	r2, #0
 8013c38:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 8013c3a:	68f8      	ldr	r0, [r7, #12]
 8013c3c:	f7ff fb76 	bl	801332c <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 8013c40:	69fb      	ldr	r3, [r7, #28]
 8013c42:	4a11      	ldr	r2, [pc, #68]	; (8013c88 <tcp_listen_with_backlog_and_err+0x14c>)
 8013c44:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8013c46:	4b11      	ldr	r3, [pc, #68]	; (8013c8c <tcp_listen_with_backlog_and_err+0x150>)
 8013c48:	681a      	ldr	r2, [r3, #0]
 8013c4a:	69fb      	ldr	r3, [r7, #28]
 8013c4c:	60da      	str	r2, [r3, #12]
 8013c4e:	4a0f      	ldr	r2, [pc, #60]	; (8013c8c <tcp_listen_with_backlog_and_err+0x150>)
 8013c50:	69fb      	ldr	r3, [r7, #28]
 8013c52:	6013      	str	r3, [r2, #0]
 8013c54:	f005 fbda 	bl	801940c <tcp_timer_needed>
  res = ERR_OK;
 8013c58:	2300      	movs	r3, #0
 8013c5a:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 8013c5c:	687b      	ldr	r3, [r7, #4]
 8013c5e:	2b00      	cmp	r3, #0
 8013c60:	d002      	beq.n	8013c68 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 8013c62:	687b      	ldr	r3, [r7, #4]
 8013c64:	7efa      	ldrb	r2, [r7, #27]
 8013c66:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 8013c68:	69fb      	ldr	r3, [r7, #28]
}
 8013c6a:	4618      	mov	r0, r3
 8013c6c:	3720      	adds	r7, #32
 8013c6e:	46bd      	mov	sp, r7
 8013c70:	bd80      	pop	{r7, pc}
 8013c72:	bf00      	nop
 8013c74:	08024d2c 	.word	0x08024d2c
 8013c78:	08024f20 	.word	0x08024f20
 8013c7c:	08024d70 	.word	0x08024d70
 8013c80:	08024f50 	.word	0x08024f50
 8013c84:	24007f48 	.word	0x24007f48
 8013c88:	08013afd 	.word	0x08013afd
 8013c8c:	24007f44 	.word	0x24007f44

08013c90 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8013c90:	b580      	push	{r7, lr}
 8013c92:	b084      	sub	sp, #16
 8013c94:	af00      	add	r7, sp, #0
 8013c96:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8013c98:	687b      	ldr	r3, [r7, #4]
 8013c9a:	2b00      	cmp	r3, #0
 8013c9c:	d106      	bne.n	8013cac <tcp_update_rcv_ann_wnd+0x1c>
 8013c9e:	4b25      	ldr	r3, [pc, #148]	; (8013d34 <tcp_update_rcv_ann_wnd+0xa4>)
 8013ca0:	f240 32a6 	movw	r2, #934	; 0x3a6
 8013ca4:	4924      	ldr	r1, [pc, #144]	; (8013d38 <tcp_update_rcv_ann_wnd+0xa8>)
 8013ca6:	4825      	ldr	r0, [pc, #148]	; (8013d3c <tcp_update_rcv_ann_wnd+0xac>)
 8013ca8:	f00b fcac 	bl	801f604 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8013cac:	687b      	ldr	r3, [r7, #4]
 8013cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013cb0:	687a      	ldr	r2, [r7, #4]
 8013cb2:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8013cb4:	4413      	add	r3, r2
 8013cb6:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8013cb8:	687b      	ldr	r3, [r7, #4]
 8013cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013cbc:	687a      	ldr	r2, [r7, #4]
 8013cbe:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8013cc0:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8013cc4:	bf28      	it	cs
 8013cc6:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8013cca:	b292      	uxth	r2, r2
 8013ccc:	4413      	add	r3, r2
 8013cce:	68fa      	ldr	r2, [r7, #12]
 8013cd0:	1ad3      	subs	r3, r2, r3
 8013cd2:	2b00      	cmp	r3, #0
 8013cd4:	db08      	blt.n	8013ce8 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8013cd6:	687b      	ldr	r3, [r7, #4]
 8013cd8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8013cda:	687b      	ldr	r3, [r7, #4]
 8013cdc:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8013cde:	687b      	ldr	r3, [r7, #4]
 8013ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013ce2:	68fa      	ldr	r2, [r7, #12]
 8013ce4:	1ad3      	subs	r3, r2, r3
 8013ce6:	e020      	b.n	8013d2a <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8013ce8:	687b      	ldr	r3, [r7, #4]
 8013cea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013cec:	687b      	ldr	r3, [r7, #4]
 8013cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013cf0:	1ad3      	subs	r3, r2, r3
 8013cf2:	2b00      	cmp	r3, #0
 8013cf4:	dd03      	ble.n	8013cfe <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8013cf6:	687b      	ldr	r3, [r7, #4]
 8013cf8:	2200      	movs	r2, #0
 8013cfa:	855a      	strh	r2, [r3, #42]	; 0x2a
 8013cfc:	e014      	b.n	8013d28 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8013cfe:	687b      	ldr	r3, [r7, #4]
 8013d00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013d02:	687b      	ldr	r3, [r7, #4]
 8013d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013d06:	1ad3      	subs	r3, r2, r3
 8013d08:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8013d0a:	68bb      	ldr	r3, [r7, #8]
 8013d0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013d10:	d306      	bcc.n	8013d20 <tcp_update_rcv_ann_wnd+0x90>
 8013d12:	4b08      	ldr	r3, [pc, #32]	; (8013d34 <tcp_update_rcv_ann_wnd+0xa4>)
 8013d14:	f240 32b6 	movw	r2, #950	; 0x3b6
 8013d18:	4909      	ldr	r1, [pc, #36]	; (8013d40 <tcp_update_rcv_ann_wnd+0xb0>)
 8013d1a:	4808      	ldr	r0, [pc, #32]	; (8013d3c <tcp_update_rcv_ann_wnd+0xac>)
 8013d1c:	f00b fc72 	bl	801f604 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8013d20:	68bb      	ldr	r3, [r7, #8]
 8013d22:	b29a      	uxth	r2, r3
 8013d24:	687b      	ldr	r3, [r7, #4]
 8013d26:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8013d28:	2300      	movs	r3, #0
  }
}
 8013d2a:	4618      	mov	r0, r3
 8013d2c:	3710      	adds	r7, #16
 8013d2e:	46bd      	mov	sp, r7
 8013d30:	bd80      	pop	{r7, pc}
 8013d32:	bf00      	nop
 8013d34:	08024d2c 	.word	0x08024d2c
 8013d38:	08024f88 	.word	0x08024f88
 8013d3c:	08024d70 	.word	0x08024d70
 8013d40:	08024fac 	.word	0x08024fac

08013d44 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8013d44:	b580      	push	{r7, lr}
 8013d46:	b084      	sub	sp, #16
 8013d48:	af00      	add	r7, sp, #0
 8013d4a:	6078      	str	r0, [r7, #4]
 8013d4c:	460b      	mov	r3, r1
 8013d4e:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8013d50:	687b      	ldr	r3, [r7, #4]
 8013d52:	2b00      	cmp	r3, #0
 8013d54:	d107      	bne.n	8013d66 <tcp_recved+0x22>
 8013d56:	4b1f      	ldr	r3, [pc, #124]	; (8013dd4 <tcp_recved+0x90>)
 8013d58:	f240 32cf 	movw	r2, #975	; 0x3cf
 8013d5c:	491e      	ldr	r1, [pc, #120]	; (8013dd8 <tcp_recved+0x94>)
 8013d5e:	481f      	ldr	r0, [pc, #124]	; (8013ddc <tcp_recved+0x98>)
 8013d60:	f00b fc50 	bl	801f604 <iprintf>
 8013d64:	e032      	b.n	8013dcc <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8013d66:	687b      	ldr	r3, [r7, #4]
 8013d68:	7d1b      	ldrb	r3, [r3, #20]
 8013d6a:	2b01      	cmp	r3, #1
 8013d6c:	d106      	bne.n	8013d7c <tcp_recved+0x38>
 8013d6e:	4b19      	ldr	r3, [pc, #100]	; (8013dd4 <tcp_recved+0x90>)
 8013d70:	f240 32d2 	movw	r2, #978	; 0x3d2
 8013d74:	491a      	ldr	r1, [pc, #104]	; (8013de0 <tcp_recved+0x9c>)
 8013d76:	4819      	ldr	r0, [pc, #100]	; (8013ddc <tcp_recved+0x98>)
 8013d78:	f00b fc44 	bl	801f604 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8013d7c:	687b      	ldr	r3, [r7, #4]
 8013d7e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8013d80:	887b      	ldrh	r3, [r7, #2]
 8013d82:	4413      	add	r3, r2
 8013d84:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8013d86:	89fb      	ldrh	r3, [r7, #14]
 8013d88:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8013d8c:	d804      	bhi.n	8013d98 <tcp_recved+0x54>
 8013d8e:	687b      	ldr	r3, [r7, #4]
 8013d90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013d92:	89fa      	ldrh	r2, [r7, #14]
 8013d94:	429a      	cmp	r2, r3
 8013d96:	d204      	bcs.n	8013da2 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8013d98:	687b      	ldr	r3, [r7, #4]
 8013d9a:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8013d9e:	851a      	strh	r2, [r3, #40]	; 0x28
 8013da0:	e002      	b.n	8013da8 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8013da2:	687b      	ldr	r3, [r7, #4]
 8013da4:	89fa      	ldrh	r2, [r7, #14]
 8013da6:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8013da8:	6878      	ldr	r0, [r7, #4]
 8013daa:	f7ff ff71 	bl	8013c90 <tcp_update_rcv_ann_wnd>
 8013dae:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8013db0:	68bb      	ldr	r3, [r7, #8]
 8013db2:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8013db6:	d309      	bcc.n	8013dcc <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8013db8:	687b      	ldr	r3, [r7, #4]
 8013dba:	8b5b      	ldrh	r3, [r3, #26]
 8013dbc:	f043 0302 	orr.w	r3, r3, #2
 8013dc0:	b29a      	uxth	r2, r3
 8013dc2:	687b      	ldr	r3, [r7, #4]
 8013dc4:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8013dc6:	6878      	ldr	r0, [r7, #4]
 8013dc8:	f004 fbaa 	bl	8018520 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8013dcc:	3710      	adds	r7, #16
 8013dce:	46bd      	mov	sp, r7
 8013dd0:	bd80      	pop	{r7, pc}
 8013dd2:	bf00      	nop
 8013dd4:	08024d2c 	.word	0x08024d2c
 8013dd8:	08024fc8 	.word	0x08024fc8
 8013ddc:	08024d70 	.word	0x08024d70
 8013de0:	08024fe0 	.word	0x08024fe0

08013de4 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8013de4:	b480      	push	{r7}
 8013de6:	b083      	sub	sp, #12
 8013de8:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 8013dea:	2300      	movs	r3, #0
 8013dec:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 8013dee:	4b1e      	ldr	r3, [pc, #120]	; (8013e68 <tcp_new_port+0x84>)
 8013df0:	881b      	ldrh	r3, [r3, #0]
 8013df2:	3301      	adds	r3, #1
 8013df4:	b29a      	uxth	r2, r3
 8013df6:	4b1c      	ldr	r3, [pc, #112]	; (8013e68 <tcp_new_port+0x84>)
 8013df8:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8013dfa:	4b1b      	ldr	r3, [pc, #108]	; (8013e68 <tcp_new_port+0x84>)
 8013dfc:	881b      	ldrh	r3, [r3, #0]
 8013dfe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013e02:	4293      	cmp	r3, r2
 8013e04:	d103      	bne.n	8013e0e <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8013e06:	4b18      	ldr	r3, [pc, #96]	; (8013e68 <tcp_new_port+0x84>)
 8013e08:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8013e0c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8013e0e:	2300      	movs	r3, #0
 8013e10:	71fb      	strb	r3, [r7, #7]
 8013e12:	e01e      	b.n	8013e52 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8013e14:	79fb      	ldrb	r3, [r7, #7]
 8013e16:	4a15      	ldr	r2, [pc, #84]	; (8013e6c <tcp_new_port+0x88>)
 8013e18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013e1c:	681b      	ldr	r3, [r3, #0]
 8013e1e:	603b      	str	r3, [r7, #0]
 8013e20:	e011      	b.n	8013e46 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 8013e22:	683b      	ldr	r3, [r7, #0]
 8013e24:	8ada      	ldrh	r2, [r3, #22]
 8013e26:	4b10      	ldr	r3, [pc, #64]	; (8013e68 <tcp_new_port+0x84>)
 8013e28:	881b      	ldrh	r3, [r3, #0]
 8013e2a:	429a      	cmp	r2, r3
 8013e2c:	d108      	bne.n	8013e40 <tcp_new_port+0x5c>
        n++;
 8013e2e:	88bb      	ldrh	r3, [r7, #4]
 8013e30:	3301      	adds	r3, #1
 8013e32:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8013e34:	88bb      	ldrh	r3, [r7, #4]
 8013e36:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8013e3a:	d3d8      	bcc.n	8013dee <tcp_new_port+0xa>
          return 0;
 8013e3c:	2300      	movs	r3, #0
 8013e3e:	e00d      	b.n	8013e5c <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8013e40:	683b      	ldr	r3, [r7, #0]
 8013e42:	68db      	ldr	r3, [r3, #12]
 8013e44:	603b      	str	r3, [r7, #0]
 8013e46:	683b      	ldr	r3, [r7, #0]
 8013e48:	2b00      	cmp	r3, #0
 8013e4a:	d1ea      	bne.n	8013e22 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8013e4c:	79fb      	ldrb	r3, [r7, #7]
 8013e4e:	3301      	adds	r3, #1
 8013e50:	71fb      	strb	r3, [r7, #7]
 8013e52:	79fb      	ldrb	r3, [r7, #7]
 8013e54:	2b03      	cmp	r3, #3
 8013e56:	d9dd      	bls.n	8013e14 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8013e58:	4b03      	ldr	r3, [pc, #12]	; (8013e68 <tcp_new_port+0x84>)
 8013e5a:	881b      	ldrh	r3, [r3, #0]
}
 8013e5c:	4618      	mov	r0, r3
 8013e5e:	370c      	adds	r7, #12
 8013e60:	46bd      	mov	sp, r7
 8013e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e66:	4770      	bx	lr
 8013e68:	240002f4 	.word	0x240002f4
 8013e6c:	08027154 	.word	0x08027154

08013e70 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8013e70:	b5b0      	push	{r4, r5, r7, lr}
 8013e72:	b090      	sub	sp, #64	; 0x40
 8013e74:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8013e76:	2300      	movs	r3, #0
 8013e78:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8013e7c:	4b94      	ldr	r3, [pc, #592]	; (80140d0 <tcp_slowtmr+0x260>)
 8013e7e:	681b      	ldr	r3, [r3, #0]
 8013e80:	3301      	adds	r3, #1
 8013e82:	4a93      	ldr	r2, [pc, #588]	; (80140d0 <tcp_slowtmr+0x260>)
 8013e84:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8013e86:	4b93      	ldr	r3, [pc, #588]	; (80140d4 <tcp_slowtmr+0x264>)
 8013e88:	781b      	ldrb	r3, [r3, #0]
 8013e8a:	3301      	adds	r3, #1
 8013e8c:	b2da      	uxtb	r2, r3
 8013e8e:	4b91      	ldr	r3, [pc, #580]	; (80140d4 <tcp_slowtmr+0x264>)
 8013e90:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8013e92:	2300      	movs	r3, #0
 8013e94:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8013e96:	4b90      	ldr	r3, [pc, #576]	; (80140d8 <tcp_slowtmr+0x268>)
 8013e98:	681b      	ldr	r3, [r3, #0]
 8013e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8013e9c:	e29d      	b.n	80143da <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8013e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ea0:	7d1b      	ldrb	r3, [r3, #20]
 8013ea2:	2b00      	cmp	r3, #0
 8013ea4:	d106      	bne.n	8013eb4 <tcp_slowtmr+0x44>
 8013ea6:	4b8d      	ldr	r3, [pc, #564]	; (80140dc <tcp_slowtmr+0x26c>)
 8013ea8:	f240 42be 	movw	r2, #1214	; 0x4be
 8013eac:	498c      	ldr	r1, [pc, #560]	; (80140e0 <tcp_slowtmr+0x270>)
 8013eae:	488d      	ldr	r0, [pc, #564]	; (80140e4 <tcp_slowtmr+0x274>)
 8013eb0:	f00b fba8 	bl	801f604 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8013eb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013eb6:	7d1b      	ldrb	r3, [r3, #20]
 8013eb8:	2b01      	cmp	r3, #1
 8013eba:	d106      	bne.n	8013eca <tcp_slowtmr+0x5a>
 8013ebc:	4b87      	ldr	r3, [pc, #540]	; (80140dc <tcp_slowtmr+0x26c>)
 8013ebe:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8013ec2:	4989      	ldr	r1, [pc, #548]	; (80140e8 <tcp_slowtmr+0x278>)
 8013ec4:	4887      	ldr	r0, [pc, #540]	; (80140e4 <tcp_slowtmr+0x274>)
 8013ec6:	f00b fb9d 	bl	801f604 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8013eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ecc:	7d1b      	ldrb	r3, [r3, #20]
 8013ece:	2b0a      	cmp	r3, #10
 8013ed0:	d106      	bne.n	8013ee0 <tcp_slowtmr+0x70>
 8013ed2:	4b82      	ldr	r3, [pc, #520]	; (80140dc <tcp_slowtmr+0x26c>)
 8013ed4:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8013ed8:	4984      	ldr	r1, [pc, #528]	; (80140ec <tcp_slowtmr+0x27c>)
 8013eda:	4882      	ldr	r0, [pc, #520]	; (80140e4 <tcp_slowtmr+0x274>)
 8013edc:	f00b fb92 	bl	801f604 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8013ee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ee2:	7f9a      	ldrb	r2, [r3, #30]
 8013ee4:	4b7b      	ldr	r3, [pc, #492]	; (80140d4 <tcp_slowtmr+0x264>)
 8013ee6:	781b      	ldrb	r3, [r3, #0]
 8013ee8:	429a      	cmp	r2, r3
 8013eea:	d105      	bne.n	8013ef8 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8013eec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013eee:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8013ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ef2:	68db      	ldr	r3, [r3, #12]
 8013ef4:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8013ef6:	e270      	b.n	80143da <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 8013ef8:	4b76      	ldr	r3, [pc, #472]	; (80140d4 <tcp_slowtmr+0x264>)
 8013efa:	781a      	ldrb	r2, [r3, #0]
 8013efc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013efe:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8013f00:	2300      	movs	r3, #0
 8013f02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8013f06:	2300      	movs	r3, #0
 8013f08:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8013f0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f0e:	7d1b      	ldrb	r3, [r3, #20]
 8013f10:	2b02      	cmp	r3, #2
 8013f12:	d10a      	bne.n	8013f2a <tcp_slowtmr+0xba>
 8013f14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f16:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013f1a:	2b05      	cmp	r3, #5
 8013f1c:	d905      	bls.n	8013f2a <tcp_slowtmr+0xba>
      ++pcb_remove;
 8013f1e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013f22:	3301      	adds	r3, #1
 8013f24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013f28:	e11e      	b.n	8014168 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8013f2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f2c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013f30:	2b0b      	cmp	r3, #11
 8013f32:	d905      	bls.n	8013f40 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8013f34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013f38:	3301      	adds	r3, #1
 8013f3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013f3e:	e113      	b.n	8014168 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8013f40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f42:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8013f46:	2b00      	cmp	r3, #0
 8013f48:	d075      	beq.n	8014036 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8013f4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013f4e:	2b00      	cmp	r3, #0
 8013f50:	d006      	beq.n	8013f60 <tcp_slowtmr+0xf0>
 8013f52:	4b62      	ldr	r3, [pc, #392]	; (80140dc <tcp_slowtmr+0x26c>)
 8013f54:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8013f58:	4965      	ldr	r1, [pc, #404]	; (80140f0 <tcp_slowtmr+0x280>)
 8013f5a:	4862      	ldr	r0, [pc, #392]	; (80140e4 <tcp_slowtmr+0x274>)
 8013f5c:	f00b fb52 	bl	801f604 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8013f60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013f64:	2b00      	cmp	r3, #0
 8013f66:	d106      	bne.n	8013f76 <tcp_slowtmr+0x106>
 8013f68:	4b5c      	ldr	r3, [pc, #368]	; (80140dc <tcp_slowtmr+0x26c>)
 8013f6a:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8013f6e:	4961      	ldr	r1, [pc, #388]	; (80140f4 <tcp_slowtmr+0x284>)
 8013f70:	485c      	ldr	r0, [pc, #368]	; (80140e4 <tcp_slowtmr+0x274>)
 8013f72:	f00b fb47 	bl	801f604 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8013f76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f78:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8013f7c:	2b0b      	cmp	r3, #11
 8013f7e:	d905      	bls.n	8013f8c <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8013f80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013f84:	3301      	adds	r3, #1
 8013f86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013f8a:	e0ed      	b.n	8014168 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8013f8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f8e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8013f92:	3b01      	subs	r3, #1
 8013f94:	4a58      	ldr	r2, [pc, #352]	; (80140f8 <tcp_slowtmr+0x288>)
 8013f96:	5cd3      	ldrb	r3, [r2, r3]
 8013f98:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8013f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f9c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8013fa0:	7c7a      	ldrb	r2, [r7, #17]
 8013fa2:	429a      	cmp	r2, r3
 8013fa4:	d907      	bls.n	8013fb6 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8013fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013fa8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8013fac:	3301      	adds	r3, #1
 8013fae:	b2da      	uxtb	r2, r3
 8013fb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013fb2:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8013fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013fb8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8013fbc:	7c7a      	ldrb	r2, [r7, #17]
 8013fbe:	429a      	cmp	r2, r3
 8013fc0:	f200 80d2 	bhi.w	8014168 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8013fc4:	2301      	movs	r3, #1
 8013fc6:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8013fc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013fca:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013fce:	2b00      	cmp	r3, #0
 8013fd0:	d108      	bne.n	8013fe4 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8013fd2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013fd4:	f005 f94c 	bl	8019270 <tcp_zero_window_probe>
 8013fd8:	4603      	mov	r3, r0
 8013fda:	2b00      	cmp	r3, #0
 8013fdc:	d014      	beq.n	8014008 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8013fde:	2300      	movs	r3, #0
 8013fe0:	623b      	str	r3, [r7, #32]
 8013fe2:	e011      	b.n	8014008 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8013fe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013fe6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013fea:	4619      	mov	r1, r3
 8013fec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013fee:	f004 f811 	bl	8018014 <tcp_split_unsent_seg>
 8013ff2:	4603      	mov	r3, r0
 8013ff4:	2b00      	cmp	r3, #0
 8013ff6:	d107      	bne.n	8014008 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8013ff8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013ffa:	f004 fa91 	bl	8018520 <tcp_output>
 8013ffe:	4603      	mov	r3, r0
 8014000:	2b00      	cmp	r3, #0
 8014002:	d101      	bne.n	8014008 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8014004:	2300      	movs	r3, #0
 8014006:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8014008:	6a3b      	ldr	r3, [r7, #32]
 801400a:	2b00      	cmp	r3, #0
 801400c:	f000 80ac 	beq.w	8014168 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8014010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014012:	2200      	movs	r2, #0
 8014014:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8014018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801401a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801401e:	2b06      	cmp	r3, #6
 8014020:	f200 80a2 	bhi.w	8014168 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8014024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014026:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801402a:	3301      	adds	r3, #1
 801402c:	b2da      	uxtb	r2, r3
 801402e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014030:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8014034:	e098      	b.n	8014168 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8014036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014038:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801403c:	2b00      	cmp	r3, #0
 801403e:	db0f      	blt.n	8014060 <tcp_slowtmr+0x1f0>
 8014040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014042:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8014046:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801404a:	4293      	cmp	r3, r2
 801404c:	d008      	beq.n	8014060 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 801404e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014050:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8014054:	b29b      	uxth	r3, r3
 8014056:	3301      	adds	r3, #1
 8014058:	b29b      	uxth	r3, r3
 801405a:	b21a      	sxth	r2, r3
 801405c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801405e:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8014060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014062:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8014066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014068:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 801406c:	429a      	cmp	r2, r3
 801406e:	db7b      	blt.n	8014168 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8014070:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014072:	f004 fd47 	bl	8018b04 <tcp_rexmit_rto_prepare>
 8014076:	4603      	mov	r3, r0
 8014078:	2b00      	cmp	r3, #0
 801407a:	d007      	beq.n	801408c <tcp_slowtmr+0x21c>
 801407c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801407e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014080:	2b00      	cmp	r3, #0
 8014082:	d171      	bne.n	8014168 <tcp_slowtmr+0x2f8>
 8014084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014086:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014088:	2b00      	cmp	r3, #0
 801408a:	d06d      	beq.n	8014168 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 801408c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801408e:	7d1b      	ldrb	r3, [r3, #20]
 8014090:	2b02      	cmp	r3, #2
 8014092:	d03a      	beq.n	801410a <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8014094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014096:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801409a:	2b0c      	cmp	r3, #12
 801409c:	bf28      	it	cs
 801409e:	230c      	movcs	r3, #12
 80140a0:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 80140a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80140a4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80140a8:	10db      	asrs	r3, r3, #3
 80140aa:	b21b      	sxth	r3, r3
 80140ac:	461a      	mov	r2, r3
 80140ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80140b0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80140b4:	4413      	add	r3, r2
 80140b6:	7efa      	ldrb	r2, [r7, #27]
 80140b8:	4910      	ldr	r1, [pc, #64]	; (80140fc <tcp_slowtmr+0x28c>)
 80140ba:	5c8a      	ldrb	r2, [r1, r2]
 80140bc:	4093      	lsls	r3, r2
 80140be:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 80140c0:	697b      	ldr	r3, [r7, #20]
 80140c2:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 80140c6:	4293      	cmp	r3, r2
 80140c8:	dc1a      	bgt.n	8014100 <tcp_slowtmr+0x290>
 80140ca:	697b      	ldr	r3, [r7, #20]
 80140cc:	b21a      	sxth	r2, r3
 80140ce:	e019      	b.n	8014104 <tcp_slowtmr+0x294>
 80140d0:	24007f40 	.word	0x24007f40
 80140d4:	2400453e 	.word	0x2400453e
 80140d8:	24007f3c 	.word	0x24007f3c
 80140dc:	08024d2c 	.word	0x08024d2c
 80140e0:	08025070 	.word	0x08025070
 80140e4:	08024d70 	.word	0x08024d70
 80140e8:	0802509c 	.word	0x0802509c
 80140ec:	080250c8 	.word	0x080250c8
 80140f0:	080250f8 	.word	0x080250f8
 80140f4:	0802512c 	.word	0x0802512c
 80140f8:	0802714c 	.word	0x0802714c
 80140fc:	0802713c 	.word	0x0802713c
 8014100:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8014104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014106:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 801410a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801410c:	2200      	movs	r2, #0
 801410e:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8014110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014112:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8014116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014118:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801411c:	4293      	cmp	r3, r2
 801411e:	bf28      	it	cs
 8014120:	4613      	movcs	r3, r2
 8014122:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8014124:	8a7b      	ldrh	r3, [r7, #18]
 8014126:	085b      	lsrs	r3, r3, #1
 8014128:	b29a      	uxth	r2, r3
 801412a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801412c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8014130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014132:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8014136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014138:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801413a:	005b      	lsls	r3, r3, #1
 801413c:	b29b      	uxth	r3, r3
 801413e:	429a      	cmp	r2, r3
 8014140:	d206      	bcs.n	8014150 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8014142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014144:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014146:	005b      	lsls	r3, r3, #1
 8014148:	b29a      	uxth	r2, r3
 801414a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801414c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8014150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014152:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8014154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014156:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 801415a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801415c:	2200      	movs	r2, #0
 801415e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8014162:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014164:	f004 fd3e 	bl	8018be4 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8014168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801416a:	7d1b      	ldrb	r3, [r3, #20]
 801416c:	2b06      	cmp	r3, #6
 801416e:	d111      	bne.n	8014194 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8014170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014172:	8b5b      	ldrh	r3, [r3, #26]
 8014174:	f003 0310 	and.w	r3, r3, #16
 8014178:	2b00      	cmp	r3, #0
 801417a:	d00b      	beq.n	8014194 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 801417c:	4b9c      	ldr	r3, [pc, #624]	; (80143f0 <tcp_slowtmr+0x580>)
 801417e:	681a      	ldr	r2, [r3, #0]
 8014180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014182:	6a1b      	ldr	r3, [r3, #32]
 8014184:	1ad3      	subs	r3, r2, r3
 8014186:	2b28      	cmp	r3, #40	; 0x28
 8014188:	d904      	bls.n	8014194 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 801418a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801418e:	3301      	adds	r3, #1
 8014190:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8014194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014196:	7a5b      	ldrb	r3, [r3, #9]
 8014198:	f003 0308 	and.w	r3, r3, #8
 801419c:	2b00      	cmp	r3, #0
 801419e:	d04a      	beq.n	8014236 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 80141a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80141a2:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80141a4:	2b04      	cmp	r3, #4
 80141a6:	d003      	beq.n	80141b0 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 80141a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80141aa:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 80141ac:	2b07      	cmp	r3, #7
 80141ae:	d142      	bne.n	8014236 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80141b0:	4b8f      	ldr	r3, [pc, #572]	; (80143f0 <tcp_slowtmr+0x580>)
 80141b2:	681a      	ldr	r2, [r3, #0]
 80141b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80141b6:	6a1b      	ldr	r3, [r3, #32]
 80141b8:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 80141ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80141bc:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 80141c0:	4b8c      	ldr	r3, [pc, #560]	; (80143f4 <tcp_slowtmr+0x584>)
 80141c2:	440b      	add	r3, r1
 80141c4:	498c      	ldr	r1, [pc, #560]	; (80143f8 <tcp_slowtmr+0x588>)
 80141c6:	fba1 1303 	umull	r1, r3, r1, r3
 80141ca:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80141cc:	429a      	cmp	r2, r3
 80141ce:	d90a      	bls.n	80141e6 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 80141d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80141d4:	3301      	adds	r3, #1
 80141d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 80141da:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80141de:	3301      	adds	r3, #1
 80141e0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80141e4:	e027      	b.n	8014236 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80141e6:	4b82      	ldr	r3, [pc, #520]	; (80143f0 <tcp_slowtmr+0x580>)
 80141e8:	681a      	ldr	r2, [r3, #0]
 80141ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80141ec:	6a1b      	ldr	r3, [r3, #32]
 80141ee:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 80141f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80141f2:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 80141f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80141f8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 80141fc:	4618      	mov	r0, r3
 80141fe:	4b7f      	ldr	r3, [pc, #508]	; (80143fc <tcp_slowtmr+0x58c>)
 8014200:	fb03 f300 	mul.w	r3, r3, r0
 8014204:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8014206:	497c      	ldr	r1, [pc, #496]	; (80143f8 <tcp_slowtmr+0x588>)
 8014208:	fba1 1303 	umull	r1, r3, r1, r3
 801420c:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801420e:	429a      	cmp	r2, r3
 8014210:	d911      	bls.n	8014236 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 8014212:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014214:	f004 ffec 	bl	80191f0 <tcp_keepalive>
 8014218:	4603      	mov	r3, r0
 801421a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 801421e:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8014222:	2b00      	cmp	r3, #0
 8014224:	d107      	bne.n	8014236 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 8014226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014228:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 801422c:	3301      	adds	r3, #1
 801422e:	b2da      	uxtb	r2, r3
 8014230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014232:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8014236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014238:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801423a:	2b00      	cmp	r3, #0
 801423c:	d011      	beq.n	8014262 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 801423e:	4b6c      	ldr	r3, [pc, #432]	; (80143f0 <tcp_slowtmr+0x580>)
 8014240:	681a      	ldr	r2, [r3, #0]
 8014242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014244:	6a1b      	ldr	r3, [r3, #32]
 8014246:	1ad2      	subs	r2, r2, r3
 8014248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801424a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 801424e:	4619      	mov	r1, r3
 8014250:	460b      	mov	r3, r1
 8014252:	005b      	lsls	r3, r3, #1
 8014254:	440b      	add	r3, r1
 8014256:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8014258:	429a      	cmp	r2, r3
 801425a:	d302      	bcc.n	8014262 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 801425c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801425e:	f000 feab 	bl	8014fb8 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8014262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014264:	7d1b      	ldrb	r3, [r3, #20]
 8014266:	2b03      	cmp	r3, #3
 8014268:	d10b      	bne.n	8014282 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801426a:	4b61      	ldr	r3, [pc, #388]	; (80143f0 <tcp_slowtmr+0x580>)
 801426c:	681a      	ldr	r2, [r3, #0]
 801426e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014270:	6a1b      	ldr	r3, [r3, #32]
 8014272:	1ad3      	subs	r3, r2, r3
 8014274:	2b28      	cmp	r3, #40	; 0x28
 8014276:	d904      	bls.n	8014282 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8014278:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801427c:	3301      	adds	r3, #1
 801427e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8014282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014284:	7d1b      	ldrb	r3, [r3, #20]
 8014286:	2b09      	cmp	r3, #9
 8014288:	d10b      	bne.n	80142a2 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801428a:	4b59      	ldr	r3, [pc, #356]	; (80143f0 <tcp_slowtmr+0x580>)
 801428c:	681a      	ldr	r2, [r3, #0]
 801428e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014290:	6a1b      	ldr	r3, [r3, #32]
 8014292:	1ad3      	subs	r3, r2, r3
 8014294:	2bf0      	cmp	r3, #240	; 0xf0
 8014296:	d904      	bls.n	80142a2 <tcp_slowtmr+0x432>
        ++pcb_remove;
 8014298:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801429c:	3301      	adds	r3, #1
 801429e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80142a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80142a6:	2b00      	cmp	r3, #0
 80142a8:	d060      	beq.n	801436c <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 80142aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80142b0:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 80142b2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80142b4:	f000 fccc 	bl	8014c50 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 80142b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80142ba:	2b00      	cmp	r3, #0
 80142bc:	d010      	beq.n	80142e0 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 80142be:	4b50      	ldr	r3, [pc, #320]	; (8014400 <tcp_slowtmr+0x590>)
 80142c0:	681b      	ldr	r3, [r3, #0]
 80142c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80142c4:	429a      	cmp	r2, r3
 80142c6:	d106      	bne.n	80142d6 <tcp_slowtmr+0x466>
 80142c8:	4b4e      	ldr	r3, [pc, #312]	; (8014404 <tcp_slowtmr+0x594>)
 80142ca:	f240 526d 	movw	r2, #1389	; 0x56d
 80142ce:	494e      	ldr	r1, [pc, #312]	; (8014408 <tcp_slowtmr+0x598>)
 80142d0:	484e      	ldr	r0, [pc, #312]	; (801440c <tcp_slowtmr+0x59c>)
 80142d2:	f00b f997 	bl	801f604 <iprintf>
        prev->next = pcb->next;
 80142d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142d8:	68da      	ldr	r2, [r3, #12]
 80142da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80142dc:	60da      	str	r2, [r3, #12]
 80142de:	e00f      	b.n	8014300 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 80142e0:	4b47      	ldr	r3, [pc, #284]	; (8014400 <tcp_slowtmr+0x590>)
 80142e2:	681b      	ldr	r3, [r3, #0]
 80142e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80142e6:	429a      	cmp	r2, r3
 80142e8:	d006      	beq.n	80142f8 <tcp_slowtmr+0x488>
 80142ea:	4b46      	ldr	r3, [pc, #280]	; (8014404 <tcp_slowtmr+0x594>)
 80142ec:	f240 5271 	movw	r2, #1393	; 0x571
 80142f0:	4947      	ldr	r1, [pc, #284]	; (8014410 <tcp_slowtmr+0x5a0>)
 80142f2:	4846      	ldr	r0, [pc, #280]	; (801440c <tcp_slowtmr+0x59c>)
 80142f4:	f00b f986 	bl	801f604 <iprintf>
        tcp_active_pcbs = pcb->next;
 80142f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142fa:	68db      	ldr	r3, [r3, #12]
 80142fc:	4a40      	ldr	r2, [pc, #256]	; (8014400 <tcp_slowtmr+0x590>)
 80142fe:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8014300:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014304:	2b00      	cmp	r3, #0
 8014306:	d013      	beq.n	8014330 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8014308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801430a:	6d18      	ldr	r0, [r3, #80]	; 0x50
 801430c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801430e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8014310:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8014312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014314:	3304      	adds	r3, #4
 8014316:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014318:	8ad2      	ldrh	r2, [r2, #22]
 801431a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801431c:	8b09      	ldrh	r1, [r1, #24]
 801431e:	9102      	str	r1, [sp, #8]
 8014320:	9201      	str	r2, [sp, #4]
 8014322:	9300      	str	r3, [sp, #0]
 8014324:	462b      	mov	r3, r5
 8014326:	4622      	mov	r2, r4
 8014328:	4601      	mov	r1, r0
 801432a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801432c:	f004 feac 	bl	8019088 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8014330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014332:	691b      	ldr	r3, [r3, #16]
 8014334:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8014336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014338:	7d1b      	ldrb	r3, [r3, #20]
 801433a:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 801433c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801433e:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8014340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014342:	68db      	ldr	r3, [r3, #12]
 8014344:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8014346:	6838      	ldr	r0, [r7, #0]
 8014348:	f7fe fff0 	bl	801332c <tcp_free>

      tcp_active_pcbs_changed = 0;
 801434c:	4b31      	ldr	r3, [pc, #196]	; (8014414 <tcp_slowtmr+0x5a4>)
 801434e:	2200      	movs	r2, #0
 8014350:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8014352:	68fb      	ldr	r3, [r7, #12]
 8014354:	2b00      	cmp	r3, #0
 8014356:	d004      	beq.n	8014362 <tcp_slowtmr+0x4f2>
 8014358:	68fb      	ldr	r3, [r7, #12]
 801435a:	f06f 010c 	mvn.w	r1, #12
 801435e:	68b8      	ldr	r0, [r7, #8]
 8014360:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8014362:	4b2c      	ldr	r3, [pc, #176]	; (8014414 <tcp_slowtmr+0x5a4>)
 8014364:	781b      	ldrb	r3, [r3, #0]
 8014366:	2b00      	cmp	r3, #0
 8014368:	d037      	beq.n	80143da <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 801436a:	e592      	b.n	8013e92 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 801436c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801436e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8014370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014372:	68db      	ldr	r3, [r3, #12]
 8014374:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8014376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014378:	7f1b      	ldrb	r3, [r3, #28]
 801437a:	3301      	adds	r3, #1
 801437c:	b2da      	uxtb	r2, r3
 801437e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014380:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8014382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014384:	7f1a      	ldrb	r2, [r3, #28]
 8014386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014388:	7f5b      	ldrb	r3, [r3, #29]
 801438a:	429a      	cmp	r2, r3
 801438c:	d325      	bcc.n	80143da <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 801438e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014390:	2200      	movs	r2, #0
 8014392:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8014394:	4b1f      	ldr	r3, [pc, #124]	; (8014414 <tcp_slowtmr+0x5a4>)
 8014396:	2200      	movs	r2, #0
 8014398:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 801439a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801439c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80143a0:	2b00      	cmp	r3, #0
 80143a2:	d00b      	beq.n	80143bc <tcp_slowtmr+0x54c>
 80143a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80143a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80143aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80143ac:	6912      	ldr	r2, [r2, #16]
 80143ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80143b0:	4610      	mov	r0, r2
 80143b2:	4798      	blx	r3
 80143b4:	4603      	mov	r3, r0
 80143b6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80143ba:	e002      	b.n	80143c2 <tcp_slowtmr+0x552>
 80143bc:	2300      	movs	r3, #0
 80143be:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 80143c2:	4b14      	ldr	r3, [pc, #80]	; (8014414 <tcp_slowtmr+0x5a4>)
 80143c4:	781b      	ldrb	r3, [r3, #0]
 80143c6:	2b00      	cmp	r3, #0
 80143c8:	d000      	beq.n	80143cc <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 80143ca:	e562      	b.n	8013e92 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 80143cc:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80143d0:	2b00      	cmp	r3, #0
 80143d2:	d102      	bne.n	80143da <tcp_slowtmr+0x56a>
          tcp_output(prev);
 80143d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80143d6:	f004 f8a3 	bl	8018520 <tcp_output>
  while (pcb != NULL) {
 80143da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80143dc:	2b00      	cmp	r3, #0
 80143de:	f47f ad5e 	bne.w	8013e9e <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 80143e2:	2300      	movs	r3, #0
 80143e4:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 80143e6:	4b0c      	ldr	r3, [pc, #48]	; (8014418 <tcp_slowtmr+0x5a8>)
 80143e8:	681b      	ldr	r3, [r3, #0]
 80143ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 80143ec:	e069      	b.n	80144c2 <tcp_slowtmr+0x652>
 80143ee:	bf00      	nop
 80143f0:	24007f40 	.word	0x24007f40
 80143f4:	000a4cb8 	.word	0x000a4cb8
 80143f8:	10624dd3 	.word	0x10624dd3
 80143fc:	000124f8 	.word	0x000124f8
 8014400:	24007f3c 	.word	0x24007f3c
 8014404:	08024d2c 	.word	0x08024d2c
 8014408:	08025164 	.word	0x08025164
 801440c:	08024d70 	.word	0x08024d70
 8014410:	08025190 	.word	0x08025190
 8014414:	24007f38 	.word	0x24007f38
 8014418:	24007f4c 	.word	0x24007f4c
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801441c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801441e:	7d1b      	ldrb	r3, [r3, #20]
 8014420:	2b0a      	cmp	r3, #10
 8014422:	d006      	beq.n	8014432 <tcp_slowtmr+0x5c2>
 8014424:	4b2b      	ldr	r3, [pc, #172]	; (80144d4 <tcp_slowtmr+0x664>)
 8014426:	f240 52a1 	movw	r2, #1441	; 0x5a1
 801442a:	492b      	ldr	r1, [pc, #172]	; (80144d8 <tcp_slowtmr+0x668>)
 801442c:	482b      	ldr	r0, [pc, #172]	; (80144dc <tcp_slowtmr+0x66c>)
 801442e:	f00b f8e9 	bl	801f604 <iprintf>
    pcb_remove = 0;
 8014432:	2300      	movs	r3, #0
 8014434:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8014438:	4b29      	ldr	r3, [pc, #164]	; (80144e0 <tcp_slowtmr+0x670>)
 801443a:	681a      	ldr	r2, [r3, #0]
 801443c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801443e:	6a1b      	ldr	r3, [r3, #32]
 8014440:	1ad3      	subs	r3, r2, r3
 8014442:	2bf0      	cmp	r3, #240	; 0xf0
 8014444:	d904      	bls.n	8014450 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8014446:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801444a:	3301      	adds	r3, #1
 801444c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8014450:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014454:	2b00      	cmp	r3, #0
 8014456:	d02f      	beq.n	80144b8 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8014458:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801445a:	f000 fbf9 	bl	8014c50 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 801445e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014460:	2b00      	cmp	r3, #0
 8014462:	d010      	beq.n	8014486 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8014464:	4b1f      	ldr	r3, [pc, #124]	; (80144e4 <tcp_slowtmr+0x674>)
 8014466:	681b      	ldr	r3, [r3, #0]
 8014468:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801446a:	429a      	cmp	r2, r3
 801446c:	d106      	bne.n	801447c <tcp_slowtmr+0x60c>
 801446e:	4b19      	ldr	r3, [pc, #100]	; (80144d4 <tcp_slowtmr+0x664>)
 8014470:	f240 52af 	movw	r2, #1455	; 0x5af
 8014474:	491c      	ldr	r1, [pc, #112]	; (80144e8 <tcp_slowtmr+0x678>)
 8014476:	4819      	ldr	r0, [pc, #100]	; (80144dc <tcp_slowtmr+0x66c>)
 8014478:	f00b f8c4 	bl	801f604 <iprintf>
        prev->next = pcb->next;
 801447c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801447e:	68da      	ldr	r2, [r3, #12]
 8014480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014482:	60da      	str	r2, [r3, #12]
 8014484:	e00f      	b.n	80144a6 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8014486:	4b17      	ldr	r3, [pc, #92]	; (80144e4 <tcp_slowtmr+0x674>)
 8014488:	681b      	ldr	r3, [r3, #0]
 801448a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801448c:	429a      	cmp	r2, r3
 801448e:	d006      	beq.n	801449e <tcp_slowtmr+0x62e>
 8014490:	4b10      	ldr	r3, [pc, #64]	; (80144d4 <tcp_slowtmr+0x664>)
 8014492:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8014496:	4915      	ldr	r1, [pc, #84]	; (80144ec <tcp_slowtmr+0x67c>)
 8014498:	4810      	ldr	r0, [pc, #64]	; (80144dc <tcp_slowtmr+0x66c>)
 801449a:	f00b f8b3 	bl	801f604 <iprintf>
        tcp_tw_pcbs = pcb->next;
 801449e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80144a0:	68db      	ldr	r3, [r3, #12]
 80144a2:	4a10      	ldr	r2, [pc, #64]	; (80144e4 <tcp_slowtmr+0x674>)
 80144a4:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 80144a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80144a8:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 80144aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80144ac:	68db      	ldr	r3, [r3, #12]
 80144ae:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 80144b0:	69f8      	ldr	r0, [r7, #28]
 80144b2:	f7fe ff3b 	bl	801332c <tcp_free>
 80144b6:	e004      	b.n	80144c2 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 80144b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80144ba:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80144bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80144be:	68db      	ldr	r3, [r3, #12]
 80144c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 80144c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80144c4:	2b00      	cmp	r3, #0
 80144c6:	d1a9      	bne.n	801441c <tcp_slowtmr+0x5ac>
    }
  }
}
 80144c8:	bf00      	nop
 80144ca:	bf00      	nop
 80144cc:	3730      	adds	r7, #48	; 0x30
 80144ce:	46bd      	mov	sp, r7
 80144d0:	bdb0      	pop	{r4, r5, r7, pc}
 80144d2:	bf00      	nop
 80144d4:	08024d2c 	.word	0x08024d2c
 80144d8:	080251bc 	.word	0x080251bc
 80144dc:	08024d70 	.word	0x08024d70
 80144e0:	24007f40 	.word	0x24007f40
 80144e4:	24007f4c 	.word	0x24007f4c
 80144e8:	080251ec 	.word	0x080251ec
 80144ec:	08025214 	.word	0x08025214

080144f0 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 80144f0:	b580      	push	{r7, lr}
 80144f2:	b082      	sub	sp, #8
 80144f4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 80144f6:	4b2d      	ldr	r3, [pc, #180]	; (80145ac <tcp_fasttmr+0xbc>)
 80144f8:	781b      	ldrb	r3, [r3, #0]
 80144fa:	3301      	adds	r3, #1
 80144fc:	b2da      	uxtb	r2, r3
 80144fe:	4b2b      	ldr	r3, [pc, #172]	; (80145ac <tcp_fasttmr+0xbc>)
 8014500:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8014502:	4b2b      	ldr	r3, [pc, #172]	; (80145b0 <tcp_fasttmr+0xc0>)
 8014504:	681b      	ldr	r3, [r3, #0]
 8014506:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8014508:	e048      	b.n	801459c <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 801450a:	687b      	ldr	r3, [r7, #4]
 801450c:	7f9a      	ldrb	r2, [r3, #30]
 801450e:	4b27      	ldr	r3, [pc, #156]	; (80145ac <tcp_fasttmr+0xbc>)
 8014510:	781b      	ldrb	r3, [r3, #0]
 8014512:	429a      	cmp	r2, r3
 8014514:	d03f      	beq.n	8014596 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8014516:	4b25      	ldr	r3, [pc, #148]	; (80145ac <tcp_fasttmr+0xbc>)
 8014518:	781a      	ldrb	r2, [r3, #0]
 801451a:	687b      	ldr	r3, [r7, #4]
 801451c:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 801451e:	687b      	ldr	r3, [r7, #4]
 8014520:	8b5b      	ldrh	r3, [r3, #26]
 8014522:	f003 0301 	and.w	r3, r3, #1
 8014526:	2b00      	cmp	r3, #0
 8014528:	d010      	beq.n	801454c <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 801452a:	687b      	ldr	r3, [r7, #4]
 801452c:	8b5b      	ldrh	r3, [r3, #26]
 801452e:	f043 0302 	orr.w	r3, r3, #2
 8014532:	b29a      	uxth	r2, r3
 8014534:	687b      	ldr	r3, [r7, #4]
 8014536:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8014538:	6878      	ldr	r0, [r7, #4]
 801453a:	f003 fff1 	bl	8018520 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801453e:	687b      	ldr	r3, [r7, #4]
 8014540:	8b5b      	ldrh	r3, [r3, #26]
 8014542:	f023 0303 	bic.w	r3, r3, #3
 8014546:	b29a      	uxth	r2, r3
 8014548:	687b      	ldr	r3, [r7, #4]
 801454a:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 801454c:	687b      	ldr	r3, [r7, #4]
 801454e:	8b5b      	ldrh	r3, [r3, #26]
 8014550:	f003 0308 	and.w	r3, r3, #8
 8014554:	2b00      	cmp	r3, #0
 8014556:	d009      	beq.n	801456c <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8014558:	687b      	ldr	r3, [r7, #4]
 801455a:	8b5b      	ldrh	r3, [r3, #26]
 801455c:	f023 0308 	bic.w	r3, r3, #8
 8014560:	b29a      	uxth	r2, r3
 8014562:	687b      	ldr	r3, [r7, #4]
 8014564:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8014566:	6878      	ldr	r0, [r7, #4]
 8014568:	f7ff f874 	bl	8013654 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 801456c:	687b      	ldr	r3, [r7, #4]
 801456e:	68db      	ldr	r3, [r3, #12]
 8014570:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8014572:	687b      	ldr	r3, [r7, #4]
 8014574:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014576:	2b00      	cmp	r3, #0
 8014578:	d00a      	beq.n	8014590 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 801457a:	4b0e      	ldr	r3, [pc, #56]	; (80145b4 <tcp_fasttmr+0xc4>)
 801457c:	2200      	movs	r2, #0
 801457e:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8014580:	6878      	ldr	r0, [r7, #4]
 8014582:	f000 f819 	bl	80145b8 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8014586:	4b0b      	ldr	r3, [pc, #44]	; (80145b4 <tcp_fasttmr+0xc4>)
 8014588:	781b      	ldrb	r3, [r3, #0]
 801458a:	2b00      	cmp	r3, #0
 801458c:	d000      	beq.n	8014590 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 801458e:	e7b8      	b.n	8014502 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8014590:	683b      	ldr	r3, [r7, #0]
 8014592:	607b      	str	r3, [r7, #4]
 8014594:	e002      	b.n	801459c <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8014596:	687b      	ldr	r3, [r7, #4]
 8014598:	68db      	ldr	r3, [r3, #12]
 801459a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 801459c:	687b      	ldr	r3, [r7, #4]
 801459e:	2b00      	cmp	r3, #0
 80145a0:	d1b3      	bne.n	801450a <tcp_fasttmr+0x1a>
    }
  }
}
 80145a2:	bf00      	nop
 80145a4:	bf00      	nop
 80145a6:	3708      	adds	r7, #8
 80145a8:	46bd      	mov	sp, r7
 80145aa:	bd80      	pop	{r7, pc}
 80145ac:	2400453e 	.word	0x2400453e
 80145b0:	24007f3c 	.word	0x24007f3c
 80145b4:	24007f38 	.word	0x24007f38

080145b8 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 80145b8:	b590      	push	{r4, r7, lr}
 80145ba:	b085      	sub	sp, #20
 80145bc:	af00      	add	r7, sp, #0
 80145be:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 80145c0:	687b      	ldr	r3, [r7, #4]
 80145c2:	2b00      	cmp	r3, #0
 80145c4:	d109      	bne.n	80145da <tcp_process_refused_data+0x22>
 80145c6:	4b37      	ldr	r3, [pc, #220]	; (80146a4 <tcp_process_refused_data+0xec>)
 80145c8:	f240 6209 	movw	r2, #1545	; 0x609
 80145cc:	4936      	ldr	r1, [pc, #216]	; (80146a8 <tcp_process_refused_data+0xf0>)
 80145ce:	4837      	ldr	r0, [pc, #220]	; (80146ac <tcp_process_refused_data+0xf4>)
 80145d0:	f00b f818 	bl	801f604 <iprintf>
 80145d4:	f06f 030f 	mvn.w	r3, #15
 80145d8:	e060      	b.n	801469c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 80145da:	687b      	ldr	r3, [r7, #4]
 80145dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80145de:	7b5b      	ldrb	r3, [r3, #13]
 80145e0:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 80145e2:	687b      	ldr	r3, [r7, #4]
 80145e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80145e6:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 80145e8:	687b      	ldr	r3, [r7, #4]
 80145ea:	2200      	movs	r2, #0
 80145ec:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 80145ee:	687b      	ldr	r3, [r7, #4]
 80145f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80145f4:	2b00      	cmp	r3, #0
 80145f6:	d00b      	beq.n	8014610 <tcp_process_refused_data+0x58>
 80145f8:	687b      	ldr	r3, [r7, #4]
 80145fa:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80145fe:	687b      	ldr	r3, [r7, #4]
 8014600:	6918      	ldr	r0, [r3, #16]
 8014602:	2300      	movs	r3, #0
 8014604:	68ba      	ldr	r2, [r7, #8]
 8014606:	6879      	ldr	r1, [r7, #4]
 8014608:	47a0      	blx	r4
 801460a:	4603      	mov	r3, r0
 801460c:	73fb      	strb	r3, [r7, #15]
 801460e:	e007      	b.n	8014620 <tcp_process_refused_data+0x68>
 8014610:	2300      	movs	r3, #0
 8014612:	68ba      	ldr	r2, [r7, #8]
 8014614:	6879      	ldr	r1, [r7, #4]
 8014616:	2000      	movs	r0, #0
 8014618:	f000 f8a4 	bl	8014764 <tcp_recv_null>
 801461c:	4603      	mov	r3, r0
 801461e:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8014620:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014624:	2b00      	cmp	r3, #0
 8014626:	d12a      	bne.n	801467e <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8014628:	7bbb      	ldrb	r3, [r7, #14]
 801462a:	f003 0320 	and.w	r3, r3, #32
 801462e:	2b00      	cmp	r3, #0
 8014630:	d033      	beq.n	801469a <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8014632:	687b      	ldr	r3, [r7, #4]
 8014634:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014636:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801463a:	d005      	beq.n	8014648 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 801463c:	687b      	ldr	r3, [r7, #4]
 801463e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014640:	3301      	adds	r3, #1
 8014642:	b29a      	uxth	r2, r3
 8014644:	687b      	ldr	r3, [r7, #4]
 8014646:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8014648:	687b      	ldr	r3, [r7, #4]
 801464a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801464e:	2b00      	cmp	r3, #0
 8014650:	d00b      	beq.n	801466a <tcp_process_refused_data+0xb2>
 8014652:	687b      	ldr	r3, [r7, #4]
 8014654:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8014658:	687b      	ldr	r3, [r7, #4]
 801465a:	6918      	ldr	r0, [r3, #16]
 801465c:	2300      	movs	r3, #0
 801465e:	2200      	movs	r2, #0
 8014660:	6879      	ldr	r1, [r7, #4]
 8014662:	47a0      	blx	r4
 8014664:	4603      	mov	r3, r0
 8014666:	73fb      	strb	r3, [r7, #15]
 8014668:	e001      	b.n	801466e <tcp_process_refused_data+0xb6>
 801466a:	2300      	movs	r3, #0
 801466c:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 801466e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014672:	f113 0f0d 	cmn.w	r3, #13
 8014676:	d110      	bne.n	801469a <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8014678:	f06f 030c 	mvn.w	r3, #12
 801467c:	e00e      	b.n	801469c <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 801467e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014682:	f113 0f0d 	cmn.w	r3, #13
 8014686:	d102      	bne.n	801468e <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8014688:	f06f 030c 	mvn.w	r3, #12
 801468c:	e006      	b.n	801469c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 801468e:	687b      	ldr	r3, [r7, #4]
 8014690:	68ba      	ldr	r2, [r7, #8]
 8014692:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8014694:	f06f 0304 	mvn.w	r3, #4
 8014698:	e000      	b.n	801469c <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 801469a:	2300      	movs	r3, #0
}
 801469c:	4618      	mov	r0, r3
 801469e:	3714      	adds	r7, #20
 80146a0:	46bd      	mov	sp, r7
 80146a2:	bd90      	pop	{r4, r7, pc}
 80146a4:	08024d2c 	.word	0x08024d2c
 80146a8:	0802523c 	.word	0x0802523c
 80146ac:	08024d70 	.word	0x08024d70

080146b0 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 80146b0:	b580      	push	{r7, lr}
 80146b2:	b084      	sub	sp, #16
 80146b4:	af00      	add	r7, sp, #0
 80146b6:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 80146b8:	e007      	b.n	80146ca <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 80146ba:	687b      	ldr	r3, [r7, #4]
 80146bc:	681b      	ldr	r3, [r3, #0]
 80146be:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 80146c0:	6878      	ldr	r0, [r7, #4]
 80146c2:	f000 f80a 	bl	80146da <tcp_seg_free>
    seg = next;
 80146c6:	68fb      	ldr	r3, [r7, #12]
 80146c8:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 80146ca:	687b      	ldr	r3, [r7, #4]
 80146cc:	2b00      	cmp	r3, #0
 80146ce:	d1f4      	bne.n	80146ba <tcp_segs_free+0xa>
  }
}
 80146d0:	bf00      	nop
 80146d2:	bf00      	nop
 80146d4:	3710      	adds	r7, #16
 80146d6:	46bd      	mov	sp, r7
 80146d8:	bd80      	pop	{r7, pc}

080146da <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 80146da:	b580      	push	{r7, lr}
 80146dc:	b082      	sub	sp, #8
 80146de:	af00      	add	r7, sp, #0
 80146e0:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 80146e2:	687b      	ldr	r3, [r7, #4]
 80146e4:	2b00      	cmp	r3, #0
 80146e6:	d00c      	beq.n	8014702 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 80146e8:	687b      	ldr	r3, [r7, #4]
 80146ea:	685b      	ldr	r3, [r3, #4]
 80146ec:	2b00      	cmp	r3, #0
 80146ee:	d004      	beq.n	80146fa <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 80146f0:	687b      	ldr	r3, [r7, #4]
 80146f2:	685b      	ldr	r3, [r3, #4]
 80146f4:	4618      	mov	r0, r3
 80146f6:	f7fe fb5d 	bl	8012db4 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 80146fa:	6879      	ldr	r1, [r7, #4]
 80146fc:	2003      	movs	r0, #3
 80146fe:	f7fd fc77 	bl	8011ff0 <memp_free>
  }
}
 8014702:	bf00      	nop
 8014704:	3708      	adds	r7, #8
 8014706:	46bd      	mov	sp, r7
 8014708:	bd80      	pop	{r7, pc}
	...

0801470c <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 801470c:	b580      	push	{r7, lr}
 801470e:	b084      	sub	sp, #16
 8014710:	af00      	add	r7, sp, #0
 8014712:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8014714:	687b      	ldr	r3, [r7, #4]
 8014716:	2b00      	cmp	r3, #0
 8014718:	d106      	bne.n	8014728 <tcp_seg_copy+0x1c>
 801471a:	4b0f      	ldr	r3, [pc, #60]	; (8014758 <tcp_seg_copy+0x4c>)
 801471c:	f240 6282 	movw	r2, #1666	; 0x682
 8014720:	490e      	ldr	r1, [pc, #56]	; (801475c <tcp_seg_copy+0x50>)
 8014722:	480f      	ldr	r0, [pc, #60]	; (8014760 <tcp_seg_copy+0x54>)
 8014724:	f00a ff6e 	bl	801f604 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8014728:	2003      	movs	r0, #3
 801472a:	f7fd fbeb 	bl	8011f04 <memp_malloc>
 801472e:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8014730:	68fb      	ldr	r3, [r7, #12]
 8014732:	2b00      	cmp	r3, #0
 8014734:	d101      	bne.n	801473a <tcp_seg_copy+0x2e>
    return NULL;
 8014736:	2300      	movs	r3, #0
 8014738:	e00a      	b.n	8014750 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 801473a:	2210      	movs	r2, #16
 801473c:	6879      	ldr	r1, [r7, #4]
 801473e:	68f8      	ldr	r0, [r7, #12]
 8014740:	f00a f8ea 	bl	801e918 <memcpy>
  pbuf_ref(cseg->p);
 8014744:	68fb      	ldr	r3, [r7, #12]
 8014746:	685b      	ldr	r3, [r3, #4]
 8014748:	4618      	mov	r0, r3
 801474a:	f7fe fbd9 	bl	8012f00 <pbuf_ref>
  return cseg;
 801474e:	68fb      	ldr	r3, [r7, #12]
}
 8014750:	4618      	mov	r0, r3
 8014752:	3710      	adds	r7, #16
 8014754:	46bd      	mov	sp, r7
 8014756:	bd80      	pop	{r7, pc}
 8014758:	08024d2c 	.word	0x08024d2c
 801475c:	08025280 	.word	0x08025280
 8014760:	08024d70 	.word	0x08024d70

08014764 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8014764:	b580      	push	{r7, lr}
 8014766:	b084      	sub	sp, #16
 8014768:	af00      	add	r7, sp, #0
 801476a:	60f8      	str	r0, [r7, #12]
 801476c:	60b9      	str	r1, [r7, #8]
 801476e:	607a      	str	r2, [r7, #4]
 8014770:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8014772:	68bb      	ldr	r3, [r7, #8]
 8014774:	2b00      	cmp	r3, #0
 8014776:	d109      	bne.n	801478c <tcp_recv_null+0x28>
 8014778:	4b12      	ldr	r3, [pc, #72]	; (80147c4 <tcp_recv_null+0x60>)
 801477a:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801477e:	4912      	ldr	r1, [pc, #72]	; (80147c8 <tcp_recv_null+0x64>)
 8014780:	4812      	ldr	r0, [pc, #72]	; (80147cc <tcp_recv_null+0x68>)
 8014782:	f00a ff3f 	bl	801f604 <iprintf>
 8014786:	f06f 030f 	mvn.w	r3, #15
 801478a:	e016      	b.n	80147ba <tcp_recv_null+0x56>

  if (p != NULL) {
 801478c:	687b      	ldr	r3, [r7, #4]
 801478e:	2b00      	cmp	r3, #0
 8014790:	d009      	beq.n	80147a6 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8014792:	687b      	ldr	r3, [r7, #4]
 8014794:	891b      	ldrh	r3, [r3, #8]
 8014796:	4619      	mov	r1, r3
 8014798:	68b8      	ldr	r0, [r7, #8]
 801479a:	f7ff fad3 	bl	8013d44 <tcp_recved>
    pbuf_free(p);
 801479e:	6878      	ldr	r0, [r7, #4]
 80147a0:	f7fe fb08 	bl	8012db4 <pbuf_free>
 80147a4:	e008      	b.n	80147b8 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 80147a6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80147aa:	2b00      	cmp	r3, #0
 80147ac:	d104      	bne.n	80147b8 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 80147ae:	68b8      	ldr	r0, [r7, #8]
 80147b0:	f7fe ffba 	bl	8013728 <tcp_close>
 80147b4:	4603      	mov	r3, r0
 80147b6:	e000      	b.n	80147ba <tcp_recv_null+0x56>
  }
  return ERR_OK;
 80147b8:	2300      	movs	r3, #0
}
 80147ba:	4618      	mov	r0, r3
 80147bc:	3710      	adds	r7, #16
 80147be:	46bd      	mov	sp, r7
 80147c0:	bd80      	pop	{r7, pc}
 80147c2:	bf00      	nop
 80147c4:	08024d2c 	.word	0x08024d2c
 80147c8:	0802529c 	.word	0x0802529c
 80147cc:	08024d70 	.word	0x08024d70

080147d0 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 80147d0:	b580      	push	{r7, lr}
 80147d2:	b086      	sub	sp, #24
 80147d4:	af00      	add	r7, sp, #0
 80147d6:	4603      	mov	r3, r0
 80147d8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 80147da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80147de:	2b00      	cmp	r3, #0
 80147e0:	db01      	blt.n	80147e6 <tcp_kill_prio+0x16>
 80147e2:	79fb      	ldrb	r3, [r7, #7]
 80147e4:	e000      	b.n	80147e8 <tcp_kill_prio+0x18>
 80147e6:	237f      	movs	r3, #127	; 0x7f
 80147e8:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 80147ea:	7afb      	ldrb	r3, [r7, #11]
 80147ec:	2b00      	cmp	r3, #0
 80147ee:	d034      	beq.n	801485a <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 80147f0:	7afb      	ldrb	r3, [r7, #11]
 80147f2:	3b01      	subs	r3, #1
 80147f4:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 80147f6:	2300      	movs	r3, #0
 80147f8:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80147fa:	2300      	movs	r3, #0
 80147fc:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80147fe:	4b19      	ldr	r3, [pc, #100]	; (8014864 <tcp_kill_prio+0x94>)
 8014800:	681b      	ldr	r3, [r3, #0]
 8014802:	617b      	str	r3, [r7, #20]
 8014804:	e01f      	b.n	8014846 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8014806:	697b      	ldr	r3, [r7, #20]
 8014808:	7d5b      	ldrb	r3, [r3, #21]
 801480a:	7afa      	ldrb	r2, [r7, #11]
 801480c:	429a      	cmp	r2, r3
 801480e:	d80c      	bhi.n	801482a <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8014810:	697b      	ldr	r3, [r7, #20]
 8014812:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8014814:	7afa      	ldrb	r2, [r7, #11]
 8014816:	429a      	cmp	r2, r3
 8014818:	d112      	bne.n	8014840 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 801481a:	4b13      	ldr	r3, [pc, #76]	; (8014868 <tcp_kill_prio+0x98>)
 801481c:	681a      	ldr	r2, [r3, #0]
 801481e:	697b      	ldr	r3, [r7, #20]
 8014820:	6a1b      	ldr	r3, [r3, #32]
 8014822:	1ad3      	subs	r3, r2, r3
 8014824:	68fa      	ldr	r2, [r7, #12]
 8014826:	429a      	cmp	r2, r3
 8014828:	d80a      	bhi.n	8014840 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 801482a:	4b0f      	ldr	r3, [pc, #60]	; (8014868 <tcp_kill_prio+0x98>)
 801482c:	681a      	ldr	r2, [r3, #0]
 801482e:	697b      	ldr	r3, [r7, #20]
 8014830:	6a1b      	ldr	r3, [r3, #32]
 8014832:	1ad3      	subs	r3, r2, r3
 8014834:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8014836:	697b      	ldr	r3, [r7, #20]
 8014838:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 801483a:	697b      	ldr	r3, [r7, #20]
 801483c:	7d5b      	ldrb	r3, [r3, #21]
 801483e:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8014840:	697b      	ldr	r3, [r7, #20]
 8014842:	68db      	ldr	r3, [r3, #12]
 8014844:	617b      	str	r3, [r7, #20]
 8014846:	697b      	ldr	r3, [r7, #20]
 8014848:	2b00      	cmp	r3, #0
 801484a:	d1dc      	bne.n	8014806 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 801484c:	693b      	ldr	r3, [r7, #16]
 801484e:	2b00      	cmp	r3, #0
 8014850:	d004      	beq.n	801485c <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8014852:	6938      	ldr	r0, [r7, #16]
 8014854:	f7ff f8ae 	bl	80139b4 <tcp_abort>
 8014858:	e000      	b.n	801485c <tcp_kill_prio+0x8c>
    return;
 801485a:	bf00      	nop
  }
}
 801485c:	3718      	adds	r7, #24
 801485e:	46bd      	mov	sp, r7
 8014860:	bd80      	pop	{r7, pc}
 8014862:	bf00      	nop
 8014864:	24007f3c 	.word	0x24007f3c
 8014868:	24007f40 	.word	0x24007f40

0801486c <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 801486c:	b580      	push	{r7, lr}
 801486e:	b086      	sub	sp, #24
 8014870:	af00      	add	r7, sp, #0
 8014872:	4603      	mov	r3, r0
 8014874:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8014876:	79fb      	ldrb	r3, [r7, #7]
 8014878:	2b08      	cmp	r3, #8
 801487a:	d009      	beq.n	8014890 <tcp_kill_state+0x24>
 801487c:	79fb      	ldrb	r3, [r7, #7]
 801487e:	2b09      	cmp	r3, #9
 8014880:	d006      	beq.n	8014890 <tcp_kill_state+0x24>
 8014882:	4b1a      	ldr	r3, [pc, #104]	; (80148ec <tcp_kill_state+0x80>)
 8014884:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8014888:	4919      	ldr	r1, [pc, #100]	; (80148f0 <tcp_kill_state+0x84>)
 801488a:	481a      	ldr	r0, [pc, #104]	; (80148f4 <tcp_kill_state+0x88>)
 801488c:	f00a feba 	bl	801f604 <iprintf>

  inactivity = 0;
 8014890:	2300      	movs	r3, #0
 8014892:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8014894:	2300      	movs	r3, #0
 8014896:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8014898:	4b17      	ldr	r3, [pc, #92]	; (80148f8 <tcp_kill_state+0x8c>)
 801489a:	681b      	ldr	r3, [r3, #0]
 801489c:	617b      	str	r3, [r7, #20]
 801489e:	e017      	b.n	80148d0 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 80148a0:	697b      	ldr	r3, [r7, #20]
 80148a2:	7d1b      	ldrb	r3, [r3, #20]
 80148a4:	79fa      	ldrb	r2, [r7, #7]
 80148a6:	429a      	cmp	r2, r3
 80148a8:	d10f      	bne.n	80148ca <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80148aa:	4b14      	ldr	r3, [pc, #80]	; (80148fc <tcp_kill_state+0x90>)
 80148ac:	681a      	ldr	r2, [r3, #0]
 80148ae:	697b      	ldr	r3, [r7, #20]
 80148b0:	6a1b      	ldr	r3, [r3, #32]
 80148b2:	1ad3      	subs	r3, r2, r3
 80148b4:	68fa      	ldr	r2, [r7, #12]
 80148b6:	429a      	cmp	r2, r3
 80148b8:	d807      	bhi.n	80148ca <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 80148ba:	4b10      	ldr	r3, [pc, #64]	; (80148fc <tcp_kill_state+0x90>)
 80148bc:	681a      	ldr	r2, [r3, #0]
 80148be:	697b      	ldr	r3, [r7, #20]
 80148c0:	6a1b      	ldr	r3, [r3, #32]
 80148c2:	1ad3      	subs	r3, r2, r3
 80148c4:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 80148c6:	697b      	ldr	r3, [r7, #20]
 80148c8:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80148ca:	697b      	ldr	r3, [r7, #20]
 80148cc:	68db      	ldr	r3, [r3, #12]
 80148ce:	617b      	str	r3, [r7, #20]
 80148d0:	697b      	ldr	r3, [r7, #20]
 80148d2:	2b00      	cmp	r3, #0
 80148d4:	d1e4      	bne.n	80148a0 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 80148d6:	693b      	ldr	r3, [r7, #16]
 80148d8:	2b00      	cmp	r3, #0
 80148da:	d003      	beq.n	80148e4 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 80148dc:	2100      	movs	r1, #0
 80148de:	6938      	ldr	r0, [r7, #16]
 80148e0:	f7fe ffaa 	bl	8013838 <tcp_abandon>
  }
}
 80148e4:	bf00      	nop
 80148e6:	3718      	adds	r7, #24
 80148e8:	46bd      	mov	sp, r7
 80148ea:	bd80      	pop	{r7, pc}
 80148ec:	08024d2c 	.word	0x08024d2c
 80148f0:	080252b8 	.word	0x080252b8
 80148f4:	08024d70 	.word	0x08024d70
 80148f8:	24007f3c 	.word	0x24007f3c
 80148fc:	24007f40 	.word	0x24007f40

08014900 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8014900:	b580      	push	{r7, lr}
 8014902:	b084      	sub	sp, #16
 8014904:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8014906:	2300      	movs	r3, #0
 8014908:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 801490a:	2300      	movs	r3, #0
 801490c:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801490e:	4b12      	ldr	r3, [pc, #72]	; (8014958 <tcp_kill_timewait+0x58>)
 8014910:	681b      	ldr	r3, [r3, #0]
 8014912:	60fb      	str	r3, [r7, #12]
 8014914:	e012      	b.n	801493c <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8014916:	4b11      	ldr	r3, [pc, #68]	; (801495c <tcp_kill_timewait+0x5c>)
 8014918:	681a      	ldr	r2, [r3, #0]
 801491a:	68fb      	ldr	r3, [r7, #12]
 801491c:	6a1b      	ldr	r3, [r3, #32]
 801491e:	1ad3      	subs	r3, r2, r3
 8014920:	687a      	ldr	r2, [r7, #4]
 8014922:	429a      	cmp	r2, r3
 8014924:	d807      	bhi.n	8014936 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8014926:	4b0d      	ldr	r3, [pc, #52]	; (801495c <tcp_kill_timewait+0x5c>)
 8014928:	681a      	ldr	r2, [r3, #0]
 801492a:	68fb      	ldr	r3, [r7, #12]
 801492c:	6a1b      	ldr	r3, [r3, #32]
 801492e:	1ad3      	subs	r3, r2, r3
 8014930:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8014932:	68fb      	ldr	r3, [r7, #12]
 8014934:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8014936:	68fb      	ldr	r3, [r7, #12]
 8014938:	68db      	ldr	r3, [r3, #12]
 801493a:	60fb      	str	r3, [r7, #12]
 801493c:	68fb      	ldr	r3, [r7, #12]
 801493e:	2b00      	cmp	r3, #0
 8014940:	d1e9      	bne.n	8014916 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8014942:	68bb      	ldr	r3, [r7, #8]
 8014944:	2b00      	cmp	r3, #0
 8014946:	d002      	beq.n	801494e <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8014948:	68b8      	ldr	r0, [r7, #8]
 801494a:	f7ff f833 	bl	80139b4 <tcp_abort>
  }
}
 801494e:	bf00      	nop
 8014950:	3710      	adds	r7, #16
 8014952:	46bd      	mov	sp, r7
 8014954:	bd80      	pop	{r7, pc}
 8014956:	bf00      	nop
 8014958:	24007f4c 	.word	0x24007f4c
 801495c:	24007f40 	.word	0x24007f40

08014960 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8014960:	b580      	push	{r7, lr}
 8014962:	b082      	sub	sp, #8
 8014964:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8014966:	4b10      	ldr	r3, [pc, #64]	; (80149a8 <tcp_handle_closepend+0x48>)
 8014968:	681b      	ldr	r3, [r3, #0]
 801496a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 801496c:	e014      	b.n	8014998 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 801496e:	687b      	ldr	r3, [r7, #4]
 8014970:	68db      	ldr	r3, [r3, #12]
 8014972:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8014974:	687b      	ldr	r3, [r7, #4]
 8014976:	8b5b      	ldrh	r3, [r3, #26]
 8014978:	f003 0308 	and.w	r3, r3, #8
 801497c:	2b00      	cmp	r3, #0
 801497e:	d009      	beq.n	8014994 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8014980:	687b      	ldr	r3, [r7, #4]
 8014982:	8b5b      	ldrh	r3, [r3, #26]
 8014984:	f023 0308 	bic.w	r3, r3, #8
 8014988:	b29a      	uxth	r2, r3
 801498a:	687b      	ldr	r3, [r7, #4]
 801498c:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 801498e:	6878      	ldr	r0, [r7, #4]
 8014990:	f7fe fe60 	bl	8013654 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8014994:	683b      	ldr	r3, [r7, #0]
 8014996:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8014998:	687b      	ldr	r3, [r7, #4]
 801499a:	2b00      	cmp	r3, #0
 801499c:	d1e7      	bne.n	801496e <tcp_handle_closepend+0xe>
  }
}
 801499e:	bf00      	nop
 80149a0:	bf00      	nop
 80149a2:	3708      	adds	r7, #8
 80149a4:	46bd      	mov	sp, r7
 80149a6:	bd80      	pop	{r7, pc}
 80149a8:	24007f3c 	.word	0x24007f3c

080149ac <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 80149ac:	b580      	push	{r7, lr}
 80149ae:	b084      	sub	sp, #16
 80149b0:	af00      	add	r7, sp, #0
 80149b2:	4603      	mov	r3, r0
 80149b4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80149b6:	2001      	movs	r0, #1
 80149b8:	f7fd faa4 	bl	8011f04 <memp_malloc>
 80149bc:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 80149be:	68fb      	ldr	r3, [r7, #12]
 80149c0:	2b00      	cmp	r3, #0
 80149c2:	d126      	bne.n	8014a12 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 80149c4:	f7ff ffcc 	bl	8014960 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 80149c8:	f7ff ff9a 	bl	8014900 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80149cc:	2001      	movs	r0, #1
 80149ce:	f7fd fa99 	bl	8011f04 <memp_malloc>
 80149d2:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 80149d4:	68fb      	ldr	r3, [r7, #12]
 80149d6:	2b00      	cmp	r3, #0
 80149d8:	d11b      	bne.n	8014a12 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 80149da:	2009      	movs	r0, #9
 80149dc:	f7ff ff46 	bl	801486c <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80149e0:	2001      	movs	r0, #1
 80149e2:	f7fd fa8f 	bl	8011f04 <memp_malloc>
 80149e6:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 80149e8:	68fb      	ldr	r3, [r7, #12]
 80149ea:	2b00      	cmp	r3, #0
 80149ec:	d111      	bne.n	8014a12 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 80149ee:	2008      	movs	r0, #8
 80149f0:	f7ff ff3c 	bl	801486c <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80149f4:	2001      	movs	r0, #1
 80149f6:	f7fd fa85 	bl	8011f04 <memp_malloc>
 80149fa:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 80149fc:	68fb      	ldr	r3, [r7, #12]
 80149fe:	2b00      	cmp	r3, #0
 8014a00:	d107      	bne.n	8014a12 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8014a02:	79fb      	ldrb	r3, [r7, #7]
 8014a04:	4618      	mov	r0, r3
 8014a06:	f7ff fee3 	bl	80147d0 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8014a0a:	2001      	movs	r0, #1
 8014a0c:	f7fd fa7a 	bl	8011f04 <memp_malloc>
 8014a10:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8014a12:	68fb      	ldr	r3, [r7, #12]
 8014a14:	2b00      	cmp	r3, #0
 8014a16:	d03f      	beq.n	8014a98 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8014a18:	229c      	movs	r2, #156	; 0x9c
 8014a1a:	2100      	movs	r1, #0
 8014a1c:	68f8      	ldr	r0, [r7, #12]
 8014a1e:	f009 ffa3 	bl	801e968 <memset>
    pcb->prio = prio;
 8014a22:	68fb      	ldr	r3, [r7, #12]
 8014a24:	79fa      	ldrb	r2, [r7, #7]
 8014a26:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8014a28:	68fb      	ldr	r3, [r7, #12]
 8014a2a:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8014a2e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8014a32:	68fb      	ldr	r3, [r7, #12]
 8014a34:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8014a38:	855a      	strh	r2, [r3, #42]	; 0x2a
 8014a3a:	68fb      	ldr	r3, [r7, #12]
 8014a3c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8014a3e:	68fb      	ldr	r3, [r7, #12]
 8014a40:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8014a42:	68fb      	ldr	r3, [r7, #12]
 8014a44:	22ff      	movs	r2, #255	; 0xff
 8014a46:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8014a48:	68fb      	ldr	r3, [r7, #12]
 8014a4a:	f44f 7206 	mov.w	r2, #536	; 0x218
 8014a4e:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8014a50:	68fb      	ldr	r3, [r7, #12]
 8014a52:	2206      	movs	r2, #6
 8014a54:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8014a58:	68fb      	ldr	r3, [r7, #12]
 8014a5a:	2206      	movs	r2, #6
 8014a5c:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8014a5e:	68fb      	ldr	r3, [r7, #12]
 8014a60:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014a64:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8014a66:	68fb      	ldr	r3, [r7, #12]
 8014a68:	2201      	movs	r2, #1
 8014a6a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8014a6e:	4b0d      	ldr	r3, [pc, #52]	; (8014aa4 <tcp_alloc+0xf8>)
 8014a70:	681a      	ldr	r2, [r3, #0]
 8014a72:	68fb      	ldr	r3, [r7, #12]
 8014a74:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8014a76:	4b0c      	ldr	r3, [pc, #48]	; (8014aa8 <tcp_alloc+0xfc>)
 8014a78:	781a      	ldrb	r2, [r3, #0]
 8014a7a:	68fb      	ldr	r3, [r7, #12]
 8014a7c:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8014a7e:	68fb      	ldr	r3, [r7, #12]
 8014a80:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8014a84:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8014a88:	68fb      	ldr	r3, [r7, #12]
 8014a8a:	4a08      	ldr	r2, [pc, #32]	; (8014aac <tcp_alloc+0x100>)
 8014a8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8014a90:	68fb      	ldr	r3, [r7, #12]
 8014a92:	4a07      	ldr	r2, [pc, #28]	; (8014ab0 <tcp_alloc+0x104>)
 8014a94:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8014a98:	68fb      	ldr	r3, [r7, #12]
}
 8014a9a:	4618      	mov	r0, r3
 8014a9c:	3710      	adds	r7, #16
 8014a9e:	46bd      	mov	sp, r7
 8014aa0:	bd80      	pop	{r7, pc}
 8014aa2:	bf00      	nop
 8014aa4:	24007f40 	.word	0x24007f40
 8014aa8:	2400453e 	.word	0x2400453e
 8014aac:	08014765 	.word	0x08014765
 8014ab0:	006ddd00 	.word	0x006ddd00

08014ab4 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 8014ab4:	b580      	push	{r7, lr}
 8014ab6:	b084      	sub	sp, #16
 8014ab8:	af00      	add	r7, sp, #0
 8014aba:	4603      	mov	r3, r0
 8014abc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 8014abe:	2040      	movs	r0, #64	; 0x40
 8014ac0:	f7ff ff74 	bl	80149ac <tcp_alloc>
 8014ac4:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8014ac6:	68fb      	ldr	r3, [r7, #12]
}
 8014ac8:	4618      	mov	r0, r3
 8014aca:	3710      	adds	r7, #16
 8014acc:	46bd      	mov	sp, r7
 8014ace:	bd80      	pop	{r7, pc}

08014ad0 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8014ad0:	b480      	push	{r7}
 8014ad2:	b083      	sub	sp, #12
 8014ad4:	af00      	add	r7, sp, #0
 8014ad6:	6078      	str	r0, [r7, #4]
 8014ad8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8014ada:	687b      	ldr	r3, [r7, #4]
 8014adc:	2b00      	cmp	r3, #0
 8014ade:	d002      	beq.n	8014ae6 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8014ae0:	687b      	ldr	r3, [r7, #4]
 8014ae2:	683a      	ldr	r2, [r7, #0]
 8014ae4:	611a      	str	r2, [r3, #16]
  }
}
 8014ae6:	bf00      	nop
 8014ae8:	370c      	adds	r7, #12
 8014aea:	46bd      	mov	sp, r7
 8014aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014af0:	4770      	bx	lr
	...

08014af4 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8014af4:	b580      	push	{r7, lr}
 8014af6:	b082      	sub	sp, #8
 8014af8:	af00      	add	r7, sp, #0
 8014afa:	6078      	str	r0, [r7, #4]
 8014afc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8014afe:	687b      	ldr	r3, [r7, #4]
 8014b00:	2b00      	cmp	r3, #0
 8014b02:	d00e      	beq.n	8014b22 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8014b04:	687b      	ldr	r3, [r7, #4]
 8014b06:	7d1b      	ldrb	r3, [r3, #20]
 8014b08:	2b01      	cmp	r3, #1
 8014b0a:	d106      	bne.n	8014b1a <tcp_recv+0x26>
 8014b0c:	4b07      	ldr	r3, [pc, #28]	; (8014b2c <tcp_recv+0x38>)
 8014b0e:	f240 72df 	movw	r2, #2015	; 0x7df
 8014b12:	4907      	ldr	r1, [pc, #28]	; (8014b30 <tcp_recv+0x3c>)
 8014b14:	4807      	ldr	r0, [pc, #28]	; (8014b34 <tcp_recv+0x40>)
 8014b16:	f00a fd75 	bl	801f604 <iprintf>
    pcb->recv = recv;
 8014b1a:	687b      	ldr	r3, [r7, #4]
 8014b1c:	683a      	ldr	r2, [r7, #0]
 8014b1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 8014b22:	bf00      	nop
 8014b24:	3708      	adds	r7, #8
 8014b26:	46bd      	mov	sp, r7
 8014b28:	bd80      	pop	{r7, pc}
 8014b2a:	bf00      	nop
 8014b2c:	08024d2c 	.word	0x08024d2c
 8014b30:	080252c8 	.word	0x080252c8
 8014b34:	08024d70 	.word	0x08024d70

08014b38 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8014b38:	b580      	push	{r7, lr}
 8014b3a:	b082      	sub	sp, #8
 8014b3c:	af00      	add	r7, sp, #0
 8014b3e:	6078      	str	r0, [r7, #4]
 8014b40:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8014b42:	687b      	ldr	r3, [r7, #4]
 8014b44:	2b00      	cmp	r3, #0
 8014b46:	d00e      	beq.n	8014b66 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8014b48:	687b      	ldr	r3, [r7, #4]
 8014b4a:	7d1b      	ldrb	r3, [r3, #20]
 8014b4c:	2b01      	cmp	r3, #1
 8014b4e:	d106      	bne.n	8014b5e <tcp_sent+0x26>
 8014b50:	4b07      	ldr	r3, [pc, #28]	; (8014b70 <tcp_sent+0x38>)
 8014b52:	f240 72f3 	movw	r2, #2035	; 0x7f3
 8014b56:	4907      	ldr	r1, [pc, #28]	; (8014b74 <tcp_sent+0x3c>)
 8014b58:	4807      	ldr	r0, [pc, #28]	; (8014b78 <tcp_sent+0x40>)
 8014b5a:	f00a fd53 	bl	801f604 <iprintf>
    pcb->sent = sent;
 8014b5e:	687b      	ldr	r3, [r7, #4]
 8014b60:	683a      	ldr	r2, [r7, #0]
 8014b62:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 8014b66:	bf00      	nop
 8014b68:	3708      	adds	r7, #8
 8014b6a:	46bd      	mov	sp, r7
 8014b6c:	bd80      	pop	{r7, pc}
 8014b6e:	bf00      	nop
 8014b70:	08024d2c 	.word	0x08024d2c
 8014b74:	080252f0 	.word	0x080252f0
 8014b78:	08024d70 	.word	0x08024d70

08014b7c <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8014b7c:	b580      	push	{r7, lr}
 8014b7e:	b082      	sub	sp, #8
 8014b80:	af00      	add	r7, sp, #0
 8014b82:	6078      	str	r0, [r7, #4]
 8014b84:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8014b86:	687b      	ldr	r3, [r7, #4]
 8014b88:	2b00      	cmp	r3, #0
 8014b8a:	d00e      	beq.n	8014baa <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8014b8c:	687b      	ldr	r3, [r7, #4]
 8014b8e:	7d1b      	ldrb	r3, [r3, #20]
 8014b90:	2b01      	cmp	r3, #1
 8014b92:	d106      	bne.n	8014ba2 <tcp_err+0x26>
 8014b94:	4b07      	ldr	r3, [pc, #28]	; (8014bb4 <tcp_err+0x38>)
 8014b96:	f640 020d 	movw	r2, #2061	; 0x80d
 8014b9a:	4907      	ldr	r1, [pc, #28]	; (8014bb8 <tcp_err+0x3c>)
 8014b9c:	4807      	ldr	r0, [pc, #28]	; (8014bbc <tcp_err+0x40>)
 8014b9e:	f00a fd31 	bl	801f604 <iprintf>
    pcb->errf = err;
 8014ba2:	687b      	ldr	r3, [r7, #4]
 8014ba4:	683a      	ldr	r2, [r7, #0]
 8014ba6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 8014baa:	bf00      	nop
 8014bac:	3708      	adds	r7, #8
 8014bae:	46bd      	mov	sp, r7
 8014bb0:	bd80      	pop	{r7, pc}
 8014bb2:	bf00      	nop
 8014bb4:	08024d2c 	.word	0x08024d2c
 8014bb8:	08025318 	.word	0x08025318
 8014bbc:	08024d70 	.word	0x08024d70

08014bc0 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 8014bc0:	b480      	push	{r7}
 8014bc2:	b085      	sub	sp, #20
 8014bc4:	af00      	add	r7, sp, #0
 8014bc6:	6078      	str	r0, [r7, #4]
 8014bc8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8014bca:	687b      	ldr	r3, [r7, #4]
 8014bcc:	2b00      	cmp	r3, #0
 8014bce:	d008      	beq.n	8014be2 <tcp_accept+0x22>
 8014bd0:	687b      	ldr	r3, [r7, #4]
 8014bd2:	7d1b      	ldrb	r3, [r3, #20]
 8014bd4:	2b01      	cmp	r3, #1
 8014bd6:	d104      	bne.n	8014be2 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 8014bd8:	687b      	ldr	r3, [r7, #4]
 8014bda:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8014bdc:	68fb      	ldr	r3, [r7, #12]
 8014bde:	683a      	ldr	r2, [r7, #0]
 8014be0:	619a      	str	r2, [r3, #24]
  }
}
 8014be2:	bf00      	nop
 8014be4:	3714      	adds	r7, #20
 8014be6:	46bd      	mov	sp, r7
 8014be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bec:	4770      	bx	lr
	...

08014bf0 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8014bf0:	b580      	push	{r7, lr}
 8014bf2:	b084      	sub	sp, #16
 8014bf4:	af00      	add	r7, sp, #0
 8014bf6:	60f8      	str	r0, [r7, #12]
 8014bf8:	60b9      	str	r1, [r7, #8]
 8014bfa:	4613      	mov	r3, r2
 8014bfc:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8014bfe:	68fb      	ldr	r3, [r7, #12]
 8014c00:	2b00      	cmp	r3, #0
 8014c02:	d107      	bne.n	8014c14 <tcp_poll+0x24>
 8014c04:	4b0e      	ldr	r3, [pc, #56]	; (8014c40 <tcp_poll+0x50>)
 8014c06:	f640 023d 	movw	r2, #2109	; 0x83d
 8014c0a:	490e      	ldr	r1, [pc, #56]	; (8014c44 <tcp_poll+0x54>)
 8014c0c:	480e      	ldr	r0, [pc, #56]	; (8014c48 <tcp_poll+0x58>)
 8014c0e:	f00a fcf9 	bl	801f604 <iprintf>
 8014c12:	e011      	b.n	8014c38 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8014c14:	68fb      	ldr	r3, [r7, #12]
 8014c16:	7d1b      	ldrb	r3, [r3, #20]
 8014c18:	2b01      	cmp	r3, #1
 8014c1a:	d106      	bne.n	8014c2a <tcp_poll+0x3a>
 8014c1c:	4b08      	ldr	r3, [pc, #32]	; (8014c40 <tcp_poll+0x50>)
 8014c1e:	f640 023e 	movw	r2, #2110	; 0x83e
 8014c22:	490a      	ldr	r1, [pc, #40]	; (8014c4c <tcp_poll+0x5c>)
 8014c24:	4808      	ldr	r0, [pc, #32]	; (8014c48 <tcp_poll+0x58>)
 8014c26:	f00a fced 	bl	801f604 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8014c2a:	68fb      	ldr	r3, [r7, #12]
 8014c2c:	68ba      	ldr	r2, [r7, #8]
 8014c2e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8014c32:	68fb      	ldr	r3, [r7, #12]
 8014c34:	79fa      	ldrb	r2, [r7, #7]
 8014c36:	775a      	strb	r2, [r3, #29]
}
 8014c38:	3710      	adds	r7, #16
 8014c3a:	46bd      	mov	sp, r7
 8014c3c:	bd80      	pop	{r7, pc}
 8014c3e:	bf00      	nop
 8014c40:	08024d2c 	.word	0x08024d2c
 8014c44:	08025340 	.word	0x08025340
 8014c48:	08024d70 	.word	0x08024d70
 8014c4c:	08025358 	.word	0x08025358

08014c50 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8014c50:	b580      	push	{r7, lr}
 8014c52:	b082      	sub	sp, #8
 8014c54:	af00      	add	r7, sp, #0
 8014c56:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8014c58:	687b      	ldr	r3, [r7, #4]
 8014c5a:	2b00      	cmp	r3, #0
 8014c5c:	d107      	bne.n	8014c6e <tcp_pcb_purge+0x1e>
 8014c5e:	4b21      	ldr	r3, [pc, #132]	; (8014ce4 <tcp_pcb_purge+0x94>)
 8014c60:	f640 0251 	movw	r2, #2129	; 0x851
 8014c64:	4920      	ldr	r1, [pc, #128]	; (8014ce8 <tcp_pcb_purge+0x98>)
 8014c66:	4821      	ldr	r0, [pc, #132]	; (8014cec <tcp_pcb_purge+0x9c>)
 8014c68:	f00a fccc 	bl	801f604 <iprintf>
 8014c6c:	e037      	b.n	8014cde <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8014c6e:	687b      	ldr	r3, [r7, #4]
 8014c70:	7d1b      	ldrb	r3, [r3, #20]
 8014c72:	2b00      	cmp	r3, #0
 8014c74:	d033      	beq.n	8014cde <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8014c76:	687b      	ldr	r3, [r7, #4]
 8014c78:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8014c7a:	2b0a      	cmp	r3, #10
 8014c7c:	d02f      	beq.n	8014cde <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8014c7e:	687b      	ldr	r3, [r7, #4]
 8014c80:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8014c82:	2b01      	cmp	r3, #1
 8014c84:	d02b      	beq.n	8014cde <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8014c86:	687b      	ldr	r3, [r7, #4]
 8014c88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014c8a:	2b00      	cmp	r3, #0
 8014c8c:	d007      	beq.n	8014c9e <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8014c8e:	687b      	ldr	r3, [r7, #4]
 8014c90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014c92:	4618      	mov	r0, r3
 8014c94:	f7fe f88e 	bl	8012db4 <pbuf_free>
      pcb->refused_data = NULL;
 8014c98:	687b      	ldr	r3, [r7, #4]
 8014c9a:	2200      	movs	r2, #0
 8014c9c:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8014c9e:	687b      	ldr	r3, [r7, #4]
 8014ca0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014ca2:	2b00      	cmp	r3, #0
 8014ca4:	d002      	beq.n	8014cac <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8014ca6:	6878      	ldr	r0, [r7, #4]
 8014ca8:	f000 f986 	bl	8014fb8 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8014cac:	687b      	ldr	r3, [r7, #4]
 8014cae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014cb2:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8014cb4:	687b      	ldr	r3, [r7, #4]
 8014cb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014cb8:	4618      	mov	r0, r3
 8014cba:	f7ff fcf9 	bl	80146b0 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8014cbe:	687b      	ldr	r3, [r7, #4]
 8014cc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014cc2:	4618      	mov	r0, r3
 8014cc4:	f7ff fcf4 	bl	80146b0 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8014cc8:	687b      	ldr	r3, [r7, #4]
 8014cca:	2200      	movs	r2, #0
 8014ccc:	66da      	str	r2, [r3, #108]	; 0x6c
 8014cce:	687b      	ldr	r3, [r7, #4]
 8014cd0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8014cd2:	687b      	ldr	r3, [r7, #4]
 8014cd4:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8014cd6:	687b      	ldr	r3, [r7, #4]
 8014cd8:	2200      	movs	r2, #0
 8014cda:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8014cde:	3708      	adds	r7, #8
 8014ce0:	46bd      	mov	sp, r7
 8014ce2:	bd80      	pop	{r7, pc}
 8014ce4:	08024d2c 	.word	0x08024d2c
 8014ce8:	08025378 	.word	0x08025378
 8014cec:	08024d70 	.word	0x08024d70

08014cf0 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8014cf0:	b580      	push	{r7, lr}
 8014cf2:	b084      	sub	sp, #16
 8014cf4:	af00      	add	r7, sp, #0
 8014cf6:	6078      	str	r0, [r7, #4]
 8014cf8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8014cfa:	683b      	ldr	r3, [r7, #0]
 8014cfc:	2b00      	cmp	r3, #0
 8014cfe:	d106      	bne.n	8014d0e <tcp_pcb_remove+0x1e>
 8014d00:	4b3e      	ldr	r3, [pc, #248]	; (8014dfc <tcp_pcb_remove+0x10c>)
 8014d02:	f640 0283 	movw	r2, #2179	; 0x883
 8014d06:	493e      	ldr	r1, [pc, #248]	; (8014e00 <tcp_pcb_remove+0x110>)
 8014d08:	483e      	ldr	r0, [pc, #248]	; (8014e04 <tcp_pcb_remove+0x114>)
 8014d0a:	f00a fc7b 	bl	801f604 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8014d0e:	687b      	ldr	r3, [r7, #4]
 8014d10:	2b00      	cmp	r3, #0
 8014d12:	d106      	bne.n	8014d22 <tcp_pcb_remove+0x32>
 8014d14:	4b39      	ldr	r3, [pc, #228]	; (8014dfc <tcp_pcb_remove+0x10c>)
 8014d16:	f640 0284 	movw	r2, #2180	; 0x884
 8014d1a:	493b      	ldr	r1, [pc, #236]	; (8014e08 <tcp_pcb_remove+0x118>)
 8014d1c:	4839      	ldr	r0, [pc, #228]	; (8014e04 <tcp_pcb_remove+0x114>)
 8014d1e:	f00a fc71 	bl	801f604 <iprintf>

  TCP_RMV(pcblist, pcb);
 8014d22:	687b      	ldr	r3, [r7, #4]
 8014d24:	681b      	ldr	r3, [r3, #0]
 8014d26:	683a      	ldr	r2, [r7, #0]
 8014d28:	429a      	cmp	r2, r3
 8014d2a:	d105      	bne.n	8014d38 <tcp_pcb_remove+0x48>
 8014d2c:	687b      	ldr	r3, [r7, #4]
 8014d2e:	681b      	ldr	r3, [r3, #0]
 8014d30:	68da      	ldr	r2, [r3, #12]
 8014d32:	687b      	ldr	r3, [r7, #4]
 8014d34:	601a      	str	r2, [r3, #0]
 8014d36:	e013      	b.n	8014d60 <tcp_pcb_remove+0x70>
 8014d38:	687b      	ldr	r3, [r7, #4]
 8014d3a:	681b      	ldr	r3, [r3, #0]
 8014d3c:	60fb      	str	r3, [r7, #12]
 8014d3e:	e00c      	b.n	8014d5a <tcp_pcb_remove+0x6a>
 8014d40:	68fb      	ldr	r3, [r7, #12]
 8014d42:	68db      	ldr	r3, [r3, #12]
 8014d44:	683a      	ldr	r2, [r7, #0]
 8014d46:	429a      	cmp	r2, r3
 8014d48:	d104      	bne.n	8014d54 <tcp_pcb_remove+0x64>
 8014d4a:	683b      	ldr	r3, [r7, #0]
 8014d4c:	68da      	ldr	r2, [r3, #12]
 8014d4e:	68fb      	ldr	r3, [r7, #12]
 8014d50:	60da      	str	r2, [r3, #12]
 8014d52:	e005      	b.n	8014d60 <tcp_pcb_remove+0x70>
 8014d54:	68fb      	ldr	r3, [r7, #12]
 8014d56:	68db      	ldr	r3, [r3, #12]
 8014d58:	60fb      	str	r3, [r7, #12]
 8014d5a:	68fb      	ldr	r3, [r7, #12]
 8014d5c:	2b00      	cmp	r3, #0
 8014d5e:	d1ef      	bne.n	8014d40 <tcp_pcb_remove+0x50>
 8014d60:	683b      	ldr	r3, [r7, #0]
 8014d62:	2200      	movs	r2, #0
 8014d64:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8014d66:	6838      	ldr	r0, [r7, #0]
 8014d68:	f7ff ff72 	bl	8014c50 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8014d6c:	683b      	ldr	r3, [r7, #0]
 8014d6e:	7d1b      	ldrb	r3, [r3, #20]
 8014d70:	2b0a      	cmp	r3, #10
 8014d72:	d013      	beq.n	8014d9c <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8014d74:	683b      	ldr	r3, [r7, #0]
 8014d76:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8014d78:	2b01      	cmp	r3, #1
 8014d7a:	d00f      	beq.n	8014d9c <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8014d7c:	683b      	ldr	r3, [r7, #0]
 8014d7e:	8b5b      	ldrh	r3, [r3, #26]
 8014d80:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8014d84:	2b00      	cmp	r3, #0
 8014d86:	d009      	beq.n	8014d9c <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8014d88:	683b      	ldr	r3, [r7, #0]
 8014d8a:	8b5b      	ldrh	r3, [r3, #26]
 8014d8c:	f043 0302 	orr.w	r3, r3, #2
 8014d90:	b29a      	uxth	r2, r3
 8014d92:	683b      	ldr	r3, [r7, #0]
 8014d94:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8014d96:	6838      	ldr	r0, [r7, #0]
 8014d98:	f003 fbc2 	bl	8018520 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8014d9c:	683b      	ldr	r3, [r7, #0]
 8014d9e:	7d1b      	ldrb	r3, [r3, #20]
 8014da0:	2b01      	cmp	r3, #1
 8014da2:	d020      	beq.n	8014de6 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8014da4:	683b      	ldr	r3, [r7, #0]
 8014da6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014da8:	2b00      	cmp	r3, #0
 8014daa:	d006      	beq.n	8014dba <tcp_pcb_remove+0xca>
 8014dac:	4b13      	ldr	r3, [pc, #76]	; (8014dfc <tcp_pcb_remove+0x10c>)
 8014dae:	f640 0293 	movw	r2, #2195	; 0x893
 8014db2:	4916      	ldr	r1, [pc, #88]	; (8014e0c <tcp_pcb_remove+0x11c>)
 8014db4:	4813      	ldr	r0, [pc, #76]	; (8014e04 <tcp_pcb_remove+0x114>)
 8014db6:	f00a fc25 	bl	801f604 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8014dba:	683b      	ldr	r3, [r7, #0]
 8014dbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014dbe:	2b00      	cmp	r3, #0
 8014dc0:	d006      	beq.n	8014dd0 <tcp_pcb_remove+0xe0>
 8014dc2:	4b0e      	ldr	r3, [pc, #56]	; (8014dfc <tcp_pcb_remove+0x10c>)
 8014dc4:	f640 0294 	movw	r2, #2196	; 0x894
 8014dc8:	4911      	ldr	r1, [pc, #68]	; (8014e10 <tcp_pcb_remove+0x120>)
 8014dca:	480e      	ldr	r0, [pc, #56]	; (8014e04 <tcp_pcb_remove+0x114>)
 8014dcc:	f00a fc1a 	bl	801f604 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8014dd0:	683b      	ldr	r3, [r7, #0]
 8014dd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014dd4:	2b00      	cmp	r3, #0
 8014dd6:	d006      	beq.n	8014de6 <tcp_pcb_remove+0xf6>
 8014dd8:	4b08      	ldr	r3, [pc, #32]	; (8014dfc <tcp_pcb_remove+0x10c>)
 8014dda:	f640 0296 	movw	r2, #2198	; 0x896
 8014dde:	490d      	ldr	r1, [pc, #52]	; (8014e14 <tcp_pcb_remove+0x124>)
 8014de0:	4808      	ldr	r0, [pc, #32]	; (8014e04 <tcp_pcb_remove+0x114>)
 8014de2:	f00a fc0f 	bl	801f604 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8014de6:	683b      	ldr	r3, [r7, #0]
 8014de8:	2200      	movs	r2, #0
 8014dea:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8014dec:	683b      	ldr	r3, [r7, #0]
 8014dee:	2200      	movs	r2, #0
 8014df0:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8014df2:	bf00      	nop
 8014df4:	3710      	adds	r7, #16
 8014df6:	46bd      	mov	sp, r7
 8014df8:	bd80      	pop	{r7, pc}
 8014dfa:	bf00      	nop
 8014dfc:	08024d2c 	.word	0x08024d2c
 8014e00:	08025394 	.word	0x08025394
 8014e04:	08024d70 	.word	0x08024d70
 8014e08:	080253b0 	.word	0x080253b0
 8014e0c:	080253d0 	.word	0x080253d0
 8014e10:	080253e8 	.word	0x080253e8
 8014e14:	08025404 	.word	0x08025404

08014e18 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8014e18:	b580      	push	{r7, lr}
 8014e1a:	b082      	sub	sp, #8
 8014e1c:	af00      	add	r7, sp, #0
 8014e1e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8014e20:	687b      	ldr	r3, [r7, #4]
 8014e22:	2b00      	cmp	r3, #0
 8014e24:	d106      	bne.n	8014e34 <tcp_next_iss+0x1c>
 8014e26:	4b0a      	ldr	r3, [pc, #40]	; (8014e50 <tcp_next_iss+0x38>)
 8014e28:	f640 02af 	movw	r2, #2223	; 0x8af
 8014e2c:	4909      	ldr	r1, [pc, #36]	; (8014e54 <tcp_next_iss+0x3c>)
 8014e2e:	480a      	ldr	r0, [pc, #40]	; (8014e58 <tcp_next_iss+0x40>)
 8014e30:	f00a fbe8 	bl	801f604 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8014e34:	4b09      	ldr	r3, [pc, #36]	; (8014e5c <tcp_next_iss+0x44>)
 8014e36:	681a      	ldr	r2, [r3, #0]
 8014e38:	4b09      	ldr	r3, [pc, #36]	; (8014e60 <tcp_next_iss+0x48>)
 8014e3a:	681b      	ldr	r3, [r3, #0]
 8014e3c:	4413      	add	r3, r2
 8014e3e:	4a07      	ldr	r2, [pc, #28]	; (8014e5c <tcp_next_iss+0x44>)
 8014e40:	6013      	str	r3, [r2, #0]
  return iss;
 8014e42:	4b06      	ldr	r3, [pc, #24]	; (8014e5c <tcp_next_iss+0x44>)
 8014e44:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8014e46:	4618      	mov	r0, r3
 8014e48:	3708      	adds	r7, #8
 8014e4a:	46bd      	mov	sp, r7
 8014e4c:	bd80      	pop	{r7, pc}
 8014e4e:	bf00      	nop
 8014e50:	08024d2c 	.word	0x08024d2c
 8014e54:	0802541c 	.word	0x0802541c
 8014e58:	08024d70 	.word	0x08024d70
 8014e5c:	240002f8 	.word	0x240002f8
 8014e60:	24007f40 	.word	0x24007f40

08014e64 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8014e64:	b580      	push	{r7, lr}
 8014e66:	b086      	sub	sp, #24
 8014e68:	af00      	add	r7, sp, #0
 8014e6a:	4603      	mov	r3, r0
 8014e6c:	60b9      	str	r1, [r7, #8]
 8014e6e:	607a      	str	r2, [r7, #4]
 8014e70:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8014e72:	687b      	ldr	r3, [r7, #4]
 8014e74:	2b00      	cmp	r3, #0
 8014e76:	d106      	bne.n	8014e86 <tcp_eff_send_mss_netif+0x22>
 8014e78:	4b14      	ldr	r3, [pc, #80]	; (8014ecc <tcp_eff_send_mss_netif+0x68>)
 8014e7a:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8014e7e:	4914      	ldr	r1, [pc, #80]	; (8014ed0 <tcp_eff_send_mss_netif+0x6c>)
 8014e80:	4814      	ldr	r0, [pc, #80]	; (8014ed4 <tcp_eff_send_mss_netif+0x70>)
 8014e82:	f00a fbbf 	bl	801f604 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8014e86:	68bb      	ldr	r3, [r7, #8]
 8014e88:	2b00      	cmp	r3, #0
 8014e8a:	d101      	bne.n	8014e90 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8014e8c:	89fb      	ldrh	r3, [r7, #14]
 8014e8e:	e019      	b.n	8014ec4 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8014e90:	68bb      	ldr	r3, [r7, #8]
 8014e92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014e94:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8014e96:	8afb      	ldrh	r3, [r7, #22]
 8014e98:	2b00      	cmp	r3, #0
 8014e9a:	d012      	beq.n	8014ec2 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8014e9c:	2328      	movs	r3, #40	; 0x28
 8014e9e:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8014ea0:	8afa      	ldrh	r2, [r7, #22]
 8014ea2:	8abb      	ldrh	r3, [r7, #20]
 8014ea4:	429a      	cmp	r2, r3
 8014ea6:	d904      	bls.n	8014eb2 <tcp_eff_send_mss_netif+0x4e>
 8014ea8:	8afa      	ldrh	r2, [r7, #22]
 8014eaa:	8abb      	ldrh	r3, [r7, #20]
 8014eac:	1ad3      	subs	r3, r2, r3
 8014eae:	b29b      	uxth	r3, r3
 8014eb0:	e000      	b.n	8014eb4 <tcp_eff_send_mss_netif+0x50>
 8014eb2:	2300      	movs	r3, #0
 8014eb4:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8014eb6:	8a7a      	ldrh	r2, [r7, #18]
 8014eb8:	89fb      	ldrh	r3, [r7, #14]
 8014eba:	4293      	cmp	r3, r2
 8014ebc:	bf28      	it	cs
 8014ebe:	4613      	movcs	r3, r2
 8014ec0:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8014ec2:	89fb      	ldrh	r3, [r7, #14]
}
 8014ec4:	4618      	mov	r0, r3
 8014ec6:	3718      	adds	r7, #24
 8014ec8:	46bd      	mov	sp, r7
 8014eca:	bd80      	pop	{r7, pc}
 8014ecc:	08024d2c 	.word	0x08024d2c
 8014ed0:	08025438 	.word	0x08025438
 8014ed4:	08024d70 	.word	0x08024d70

08014ed8 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8014ed8:	b580      	push	{r7, lr}
 8014eda:	b084      	sub	sp, #16
 8014edc:	af00      	add	r7, sp, #0
 8014ede:	6078      	str	r0, [r7, #4]
 8014ee0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8014ee2:	683b      	ldr	r3, [r7, #0]
 8014ee4:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8014ee6:	687b      	ldr	r3, [r7, #4]
 8014ee8:	2b00      	cmp	r3, #0
 8014eea:	d119      	bne.n	8014f20 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8014eec:	4b10      	ldr	r3, [pc, #64]	; (8014f30 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8014eee:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8014ef2:	4910      	ldr	r1, [pc, #64]	; (8014f34 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8014ef4:	4810      	ldr	r0, [pc, #64]	; (8014f38 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8014ef6:	f00a fb85 	bl	801f604 <iprintf>

  while (pcb != NULL) {
 8014efa:	e011      	b.n	8014f20 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8014efc:	68fb      	ldr	r3, [r7, #12]
 8014efe:	681a      	ldr	r2, [r3, #0]
 8014f00:	687b      	ldr	r3, [r7, #4]
 8014f02:	681b      	ldr	r3, [r3, #0]
 8014f04:	429a      	cmp	r2, r3
 8014f06:	d108      	bne.n	8014f1a <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8014f08:	68fb      	ldr	r3, [r7, #12]
 8014f0a:	68db      	ldr	r3, [r3, #12]
 8014f0c:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8014f0e:	68f8      	ldr	r0, [r7, #12]
 8014f10:	f7fe fd50 	bl	80139b4 <tcp_abort>
      pcb = next;
 8014f14:	68bb      	ldr	r3, [r7, #8]
 8014f16:	60fb      	str	r3, [r7, #12]
 8014f18:	e002      	b.n	8014f20 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8014f1a:	68fb      	ldr	r3, [r7, #12]
 8014f1c:	68db      	ldr	r3, [r3, #12]
 8014f1e:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8014f20:	68fb      	ldr	r3, [r7, #12]
 8014f22:	2b00      	cmp	r3, #0
 8014f24:	d1ea      	bne.n	8014efc <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8014f26:	bf00      	nop
 8014f28:	bf00      	nop
 8014f2a:	3710      	adds	r7, #16
 8014f2c:	46bd      	mov	sp, r7
 8014f2e:	bd80      	pop	{r7, pc}
 8014f30:	08024d2c 	.word	0x08024d2c
 8014f34:	08025460 	.word	0x08025460
 8014f38:	08024d70 	.word	0x08024d70

08014f3c <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8014f3c:	b580      	push	{r7, lr}
 8014f3e:	b084      	sub	sp, #16
 8014f40:	af00      	add	r7, sp, #0
 8014f42:	6078      	str	r0, [r7, #4]
 8014f44:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8014f46:	687b      	ldr	r3, [r7, #4]
 8014f48:	2b00      	cmp	r3, #0
 8014f4a:	d02a      	beq.n	8014fa2 <tcp_netif_ip_addr_changed+0x66>
 8014f4c:	687b      	ldr	r3, [r7, #4]
 8014f4e:	681b      	ldr	r3, [r3, #0]
 8014f50:	2b00      	cmp	r3, #0
 8014f52:	d026      	beq.n	8014fa2 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8014f54:	4b15      	ldr	r3, [pc, #84]	; (8014fac <tcp_netif_ip_addr_changed+0x70>)
 8014f56:	681b      	ldr	r3, [r3, #0]
 8014f58:	4619      	mov	r1, r3
 8014f5a:	6878      	ldr	r0, [r7, #4]
 8014f5c:	f7ff ffbc 	bl	8014ed8 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8014f60:	4b13      	ldr	r3, [pc, #76]	; (8014fb0 <tcp_netif_ip_addr_changed+0x74>)
 8014f62:	681b      	ldr	r3, [r3, #0]
 8014f64:	4619      	mov	r1, r3
 8014f66:	6878      	ldr	r0, [r7, #4]
 8014f68:	f7ff ffb6 	bl	8014ed8 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8014f6c:	683b      	ldr	r3, [r7, #0]
 8014f6e:	2b00      	cmp	r3, #0
 8014f70:	d017      	beq.n	8014fa2 <tcp_netif_ip_addr_changed+0x66>
 8014f72:	683b      	ldr	r3, [r7, #0]
 8014f74:	681b      	ldr	r3, [r3, #0]
 8014f76:	2b00      	cmp	r3, #0
 8014f78:	d013      	beq.n	8014fa2 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8014f7a:	4b0e      	ldr	r3, [pc, #56]	; (8014fb4 <tcp_netif_ip_addr_changed+0x78>)
 8014f7c:	681b      	ldr	r3, [r3, #0]
 8014f7e:	60fb      	str	r3, [r7, #12]
 8014f80:	e00c      	b.n	8014f9c <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8014f82:	68fb      	ldr	r3, [r7, #12]
 8014f84:	681a      	ldr	r2, [r3, #0]
 8014f86:	687b      	ldr	r3, [r7, #4]
 8014f88:	681b      	ldr	r3, [r3, #0]
 8014f8a:	429a      	cmp	r2, r3
 8014f8c:	d103      	bne.n	8014f96 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8014f8e:	683b      	ldr	r3, [r7, #0]
 8014f90:	681a      	ldr	r2, [r3, #0]
 8014f92:	68fb      	ldr	r3, [r7, #12]
 8014f94:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8014f96:	68fb      	ldr	r3, [r7, #12]
 8014f98:	68db      	ldr	r3, [r3, #12]
 8014f9a:	60fb      	str	r3, [r7, #12]
 8014f9c:	68fb      	ldr	r3, [r7, #12]
 8014f9e:	2b00      	cmp	r3, #0
 8014fa0:	d1ef      	bne.n	8014f82 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8014fa2:	bf00      	nop
 8014fa4:	3710      	adds	r7, #16
 8014fa6:	46bd      	mov	sp, r7
 8014fa8:	bd80      	pop	{r7, pc}
 8014faa:	bf00      	nop
 8014fac:	24007f3c 	.word	0x24007f3c
 8014fb0:	24007f48 	.word	0x24007f48
 8014fb4:	24007f44 	.word	0x24007f44

08014fb8 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8014fb8:	b580      	push	{r7, lr}
 8014fba:	b082      	sub	sp, #8
 8014fbc:	af00      	add	r7, sp, #0
 8014fbe:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8014fc0:	687b      	ldr	r3, [r7, #4]
 8014fc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014fc4:	2b00      	cmp	r3, #0
 8014fc6:	d007      	beq.n	8014fd8 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8014fc8:	687b      	ldr	r3, [r7, #4]
 8014fca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014fcc:	4618      	mov	r0, r3
 8014fce:	f7ff fb6f 	bl	80146b0 <tcp_segs_free>
    pcb->ooseq = NULL;
 8014fd2:	687b      	ldr	r3, [r7, #4]
 8014fd4:	2200      	movs	r2, #0
 8014fd6:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8014fd8:	bf00      	nop
 8014fda:	3708      	adds	r7, #8
 8014fdc:	46bd      	mov	sp, r7
 8014fde:	bd80      	pop	{r7, pc}

08014fe0 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8014fe0:	b590      	push	{r4, r7, lr}
 8014fe2:	b08d      	sub	sp, #52	; 0x34
 8014fe4:	af04      	add	r7, sp, #16
 8014fe6:	6078      	str	r0, [r7, #4]
 8014fe8:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8014fea:	687b      	ldr	r3, [r7, #4]
 8014fec:	2b00      	cmp	r3, #0
 8014fee:	d105      	bne.n	8014ffc <tcp_input+0x1c>
 8014ff0:	4b9b      	ldr	r3, [pc, #620]	; (8015260 <tcp_input+0x280>)
 8014ff2:	2283      	movs	r2, #131	; 0x83
 8014ff4:	499b      	ldr	r1, [pc, #620]	; (8015264 <tcp_input+0x284>)
 8014ff6:	489c      	ldr	r0, [pc, #624]	; (8015268 <tcp_input+0x288>)
 8014ff8:	f00a fb04 	bl	801f604 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8014ffc:	687b      	ldr	r3, [r7, #4]
 8014ffe:	685b      	ldr	r3, [r3, #4]
 8015000:	4a9a      	ldr	r2, [pc, #616]	; (801526c <tcp_input+0x28c>)
 8015002:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8015004:	687b      	ldr	r3, [r7, #4]
 8015006:	895b      	ldrh	r3, [r3, #10]
 8015008:	2b13      	cmp	r3, #19
 801500a:	f240 83c4 	bls.w	8015796 <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801500e:	4b98      	ldr	r3, [pc, #608]	; (8015270 <tcp_input+0x290>)
 8015010:	695b      	ldr	r3, [r3, #20]
 8015012:	4a97      	ldr	r2, [pc, #604]	; (8015270 <tcp_input+0x290>)
 8015014:	6812      	ldr	r2, [r2, #0]
 8015016:	4611      	mov	r1, r2
 8015018:	4618      	mov	r0, r3
 801501a:	f008 fb15 	bl	801d648 <ip4_addr_isbroadcast_u32>
 801501e:	4603      	mov	r3, r0
 8015020:	2b00      	cmp	r3, #0
 8015022:	f040 83ba 	bne.w	801579a <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8015026:	4b92      	ldr	r3, [pc, #584]	; (8015270 <tcp_input+0x290>)
 8015028:	695b      	ldr	r3, [r3, #20]
 801502a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801502e:	2be0      	cmp	r3, #224	; 0xe0
 8015030:	f000 83b3 	beq.w	801579a <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8015034:	4b8d      	ldr	r3, [pc, #564]	; (801526c <tcp_input+0x28c>)
 8015036:	681b      	ldr	r3, [r3, #0]
 8015038:	899b      	ldrh	r3, [r3, #12]
 801503a:	b29b      	uxth	r3, r3
 801503c:	4618      	mov	r0, r3
 801503e:	f7fc f9d1 	bl	80113e4 <lwip_htons>
 8015042:	4603      	mov	r3, r0
 8015044:	0b1b      	lsrs	r3, r3, #12
 8015046:	b29b      	uxth	r3, r3
 8015048:	b2db      	uxtb	r3, r3
 801504a:	009b      	lsls	r3, r3, #2
 801504c:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 801504e:	7cbb      	ldrb	r3, [r7, #18]
 8015050:	2b13      	cmp	r3, #19
 8015052:	f240 83a4 	bls.w	801579e <tcp_input+0x7be>
 8015056:	7cbb      	ldrb	r3, [r7, #18]
 8015058:	b29a      	uxth	r2, r3
 801505a:	687b      	ldr	r3, [r7, #4]
 801505c:	891b      	ldrh	r3, [r3, #8]
 801505e:	429a      	cmp	r2, r3
 8015060:	f200 839d 	bhi.w	801579e <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8015064:	7cbb      	ldrb	r3, [r7, #18]
 8015066:	b29b      	uxth	r3, r3
 8015068:	3b14      	subs	r3, #20
 801506a:	b29a      	uxth	r2, r3
 801506c:	4b81      	ldr	r3, [pc, #516]	; (8015274 <tcp_input+0x294>)
 801506e:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8015070:	4b81      	ldr	r3, [pc, #516]	; (8015278 <tcp_input+0x298>)
 8015072:	2200      	movs	r2, #0
 8015074:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8015076:	687b      	ldr	r3, [r7, #4]
 8015078:	895a      	ldrh	r2, [r3, #10]
 801507a:	7cbb      	ldrb	r3, [r7, #18]
 801507c:	b29b      	uxth	r3, r3
 801507e:	429a      	cmp	r2, r3
 8015080:	d309      	bcc.n	8015096 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8015082:	4b7c      	ldr	r3, [pc, #496]	; (8015274 <tcp_input+0x294>)
 8015084:	881a      	ldrh	r2, [r3, #0]
 8015086:	4b7d      	ldr	r3, [pc, #500]	; (801527c <tcp_input+0x29c>)
 8015088:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 801508a:	7cbb      	ldrb	r3, [r7, #18]
 801508c:	4619      	mov	r1, r3
 801508e:	6878      	ldr	r0, [r7, #4]
 8015090:	f7fd fdd8 	bl	8012c44 <pbuf_remove_header>
 8015094:	e04e      	b.n	8015134 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8015096:	687b      	ldr	r3, [r7, #4]
 8015098:	681b      	ldr	r3, [r3, #0]
 801509a:	2b00      	cmp	r3, #0
 801509c:	d105      	bne.n	80150aa <tcp_input+0xca>
 801509e:	4b70      	ldr	r3, [pc, #448]	; (8015260 <tcp_input+0x280>)
 80150a0:	22c2      	movs	r2, #194	; 0xc2
 80150a2:	4977      	ldr	r1, [pc, #476]	; (8015280 <tcp_input+0x2a0>)
 80150a4:	4870      	ldr	r0, [pc, #448]	; (8015268 <tcp_input+0x288>)
 80150a6:	f00a faad 	bl	801f604 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 80150aa:	2114      	movs	r1, #20
 80150ac:	6878      	ldr	r0, [r7, #4]
 80150ae:	f7fd fdc9 	bl	8012c44 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 80150b2:	687b      	ldr	r3, [r7, #4]
 80150b4:	895a      	ldrh	r2, [r3, #10]
 80150b6:	4b71      	ldr	r3, [pc, #452]	; (801527c <tcp_input+0x29c>)
 80150b8:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 80150ba:	4b6e      	ldr	r3, [pc, #440]	; (8015274 <tcp_input+0x294>)
 80150bc:	881a      	ldrh	r2, [r3, #0]
 80150be:	4b6f      	ldr	r3, [pc, #444]	; (801527c <tcp_input+0x29c>)
 80150c0:	881b      	ldrh	r3, [r3, #0]
 80150c2:	1ad3      	subs	r3, r2, r3
 80150c4:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 80150c6:	4b6d      	ldr	r3, [pc, #436]	; (801527c <tcp_input+0x29c>)
 80150c8:	881b      	ldrh	r3, [r3, #0]
 80150ca:	4619      	mov	r1, r3
 80150cc:	6878      	ldr	r0, [r7, #4]
 80150ce:	f7fd fdb9 	bl	8012c44 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 80150d2:	687b      	ldr	r3, [r7, #4]
 80150d4:	681b      	ldr	r3, [r3, #0]
 80150d6:	895b      	ldrh	r3, [r3, #10]
 80150d8:	8a3a      	ldrh	r2, [r7, #16]
 80150da:	429a      	cmp	r2, r3
 80150dc:	f200 8361 	bhi.w	80157a2 <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 80150e0:	687b      	ldr	r3, [r7, #4]
 80150e2:	681b      	ldr	r3, [r3, #0]
 80150e4:	685b      	ldr	r3, [r3, #4]
 80150e6:	4a64      	ldr	r2, [pc, #400]	; (8015278 <tcp_input+0x298>)
 80150e8:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 80150ea:	687b      	ldr	r3, [r7, #4]
 80150ec:	681b      	ldr	r3, [r3, #0]
 80150ee:	8a3a      	ldrh	r2, [r7, #16]
 80150f0:	4611      	mov	r1, r2
 80150f2:	4618      	mov	r0, r3
 80150f4:	f7fd fda6 	bl	8012c44 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 80150f8:	687b      	ldr	r3, [r7, #4]
 80150fa:	891a      	ldrh	r2, [r3, #8]
 80150fc:	8a3b      	ldrh	r3, [r7, #16]
 80150fe:	1ad3      	subs	r3, r2, r3
 8015100:	b29a      	uxth	r2, r3
 8015102:	687b      	ldr	r3, [r7, #4]
 8015104:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8015106:	687b      	ldr	r3, [r7, #4]
 8015108:	895b      	ldrh	r3, [r3, #10]
 801510a:	2b00      	cmp	r3, #0
 801510c:	d005      	beq.n	801511a <tcp_input+0x13a>
 801510e:	4b54      	ldr	r3, [pc, #336]	; (8015260 <tcp_input+0x280>)
 8015110:	22df      	movs	r2, #223	; 0xdf
 8015112:	495c      	ldr	r1, [pc, #368]	; (8015284 <tcp_input+0x2a4>)
 8015114:	4854      	ldr	r0, [pc, #336]	; (8015268 <tcp_input+0x288>)
 8015116:	f00a fa75 	bl	801f604 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 801511a:	687b      	ldr	r3, [r7, #4]
 801511c:	891a      	ldrh	r2, [r3, #8]
 801511e:	687b      	ldr	r3, [r7, #4]
 8015120:	681b      	ldr	r3, [r3, #0]
 8015122:	891b      	ldrh	r3, [r3, #8]
 8015124:	429a      	cmp	r2, r3
 8015126:	d005      	beq.n	8015134 <tcp_input+0x154>
 8015128:	4b4d      	ldr	r3, [pc, #308]	; (8015260 <tcp_input+0x280>)
 801512a:	22e0      	movs	r2, #224	; 0xe0
 801512c:	4956      	ldr	r1, [pc, #344]	; (8015288 <tcp_input+0x2a8>)
 801512e:	484e      	ldr	r0, [pc, #312]	; (8015268 <tcp_input+0x288>)
 8015130:	f00a fa68 	bl	801f604 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8015134:	4b4d      	ldr	r3, [pc, #308]	; (801526c <tcp_input+0x28c>)
 8015136:	681b      	ldr	r3, [r3, #0]
 8015138:	881b      	ldrh	r3, [r3, #0]
 801513a:	b29b      	uxth	r3, r3
 801513c:	4a4b      	ldr	r2, [pc, #300]	; (801526c <tcp_input+0x28c>)
 801513e:	6814      	ldr	r4, [r2, #0]
 8015140:	4618      	mov	r0, r3
 8015142:	f7fc f94f 	bl	80113e4 <lwip_htons>
 8015146:	4603      	mov	r3, r0
 8015148:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 801514a:	4b48      	ldr	r3, [pc, #288]	; (801526c <tcp_input+0x28c>)
 801514c:	681b      	ldr	r3, [r3, #0]
 801514e:	885b      	ldrh	r3, [r3, #2]
 8015150:	b29b      	uxth	r3, r3
 8015152:	4a46      	ldr	r2, [pc, #280]	; (801526c <tcp_input+0x28c>)
 8015154:	6814      	ldr	r4, [r2, #0]
 8015156:	4618      	mov	r0, r3
 8015158:	f7fc f944 	bl	80113e4 <lwip_htons>
 801515c:	4603      	mov	r3, r0
 801515e:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8015160:	4b42      	ldr	r3, [pc, #264]	; (801526c <tcp_input+0x28c>)
 8015162:	681b      	ldr	r3, [r3, #0]
 8015164:	685b      	ldr	r3, [r3, #4]
 8015166:	4a41      	ldr	r2, [pc, #260]	; (801526c <tcp_input+0x28c>)
 8015168:	6814      	ldr	r4, [r2, #0]
 801516a:	4618      	mov	r0, r3
 801516c:	f7fc f94f 	bl	801140e <lwip_htonl>
 8015170:	4603      	mov	r3, r0
 8015172:	6063      	str	r3, [r4, #4]
 8015174:	6863      	ldr	r3, [r4, #4]
 8015176:	4a45      	ldr	r2, [pc, #276]	; (801528c <tcp_input+0x2ac>)
 8015178:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 801517a:	4b3c      	ldr	r3, [pc, #240]	; (801526c <tcp_input+0x28c>)
 801517c:	681b      	ldr	r3, [r3, #0]
 801517e:	689b      	ldr	r3, [r3, #8]
 8015180:	4a3a      	ldr	r2, [pc, #232]	; (801526c <tcp_input+0x28c>)
 8015182:	6814      	ldr	r4, [r2, #0]
 8015184:	4618      	mov	r0, r3
 8015186:	f7fc f942 	bl	801140e <lwip_htonl>
 801518a:	4603      	mov	r3, r0
 801518c:	60a3      	str	r3, [r4, #8]
 801518e:	68a3      	ldr	r3, [r4, #8]
 8015190:	4a3f      	ldr	r2, [pc, #252]	; (8015290 <tcp_input+0x2b0>)
 8015192:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8015194:	4b35      	ldr	r3, [pc, #212]	; (801526c <tcp_input+0x28c>)
 8015196:	681b      	ldr	r3, [r3, #0]
 8015198:	89db      	ldrh	r3, [r3, #14]
 801519a:	b29b      	uxth	r3, r3
 801519c:	4a33      	ldr	r2, [pc, #204]	; (801526c <tcp_input+0x28c>)
 801519e:	6814      	ldr	r4, [r2, #0]
 80151a0:	4618      	mov	r0, r3
 80151a2:	f7fc f91f 	bl	80113e4 <lwip_htons>
 80151a6:	4603      	mov	r3, r0
 80151a8:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 80151aa:	4b30      	ldr	r3, [pc, #192]	; (801526c <tcp_input+0x28c>)
 80151ac:	681b      	ldr	r3, [r3, #0]
 80151ae:	899b      	ldrh	r3, [r3, #12]
 80151b0:	b29b      	uxth	r3, r3
 80151b2:	4618      	mov	r0, r3
 80151b4:	f7fc f916 	bl	80113e4 <lwip_htons>
 80151b8:	4603      	mov	r3, r0
 80151ba:	b2db      	uxtb	r3, r3
 80151bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80151c0:	b2da      	uxtb	r2, r3
 80151c2:	4b34      	ldr	r3, [pc, #208]	; (8015294 <tcp_input+0x2b4>)
 80151c4:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 80151c6:	687b      	ldr	r3, [r7, #4]
 80151c8:	891a      	ldrh	r2, [r3, #8]
 80151ca:	4b33      	ldr	r3, [pc, #204]	; (8015298 <tcp_input+0x2b8>)
 80151cc:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 80151ce:	4b31      	ldr	r3, [pc, #196]	; (8015294 <tcp_input+0x2b4>)
 80151d0:	781b      	ldrb	r3, [r3, #0]
 80151d2:	f003 0303 	and.w	r3, r3, #3
 80151d6:	2b00      	cmp	r3, #0
 80151d8:	d00c      	beq.n	80151f4 <tcp_input+0x214>
    tcplen++;
 80151da:	4b2f      	ldr	r3, [pc, #188]	; (8015298 <tcp_input+0x2b8>)
 80151dc:	881b      	ldrh	r3, [r3, #0]
 80151de:	3301      	adds	r3, #1
 80151e0:	b29a      	uxth	r2, r3
 80151e2:	4b2d      	ldr	r3, [pc, #180]	; (8015298 <tcp_input+0x2b8>)
 80151e4:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 80151e6:	687b      	ldr	r3, [r7, #4]
 80151e8:	891a      	ldrh	r2, [r3, #8]
 80151ea:	4b2b      	ldr	r3, [pc, #172]	; (8015298 <tcp_input+0x2b8>)
 80151ec:	881b      	ldrh	r3, [r3, #0]
 80151ee:	429a      	cmp	r2, r3
 80151f0:	f200 82d9 	bhi.w	80157a6 <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 80151f4:	2300      	movs	r3, #0
 80151f6:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80151f8:	4b28      	ldr	r3, [pc, #160]	; (801529c <tcp_input+0x2bc>)
 80151fa:	681b      	ldr	r3, [r3, #0]
 80151fc:	61fb      	str	r3, [r7, #28]
 80151fe:	e09d      	b.n	801533c <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8015200:	69fb      	ldr	r3, [r7, #28]
 8015202:	7d1b      	ldrb	r3, [r3, #20]
 8015204:	2b00      	cmp	r3, #0
 8015206:	d105      	bne.n	8015214 <tcp_input+0x234>
 8015208:	4b15      	ldr	r3, [pc, #84]	; (8015260 <tcp_input+0x280>)
 801520a:	22fb      	movs	r2, #251	; 0xfb
 801520c:	4924      	ldr	r1, [pc, #144]	; (80152a0 <tcp_input+0x2c0>)
 801520e:	4816      	ldr	r0, [pc, #88]	; (8015268 <tcp_input+0x288>)
 8015210:	f00a f9f8 	bl	801f604 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8015214:	69fb      	ldr	r3, [r7, #28]
 8015216:	7d1b      	ldrb	r3, [r3, #20]
 8015218:	2b0a      	cmp	r3, #10
 801521a:	d105      	bne.n	8015228 <tcp_input+0x248>
 801521c:	4b10      	ldr	r3, [pc, #64]	; (8015260 <tcp_input+0x280>)
 801521e:	22fc      	movs	r2, #252	; 0xfc
 8015220:	4920      	ldr	r1, [pc, #128]	; (80152a4 <tcp_input+0x2c4>)
 8015222:	4811      	ldr	r0, [pc, #68]	; (8015268 <tcp_input+0x288>)
 8015224:	f00a f9ee 	bl	801f604 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8015228:	69fb      	ldr	r3, [r7, #28]
 801522a:	7d1b      	ldrb	r3, [r3, #20]
 801522c:	2b01      	cmp	r3, #1
 801522e:	d105      	bne.n	801523c <tcp_input+0x25c>
 8015230:	4b0b      	ldr	r3, [pc, #44]	; (8015260 <tcp_input+0x280>)
 8015232:	22fd      	movs	r2, #253	; 0xfd
 8015234:	491c      	ldr	r1, [pc, #112]	; (80152a8 <tcp_input+0x2c8>)
 8015236:	480c      	ldr	r0, [pc, #48]	; (8015268 <tcp_input+0x288>)
 8015238:	f00a f9e4 	bl	801f604 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801523c:	69fb      	ldr	r3, [r7, #28]
 801523e:	7a1b      	ldrb	r3, [r3, #8]
 8015240:	2b00      	cmp	r3, #0
 8015242:	d033      	beq.n	80152ac <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8015244:	69fb      	ldr	r3, [r7, #28]
 8015246:	7a1a      	ldrb	r2, [r3, #8]
 8015248:	4b09      	ldr	r3, [pc, #36]	; (8015270 <tcp_input+0x290>)
 801524a:	685b      	ldr	r3, [r3, #4]
 801524c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8015250:	3301      	adds	r3, #1
 8015252:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8015254:	429a      	cmp	r2, r3
 8015256:	d029      	beq.n	80152ac <tcp_input+0x2cc>
      prev = pcb;
 8015258:	69fb      	ldr	r3, [r7, #28]
 801525a:	61bb      	str	r3, [r7, #24]
      continue;
 801525c:	e06b      	b.n	8015336 <tcp_input+0x356>
 801525e:	bf00      	nop
 8015260:	08025494 	.word	0x08025494
 8015264:	080254c8 	.word	0x080254c8
 8015268:	080254e0 	.word	0x080254e0
 801526c:	24004550 	.word	0x24004550
 8015270:	24004e5c 	.word	0x24004e5c
 8015274:	24004554 	.word	0x24004554
 8015278:	24004558 	.word	0x24004558
 801527c:	24004556 	.word	0x24004556
 8015280:	08025508 	.word	0x08025508
 8015284:	08025518 	.word	0x08025518
 8015288:	08025524 	.word	0x08025524
 801528c:	24004560 	.word	0x24004560
 8015290:	24004564 	.word	0x24004564
 8015294:	2400456c 	.word	0x2400456c
 8015298:	2400456a 	.word	0x2400456a
 801529c:	24007f3c 	.word	0x24007f3c
 80152a0:	08025544 	.word	0x08025544
 80152a4:	0802556c 	.word	0x0802556c
 80152a8:	08025598 	.word	0x08025598
    }

    if (pcb->remote_port == tcphdr->src &&
 80152ac:	69fb      	ldr	r3, [r7, #28]
 80152ae:	8b1a      	ldrh	r2, [r3, #24]
 80152b0:	4b94      	ldr	r3, [pc, #592]	; (8015504 <tcp_input+0x524>)
 80152b2:	681b      	ldr	r3, [r3, #0]
 80152b4:	881b      	ldrh	r3, [r3, #0]
 80152b6:	b29b      	uxth	r3, r3
 80152b8:	429a      	cmp	r2, r3
 80152ba:	d13a      	bne.n	8015332 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 80152bc:	69fb      	ldr	r3, [r7, #28]
 80152be:	8ada      	ldrh	r2, [r3, #22]
 80152c0:	4b90      	ldr	r3, [pc, #576]	; (8015504 <tcp_input+0x524>)
 80152c2:	681b      	ldr	r3, [r3, #0]
 80152c4:	885b      	ldrh	r3, [r3, #2]
 80152c6:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 80152c8:	429a      	cmp	r2, r3
 80152ca:	d132      	bne.n	8015332 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80152cc:	69fb      	ldr	r3, [r7, #28]
 80152ce:	685a      	ldr	r2, [r3, #4]
 80152d0:	4b8d      	ldr	r3, [pc, #564]	; (8015508 <tcp_input+0x528>)
 80152d2:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 80152d4:	429a      	cmp	r2, r3
 80152d6:	d12c      	bne.n	8015332 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80152d8:	69fb      	ldr	r3, [r7, #28]
 80152da:	681a      	ldr	r2, [r3, #0]
 80152dc:	4b8a      	ldr	r3, [pc, #552]	; (8015508 <tcp_input+0x528>)
 80152de:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80152e0:	429a      	cmp	r2, r3
 80152e2:	d126      	bne.n	8015332 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 80152e4:	69fb      	ldr	r3, [r7, #28]
 80152e6:	68db      	ldr	r3, [r3, #12]
 80152e8:	69fa      	ldr	r2, [r7, #28]
 80152ea:	429a      	cmp	r2, r3
 80152ec:	d106      	bne.n	80152fc <tcp_input+0x31c>
 80152ee:	4b87      	ldr	r3, [pc, #540]	; (801550c <tcp_input+0x52c>)
 80152f0:	f240 120d 	movw	r2, #269	; 0x10d
 80152f4:	4986      	ldr	r1, [pc, #536]	; (8015510 <tcp_input+0x530>)
 80152f6:	4887      	ldr	r0, [pc, #540]	; (8015514 <tcp_input+0x534>)
 80152f8:	f00a f984 	bl	801f604 <iprintf>
      if (prev != NULL) {
 80152fc:	69bb      	ldr	r3, [r7, #24]
 80152fe:	2b00      	cmp	r3, #0
 8015300:	d00a      	beq.n	8015318 <tcp_input+0x338>
        prev->next = pcb->next;
 8015302:	69fb      	ldr	r3, [r7, #28]
 8015304:	68da      	ldr	r2, [r3, #12]
 8015306:	69bb      	ldr	r3, [r7, #24]
 8015308:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 801530a:	4b83      	ldr	r3, [pc, #524]	; (8015518 <tcp_input+0x538>)
 801530c:	681a      	ldr	r2, [r3, #0]
 801530e:	69fb      	ldr	r3, [r7, #28]
 8015310:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8015312:	4a81      	ldr	r2, [pc, #516]	; (8015518 <tcp_input+0x538>)
 8015314:	69fb      	ldr	r3, [r7, #28]
 8015316:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8015318:	69fb      	ldr	r3, [r7, #28]
 801531a:	68db      	ldr	r3, [r3, #12]
 801531c:	69fa      	ldr	r2, [r7, #28]
 801531e:	429a      	cmp	r2, r3
 8015320:	d111      	bne.n	8015346 <tcp_input+0x366>
 8015322:	4b7a      	ldr	r3, [pc, #488]	; (801550c <tcp_input+0x52c>)
 8015324:	f240 1215 	movw	r2, #277	; 0x115
 8015328:	497c      	ldr	r1, [pc, #496]	; (801551c <tcp_input+0x53c>)
 801532a:	487a      	ldr	r0, [pc, #488]	; (8015514 <tcp_input+0x534>)
 801532c:	f00a f96a 	bl	801f604 <iprintf>
      break;
 8015330:	e009      	b.n	8015346 <tcp_input+0x366>
    }
    prev = pcb;
 8015332:	69fb      	ldr	r3, [r7, #28]
 8015334:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8015336:	69fb      	ldr	r3, [r7, #28]
 8015338:	68db      	ldr	r3, [r3, #12]
 801533a:	61fb      	str	r3, [r7, #28]
 801533c:	69fb      	ldr	r3, [r7, #28]
 801533e:	2b00      	cmp	r3, #0
 8015340:	f47f af5e 	bne.w	8015200 <tcp_input+0x220>
 8015344:	e000      	b.n	8015348 <tcp_input+0x368>
      break;
 8015346:	bf00      	nop
  }

  if (pcb == NULL) {
 8015348:	69fb      	ldr	r3, [r7, #28]
 801534a:	2b00      	cmp	r3, #0
 801534c:	f040 8095 	bne.w	801547a <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8015350:	4b73      	ldr	r3, [pc, #460]	; (8015520 <tcp_input+0x540>)
 8015352:	681b      	ldr	r3, [r3, #0]
 8015354:	61fb      	str	r3, [r7, #28]
 8015356:	e03f      	b.n	80153d8 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8015358:	69fb      	ldr	r3, [r7, #28]
 801535a:	7d1b      	ldrb	r3, [r3, #20]
 801535c:	2b0a      	cmp	r3, #10
 801535e:	d006      	beq.n	801536e <tcp_input+0x38e>
 8015360:	4b6a      	ldr	r3, [pc, #424]	; (801550c <tcp_input+0x52c>)
 8015362:	f240 121f 	movw	r2, #287	; 0x11f
 8015366:	496f      	ldr	r1, [pc, #444]	; (8015524 <tcp_input+0x544>)
 8015368:	486a      	ldr	r0, [pc, #424]	; (8015514 <tcp_input+0x534>)
 801536a:	f00a f94b 	bl	801f604 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801536e:	69fb      	ldr	r3, [r7, #28]
 8015370:	7a1b      	ldrb	r3, [r3, #8]
 8015372:	2b00      	cmp	r3, #0
 8015374:	d009      	beq.n	801538a <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8015376:	69fb      	ldr	r3, [r7, #28]
 8015378:	7a1a      	ldrb	r2, [r3, #8]
 801537a:	4b63      	ldr	r3, [pc, #396]	; (8015508 <tcp_input+0x528>)
 801537c:	685b      	ldr	r3, [r3, #4]
 801537e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8015382:	3301      	adds	r3, #1
 8015384:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8015386:	429a      	cmp	r2, r3
 8015388:	d122      	bne.n	80153d0 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 801538a:	69fb      	ldr	r3, [r7, #28]
 801538c:	8b1a      	ldrh	r2, [r3, #24]
 801538e:	4b5d      	ldr	r3, [pc, #372]	; (8015504 <tcp_input+0x524>)
 8015390:	681b      	ldr	r3, [r3, #0]
 8015392:	881b      	ldrh	r3, [r3, #0]
 8015394:	b29b      	uxth	r3, r3
 8015396:	429a      	cmp	r2, r3
 8015398:	d11b      	bne.n	80153d2 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 801539a:	69fb      	ldr	r3, [r7, #28]
 801539c:	8ada      	ldrh	r2, [r3, #22]
 801539e:	4b59      	ldr	r3, [pc, #356]	; (8015504 <tcp_input+0x524>)
 80153a0:	681b      	ldr	r3, [r3, #0]
 80153a2:	885b      	ldrh	r3, [r3, #2]
 80153a4:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 80153a6:	429a      	cmp	r2, r3
 80153a8:	d113      	bne.n	80153d2 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80153aa:	69fb      	ldr	r3, [r7, #28]
 80153ac:	685a      	ldr	r2, [r3, #4]
 80153ae:	4b56      	ldr	r3, [pc, #344]	; (8015508 <tcp_input+0x528>)
 80153b0:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 80153b2:	429a      	cmp	r2, r3
 80153b4:	d10d      	bne.n	80153d2 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80153b6:	69fb      	ldr	r3, [r7, #28]
 80153b8:	681a      	ldr	r2, [r3, #0]
 80153ba:	4b53      	ldr	r3, [pc, #332]	; (8015508 <tcp_input+0x528>)
 80153bc:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80153be:	429a      	cmp	r2, r3
 80153c0:	d107      	bne.n	80153d2 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 80153c2:	69f8      	ldr	r0, [r7, #28]
 80153c4:	f000 fb54 	bl	8015a70 <tcp_timewait_input>
        }
        pbuf_free(p);
 80153c8:	6878      	ldr	r0, [r7, #4]
 80153ca:	f7fd fcf3 	bl	8012db4 <pbuf_free>
        return;
 80153ce:	e1f0      	b.n	80157b2 <tcp_input+0x7d2>
        continue;
 80153d0:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80153d2:	69fb      	ldr	r3, [r7, #28]
 80153d4:	68db      	ldr	r3, [r3, #12]
 80153d6:	61fb      	str	r3, [r7, #28]
 80153d8:	69fb      	ldr	r3, [r7, #28]
 80153da:	2b00      	cmp	r3, #0
 80153dc:	d1bc      	bne.n	8015358 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 80153de:	2300      	movs	r3, #0
 80153e0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80153e2:	4b51      	ldr	r3, [pc, #324]	; (8015528 <tcp_input+0x548>)
 80153e4:	681b      	ldr	r3, [r3, #0]
 80153e6:	617b      	str	r3, [r7, #20]
 80153e8:	e02a      	b.n	8015440 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80153ea:	697b      	ldr	r3, [r7, #20]
 80153ec:	7a1b      	ldrb	r3, [r3, #8]
 80153ee:	2b00      	cmp	r3, #0
 80153f0:	d00c      	beq.n	801540c <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80153f2:	697b      	ldr	r3, [r7, #20]
 80153f4:	7a1a      	ldrb	r2, [r3, #8]
 80153f6:	4b44      	ldr	r3, [pc, #272]	; (8015508 <tcp_input+0x528>)
 80153f8:	685b      	ldr	r3, [r3, #4]
 80153fa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80153fe:	3301      	adds	r3, #1
 8015400:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8015402:	429a      	cmp	r2, r3
 8015404:	d002      	beq.n	801540c <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8015406:	697b      	ldr	r3, [r7, #20]
 8015408:	61bb      	str	r3, [r7, #24]
        continue;
 801540a:	e016      	b.n	801543a <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 801540c:	697b      	ldr	r3, [r7, #20]
 801540e:	8ada      	ldrh	r2, [r3, #22]
 8015410:	4b3c      	ldr	r3, [pc, #240]	; (8015504 <tcp_input+0x524>)
 8015412:	681b      	ldr	r3, [r3, #0]
 8015414:	885b      	ldrh	r3, [r3, #2]
 8015416:	b29b      	uxth	r3, r3
 8015418:	429a      	cmp	r2, r3
 801541a:	d10c      	bne.n	8015436 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 801541c:	697b      	ldr	r3, [r7, #20]
 801541e:	681a      	ldr	r2, [r3, #0]
 8015420:	4b39      	ldr	r3, [pc, #228]	; (8015508 <tcp_input+0x528>)
 8015422:	695b      	ldr	r3, [r3, #20]
 8015424:	429a      	cmp	r2, r3
 8015426:	d00f      	beq.n	8015448 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8015428:	697b      	ldr	r3, [r7, #20]
 801542a:	2b00      	cmp	r3, #0
 801542c:	d00d      	beq.n	801544a <tcp_input+0x46a>
 801542e:	697b      	ldr	r3, [r7, #20]
 8015430:	681b      	ldr	r3, [r3, #0]
 8015432:	2b00      	cmp	r3, #0
 8015434:	d009      	beq.n	801544a <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8015436:	697b      	ldr	r3, [r7, #20]
 8015438:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801543a:	697b      	ldr	r3, [r7, #20]
 801543c:	68db      	ldr	r3, [r3, #12]
 801543e:	617b      	str	r3, [r7, #20]
 8015440:	697b      	ldr	r3, [r7, #20]
 8015442:	2b00      	cmp	r3, #0
 8015444:	d1d1      	bne.n	80153ea <tcp_input+0x40a>
 8015446:	e000      	b.n	801544a <tcp_input+0x46a>
            break;
 8015448:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 801544a:	697b      	ldr	r3, [r7, #20]
 801544c:	2b00      	cmp	r3, #0
 801544e:	d014      	beq.n	801547a <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8015450:	69bb      	ldr	r3, [r7, #24]
 8015452:	2b00      	cmp	r3, #0
 8015454:	d00a      	beq.n	801546c <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8015456:	697b      	ldr	r3, [r7, #20]
 8015458:	68da      	ldr	r2, [r3, #12]
 801545a:	69bb      	ldr	r3, [r7, #24]
 801545c:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 801545e:	4b32      	ldr	r3, [pc, #200]	; (8015528 <tcp_input+0x548>)
 8015460:	681a      	ldr	r2, [r3, #0]
 8015462:	697b      	ldr	r3, [r7, #20]
 8015464:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8015466:	4a30      	ldr	r2, [pc, #192]	; (8015528 <tcp_input+0x548>)
 8015468:	697b      	ldr	r3, [r7, #20]
 801546a:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 801546c:	6978      	ldr	r0, [r7, #20]
 801546e:	f000 fa01 	bl	8015874 <tcp_listen_input>
      }
      pbuf_free(p);
 8015472:	6878      	ldr	r0, [r7, #4]
 8015474:	f7fd fc9e 	bl	8012db4 <pbuf_free>
      return;
 8015478:	e19b      	b.n	80157b2 <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 801547a:	69fb      	ldr	r3, [r7, #28]
 801547c:	2b00      	cmp	r3, #0
 801547e:	f000 8160 	beq.w	8015742 <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8015482:	4b2a      	ldr	r3, [pc, #168]	; (801552c <tcp_input+0x54c>)
 8015484:	2200      	movs	r2, #0
 8015486:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8015488:	687b      	ldr	r3, [r7, #4]
 801548a:	891a      	ldrh	r2, [r3, #8]
 801548c:	4b27      	ldr	r3, [pc, #156]	; (801552c <tcp_input+0x54c>)
 801548e:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8015490:	4a26      	ldr	r2, [pc, #152]	; (801552c <tcp_input+0x54c>)
 8015492:	687b      	ldr	r3, [r7, #4]
 8015494:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8015496:	4b1b      	ldr	r3, [pc, #108]	; (8015504 <tcp_input+0x524>)
 8015498:	681b      	ldr	r3, [r3, #0]
 801549a:	4a24      	ldr	r2, [pc, #144]	; (801552c <tcp_input+0x54c>)
 801549c:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 801549e:	4b24      	ldr	r3, [pc, #144]	; (8015530 <tcp_input+0x550>)
 80154a0:	2200      	movs	r2, #0
 80154a2:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 80154a4:	4b23      	ldr	r3, [pc, #140]	; (8015534 <tcp_input+0x554>)
 80154a6:	2200      	movs	r2, #0
 80154a8:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 80154aa:	4b23      	ldr	r3, [pc, #140]	; (8015538 <tcp_input+0x558>)
 80154ac:	2200      	movs	r2, #0
 80154ae:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 80154b0:	4b22      	ldr	r3, [pc, #136]	; (801553c <tcp_input+0x55c>)
 80154b2:	781b      	ldrb	r3, [r3, #0]
 80154b4:	f003 0308 	and.w	r3, r3, #8
 80154b8:	2b00      	cmp	r3, #0
 80154ba:	d006      	beq.n	80154ca <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 80154bc:	687b      	ldr	r3, [r7, #4]
 80154be:	7b5b      	ldrb	r3, [r3, #13]
 80154c0:	f043 0301 	orr.w	r3, r3, #1
 80154c4:	b2da      	uxtb	r2, r3
 80154c6:	687b      	ldr	r3, [r7, #4]
 80154c8:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 80154ca:	69fb      	ldr	r3, [r7, #28]
 80154cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80154ce:	2b00      	cmp	r3, #0
 80154d0:	d038      	beq.n	8015544 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80154d2:	69f8      	ldr	r0, [r7, #28]
 80154d4:	f7ff f870 	bl	80145b8 <tcp_process_refused_data>
 80154d8:	4603      	mov	r3, r0
 80154da:	f113 0f0d 	cmn.w	r3, #13
 80154de:	d007      	beq.n	80154f0 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80154e0:	69fb      	ldr	r3, [r7, #28]
 80154e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80154e4:	2b00      	cmp	r3, #0
 80154e6:	d02d      	beq.n	8015544 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80154e8:	4b15      	ldr	r3, [pc, #84]	; (8015540 <tcp_input+0x560>)
 80154ea:	881b      	ldrh	r3, [r3, #0]
 80154ec:	2b00      	cmp	r3, #0
 80154ee:	d029      	beq.n	8015544 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 80154f0:	69fb      	ldr	r3, [r7, #28]
 80154f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80154f4:	2b00      	cmp	r3, #0
 80154f6:	f040 8104 	bne.w	8015702 <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 80154fa:	69f8      	ldr	r0, [r7, #28]
 80154fc:	f003 fe16 	bl	801912c <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8015500:	e0ff      	b.n	8015702 <tcp_input+0x722>
 8015502:	bf00      	nop
 8015504:	24004550 	.word	0x24004550
 8015508:	24004e5c 	.word	0x24004e5c
 801550c:	08025494 	.word	0x08025494
 8015510:	080255c0 	.word	0x080255c0
 8015514:	080254e0 	.word	0x080254e0
 8015518:	24007f3c 	.word	0x24007f3c
 801551c:	080255ec 	.word	0x080255ec
 8015520:	24007f4c 	.word	0x24007f4c
 8015524:	08025618 	.word	0x08025618
 8015528:	24007f44 	.word	0x24007f44
 801552c:	24004540 	.word	0x24004540
 8015530:	24004570 	.word	0x24004570
 8015534:	2400456d 	.word	0x2400456d
 8015538:	24004568 	.word	0x24004568
 801553c:	2400456c 	.word	0x2400456c
 8015540:	2400456a 	.word	0x2400456a
      }
    }
    tcp_input_pcb = pcb;
 8015544:	4a9c      	ldr	r2, [pc, #624]	; (80157b8 <tcp_input+0x7d8>)
 8015546:	69fb      	ldr	r3, [r7, #28]
 8015548:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 801554a:	69f8      	ldr	r0, [r7, #28]
 801554c:	f000 fb0a 	bl	8015b64 <tcp_process>
 8015550:	4603      	mov	r3, r0
 8015552:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8015554:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8015558:	f113 0f0d 	cmn.w	r3, #13
 801555c:	f000 80d3 	beq.w	8015706 <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 8015560:	4b96      	ldr	r3, [pc, #600]	; (80157bc <tcp_input+0x7dc>)
 8015562:	781b      	ldrb	r3, [r3, #0]
 8015564:	f003 0308 	and.w	r3, r3, #8
 8015568:	2b00      	cmp	r3, #0
 801556a:	d015      	beq.n	8015598 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 801556c:	69fb      	ldr	r3, [r7, #28]
 801556e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015572:	2b00      	cmp	r3, #0
 8015574:	d008      	beq.n	8015588 <tcp_input+0x5a8>
 8015576:	69fb      	ldr	r3, [r7, #28]
 8015578:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801557c:	69fa      	ldr	r2, [r7, #28]
 801557e:	6912      	ldr	r2, [r2, #16]
 8015580:	f06f 010d 	mvn.w	r1, #13
 8015584:	4610      	mov	r0, r2
 8015586:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8015588:	69f9      	ldr	r1, [r7, #28]
 801558a:	488d      	ldr	r0, [pc, #564]	; (80157c0 <tcp_input+0x7e0>)
 801558c:	f7ff fbb0 	bl	8014cf0 <tcp_pcb_remove>
        tcp_free(pcb);
 8015590:	69f8      	ldr	r0, [r7, #28]
 8015592:	f7fd fecb 	bl	801332c <tcp_free>
 8015596:	e0c1      	b.n	801571c <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 8015598:	2300      	movs	r3, #0
 801559a:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 801559c:	4b89      	ldr	r3, [pc, #548]	; (80157c4 <tcp_input+0x7e4>)
 801559e:	881b      	ldrh	r3, [r3, #0]
 80155a0:	2b00      	cmp	r3, #0
 80155a2:	d01d      	beq.n	80155e0 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 80155a4:	4b87      	ldr	r3, [pc, #540]	; (80157c4 <tcp_input+0x7e4>)
 80155a6:	881b      	ldrh	r3, [r3, #0]
 80155a8:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 80155aa:	69fb      	ldr	r3, [r7, #28]
 80155ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80155b0:	2b00      	cmp	r3, #0
 80155b2:	d00a      	beq.n	80155ca <tcp_input+0x5ea>
 80155b4:	69fb      	ldr	r3, [r7, #28]
 80155b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80155ba:	69fa      	ldr	r2, [r7, #28]
 80155bc:	6910      	ldr	r0, [r2, #16]
 80155be:	89fa      	ldrh	r2, [r7, #14]
 80155c0:	69f9      	ldr	r1, [r7, #28]
 80155c2:	4798      	blx	r3
 80155c4:	4603      	mov	r3, r0
 80155c6:	74fb      	strb	r3, [r7, #19]
 80155c8:	e001      	b.n	80155ce <tcp_input+0x5ee>
 80155ca:	2300      	movs	r3, #0
 80155cc:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80155ce:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80155d2:	f113 0f0d 	cmn.w	r3, #13
 80155d6:	f000 8098 	beq.w	801570a <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 80155da:	4b7a      	ldr	r3, [pc, #488]	; (80157c4 <tcp_input+0x7e4>)
 80155dc:	2200      	movs	r2, #0
 80155de:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 80155e0:	69f8      	ldr	r0, [r7, #28]
 80155e2:	f000 f907 	bl	80157f4 <tcp_input_delayed_close>
 80155e6:	4603      	mov	r3, r0
 80155e8:	2b00      	cmp	r3, #0
 80155ea:	f040 8090 	bne.w	801570e <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 80155ee:	4b76      	ldr	r3, [pc, #472]	; (80157c8 <tcp_input+0x7e8>)
 80155f0:	681b      	ldr	r3, [r3, #0]
 80155f2:	2b00      	cmp	r3, #0
 80155f4:	d041      	beq.n	801567a <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 80155f6:	69fb      	ldr	r3, [r7, #28]
 80155f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80155fa:	2b00      	cmp	r3, #0
 80155fc:	d006      	beq.n	801560c <tcp_input+0x62c>
 80155fe:	4b73      	ldr	r3, [pc, #460]	; (80157cc <tcp_input+0x7ec>)
 8015600:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8015604:	4972      	ldr	r1, [pc, #456]	; (80157d0 <tcp_input+0x7f0>)
 8015606:	4873      	ldr	r0, [pc, #460]	; (80157d4 <tcp_input+0x7f4>)
 8015608:	f009 fffc 	bl	801f604 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 801560c:	69fb      	ldr	r3, [r7, #28]
 801560e:	8b5b      	ldrh	r3, [r3, #26]
 8015610:	f003 0310 	and.w	r3, r3, #16
 8015614:	2b00      	cmp	r3, #0
 8015616:	d008      	beq.n	801562a <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8015618:	4b6b      	ldr	r3, [pc, #428]	; (80157c8 <tcp_input+0x7e8>)
 801561a:	681b      	ldr	r3, [r3, #0]
 801561c:	4618      	mov	r0, r3
 801561e:	f7fd fbc9 	bl	8012db4 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8015622:	69f8      	ldr	r0, [r7, #28]
 8015624:	f7fe f9c6 	bl	80139b4 <tcp_abort>
            goto aborted;
 8015628:	e078      	b.n	801571c <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 801562a:	69fb      	ldr	r3, [r7, #28]
 801562c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8015630:	2b00      	cmp	r3, #0
 8015632:	d00c      	beq.n	801564e <tcp_input+0x66e>
 8015634:	69fb      	ldr	r3, [r7, #28]
 8015636:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801563a:	69fb      	ldr	r3, [r7, #28]
 801563c:	6918      	ldr	r0, [r3, #16]
 801563e:	4b62      	ldr	r3, [pc, #392]	; (80157c8 <tcp_input+0x7e8>)
 8015640:	681a      	ldr	r2, [r3, #0]
 8015642:	2300      	movs	r3, #0
 8015644:	69f9      	ldr	r1, [r7, #28]
 8015646:	47a0      	blx	r4
 8015648:	4603      	mov	r3, r0
 801564a:	74fb      	strb	r3, [r7, #19]
 801564c:	e008      	b.n	8015660 <tcp_input+0x680>
 801564e:	4b5e      	ldr	r3, [pc, #376]	; (80157c8 <tcp_input+0x7e8>)
 8015650:	681a      	ldr	r2, [r3, #0]
 8015652:	2300      	movs	r3, #0
 8015654:	69f9      	ldr	r1, [r7, #28]
 8015656:	2000      	movs	r0, #0
 8015658:	f7ff f884 	bl	8014764 <tcp_recv_null>
 801565c:	4603      	mov	r3, r0
 801565e:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8015660:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8015664:	f113 0f0d 	cmn.w	r3, #13
 8015668:	d053      	beq.n	8015712 <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 801566a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801566e:	2b00      	cmp	r3, #0
 8015670:	d003      	beq.n	801567a <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8015672:	4b55      	ldr	r3, [pc, #340]	; (80157c8 <tcp_input+0x7e8>)
 8015674:	681a      	ldr	r2, [r3, #0]
 8015676:	69fb      	ldr	r3, [r7, #28]
 8015678:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 801567a:	4b50      	ldr	r3, [pc, #320]	; (80157bc <tcp_input+0x7dc>)
 801567c:	781b      	ldrb	r3, [r3, #0]
 801567e:	f003 0320 	and.w	r3, r3, #32
 8015682:	2b00      	cmp	r3, #0
 8015684:	d030      	beq.n	80156e8 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 8015686:	69fb      	ldr	r3, [r7, #28]
 8015688:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801568a:	2b00      	cmp	r3, #0
 801568c:	d009      	beq.n	80156a2 <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 801568e:	69fb      	ldr	r3, [r7, #28]
 8015690:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8015692:	7b5a      	ldrb	r2, [r3, #13]
 8015694:	69fb      	ldr	r3, [r7, #28]
 8015696:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8015698:	f042 0220 	orr.w	r2, r2, #32
 801569c:	b2d2      	uxtb	r2, r2
 801569e:	735a      	strb	r2, [r3, #13]
 80156a0:	e022      	b.n	80156e8 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80156a2:	69fb      	ldr	r3, [r7, #28]
 80156a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80156a6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80156aa:	d005      	beq.n	80156b8 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 80156ac:	69fb      	ldr	r3, [r7, #28]
 80156ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80156b0:	3301      	adds	r3, #1
 80156b2:	b29a      	uxth	r2, r3
 80156b4:	69fb      	ldr	r3, [r7, #28]
 80156b6:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 80156b8:	69fb      	ldr	r3, [r7, #28]
 80156ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80156be:	2b00      	cmp	r3, #0
 80156c0:	d00b      	beq.n	80156da <tcp_input+0x6fa>
 80156c2:	69fb      	ldr	r3, [r7, #28]
 80156c4:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80156c8:	69fb      	ldr	r3, [r7, #28]
 80156ca:	6918      	ldr	r0, [r3, #16]
 80156cc:	2300      	movs	r3, #0
 80156ce:	2200      	movs	r2, #0
 80156d0:	69f9      	ldr	r1, [r7, #28]
 80156d2:	47a0      	blx	r4
 80156d4:	4603      	mov	r3, r0
 80156d6:	74fb      	strb	r3, [r7, #19]
 80156d8:	e001      	b.n	80156de <tcp_input+0x6fe>
 80156da:	2300      	movs	r3, #0
 80156dc:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80156de:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80156e2:	f113 0f0d 	cmn.w	r3, #13
 80156e6:	d016      	beq.n	8015716 <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 80156e8:	4b33      	ldr	r3, [pc, #204]	; (80157b8 <tcp_input+0x7d8>)
 80156ea:	2200      	movs	r2, #0
 80156ec:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 80156ee:	69f8      	ldr	r0, [r7, #28]
 80156f0:	f000 f880 	bl	80157f4 <tcp_input_delayed_close>
 80156f4:	4603      	mov	r3, r0
 80156f6:	2b00      	cmp	r3, #0
 80156f8:	d10f      	bne.n	801571a <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 80156fa:	69f8      	ldr	r0, [r7, #28]
 80156fc:	f002 ff10 	bl	8018520 <tcp_output>
 8015700:	e00c      	b.n	801571c <tcp_input+0x73c>
        goto aborted;
 8015702:	bf00      	nop
 8015704:	e00a      	b.n	801571c <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8015706:	bf00      	nop
 8015708:	e008      	b.n	801571c <tcp_input+0x73c>
              goto aborted;
 801570a:	bf00      	nop
 801570c:	e006      	b.n	801571c <tcp_input+0x73c>
          goto aborted;
 801570e:	bf00      	nop
 8015710:	e004      	b.n	801571c <tcp_input+0x73c>
            goto aborted;
 8015712:	bf00      	nop
 8015714:	e002      	b.n	801571c <tcp_input+0x73c>
              goto aborted;
 8015716:	bf00      	nop
 8015718:	e000      	b.n	801571c <tcp_input+0x73c>
          goto aborted;
 801571a:	bf00      	nop
    tcp_input_pcb = NULL;
 801571c:	4b26      	ldr	r3, [pc, #152]	; (80157b8 <tcp_input+0x7d8>)
 801571e:	2200      	movs	r2, #0
 8015720:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8015722:	4b29      	ldr	r3, [pc, #164]	; (80157c8 <tcp_input+0x7e8>)
 8015724:	2200      	movs	r2, #0
 8015726:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8015728:	4b2b      	ldr	r3, [pc, #172]	; (80157d8 <tcp_input+0x7f8>)
 801572a:	685b      	ldr	r3, [r3, #4]
 801572c:	2b00      	cmp	r3, #0
 801572e:	d03f      	beq.n	80157b0 <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 8015730:	4b29      	ldr	r3, [pc, #164]	; (80157d8 <tcp_input+0x7f8>)
 8015732:	685b      	ldr	r3, [r3, #4]
 8015734:	4618      	mov	r0, r3
 8015736:	f7fd fb3d 	bl	8012db4 <pbuf_free>
      inseg.p = NULL;
 801573a:	4b27      	ldr	r3, [pc, #156]	; (80157d8 <tcp_input+0x7f8>)
 801573c:	2200      	movs	r2, #0
 801573e:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8015740:	e036      	b.n	80157b0 <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8015742:	4b26      	ldr	r3, [pc, #152]	; (80157dc <tcp_input+0x7fc>)
 8015744:	681b      	ldr	r3, [r3, #0]
 8015746:	899b      	ldrh	r3, [r3, #12]
 8015748:	b29b      	uxth	r3, r3
 801574a:	4618      	mov	r0, r3
 801574c:	f7fb fe4a 	bl	80113e4 <lwip_htons>
 8015750:	4603      	mov	r3, r0
 8015752:	b2db      	uxtb	r3, r3
 8015754:	f003 0304 	and.w	r3, r3, #4
 8015758:	2b00      	cmp	r3, #0
 801575a:	d118      	bne.n	801578e <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801575c:	4b20      	ldr	r3, [pc, #128]	; (80157e0 <tcp_input+0x800>)
 801575e:	6819      	ldr	r1, [r3, #0]
 8015760:	4b20      	ldr	r3, [pc, #128]	; (80157e4 <tcp_input+0x804>)
 8015762:	881b      	ldrh	r3, [r3, #0]
 8015764:	461a      	mov	r2, r3
 8015766:	4b20      	ldr	r3, [pc, #128]	; (80157e8 <tcp_input+0x808>)
 8015768:	681b      	ldr	r3, [r3, #0]
 801576a:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801576c:	4b1b      	ldr	r3, [pc, #108]	; (80157dc <tcp_input+0x7fc>)
 801576e:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015770:	885b      	ldrh	r3, [r3, #2]
 8015772:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015774:	4a19      	ldr	r2, [pc, #100]	; (80157dc <tcp_input+0x7fc>)
 8015776:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015778:	8812      	ldrh	r2, [r2, #0]
 801577a:	b292      	uxth	r2, r2
 801577c:	9202      	str	r2, [sp, #8]
 801577e:	9301      	str	r3, [sp, #4]
 8015780:	4b1a      	ldr	r3, [pc, #104]	; (80157ec <tcp_input+0x80c>)
 8015782:	9300      	str	r3, [sp, #0]
 8015784:	4b1a      	ldr	r3, [pc, #104]	; (80157f0 <tcp_input+0x810>)
 8015786:	4602      	mov	r2, r0
 8015788:	2000      	movs	r0, #0
 801578a:	f003 fc7d 	bl	8019088 <tcp_rst>
    pbuf_free(p);
 801578e:	6878      	ldr	r0, [r7, #4]
 8015790:	f7fd fb10 	bl	8012db4 <pbuf_free>
  return;
 8015794:	e00c      	b.n	80157b0 <tcp_input+0x7d0>
    goto dropped;
 8015796:	bf00      	nop
 8015798:	e006      	b.n	80157a8 <tcp_input+0x7c8>
    goto dropped;
 801579a:	bf00      	nop
 801579c:	e004      	b.n	80157a8 <tcp_input+0x7c8>
    goto dropped;
 801579e:	bf00      	nop
 80157a0:	e002      	b.n	80157a8 <tcp_input+0x7c8>
      goto dropped;
 80157a2:	bf00      	nop
 80157a4:	e000      	b.n	80157a8 <tcp_input+0x7c8>
      goto dropped;
 80157a6:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 80157a8:	6878      	ldr	r0, [r7, #4]
 80157aa:	f7fd fb03 	bl	8012db4 <pbuf_free>
 80157ae:	e000      	b.n	80157b2 <tcp_input+0x7d2>
  return;
 80157b0:	bf00      	nop
}
 80157b2:	3724      	adds	r7, #36	; 0x24
 80157b4:	46bd      	mov	sp, r7
 80157b6:	bd90      	pop	{r4, r7, pc}
 80157b8:	24007f50 	.word	0x24007f50
 80157bc:	2400456d 	.word	0x2400456d
 80157c0:	24007f3c 	.word	0x24007f3c
 80157c4:	24004568 	.word	0x24004568
 80157c8:	24004570 	.word	0x24004570
 80157cc:	08025494 	.word	0x08025494
 80157d0:	08025648 	.word	0x08025648
 80157d4:	080254e0 	.word	0x080254e0
 80157d8:	24004540 	.word	0x24004540
 80157dc:	24004550 	.word	0x24004550
 80157e0:	24004564 	.word	0x24004564
 80157e4:	2400456a 	.word	0x2400456a
 80157e8:	24004560 	.word	0x24004560
 80157ec:	24004e6c 	.word	0x24004e6c
 80157f0:	24004e70 	.word	0x24004e70

080157f4 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 80157f4:	b580      	push	{r7, lr}
 80157f6:	b082      	sub	sp, #8
 80157f8:	af00      	add	r7, sp, #0
 80157fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 80157fc:	687b      	ldr	r3, [r7, #4]
 80157fe:	2b00      	cmp	r3, #0
 8015800:	d106      	bne.n	8015810 <tcp_input_delayed_close+0x1c>
 8015802:	4b17      	ldr	r3, [pc, #92]	; (8015860 <tcp_input_delayed_close+0x6c>)
 8015804:	f240 225a 	movw	r2, #602	; 0x25a
 8015808:	4916      	ldr	r1, [pc, #88]	; (8015864 <tcp_input_delayed_close+0x70>)
 801580a:	4817      	ldr	r0, [pc, #92]	; (8015868 <tcp_input_delayed_close+0x74>)
 801580c:	f009 fefa 	bl	801f604 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8015810:	4b16      	ldr	r3, [pc, #88]	; (801586c <tcp_input_delayed_close+0x78>)
 8015812:	781b      	ldrb	r3, [r3, #0]
 8015814:	f003 0310 	and.w	r3, r3, #16
 8015818:	2b00      	cmp	r3, #0
 801581a:	d01c      	beq.n	8015856 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 801581c:	687b      	ldr	r3, [r7, #4]
 801581e:	8b5b      	ldrh	r3, [r3, #26]
 8015820:	f003 0310 	and.w	r3, r3, #16
 8015824:	2b00      	cmp	r3, #0
 8015826:	d10d      	bne.n	8015844 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8015828:	687b      	ldr	r3, [r7, #4]
 801582a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801582e:	2b00      	cmp	r3, #0
 8015830:	d008      	beq.n	8015844 <tcp_input_delayed_close+0x50>
 8015832:	687b      	ldr	r3, [r7, #4]
 8015834:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015838:	687a      	ldr	r2, [r7, #4]
 801583a:	6912      	ldr	r2, [r2, #16]
 801583c:	f06f 010e 	mvn.w	r1, #14
 8015840:	4610      	mov	r0, r2
 8015842:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8015844:	6879      	ldr	r1, [r7, #4]
 8015846:	480a      	ldr	r0, [pc, #40]	; (8015870 <tcp_input_delayed_close+0x7c>)
 8015848:	f7ff fa52 	bl	8014cf0 <tcp_pcb_remove>
    tcp_free(pcb);
 801584c:	6878      	ldr	r0, [r7, #4]
 801584e:	f7fd fd6d 	bl	801332c <tcp_free>
    return 1;
 8015852:	2301      	movs	r3, #1
 8015854:	e000      	b.n	8015858 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8015856:	2300      	movs	r3, #0
}
 8015858:	4618      	mov	r0, r3
 801585a:	3708      	adds	r7, #8
 801585c:	46bd      	mov	sp, r7
 801585e:	bd80      	pop	{r7, pc}
 8015860:	08025494 	.word	0x08025494
 8015864:	08025664 	.word	0x08025664
 8015868:	080254e0 	.word	0x080254e0
 801586c:	2400456d 	.word	0x2400456d
 8015870:	24007f3c 	.word	0x24007f3c

08015874 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8015874:	b590      	push	{r4, r7, lr}
 8015876:	b08b      	sub	sp, #44	; 0x2c
 8015878:	af04      	add	r7, sp, #16
 801587a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 801587c:	4b6f      	ldr	r3, [pc, #444]	; (8015a3c <tcp_listen_input+0x1c8>)
 801587e:	781b      	ldrb	r3, [r3, #0]
 8015880:	f003 0304 	and.w	r3, r3, #4
 8015884:	2b00      	cmp	r3, #0
 8015886:	f040 80d2 	bne.w	8015a2e <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 801588a:	687b      	ldr	r3, [r7, #4]
 801588c:	2b00      	cmp	r3, #0
 801588e:	d106      	bne.n	801589e <tcp_listen_input+0x2a>
 8015890:	4b6b      	ldr	r3, [pc, #428]	; (8015a40 <tcp_listen_input+0x1cc>)
 8015892:	f240 2281 	movw	r2, #641	; 0x281
 8015896:	496b      	ldr	r1, [pc, #428]	; (8015a44 <tcp_listen_input+0x1d0>)
 8015898:	486b      	ldr	r0, [pc, #428]	; (8015a48 <tcp_listen_input+0x1d4>)
 801589a:	f009 feb3 	bl	801f604 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 801589e:	4b67      	ldr	r3, [pc, #412]	; (8015a3c <tcp_listen_input+0x1c8>)
 80158a0:	781b      	ldrb	r3, [r3, #0]
 80158a2:	f003 0310 	and.w	r3, r3, #16
 80158a6:	2b00      	cmp	r3, #0
 80158a8:	d019      	beq.n	80158de <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80158aa:	4b68      	ldr	r3, [pc, #416]	; (8015a4c <tcp_listen_input+0x1d8>)
 80158ac:	6819      	ldr	r1, [r3, #0]
 80158ae:	4b68      	ldr	r3, [pc, #416]	; (8015a50 <tcp_listen_input+0x1dc>)
 80158b0:	881b      	ldrh	r3, [r3, #0]
 80158b2:	461a      	mov	r2, r3
 80158b4:	4b67      	ldr	r3, [pc, #412]	; (8015a54 <tcp_listen_input+0x1e0>)
 80158b6:	681b      	ldr	r3, [r3, #0]
 80158b8:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80158ba:	4b67      	ldr	r3, [pc, #412]	; (8015a58 <tcp_listen_input+0x1e4>)
 80158bc:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80158be:	885b      	ldrh	r3, [r3, #2]
 80158c0:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80158c2:	4a65      	ldr	r2, [pc, #404]	; (8015a58 <tcp_listen_input+0x1e4>)
 80158c4:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80158c6:	8812      	ldrh	r2, [r2, #0]
 80158c8:	b292      	uxth	r2, r2
 80158ca:	9202      	str	r2, [sp, #8]
 80158cc:	9301      	str	r3, [sp, #4]
 80158ce:	4b63      	ldr	r3, [pc, #396]	; (8015a5c <tcp_listen_input+0x1e8>)
 80158d0:	9300      	str	r3, [sp, #0]
 80158d2:	4b63      	ldr	r3, [pc, #396]	; (8015a60 <tcp_listen_input+0x1ec>)
 80158d4:	4602      	mov	r2, r0
 80158d6:	6878      	ldr	r0, [r7, #4]
 80158d8:	f003 fbd6 	bl	8019088 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 80158dc:	e0a9      	b.n	8015a32 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 80158de:	4b57      	ldr	r3, [pc, #348]	; (8015a3c <tcp_listen_input+0x1c8>)
 80158e0:	781b      	ldrb	r3, [r3, #0]
 80158e2:	f003 0302 	and.w	r3, r3, #2
 80158e6:	2b00      	cmp	r3, #0
 80158e8:	f000 80a3 	beq.w	8015a32 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 80158ec:	687b      	ldr	r3, [r7, #4]
 80158ee:	7d5b      	ldrb	r3, [r3, #21]
 80158f0:	4618      	mov	r0, r3
 80158f2:	f7ff f85b 	bl	80149ac <tcp_alloc>
 80158f6:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 80158f8:	697b      	ldr	r3, [r7, #20]
 80158fa:	2b00      	cmp	r3, #0
 80158fc:	d111      	bne.n	8015922 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80158fe:	687b      	ldr	r3, [r7, #4]
 8015900:	699b      	ldr	r3, [r3, #24]
 8015902:	2b00      	cmp	r3, #0
 8015904:	d00a      	beq.n	801591c <tcp_listen_input+0xa8>
 8015906:	687b      	ldr	r3, [r7, #4]
 8015908:	699b      	ldr	r3, [r3, #24]
 801590a:	687a      	ldr	r2, [r7, #4]
 801590c:	6910      	ldr	r0, [r2, #16]
 801590e:	f04f 32ff 	mov.w	r2, #4294967295
 8015912:	2100      	movs	r1, #0
 8015914:	4798      	blx	r3
 8015916:	4603      	mov	r3, r0
 8015918:	73bb      	strb	r3, [r7, #14]
      return;
 801591a:	e08b      	b.n	8015a34 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801591c:	23f0      	movs	r3, #240	; 0xf0
 801591e:	73bb      	strb	r3, [r7, #14]
      return;
 8015920:	e088      	b.n	8015a34 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8015922:	4b50      	ldr	r3, [pc, #320]	; (8015a64 <tcp_listen_input+0x1f0>)
 8015924:	695a      	ldr	r2, [r3, #20]
 8015926:	697b      	ldr	r3, [r7, #20]
 8015928:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 801592a:	4b4e      	ldr	r3, [pc, #312]	; (8015a64 <tcp_listen_input+0x1f0>)
 801592c:	691a      	ldr	r2, [r3, #16]
 801592e:	697b      	ldr	r3, [r7, #20]
 8015930:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8015932:	687b      	ldr	r3, [r7, #4]
 8015934:	8ada      	ldrh	r2, [r3, #22]
 8015936:	697b      	ldr	r3, [r7, #20]
 8015938:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 801593a:	4b47      	ldr	r3, [pc, #284]	; (8015a58 <tcp_listen_input+0x1e4>)
 801593c:	681b      	ldr	r3, [r3, #0]
 801593e:	881b      	ldrh	r3, [r3, #0]
 8015940:	b29a      	uxth	r2, r3
 8015942:	697b      	ldr	r3, [r7, #20]
 8015944:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8015946:	697b      	ldr	r3, [r7, #20]
 8015948:	2203      	movs	r2, #3
 801594a:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 801594c:	4b41      	ldr	r3, [pc, #260]	; (8015a54 <tcp_listen_input+0x1e0>)
 801594e:	681b      	ldr	r3, [r3, #0]
 8015950:	1c5a      	adds	r2, r3, #1
 8015952:	697b      	ldr	r3, [r7, #20]
 8015954:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8015956:	697b      	ldr	r3, [r7, #20]
 8015958:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801595a:	697b      	ldr	r3, [r7, #20]
 801595c:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 801595e:	6978      	ldr	r0, [r7, #20]
 8015960:	f7ff fa5a 	bl	8014e18 <tcp_next_iss>
 8015964:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8015966:	697b      	ldr	r3, [r7, #20]
 8015968:	693a      	ldr	r2, [r7, #16]
 801596a:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 801596c:	697b      	ldr	r3, [r7, #20]
 801596e:	693a      	ldr	r2, [r7, #16]
 8015970:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8015972:	697b      	ldr	r3, [r7, #20]
 8015974:	693a      	ldr	r2, [r7, #16]
 8015976:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8015978:	697b      	ldr	r3, [r7, #20]
 801597a:	693a      	ldr	r2, [r7, #16]
 801597c:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 801597e:	4b35      	ldr	r3, [pc, #212]	; (8015a54 <tcp_listen_input+0x1e0>)
 8015980:	681b      	ldr	r3, [r3, #0]
 8015982:	1e5a      	subs	r2, r3, #1
 8015984:	697b      	ldr	r3, [r7, #20]
 8015986:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8015988:	687b      	ldr	r3, [r7, #4]
 801598a:	691a      	ldr	r2, [r3, #16]
 801598c:	697b      	ldr	r3, [r7, #20]
 801598e:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8015990:	697b      	ldr	r3, [r7, #20]
 8015992:	687a      	ldr	r2, [r7, #4]
 8015994:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8015996:	687b      	ldr	r3, [r7, #4]
 8015998:	7a5b      	ldrb	r3, [r3, #9]
 801599a:	f003 030c 	and.w	r3, r3, #12
 801599e:	b2da      	uxtb	r2, r3
 80159a0:	697b      	ldr	r3, [r7, #20]
 80159a2:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 80159a4:	687b      	ldr	r3, [r7, #4]
 80159a6:	7a1a      	ldrb	r2, [r3, #8]
 80159a8:	697b      	ldr	r3, [r7, #20]
 80159aa:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 80159ac:	4b2e      	ldr	r3, [pc, #184]	; (8015a68 <tcp_listen_input+0x1f4>)
 80159ae:	681a      	ldr	r2, [r3, #0]
 80159b0:	697b      	ldr	r3, [r7, #20]
 80159b2:	60da      	str	r2, [r3, #12]
 80159b4:	4a2c      	ldr	r2, [pc, #176]	; (8015a68 <tcp_listen_input+0x1f4>)
 80159b6:	697b      	ldr	r3, [r7, #20]
 80159b8:	6013      	str	r3, [r2, #0]
 80159ba:	f003 fd27 	bl	801940c <tcp_timer_needed>
 80159be:	4b2b      	ldr	r3, [pc, #172]	; (8015a6c <tcp_listen_input+0x1f8>)
 80159c0:	2201      	movs	r2, #1
 80159c2:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 80159c4:	6978      	ldr	r0, [r7, #20]
 80159c6:	f001 fd8d 	bl	80174e4 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 80159ca:	4b23      	ldr	r3, [pc, #140]	; (8015a58 <tcp_listen_input+0x1e4>)
 80159cc:	681b      	ldr	r3, [r3, #0]
 80159ce:	89db      	ldrh	r3, [r3, #14]
 80159d0:	b29a      	uxth	r2, r3
 80159d2:	697b      	ldr	r3, [r7, #20]
 80159d4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 80159d8:	697b      	ldr	r3, [r7, #20]
 80159da:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80159de:	697b      	ldr	r3, [r7, #20]
 80159e0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 80159e4:	697b      	ldr	r3, [r7, #20]
 80159e6:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80159e8:	697b      	ldr	r3, [r7, #20]
 80159ea:	3304      	adds	r3, #4
 80159ec:	4618      	mov	r0, r3
 80159ee:	f007 fb77 	bl	801d0e0 <ip4_route>
 80159f2:	4601      	mov	r1, r0
 80159f4:	697b      	ldr	r3, [r7, #20]
 80159f6:	3304      	adds	r3, #4
 80159f8:	461a      	mov	r2, r3
 80159fa:	4620      	mov	r0, r4
 80159fc:	f7ff fa32 	bl	8014e64 <tcp_eff_send_mss_netif>
 8015a00:	4603      	mov	r3, r0
 8015a02:	461a      	mov	r2, r3
 8015a04:	697b      	ldr	r3, [r7, #20]
 8015a06:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8015a08:	2112      	movs	r1, #18
 8015a0a:	6978      	ldr	r0, [r7, #20]
 8015a0c:	f002 fc9a 	bl	8018344 <tcp_enqueue_flags>
 8015a10:	4603      	mov	r3, r0
 8015a12:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8015a14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015a18:	2b00      	cmp	r3, #0
 8015a1a:	d004      	beq.n	8015a26 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8015a1c:	2100      	movs	r1, #0
 8015a1e:	6978      	ldr	r0, [r7, #20]
 8015a20:	f7fd ff0a 	bl	8013838 <tcp_abandon>
      return;
 8015a24:	e006      	b.n	8015a34 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8015a26:	6978      	ldr	r0, [r7, #20]
 8015a28:	f002 fd7a 	bl	8018520 <tcp_output>
  return;
 8015a2c:	e001      	b.n	8015a32 <tcp_listen_input+0x1be>
    return;
 8015a2e:	bf00      	nop
 8015a30:	e000      	b.n	8015a34 <tcp_listen_input+0x1c0>
  return;
 8015a32:	bf00      	nop
}
 8015a34:	371c      	adds	r7, #28
 8015a36:	46bd      	mov	sp, r7
 8015a38:	bd90      	pop	{r4, r7, pc}
 8015a3a:	bf00      	nop
 8015a3c:	2400456c 	.word	0x2400456c
 8015a40:	08025494 	.word	0x08025494
 8015a44:	0802568c 	.word	0x0802568c
 8015a48:	080254e0 	.word	0x080254e0
 8015a4c:	24004564 	.word	0x24004564
 8015a50:	2400456a 	.word	0x2400456a
 8015a54:	24004560 	.word	0x24004560
 8015a58:	24004550 	.word	0x24004550
 8015a5c:	24004e6c 	.word	0x24004e6c
 8015a60:	24004e70 	.word	0x24004e70
 8015a64:	24004e5c 	.word	0x24004e5c
 8015a68:	24007f3c 	.word	0x24007f3c
 8015a6c:	24007f38 	.word	0x24007f38

08015a70 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8015a70:	b580      	push	{r7, lr}
 8015a72:	b086      	sub	sp, #24
 8015a74:	af04      	add	r7, sp, #16
 8015a76:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8015a78:	4b2f      	ldr	r3, [pc, #188]	; (8015b38 <tcp_timewait_input+0xc8>)
 8015a7a:	781b      	ldrb	r3, [r3, #0]
 8015a7c:	f003 0304 	and.w	r3, r3, #4
 8015a80:	2b00      	cmp	r3, #0
 8015a82:	d153      	bne.n	8015b2c <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8015a84:	687b      	ldr	r3, [r7, #4]
 8015a86:	2b00      	cmp	r3, #0
 8015a88:	d106      	bne.n	8015a98 <tcp_timewait_input+0x28>
 8015a8a:	4b2c      	ldr	r3, [pc, #176]	; (8015b3c <tcp_timewait_input+0xcc>)
 8015a8c:	f240 22ee 	movw	r2, #750	; 0x2ee
 8015a90:	492b      	ldr	r1, [pc, #172]	; (8015b40 <tcp_timewait_input+0xd0>)
 8015a92:	482c      	ldr	r0, [pc, #176]	; (8015b44 <tcp_timewait_input+0xd4>)
 8015a94:	f009 fdb6 	bl	801f604 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8015a98:	4b27      	ldr	r3, [pc, #156]	; (8015b38 <tcp_timewait_input+0xc8>)
 8015a9a:	781b      	ldrb	r3, [r3, #0]
 8015a9c:	f003 0302 	and.w	r3, r3, #2
 8015aa0:	2b00      	cmp	r3, #0
 8015aa2:	d02a      	beq.n	8015afa <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8015aa4:	4b28      	ldr	r3, [pc, #160]	; (8015b48 <tcp_timewait_input+0xd8>)
 8015aa6:	681a      	ldr	r2, [r3, #0]
 8015aa8:	687b      	ldr	r3, [r7, #4]
 8015aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015aac:	1ad3      	subs	r3, r2, r3
 8015aae:	2b00      	cmp	r3, #0
 8015ab0:	db2d      	blt.n	8015b0e <tcp_timewait_input+0x9e>
 8015ab2:	4b25      	ldr	r3, [pc, #148]	; (8015b48 <tcp_timewait_input+0xd8>)
 8015ab4:	681a      	ldr	r2, [r3, #0]
 8015ab6:	687b      	ldr	r3, [r7, #4]
 8015ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015aba:	6879      	ldr	r1, [r7, #4]
 8015abc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8015abe:	440b      	add	r3, r1
 8015ac0:	1ad3      	subs	r3, r2, r3
 8015ac2:	2b00      	cmp	r3, #0
 8015ac4:	dc23      	bgt.n	8015b0e <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015ac6:	4b21      	ldr	r3, [pc, #132]	; (8015b4c <tcp_timewait_input+0xdc>)
 8015ac8:	6819      	ldr	r1, [r3, #0]
 8015aca:	4b21      	ldr	r3, [pc, #132]	; (8015b50 <tcp_timewait_input+0xe0>)
 8015acc:	881b      	ldrh	r3, [r3, #0]
 8015ace:	461a      	mov	r2, r3
 8015ad0:	4b1d      	ldr	r3, [pc, #116]	; (8015b48 <tcp_timewait_input+0xd8>)
 8015ad2:	681b      	ldr	r3, [r3, #0]
 8015ad4:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015ad6:	4b1f      	ldr	r3, [pc, #124]	; (8015b54 <tcp_timewait_input+0xe4>)
 8015ad8:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015ada:	885b      	ldrh	r3, [r3, #2]
 8015adc:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015ade:	4a1d      	ldr	r2, [pc, #116]	; (8015b54 <tcp_timewait_input+0xe4>)
 8015ae0:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015ae2:	8812      	ldrh	r2, [r2, #0]
 8015ae4:	b292      	uxth	r2, r2
 8015ae6:	9202      	str	r2, [sp, #8]
 8015ae8:	9301      	str	r3, [sp, #4]
 8015aea:	4b1b      	ldr	r3, [pc, #108]	; (8015b58 <tcp_timewait_input+0xe8>)
 8015aec:	9300      	str	r3, [sp, #0]
 8015aee:	4b1b      	ldr	r3, [pc, #108]	; (8015b5c <tcp_timewait_input+0xec>)
 8015af0:	4602      	mov	r2, r0
 8015af2:	6878      	ldr	r0, [r7, #4]
 8015af4:	f003 fac8 	bl	8019088 <tcp_rst>
      return;
 8015af8:	e01b      	b.n	8015b32 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8015afa:	4b0f      	ldr	r3, [pc, #60]	; (8015b38 <tcp_timewait_input+0xc8>)
 8015afc:	781b      	ldrb	r3, [r3, #0]
 8015afe:	f003 0301 	and.w	r3, r3, #1
 8015b02:	2b00      	cmp	r3, #0
 8015b04:	d003      	beq.n	8015b0e <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8015b06:	4b16      	ldr	r3, [pc, #88]	; (8015b60 <tcp_timewait_input+0xf0>)
 8015b08:	681a      	ldr	r2, [r3, #0]
 8015b0a:	687b      	ldr	r3, [r7, #4]
 8015b0c:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8015b0e:	4b10      	ldr	r3, [pc, #64]	; (8015b50 <tcp_timewait_input+0xe0>)
 8015b10:	881b      	ldrh	r3, [r3, #0]
 8015b12:	2b00      	cmp	r3, #0
 8015b14:	d00c      	beq.n	8015b30 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8015b16:	687b      	ldr	r3, [r7, #4]
 8015b18:	8b5b      	ldrh	r3, [r3, #26]
 8015b1a:	f043 0302 	orr.w	r3, r3, #2
 8015b1e:	b29a      	uxth	r2, r3
 8015b20:	687b      	ldr	r3, [r7, #4]
 8015b22:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8015b24:	6878      	ldr	r0, [r7, #4]
 8015b26:	f002 fcfb 	bl	8018520 <tcp_output>
  }
  return;
 8015b2a:	e001      	b.n	8015b30 <tcp_timewait_input+0xc0>
    return;
 8015b2c:	bf00      	nop
 8015b2e:	e000      	b.n	8015b32 <tcp_timewait_input+0xc2>
  return;
 8015b30:	bf00      	nop
}
 8015b32:	3708      	adds	r7, #8
 8015b34:	46bd      	mov	sp, r7
 8015b36:	bd80      	pop	{r7, pc}
 8015b38:	2400456c 	.word	0x2400456c
 8015b3c:	08025494 	.word	0x08025494
 8015b40:	080256ac 	.word	0x080256ac
 8015b44:	080254e0 	.word	0x080254e0
 8015b48:	24004560 	.word	0x24004560
 8015b4c:	24004564 	.word	0x24004564
 8015b50:	2400456a 	.word	0x2400456a
 8015b54:	24004550 	.word	0x24004550
 8015b58:	24004e6c 	.word	0x24004e6c
 8015b5c:	24004e70 	.word	0x24004e70
 8015b60:	24007f40 	.word	0x24007f40

08015b64 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8015b64:	b590      	push	{r4, r7, lr}
 8015b66:	b08d      	sub	sp, #52	; 0x34
 8015b68:	af04      	add	r7, sp, #16
 8015b6a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8015b6c:	2300      	movs	r3, #0
 8015b6e:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8015b70:	2300      	movs	r3, #0
 8015b72:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8015b74:	687b      	ldr	r3, [r7, #4]
 8015b76:	2b00      	cmp	r3, #0
 8015b78:	d106      	bne.n	8015b88 <tcp_process+0x24>
 8015b7a:	4ba5      	ldr	r3, [pc, #660]	; (8015e10 <tcp_process+0x2ac>)
 8015b7c:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8015b80:	49a4      	ldr	r1, [pc, #656]	; (8015e14 <tcp_process+0x2b0>)
 8015b82:	48a5      	ldr	r0, [pc, #660]	; (8015e18 <tcp_process+0x2b4>)
 8015b84:	f009 fd3e 	bl	801f604 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8015b88:	4ba4      	ldr	r3, [pc, #656]	; (8015e1c <tcp_process+0x2b8>)
 8015b8a:	781b      	ldrb	r3, [r3, #0]
 8015b8c:	f003 0304 	and.w	r3, r3, #4
 8015b90:	2b00      	cmp	r3, #0
 8015b92:	d04e      	beq.n	8015c32 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8015b94:	687b      	ldr	r3, [r7, #4]
 8015b96:	7d1b      	ldrb	r3, [r3, #20]
 8015b98:	2b02      	cmp	r3, #2
 8015b9a:	d108      	bne.n	8015bae <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8015b9c:	687b      	ldr	r3, [r7, #4]
 8015b9e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8015ba0:	4b9f      	ldr	r3, [pc, #636]	; (8015e20 <tcp_process+0x2bc>)
 8015ba2:	681b      	ldr	r3, [r3, #0]
 8015ba4:	429a      	cmp	r2, r3
 8015ba6:	d123      	bne.n	8015bf0 <tcp_process+0x8c>
        acceptable = 1;
 8015ba8:	2301      	movs	r3, #1
 8015baa:	76fb      	strb	r3, [r7, #27]
 8015bac:	e020      	b.n	8015bf0 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8015bae:	687b      	ldr	r3, [r7, #4]
 8015bb0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015bb2:	4b9c      	ldr	r3, [pc, #624]	; (8015e24 <tcp_process+0x2c0>)
 8015bb4:	681b      	ldr	r3, [r3, #0]
 8015bb6:	429a      	cmp	r2, r3
 8015bb8:	d102      	bne.n	8015bc0 <tcp_process+0x5c>
        acceptable = 1;
 8015bba:	2301      	movs	r3, #1
 8015bbc:	76fb      	strb	r3, [r7, #27]
 8015bbe:	e017      	b.n	8015bf0 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8015bc0:	4b98      	ldr	r3, [pc, #608]	; (8015e24 <tcp_process+0x2c0>)
 8015bc2:	681a      	ldr	r2, [r3, #0]
 8015bc4:	687b      	ldr	r3, [r7, #4]
 8015bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015bc8:	1ad3      	subs	r3, r2, r3
 8015bca:	2b00      	cmp	r3, #0
 8015bcc:	db10      	blt.n	8015bf0 <tcp_process+0x8c>
 8015bce:	4b95      	ldr	r3, [pc, #596]	; (8015e24 <tcp_process+0x2c0>)
 8015bd0:	681a      	ldr	r2, [r3, #0]
 8015bd2:	687b      	ldr	r3, [r7, #4]
 8015bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015bd6:	6879      	ldr	r1, [r7, #4]
 8015bd8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8015bda:	440b      	add	r3, r1
 8015bdc:	1ad3      	subs	r3, r2, r3
 8015bde:	2b00      	cmp	r3, #0
 8015be0:	dc06      	bgt.n	8015bf0 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8015be2:	687b      	ldr	r3, [r7, #4]
 8015be4:	8b5b      	ldrh	r3, [r3, #26]
 8015be6:	f043 0302 	orr.w	r3, r3, #2
 8015bea:	b29a      	uxth	r2, r3
 8015bec:	687b      	ldr	r3, [r7, #4]
 8015bee:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8015bf0:	7efb      	ldrb	r3, [r7, #27]
 8015bf2:	2b00      	cmp	r3, #0
 8015bf4:	d01b      	beq.n	8015c2e <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8015bf6:	687b      	ldr	r3, [r7, #4]
 8015bf8:	7d1b      	ldrb	r3, [r3, #20]
 8015bfa:	2b00      	cmp	r3, #0
 8015bfc:	d106      	bne.n	8015c0c <tcp_process+0xa8>
 8015bfe:	4b84      	ldr	r3, [pc, #528]	; (8015e10 <tcp_process+0x2ac>)
 8015c00:	f44f 724e 	mov.w	r2, #824	; 0x338
 8015c04:	4988      	ldr	r1, [pc, #544]	; (8015e28 <tcp_process+0x2c4>)
 8015c06:	4884      	ldr	r0, [pc, #528]	; (8015e18 <tcp_process+0x2b4>)
 8015c08:	f009 fcfc 	bl	801f604 <iprintf>
      recv_flags |= TF_RESET;
 8015c0c:	4b87      	ldr	r3, [pc, #540]	; (8015e2c <tcp_process+0x2c8>)
 8015c0e:	781b      	ldrb	r3, [r3, #0]
 8015c10:	f043 0308 	orr.w	r3, r3, #8
 8015c14:	b2da      	uxtb	r2, r3
 8015c16:	4b85      	ldr	r3, [pc, #532]	; (8015e2c <tcp_process+0x2c8>)
 8015c18:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8015c1a:	687b      	ldr	r3, [r7, #4]
 8015c1c:	8b5b      	ldrh	r3, [r3, #26]
 8015c1e:	f023 0301 	bic.w	r3, r3, #1
 8015c22:	b29a      	uxth	r2, r3
 8015c24:	687b      	ldr	r3, [r7, #4]
 8015c26:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8015c28:	f06f 030d 	mvn.w	r3, #13
 8015c2c:	e37a      	b.n	8016324 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8015c2e:	2300      	movs	r3, #0
 8015c30:	e378      	b.n	8016324 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8015c32:	4b7a      	ldr	r3, [pc, #488]	; (8015e1c <tcp_process+0x2b8>)
 8015c34:	781b      	ldrb	r3, [r3, #0]
 8015c36:	f003 0302 	and.w	r3, r3, #2
 8015c3a:	2b00      	cmp	r3, #0
 8015c3c:	d010      	beq.n	8015c60 <tcp_process+0xfc>
 8015c3e:	687b      	ldr	r3, [r7, #4]
 8015c40:	7d1b      	ldrb	r3, [r3, #20]
 8015c42:	2b02      	cmp	r3, #2
 8015c44:	d00c      	beq.n	8015c60 <tcp_process+0xfc>
 8015c46:	687b      	ldr	r3, [r7, #4]
 8015c48:	7d1b      	ldrb	r3, [r3, #20]
 8015c4a:	2b03      	cmp	r3, #3
 8015c4c:	d008      	beq.n	8015c60 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8015c4e:	687b      	ldr	r3, [r7, #4]
 8015c50:	8b5b      	ldrh	r3, [r3, #26]
 8015c52:	f043 0302 	orr.w	r3, r3, #2
 8015c56:	b29a      	uxth	r2, r3
 8015c58:	687b      	ldr	r3, [r7, #4]
 8015c5a:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8015c5c:	2300      	movs	r3, #0
 8015c5e:	e361      	b.n	8016324 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8015c60:	687b      	ldr	r3, [r7, #4]
 8015c62:	8b5b      	ldrh	r3, [r3, #26]
 8015c64:	f003 0310 	and.w	r3, r3, #16
 8015c68:	2b00      	cmp	r3, #0
 8015c6a:	d103      	bne.n	8015c74 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8015c6c:	4b70      	ldr	r3, [pc, #448]	; (8015e30 <tcp_process+0x2cc>)
 8015c6e:	681a      	ldr	r2, [r3, #0]
 8015c70:	687b      	ldr	r3, [r7, #4]
 8015c72:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8015c74:	687b      	ldr	r3, [r7, #4]
 8015c76:	2200      	movs	r2, #0
 8015c78:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8015c7c:	687b      	ldr	r3, [r7, #4]
 8015c7e:	2200      	movs	r2, #0
 8015c80:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8015c84:	6878      	ldr	r0, [r7, #4]
 8015c86:	f001 fc2d 	bl	80174e4 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8015c8a:	687b      	ldr	r3, [r7, #4]
 8015c8c:	7d1b      	ldrb	r3, [r3, #20]
 8015c8e:	3b02      	subs	r3, #2
 8015c90:	2b07      	cmp	r3, #7
 8015c92:	f200 8337 	bhi.w	8016304 <tcp_process+0x7a0>
 8015c96:	a201      	add	r2, pc, #4	; (adr r2, 8015c9c <tcp_process+0x138>)
 8015c98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015c9c:	08015cbd 	.word	0x08015cbd
 8015ca0:	08015eed 	.word	0x08015eed
 8015ca4:	08016065 	.word	0x08016065
 8015ca8:	0801608f 	.word	0x0801608f
 8015cac:	080161b3 	.word	0x080161b3
 8015cb0:	08016065 	.word	0x08016065
 8015cb4:	0801623f 	.word	0x0801623f
 8015cb8:	080162cf 	.word	0x080162cf
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8015cbc:	4b57      	ldr	r3, [pc, #348]	; (8015e1c <tcp_process+0x2b8>)
 8015cbe:	781b      	ldrb	r3, [r3, #0]
 8015cc0:	f003 0310 	and.w	r3, r3, #16
 8015cc4:	2b00      	cmp	r3, #0
 8015cc6:	f000 80e4 	beq.w	8015e92 <tcp_process+0x32e>
 8015cca:	4b54      	ldr	r3, [pc, #336]	; (8015e1c <tcp_process+0x2b8>)
 8015ccc:	781b      	ldrb	r3, [r3, #0]
 8015cce:	f003 0302 	and.w	r3, r3, #2
 8015cd2:	2b00      	cmp	r3, #0
 8015cd4:	f000 80dd 	beq.w	8015e92 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8015cd8:	687b      	ldr	r3, [r7, #4]
 8015cda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015cdc:	1c5a      	adds	r2, r3, #1
 8015cde:	4b50      	ldr	r3, [pc, #320]	; (8015e20 <tcp_process+0x2bc>)
 8015ce0:	681b      	ldr	r3, [r3, #0]
 8015ce2:	429a      	cmp	r2, r3
 8015ce4:	f040 80d5 	bne.w	8015e92 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8015ce8:	4b4e      	ldr	r3, [pc, #312]	; (8015e24 <tcp_process+0x2c0>)
 8015cea:	681b      	ldr	r3, [r3, #0]
 8015cec:	1c5a      	adds	r2, r3, #1
 8015cee:	687b      	ldr	r3, [r7, #4]
 8015cf0:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8015cf2:	687b      	ldr	r3, [r7, #4]
 8015cf4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015cf6:	687b      	ldr	r3, [r7, #4]
 8015cf8:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8015cfa:	4b49      	ldr	r3, [pc, #292]	; (8015e20 <tcp_process+0x2bc>)
 8015cfc:	681a      	ldr	r2, [r3, #0]
 8015cfe:	687b      	ldr	r3, [r7, #4]
 8015d00:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8015d02:	4b4c      	ldr	r3, [pc, #304]	; (8015e34 <tcp_process+0x2d0>)
 8015d04:	681b      	ldr	r3, [r3, #0]
 8015d06:	89db      	ldrh	r3, [r3, #14]
 8015d08:	b29a      	uxth	r2, r3
 8015d0a:	687b      	ldr	r3, [r7, #4]
 8015d0c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8015d10:	687b      	ldr	r3, [r7, #4]
 8015d12:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8015d16:	687b      	ldr	r3, [r7, #4]
 8015d18:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8015d1c:	4b41      	ldr	r3, [pc, #260]	; (8015e24 <tcp_process+0x2c0>)
 8015d1e:	681b      	ldr	r3, [r3, #0]
 8015d20:	1e5a      	subs	r2, r3, #1
 8015d22:	687b      	ldr	r3, [r7, #4]
 8015d24:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8015d26:	687b      	ldr	r3, [r7, #4]
 8015d28:	2204      	movs	r2, #4
 8015d2a:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8015d2c:	687b      	ldr	r3, [r7, #4]
 8015d2e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8015d30:	687b      	ldr	r3, [r7, #4]
 8015d32:	3304      	adds	r3, #4
 8015d34:	4618      	mov	r0, r3
 8015d36:	f007 f9d3 	bl	801d0e0 <ip4_route>
 8015d3a:	4601      	mov	r1, r0
 8015d3c:	687b      	ldr	r3, [r7, #4]
 8015d3e:	3304      	adds	r3, #4
 8015d40:	461a      	mov	r2, r3
 8015d42:	4620      	mov	r0, r4
 8015d44:	f7ff f88e 	bl	8014e64 <tcp_eff_send_mss_netif>
 8015d48:	4603      	mov	r3, r0
 8015d4a:	461a      	mov	r2, r3
 8015d4c:	687b      	ldr	r3, [r7, #4]
 8015d4e:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8015d50:	687b      	ldr	r3, [r7, #4]
 8015d52:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015d54:	009a      	lsls	r2, r3, #2
 8015d56:	687b      	ldr	r3, [r7, #4]
 8015d58:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015d5a:	005b      	lsls	r3, r3, #1
 8015d5c:	f241 111c 	movw	r1, #4380	; 0x111c
 8015d60:	428b      	cmp	r3, r1
 8015d62:	bf38      	it	cc
 8015d64:	460b      	movcc	r3, r1
 8015d66:	429a      	cmp	r2, r3
 8015d68:	d204      	bcs.n	8015d74 <tcp_process+0x210>
 8015d6a:	687b      	ldr	r3, [r7, #4]
 8015d6c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015d6e:	009b      	lsls	r3, r3, #2
 8015d70:	b29b      	uxth	r3, r3
 8015d72:	e00d      	b.n	8015d90 <tcp_process+0x22c>
 8015d74:	687b      	ldr	r3, [r7, #4]
 8015d76:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015d78:	005b      	lsls	r3, r3, #1
 8015d7a:	f241 121c 	movw	r2, #4380	; 0x111c
 8015d7e:	4293      	cmp	r3, r2
 8015d80:	d904      	bls.n	8015d8c <tcp_process+0x228>
 8015d82:	687b      	ldr	r3, [r7, #4]
 8015d84:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015d86:	005b      	lsls	r3, r3, #1
 8015d88:	b29b      	uxth	r3, r3
 8015d8a:	e001      	b.n	8015d90 <tcp_process+0x22c>
 8015d8c:	f241 131c 	movw	r3, #4380	; 0x111c
 8015d90:	687a      	ldr	r2, [r7, #4]
 8015d92:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8015d96:	687b      	ldr	r3, [r7, #4]
 8015d98:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015d9c:	2b00      	cmp	r3, #0
 8015d9e:	d106      	bne.n	8015dae <tcp_process+0x24a>
 8015da0:	4b1b      	ldr	r3, [pc, #108]	; (8015e10 <tcp_process+0x2ac>)
 8015da2:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8015da6:	4924      	ldr	r1, [pc, #144]	; (8015e38 <tcp_process+0x2d4>)
 8015da8:	481b      	ldr	r0, [pc, #108]	; (8015e18 <tcp_process+0x2b4>)
 8015daa:	f009 fc2b 	bl	801f604 <iprintf>
        --pcb->snd_queuelen;
 8015dae:	687b      	ldr	r3, [r7, #4]
 8015db0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015db4:	3b01      	subs	r3, #1
 8015db6:	b29a      	uxth	r2, r3
 8015db8:	687b      	ldr	r3, [r7, #4]
 8015dba:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8015dbe:	687b      	ldr	r3, [r7, #4]
 8015dc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015dc2:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8015dc4:	69fb      	ldr	r3, [r7, #28]
 8015dc6:	2b00      	cmp	r3, #0
 8015dc8:	d111      	bne.n	8015dee <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8015dca:	687b      	ldr	r3, [r7, #4]
 8015dcc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015dce:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8015dd0:	69fb      	ldr	r3, [r7, #28]
 8015dd2:	2b00      	cmp	r3, #0
 8015dd4:	d106      	bne.n	8015de4 <tcp_process+0x280>
 8015dd6:	4b0e      	ldr	r3, [pc, #56]	; (8015e10 <tcp_process+0x2ac>)
 8015dd8:	f44f 725d 	mov.w	r2, #884	; 0x374
 8015ddc:	4917      	ldr	r1, [pc, #92]	; (8015e3c <tcp_process+0x2d8>)
 8015dde:	480e      	ldr	r0, [pc, #56]	; (8015e18 <tcp_process+0x2b4>)
 8015de0:	f009 fc10 	bl	801f604 <iprintf>
          pcb->unsent = rseg->next;
 8015de4:	69fb      	ldr	r3, [r7, #28]
 8015de6:	681a      	ldr	r2, [r3, #0]
 8015de8:	687b      	ldr	r3, [r7, #4]
 8015dea:	66da      	str	r2, [r3, #108]	; 0x6c
 8015dec:	e003      	b.n	8015df6 <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 8015dee:	69fb      	ldr	r3, [r7, #28]
 8015df0:	681a      	ldr	r2, [r3, #0]
 8015df2:	687b      	ldr	r3, [r7, #4]
 8015df4:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8015df6:	69f8      	ldr	r0, [r7, #28]
 8015df8:	f7fe fc6f 	bl	80146da <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8015dfc:	687b      	ldr	r3, [r7, #4]
 8015dfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015e00:	2b00      	cmp	r3, #0
 8015e02:	d11d      	bne.n	8015e40 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8015e04:	687b      	ldr	r3, [r7, #4]
 8015e06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015e0a:	861a      	strh	r2, [r3, #48]	; 0x30
 8015e0c:	e01f      	b.n	8015e4e <tcp_process+0x2ea>
 8015e0e:	bf00      	nop
 8015e10:	08025494 	.word	0x08025494
 8015e14:	080256cc 	.word	0x080256cc
 8015e18:	080254e0 	.word	0x080254e0
 8015e1c:	2400456c 	.word	0x2400456c
 8015e20:	24004564 	.word	0x24004564
 8015e24:	24004560 	.word	0x24004560
 8015e28:	080256e8 	.word	0x080256e8
 8015e2c:	2400456d 	.word	0x2400456d
 8015e30:	24007f40 	.word	0x24007f40
 8015e34:	24004550 	.word	0x24004550
 8015e38:	08025708 	.word	0x08025708
 8015e3c:	08025720 	.word	0x08025720
        } else {
          pcb->rtime = 0;
 8015e40:	687b      	ldr	r3, [r7, #4]
 8015e42:	2200      	movs	r2, #0
 8015e44:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8015e46:	687b      	ldr	r3, [r7, #4]
 8015e48:	2200      	movs	r2, #0
 8015e4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8015e4e:	687b      	ldr	r3, [r7, #4]
 8015e50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8015e54:	2b00      	cmp	r3, #0
 8015e56:	d00a      	beq.n	8015e6e <tcp_process+0x30a>
 8015e58:	687b      	ldr	r3, [r7, #4]
 8015e5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8015e5e:	687a      	ldr	r2, [r7, #4]
 8015e60:	6910      	ldr	r0, [r2, #16]
 8015e62:	2200      	movs	r2, #0
 8015e64:	6879      	ldr	r1, [r7, #4]
 8015e66:	4798      	blx	r3
 8015e68:	4603      	mov	r3, r0
 8015e6a:	76bb      	strb	r3, [r7, #26]
 8015e6c:	e001      	b.n	8015e72 <tcp_process+0x30e>
 8015e6e:	2300      	movs	r3, #0
 8015e70:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8015e72:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8015e76:	f113 0f0d 	cmn.w	r3, #13
 8015e7a:	d102      	bne.n	8015e82 <tcp_process+0x31e>
          return ERR_ABRT;
 8015e7c:	f06f 030c 	mvn.w	r3, #12
 8015e80:	e250      	b.n	8016324 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8015e82:	687b      	ldr	r3, [r7, #4]
 8015e84:	8b5b      	ldrh	r3, [r3, #26]
 8015e86:	f043 0302 	orr.w	r3, r3, #2
 8015e8a:	b29a      	uxth	r2, r3
 8015e8c:	687b      	ldr	r3, [r7, #4]
 8015e8e:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8015e90:	e23a      	b.n	8016308 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8015e92:	4b9d      	ldr	r3, [pc, #628]	; (8016108 <tcp_process+0x5a4>)
 8015e94:	781b      	ldrb	r3, [r3, #0]
 8015e96:	f003 0310 	and.w	r3, r3, #16
 8015e9a:	2b00      	cmp	r3, #0
 8015e9c:	f000 8234 	beq.w	8016308 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015ea0:	4b9a      	ldr	r3, [pc, #616]	; (801610c <tcp_process+0x5a8>)
 8015ea2:	6819      	ldr	r1, [r3, #0]
 8015ea4:	4b9a      	ldr	r3, [pc, #616]	; (8016110 <tcp_process+0x5ac>)
 8015ea6:	881b      	ldrh	r3, [r3, #0]
 8015ea8:	461a      	mov	r2, r3
 8015eaa:	4b9a      	ldr	r3, [pc, #616]	; (8016114 <tcp_process+0x5b0>)
 8015eac:	681b      	ldr	r3, [r3, #0]
 8015eae:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015eb0:	4b99      	ldr	r3, [pc, #612]	; (8016118 <tcp_process+0x5b4>)
 8015eb2:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015eb4:	885b      	ldrh	r3, [r3, #2]
 8015eb6:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015eb8:	4a97      	ldr	r2, [pc, #604]	; (8016118 <tcp_process+0x5b4>)
 8015eba:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015ebc:	8812      	ldrh	r2, [r2, #0]
 8015ebe:	b292      	uxth	r2, r2
 8015ec0:	9202      	str	r2, [sp, #8]
 8015ec2:	9301      	str	r3, [sp, #4]
 8015ec4:	4b95      	ldr	r3, [pc, #596]	; (801611c <tcp_process+0x5b8>)
 8015ec6:	9300      	str	r3, [sp, #0]
 8015ec8:	4b95      	ldr	r3, [pc, #596]	; (8016120 <tcp_process+0x5bc>)
 8015eca:	4602      	mov	r2, r0
 8015ecc:	6878      	ldr	r0, [r7, #4]
 8015ece:	f003 f8db 	bl	8019088 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8015ed2:	687b      	ldr	r3, [r7, #4]
 8015ed4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8015ed8:	2b05      	cmp	r3, #5
 8015eda:	f200 8215 	bhi.w	8016308 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8015ede:	687b      	ldr	r3, [r7, #4]
 8015ee0:	2200      	movs	r2, #0
 8015ee2:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8015ee4:	6878      	ldr	r0, [r7, #4]
 8015ee6:	f002 fea5 	bl	8018c34 <tcp_rexmit_rto>
      break;
 8015eea:	e20d      	b.n	8016308 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8015eec:	4b86      	ldr	r3, [pc, #536]	; (8016108 <tcp_process+0x5a4>)
 8015eee:	781b      	ldrb	r3, [r3, #0]
 8015ef0:	f003 0310 	and.w	r3, r3, #16
 8015ef4:	2b00      	cmp	r3, #0
 8015ef6:	f000 80a1 	beq.w	801603c <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8015efa:	4b84      	ldr	r3, [pc, #528]	; (801610c <tcp_process+0x5a8>)
 8015efc:	681a      	ldr	r2, [r3, #0]
 8015efe:	687b      	ldr	r3, [r7, #4]
 8015f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015f02:	1ad3      	subs	r3, r2, r3
 8015f04:	3b01      	subs	r3, #1
 8015f06:	2b00      	cmp	r3, #0
 8015f08:	db7e      	blt.n	8016008 <tcp_process+0x4a4>
 8015f0a:	4b80      	ldr	r3, [pc, #512]	; (801610c <tcp_process+0x5a8>)
 8015f0c:	681a      	ldr	r2, [r3, #0]
 8015f0e:	687b      	ldr	r3, [r7, #4]
 8015f10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015f12:	1ad3      	subs	r3, r2, r3
 8015f14:	2b00      	cmp	r3, #0
 8015f16:	dc77      	bgt.n	8016008 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8015f18:	687b      	ldr	r3, [r7, #4]
 8015f1a:	2204      	movs	r2, #4
 8015f1c:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8015f1e:	687b      	ldr	r3, [r7, #4]
 8015f20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8015f22:	2b00      	cmp	r3, #0
 8015f24:	d102      	bne.n	8015f2c <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8015f26:	23fa      	movs	r3, #250	; 0xfa
 8015f28:	76bb      	strb	r3, [r7, #26]
 8015f2a:	e01d      	b.n	8015f68 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8015f2c:	687b      	ldr	r3, [r7, #4]
 8015f2e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8015f30:	699b      	ldr	r3, [r3, #24]
 8015f32:	2b00      	cmp	r3, #0
 8015f34:	d106      	bne.n	8015f44 <tcp_process+0x3e0>
 8015f36:	4b7b      	ldr	r3, [pc, #492]	; (8016124 <tcp_process+0x5c0>)
 8015f38:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8015f3c:	497a      	ldr	r1, [pc, #488]	; (8016128 <tcp_process+0x5c4>)
 8015f3e:	487b      	ldr	r0, [pc, #492]	; (801612c <tcp_process+0x5c8>)
 8015f40:	f009 fb60 	bl	801f604 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8015f44:	687b      	ldr	r3, [r7, #4]
 8015f46:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8015f48:	699b      	ldr	r3, [r3, #24]
 8015f4a:	2b00      	cmp	r3, #0
 8015f4c:	d00a      	beq.n	8015f64 <tcp_process+0x400>
 8015f4e:	687b      	ldr	r3, [r7, #4]
 8015f50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8015f52:	699b      	ldr	r3, [r3, #24]
 8015f54:	687a      	ldr	r2, [r7, #4]
 8015f56:	6910      	ldr	r0, [r2, #16]
 8015f58:	2200      	movs	r2, #0
 8015f5a:	6879      	ldr	r1, [r7, #4]
 8015f5c:	4798      	blx	r3
 8015f5e:	4603      	mov	r3, r0
 8015f60:	76bb      	strb	r3, [r7, #26]
 8015f62:	e001      	b.n	8015f68 <tcp_process+0x404>
 8015f64:	23f0      	movs	r3, #240	; 0xf0
 8015f66:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8015f68:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8015f6c:	2b00      	cmp	r3, #0
 8015f6e:	d00a      	beq.n	8015f86 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8015f70:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8015f74:	f113 0f0d 	cmn.w	r3, #13
 8015f78:	d002      	beq.n	8015f80 <tcp_process+0x41c>
              tcp_abort(pcb);
 8015f7a:	6878      	ldr	r0, [r7, #4]
 8015f7c:	f7fd fd1a 	bl	80139b4 <tcp_abort>
            }
            return ERR_ABRT;
 8015f80:	f06f 030c 	mvn.w	r3, #12
 8015f84:	e1ce      	b.n	8016324 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8015f86:	6878      	ldr	r0, [r7, #4]
 8015f88:	f000 fae0 	bl	801654c <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8015f8c:	4b68      	ldr	r3, [pc, #416]	; (8016130 <tcp_process+0x5cc>)
 8015f8e:	881b      	ldrh	r3, [r3, #0]
 8015f90:	2b00      	cmp	r3, #0
 8015f92:	d005      	beq.n	8015fa0 <tcp_process+0x43c>
            recv_acked--;
 8015f94:	4b66      	ldr	r3, [pc, #408]	; (8016130 <tcp_process+0x5cc>)
 8015f96:	881b      	ldrh	r3, [r3, #0]
 8015f98:	3b01      	subs	r3, #1
 8015f9a:	b29a      	uxth	r2, r3
 8015f9c:	4b64      	ldr	r3, [pc, #400]	; (8016130 <tcp_process+0x5cc>)
 8015f9e:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8015fa0:	687b      	ldr	r3, [r7, #4]
 8015fa2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015fa4:	009a      	lsls	r2, r3, #2
 8015fa6:	687b      	ldr	r3, [r7, #4]
 8015fa8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015faa:	005b      	lsls	r3, r3, #1
 8015fac:	f241 111c 	movw	r1, #4380	; 0x111c
 8015fb0:	428b      	cmp	r3, r1
 8015fb2:	bf38      	it	cc
 8015fb4:	460b      	movcc	r3, r1
 8015fb6:	429a      	cmp	r2, r3
 8015fb8:	d204      	bcs.n	8015fc4 <tcp_process+0x460>
 8015fba:	687b      	ldr	r3, [r7, #4]
 8015fbc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015fbe:	009b      	lsls	r3, r3, #2
 8015fc0:	b29b      	uxth	r3, r3
 8015fc2:	e00d      	b.n	8015fe0 <tcp_process+0x47c>
 8015fc4:	687b      	ldr	r3, [r7, #4]
 8015fc6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015fc8:	005b      	lsls	r3, r3, #1
 8015fca:	f241 121c 	movw	r2, #4380	; 0x111c
 8015fce:	4293      	cmp	r3, r2
 8015fd0:	d904      	bls.n	8015fdc <tcp_process+0x478>
 8015fd2:	687b      	ldr	r3, [r7, #4]
 8015fd4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015fd6:	005b      	lsls	r3, r3, #1
 8015fd8:	b29b      	uxth	r3, r3
 8015fda:	e001      	b.n	8015fe0 <tcp_process+0x47c>
 8015fdc:	f241 131c 	movw	r3, #4380	; 0x111c
 8015fe0:	687a      	ldr	r2, [r7, #4]
 8015fe2:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8015fe6:	4b53      	ldr	r3, [pc, #332]	; (8016134 <tcp_process+0x5d0>)
 8015fe8:	781b      	ldrb	r3, [r3, #0]
 8015fea:	f003 0320 	and.w	r3, r3, #32
 8015fee:	2b00      	cmp	r3, #0
 8015ff0:	d037      	beq.n	8016062 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8015ff2:	687b      	ldr	r3, [r7, #4]
 8015ff4:	8b5b      	ldrh	r3, [r3, #26]
 8015ff6:	f043 0302 	orr.w	r3, r3, #2
 8015ffa:	b29a      	uxth	r2, r3
 8015ffc:	687b      	ldr	r3, [r7, #4]
 8015ffe:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8016000:	687b      	ldr	r3, [r7, #4]
 8016002:	2207      	movs	r2, #7
 8016004:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8016006:	e02c      	b.n	8016062 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016008:	4b40      	ldr	r3, [pc, #256]	; (801610c <tcp_process+0x5a8>)
 801600a:	6819      	ldr	r1, [r3, #0]
 801600c:	4b40      	ldr	r3, [pc, #256]	; (8016110 <tcp_process+0x5ac>)
 801600e:	881b      	ldrh	r3, [r3, #0]
 8016010:	461a      	mov	r2, r3
 8016012:	4b40      	ldr	r3, [pc, #256]	; (8016114 <tcp_process+0x5b0>)
 8016014:	681b      	ldr	r3, [r3, #0]
 8016016:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8016018:	4b3f      	ldr	r3, [pc, #252]	; (8016118 <tcp_process+0x5b4>)
 801601a:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801601c:	885b      	ldrh	r3, [r3, #2]
 801601e:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8016020:	4a3d      	ldr	r2, [pc, #244]	; (8016118 <tcp_process+0x5b4>)
 8016022:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016024:	8812      	ldrh	r2, [r2, #0]
 8016026:	b292      	uxth	r2, r2
 8016028:	9202      	str	r2, [sp, #8]
 801602a:	9301      	str	r3, [sp, #4]
 801602c:	4b3b      	ldr	r3, [pc, #236]	; (801611c <tcp_process+0x5b8>)
 801602e:	9300      	str	r3, [sp, #0]
 8016030:	4b3b      	ldr	r3, [pc, #236]	; (8016120 <tcp_process+0x5bc>)
 8016032:	4602      	mov	r2, r0
 8016034:	6878      	ldr	r0, [r7, #4]
 8016036:	f003 f827 	bl	8019088 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 801603a:	e167      	b.n	801630c <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 801603c:	4b32      	ldr	r3, [pc, #200]	; (8016108 <tcp_process+0x5a4>)
 801603e:	781b      	ldrb	r3, [r3, #0]
 8016040:	f003 0302 	and.w	r3, r3, #2
 8016044:	2b00      	cmp	r3, #0
 8016046:	f000 8161 	beq.w	801630c <tcp_process+0x7a8>
 801604a:	687b      	ldr	r3, [r7, #4]
 801604c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801604e:	1e5a      	subs	r2, r3, #1
 8016050:	4b30      	ldr	r3, [pc, #192]	; (8016114 <tcp_process+0x5b0>)
 8016052:	681b      	ldr	r3, [r3, #0]
 8016054:	429a      	cmp	r2, r3
 8016056:	f040 8159 	bne.w	801630c <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 801605a:	6878      	ldr	r0, [r7, #4]
 801605c:	f002 fe0c 	bl	8018c78 <tcp_rexmit>
      break;
 8016060:	e154      	b.n	801630c <tcp_process+0x7a8>
 8016062:	e153      	b.n	801630c <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8016064:	6878      	ldr	r0, [r7, #4]
 8016066:	f000 fa71 	bl	801654c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 801606a:	4b32      	ldr	r3, [pc, #200]	; (8016134 <tcp_process+0x5d0>)
 801606c:	781b      	ldrb	r3, [r3, #0]
 801606e:	f003 0320 	and.w	r3, r3, #32
 8016072:	2b00      	cmp	r3, #0
 8016074:	f000 814c 	beq.w	8016310 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8016078:	687b      	ldr	r3, [r7, #4]
 801607a:	8b5b      	ldrh	r3, [r3, #26]
 801607c:	f043 0302 	orr.w	r3, r3, #2
 8016080:	b29a      	uxth	r2, r3
 8016082:	687b      	ldr	r3, [r7, #4]
 8016084:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8016086:	687b      	ldr	r3, [r7, #4]
 8016088:	2207      	movs	r2, #7
 801608a:	751a      	strb	r2, [r3, #20]
      }
      break;
 801608c:	e140      	b.n	8016310 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 801608e:	6878      	ldr	r0, [r7, #4]
 8016090:	f000 fa5c 	bl	801654c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8016094:	4b27      	ldr	r3, [pc, #156]	; (8016134 <tcp_process+0x5d0>)
 8016096:	781b      	ldrb	r3, [r3, #0]
 8016098:	f003 0320 	and.w	r3, r3, #32
 801609c:	2b00      	cmp	r3, #0
 801609e:	d071      	beq.n	8016184 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80160a0:	4b19      	ldr	r3, [pc, #100]	; (8016108 <tcp_process+0x5a4>)
 80160a2:	781b      	ldrb	r3, [r3, #0]
 80160a4:	f003 0310 	and.w	r3, r3, #16
 80160a8:	2b00      	cmp	r3, #0
 80160aa:	d060      	beq.n	801616e <tcp_process+0x60a>
 80160ac:	687b      	ldr	r3, [r7, #4]
 80160ae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80160b0:	4b16      	ldr	r3, [pc, #88]	; (801610c <tcp_process+0x5a8>)
 80160b2:	681b      	ldr	r3, [r3, #0]
 80160b4:	429a      	cmp	r2, r3
 80160b6:	d15a      	bne.n	801616e <tcp_process+0x60a>
            pcb->unsent == NULL) {
 80160b8:	687b      	ldr	r3, [r7, #4]
 80160ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80160bc:	2b00      	cmp	r3, #0
 80160be:	d156      	bne.n	801616e <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 80160c0:	687b      	ldr	r3, [r7, #4]
 80160c2:	8b5b      	ldrh	r3, [r3, #26]
 80160c4:	f043 0302 	orr.w	r3, r3, #2
 80160c8:	b29a      	uxth	r2, r3
 80160ca:	687b      	ldr	r3, [r7, #4]
 80160cc:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 80160ce:	6878      	ldr	r0, [r7, #4]
 80160d0:	f7fe fdbe 	bl	8014c50 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 80160d4:	4b18      	ldr	r3, [pc, #96]	; (8016138 <tcp_process+0x5d4>)
 80160d6:	681b      	ldr	r3, [r3, #0]
 80160d8:	687a      	ldr	r2, [r7, #4]
 80160da:	429a      	cmp	r2, r3
 80160dc:	d105      	bne.n	80160ea <tcp_process+0x586>
 80160de:	4b16      	ldr	r3, [pc, #88]	; (8016138 <tcp_process+0x5d4>)
 80160e0:	681b      	ldr	r3, [r3, #0]
 80160e2:	68db      	ldr	r3, [r3, #12]
 80160e4:	4a14      	ldr	r2, [pc, #80]	; (8016138 <tcp_process+0x5d4>)
 80160e6:	6013      	str	r3, [r2, #0]
 80160e8:	e02e      	b.n	8016148 <tcp_process+0x5e4>
 80160ea:	4b13      	ldr	r3, [pc, #76]	; (8016138 <tcp_process+0x5d4>)
 80160ec:	681b      	ldr	r3, [r3, #0]
 80160ee:	617b      	str	r3, [r7, #20]
 80160f0:	e027      	b.n	8016142 <tcp_process+0x5de>
 80160f2:	697b      	ldr	r3, [r7, #20]
 80160f4:	68db      	ldr	r3, [r3, #12]
 80160f6:	687a      	ldr	r2, [r7, #4]
 80160f8:	429a      	cmp	r2, r3
 80160fa:	d11f      	bne.n	801613c <tcp_process+0x5d8>
 80160fc:	687b      	ldr	r3, [r7, #4]
 80160fe:	68da      	ldr	r2, [r3, #12]
 8016100:	697b      	ldr	r3, [r7, #20]
 8016102:	60da      	str	r2, [r3, #12]
 8016104:	e020      	b.n	8016148 <tcp_process+0x5e4>
 8016106:	bf00      	nop
 8016108:	2400456c 	.word	0x2400456c
 801610c:	24004564 	.word	0x24004564
 8016110:	2400456a 	.word	0x2400456a
 8016114:	24004560 	.word	0x24004560
 8016118:	24004550 	.word	0x24004550
 801611c:	24004e6c 	.word	0x24004e6c
 8016120:	24004e70 	.word	0x24004e70
 8016124:	08025494 	.word	0x08025494
 8016128:	08025734 	.word	0x08025734
 801612c:	080254e0 	.word	0x080254e0
 8016130:	24004568 	.word	0x24004568
 8016134:	2400456d 	.word	0x2400456d
 8016138:	24007f3c 	.word	0x24007f3c
 801613c:	697b      	ldr	r3, [r7, #20]
 801613e:	68db      	ldr	r3, [r3, #12]
 8016140:	617b      	str	r3, [r7, #20]
 8016142:	697b      	ldr	r3, [r7, #20]
 8016144:	2b00      	cmp	r3, #0
 8016146:	d1d4      	bne.n	80160f2 <tcp_process+0x58e>
 8016148:	687b      	ldr	r3, [r7, #4]
 801614a:	2200      	movs	r2, #0
 801614c:	60da      	str	r2, [r3, #12]
 801614e:	4b77      	ldr	r3, [pc, #476]	; (801632c <tcp_process+0x7c8>)
 8016150:	2201      	movs	r2, #1
 8016152:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8016154:	687b      	ldr	r3, [r7, #4]
 8016156:	220a      	movs	r2, #10
 8016158:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 801615a:	4b75      	ldr	r3, [pc, #468]	; (8016330 <tcp_process+0x7cc>)
 801615c:	681a      	ldr	r2, [r3, #0]
 801615e:	687b      	ldr	r3, [r7, #4]
 8016160:	60da      	str	r2, [r3, #12]
 8016162:	4a73      	ldr	r2, [pc, #460]	; (8016330 <tcp_process+0x7cc>)
 8016164:	687b      	ldr	r3, [r7, #4]
 8016166:	6013      	str	r3, [r2, #0]
 8016168:	f003 f950 	bl	801940c <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 801616c:	e0d2      	b.n	8016314 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 801616e:	687b      	ldr	r3, [r7, #4]
 8016170:	8b5b      	ldrh	r3, [r3, #26]
 8016172:	f043 0302 	orr.w	r3, r3, #2
 8016176:	b29a      	uxth	r2, r3
 8016178:	687b      	ldr	r3, [r7, #4]
 801617a:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 801617c:	687b      	ldr	r3, [r7, #4]
 801617e:	2208      	movs	r2, #8
 8016180:	751a      	strb	r2, [r3, #20]
      break;
 8016182:	e0c7      	b.n	8016314 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8016184:	4b6b      	ldr	r3, [pc, #428]	; (8016334 <tcp_process+0x7d0>)
 8016186:	781b      	ldrb	r3, [r3, #0]
 8016188:	f003 0310 	and.w	r3, r3, #16
 801618c:	2b00      	cmp	r3, #0
 801618e:	f000 80c1 	beq.w	8016314 <tcp_process+0x7b0>
 8016192:	687b      	ldr	r3, [r7, #4]
 8016194:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8016196:	4b68      	ldr	r3, [pc, #416]	; (8016338 <tcp_process+0x7d4>)
 8016198:	681b      	ldr	r3, [r3, #0]
 801619a:	429a      	cmp	r2, r3
 801619c:	f040 80ba 	bne.w	8016314 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 80161a0:	687b      	ldr	r3, [r7, #4]
 80161a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80161a4:	2b00      	cmp	r3, #0
 80161a6:	f040 80b5 	bne.w	8016314 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 80161aa:	687b      	ldr	r3, [r7, #4]
 80161ac:	2206      	movs	r2, #6
 80161ae:	751a      	strb	r2, [r3, #20]
      break;
 80161b0:	e0b0      	b.n	8016314 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 80161b2:	6878      	ldr	r0, [r7, #4]
 80161b4:	f000 f9ca 	bl	801654c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80161b8:	4b60      	ldr	r3, [pc, #384]	; (801633c <tcp_process+0x7d8>)
 80161ba:	781b      	ldrb	r3, [r3, #0]
 80161bc:	f003 0320 	and.w	r3, r3, #32
 80161c0:	2b00      	cmp	r3, #0
 80161c2:	f000 80a9 	beq.w	8016318 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 80161c6:	687b      	ldr	r3, [r7, #4]
 80161c8:	8b5b      	ldrh	r3, [r3, #26]
 80161ca:	f043 0302 	orr.w	r3, r3, #2
 80161ce:	b29a      	uxth	r2, r3
 80161d0:	687b      	ldr	r3, [r7, #4]
 80161d2:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 80161d4:	6878      	ldr	r0, [r7, #4]
 80161d6:	f7fe fd3b 	bl	8014c50 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80161da:	4b59      	ldr	r3, [pc, #356]	; (8016340 <tcp_process+0x7dc>)
 80161dc:	681b      	ldr	r3, [r3, #0]
 80161de:	687a      	ldr	r2, [r7, #4]
 80161e0:	429a      	cmp	r2, r3
 80161e2:	d105      	bne.n	80161f0 <tcp_process+0x68c>
 80161e4:	4b56      	ldr	r3, [pc, #344]	; (8016340 <tcp_process+0x7dc>)
 80161e6:	681b      	ldr	r3, [r3, #0]
 80161e8:	68db      	ldr	r3, [r3, #12]
 80161ea:	4a55      	ldr	r2, [pc, #340]	; (8016340 <tcp_process+0x7dc>)
 80161ec:	6013      	str	r3, [r2, #0]
 80161ee:	e013      	b.n	8016218 <tcp_process+0x6b4>
 80161f0:	4b53      	ldr	r3, [pc, #332]	; (8016340 <tcp_process+0x7dc>)
 80161f2:	681b      	ldr	r3, [r3, #0]
 80161f4:	613b      	str	r3, [r7, #16]
 80161f6:	e00c      	b.n	8016212 <tcp_process+0x6ae>
 80161f8:	693b      	ldr	r3, [r7, #16]
 80161fa:	68db      	ldr	r3, [r3, #12]
 80161fc:	687a      	ldr	r2, [r7, #4]
 80161fe:	429a      	cmp	r2, r3
 8016200:	d104      	bne.n	801620c <tcp_process+0x6a8>
 8016202:	687b      	ldr	r3, [r7, #4]
 8016204:	68da      	ldr	r2, [r3, #12]
 8016206:	693b      	ldr	r3, [r7, #16]
 8016208:	60da      	str	r2, [r3, #12]
 801620a:	e005      	b.n	8016218 <tcp_process+0x6b4>
 801620c:	693b      	ldr	r3, [r7, #16]
 801620e:	68db      	ldr	r3, [r3, #12]
 8016210:	613b      	str	r3, [r7, #16]
 8016212:	693b      	ldr	r3, [r7, #16]
 8016214:	2b00      	cmp	r3, #0
 8016216:	d1ef      	bne.n	80161f8 <tcp_process+0x694>
 8016218:	687b      	ldr	r3, [r7, #4]
 801621a:	2200      	movs	r2, #0
 801621c:	60da      	str	r2, [r3, #12]
 801621e:	4b43      	ldr	r3, [pc, #268]	; (801632c <tcp_process+0x7c8>)
 8016220:	2201      	movs	r2, #1
 8016222:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8016224:	687b      	ldr	r3, [r7, #4]
 8016226:	220a      	movs	r2, #10
 8016228:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801622a:	4b41      	ldr	r3, [pc, #260]	; (8016330 <tcp_process+0x7cc>)
 801622c:	681a      	ldr	r2, [r3, #0]
 801622e:	687b      	ldr	r3, [r7, #4]
 8016230:	60da      	str	r2, [r3, #12]
 8016232:	4a3f      	ldr	r2, [pc, #252]	; (8016330 <tcp_process+0x7cc>)
 8016234:	687b      	ldr	r3, [r7, #4]
 8016236:	6013      	str	r3, [r2, #0]
 8016238:	f003 f8e8 	bl	801940c <tcp_timer_needed>
      }
      break;
 801623c:	e06c      	b.n	8016318 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 801623e:	6878      	ldr	r0, [r7, #4]
 8016240:	f000 f984 	bl	801654c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8016244:	4b3b      	ldr	r3, [pc, #236]	; (8016334 <tcp_process+0x7d0>)
 8016246:	781b      	ldrb	r3, [r3, #0]
 8016248:	f003 0310 	and.w	r3, r3, #16
 801624c:	2b00      	cmp	r3, #0
 801624e:	d065      	beq.n	801631c <tcp_process+0x7b8>
 8016250:	687b      	ldr	r3, [r7, #4]
 8016252:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8016254:	4b38      	ldr	r3, [pc, #224]	; (8016338 <tcp_process+0x7d4>)
 8016256:	681b      	ldr	r3, [r3, #0]
 8016258:	429a      	cmp	r2, r3
 801625a:	d15f      	bne.n	801631c <tcp_process+0x7b8>
 801625c:	687b      	ldr	r3, [r7, #4]
 801625e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016260:	2b00      	cmp	r3, #0
 8016262:	d15b      	bne.n	801631c <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8016264:	6878      	ldr	r0, [r7, #4]
 8016266:	f7fe fcf3 	bl	8014c50 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801626a:	4b35      	ldr	r3, [pc, #212]	; (8016340 <tcp_process+0x7dc>)
 801626c:	681b      	ldr	r3, [r3, #0]
 801626e:	687a      	ldr	r2, [r7, #4]
 8016270:	429a      	cmp	r2, r3
 8016272:	d105      	bne.n	8016280 <tcp_process+0x71c>
 8016274:	4b32      	ldr	r3, [pc, #200]	; (8016340 <tcp_process+0x7dc>)
 8016276:	681b      	ldr	r3, [r3, #0]
 8016278:	68db      	ldr	r3, [r3, #12]
 801627a:	4a31      	ldr	r2, [pc, #196]	; (8016340 <tcp_process+0x7dc>)
 801627c:	6013      	str	r3, [r2, #0]
 801627e:	e013      	b.n	80162a8 <tcp_process+0x744>
 8016280:	4b2f      	ldr	r3, [pc, #188]	; (8016340 <tcp_process+0x7dc>)
 8016282:	681b      	ldr	r3, [r3, #0]
 8016284:	60fb      	str	r3, [r7, #12]
 8016286:	e00c      	b.n	80162a2 <tcp_process+0x73e>
 8016288:	68fb      	ldr	r3, [r7, #12]
 801628a:	68db      	ldr	r3, [r3, #12]
 801628c:	687a      	ldr	r2, [r7, #4]
 801628e:	429a      	cmp	r2, r3
 8016290:	d104      	bne.n	801629c <tcp_process+0x738>
 8016292:	687b      	ldr	r3, [r7, #4]
 8016294:	68da      	ldr	r2, [r3, #12]
 8016296:	68fb      	ldr	r3, [r7, #12]
 8016298:	60da      	str	r2, [r3, #12]
 801629a:	e005      	b.n	80162a8 <tcp_process+0x744>
 801629c:	68fb      	ldr	r3, [r7, #12]
 801629e:	68db      	ldr	r3, [r3, #12]
 80162a0:	60fb      	str	r3, [r7, #12]
 80162a2:	68fb      	ldr	r3, [r7, #12]
 80162a4:	2b00      	cmp	r3, #0
 80162a6:	d1ef      	bne.n	8016288 <tcp_process+0x724>
 80162a8:	687b      	ldr	r3, [r7, #4]
 80162aa:	2200      	movs	r2, #0
 80162ac:	60da      	str	r2, [r3, #12]
 80162ae:	4b1f      	ldr	r3, [pc, #124]	; (801632c <tcp_process+0x7c8>)
 80162b0:	2201      	movs	r2, #1
 80162b2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80162b4:	687b      	ldr	r3, [r7, #4]
 80162b6:	220a      	movs	r2, #10
 80162b8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80162ba:	4b1d      	ldr	r3, [pc, #116]	; (8016330 <tcp_process+0x7cc>)
 80162bc:	681a      	ldr	r2, [r3, #0]
 80162be:	687b      	ldr	r3, [r7, #4]
 80162c0:	60da      	str	r2, [r3, #12]
 80162c2:	4a1b      	ldr	r2, [pc, #108]	; (8016330 <tcp_process+0x7cc>)
 80162c4:	687b      	ldr	r3, [r7, #4]
 80162c6:	6013      	str	r3, [r2, #0]
 80162c8:	f003 f8a0 	bl	801940c <tcp_timer_needed>
      }
      break;
 80162cc:	e026      	b.n	801631c <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 80162ce:	6878      	ldr	r0, [r7, #4]
 80162d0:	f000 f93c 	bl	801654c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80162d4:	4b17      	ldr	r3, [pc, #92]	; (8016334 <tcp_process+0x7d0>)
 80162d6:	781b      	ldrb	r3, [r3, #0]
 80162d8:	f003 0310 	and.w	r3, r3, #16
 80162dc:	2b00      	cmp	r3, #0
 80162de:	d01f      	beq.n	8016320 <tcp_process+0x7bc>
 80162e0:	687b      	ldr	r3, [r7, #4]
 80162e2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80162e4:	4b14      	ldr	r3, [pc, #80]	; (8016338 <tcp_process+0x7d4>)
 80162e6:	681b      	ldr	r3, [r3, #0]
 80162e8:	429a      	cmp	r2, r3
 80162ea:	d119      	bne.n	8016320 <tcp_process+0x7bc>
 80162ec:	687b      	ldr	r3, [r7, #4]
 80162ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80162f0:	2b00      	cmp	r3, #0
 80162f2:	d115      	bne.n	8016320 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 80162f4:	4b11      	ldr	r3, [pc, #68]	; (801633c <tcp_process+0x7d8>)
 80162f6:	781b      	ldrb	r3, [r3, #0]
 80162f8:	f043 0310 	orr.w	r3, r3, #16
 80162fc:	b2da      	uxtb	r2, r3
 80162fe:	4b0f      	ldr	r3, [pc, #60]	; (801633c <tcp_process+0x7d8>)
 8016300:	701a      	strb	r2, [r3, #0]
      }
      break;
 8016302:	e00d      	b.n	8016320 <tcp_process+0x7bc>
    default:
      break;
 8016304:	bf00      	nop
 8016306:	e00c      	b.n	8016322 <tcp_process+0x7be>
      break;
 8016308:	bf00      	nop
 801630a:	e00a      	b.n	8016322 <tcp_process+0x7be>
      break;
 801630c:	bf00      	nop
 801630e:	e008      	b.n	8016322 <tcp_process+0x7be>
      break;
 8016310:	bf00      	nop
 8016312:	e006      	b.n	8016322 <tcp_process+0x7be>
      break;
 8016314:	bf00      	nop
 8016316:	e004      	b.n	8016322 <tcp_process+0x7be>
      break;
 8016318:	bf00      	nop
 801631a:	e002      	b.n	8016322 <tcp_process+0x7be>
      break;
 801631c:	bf00      	nop
 801631e:	e000      	b.n	8016322 <tcp_process+0x7be>
      break;
 8016320:	bf00      	nop
  }
  return ERR_OK;
 8016322:	2300      	movs	r3, #0
}
 8016324:	4618      	mov	r0, r3
 8016326:	3724      	adds	r7, #36	; 0x24
 8016328:	46bd      	mov	sp, r7
 801632a:	bd90      	pop	{r4, r7, pc}
 801632c:	24007f38 	.word	0x24007f38
 8016330:	24007f4c 	.word	0x24007f4c
 8016334:	2400456c 	.word	0x2400456c
 8016338:	24004564 	.word	0x24004564
 801633c:	2400456d 	.word	0x2400456d
 8016340:	24007f3c 	.word	0x24007f3c

08016344 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8016344:	b590      	push	{r4, r7, lr}
 8016346:	b085      	sub	sp, #20
 8016348:	af00      	add	r7, sp, #0
 801634a:	6078      	str	r0, [r7, #4]
 801634c:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 801634e:	687b      	ldr	r3, [r7, #4]
 8016350:	2b00      	cmp	r3, #0
 8016352:	d106      	bne.n	8016362 <tcp_oos_insert_segment+0x1e>
 8016354:	4b3b      	ldr	r3, [pc, #236]	; (8016444 <tcp_oos_insert_segment+0x100>)
 8016356:	f240 421f 	movw	r2, #1055	; 0x41f
 801635a:	493b      	ldr	r1, [pc, #236]	; (8016448 <tcp_oos_insert_segment+0x104>)
 801635c:	483b      	ldr	r0, [pc, #236]	; (801644c <tcp_oos_insert_segment+0x108>)
 801635e:	f009 f951 	bl	801f604 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8016362:	687b      	ldr	r3, [r7, #4]
 8016364:	68db      	ldr	r3, [r3, #12]
 8016366:	899b      	ldrh	r3, [r3, #12]
 8016368:	b29b      	uxth	r3, r3
 801636a:	4618      	mov	r0, r3
 801636c:	f7fb f83a 	bl	80113e4 <lwip_htons>
 8016370:	4603      	mov	r3, r0
 8016372:	b2db      	uxtb	r3, r3
 8016374:	f003 0301 	and.w	r3, r3, #1
 8016378:	2b00      	cmp	r3, #0
 801637a:	d028      	beq.n	80163ce <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 801637c:	6838      	ldr	r0, [r7, #0]
 801637e:	f7fe f997 	bl	80146b0 <tcp_segs_free>
    next = NULL;
 8016382:	2300      	movs	r3, #0
 8016384:	603b      	str	r3, [r7, #0]
 8016386:	e056      	b.n	8016436 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8016388:	683b      	ldr	r3, [r7, #0]
 801638a:	68db      	ldr	r3, [r3, #12]
 801638c:	899b      	ldrh	r3, [r3, #12]
 801638e:	b29b      	uxth	r3, r3
 8016390:	4618      	mov	r0, r3
 8016392:	f7fb f827 	bl	80113e4 <lwip_htons>
 8016396:	4603      	mov	r3, r0
 8016398:	b2db      	uxtb	r3, r3
 801639a:	f003 0301 	and.w	r3, r3, #1
 801639e:	2b00      	cmp	r3, #0
 80163a0:	d00d      	beq.n	80163be <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 80163a2:	687b      	ldr	r3, [r7, #4]
 80163a4:	68db      	ldr	r3, [r3, #12]
 80163a6:	899b      	ldrh	r3, [r3, #12]
 80163a8:	b29c      	uxth	r4, r3
 80163aa:	2001      	movs	r0, #1
 80163ac:	f7fb f81a 	bl	80113e4 <lwip_htons>
 80163b0:	4603      	mov	r3, r0
 80163b2:	461a      	mov	r2, r3
 80163b4:	687b      	ldr	r3, [r7, #4]
 80163b6:	68db      	ldr	r3, [r3, #12]
 80163b8:	4322      	orrs	r2, r4
 80163ba:	b292      	uxth	r2, r2
 80163bc:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 80163be:	683b      	ldr	r3, [r7, #0]
 80163c0:	60fb      	str	r3, [r7, #12]
      next = next->next;
 80163c2:	683b      	ldr	r3, [r7, #0]
 80163c4:	681b      	ldr	r3, [r3, #0]
 80163c6:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 80163c8:	68f8      	ldr	r0, [r7, #12]
 80163ca:	f7fe f986 	bl	80146da <tcp_seg_free>
    while (next &&
 80163ce:	683b      	ldr	r3, [r7, #0]
 80163d0:	2b00      	cmp	r3, #0
 80163d2:	d00e      	beq.n	80163f2 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 80163d4:	687b      	ldr	r3, [r7, #4]
 80163d6:	891b      	ldrh	r3, [r3, #8]
 80163d8:	461a      	mov	r2, r3
 80163da:	4b1d      	ldr	r3, [pc, #116]	; (8016450 <tcp_oos_insert_segment+0x10c>)
 80163dc:	681b      	ldr	r3, [r3, #0]
 80163de:	441a      	add	r2, r3
 80163e0:	683b      	ldr	r3, [r7, #0]
 80163e2:	68db      	ldr	r3, [r3, #12]
 80163e4:	685b      	ldr	r3, [r3, #4]
 80163e6:	6839      	ldr	r1, [r7, #0]
 80163e8:	8909      	ldrh	r1, [r1, #8]
 80163ea:	440b      	add	r3, r1
 80163ec:	1ad3      	subs	r3, r2, r3
    while (next &&
 80163ee:	2b00      	cmp	r3, #0
 80163f0:	daca      	bge.n	8016388 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 80163f2:	683b      	ldr	r3, [r7, #0]
 80163f4:	2b00      	cmp	r3, #0
 80163f6:	d01e      	beq.n	8016436 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 80163f8:	687b      	ldr	r3, [r7, #4]
 80163fa:	891b      	ldrh	r3, [r3, #8]
 80163fc:	461a      	mov	r2, r3
 80163fe:	4b14      	ldr	r3, [pc, #80]	; (8016450 <tcp_oos_insert_segment+0x10c>)
 8016400:	681b      	ldr	r3, [r3, #0]
 8016402:	441a      	add	r2, r3
 8016404:	683b      	ldr	r3, [r7, #0]
 8016406:	68db      	ldr	r3, [r3, #12]
 8016408:	685b      	ldr	r3, [r3, #4]
 801640a:	1ad3      	subs	r3, r2, r3
    if (next &&
 801640c:	2b00      	cmp	r3, #0
 801640e:	dd12      	ble.n	8016436 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8016410:	683b      	ldr	r3, [r7, #0]
 8016412:	68db      	ldr	r3, [r3, #12]
 8016414:	685b      	ldr	r3, [r3, #4]
 8016416:	b29a      	uxth	r2, r3
 8016418:	4b0d      	ldr	r3, [pc, #52]	; (8016450 <tcp_oos_insert_segment+0x10c>)
 801641a:	681b      	ldr	r3, [r3, #0]
 801641c:	b29b      	uxth	r3, r3
 801641e:	1ad3      	subs	r3, r2, r3
 8016420:	b29a      	uxth	r2, r3
 8016422:	687b      	ldr	r3, [r7, #4]
 8016424:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8016426:	687b      	ldr	r3, [r7, #4]
 8016428:	685a      	ldr	r2, [r3, #4]
 801642a:	687b      	ldr	r3, [r7, #4]
 801642c:	891b      	ldrh	r3, [r3, #8]
 801642e:	4619      	mov	r1, r3
 8016430:	4610      	mov	r0, r2
 8016432:	f7fc fb07 	bl	8012a44 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8016436:	687b      	ldr	r3, [r7, #4]
 8016438:	683a      	ldr	r2, [r7, #0]
 801643a:	601a      	str	r2, [r3, #0]
}
 801643c:	bf00      	nop
 801643e:	3714      	adds	r7, #20
 8016440:	46bd      	mov	sp, r7
 8016442:	bd90      	pop	{r4, r7, pc}
 8016444:	08025494 	.word	0x08025494
 8016448:	08025754 	.word	0x08025754
 801644c:	080254e0 	.word	0x080254e0
 8016450:	24004560 	.word	0x24004560

08016454 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8016454:	b5b0      	push	{r4, r5, r7, lr}
 8016456:	b086      	sub	sp, #24
 8016458:	af00      	add	r7, sp, #0
 801645a:	60f8      	str	r0, [r7, #12]
 801645c:	60b9      	str	r1, [r7, #8]
 801645e:	607a      	str	r2, [r7, #4]
 8016460:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8016462:	e03e      	b.n	80164e2 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8016464:	68bb      	ldr	r3, [r7, #8]
 8016466:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8016468:	68bb      	ldr	r3, [r7, #8]
 801646a:	681b      	ldr	r3, [r3, #0]
 801646c:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 801646e:	697b      	ldr	r3, [r7, #20]
 8016470:	685b      	ldr	r3, [r3, #4]
 8016472:	4618      	mov	r0, r3
 8016474:	f7fc fd2c 	bl	8012ed0 <pbuf_clen>
 8016478:	4603      	mov	r3, r0
 801647a:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 801647c:	68fb      	ldr	r3, [r7, #12]
 801647e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8016482:	8a7a      	ldrh	r2, [r7, #18]
 8016484:	429a      	cmp	r2, r3
 8016486:	d906      	bls.n	8016496 <tcp_free_acked_segments+0x42>
 8016488:	4b2a      	ldr	r3, [pc, #168]	; (8016534 <tcp_free_acked_segments+0xe0>)
 801648a:	f240 4257 	movw	r2, #1111	; 0x457
 801648e:	492a      	ldr	r1, [pc, #168]	; (8016538 <tcp_free_acked_segments+0xe4>)
 8016490:	482a      	ldr	r0, [pc, #168]	; (801653c <tcp_free_acked_segments+0xe8>)
 8016492:	f009 f8b7 	bl	801f604 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8016496:	68fb      	ldr	r3, [r7, #12]
 8016498:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 801649c:	8a7b      	ldrh	r3, [r7, #18]
 801649e:	1ad3      	subs	r3, r2, r3
 80164a0:	b29a      	uxth	r2, r3
 80164a2:	68fb      	ldr	r3, [r7, #12]
 80164a4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 80164a8:	697b      	ldr	r3, [r7, #20]
 80164aa:	891a      	ldrh	r2, [r3, #8]
 80164ac:	4b24      	ldr	r3, [pc, #144]	; (8016540 <tcp_free_acked_segments+0xec>)
 80164ae:	881b      	ldrh	r3, [r3, #0]
 80164b0:	4413      	add	r3, r2
 80164b2:	b29a      	uxth	r2, r3
 80164b4:	4b22      	ldr	r3, [pc, #136]	; (8016540 <tcp_free_acked_segments+0xec>)
 80164b6:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 80164b8:	6978      	ldr	r0, [r7, #20]
 80164ba:	f7fe f90e 	bl	80146da <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 80164be:	68fb      	ldr	r3, [r7, #12]
 80164c0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80164c4:	2b00      	cmp	r3, #0
 80164c6:	d00c      	beq.n	80164e2 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 80164c8:	68bb      	ldr	r3, [r7, #8]
 80164ca:	2b00      	cmp	r3, #0
 80164cc:	d109      	bne.n	80164e2 <tcp_free_acked_segments+0x8e>
 80164ce:	683b      	ldr	r3, [r7, #0]
 80164d0:	2b00      	cmp	r3, #0
 80164d2:	d106      	bne.n	80164e2 <tcp_free_acked_segments+0x8e>
 80164d4:	4b17      	ldr	r3, [pc, #92]	; (8016534 <tcp_free_acked_segments+0xe0>)
 80164d6:	f240 4261 	movw	r2, #1121	; 0x461
 80164da:	491a      	ldr	r1, [pc, #104]	; (8016544 <tcp_free_acked_segments+0xf0>)
 80164dc:	4817      	ldr	r0, [pc, #92]	; (801653c <tcp_free_acked_segments+0xe8>)
 80164de:	f009 f891 	bl	801f604 <iprintf>
  while (seg_list != NULL &&
 80164e2:	68bb      	ldr	r3, [r7, #8]
 80164e4:	2b00      	cmp	r3, #0
 80164e6:	d020      	beq.n	801652a <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 80164e8:	68bb      	ldr	r3, [r7, #8]
 80164ea:	68db      	ldr	r3, [r3, #12]
 80164ec:	685b      	ldr	r3, [r3, #4]
 80164ee:	4618      	mov	r0, r3
 80164f0:	f7fa ff8d 	bl	801140e <lwip_htonl>
 80164f4:	4604      	mov	r4, r0
 80164f6:	68bb      	ldr	r3, [r7, #8]
 80164f8:	891b      	ldrh	r3, [r3, #8]
 80164fa:	461d      	mov	r5, r3
 80164fc:	68bb      	ldr	r3, [r7, #8]
 80164fe:	68db      	ldr	r3, [r3, #12]
 8016500:	899b      	ldrh	r3, [r3, #12]
 8016502:	b29b      	uxth	r3, r3
 8016504:	4618      	mov	r0, r3
 8016506:	f7fa ff6d 	bl	80113e4 <lwip_htons>
 801650a:	4603      	mov	r3, r0
 801650c:	b2db      	uxtb	r3, r3
 801650e:	f003 0303 	and.w	r3, r3, #3
 8016512:	2b00      	cmp	r3, #0
 8016514:	d001      	beq.n	801651a <tcp_free_acked_segments+0xc6>
 8016516:	2301      	movs	r3, #1
 8016518:	e000      	b.n	801651c <tcp_free_acked_segments+0xc8>
 801651a:	2300      	movs	r3, #0
 801651c:	442b      	add	r3, r5
 801651e:	18e2      	adds	r2, r4, r3
 8016520:	4b09      	ldr	r3, [pc, #36]	; (8016548 <tcp_free_acked_segments+0xf4>)
 8016522:	681b      	ldr	r3, [r3, #0]
 8016524:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8016526:	2b00      	cmp	r3, #0
 8016528:	dd9c      	ble.n	8016464 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 801652a:	68bb      	ldr	r3, [r7, #8]
}
 801652c:	4618      	mov	r0, r3
 801652e:	3718      	adds	r7, #24
 8016530:	46bd      	mov	sp, r7
 8016532:	bdb0      	pop	{r4, r5, r7, pc}
 8016534:	08025494 	.word	0x08025494
 8016538:	0802577c 	.word	0x0802577c
 801653c:	080254e0 	.word	0x080254e0
 8016540:	24004568 	.word	0x24004568
 8016544:	080257a4 	.word	0x080257a4
 8016548:	24004564 	.word	0x24004564

0801654c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 801654c:	b5b0      	push	{r4, r5, r7, lr}
 801654e:	b094      	sub	sp, #80	; 0x50
 8016550:	af00      	add	r7, sp, #0
 8016552:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8016554:	2300      	movs	r3, #0
 8016556:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8016558:	687b      	ldr	r3, [r7, #4]
 801655a:	2b00      	cmp	r3, #0
 801655c:	d106      	bne.n	801656c <tcp_receive+0x20>
 801655e:	4ba6      	ldr	r3, [pc, #664]	; (80167f8 <tcp_receive+0x2ac>)
 8016560:	f240 427b 	movw	r2, #1147	; 0x47b
 8016564:	49a5      	ldr	r1, [pc, #660]	; (80167fc <tcp_receive+0x2b0>)
 8016566:	48a6      	ldr	r0, [pc, #664]	; (8016800 <tcp_receive+0x2b4>)
 8016568:	f009 f84c 	bl	801f604 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 801656c:	687b      	ldr	r3, [r7, #4]
 801656e:	7d1b      	ldrb	r3, [r3, #20]
 8016570:	2b03      	cmp	r3, #3
 8016572:	d806      	bhi.n	8016582 <tcp_receive+0x36>
 8016574:	4ba0      	ldr	r3, [pc, #640]	; (80167f8 <tcp_receive+0x2ac>)
 8016576:	f240 427c 	movw	r2, #1148	; 0x47c
 801657a:	49a2      	ldr	r1, [pc, #648]	; (8016804 <tcp_receive+0x2b8>)
 801657c:	48a0      	ldr	r0, [pc, #640]	; (8016800 <tcp_receive+0x2b4>)
 801657e:	f009 f841 	bl	801f604 <iprintf>

  if (flags & TCP_ACK) {
 8016582:	4ba1      	ldr	r3, [pc, #644]	; (8016808 <tcp_receive+0x2bc>)
 8016584:	781b      	ldrb	r3, [r3, #0]
 8016586:	f003 0310 	and.w	r3, r3, #16
 801658a:	2b00      	cmp	r3, #0
 801658c:	f000 8263 	beq.w	8016a56 <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8016590:	687b      	ldr	r3, [r7, #4]
 8016592:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8016596:	461a      	mov	r2, r3
 8016598:	687b      	ldr	r3, [r7, #4]
 801659a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801659c:	4413      	add	r3, r2
 801659e:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80165a0:	687b      	ldr	r3, [r7, #4]
 80165a2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80165a4:	4b99      	ldr	r3, [pc, #612]	; (801680c <tcp_receive+0x2c0>)
 80165a6:	681b      	ldr	r3, [r3, #0]
 80165a8:	1ad3      	subs	r3, r2, r3
 80165aa:	2b00      	cmp	r3, #0
 80165ac:	db1b      	blt.n	80165e6 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80165ae:	687b      	ldr	r3, [r7, #4]
 80165b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80165b2:	4b96      	ldr	r3, [pc, #600]	; (801680c <tcp_receive+0x2c0>)
 80165b4:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80165b6:	429a      	cmp	r2, r3
 80165b8:	d106      	bne.n	80165c8 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80165ba:	687b      	ldr	r3, [r7, #4]
 80165bc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80165be:	4b94      	ldr	r3, [pc, #592]	; (8016810 <tcp_receive+0x2c4>)
 80165c0:	681b      	ldr	r3, [r3, #0]
 80165c2:	1ad3      	subs	r3, r2, r3
 80165c4:	2b00      	cmp	r3, #0
 80165c6:	db0e      	blt.n	80165e6 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80165c8:	687b      	ldr	r3, [r7, #4]
 80165ca:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80165cc:	4b90      	ldr	r3, [pc, #576]	; (8016810 <tcp_receive+0x2c4>)
 80165ce:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80165d0:	429a      	cmp	r2, r3
 80165d2:	d125      	bne.n	8016620 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80165d4:	4b8f      	ldr	r3, [pc, #572]	; (8016814 <tcp_receive+0x2c8>)
 80165d6:	681b      	ldr	r3, [r3, #0]
 80165d8:	89db      	ldrh	r3, [r3, #14]
 80165da:	b29a      	uxth	r2, r3
 80165dc:	687b      	ldr	r3, [r7, #4]
 80165de:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80165e2:	429a      	cmp	r2, r3
 80165e4:	d91c      	bls.n	8016620 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80165e6:	4b8b      	ldr	r3, [pc, #556]	; (8016814 <tcp_receive+0x2c8>)
 80165e8:	681b      	ldr	r3, [r3, #0]
 80165ea:	89db      	ldrh	r3, [r3, #14]
 80165ec:	b29a      	uxth	r2, r3
 80165ee:	687b      	ldr	r3, [r7, #4]
 80165f0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80165f4:	687b      	ldr	r3, [r7, #4]
 80165f6:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 80165fa:	687b      	ldr	r3, [r7, #4]
 80165fc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8016600:	429a      	cmp	r2, r3
 8016602:	d205      	bcs.n	8016610 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8016604:	687b      	ldr	r3, [r7, #4]
 8016606:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801660a:	687b      	ldr	r3, [r7, #4]
 801660c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8016610:	4b7e      	ldr	r3, [pc, #504]	; (801680c <tcp_receive+0x2c0>)
 8016612:	681a      	ldr	r2, [r3, #0]
 8016614:	687b      	ldr	r3, [r7, #4]
 8016616:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8016618:	4b7d      	ldr	r3, [pc, #500]	; (8016810 <tcp_receive+0x2c4>)
 801661a:	681a      	ldr	r2, [r3, #0]
 801661c:	687b      	ldr	r3, [r7, #4]
 801661e:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8016620:	4b7b      	ldr	r3, [pc, #492]	; (8016810 <tcp_receive+0x2c4>)
 8016622:	681a      	ldr	r2, [r3, #0]
 8016624:	687b      	ldr	r3, [r7, #4]
 8016626:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016628:	1ad3      	subs	r3, r2, r3
 801662a:	2b00      	cmp	r3, #0
 801662c:	dc58      	bgt.n	80166e0 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 801662e:	4b7a      	ldr	r3, [pc, #488]	; (8016818 <tcp_receive+0x2cc>)
 8016630:	881b      	ldrh	r3, [r3, #0]
 8016632:	2b00      	cmp	r3, #0
 8016634:	d14b      	bne.n	80166ce <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8016636:	687b      	ldr	r3, [r7, #4]
 8016638:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801663a:	687a      	ldr	r2, [r7, #4]
 801663c:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8016640:	4413      	add	r3, r2
 8016642:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016644:	429a      	cmp	r2, r3
 8016646:	d142      	bne.n	80166ce <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8016648:	687b      	ldr	r3, [r7, #4]
 801664a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801664e:	2b00      	cmp	r3, #0
 8016650:	db3d      	blt.n	80166ce <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8016652:	687b      	ldr	r3, [r7, #4]
 8016654:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8016656:	4b6e      	ldr	r3, [pc, #440]	; (8016810 <tcp_receive+0x2c4>)
 8016658:	681b      	ldr	r3, [r3, #0]
 801665a:	429a      	cmp	r2, r3
 801665c:	d137      	bne.n	80166ce <tcp_receive+0x182>
              found_dupack = 1;
 801665e:	2301      	movs	r3, #1
 8016660:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8016662:	687b      	ldr	r3, [r7, #4]
 8016664:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8016668:	2bff      	cmp	r3, #255	; 0xff
 801666a:	d007      	beq.n	801667c <tcp_receive+0x130>
                ++pcb->dupacks;
 801666c:	687b      	ldr	r3, [r7, #4]
 801666e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8016672:	3301      	adds	r3, #1
 8016674:	b2da      	uxtb	r2, r3
 8016676:	687b      	ldr	r3, [r7, #4]
 8016678:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 801667c:	687b      	ldr	r3, [r7, #4]
 801667e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8016682:	2b03      	cmp	r3, #3
 8016684:	d91b      	bls.n	80166be <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8016686:	687b      	ldr	r3, [r7, #4]
 8016688:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801668c:	687b      	ldr	r3, [r7, #4]
 801668e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016690:	4413      	add	r3, r2
 8016692:	b29a      	uxth	r2, r3
 8016694:	687b      	ldr	r3, [r7, #4]
 8016696:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801669a:	429a      	cmp	r2, r3
 801669c:	d30a      	bcc.n	80166b4 <tcp_receive+0x168>
 801669e:	687b      	ldr	r3, [r7, #4]
 80166a0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80166a4:	687b      	ldr	r3, [r7, #4]
 80166a6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80166a8:	4413      	add	r3, r2
 80166aa:	b29a      	uxth	r2, r3
 80166ac:	687b      	ldr	r3, [r7, #4]
 80166ae:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80166b2:	e004      	b.n	80166be <tcp_receive+0x172>
 80166b4:	687b      	ldr	r3, [r7, #4]
 80166b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80166ba:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 80166be:	687b      	ldr	r3, [r7, #4]
 80166c0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80166c4:	2b02      	cmp	r3, #2
 80166c6:	d902      	bls.n	80166ce <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 80166c8:	6878      	ldr	r0, [r7, #4]
 80166ca:	f002 fb41 	bl	8018d50 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 80166ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80166d0:	2b00      	cmp	r3, #0
 80166d2:	f040 8160 	bne.w	8016996 <tcp_receive+0x44a>
        pcb->dupacks = 0;
 80166d6:	687b      	ldr	r3, [r7, #4]
 80166d8:	2200      	movs	r2, #0
 80166da:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80166de:	e15a      	b.n	8016996 <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80166e0:	4b4b      	ldr	r3, [pc, #300]	; (8016810 <tcp_receive+0x2c4>)
 80166e2:	681a      	ldr	r2, [r3, #0]
 80166e4:	687b      	ldr	r3, [r7, #4]
 80166e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80166e8:	1ad3      	subs	r3, r2, r3
 80166ea:	3b01      	subs	r3, #1
 80166ec:	2b00      	cmp	r3, #0
 80166ee:	f2c0 814d 	blt.w	801698c <tcp_receive+0x440>
 80166f2:	4b47      	ldr	r3, [pc, #284]	; (8016810 <tcp_receive+0x2c4>)
 80166f4:	681a      	ldr	r2, [r3, #0]
 80166f6:	687b      	ldr	r3, [r7, #4]
 80166f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80166fa:	1ad3      	subs	r3, r2, r3
 80166fc:	2b00      	cmp	r3, #0
 80166fe:	f300 8145 	bgt.w	801698c <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8016702:	687b      	ldr	r3, [r7, #4]
 8016704:	8b5b      	ldrh	r3, [r3, #26]
 8016706:	f003 0304 	and.w	r3, r3, #4
 801670a:	2b00      	cmp	r3, #0
 801670c:	d010      	beq.n	8016730 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 801670e:	687b      	ldr	r3, [r7, #4]
 8016710:	8b5b      	ldrh	r3, [r3, #26]
 8016712:	f023 0304 	bic.w	r3, r3, #4
 8016716:	b29a      	uxth	r2, r3
 8016718:	687b      	ldr	r3, [r7, #4]
 801671a:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 801671c:	687b      	ldr	r3, [r7, #4]
 801671e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8016722:	687b      	ldr	r3, [r7, #4]
 8016724:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8016728:	687b      	ldr	r3, [r7, #4]
 801672a:	2200      	movs	r2, #0
 801672c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8016730:	687b      	ldr	r3, [r7, #4]
 8016732:	2200      	movs	r2, #0
 8016734:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8016738:	687b      	ldr	r3, [r7, #4]
 801673a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801673e:	10db      	asrs	r3, r3, #3
 8016740:	b21b      	sxth	r3, r3
 8016742:	b29a      	uxth	r2, r3
 8016744:	687b      	ldr	r3, [r7, #4]
 8016746:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801674a:	b29b      	uxth	r3, r3
 801674c:	4413      	add	r3, r2
 801674e:	b29b      	uxth	r3, r3
 8016750:	b21a      	sxth	r2, r3
 8016752:	687b      	ldr	r3, [r7, #4]
 8016754:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8016758:	4b2d      	ldr	r3, [pc, #180]	; (8016810 <tcp_receive+0x2c4>)
 801675a:	681b      	ldr	r3, [r3, #0]
 801675c:	b29a      	uxth	r2, r3
 801675e:	687b      	ldr	r3, [r7, #4]
 8016760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016762:	b29b      	uxth	r3, r3
 8016764:	1ad3      	subs	r3, r2, r3
 8016766:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8016768:	687b      	ldr	r3, [r7, #4]
 801676a:	2200      	movs	r2, #0
 801676c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8016770:	4b27      	ldr	r3, [pc, #156]	; (8016810 <tcp_receive+0x2c4>)
 8016772:	681a      	ldr	r2, [r3, #0]
 8016774:	687b      	ldr	r3, [r7, #4]
 8016776:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8016778:	687b      	ldr	r3, [r7, #4]
 801677a:	7d1b      	ldrb	r3, [r3, #20]
 801677c:	2b03      	cmp	r3, #3
 801677e:	f240 8096 	bls.w	80168ae <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 8016782:	687b      	ldr	r3, [r7, #4]
 8016784:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8016788:	687b      	ldr	r3, [r7, #4]
 801678a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801678e:	429a      	cmp	r2, r3
 8016790:	d244      	bcs.n	801681c <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8016792:	687b      	ldr	r3, [r7, #4]
 8016794:	8b5b      	ldrh	r3, [r3, #26]
 8016796:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801679a:	2b00      	cmp	r3, #0
 801679c:	d001      	beq.n	80167a2 <tcp_receive+0x256>
 801679e:	2301      	movs	r3, #1
 80167a0:	e000      	b.n	80167a4 <tcp_receive+0x258>
 80167a2:	2302      	movs	r3, #2
 80167a4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 80167a8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80167ac:	b29a      	uxth	r2, r3
 80167ae:	687b      	ldr	r3, [r7, #4]
 80167b0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80167b2:	fb12 f303 	smulbb	r3, r2, r3
 80167b6:	b29b      	uxth	r3, r3
 80167b8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80167ba:	4293      	cmp	r3, r2
 80167bc:	bf28      	it	cs
 80167be:	4613      	movcs	r3, r2
 80167c0:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 80167c2:	687b      	ldr	r3, [r7, #4]
 80167c4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80167c8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80167ca:	4413      	add	r3, r2
 80167cc:	b29a      	uxth	r2, r3
 80167ce:	687b      	ldr	r3, [r7, #4]
 80167d0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80167d4:	429a      	cmp	r2, r3
 80167d6:	d309      	bcc.n	80167ec <tcp_receive+0x2a0>
 80167d8:	687b      	ldr	r3, [r7, #4]
 80167da:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80167de:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80167e0:	4413      	add	r3, r2
 80167e2:	b29a      	uxth	r2, r3
 80167e4:	687b      	ldr	r3, [r7, #4]
 80167e6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80167ea:	e060      	b.n	80168ae <tcp_receive+0x362>
 80167ec:	687b      	ldr	r3, [r7, #4]
 80167ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80167f2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80167f6:	e05a      	b.n	80168ae <tcp_receive+0x362>
 80167f8:	08025494 	.word	0x08025494
 80167fc:	080257c4 	.word	0x080257c4
 8016800:	080254e0 	.word	0x080254e0
 8016804:	080257e0 	.word	0x080257e0
 8016808:	2400456c 	.word	0x2400456c
 801680c:	24004560 	.word	0x24004560
 8016810:	24004564 	.word	0x24004564
 8016814:	24004550 	.word	0x24004550
 8016818:	2400456a 	.word	0x2400456a
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 801681c:	687b      	ldr	r3, [r7, #4]
 801681e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8016822:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8016824:	4413      	add	r3, r2
 8016826:	b29a      	uxth	r2, r3
 8016828:	687b      	ldr	r3, [r7, #4]
 801682a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801682e:	429a      	cmp	r2, r3
 8016830:	d309      	bcc.n	8016846 <tcp_receive+0x2fa>
 8016832:	687b      	ldr	r3, [r7, #4]
 8016834:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8016838:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801683a:	4413      	add	r3, r2
 801683c:	b29a      	uxth	r2, r3
 801683e:	687b      	ldr	r3, [r7, #4]
 8016840:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8016844:	e004      	b.n	8016850 <tcp_receive+0x304>
 8016846:	687b      	ldr	r3, [r7, #4]
 8016848:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801684c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8016850:	687b      	ldr	r3, [r7, #4]
 8016852:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8016856:	687b      	ldr	r3, [r7, #4]
 8016858:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801685c:	429a      	cmp	r2, r3
 801685e:	d326      	bcc.n	80168ae <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8016860:	687b      	ldr	r3, [r7, #4]
 8016862:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8016866:	687b      	ldr	r3, [r7, #4]
 8016868:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801686c:	1ad3      	subs	r3, r2, r3
 801686e:	b29a      	uxth	r2, r3
 8016870:	687b      	ldr	r3, [r7, #4]
 8016872:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8016876:	687b      	ldr	r3, [r7, #4]
 8016878:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801687c:	687b      	ldr	r3, [r7, #4]
 801687e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016880:	4413      	add	r3, r2
 8016882:	b29a      	uxth	r2, r3
 8016884:	687b      	ldr	r3, [r7, #4]
 8016886:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801688a:	429a      	cmp	r2, r3
 801688c:	d30a      	bcc.n	80168a4 <tcp_receive+0x358>
 801688e:	687b      	ldr	r3, [r7, #4]
 8016890:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8016894:	687b      	ldr	r3, [r7, #4]
 8016896:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016898:	4413      	add	r3, r2
 801689a:	b29a      	uxth	r2, r3
 801689c:	687b      	ldr	r3, [r7, #4]
 801689e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80168a2:	e004      	b.n	80168ae <tcp_receive+0x362>
 80168a4:	687b      	ldr	r3, [r7, #4]
 80168a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80168aa:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 80168ae:	687b      	ldr	r3, [r7, #4]
 80168b0:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80168b2:	687b      	ldr	r3, [r7, #4]
 80168b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80168b6:	4a98      	ldr	r2, [pc, #608]	; (8016b18 <tcp_receive+0x5cc>)
 80168b8:	6878      	ldr	r0, [r7, #4]
 80168ba:	f7ff fdcb 	bl	8016454 <tcp_free_acked_segments>
 80168be:	4602      	mov	r2, r0
 80168c0:	687b      	ldr	r3, [r7, #4]
 80168c2:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 80168c4:	687b      	ldr	r3, [r7, #4]
 80168c6:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 80168c8:	687b      	ldr	r3, [r7, #4]
 80168ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80168cc:	4a93      	ldr	r2, [pc, #588]	; (8016b1c <tcp_receive+0x5d0>)
 80168ce:	6878      	ldr	r0, [r7, #4]
 80168d0:	f7ff fdc0 	bl	8016454 <tcp_free_acked_segments>
 80168d4:	4602      	mov	r2, r0
 80168d6:	687b      	ldr	r3, [r7, #4]
 80168d8:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 80168da:	687b      	ldr	r3, [r7, #4]
 80168dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80168de:	2b00      	cmp	r3, #0
 80168e0:	d104      	bne.n	80168ec <tcp_receive+0x3a0>
        pcb->rtime = -1;
 80168e2:	687b      	ldr	r3, [r7, #4]
 80168e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80168e8:	861a      	strh	r2, [r3, #48]	; 0x30
 80168ea:	e002      	b.n	80168f2 <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 80168ec:	687b      	ldr	r3, [r7, #4]
 80168ee:	2200      	movs	r2, #0
 80168f0:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 80168f2:	687b      	ldr	r3, [r7, #4]
 80168f4:	2200      	movs	r2, #0
 80168f6:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 80168f8:	687b      	ldr	r3, [r7, #4]
 80168fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80168fc:	2b00      	cmp	r3, #0
 80168fe:	d103      	bne.n	8016908 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 8016900:	687b      	ldr	r3, [r7, #4]
 8016902:	2200      	movs	r2, #0
 8016904:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8016908:	687b      	ldr	r3, [r7, #4]
 801690a:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 801690e:	4b84      	ldr	r3, [pc, #528]	; (8016b20 <tcp_receive+0x5d4>)
 8016910:	881b      	ldrh	r3, [r3, #0]
 8016912:	4413      	add	r3, r2
 8016914:	b29a      	uxth	r2, r3
 8016916:	687b      	ldr	r3, [r7, #4]
 8016918:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 801691c:	687b      	ldr	r3, [r7, #4]
 801691e:	8b5b      	ldrh	r3, [r3, #26]
 8016920:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8016924:	2b00      	cmp	r3, #0
 8016926:	d035      	beq.n	8016994 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8016928:	687b      	ldr	r3, [r7, #4]
 801692a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801692c:	2b00      	cmp	r3, #0
 801692e:	d118      	bne.n	8016962 <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 8016930:	687b      	ldr	r3, [r7, #4]
 8016932:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016934:	2b00      	cmp	r3, #0
 8016936:	d00c      	beq.n	8016952 <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8016938:	687b      	ldr	r3, [r7, #4]
 801693a:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 801693c:	687b      	ldr	r3, [r7, #4]
 801693e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016940:	68db      	ldr	r3, [r3, #12]
 8016942:	685b      	ldr	r3, [r3, #4]
 8016944:	4618      	mov	r0, r3
 8016946:	f7fa fd62 	bl	801140e <lwip_htonl>
 801694a:	4603      	mov	r3, r0
 801694c:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 801694e:	2b00      	cmp	r3, #0
 8016950:	dc20      	bgt.n	8016994 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 8016952:	687b      	ldr	r3, [r7, #4]
 8016954:	8b5b      	ldrh	r3, [r3, #26]
 8016956:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801695a:	b29a      	uxth	r2, r3
 801695c:	687b      	ldr	r3, [r7, #4]
 801695e:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8016960:	e018      	b.n	8016994 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8016962:	687b      	ldr	r3, [r7, #4]
 8016964:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8016966:	687b      	ldr	r3, [r7, #4]
 8016968:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801696a:	68db      	ldr	r3, [r3, #12]
 801696c:	685b      	ldr	r3, [r3, #4]
 801696e:	4618      	mov	r0, r3
 8016970:	f7fa fd4d 	bl	801140e <lwip_htonl>
 8016974:	4603      	mov	r3, r0
 8016976:	1ae3      	subs	r3, r4, r3
 8016978:	2b00      	cmp	r3, #0
 801697a:	dc0b      	bgt.n	8016994 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 801697c:	687b      	ldr	r3, [r7, #4]
 801697e:	8b5b      	ldrh	r3, [r3, #26]
 8016980:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8016984:	b29a      	uxth	r2, r3
 8016986:	687b      	ldr	r3, [r7, #4]
 8016988:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801698a:	e003      	b.n	8016994 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 801698c:	6878      	ldr	r0, [r7, #4]
 801698e:	f002 fbcd 	bl	801912c <tcp_send_empty_ack>
 8016992:	e000      	b.n	8016996 <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8016994:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8016996:	687b      	ldr	r3, [r7, #4]
 8016998:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801699a:	2b00      	cmp	r3, #0
 801699c:	d05b      	beq.n	8016a56 <tcp_receive+0x50a>
 801699e:	687b      	ldr	r3, [r7, #4]
 80169a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80169a2:	4b60      	ldr	r3, [pc, #384]	; (8016b24 <tcp_receive+0x5d8>)
 80169a4:	681b      	ldr	r3, [r3, #0]
 80169a6:	1ad3      	subs	r3, r2, r3
 80169a8:	2b00      	cmp	r3, #0
 80169aa:	da54      	bge.n	8016a56 <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 80169ac:	4b5e      	ldr	r3, [pc, #376]	; (8016b28 <tcp_receive+0x5dc>)
 80169ae:	681b      	ldr	r3, [r3, #0]
 80169b0:	b29a      	uxth	r2, r3
 80169b2:	687b      	ldr	r3, [r7, #4]
 80169b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80169b6:	b29b      	uxth	r3, r3
 80169b8:	1ad3      	subs	r3, r2, r3
 80169ba:	b29b      	uxth	r3, r3
 80169bc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 80169c0:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80169c4:	687b      	ldr	r3, [r7, #4]
 80169c6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80169ca:	10db      	asrs	r3, r3, #3
 80169cc:	b21b      	sxth	r3, r3
 80169ce:	b29b      	uxth	r3, r3
 80169d0:	1ad3      	subs	r3, r2, r3
 80169d2:	b29b      	uxth	r3, r3
 80169d4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 80169d8:	687b      	ldr	r3, [r7, #4]
 80169da:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80169de:	b29a      	uxth	r2, r3
 80169e0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80169e4:	4413      	add	r3, r2
 80169e6:	b29b      	uxth	r3, r3
 80169e8:	b21a      	sxth	r2, r3
 80169ea:	687b      	ldr	r3, [r7, #4]
 80169ec:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 80169ee:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80169f2:	2b00      	cmp	r3, #0
 80169f4:	da05      	bge.n	8016a02 <tcp_receive+0x4b6>
        m = (s16_t) - m;
 80169f6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80169fa:	425b      	negs	r3, r3
 80169fc:	b29b      	uxth	r3, r3
 80169fe:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8016a02:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8016a06:	687b      	ldr	r3, [r7, #4]
 8016a08:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8016a0c:	109b      	asrs	r3, r3, #2
 8016a0e:	b21b      	sxth	r3, r3
 8016a10:	b29b      	uxth	r3, r3
 8016a12:	1ad3      	subs	r3, r2, r3
 8016a14:	b29b      	uxth	r3, r3
 8016a16:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8016a1a:	687b      	ldr	r3, [r7, #4]
 8016a1c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8016a20:	b29a      	uxth	r2, r3
 8016a22:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8016a26:	4413      	add	r3, r2
 8016a28:	b29b      	uxth	r3, r3
 8016a2a:	b21a      	sxth	r2, r3
 8016a2c:	687b      	ldr	r3, [r7, #4]
 8016a2e:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8016a30:	687b      	ldr	r3, [r7, #4]
 8016a32:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8016a36:	10db      	asrs	r3, r3, #3
 8016a38:	b21b      	sxth	r3, r3
 8016a3a:	b29a      	uxth	r2, r3
 8016a3c:	687b      	ldr	r3, [r7, #4]
 8016a3e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8016a42:	b29b      	uxth	r3, r3
 8016a44:	4413      	add	r3, r2
 8016a46:	b29b      	uxth	r3, r3
 8016a48:	b21a      	sxth	r2, r3
 8016a4a:	687b      	ldr	r3, [r7, #4]
 8016a4c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8016a50:	687b      	ldr	r3, [r7, #4]
 8016a52:	2200      	movs	r2, #0
 8016a54:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8016a56:	4b35      	ldr	r3, [pc, #212]	; (8016b2c <tcp_receive+0x5e0>)
 8016a58:	881b      	ldrh	r3, [r3, #0]
 8016a5a:	2b00      	cmp	r3, #0
 8016a5c:	f000 84e1 	beq.w	8017422 <tcp_receive+0xed6>
 8016a60:	687b      	ldr	r3, [r7, #4]
 8016a62:	7d1b      	ldrb	r3, [r3, #20]
 8016a64:	2b06      	cmp	r3, #6
 8016a66:	f200 84dc 	bhi.w	8017422 <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8016a6a:	687b      	ldr	r3, [r7, #4]
 8016a6c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8016a6e:	4b30      	ldr	r3, [pc, #192]	; (8016b30 <tcp_receive+0x5e4>)
 8016a70:	681b      	ldr	r3, [r3, #0]
 8016a72:	1ad3      	subs	r3, r2, r3
 8016a74:	3b01      	subs	r3, #1
 8016a76:	2b00      	cmp	r3, #0
 8016a78:	f2c0 808e 	blt.w	8016b98 <tcp_receive+0x64c>
 8016a7c:	687b      	ldr	r3, [r7, #4]
 8016a7e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8016a80:	4b2a      	ldr	r3, [pc, #168]	; (8016b2c <tcp_receive+0x5e0>)
 8016a82:	881b      	ldrh	r3, [r3, #0]
 8016a84:	4619      	mov	r1, r3
 8016a86:	4b2a      	ldr	r3, [pc, #168]	; (8016b30 <tcp_receive+0x5e4>)
 8016a88:	681b      	ldr	r3, [r3, #0]
 8016a8a:	440b      	add	r3, r1
 8016a8c:	1ad3      	subs	r3, r2, r3
 8016a8e:	3301      	adds	r3, #1
 8016a90:	2b00      	cmp	r3, #0
 8016a92:	f300 8081 	bgt.w	8016b98 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8016a96:	4b27      	ldr	r3, [pc, #156]	; (8016b34 <tcp_receive+0x5e8>)
 8016a98:	685b      	ldr	r3, [r3, #4]
 8016a9a:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8016a9c:	687b      	ldr	r3, [r7, #4]
 8016a9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8016aa0:	4b23      	ldr	r3, [pc, #140]	; (8016b30 <tcp_receive+0x5e4>)
 8016aa2:	681b      	ldr	r3, [r3, #0]
 8016aa4:	1ad3      	subs	r3, r2, r3
 8016aa6:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8016aa8:	4b22      	ldr	r3, [pc, #136]	; (8016b34 <tcp_receive+0x5e8>)
 8016aaa:	685b      	ldr	r3, [r3, #4]
 8016aac:	2b00      	cmp	r3, #0
 8016aae:	d106      	bne.n	8016abe <tcp_receive+0x572>
 8016ab0:	4b21      	ldr	r3, [pc, #132]	; (8016b38 <tcp_receive+0x5ec>)
 8016ab2:	f240 5294 	movw	r2, #1428	; 0x594
 8016ab6:	4921      	ldr	r1, [pc, #132]	; (8016b3c <tcp_receive+0x5f0>)
 8016ab8:	4821      	ldr	r0, [pc, #132]	; (8016b40 <tcp_receive+0x5f4>)
 8016aba:	f008 fda3 	bl	801f604 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8016abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ac0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8016ac4:	4293      	cmp	r3, r2
 8016ac6:	d906      	bls.n	8016ad6 <tcp_receive+0x58a>
 8016ac8:	4b1b      	ldr	r3, [pc, #108]	; (8016b38 <tcp_receive+0x5ec>)
 8016aca:	f240 5295 	movw	r2, #1429	; 0x595
 8016ace:	491d      	ldr	r1, [pc, #116]	; (8016b44 <tcp_receive+0x5f8>)
 8016ad0:	481b      	ldr	r0, [pc, #108]	; (8016b40 <tcp_receive+0x5f4>)
 8016ad2:	f008 fd97 	bl	801f604 <iprintf>
      off = (u16_t)off32;
 8016ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ad8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8016adc:	4b15      	ldr	r3, [pc, #84]	; (8016b34 <tcp_receive+0x5e8>)
 8016ade:	685b      	ldr	r3, [r3, #4]
 8016ae0:	891b      	ldrh	r3, [r3, #8]
 8016ae2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016ae6:	429a      	cmp	r2, r3
 8016ae8:	d906      	bls.n	8016af8 <tcp_receive+0x5ac>
 8016aea:	4b13      	ldr	r3, [pc, #76]	; (8016b38 <tcp_receive+0x5ec>)
 8016aec:	f240 5297 	movw	r2, #1431	; 0x597
 8016af0:	4915      	ldr	r1, [pc, #84]	; (8016b48 <tcp_receive+0x5fc>)
 8016af2:	4813      	ldr	r0, [pc, #76]	; (8016b40 <tcp_receive+0x5f4>)
 8016af4:	f008 fd86 	bl	801f604 <iprintf>
      inseg.len -= off;
 8016af8:	4b0e      	ldr	r3, [pc, #56]	; (8016b34 <tcp_receive+0x5e8>)
 8016afa:	891a      	ldrh	r2, [r3, #8]
 8016afc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016b00:	1ad3      	subs	r3, r2, r3
 8016b02:	b29a      	uxth	r2, r3
 8016b04:	4b0b      	ldr	r3, [pc, #44]	; (8016b34 <tcp_receive+0x5e8>)
 8016b06:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8016b08:	4b0a      	ldr	r3, [pc, #40]	; (8016b34 <tcp_receive+0x5e8>)
 8016b0a:	685b      	ldr	r3, [r3, #4]
 8016b0c:	891a      	ldrh	r2, [r3, #8]
 8016b0e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016b12:	1ad3      	subs	r3, r2, r3
 8016b14:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8016b16:	e029      	b.n	8016b6c <tcp_receive+0x620>
 8016b18:	080257fc 	.word	0x080257fc
 8016b1c:	08025804 	.word	0x08025804
 8016b20:	24004568 	.word	0x24004568
 8016b24:	24004564 	.word	0x24004564
 8016b28:	24007f40 	.word	0x24007f40
 8016b2c:	2400456a 	.word	0x2400456a
 8016b30:	24004560 	.word	0x24004560
 8016b34:	24004540 	.word	0x24004540
 8016b38:	08025494 	.word	0x08025494
 8016b3c:	0802580c 	.word	0x0802580c
 8016b40:	080254e0 	.word	0x080254e0
 8016b44:	0802581c 	.word	0x0802581c
 8016b48:	0802582c 	.word	0x0802582c
        off -= p->len;
 8016b4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016b4e:	895b      	ldrh	r3, [r3, #10]
 8016b50:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016b54:	1ad3      	subs	r3, r2, r3
 8016b56:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8016b5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016b5c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8016b5e:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8016b60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016b62:	2200      	movs	r2, #0
 8016b64:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8016b66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016b68:	681b      	ldr	r3, [r3, #0]
 8016b6a:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8016b6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016b6e:	895b      	ldrh	r3, [r3, #10]
 8016b70:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016b74:	429a      	cmp	r2, r3
 8016b76:	d8e9      	bhi.n	8016b4c <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8016b78:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016b7c:	4619      	mov	r1, r3
 8016b7e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8016b80:	f7fc f860 	bl	8012c44 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8016b84:	687b      	ldr	r3, [r7, #4]
 8016b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016b88:	4a91      	ldr	r2, [pc, #580]	; (8016dd0 <tcp_receive+0x884>)
 8016b8a:	6013      	str	r3, [r2, #0]
 8016b8c:	4b91      	ldr	r3, [pc, #580]	; (8016dd4 <tcp_receive+0x888>)
 8016b8e:	68db      	ldr	r3, [r3, #12]
 8016b90:	4a8f      	ldr	r2, [pc, #572]	; (8016dd0 <tcp_receive+0x884>)
 8016b92:	6812      	ldr	r2, [r2, #0]
 8016b94:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8016b96:	e00d      	b.n	8016bb4 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8016b98:	4b8d      	ldr	r3, [pc, #564]	; (8016dd0 <tcp_receive+0x884>)
 8016b9a:	681a      	ldr	r2, [r3, #0]
 8016b9c:	687b      	ldr	r3, [r7, #4]
 8016b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016ba0:	1ad3      	subs	r3, r2, r3
 8016ba2:	2b00      	cmp	r3, #0
 8016ba4:	da06      	bge.n	8016bb4 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8016ba6:	687b      	ldr	r3, [r7, #4]
 8016ba8:	8b5b      	ldrh	r3, [r3, #26]
 8016baa:	f043 0302 	orr.w	r3, r3, #2
 8016bae:	b29a      	uxth	r2, r3
 8016bb0:	687b      	ldr	r3, [r7, #4]
 8016bb2:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8016bb4:	4b86      	ldr	r3, [pc, #536]	; (8016dd0 <tcp_receive+0x884>)
 8016bb6:	681a      	ldr	r2, [r3, #0]
 8016bb8:	687b      	ldr	r3, [r7, #4]
 8016bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016bbc:	1ad3      	subs	r3, r2, r3
 8016bbe:	2b00      	cmp	r3, #0
 8016bc0:	f2c0 842a 	blt.w	8017418 <tcp_receive+0xecc>
 8016bc4:	4b82      	ldr	r3, [pc, #520]	; (8016dd0 <tcp_receive+0x884>)
 8016bc6:	681a      	ldr	r2, [r3, #0]
 8016bc8:	687b      	ldr	r3, [r7, #4]
 8016bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016bcc:	6879      	ldr	r1, [r7, #4]
 8016bce:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8016bd0:	440b      	add	r3, r1
 8016bd2:	1ad3      	subs	r3, r2, r3
 8016bd4:	3301      	adds	r3, #1
 8016bd6:	2b00      	cmp	r3, #0
 8016bd8:	f300 841e 	bgt.w	8017418 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8016bdc:	687b      	ldr	r3, [r7, #4]
 8016bde:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8016be0:	4b7b      	ldr	r3, [pc, #492]	; (8016dd0 <tcp_receive+0x884>)
 8016be2:	681b      	ldr	r3, [r3, #0]
 8016be4:	429a      	cmp	r2, r3
 8016be6:	f040 829a 	bne.w	801711e <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8016bea:	4b7a      	ldr	r3, [pc, #488]	; (8016dd4 <tcp_receive+0x888>)
 8016bec:	891c      	ldrh	r4, [r3, #8]
 8016bee:	4b79      	ldr	r3, [pc, #484]	; (8016dd4 <tcp_receive+0x888>)
 8016bf0:	68db      	ldr	r3, [r3, #12]
 8016bf2:	899b      	ldrh	r3, [r3, #12]
 8016bf4:	b29b      	uxth	r3, r3
 8016bf6:	4618      	mov	r0, r3
 8016bf8:	f7fa fbf4 	bl	80113e4 <lwip_htons>
 8016bfc:	4603      	mov	r3, r0
 8016bfe:	b2db      	uxtb	r3, r3
 8016c00:	f003 0303 	and.w	r3, r3, #3
 8016c04:	2b00      	cmp	r3, #0
 8016c06:	d001      	beq.n	8016c0c <tcp_receive+0x6c0>
 8016c08:	2301      	movs	r3, #1
 8016c0a:	e000      	b.n	8016c0e <tcp_receive+0x6c2>
 8016c0c:	2300      	movs	r3, #0
 8016c0e:	4423      	add	r3, r4
 8016c10:	b29a      	uxth	r2, r3
 8016c12:	4b71      	ldr	r3, [pc, #452]	; (8016dd8 <tcp_receive+0x88c>)
 8016c14:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8016c16:	687b      	ldr	r3, [r7, #4]
 8016c18:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8016c1a:	4b6f      	ldr	r3, [pc, #444]	; (8016dd8 <tcp_receive+0x88c>)
 8016c1c:	881b      	ldrh	r3, [r3, #0]
 8016c1e:	429a      	cmp	r2, r3
 8016c20:	d275      	bcs.n	8016d0e <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8016c22:	4b6c      	ldr	r3, [pc, #432]	; (8016dd4 <tcp_receive+0x888>)
 8016c24:	68db      	ldr	r3, [r3, #12]
 8016c26:	899b      	ldrh	r3, [r3, #12]
 8016c28:	b29b      	uxth	r3, r3
 8016c2a:	4618      	mov	r0, r3
 8016c2c:	f7fa fbda 	bl	80113e4 <lwip_htons>
 8016c30:	4603      	mov	r3, r0
 8016c32:	b2db      	uxtb	r3, r3
 8016c34:	f003 0301 	and.w	r3, r3, #1
 8016c38:	2b00      	cmp	r3, #0
 8016c3a:	d01f      	beq.n	8016c7c <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8016c3c:	4b65      	ldr	r3, [pc, #404]	; (8016dd4 <tcp_receive+0x888>)
 8016c3e:	68db      	ldr	r3, [r3, #12]
 8016c40:	899b      	ldrh	r3, [r3, #12]
 8016c42:	b29b      	uxth	r3, r3
 8016c44:	b21b      	sxth	r3, r3
 8016c46:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8016c4a:	b21c      	sxth	r4, r3
 8016c4c:	4b61      	ldr	r3, [pc, #388]	; (8016dd4 <tcp_receive+0x888>)
 8016c4e:	68db      	ldr	r3, [r3, #12]
 8016c50:	899b      	ldrh	r3, [r3, #12]
 8016c52:	b29b      	uxth	r3, r3
 8016c54:	4618      	mov	r0, r3
 8016c56:	f7fa fbc5 	bl	80113e4 <lwip_htons>
 8016c5a:	4603      	mov	r3, r0
 8016c5c:	b2db      	uxtb	r3, r3
 8016c5e:	b29b      	uxth	r3, r3
 8016c60:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8016c64:	b29b      	uxth	r3, r3
 8016c66:	4618      	mov	r0, r3
 8016c68:	f7fa fbbc 	bl	80113e4 <lwip_htons>
 8016c6c:	4603      	mov	r3, r0
 8016c6e:	b21b      	sxth	r3, r3
 8016c70:	4323      	orrs	r3, r4
 8016c72:	b21a      	sxth	r2, r3
 8016c74:	4b57      	ldr	r3, [pc, #348]	; (8016dd4 <tcp_receive+0x888>)
 8016c76:	68db      	ldr	r3, [r3, #12]
 8016c78:	b292      	uxth	r2, r2
 8016c7a:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8016c7c:	687b      	ldr	r3, [r7, #4]
 8016c7e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8016c80:	4b54      	ldr	r3, [pc, #336]	; (8016dd4 <tcp_receive+0x888>)
 8016c82:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8016c84:	4b53      	ldr	r3, [pc, #332]	; (8016dd4 <tcp_receive+0x888>)
 8016c86:	68db      	ldr	r3, [r3, #12]
 8016c88:	899b      	ldrh	r3, [r3, #12]
 8016c8a:	b29b      	uxth	r3, r3
 8016c8c:	4618      	mov	r0, r3
 8016c8e:	f7fa fba9 	bl	80113e4 <lwip_htons>
 8016c92:	4603      	mov	r3, r0
 8016c94:	b2db      	uxtb	r3, r3
 8016c96:	f003 0302 	and.w	r3, r3, #2
 8016c9a:	2b00      	cmp	r3, #0
 8016c9c:	d005      	beq.n	8016caa <tcp_receive+0x75e>
            inseg.len -= 1;
 8016c9e:	4b4d      	ldr	r3, [pc, #308]	; (8016dd4 <tcp_receive+0x888>)
 8016ca0:	891b      	ldrh	r3, [r3, #8]
 8016ca2:	3b01      	subs	r3, #1
 8016ca4:	b29a      	uxth	r2, r3
 8016ca6:	4b4b      	ldr	r3, [pc, #300]	; (8016dd4 <tcp_receive+0x888>)
 8016ca8:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8016caa:	4b4a      	ldr	r3, [pc, #296]	; (8016dd4 <tcp_receive+0x888>)
 8016cac:	685b      	ldr	r3, [r3, #4]
 8016cae:	4a49      	ldr	r2, [pc, #292]	; (8016dd4 <tcp_receive+0x888>)
 8016cb0:	8912      	ldrh	r2, [r2, #8]
 8016cb2:	4611      	mov	r1, r2
 8016cb4:	4618      	mov	r0, r3
 8016cb6:	f7fb fec5 	bl	8012a44 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8016cba:	4b46      	ldr	r3, [pc, #280]	; (8016dd4 <tcp_receive+0x888>)
 8016cbc:	891c      	ldrh	r4, [r3, #8]
 8016cbe:	4b45      	ldr	r3, [pc, #276]	; (8016dd4 <tcp_receive+0x888>)
 8016cc0:	68db      	ldr	r3, [r3, #12]
 8016cc2:	899b      	ldrh	r3, [r3, #12]
 8016cc4:	b29b      	uxth	r3, r3
 8016cc6:	4618      	mov	r0, r3
 8016cc8:	f7fa fb8c 	bl	80113e4 <lwip_htons>
 8016ccc:	4603      	mov	r3, r0
 8016cce:	b2db      	uxtb	r3, r3
 8016cd0:	f003 0303 	and.w	r3, r3, #3
 8016cd4:	2b00      	cmp	r3, #0
 8016cd6:	d001      	beq.n	8016cdc <tcp_receive+0x790>
 8016cd8:	2301      	movs	r3, #1
 8016cda:	e000      	b.n	8016cde <tcp_receive+0x792>
 8016cdc:	2300      	movs	r3, #0
 8016cde:	4423      	add	r3, r4
 8016ce0:	b29a      	uxth	r2, r3
 8016ce2:	4b3d      	ldr	r3, [pc, #244]	; (8016dd8 <tcp_receive+0x88c>)
 8016ce4:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8016ce6:	4b3c      	ldr	r3, [pc, #240]	; (8016dd8 <tcp_receive+0x88c>)
 8016ce8:	881b      	ldrh	r3, [r3, #0]
 8016cea:	461a      	mov	r2, r3
 8016cec:	4b38      	ldr	r3, [pc, #224]	; (8016dd0 <tcp_receive+0x884>)
 8016cee:	681b      	ldr	r3, [r3, #0]
 8016cf0:	441a      	add	r2, r3
 8016cf2:	687b      	ldr	r3, [r7, #4]
 8016cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016cf6:	6879      	ldr	r1, [r7, #4]
 8016cf8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8016cfa:	440b      	add	r3, r1
 8016cfc:	429a      	cmp	r2, r3
 8016cfe:	d006      	beq.n	8016d0e <tcp_receive+0x7c2>
 8016d00:	4b36      	ldr	r3, [pc, #216]	; (8016ddc <tcp_receive+0x890>)
 8016d02:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8016d06:	4936      	ldr	r1, [pc, #216]	; (8016de0 <tcp_receive+0x894>)
 8016d08:	4836      	ldr	r0, [pc, #216]	; (8016de4 <tcp_receive+0x898>)
 8016d0a:	f008 fc7b 	bl	801f604 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8016d0e:	687b      	ldr	r3, [r7, #4]
 8016d10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016d12:	2b00      	cmp	r3, #0
 8016d14:	f000 80e7 	beq.w	8016ee6 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8016d18:	4b2e      	ldr	r3, [pc, #184]	; (8016dd4 <tcp_receive+0x888>)
 8016d1a:	68db      	ldr	r3, [r3, #12]
 8016d1c:	899b      	ldrh	r3, [r3, #12]
 8016d1e:	b29b      	uxth	r3, r3
 8016d20:	4618      	mov	r0, r3
 8016d22:	f7fa fb5f 	bl	80113e4 <lwip_htons>
 8016d26:	4603      	mov	r3, r0
 8016d28:	b2db      	uxtb	r3, r3
 8016d2a:	f003 0301 	and.w	r3, r3, #1
 8016d2e:	2b00      	cmp	r3, #0
 8016d30:	d010      	beq.n	8016d54 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8016d32:	e00a      	b.n	8016d4a <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8016d34:	687b      	ldr	r3, [r7, #4]
 8016d36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016d38:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8016d3a:	687b      	ldr	r3, [r7, #4]
 8016d3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016d3e:	681a      	ldr	r2, [r3, #0]
 8016d40:	687b      	ldr	r3, [r7, #4]
 8016d42:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8016d44:	68f8      	ldr	r0, [r7, #12]
 8016d46:	f7fd fcc8 	bl	80146da <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8016d4a:	687b      	ldr	r3, [r7, #4]
 8016d4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016d4e:	2b00      	cmp	r3, #0
 8016d50:	d1f0      	bne.n	8016d34 <tcp_receive+0x7e8>
 8016d52:	e0c8      	b.n	8016ee6 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8016d54:	687b      	ldr	r3, [r7, #4]
 8016d56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016d58:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8016d5a:	e052      	b.n	8016e02 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8016d5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016d5e:	68db      	ldr	r3, [r3, #12]
 8016d60:	899b      	ldrh	r3, [r3, #12]
 8016d62:	b29b      	uxth	r3, r3
 8016d64:	4618      	mov	r0, r3
 8016d66:	f7fa fb3d 	bl	80113e4 <lwip_htons>
 8016d6a:	4603      	mov	r3, r0
 8016d6c:	b2db      	uxtb	r3, r3
 8016d6e:	f003 0301 	and.w	r3, r3, #1
 8016d72:	2b00      	cmp	r3, #0
 8016d74:	d03d      	beq.n	8016df2 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8016d76:	4b17      	ldr	r3, [pc, #92]	; (8016dd4 <tcp_receive+0x888>)
 8016d78:	68db      	ldr	r3, [r3, #12]
 8016d7a:	899b      	ldrh	r3, [r3, #12]
 8016d7c:	b29b      	uxth	r3, r3
 8016d7e:	4618      	mov	r0, r3
 8016d80:	f7fa fb30 	bl	80113e4 <lwip_htons>
 8016d84:	4603      	mov	r3, r0
 8016d86:	b2db      	uxtb	r3, r3
 8016d88:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8016d8c:	2b00      	cmp	r3, #0
 8016d8e:	d130      	bne.n	8016df2 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8016d90:	4b10      	ldr	r3, [pc, #64]	; (8016dd4 <tcp_receive+0x888>)
 8016d92:	68db      	ldr	r3, [r3, #12]
 8016d94:	899b      	ldrh	r3, [r3, #12]
 8016d96:	b29c      	uxth	r4, r3
 8016d98:	2001      	movs	r0, #1
 8016d9a:	f7fa fb23 	bl	80113e4 <lwip_htons>
 8016d9e:	4603      	mov	r3, r0
 8016da0:	461a      	mov	r2, r3
 8016da2:	4b0c      	ldr	r3, [pc, #48]	; (8016dd4 <tcp_receive+0x888>)
 8016da4:	68db      	ldr	r3, [r3, #12]
 8016da6:	4322      	orrs	r2, r4
 8016da8:	b292      	uxth	r2, r2
 8016daa:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8016dac:	4b09      	ldr	r3, [pc, #36]	; (8016dd4 <tcp_receive+0x888>)
 8016dae:	891c      	ldrh	r4, [r3, #8]
 8016db0:	4b08      	ldr	r3, [pc, #32]	; (8016dd4 <tcp_receive+0x888>)
 8016db2:	68db      	ldr	r3, [r3, #12]
 8016db4:	899b      	ldrh	r3, [r3, #12]
 8016db6:	b29b      	uxth	r3, r3
 8016db8:	4618      	mov	r0, r3
 8016dba:	f7fa fb13 	bl	80113e4 <lwip_htons>
 8016dbe:	4603      	mov	r3, r0
 8016dc0:	b2db      	uxtb	r3, r3
 8016dc2:	f003 0303 	and.w	r3, r3, #3
 8016dc6:	2b00      	cmp	r3, #0
 8016dc8:	d00e      	beq.n	8016de8 <tcp_receive+0x89c>
 8016dca:	2301      	movs	r3, #1
 8016dcc:	e00d      	b.n	8016dea <tcp_receive+0x89e>
 8016dce:	bf00      	nop
 8016dd0:	24004560 	.word	0x24004560
 8016dd4:	24004540 	.word	0x24004540
 8016dd8:	2400456a 	.word	0x2400456a
 8016ddc:	08025494 	.word	0x08025494
 8016de0:	0802583c 	.word	0x0802583c
 8016de4:	080254e0 	.word	0x080254e0
 8016de8:	2300      	movs	r3, #0
 8016dea:	4423      	add	r3, r4
 8016dec:	b29a      	uxth	r2, r3
 8016dee:	4b98      	ldr	r3, [pc, #608]	; (8017050 <tcp_receive+0xb04>)
 8016df0:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8016df2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016df4:	613b      	str	r3, [r7, #16]
              next = next->next;
 8016df6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016df8:	681b      	ldr	r3, [r3, #0]
 8016dfa:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8016dfc:	6938      	ldr	r0, [r7, #16]
 8016dfe:	f7fd fc6c 	bl	80146da <tcp_seg_free>
            while (next &&
 8016e02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016e04:	2b00      	cmp	r3, #0
 8016e06:	d00e      	beq.n	8016e26 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8016e08:	4b91      	ldr	r3, [pc, #580]	; (8017050 <tcp_receive+0xb04>)
 8016e0a:	881b      	ldrh	r3, [r3, #0]
 8016e0c:	461a      	mov	r2, r3
 8016e0e:	4b91      	ldr	r3, [pc, #580]	; (8017054 <tcp_receive+0xb08>)
 8016e10:	681b      	ldr	r3, [r3, #0]
 8016e12:	441a      	add	r2, r3
 8016e14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016e16:	68db      	ldr	r3, [r3, #12]
 8016e18:	685b      	ldr	r3, [r3, #4]
 8016e1a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8016e1c:	8909      	ldrh	r1, [r1, #8]
 8016e1e:	440b      	add	r3, r1
 8016e20:	1ad3      	subs	r3, r2, r3
            while (next &&
 8016e22:	2b00      	cmp	r3, #0
 8016e24:	da9a      	bge.n	8016d5c <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8016e26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016e28:	2b00      	cmp	r3, #0
 8016e2a:	d059      	beq.n	8016ee0 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8016e2c:	4b88      	ldr	r3, [pc, #544]	; (8017050 <tcp_receive+0xb04>)
 8016e2e:	881b      	ldrh	r3, [r3, #0]
 8016e30:	461a      	mov	r2, r3
 8016e32:	4b88      	ldr	r3, [pc, #544]	; (8017054 <tcp_receive+0xb08>)
 8016e34:	681b      	ldr	r3, [r3, #0]
 8016e36:	441a      	add	r2, r3
 8016e38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016e3a:	68db      	ldr	r3, [r3, #12]
 8016e3c:	685b      	ldr	r3, [r3, #4]
 8016e3e:	1ad3      	subs	r3, r2, r3
            if (next &&
 8016e40:	2b00      	cmp	r3, #0
 8016e42:	dd4d      	ble.n	8016ee0 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8016e44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016e46:	68db      	ldr	r3, [r3, #12]
 8016e48:	685b      	ldr	r3, [r3, #4]
 8016e4a:	b29a      	uxth	r2, r3
 8016e4c:	4b81      	ldr	r3, [pc, #516]	; (8017054 <tcp_receive+0xb08>)
 8016e4e:	681b      	ldr	r3, [r3, #0]
 8016e50:	b29b      	uxth	r3, r3
 8016e52:	1ad3      	subs	r3, r2, r3
 8016e54:	b29a      	uxth	r2, r3
 8016e56:	4b80      	ldr	r3, [pc, #512]	; (8017058 <tcp_receive+0xb0c>)
 8016e58:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8016e5a:	4b7f      	ldr	r3, [pc, #508]	; (8017058 <tcp_receive+0xb0c>)
 8016e5c:	68db      	ldr	r3, [r3, #12]
 8016e5e:	899b      	ldrh	r3, [r3, #12]
 8016e60:	b29b      	uxth	r3, r3
 8016e62:	4618      	mov	r0, r3
 8016e64:	f7fa fabe 	bl	80113e4 <lwip_htons>
 8016e68:	4603      	mov	r3, r0
 8016e6a:	b2db      	uxtb	r3, r3
 8016e6c:	f003 0302 	and.w	r3, r3, #2
 8016e70:	2b00      	cmp	r3, #0
 8016e72:	d005      	beq.n	8016e80 <tcp_receive+0x934>
                inseg.len -= 1;
 8016e74:	4b78      	ldr	r3, [pc, #480]	; (8017058 <tcp_receive+0xb0c>)
 8016e76:	891b      	ldrh	r3, [r3, #8]
 8016e78:	3b01      	subs	r3, #1
 8016e7a:	b29a      	uxth	r2, r3
 8016e7c:	4b76      	ldr	r3, [pc, #472]	; (8017058 <tcp_receive+0xb0c>)
 8016e7e:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8016e80:	4b75      	ldr	r3, [pc, #468]	; (8017058 <tcp_receive+0xb0c>)
 8016e82:	685b      	ldr	r3, [r3, #4]
 8016e84:	4a74      	ldr	r2, [pc, #464]	; (8017058 <tcp_receive+0xb0c>)
 8016e86:	8912      	ldrh	r2, [r2, #8]
 8016e88:	4611      	mov	r1, r2
 8016e8a:	4618      	mov	r0, r3
 8016e8c:	f7fb fdda 	bl	8012a44 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8016e90:	4b71      	ldr	r3, [pc, #452]	; (8017058 <tcp_receive+0xb0c>)
 8016e92:	891c      	ldrh	r4, [r3, #8]
 8016e94:	4b70      	ldr	r3, [pc, #448]	; (8017058 <tcp_receive+0xb0c>)
 8016e96:	68db      	ldr	r3, [r3, #12]
 8016e98:	899b      	ldrh	r3, [r3, #12]
 8016e9a:	b29b      	uxth	r3, r3
 8016e9c:	4618      	mov	r0, r3
 8016e9e:	f7fa faa1 	bl	80113e4 <lwip_htons>
 8016ea2:	4603      	mov	r3, r0
 8016ea4:	b2db      	uxtb	r3, r3
 8016ea6:	f003 0303 	and.w	r3, r3, #3
 8016eaa:	2b00      	cmp	r3, #0
 8016eac:	d001      	beq.n	8016eb2 <tcp_receive+0x966>
 8016eae:	2301      	movs	r3, #1
 8016eb0:	e000      	b.n	8016eb4 <tcp_receive+0x968>
 8016eb2:	2300      	movs	r3, #0
 8016eb4:	4423      	add	r3, r4
 8016eb6:	b29a      	uxth	r2, r3
 8016eb8:	4b65      	ldr	r3, [pc, #404]	; (8017050 <tcp_receive+0xb04>)
 8016eba:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8016ebc:	4b64      	ldr	r3, [pc, #400]	; (8017050 <tcp_receive+0xb04>)
 8016ebe:	881b      	ldrh	r3, [r3, #0]
 8016ec0:	461a      	mov	r2, r3
 8016ec2:	4b64      	ldr	r3, [pc, #400]	; (8017054 <tcp_receive+0xb08>)
 8016ec4:	681b      	ldr	r3, [r3, #0]
 8016ec6:	441a      	add	r2, r3
 8016ec8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016eca:	68db      	ldr	r3, [r3, #12]
 8016ecc:	685b      	ldr	r3, [r3, #4]
 8016ece:	429a      	cmp	r2, r3
 8016ed0:	d006      	beq.n	8016ee0 <tcp_receive+0x994>
 8016ed2:	4b62      	ldr	r3, [pc, #392]	; (801705c <tcp_receive+0xb10>)
 8016ed4:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8016ed8:	4961      	ldr	r1, [pc, #388]	; (8017060 <tcp_receive+0xb14>)
 8016eda:	4862      	ldr	r0, [pc, #392]	; (8017064 <tcp_receive+0xb18>)
 8016edc:	f008 fb92 	bl	801f604 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8016ee0:	687b      	ldr	r3, [r7, #4]
 8016ee2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8016ee4:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8016ee6:	4b5a      	ldr	r3, [pc, #360]	; (8017050 <tcp_receive+0xb04>)
 8016ee8:	881b      	ldrh	r3, [r3, #0]
 8016eea:	461a      	mov	r2, r3
 8016eec:	4b59      	ldr	r3, [pc, #356]	; (8017054 <tcp_receive+0xb08>)
 8016eee:	681b      	ldr	r3, [r3, #0]
 8016ef0:	441a      	add	r2, r3
 8016ef2:	687b      	ldr	r3, [r7, #4]
 8016ef4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8016ef6:	687b      	ldr	r3, [r7, #4]
 8016ef8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8016efa:	4b55      	ldr	r3, [pc, #340]	; (8017050 <tcp_receive+0xb04>)
 8016efc:	881b      	ldrh	r3, [r3, #0]
 8016efe:	429a      	cmp	r2, r3
 8016f00:	d206      	bcs.n	8016f10 <tcp_receive+0x9c4>
 8016f02:	4b56      	ldr	r3, [pc, #344]	; (801705c <tcp_receive+0xb10>)
 8016f04:	f240 6207 	movw	r2, #1543	; 0x607
 8016f08:	4957      	ldr	r1, [pc, #348]	; (8017068 <tcp_receive+0xb1c>)
 8016f0a:	4856      	ldr	r0, [pc, #344]	; (8017064 <tcp_receive+0xb18>)
 8016f0c:	f008 fb7a 	bl	801f604 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8016f10:	687b      	ldr	r3, [r7, #4]
 8016f12:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8016f14:	4b4e      	ldr	r3, [pc, #312]	; (8017050 <tcp_receive+0xb04>)
 8016f16:	881b      	ldrh	r3, [r3, #0]
 8016f18:	1ad3      	subs	r3, r2, r3
 8016f1a:	b29a      	uxth	r2, r3
 8016f1c:	687b      	ldr	r3, [r7, #4]
 8016f1e:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8016f20:	6878      	ldr	r0, [r7, #4]
 8016f22:	f7fc feb5 	bl	8013c90 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8016f26:	4b4c      	ldr	r3, [pc, #304]	; (8017058 <tcp_receive+0xb0c>)
 8016f28:	685b      	ldr	r3, [r3, #4]
 8016f2a:	891b      	ldrh	r3, [r3, #8]
 8016f2c:	2b00      	cmp	r3, #0
 8016f2e:	d006      	beq.n	8016f3e <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8016f30:	4b49      	ldr	r3, [pc, #292]	; (8017058 <tcp_receive+0xb0c>)
 8016f32:	685b      	ldr	r3, [r3, #4]
 8016f34:	4a4d      	ldr	r2, [pc, #308]	; (801706c <tcp_receive+0xb20>)
 8016f36:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8016f38:	4b47      	ldr	r3, [pc, #284]	; (8017058 <tcp_receive+0xb0c>)
 8016f3a:	2200      	movs	r2, #0
 8016f3c:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8016f3e:	4b46      	ldr	r3, [pc, #280]	; (8017058 <tcp_receive+0xb0c>)
 8016f40:	68db      	ldr	r3, [r3, #12]
 8016f42:	899b      	ldrh	r3, [r3, #12]
 8016f44:	b29b      	uxth	r3, r3
 8016f46:	4618      	mov	r0, r3
 8016f48:	f7fa fa4c 	bl	80113e4 <lwip_htons>
 8016f4c:	4603      	mov	r3, r0
 8016f4e:	b2db      	uxtb	r3, r3
 8016f50:	f003 0301 	and.w	r3, r3, #1
 8016f54:	2b00      	cmp	r3, #0
 8016f56:	f000 80b8 	beq.w	80170ca <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8016f5a:	4b45      	ldr	r3, [pc, #276]	; (8017070 <tcp_receive+0xb24>)
 8016f5c:	781b      	ldrb	r3, [r3, #0]
 8016f5e:	f043 0320 	orr.w	r3, r3, #32
 8016f62:	b2da      	uxtb	r2, r3
 8016f64:	4b42      	ldr	r3, [pc, #264]	; (8017070 <tcp_receive+0xb24>)
 8016f66:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8016f68:	e0af      	b.n	80170ca <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8016f6a:	687b      	ldr	r3, [r7, #4]
 8016f6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016f6e:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8016f70:	687b      	ldr	r3, [r7, #4]
 8016f72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016f74:	68db      	ldr	r3, [r3, #12]
 8016f76:	685b      	ldr	r3, [r3, #4]
 8016f78:	4a36      	ldr	r2, [pc, #216]	; (8017054 <tcp_receive+0xb08>)
 8016f7a:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8016f7c:	68bb      	ldr	r3, [r7, #8]
 8016f7e:	891b      	ldrh	r3, [r3, #8]
 8016f80:	461c      	mov	r4, r3
 8016f82:	68bb      	ldr	r3, [r7, #8]
 8016f84:	68db      	ldr	r3, [r3, #12]
 8016f86:	899b      	ldrh	r3, [r3, #12]
 8016f88:	b29b      	uxth	r3, r3
 8016f8a:	4618      	mov	r0, r3
 8016f8c:	f7fa fa2a 	bl	80113e4 <lwip_htons>
 8016f90:	4603      	mov	r3, r0
 8016f92:	b2db      	uxtb	r3, r3
 8016f94:	f003 0303 	and.w	r3, r3, #3
 8016f98:	2b00      	cmp	r3, #0
 8016f9a:	d001      	beq.n	8016fa0 <tcp_receive+0xa54>
 8016f9c:	2301      	movs	r3, #1
 8016f9e:	e000      	b.n	8016fa2 <tcp_receive+0xa56>
 8016fa0:	2300      	movs	r3, #0
 8016fa2:	191a      	adds	r2, r3, r4
 8016fa4:	687b      	ldr	r3, [r7, #4]
 8016fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016fa8:	441a      	add	r2, r3
 8016faa:	687b      	ldr	r3, [r7, #4]
 8016fac:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8016fae:	687b      	ldr	r3, [r7, #4]
 8016fb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016fb2:	461c      	mov	r4, r3
 8016fb4:	68bb      	ldr	r3, [r7, #8]
 8016fb6:	891b      	ldrh	r3, [r3, #8]
 8016fb8:	461d      	mov	r5, r3
 8016fba:	68bb      	ldr	r3, [r7, #8]
 8016fbc:	68db      	ldr	r3, [r3, #12]
 8016fbe:	899b      	ldrh	r3, [r3, #12]
 8016fc0:	b29b      	uxth	r3, r3
 8016fc2:	4618      	mov	r0, r3
 8016fc4:	f7fa fa0e 	bl	80113e4 <lwip_htons>
 8016fc8:	4603      	mov	r3, r0
 8016fca:	b2db      	uxtb	r3, r3
 8016fcc:	f003 0303 	and.w	r3, r3, #3
 8016fd0:	2b00      	cmp	r3, #0
 8016fd2:	d001      	beq.n	8016fd8 <tcp_receive+0xa8c>
 8016fd4:	2301      	movs	r3, #1
 8016fd6:	e000      	b.n	8016fda <tcp_receive+0xa8e>
 8016fd8:	2300      	movs	r3, #0
 8016fda:	442b      	add	r3, r5
 8016fdc:	429c      	cmp	r4, r3
 8016fde:	d206      	bcs.n	8016fee <tcp_receive+0xaa2>
 8016fe0:	4b1e      	ldr	r3, [pc, #120]	; (801705c <tcp_receive+0xb10>)
 8016fe2:	f240 622b 	movw	r2, #1579	; 0x62b
 8016fe6:	4923      	ldr	r1, [pc, #140]	; (8017074 <tcp_receive+0xb28>)
 8016fe8:	481e      	ldr	r0, [pc, #120]	; (8017064 <tcp_receive+0xb18>)
 8016fea:	f008 fb0b 	bl	801f604 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8016fee:	68bb      	ldr	r3, [r7, #8]
 8016ff0:	891b      	ldrh	r3, [r3, #8]
 8016ff2:	461c      	mov	r4, r3
 8016ff4:	68bb      	ldr	r3, [r7, #8]
 8016ff6:	68db      	ldr	r3, [r3, #12]
 8016ff8:	899b      	ldrh	r3, [r3, #12]
 8016ffa:	b29b      	uxth	r3, r3
 8016ffc:	4618      	mov	r0, r3
 8016ffe:	f7fa f9f1 	bl	80113e4 <lwip_htons>
 8017002:	4603      	mov	r3, r0
 8017004:	b2db      	uxtb	r3, r3
 8017006:	f003 0303 	and.w	r3, r3, #3
 801700a:	2b00      	cmp	r3, #0
 801700c:	d001      	beq.n	8017012 <tcp_receive+0xac6>
 801700e:	2301      	movs	r3, #1
 8017010:	e000      	b.n	8017014 <tcp_receive+0xac8>
 8017012:	2300      	movs	r3, #0
 8017014:	1919      	adds	r1, r3, r4
 8017016:	687b      	ldr	r3, [r7, #4]
 8017018:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801701a:	b28b      	uxth	r3, r1
 801701c:	1ad3      	subs	r3, r2, r3
 801701e:	b29a      	uxth	r2, r3
 8017020:	687b      	ldr	r3, [r7, #4]
 8017022:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8017024:	6878      	ldr	r0, [r7, #4]
 8017026:	f7fc fe33 	bl	8013c90 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 801702a:	68bb      	ldr	r3, [r7, #8]
 801702c:	685b      	ldr	r3, [r3, #4]
 801702e:	891b      	ldrh	r3, [r3, #8]
 8017030:	2b00      	cmp	r3, #0
 8017032:	d028      	beq.n	8017086 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8017034:	4b0d      	ldr	r3, [pc, #52]	; (801706c <tcp_receive+0xb20>)
 8017036:	681b      	ldr	r3, [r3, #0]
 8017038:	2b00      	cmp	r3, #0
 801703a:	d01d      	beq.n	8017078 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 801703c:	4b0b      	ldr	r3, [pc, #44]	; (801706c <tcp_receive+0xb20>)
 801703e:	681a      	ldr	r2, [r3, #0]
 8017040:	68bb      	ldr	r3, [r7, #8]
 8017042:	685b      	ldr	r3, [r3, #4]
 8017044:	4619      	mov	r1, r3
 8017046:	4610      	mov	r0, r2
 8017048:	f7fb ff82 	bl	8012f50 <pbuf_cat>
 801704c:	e018      	b.n	8017080 <tcp_receive+0xb34>
 801704e:	bf00      	nop
 8017050:	2400456a 	.word	0x2400456a
 8017054:	24004560 	.word	0x24004560
 8017058:	24004540 	.word	0x24004540
 801705c:	08025494 	.word	0x08025494
 8017060:	08025874 	.word	0x08025874
 8017064:	080254e0 	.word	0x080254e0
 8017068:	080258b0 	.word	0x080258b0
 801706c:	24004570 	.word	0x24004570
 8017070:	2400456d 	.word	0x2400456d
 8017074:	080258d0 	.word	0x080258d0
            } else {
              recv_data = cseg->p;
 8017078:	68bb      	ldr	r3, [r7, #8]
 801707a:	685b      	ldr	r3, [r3, #4]
 801707c:	4a70      	ldr	r2, [pc, #448]	; (8017240 <tcp_receive+0xcf4>)
 801707e:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8017080:	68bb      	ldr	r3, [r7, #8]
 8017082:	2200      	movs	r2, #0
 8017084:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8017086:	68bb      	ldr	r3, [r7, #8]
 8017088:	68db      	ldr	r3, [r3, #12]
 801708a:	899b      	ldrh	r3, [r3, #12]
 801708c:	b29b      	uxth	r3, r3
 801708e:	4618      	mov	r0, r3
 8017090:	f7fa f9a8 	bl	80113e4 <lwip_htons>
 8017094:	4603      	mov	r3, r0
 8017096:	b2db      	uxtb	r3, r3
 8017098:	f003 0301 	and.w	r3, r3, #1
 801709c:	2b00      	cmp	r3, #0
 801709e:	d00d      	beq.n	80170bc <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 80170a0:	4b68      	ldr	r3, [pc, #416]	; (8017244 <tcp_receive+0xcf8>)
 80170a2:	781b      	ldrb	r3, [r3, #0]
 80170a4:	f043 0320 	orr.w	r3, r3, #32
 80170a8:	b2da      	uxtb	r2, r3
 80170aa:	4b66      	ldr	r3, [pc, #408]	; (8017244 <tcp_receive+0xcf8>)
 80170ac:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 80170ae:	687b      	ldr	r3, [r7, #4]
 80170b0:	7d1b      	ldrb	r3, [r3, #20]
 80170b2:	2b04      	cmp	r3, #4
 80170b4:	d102      	bne.n	80170bc <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 80170b6:	687b      	ldr	r3, [r7, #4]
 80170b8:	2207      	movs	r2, #7
 80170ba:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 80170bc:	68bb      	ldr	r3, [r7, #8]
 80170be:	681a      	ldr	r2, [r3, #0]
 80170c0:	687b      	ldr	r3, [r7, #4]
 80170c2:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 80170c4:	68b8      	ldr	r0, [r7, #8]
 80170c6:	f7fd fb08 	bl	80146da <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 80170ca:	687b      	ldr	r3, [r7, #4]
 80170cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80170ce:	2b00      	cmp	r3, #0
 80170d0:	d008      	beq.n	80170e4 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 80170d2:	687b      	ldr	r3, [r7, #4]
 80170d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80170d6:	68db      	ldr	r3, [r3, #12]
 80170d8:	685a      	ldr	r2, [r3, #4]
 80170da:	687b      	ldr	r3, [r7, #4]
 80170dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 80170de:	429a      	cmp	r2, r3
 80170e0:	f43f af43 	beq.w	8016f6a <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 80170e4:	687b      	ldr	r3, [r7, #4]
 80170e6:	8b5b      	ldrh	r3, [r3, #26]
 80170e8:	f003 0301 	and.w	r3, r3, #1
 80170ec:	2b00      	cmp	r3, #0
 80170ee:	d00e      	beq.n	801710e <tcp_receive+0xbc2>
 80170f0:	687b      	ldr	r3, [r7, #4]
 80170f2:	8b5b      	ldrh	r3, [r3, #26]
 80170f4:	f023 0301 	bic.w	r3, r3, #1
 80170f8:	b29a      	uxth	r2, r3
 80170fa:	687b      	ldr	r3, [r7, #4]
 80170fc:	835a      	strh	r2, [r3, #26]
 80170fe:	687b      	ldr	r3, [r7, #4]
 8017100:	8b5b      	ldrh	r3, [r3, #26]
 8017102:	f043 0302 	orr.w	r3, r3, #2
 8017106:	b29a      	uxth	r2, r3
 8017108:	687b      	ldr	r3, [r7, #4]
 801710a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801710c:	e188      	b.n	8017420 <tcp_receive+0xed4>
        tcp_ack(pcb);
 801710e:	687b      	ldr	r3, [r7, #4]
 8017110:	8b5b      	ldrh	r3, [r3, #26]
 8017112:	f043 0301 	orr.w	r3, r3, #1
 8017116:	b29a      	uxth	r2, r3
 8017118:	687b      	ldr	r3, [r7, #4]
 801711a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801711c:	e180      	b.n	8017420 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 801711e:	687b      	ldr	r3, [r7, #4]
 8017120:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017122:	2b00      	cmp	r3, #0
 8017124:	d106      	bne.n	8017134 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8017126:	4848      	ldr	r0, [pc, #288]	; (8017248 <tcp_receive+0xcfc>)
 8017128:	f7fd faf0 	bl	801470c <tcp_seg_copy>
 801712c:	4602      	mov	r2, r0
 801712e:	687b      	ldr	r3, [r7, #4]
 8017130:	675a      	str	r2, [r3, #116]	; 0x74
 8017132:	e16d      	b.n	8017410 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8017134:	2300      	movs	r3, #0
 8017136:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8017138:	687b      	ldr	r3, [r7, #4]
 801713a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801713c:	63bb      	str	r3, [r7, #56]	; 0x38
 801713e:	e157      	b.n	80173f0 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 8017140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017142:	68db      	ldr	r3, [r3, #12]
 8017144:	685a      	ldr	r2, [r3, #4]
 8017146:	4b41      	ldr	r3, [pc, #260]	; (801724c <tcp_receive+0xd00>)
 8017148:	681b      	ldr	r3, [r3, #0]
 801714a:	429a      	cmp	r2, r3
 801714c:	d11d      	bne.n	801718a <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 801714e:	4b3e      	ldr	r3, [pc, #248]	; (8017248 <tcp_receive+0xcfc>)
 8017150:	891a      	ldrh	r2, [r3, #8]
 8017152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017154:	891b      	ldrh	r3, [r3, #8]
 8017156:	429a      	cmp	r2, r3
 8017158:	f240 814f 	bls.w	80173fa <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801715c:	483a      	ldr	r0, [pc, #232]	; (8017248 <tcp_receive+0xcfc>)
 801715e:	f7fd fad5 	bl	801470c <tcp_seg_copy>
 8017162:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8017164:	697b      	ldr	r3, [r7, #20]
 8017166:	2b00      	cmp	r3, #0
 8017168:	f000 8149 	beq.w	80173fe <tcp_receive+0xeb2>
                  if (prev != NULL) {
 801716c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801716e:	2b00      	cmp	r3, #0
 8017170:	d003      	beq.n	801717a <tcp_receive+0xc2e>
                    prev->next = cseg;
 8017172:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017174:	697a      	ldr	r2, [r7, #20]
 8017176:	601a      	str	r2, [r3, #0]
 8017178:	e002      	b.n	8017180 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 801717a:	687b      	ldr	r3, [r7, #4]
 801717c:	697a      	ldr	r2, [r7, #20]
 801717e:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8017180:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8017182:	6978      	ldr	r0, [r7, #20]
 8017184:	f7ff f8de 	bl	8016344 <tcp_oos_insert_segment>
                }
                break;
 8017188:	e139      	b.n	80173fe <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 801718a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801718c:	2b00      	cmp	r3, #0
 801718e:	d117      	bne.n	80171c0 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8017190:	4b2e      	ldr	r3, [pc, #184]	; (801724c <tcp_receive+0xd00>)
 8017192:	681a      	ldr	r2, [r3, #0]
 8017194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017196:	68db      	ldr	r3, [r3, #12]
 8017198:	685b      	ldr	r3, [r3, #4]
 801719a:	1ad3      	subs	r3, r2, r3
 801719c:	2b00      	cmp	r3, #0
 801719e:	da57      	bge.n	8017250 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80171a0:	4829      	ldr	r0, [pc, #164]	; (8017248 <tcp_receive+0xcfc>)
 80171a2:	f7fd fab3 	bl	801470c <tcp_seg_copy>
 80171a6:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 80171a8:	69bb      	ldr	r3, [r7, #24]
 80171aa:	2b00      	cmp	r3, #0
 80171ac:	f000 8129 	beq.w	8017402 <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 80171b0:	687b      	ldr	r3, [r7, #4]
 80171b2:	69ba      	ldr	r2, [r7, #24]
 80171b4:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 80171b6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80171b8:	69b8      	ldr	r0, [r7, #24]
 80171ba:	f7ff f8c3 	bl	8016344 <tcp_oos_insert_segment>
                  }
                  break;
 80171be:	e120      	b.n	8017402 <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 80171c0:	4b22      	ldr	r3, [pc, #136]	; (801724c <tcp_receive+0xd00>)
 80171c2:	681a      	ldr	r2, [r3, #0]
 80171c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80171c6:	68db      	ldr	r3, [r3, #12]
 80171c8:	685b      	ldr	r3, [r3, #4]
 80171ca:	1ad3      	subs	r3, r2, r3
 80171cc:	3b01      	subs	r3, #1
 80171ce:	2b00      	cmp	r3, #0
 80171d0:	db3e      	blt.n	8017250 <tcp_receive+0xd04>
 80171d2:	4b1e      	ldr	r3, [pc, #120]	; (801724c <tcp_receive+0xd00>)
 80171d4:	681a      	ldr	r2, [r3, #0]
 80171d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80171d8:	68db      	ldr	r3, [r3, #12]
 80171da:	685b      	ldr	r3, [r3, #4]
 80171dc:	1ad3      	subs	r3, r2, r3
 80171de:	3301      	adds	r3, #1
 80171e0:	2b00      	cmp	r3, #0
 80171e2:	dc35      	bgt.n	8017250 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80171e4:	4818      	ldr	r0, [pc, #96]	; (8017248 <tcp_receive+0xcfc>)
 80171e6:	f7fd fa91 	bl	801470c <tcp_seg_copy>
 80171ea:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 80171ec:	69fb      	ldr	r3, [r7, #28]
 80171ee:	2b00      	cmp	r3, #0
 80171f0:	f000 8109 	beq.w	8017406 <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 80171f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80171f6:	68db      	ldr	r3, [r3, #12]
 80171f8:	685b      	ldr	r3, [r3, #4]
 80171fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80171fc:	8912      	ldrh	r2, [r2, #8]
 80171fe:	441a      	add	r2, r3
 8017200:	4b12      	ldr	r3, [pc, #72]	; (801724c <tcp_receive+0xd00>)
 8017202:	681b      	ldr	r3, [r3, #0]
 8017204:	1ad3      	subs	r3, r2, r3
 8017206:	2b00      	cmp	r3, #0
 8017208:	dd12      	ble.n	8017230 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801720a:	4b10      	ldr	r3, [pc, #64]	; (801724c <tcp_receive+0xd00>)
 801720c:	681b      	ldr	r3, [r3, #0]
 801720e:	b29a      	uxth	r2, r3
 8017210:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017212:	68db      	ldr	r3, [r3, #12]
 8017214:	685b      	ldr	r3, [r3, #4]
 8017216:	b29b      	uxth	r3, r3
 8017218:	1ad3      	subs	r3, r2, r3
 801721a:	b29a      	uxth	r2, r3
 801721c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801721e:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8017220:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017222:	685a      	ldr	r2, [r3, #4]
 8017224:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017226:	891b      	ldrh	r3, [r3, #8]
 8017228:	4619      	mov	r1, r3
 801722a:	4610      	mov	r0, r2
 801722c:	f7fb fc0a 	bl	8012a44 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8017230:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017232:	69fa      	ldr	r2, [r7, #28]
 8017234:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8017236:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8017238:	69f8      	ldr	r0, [r7, #28]
 801723a:	f7ff f883 	bl	8016344 <tcp_oos_insert_segment>
                  }
                  break;
 801723e:	e0e2      	b.n	8017406 <tcp_receive+0xeba>
 8017240:	24004570 	.word	0x24004570
 8017244:	2400456d 	.word	0x2400456d
 8017248:	24004540 	.word	0x24004540
 801724c:	24004560 	.word	0x24004560
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8017250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017252:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8017254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017256:	681b      	ldr	r3, [r3, #0]
 8017258:	2b00      	cmp	r3, #0
 801725a:	f040 80c6 	bne.w	80173ea <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801725e:	4b80      	ldr	r3, [pc, #512]	; (8017460 <tcp_receive+0xf14>)
 8017260:	681a      	ldr	r2, [r3, #0]
 8017262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017264:	68db      	ldr	r3, [r3, #12]
 8017266:	685b      	ldr	r3, [r3, #4]
 8017268:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 801726a:	2b00      	cmp	r3, #0
 801726c:	f340 80bd 	ble.w	80173ea <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8017270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017272:	68db      	ldr	r3, [r3, #12]
 8017274:	899b      	ldrh	r3, [r3, #12]
 8017276:	b29b      	uxth	r3, r3
 8017278:	4618      	mov	r0, r3
 801727a:	f7fa f8b3 	bl	80113e4 <lwip_htons>
 801727e:	4603      	mov	r3, r0
 8017280:	b2db      	uxtb	r3, r3
 8017282:	f003 0301 	and.w	r3, r3, #1
 8017286:	2b00      	cmp	r3, #0
 8017288:	f040 80bf 	bne.w	801740a <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 801728c:	4875      	ldr	r0, [pc, #468]	; (8017464 <tcp_receive+0xf18>)
 801728e:	f7fd fa3d 	bl	801470c <tcp_seg_copy>
 8017292:	4602      	mov	r2, r0
 8017294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017296:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8017298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801729a:	681b      	ldr	r3, [r3, #0]
 801729c:	2b00      	cmp	r3, #0
 801729e:	f000 80b6 	beq.w	801740e <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 80172a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80172a4:	68db      	ldr	r3, [r3, #12]
 80172a6:	685b      	ldr	r3, [r3, #4]
 80172a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80172aa:	8912      	ldrh	r2, [r2, #8]
 80172ac:	441a      	add	r2, r3
 80172ae:	4b6c      	ldr	r3, [pc, #432]	; (8017460 <tcp_receive+0xf14>)
 80172b0:	681b      	ldr	r3, [r3, #0]
 80172b2:	1ad3      	subs	r3, r2, r3
 80172b4:	2b00      	cmp	r3, #0
 80172b6:	dd12      	ble.n	80172de <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 80172b8:	4b69      	ldr	r3, [pc, #420]	; (8017460 <tcp_receive+0xf14>)
 80172ba:	681b      	ldr	r3, [r3, #0]
 80172bc:	b29a      	uxth	r2, r3
 80172be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80172c0:	68db      	ldr	r3, [r3, #12]
 80172c2:	685b      	ldr	r3, [r3, #4]
 80172c4:	b29b      	uxth	r3, r3
 80172c6:	1ad3      	subs	r3, r2, r3
 80172c8:	b29a      	uxth	r2, r3
 80172ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80172cc:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 80172ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80172d0:	685a      	ldr	r2, [r3, #4]
 80172d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80172d4:	891b      	ldrh	r3, [r3, #8]
 80172d6:	4619      	mov	r1, r3
 80172d8:	4610      	mov	r0, r2
 80172da:	f7fb fbb3 	bl	8012a44 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 80172de:	4b62      	ldr	r3, [pc, #392]	; (8017468 <tcp_receive+0xf1c>)
 80172e0:	881b      	ldrh	r3, [r3, #0]
 80172e2:	461a      	mov	r2, r3
 80172e4:	4b5e      	ldr	r3, [pc, #376]	; (8017460 <tcp_receive+0xf14>)
 80172e6:	681b      	ldr	r3, [r3, #0]
 80172e8:	441a      	add	r2, r3
 80172ea:	687b      	ldr	r3, [r7, #4]
 80172ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80172ee:	6879      	ldr	r1, [r7, #4]
 80172f0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80172f2:	440b      	add	r3, r1
 80172f4:	1ad3      	subs	r3, r2, r3
 80172f6:	2b00      	cmp	r3, #0
 80172f8:	f340 8089 	ble.w	801740e <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 80172fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80172fe:	681b      	ldr	r3, [r3, #0]
 8017300:	68db      	ldr	r3, [r3, #12]
 8017302:	899b      	ldrh	r3, [r3, #12]
 8017304:	b29b      	uxth	r3, r3
 8017306:	4618      	mov	r0, r3
 8017308:	f7fa f86c 	bl	80113e4 <lwip_htons>
 801730c:	4603      	mov	r3, r0
 801730e:	b2db      	uxtb	r3, r3
 8017310:	f003 0301 	and.w	r3, r3, #1
 8017314:	2b00      	cmp	r3, #0
 8017316:	d022      	beq.n	801735e <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8017318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801731a:	681b      	ldr	r3, [r3, #0]
 801731c:	68db      	ldr	r3, [r3, #12]
 801731e:	899b      	ldrh	r3, [r3, #12]
 8017320:	b29b      	uxth	r3, r3
 8017322:	b21b      	sxth	r3, r3
 8017324:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8017328:	b21c      	sxth	r4, r3
 801732a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801732c:	681b      	ldr	r3, [r3, #0]
 801732e:	68db      	ldr	r3, [r3, #12]
 8017330:	899b      	ldrh	r3, [r3, #12]
 8017332:	b29b      	uxth	r3, r3
 8017334:	4618      	mov	r0, r3
 8017336:	f7fa f855 	bl	80113e4 <lwip_htons>
 801733a:	4603      	mov	r3, r0
 801733c:	b2db      	uxtb	r3, r3
 801733e:	b29b      	uxth	r3, r3
 8017340:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8017344:	b29b      	uxth	r3, r3
 8017346:	4618      	mov	r0, r3
 8017348:	f7fa f84c 	bl	80113e4 <lwip_htons>
 801734c:	4603      	mov	r3, r0
 801734e:	b21b      	sxth	r3, r3
 8017350:	4323      	orrs	r3, r4
 8017352:	b21a      	sxth	r2, r3
 8017354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017356:	681b      	ldr	r3, [r3, #0]
 8017358:	68db      	ldr	r3, [r3, #12]
 801735a:	b292      	uxth	r2, r2
 801735c:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 801735e:	687b      	ldr	r3, [r7, #4]
 8017360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017362:	b29a      	uxth	r2, r3
 8017364:	687b      	ldr	r3, [r7, #4]
 8017366:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017368:	4413      	add	r3, r2
 801736a:	b299      	uxth	r1, r3
 801736c:	4b3c      	ldr	r3, [pc, #240]	; (8017460 <tcp_receive+0xf14>)
 801736e:	681b      	ldr	r3, [r3, #0]
 8017370:	b29a      	uxth	r2, r3
 8017372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017374:	681b      	ldr	r3, [r3, #0]
 8017376:	1a8a      	subs	r2, r1, r2
 8017378:	b292      	uxth	r2, r2
 801737a:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 801737c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801737e:	681b      	ldr	r3, [r3, #0]
 8017380:	685a      	ldr	r2, [r3, #4]
 8017382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017384:	681b      	ldr	r3, [r3, #0]
 8017386:	891b      	ldrh	r3, [r3, #8]
 8017388:	4619      	mov	r1, r3
 801738a:	4610      	mov	r0, r2
 801738c:	f7fb fb5a 	bl	8012a44 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8017390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017392:	681b      	ldr	r3, [r3, #0]
 8017394:	891c      	ldrh	r4, [r3, #8]
 8017396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017398:	681b      	ldr	r3, [r3, #0]
 801739a:	68db      	ldr	r3, [r3, #12]
 801739c:	899b      	ldrh	r3, [r3, #12]
 801739e:	b29b      	uxth	r3, r3
 80173a0:	4618      	mov	r0, r3
 80173a2:	f7fa f81f 	bl	80113e4 <lwip_htons>
 80173a6:	4603      	mov	r3, r0
 80173a8:	b2db      	uxtb	r3, r3
 80173aa:	f003 0303 	and.w	r3, r3, #3
 80173ae:	2b00      	cmp	r3, #0
 80173b0:	d001      	beq.n	80173b6 <tcp_receive+0xe6a>
 80173b2:	2301      	movs	r3, #1
 80173b4:	e000      	b.n	80173b8 <tcp_receive+0xe6c>
 80173b6:	2300      	movs	r3, #0
 80173b8:	4423      	add	r3, r4
 80173ba:	b29a      	uxth	r2, r3
 80173bc:	4b2a      	ldr	r3, [pc, #168]	; (8017468 <tcp_receive+0xf1c>)
 80173be:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80173c0:	4b29      	ldr	r3, [pc, #164]	; (8017468 <tcp_receive+0xf1c>)
 80173c2:	881b      	ldrh	r3, [r3, #0]
 80173c4:	461a      	mov	r2, r3
 80173c6:	4b26      	ldr	r3, [pc, #152]	; (8017460 <tcp_receive+0xf14>)
 80173c8:	681b      	ldr	r3, [r3, #0]
 80173ca:	441a      	add	r2, r3
 80173cc:	687b      	ldr	r3, [r7, #4]
 80173ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80173d0:	6879      	ldr	r1, [r7, #4]
 80173d2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80173d4:	440b      	add	r3, r1
 80173d6:	429a      	cmp	r2, r3
 80173d8:	d019      	beq.n	801740e <tcp_receive+0xec2>
 80173da:	4b24      	ldr	r3, [pc, #144]	; (801746c <tcp_receive+0xf20>)
 80173dc:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 80173e0:	4923      	ldr	r1, [pc, #140]	; (8017470 <tcp_receive+0xf24>)
 80173e2:	4824      	ldr	r0, [pc, #144]	; (8017474 <tcp_receive+0xf28>)
 80173e4:	f008 f90e 	bl	801f604 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 80173e8:	e011      	b.n	801740e <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80173ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80173ec:	681b      	ldr	r3, [r3, #0]
 80173ee:	63bb      	str	r3, [r7, #56]	; 0x38
 80173f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80173f2:	2b00      	cmp	r3, #0
 80173f4:	f47f aea4 	bne.w	8017140 <tcp_receive+0xbf4>
 80173f8:	e00a      	b.n	8017410 <tcp_receive+0xec4>
                break;
 80173fa:	bf00      	nop
 80173fc:	e008      	b.n	8017410 <tcp_receive+0xec4>
                break;
 80173fe:	bf00      	nop
 8017400:	e006      	b.n	8017410 <tcp_receive+0xec4>
                  break;
 8017402:	bf00      	nop
 8017404:	e004      	b.n	8017410 <tcp_receive+0xec4>
                  break;
 8017406:	bf00      	nop
 8017408:	e002      	b.n	8017410 <tcp_receive+0xec4>
                  break;
 801740a:	bf00      	nop
 801740c:	e000      	b.n	8017410 <tcp_receive+0xec4>
                break;
 801740e:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8017410:	6878      	ldr	r0, [r7, #4]
 8017412:	f001 fe8b 	bl	801912c <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8017416:	e003      	b.n	8017420 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8017418:	6878      	ldr	r0, [r7, #4]
 801741a:	f001 fe87 	bl	801912c <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801741e:	e01a      	b.n	8017456 <tcp_receive+0xf0a>
 8017420:	e019      	b.n	8017456 <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8017422:	4b0f      	ldr	r3, [pc, #60]	; (8017460 <tcp_receive+0xf14>)
 8017424:	681a      	ldr	r2, [r3, #0]
 8017426:	687b      	ldr	r3, [r7, #4]
 8017428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801742a:	1ad3      	subs	r3, r2, r3
 801742c:	2b00      	cmp	r3, #0
 801742e:	db0a      	blt.n	8017446 <tcp_receive+0xefa>
 8017430:	4b0b      	ldr	r3, [pc, #44]	; (8017460 <tcp_receive+0xf14>)
 8017432:	681a      	ldr	r2, [r3, #0]
 8017434:	687b      	ldr	r3, [r7, #4]
 8017436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017438:	6879      	ldr	r1, [r7, #4]
 801743a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801743c:	440b      	add	r3, r1
 801743e:	1ad3      	subs	r3, r2, r3
 8017440:	3301      	adds	r3, #1
 8017442:	2b00      	cmp	r3, #0
 8017444:	dd07      	ble.n	8017456 <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 8017446:	687b      	ldr	r3, [r7, #4]
 8017448:	8b5b      	ldrh	r3, [r3, #26]
 801744a:	f043 0302 	orr.w	r3, r3, #2
 801744e:	b29a      	uxth	r2, r3
 8017450:	687b      	ldr	r3, [r7, #4]
 8017452:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8017454:	e7ff      	b.n	8017456 <tcp_receive+0xf0a>
 8017456:	bf00      	nop
 8017458:	3750      	adds	r7, #80	; 0x50
 801745a:	46bd      	mov	sp, r7
 801745c:	bdb0      	pop	{r4, r5, r7, pc}
 801745e:	bf00      	nop
 8017460:	24004560 	.word	0x24004560
 8017464:	24004540 	.word	0x24004540
 8017468:	2400456a 	.word	0x2400456a
 801746c:	08025494 	.word	0x08025494
 8017470:	0802583c 	.word	0x0802583c
 8017474:	080254e0 	.word	0x080254e0

08017478 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8017478:	b480      	push	{r7}
 801747a:	b083      	sub	sp, #12
 801747c:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 801747e:	4b15      	ldr	r3, [pc, #84]	; (80174d4 <tcp_get_next_optbyte+0x5c>)
 8017480:	881b      	ldrh	r3, [r3, #0]
 8017482:	1c5a      	adds	r2, r3, #1
 8017484:	b291      	uxth	r1, r2
 8017486:	4a13      	ldr	r2, [pc, #76]	; (80174d4 <tcp_get_next_optbyte+0x5c>)
 8017488:	8011      	strh	r1, [r2, #0]
 801748a:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801748c:	4b12      	ldr	r3, [pc, #72]	; (80174d8 <tcp_get_next_optbyte+0x60>)
 801748e:	681b      	ldr	r3, [r3, #0]
 8017490:	2b00      	cmp	r3, #0
 8017492:	d004      	beq.n	801749e <tcp_get_next_optbyte+0x26>
 8017494:	4b11      	ldr	r3, [pc, #68]	; (80174dc <tcp_get_next_optbyte+0x64>)
 8017496:	881b      	ldrh	r3, [r3, #0]
 8017498:	88fa      	ldrh	r2, [r7, #6]
 801749a:	429a      	cmp	r2, r3
 801749c:	d208      	bcs.n	80174b0 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801749e:	4b10      	ldr	r3, [pc, #64]	; (80174e0 <tcp_get_next_optbyte+0x68>)
 80174a0:	681b      	ldr	r3, [r3, #0]
 80174a2:	3314      	adds	r3, #20
 80174a4:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 80174a6:	88fb      	ldrh	r3, [r7, #6]
 80174a8:	683a      	ldr	r2, [r7, #0]
 80174aa:	4413      	add	r3, r2
 80174ac:	781b      	ldrb	r3, [r3, #0]
 80174ae:	e00b      	b.n	80174c8 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 80174b0:	88fb      	ldrh	r3, [r7, #6]
 80174b2:	b2da      	uxtb	r2, r3
 80174b4:	4b09      	ldr	r3, [pc, #36]	; (80174dc <tcp_get_next_optbyte+0x64>)
 80174b6:	881b      	ldrh	r3, [r3, #0]
 80174b8:	b2db      	uxtb	r3, r3
 80174ba:	1ad3      	subs	r3, r2, r3
 80174bc:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 80174be:	4b06      	ldr	r3, [pc, #24]	; (80174d8 <tcp_get_next_optbyte+0x60>)
 80174c0:	681a      	ldr	r2, [r3, #0]
 80174c2:	797b      	ldrb	r3, [r7, #5]
 80174c4:	4413      	add	r3, r2
 80174c6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80174c8:	4618      	mov	r0, r3
 80174ca:	370c      	adds	r7, #12
 80174cc:	46bd      	mov	sp, r7
 80174ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174d2:	4770      	bx	lr
 80174d4:	2400455c 	.word	0x2400455c
 80174d8:	24004558 	.word	0x24004558
 80174dc:	24004556 	.word	0x24004556
 80174e0:	24004550 	.word	0x24004550

080174e4 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 80174e4:	b580      	push	{r7, lr}
 80174e6:	b084      	sub	sp, #16
 80174e8:	af00      	add	r7, sp, #0
 80174ea:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 80174ec:	687b      	ldr	r3, [r7, #4]
 80174ee:	2b00      	cmp	r3, #0
 80174f0:	d106      	bne.n	8017500 <tcp_parseopt+0x1c>
 80174f2:	4b32      	ldr	r3, [pc, #200]	; (80175bc <tcp_parseopt+0xd8>)
 80174f4:	f240 727d 	movw	r2, #1917	; 0x77d
 80174f8:	4931      	ldr	r1, [pc, #196]	; (80175c0 <tcp_parseopt+0xdc>)
 80174fa:	4832      	ldr	r0, [pc, #200]	; (80175c4 <tcp_parseopt+0xe0>)
 80174fc:	f008 f882 	bl	801f604 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8017500:	4b31      	ldr	r3, [pc, #196]	; (80175c8 <tcp_parseopt+0xe4>)
 8017502:	881b      	ldrh	r3, [r3, #0]
 8017504:	2b00      	cmp	r3, #0
 8017506:	d055      	beq.n	80175b4 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8017508:	4b30      	ldr	r3, [pc, #192]	; (80175cc <tcp_parseopt+0xe8>)
 801750a:	2200      	movs	r2, #0
 801750c:	801a      	strh	r2, [r3, #0]
 801750e:	e045      	b.n	801759c <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8017510:	f7ff ffb2 	bl	8017478 <tcp_get_next_optbyte>
 8017514:	4603      	mov	r3, r0
 8017516:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8017518:	7bfb      	ldrb	r3, [r7, #15]
 801751a:	2b02      	cmp	r3, #2
 801751c:	d006      	beq.n	801752c <tcp_parseopt+0x48>
 801751e:	2b02      	cmp	r3, #2
 8017520:	dc2b      	bgt.n	801757a <tcp_parseopt+0x96>
 8017522:	2b00      	cmp	r3, #0
 8017524:	d041      	beq.n	80175aa <tcp_parseopt+0xc6>
 8017526:	2b01      	cmp	r3, #1
 8017528:	d127      	bne.n	801757a <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 801752a:	e037      	b.n	801759c <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 801752c:	f7ff ffa4 	bl	8017478 <tcp_get_next_optbyte>
 8017530:	4603      	mov	r3, r0
 8017532:	2b04      	cmp	r3, #4
 8017534:	d13b      	bne.n	80175ae <tcp_parseopt+0xca>
 8017536:	4b25      	ldr	r3, [pc, #148]	; (80175cc <tcp_parseopt+0xe8>)
 8017538:	881b      	ldrh	r3, [r3, #0]
 801753a:	3301      	adds	r3, #1
 801753c:	4a22      	ldr	r2, [pc, #136]	; (80175c8 <tcp_parseopt+0xe4>)
 801753e:	8812      	ldrh	r2, [r2, #0]
 8017540:	4293      	cmp	r3, r2
 8017542:	da34      	bge.n	80175ae <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8017544:	f7ff ff98 	bl	8017478 <tcp_get_next_optbyte>
 8017548:	4603      	mov	r3, r0
 801754a:	b29b      	uxth	r3, r3
 801754c:	021b      	lsls	r3, r3, #8
 801754e:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8017550:	f7ff ff92 	bl	8017478 <tcp_get_next_optbyte>
 8017554:	4603      	mov	r3, r0
 8017556:	b29a      	uxth	r2, r3
 8017558:	89bb      	ldrh	r3, [r7, #12]
 801755a:	4313      	orrs	r3, r2
 801755c:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801755e:	89bb      	ldrh	r3, [r7, #12]
 8017560:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8017564:	d804      	bhi.n	8017570 <tcp_parseopt+0x8c>
 8017566:	89bb      	ldrh	r3, [r7, #12]
 8017568:	2b00      	cmp	r3, #0
 801756a:	d001      	beq.n	8017570 <tcp_parseopt+0x8c>
 801756c:	89ba      	ldrh	r2, [r7, #12]
 801756e:	e001      	b.n	8017574 <tcp_parseopt+0x90>
 8017570:	f44f 7206 	mov.w	r2, #536	; 0x218
 8017574:	687b      	ldr	r3, [r7, #4]
 8017576:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8017578:	e010      	b.n	801759c <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 801757a:	f7ff ff7d 	bl	8017478 <tcp_get_next_optbyte>
 801757e:	4603      	mov	r3, r0
 8017580:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8017582:	7afb      	ldrb	r3, [r7, #11]
 8017584:	2b01      	cmp	r3, #1
 8017586:	d914      	bls.n	80175b2 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8017588:	7afb      	ldrb	r3, [r7, #11]
 801758a:	b29a      	uxth	r2, r3
 801758c:	4b0f      	ldr	r3, [pc, #60]	; (80175cc <tcp_parseopt+0xe8>)
 801758e:	881b      	ldrh	r3, [r3, #0]
 8017590:	4413      	add	r3, r2
 8017592:	b29b      	uxth	r3, r3
 8017594:	3b02      	subs	r3, #2
 8017596:	b29a      	uxth	r2, r3
 8017598:	4b0c      	ldr	r3, [pc, #48]	; (80175cc <tcp_parseopt+0xe8>)
 801759a:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801759c:	4b0b      	ldr	r3, [pc, #44]	; (80175cc <tcp_parseopt+0xe8>)
 801759e:	881a      	ldrh	r2, [r3, #0]
 80175a0:	4b09      	ldr	r3, [pc, #36]	; (80175c8 <tcp_parseopt+0xe4>)
 80175a2:	881b      	ldrh	r3, [r3, #0]
 80175a4:	429a      	cmp	r2, r3
 80175a6:	d3b3      	bcc.n	8017510 <tcp_parseopt+0x2c>
 80175a8:	e004      	b.n	80175b4 <tcp_parseopt+0xd0>
          return;
 80175aa:	bf00      	nop
 80175ac:	e002      	b.n	80175b4 <tcp_parseopt+0xd0>
            return;
 80175ae:	bf00      	nop
 80175b0:	e000      	b.n	80175b4 <tcp_parseopt+0xd0>
            return;
 80175b2:	bf00      	nop
      }
    }
  }
}
 80175b4:	3710      	adds	r7, #16
 80175b6:	46bd      	mov	sp, r7
 80175b8:	bd80      	pop	{r7, pc}
 80175ba:	bf00      	nop
 80175bc:	08025494 	.word	0x08025494
 80175c0:	080258f8 	.word	0x080258f8
 80175c4:	080254e0 	.word	0x080254e0
 80175c8:	24004554 	.word	0x24004554
 80175cc:	2400455c 	.word	0x2400455c

080175d0 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 80175d0:	b480      	push	{r7}
 80175d2:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 80175d4:	4b05      	ldr	r3, [pc, #20]	; (80175ec <tcp_trigger_input_pcb_close+0x1c>)
 80175d6:	781b      	ldrb	r3, [r3, #0]
 80175d8:	f043 0310 	orr.w	r3, r3, #16
 80175dc:	b2da      	uxtb	r2, r3
 80175de:	4b03      	ldr	r3, [pc, #12]	; (80175ec <tcp_trigger_input_pcb_close+0x1c>)
 80175e0:	701a      	strb	r2, [r3, #0]
}
 80175e2:	bf00      	nop
 80175e4:	46bd      	mov	sp, r7
 80175e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175ea:	4770      	bx	lr
 80175ec:	2400456d 	.word	0x2400456d

080175f0 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 80175f0:	b580      	push	{r7, lr}
 80175f2:	b084      	sub	sp, #16
 80175f4:	af00      	add	r7, sp, #0
 80175f6:	60f8      	str	r0, [r7, #12]
 80175f8:	60b9      	str	r1, [r7, #8]
 80175fa:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 80175fc:	68fb      	ldr	r3, [r7, #12]
 80175fe:	2b00      	cmp	r3, #0
 8017600:	d00a      	beq.n	8017618 <tcp_route+0x28>
 8017602:	68fb      	ldr	r3, [r7, #12]
 8017604:	7a1b      	ldrb	r3, [r3, #8]
 8017606:	2b00      	cmp	r3, #0
 8017608:	d006      	beq.n	8017618 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 801760a:	68fb      	ldr	r3, [r7, #12]
 801760c:	7a1b      	ldrb	r3, [r3, #8]
 801760e:	4618      	mov	r0, r3
 8017610:	f7fb f810 	bl	8012634 <netif_get_by_index>
 8017614:	4603      	mov	r3, r0
 8017616:	e003      	b.n	8017620 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8017618:	6878      	ldr	r0, [r7, #4]
 801761a:	f005 fd61 	bl	801d0e0 <ip4_route>
 801761e:	4603      	mov	r3, r0
  }
}
 8017620:	4618      	mov	r0, r3
 8017622:	3710      	adds	r7, #16
 8017624:	46bd      	mov	sp, r7
 8017626:	bd80      	pop	{r7, pc}

08017628 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8017628:	b590      	push	{r4, r7, lr}
 801762a:	b087      	sub	sp, #28
 801762c:	af00      	add	r7, sp, #0
 801762e:	60f8      	str	r0, [r7, #12]
 8017630:	60b9      	str	r1, [r7, #8]
 8017632:	603b      	str	r3, [r7, #0]
 8017634:	4613      	mov	r3, r2
 8017636:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8017638:	68fb      	ldr	r3, [r7, #12]
 801763a:	2b00      	cmp	r3, #0
 801763c:	d105      	bne.n	801764a <tcp_create_segment+0x22>
 801763e:	4b44      	ldr	r3, [pc, #272]	; (8017750 <tcp_create_segment+0x128>)
 8017640:	22a3      	movs	r2, #163	; 0xa3
 8017642:	4944      	ldr	r1, [pc, #272]	; (8017754 <tcp_create_segment+0x12c>)
 8017644:	4844      	ldr	r0, [pc, #272]	; (8017758 <tcp_create_segment+0x130>)
 8017646:	f007 ffdd 	bl	801f604 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801764a:	68bb      	ldr	r3, [r7, #8]
 801764c:	2b00      	cmp	r3, #0
 801764e:	d105      	bne.n	801765c <tcp_create_segment+0x34>
 8017650:	4b3f      	ldr	r3, [pc, #252]	; (8017750 <tcp_create_segment+0x128>)
 8017652:	22a4      	movs	r2, #164	; 0xa4
 8017654:	4941      	ldr	r1, [pc, #260]	; (801775c <tcp_create_segment+0x134>)
 8017656:	4840      	ldr	r0, [pc, #256]	; (8017758 <tcp_create_segment+0x130>)
 8017658:	f007 ffd4 	bl	801f604 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801765c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8017660:	009b      	lsls	r3, r3, #2
 8017662:	b2db      	uxtb	r3, r3
 8017664:	f003 0304 	and.w	r3, r3, #4
 8017668:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801766a:	2003      	movs	r0, #3
 801766c:	f7fa fc4a 	bl	8011f04 <memp_malloc>
 8017670:	6138      	str	r0, [r7, #16]
 8017672:	693b      	ldr	r3, [r7, #16]
 8017674:	2b00      	cmp	r3, #0
 8017676:	d104      	bne.n	8017682 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8017678:	68b8      	ldr	r0, [r7, #8]
 801767a:	f7fb fb9b 	bl	8012db4 <pbuf_free>
    return NULL;
 801767e:	2300      	movs	r3, #0
 8017680:	e061      	b.n	8017746 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8017682:	693b      	ldr	r3, [r7, #16]
 8017684:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8017688:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 801768a:	693b      	ldr	r3, [r7, #16]
 801768c:	2200      	movs	r2, #0
 801768e:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8017690:	693b      	ldr	r3, [r7, #16]
 8017692:	68ba      	ldr	r2, [r7, #8]
 8017694:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8017696:	68bb      	ldr	r3, [r7, #8]
 8017698:	891a      	ldrh	r2, [r3, #8]
 801769a:	7dfb      	ldrb	r3, [r7, #23]
 801769c:	b29b      	uxth	r3, r3
 801769e:	429a      	cmp	r2, r3
 80176a0:	d205      	bcs.n	80176ae <tcp_create_segment+0x86>
 80176a2:	4b2b      	ldr	r3, [pc, #172]	; (8017750 <tcp_create_segment+0x128>)
 80176a4:	22b0      	movs	r2, #176	; 0xb0
 80176a6:	492e      	ldr	r1, [pc, #184]	; (8017760 <tcp_create_segment+0x138>)
 80176a8:	482b      	ldr	r0, [pc, #172]	; (8017758 <tcp_create_segment+0x130>)
 80176aa:	f007 ffab 	bl	801f604 <iprintf>
  seg->len = p->tot_len - optlen;
 80176ae:	68bb      	ldr	r3, [r7, #8]
 80176b0:	891a      	ldrh	r2, [r3, #8]
 80176b2:	7dfb      	ldrb	r3, [r7, #23]
 80176b4:	b29b      	uxth	r3, r3
 80176b6:	1ad3      	subs	r3, r2, r3
 80176b8:	b29a      	uxth	r2, r3
 80176ba:	693b      	ldr	r3, [r7, #16]
 80176bc:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 80176be:	2114      	movs	r1, #20
 80176c0:	68b8      	ldr	r0, [r7, #8]
 80176c2:	f7fb faaf 	bl	8012c24 <pbuf_add_header>
 80176c6:	4603      	mov	r3, r0
 80176c8:	2b00      	cmp	r3, #0
 80176ca:	d004      	beq.n	80176d6 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 80176cc:	6938      	ldr	r0, [r7, #16]
 80176ce:	f7fd f804 	bl	80146da <tcp_seg_free>
    return NULL;
 80176d2:	2300      	movs	r3, #0
 80176d4:	e037      	b.n	8017746 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 80176d6:	693b      	ldr	r3, [r7, #16]
 80176d8:	685b      	ldr	r3, [r3, #4]
 80176da:	685a      	ldr	r2, [r3, #4]
 80176dc:	693b      	ldr	r3, [r7, #16]
 80176de:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 80176e0:	68fb      	ldr	r3, [r7, #12]
 80176e2:	8ada      	ldrh	r2, [r3, #22]
 80176e4:	693b      	ldr	r3, [r7, #16]
 80176e6:	68dc      	ldr	r4, [r3, #12]
 80176e8:	4610      	mov	r0, r2
 80176ea:	f7f9 fe7b 	bl	80113e4 <lwip_htons>
 80176ee:	4603      	mov	r3, r0
 80176f0:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 80176f2:	68fb      	ldr	r3, [r7, #12]
 80176f4:	8b1a      	ldrh	r2, [r3, #24]
 80176f6:	693b      	ldr	r3, [r7, #16]
 80176f8:	68dc      	ldr	r4, [r3, #12]
 80176fa:	4610      	mov	r0, r2
 80176fc:	f7f9 fe72 	bl	80113e4 <lwip_htons>
 8017700:	4603      	mov	r3, r0
 8017702:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8017704:	693b      	ldr	r3, [r7, #16]
 8017706:	68dc      	ldr	r4, [r3, #12]
 8017708:	6838      	ldr	r0, [r7, #0]
 801770a:	f7f9 fe80 	bl	801140e <lwip_htonl>
 801770e:	4603      	mov	r3, r0
 8017710:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8017712:	7dfb      	ldrb	r3, [r7, #23]
 8017714:	089b      	lsrs	r3, r3, #2
 8017716:	b2db      	uxtb	r3, r3
 8017718:	b29b      	uxth	r3, r3
 801771a:	3305      	adds	r3, #5
 801771c:	b29b      	uxth	r3, r3
 801771e:	031b      	lsls	r3, r3, #12
 8017720:	b29a      	uxth	r2, r3
 8017722:	79fb      	ldrb	r3, [r7, #7]
 8017724:	b29b      	uxth	r3, r3
 8017726:	4313      	orrs	r3, r2
 8017728:	b29a      	uxth	r2, r3
 801772a:	693b      	ldr	r3, [r7, #16]
 801772c:	68dc      	ldr	r4, [r3, #12]
 801772e:	4610      	mov	r0, r2
 8017730:	f7f9 fe58 	bl	80113e4 <lwip_htons>
 8017734:	4603      	mov	r3, r0
 8017736:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8017738:	693b      	ldr	r3, [r7, #16]
 801773a:	68db      	ldr	r3, [r3, #12]
 801773c:	2200      	movs	r2, #0
 801773e:	749a      	strb	r2, [r3, #18]
 8017740:	2200      	movs	r2, #0
 8017742:	74da      	strb	r2, [r3, #19]
  return seg;
 8017744:	693b      	ldr	r3, [r7, #16]
}
 8017746:	4618      	mov	r0, r3
 8017748:	371c      	adds	r7, #28
 801774a:	46bd      	mov	sp, r7
 801774c:	bd90      	pop	{r4, r7, pc}
 801774e:	bf00      	nop
 8017750:	08025914 	.word	0x08025914
 8017754:	08025948 	.word	0x08025948
 8017758:	08025968 	.word	0x08025968
 801775c:	08025990 	.word	0x08025990
 8017760:	080259b4 	.word	0x080259b4

08017764 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8017764:	b580      	push	{r7, lr}
 8017766:	b086      	sub	sp, #24
 8017768:	af00      	add	r7, sp, #0
 801776a:	607b      	str	r3, [r7, #4]
 801776c:	4603      	mov	r3, r0
 801776e:	73fb      	strb	r3, [r7, #15]
 8017770:	460b      	mov	r3, r1
 8017772:	81bb      	strh	r3, [r7, #12]
 8017774:	4613      	mov	r3, r2
 8017776:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8017778:	89bb      	ldrh	r3, [r7, #12]
 801777a:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 801777c:	687b      	ldr	r3, [r7, #4]
 801777e:	2b00      	cmp	r3, #0
 8017780:	d105      	bne.n	801778e <tcp_pbuf_prealloc+0x2a>
 8017782:	4b30      	ldr	r3, [pc, #192]	; (8017844 <tcp_pbuf_prealloc+0xe0>)
 8017784:	22e8      	movs	r2, #232	; 0xe8
 8017786:	4930      	ldr	r1, [pc, #192]	; (8017848 <tcp_pbuf_prealloc+0xe4>)
 8017788:	4830      	ldr	r0, [pc, #192]	; (801784c <tcp_pbuf_prealloc+0xe8>)
 801778a:	f007 ff3b 	bl	801f604 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 801778e:	6a3b      	ldr	r3, [r7, #32]
 8017790:	2b00      	cmp	r3, #0
 8017792:	d105      	bne.n	80177a0 <tcp_pbuf_prealloc+0x3c>
 8017794:	4b2b      	ldr	r3, [pc, #172]	; (8017844 <tcp_pbuf_prealloc+0xe0>)
 8017796:	22e9      	movs	r2, #233	; 0xe9
 8017798:	492d      	ldr	r1, [pc, #180]	; (8017850 <tcp_pbuf_prealloc+0xec>)
 801779a:	482c      	ldr	r0, [pc, #176]	; (801784c <tcp_pbuf_prealloc+0xe8>)
 801779c:	f007 ff32 	bl	801f604 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 80177a0:	89ba      	ldrh	r2, [r7, #12]
 80177a2:	897b      	ldrh	r3, [r7, #10]
 80177a4:	429a      	cmp	r2, r3
 80177a6:	d221      	bcs.n	80177ec <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 80177a8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80177ac:	f003 0302 	and.w	r3, r3, #2
 80177b0:	2b00      	cmp	r3, #0
 80177b2:	d111      	bne.n	80177d8 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 80177b4:	6a3b      	ldr	r3, [r7, #32]
 80177b6:	8b5b      	ldrh	r3, [r3, #26]
 80177b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 80177bc:	2b00      	cmp	r3, #0
 80177be:	d115      	bne.n	80177ec <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 80177c0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80177c4:	2b00      	cmp	r3, #0
 80177c6:	d007      	beq.n	80177d8 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 80177c8:	6a3b      	ldr	r3, [r7, #32]
 80177ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 80177cc:	2b00      	cmp	r3, #0
 80177ce:	d103      	bne.n	80177d8 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 80177d0:	6a3b      	ldr	r3, [r7, #32]
 80177d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 80177d4:	2b00      	cmp	r3, #0
 80177d6:	d009      	beq.n	80177ec <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 80177d8:	89bb      	ldrh	r3, [r7, #12]
 80177da:	f203 231b 	addw	r3, r3, #539	; 0x21b
 80177de:	f023 0203 	bic.w	r2, r3, #3
 80177e2:	897b      	ldrh	r3, [r7, #10]
 80177e4:	4293      	cmp	r3, r2
 80177e6:	bf28      	it	cs
 80177e8:	4613      	movcs	r3, r2
 80177ea:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 80177ec:	8af9      	ldrh	r1, [r7, #22]
 80177ee:	7bfb      	ldrb	r3, [r7, #15]
 80177f0:	f44f 7220 	mov.w	r2, #640	; 0x280
 80177f4:	4618      	mov	r0, r3
 80177f6:	f7fa ffc7 	bl	8012788 <pbuf_alloc>
 80177fa:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80177fc:	693b      	ldr	r3, [r7, #16]
 80177fe:	2b00      	cmp	r3, #0
 8017800:	d101      	bne.n	8017806 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8017802:	2300      	movs	r3, #0
 8017804:	e019      	b.n	801783a <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8017806:	693b      	ldr	r3, [r7, #16]
 8017808:	681b      	ldr	r3, [r3, #0]
 801780a:	2b00      	cmp	r3, #0
 801780c:	d006      	beq.n	801781c <tcp_pbuf_prealloc+0xb8>
 801780e:	4b0d      	ldr	r3, [pc, #52]	; (8017844 <tcp_pbuf_prealloc+0xe0>)
 8017810:	f240 120b 	movw	r2, #267	; 0x10b
 8017814:	490f      	ldr	r1, [pc, #60]	; (8017854 <tcp_pbuf_prealloc+0xf0>)
 8017816:	480d      	ldr	r0, [pc, #52]	; (801784c <tcp_pbuf_prealloc+0xe8>)
 8017818:	f007 fef4 	bl	801f604 <iprintf>
  *oversize = p->len - length;
 801781c:	693b      	ldr	r3, [r7, #16]
 801781e:	895a      	ldrh	r2, [r3, #10]
 8017820:	89bb      	ldrh	r3, [r7, #12]
 8017822:	1ad3      	subs	r3, r2, r3
 8017824:	b29a      	uxth	r2, r3
 8017826:	687b      	ldr	r3, [r7, #4]
 8017828:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 801782a:	693b      	ldr	r3, [r7, #16]
 801782c:	89ba      	ldrh	r2, [r7, #12]
 801782e:	811a      	strh	r2, [r3, #8]
 8017830:	693b      	ldr	r3, [r7, #16]
 8017832:	891a      	ldrh	r2, [r3, #8]
 8017834:	693b      	ldr	r3, [r7, #16]
 8017836:	815a      	strh	r2, [r3, #10]
  return p;
 8017838:	693b      	ldr	r3, [r7, #16]
}
 801783a:	4618      	mov	r0, r3
 801783c:	3718      	adds	r7, #24
 801783e:	46bd      	mov	sp, r7
 8017840:	bd80      	pop	{r7, pc}
 8017842:	bf00      	nop
 8017844:	08025914 	.word	0x08025914
 8017848:	080259cc 	.word	0x080259cc
 801784c:	08025968 	.word	0x08025968
 8017850:	080259f0 	.word	0x080259f0
 8017854:	08025a10 	.word	0x08025a10

08017858 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8017858:	b580      	push	{r7, lr}
 801785a:	b082      	sub	sp, #8
 801785c:	af00      	add	r7, sp, #0
 801785e:	6078      	str	r0, [r7, #4]
 8017860:	460b      	mov	r3, r1
 8017862:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8017864:	687b      	ldr	r3, [r7, #4]
 8017866:	2b00      	cmp	r3, #0
 8017868:	d106      	bne.n	8017878 <tcp_write_checks+0x20>
 801786a:	4b33      	ldr	r3, [pc, #204]	; (8017938 <tcp_write_checks+0xe0>)
 801786c:	f240 1233 	movw	r2, #307	; 0x133
 8017870:	4932      	ldr	r1, [pc, #200]	; (801793c <tcp_write_checks+0xe4>)
 8017872:	4833      	ldr	r0, [pc, #204]	; (8017940 <tcp_write_checks+0xe8>)
 8017874:	f007 fec6 	bl	801f604 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8017878:	687b      	ldr	r3, [r7, #4]
 801787a:	7d1b      	ldrb	r3, [r3, #20]
 801787c:	2b04      	cmp	r3, #4
 801787e:	d00e      	beq.n	801789e <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8017880:	687b      	ldr	r3, [r7, #4]
 8017882:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8017884:	2b07      	cmp	r3, #7
 8017886:	d00a      	beq.n	801789e <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8017888:	687b      	ldr	r3, [r7, #4]
 801788a:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 801788c:	2b02      	cmp	r3, #2
 801788e:	d006      	beq.n	801789e <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8017890:	687b      	ldr	r3, [r7, #4]
 8017892:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8017894:	2b03      	cmp	r3, #3
 8017896:	d002      	beq.n	801789e <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8017898:	f06f 030a 	mvn.w	r3, #10
 801789c:	e048      	b.n	8017930 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 801789e:	887b      	ldrh	r3, [r7, #2]
 80178a0:	2b00      	cmp	r3, #0
 80178a2:	d101      	bne.n	80178a8 <tcp_write_checks+0x50>
    return ERR_OK;
 80178a4:	2300      	movs	r3, #0
 80178a6:	e043      	b.n	8017930 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 80178a8:	687b      	ldr	r3, [r7, #4]
 80178aa:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80178ae:	887a      	ldrh	r2, [r7, #2]
 80178b0:	429a      	cmp	r2, r3
 80178b2:	d909      	bls.n	80178c8 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80178b4:	687b      	ldr	r3, [r7, #4]
 80178b6:	8b5b      	ldrh	r3, [r3, #26]
 80178b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80178bc:	b29a      	uxth	r2, r3
 80178be:	687b      	ldr	r3, [r7, #4]
 80178c0:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 80178c2:	f04f 33ff 	mov.w	r3, #4294967295
 80178c6:	e033      	b.n	8017930 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 80178c8:	687b      	ldr	r3, [r7, #4]
 80178ca:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80178ce:	2b08      	cmp	r3, #8
 80178d0:	d909      	bls.n	80178e6 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80178d2:	687b      	ldr	r3, [r7, #4]
 80178d4:	8b5b      	ldrh	r3, [r3, #26]
 80178d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80178da:	b29a      	uxth	r2, r3
 80178dc:	687b      	ldr	r3, [r7, #4]
 80178de:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 80178e0:	f04f 33ff 	mov.w	r3, #4294967295
 80178e4:	e024      	b.n	8017930 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 80178e6:	687b      	ldr	r3, [r7, #4]
 80178e8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80178ec:	2b00      	cmp	r3, #0
 80178ee:	d00f      	beq.n	8017910 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 80178f0:	687b      	ldr	r3, [r7, #4]
 80178f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80178f4:	2b00      	cmp	r3, #0
 80178f6:	d11a      	bne.n	801792e <tcp_write_checks+0xd6>
 80178f8:	687b      	ldr	r3, [r7, #4]
 80178fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80178fc:	2b00      	cmp	r3, #0
 80178fe:	d116      	bne.n	801792e <tcp_write_checks+0xd6>
 8017900:	4b0d      	ldr	r3, [pc, #52]	; (8017938 <tcp_write_checks+0xe0>)
 8017902:	f240 1255 	movw	r2, #341	; 0x155
 8017906:	490f      	ldr	r1, [pc, #60]	; (8017944 <tcp_write_checks+0xec>)
 8017908:	480d      	ldr	r0, [pc, #52]	; (8017940 <tcp_write_checks+0xe8>)
 801790a:	f007 fe7b 	bl	801f604 <iprintf>
 801790e:	e00e      	b.n	801792e <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8017910:	687b      	ldr	r3, [r7, #4]
 8017912:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017914:	2b00      	cmp	r3, #0
 8017916:	d103      	bne.n	8017920 <tcp_write_checks+0xc8>
 8017918:	687b      	ldr	r3, [r7, #4]
 801791a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801791c:	2b00      	cmp	r3, #0
 801791e:	d006      	beq.n	801792e <tcp_write_checks+0xd6>
 8017920:	4b05      	ldr	r3, [pc, #20]	; (8017938 <tcp_write_checks+0xe0>)
 8017922:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8017926:	4908      	ldr	r1, [pc, #32]	; (8017948 <tcp_write_checks+0xf0>)
 8017928:	4805      	ldr	r0, [pc, #20]	; (8017940 <tcp_write_checks+0xe8>)
 801792a:	f007 fe6b 	bl	801f604 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 801792e:	2300      	movs	r3, #0
}
 8017930:	4618      	mov	r0, r3
 8017932:	3708      	adds	r7, #8
 8017934:	46bd      	mov	sp, r7
 8017936:	bd80      	pop	{r7, pc}
 8017938:	08025914 	.word	0x08025914
 801793c:	08025a24 	.word	0x08025a24
 8017940:	08025968 	.word	0x08025968
 8017944:	08025a44 	.word	0x08025a44
 8017948:	08025a80 	.word	0x08025a80

0801794c <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 801794c:	b590      	push	{r4, r7, lr}
 801794e:	b09b      	sub	sp, #108	; 0x6c
 8017950:	af04      	add	r7, sp, #16
 8017952:	60f8      	str	r0, [r7, #12]
 8017954:	60b9      	str	r1, [r7, #8]
 8017956:	4611      	mov	r1, r2
 8017958:	461a      	mov	r2, r3
 801795a:	460b      	mov	r3, r1
 801795c:	80fb      	strh	r3, [r7, #6]
 801795e:	4613      	mov	r3, r2
 8017960:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8017962:	2300      	movs	r3, #0
 8017964:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8017966:	2300      	movs	r3, #0
 8017968:	653b      	str	r3, [r7, #80]	; 0x50
 801796a:	2300      	movs	r3, #0
 801796c:	64fb      	str	r3, [r7, #76]	; 0x4c
 801796e:	2300      	movs	r3, #0
 8017970:	64bb      	str	r3, [r7, #72]	; 0x48
 8017972:	2300      	movs	r3, #0
 8017974:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8017976:	2300      	movs	r3, #0
 8017978:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 801797c:	2300      	movs	r3, #0
 801797e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8017982:	2300      	movs	r3, #0
 8017984:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8017986:	2300      	movs	r3, #0
 8017988:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 801798a:	2300      	movs	r3, #0
 801798c:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 801798e:	68fb      	ldr	r3, [r7, #12]
 8017990:	2b00      	cmp	r3, #0
 8017992:	d109      	bne.n	80179a8 <tcp_write+0x5c>
 8017994:	4ba4      	ldr	r3, [pc, #656]	; (8017c28 <tcp_write+0x2dc>)
 8017996:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 801799a:	49a4      	ldr	r1, [pc, #656]	; (8017c2c <tcp_write+0x2e0>)
 801799c:	48a4      	ldr	r0, [pc, #656]	; (8017c30 <tcp_write+0x2e4>)
 801799e:	f007 fe31 	bl	801f604 <iprintf>
 80179a2:	f06f 030f 	mvn.w	r3, #15
 80179a6:	e32a      	b.n	8017ffe <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 80179a8:	68fb      	ldr	r3, [r7, #12]
 80179aa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80179ae:	085b      	lsrs	r3, r3, #1
 80179b0:	b29a      	uxth	r2, r3
 80179b2:	68fb      	ldr	r3, [r7, #12]
 80179b4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80179b6:	4293      	cmp	r3, r2
 80179b8:	bf28      	it	cs
 80179ba:	4613      	movcs	r3, r2
 80179bc:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 80179be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80179c0:	2b00      	cmp	r3, #0
 80179c2:	d102      	bne.n	80179ca <tcp_write+0x7e>
 80179c4:	68fb      	ldr	r3, [r7, #12]
 80179c6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80179c8:	e000      	b.n	80179cc <tcp_write+0x80>
 80179ca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80179cc:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 80179ce:	68bb      	ldr	r3, [r7, #8]
 80179d0:	2b00      	cmp	r3, #0
 80179d2:	d109      	bne.n	80179e8 <tcp_write+0x9c>
 80179d4:	4b94      	ldr	r3, [pc, #592]	; (8017c28 <tcp_write+0x2dc>)
 80179d6:	f240 12ad 	movw	r2, #429	; 0x1ad
 80179da:	4996      	ldr	r1, [pc, #600]	; (8017c34 <tcp_write+0x2e8>)
 80179dc:	4894      	ldr	r0, [pc, #592]	; (8017c30 <tcp_write+0x2e4>)
 80179de:	f007 fe11 	bl	801f604 <iprintf>
 80179e2:	f06f 030f 	mvn.w	r3, #15
 80179e6:	e30a      	b.n	8017ffe <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 80179e8:	88fb      	ldrh	r3, [r7, #6]
 80179ea:	4619      	mov	r1, r3
 80179ec:	68f8      	ldr	r0, [r7, #12]
 80179ee:	f7ff ff33 	bl	8017858 <tcp_write_checks>
 80179f2:	4603      	mov	r3, r0
 80179f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 80179f8:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80179fc:	2b00      	cmp	r3, #0
 80179fe:	d002      	beq.n	8017a06 <tcp_write+0xba>
    return err;
 8017a00:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8017a04:	e2fb      	b.n	8017ffe <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 8017a06:	68fb      	ldr	r3, [r7, #12]
 8017a08:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8017a0c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8017a10:	2300      	movs	r3, #0
 8017a12:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8017a16:	68fb      	ldr	r3, [r7, #12]
 8017a18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017a1a:	2b00      	cmp	r3, #0
 8017a1c:	f000 80f6 	beq.w	8017c0c <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8017a20:	68fb      	ldr	r3, [r7, #12]
 8017a22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017a24:	653b      	str	r3, [r7, #80]	; 0x50
 8017a26:	e002      	b.n	8017a2e <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8017a28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017a2a:	681b      	ldr	r3, [r3, #0]
 8017a2c:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8017a2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017a30:	681b      	ldr	r3, [r3, #0]
 8017a32:	2b00      	cmp	r3, #0
 8017a34:	d1f8      	bne.n	8017a28 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8017a36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017a38:	7a9b      	ldrb	r3, [r3, #10]
 8017a3a:	009b      	lsls	r3, r3, #2
 8017a3c:	b29b      	uxth	r3, r3
 8017a3e:	f003 0304 	and.w	r3, r3, #4
 8017a42:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8017a44:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8017a46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017a48:	891b      	ldrh	r3, [r3, #8]
 8017a4a:	4619      	mov	r1, r3
 8017a4c:	8c3b      	ldrh	r3, [r7, #32]
 8017a4e:	440b      	add	r3, r1
 8017a50:	429a      	cmp	r2, r3
 8017a52:	da06      	bge.n	8017a62 <tcp_write+0x116>
 8017a54:	4b74      	ldr	r3, [pc, #464]	; (8017c28 <tcp_write+0x2dc>)
 8017a56:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8017a5a:	4977      	ldr	r1, [pc, #476]	; (8017c38 <tcp_write+0x2ec>)
 8017a5c:	4874      	ldr	r0, [pc, #464]	; (8017c30 <tcp_write+0x2e4>)
 8017a5e:	f007 fdd1 	bl	801f604 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8017a62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017a64:	891a      	ldrh	r2, [r3, #8]
 8017a66:	8c3b      	ldrh	r3, [r7, #32]
 8017a68:	4413      	add	r3, r2
 8017a6a:	b29b      	uxth	r3, r3
 8017a6c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8017a6e:	1ad3      	subs	r3, r2, r3
 8017a70:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8017a72:	68fb      	ldr	r3, [r7, #12]
 8017a74:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8017a78:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8017a7a:	8a7b      	ldrh	r3, [r7, #18]
 8017a7c:	2b00      	cmp	r3, #0
 8017a7e:	d026      	beq.n	8017ace <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8017a80:	8a7b      	ldrh	r3, [r7, #18]
 8017a82:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8017a84:	429a      	cmp	r2, r3
 8017a86:	d206      	bcs.n	8017a96 <tcp_write+0x14a>
 8017a88:	4b67      	ldr	r3, [pc, #412]	; (8017c28 <tcp_write+0x2dc>)
 8017a8a:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8017a8e:	496b      	ldr	r1, [pc, #428]	; (8017c3c <tcp_write+0x2f0>)
 8017a90:	4867      	ldr	r0, [pc, #412]	; (8017c30 <tcp_write+0x2e4>)
 8017a92:	f007 fdb7 	bl	801f604 <iprintf>
      seg = last_unsent;
 8017a96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017a98:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8017a9a:	8a7b      	ldrh	r3, [r7, #18]
 8017a9c:	88fa      	ldrh	r2, [r7, #6]
 8017a9e:	4293      	cmp	r3, r2
 8017aa0:	bf28      	it	cs
 8017aa2:	4613      	movcs	r3, r2
 8017aa4:	b29b      	uxth	r3, r3
 8017aa6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8017aa8:	4293      	cmp	r3, r2
 8017aaa:	bf28      	it	cs
 8017aac:	4613      	movcs	r3, r2
 8017aae:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 8017ab0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8017ab4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8017ab6:	4413      	add	r3, r2
 8017ab8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8017abc:	8a7a      	ldrh	r2, [r7, #18]
 8017abe:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8017ac0:	1ad3      	subs	r3, r2, r3
 8017ac2:	b29b      	uxth	r3, r3
 8017ac4:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8017ac6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8017ac8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8017aca:	1ad3      	subs	r3, r2, r3
 8017acc:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8017ace:	8a7b      	ldrh	r3, [r7, #18]
 8017ad0:	2b00      	cmp	r3, #0
 8017ad2:	d00b      	beq.n	8017aec <tcp_write+0x1a0>
 8017ad4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8017ad8:	88fb      	ldrh	r3, [r7, #6]
 8017ada:	429a      	cmp	r2, r3
 8017adc:	d006      	beq.n	8017aec <tcp_write+0x1a0>
 8017ade:	4b52      	ldr	r3, [pc, #328]	; (8017c28 <tcp_write+0x2dc>)
 8017ae0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8017ae4:	4956      	ldr	r1, [pc, #344]	; (8017c40 <tcp_write+0x2f4>)
 8017ae6:	4852      	ldr	r0, [pc, #328]	; (8017c30 <tcp_write+0x2e4>)
 8017ae8:	f007 fd8c 	bl	801f604 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8017aec:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8017af0:	88fb      	ldrh	r3, [r7, #6]
 8017af2:	429a      	cmp	r2, r3
 8017af4:	f080 8167 	bcs.w	8017dc6 <tcp_write+0x47a>
 8017af8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017afa:	2b00      	cmp	r3, #0
 8017afc:	f000 8163 	beq.w	8017dc6 <tcp_write+0x47a>
 8017b00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017b02:	891b      	ldrh	r3, [r3, #8]
 8017b04:	2b00      	cmp	r3, #0
 8017b06:	f000 815e 	beq.w	8017dc6 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8017b0a:	88fa      	ldrh	r2, [r7, #6]
 8017b0c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8017b10:	1ad2      	subs	r2, r2, r3
 8017b12:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017b14:	4293      	cmp	r3, r2
 8017b16:	bfa8      	it	ge
 8017b18:	4613      	movge	r3, r2
 8017b1a:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8017b1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017b1e:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8017b20:	797b      	ldrb	r3, [r7, #5]
 8017b22:	f003 0301 	and.w	r3, r3, #1
 8017b26:	2b00      	cmp	r3, #0
 8017b28:	d027      	beq.n	8017b7a <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8017b2a:	f107 0012 	add.w	r0, r7, #18
 8017b2e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8017b30:	8bf9      	ldrh	r1, [r7, #30]
 8017b32:	2301      	movs	r3, #1
 8017b34:	9302      	str	r3, [sp, #8]
 8017b36:	797b      	ldrb	r3, [r7, #5]
 8017b38:	9301      	str	r3, [sp, #4]
 8017b3a:	68fb      	ldr	r3, [r7, #12]
 8017b3c:	9300      	str	r3, [sp, #0]
 8017b3e:	4603      	mov	r3, r0
 8017b40:	2000      	movs	r0, #0
 8017b42:	f7ff fe0f 	bl	8017764 <tcp_pbuf_prealloc>
 8017b46:	6578      	str	r0, [r7, #84]	; 0x54
 8017b48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017b4a:	2b00      	cmp	r3, #0
 8017b4c:	f000 8225 	beq.w	8017f9a <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8017b50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017b52:	6858      	ldr	r0, [r3, #4]
 8017b54:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8017b58:	68ba      	ldr	r2, [r7, #8]
 8017b5a:	4413      	add	r3, r2
 8017b5c:	8bfa      	ldrh	r2, [r7, #30]
 8017b5e:	4619      	mov	r1, r3
 8017b60:	f006 feda 	bl	801e918 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8017b64:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8017b66:	f7fb f9b3 	bl	8012ed0 <pbuf_clen>
 8017b6a:	4603      	mov	r3, r0
 8017b6c:	461a      	mov	r2, r3
 8017b6e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8017b72:	4413      	add	r3, r2
 8017b74:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8017b78:	e041      	b.n	8017bfe <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8017b7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017b7c:	685b      	ldr	r3, [r3, #4]
 8017b7e:	637b      	str	r3, [r7, #52]	; 0x34
 8017b80:	e002      	b.n	8017b88 <tcp_write+0x23c>
 8017b82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017b84:	681b      	ldr	r3, [r3, #0]
 8017b86:	637b      	str	r3, [r7, #52]	; 0x34
 8017b88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017b8a:	681b      	ldr	r3, [r3, #0]
 8017b8c:	2b00      	cmp	r3, #0
 8017b8e:	d1f8      	bne.n	8017b82 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8017b90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017b92:	7b1b      	ldrb	r3, [r3, #12]
 8017b94:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8017b98:	2b00      	cmp	r3, #0
 8017b9a:	d115      	bne.n	8017bc8 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8017b9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017b9e:	685b      	ldr	r3, [r3, #4]
 8017ba0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8017ba2:	8952      	ldrh	r2, [r2, #10]
 8017ba4:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8017ba6:	68ba      	ldr	r2, [r7, #8]
 8017ba8:	429a      	cmp	r2, r3
 8017baa:	d10d      	bne.n	8017bc8 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8017bac:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8017bb0:	2b00      	cmp	r3, #0
 8017bb2:	d006      	beq.n	8017bc2 <tcp_write+0x276>
 8017bb4:	4b1c      	ldr	r3, [pc, #112]	; (8017c28 <tcp_write+0x2dc>)
 8017bb6:	f240 2231 	movw	r2, #561	; 0x231
 8017bba:	4922      	ldr	r1, [pc, #136]	; (8017c44 <tcp_write+0x2f8>)
 8017bbc:	481c      	ldr	r0, [pc, #112]	; (8017c30 <tcp_write+0x2e4>)
 8017bbe:	f007 fd21 	bl	801f604 <iprintf>
          extendlen = seglen;
 8017bc2:	8bfb      	ldrh	r3, [r7, #30]
 8017bc4:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8017bc6:	e01a      	b.n	8017bfe <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8017bc8:	8bfb      	ldrh	r3, [r7, #30]
 8017bca:	2201      	movs	r2, #1
 8017bcc:	4619      	mov	r1, r3
 8017bce:	2000      	movs	r0, #0
 8017bd0:	f7fa fdda 	bl	8012788 <pbuf_alloc>
 8017bd4:	6578      	str	r0, [r7, #84]	; 0x54
 8017bd6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017bd8:	2b00      	cmp	r3, #0
 8017bda:	f000 81e0 	beq.w	8017f9e <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8017bde:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8017be2:	68ba      	ldr	r2, [r7, #8]
 8017be4:	441a      	add	r2, r3
 8017be6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017be8:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8017bea:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8017bec:	f7fb f970 	bl	8012ed0 <pbuf_clen>
 8017bf0:	4603      	mov	r3, r0
 8017bf2:	461a      	mov	r2, r3
 8017bf4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8017bf8:	4413      	add	r3, r2
 8017bfa:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8017bfe:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8017c02:	8bfb      	ldrh	r3, [r7, #30]
 8017c04:	4413      	add	r3, r2
 8017c06:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8017c0a:	e0dc      	b.n	8017dc6 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8017c0c:	68fb      	ldr	r3, [r7, #12]
 8017c0e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8017c12:	2b00      	cmp	r3, #0
 8017c14:	f000 80d7 	beq.w	8017dc6 <tcp_write+0x47a>
 8017c18:	4b03      	ldr	r3, [pc, #12]	; (8017c28 <tcp_write+0x2dc>)
 8017c1a:	f240 224a 	movw	r2, #586	; 0x24a
 8017c1e:	490a      	ldr	r1, [pc, #40]	; (8017c48 <tcp_write+0x2fc>)
 8017c20:	4803      	ldr	r0, [pc, #12]	; (8017c30 <tcp_write+0x2e4>)
 8017c22:	f007 fcef 	bl	801f604 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8017c26:	e0ce      	b.n	8017dc6 <tcp_write+0x47a>
 8017c28:	08025914 	.word	0x08025914
 8017c2c:	08025ab4 	.word	0x08025ab4
 8017c30:	08025968 	.word	0x08025968
 8017c34:	08025acc 	.word	0x08025acc
 8017c38:	08025b00 	.word	0x08025b00
 8017c3c:	08025b18 	.word	0x08025b18
 8017c40:	08025b38 	.word	0x08025b38
 8017c44:	08025b58 	.word	0x08025b58
 8017c48:	08025b84 	.word	0x08025b84
    struct pbuf *p;
    u16_t left = len - pos;
 8017c4c:	88fa      	ldrh	r2, [r7, #6]
 8017c4e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8017c52:	1ad3      	subs	r3, r2, r3
 8017c54:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8017c56:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8017c5a:	b29b      	uxth	r3, r3
 8017c5c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8017c5e:	1ad3      	subs	r3, r2, r3
 8017c60:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8017c62:	8b7a      	ldrh	r2, [r7, #26]
 8017c64:	8bbb      	ldrh	r3, [r7, #28]
 8017c66:	4293      	cmp	r3, r2
 8017c68:	bf28      	it	cs
 8017c6a:	4613      	movcs	r3, r2
 8017c6c:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8017c6e:	797b      	ldrb	r3, [r7, #5]
 8017c70:	f003 0301 	and.w	r3, r3, #1
 8017c74:	2b00      	cmp	r3, #0
 8017c76:	d036      	beq.n	8017ce6 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8017c78:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8017c7c:	b29a      	uxth	r2, r3
 8017c7e:	8b3b      	ldrh	r3, [r7, #24]
 8017c80:	4413      	add	r3, r2
 8017c82:	b299      	uxth	r1, r3
 8017c84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017c86:	2b00      	cmp	r3, #0
 8017c88:	bf0c      	ite	eq
 8017c8a:	2301      	moveq	r3, #1
 8017c8c:	2300      	movne	r3, #0
 8017c8e:	b2db      	uxtb	r3, r3
 8017c90:	f107 0012 	add.w	r0, r7, #18
 8017c94:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8017c96:	9302      	str	r3, [sp, #8]
 8017c98:	797b      	ldrb	r3, [r7, #5]
 8017c9a:	9301      	str	r3, [sp, #4]
 8017c9c:	68fb      	ldr	r3, [r7, #12]
 8017c9e:	9300      	str	r3, [sp, #0]
 8017ca0:	4603      	mov	r3, r0
 8017ca2:	2036      	movs	r0, #54	; 0x36
 8017ca4:	f7ff fd5e 	bl	8017764 <tcp_pbuf_prealloc>
 8017ca8:	6338      	str	r0, [r7, #48]	; 0x30
 8017caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017cac:	2b00      	cmp	r3, #0
 8017cae:	f000 8178 	beq.w	8017fa2 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8017cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017cb4:	895b      	ldrh	r3, [r3, #10]
 8017cb6:	8b3a      	ldrh	r2, [r7, #24]
 8017cb8:	429a      	cmp	r2, r3
 8017cba:	d906      	bls.n	8017cca <tcp_write+0x37e>
 8017cbc:	4b8c      	ldr	r3, [pc, #560]	; (8017ef0 <tcp_write+0x5a4>)
 8017cbe:	f240 2266 	movw	r2, #614	; 0x266
 8017cc2:	498c      	ldr	r1, [pc, #560]	; (8017ef4 <tcp_write+0x5a8>)
 8017cc4:	488c      	ldr	r0, [pc, #560]	; (8017ef8 <tcp_write+0x5ac>)
 8017cc6:	f007 fc9d 	bl	801f604 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8017cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017ccc:	685a      	ldr	r2, [r3, #4]
 8017cce:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8017cd2:	18d0      	adds	r0, r2, r3
 8017cd4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8017cd8:	68ba      	ldr	r2, [r7, #8]
 8017cda:	4413      	add	r3, r2
 8017cdc:	8b3a      	ldrh	r2, [r7, #24]
 8017cde:	4619      	mov	r1, r3
 8017ce0:	f006 fe1a 	bl	801e918 <memcpy>
 8017ce4:	e02f      	b.n	8017d46 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8017ce6:	8a7b      	ldrh	r3, [r7, #18]
 8017ce8:	2b00      	cmp	r3, #0
 8017cea:	d006      	beq.n	8017cfa <tcp_write+0x3ae>
 8017cec:	4b80      	ldr	r3, [pc, #512]	; (8017ef0 <tcp_write+0x5a4>)
 8017cee:	f240 2271 	movw	r2, #625	; 0x271
 8017cf2:	4982      	ldr	r1, [pc, #520]	; (8017efc <tcp_write+0x5b0>)
 8017cf4:	4880      	ldr	r0, [pc, #512]	; (8017ef8 <tcp_write+0x5ac>)
 8017cf6:	f007 fc85 	bl	801f604 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8017cfa:	8b3b      	ldrh	r3, [r7, #24]
 8017cfc:	2201      	movs	r2, #1
 8017cfe:	4619      	mov	r1, r3
 8017d00:	2036      	movs	r0, #54	; 0x36
 8017d02:	f7fa fd41 	bl	8012788 <pbuf_alloc>
 8017d06:	6178      	str	r0, [r7, #20]
 8017d08:	697b      	ldr	r3, [r7, #20]
 8017d0a:	2b00      	cmp	r3, #0
 8017d0c:	f000 814b 	beq.w	8017fa6 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8017d10:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8017d14:	68ba      	ldr	r2, [r7, #8]
 8017d16:	441a      	add	r2, r3
 8017d18:	697b      	ldr	r3, [r7, #20]
 8017d1a:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8017d1c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8017d20:	b29b      	uxth	r3, r3
 8017d22:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017d26:	4619      	mov	r1, r3
 8017d28:	2036      	movs	r0, #54	; 0x36
 8017d2a:	f7fa fd2d 	bl	8012788 <pbuf_alloc>
 8017d2e:	6338      	str	r0, [r7, #48]	; 0x30
 8017d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d32:	2b00      	cmp	r3, #0
 8017d34:	d103      	bne.n	8017d3e <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8017d36:	6978      	ldr	r0, [r7, #20]
 8017d38:	f7fb f83c 	bl	8012db4 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8017d3c:	e136      	b.n	8017fac <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8017d3e:	6979      	ldr	r1, [r7, #20]
 8017d40:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017d42:	f7fb f905 	bl	8012f50 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8017d46:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017d48:	f7fb f8c2 	bl	8012ed0 <pbuf_clen>
 8017d4c:	4603      	mov	r3, r0
 8017d4e:	461a      	mov	r2, r3
 8017d50:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8017d54:	4413      	add	r3, r2
 8017d56:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8017d5a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8017d5e:	2b09      	cmp	r3, #9
 8017d60:	d903      	bls.n	8017d6a <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8017d62:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017d64:	f7fb f826 	bl	8012db4 <pbuf_free>
      goto memerr;
 8017d68:	e120      	b.n	8017fac <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8017d6a:	68fb      	ldr	r3, [r7, #12]
 8017d6c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8017d6e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8017d72:	441a      	add	r2, r3
 8017d74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017d78:	9300      	str	r3, [sp, #0]
 8017d7a:	4613      	mov	r3, r2
 8017d7c:	2200      	movs	r2, #0
 8017d7e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8017d80:	68f8      	ldr	r0, [r7, #12]
 8017d82:	f7ff fc51 	bl	8017628 <tcp_create_segment>
 8017d86:	64f8      	str	r0, [r7, #76]	; 0x4c
 8017d88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017d8a:	2b00      	cmp	r3, #0
 8017d8c:	f000 810d 	beq.w	8017faa <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8017d90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017d92:	2b00      	cmp	r3, #0
 8017d94:	d102      	bne.n	8017d9c <tcp_write+0x450>
      queue = seg;
 8017d96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017d98:	647b      	str	r3, [r7, #68]	; 0x44
 8017d9a:	e00c      	b.n	8017db6 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8017d9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017d9e:	2b00      	cmp	r3, #0
 8017da0:	d106      	bne.n	8017db0 <tcp_write+0x464>
 8017da2:	4b53      	ldr	r3, [pc, #332]	; (8017ef0 <tcp_write+0x5a4>)
 8017da4:	f240 22ab 	movw	r2, #683	; 0x2ab
 8017da8:	4955      	ldr	r1, [pc, #340]	; (8017f00 <tcp_write+0x5b4>)
 8017daa:	4853      	ldr	r0, [pc, #332]	; (8017ef8 <tcp_write+0x5ac>)
 8017dac:	f007 fc2a 	bl	801f604 <iprintf>
      prev_seg->next = seg;
 8017db0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017db2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8017db4:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8017db6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017db8:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8017dba:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8017dbe:	8b3b      	ldrh	r3, [r7, #24]
 8017dc0:	4413      	add	r3, r2
 8017dc2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 8017dc6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8017dca:	88fb      	ldrh	r3, [r7, #6]
 8017dcc:	429a      	cmp	r2, r3
 8017dce:	f4ff af3d 	bcc.w	8017c4c <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8017dd2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8017dd4:	2b00      	cmp	r3, #0
 8017dd6:	d02c      	beq.n	8017e32 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8017dd8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017dda:	685b      	ldr	r3, [r3, #4]
 8017ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017dde:	e01e      	b.n	8017e1e <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 8017de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017de2:	891a      	ldrh	r2, [r3, #8]
 8017de4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8017de6:	4413      	add	r3, r2
 8017de8:	b29a      	uxth	r2, r3
 8017dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017dec:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8017dee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017df0:	681b      	ldr	r3, [r3, #0]
 8017df2:	2b00      	cmp	r3, #0
 8017df4:	d110      	bne.n	8017e18 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8017df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017df8:	685b      	ldr	r3, [r3, #4]
 8017dfa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017dfc:	8952      	ldrh	r2, [r2, #10]
 8017dfe:	4413      	add	r3, r2
 8017e00:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8017e02:	68b9      	ldr	r1, [r7, #8]
 8017e04:	4618      	mov	r0, r3
 8017e06:	f006 fd87 	bl	801e918 <memcpy>
        p->len += oversize_used;
 8017e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017e0c:	895a      	ldrh	r2, [r3, #10]
 8017e0e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8017e10:	4413      	add	r3, r2
 8017e12:	b29a      	uxth	r2, r3
 8017e14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017e16:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8017e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017e1a:	681b      	ldr	r3, [r3, #0]
 8017e1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017e1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017e20:	2b00      	cmp	r3, #0
 8017e22:	d1dd      	bne.n	8017de0 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 8017e24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017e26:	891a      	ldrh	r2, [r3, #8]
 8017e28:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8017e2a:	4413      	add	r3, r2
 8017e2c:	b29a      	uxth	r2, r3
 8017e2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017e30:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8017e32:	8a7a      	ldrh	r2, [r7, #18]
 8017e34:	68fb      	ldr	r3, [r7, #12]
 8017e36:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8017e3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017e3c:	2b00      	cmp	r3, #0
 8017e3e:	d018      	beq.n	8017e72 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8017e40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017e42:	2b00      	cmp	r3, #0
 8017e44:	d106      	bne.n	8017e54 <tcp_write+0x508>
 8017e46:	4b2a      	ldr	r3, [pc, #168]	; (8017ef0 <tcp_write+0x5a4>)
 8017e48:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8017e4c:	492d      	ldr	r1, [pc, #180]	; (8017f04 <tcp_write+0x5b8>)
 8017e4e:	482a      	ldr	r0, [pc, #168]	; (8017ef8 <tcp_write+0x5ac>)
 8017e50:	f007 fbd8 	bl	801f604 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8017e54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017e56:	685b      	ldr	r3, [r3, #4]
 8017e58:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8017e5a:	4618      	mov	r0, r3
 8017e5c:	f7fb f878 	bl	8012f50 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8017e60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017e62:	891a      	ldrh	r2, [r3, #8]
 8017e64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017e66:	891b      	ldrh	r3, [r3, #8]
 8017e68:	4413      	add	r3, r2
 8017e6a:	b29a      	uxth	r2, r3
 8017e6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017e6e:	811a      	strh	r2, [r3, #8]
 8017e70:	e037      	b.n	8017ee2 <tcp_write+0x596>
  } else if (extendlen > 0) {
 8017e72:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017e74:	2b00      	cmp	r3, #0
 8017e76:	d034      	beq.n	8017ee2 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8017e78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017e7a:	2b00      	cmp	r3, #0
 8017e7c:	d003      	beq.n	8017e86 <tcp_write+0x53a>
 8017e7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017e80:	685b      	ldr	r3, [r3, #4]
 8017e82:	2b00      	cmp	r3, #0
 8017e84:	d106      	bne.n	8017e94 <tcp_write+0x548>
 8017e86:	4b1a      	ldr	r3, [pc, #104]	; (8017ef0 <tcp_write+0x5a4>)
 8017e88:	f240 22e6 	movw	r2, #742	; 0x2e6
 8017e8c:	491e      	ldr	r1, [pc, #120]	; (8017f08 <tcp_write+0x5bc>)
 8017e8e:	481a      	ldr	r0, [pc, #104]	; (8017ef8 <tcp_write+0x5ac>)
 8017e90:	f007 fbb8 	bl	801f604 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8017e94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017e96:	685b      	ldr	r3, [r3, #4]
 8017e98:	62bb      	str	r3, [r7, #40]	; 0x28
 8017e9a:	e009      	b.n	8017eb0 <tcp_write+0x564>
      p->tot_len += extendlen;
 8017e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e9e:	891a      	ldrh	r2, [r3, #8]
 8017ea0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017ea2:	4413      	add	r3, r2
 8017ea4:	b29a      	uxth	r2, r3
 8017ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017ea8:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8017eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017eac:	681b      	ldr	r3, [r3, #0]
 8017eae:	62bb      	str	r3, [r7, #40]	; 0x28
 8017eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017eb2:	681b      	ldr	r3, [r3, #0]
 8017eb4:	2b00      	cmp	r3, #0
 8017eb6:	d1f1      	bne.n	8017e9c <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 8017eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017eba:	891a      	ldrh	r2, [r3, #8]
 8017ebc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017ebe:	4413      	add	r3, r2
 8017ec0:	b29a      	uxth	r2, r3
 8017ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017ec4:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8017ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017ec8:	895a      	ldrh	r2, [r3, #10]
 8017eca:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017ecc:	4413      	add	r3, r2
 8017ece:	b29a      	uxth	r2, r3
 8017ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017ed2:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8017ed4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017ed6:	891a      	ldrh	r2, [r3, #8]
 8017ed8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017eda:	4413      	add	r3, r2
 8017edc:	b29a      	uxth	r2, r3
 8017ede:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017ee0:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8017ee2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017ee4:	2b00      	cmp	r3, #0
 8017ee6:	d111      	bne.n	8017f0c <tcp_write+0x5c0>
    pcb->unsent = queue;
 8017ee8:	68fb      	ldr	r3, [r7, #12]
 8017eea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017eec:	66da      	str	r2, [r3, #108]	; 0x6c
 8017eee:	e010      	b.n	8017f12 <tcp_write+0x5c6>
 8017ef0:	08025914 	.word	0x08025914
 8017ef4:	08025bb4 	.word	0x08025bb4
 8017ef8:	08025968 	.word	0x08025968
 8017efc:	08025bf4 	.word	0x08025bf4
 8017f00:	08025c04 	.word	0x08025c04
 8017f04:	08025c18 	.word	0x08025c18
 8017f08:	08025c50 	.word	0x08025c50
  } else {
    last_unsent->next = queue;
 8017f0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017f0e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017f10:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8017f12:	68fb      	ldr	r3, [r7, #12]
 8017f14:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8017f16:	88fb      	ldrh	r3, [r7, #6]
 8017f18:	441a      	add	r2, r3
 8017f1a:	68fb      	ldr	r3, [r7, #12]
 8017f1c:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 8017f1e:	68fb      	ldr	r3, [r7, #12]
 8017f20:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8017f24:	88fb      	ldrh	r3, [r7, #6]
 8017f26:	1ad3      	subs	r3, r2, r3
 8017f28:	b29a      	uxth	r2, r3
 8017f2a:	68fb      	ldr	r3, [r7, #12]
 8017f2c:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 8017f30:	68fb      	ldr	r3, [r7, #12]
 8017f32:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8017f36:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8017f3a:	68fb      	ldr	r3, [r7, #12]
 8017f3c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8017f40:	2b00      	cmp	r3, #0
 8017f42:	d00e      	beq.n	8017f62 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8017f44:	68fb      	ldr	r3, [r7, #12]
 8017f46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017f48:	2b00      	cmp	r3, #0
 8017f4a:	d10a      	bne.n	8017f62 <tcp_write+0x616>
 8017f4c:	68fb      	ldr	r3, [r7, #12]
 8017f4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017f50:	2b00      	cmp	r3, #0
 8017f52:	d106      	bne.n	8017f62 <tcp_write+0x616>
 8017f54:	4b2c      	ldr	r3, [pc, #176]	; (8018008 <tcp_write+0x6bc>)
 8017f56:	f240 3212 	movw	r2, #786	; 0x312
 8017f5a:	492c      	ldr	r1, [pc, #176]	; (801800c <tcp_write+0x6c0>)
 8017f5c:	482c      	ldr	r0, [pc, #176]	; (8018010 <tcp_write+0x6c4>)
 8017f5e:	f007 fb51 	bl	801f604 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8017f62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017f64:	2b00      	cmp	r3, #0
 8017f66:	d016      	beq.n	8017f96 <tcp_write+0x64a>
 8017f68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017f6a:	68db      	ldr	r3, [r3, #12]
 8017f6c:	2b00      	cmp	r3, #0
 8017f6e:	d012      	beq.n	8017f96 <tcp_write+0x64a>
 8017f70:	797b      	ldrb	r3, [r7, #5]
 8017f72:	f003 0302 	and.w	r3, r3, #2
 8017f76:	2b00      	cmp	r3, #0
 8017f78:	d10d      	bne.n	8017f96 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8017f7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017f7c:	68db      	ldr	r3, [r3, #12]
 8017f7e:	899b      	ldrh	r3, [r3, #12]
 8017f80:	b29c      	uxth	r4, r3
 8017f82:	2008      	movs	r0, #8
 8017f84:	f7f9 fa2e 	bl	80113e4 <lwip_htons>
 8017f88:	4603      	mov	r3, r0
 8017f8a:	461a      	mov	r2, r3
 8017f8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017f8e:	68db      	ldr	r3, [r3, #12]
 8017f90:	4322      	orrs	r2, r4
 8017f92:	b292      	uxth	r2, r2
 8017f94:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8017f96:	2300      	movs	r3, #0
 8017f98:	e031      	b.n	8017ffe <tcp_write+0x6b2>
          goto memerr;
 8017f9a:	bf00      	nop
 8017f9c:	e006      	b.n	8017fac <tcp_write+0x660>
            goto memerr;
 8017f9e:	bf00      	nop
 8017fa0:	e004      	b.n	8017fac <tcp_write+0x660>
        goto memerr;
 8017fa2:	bf00      	nop
 8017fa4:	e002      	b.n	8017fac <tcp_write+0x660>
        goto memerr;
 8017fa6:	bf00      	nop
 8017fa8:	e000      	b.n	8017fac <tcp_write+0x660>
      goto memerr;
 8017faa:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8017fac:	68fb      	ldr	r3, [r7, #12]
 8017fae:	8b5b      	ldrh	r3, [r3, #26]
 8017fb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017fb4:	b29a      	uxth	r2, r3
 8017fb6:	68fb      	ldr	r3, [r7, #12]
 8017fb8:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8017fba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017fbc:	2b00      	cmp	r3, #0
 8017fbe:	d002      	beq.n	8017fc6 <tcp_write+0x67a>
    pbuf_free(concat_p);
 8017fc0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8017fc2:	f7fa fef7 	bl	8012db4 <pbuf_free>
  }
  if (queue != NULL) {
 8017fc6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017fc8:	2b00      	cmp	r3, #0
 8017fca:	d002      	beq.n	8017fd2 <tcp_write+0x686>
    tcp_segs_free(queue);
 8017fcc:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8017fce:	f7fc fb6f 	bl	80146b0 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8017fd2:	68fb      	ldr	r3, [r7, #12]
 8017fd4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8017fd8:	2b00      	cmp	r3, #0
 8017fda:	d00e      	beq.n	8017ffa <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8017fdc:	68fb      	ldr	r3, [r7, #12]
 8017fde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017fe0:	2b00      	cmp	r3, #0
 8017fe2:	d10a      	bne.n	8017ffa <tcp_write+0x6ae>
 8017fe4:	68fb      	ldr	r3, [r7, #12]
 8017fe6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017fe8:	2b00      	cmp	r3, #0
 8017fea:	d106      	bne.n	8017ffa <tcp_write+0x6ae>
 8017fec:	4b06      	ldr	r3, [pc, #24]	; (8018008 <tcp_write+0x6bc>)
 8017fee:	f240 3227 	movw	r2, #807	; 0x327
 8017ff2:	4906      	ldr	r1, [pc, #24]	; (801800c <tcp_write+0x6c0>)
 8017ff4:	4806      	ldr	r0, [pc, #24]	; (8018010 <tcp_write+0x6c4>)
 8017ff6:	f007 fb05 	bl	801f604 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8017ffa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8017ffe:	4618      	mov	r0, r3
 8018000:	375c      	adds	r7, #92	; 0x5c
 8018002:	46bd      	mov	sp, r7
 8018004:	bd90      	pop	{r4, r7, pc}
 8018006:	bf00      	nop
 8018008:	08025914 	.word	0x08025914
 801800c:	08025c88 	.word	0x08025c88
 8018010:	08025968 	.word	0x08025968

08018014 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8018014:	b590      	push	{r4, r7, lr}
 8018016:	b08b      	sub	sp, #44	; 0x2c
 8018018:	af02      	add	r7, sp, #8
 801801a:	6078      	str	r0, [r7, #4]
 801801c:	460b      	mov	r3, r1
 801801e:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8018020:	2300      	movs	r3, #0
 8018022:	61fb      	str	r3, [r7, #28]
 8018024:	2300      	movs	r3, #0
 8018026:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8018028:	2300      	movs	r3, #0
 801802a:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 801802c:	687b      	ldr	r3, [r7, #4]
 801802e:	2b00      	cmp	r3, #0
 8018030:	d106      	bne.n	8018040 <tcp_split_unsent_seg+0x2c>
 8018032:	4b95      	ldr	r3, [pc, #596]	; (8018288 <tcp_split_unsent_seg+0x274>)
 8018034:	f240 324b 	movw	r2, #843	; 0x34b
 8018038:	4994      	ldr	r1, [pc, #592]	; (801828c <tcp_split_unsent_seg+0x278>)
 801803a:	4895      	ldr	r0, [pc, #596]	; (8018290 <tcp_split_unsent_seg+0x27c>)
 801803c:	f007 fae2 	bl	801f604 <iprintf>

  useg = pcb->unsent;
 8018040:	687b      	ldr	r3, [r7, #4]
 8018042:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018044:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8018046:	697b      	ldr	r3, [r7, #20]
 8018048:	2b00      	cmp	r3, #0
 801804a:	d102      	bne.n	8018052 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 801804c:	f04f 33ff 	mov.w	r3, #4294967295
 8018050:	e116      	b.n	8018280 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8018052:	887b      	ldrh	r3, [r7, #2]
 8018054:	2b00      	cmp	r3, #0
 8018056:	d109      	bne.n	801806c <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8018058:	4b8b      	ldr	r3, [pc, #556]	; (8018288 <tcp_split_unsent_seg+0x274>)
 801805a:	f240 3253 	movw	r2, #851	; 0x353
 801805e:	498d      	ldr	r1, [pc, #564]	; (8018294 <tcp_split_unsent_seg+0x280>)
 8018060:	488b      	ldr	r0, [pc, #556]	; (8018290 <tcp_split_unsent_seg+0x27c>)
 8018062:	f007 facf 	bl	801f604 <iprintf>
    return ERR_VAL;
 8018066:	f06f 0305 	mvn.w	r3, #5
 801806a:	e109      	b.n	8018280 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 801806c:	697b      	ldr	r3, [r7, #20]
 801806e:	891b      	ldrh	r3, [r3, #8]
 8018070:	887a      	ldrh	r2, [r7, #2]
 8018072:	429a      	cmp	r2, r3
 8018074:	d301      	bcc.n	801807a <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8018076:	2300      	movs	r3, #0
 8018078:	e102      	b.n	8018280 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801807a:	687b      	ldr	r3, [r7, #4]
 801807c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801807e:	887a      	ldrh	r2, [r7, #2]
 8018080:	429a      	cmp	r2, r3
 8018082:	d906      	bls.n	8018092 <tcp_split_unsent_seg+0x7e>
 8018084:	4b80      	ldr	r3, [pc, #512]	; (8018288 <tcp_split_unsent_seg+0x274>)
 8018086:	f240 325b 	movw	r2, #859	; 0x35b
 801808a:	4983      	ldr	r1, [pc, #524]	; (8018298 <tcp_split_unsent_seg+0x284>)
 801808c:	4880      	ldr	r0, [pc, #512]	; (8018290 <tcp_split_unsent_seg+0x27c>)
 801808e:	f007 fab9 	bl	801f604 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8018092:	697b      	ldr	r3, [r7, #20]
 8018094:	891b      	ldrh	r3, [r3, #8]
 8018096:	2b00      	cmp	r3, #0
 8018098:	d106      	bne.n	80180a8 <tcp_split_unsent_seg+0x94>
 801809a:	4b7b      	ldr	r3, [pc, #492]	; (8018288 <tcp_split_unsent_seg+0x274>)
 801809c:	f44f 7257 	mov.w	r2, #860	; 0x35c
 80180a0:	497e      	ldr	r1, [pc, #504]	; (801829c <tcp_split_unsent_seg+0x288>)
 80180a2:	487b      	ldr	r0, [pc, #492]	; (8018290 <tcp_split_unsent_seg+0x27c>)
 80180a4:	f007 faae 	bl	801f604 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 80180a8:	697b      	ldr	r3, [r7, #20]
 80180aa:	7a9b      	ldrb	r3, [r3, #10]
 80180ac:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 80180ae:	7bfb      	ldrb	r3, [r7, #15]
 80180b0:	009b      	lsls	r3, r3, #2
 80180b2:	b2db      	uxtb	r3, r3
 80180b4:	f003 0304 	and.w	r3, r3, #4
 80180b8:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 80180ba:	697b      	ldr	r3, [r7, #20]
 80180bc:	891a      	ldrh	r2, [r3, #8]
 80180be:	887b      	ldrh	r3, [r7, #2]
 80180c0:	1ad3      	subs	r3, r2, r3
 80180c2:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 80180c4:	7bbb      	ldrb	r3, [r7, #14]
 80180c6:	b29a      	uxth	r2, r3
 80180c8:	89bb      	ldrh	r3, [r7, #12]
 80180ca:	4413      	add	r3, r2
 80180cc:	b29b      	uxth	r3, r3
 80180ce:	f44f 7220 	mov.w	r2, #640	; 0x280
 80180d2:	4619      	mov	r1, r3
 80180d4:	2036      	movs	r0, #54	; 0x36
 80180d6:	f7fa fb57 	bl	8012788 <pbuf_alloc>
 80180da:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80180dc:	693b      	ldr	r3, [r7, #16]
 80180de:	2b00      	cmp	r3, #0
 80180e0:	f000 80b7 	beq.w	8018252 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 80180e4:	697b      	ldr	r3, [r7, #20]
 80180e6:	685b      	ldr	r3, [r3, #4]
 80180e8:	891a      	ldrh	r2, [r3, #8]
 80180ea:	697b      	ldr	r3, [r7, #20]
 80180ec:	891b      	ldrh	r3, [r3, #8]
 80180ee:	1ad3      	subs	r3, r2, r3
 80180f0:	b29a      	uxth	r2, r3
 80180f2:	887b      	ldrh	r3, [r7, #2]
 80180f4:	4413      	add	r3, r2
 80180f6:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 80180f8:	697b      	ldr	r3, [r7, #20]
 80180fa:	6858      	ldr	r0, [r3, #4]
 80180fc:	693b      	ldr	r3, [r7, #16]
 80180fe:	685a      	ldr	r2, [r3, #4]
 8018100:	7bbb      	ldrb	r3, [r7, #14]
 8018102:	18d1      	adds	r1, r2, r3
 8018104:	897b      	ldrh	r3, [r7, #10]
 8018106:	89ba      	ldrh	r2, [r7, #12]
 8018108:	f7fb f85a 	bl	80131c0 <pbuf_copy_partial>
 801810c:	4603      	mov	r3, r0
 801810e:	461a      	mov	r2, r3
 8018110:	89bb      	ldrh	r3, [r7, #12]
 8018112:	4293      	cmp	r3, r2
 8018114:	f040 809f 	bne.w	8018256 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8018118:	697b      	ldr	r3, [r7, #20]
 801811a:	68db      	ldr	r3, [r3, #12]
 801811c:	899b      	ldrh	r3, [r3, #12]
 801811e:	b29b      	uxth	r3, r3
 8018120:	4618      	mov	r0, r3
 8018122:	f7f9 f95f 	bl	80113e4 <lwip_htons>
 8018126:	4603      	mov	r3, r0
 8018128:	b2db      	uxtb	r3, r3
 801812a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801812e:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8018130:	2300      	movs	r3, #0
 8018132:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8018134:	7efb      	ldrb	r3, [r7, #27]
 8018136:	f003 0308 	and.w	r3, r3, #8
 801813a:	2b00      	cmp	r3, #0
 801813c:	d007      	beq.n	801814e <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801813e:	7efb      	ldrb	r3, [r7, #27]
 8018140:	f023 0308 	bic.w	r3, r3, #8
 8018144:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8018146:	7ebb      	ldrb	r3, [r7, #26]
 8018148:	f043 0308 	orr.w	r3, r3, #8
 801814c:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 801814e:	7efb      	ldrb	r3, [r7, #27]
 8018150:	f003 0301 	and.w	r3, r3, #1
 8018154:	2b00      	cmp	r3, #0
 8018156:	d007      	beq.n	8018168 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8018158:	7efb      	ldrb	r3, [r7, #27]
 801815a:	f023 0301 	bic.w	r3, r3, #1
 801815e:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8018160:	7ebb      	ldrb	r3, [r7, #26]
 8018162:	f043 0301 	orr.w	r3, r3, #1
 8018166:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8018168:	697b      	ldr	r3, [r7, #20]
 801816a:	68db      	ldr	r3, [r3, #12]
 801816c:	685b      	ldr	r3, [r3, #4]
 801816e:	4618      	mov	r0, r3
 8018170:	f7f9 f94d 	bl	801140e <lwip_htonl>
 8018174:	4602      	mov	r2, r0
 8018176:	887b      	ldrh	r3, [r7, #2]
 8018178:	18d1      	adds	r1, r2, r3
 801817a:	7eba      	ldrb	r2, [r7, #26]
 801817c:	7bfb      	ldrb	r3, [r7, #15]
 801817e:	9300      	str	r3, [sp, #0]
 8018180:	460b      	mov	r3, r1
 8018182:	6939      	ldr	r1, [r7, #16]
 8018184:	6878      	ldr	r0, [r7, #4]
 8018186:	f7ff fa4f 	bl	8017628 <tcp_create_segment>
 801818a:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 801818c:	69fb      	ldr	r3, [r7, #28]
 801818e:	2b00      	cmp	r3, #0
 8018190:	d063      	beq.n	801825a <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8018192:	697b      	ldr	r3, [r7, #20]
 8018194:	685b      	ldr	r3, [r3, #4]
 8018196:	4618      	mov	r0, r3
 8018198:	f7fa fe9a 	bl	8012ed0 <pbuf_clen>
 801819c:	4603      	mov	r3, r0
 801819e:	461a      	mov	r2, r3
 80181a0:	687b      	ldr	r3, [r7, #4]
 80181a2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80181a6:	1a9b      	subs	r3, r3, r2
 80181a8:	b29a      	uxth	r2, r3
 80181aa:	687b      	ldr	r3, [r7, #4]
 80181ac:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 80181b0:	697b      	ldr	r3, [r7, #20]
 80181b2:	6858      	ldr	r0, [r3, #4]
 80181b4:	697b      	ldr	r3, [r7, #20]
 80181b6:	685b      	ldr	r3, [r3, #4]
 80181b8:	891a      	ldrh	r2, [r3, #8]
 80181ba:	89bb      	ldrh	r3, [r7, #12]
 80181bc:	1ad3      	subs	r3, r2, r3
 80181be:	b29b      	uxth	r3, r3
 80181c0:	4619      	mov	r1, r3
 80181c2:	f7fa fc3f 	bl	8012a44 <pbuf_realloc>
  useg->len -= remainder;
 80181c6:	697b      	ldr	r3, [r7, #20]
 80181c8:	891a      	ldrh	r2, [r3, #8]
 80181ca:	89bb      	ldrh	r3, [r7, #12]
 80181cc:	1ad3      	subs	r3, r2, r3
 80181ce:	b29a      	uxth	r2, r3
 80181d0:	697b      	ldr	r3, [r7, #20]
 80181d2:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 80181d4:	697b      	ldr	r3, [r7, #20]
 80181d6:	68db      	ldr	r3, [r3, #12]
 80181d8:	899b      	ldrh	r3, [r3, #12]
 80181da:	b29c      	uxth	r4, r3
 80181dc:	7efb      	ldrb	r3, [r7, #27]
 80181de:	b29b      	uxth	r3, r3
 80181e0:	4618      	mov	r0, r3
 80181e2:	f7f9 f8ff 	bl	80113e4 <lwip_htons>
 80181e6:	4603      	mov	r3, r0
 80181e8:	461a      	mov	r2, r3
 80181ea:	697b      	ldr	r3, [r7, #20]
 80181ec:	68db      	ldr	r3, [r3, #12]
 80181ee:	4322      	orrs	r2, r4
 80181f0:	b292      	uxth	r2, r2
 80181f2:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 80181f4:	697b      	ldr	r3, [r7, #20]
 80181f6:	685b      	ldr	r3, [r3, #4]
 80181f8:	4618      	mov	r0, r3
 80181fa:	f7fa fe69 	bl	8012ed0 <pbuf_clen>
 80181fe:	4603      	mov	r3, r0
 8018200:	461a      	mov	r2, r3
 8018202:	687b      	ldr	r3, [r7, #4]
 8018204:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8018208:	4413      	add	r3, r2
 801820a:	b29a      	uxth	r2, r3
 801820c:	687b      	ldr	r3, [r7, #4]
 801820e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8018212:	69fb      	ldr	r3, [r7, #28]
 8018214:	685b      	ldr	r3, [r3, #4]
 8018216:	4618      	mov	r0, r3
 8018218:	f7fa fe5a 	bl	8012ed0 <pbuf_clen>
 801821c:	4603      	mov	r3, r0
 801821e:	461a      	mov	r2, r3
 8018220:	687b      	ldr	r3, [r7, #4]
 8018222:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8018226:	4413      	add	r3, r2
 8018228:	b29a      	uxth	r2, r3
 801822a:	687b      	ldr	r3, [r7, #4]
 801822c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8018230:	697b      	ldr	r3, [r7, #20]
 8018232:	681a      	ldr	r2, [r3, #0]
 8018234:	69fb      	ldr	r3, [r7, #28]
 8018236:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8018238:	697b      	ldr	r3, [r7, #20]
 801823a:	69fa      	ldr	r2, [r7, #28]
 801823c:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801823e:	69fb      	ldr	r3, [r7, #28]
 8018240:	681b      	ldr	r3, [r3, #0]
 8018242:	2b00      	cmp	r3, #0
 8018244:	d103      	bne.n	801824e <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8018246:	687b      	ldr	r3, [r7, #4]
 8018248:	2200      	movs	r2, #0
 801824a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 801824e:	2300      	movs	r3, #0
 8018250:	e016      	b.n	8018280 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8018252:	bf00      	nop
 8018254:	e002      	b.n	801825c <tcp_split_unsent_seg+0x248>
    goto memerr;
 8018256:	bf00      	nop
 8018258:	e000      	b.n	801825c <tcp_split_unsent_seg+0x248>
    goto memerr;
 801825a:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 801825c:	69fb      	ldr	r3, [r7, #28]
 801825e:	2b00      	cmp	r3, #0
 8018260:	d006      	beq.n	8018270 <tcp_split_unsent_seg+0x25c>
 8018262:	4b09      	ldr	r3, [pc, #36]	; (8018288 <tcp_split_unsent_seg+0x274>)
 8018264:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8018268:	490d      	ldr	r1, [pc, #52]	; (80182a0 <tcp_split_unsent_seg+0x28c>)
 801826a:	4809      	ldr	r0, [pc, #36]	; (8018290 <tcp_split_unsent_seg+0x27c>)
 801826c:	f007 f9ca 	bl	801f604 <iprintf>
  if (p != NULL) {
 8018270:	693b      	ldr	r3, [r7, #16]
 8018272:	2b00      	cmp	r3, #0
 8018274:	d002      	beq.n	801827c <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8018276:	6938      	ldr	r0, [r7, #16]
 8018278:	f7fa fd9c 	bl	8012db4 <pbuf_free>
  }

  return ERR_MEM;
 801827c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8018280:	4618      	mov	r0, r3
 8018282:	3724      	adds	r7, #36	; 0x24
 8018284:	46bd      	mov	sp, r7
 8018286:	bd90      	pop	{r4, r7, pc}
 8018288:	08025914 	.word	0x08025914
 801828c:	08025ca8 	.word	0x08025ca8
 8018290:	08025968 	.word	0x08025968
 8018294:	08025ccc 	.word	0x08025ccc
 8018298:	08025cf0 	.word	0x08025cf0
 801829c:	08025d00 	.word	0x08025d00
 80182a0:	08025d10 	.word	0x08025d10

080182a4 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 80182a4:	b590      	push	{r4, r7, lr}
 80182a6:	b085      	sub	sp, #20
 80182a8:	af00      	add	r7, sp, #0
 80182aa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 80182ac:	687b      	ldr	r3, [r7, #4]
 80182ae:	2b00      	cmp	r3, #0
 80182b0:	d106      	bne.n	80182c0 <tcp_send_fin+0x1c>
 80182b2:	4b21      	ldr	r3, [pc, #132]	; (8018338 <tcp_send_fin+0x94>)
 80182b4:	f240 32eb 	movw	r2, #1003	; 0x3eb
 80182b8:	4920      	ldr	r1, [pc, #128]	; (801833c <tcp_send_fin+0x98>)
 80182ba:	4821      	ldr	r0, [pc, #132]	; (8018340 <tcp_send_fin+0x9c>)
 80182bc:	f007 f9a2 	bl	801f604 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 80182c0:	687b      	ldr	r3, [r7, #4]
 80182c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80182c4:	2b00      	cmp	r3, #0
 80182c6:	d02e      	beq.n	8018326 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80182c8:	687b      	ldr	r3, [r7, #4]
 80182ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80182cc:	60fb      	str	r3, [r7, #12]
 80182ce:	e002      	b.n	80182d6 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 80182d0:	68fb      	ldr	r3, [r7, #12]
 80182d2:	681b      	ldr	r3, [r3, #0]
 80182d4:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80182d6:	68fb      	ldr	r3, [r7, #12]
 80182d8:	681b      	ldr	r3, [r3, #0]
 80182da:	2b00      	cmp	r3, #0
 80182dc:	d1f8      	bne.n	80182d0 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 80182de:	68fb      	ldr	r3, [r7, #12]
 80182e0:	68db      	ldr	r3, [r3, #12]
 80182e2:	899b      	ldrh	r3, [r3, #12]
 80182e4:	b29b      	uxth	r3, r3
 80182e6:	4618      	mov	r0, r3
 80182e8:	f7f9 f87c 	bl	80113e4 <lwip_htons>
 80182ec:	4603      	mov	r3, r0
 80182ee:	b2db      	uxtb	r3, r3
 80182f0:	f003 0307 	and.w	r3, r3, #7
 80182f4:	2b00      	cmp	r3, #0
 80182f6:	d116      	bne.n	8018326 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 80182f8:	68fb      	ldr	r3, [r7, #12]
 80182fa:	68db      	ldr	r3, [r3, #12]
 80182fc:	899b      	ldrh	r3, [r3, #12]
 80182fe:	b29c      	uxth	r4, r3
 8018300:	2001      	movs	r0, #1
 8018302:	f7f9 f86f 	bl	80113e4 <lwip_htons>
 8018306:	4603      	mov	r3, r0
 8018308:	461a      	mov	r2, r3
 801830a:	68fb      	ldr	r3, [r7, #12]
 801830c:	68db      	ldr	r3, [r3, #12]
 801830e:	4322      	orrs	r2, r4
 8018310:	b292      	uxth	r2, r2
 8018312:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8018314:	687b      	ldr	r3, [r7, #4]
 8018316:	8b5b      	ldrh	r3, [r3, #26]
 8018318:	f043 0320 	orr.w	r3, r3, #32
 801831c:	b29a      	uxth	r2, r3
 801831e:	687b      	ldr	r3, [r7, #4]
 8018320:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8018322:	2300      	movs	r3, #0
 8018324:	e004      	b.n	8018330 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8018326:	2101      	movs	r1, #1
 8018328:	6878      	ldr	r0, [r7, #4]
 801832a:	f000 f80b 	bl	8018344 <tcp_enqueue_flags>
 801832e:	4603      	mov	r3, r0
}
 8018330:	4618      	mov	r0, r3
 8018332:	3714      	adds	r7, #20
 8018334:	46bd      	mov	sp, r7
 8018336:	bd90      	pop	{r4, r7, pc}
 8018338:	08025914 	.word	0x08025914
 801833c:	08025d1c 	.word	0x08025d1c
 8018340:	08025968 	.word	0x08025968

08018344 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8018344:	b580      	push	{r7, lr}
 8018346:	b08a      	sub	sp, #40	; 0x28
 8018348:	af02      	add	r7, sp, #8
 801834a:	6078      	str	r0, [r7, #4]
 801834c:	460b      	mov	r3, r1
 801834e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8018350:	2300      	movs	r3, #0
 8018352:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8018354:	2300      	movs	r3, #0
 8018356:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8018358:	78fb      	ldrb	r3, [r7, #3]
 801835a:	f003 0303 	and.w	r3, r3, #3
 801835e:	2b00      	cmp	r3, #0
 8018360:	d106      	bne.n	8018370 <tcp_enqueue_flags+0x2c>
 8018362:	4b67      	ldr	r3, [pc, #412]	; (8018500 <tcp_enqueue_flags+0x1bc>)
 8018364:	f240 4211 	movw	r2, #1041	; 0x411
 8018368:	4966      	ldr	r1, [pc, #408]	; (8018504 <tcp_enqueue_flags+0x1c0>)
 801836a:	4867      	ldr	r0, [pc, #412]	; (8018508 <tcp_enqueue_flags+0x1c4>)
 801836c:	f007 f94a 	bl	801f604 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8018370:	687b      	ldr	r3, [r7, #4]
 8018372:	2b00      	cmp	r3, #0
 8018374:	d106      	bne.n	8018384 <tcp_enqueue_flags+0x40>
 8018376:	4b62      	ldr	r3, [pc, #392]	; (8018500 <tcp_enqueue_flags+0x1bc>)
 8018378:	f240 4213 	movw	r2, #1043	; 0x413
 801837c:	4963      	ldr	r1, [pc, #396]	; (801850c <tcp_enqueue_flags+0x1c8>)
 801837e:	4862      	ldr	r0, [pc, #392]	; (8018508 <tcp_enqueue_flags+0x1c4>)
 8018380:	f007 f940 	bl	801f604 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8018384:	78fb      	ldrb	r3, [r7, #3]
 8018386:	f003 0302 	and.w	r3, r3, #2
 801838a:	2b00      	cmp	r3, #0
 801838c:	d001      	beq.n	8018392 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 801838e:	2301      	movs	r3, #1
 8018390:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8018392:	7ffb      	ldrb	r3, [r7, #31]
 8018394:	009b      	lsls	r3, r3, #2
 8018396:	b2db      	uxtb	r3, r3
 8018398:	f003 0304 	and.w	r3, r3, #4
 801839c:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801839e:	7dfb      	ldrb	r3, [r7, #23]
 80183a0:	b29b      	uxth	r3, r3
 80183a2:	f44f 7220 	mov.w	r2, #640	; 0x280
 80183a6:	4619      	mov	r1, r3
 80183a8:	2036      	movs	r0, #54	; 0x36
 80183aa:	f7fa f9ed 	bl	8012788 <pbuf_alloc>
 80183ae:	6138      	str	r0, [r7, #16]
 80183b0:	693b      	ldr	r3, [r7, #16]
 80183b2:	2b00      	cmp	r3, #0
 80183b4:	d109      	bne.n	80183ca <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80183b6:	687b      	ldr	r3, [r7, #4]
 80183b8:	8b5b      	ldrh	r3, [r3, #26]
 80183ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80183be:	b29a      	uxth	r2, r3
 80183c0:	687b      	ldr	r3, [r7, #4]
 80183c2:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80183c4:	f04f 33ff 	mov.w	r3, #4294967295
 80183c8:	e095      	b.n	80184f6 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 80183ca:	693b      	ldr	r3, [r7, #16]
 80183cc:	895a      	ldrh	r2, [r3, #10]
 80183ce:	7dfb      	ldrb	r3, [r7, #23]
 80183d0:	b29b      	uxth	r3, r3
 80183d2:	429a      	cmp	r2, r3
 80183d4:	d206      	bcs.n	80183e4 <tcp_enqueue_flags+0xa0>
 80183d6:	4b4a      	ldr	r3, [pc, #296]	; (8018500 <tcp_enqueue_flags+0x1bc>)
 80183d8:	f240 4239 	movw	r2, #1081	; 0x439
 80183dc:	494c      	ldr	r1, [pc, #304]	; (8018510 <tcp_enqueue_flags+0x1cc>)
 80183de:	484a      	ldr	r0, [pc, #296]	; (8018508 <tcp_enqueue_flags+0x1c4>)
 80183e0:	f007 f910 	bl	801f604 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 80183e4:	687b      	ldr	r3, [r7, #4]
 80183e6:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80183e8:	78fa      	ldrb	r2, [r7, #3]
 80183ea:	7ffb      	ldrb	r3, [r7, #31]
 80183ec:	9300      	str	r3, [sp, #0]
 80183ee:	460b      	mov	r3, r1
 80183f0:	6939      	ldr	r1, [r7, #16]
 80183f2:	6878      	ldr	r0, [r7, #4]
 80183f4:	f7ff f918 	bl	8017628 <tcp_create_segment>
 80183f8:	60f8      	str	r0, [r7, #12]
 80183fa:	68fb      	ldr	r3, [r7, #12]
 80183fc:	2b00      	cmp	r3, #0
 80183fe:	d109      	bne.n	8018414 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8018400:	687b      	ldr	r3, [r7, #4]
 8018402:	8b5b      	ldrh	r3, [r3, #26]
 8018404:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018408:	b29a      	uxth	r2, r3
 801840a:	687b      	ldr	r3, [r7, #4]
 801840c:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801840e:	f04f 33ff 	mov.w	r3, #4294967295
 8018412:	e070      	b.n	80184f6 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8018414:	68fb      	ldr	r3, [r7, #12]
 8018416:	68db      	ldr	r3, [r3, #12]
 8018418:	f003 0303 	and.w	r3, r3, #3
 801841c:	2b00      	cmp	r3, #0
 801841e:	d006      	beq.n	801842e <tcp_enqueue_flags+0xea>
 8018420:	4b37      	ldr	r3, [pc, #220]	; (8018500 <tcp_enqueue_flags+0x1bc>)
 8018422:	f240 4242 	movw	r2, #1090	; 0x442
 8018426:	493b      	ldr	r1, [pc, #236]	; (8018514 <tcp_enqueue_flags+0x1d0>)
 8018428:	4837      	ldr	r0, [pc, #220]	; (8018508 <tcp_enqueue_flags+0x1c4>)
 801842a:	f007 f8eb 	bl	801f604 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801842e:	68fb      	ldr	r3, [r7, #12]
 8018430:	891b      	ldrh	r3, [r3, #8]
 8018432:	2b00      	cmp	r3, #0
 8018434:	d006      	beq.n	8018444 <tcp_enqueue_flags+0x100>
 8018436:	4b32      	ldr	r3, [pc, #200]	; (8018500 <tcp_enqueue_flags+0x1bc>)
 8018438:	f240 4243 	movw	r2, #1091	; 0x443
 801843c:	4936      	ldr	r1, [pc, #216]	; (8018518 <tcp_enqueue_flags+0x1d4>)
 801843e:	4832      	ldr	r0, [pc, #200]	; (8018508 <tcp_enqueue_flags+0x1c4>)
 8018440:	f007 f8e0 	bl	801f604 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8018444:	687b      	ldr	r3, [r7, #4]
 8018446:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018448:	2b00      	cmp	r3, #0
 801844a:	d103      	bne.n	8018454 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 801844c:	687b      	ldr	r3, [r7, #4]
 801844e:	68fa      	ldr	r2, [r7, #12]
 8018450:	66da      	str	r2, [r3, #108]	; 0x6c
 8018452:	e00d      	b.n	8018470 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8018454:	687b      	ldr	r3, [r7, #4]
 8018456:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018458:	61bb      	str	r3, [r7, #24]
 801845a:	e002      	b.n	8018462 <tcp_enqueue_flags+0x11e>
 801845c:	69bb      	ldr	r3, [r7, #24]
 801845e:	681b      	ldr	r3, [r3, #0]
 8018460:	61bb      	str	r3, [r7, #24]
 8018462:	69bb      	ldr	r3, [r7, #24]
 8018464:	681b      	ldr	r3, [r3, #0]
 8018466:	2b00      	cmp	r3, #0
 8018468:	d1f8      	bne.n	801845c <tcp_enqueue_flags+0x118>
    useg->next = seg;
 801846a:	69bb      	ldr	r3, [r7, #24]
 801846c:	68fa      	ldr	r2, [r7, #12]
 801846e:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8018470:	687b      	ldr	r3, [r7, #4]
 8018472:	2200      	movs	r2, #0
 8018474:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8018478:	78fb      	ldrb	r3, [r7, #3]
 801847a:	f003 0302 	and.w	r3, r3, #2
 801847e:	2b00      	cmp	r3, #0
 8018480:	d104      	bne.n	801848c <tcp_enqueue_flags+0x148>
 8018482:	78fb      	ldrb	r3, [r7, #3]
 8018484:	f003 0301 	and.w	r3, r3, #1
 8018488:	2b00      	cmp	r3, #0
 801848a:	d004      	beq.n	8018496 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 801848c:	687b      	ldr	r3, [r7, #4]
 801848e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018490:	1c5a      	adds	r2, r3, #1
 8018492:	687b      	ldr	r3, [r7, #4]
 8018494:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8018496:	78fb      	ldrb	r3, [r7, #3]
 8018498:	f003 0301 	and.w	r3, r3, #1
 801849c:	2b00      	cmp	r3, #0
 801849e:	d006      	beq.n	80184ae <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 80184a0:	687b      	ldr	r3, [r7, #4]
 80184a2:	8b5b      	ldrh	r3, [r3, #26]
 80184a4:	f043 0320 	orr.w	r3, r3, #32
 80184a8:	b29a      	uxth	r2, r3
 80184aa:	687b      	ldr	r3, [r7, #4]
 80184ac:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80184ae:	68fb      	ldr	r3, [r7, #12]
 80184b0:	685b      	ldr	r3, [r3, #4]
 80184b2:	4618      	mov	r0, r3
 80184b4:	f7fa fd0c 	bl	8012ed0 <pbuf_clen>
 80184b8:	4603      	mov	r3, r0
 80184ba:	461a      	mov	r2, r3
 80184bc:	687b      	ldr	r3, [r7, #4]
 80184be:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80184c2:	4413      	add	r3, r2
 80184c4:	b29a      	uxth	r2, r3
 80184c6:	687b      	ldr	r3, [r7, #4]
 80184c8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80184cc:	687b      	ldr	r3, [r7, #4]
 80184ce:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80184d2:	2b00      	cmp	r3, #0
 80184d4:	d00e      	beq.n	80184f4 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 80184d6:	687b      	ldr	r3, [r7, #4]
 80184d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80184da:	2b00      	cmp	r3, #0
 80184dc:	d10a      	bne.n	80184f4 <tcp_enqueue_flags+0x1b0>
 80184de:	687b      	ldr	r3, [r7, #4]
 80184e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80184e2:	2b00      	cmp	r3, #0
 80184e4:	d106      	bne.n	80184f4 <tcp_enqueue_flags+0x1b0>
 80184e6:	4b06      	ldr	r3, [pc, #24]	; (8018500 <tcp_enqueue_flags+0x1bc>)
 80184e8:	f240 4265 	movw	r2, #1125	; 0x465
 80184ec:	490b      	ldr	r1, [pc, #44]	; (801851c <tcp_enqueue_flags+0x1d8>)
 80184ee:	4806      	ldr	r0, [pc, #24]	; (8018508 <tcp_enqueue_flags+0x1c4>)
 80184f0:	f007 f888 	bl	801f604 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 80184f4:	2300      	movs	r3, #0
}
 80184f6:	4618      	mov	r0, r3
 80184f8:	3720      	adds	r7, #32
 80184fa:	46bd      	mov	sp, r7
 80184fc:	bd80      	pop	{r7, pc}
 80184fe:	bf00      	nop
 8018500:	08025914 	.word	0x08025914
 8018504:	08025d38 	.word	0x08025d38
 8018508:	08025968 	.word	0x08025968
 801850c:	08025d90 	.word	0x08025d90
 8018510:	08025db0 	.word	0x08025db0
 8018514:	08025dec 	.word	0x08025dec
 8018518:	08025e04 	.word	0x08025e04
 801851c:	08025e30 	.word	0x08025e30

08018520 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8018520:	b5b0      	push	{r4, r5, r7, lr}
 8018522:	b08a      	sub	sp, #40	; 0x28
 8018524:	af00      	add	r7, sp, #0
 8018526:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8018528:	687b      	ldr	r3, [r7, #4]
 801852a:	2b00      	cmp	r3, #0
 801852c:	d106      	bne.n	801853c <tcp_output+0x1c>
 801852e:	4b9e      	ldr	r3, [pc, #632]	; (80187a8 <tcp_output+0x288>)
 8018530:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8018534:	499d      	ldr	r1, [pc, #628]	; (80187ac <tcp_output+0x28c>)
 8018536:	489e      	ldr	r0, [pc, #632]	; (80187b0 <tcp_output+0x290>)
 8018538:	f007 f864 	bl	801f604 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 801853c:	687b      	ldr	r3, [r7, #4]
 801853e:	7d1b      	ldrb	r3, [r3, #20]
 8018540:	2b01      	cmp	r3, #1
 8018542:	d106      	bne.n	8018552 <tcp_output+0x32>
 8018544:	4b98      	ldr	r3, [pc, #608]	; (80187a8 <tcp_output+0x288>)
 8018546:	f240 42e3 	movw	r2, #1251	; 0x4e3
 801854a:	499a      	ldr	r1, [pc, #616]	; (80187b4 <tcp_output+0x294>)
 801854c:	4898      	ldr	r0, [pc, #608]	; (80187b0 <tcp_output+0x290>)
 801854e:	f007 f859 	bl	801f604 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8018552:	4b99      	ldr	r3, [pc, #612]	; (80187b8 <tcp_output+0x298>)
 8018554:	681b      	ldr	r3, [r3, #0]
 8018556:	687a      	ldr	r2, [r7, #4]
 8018558:	429a      	cmp	r2, r3
 801855a:	d101      	bne.n	8018560 <tcp_output+0x40>
    return ERR_OK;
 801855c:	2300      	movs	r3, #0
 801855e:	e1ce      	b.n	80188fe <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8018560:	687b      	ldr	r3, [r7, #4]
 8018562:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8018566:	687b      	ldr	r3, [r7, #4]
 8018568:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801856c:	4293      	cmp	r3, r2
 801856e:	bf28      	it	cs
 8018570:	4613      	movcs	r3, r2
 8018572:	b29b      	uxth	r3, r3
 8018574:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8018576:	687b      	ldr	r3, [r7, #4]
 8018578:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801857a:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 801857c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801857e:	2b00      	cmp	r3, #0
 8018580:	d10b      	bne.n	801859a <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8018582:	687b      	ldr	r3, [r7, #4]
 8018584:	8b5b      	ldrh	r3, [r3, #26]
 8018586:	f003 0302 	and.w	r3, r3, #2
 801858a:	2b00      	cmp	r3, #0
 801858c:	f000 81aa 	beq.w	80188e4 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8018590:	6878      	ldr	r0, [r7, #4]
 8018592:	f000 fdcb 	bl	801912c <tcp_send_empty_ack>
 8018596:	4603      	mov	r3, r0
 8018598:	e1b1      	b.n	80188fe <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 801859a:	6879      	ldr	r1, [r7, #4]
 801859c:	687b      	ldr	r3, [r7, #4]
 801859e:	3304      	adds	r3, #4
 80185a0:	461a      	mov	r2, r3
 80185a2:	6878      	ldr	r0, [r7, #4]
 80185a4:	f7ff f824 	bl	80175f0 <tcp_route>
 80185a8:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 80185aa:	697b      	ldr	r3, [r7, #20]
 80185ac:	2b00      	cmp	r3, #0
 80185ae:	d102      	bne.n	80185b6 <tcp_output+0x96>
    return ERR_RTE;
 80185b0:	f06f 0303 	mvn.w	r3, #3
 80185b4:	e1a3      	b.n	80188fe <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 80185b6:	687b      	ldr	r3, [r7, #4]
 80185b8:	2b00      	cmp	r3, #0
 80185ba:	d003      	beq.n	80185c4 <tcp_output+0xa4>
 80185bc:	687b      	ldr	r3, [r7, #4]
 80185be:	681b      	ldr	r3, [r3, #0]
 80185c0:	2b00      	cmp	r3, #0
 80185c2:	d111      	bne.n	80185e8 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 80185c4:	697b      	ldr	r3, [r7, #20]
 80185c6:	2b00      	cmp	r3, #0
 80185c8:	d002      	beq.n	80185d0 <tcp_output+0xb0>
 80185ca:	697b      	ldr	r3, [r7, #20]
 80185cc:	3304      	adds	r3, #4
 80185ce:	e000      	b.n	80185d2 <tcp_output+0xb2>
 80185d0:	2300      	movs	r3, #0
 80185d2:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 80185d4:	693b      	ldr	r3, [r7, #16]
 80185d6:	2b00      	cmp	r3, #0
 80185d8:	d102      	bne.n	80185e0 <tcp_output+0xc0>
      return ERR_RTE;
 80185da:	f06f 0303 	mvn.w	r3, #3
 80185de:	e18e      	b.n	80188fe <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 80185e0:	693b      	ldr	r3, [r7, #16]
 80185e2:	681a      	ldr	r2, [r3, #0]
 80185e4:	687b      	ldr	r3, [r7, #4]
 80185e6:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 80185e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80185ea:	68db      	ldr	r3, [r3, #12]
 80185ec:	685b      	ldr	r3, [r3, #4]
 80185ee:	4618      	mov	r0, r3
 80185f0:	f7f8 ff0d 	bl	801140e <lwip_htonl>
 80185f4:	4602      	mov	r2, r0
 80185f6:	687b      	ldr	r3, [r7, #4]
 80185f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80185fa:	1ad3      	subs	r3, r2, r3
 80185fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80185fe:	8912      	ldrh	r2, [r2, #8]
 8018600:	4413      	add	r3, r2
 8018602:	69ba      	ldr	r2, [r7, #24]
 8018604:	429a      	cmp	r2, r3
 8018606:	d227      	bcs.n	8018658 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8018608:	687b      	ldr	r3, [r7, #4]
 801860a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801860e:	461a      	mov	r2, r3
 8018610:	69bb      	ldr	r3, [r7, #24]
 8018612:	4293      	cmp	r3, r2
 8018614:	d114      	bne.n	8018640 <tcp_output+0x120>
 8018616:	687b      	ldr	r3, [r7, #4]
 8018618:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801861a:	2b00      	cmp	r3, #0
 801861c:	d110      	bne.n	8018640 <tcp_output+0x120>
 801861e:	687b      	ldr	r3, [r7, #4]
 8018620:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8018624:	2b00      	cmp	r3, #0
 8018626:	d10b      	bne.n	8018640 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8018628:	687b      	ldr	r3, [r7, #4]
 801862a:	2200      	movs	r2, #0
 801862c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8018630:	687b      	ldr	r3, [r7, #4]
 8018632:	2201      	movs	r2, #1
 8018634:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8018638:	687b      	ldr	r3, [r7, #4]
 801863a:	2200      	movs	r2, #0
 801863c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8018640:	687b      	ldr	r3, [r7, #4]
 8018642:	8b5b      	ldrh	r3, [r3, #26]
 8018644:	f003 0302 	and.w	r3, r3, #2
 8018648:	2b00      	cmp	r3, #0
 801864a:	f000 814d 	beq.w	80188e8 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 801864e:	6878      	ldr	r0, [r7, #4]
 8018650:	f000 fd6c 	bl	801912c <tcp_send_empty_ack>
 8018654:	4603      	mov	r3, r0
 8018656:	e152      	b.n	80188fe <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8018658:	687b      	ldr	r3, [r7, #4]
 801865a:	2200      	movs	r2, #0
 801865c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8018660:	687b      	ldr	r3, [r7, #4]
 8018662:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018664:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8018666:	6a3b      	ldr	r3, [r7, #32]
 8018668:	2b00      	cmp	r3, #0
 801866a:	f000 811c 	beq.w	80188a6 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 801866e:	e002      	b.n	8018676 <tcp_output+0x156>
 8018670:	6a3b      	ldr	r3, [r7, #32]
 8018672:	681b      	ldr	r3, [r3, #0]
 8018674:	623b      	str	r3, [r7, #32]
 8018676:	6a3b      	ldr	r3, [r7, #32]
 8018678:	681b      	ldr	r3, [r3, #0]
 801867a:	2b00      	cmp	r3, #0
 801867c:	d1f8      	bne.n	8018670 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801867e:	e112      	b.n	80188a6 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8018680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018682:	68db      	ldr	r3, [r3, #12]
 8018684:	899b      	ldrh	r3, [r3, #12]
 8018686:	b29b      	uxth	r3, r3
 8018688:	4618      	mov	r0, r3
 801868a:	f7f8 feab 	bl	80113e4 <lwip_htons>
 801868e:	4603      	mov	r3, r0
 8018690:	b2db      	uxtb	r3, r3
 8018692:	f003 0304 	and.w	r3, r3, #4
 8018696:	2b00      	cmp	r3, #0
 8018698:	d006      	beq.n	80186a8 <tcp_output+0x188>
 801869a:	4b43      	ldr	r3, [pc, #268]	; (80187a8 <tcp_output+0x288>)
 801869c:	f240 5236 	movw	r2, #1334	; 0x536
 80186a0:	4946      	ldr	r1, [pc, #280]	; (80187bc <tcp_output+0x29c>)
 80186a2:	4843      	ldr	r0, [pc, #268]	; (80187b0 <tcp_output+0x290>)
 80186a4:	f006 ffae 	bl	801f604 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80186a8:	687b      	ldr	r3, [r7, #4]
 80186aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80186ac:	2b00      	cmp	r3, #0
 80186ae:	d01f      	beq.n	80186f0 <tcp_output+0x1d0>
 80186b0:	687b      	ldr	r3, [r7, #4]
 80186b2:	8b5b      	ldrh	r3, [r3, #26]
 80186b4:	f003 0344 	and.w	r3, r3, #68	; 0x44
 80186b8:	2b00      	cmp	r3, #0
 80186ba:	d119      	bne.n	80186f0 <tcp_output+0x1d0>
 80186bc:	687b      	ldr	r3, [r7, #4]
 80186be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80186c0:	2b00      	cmp	r3, #0
 80186c2:	d00b      	beq.n	80186dc <tcp_output+0x1bc>
 80186c4:	687b      	ldr	r3, [r7, #4]
 80186c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80186c8:	681b      	ldr	r3, [r3, #0]
 80186ca:	2b00      	cmp	r3, #0
 80186cc:	d110      	bne.n	80186f0 <tcp_output+0x1d0>
 80186ce:	687b      	ldr	r3, [r7, #4]
 80186d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80186d2:	891a      	ldrh	r2, [r3, #8]
 80186d4:	687b      	ldr	r3, [r7, #4]
 80186d6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80186d8:	429a      	cmp	r2, r3
 80186da:	d209      	bcs.n	80186f0 <tcp_output+0x1d0>
 80186dc:	687b      	ldr	r3, [r7, #4]
 80186de:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80186e2:	2b00      	cmp	r3, #0
 80186e4:	d004      	beq.n	80186f0 <tcp_output+0x1d0>
 80186e6:	687b      	ldr	r3, [r7, #4]
 80186e8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80186ec:	2b08      	cmp	r3, #8
 80186ee:	d901      	bls.n	80186f4 <tcp_output+0x1d4>
 80186f0:	2301      	movs	r3, #1
 80186f2:	e000      	b.n	80186f6 <tcp_output+0x1d6>
 80186f4:	2300      	movs	r3, #0
 80186f6:	2b00      	cmp	r3, #0
 80186f8:	d106      	bne.n	8018708 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 80186fa:	687b      	ldr	r3, [r7, #4]
 80186fc:	8b5b      	ldrh	r3, [r3, #26]
 80186fe:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8018702:	2b00      	cmp	r3, #0
 8018704:	f000 80e4 	beq.w	80188d0 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8018708:	687b      	ldr	r3, [r7, #4]
 801870a:	7d1b      	ldrb	r3, [r3, #20]
 801870c:	2b02      	cmp	r3, #2
 801870e:	d00d      	beq.n	801872c <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8018710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018712:	68db      	ldr	r3, [r3, #12]
 8018714:	899b      	ldrh	r3, [r3, #12]
 8018716:	b29c      	uxth	r4, r3
 8018718:	2010      	movs	r0, #16
 801871a:	f7f8 fe63 	bl	80113e4 <lwip_htons>
 801871e:	4603      	mov	r3, r0
 8018720:	461a      	mov	r2, r3
 8018722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018724:	68db      	ldr	r3, [r3, #12]
 8018726:	4322      	orrs	r2, r4
 8018728:	b292      	uxth	r2, r2
 801872a:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 801872c:	697a      	ldr	r2, [r7, #20]
 801872e:	6879      	ldr	r1, [r7, #4]
 8018730:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018732:	f000 f909 	bl	8018948 <tcp_output_segment>
 8018736:	4603      	mov	r3, r0
 8018738:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 801873a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801873e:	2b00      	cmp	r3, #0
 8018740:	d009      	beq.n	8018756 <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8018742:	687b      	ldr	r3, [r7, #4]
 8018744:	8b5b      	ldrh	r3, [r3, #26]
 8018746:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801874a:	b29a      	uxth	r2, r3
 801874c:	687b      	ldr	r3, [r7, #4]
 801874e:	835a      	strh	r2, [r3, #26]
      return err;
 8018750:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018754:	e0d3      	b.n	80188fe <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8018756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018758:	681a      	ldr	r2, [r3, #0]
 801875a:	687b      	ldr	r3, [r7, #4]
 801875c:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 801875e:	687b      	ldr	r3, [r7, #4]
 8018760:	7d1b      	ldrb	r3, [r3, #20]
 8018762:	2b02      	cmp	r3, #2
 8018764:	d006      	beq.n	8018774 <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8018766:	687b      	ldr	r3, [r7, #4]
 8018768:	8b5b      	ldrh	r3, [r3, #26]
 801876a:	f023 0303 	bic.w	r3, r3, #3
 801876e:	b29a      	uxth	r2, r3
 8018770:	687b      	ldr	r3, [r7, #4]
 8018772:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8018774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018776:	68db      	ldr	r3, [r3, #12]
 8018778:	685b      	ldr	r3, [r3, #4]
 801877a:	4618      	mov	r0, r3
 801877c:	f7f8 fe47 	bl	801140e <lwip_htonl>
 8018780:	4604      	mov	r4, r0
 8018782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018784:	891b      	ldrh	r3, [r3, #8]
 8018786:	461d      	mov	r5, r3
 8018788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801878a:	68db      	ldr	r3, [r3, #12]
 801878c:	899b      	ldrh	r3, [r3, #12]
 801878e:	b29b      	uxth	r3, r3
 8018790:	4618      	mov	r0, r3
 8018792:	f7f8 fe27 	bl	80113e4 <lwip_htons>
 8018796:	4603      	mov	r3, r0
 8018798:	b2db      	uxtb	r3, r3
 801879a:	f003 0303 	and.w	r3, r3, #3
 801879e:	2b00      	cmp	r3, #0
 80187a0:	d00e      	beq.n	80187c0 <tcp_output+0x2a0>
 80187a2:	2301      	movs	r3, #1
 80187a4:	e00d      	b.n	80187c2 <tcp_output+0x2a2>
 80187a6:	bf00      	nop
 80187a8:	08025914 	.word	0x08025914
 80187ac:	08025e58 	.word	0x08025e58
 80187b0:	08025968 	.word	0x08025968
 80187b4:	08025e70 	.word	0x08025e70
 80187b8:	24007f50 	.word	0x24007f50
 80187bc:	08025e98 	.word	0x08025e98
 80187c0:	2300      	movs	r3, #0
 80187c2:	442b      	add	r3, r5
 80187c4:	4423      	add	r3, r4
 80187c6:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80187c8:	687b      	ldr	r3, [r7, #4]
 80187ca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80187cc:	68bb      	ldr	r3, [r7, #8]
 80187ce:	1ad3      	subs	r3, r2, r3
 80187d0:	2b00      	cmp	r3, #0
 80187d2:	da02      	bge.n	80187da <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 80187d4:	687b      	ldr	r3, [r7, #4]
 80187d6:	68ba      	ldr	r2, [r7, #8]
 80187d8:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 80187da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80187dc:	891b      	ldrh	r3, [r3, #8]
 80187de:	461c      	mov	r4, r3
 80187e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80187e2:	68db      	ldr	r3, [r3, #12]
 80187e4:	899b      	ldrh	r3, [r3, #12]
 80187e6:	b29b      	uxth	r3, r3
 80187e8:	4618      	mov	r0, r3
 80187ea:	f7f8 fdfb 	bl	80113e4 <lwip_htons>
 80187ee:	4603      	mov	r3, r0
 80187f0:	b2db      	uxtb	r3, r3
 80187f2:	f003 0303 	and.w	r3, r3, #3
 80187f6:	2b00      	cmp	r3, #0
 80187f8:	d001      	beq.n	80187fe <tcp_output+0x2de>
 80187fa:	2301      	movs	r3, #1
 80187fc:	e000      	b.n	8018800 <tcp_output+0x2e0>
 80187fe:	2300      	movs	r3, #0
 8018800:	4423      	add	r3, r4
 8018802:	2b00      	cmp	r3, #0
 8018804:	d049      	beq.n	801889a <tcp_output+0x37a>
      seg->next = NULL;
 8018806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018808:	2200      	movs	r2, #0
 801880a:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 801880c:	687b      	ldr	r3, [r7, #4]
 801880e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018810:	2b00      	cmp	r3, #0
 8018812:	d105      	bne.n	8018820 <tcp_output+0x300>
        pcb->unacked = seg;
 8018814:	687b      	ldr	r3, [r7, #4]
 8018816:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018818:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 801881a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801881c:	623b      	str	r3, [r7, #32]
 801881e:	e03f      	b.n	80188a0 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8018820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018822:	68db      	ldr	r3, [r3, #12]
 8018824:	685b      	ldr	r3, [r3, #4]
 8018826:	4618      	mov	r0, r3
 8018828:	f7f8 fdf1 	bl	801140e <lwip_htonl>
 801882c:	4604      	mov	r4, r0
 801882e:	6a3b      	ldr	r3, [r7, #32]
 8018830:	68db      	ldr	r3, [r3, #12]
 8018832:	685b      	ldr	r3, [r3, #4]
 8018834:	4618      	mov	r0, r3
 8018836:	f7f8 fdea 	bl	801140e <lwip_htonl>
 801883a:	4603      	mov	r3, r0
 801883c:	1ae3      	subs	r3, r4, r3
 801883e:	2b00      	cmp	r3, #0
 8018840:	da24      	bge.n	801888c <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8018842:	687b      	ldr	r3, [r7, #4]
 8018844:	3370      	adds	r3, #112	; 0x70
 8018846:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8018848:	e002      	b.n	8018850 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 801884a:	69fb      	ldr	r3, [r7, #28]
 801884c:	681b      	ldr	r3, [r3, #0]
 801884e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8018850:	69fb      	ldr	r3, [r7, #28]
 8018852:	681b      	ldr	r3, [r3, #0]
 8018854:	2b00      	cmp	r3, #0
 8018856:	d011      	beq.n	801887c <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8018858:	69fb      	ldr	r3, [r7, #28]
 801885a:	681b      	ldr	r3, [r3, #0]
 801885c:	68db      	ldr	r3, [r3, #12]
 801885e:	685b      	ldr	r3, [r3, #4]
 8018860:	4618      	mov	r0, r3
 8018862:	f7f8 fdd4 	bl	801140e <lwip_htonl>
 8018866:	4604      	mov	r4, r0
 8018868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801886a:	68db      	ldr	r3, [r3, #12]
 801886c:	685b      	ldr	r3, [r3, #4]
 801886e:	4618      	mov	r0, r3
 8018870:	f7f8 fdcd 	bl	801140e <lwip_htonl>
 8018874:	4603      	mov	r3, r0
 8018876:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8018878:	2b00      	cmp	r3, #0
 801887a:	dbe6      	blt.n	801884a <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 801887c:	69fb      	ldr	r3, [r7, #28]
 801887e:	681a      	ldr	r2, [r3, #0]
 8018880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018882:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8018884:	69fb      	ldr	r3, [r7, #28]
 8018886:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018888:	601a      	str	r2, [r3, #0]
 801888a:	e009      	b.n	80188a0 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 801888c:	6a3b      	ldr	r3, [r7, #32]
 801888e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018890:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8018892:	6a3b      	ldr	r3, [r7, #32]
 8018894:	681b      	ldr	r3, [r3, #0]
 8018896:	623b      	str	r3, [r7, #32]
 8018898:	e002      	b.n	80188a0 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 801889a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801889c:	f7fb ff1d 	bl	80146da <tcp_seg_free>
    }
    seg = pcb->unsent;
 80188a0:	687b      	ldr	r3, [r7, #4]
 80188a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80188a4:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 80188a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80188a8:	2b00      	cmp	r3, #0
 80188aa:	d012      	beq.n	80188d2 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 80188ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80188ae:	68db      	ldr	r3, [r3, #12]
 80188b0:	685b      	ldr	r3, [r3, #4]
 80188b2:	4618      	mov	r0, r3
 80188b4:	f7f8 fdab 	bl	801140e <lwip_htonl>
 80188b8:	4602      	mov	r2, r0
 80188ba:	687b      	ldr	r3, [r7, #4]
 80188bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80188be:	1ad3      	subs	r3, r2, r3
 80188c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80188c2:	8912      	ldrh	r2, [r2, #8]
 80188c4:	4413      	add	r3, r2
  while (seg != NULL &&
 80188c6:	69ba      	ldr	r2, [r7, #24]
 80188c8:	429a      	cmp	r2, r3
 80188ca:	f4bf aed9 	bcs.w	8018680 <tcp_output+0x160>
 80188ce:	e000      	b.n	80188d2 <tcp_output+0x3b2>
      break;
 80188d0:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 80188d2:	687b      	ldr	r3, [r7, #4]
 80188d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80188d6:	2b00      	cmp	r3, #0
 80188d8:	d108      	bne.n	80188ec <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80188da:	687b      	ldr	r3, [r7, #4]
 80188dc:	2200      	movs	r2, #0
 80188de:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 80188e2:	e004      	b.n	80188ee <tcp_output+0x3ce>
    goto output_done;
 80188e4:	bf00      	nop
 80188e6:	e002      	b.n	80188ee <tcp_output+0x3ce>
    goto output_done;
 80188e8:	bf00      	nop
 80188ea:	e000      	b.n	80188ee <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 80188ec:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 80188ee:	687b      	ldr	r3, [r7, #4]
 80188f0:	8b5b      	ldrh	r3, [r3, #26]
 80188f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80188f6:	b29a      	uxth	r2, r3
 80188f8:	687b      	ldr	r3, [r7, #4]
 80188fa:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 80188fc:	2300      	movs	r3, #0
}
 80188fe:	4618      	mov	r0, r3
 8018900:	3728      	adds	r7, #40	; 0x28
 8018902:	46bd      	mov	sp, r7
 8018904:	bdb0      	pop	{r4, r5, r7, pc}
 8018906:	bf00      	nop

08018908 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8018908:	b580      	push	{r7, lr}
 801890a:	b082      	sub	sp, #8
 801890c:	af00      	add	r7, sp, #0
 801890e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8018910:	687b      	ldr	r3, [r7, #4]
 8018912:	2b00      	cmp	r3, #0
 8018914:	d106      	bne.n	8018924 <tcp_output_segment_busy+0x1c>
 8018916:	4b09      	ldr	r3, [pc, #36]	; (801893c <tcp_output_segment_busy+0x34>)
 8018918:	f240 529a 	movw	r2, #1434	; 0x59a
 801891c:	4908      	ldr	r1, [pc, #32]	; (8018940 <tcp_output_segment_busy+0x38>)
 801891e:	4809      	ldr	r0, [pc, #36]	; (8018944 <tcp_output_segment_busy+0x3c>)
 8018920:	f006 fe70 	bl	801f604 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8018924:	687b      	ldr	r3, [r7, #4]
 8018926:	685b      	ldr	r3, [r3, #4]
 8018928:	7b9b      	ldrb	r3, [r3, #14]
 801892a:	2b01      	cmp	r3, #1
 801892c:	d001      	beq.n	8018932 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801892e:	2301      	movs	r3, #1
 8018930:	e000      	b.n	8018934 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8018932:	2300      	movs	r3, #0
}
 8018934:	4618      	mov	r0, r3
 8018936:	3708      	adds	r7, #8
 8018938:	46bd      	mov	sp, r7
 801893a:	bd80      	pop	{r7, pc}
 801893c:	08025914 	.word	0x08025914
 8018940:	08025eb0 	.word	0x08025eb0
 8018944:	08025968 	.word	0x08025968

08018948 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8018948:	b5b0      	push	{r4, r5, r7, lr}
 801894a:	b08c      	sub	sp, #48	; 0x30
 801894c:	af04      	add	r7, sp, #16
 801894e:	60f8      	str	r0, [r7, #12]
 8018950:	60b9      	str	r1, [r7, #8]
 8018952:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8018954:	68fb      	ldr	r3, [r7, #12]
 8018956:	2b00      	cmp	r3, #0
 8018958:	d106      	bne.n	8018968 <tcp_output_segment+0x20>
 801895a:	4b63      	ldr	r3, [pc, #396]	; (8018ae8 <tcp_output_segment+0x1a0>)
 801895c:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8018960:	4962      	ldr	r1, [pc, #392]	; (8018aec <tcp_output_segment+0x1a4>)
 8018962:	4863      	ldr	r0, [pc, #396]	; (8018af0 <tcp_output_segment+0x1a8>)
 8018964:	f006 fe4e 	bl	801f604 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8018968:	68bb      	ldr	r3, [r7, #8]
 801896a:	2b00      	cmp	r3, #0
 801896c:	d106      	bne.n	801897c <tcp_output_segment+0x34>
 801896e:	4b5e      	ldr	r3, [pc, #376]	; (8018ae8 <tcp_output_segment+0x1a0>)
 8018970:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8018974:	495f      	ldr	r1, [pc, #380]	; (8018af4 <tcp_output_segment+0x1ac>)
 8018976:	485e      	ldr	r0, [pc, #376]	; (8018af0 <tcp_output_segment+0x1a8>)
 8018978:	f006 fe44 	bl	801f604 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 801897c:	687b      	ldr	r3, [r7, #4]
 801897e:	2b00      	cmp	r3, #0
 8018980:	d106      	bne.n	8018990 <tcp_output_segment+0x48>
 8018982:	4b59      	ldr	r3, [pc, #356]	; (8018ae8 <tcp_output_segment+0x1a0>)
 8018984:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8018988:	495b      	ldr	r1, [pc, #364]	; (8018af8 <tcp_output_segment+0x1b0>)
 801898a:	4859      	ldr	r0, [pc, #356]	; (8018af0 <tcp_output_segment+0x1a8>)
 801898c:	f006 fe3a 	bl	801f604 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8018990:	68f8      	ldr	r0, [r7, #12]
 8018992:	f7ff ffb9 	bl	8018908 <tcp_output_segment_busy>
 8018996:	4603      	mov	r3, r0
 8018998:	2b00      	cmp	r3, #0
 801899a:	d001      	beq.n	80189a0 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 801899c:	2300      	movs	r3, #0
 801899e:	e09f      	b.n	8018ae0 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 80189a0:	68bb      	ldr	r3, [r7, #8]
 80189a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80189a4:	68fb      	ldr	r3, [r7, #12]
 80189a6:	68dc      	ldr	r4, [r3, #12]
 80189a8:	4610      	mov	r0, r2
 80189aa:	f7f8 fd30 	bl	801140e <lwip_htonl>
 80189ae:	4603      	mov	r3, r0
 80189b0:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 80189b2:	68bb      	ldr	r3, [r7, #8]
 80189b4:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80189b6:	68fb      	ldr	r3, [r7, #12]
 80189b8:	68dc      	ldr	r4, [r3, #12]
 80189ba:	4610      	mov	r0, r2
 80189bc:	f7f8 fd12 	bl	80113e4 <lwip_htons>
 80189c0:	4603      	mov	r3, r0
 80189c2:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80189c4:	68bb      	ldr	r3, [r7, #8]
 80189c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80189c8:	68ba      	ldr	r2, [r7, #8]
 80189ca:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80189cc:	441a      	add	r2, r3
 80189ce:	68bb      	ldr	r3, [r7, #8]
 80189d0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 80189d2:	68fb      	ldr	r3, [r7, #12]
 80189d4:	68db      	ldr	r3, [r3, #12]
 80189d6:	3314      	adds	r3, #20
 80189d8:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 80189da:	68fb      	ldr	r3, [r7, #12]
 80189dc:	7a9b      	ldrb	r3, [r3, #10]
 80189de:	f003 0301 	and.w	r3, r3, #1
 80189e2:	2b00      	cmp	r3, #0
 80189e4:	d015      	beq.n	8018a12 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 80189e6:	68bb      	ldr	r3, [r7, #8]
 80189e8:	3304      	adds	r3, #4
 80189ea:	461a      	mov	r2, r3
 80189ec:	6879      	ldr	r1, [r7, #4]
 80189ee:	f44f 7006 	mov.w	r0, #536	; 0x218
 80189f2:	f7fc fa37 	bl	8014e64 <tcp_eff_send_mss_netif>
 80189f6:	4603      	mov	r3, r0
 80189f8:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 80189fa:	8b7b      	ldrh	r3, [r7, #26]
 80189fc:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8018a00:	4618      	mov	r0, r3
 8018a02:	f7f8 fd04 	bl	801140e <lwip_htonl>
 8018a06:	4602      	mov	r2, r0
 8018a08:	69fb      	ldr	r3, [r7, #28]
 8018a0a:	601a      	str	r2, [r3, #0]
    opts += 1;
 8018a0c:	69fb      	ldr	r3, [r7, #28]
 8018a0e:	3304      	adds	r3, #4
 8018a10:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8018a12:	68bb      	ldr	r3, [r7, #8]
 8018a14:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8018a18:	2b00      	cmp	r3, #0
 8018a1a:	da02      	bge.n	8018a22 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8018a1c:	68bb      	ldr	r3, [r7, #8]
 8018a1e:	2200      	movs	r2, #0
 8018a20:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8018a22:	68bb      	ldr	r3, [r7, #8]
 8018a24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018a26:	2b00      	cmp	r3, #0
 8018a28:	d10c      	bne.n	8018a44 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8018a2a:	4b34      	ldr	r3, [pc, #208]	; (8018afc <tcp_output_segment+0x1b4>)
 8018a2c:	681a      	ldr	r2, [r3, #0]
 8018a2e:	68bb      	ldr	r3, [r7, #8]
 8018a30:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8018a32:	68fb      	ldr	r3, [r7, #12]
 8018a34:	68db      	ldr	r3, [r3, #12]
 8018a36:	685b      	ldr	r3, [r3, #4]
 8018a38:	4618      	mov	r0, r3
 8018a3a:	f7f8 fce8 	bl	801140e <lwip_htonl>
 8018a3e:	4602      	mov	r2, r0
 8018a40:	68bb      	ldr	r3, [r7, #8]
 8018a42:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8018a44:	68fb      	ldr	r3, [r7, #12]
 8018a46:	68da      	ldr	r2, [r3, #12]
 8018a48:	68fb      	ldr	r3, [r7, #12]
 8018a4a:	685b      	ldr	r3, [r3, #4]
 8018a4c:	685b      	ldr	r3, [r3, #4]
 8018a4e:	1ad3      	subs	r3, r2, r3
 8018a50:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8018a52:	68fb      	ldr	r3, [r7, #12]
 8018a54:	685b      	ldr	r3, [r3, #4]
 8018a56:	8959      	ldrh	r1, [r3, #10]
 8018a58:	68fb      	ldr	r3, [r7, #12]
 8018a5a:	685b      	ldr	r3, [r3, #4]
 8018a5c:	8b3a      	ldrh	r2, [r7, #24]
 8018a5e:	1a8a      	subs	r2, r1, r2
 8018a60:	b292      	uxth	r2, r2
 8018a62:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8018a64:	68fb      	ldr	r3, [r7, #12]
 8018a66:	685b      	ldr	r3, [r3, #4]
 8018a68:	8919      	ldrh	r1, [r3, #8]
 8018a6a:	68fb      	ldr	r3, [r7, #12]
 8018a6c:	685b      	ldr	r3, [r3, #4]
 8018a6e:	8b3a      	ldrh	r2, [r7, #24]
 8018a70:	1a8a      	subs	r2, r1, r2
 8018a72:	b292      	uxth	r2, r2
 8018a74:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8018a76:	68fb      	ldr	r3, [r7, #12]
 8018a78:	685b      	ldr	r3, [r3, #4]
 8018a7a:	68fa      	ldr	r2, [r7, #12]
 8018a7c:	68d2      	ldr	r2, [r2, #12]
 8018a7e:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8018a80:	68fb      	ldr	r3, [r7, #12]
 8018a82:	68db      	ldr	r3, [r3, #12]
 8018a84:	2200      	movs	r2, #0
 8018a86:	741a      	strb	r2, [r3, #16]
 8018a88:	2200      	movs	r2, #0
 8018a8a:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8018a8c:	68fb      	ldr	r3, [r7, #12]
 8018a8e:	68db      	ldr	r3, [r3, #12]
 8018a90:	f103 0214 	add.w	r2, r3, #20
 8018a94:	68fb      	ldr	r3, [r7, #12]
 8018a96:	7a9b      	ldrb	r3, [r3, #10]
 8018a98:	009b      	lsls	r3, r3, #2
 8018a9a:	f003 0304 	and.w	r3, r3, #4
 8018a9e:	4413      	add	r3, r2
 8018aa0:	69fa      	ldr	r2, [r7, #28]
 8018aa2:	429a      	cmp	r2, r3
 8018aa4:	d006      	beq.n	8018ab4 <tcp_output_segment+0x16c>
 8018aa6:	4b10      	ldr	r3, [pc, #64]	; (8018ae8 <tcp_output_segment+0x1a0>)
 8018aa8:	f240 621c 	movw	r2, #1564	; 0x61c
 8018aac:	4914      	ldr	r1, [pc, #80]	; (8018b00 <tcp_output_segment+0x1b8>)
 8018aae:	4810      	ldr	r0, [pc, #64]	; (8018af0 <tcp_output_segment+0x1a8>)
 8018ab0:	f006 fda8 	bl	801f604 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8018ab4:	68fb      	ldr	r3, [r7, #12]
 8018ab6:	6858      	ldr	r0, [r3, #4]
 8018ab8:	68b9      	ldr	r1, [r7, #8]
 8018aba:	68bb      	ldr	r3, [r7, #8]
 8018abc:	1d1c      	adds	r4, r3, #4
 8018abe:	68bb      	ldr	r3, [r7, #8]
 8018ac0:	7add      	ldrb	r5, [r3, #11]
 8018ac2:	68bb      	ldr	r3, [r7, #8]
 8018ac4:	7a9b      	ldrb	r3, [r3, #10]
 8018ac6:	687a      	ldr	r2, [r7, #4]
 8018ac8:	9202      	str	r2, [sp, #8]
 8018aca:	2206      	movs	r2, #6
 8018acc:	9201      	str	r2, [sp, #4]
 8018ace:	9300      	str	r3, [sp, #0]
 8018ad0:	462b      	mov	r3, r5
 8018ad2:	4622      	mov	r2, r4
 8018ad4:	f004 fce0 	bl	801d498 <ip4_output_if>
 8018ad8:	4603      	mov	r3, r0
 8018ada:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8018adc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8018ae0:	4618      	mov	r0, r3
 8018ae2:	3720      	adds	r7, #32
 8018ae4:	46bd      	mov	sp, r7
 8018ae6:	bdb0      	pop	{r4, r5, r7, pc}
 8018ae8:	08025914 	.word	0x08025914
 8018aec:	08025ed8 	.word	0x08025ed8
 8018af0:	08025968 	.word	0x08025968
 8018af4:	08025ef8 	.word	0x08025ef8
 8018af8:	08025f18 	.word	0x08025f18
 8018afc:	24007f40 	.word	0x24007f40
 8018b00:	08025f3c 	.word	0x08025f3c

08018b04 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8018b04:	b5b0      	push	{r4, r5, r7, lr}
 8018b06:	b084      	sub	sp, #16
 8018b08:	af00      	add	r7, sp, #0
 8018b0a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8018b0c:	687b      	ldr	r3, [r7, #4]
 8018b0e:	2b00      	cmp	r3, #0
 8018b10:	d106      	bne.n	8018b20 <tcp_rexmit_rto_prepare+0x1c>
 8018b12:	4b31      	ldr	r3, [pc, #196]	; (8018bd8 <tcp_rexmit_rto_prepare+0xd4>)
 8018b14:	f240 6263 	movw	r2, #1635	; 0x663
 8018b18:	4930      	ldr	r1, [pc, #192]	; (8018bdc <tcp_rexmit_rto_prepare+0xd8>)
 8018b1a:	4831      	ldr	r0, [pc, #196]	; (8018be0 <tcp_rexmit_rto_prepare+0xdc>)
 8018b1c:	f006 fd72 	bl	801f604 <iprintf>

  if (pcb->unacked == NULL) {
 8018b20:	687b      	ldr	r3, [r7, #4]
 8018b22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018b24:	2b00      	cmp	r3, #0
 8018b26:	d102      	bne.n	8018b2e <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8018b28:	f06f 0305 	mvn.w	r3, #5
 8018b2c:	e050      	b.n	8018bd0 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8018b2e:	687b      	ldr	r3, [r7, #4]
 8018b30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018b32:	60fb      	str	r3, [r7, #12]
 8018b34:	e00b      	b.n	8018b4e <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8018b36:	68f8      	ldr	r0, [r7, #12]
 8018b38:	f7ff fee6 	bl	8018908 <tcp_output_segment_busy>
 8018b3c:	4603      	mov	r3, r0
 8018b3e:	2b00      	cmp	r3, #0
 8018b40:	d002      	beq.n	8018b48 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8018b42:	f06f 0305 	mvn.w	r3, #5
 8018b46:	e043      	b.n	8018bd0 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8018b48:	68fb      	ldr	r3, [r7, #12]
 8018b4a:	681b      	ldr	r3, [r3, #0]
 8018b4c:	60fb      	str	r3, [r7, #12]
 8018b4e:	68fb      	ldr	r3, [r7, #12]
 8018b50:	681b      	ldr	r3, [r3, #0]
 8018b52:	2b00      	cmp	r3, #0
 8018b54:	d1ef      	bne.n	8018b36 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8018b56:	68f8      	ldr	r0, [r7, #12]
 8018b58:	f7ff fed6 	bl	8018908 <tcp_output_segment_busy>
 8018b5c:	4603      	mov	r3, r0
 8018b5e:	2b00      	cmp	r3, #0
 8018b60:	d002      	beq.n	8018b68 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8018b62:	f06f 0305 	mvn.w	r3, #5
 8018b66:	e033      	b.n	8018bd0 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8018b68:	687b      	ldr	r3, [r7, #4]
 8018b6a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8018b6c:	68fb      	ldr	r3, [r7, #12]
 8018b6e:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8018b70:	687b      	ldr	r3, [r7, #4]
 8018b72:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8018b74:	687b      	ldr	r3, [r7, #4]
 8018b76:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8018b78:	687b      	ldr	r3, [r7, #4]
 8018b7a:	2200      	movs	r2, #0
 8018b7c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8018b7e:	687b      	ldr	r3, [r7, #4]
 8018b80:	8b5b      	ldrh	r3, [r3, #26]
 8018b82:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8018b86:	b29a      	uxth	r2, r3
 8018b88:	687b      	ldr	r3, [r7, #4]
 8018b8a:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8018b8c:	68fb      	ldr	r3, [r7, #12]
 8018b8e:	68db      	ldr	r3, [r3, #12]
 8018b90:	685b      	ldr	r3, [r3, #4]
 8018b92:	4618      	mov	r0, r3
 8018b94:	f7f8 fc3b 	bl	801140e <lwip_htonl>
 8018b98:	4604      	mov	r4, r0
 8018b9a:	68fb      	ldr	r3, [r7, #12]
 8018b9c:	891b      	ldrh	r3, [r3, #8]
 8018b9e:	461d      	mov	r5, r3
 8018ba0:	68fb      	ldr	r3, [r7, #12]
 8018ba2:	68db      	ldr	r3, [r3, #12]
 8018ba4:	899b      	ldrh	r3, [r3, #12]
 8018ba6:	b29b      	uxth	r3, r3
 8018ba8:	4618      	mov	r0, r3
 8018baa:	f7f8 fc1b 	bl	80113e4 <lwip_htons>
 8018bae:	4603      	mov	r3, r0
 8018bb0:	b2db      	uxtb	r3, r3
 8018bb2:	f003 0303 	and.w	r3, r3, #3
 8018bb6:	2b00      	cmp	r3, #0
 8018bb8:	d001      	beq.n	8018bbe <tcp_rexmit_rto_prepare+0xba>
 8018bba:	2301      	movs	r3, #1
 8018bbc:	e000      	b.n	8018bc0 <tcp_rexmit_rto_prepare+0xbc>
 8018bbe:	2300      	movs	r3, #0
 8018bc0:	442b      	add	r3, r5
 8018bc2:	18e2      	adds	r2, r4, r3
 8018bc4:	687b      	ldr	r3, [r7, #4]
 8018bc6:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8018bc8:	687b      	ldr	r3, [r7, #4]
 8018bca:	2200      	movs	r2, #0
 8018bcc:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8018bce:	2300      	movs	r3, #0
}
 8018bd0:	4618      	mov	r0, r3
 8018bd2:	3710      	adds	r7, #16
 8018bd4:	46bd      	mov	sp, r7
 8018bd6:	bdb0      	pop	{r4, r5, r7, pc}
 8018bd8:	08025914 	.word	0x08025914
 8018bdc:	08025f50 	.word	0x08025f50
 8018be0:	08025968 	.word	0x08025968

08018be4 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8018be4:	b580      	push	{r7, lr}
 8018be6:	b082      	sub	sp, #8
 8018be8:	af00      	add	r7, sp, #0
 8018bea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8018bec:	687b      	ldr	r3, [r7, #4]
 8018bee:	2b00      	cmp	r3, #0
 8018bf0:	d106      	bne.n	8018c00 <tcp_rexmit_rto_commit+0x1c>
 8018bf2:	4b0d      	ldr	r3, [pc, #52]	; (8018c28 <tcp_rexmit_rto_commit+0x44>)
 8018bf4:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8018bf8:	490c      	ldr	r1, [pc, #48]	; (8018c2c <tcp_rexmit_rto_commit+0x48>)
 8018bfa:	480d      	ldr	r0, [pc, #52]	; (8018c30 <tcp_rexmit_rto_commit+0x4c>)
 8018bfc:	f006 fd02 	bl	801f604 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8018c00:	687b      	ldr	r3, [r7, #4]
 8018c02:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8018c06:	2bff      	cmp	r3, #255	; 0xff
 8018c08:	d007      	beq.n	8018c1a <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8018c0a:	687b      	ldr	r3, [r7, #4]
 8018c0c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8018c10:	3301      	adds	r3, #1
 8018c12:	b2da      	uxtb	r2, r3
 8018c14:	687b      	ldr	r3, [r7, #4]
 8018c16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8018c1a:	6878      	ldr	r0, [r7, #4]
 8018c1c:	f7ff fc80 	bl	8018520 <tcp_output>
}
 8018c20:	bf00      	nop
 8018c22:	3708      	adds	r7, #8
 8018c24:	46bd      	mov	sp, r7
 8018c26:	bd80      	pop	{r7, pc}
 8018c28:	08025914 	.word	0x08025914
 8018c2c:	08025f74 	.word	0x08025f74
 8018c30:	08025968 	.word	0x08025968

08018c34 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8018c34:	b580      	push	{r7, lr}
 8018c36:	b082      	sub	sp, #8
 8018c38:	af00      	add	r7, sp, #0
 8018c3a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8018c3c:	687b      	ldr	r3, [r7, #4]
 8018c3e:	2b00      	cmp	r3, #0
 8018c40:	d106      	bne.n	8018c50 <tcp_rexmit_rto+0x1c>
 8018c42:	4b0a      	ldr	r3, [pc, #40]	; (8018c6c <tcp_rexmit_rto+0x38>)
 8018c44:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8018c48:	4909      	ldr	r1, [pc, #36]	; (8018c70 <tcp_rexmit_rto+0x3c>)
 8018c4a:	480a      	ldr	r0, [pc, #40]	; (8018c74 <tcp_rexmit_rto+0x40>)
 8018c4c:	f006 fcda 	bl	801f604 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8018c50:	6878      	ldr	r0, [r7, #4]
 8018c52:	f7ff ff57 	bl	8018b04 <tcp_rexmit_rto_prepare>
 8018c56:	4603      	mov	r3, r0
 8018c58:	2b00      	cmp	r3, #0
 8018c5a:	d102      	bne.n	8018c62 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8018c5c:	6878      	ldr	r0, [r7, #4]
 8018c5e:	f7ff ffc1 	bl	8018be4 <tcp_rexmit_rto_commit>
  }
}
 8018c62:	bf00      	nop
 8018c64:	3708      	adds	r7, #8
 8018c66:	46bd      	mov	sp, r7
 8018c68:	bd80      	pop	{r7, pc}
 8018c6a:	bf00      	nop
 8018c6c:	08025914 	.word	0x08025914
 8018c70:	08025f98 	.word	0x08025f98
 8018c74:	08025968 	.word	0x08025968

08018c78 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8018c78:	b590      	push	{r4, r7, lr}
 8018c7a:	b085      	sub	sp, #20
 8018c7c:	af00      	add	r7, sp, #0
 8018c7e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8018c80:	687b      	ldr	r3, [r7, #4]
 8018c82:	2b00      	cmp	r3, #0
 8018c84:	d106      	bne.n	8018c94 <tcp_rexmit+0x1c>
 8018c86:	4b2f      	ldr	r3, [pc, #188]	; (8018d44 <tcp_rexmit+0xcc>)
 8018c88:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8018c8c:	492e      	ldr	r1, [pc, #184]	; (8018d48 <tcp_rexmit+0xd0>)
 8018c8e:	482f      	ldr	r0, [pc, #188]	; (8018d4c <tcp_rexmit+0xd4>)
 8018c90:	f006 fcb8 	bl	801f604 <iprintf>

  if (pcb->unacked == NULL) {
 8018c94:	687b      	ldr	r3, [r7, #4]
 8018c96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018c98:	2b00      	cmp	r3, #0
 8018c9a:	d102      	bne.n	8018ca2 <tcp_rexmit+0x2a>
    return ERR_VAL;
 8018c9c:	f06f 0305 	mvn.w	r3, #5
 8018ca0:	e04c      	b.n	8018d3c <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8018ca2:	687b      	ldr	r3, [r7, #4]
 8018ca4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018ca6:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8018ca8:	68b8      	ldr	r0, [r7, #8]
 8018caa:	f7ff fe2d 	bl	8018908 <tcp_output_segment_busy>
 8018cae:	4603      	mov	r3, r0
 8018cb0:	2b00      	cmp	r3, #0
 8018cb2:	d002      	beq.n	8018cba <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8018cb4:	f06f 0305 	mvn.w	r3, #5
 8018cb8:	e040      	b.n	8018d3c <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8018cba:	68bb      	ldr	r3, [r7, #8]
 8018cbc:	681a      	ldr	r2, [r3, #0]
 8018cbe:	687b      	ldr	r3, [r7, #4]
 8018cc0:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8018cc2:	687b      	ldr	r3, [r7, #4]
 8018cc4:	336c      	adds	r3, #108	; 0x6c
 8018cc6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8018cc8:	e002      	b.n	8018cd0 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8018cca:	68fb      	ldr	r3, [r7, #12]
 8018ccc:	681b      	ldr	r3, [r3, #0]
 8018cce:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8018cd0:	68fb      	ldr	r3, [r7, #12]
 8018cd2:	681b      	ldr	r3, [r3, #0]
 8018cd4:	2b00      	cmp	r3, #0
 8018cd6:	d011      	beq.n	8018cfc <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8018cd8:	68fb      	ldr	r3, [r7, #12]
 8018cda:	681b      	ldr	r3, [r3, #0]
 8018cdc:	68db      	ldr	r3, [r3, #12]
 8018cde:	685b      	ldr	r3, [r3, #4]
 8018ce0:	4618      	mov	r0, r3
 8018ce2:	f7f8 fb94 	bl	801140e <lwip_htonl>
 8018ce6:	4604      	mov	r4, r0
 8018ce8:	68bb      	ldr	r3, [r7, #8]
 8018cea:	68db      	ldr	r3, [r3, #12]
 8018cec:	685b      	ldr	r3, [r3, #4]
 8018cee:	4618      	mov	r0, r3
 8018cf0:	f7f8 fb8d 	bl	801140e <lwip_htonl>
 8018cf4:	4603      	mov	r3, r0
 8018cf6:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8018cf8:	2b00      	cmp	r3, #0
 8018cfa:	dbe6      	blt.n	8018cca <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8018cfc:	68fb      	ldr	r3, [r7, #12]
 8018cfe:	681a      	ldr	r2, [r3, #0]
 8018d00:	68bb      	ldr	r3, [r7, #8]
 8018d02:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8018d04:	68fb      	ldr	r3, [r7, #12]
 8018d06:	68ba      	ldr	r2, [r7, #8]
 8018d08:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8018d0a:	68bb      	ldr	r3, [r7, #8]
 8018d0c:	681b      	ldr	r3, [r3, #0]
 8018d0e:	2b00      	cmp	r3, #0
 8018d10:	d103      	bne.n	8018d1a <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8018d12:	687b      	ldr	r3, [r7, #4]
 8018d14:	2200      	movs	r2, #0
 8018d16:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8018d1a:	687b      	ldr	r3, [r7, #4]
 8018d1c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8018d20:	2bff      	cmp	r3, #255	; 0xff
 8018d22:	d007      	beq.n	8018d34 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8018d24:	687b      	ldr	r3, [r7, #4]
 8018d26:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8018d2a:	3301      	adds	r3, #1
 8018d2c:	b2da      	uxtb	r2, r3
 8018d2e:	687b      	ldr	r3, [r7, #4]
 8018d30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8018d34:	687b      	ldr	r3, [r7, #4]
 8018d36:	2200      	movs	r2, #0
 8018d38:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8018d3a:	2300      	movs	r3, #0
}
 8018d3c:	4618      	mov	r0, r3
 8018d3e:	3714      	adds	r7, #20
 8018d40:	46bd      	mov	sp, r7
 8018d42:	bd90      	pop	{r4, r7, pc}
 8018d44:	08025914 	.word	0x08025914
 8018d48:	08025fb4 	.word	0x08025fb4
 8018d4c:	08025968 	.word	0x08025968

08018d50 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8018d50:	b580      	push	{r7, lr}
 8018d52:	b082      	sub	sp, #8
 8018d54:	af00      	add	r7, sp, #0
 8018d56:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8018d58:	687b      	ldr	r3, [r7, #4]
 8018d5a:	2b00      	cmp	r3, #0
 8018d5c:	d106      	bne.n	8018d6c <tcp_rexmit_fast+0x1c>
 8018d5e:	4b2a      	ldr	r3, [pc, #168]	; (8018e08 <tcp_rexmit_fast+0xb8>)
 8018d60:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8018d64:	4929      	ldr	r1, [pc, #164]	; (8018e0c <tcp_rexmit_fast+0xbc>)
 8018d66:	482a      	ldr	r0, [pc, #168]	; (8018e10 <tcp_rexmit_fast+0xc0>)
 8018d68:	f006 fc4c 	bl	801f604 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8018d6c:	687b      	ldr	r3, [r7, #4]
 8018d6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018d70:	2b00      	cmp	r3, #0
 8018d72:	d045      	beq.n	8018e00 <tcp_rexmit_fast+0xb0>
 8018d74:	687b      	ldr	r3, [r7, #4]
 8018d76:	8b5b      	ldrh	r3, [r3, #26]
 8018d78:	f003 0304 	and.w	r3, r3, #4
 8018d7c:	2b00      	cmp	r3, #0
 8018d7e:	d13f      	bne.n	8018e00 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8018d80:	6878      	ldr	r0, [r7, #4]
 8018d82:	f7ff ff79 	bl	8018c78 <tcp_rexmit>
 8018d86:	4603      	mov	r3, r0
 8018d88:	2b00      	cmp	r3, #0
 8018d8a:	d139      	bne.n	8018e00 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8018d8c:	687b      	ldr	r3, [r7, #4]
 8018d8e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8018d92:	687b      	ldr	r3, [r7, #4]
 8018d94:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8018d98:	4293      	cmp	r3, r2
 8018d9a:	bf28      	it	cs
 8018d9c:	4613      	movcs	r3, r2
 8018d9e:	b29b      	uxth	r3, r3
 8018da0:	2b00      	cmp	r3, #0
 8018da2:	da00      	bge.n	8018da6 <tcp_rexmit_fast+0x56>
 8018da4:	3301      	adds	r3, #1
 8018da6:	105b      	asrs	r3, r3, #1
 8018da8:	b29a      	uxth	r2, r3
 8018daa:	687b      	ldr	r3, [r7, #4]
 8018dac:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8018db0:	687b      	ldr	r3, [r7, #4]
 8018db2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8018db6:	461a      	mov	r2, r3
 8018db8:	687b      	ldr	r3, [r7, #4]
 8018dba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018dbc:	005b      	lsls	r3, r3, #1
 8018dbe:	429a      	cmp	r2, r3
 8018dc0:	d206      	bcs.n	8018dd0 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8018dc2:	687b      	ldr	r3, [r7, #4]
 8018dc4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018dc6:	005b      	lsls	r3, r3, #1
 8018dc8:	b29a      	uxth	r2, r3
 8018dca:	687b      	ldr	r3, [r7, #4]
 8018dcc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8018dd0:	687b      	ldr	r3, [r7, #4]
 8018dd2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8018dd6:	687b      	ldr	r3, [r7, #4]
 8018dd8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018dda:	4619      	mov	r1, r3
 8018ddc:	0049      	lsls	r1, r1, #1
 8018dde:	440b      	add	r3, r1
 8018de0:	b29b      	uxth	r3, r3
 8018de2:	4413      	add	r3, r2
 8018de4:	b29a      	uxth	r2, r3
 8018de6:	687b      	ldr	r3, [r7, #4]
 8018de8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8018dec:	687b      	ldr	r3, [r7, #4]
 8018dee:	8b5b      	ldrh	r3, [r3, #26]
 8018df0:	f043 0304 	orr.w	r3, r3, #4
 8018df4:	b29a      	uxth	r2, r3
 8018df6:	687b      	ldr	r3, [r7, #4]
 8018df8:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8018dfa:	687b      	ldr	r3, [r7, #4]
 8018dfc:	2200      	movs	r2, #0
 8018dfe:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8018e00:	bf00      	nop
 8018e02:	3708      	adds	r7, #8
 8018e04:	46bd      	mov	sp, r7
 8018e06:	bd80      	pop	{r7, pc}
 8018e08:	08025914 	.word	0x08025914
 8018e0c:	08025fcc 	.word	0x08025fcc
 8018e10:	08025968 	.word	0x08025968

08018e14 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8018e14:	b580      	push	{r7, lr}
 8018e16:	b086      	sub	sp, #24
 8018e18:	af00      	add	r7, sp, #0
 8018e1a:	60f8      	str	r0, [r7, #12]
 8018e1c:	607b      	str	r3, [r7, #4]
 8018e1e:	460b      	mov	r3, r1
 8018e20:	817b      	strh	r3, [r7, #10]
 8018e22:	4613      	mov	r3, r2
 8018e24:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8018e26:	897a      	ldrh	r2, [r7, #10]
 8018e28:	893b      	ldrh	r3, [r7, #8]
 8018e2a:	4413      	add	r3, r2
 8018e2c:	b29b      	uxth	r3, r3
 8018e2e:	3314      	adds	r3, #20
 8018e30:	b29b      	uxth	r3, r3
 8018e32:	f44f 7220 	mov.w	r2, #640	; 0x280
 8018e36:	4619      	mov	r1, r3
 8018e38:	2022      	movs	r0, #34	; 0x22
 8018e3a:	f7f9 fca5 	bl	8012788 <pbuf_alloc>
 8018e3e:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8018e40:	697b      	ldr	r3, [r7, #20]
 8018e42:	2b00      	cmp	r3, #0
 8018e44:	d04d      	beq.n	8018ee2 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8018e46:	897b      	ldrh	r3, [r7, #10]
 8018e48:	3313      	adds	r3, #19
 8018e4a:	697a      	ldr	r2, [r7, #20]
 8018e4c:	8952      	ldrh	r2, [r2, #10]
 8018e4e:	4293      	cmp	r3, r2
 8018e50:	db06      	blt.n	8018e60 <tcp_output_alloc_header_common+0x4c>
 8018e52:	4b26      	ldr	r3, [pc, #152]	; (8018eec <tcp_output_alloc_header_common+0xd8>)
 8018e54:	f240 7223 	movw	r2, #1827	; 0x723
 8018e58:	4925      	ldr	r1, [pc, #148]	; (8018ef0 <tcp_output_alloc_header_common+0xdc>)
 8018e5a:	4826      	ldr	r0, [pc, #152]	; (8018ef4 <tcp_output_alloc_header_common+0xe0>)
 8018e5c:	f006 fbd2 	bl	801f604 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8018e60:	697b      	ldr	r3, [r7, #20]
 8018e62:	685b      	ldr	r3, [r3, #4]
 8018e64:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8018e66:	8c3b      	ldrh	r3, [r7, #32]
 8018e68:	4618      	mov	r0, r3
 8018e6a:	f7f8 fabb 	bl	80113e4 <lwip_htons>
 8018e6e:	4603      	mov	r3, r0
 8018e70:	461a      	mov	r2, r3
 8018e72:	693b      	ldr	r3, [r7, #16]
 8018e74:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8018e76:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018e78:	4618      	mov	r0, r3
 8018e7a:	f7f8 fab3 	bl	80113e4 <lwip_htons>
 8018e7e:	4603      	mov	r3, r0
 8018e80:	461a      	mov	r2, r3
 8018e82:	693b      	ldr	r3, [r7, #16]
 8018e84:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8018e86:	693b      	ldr	r3, [r7, #16]
 8018e88:	687a      	ldr	r2, [r7, #4]
 8018e8a:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8018e8c:	68f8      	ldr	r0, [r7, #12]
 8018e8e:	f7f8 fabe 	bl	801140e <lwip_htonl>
 8018e92:	4602      	mov	r2, r0
 8018e94:	693b      	ldr	r3, [r7, #16]
 8018e96:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8018e98:	897b      	ldrh	r3, [r7, #10]
 8018e9a:	089b      	lsrs	r3, r3, #2
 8018e9c:	b29b      	uxth	r3, r3
 8018e9e:	3305      	adds	r3, #5
 8018ea0:	b29b      	uxth	r3, r3
 8018ea2:	031b      	lsls	r3, r3, #12
 8018ea4:	b29a      	uxth	r2, r3
 8018ea6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8018eaa:	b29b      	uxth	r3, r3
 8018eac:	4313      	orrs	r3, r2
 8018eae:	b29b      	uxth	r3, r3
 8018eb0:	4618      	mov	r0, r3
 8018eb2:	f7f8 fa97 	bl	80113e4 <lwip_htons>
 8018eb6:	4603      	mov	r3, r0
 8018eb8:	461a      	mov	r2, r3
 8018eba:	693b      	ldr	r3, [r7, #16]
 8018ebc:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8018ebe:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8018ec0:	4618      	mov	r0, r3
 8018ec2:	f7f8 fa8f 	bl	80113e4 <lwip_htons>
 8018ec6:	4603      	mov	r3, r0
 8018ec8:	461a      	mov	r2, r3
 8018eca:	693b      	ldr	r3, [r7, #16]
 8018ecc:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8018ece:	693b      	ldr	r3, [r7, #16]
 8018ed0:	2200      	movs	r2, #0
 8018ed2:	741a      	strb	r2, [r3, #16]
 8018ed4:	2200      	movs	r2, #0
 8018ed6:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8018ed8:	693b      	ldr	r3, [r7, #16]
 8018eda:	2200      	movs	r2, #0
 8018edc:	749a      	strb	r2, [r3, #18]
 8018ede:	2200      	movs	r2, #0
 8018ee0:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8018ee2:	697b      	ldr	r3, [r7, #20]
}
 8018ee4:	4618      	mov	r0, r3
 8018ee6:	3718      	adds	r7, #24
 8018ee8:	46bd      	mov	sp, r7
 8018eea:	bd80      	pop	{r7, pc}
 8018eec:	08025914 	.word	0x08025914
 8018ef0:	08025fec 	.word	0x08025fec
 8018ef4:	08025968 	.word	0x08025968

08018ef8 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8018ef8:	b5b0      	push	{r4, r5, r7, lr}
 8018efa:	b08a      	sub	sp, #40	; 0x28
 8018efc:	af04      	add	r7, sp, #16
 8018efe:	60f8      	str	r0, [r7, #12]
 8018f00:	607b      	str	r3, [r7, #4]
 8018f02:	460b      	mov	r3, r1
 8018f04:	817b      	strh	r3, [r7, #10]
 8018f06:	4613      	mov	r3, r2
 8018f08:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8018f0a:	68fb      	ldr	r3, [r7, #12]
 8018f0c:	2b00      	cmp	r3, #0
 8018f0e:	d106      	bne.n	8018f1e <tcp_output_alloc_header+0x26>
 8018f10:	4b15      	ldr	r3, [pc, #84]	; (8018f68 <tcp_output_alloc_header+0x70>)
 8018f12:	f240 7242 	movw	r2, #1858	; 0x742
 8018f16:	4915      	ldr	r1, [pc, #84]	; (8018f6c <tcp_output_alloc_header+0x74>)
 8018f18:	4815      	ldr	r0, [pc, #84]	; (8018f70 <tcp_output_alloc_header+0x78>)
 8018f1a:	f006 fb73 	bl	801f604 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8018f1e:	68fb      	ldr	r3, [r7, #12]
 8018f20:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8018f22:	68fb      	ldr	r3, [r7, #12]
 8018f24:	8adb      	ldrh	r3, [r3, #22]
 8018f26:	68fa      	ldr	r2, [r7, #12]
 8018f28:	8b12      	ldrh	r2, [r2, #24]
 8018f2a:	68f9      	ldr	r1, [r7, #12]
 8018f2c:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8018f2e:	893d      	ldrh	r5, [r7, #8]
 8018f30:	897c      	ldrh	r4, [r7, #10]
 8018f32:	9103      	str	r1, [sp, #12]
 8018f34:	2110      	movs	r1, #16
 8018f36:	9102      	str	r1, [sp, #8]
 8018f38:	9201      	str	r2, [sp, #4]
 8018f3a:	9300      	str	r3, [sp, #0]
 8018f3c:	687b      	ldr	r3, [r7, #4]
 8018f3e:	462a      	mov	r2, r5
 8018f40:	4621      	mov	r1, r4
 8018f42:	f7ff ff67 	bl	8018e14 <tcp_output_alloc_header_common>
 8018f46:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8018f48:	697b      	ldr	r3, [r7, #20]
 8018f4a:	2b00      	cmp	r3, #0
 8018f4c:	d006      	beq.n	8018f5c <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8018f4e:	68fb      	ldr	r3, [r7, #12]
 8018f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018f52:	68fa      	ldr	r2, [r7, #12]
 8018f54:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8018f56:	441a      	add	r2, r3
 8018f58:	68fb      	ldr	r3, [r7, #12]
 8018f5a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8018f5c:	697b      	ldr	r3, [r7, #20]
}
 8018f5e:	4618      	mov	r0, r3
 8018f60:	3718      	adds	r7, #24
 8018f62:	46bd      	mov	sp, r7
 8018f64:	bdb0      	pop	{r4, r5, r7, pc}
 8018f66:	bf00      	nop
 8018f68:	08025914 	.word	0x08025914
 8018f6c:	0802601c 	.word	0x0802601c
 8018f70:	08025968 	.word	0x08025968

08018f74 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8018f74:	b580      	push	{r7, lr}
 8018f76:	b088      	sub	sp, #32
 8018f78:	af00      	add	r7, sp, #0
 8018f7a:	60f8      	str	r0, [r7, #12]
 8018f7c:	60b9      	str	r1, [r7, #8]
 8018f7e:	4611      	mov	r1, r2
 8018f80:	461a      	mov	r2, r3
 8018f82:	460b      	mov	r3, r1
 8018f84:	71fb      	strb	r3, [r7, #7]
 8018f86:	4613      	mov	r3, r2
 8018f88:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8018f8a:	2300      	movs	r3, #0
 8018f8c:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8018f8e:	68bb      	ldr	r3, [r7, #8]
 8018f90:	2b00      	cmp	r3, #0
 8018f92:	d106      	bne.n	8018fa2 <tcp_output_fill_options+0x2e>
 8018f94:	4b13      	ldr	r3, [pc, #76]	; (8018fe4 <tcp_output_fill_options+0x70>)
 8018f96:	f240 7256 	movw	r2, #1878	; 0x756
 8018f9a:	4913      	ldr	r1, [pc, #76]	; (8018fe8 <tcp_output_fill_options+0x74>)
 8018f9c:	4813      	ldr	r0, [pc, #76]	; (8018fec <tcp_output_fill_options+0x78>)
 8018f9e:	f006 fb31 	bl	801f604 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8018fa2:	68bb      	ldr	r3, [r7, #8]
 8018fa4:	685b      	ldr	r3, [r3, #4]
 8018fa6:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8018fa8:	69bb      	ldr	r3, [r7, #24]
 8018faa:	3314      	adds	r3, #20
 8018fac:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8018fae:	69bb      	ldr	r3, [r7, #24]
 8018fb0:	f103 0214 	add.w	r2, r3, #20
 8018fb4:	8bfb      	ldrh	r3, [r7, #30]
 8018fb6:	009b      	lsls	r3, r3, #2
 8018fb8:	4619      	mov	r1, r3
 8018fba:	79fb      	ldrb	r3, [r7, #7]
 8018fbc:	009b      	lsls	r3, r3, #2
 8018fbe:	f003 0304 	and.w	r3, r3, #4
 8018fc2:	440b      	add	r3, r1
 8018fc4:	4413      	add	r3, r2
 8018fc6:	697a      	ldr	r2, [r7, #20]
 8018fc8:	429a      	cmp	r2, r3
 8018fca:	d006      	beq.n	8018fda <tcp_output_fill_options+0x66>
 8018fcc:	4b05      	ldr	r3, [pc, #20]	; (8018fe4 <tcp_output_fill_options+0x70>)
 8018fce:	f240 7275 	movw	r2, #1909	; 0x775
 8018fd2:	4907      	ldr	r1, [pc, #28]	; (8018ff0 <tcp_output_fill_options+0x7c>)
 8018fd4:	4805      	ldr	r0, [pc, #20]	; (8018fec <tcp_output_fill_options+0x78>)
 8018fd6:	f006 fb15 	bl	801f604 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8018fda:	bf00      	nop
 8018fdc:	3720      	adds	r7, #32
 8018fde:	46bd      	mov	sp, r7
 8018fe0:	bd80      	pop	{r7, pc}
 8018fe2:	bf00      	nop
 8018fe4:	08025914 	.word	0x08025914
 8018fe8:	08026044 	.word	0x08026044
 8018fec:	08025968 	.word	0x08025968
 8018ff0:	08025f3c 	.word	0x08025f3c

08018ff4 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8018ff4:	b580      	push	{r7, lr}
 8018ff6:	b08a      	sub	sp, #40	; 0x28
 8018ff8:	af04      	add	r7, sp, #16
 8018ffa:	60f8      	str	r0, [r7, #12]
 8018ffc:	60b9      	str	r1, [r7, #8]
 8018ffe:	607a      	str	r2, [r7, #4]
 8019000:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8019002:	68bb      	ldr	r3, [r7, #8]
 8019004:	2b00      	cmp	r3, #0
 8019006:	d106      	bne.n	8019016 <tcp_output_control_segment+0x22>
 8019008:	4b1c      	ldr	r3, [pc, #112]	; (801907c <tcp_output_control_segment+0x88>)
 801900a:	f240 7287 	movw	r2, #1927	; 0x787
 801900e:	491c      	ldr	r1, [pc, #112]	; (8019080 <tcp_output_control_segment+0x8c>)
 8019010:	481c      	ldr	r0, [pc, #112]	; (8019084 <tcp_output_control_segment+0x90>)
 8019012:	f006 faf7 	bl	801f604 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8019016:	683a      	ldr	r2, [r7, #0]
 8019018:	6879      	ldr	r1, [r7, #4]
 801901a:	68f8      	ldr	r0, [r7, #12]
 801901c:	f7fe fae8 	bl	80175f0 <tcp_route>
 8019020:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8019022:	693b      	ldr	r3, [r7, #16]
 8019024:	2b00      	cmp	r3, #0
 8019026:	d102      	bne.n	801902e <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8019028:	23fc      	movs	r3, #252	; 0xfc
 801902a:	75fb      	strb	r3, [r7, #23]
 801902c:	e01c      	b.n	8019068 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801902e:	68fb      	ldr	r3, [r7, #12]
 8019030:	2b00      	cmp	r3, #0
 8019032:	d006      	beq.n	8019042 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8019034:	68fb      	ldr	r3, [r7, #12]
 8019036:	7adb      	ldrb	r3, [r3, #11]
 8019038:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801903a:	68fb      	ldr	r3, [r7, #12]
 801903c:	7a9b      	ldrb	r3, [r3, #10]
 801903e:	757b      	strb	r3, [r7, #21]
 8019040:	e003      	b.n	801904a <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8019042:	23ff      	movs	r3, #255	; 0xff
 8019044:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8019046:	2300      	movs	r3, #0
 8019048:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801904a:	7dba      	ldrb	r2, [r7, #22]
 801904c:	693b      	ldr	r3, [r7, #16]
 801904e:	9302      	str	r3, [sp, #8]
 8019050:	2306      	movs	r3, #6
 8019052:	9301      	str	r3, [sp, #4]
 8019054:	7d7b      	ldrb	r3, [r7, #21]
 8019056:	9300      	str	r3, [sp, #0]
 8019058:	4613      	mov	r3, r2
 801905a:	683a      	ldr	r2, [r7, #0]
 801905c:	6879      	ldr	r1, [r7, #4]
 801905e:	68b8      	ldr	r0, [r7, #8]
 8019060:	f004 fa1a 	bl	801d498 <ip4_output_if>
 8019064:	4603      	mov	r3, r0
 8019066:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8019068:	68b8      	ldr	r0, [r7, #8]
 801906a:	f7f9 fea3 	bl	8012db4 <pbuf_free>
  return err;
 801906e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8019072:	4618      	mov	r0, r3
 8019074:	3718      	adds	r7, #24
 8019076:	46bd      	mov	sp, r7
 8019078:	bd80      	pop	{r7, pc}
 801907a:	bf00      	nop
 801907c:	08025914 	.word	0x08025914
 8019080:	0802606c 	.word	0x0802606c
 8019084:	08025968 	.word	0x08025968

08019088 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8019088:	b590      	push	{r4, r7, lr}
 801908a:	b08b      	sub	sp, #44	; 0x2c
 801908c:	af04      	add	r7, sp, #16
 801908e:	60f8      	str	r0, [r7, #12]
 8019090:	60b9      	str	r1, [r7, #8]
 8019092:	607a      	str	r2, [r7, #4]
 8019094:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8019096:	683b      	ldr	r3, [r7, #0]
 8019098:	2b00      	cmp	r3, #0
 801909a:	d106      	bne.n	80190aa <tcp_rst+0x22>
 801909c:	4b1f      	ldr	r3, [pc, #124]	; (801911c <tcp_rst+0x94>)
 801909e:	f240 72c4 	movw	r2, #1988	; 0x7c4
 80190a2:	491f      	ldr	r1, [pc, #124]	; (8019120 <tcp_rst+0x98>)
 80190a4:	481f      	ldr	r0, [pc, #124]	; (8019124 <tcp_rst+0x9c>)
 80190a6:	f006 faad 	bl	801f604 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 80190aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80190ac:	2b00      	cmp	r3, #0
 80190ae:	d106      	bne.n	80190be <tcp_rst+0x36>
 80190b0:	4b1a      	ldr	r3, [pc, #104]	; (801911c <tcp_rst+0x94>)
 80190b2:	f240 72c5 	movw	r2, #1989	; 0x7c5
 80190b6:	491c      	ldr	r1, [pc, #112]	; (8019128 <tcp_rst+0xa0>)
 80190b8:	481a      	ldr	r0, [pc, #104]	; (8019124 <tcp_rst+0x9c>)
 80190ba:	f006 faa3 	bl	801f604 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80190be:	2300      	movs	r3, #0
 80190c0:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 80190c2:	f246 0308 	movw	r3, #24584	; 0x6008
 80190c6:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 80190c8:	7dfb      	ldrb	r3, [r7, #23]
 80190ca:	b29c      	uxth	r4, r3
 80190cc:	68b8      	ldr	r0, [r7, #8]
 80190ce:	f7f8 f99e 	bl	801140e <lwip_htonl>
 80190d2:	4602      	mov	r2, r0
 80190d4:	8abb      	ldrh	r3, [r7, #20]
 80190d6:	9303      	str	r3, [sp, #12]
 80190d8:	2314      	movs	r3, #20
 80190da:	9302      	str	r3, [sp, #8]
 80190dc:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80190de:	9301      	str	r3, [sp, #4]
 80190e0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80190e2:	9300      	str	r3, [sp, #0]
 80190e4:	4613      	mov	r3, r2
 80190e6:	2200      	movs	r2, #0
 80190e8:	4621      	mov	r1, r4
 80190ea:	6878      	ldr	r0, [r7, #4]
 80190ec:	f7ff fe92 	bl	8018e14 <tcp_output_alloc_header_common>
 80190f0:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 80190f2:	693b      	ldr	r3, [r7, #16]
 80190f4:	2b00      	cmp	r3, #0
 80190f6:	d00c      	beq.n	8019112 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80190f8:	7dfb      	ldrb	r3, [r7, #23]
 80190fa:	2200      	movs	r2, #0
 80190fc:	6939      	ldr	r1, [r7, #16]
 80190fe:	68f8      	ldr	r0, [r7, #12]
 8019100:	f7ff ff38 	bl	8018f74 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8019104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019106:	683a      	ldr	r2, [r7, #0]
 8019108:	6939      	ldr	r1, [r7, #16]
 801910a:	68f8      	ldr	r0, [r7, #12]
 801910c:	f7ff ff72 	bl	8018ff4 <tcp_output_control_segment>
 8019110:	e000      	b.n	8019114 <tcp_rst+0x8c>
    return;
 8019112:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8019114:	371c      	adds	r7, #28
 8019116:	46bd      	mov	sp, r7
 8019118:	bd90      	pop	{r4, r7, pc}
 801911a:	bf00      	nop
 801911c:	08025914 	.word	0x08025914
 8019120:	08026098 	.word	0x08026098
 8019124:	08025968 	.word	0x08025968
 8019128:	080260b4 	.word	0x080260b4

0801912c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 801912c:	b590      	push	{r4, r7, lr}
 801912e:	b087      	sub	sp, #28
 8019130:	af00      	add	r7, sp, #0
 8019132:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8019134:	2300      	movs	r3, #0
 8019136:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8019138:	2300      	movs	r3, #0
 801913a:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 801913c:	687b      	ldr	r3, [r7, #4]
 801913e:	2b00      	cmp	r3, #0
 8019140:	d106      	bne.n	8019150 <tcp_send_empty_ack+0x24>
 8019142:	4b28      	ldr	r3, [pc, #160]	; (80191e4 <tcp_send_empty_ack+0xb8>)
 8019144:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8019148:	4927      	ldr	r1, [pc, #156]	; (80191e8 <tcp_send_empty_ack+0xbc>)
 801914a:	4828      	ldr	r0, [pc, #160]	; (80191ec <tcp_send_empty_ack+0xc0>)
 801914c:	f006 fa5a 	bl	801f604 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8019150:	7dfb      	ldrb	r3, [r7, #23]
 8019152:	009b      	lsls	r3, r3, #2
 8019154:	b2db      	uxtb	r3, r3
 8019156:	f003 0304 	and.w	r3, r3, #4
 801915a:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 801915c:	7d7b      	ldrb	r3, [r7, #21]
 801915e:	b29c      	uxth	r4, r3
 8019160:	687b      	ldr	r3, [r7, #4]
 8019162:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019164:	4618      	mov	r0, r3
 8019166:	f7f8 f952 	bl	801140e <lwip_htonl>
 801916a:	4603      	mov	r3, r0
 801916c:	2200      	movs	r2, #0
 801916e:	4621      	mov	r1, r4
 8019170:	6878      	ldr	r0, [r7, #4]
 8019172:	f7ff fec1 	bl	8018ef8 <tcp_output_alloc_header>
 8019176:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8019178:	693b      	ldr	r3, [r7, #16]
 801917a:	2b00      	cmp	r3, #0
 801917c:	d109      	bne.n	8019192 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801917e:	687b      	ldr	r3, [r7, #4]
 8019180:	8b5b      	ldrh	r3, [r3, #26]
 8019182:	f043 0303 	orr.w	r3, r3, #3
 8019186:	b29a      	uxth	r2, r3
 8019188:	687b      	ldr	r3, [r7, #4]
 801918a:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 801918c:	f06f 0301 	mvn.w	r3, #1
 8019190:	e023      	b.n	80191da <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8019192:	7dbb      	ldrb	r3, [r7, #22]
 8019194:	7dfa      	ldrb	r2, [r7, #23]
 8019196:	6939      	ldr	r1, [r7, #16]
 8019198:	6878      	ldr	r0, [r7, #4]
 801919a:	f7ff feeb 	bl	8018f74 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801919e:	687a      	ldr	r2, [r7, #4]
 80191a0:	687b      	ldr	r3, [r7, #4]
 80191a2:	3304      	adds	r3, #4
 80191a4:	6939      	ldr	r1, [r7, #16]
 80191a6:	6878      	ldr	r0, [r7, #4]
 80191a8:	f7ff ff24 	bl	8018ff4 <tcp_output_control_segment>
 80191ac:	4603      	mov	r3, r0
 80191ae:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 80191b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80191b4:	2b00      	cmp	r3, #0
 80191b6:	d007      	beq.n	80191c8 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80191b8:	687b      	ldr	r3, [r7, #4]
 80191ba:	8b5b      	ldrh	r3, [r3, #26]
 80191bc:	f043 0303 	orr.w	r3, r3, #3
 80191c0:	b29a      	uxth	r2, r3
 80191c2:	687b      	ldr	r3, [r7, #4]
 80191c4:	835a      	strh	r2, [r3, #26]
 80191c6:	e006      	b.n	80191d6 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80191c8:	687b      	ldr	r3, [r7, #4]
 80191ca:	8b5b      	ldrh	r3, [r3, #26]
 80191cc:	f023 0303 	bic.w	r3, r3, #3
 80191d0:	b29a      	uxth	r2, r3
 80191d2:	687b      	ldr	r3, [r7, #4]
 80191d4:	835a      	strh	r2, [r3, #26]
  }

  return err;
 80191d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80191da:	4618      	mov	r0, r3
 80191dc:	371c      	adds	r7, #28
 80191de:	46bd      	mov	sp, r7
 80191e0:	bd90      	pop	{r4, r7, pc}
 80191e2:	bf00      	nop
 80191e4:	08025914 	.word	0x08025914
 80191e8:	080260d0 	.word	0x080260d0
 80191ec:	08025968 	.word	0x08025968

080191f0 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 80191f0:	b590      	push	{r4, r7, lr}
 80191f2:	b087      	sub	sp, #28
 80191f4:	af00      	add	r7, sp, #0
 80191f6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80191f8:	2300      	movs	r3, #0
 80191fa:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 80191fc:	687b      	ldr	r3, [r7, #4]
 80191fe:	2b00      	cmp	r3, #0
 8019200:	d106      	bne.n	8019210 <tcp_keepalive+0x20>
 8019202:	4b18      	ldr	r3, [pc, #96]	; (8019264 <tcp_keepalive+0x74>)
 8019204:	f640 0224 	movw	r2, #2084	; 0x824
 8019208:	4917      	ldr	r1, [pc, #92]	; (8019268 <tcp_keepalive+0x78>)
 801920a:	4818      	ldr	r0, [pc, #96]	; (801926c <tcp_keepalive+0x7c>)
 801920c:	f006 f9fa 	bl	801f604 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8019210:	7dfb      	ldrb	r3, [r7, #23]
 8019212:	b29c      	uxth	r4, r3
 8019214:	687b      	ldr	r3, [r7, #4]
 8019216:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019218:	3b01      	subs	r3, #1
 801921a:	4618      	mov	r0, r3
 801921c:	f7f8 f8f7 	bl	801140e <lwip_htonl>
 8019220:	4603      	mov	r3, r0
 8019222:	2200      	movs	r2, #0
 8019224:	4621      	mov	r1, r4
 8019226:	6878      	ldr	r0, [r7, #4]
 8019228:	f7ff fe66 	bl	8018ef8 <tcp_output_alloc_header>
 801922c:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801922e:	693b      	ldr	r3, [r7, #16]
 8019230:	2b00      	cmp	r3, #0
 8019232:	d102      	bne.n	801923a <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8019234:	f04f 33ff 	mov.w	r3, #4294967295
 8019238:	e010      	b.n	801925c <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801923a:	7dfb      	ldrb	r3, [r7, #23]
 801923c:	2200      	movs	r2, #0
 801923e:	6939      	ldr	r1, [r7, #16]
 8019240:	6878      	ldr	r0, [r7, #4]
 8019242:	f7ff fe97 	bl	8018f74 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8019246:	687a      	ldr	r2, [r7, #4]
 8019248:	687b      	ldr	r3, [r7, #4]
 801924a:	3304      	adds	r3, #4
 801924c:	6939      	ldr	r1, [r7, #16]
 801924e:	6878      	ldr	r0, [r7, #4]
 8019250:	f7ff fed0 	bl	8018ff4 <tcp_output_control_segment>
 8019254:	4603      	mov	r3, r0
 8019256:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8019258:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801925c:	4618      	mov	r0, r3
 801925e:	371c      	adds	r7, #28
 8019260:	46bd      	mov	sp, r7
 8019262:	bd90      	pop	{r4, r7, pc}
 8019264:	08025914 	.word	0x08025914
 8019268:	080260f0 	.word	0x080260f0
 801926c:	08025968 	.word	0x08025968

08019270 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8019270:	b590      	push	{r4, r7, lr}
 8019272:	b08b      	sub	sp, #44	; 0x2c
 8019274:	af00      	add	r7, sp, #0
 8019276:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8019278:	2300      	movs	r3, #0
 801927a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801927e:	687b      	ldr	r3, [r7, #4]
 8019280:	2b00      	cmp	r3, #0
 8019282:	d106      	bne.n	8019292 <tcp_zero_window_probe+0x22>
 8019284:	4b4c      	ldr	r3, [pc, #304]	; (80193b8 <tcp_zero_window_probe+0x148>)
 8019286:	f640 024f 	movw	r2, #2127	; 0x84f
 801928a:	494c      	ldr	r1, [pc, #304]	; (80193bc <tcp_zero_window_probe+0x14c>)
 801928c:	484c      	ldr	r0, [pc, #304]	; (80193c0 <tcp_zero_window_probe+0x150>)
 801928e:	f006 f9b9 	bl	801f604 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8019292:	687b      	ldr	r3, [r7, #4]
 8019294:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019296:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8019298:	6a3b      	ldr	r3, [r7, #32]
 801929a:	2b00      	cmp	r3, #0
 801929c:	d101      	bne.n	80192a2 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801929e:	2300      	movs	r3, #0
 80192a0:	e086      	b.n	80193b0 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 80192a2:	687b      	ldr	r3, [r7, #4]
 80192a4:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80192a8:	2bff      	cmp	r3, #255	; 0xff
 80192aa:	d007      	beq.n	80192bc <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 80192ac:	687b      	ldr	r3, [r7, #4]
 80192ae:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80192b2:	3301      	adds	r3, #1
 80192b4:	b2da      	uxtb	r2, r3
 80192b6:	687b      	ldr	r3, [r7, #4]
 80192b8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 80192bc:	6a3b      	ldr	r3, [r7, #32]
 80192be:	68db      	ldr	r3, [r3, #12]
 80192c0:	899b      	ldrh	r3, [r3, #12]
 80192c2:	b29b      	uxth	r3, r3
 80192c4:	4618      	mov	r0, r3
 80192c6:	f7f8 f88d 	bl	80113e4 <lwip_htons>
 80192ca:	4603      	mov	r3, r0
 80192cc:	b2db      	uxtb	r3, r3
 80192ce:	f003 0301 	and.w	r3, r3, #1
 80192d2:	2b00      	cmp	r3, #0
 80192d4:	d005      	beq.n	80192e2 <tcp_zero_window_probe+0x72>
 80192d6:	6a3b      	ldr	r3, [r7, #32]
 80192d8:	891b      	ldrh	r3, [r3, #8]
 80192da:	2b00      	cmp	r3, #0
 80192dc:	d101      	bne.n	80192e2 <tcp_zero_window_probe+0x72>
 80192de:	2301      	movs	r3, #1
 80192e0:	e000      	b.n	80192e4 <tcp_zero_window_probe+0x74>
 80192e2:	2300      	movs	r3, #0
 80192e4:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 80192e6:	7ffb      	ldrb	r3, [r7, #31]
 80192e8:	2b00      	cmp	r3, #0
 80192ea:	bf0c      	ite	eq
 80192ec:	2301      	moveq	r3, #1
 80192ee:	2300      	movne	r3, #0
 80192f0:	b2db      	uxtb	r3, r3
 80192f2:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 80192f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80192f8:	b299      	uxth	r1, r3
 80192fa:	6a3b      	ldr	r3, [r7, #32]
 80192fc:	68db      	ldr	r3, [r3, #12]
 80192fe:	685b      	ldr	r3, [r3, #4]
 8019300:	8bba      	ldrh	r2, [r7, #28]
 8019302:	6878      	ldr	r0, [r7, #4]
 8019304:	f7ff fdf8 	bl	8018ef8 <tcp_output_alloc_header>
 8019308:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801930a:	69bb      	ldr	r3, [r7, #24]
 801930c:	2b00      	cmp	r3, #0
 801930e:	d102      	bne.n	8019316 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8019310:	f04f 33ff 	mov.w	r3, #4294967295
 8019314:	e04c      	b.n	80193b0 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8019316:	69bb      	ldr	r3, [r7, #24]
 8019318:	685b      	ldr	r3, [r3, #4]
 801931a:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 801931c:	7ffb      	ldrb	r3, [r7, #31]
 801931e:	2b00      	cmp	r3, #0
 8019320:	d011      	beq.n	8019346 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8019322:	697b      	ldr	r3, [r7, #20]
 8019324:	899b      	ldrh	r3, [r3, #12]
 8019326:	b29b      	uxth	r3, r3
 8019328:	b21b      	sxth	r3, r3
 801932a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801932e:	b21c      	sxth	r4, r3
 8019330:	2011      	movs	r0, #17
 8019332:	f7f8 f857 	bl	80113e4 <lwip_htons>
 8019336:	4603      	mov	r3, r0
 8019338:	b21b      	sxth	r3, r3
 801933a:	4323      	orrs	r3, r4
 801933c:	b21b      	sxth	r3, r3
 801933e:	b29a      	uxth	r2, r3
 8019340:	697b      	ldr	r3, [r7, #20]
 8019342:	819a      	strh	r2, [r3, #12]
 8019344:	e010      	b.n	8019368 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8019346:	69bb      	ldr	r3, [r7, #24]
 8019348:	685b      	ldr	r3, [r3, #4]
 801934a:	3314      	adds	r3, #20
 801934c:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801934e:	6a3b      	ldr	r3, [r7, #32]
 8019350:	6858      	ldr	r0, [r3, #4]
 8019352:	6a3b      	ldr	r3, [r7, #32]
 8019354:	685b      	ldr	r3, [r3, #4]
 8019356:	891a      	ldrh	r2, [r3, #8]
 8019358:	6a3b      	ldr	r3, [r7, #32]
 801935a:	891b      	ldrh	r3, [r3, #8]
 801935c:	1ad3      	subs	r3, r2, r3
 801935e:	b29b      	uxth	r3, r3
 8019360:	2201      	movs	r2, #1
 8019362:	6939      	ldr	r1, [r7, #16]
 8019364:	f7f9 ff2c 	bl	80131c0 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8019368:	6a3b      	ldr	r3, [r7, #32]
 801936a:	68db      	ldr	r3, [r3, #12]
 801936c:	685b      	ldr	r3, [r3, #4]
 801936e:	4618      	mov	r0, r3
 8019370:	f7f8 f84d 	bl	801140e <lwip_htonl>
 8019374:	4603      	mov	r3, r0
 8019376:	3301      	adds	r3, #1
 8019378:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801937a:	687b      	ldr	r3, [r7, #4]
 801937c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801937e:	68fb      	ldr	r3, [r7, #12]
 8019380:	1ad3      	subs	r3, r2, r3
 8019382:	2b00      	cmp	r3, #0
 8019384:	da02      	bge.n	801938c <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8019386:	687b      	ldr	r3, [r7, #4]
 8019388:	68fa      	ldr	r2, [r7, #12]
 801938a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801938c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019390:	2200      	movs	r2, #0
 8019392:	69b9      	ldr	r1, [r7, #24]
 8019394:	6878      	ldr	r0, [r7, #4]
 8019396:	f7ff fded 	bl	8018f74 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801939a:	687a      	ldr	r2, [r7, #4]
 801939c:	687b      	ldr	r3, [r7, #4]
 801939e:	3304      	adds	r3, #4
 80193a0:	69b9      	ldr	r1, [r7, #24]
 80193a2:	6878      	ldr	r0, [r7, #4]
 80193a4:	f7ff fe26 	bl	8018ff4 <tcp_output_control_segment>
 80193a8:	4603      	mov	r3, r0
 80193aa:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80193ac:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80193b0:	4618      	mov	r0, r3
 80193b2:	372c      	adds	r7, #44	; 0x2c
 80193b4:	46bd      	mov	sp, r7
 80193b6:	bd90      	pop	{r4, r7, pc}
 80193b8:	08025914 	.word	0x08025914
 80193bc:	0802610c 	.word	0x0802610c
 80193c0:	08025968 	.word	0x08025968

080193c4 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 80193c4:	b580      	push	{r7, lr}
 80193c6:	b082      	sub	sp, #8
 80193c8:	af00      	add	r7, sp, #0
 80193ca:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 80193cc:	f7f9 ffe6 	bl	801339c <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 80193d0:	4b0a      	ldr	r3, [pc, #40]	; (80193fc <tcpip_tcp_timer+0x38>)
 80193d2:	681b      	ldr	r3, [r3, #0]
 80193d4:	2b00      	cmp	r3, #0
 80193d6:	d103      	bne.n	80193e0 <tcpip_tcp_timer+0x1c>
 80193d8:	4b09      	ldr	r3, [pc, #36]	; (8019400 <tcpip_tcp_timer+0x3c>)
 80193da:	681b      	ldr	r3, [r3, #0]
 80193dc:	2b00      	cmp	r3, #0
 80193de:	d005      	beq.n	80193ec <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80193e0:	2200      	movs	r2, #0
 80193e2:	4908      	ldr	r1, [pc, #32]	; (8019404 <tcpip_tcp_timer+0x40>)
 80193e4:	20fa      	movs	r0, #250	; 0xfa
 80193e6:	f000 f8f3 	bl	80195d0 <sys_timeout>
 80193ea:	e003      	b.n	80193f4 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 80193ec:	4b06      	ldr	r3, [pc, #24]	; (8019408 <tcpip_tcp_timer+0x44>)
 80193ee:	2200      	movs	r2, #0
 80193f0:	601a      	str	r2, [r3, #0]
  }
}
 80193f2:	bf00      	nop
 80193f4:	bf00      	nop
 80193f6:	3708      	adds	r7, #8
 80193f8:	46bd      	mov	sp, r7
 80193fa:	bd80      	pop	{r7, pc}
 80193fc:	24007f3c 	.word	0x24007f3c
 8019400:	24007f4c 	.word	0x24007f4c
 8019404:	080193c5 	.word	0x080193c5
 8019408:	2400457c 	.word	0x2400457c

0801940c <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 801940c:	b580      	push	{r7, lr}
 801940e:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8019410:	4b0a      	ldr	r3, [pc, #40]	; (801943c <tcp_timer_needed+0x30>)
 8019412:	681b      	ldr	r3, [r3, #0]
 8019414:	2b00      	cmp	r3, #0
 8019416:	d10f      	bne.n	8019438 <tcp_timer_needed+0x2c>
 8019418:	4b09      	ldr	r3, [pc, #36]	; (8019440 <tcp_timer_needed+0x34>)
 801941a:	681b      	ldr	r3, [r3, #0]
 801941c:	2b00      	cmp	r3, #0
 801941e:	d103      	bne.n	8019428 <tcp_timer_needed+0x1c>
 8019420:	4b08      	ldr	r3, [pc, #32]	; (8019444 <tcp_timer_needed+0x38>)
 8019422:	681b      	ldr	r3, [r3, #0]
 8019424:	2b00      	cmp	r3, #0
 8019426:	d007      	beq.n	8019438 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8019428:	4b04      	ldr	r3, [pc, #16]	; (801943c <tcp_timer_needed+0x30>)
 801942a:	2201      	movs	r2, #1
 801942c:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801942e:	2200      	movs	r2, #0
 8019430:	4905      	ldr	r1, [pc, #20]	; (8019448 <tcp_timer_needed+0x3c>)
 8019432:	20fa      	movs	r0, #250	; 0xfa
 8019434:	f000 f8cc 	bl	80195d0 <sys_timeout>
  }
}
 8019438:	bf00      	nop
 801943a:	bd80      	pop	{r7, pc}
 801943c:	2400457c 	.word	0x2400457c
 8019440:	24007f3c 	.word	0x24007f3c
 8019444:	24007f4c 	.word	0x24007f4c
 8019448:	080193c5 	.word	0x080193c5

0801944c <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 801944c:	b580      	push	{r7, lr}
 801944e:	b086      	sub	sp, #24
 8019450:	af00      	add	r7, sp, #0
 8019452:	60f8      	str	r0, [r7, #12]
 8019454:	60b9      	str	r1, [r7, #8]
 8019456:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8019458:	200a      	movs	r0, #10
 801945a:	f7f8 fd53 	bl	8011f04 <memp_malloc>
 801945e:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8019460:	693b      	ldr	r3, [r7, #16]
 8019462:	2b00      	cmp	r3, #0
 8019464:	d109      	bne.n	801947a <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8019466:	693b      	ldr	r3, [r7, #16]
 8019468:	2b00      	cmp	r3, #0
 801946a:	d151      	bne.n	8019510 <sys_timeout_abs+0xc4>
 801946c:	4b2a      	ldr	r3, [pc, #168]	; (8019518 <sys_timeout_abs+0xcc>)
 801946e:	22be      	movs	r2, #190	; 0xbe
 8019470:	492a      	ldr	r1, [pc, #168]	; (801951c <sys_timeout_abs+0xd0>)
 8019472:	482b      	ldr	r0, [pc, #172]	; (8019520 <sys_timeout_abs+0xd4>)
 8019474:	f006 f8c6 	bl	801f604 <iprintf>
    return;
 8019478:	e04a      	b.n	8019510 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801947a:	693b      	ldr	r3, [r7, #16]
 801947c:	2200      	movs	r2, #0
 801947e:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8019480:	693b      	ldr	r3, [r7, #16]
 8019482:	68ba      	ldr	r2, [r7, #8]
 8019484:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8019486:	693b      	ldr	r3, [r7, #16]
 8019488:	687a      	ldr	r2, [r7, #4]
 801948a:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 801948c:	693b      	ldr	r3, [r7, #16]
 801948e:	68fa      	ldr	r2, [r7, #12]
 8019490:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8019492:	4b24      	ldr	r3, [pc, #144]	; (8019524 <sys_timeout_abs+0xd8>)
 8019494:	681b      	ldr	r3, [r3, #0]
 8019496:	2b00      	cmp	r3, #0
 8019498:	d103      	bne.n	80194a2 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801949a:	4a22      	ldr	r2, [pc, #136]	; (8019524 <sys_timeout_abs+0xd8>)
 801949c:	693b      	ldr	r3, [r7, #16]
 801949e:	6013      	str	r3, [r2, #0]
    return;
 80194a0:	e037      	b.n	8019512 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 80194a2:	693b      	ldr	r3, [r7, #16]
 80194a4:	685a      	ldr	r2, [r3, #4]
 80194a6:	4b1f      	ldr	r3, [pc, #124]	; (8019524 <sys_timeout_abs+0xd8>)
 80194a8:	681b      	ldr	r3, [r3, #0]
 80194aa:	685b      	ldr	r3, [r3, #4]
 80194ac:	1ad3      	subs	r3, r2, r3
 80194ae:	0fdb      	lsrs	r3, r3, #31
 80194b0:	f003 0301 	and.w	r3, r3, #1
 80194b4:	b2db      	uxtb	r3, r3
 80194b6:	2b00      	cmp	r3, #0
 80194b8:	d007      	beq.n	80194ca <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 80194ba:	4b1a      	ldr	r3, [pc, #104]	; (8019524 <sys_timeout_abs+0xd8>)
 80194bc:	681a      	ldr	r2, [r3, #0]
 80194be:	693b      	ldr	r3, [r7, #16]
 80194c0:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 80194c2:	4a18      	ldr	r2, [pc, #96]	; (8019524 <sys_timeout_abs+0xd8>)
 80194c4:	693b      	ldr	r3, [r7, #16]
 80194c6:	6013      	str	r3, [r2, #0]
 80194c8:	e023      	b.n	8019512 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 80194ca:	4b16      	ldr	r3, [pc, #88]	; (8019524 <sys_timeout_abs+0xd8>)
 80194cc:	681b      	ldr	r3, [r3, #0]
 80194ce:	617b      	str	r3, [r7, #20]
 80194d0:	e01a      	b.n	8019508 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 80194d2:	697b      	ldr	r3, [r7, #20]
 80194d4:	681b      	ldr	r3, [r3, #0]
 80194d6:	2b00      	cmp	r3, #0
 80194d8:	d00b      	beq.n	80194f2 <sys_timeout_abs+0xa6>
 80194da:	693b      	ldr	r3, [r7, #16]
 80194dc:	685a      	ldr	r2, [r3, #4]
 80194de:	697b      	ldr	r3, [r7, #20]
 80194e0:	681b      	ldr	r3, [r3, #0]
 80194e2:	685b      	ldr	r3, [r3, #4]
 80194e4:	1ad3      	subs	r3, r2, r3
 80194e6:	0fdb      	lsrs	r3, r3, #31
 80194e8:	f003 0301 	and.w	r3, r3, #1
 80194ec:	b2db      	uxtb	r3, r3
 80194ee:	2b00      	cmp	r3, #0
 80194f0:	d007      	beq.n	8019502 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 80194f2:	697b      	ldr	r3, [r7, #20]
 80194f4:	681a      	ldr	r2, [r3, #0]
 80194f6:	693b      	ldr	r3, [r7, #16]
 80194f8:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 80194fa:	697b      	ldr	r3, [r7, #20]
 80194fc:	693a      	ldr	r2, [r7, #16]
 80194fe:	601a      	str	r2, [r3, #0]
        break;
 8019500:	e007      	b.n	8019512 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8019502:	697b      	ldr	r3, [r7, #20]
 8019504:	681b      	ldr	r3, [r3, #0]
 8019506:	617b      	str	r3, [r7, #20]
 8019508:	697b      	ldr	r3, [r7, #20]
 801950a:	2b00      	cmp	r3, #0
 801950c:	d1e1      	bne.n	80194d2 <sys_timeout_abs+0x86>
 801950e:	e000      	b.n	8019512 <sys_timeout_abs+0xc6>
    return;
 8019510:	bf00      	nop
      }
    }
  }
}
 8019512:	3718      	adds	r7, #24
 8019514:	46bd      	mov	sp, r7
 8019516:	bd80      	pop	{r7, pc}
 8019518:	08026130 	.word	0x08026130
 801951c:	08026164 	.word	0x08026164
 8019520:	080261a4 	.word	0x080261a4
 8019524:	24004574 	.word	0x24004574

08019528 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8019528:	b580      	push	{r7, lr}
 801952a:	b086      	sub	sp, #24
 801952c:	af00      	add	r7, sp, #0
 801952e:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8019530:	687b      	ldr	r3, [r7, #4]
 8019532:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8019534:	697b      	ldr	r3, [r7, #20]
 8019536:	685b      	ldr	r3, [r3, #4]
 8019538:	4798      	blx	r3

  now = sys_now();
 801953a:	f7f1 f811 	bl	800a560 <sys_now>
 801953e:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8019540:	697b      	ldr	r3, [r7, #20]
 8019542:	681a      	ldr	r2, [r3, #0]
 8019544:	4b0f      	ldr	r3, [pc, #60]	; (8019584 <lwip_cyclic_timer+0x5c>)
 8019546:	681b      	ldr	r3, [r3, #0]
 8019548:	4413      	add	r3, r2
 801954a:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801954c:	68fa      	ldr	r2, [r7, #12]
 801954e:	693b      	ldr	r3, [r7, #16]
 8019550:	1ad3      	subs	r3, r2, r3
 8019552:	0fdb      	lsrs	r3, r3, #31
 8019554:	f003 0301 	and.w	r3, r3, #1
 8019558:	b2db      	uxtb	r3, r3
 801955a:	2b00      	cmp	r3, #0
 801955c:	d009      	beq.n	8019572 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801955e:	697b      	ldr	r3, [r7, #20]
 8019560:	681a      	ldr	r2, [r3, #0]
 8019562:	693b      	ldr	r3, [r7, #16]
 8019564:	4413      	add	r3, r2
 8019566:	687a      	ldr	r2, [r7, #4]
 8019568:	4907      	ldr	r1, [pc, #28]	; (8019588 <lwip_cyclic_timer+0x60>)
 801956a:	4618      	mov	r0, r3
 801956c:	f7ff ff6e 	bl	801944c <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8019570:	e004      	b.n	801957c <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8019572:	687a      	ldr	r2, [r7, #4]
 8019574:	4904      	ldr	r1, [pc, #16]	; (8019588 <lwip_cyclic_timer+0x60>)
 8019576:	68f8      	ldr	r0, [r7, #12]
 8019578:	f7ff ff68 	bl	801944c <sys_timeout_abs>
}
 801957c:	bf00      	nop
 801957e:	3718      	adds	r7, #24
 8019580:	46bd      	mov	sp, r7
 8019582:	bd80      	pop	{r7, pc}
 8019584:	24004578 	.word	0x24004578
 8019588:	08019529 	.word	0x08019529

0801958c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 801958c:	b580      	push	{r7, lr}
 801958e:	b082      	sub	sp, #8
 8019590:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8019592:	2301      	movs	r3, #1
 8019594:	607b      	str	r3, [r7, #4]
 8019596:	e00e      	b.n	80195b6 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8019598:	4a0b      	ldr	r2, [pc, #44]	; (80195c8 <sys_timeouts_init+0x3c>)
 801959a:	687b      	ldr	r3, [r7, #4]
 801959c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80195a0:	687b      	ldr	r3, [r7, #4]
 80195a2:	00db      	lsls	r3, r3, #3
 80195a4:	4a08      	ldr	r2, [pc, #32]	; (80195c8 <sys_timeouts_init+0x3c>)
 80195a6:	4413      	add	r3, r2
 80195a8:	461a      	mov	r2, r3
 80195aa:	4908      	ldr	r1, [pc, #32]	; (80195cc <sys_timeouts_init+0x40>)
 80195ac:	f000 f810 	bl	80195d0 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80195b0:	687b      	ldr	r3, [r7, #4]
 80195b2:	3301      	adds	r3, #1
 80195b4:	607b      	str	r3, [r7, #4]
 80195b6:	687b      	ldr	r3, [r7, #4]
 80195b8:	2b04      	cmp	r3, #4
 80195ba:	d9ed      	bls.n	8019598 <sys_timeouts_init+0xc>
  }
}
 80195bc:	bf00      	nop
 80195be:	bf00      	nop
 80195c0:	3708      	adds	r7, #8
 80195c2:	46bd      	mov	sp, r7
 80195c4:	bd80      	pop	{r7, pc}
 80195c6:	bf00      	nop
 80195c8:	08027164 	.word	0x08027164
 80195cc:	08019529 	.word	0x08019529

080195d0 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 80195d0:	b580      	push	{r7, lr}
 80195d2:	b086      	sub	sp, #24
 80195d4:	af00      	add	r7, sp, #0
 80195d6:	60f8      	str	r0, [r7, #12]
 80195d8:	60b9      	str	r1, [r7, #8]
 80195da:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 80195dc:	68fb      	ldr	r3, [r7, #12]
 80195de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80195e2:	d306      	bcc.n	80195f2 <sys_timeout+0x22>
 80195e4:	4b0a      	ldr	r3, [pc, #40]	; (8019610 <sys_timeout+0x40>)
 80195e6:	f240 1229 	movw	r2, #297	; 0x129
 80195ea:	490a      	ldr	r1, [pc, #40]	; (8019614 <sys_timeout+0x44>)
 80195ec:	480a      	ldr	r0, [pc, #40]	; (8019618 <sys_timeout+0x48>)
 80195ee:	f006 f809 	bl	801f604 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 80195f2:	f7f0 ffb5 	bl	800a560 <sys_now>
 80195f6:	4602      	mov	r2, r0
 80195f8:	68fb      	ldr	r3, [r7, #12]
 80195fa:	4413      	add	r3, r2
 80195fc:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 80195fe:	687a      	ldr	r2, [r7, #4]
 8019600:	68b9      	ldr	r1, [r7, #8]
 8019602:	6978      	ldr	r0, [r7, #20]
 8019604:	f7ff ff22 	bl	801944c <sys_timeout_abs>
#endif
}
 8019608:	bf00      	nop
 801960a:	3718      	adds	r7, #24
 801960c:	46bd      	mov	sp, r7
 801960e:	bd80      	pop	{r7, pc}
 8019610:	08026130 	.word	0x08026130
 8019614:	080261cc 	.word	0x080261cc
 8019618:	080261a4 	.word	0x080261a4

0801961c <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 801961c:	b580      	push	{r7, lr}
 801961e:	b084      	sub	sp, #16
 8019620:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8019622:	f7f0 ff9d 	bl	800a560 <sys_now>
 8019626:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8019628:	4b17      	ldr	r3, [pc, #92]	; (8019688 <sys_check_timeouts+0x6c>)
 801962a:	681b      	ldr	r3, [r3, #0]
 801962c:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801962e:	68bb      	ldr	r3, [r7, #8]
 8019630:	2b00      	cmp	r3, #0
 8019632:	d022      	beq.n	801967a <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8019634:	68bb      	ldr	r3, [r7, #8]
 8019636:	685b      	ldr	r3, [r3, #4]
 8019638:	68fa      	ldr	r2, [r7, #12]
 801963a:	1ad3      	subs	r3, r2, r3
 801963c:	0fdb      	lsrs	r3, r3, #31
 801963e:	f003 0301 	and.w	r3, r3, #1
 8019642:	b2db      	uxtb	r3, r3
 8019644:	2b00      	cmp	r3, #0
 8019646:	d11a      	bne.n	801967e <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8019648:	68bb      	ldr	r3, [r7, #8]
 801964a:	681b      	ldr	r3, [r3, #0]
 801964c:	4a0e      	ldr	r2, [pc, #56]	; (8019688 <sys_check_timeouts+0x6c>)
 801964e:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8019650:	68bb      	ldr	r3, [r7, #8]
 8019652:	689b      	ldr	r3, [r3, #8]
 8019654:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8019656:	68bb      	ldr	r3, [r7, #8]
 8019658:	68db      	ldr	r3, [r3, #12]
 801965a:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 801965c:	68bb      	ldr	r3, [r7, #8]
 801965e:	685b      	ldr	r3, [r3, #4]
 8019660:	4a0a      	ldr	r2, [pc, #40]	; (801968c <sys_check_timeouts+0x70>)
 8019662:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8019664:	68b9      	ldr	r1, [r7, #8]
 8019666:	200a      	movs	r0, #10
 8019668:	f7f8 fcc2 	bl	8011ff0 <memp_free>
    if (handler != NULL) {
 801966c:	687b      	ldr	r3, [r7, #4]
 801966e:	2b00      	cmp	r3, #0
 8019670:	d0da      	beq.n	8019628 <sys_check_timeouts+0xc>
      handler(arg);
 8019672:	687b      	ldr	r3, [r7, #4]
 8019674:	6838      	ldr	r0, [r7, #0]
 8019676:	4798      	blx	r3
  do {
 8019678:	e7d6      	b.n	8019628 <sys_check_timeouts+0xc>
      return;
 801967a:	bf00      	nop
 801967c:	e000      	b.n	8019680 <sys_check_timeouts+0x64>
      return;
 801967e:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8019680:	3710      	adds	r7, #16
 8019682:	46bd      	mov	sp, r7
 8019684:	bd80      	pop	{r7, pc}
 8019686:	bf00      	nop
 8019688:	24004574 	.word	0x24004574
 801968c:	24004578 	.word	0x24004578

08019690 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8019690:	b580      	push	{r7, lr}
 8019692:	b082      	sub	sp, #8
 8019694:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8019696:	4b16      	ldr	r3, [pc, #88]	; (80196f0 <sys_timeouts_sleeptime+0x60>)
 8019698:	681b      	ldr	r3, [r3, #0]
 801969a:	2b00      	cmp	r3, #0
 801969c:	d102      	bne.n	80196a4 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801969e:	f04f 33ff 	mov.w	r3, #4294967295
 80196a2:	e020      	b.n	80196e6 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 80196a4:	f7f0 ff5c 	bl	800a560 <sys_now>
 80196a8:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 80196aa:	4b11      	ldr	r3, [pc, #68]	; (80196f0 <sys_timeouts_sleeptime+0x60>)
 80196ac:	681b      	ldr	r3, [r3, #0]
 80196ae:	685a      	ldr	r2, [r3, #4]
 80196b0:	687b      	ldr	r3, [r7, #4]
 80196b2:	1ad3      	subs	r3, r2, r3
 80196b4:	0fdb      	lsrs	r3, r3, #31
 80196b6:	f003 0301 	and.w	r3, r3, #1
 80196ba:	b2db      	uxtb	r3, r3
 80196bc:	2b00      	cmp	r3, #0
 80196be:	d001      	beq.n	80196c4 <sys_timeouts_sleeptime+0x34>
    return 0;
 80196c0:	2300      	movs	r3, #0
 80196c2:	e010      	b.n	80196e6 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 80196c4:	4b0a      	ldr	r3, [pc, #40]	; (80196f0 <sys_timeouts_sleeptime+0x60>)
 80196c6:	681b      	ldr	r3, [r3, #0]
 80196c8:	685a      	ldr	r2, [r3, #4]
 80196ca:	687b      	ldr	r3, [r7, #4]
 80196cc:	1ad3      	subs	r3, r2, r3
 80196ce:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 80196d0:	683b      	ldr	r3, [r7, #0]
 80196d2:	2b00      	cmp	r3, #0
 80196d4:	da06      	bge.n	80196e4 <sys_timeouts_sleeptime+0x54>
 80196d6:	4b07      	ldr	r3, [pc, #28]	; (80196f4 <sys_timeouts_sleeptime+0x64>)
 80196d8:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 80196dc:	4906      	ldr	r1, [pc, #24]	; (80196f8 <sys_timeouts_sleeptime+0x68>)
 80196de:	4807      	ldr	r0, [pc, #28]	; (80196fc <sys_timeouts_sleeptime+0x6c>)
 80196e0:	f005 ff90 	bl	801f604 <iprintf>
    return ret;
 80196e4:	683b      	ldr	r3, [r7, #0]
  }
}
 80196e6:	4618      	mov	r0, r3
 80196e8:	3708      	adds	r7, #8
 80196ea:	46bd      	mov	sp, r7
 80196ec:	bd80      	pop	{r7, pc}
 80196ee:	bf00      	nop
 80196f0:	24004574 	.word	0x24004574
 80196f4:	08026130 	.word	0x08026130
 80196f8:	08026204 	.word	0x08026204
 80196fc:	080261a4 	.word	0x080261a4

08019700 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8019700:	b580      	push	{r7, lr}
 8019702:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8019704:	f005 ff96 	bl	801f634 <rand>
 8019708:	4603      	mov	r3, r0
 801970a:	b29b      	uxth	r3, r3
 801970c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8019710:	b29b      	uxth	r3, r3
 8019712:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8019716:	b29a      	uxth	r2, r3
 8019718:	4b01      	ldr	r3, [pc, #4]	; (8019720 <udp_init+0x20>)
 801971a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801971c:	bf00      	nop
 801971e:	bd80      	pop	{r7, pc}
 8019720:	240002fc 	.word	0x240002fc

08019724 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8019724:	b480      	push	{r7}
 8019726:	b083      	sub	sp, #12
 8019728:	af00      	add	r7, sp, #0
  u16_t n = 0;
 801972a:	2300      	movs	r3, #0
 801972c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801972e:	4b17      	ldr	r3, [pc, #92]	; (801978c <udp_new_port+0x68>)
 8019730:	881b      	ldrh	r3, [r3, #0]
 8019732:	1c5a      	adds	r2, r3, #1
 8019734:	b291      	uxth	r1, r2
 8019736:	4a15      	ldr	r2, [pc, #84]	; (801978c <udp_new_port+0x68>)
 8019738:	8011      	strh	r1, [r2, #0]
 801973a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801973e:	4293      	cmp	r3, r2
 8019740:	d103      	bne.n	801974a <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8019742:	4b12      	ldr	r3, [pc, #72]	; (801978c <udp_new_port+0x68>)
 8019744:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8019748:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801974a:	4b11      	ldr	r3, [pc, #68]	; (8019790 <udp_new_port+0x6c>)
 801974c:	681b      	ldr	r3, [r3, #0]
 801974e:	603b      	str	r3, [r7, #0]
 8019750:	e011      	b.n	8019776 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8019752:	683b      	ldr	r3, [r7, #0]
 8019754:	8a5a      	ldrh	r2, [r3, #18]
 8019756:	4b0d      	ldr	r3, [pc, #52]	; (801978c <udp_new_port+0x68>)
 8019758:	881b      	ldrh	r3, [r3, #0]
 801975a:	429a      	cmp	r2, r3
 801975c:	d108      	bne.n	8019770 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801975e:	88fb      	ldrh	r3, [r7, #6]
 8019760:	3301      	adds	r3, #1
 8019762:	80fb      	strh	r3, [r7, #6]
 8019764:	88fb      	ldrh	r3, [r7, #6]
 8019766:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801976a:	d3e0      	bcc.n	801972e <udp_new_port+0xa>
        return 0;
 801976c:	2300      	movs	r3, #0
 801976e:	e007      	b.n	8019780 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8019770:	683b      	ldr	r3, [r7, #0]
 8019772:	68db      	ldr	r3, [r3, #12]
 8019774:	603b      	str	r3, [r7, #0]
 8019776:	683b      	ldr	r3, [r7, #0]
 8019778:	2b00      	cmp	r3, #0
 801977a:	d1ea      	bne.n	8019752 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 801977c:	4b03      	ldr	r3, [pc, #12]	; (801978c <udp_new_port+0x68>)
 801977e:	881b      	ldrh	r3, [r3, #0]
}
 8019780:	4618      	mov	r0, r3
 8019782:	370c      	adds	r7, #12
 8019784:	46bd      	mov	sp, r7
 8019786:	f85d 7b04 	ldr.w	r7, [sp], #4
 801978a:	4770      	bx	lr
 801978c:	240002fc 	.word	0x240002fc
 8019790:	24007f54 	.word	0x24007f54

08019794 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8019794:	b580      	push	{r7, lr}
 8019796:	b084      	sub	sp, #16
 8019798:	af00      	add	r7, sp, #0
 801979a:	60f8      	str	r0, [r7, #12]
 801979c:	60b9      	str	r1, [r7, #8]
 801979e:	4613      	mov	r3, r2
 80197a0:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 80197a2:	68fb      	ldr	r3, [r7, #12]
 80197a4:	2b00      	cmp	r3, #0
 80197a6:	d105      	bne.n	80197b4 <udp_input_local_match+0x20>
 80197a8:	4b27      	ldr	r3, [pc, #156]	; (8019848 <udp_input_local_match+0xb4>)
 80197aa:	2287      	movs	r2, #135	; 0x87
 80197ac:	4927      	ldr	r1, [pc, #156]	; (801984c <udp_input_local_match+0xb8>)
 80197ae:	4828      	ldr	r0, [pc, #160]	; (8019850 <udp_input_local_match+0xbc>)
 80197b0:	f005 ff28 	bl	801f604 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 80197b4:	68bb      	ldr	r3, [r7, #8]
 80197b6:	2b00      	cmp	r3, #0
 80197b8:	d105      	bne.n	80197c6 <udp_input_local_match+0x32>
 80197ba:	4b23      	ldr	r3, [pc, #140]	; (8019848 <udp_input_local_match+0xb4>)
 80197bc:	2288      	movs	r2, #136	; 0x88
 80197be:	4925      	ldr	r1, [pc, #148]	; (8019854 <udp_input_local_match+0xc0>)
 80197c0:	4823      	ldr	r0, [pc, #140]	; (8019850 <udp_input_local_match+0xbc>)
 80197c2:	f005 ff1f 	bl	801f604 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80197c6:	68fb      	ldr	r3, [r7, #12]
 80197c8:	7a1b      	ldrb	r3, [r3, #8]
 80197ca:	2b00      	cmp	r3, #0
 80197cc:	d00b      	beq.n	80197e6 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80197ce:	68fb      	ldr	r3, [r7, #12]
 80197d0:	7a1a      	ldrb	r2, [r3, #8]
 80197d2:	4b21      	ldr	r3, [pc, #132]	; (8019858 <udp_input_local_match+0xc4>)
 80197d4:	685b      	ldr	r3, [r3, #4]
 80197d6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80197da:	3301      	adds	r3, #1
 80197dc:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80197de:	429a      	cmp	r2, r3
 80197e0:	d001      	beq.n	80197e6 <udp_input_local_match+0x52>
    return 0;
 80197e2:	2300      	movs	r3, #0
 80197e4:	e02b      	b.n	801983e <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 80197e6:	79fb      	ldrb	r3, [r7, #7]
 80197e8:	2b00      	cmp	r3, #0
 80197ea:	d018      	beq.n	801981e <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80197ec:	68fb      	ldr	r3, [r7, #12]
 80197ee:	2b00      	cmp	r3, #0
 80197f0:	d013      	beq.n	801981a <udp_input_local_match+0x86>
 80197f2:	68fb      	ldr	r3, [r7, #12]
 80197f4:	681b      	ldr	r3, [r3, #0]
 80197f6:	2b00      	cmp	r3, #0
 80197f8:	d00f      	beq.n	801981a <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80197fa:	4b17      	ldr	r3, [pc, #92]	; (8019858 <udp_input_local_match+0xc4>)
 80197fc:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80197fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019802:	d00a      	beq.n	801981a <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8019804:	68fb      	ldr	r3, [r7, #12]
 8019806:	681a      	ldr	r2, [r3, #0]
 8019808:	4b13      	ldr	r3, [pc, #76]	; (8019858 <udp_input_local_match+0xc4>)
 801980a:	695b      	ldr	r3, [r3, #20]
 801980c:	405a      	eors	r2, r3
 801980e:	68bb      	ldr	r3, [r7, #8]
 8019810:	3308      	adds	r3, #8
 8019812:	681b      	ldr	r3, [r3, #0]
 8019814:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8019816:	2b00      	cmp	r3, #0
 8019818:	d110      	bne.n	801983c <udp_input_local_match+0xa8>
          return 1;
 801981a:	2301      	movs	r3, #1
 801981c:	e00f      	b.n	801983e <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801981e:	68fb      	ldr	r3, [r7, #12]
 8019820:	2b00      	cmp	r3, #0
 8019822:	d009      	beq.n	8019838 <udp_input_local_match+0xa4>
 8019824:	68fb      	ldr	r3, [r7, #12]
 8019826:	681b      	ldr	r3, [r3, #0]
 8019828:	2b00      	cmp	r3, #0
 801982a:	d005      	beq.n	8019838 <udp_input_local_match+0xa4>
 801982c:	68fb      	ldr	r3, [r7, #12]
 801982e:	681a      	ldr	r2, [r3, #0]
 8019830:	4b09      	ldr	r3, [pc, #36]	; (8019858 <udp_input_local_match+0xc4>)
 8019832:	695b      	ldr	r3, [r3, #20]
 8019834:	429a      	cmp	r2, r3
 8019836:	d101      	bne.n	801983c <udp_input_local_match+0xa8>
        return 1;
 8019838:	2301      	movs	r3, #1
 801983a:	e000      	b.n	801983e <udp_input_local_match+0xaa>
      }
  }

  return 0;
 801983c:	2300      	movs	r3, #0
}
 801983e:	4618      	mov	r0, r3
 8019840:	3710      	adds	r7, #16
 8019842:	46bd      	mov	sp, r7
 8019844:	bd80      	pop	{r7, pc}
 8019846:	bf00      	nop
 8019848:	08026218 	.word	0x08026218
 801984c:	08026248 	.word	0x08026248
 8019850:	0802626c 	.word	0x0802626c
 8019854:	08026294 	.word	0x08026294
 8019858:	24004e5c 	.word	0x24004e5c

0801985c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 801985c:	b590      	push	{r4, r7, lr}
 801985e:	b08d      	sub	sp, #52	; 0x34
 8019860:	af02      	add	r7, sp, #8
 8019862:	6078      	str	r0, [r7, #4]
 8019864:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8019866:	2300      	movs	r3, #0
 8019868:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801986a:	687b      	ldr	r3, [r7, #4]
 801986c:	2b00      	cmp	r3, #0
 801986e:	d105      	bne.n	801987c <udp_input+0x20>
 8019870:	4b7c      	ldr	r3, [pc, #496]	; (8019a64 <udp_input+0x208>)
 8019872:	22cf      	movs	r2, #207	; 0xcf
 8019874:	497c      	ldr	r1, [pc, #496]	; (8019a68 <udp_input+0x20c>)
 8019876:	487d      	ldr	r0, [pc, #500]	; (8019a6c <udp_input+0x210>)
 8019878:	f005 fec4 	bl	801f604 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 801987c:	683b      	ldr	r3, [r7, #0]
 801987e:	2b00      	cmp	r3, #0
 8019880:	d105      	bne.n	801988e <udp_input+0x32>
 8019882:	4b78      	ldr	r3, [pc, #480]	; (8019a64 <udp_input+0x208>)
 8019884:	22d0      	movs	r2, #208	; 0xd0
 8019886:	497a      	ldr	r1, [pc, #488]	; (8019a70 <udp_input+0x214>)
 8019888:	4878      	ldr	r0, [pc, #480]	; (8019a6c <udp_input+0x210>)
 801988a:	f005 febb 	bl	801f604 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801988e:	687b      	ldr	r3, [r7, #4]
 8019890:	895b      	ldrh	r3, [r3, #10]
 8019892:	2b07      	cmp	r3, #7
 8019894:	d803      	bhi.n	801989e <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8019896:	6878      	ldr	r0, [r7, #4]
 8019898:	f7f9 fa8c 	bl	8012db4 <pbuf_free>
    goto end;
 801989c:	e0de      	b.n	8019a5c <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801989e:	687b      	ldr	r3, [r7, #4]
 80198a0:	685b      	ldr	r3, [r3, #4]
 80198a2:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 80198a4:	4b73      	ldr	r3, [pc, #460]	; (8019a74 <udp_input+0x218>)
 80198a6:	695b      	ldr	r3, [r3, #20]
 80198a8:	4a72      	ldr	r2, [pc, #456]	; (8019a74 <udp_input+0x218>)
 80198aa:	6812      	ldr	r2, [r2, #0]
 80198ac:	4611      	mov	r1, r2
 80198ae:	4618      	mov	r0, r3
 80198b0:	f003 feca 	bl	801d648 <ip4_addr_isbroadcast_u32>
 80198b4:	4603      	mov	r3, r0
 80198b6:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 80198b8:	697b      	ldr	r3, [r7, #20]
 80198ba:	881b      	ldrh	r3, [r3, #0]
 80198bc:	b29b      	uxth	r3, r3
 80198be:	4618      	mov	r0, r3
 80198c0:	f7f7 fd90 	bl	80113e4 <lwip_htons>
 80198c4:	4603      	mov	r3, r0
 80198c6:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 80198c8:	697b      	ldr	r3, [r7, #20]
 80198ca:	885b      	ldrh	r3, [r3, #2]
 80198cc:	b29b      	uxth	r3, r3
 80198ce:	4618      	mov	r0, r3
 80198d0:	f7f7 fd88 	bl	80113e4 <lwip_htons>
 80198d4:	4603      	mov	r3, r0
 80198d6:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 80198d8:	2300      	movs	r3, #0
 80198da:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 80198dc:	2300      	movs	r3, #0
 80198de:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 80198e0:	2300      	movs	r3, #0
 80198e2:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80198e4:	4b64      	ldr	r3, [pc, #400]	; (8019a78 <udp_input+0x21c>)
 80198e6:	681b      	ldr	r3, [r3, #0]
 80198e8:	627b      	str	r3, [r7, #36]	; 0x24
 80198ea:	e054      	b.n	8019996 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 80198ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80198ee:	8a5b      	ldrh	r3, [r3, #18]
 80198f0:	89fa      	ldrh	r2, [r7, #14]
 80198f2:	429a      	cmp	r2, r3
 80198f4:	d14a      	bne.n	801998c <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 80198f6:	7cfb      	ldrb	r3, [r7, #19]
 80198f8:	461a      	mov	r2, r3
 80198fa:	6839      	ldr	r1, [r7, #0]
 80198fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80198fe:	f7ff ff49 	bl	8019794 <udp_input_local_match>
 8019902:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8019904:	2b00      	cmp	r3, #0
 8019906:	d041      	beq.n	801998c <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8019908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801990a:	7c1b      	ldrb	r3, [r3, #16]
 801990c:	f003 0304 	and.w	r3, r3, #4
 8019910:	2b00      	cmp	r3, #0
 8019912:	d11d      	bne.n	8019950 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8019914:	69fb      	ldr	r3, [r7, #28]
 8019916:	2b00      	cmp	r3, #0
 8019918:	d102      	bne.n	8019920 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801991a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801991c:	61fb      	str	r3, [r7, #28]
 801991e:	e017      	b.n	8019950 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8019920:	7cfb      	ldrb	r3, [r7, #19]
 8019922:	2b00      	cmp	r3, #0
 8019924:	d014      	beq.n	8019950 <udp_input+0xf4>
 8019926:	4b53      	ldr	r3, [pc, #332]	; (8019a74 <udp_input+0x218>)
 8019928:	695b      	ldr	r3, [r3, #20]
 801992a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801992e:	d10f      	bne.n	8019950 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8019930:	69fb      	ldr	r3, [r7, #28]
 8019932:	681a      	ldr	r2, [r3, #0]
 8019934:	683b      	ldr	r3, [r7, #0]
 8019936:	3304      	adds	r3, #4
 8019938:	681b      	ldr	r3, [r3, #0]
 801993a:	429a      	cmp	r2, r3
 801993c:	d008      	beq.n	8019950 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801993e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019940:	681a      	ldr	r2, [r3, #0]
 8019942:	683b      	ldr	r3, [r7, #0]
 8019944:	3304      	adds	r3, #4
 8019946:	681b      	ldr	r3, [r3, #0]
 8019948:	429a      	cmp	r2, r3
 801994a:	d101      	bne.n	8019950 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 801994c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801994e:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8019950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019952:	8a9b      	ldrh	r3, [r3, #20]
 8019954:	8a3a      	ldrh	r2, [r7, #16]
 8019956:	429a      	cmp	r2, r3
 8019958:	d118      	bne.n	801998c <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801995a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801995c:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801995e:	2b00      	cmp	r3, #0
 8019960:	d005      	beq.n	801996e <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8019962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019964:	685a      	ldr	r2, [r3, #4]
 8019966:	4b43      	ldr	r3, [pc, #268]	; (8019a74 <udp_input+0x218>)
 8019968:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801996a:	429a      	cmp	r2, r3
 801996c:	d10e      	bne.n	801998c <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801996e:	6a3b      	ldr	r3, [r7, #32]
 8019970:	2b00      	cmp	r3, #0
 8019972:	d014      	beq.n	801999e <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8019974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019976:	68da      	ldr	r2, [r3, #12]
 8019978:	6a3b      	ldr	r3, [r7, #32]
 801997a:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 801997c:	4b3e      	ldr	r3, [pc, #248]	; (8019a78 <udp_input+0x21c>)
 801997e:	681a      	ldr	r2, [r3, #0]
 8019980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019982:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8019984:	4a3c      	ldr	r2, [pc, #240]	; (8019a78 <udp_input+0x21c>)
 8019986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019988:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801998a:	e008      	b.n	801999e <udp_input+0x142>
      }
    }

    prev = pcb;
 801998c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801998e:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8019990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019992:	68db      	ldr	r3, [r3, #12]
 8019994:	627b      	str	r3, [r7, #36]	; 0x24
 8019996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019998:	2b00      	cmp	r3, #0
 801999a:	d1a7      	bne.n	80198ec <udp_input+0x90>
 801999c:	e000      	b.n	80199a0 <udp_input+0x144>
        break;
 801999e:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 80199a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80199a2:	2b00      	cmp	r3, #0
 80199a4:	d101      	bne.n	80199aa <udp_input+0x14e>
    pcb = uncon_pcb;
 80199a6:	69fb      	ldr	r3, [r7, #28]
 80199a8:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 80199aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80199ac:	2b00      	cmp	r3, #0
 80199ae:	d002      	beq.n	80199b6 <udp_input+0x15a>
    for_us = 1;
 80199b0:	2301      	movs	r3, #1
 80199b2:	76fb      	strb	r3, [r7, #27]
 80199b4:	e00a      	b.n	80199cc <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 80199b6:	683b      	ldr	r3, [r7, #0]
 80199b8:	3304      	adds	r3, #4
 80199ba:	681a      	ldr	r2, [r3, #0]
 80199bc:	4b2d      	ldr	r3, [pc, #180]	; (8019a74 <udp_input+0x218>)
 80199be:	695b      	ldr	r3, [r3, #20]
 80199c0:	429a      	cmp	r2, r3
 80199c2:	bf0c      	ite	eq
 80199c4:	2301      	moveq	r3, #1
 80199c6:	2300      	movne	r3, #0
 80199c8:	b2db      	uxtb	r3, r3
 80199ca:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 80199cc:	7efb      	ldrb	r3, [r7, #27]
 80199ce:	2b00      	cmp	r3, #0
 80199d0:	d041      	beq.n	8019a56 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 80199d2:	2108      	movs	r1, #8
 80199d4:	6878      	ldr	r0, [r7, #4]
 80199d6:	f7f9 f935 	bl	8012c44 <pbuf_remove_header>
 80199da:	4603      	mov	r3, r0
 80199dc:	2b00      	cmp	r3, #0
 80199de:	d00a      	beq.n	80199f6 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 80199e0:	4b20      	ldr	r3, [pc, #128]	; (8019a64 <udp_input+0x208>)
 80199e2:	f44f 72b8 	mov.w	r2, #368	; 0x170
 80199e6:	4925      	ldr	r1, [pc, #148]	; (8019a7c <udp_input+0x220>)
 80199e8:	4820      	ldr	r0, [pc, #128]	; (8019a6c <udp_input+0x210>)
 80199ea:	f005 fe0b 	bl	801f604 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 80199ee:	6878      	ldr	r0, [r7, #4]
 80199f0:	f7f9 f9e0 	bl	8012db4 <pbuf_free>
      goto end;
 80199f4:	e032      	b.n	8019a5c <udp_input+0x200>
    }

    if (pcb != NULL) {
 80199f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80199f8:	2b00      	cmp	r3, #0
 80199fa:	d012      	beq.n	8019a22 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 80199fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80199fe:	699b      	ldr	r3, [r3, #24]
 8019a00:	2b00      	cmp	r3, #0
 8019a02:	d00a      	beq.n	8019a1a <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8019a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019a06:	699c      	ldr	r4, [r3, #24]
 8019a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019a0a:	69d8      	ldr	r0, [r3, #28]
 8019a0c:	8a3b      	ldrh	r3, [r7, #16]
 8019a0e:	9300      	str	r3, [sp, #0]
 8019a10:	4b1b      	ldr	r3, [pc, #108]	; (8019a80 <udp_input+0x224>)
 8019a12:	687a      	ldr	r2, [r7, #4]
 8019a14:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8019a16:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8019a18:	e021      	b.n	8019a5e <udp_input+0x202>
        pbuf_free(p);
 8019a1a:	6878      	ldr	r0, [r7, #4]
 8019a1c:	f7f9 f9ca 	bl	8012db4 <pbuf_free>
        goto end;
 8019a20:	e01c      	b.n	8019a5c <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8019a22:	7cfb      	ldrb	r3, [r7, #19]
 8019a24:	2b00      	cmp	r3, #0
 8019a26:	d112      	bne.n	8019a4e <udp_input+0x1f2>
 8019a28:	4b12      	ldr	r3, [pc, #72]	; (8019a74 <udp_input+0x218>)
 8019a2a:	695b      	ldr	r3, [r3, #20]
 8019a2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8019a30:	2be0      	cmp	r3, #224	; 0xe0
 8019a32:	d00c      	beq.n	8019a4e <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8019a34:	4b0f      	ldr	r3, [pc, #60]	; (8019a74 <udp_input+0x218>)
 8019a36:	899b      	ldrh	r3, [r3, #12]
 8019a38:	3308      	adds	r3, #8
 8019a3a:	b29b      	uxth	r3, r3
 8019a3c:	b21b      	sxth	r3, r3
 8019a3e:	4619      	mov	r1, r3
 8019a40:	6878      	ldr	r0, [r7, #4]
 8019a42:	f7f9 f972 	bl	8012d2a <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8019a46:	2103      	movs	r1, #3
 8019a48:	6878      	ldr	r0, [r7, #4]
 8019a4a:	f003 fab5 	bl	801cfb8 <icmp_dest_unreach>
      pbuf_free(p);
 8019a4e:	6878      	ldr	r0, [r7, #4]
 8019a50:	f7f9 f9b0 	bl	8012db4 <pbuf_free>
  return;
 8019a54:	e003      	b.n	8019a5e <udp_input+0x202>
    pbuf_free(p);
 8019a56:	6878      	ldr	r0, [r7, #4]
 8019a58:	f7f9 f9ac 	bl	8012db4 <pbuf_free>
  return;
 8019a5c:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8019a5e:	372c      	adds	r7, #44	; 0x2c
 8019a60:	46bd      	mov	sp, r7
 8019a62:	bd90      	pop	{r4, r7, pc}
 8019a64:	08026218 	.word	0x08026218
 8019a68:	080262bc 	.word	0x080262bc
 8019a6c:	0802626c 	.word	0x0802626c
 8019a70:	080262d4 	.word	0x080262d4
 8019a74:	24004e5c 	.word	0x24004e5c
 8019a78:	24007f54 	.word	0x24007f54
 8019a7c:	080262f0 	.word	0x080262f0
 8019a80:	24004e6c 	.word	0x24004e6c

08019a84 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 8019a84:	b580      	push	{r7, lr}
 8019a86:	b082      	sub	sp, #8
 8019a88:	af00      	add	r7, sp, #0
 8019a8a:	6078      	str	r0, [r7, #4]
 8019a8c:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 8019a8e:	687b      	ldr	r3, [r7, #4]
 8019a90:	2b00      	cmp	r3, #0
 8019a92:	d109      	bne.n	8019aa8 <udp_send+0x24>
 8019a94:	4b11      	ldr	r3, [pc, #68]	; (8019adc <udp_send+0x58>)
 8019a96:	f240 12d5 	movw	r2, #469	; 0x1d5
 8019a9a:	4911      	ldr	r1, [pc, #68]	; (8019ae0 <udp_send+0x5c>)
 8019a9c:	4811      	ldr	r0, [pc, #68]	; (8019ae4 <udp_send+0x60>)
 8019a9e:	f005 fdb1 	bl	801f604 <iprintf>
 8019aa2:	f06f 030f 	mvn.w	r3, #15
 8019aa6:	e015      	b.n	8019ad4 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 8019aa8:	683b      	ldr	r3, [r7, #0]
 8019aaa:	2b00      	cmp	r3, #0
 8019aac:	d109      	bne.n	8019ac2 <udp_send+0x3e>
 8019aae:	4b0b      	ldr	r3, [pc, #44]	; (8019adc <udp_send+0x58>)
 8019ab0:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 8019ab4:	490c      	ldr	r1, [pc, #48]	; (8019ae8 <udp_send+0x64>)
 8019ab6:	480b      	ldr	r0, [pc, #44]	; (8019ae4 <udp_send+0x60>)
 8019ab8:	f005 fda4 	bl	801f604 <iprintf>
 8019abc:	f06f 030f 	mvn.w	r3, #15
 8019ac0:	e008      	b.n	8019ad4 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 8019ac2:	687b      	ldr	r3, [r7, #4]
 8019ac4:	1d1a      	adds	r2, r3, #4
 8019ac6:	687b      	ldr	r3, [r7, #4]
 8019ac8:	8a9b      	ldrh	r3, [r3, #20]
 8019aca:	6839      	ldr	r1, [r7, #0]
 8019acc:	6878      	ldr	r0, [r7, #4]
 8019ace:	f000 f80d 	bl	8019aec <udp_sendto>
 8019ad2:	4603      	mov	r3, r0
}
 8019ad4:	4618      	mov	r0, r3
 8019ad6:	3708      	adds	r7, #8
 8019ad8:	46bd      	mov	sp, r7
 8019ada:	bd80      	pop	{r7, pc}
 8019adc:	08026218 	.word	0x08026218
 8019ae0:	0802630c 	.word	0x0802630c
 8019ae4:	0802626c 	.word	0x0802626c
 8019ae8:	08026324 	.word	0x08026324

08019aec <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 8019aec:	b580      	push	{r7, lr}
 8019aee:	b088      	sub	sp, #32
 8019af0:	af02      	add	r7, sp, #8
 8019af2:	60f8      	str	r0, [r7, #12]
 8019af4:	60b9      	str	r1, [r7, #8]
 8019af6:	607a      	str	r2, [r7, #4]
 8019af8:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 8019afa:	68fb      	ldr	r3, [r7, #12]
 8019afc:	2b00      	cmp	r3, #0
 8019afe:	d109      	bne.n	8019b14 <udp_sendto+0x28>
 8019b00:	4b23      	ldr	r3, [pc, #140]	; (8019b90 <udp_sendto+0xa4>)
 8019b02:	f44f 7206 	mov.w	r2, #536	; 0x218
 8019b06:	4923      	ldr	r1, [pc, #140]	; (8019b94 <udp_sendto+0xa8>)
 8019b08:	4823      	ldr	r0, [pc, #140]	; (8019b98 <udp_sendto+0xac>)
 8019b0a:	f005 fd7b 	bl	801f604 <iprintf>
 8019b0e:	f06f 030f 	mvn.w	r3, #15
 8019b12:	e038      	b.n	8019b86 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 8019b14:	68bb      	ldr	r3, [r7, #8]
 8019b16:	2b00      	cmp	r3, #0
 8019b18:	d109      	bne.n	8019b2e <udp_sendto+0x42>
 8019b1a:	4b1d      	ldr	r3, [pc, #116]	; (8019b90 <udp_sendto+0xa4>)
 8019b1c:	f240 2219 	movw	r2, #537	; 0x219
 8019b20:	491e      	ldr	r1, [pc, #120]	; (8019b9c <udp_sendto+0xb0>)
 8019b22:	481d      	ldr	r0, [pc, #116]	; (8019b98 <udp_sendto+0xac>)
 8019b24:	f005 fd6e 	bl	801f604 <iprintf>
 8019b28:	f06f 030f 	mvn.w	r3, #15
 8019b2c:	e02b      	b.n	8019b86 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8019b2e:	687b      	ldr	r3, [r7, #4]
 8019b30:	2b00      	cmp	r3, #0
 8019b32:	d109      	bne.n	8019b48 <udp_sendto+0x5c>
 8019b34:	4b16      	ldr	r3, [pc, #88]	; (8019b90 <udp_sendto+0xa4>)
 8019b36:	f240 221a 	movw	r2, #538	; 0x21a
 8019b3a:	4919      	ldr	r1, [pc, #100]	; (8019ba0 <udp_sendto+0xb4>)
 8019b3c:	4816      	ldr	r0, [pc, #88]	; (8019b98 <udp_sendto+0xac>)
 8019b3e:	f005 fd61 	bl	801f604 <iprintf>
 8019b42:	f06f 030f 	mvn.w	r3, #15
 8019b46:	e01e      	b.n	8019b86 <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8019b48:	68fb      	ldr	r3, [r7, #12]
 8019b4a:	7a1b      	ldrb	r3, [r3, #8]
 8019b4c:	2b00      	cmp	r3, #0
 8019b4e:	d006      	beq.n	8019b5e <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 8019b50:	68fb      	ldr	r3, [r7, #12]
 8019b52:	7a1b      	ldrb	r3, [r3, #8]
 8019b54:	4618      	mov	r0, r3
 8019b56:	f7f8 fd6d 	bl	8012634 <netif_get_by_index>
 8019b5a:	6178      	str	r0, [r7, #20]
 8019b5c:	e003      	b.n	8019b66 <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 8019b5e:	6878      	ldr	r0, [r7, #4]
 8019b60:	f003 fabe 	bl	801d0e0 <ip4_route>
 8019b64:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 8019b66:	697b      	ldr	r3, [r7, #20]
 8019b68:	2b00      	cmp	r3, #0
 8019b6a:	d102      	bne.n	8019b72 <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 8019b6c:	f06f 0303 	mvn.w	r3, #3
 8019b70:	e009      	b.n	8019b86 <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 8019b72:	887a      	ldrh	r2, [r7, #2]
 8019b74:	697b      	ldr	r3, [r7, #20]
 8019b76:	9300      	str	r3, [sp, #0]
 8019b78:	4613      	mov	r3, r2
 8019b7a:	687a      	ldr	r2, [r7, #4]
 8019b7c:	68b9      	ldr	r1, [r7, #8]
 8019b7e:	68f8      	ldr	r0, [r7, #12]
 8019b80:	f000 f810 	bl	8019ba4 <udp_sendto_if>
 8019b84:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8019b86:	4618      	mov	r0, r3
 8019b88:	3718      	adds	r7, #24
 8019b8a:	46bd      	mov	sp, r7
 8019b8c:	bd80      	pop	{r7, pc}
 8019b8e:	bf00      	nop
 8019b90:	08026218 	.word	0x08026218
 8019b94:	0802633c 	.word	0x0802633c
 8019b98:	0802626c 	.word	0x0802626c
 8019b9c:	08026354 	.word	0x08026354
 8019ba0:	08026370 	.word	0x08026370

08019ba4 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8019ba4:	b580      	push	{r7, lr}
 8019ba6:	b088      	sub	sp, #32
 8019ba8:	af02      	add	r7, sp, #8
 8019baa:	60f8      	str	r0, [r7, #12]
 8019bac:	60b9      	str	r1, [r7, #8]
 8019bae:	607a      	str	r2, [r7, #4]
 8019bb0:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8019bb2:	68fb      	ldr	r3, [r7, #12]
 8019bb4:	2b00      	cmp	r3, #0
 8019bb6:	d109      	bne.n	8019bcc <udp_sendto_if+0x28>
 8019bb8:	4b2e      	ldr	r3, [pc, #184]	; (8019c74 <udp_sendto_if+0xd0>)
 8019bba:	f44f 7220 	mov.w	r2, #640	; 0x280
 8019bbe:	492e      	ldr	r1, [pc, #184]	; (8019c78 <udp_sendto_if+0xd4>)
 8019bc0:	482e      	ldr	r0, [pc, #184]	; (8019c7c <udp_sendto_if+0xd8>)
 8019bc2:	f005 fd1f 	bl	801f604 <iprintf>
 8019bc6:	f06f 030f 	mvn.w	r3, #15
 8019bca:	e04f      	b.n	8019c6c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8019bcc:	68bb      	ldr	r3, [r7, #8]
 8019bce:	2b00      	cmp	r3, #0
 8019bd0:	d109      	bne.n	8019be6 <udp_sendto_if+0x42>
 8019bd2:	4b28      	ldr	r3, [pc, #160]	; (8019c74 <udp_sendto_if+0xd0>)
 8019bd4:	f240 2281 	movw	r2, #641	; 0x281
 8019bd8:	4929      	ldr	r1, [pc, #164]	; (8019c80 <udp_sendto_if+0xdc>)
 8019bda:	4828      	ldr	r0, [pc, #160]	; (8019c7c <udp_sendto_if+0xd8>)
 8019bdc:	f005 fd12 	bl	801f604 <iprintf>
 8019be0:	f06f 030f 	mvn.w	r3, #15
 8019be4:	e042      	b.n	8019c6c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8019be6:	687b      	ldr	r3, [r7, #4]
 8019be8:	2b00      	cmp	r3, #0
 8019bea:	d109      	bne.n	8019c00 <udp_sendto_if+0x5c>
 8019bec:	4b21      	ldr	r3, [pc, #132]	; (8019c74 <udp_sendto_if+0xd0>)
 8019bee:	f240 2282 	movw	r2, #642	; 0x282
 8019bf2:	4924      	ldr	r1, [pc, #144]	; (8019c84 <udp_sendto_if+0xe0>)
 8019bf4:	4821      	ldr	r0, [pc, #132]	; (8019c7c <udp_sendto_if+0xd8>)
 8019bf6:	f005 fd05 	bl	801f604 <iprintf>
 8019bfa:	f06f 030f 	mvn.w	r3, #15
 8019bfe:	e035      	b.n	8019c6c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8019c00:	6a3b      	ldr	r3, [r7, #32]
 8019c02:	2b00      	cmp	r3, #0
 8019c04:	d109      	bne.n	8019c1a <udp_sendto_if+0x76>
 8019c06:	4b1b      	ldr	r3, [pc, #108]	; (8019c74 <udp_sendto_if+0xd0>)
 8019c08:	f240 2283 	movw	r2, #643	; 0x283
 8019c0c:	491e      	ldr	r1, [pc, #120]	; (8019c88 <udp_sendto_if+0xe4>)
 8019c0e:	481b      	ldr	r0, [pc, #108]	; (8019c7c <udp_sendto_if+0xd8>)
 8019c10:	f005 fcf8 	bl	801f604 <iprintf>
 8019c14:	f06f 030f 	mvn.w	r3, #15
 8019c18:	e028      	b.n	8019c6c <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8019c1a:	68fb      	ldr	r3, [r7, #12]
 8019c1c:	2b00      	cmp	r3, #0
 8019c1e:	d009      	beq.n	8019c34 <udp_sendto_if+0x90>
 8019c20:	68fb      	ldr	r3, [r7, #12]
 8019c22:	681b      	ldr	r3, [r3, #0]
 8019c24:	2b00      	cmp	r3, #0
 8019c26:	d005      	beq.n	8019c34 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8019c28:	68fb      	ldr	r3, [r7, #12]
 8019c2a:	681b      	ldr	r3, [r3, #0]
 8019c2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8019c30:	2be0      	cmp	r3, #224	; 0xe0
 8019c32:	d103      	bne.n	8019c3c <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8019c34:	6a3b      	ldr	r3, [r7, #32]
 8019c36:	3304      	adds	r3, #4
 8019c38:	617b      	str	r3, [r7, #20]
 8019c3a:	e00b      	b.n	8019c54 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8019c3c:	68fb      	ldr	r3, [r7, #12]
 8019c3e:	681a      	ldr	r2, [r3, #0]
 8019c40:	6a3b      	ldr	r3, [r7, #32]
 8019c42:	3304      	adds	r3, #4
 8019c44:	681b      	ldr	r3, [r3, #0]
 8019c46:	429a      	cmp	r2, r3
 8019c48:	d002      	beq.n	8019c50 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8019c4a:	f06f 0303 	mvn.w	r3, #3
 8019c4e:	e00d      	b.n	8019c6c <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8019c50:	68fb      	ldr	r3, [r7, #12]
 8019c52:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8019c54:	887a      	ldrh	r2, [r7, #2]
 8019c56:	697b      	ldr	r3, [r7, #20]
 8019c58:	9301      	str	r3, [sp, #4]
 8019c5a:	6a3b      	ldr	r3, [r7, #32]
 8019c5c:	9300      	str	r3, [sp, #0]
 8019c5e:	4613      	mov	r3, r2
 8019c60:	687a      	ldr	r2, [r7, #4]
 8019c62:	68b9      	ldr	r1, [r7, #8]
 8019c64:	68f8      	ldr	r0, [r7, #12]
 8019c66:	f000 f811 	bl	8019c8c <udp_sendto_if_src>
 8019c6a:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8019c6c:	4618      	mov	r0, r3
 8019c6e:	3718      	adds	r7, #24
 8019c70:	46bd      	mov	sp, r7
 8019c72:	bd80      	pop	{r7, pc}
 8019c74:	08026218 	.word	0x08026218
 8019c78:	0802638c 	.word	0x0802638c
 8019c7c:	0802626c 	.word	0x0802626c
 8019c80:	080263a8 	.word	0x080263a8
 8019c84:	080263c4 	.word	0x080263c4
 8019c88:	080263e4 	.word	0x080263e4

08019c8c <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8019c8c:	b580      	push	{r7, lr}
 8019c8e:	b08c      	sub	sp, #48	; 0x30
 8019c90:	af04      	add	r7, sp, #16
 8019c92:	60f8      	str	r0, [r7, #12]
 8019c94:	60b9      	str	r1, [r7, #8]
 8019c96:	607a      	str	r2, [r7, #4]
 8019c98:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8019c9a:	68fb      	ldr	r3, [r7, #12]
 8019c9c:	2b00      	cmp	r3, #0
 8019c9e:	d109      	bne.n	8019cb4 <udp_sendto_if_src+0x28>
 8019ca0:	4b65      	ldr	r3, [pc, #404]	; (8019e38 <udp_sendto_if_src+0x1ac>)
 8019ca2:	f240 22d1 	movw	r2, #721	; 0x2d1
 8019ca6:	4965      	ldr	r1, [pc, #404]	; (8019e3c <udp_sendto_if_src+0x1b0>)
 8019ca8:	4865      	ldr	r0, [pc, #404]	; (8019e40 <udp_sendto_if_src+0x1b4>)
 8019caa:	f005 fcab 	bl	801f604 <iprintf>
 8019cae:	f06f 030f 	mvn.w	r3, #15
 8019cb2:	e0bc      	b.n	8019e2e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8019cb4:	68bb      	ldr	r3, [r7, #8]
 8019cb6:	2b00      	cmp	r3, #0
 8019cb8:	d109      	bne.n	8019cce <udp_sendto_if_src+0x42>
 8019cba:	4b5f      	ldr	r3, [pc, #380]	; (8019e38 <udp_sendto_if_src+0x1ac>)
 8019cbc:	f240 22d2 	movw	r2, #722	; 0x2d2
 8019cc0:	4960      	ldr	r1, [pc, #384]	; (8019e44 <udp_sendto_if_src+0x1b8>)
 8019cc2:	485f      	ldr	r0, [pc, #380]	; (8019e40 <udp_sendto_if_src+0x1b4>)
 8019cc4:	f005 fc9e 	bl	801f604 <iprintf>
 8019cc8:	f06f 030f 	mvn.w	r3, #15
 8019ccc:	e0af      	b.n	8019e2e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8019cce:	687b      	ldr	r3, [r7, #4]
 8019cd0:	2b00      	cmp	r3, #0
 8019cd2:	d109      	bne.n	8019ce8 <udp_sendto_if_src+0x5c>
 8019cd4:	4b58      	ldr	r3, [pc, #352]	; (8019e38 <udp_sendto_if_src+0x1ac>)
 8019cd6:	f240 22d3 	movw	r2, #723	; 0x2d3
 8019cda:	495b      	ldr	r1, [pc, #364]	; (8019e48 <udp_sendto_if_src+0x1bc>)
 8019cdc:	4858      	ldr	r0, [pc, #352]	; (8019e40 <udp_sendto_if_src+0x1b4>)
 8019cde:	f005 fc91 	bl	801f604 <iprintf>
 8019ce2:	f06f 030f 	mvn.w	r3, #15
 8019ce6:	e0a2      	b.n	8019e2e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8019ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019cea:	2b00      	cmp	r3, #0
 8019cec:	d109      	bne.n	8019d02 <udp_sendto_if_src+0x76>
 8019cee:	4b52      	ldr	r3, [pc, #328]	; (8019e38 <udp_sendto_if_src+0x1ac>)
 8019cf0:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8019cf4:	4955      	ldr	r1, [pc, #340]	; (8019e4c <udp_sendto_if_src+0x1c0>)
 8019cf6:	4852      	ldr	r0, [pc, #328]	; (8019e40 <udp_sendto_if_src+0x1b4>)
 8019cf8:	f005 fc84 	bl	801f604 <iprintf>
 8019cfc:	f06f 030f 	mvn.w	r3, #15
 8019d00:	e095      	b.n	8019e2e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8019d02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019d04:	2b00      	cmp	r3, #0
 8019d06:	d109      	bne.n	8019d1c <udp_sendto_if_src+0x90>
 8019d08:	4b4b      	ldr	r3, [pc, #300]	; (8019e38 <udp_sendto_if_src+0x1ac>)
 8019d0a:	f240 22d5 	movw	r2, #725	; 0x2d5
 8019d0e:	4950      	ldr	r1, [pc, #320]	; (8019e50 <udp_sendto_if_src+0x1c4>)
 8019d10:	484b      	ldr	r0, [pc, #300]	; (8019e40 <udp_sendto_if_src+0x1b4>)
 8019d12:	f005 fc77 	bl	801f604 <iprintf>
 8019d16:	f06f 030f 	mvn.w	r3, #15
 8019d1a:	e088      	b.n	8019e2e <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8019d1c:	68fb      	ldr	r3, [r7, #12]
 8019d1e:	8a5b      	ldrh	r3, [r3, #18]
 8019d20:	2b00      	cmp	r3, #0
 8019d22:	d10f      	bne.n	8019d44 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8019d24:	68f9      	ldr	r1, [r7, #12]
 8019d26:	68fb      	ldr	r3, [r7, #12]
 8019d28:	8a5b      	ldrh	r3, [r3, #18]
 8019d2a:	461a      	mov	r2, r3
 8019d2c:	68f8      	ldr	r0, [r7, #12]
 8019d2e:	f000 f893 	bl	8019e58 <udp_bind>
 8019d32:	4603      	mov	r3, r0
 8019d34:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8019d36:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8019d3a:	2b00      	cmp	r3, #0
 8019d3c:	d002      	beq.n	8019d44 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8019d3e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8019d42:	e074      	b.n	8019e2e <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8019d44:	68bb      	ldr	r3, [r7, #8]
 8019d46:	891b      	ldrh	r3, [r3, #8]
 8019d48:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8019d4c:	4293      	cmp	r3, r2
 8019d4e:	d902      	bls.n	8019d56 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8019d50:	f04f 33ff 	mov.w	r3, #4294967295
 8019d54:	e06b      	b.n	8019e2e <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8019d56:	2108      	movs	r1, #8
 8019d58:	68b8      	ldr	r0, [r7, #8]
 8019d5a:	f7f8 ff63 	bl	8012c24 <pbuf_add_header>
 8019d5e:	4603      	mov	r3, r0
 8019d60:	2b00      	cmp	r3, #0
 8019d62:	d015      	beq.n	8019d90 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8019d64:	f44f 7220 	mov.w	r2, #640	; 0x280
 8019d68:	2108      	movs	r1, #8
 8019d6a:	2022      	movs	r0, #34	; 0x22
 8019d6c:	f7f8 fd0c 	bl	8012788 <pbuf_alloc>
 8019d70:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8019d72:	69fb      	ldr	r3, [r7, #28]
 8019d74:	2b00      	cmp	r3, #0
 8019d76:	d102      	bne.n	8019d7e <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8019d78:	f04f 33ff 	mov.w	r3, #4294967295
 8019d7c:	e057      	b.n	8019e2e <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 8019d7e:	68bb      	ldr	r3, [r7, #8]
 8019d80:	891b      	ldrh	r3, [r3, #8]
 8019d82:	2b00      	cmp	r3, #0
 8019d84:	d006      	beq.n	8019d94 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8019d86:	68b9      	ldr	r1, [r7, #8]
 8019d88:	69f8      	ldr	r0, [r7, #28]
 8019d8a:	f7f9 f937 	bl	8012ffc <pbuf_chain>
 8019d8e:	e001      	b.n	8019d94 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8019d90:	68bb      	ldr	r3, [r7, #8]
 8019d92:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8019d94:	69fb      	ldr	r3, [r7, #28]
 8019d96:	895b      	ldrh	r3, [r3, #10]
 8019d98:	2b07      	cmp	r3, #7
 8019d9a:	d806      	bhi.n	8019daa <udp_sendto_if_src+0x11e>
 8019d9c:	4b26      	ldr	r3, [pc, #152]	; (8019e38 <udp_sendto_if_src+0x1ac>)
 8019d9e:	f240 320d 	movw	r2, #781	; 0x30d
 8019da2:	492c      	ldr	r1, [pc, #176]	; (8019e54 <udp_sendto_if_src+0x1c8>)
 8019da4:	4826      	ldr	r0, [pc, #152]	; (8019e40 <udp_sendto_if_src+0x1b4>)
 8019da6:	f005 fc2d 	bl	801f604 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8019daa:	69fb      	ldr	r3, [r7, #28]
 8019dac:	685b      	ldr	r3, [r3, #4]
 8019dae:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8019db0:	68fb      	ldr	r3, [r7, #12]
 8019db2:	8a5b      	ldrh	r3, [r3, #18]
 8019db4:	4618      	mov	r0, r3
 8019db6:	f7f7 fb15 	bl	80113e4 <lwip_htons>
 8019dba:	4603      	mov	r3, r0
 8019dbc:	461a      	mov	r2, r3
 8019dbe:	697b      	ldr	r3, [r7, #20]
 8019dc0:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8019dc2:	887b      	ldrh	r3, [r7, #2]
 8019dc4:	4618      	mov	r0, r3
 8019dc6:	f7f7 fb0d 	bl	80113e4 <lwip_htons>
 8019dca:	4603      	mov	r3, r0
 8019dcc:	461a      	mov	r2, r3
 8019dce:	697b      	ldr	r3, [r7, #20]
 8019dd0:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8019dd2:	697b      	ldr	r3, [r7, #20]
 8019dd4:	2200      	movs	r2, #0
 8019dd6:	719a      	strb	r2, [r3, #6]
 8019dd8:	2200      	movs	r2, #0
 8019dda:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8019ddc:	69fb      	ldr	r3, [r7, #28]
 8019dde:	891b      	ldrh	r3, [r3, #8]
 8019de0:	4618      	mov	r0, r3
 8019de2:	f7f7 faff 	bl	80113e4 <lwip_htons>
 8019de6:	4603      	mov	r3, r0
 8019de8:	461a      	mov	r2, r3
 8019dea:	697b      	ldr	r3, [r7, #20]
 8019dec:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8019dee:	2311      	movs	r3, #17
 8019df0:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8019df2:	68fb      	ldr	r3, [r7, #12]
 8019df4:	7adb      	ldrb	r3, [r3, #11]
 8019df6:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8019df8:	68fb      	ldr	r3, [r7, #12]
 8019dfa:	7a9b      	ldrb	r3, [r3, #10]
 8019dfc:	7cb9      	ldrb	r1, [r7, #18]
 8019dfe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019e00:	9202      	str	r2, [sp, #8]
 8019e02:	7cfa      	ldrb	r2, [r7, #19]
 8019e04:	9201      	str	r2, [sp, #4]
 8019e06:	9300      	str	r3, [sp, #0]
 8019e08:	460b      	mov	r3, r1
 8019e0a:	687a      	ldr	r2, [r7, #4]
 8019e0c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8019e0e:	69f8      	ldr	r0, [r7, #28]
 8019e10:	f003 fb6c 	bl	801d4ec <ip4_output_if_src>
 8019e14:	4603      	mov	r3, r0
 8019e16:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8019e18:	69fa      	ldr	r2, [r7, #28]
 8019e1a:	68bb      	ldr	r3, [r7, #8]
 8019e1c:	429a      	cmp	r2, r3
 8019e1e:	d004      	beq.n	8019e2a <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8019e20:	69f8      	ldr	r0, [r7, #28]
 8019e22:	f7f8 ffc7 	bl	8012db4 <pbuf_free>
    q = NULL;
 8019e26:	2300      	movs	r3, #0
 8019e28:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8019e2a:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8019e2e:	4618      	mov	r0, r3
 8019e30:	3720      	adds	r7, #32
 8019e32:	46bd      	mov	sp, r7
 8019e34:	bd80      	pop	{r7, pc}
 8019e36:	bf00      	nop
 8019e38:	08026218 	.word	0x08026218
 8019e3c:	08026404 	.word	0x08026404
 8019e40:	0802626c 	.word	0x0802626c
 8019e44:	08026424 	.word	0x08026424
 8019e48:	08026444 	.word	0x08026444
 8019e4c:	08026468 	.word	0x08026468
 8019e50:	0802648c 	.word	0x0802648c
 8019e54:	080264b0 	.word	0x080264b0

08019e58 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8019e58:	b580      	push	{r7, lr}
 8019e5a:	b086      	sub	sp, #24
 8019e5c:	af00      	add	r7, sp, #0
 8019e5e:	60f8      	str	r0, [r7, #12]
 8019e60:	60b9      	str	r1, [r7, #8]
 8019e62:	4613      	mov	r3, r2
 8019e64:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8019e66:	68bb      	ldr	r3, [r7, #8]
 8019e68:	2b00      	cmp	r3, #0
 8019e6a:	d101      	bne.n	8019e70 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8019e6c:	4b39      	ldr	r3, [pc, #228]	; (8019f54 <udp_bind+0xfc>)
 8019e6e:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8019e70:	68fb      	ldr	r3, [r7, #12]
 8019e72:	2b00      	cmp	r3, #0
 8019e74:	d109      	bne.n	8019e8a <udp_bind+0x32>
 8019e76:	4b38      	ldr	r3, [pc, #224]	; (8019f58 <udp_bind+0x100>)
 8019e78:	f240 32b7 	movw	r2, #951	; 0x3b7
 8019e7c:	4937      	ldr	r1, [pc, #220]	; (8019f5c <udp_bind+0x104>)
 8019e7e:	4838      	ldr	r0, [pc, #224]	; (8019f60 <udp_bind+0x108>)
 8019e80:	f005 fbc0 	bl	801f604 <iprintf>
 8019e84:	f06f 030f 	mvn.w	r3, #15
 8019e88:	e060      	b.n	8019f4c <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8019e8a:	2300      	movs	r3, #0
 8019e8c:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8019e8e:	4b35      	ldr	r3, [pc, #212]	; (8019f64 <udp_bind+0x10c>)
 8019e90:	681b      	ldr	r3, [r3, #0]
 8019e92:	617b      	str	r3, [r7, #20]
 8019e94:	e009      	b.n	8019eaa <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8019e96:	68fa      	ldr	r2, [r7, #12]
 8019e98:	697b      	ldr	r3, [r7, #20]
 8019e9a:	429a      	cmp	r2, r3
 8019e9c:	d102      	bne.n	8019ea4 <udp_bind+0x4c>
      rebind = 1;
 8019e9e:	2301      	movs	r3, #1
 8019ea0:	74fb      	strb	r3, [r7, #19]
      break;
 8019ea2:	e005      	b.n	8019eb0 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8019ea4:	697b      	ldr	r3, [r7, #20]
 8019ea6:	68db      	ldr	r3, [r3, #12]
 8019ea8:	617b      	str	r3, [r7, #20]
 8019eaa:	697b      	ldr	r3, [r7, #20]
 8019eac:	2b00      	cmp	r3, #0
 8019eae:	d1f2      	bne.n	8019e96 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8019eb0:	88fb      	ldrh	r3, [r7, #6]
 8019eb2:	2b00      	cmp	r3, #0
 8019eb4:	d109      	bne.n	8019eca <udp_bind+0x72>
    port = udp_new_port();
 8019eb6:	f7ff fc35 	bl	8019724 <udp_new_port>
 8019eba:	4603      	mov	r3, r0
 8019ebc:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8019ebe:	88fb      	ldrh	r3, [r7, #6]
 8019ec0:	2b00      	cmp	r3, #0
 8019ec2:	d12c      	bne.n	8019f1e <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8019ec4:	f06f 0307 	mvn.w	r3, #7
 8019ec8:	e040      	b.n	8019f4c <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8019eca:	4b26      	ldr	r3, [pc, #152]	; (8019f64 <udp_bind+0x10c>)
 8019ecc:	681b      	ldr	r3, [r3, #0]
 8019ece:	617b      	str	r3, [r7, #20]
 8019ed0:	e022      	b.n	8019f18 <udp_bind+0xc0>
      if (pcb != ipcb) {
 8019ed2:	68fa      	ldr	r2, [r7, #12]
 8019ed4:	697b      	ldr	r3, [r7, #20]
 8019ed6:	429a      	cmp	r2, r3
 8019ed8:	d01b      	beq.n	8019f12 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8019eda:	697b      	ldr	r3, [r7, #20]
 8019edc:	8a5b      	ldrh	r3, [r3, #18]
 8019ede:	88fa      	ldrh	r2, [r7, #6]
 8019ee0:	429a      	cmp	r2, r3
 8019ee2:	d116      	bne.n	8019f12 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8019ee4:	697b      	ldr	r3, [r7, #20]
 8019ee6:	681a      	ldr	r2, [r3, #0]
 8019ee8:	68bb      	ldr	r3, [r7, #8]
 8019eea:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8019eec:	429a      	cmp	r2, r3
 8019eee:	d00d      	beq.n	8019f0c <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8019ef0:	68bb      	ldr	r3, [r7, #8]
 8019ef2:	2b00      	cmp	r3, #0
 8019ef4:	d00a      	beq.n	8019f0c <udp_bind+0xb4>
 8019ef6:	68bb      	ldr	r3, [r7, #8]
 8019ef8:	681b      	ldr	r3, [r3, #0]
 8019efa:	2b00      	cmp	r3, #0
 8019efc:	d006      	beq.n	8019f0c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8019efe:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8019f00:	2b00      	cmp	r3, #0
 8019f02:	d003      	beq.n	8019f0c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8019f04:	697b      	ldr	r3, [r7, #20]
 8019f06:	681b      	ldr	r3, [r3, #0]
 8019f08:	2b00      	cmp	r3, #0
 8019f0a:	d102      	bne.n	8019f12 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8019f0c:	f06f 0307 	mvn.w	r3, #7
 8019f10:	e01c      	b.n	8019f4c <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8019f12:	697b      	ldr	r3, [r7, #20]
 8019f14:	68db      	ldr	r3, [r3, #12]
 8019f16:	617b      	str	r3, [r7, #20]
 8019f18:	697b      	ldr	r3, [r7, #20]
 8019f1a:	2b00      	cmp	r3, #0
 8019f1c:	d1d9      	bne.n	8019ed2 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8019f1e:	68bb      	ldr	r3, [r7, #8]
 8019f20:	2b00      	cmp	r3, #0
 8019f22:	d002      	beq.n	8019f2a <udp_bind+0xd2>
 8019f24:	68bb      	ldr	r3, [r7, #8]
 8019f26:	681b      	ldr	r3, [r3, #0]
 8019f28:	e000      	b.n	8019f2c <udp_bind+0xd4>
 8019f2a:	2300      	movs	r3, #0
 8019f2c:	68fa      	ldr	r2, [r7, #12]
 8019f2e:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8019f30:	68fb      	ldr	r3, [r7, #12]
 8019f32:	88fa      	ldrh	r2, [r7, #6]
 8019f34:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8019f36:	7cfb      	ldrb	r3, [r7, #19]
 8019f38:	2b00      	cmp	r3, #0
 8019f3a:	d106      	bne.n	8019f4a <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8019f3c:	4b09      	ldr	r3, [pc, #36]	; (8019f64 <udp_bind+0x10c>)
 8019f3e:	681a      	ldr	r2, [r3, #0]
 8019f40:	68fb      	ldr	r3, [r7, #12]
 8019f42:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8019f44:	4a07      	ldr	r2, [pc, #28]	; (8019f64 <udp_bind+0x10c>)
 8019f46:	68fb      	ldr	r3, [r7, #12]
 8019f48:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8019f4a:	2300      	movs	r3, #0
}
 8019f4c:	4618      	mov	r0, r3
 8019f4e:	3718      	adds	r7, #24
 8019f50:	46bd      	mov	sp, r7
 8019f52:	bd80      	pop	{r7, pc}
 8019f54:	0802718c 	.word	0x0802718c
 8019f58:	08026218 	.word	0x08026218
 8019f5c:	080264e0 	.word	0x080264e0
 8019f60:	0802626c 	.word	0x0802626c
 8019f64:	24007f54 	.word	0x24007f54

08019f68 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8019f68:	b580      	push	{r7, lr}
 8019f6a:	b086      	sub	sp, #24
 8019f6c:	af00      	add	r7, sp, #0
 8019f6e:	60f8      	str	r0, [r7, #12]
 8019f70:	60b9      	str	r1, [r7, #8]
 8019f72:	4613      	mov	r3, r2
 8019f74:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8019f76:	68fb      	ldr	r3, [r7, #12]
 8019f78:	2b00      	cmp	r3, #0
 8019f7a:	d109      	bne.n	8019f90 <udp_connect+0x28>
 8019f7c:	4b2c      	ldr	r3, [pc, #176]	; (801a030 <udp_connect+0xc8>)
 8019f7e:	f240 4235 	movw	r2, #1077	; 0x435
 8019f82:	492c      	ldr	r1, [pc, #176]	; (801a034 <udp_connect+0xcc>)
 8019f84:	482c      	ldr	r0, [pc, #176]	; (801a038 <udp_connect+0xd0>)
 8019f86:	f005 fb3d 	bl	801f604 <iprintf>
 8019f8a:	f06f 030f 	mvn.w	r3, #15
 8019f8e:	e04b      	b.n	801a028 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8019f90:	68bb      	ldr	r3, [r7, #8]
 8019f92:	2b00      	cmp	r3, #0
 8019f94:	d109      	bne.n	8019faa <udp_connect+0x42>
 8019f96:	4b26      	ldr	r3, [pc, #152]	; (801a030 <udp_connect+0xc8>)
 8019f98:	f240 4236 	movw	r2, #1078	; 0x436
 8019f9c:	4927      	ldr	r1, [pc, #156]	; (801a03c <udp_connect+0xd4>)
 8019f9e:	4826      	ldr	r0, [pc, #152]	; (801a038 <udp_connect+0xd0>)
 8019fa0:	f005 fb30 	bl	801f604 <iprintf>
 8019fa4:	f06f 030f 	mvn.w	r3, #15
 8019fa8:	e03e      	b.n	801a028 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 8019faa:	68fb      	ldr	r3, [r7, #12]
 8019fac:	8a5b      	ldrh	r3, [r3, #18]
 8019fae:	2b00      	cmp	r3, #0
 8019fb0:	d10f      	bne.n	8019fd2 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8019fb2:	68f9      	ldr	r1, [r7, #12]
 8019fb4:	68fb      	ldr	r3, [r7, #12]
 8019fb6:	8a5b      	ldrh	r3, [r3, #18]
 8019fb8:	461a      	mov	r2, r3
 8019fba:	68f8      	ldr	r0, [r7, #12]
 8019fbc:	f7ff ff4c 	bl	8019e58 <udp_bind>
 8019fc0:	4603      	mov	r3, r0
 8019fc2:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8019fc4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8019fc8:	2b00      	cmp	r3, #0
 8019fca:	d002      	beq.n	8019fd2 <udp_connect+0x6a>
      return err;
 8019fcc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8019fd0:	e02a      	b.n	801a028 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8019fd2:	68bb      	ldr	r3, [r7, #8]
 8019fd4:	2b00      	cmp	r3, #0
 8019fd6:	d002      	beq.n	8019fde <udp_connect+0x76>
 8019fd8:	68bb      	ldr	r3, [r7, #8]
 8019fda:	681b      	ldr	r3, [r3, #0]
 8019fdc:	e000      	b.n	8019fe0 <udp_connect+0x78>
 8019fde:	2300      	movs	r3, #0
 8019fe0:	68fa      	ldr	r2, [r7, #12]
 8019fe2:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 8019fe4:	68fb      	ldr	r3, [r7, #12]
 8019fe6:	88fa      	ldrh	r2, [r7, #6]
 8019fe8:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8019fea:	68fb      	ldr	r3, [r7, #12]
 8019fec:	7c1b      	ldrb	r3, [r3, #16]
 8019fee:	f043 0304 	orr.w	r3, r3, #4
 8019ff2:	b2da      	uxtb	r2, r3
 8019ff4:	68fb      	ldr	r3, [r7, #12]
 8019ff6:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8019ff8:	4b11      	ldr	r3, [pc, #68]	; (801a040 <udp_connect+0xd8>)
 8019ffa:	681b      	ldr	r3, [r3, #0]
 8019ffc:	617b      	str	r3, [r7, #20]
 8019ffe:	e008      	b.n	801a012 <udp_connect+0xaa>
    if (pcb == ipcb) {
 801a000:	68fa      	ldr	r2, [r7, #12]
 801a002:	697b      	ldr	r3, [r7, #20]
 801a004:	429a      	cmp	r2, r3
 801a006:	d101      	bne.n	801a00c <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 801a008:	2300      	movs	r3, #0
 801a00a:	e00d      	b.n	801a028 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801a00c:	697b      	ldr	r3, [r7, #20]
 801a00e:	68db      	ldr	r3, [r3, #12]
 801a010:	617b      	str	r3, [r7, #20]
 801a012:	697b      	ldr	r3, [r7, #20]
 801a014:	2b00      	cmp	r3, #0
 801a016:	d1f3      	bne.n	801a000 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 801a018:	4b09      	ldr	r3, [pc, #36]	; (801a040 <udp_connect+0xd8>)
 801a01a:	681a      	ldr	r2, [r3, #0]
 801a01c:	68fb      	ldr	r3, [r7, #12]
 801a01e:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 801a020:	4a07      	ldr	r2, [pc, #28]	; (801a040 <udp_connect+0xd8>)
 801a022:	68fb      	ldr	r3, [r7, #12]
 801a024:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 801a026:	2300      	movs	r3, #0
}
 801a028:	4618      	mov	r0, r3
 801a02a:	3718      	adds	r7, #24
 801a02c:	46bd      	mov	sp, r7
 801a02e:	bd80      	pop	{r7, pc}
 801a030:	08026218 	.word	0x08026218
 801a034:	080264f8 	.word	0x080264f8
 801a038:	0802626c 	.word	0x0802626c
 801a03c:	08026514 	.word	0x08026514
 801a040:	24007f54 	.word	0x24007f54

0801a044 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 801a044:	b580      	push	{r7, lr}
 801a046:	b084      	sub	sp, #16
 801a048:	af00      	add	r7, sp, #0
 801a04a:	60f8      	str	r0, [r7, #12]
 801a04c:	60b9      	str	r1, [r7, #8]
 801a04e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 801a050:	68fb      	ldr	r3, [r7, #12]
 801a052:	2b00      	cmp	r3, #0
 801a054:	d107      	bne.n	801a066 <udp_recv+0x22>
 801a056:	4b08      	ldr	r3, [pc, #32]	; (801a078 <udp_recv+0x34>)
 801a058:	f240 428a 	movw	r2, #1162	; 0x48a
 801a05c:	4907      	ldr	r1, [pc, #28]	; (801a07c <udp_recv+0x38>)
 801a05e:	4808      	ldr	r0, [pc, #32]	; (801a080 <udp_recv+0x3c>)
 801a060:	f005 fad0 	bl	801f604 <iprintf>
 801a064:	e005      	b.n	801a072 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 801a066:	68fb      	ldr	r3, [r7, #12]
 801a068:	68ba      	ldr	r2, [r7, #8]
 801a06a:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 801a06c:	68fb      	ldr	r3, [r7, #12]
 801a06e:	687a      	ldr	r2, [r7, #4]
 801a070:	61da      	str	r2, [r3, #28]
}
 801a072:	3710      	adds	r7, #16
 801a074:	46bd      	mov	sp, r7
 801a076:	bd80      	pop	{r7, pc}
 801a078:	08026218 	.word	0x08026218
 801a07c:	0802654c 	.word	0x0802654c
 801a080:	0802626c 	.word	0x0802626c

0801a084 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 801a084:	b580      	push	{r7, lr}
 801a086:	b084      	sub	sp, #16
 801a088:	af00      	add	r7, sp, #0
 801a08a:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 801a08c:	687b      	ldr	r3, [r7, #4]
 801a08e:	2b00      	cmp	r3, #0
 801a090:	d107      	bne.n	801a0a2 <udp_remove+0x1e>
 801a092:	4b19      	ldr	r3, [pc, #100]	; (801a0f8 <udp_remove+0x74>)
 801a094:	f240 42a1 	movw	r2, #1185	; 0x4a1
 801a098:	4918      	ldr	r1, [pc, #96]	; (801a0fc <udp_remove+0x78>)
 801a09a:	4819      	ldr	r0, [pc, #100]	; (801a100 <udp_remove+0x7c>)
 801a09c:	f005 fab2 	bl	801f604 <iprintf>
 801a0a0:	e026      	b.n	801a0f0 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801a0a2:	4b18      	ldr	r3, [pc, #96]	; (801a104 <udp_remove+0x80>)
 801a0a4:	681b      	ldr	r3, [r3, #0]
 801a0a6:	687a      	ldr	r2, [r7, #4]
 801a0a8:	429a      	cmp	r2, r3
 801a0aa:	d105      	bne.n	801a0b8 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 801a0ac:	4b15      	ldr	r3, [pc, #84]	; (801a104 <udp_remove+0x80>)
 801a0ae:	681b      	ldr	r3, [r3, #0]
 801a0b0:	68db      	ldr	r3, [r3, #12]
 801a0b2:	4a14      	ldr	r2, [pc, #80]	; (801a104 <udp_remove+0x80>)
 801a0b4:	6013      	str	r3, [r2, #0]
 801a0b6:	e017      	b.n	801a0e8 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801a0b8:	4b12      	ldr	r3, [pc, #72]	; (801a104 <udp_remove+0x80>)
 801a0ba:	681b      	ldr	r3, [r3, #0]
 801a0bc:	60fb      	str	r3, [r7, #12]
 801a0be:	e010      	b.n	801a0e2 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 801a0c0:	68fb      	ldr	r3, [r7, #12]
 801a0c2:	68db      	ldr	r3, [r3, #12]
 801a0c4:	2b00      	cmp	r3, #0
 801a0c6:	d009      	beq.n	801a0dc <udp_remove+0x58>
 801a0c8:	68fb      	ldr	r3, [r7, #12]
 801a0ca:	68db      	ldr	r3, [r3, #12]
 801a0cc:	687a      	ldr	r2, [r7, #4]
 801a0ce:	429a      	cmp	r2, r3
 801a0d0:	d104      	bne.n	801a0dc <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 801a0d2:	687b      	ldr	r3, [r7, #4]
 801a0d4:	68da      	ldr	r2, [r3, #12]
 801a0d6:	68fb      	ldr	r3, [r7, #12]
 801a0d8:	60da      	str	r2, [r3, #12]
        break;
 801a0da:	e005      	b.n	801a0e8 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801a0dc:	68fb      	ldr	r3, [r7, #12]
 801a0de:	68db      	ldr	r3, [r3, #12]
 801a0e0:	60fb      	str	r3, [r7, #12]
 801a0e2:	68fb      	ldr	r3, [r7, #12]
 801a0e4:	2b00      	cmp	r3, #0
 801a0e6:	d1eb      	bne.n	801a0c0 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 801a0e8:	6879      	ldr	r1, [r7, #4]
 801a0ea:	2000      	movs	r0, #0
 801a0ec:	f7f7 ff80 	bl	8011ff0 <memp_free>
}
 801a0f0:	3710      	adds	r7, #16
 801a0f2:	46bd      	mov	sp, r7
 801a0f4:	bd80      	pop	{r7, pc}
 801a0f6:	bf00      	nop
 801a0f8:	08026218 	.word	0x08026218
 801a0fc:	08026564 	.word	0x08026564
 801a100:	0802626c 	.word	0x0802626c
 801a104:	24007f54 	.word	0x24007f54

0801a108 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 801a108:	b580      	push	{r7, lr}
 801a10a:	b082      	sub	sp, #8
 801a10c:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801a10e:	2000      	movs	r0, #0
 801a110:	f7f7 fef8 	bl	8011f04 <memp_malloc>
 801a114:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801a116:	687b      	ldr	r3, [r7, #4]
 801a118:	2b00      	cmp	r3, #0
 801a11a:	d007      	beq.n	801a12c <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 801a11c:	2220      	movs	r2, #32
 801a11e:	2100      	movs	r1, #0
 801a120:	6878      	ldr	r0, [r7, #4]
 801a122:	f004 fc21 	bl	801e968 <memset>
    pcb->ttl = UDP_TTL;
 801a126:	687b      	ldr	r3, [r7, #4]
 801a128:	22ff      	movs	r2, #255	; 0xff
 801a12a:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 801a12c:	687b      	ldr	r3, [r7, #4]
}
 801a12e:	4618      	mov	r0, r3
 801a130:	3708      	adds	r7, #8
 801a132:	46bd      	mov	sp, r7
 801a134:	bd80      	pop	{r7, pc}

0801a136 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 801a136:	b580      	push	{r7, lr}
 801a138:	b084      	sub	sp, #16
 801a13a:	af00      	add	r7, sp, #0
 801a13c:	4603      	mov	r3, r0
 801a13e:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 801a140:	f7ff ffe2 	bl	801a108 <udp_new>
 801a144:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 801a146:	68fb      	ldr	r3, [r7, #12]
}
 801a148:	4618      	mov	r0, r3
 801a14a:	3710      	adds	r7, #16
 801a14c:	46bd      	mov	sp, r7
 801a14e:	bd80      	pop	{r7, pc}

0801a150 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801a150:	b480      	push	{r7}
 801a152:	b085      	sub	sp, #20
 801a154:	af00      	add	r7, sp, #0
 801a156:	6078      	str	r0, [r7, #4]
 801a158:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801a15a:	687b      	ldr	r3, [r7, #4]
 801a15c:	2b00      	cmp	r3, #0
 801a15e:	d01e      	beq.n	801a19e <udp_netif_ip_addr_changed+0x4e>
 801a160:	687b      	ldr	r3, [r7, #4]
 801a162:	681b      	ldr	r3, [r3, #0]
 801a164:	2b00      	cmp	r3, #0
 801a166:	d01a      	beq.n	801a19e <udp_netif_ip_addr_changed+0x4e>
 801a168:	683b      	ldr	r3, [r7, #0]
 801a16a:	2b00      	cmp	r3, #0
 801a16c:	d017      	beq.n	801a19e <udp_netif_ip_addr_changed+0x4e>
 801a16e:	683b      	ldr	r3, [r7, #0]
 801a170:	681b      	ldr	r3, [r3, #0]
 801a172:	2b00      	cmp	r3, #0
 801a174:	d013      	beq.n	801a19e <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801a176:	4b0d      	ldr	r3, [pc, #52]	; (801a1ac <udp_netif_ip_addr_changed+0x5c>)
 801a178:	681b      	ldr	r3, [r3, #0]
 801a17a:	60fb      	str	r3, [r7, #12]
 801a17c:	e00c      	b.n	801a198 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801a17e:	68fb      	ldr	r3, [r7, #12]
 801a180:	681a      	ldr	r2, [r3, #0]
 801a182:	687b      	ldr	r3, [r7, #4]
 801a184:	681b      	ldr	r3, [r3, #0]
 801a186:	429a      	cmp	r2, r3
 801a188:	d103      	bne.n	801a192 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801a18a:	683b      	ldr	r3, [r7, #0]
 801a18c:	681a      	ldr	r2, [r3, #0]
 801a18e:	68fb      	ldr	r3, [r7, #12]
 801a190:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801a192:	68fb      	ldr	r3, [r7, #12]
 801a194:	68db      	ldr	r3, [r3, #12]
 801a196:	60fb      	str	r3, [r7, #12]
 801a198:	68fb      	ldr	r3, [r7, #12]
 801a19a:	2b00      	cmp	r3, #0
 801a19c:	d1ef      	bne.n	801a17e <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801a19e:	bf00      	nop
 801a1a0:	3714      	adds	r7, #20
 801a1a2:	46bd      	mov	sp, r7
 801a1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a1a8:	4770      	bx	lr
 801a1aa:	bf00      	nop
 801a1ac:	24007f54 	.word	0x24007f54

0801a1b0 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 801a1b0:	b580      	push	{r7, lr}
 801a1b2:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 801a1b4:	4b20      	ldr	r3, [pc, #128]	; (801a238 <dhcp_inc_pcb_refcount+0x88>)
 801a1b6:	781b      	ldrb	r3, [r3, #0]
 801a1b8:	2b00      	cmp	r3, #0
 801a1ba:	d133      	bne.n	801a224 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 801a1bc:	4b1f      	ldr	r3, [pc, #124]	; (801a23c <dhcp_inc_pcb_refcount+0x8c>)
 801a1be:	681b      	ldr	r3, [r3, #0]
 801a1c0:	2b00      	cmp	r3, #0
 801a1c2:	d005      	beq.n	801a1d0 <dhcp_inc_pcb_refcount+0x20>
 801a1c4:	4b1e      	ldr	r3, [pc, #120]	; (801a240 <dhcp_inc_pcb_refcount+0x90>)
 801a1c6:	22e5      	movs	r2, #229	; 0xe5
 801a1c8:	491e      	ldr	r1, [pc, #120]	; (801a244 <dhcp_inc_pcb_refcount+0x94>)
 801a1ca:	481f      	ldr	r0, [pc, #124]	; (801a248 <dhcp_inc_pcb_refcount+0x98>)
 801a1cc:	f005 fa1a 	bl	801f604 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 801a1d0:	f7ff ff9a 	bl	801a108 <udp_new>
 801a1d4:	4603      	mov	r3, r0
 801a1d6:	4a19      	ldr	r2, [pc, #100]	; (801a23c <dhcp_inc_pcb_refcount+0x8c>)
 801a1d8:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 801a1da:	4b18      	ldr	r3, [pc, #96]	; (801a23c <dhcp_inc_pcb_refcount+0x8c>)
 801a1dc:	681b      	ldr	r3, [r3, #0]
 801a1de:	2b00      	cmp	r3, #0
 801a1e0:	d102      	bne.n	801a1e8 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 801a1e2:	f04f 33ff 	mov.w	r3, #4294967295
 801a1e6:	e024      	b.n	801a232 <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 801a1e8:	4b14      	ldr	r3, [pc, #80]	; (801a23c <dhcp_inc_pcb_refcount+0x8c>)
 801a1ea:	681b      	ldr	r3, [r3, #0]
 801a1ec:	7a5a      	ldrb	r2, [r3, #9]
 801a1ee:	4b13      	ldr	r3, [pc, #76]	; (801a23c <dhcp_inc_pcb_refcount+0x8c>)
 801a1f0:	681b      	ldr	r3, [r3, #0]
 801a1f2:	f042 0220 	orr.w	r2, r2, #32
 801a1f6:	b2d2      	uxtb	r2, r2
 801a1f8:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 801a1fa:	4b10      	ldr	r3, [pc, #64]	; (801a23c <dhcp_inc_pcb_refcount+0x8c>)
 801a1fc:	681b      	ldr	r3, [r3, #0]
 801a1fe:	2244      	movs	r2, #68	; 0x44
 801a200:	4912      	ldr	r1, [pc, #72]	; (801a24c <dhcp_inc_pcb_refcount+0x9c>)
 801a202:	4618      	mov	r0, r3
 801a204:	f7ff fe28 	bl	8019e58 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 801a208:	4b0c      	ldr	r3, [pc, #48]	; (801a23c <dhcp_inc_pcb_refcount+0x8c>)
 801a20a:	681b      	ldr	r3, [r3, #0]
 801a20c:	2243      	movs	r2, #67	; 0x43
 801a20e:	490f      	ldr	r1, [pc, #60]	; (801a24c <dhcp_inc_pcb_refcount+0x9c>)
 801a210:	4618      	mov	r0, r3
 801a212:	f7ff fea9 	bl	8019f68 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 801a216:	4b09      	ldr	r3, [pc, #36]	; (801a23c <dhcp_inc_pcb_refcount+0x8c>)
 801a218:	681b      	ldr	r3, [r3, #0]
 801a21a:	2200      	movs	r2, #0
 801a21c:	490c      	ldr	r1, [pc, #48]	; (801a250 <dhcp_inc_pcb_refcount+0xa0>)
 801a21e:	4618      	mov	r0, r3
 801a220:	f7ff ff10 	bl	801a044 <udp_recv>
  }

  dhcp_pcb_refcount++;
 801a224:	4b04      	ldr	r3, [pc, #16]	; (801a238 <dhcp_inc_pcb_refcount+0x88>)
 801a226:	781b      	ldrb	r3, [r3, #0]
 801a228:	3301      	adds	r3, #1
 801a22a:	b2da      	uxtb	r2, r3
 801a22c:	4b02      	ldr	r3, [pc, #8]	; (801a238 <dhcp_inc_pcb_refcount+0x88>)
 801a22e:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 801a230:	2300      	movs	r3, #0
}
 801a232:	4618      	mov	r0, r3
 801a234:	bd80      	pop	{r7, pc}
 801a236:	bf00      	nop
 801a238:	24004584 	.word	0x24004584
 801a23c:	24004580 	.word	0x24004580
 801a240:	0802657c 	.word	0x0802657c
 801a244:	080265b4 	.word	0x080265b4
 801a248:	080265dc 	.word	0x080265dc
 801a24c:	0802718c 	.word	0x0802718c
 801a250:	0801bae9 	.word	0x0801bae9

0801a254 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 801a254:	b580      	push	{r7, lr}
 801a256:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 801a258:	4b0e      	ldr	r3, [pc, #56]	; (801a294 <dhcp_dec_pcb_refcount+0x40>)
 801a25a:	781b      	ldrb	r3, [r3, #0]
 801a25c:	2b00      	cmp	r3, #0
 801a25e:	d105      	bne.n	801a26c <dhcp_dec_pcb_refcount+0x18>
 801a260:	4b0d      	ldr	r3, [pc, #52]	; (801a298 <dhcp_dec_pcb_refcount+0x44>)
 801a262:	22ff      	movs	r2, #255	; 0xff
 801a264:	490d      	ldr	r1, [pc, #52]	; (801a29c <dhcp_dec_pcb_refcount+0x48>)
 801a266:	480e      	ldr	r0, [pc, #56]	; (801a2a0 <dhcp_dec_pcb_refcount+0x4c>)
 801a268:	f005 f9cc 	bl	801f604 <iprintf>
  dhcp_pcb_refcount--;
 801a26c:	4b09      	ldr	r3, [pc, #36]	; (801a294 <dhcp_dec_pcb_refcount+0x40>)
 801a26e:	781b      	ldrb	r3, [r3, #0]
 801a270:	3b01      	subs	r3, #1
 801a272:	b2da      	uxtb	r2, r3
 801a274:	4b07      	ldr	r3, [pc, #28]	; (801a294 <dhcp_dec_pcb_refcount+0x40>)
 801a276:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 801a278:	4b06      	ldr	r3, [pc, #24]	; (801a294 <dhcp_dec_pcb_refcount+0x40>)
 801a27a:	781b      	ldrb	r3, [r3, #0]
 801a27c:	2b00      	cmp	r3, #0
 801a27e:	d107      	bne.n	801a290 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 801a280:	4b08      	ldr	r3, [pc, #32]	; (801a2a4 <dhcp_dec_pcb_refcount+0x50>)
 801a282:	681b      	ldr	r3, [r3, #0]
 801a284:	4618      	mov	r0, r3
 801a286:	f7ff fefd 	bl	801a084 <udp_remove>
    dhcp_pcb = NULL;
 801a28a:	4b06      	ldr	r3, [pc, #24]	; (801a2a4 <dhcp_dec_pcb_refcount+0x50>)
 801a28c:	2200      	movs	r2, #0
 801a28e:	601a      	str	r2, [r3, #0]
  }
}
 801a290:	bf00      	nop
 801a292:	bd80      	pop	{r7, pc}
 801a294:	24004584 	.word	0x24004584
 801a298:	0802657c 	.word	0x0802657c
 801a29c:	08026604 	.word	0x08026604
 801a2a0:	080265dc 	.word	0x080265dc
 801a2a4:	24004580 	.word	0x24004580

0801a2a8 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 801a2a8:	b580      	push	{r7, lr}
 801a2aa:	b084      	sub	sp, #16
 801a2ac:	af00      	add	r7, sp, #0
 801a2ae:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801a2b0:	687b      	ldr	r3, [r7, #4]
 801a2b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a2b4:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 801a2b6:	210c      	movs	r1, #12
 801a2b8:	68f8      	ldr	r0, [r7, #12]
 801a2ba:	f001 f857 	bl	801b36c <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 801a2be:	4b06      	ldr	r3, [pc, #24]	; (801a2d8 <dhcp_handle_nak+0x30>)
 801a2c0:	4a05      	ldr	r2, [pc, #20]	; (801a2d8 <dhcp_handle_nak+0x30>)
 801a2c2:	4905      	ldr	r1, [pc, #20]	; (801a2d8 <dhcp_handle_nak+0x30>)
 801a2c4:	6878      	ldr	r0, [r7, #4]
 801a2c6:	f7f8 f835 	bl	8012334 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 801a2ca:	6878      	ldr	r0, [r7, #4]
 801a2cc:	f000 fc4a 	bl	801ab64 <dhcp_discover>
}
 801a2d0:	bf00      	nop
 801a2d2:	3710      	adds	r7, #16
 801a2d4:	46bd      	mov	sp, r7
 801a2d6:	bd80      	pop	{r7, pc}
 801a2d8:	0802718c 	.word	0x0802718c

0801a2dc <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 801a2dc:	b580      	push	{r7, lr}
 801a2de:	b084      	sub	sp, #16
 801a2e0:	af00      	add	r7, sp, #0
 801a2e2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801a2e4:	687b      	ldr	r3, [r7, #4]
 801a2e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a2e8:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 801a2ea:	2108      	movs	r1, #8
 801a2ec:	68f8      	ldr	r0, [r7, #12]
 801a2ee:	f001 f83d 	bl	801b36c <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 801a2f2:	68fb      	ldr	r3, [r7, #12]
 801a2f4:	331c      	adds	r3, #28
 801a2f6:	2200      	movs	r2, #0
 801a2f8:	4619      	mov	r1, r3
 801a2fa:	6878      	ldr	r0, [r7, #4]
 801a2fc:	f002 fb3e 	bl	801c97c <etharp_query>
 801a300:	4603      	mov	r3, r0
 801a302:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 801a304:	68fb      	ldr	r3, [r7, #12]
 801a306:	799b      	ldrb	r3, [r3, #6]
 801a308:	2bff      	cmp	r3, #255	; 0xff
 801a30a:	d005      	beq.n	801a318 <dhcp_check+0x3c>
    dhcp->tries++;
 801a30c:	68fb      	ldr	r3, [r7, #12]
 801a30e:	799b      	ldrb	r3, [r3, #6]
 801a310:	3301      	adds	r3, #1
 801a312:	b2da      	uxtb	r2, r3
 801a314:	68fb      	ldr	r3, [r7, #12]
 801a316:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 801a318:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 801a31c:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801a31e:	893b      	ldrh	r3, [r7, #8]
 801a320:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801a324:	4a06      	ldr	r2, [pc, #24]	; (801a340 <dhcp_check+0x64>)
 801a326:	fb82 1203 	smull	r1, r2, r2, r3
 801a32a:	1152      	asrs	r2, r2, #5
 801a32c:	17db      	asrs	r3, r3, #31
 801a32e:	1ad3      	subs	r3, r2, r3
 801a330:	b29a      	uxth	r2, r3
 801a332:	68fb      	ldr	r3, [r7, #12]
 801a334:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 801a336:	bf00      	nop
 801a338:	3710      	adds	r7, #16
 801a33a:	46bd      	mov	sp, r7
 801a33c:	bd80      	pop	{r7, pc}
 801a33e:	bf00      	nop
 801a340:	10624dd3 	.word	0x10624dd3

0801a344 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 801a344:	b580      	push	{r7, lr}
 801a346:	b084      	sub	sp, #16
 801a348:	af00      	add	r7, sp, #0
 801a34a:	6078      	str	r0, [r7, #4]
 801a34c:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801a34e:	687b      	ldr	r3, [r7, #4]
 801a350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a352:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 801a354:	4b0c      	ldr	r3, [pc, #48]	; (801a388 <dhcp_handle_offer+0x44>)
 801a356:	789b      	ldrb	r3, [r3, #2]
 801a358:	2b00      	cmp	r3, #0
 801a35a:	d011      	beq.n	801a380 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 801a35c:	68fb      	ldr	r3, [r7, #12]
 801a35e:	2200      	movs	r2, #0
 801a360:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 801a362:	4b0a      	ldr	r3, [pc, #40]	; (801a38c <dhcp_handle_offer+0x48>)
 801a364:	689b      	ldr	r3, [r3, #8]
 801a366:	4618      	mov	r0, r3
 801a368:	f7f7 f851 	bl	801140e <lwip_htonl>
 801a36c:	4602      	mov	r2, r0
 801a36e:	68fb      	ldr	r3, [r7, #12]
 801a370:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 801a372:	683b      	ldr	r3, [r7, #0]
 801a374:	691a      	ldr	r2, [r3, #16]
 801a376:	68fb      	ldr	r3, [r7, #12]
 801a378:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 801a37a:	6878      	ldr	r0, [r7, #4]
 801a37c:	f000 f808 	bl	801a390 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 801a380:	bf00      	nop
 801a382:	3710      	adds	r7, #16
 801a384:	46bd      	mov	sp, r7
 801a386:	bd80      	pop	{r7, pc}
 801a388:	24007f58 	.word	0x24007f58
 801a38c:	24007f60 	.word	0x24007f60

0801a390 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 801a390:	b5b0      	push	{r4, r5, r7, lr}
 801a392:	b08a      	sub	sp, #40	; 0x28
 801a394:	af02      	add	r7, sp, #8
 801a396:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 801a398:	687b      	ldr	r3, [r7, #4]
 801a39a:	2b00      	cmp	r3, #0
 801a39c:	d109      	bne.n	801a3b2 <dhcp_select+0x22>
 801a39e:	4b71      	ldr	r3, [pc, #452]	; (801a564 <dhcp_select+0x1d4>)
 801a3a0:	f240 1277 	movw	r2, #375	; 0x177
 801a3a4:	4970      	ldr	r1, [pc, #448]	; (801a568 <dhcp_select+0x1d8>)
 801a3a6:	4871      	ldr	r0, [pc, #452]	; (801a56c <dhcp_select+0x1dc>)
 801a3a8:	f005 f92c 	bl	801f604 <iprintf>
 801a3ac:	f06f 030f 	mvn.w	r3, #15
 801a3b0:	e0d3      	b.n	801a55a <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 801a3b2:	687b      	ldr	r3, [r7, #4]
 801a3b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a3b6:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 801a3b8:	69bb      	ldr	r3, [r7, #24]
 801a3ba:	2b00      	cmp	r3, #0
 801a3bc:	d109      	bne.n	801a3d2 <dhcp_select+0x42>
 801a3be:	4b69      	ldr	r3, [pc, #420]	; (801a564 <dhcp_select+0x1d4>)
 801a3c0:	f240 1279 	movw	r2, #377	; 0x179
 801a3c4:	496a      	ldr	r1, [pc, #424]	; (801a570 <dhcp_select+0x1e0>)
 801a3c6:	4869      	ldr	r0, [pc, #420]	; (801a56c <dhcp_select+0x1dc>)
 801a3c8:	f005 f91c 	bl	801f604 <iprintf>
 801a3cc:	f06f 0305 	mvn.w	r3, #5
 801a3d0:	e0c3      	b.n	801a55a <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 801a3d2:	2101      	movs	r1, #1
 801a3d4:	69b8      	ldr	r0, [r7, #24]
 801a3d6:	f000 ffc9 	bl	801b36c <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801a3da:	f107 030c 	add.w	r3, r7, #12
 801a3de:	2203      	movs	r2, #3
 801a3e0:	69b9      	ldr	r1, [r7, #24]
 801a3e2:	6878      	ldr	r0, [r7, #4]
 801a3e4:	f001 fc4e 	bl	801bc84 <dhcp_create_msg>
 801a3e8:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801a3ea:	697b      	ldr	r3, [r7, #20]
 801a3ec:	2b00      	cmp	r3, #0
 801a3ee:	f000 8085 	beq.w	801a4fc <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801a3f2:	697b      	ldr	r3, [r7, #20]
 801a3f4:	685b      	ldr	r3, [r3, #4]
 801a3f6:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801a3f8:	89b8      	ldrh	r0, [r7, #12]
 801a3fa:	693b      	ldr	r3, [r7, #16]
 801a3fc:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801a400:	2302      	movs	r3, #2
 801a402:	2239      	movs	r2, #57	; 0x39
 801a404:	f000 ffcc 	bl	801b3a0 <dhcp_option>
 801a408:	4603      	mov	r3, r0
 801a40a:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801a40c:	89b8      	ldrh	r0, [r7, #12]
 801a40e:	693b      	ldr	r3, [r7, #16]
 801a410:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801a414:	687b      	ldr	r3, [r7, #4]
 801a416:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801a418:	461a      	mov	r2, r3
 801a41a:	f001 f81b 	bl	801b454 <dhcp_option_short>
 801a41e:	4603      	mov	r3, r0
 801a420:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801a422:	89b8      	ldrh	r0, [r7, #12]
 801a424:	693b      	ldr	r3, [r7, #16]
 801a426:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801a42a:	2304      	movs	r3, #4
 801a42c:	2232      	movs	r2, #50	; 0x32
 801a42e:	f000 ffb7 	bl	801b3a0 <dhcp_option>
 801a432:	4603      	mov	r3, r0
 801a434:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801a436:	89bc      	ldrh	r4, [r7, #12]
 801a438:	693b      	ldr	r3, [r7, #16]
 801a43a:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801a43e:	69bb      	ldr	r3, [r7, #24]
 801a440:	69db      	ldr	r3, [r3, #28]
 801a442:	4618      	mov	r0, r3
 801a444:	f7f6 ffe3 	bl	801140e <lwip_htonl>
 801a448:	4603      	mov	r3, r0
 801a44a:	461a      	mov	r2, r3
 801a44c:	4629      	mov	r1, r5
 801a44e:	4620      	mov	r0, r4
 801a450:	f001 f832 	bl	801b4b8 <dhcp_option_long>
 801a454:	4603      	mov	r3, r0
 801a456:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 801a458:	89b8      	ldrh	r0, [r7, #12]
 801a45a:	693b      	ldr	r3, [r7, #16]
 801a45c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801a460:	2304      	movs	r3, #4
 801a462:	2236      	movs	r2, #54	; 0x36
 801a464:	f000 ff9c 	bl	801b3a0 <dhcp_option>
 801a468:	4603      	mov	r3, r0
 801a46a:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 801a46c:	89bc      	ldrh	r4, [r7, #12]
 801a46e:	693b      	ldr	r3, [r7, #16]
 801a470:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801a474:	69bb      	ldr	r3, [r7, #24]
 801a476:	699b      	ldr	r3, [r3, #24]
 801a478:	4618      	mov	r0, r3
 801a47a:	f7f6 ffc8 	bl	801140e <lwip_htonl>
 801a47e:	4603      	mov	r3, r0
 801a480:	461a      	mov	r2, r3
 801a482:	4629      	mov	r1, r5
 801a484:	4620      	mov	r0, r4
 801a486:	f001 f817 	bl	801b4b8 <dhcp_option_long>
 801a48a:	4603      	mov	r3, r0
 801a48c:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801a48e:	89b8      	ldrh	r0, [r7, #12]
 801a490:	693b      	ldr	r3, [r7, #16]
 801a492:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801a496:	2303      	movs	r3, #3
 801a498:	2237      	movs	r2, #55	; 0x37
 801a49a:	f000 ff81 	bl	801b3a0 <dhcp_option>
 801a49e:	4603      	mov	r3, r0
 801a4a0:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801a4a2:	2300      	movs	r3, #0
 801a4a4:	77bb      	strb	r3, [r7, #30]
 801a4a6:	e00e      	b.n	801a4c6 <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801a4a8:	89b8      	ldrh	r0, [r7, #12]
 801a4aa:	693b      	ldr	r3, [r7, #16]
 801a4ac:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801a4b0:	7fbb      	ldrb	r3, [r7, #30]
 801a4b2:	4a30      	ldr	r2, [pc, #192]	; (801a574 <dhcp_select+0x1e4>)
 801a4b4:	5cd3      	ldrb	r3, [r2, r3]
 801a4b6:	461a      	mov	r2, r3
 801a4b8:	f000 ffa6 	bl	801b408 <dhcp_option_byte>
 801a4bc:	4603      	mov	r3, r0
 801a4be:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801a4c0:	7fbb      	ldrb	r3, [r7, #30]
 801a4c2:	3301      	adds	r3, #1
 801a4c4:	77bb      	strb	r3, [r7, #30]
 801a4c6:	7fbb      	ldrb	r3, [r7, #30]
 801a4c8:	2b02      	cmp	r3, #2
 801a4ca:	d9ed      	bls.n	801a4a8 <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801a4cc:	89b8      	ldrh	r0, [r7, #12]
 801a4ce:	693b      	ldr	r3, [r7, #16]
 801a4d0:	33f0      	adds	r3, #240	; 0xf0
 801a4d2:	697a      	ldr	r2, [r7, #20]
 801a4d4:	4619      	mov	r1, r3
 801a4d6:	f001 fcab 	bl	801be30 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801a4da:	4b27      	ldr	r3, [pc, #156]	; (801a578 <dhcp_select+0x1e8>)
 801a4dc:	6818      	ldr	r0, [r3, #0]
 801a4de:	4b27      	ldr	r3, [pc, #156]	; (801a57c <dhcp_select+0x1ec>)
 801a4e0:	9301      	str	r3, [sp, #4]
 801a4e2:	687b      	ldr	r3, [r7, #4]
 801a4e4:	9300      	str	r3, [sp, #0]
 801a4e6:	2343      	movs	r3, #67	; 0x43
 801a4e8:	4a25      	ldr	r2, [pc, #148]	; (801a580 <dhcp_select+0x1f0>)
 801a4ea:	6979      	ldr	r1, [r7, #20]
 801a4ec:	f7ff fbce 	bl	8019c8c <udp_sendto_if_src>
 801a4f0:	4603      	mov	r3, r0
 801a4f2:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801a4f4:	6978      	ldr	r0, [r7, #20]
 801a4f6:	f7f8 fc5d 	bl	8012db4 <pbuf_free>
 801a4fa:	e001      	b.n	801a500 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801a4fc:	23ff      	movs	r3, #255	; 0xff
 801a4fe:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801a500:	69bb      	ldr	r3, [r7, #24]
 801a502:	799b      	ldrb	r3, [r3, #6]
 801a504:	2bff      	cmp	r3, #255	; 0xff
 801a506:	d005      	beq.n	801a514 <dhcp_select+0x184>
    dhcp->tries++;
 801a508:	69bb      	ldr	r3, [r7, #24]
 801a50a:	799b      	ldrb	r3, [r3, #6]
 801a50c:	3301      	adds	r3, #1
 801a50e:	b2da      	uxtb	r2, r3
 801a510:	69bb      	ldr	r3, [r7, #24]
 801a512:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 801a514:	69bb      	ldr	r3, [r7, #24]
 801a516:	799b      	ldrb	r3, [r3, #6]
 801a518:	2b05      	cmp	r3, #5
 801a51a:	d80d      	bhi.n	801a538 <dhcp_select+0x1a8>
 801a51c:	69bb      	ldr	r3, [r7, #24]
 801a51e:	799b      	ldrb	r3, [r3, #6]
 801a520:	461a      	mov	r2, r3
 801a522:	2301      	movs	r3, #1
 801a524:	4093      	lsls	r3, r2
 801a526:	b29b      	uxth	r3, r3
 801a528:	461a      	mov	r2, r3
 801a52a:	0152      	lsls	r2, r2, #5
 801a52c:	1ad2      	subs	r2, r2, r3
 801a52e:	0092      	lsls	r2, r2, #2
 801a530:	4413      	add	r3, r2
 801a532:	00db      	lsls	r3, r3, #3
 801a534:	b29b      	uxth	r3, r3
 801a536:	e001      	b.n	801a53c <dhcp_select+0x1ac>
 801a538:	f64e 2360 	movw	r3, #60000	; 0xea60
 801a53c:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801a53e:	89fb      	ldrh	r3, [r7, #14]
 801a540:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801a544:	4a0f      	ldr	r2, [pc, #60]	; (801a584 <dhcp_select+0x1f4>)
 801a546:	fb82 1203 	smull	r1, r2, r2, r3
 801a54a:	1152      	asrs	r2, r2, #5
 801a54c:	17db      	asrs	r3, r3, #31
 801a54e:	1ad3      	subs	r3, r2, r3
 801a550:	b29a      	uxth	r2, r3
 801a552:	69bb      	ldr	r3, [r7, #24]
 801a554:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801a556:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801a55a:	4618      	mov	r0, r3
 801a55c:	3720      	adds	r7, #32
 801a55e:	46bd      	mov	sp, r7
 801a560:	bdb0      	pop	{r4, r5, r7, pc}
 801a562:	bf00      	nop
 801a564:	0802657c 	.word	0x0802657c
 801a568:	08026628 	.word	0x08026628
 801a56c:	080265dc 	.word	0x080265dc
 801a570:	08026644 	.word	0x08026644
 801a574:	24000300 	.word	0x24000300
 801a578:	24004580 	.word	0x24004580
 801a57c:	0802718c 	.word	0x0802718c
 801a580:	08027190 	.word	0x08027190
 801a584:	10624dd3 	.word	0x10624dd3

0801a588 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 801a588:	b580      	push	{r7, lr}
 801a58a:	b082      	sub	sp, #8
 801a58c:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 801a58e:	4b27      	ldr	r3, [pc, #156]	; (801a62c <dhcp_coarse_tmr+0xa4>)
 801a590:	681b      	ldr	r3, [r3, #0]
 801a592:	607b      	str	r3, [r7, #4]
 801a594:	e042      	b.n	801a61c <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801a596:	687b      	ldr	r3, [r7, #4]
 801a598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a59a:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 801a59c:	683b      	ldr	r3, [r7, #0]
 801a59e:	2b00      	cmp	r3, #0
 801a5a0:	d039      	beq.n	801a616 <dhcp_coarse_tmr+0x8e>
 801a5a2:	683b      	ldr	r3, [r7, #0]
 801a5a4:	795b      	ldrb	r3, [r3, #5]
 801a5a6:	2b00      	cmp	r3, #0
 801a5a8:	d035      	beq.n	801a616 <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 801a5aa:	683b      	ldr	r3, [r7, #0]
 801a5ac:	8a9b      	ldrh	r3, [r3, #20]
 801a5ae:	2b00      	cmp	r3, #0
 801a5b0:	d012      	beq.n	801a5d8 <dhcp_coarse_tmr+0x50>
 801a5b2:	683b      	ldr	r3, [r7, #0]
 801a5b4:	8a5b      	ldrh	r3, [r3, #18]
 801a5b6:	3301      	adds	r3, #1
 801a5b8:	b29a      	uxth	r2, r3
 801a5ba:	683b      	ldr	r3, [r7, #0]
 801a5bc:	825a      	strh	r2, [r3, #18]
 801a5be:	683b      	ldr	r3, [r7, #0]
 801a5c0:	8a5a      	ldrh	r2, [r3, #18]
 801a5c2:	683b      	ldr	r3, [r7, #0]
 801a5c4:	8a9b      	ldrh	r3, [r3, #20]
 801a5c6:	429a      	cmp	r2, r3
 801a5c8:	d106      	bne.n	801a5d8 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 801a5ca:	6878      	ldr	r0, [r7, #4]
 801a5cc:	f000 fe34 	bl	801b238 <dhcp_release_and_stop>
        dhcp_start(netif);
 801a5d0:	6878      	ldr	r0, [r7, #4]
 801a5d2:	f000 f96b 	bl	801a8ac <dhcp_start>
 801a5d6:	e01e      	b.n	801a616 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 801a5d8:	683b      	ldr	r3, [r7, #0]
 801a5da:	8a1b      	ldrh	r3, [r3, #16]
 801a5dc:	2b00      	cmp	r3, #0
 801a5de:	d00b      	beq.n	801a5f8 <dhcp_coarse_tmr+0x70>
 801a5e0:	683b      	ldr	r3, [r7, #0]
 801a5e2:	8a1b      	ldrh	r3, [r3, #16]
 801a5e4:	1e5a      	subs	r2, r3, #1
 801a5e6:	b291      	uxth	r1, r2
 801a5e8:	683a      	ldr	r2, [r7, #0]
 801a5ea:	8211      	strh	r1, [r2, #16]
 801a5ec:	2b01      	cmp	r3, #1
 801a5ee:	d103      	bne.n	801a5f8 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 801a5f0:	6878      	ldr	r0, [r7, #4]
 801a5f2:	f000 f8c7 	bl	801a784 <dhcp_t2_timeout>
 801a5f6:	e00e      	b.n	801a616 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 801a5f8:	683b      	ldr	r3, [r7, #0]
 801a5fa:	89db      	ldrh	r3, [r3, #14]
 801a5fc:	2b00      	cmp	r3, #0
 801a5fe:	d00a      	beq.n	801a616 <dhcp_coarse_tmr+0x8e>
 801a600:	683b      	ldr	r3, [r7, #0]
 801a602:	89db      	ldrh	r3, [r3, #14]
 801a604:	1e5a      	subs	r2, r3, #1
 801a606:	b291      	uxth	r1, r2
 801a608:	683a      	ldr	r2, [r7, #0]
 801a60a:	81d1      	strh	r1, [r2, #14]
 801a60c:	2b01      	cmp	r3, #1
 801a60e:	d102      	bne.n	801a616 <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 801a610:	6878      	ldr	r0, [r7, #4]
 801a612:	f000 f888 	bl	801a726 <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 801a616:	687b      	ldr	r3, [r7, #4]
 801a618:	681b      	ldr	r3, [r3, #0]
 801a61a:	607b      	str	r3, [r7, #4]
 801a61c:	687b      	ldr	r3, [r7, #4]
 801a61e:	2b00      	cmp	r3, #0
 801a620:	d1b9      	bne.n	801a596 <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 801a622:	bf00      	nop
 801a624:	bf00      	nop
 801a626:	3708      	adds	r7, #8
 801a628:	46bd      	mov	sp, r7
 801a62a:	bd80      	pop	{r7, pc}
 801a62c:	24007f2c 	.word	0x24007f2c

0801a630 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 801a630:	b580      	push	{r7, lr}
 801a632:	b082      	sub	sp, #8
 801a634:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 801a636:	4b16      	ldr	r3, [pc, #88]	; (801a690 <dhcp_fine_tmr+0x60>)
 801a638:	681b      	ldr	r3, [r3, #0]
 801a63a:	607b      	str	r3, [r7, #4]
 801a63c:	e020      	b.n	801a680 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801a63e:	687b      	ldr	r3, [r7, #4]
 801a640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a642:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 801a644:	683b      	ldr	r3, [r7, #0]
 801a646:	2b00      	cmp	r3, #0
 801a648:	d017      	beq.n	801a67a <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 801a64a:	683b      	ldr	r3, [r7, #0]
 801a64c:	891b      	ldrh	r3, [r3, #8]
 801a64e:	2b01      	cmp	r3, #1
 801a650:	d906      	bls.n	801a660 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 801a652:	683b      	ldr	r3, [r7, #0]
 801a654:	891b      	ldrh	r3, [r3, #8]
 801a656:	3b01      	subs	r3, #1
 801a658:	b29a      	uxth	r2, r3
 801a65a:	683b      	ldr	r3, [r7, #0]
 801a65c:	811a      	strh	r2, [r3, #8]
 801a65e:	e00c      	b.n	801a67a <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 801a660:	683b      	ldr	r3, [r7, #0]
 801a662:	891b      	ldrh	r3, [r3, #8]
 801a664:	2b01      	cmp	r3, #1
 801a666:	d108      	bne.n	801a67a <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 801a668:	683b      	ldr	r3, [r7, #0]
 801a66a:	891b      	ldrh	r3, [r3, #8]
 801a66c:	3b01      	subs	r3, #1
 801a66e:	b29a      	uxth	r2, r3
 801a670:	683b      	ldr	r3, [r7, #0]
 801a672:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 801a674:	6878      	ldr	r0, [r7, #4]
 801a676:	f000 f80d 	bl	801a694 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 801a67a:	687b      	ldr	r3, [r7, #4]
 801a67c:	681b      	ldr	r3, [r3, #0]
 801a67e:	607b      	str	r3, [r7, #4]
 801a680:	687b      	ldr	r3, [r7, #4]
 801a682:	2b00      	cmp	r3, #0
 801a684:	d1db      	bne.n	801a63e <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 801a686:	bf00      	nop
 801a688:	bf00      	nop
 801a68a:	3708      	adds	r7, #8
 801a68c:	46bd      	mov	sp, r7
 801a68e:	bd80      	pop	{r7, pc}
 801a690:	24007f2c 	.word	0x24007f2c

0801a694 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 801a694:	b580      	push	{r7, lr}
 801a696:	b084      	sub	sp, #16
 801a698:	af00      	add	r7, sp, #0
 801a69a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801a69c:	687b      	ldr	r3, [r7, #4]
 801a69e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a6a0:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 801a6a2:	68fb      	ldr	r3, [r7, #12]
 801a6a4:	795b      	ldrb	r3, [r3, #5]
 801a6a6:	2b0c      	cmp	r3, #12
 801a6a8:	d003      	beq.n	801a6b2 <dhcp_timeout+0x1e>
 801a6aa:	68fb      	ldr	r3, [r7, #12]
 801a6ac:	795b      	ldrb	r3, [r3, #5]
 801a6ae:	2b06      	cmp	r3, #6
 801a6b0:	d103      	bne.n	801a6ba <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 801a6b2:	6878      	ldr	r0, [r7, #4]
 801a6b4:	f000 fa56 	bl	801ab64 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 801a6b8:	e031      	b.n	801a71e <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 801a6ba:	68fb      	ldr	r3, [r7, #12]
 801a6bc:	795b      	ldrb	r3, [r3, #5]
 801a6be:	2b01      	cmp	r3, #1
 801a6c0:	d10e      	bne.n	801a6e0 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 801a6c2:	68fb      	ldr	r3, [r7, #12]
 801a6c4:	799b      	ldrb	r3, [r3, #6]
 801a6c6:	2b05      	cmp	r3, #5
 801a6c8:	d803      	bhi.n	801a6d2 <dhcp_timeout+0x3e>
      dhcp_select(netif);
 801a6ca:	6878      	ldr	r0, [r7, #4]
 801a6cc:	f7ff fe60 	bl	801a390 <dhcp_select>
}
 801a6d0:	e025      	b.n	801a71e <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 801a6d2:	6878      	ldr	r0, [r7, #4]
 801a6d4:	f000 fdb0 	bl	801b238 <dhcp_release_and_stop>
      dhcp_start(netif);
 801a6d8:	6878      	ldr	r0, [r7, #4]
 801a6da:	f000 f8e7 	bl	801a8ac <dhcp_start>
}
 801a6de:	e01e      	b.n	801a71e <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 801a6e0:	68fb      	ldr	r3, [r7, #12]
 801a6e2:	795b      	ldrb	r3, [r3, #5]
 801a6e4:	2b08      	cmp	r3, #8
 801a6e6:	d10b      	bne.n	801a700 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 801a6e8:	68fb      	ldr	r3, [r7, #12]
 801a6ea:	799b      	ldrb	r3, [r3, #6]
 801a6ec:	2b01      	cmp	r3, #1
 801a6ee:	d803      	bhi.n	801a6f8 <dhcp_timeout+0x64>
      dhcp_check(netif);
 801a6f0:	6878      	ldr	r0, [r7, #4]
 801a6f2:	f7ff fdf3 	bl	801a2dc <dhcp_check>
}
 801a6f6:	e012      	b.n	801a71e <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 801a6f8:	6878      	ldr	r0, [r7, #4]
 801a6fa:	f000 fad5 	bl	801aca8 <dhcp_bind>
}
 801a6fe:	e00e      	b.n	801a71e <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 801a700:	68fb      	ldr	r3, [r7, #12]
 801a702:	795b      	ldrb	r3, [r3, #5]
 801a704:	2b03      	cmp	r3, #3
 801a706:	d10a      	bne.n	801a71e <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 801a708:	68fb      	ldr	r3, [r7, #12]
 801a70a:	799b      	ldrb	r3, [r3, #6]
 801a70c:	2b01      	cmp	r3, #1
 801a70e:	d803      	bhi.n	801a718 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 801a710:	6878      	ldr	r0, [r7, #4]
 801a712:	f000 fcdb 	bl	801b0cc <dhcp_reboot>
}
 801a716:	e002      	b.n	801a71e <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 801a718:	6878      	ldr	r0, [r7, #4]
 801a71a:	f000 fa23 	bl	801ab64 <dhcp_discover>
}
 801a71e:	bf00      	nop
 801a720:	3710      	adds	r7, #16
 801a722:	46bd      	mov	sp, r7
 801a724:	bd80      	pop	{r7, pc}

0801a726 <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 801a726:	b580      	push	{r7, lr}
 801a728:	b084      	sub	sp, #16
 801a72a:	af00      	add	r7, sp, #0
 801a72c:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801a72e:	687b      	ldr	r3, [r7, #4]
 801a730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a732:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801a734:	68fb      	ldr	r3, [r7, #12]
 801a736:	795b      	ldrb	r3, [r3, #5]
 801a738:	2b01      	cmp	r3, #1
 801a73a:	d007      	beq.n	801a74c <dhcp_t1_timeout+0x26>
 801a73c:	68fb      	ldr	r3, [r7, #12]
 801a73e:	795b      	ldrb	r3, [r3, #5]
 801a740:	2b0a      	cmp	r3, #10
 801a742:	d003      	beq.n	801a74c <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 801a744:	68fb      	ldr	r3, [r7, #12]
 801a746:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801a748:	2b05      	cmp	r3, #5
 801a74a:	d117      	bne.n	801a77c <dhcp_t1_timeout+0x56>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 801a74c:	6878      	ldr	r0, [r7, #4]
 801a74e:	f000 fb85 	bl	801ae5c <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 801a752:	68fb      	ldr	r3, [r7, #12]
 801a754:	899b      	ldrh	r3, [r3, #12]
 801a756:	461a      	mov	r2, r3
 801a758:	68fb      	ldr	r3, [r7, #12]
 801a75a:	8a5b      	ldrh	r3, [r3, #18]
 801a75c:	1ad3      	subs	r3, r2, r3
 801a75e:	2b01      	cmp	r3, #1
 801a760:	dd0c      	ble.n	801a77c <dhcp_t1_timeout+0x56>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 801a762:	68fb      	ldr	r3, [r7, #12]
 801a764:	899b      	ldrh	r3, [r3, #12]
 801a766:	461a      	mov	r2, r3
 801a768:	68fb      	ldr	r3, [r7, #12]
 801a76a:	8a5b      	ldrh	r3, [r3, #18]
 801a76c:	1ad3      	subs	r3, r2, r3
 801a76e:	2b00      	cmp	r3, #0
 801a770:	da00      	bge.n	801a774 <dhcp_t1_timeout+0x4e>
 801a772:	3301      	adds	r3, #1
 801a774:	105b      	asrs	r3, r3, #1
 801a776:	b29a      	uxth	r2, r3
 801a778:	68fb      	ldr	r3, [r7, #12]
 801a77a:	81da      	strh	r2, [r3, #14]
    }
  }
}
 801a77c:	bf00      	nop
 801a77e:	3710      	adds	r7, #16
 801a780:	46bd      	mov	sp, r7
 801a782:	bd80      	pop	{r7, pc}

0801a784 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 801a784:	b580      	push	{r7, lr}
 801a786:	b084      	sub	sp, #16
 801a788:	af00      	add	r7, sp, #0
 801a78a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801a78c:	687b      	ldr	r3, [r7, #4]
 801a78e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a790:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801a792:	68fb      	ldr	r3, [r7, #12]
 801a794:	795b      	ldrb	r3, [r3, #5]
 801a796:	2b01      	cmp	r3, #1
 801a798:	d00b      	beq.n	801a7b2 <dhcp_t2_timeout+0x2e>
 801a79a:	68fb      	ldr	r3, [r7, #12]
 801a79c:	795b      	ldrb	r3, [r3, #5]
 801a79e:	2b0a      	cmp	r3, #10
 801a7a0:	d007      	beq.n	801a7b2 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 801a7a2:	68fb      	ldr	r3, [r7, #12]
 801a7a4:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801a7a6:	2b05      	cmp	r3, #5
 801a7a8:	d003      	beq.n	801a7b2 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 801a7aa:	68fb      	ldr	r3, [r7, #12]
 801a7ac:	795b      	ldrb	r3, [r3, #5]
 801a7ae:	2b04      	cmp	r3, #4
 801a7b0:	d117      	bne.n	801a7e2 <dhcp_t2_timeout+0x5e>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 801a7b2:	6878      	ldr	r0, [r7, #4]
 801a7b4:	f000 fbee 	bl	801af94 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 801a7b8:	68fb      	ldr	r3, [r7, #12]
 801a7ba:	8a9b      	ldrh	r3, [r3, #20]
 801a7bc:	461a      	mov	r2, r3
 801a7be:	68fb      	ldr	r3, [r7, #12]
 801a7c0:	8a5b      	ldrh	r3, [r3, #18]
 801a7c2:	1ad3      	subs	r3, r2, r3
 801a7c4:	2b01      	cmp	r3, #1
 801a7c6:	dd0c      	ble.n	801a7e2 <dhcp_t2_timeout+0x5e>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 801a7c8:	68fb      	ldr	r3, [r7, #12]
 801a7ca:	8a9b      	ldrh	r3, [r3, #20]
 801a7cc:	461a      	mov	r2, r3
 801a7ce:	68fb      	ldr	r3, [r7, #12]
 801a7d0:	8a5b      	ldrh	r3, [r3, #18]
 801a7d2:	1ad3      	subs	r3, r2, r3
 801a7d4:	2b00      	cmp	r3, #0
 801a7d6:	da00      	bge.n	801a7da <dhcp_t2_timeout+0x56>
 801a7d8:	3301      	adds	r3, #1
 801a7da:	105b      	asrs	r3, r3, #1
 801a7dc:	b29a      	uxth	r2, r3
 801a7de:	68fb      	ldr	r3, [r7, #12]
 801a7e0:	821a      	strh	r2, [r3, #16]
    }
  }
}
 801a7e2:	bf00      	nop
 801a7e4:	3710      	adds	r7, #16
 801a7e6:	46bd      	mov	sp, r7
 801a7e8:	bd80      	pop	{r7, pc}
	...

0801a7ec <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 801a7ec:	b580      	push	{r7, lr}
 801a7ee:	b084      	sub	sp, #16
 801a7f0:	af00      	add	r7, sp, #0
 801a7f2:	6078      	str	r0, [r7, #4]
 801a7f4:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801a7f6:	687b      	ldr	r3, [r7, #4]
 801a7f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a7fa:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 801a7fc:	68fb      	ldr	r3, [r7, #12]
 801a7fe:	2200      	movs	r2, #0
 801a800:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 801a802:	68fb      	ldr	r3, [r7, #12]
 801a804:	2200      	movs	r2, #0
 801a806:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 801a808:	4b26      	ldr	r3, [pc, #152]	; (801a8a4 <dhcp_handle_ack+0xb8>)
 801a80a:	78db      	ldrb	r3, [r3, #3]
 801a80c:	2b00      	cmp	r3, #0
 801a80e:	d003      	beq.n	801a818 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 801a810:	4b25      	ldr	r3, [pc, #148]	; (801a8a8 <dhcp_handle_ack+0xbc>)
 801a812:	68da      	ldr	r2, [r3, #12]
 801a814:	68fb      	ldr	r3, [r7, #12]
 801a816:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 801a818:	4b22      	ldr	r3, [pc, #136]	; (801a8a4 <dhcp_handle_ack+0xb8>)
 801a81a:	791b      	ldrb	r3, [r3, #4]
 801a81c:	2b00      	cmp	r3, #0
 801a81e:	d004      	beq.n	801a82a <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 801a820:	4b21      	ldr	r3, [pc, #132]	; (801a8a8 <dhcp_handle_ack+0xbc>)
 801a822:	691a      	ldr	r2, [r3, #16]
 801a824:	68fb      	ldr	r3, [r7, #12]
 801a826:	62da      	str	r2, [r3, #44]	; 0x2c
 801a828:	e004      	b.n	801a834 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 801a82a:	68fb      	ldr	r3, [r7, #12]
 801a82c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a82e:	085a      	lsrs	r2, r3, #1
 801a830:	68fb      	ldr	r3, [r7, #12]
 801a832:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 801a834:	4b1b      	ldr	r3, [pc, #108]	; (801a8a4 <dhcp_handle_ack+0xb8>)
 801a836:	795b      	ldrb	r3, [r3, #5]
 801a838:	2b00      	cmp	r3, #0
 801a83a:	d004      	beq.n	801a846 <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 801a83c:	4b1a      	ldr	r3, [pc, #104]	; (801a8a8 <dhcp_handle_ack+0xbc>)
 801a83e:	695a      	ldr	r2, [r3, #20]
 801a840:	68fb      	ldr	r3, [r7, #12]
 801a842:	631a      	str	r2, [r3, #48]	; 0x30
 801a844:	e007      	b.n	801a856 <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 801a846:	68fb      	ldr	r3, [r7, #12]
 801a848:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801a84a:	4613      	mov	r3, r2
 801a84c:	00db      	lsls	r3, r3, #3
 801a84e:	1a9b      	subs	r3, r3, r2
 801a850:	08da      	lsrs	r2, r3, #3
 801a852:	68fb      	ldr	r3, [r7, #12]
 801a854:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 801a856:	683b      	ldr	r3, [r7, #0]
 801a858:	691a      	ldr	r2, [r3, #16]
 801a85a:	68fb      	ldr	r3, [r7, #12]
 801a85c:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 801a85e:	4b11      	ldr	r3, [pc, #68]	; (801a8a4 <dhcp_handle_ack+0xb8>)
 801a860:	799b      	ldrb	r3, [r3, #6]
 801a862:	2b00      	cmp	r3, #0
 801a864:	d00b      	beq.n	801a87e <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 801a866:	4b10      	ldr	r3, [pc, #64]	; (801a8a8 <dhcp_handle_ack+0xbc>)
 801a868:	699b      	ldr	r3, [r3, #24]
 801a86a:	4618      	mov	r0, r3
 801a86c:	f7f6 fdcf 	bl	801140e <lwip_htonl>
 801a870:	4602      	mov	r2, r0
 801a872:	68fb      	ldr	r3, [r7, #12]
 801a874:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 801a876:	68fb      	ldr	r3, [r7, #12]
 801a878:	2201      	movs	r2, #1
 801a87a:	71da      	strb	r2, [r3, #7]
 801a87c:	e002      	b.n	801a884 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 801a87e:	68fb      	ldr	r3, [r7, #12]
 801a880:	2200      	movs	r2, #0
 801a882:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 801a884:	4b07      	ldr	r3, [pc, #28]	; (801a8a4 <dhcp_handle_ack+0xb8>)
 801a886:	79db      	ldrb	r3, [r3, #7]
 801a888:	2b00      	cmp	r3, #0
 801a88a:	d007      	beq.n	801a89c <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 801a88c:	4b06      	ldr	r3, [pc, #24]	; (801a8a8 <dhcp_handle_ack+0xbc>)
 801a88e:	69db      	ldr	r3, [r3, #28]
 801a890:	4618      	mov	r0, r3
 801a892:	f7f6 fdbc 	bl	801140e <lwip_htonl>
 801a896:	4602      	mov	r2, r0
 801a898:	68fb      	ldr	r3, [r7, #12]
 801a89a:	625a      	str	r2, [r3, #36]	; 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 801a89c:	bf00      	nop
 801a89e:	3710      	adds	r7, #16
 801a8a0:	46bd      	mov	sp, r7
 801a8a2:	bd80      	pop	{r7, pc}
 801a8a4:	24007f58 	.word	0x24007f58
 801a8a8:	24007f60 	.word	0x24007f60

0801a8ac <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 801a8ac:	b580      	push	{r7, lr}
 801a8ae:	b084      	sub	sp, #16
 801a8b0:	af00      	add	r7, sp, #0
 801a8b2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 801a8b4:	687b      	ldr	r3, [r7, #4]
 801a8b6:	2b00      	cmp	r3, #0
 801a8b8:	d109      	bne.n	801a8ce <dhcp_start+0x22>
 801a8ba:	4b37      	ldr	r3, [pc, #220]	; (801a998 <dhcp_start+0xec>)
 801a8bc:	f240 22e7 	movw	r2, #743	; 0x2e7
 801a8c0:	4936      	ldr	r1, [pc, #216]	; (801a99c <dhcp_start+0xf0>)
 801a8c2:	4837      	ldr	r0, [pc, #220]	; (801a9a0 <dhcp_start+0xf4>)
 801a8c4:	f004 fe9e 	bl	801f604 <iprintf>
 801a8c8:	f06f 030f 	mvn.w	r3, #15
 801a8cc:	e060      	b.n	801a990 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 801a8ce:	687b      	ldr	r3, [r7, #4]
 801a8d0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801a8d4:	f003 0301 	and.w	r3, r3, #1
 801a8d8:	2b00      	cmp	r3, #0
 801a8da:	d109      	bne.n	801a8f0 <dhcp_start+0x44>
 801a8dc:	4b2e      	ldr	r3, [pc, #184]	; (801a998 <dhcp_start+0xec>)
 801a8de:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 801a8e2:	4930      	ldr	r1, [pc, #192]	; (801a9a4 <dhcp_start+0xf8>)
 801a8e4:	482e      	ldr	r0, [pc, #184]	; (801a9a0 <dhcp_start+0xf4>)
 801a8e6:	f004 fe8d 	bl	801f604 <iprintf>
 801a8ea:	f06f 030f 	mvn.w	r3, #15
 801a8ee:	e04f      	b.n	801a990 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 801a8f0:	687b      	ldr	r3, [r7, #4]
 801a8f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a8f4:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 801a8f6:	687b      	ldr	r3, [r7, #4]
 801a8f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801a8fa:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 801a8fe:	d202      	bcs.n	801a906 <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 801a900:	f04f 33ff 	mov.w	r3, #4294967295
 801a904:	e044      	b.n	801a990 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 801a906:	68fb      	ldr	r3, [r7, #12]
 801a908:	2b00      	cmp	r3, #0
 801a90a:	d10d      	bne.n	801a928 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 801a90c:	2034      	movs	r0, #52	; 0x34
 801a90e:	f7f7 f955 	bl	8011bbc <mem_malloc>
 801a912:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 801a914:	68fb      	ldr	r3, [r7, #12]
 801a916:	2b00      	cmp	r3, #0
 801a918:	d102      	bne.n	801a920 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 801a91a:	f04f 33ff 	mov.w	r3, #4294967295
 801a91e:	e037      	b.n	801a990 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 801a920:	687b      	ldr	r3, [r7, #4]
 801a922:	68fa      	ldr	r2, [r7, #12]
 801a924:	625a      	str	r2, [r3, #36]	; 0x24
 801a926:	e005      	b.n	801a934 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 801a928:	68fb      	ldr	r3, [r7, #12]
 801a92a:	791b      	ldrb	r3, [r3, #4]
 801a92c:	2b00      	cmp	r3, #0
 801a92e:	d001      	beq.n	801a934 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 801a930:	f7ff fc90 	bl	801a254 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 801a934:	2234      	movs	r2, #52	; 0x34
 801a936:	2100      	movs	r1, #0
 801a938:	68f8      	ldr	r0, [r7, #12]
 801a93a:	f004 f815 	bl	801e968 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 801a93e:	f7ff fc37 	bl	801a1b0 <dhcp_inc_pcb_refcount>
 801a942:	4603      	mov	r3, r0
 801a944:	2b00      	cmp	r3, #0
 801a946:	d002      	beq.n	801a94e <dhcp_start+0xa2>
    return ERR_MEM;
 801a948:	f04f 33ff 	mov.w	r3, #4294967295
 801a94c:	e020      	b.n	801a990 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 801a94e:	68fb      	ldr	r3, [r7, #12]
 801a950:	2201      	movs	r2, #1
 801a952:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 801a954:	687b      	ldr	r3, [r7, #4]
 801a956:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801a95a:	f003 0304 	and.w	r3, r3, #4
 801a95e:	2b00      	cmp	r3, #0
 801a960:	d105      	bne.n	801a96e <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 801a962:	2102      	movs	r1, #2
 801a964:	68f8      	ldr	r0, [r7, #12]
 801a966:	f000 fd01 	bl	801b36c <dhcp_set_state>
    return ERR_OK;
 801a96a:	2300      	movs	r3, #0
 801a96c:	e010      	b.n	801a990 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 801a96e:	6878      	ldr	r0, [r7, #4]
 801a970:	f000 f8f8 	bl	801ab64 <dhcp_discover>
 801a974:	4603      	mov	r3, r0
 801a976:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 801a978:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801a97c:	2b00      	cmp	r3, #0
 801a97e:	d005      	beq.n	801a98c <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 801a980:	6878      	ldr	r0, [r7, #4]
 801a982:	f000 fc59 	bl	801b238 <dhcp_release_and_stop>
    return ERR_MEM;
 801a986:	f04f 33ff 	mov.w	r3, #4294967295
 801a98a:	e001      	b.n	801a990 <dhcp_start+0xe4>
  }
  return result;
 801a98c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801a990:	4618      	mov	r0, r3
 801a992:	3710      	adds	r7, #16
 801a994:	46bd      	mov	sp, r7
 801a996:	bd80      	pop	{r7, pc}
 801a998:	0802657c 	.word	0x0802657c
 801a99c:	08026660 	.word	0x08026660
 801a9a0:	080265dc 	.word	0x080265dc
 801a9a4:	080266a4 	.word	0x080266a4

0801a9a8 <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 801a9a8:	b580      	push	{r7, lr}
 801a9aa:	b084      	sub	sp, #16
 801a9ac:	af00      	add	r7, sp, #0
 801a9ae:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801a9b0:	687b      	ldr	r3, [r7, #4]
 801a9b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a9b4:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 801a9b6:	68fb      	ldr	r3, [r7, #12]
 801a9b8:	2b00      	cmp	r3, #0
 801a9ba:	d025      	beq.n	801aa08 <dhcp_network_changed+0x60>
    return;
  }
  switch (dhcp->state) {
 801a9bc:	68fb      	ldr	r3, [r7, #12]
 801a9be:	795b      	ldrb	r3, [r3, #5]
 801a9c0:	2b0a      	cmp	r3, #10
 801a9c2:	d008      	beq.n	801a9d6 <dhcp_network_changed+0x2e>
 801a9c4:	2b0a      	cmp	r3, #10
 801a9c6:	dc0d      	bgt.n	801a9e4 <dhcp_network_changed+0x3c>
 801a9c8:	2b00      	cmp	r3, #0
 801a9ca:	d01f      	beq.n	801aa0c <dhcp_network_changed+0x64>
 801a9cc:	2b00      	cmp	r3, #0
 801a9ce:	db09      	blt.n	801a9e4 <dhcp_network_changed+0x3c>
 801a9d0:	3b03      	subs	r3, #3
 801a9d2:	2b02      	cmp	r3, #2
 801a9d4:	d806      	bhi.n	801a9e4 <dhcp_network_changed+0x3c>
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 801a9d6:	68fb      	ldr	r3, [r7, #12]
 801a9d8:	2200      	movs	r2, #0
 801a9da:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 801a9dc:	6878      	ldr	r0, [r7, #4]
 801a9de:	f000 fb75 	bl	801b0cc <dhcp_reboot>
      break;
 801a9e2:	e014      	b.n	801aa0e <dhcp_network_changed+0x66>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 801a9e4:	68fb      	ldr	r3, [r7, #12]
 801a9e6:	795b      	ldrb	r3, [r3, #5]
 801a9e8:	2b0c      	cmp	r3, #12
 801a9ea:	d906      	bls.n	801a9fa <dhcp_network_changed+0x52>
 801a9ec:	4b09      	ldr	r3, [pc, #36]	; (801aa14 <dhcp_network_changed+0x6c>)
 801a9ee:	f240 326d 	movw	r2, #877	; 0x36d
 801a9f2:	4909      	ldr	r1, [pc, #36]	; (801aa18 <dhcp_network_changed+0x70>)
 801a9f4:	4809      	ldr	r0, [pc, #36]	; (801aa1c <dhcp_network_changed+0x74>)
 801a9f6:	f004 fe05 	bl	801f604 <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 801a9fa:	68fb      	ldr	r3, [r7, #12]
 801a9fc:	2200      	movs	r2, #0
 801a9fe:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 801aa00:	6878      	ldr	r0, [r7, #4]
 801aa02:	f000 f8af 	bl	801ab64 <dhcp_discover>
      break;
 801aa06:	e002      	b.n	801aa0e <dhcp_network_changed+0x66>
    return;
 801aa08:	bf00      	nop
 801aa0a:	e000      	b.n	801aa0e <dhcp_network_changed+0x66>
      break;
 801aa0c:	bf00      	nop
  }
}
 801aa0e:	3710      	adds	r7, #16
 801aa10:	46bd      	mov	sp, r7
 801aa12:	bd80      	pop	{r7, pc}
 801aa14:	0802657c 	.word	0x0802657c
 801aa18:	080266c8 	.word	0x080266c8
 801aa1c:	080265dc 	.word	0x080265dc

0801aa20 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 801aa20:	b580      	push	{r7, lr}
 801aa22:	b084      	sub	sp, #16
 801aa24:	af00      	add	r7, sp, #0
 801aa26:	6078      	str	r0, [r7, #4]
 801aa28:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801aa2a:	687b      	ldr	r3, [r7, #4]
 801aa2c:	2b00      	cmp	r3, #0
 801aa2e:	d107      	bne.n	801aa40 <dhcp_arp_reply+0x20>
 801aa30:	4b0e      	ldr	r3, [pc, #56]	; (801aa6c <dhcp_arp_reply+0x4c>)
 801aa32:	f240 328b 	movw	r2, #907	; 0x38b
 801aa36:	490e      	ldr	r1, [pc, #56]	; (801aa70 <dhcp_arp_reply+0x50>)
 801aa38:	480e      	ldr	r0, [pc, #56]	; (801aa74 <dhcp_arp_reply+0x54>)
 801aa3a:	f004 fde3 	bl	801f604 <iprintf>
 801aa3e:	e012      	b.n	801aa66 <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 801aa40:	687b      	ldr	r3, [r7, #4]
 801aa42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801aa44:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 801aa46:	68fb      	ldr	r3, [r7, #12]
 801aa48:	2b00      	cmp	r3, #0
 801aa4a:	d00c      	beq.n	801aa66 <dhcp_arp_reply+0x46>
 801aa4c:	68fb      	ldr	r3, [r7, #12]
 801aa4e:	795b      	ldrb	r3, [r3, #5]
 801aa50:	2b08      	cmp	r3, #8
 801aa52:	d108      	bne.n	801aa66 <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 801aa54:	683b      	ldr	r3, [r7, #0]
 801aa56:	681a      	ldr	r2, [r3, #0]
 801aa58:	68fb      	ldr	r3, [r7, #12]
 801aa5a:	69db      	ldr	r3, [r3, #28]
 801aa5c:	429a      	cmp	r2, r3
 801aa5e:	d102      	bne.n	801aa66 <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 801aa60:	6878      	ldr	r0, [r7, #4]
 801aa62:	f000 f809 	bl	801aa78 <dhcp_decline>
    }
  }
}
 801aa66:	3710      	adds	r7, #16
 801aa68:	46bd      	mov	sp, r7
 801aa6a:	bd80      	pop	{r7, pc}
 801aa6c:	0802657c 	.word	0x0802657c
 801aa70:	08026660 	.word	0x08026660
 801aa74:	080265dc 	.word	0x080265dc

0801aa78 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 801aa78:	b5b0      	push	{r4, r5, r7, lr}
 801aa7a:	b08a      	sub	sp, #40	; 0x28
 801aa7c:	af02      	add	r7, sp, #8
 801aa7e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801aa80:	687b      	ldr	r3, [r7, #4]
 801aa82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801aa84:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 801aa86:	210c      	movs	r1, #12
 801aa88:	69b8      	ldr	r0, [r7, #24]
 801aa8a:	f000 fc6f 	bl	801b36c <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 801aa8e:	f107 030c 	add.w	r3, r7, #12
 801aa92:	2204      	movs	r2, #4
 801aa94:	69b9      	ldr	r1, [r7, #24]
 801aa96:	6878      	ldr	r0, [r7, #4]
 801aa98:	f001 f8f4 	bl	801bc84 <dhcp_create_msg>
 801aa9c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801aa9e:	697b      	ldr	r3, [r7, #20]
 801aaa0:	2b00      	cmp	r3, #0
 801aaa2:	d035      	beq.n	801ab10 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801aaa4:	697b      	ldr	r3, [r7, #20]
 801aaa6:	685b      	ldr	r3, [r3, #4]
 801aaa8:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801aaaa:	89b8      	ldrh	r0, [r7, #12]
 801aaac:	693b      	ldr	r3, [r7, #16]
 801aaae:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801aab2:	2304      	movs	r3, #4
 801aab4:	2232      	movs	r2, #50	; 0x32
 801aab6:	f000 fc73 	bl	801b3a0 <dhcp_option>
 801aaba:	4603      	mov	r3, r0
 801aabc:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801aabe:	89bc      	ldrh	r4, [r7, #12]
 801aac0:	693b      	ldr	r3, [r7, #16]
 801aac2:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801aac6:	69bb      	ldr	r3, [r7, #24]
 801aac8:	69db      	ldr	r3, [r3, #28]
 801aaca:	4618      	mov	r0, r3
 801aacc:	f7f6 fc9f 	bl	801140e <lwip_htonl>
 801aad0:	4603      	mov	r3, r0
 801aad2:	461a      	mov	r2, r3
 801aad4:	4629      	mov	r1, r5
 801aad6:	4620      	mov	r0, r4
 801aad8:	f000 fcee 	bl	801b4b8 <dhcp_option_long>
 801aadc:	4603      	mov	r3, r0
 801aade:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801aae0:	89b8      	ldrh	r0, [r7, #12]
 801aae2:	693b      	ldr	r3, [r7, #16]
 801aae4:	33f0      	adds	r3, #240	; 0xf0
 801aae6:	697a      	ldr	r2, [r7, #20]
 801aae8:	4619      	mov	r1, r3
 801aaea:	f001 f9a1 	bl	801be30 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801aaee:	4b19      	ldr	r3, [pc, #100]	; (801ab54 <dhcp_decline+0xdc>)
 801aaf0:	6818      	ldr	r0, [r3, #0]
 801aaf2:	4b19      	ldr	r3, [pc, #100]	; (801ab58 <dhcp_decline+0xe0>)
 801aaf4:	9301      	str	r3, [sp, #4]
 801aaf6:	687b      	ldr	r3, [r7, #4]
 801aaf8:	9300      	str	r3, [sp, #0]
 801aafa:	2343      	movs	r3, #67	; 0x43
 801aafc:	4a17      	ldr	r2, [pc, #92]	; (801ab5c <dhcp_decline+0xe4>)
 801aafe:	6979      	ldr	r1, [r7, #20]
 801ab00:	f7ff f8c4 	bl	8019c8c <udp_sendto_if_src>
 801ab04:	4603      	mov	r3, r0
 801ab06:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801ab08:	6978      	ldr	r0, [r7, #20]
 801ab0a:	f7f8 f953 	bl	8012db4 <pbuf_free>
 801ab0e:	e001      	b.n	801ab14 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801ab10:	23ff      	movs	r3, #255	; 0xff
 801ab12:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801ab14:	69bb      	ldr	r3, [r7, #24]
 801ab16:	799b      	ldrb	r3, [r3, #6]
 801ab18:	2bff      	cmp	r3, #255	; 0xff
 801ab1a:	d005      	beq.n	801ab28 <dhcp_decline+0xb0>
    dhcp->tries++;
 801ab1c:	69bb      	ldr	r3, [r7, #24]
 801ab1e:	799b      	ldrb	r3, [r3, #6]
 801ab20:	3301      	adds	r3, #1
 801ab22:	b2da      	uxtb	r2, r3
 801ab24:	69bb      	ldr	r3, [r7, #24]
 801ab26:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 801ab28:	f242 7310 	movw	r3, #10000	; 0x2710
 801ab2c:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801ab2e:	89fb      	ldrh	r3, [r7, #14]
 801ab30:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801ab34:	4a0a      	ldr	r2, [pc, #40]	; (801ab60 <dhcp_decline+0xe8>)
 801ab36:	fb82 1203 	smull	r1, r2, r2, r3
 801ab3a:	1152      	asrs	r2, r2, #5
 801ab3c:	17db      	asrs	r3, r3, #31
 801ab3e:	1ad3      	subs	r3, r2, r3
 801ab40:	b29a      	uxth	r2, r3
 801ab42:	69bb      	ldr	r3, [r7, #24]
 801ab44:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801ab46:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801ab4a:	4618      	mov	r0, r3
 801ab4c:	3720      	adds	r7, #32
 801ab4e:	46bd      	mov	sp, r7
 801ab50:	bdb0      	pop	{r4, r5, r7, pc}
 801ab52:	bf00      	nop
 801ab54:	24004580 	.word	0x24004580
 801ab58:	0802718c 	.word	0x0802718c
 801ab5c:	08027190 	.word	0x08027190
 801ab60:	10624dd3 	.word	0x10624dd3

0801ab64 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 801ab64:	b580      	push	{r7, lr}
 801ab66:	b08a      	sub	sp, #40	; 0x28
 801ab68:	af02      	add	r7, sp, #8
 801ab6a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801ab6c:	687b      	ldr	r3, [r7, #4]
 801ab6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ab70:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 801ab72:	2300      	movs	r3, #0
 801ab74:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 801ab76:	69bb      	ldr	r3, [r7, #24]
 801ab78:	2200      	movs	r2, #0
 801ab7a:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 801ab7c:	2106      	movs	r1, #6
 801ab7e:	69b8      	ldr	r0, [r7, #24]
 801ab80:	f000 fbf4 	bl	801b36c <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 801ab84:	f107 0308 	add.w	r3, r7, #8
 801ab88:	2201      	movs	r2, #1
 801ab8a:	69b9      	ldr	r1, [r7, #24]
 801ab8c:	6878      	ldr	r0, [r7, #4]
 801ab8e:	f001 f879 	bl	801bc84 <dhcp_create_msg>
 801ab92:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 801ab94:	693b      	ldr	r3, [r7, #16]
 801ab96:	2b00      	cmp	r3, #0
 801ab98:	d04b      	beq.n	801ac32 <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801ab9a:	693b      	ldr	r3, [r7, #16]
 801ab9c:	685b      	ldr	r3, [r3, #4]
 801ab9e:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801aba0:	8938      	ldrh	r0, [r7, #8]
 801aba2:	68fb      	ldr	r3, [r7, #12]
 801aba4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801aba8:	2302      	movs	r3, #2
 801abaa:	2239      	movs	r2, #57	; 0x39
 801abac:	f000 fbf8 	bl	801b3a0 <dhcp_option>
 801abb0:	4603      	mov	r3, r0
 801abb2:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801abb4:	8938      	ldrh	r0, [r7, #8]
 801abb6:	68fb      	ldr	r3, [r7, #12]
 801abb8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801abbc:	687b      	ldr	r3, [r7, #4]
 801abbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801abc0:	461a      	mov	r2, r3
 801abc2:	f000 fc47 	bl	801b454 <dhcp_option_short>
 801abc6:	4603      	mov	r3, r0
 801abc8:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801abca:	8938      	ldrh	r0, [r7, #8]
 801abcc:	68fb      	ldr	r3, [r7, #12]
 801abce:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801abd2:	2303      	movs	r3, #3
 801abd4:	2237      	movs	r2, #55	; 0x37
 801abd6:	f000 fbe3 	bl	801b3a0 <dhcp_option>
 801abda:	4603      	mov	r3, r0
 801abdc:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801abde:	2300      	movs	r3, #0
 801abe0:	77fb      	strb	r3, [r7, #31]
 801abe2:	e00e      	b.n	801ac02 <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801abe4:	8938      	ldrh	r0, [r7, #8]
 801abe6:	68fb      	ldr	r3, [r7, #12]
 801abe8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801abec:	7ffb      	ldrb	r3, [r7, #31]
 801abee:	4a29      	ldr	r2, [pc, #164]	; (801ac94 <dhcp_discover+0x130>)
 801abf0:	5cd3      	ldrb	r3, [r2, r3]
 801abf2:	461a      	mov	r2, r3
 801abf4:	f000 fc08 	bl	801b408 <dhcp_option_byte>
 801abf8:	4603      	mov	r3, r0
 801abfa:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801abfc:	7ffb      	ldrb	r3, [r7, #31]
 801abfe:	3301      	adds	r3, #1
 801ac00:	77fb      	strb	r3, [r7, #31]
 801ac02:	7ffb      	ldrb	r3, [r7, #31]
 801ac04:	2b02      	cmp	r3, #2
 801ac06:	d9ed      	bls.n	801abe4 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801ac08:	8938      	ldrh	r0, [r7, #8]
 801ac0a:	68fb      	ldr	r3, [r7, #12]
 801ac0c:	33f0      	adds	r3, #240	; 0xf0
 801ac0e:	693a      	ldr	r2, [r7, #16]
 801ac10:	4619      	mov	r1, r3
 801ac12:	f001 f90d 	bl	801be30 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801ac16:	4b20      	ldr	r3, [pc, #128]	; (801ac98 <dhcp_discover+0x134>)
 801ac18:	6818      	ldr	r0, [r3, #0]
 801ac1a:	4b20      	ldr	r3, [pc, #128]	; (801ac9c <dhcp_discover+0x138>)
 801ac1c:	9301      	str	r3, [sp, #4]
 801ac1e:	687b      	ldr	r3, [r7, #4]
 801ac20:	9300      	str	r3, [sp, #0]
 801ac22:	2343      	movs	r3, #67	; 0x43
 801ac24:	4a1e      	ldr	r2, [pc, #120]	; (801aca0 <dhcp_discover+0x13c>)
 801ac26:	6939      	ldr	r1, [r7, #16]
 801ac28:	f7ff f830 	bl	8019c8c <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 801ac2c:	6938      	ldr	r0, [r7, #16]
 801ac2e:	f7f8 f8c1 	bl	8012db4 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 801ac32:	69bb      	ldr	r3, [r7, #24]
 801ac34:	799b      	ldrb	r3, [r3, #6]
 801ac36:	2bff      	cmp	r3, #255	; 0xff
 801ac38:	d005      	beq.n	801ac46 <dhcp_discover+0xe2>
    dhcp->tries++;
 801ac3a:	69bb      	ldr	r3, [r7, #24]
 801ac3c:	799b      	ldrb	r3, [r3, #6]
 801ac3e:	3301      	adds	r3, #1
 801ac40:	b2da      	uxtb	r2, r3
 801ac42:	69bb      	ldr	r3, [r7, #24]
 801ac44:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 801ac46:	69bb      	ldr	r3, [r7, #24]
 801ac48:	799b      	ldrb	r3, [r3, #6]
 801ac4a:	2b05      	cmp	r3, #5
 801ac4c:	d80d      	bhi.n	801ac6a <dhcp_discover+0x106>
 801ac4e:	69bb      	ldr	r3, [r7, #24]
 801ac50:	799b      	ldrb	r3, [r3, #6]
 801ac52:	461a      	mov	r2, r3
 801ac54:	2301      	movs	r3, #1
 801ac56:	4093      	lsls	r3, r2
 801ac58:	b29b      	uxth	r3, r3
 801ac5a:	461a      	mov	r2, r3
 801ac5c:	0152      	lsls	r2, r2, #5
 801ac5e:	1ad2      	subs	r2, r2, r3
 801ac60:	0092      	lsls	r2, r2, #2
 801ac62:	4413      	add	r3, r2
 801ac64:	00db      	lsls	r3, r3, #3
 801ac66:	b29b      	uxth	r3, r3
 801ac68:	e001      	b.n	801ac6e <dhcp_discover+0x10a>
 801ac6a:	f64e 2360 	movw	r3, #60000	; 0xea60
 801ac6e:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801ac70:	897b      	ldrh	r3, [r7, #10]
 801ac72:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801ac76:	4a0b      	ldr	r2, [pc, #44]	; (801aca4 <dhcp_discover+0x140>)
 801ac78:	fb82 1203 	smull	r1, r2, r2, r3
 801ac7c:	1152      	asrs	r2, r2, #5
 801ac7e:	17db      	asrs	r3, r3, #31
 801ac80:	1ad3      	subs	r3, r2, r3
 801ac82:	b29a      	uxth	r2, r3
 801ac84:	69bb      	ldr	r3, [r7, #24]
 801ac86:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801ac88:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801ac8c:	4618      	mov	r0, r3
 801ac8e:	3720      	adds	r7, #32
 801ac90:	46bd      	mov	sp, r7
 801ac92:	bd80      	pop	{r7, pc}
 801ac94:	24000300 	.word	0x24000300
 801ac98:	24004580 	.word	0x24004580
 801ac9c:	0802718c 	.word	0x0802718c
 801aca0:	08027190 	.word	0x08027190
 801aca4:	10624dd3 	.word	0x10624dd3

0801aca8 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 801aca8:	b580      	push	{r7, lr}
 801acaa:	b088      	sub	sp, #32
 801acac:	af00      	add	r7, sp, #0
 801acae:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 801acb0:	687b      	ldr	r3, [r7, #4]
 801acb2:	2b00      	cmp	r3, #0
 801acb4:	d107      	bne.n	801acc6 <dhcp_bind+0x1e>
 801acb6:	4b64      	ldr	r3, [pc, #400]	; (801ae48 <dhcp_bind+0x1a0>)
 801acb8:	f240 4215 	movw	r2, #1045	; 0x415
 801acbc:	4963      	ldr	r1, [pc, #396]	; (801ae4c <dhcp_bind+0x1a4>)
 801acbe:	4864      	ldr	r0, [pc, #400]	; (801ae50 <dhcp_bind+0x1a8>)
 801acc0:	f004 fca0 	bl	801f604 <iprintf>
 801acc4:	e0bc      	b.n	801ae40 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 801acc6:	687b      	ldr	r3, [r7, #4]
 801acc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801acca:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 801accc:	69bb      	ldr	r3, [r7, #24]
 801acce:	2b00      	cmp	r3, #0
 801acd0:	d107      	bne.n	801ace2 <dhcp_bind+0x3a>
 801acd2:	4b5d      	ldr	r3, [pc, #372]	; (801ae48 <dhcp_bind+0x1a0>)
 801acd4:	f240 4217 	movw	r2, #1047	; 0x417
 801acd8:	495e      	ldr	r1, [pc, #376]	; (801ae54 <dhcp_bind+0x1ac>)
 801acda:	485d      	ldr	r0, [pc, #372]	; (801ae50 <dhcp_bind+0x1a8>)
 801acdc:	f004 fc92 	bl	801f604 <iprintf>
 801ace0:	e0ae      	b.n	801ae40 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 801ace2:	69bb      	ldr	r3, [r7, #24]
 801ace4:	2200      	movs	r2, #0
 801ace6:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 801ace8:	69bb      	ldr	r3, [r7, #24]
 801acea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801acec:	f1b3 3fff 	cmp.w	r3, #4294967295
 801acf0:	d019      	beq.n	801ad26 <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801acf2:	69bb      	ldr	r3, [r7, #24]
 801acf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801acf6:	331e      	adds	r3, #30
 801acf8:	4a57      	ldr	r2, [pc, #348]	; (801ae58 <dhcp_bind+0x1b0>)
 801acfa:	fba2 2303 	umull	r2, r3, r2, r3
 801acfe:	095b      	lsrs	r3, r3, #5
 801ad00:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 801ad02:	69fb      	ldr	r3, [r7, #28]
 801ad04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801ad08:	d302      	bcc.n	801ad10 <dhcp_bind+0x68>
      timeout = 0xffff;
 801ad0a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801ad0e:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 801ad10:	69fb      	ldr	r3, [r7, #28]
 801ad12:	b29a      	uxth	r2, r3
 801ad14:	69bb      	ldr	r3, [r7, #24]
 801ad16:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 801ad18:	69bb      	ldr	r3, [r7, #24]
 801ad1a:	8a9b      	ldrh	r3, [r3, #20]
 801ad1c:	2b00      	cmp	r3, #0
 801ad1e:	d102      	bne.n	801ad26 <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 801ad20:	69bb      	ldr	r3, [r7, #24]
 801ad22:	2201      	movs	r2, #1
 801ad24:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 801ad26:	69bb      	ldr	r3, [r7, #24]
 801ad28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ad2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ad2e:	d01d      	beq.n	801ad6c <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801ad30:	69bb      	ldr	r3, [r7, #24]
 801ad32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ad34:	331e      	adds	r3, #30
 801ad36:	4a48      	ldr	r2, [pc, #288]	; (801ae58 <dhcp_bind+0x1b0>)
 801ad38:	fba2 2303 	umull	r2, r3, r2, r3
 801ad3c:	095b      	lsrs	r3, r3, #5
 801ad3e:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 801ad40:	69fb      	ldr	r3, [r7, #28]
 801ad42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801ad46:	d302      	bcc.n	801ad4e <dhcp_bind+0xa6>
      timeout = 0xffff;
 801ad48:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801ad4c:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 801ad4e:	69fb      	ldr	r3, [r7, #28]
 801ad50:	b29a      	uxth	r2, r3
 801ad52:	69bb      	ldr	r3, [r7, #24]
 801ad54:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 801ad56:	69bb      	ldr	r3, [r7, #24]
 801ad58:	895b      	ldrh	r3, [r3, #10]
 801ad5a:	2b00      	cmp	r3, #0
 801ad5c:	d102      	bne.n	801ad64 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 801ad5e:	69bb      	ldr	r3, [r7, #24]
 801ad60:	2201      	movs	r2, #1
 801ad62:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 801ad64:	69bb      	ldr	r3, [r7, #24]
 801ad66:	895a      	ldrh	r2, [r3, #10]
 801ad68:	69bb      	ldr	r3, [r7, #24]
 801ad6a:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 801ad6c:	69bb      	ldr	r3, [r7, #24]
 801ad6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ad70:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ad74:	d01d      	beq.n	801adb2 <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801ad76:	69bb      	ldr	r3, [r7, #24]
 801ad78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ad7a:	331e      	adds	r3, #30
 801ad7c:	4a36      	ldr	r2, [pc, #216]	; (801ae58 <dhcp_bind+0x1b0>)
 801ad7e:	fba2 2303 	umull	r2, r3, r2, r3
 801ad82:	095b      	lsrs	r3, r3, #5
 801ad84:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 801ad86:	69fb      	ldr	r3, [r7, #28]
 801ad88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801ad8c:	d302      	bcc.n	801ad94 <dhcp_bind+0xec>
      timeout = 0xffff;
 801ad8e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801ad92:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 801ad94:	69fb      	ldr	r3, [r7, #28]
 801ad96:	b29a      	uxth	r2, r3
 801ad98:	69bb      	ldr	r3, [r7, #24]
 801ad9a:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 801ad9c:	69bb      	ldr	r3, [r7, #24]
 801ad9e:	899b      	ldrh	r3, [r3, #12]
 801ada0:	2b00      	cmp	r3, #0
 801ada2:	d102      	bne.n	801adaa <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 801ada4:	69bb      	ldr	r3, [r7, #24]
 801ada6:	2201      	movs	r2, #1
 801ada8:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 801adaa:	69bb      	ldr	r3, [r7, #24]
 801adac:	899a      	ldrh	r2, [r3, #12]
 801adae:	69bb      	ldr	r3, [r7, #24]
 801adb0:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 801adb2:	69bb      	ldr	r3, [r7, #24]
 801adb4:	895a      	ldrh	r2, [r3, #10]
 801adb6:	69bb      	ldr	r3, [r7, #24]
 801adb8:	899b      	ldrh	r3, [r3, #12]
 801adba:	429a      	cmp	r2, r3
 801adbc:	d306      	bcc.n	801adcc <dhcp_bind+0x124>
 801adbe:	69bb      	ldr	r3, [r7, #24]
 801adc0:	899b      	ldrh	r3, [r3, #12]
 801adc2:	2b00      	cmp	r3, #0
 801adc4:	d002      	beq.n	801adcc <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 801adc6:	69bb      	ldr	r3, [r7, #24]
 801adc8:	2200      	movs	r2, #0
 801adca:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 801adcc:	69bb      	ldr	r3, [r7, #24]
 801adce:	79db      	ldrb	r3, [r3, #7]
 801add0:	2b00      	cmp	r3, #0
 801add2:	d003      	beq.n	801addc <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 801add4:	69bb      	ldr	r3, [r7, #24]
 801add6:	6a1b      	ldr	r3, [r3, #32]
 801add8:	613b      	str	r3, [r7, #16]
 801adda:	e014      	b.n	801ae06 <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 801addc:	69bb      	ldr	r3, [r7, #24]
 801adde:	331c      	adds	r3, #28
 801ade0:	781b      	ldrb	r3, [r3, #0]
 801ade2:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 801ade4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801ade8:	2b00      	cmp	r3, #0
 801adea:	db02      	blt.n	801adf2 <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 801adec:	23ff      	movs	r3, #255	; 0xff
 801adee:	613b      	str	r3, [r7, #16]
 801adf0:	e009      	b.n	801ae06 <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 801adf2:	7dfb      	ldrb	r3, [r7, #23]
 801adf4:	2bbf      	cmp	r3, #191	; 0xbf
 801adf6:	d903      	bls.n	801ae00 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 801adf8:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 801adfc:	613b      	str	r3, [r7, #16]
 801adfe:	e002      	b.n	801ae06 <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 801ae00:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801ae04:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 801ae06:	69bb      	ldr	r3, [r7, #24]
 801ae08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ae0a:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 801ae0c:	68fb      	ldr	r3, [r7, #12]
 801ae0e:	2b00      	cmp	r3, #0
 801ae10:	d108      	bne.n	801ae24 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 801ae12:	69bb      	ldr	r3, [r7, #24]
 801ae14:	69da      	ldr	r2, [r3, #28]
 801ae16:	693b      	ldr	r3, [r7, #16]
 801ae18:	4013      	ands	r3, r2
 801ae1a:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 801ae1c:	68fb      	ldr	r3, [r7, #12]
 801ae1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801ae22:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 801ae24:	210a      	movs	r1, #10
 801ae26:	69b8      	ldr	r0, [r7, #24]
 801ae28:	f000 faa0 	bl	801b36c <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 801ae2c:	69bb      	ldr	r3, [r7, #24]
 801ae2e:	f103 011c 	add.w	r1, r3, #28
 801ae32:	f107 030c 	add.w	r3, r7, #12
 801ae36:	f107 0210 	add.w	r2, r7, #16
 801ae3a:	6878      	ldr	r0, [r7, #4]
 801ae3c:	f7f7 fa7a 	bl	8012334 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 801ae40:	3720      	adds	r7, #32
 801ae42:	46bd      	mov	sp, r7
 801ae44:	bd80      	pop	{r7, pc}
 801ae46:	bf00      	nop
 801ae48:	0802657c 	.word	0x0802657c
 801ae4c:	080266dc 	.word	0x080266dc
 801ae50:	080265dc 	.word	0x080265dc
 801ae54:	080266f8 	.word	0x080266f8
 801ae58:	88888889 	.word	0x88888889

0801ae5c <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 801ae5c:	b580      	push	{r7, lr}
 801ae5e:	b08a      	sub	sp, #40	; 0x28
 801ae60:	af02      	add	r7, sp, #8
 801ae62:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801ae64:	687b      	ldr	r3, [r7, #4]
 801ae66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ae68:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 801ae6a:	2105      	movs	r1, #5
 801ae6c:	69b8      	ldr	r0, [r7, #24]
 801ae6e:	f000 fa7d 	bl	801b36c <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801ae72:	f107 030c 	add.w	r3, r7, #12
 801ae76:	2203      	movs	r2, #3
 801ae78:	69b9      	ldr	r1, [r7, #24]
 801ae7a:	6878      	ldr	r0, [r7, #4]
 801ae7c:	f000 ff02 	bl	801bc84 <dhcp_create_msg>
 801ae80:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801ae82:	697b      	ldr	r3, [r7, #20]
 801ae84:	2b00      	cmp	r3, #0
 801ae86:	d04e      	beq.n	801af26 <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801ae88:	697b      	ldr	r3, [r7, #20]
 801ae8a:	685b      	ldr	r3, [r3, #4]
 801ae8c:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801ae8e:	89b8      	ldrh	r0, [r7, #12]
 801ae90:	693b      	ldr	r3, [r7, #16]
 801ae92:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801ae96:	2302      	movs	r3, #2
 801ae98:	2239      	movs	r2, #57	; 0x39
 801ae9a:	f000 fa81 	bl	801b3a0 <dhcp_option>
 801ae9e:	4603      	mov	r3, r0
 801aea0:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801aea2:	89b8      	ldrh	r0, [r7, #12]
 801aea4:	693b      	ldr	r3, [r7, #16]
 801aea6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801aeaa:	687b      	ldr	r3, [r7, #4]
 801aeac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801aeae:	461a      	mov	r2, r3
 801aeb0:	f000 fad0 	bl	801b454 <dhcp_option_short>
 801aeb4:	4603      	mov	r3, r0
 801aeb6:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801aeb8:	89b8      	ldrh	r0, [r7, #12]
 801aeba:	693b      	ldr	r3, [r7, #16]
 801aebc:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801aec0:	2303      	movs	r3, #3
 801aec2:	2237      	movs	r2, #55	; 0x37
 801aec4:	f000 fa6c 	bl	801b3a0 <dhcp_option>
 801aec8:	4603      	mov	r3, r0
 801aeca:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801aecc:	2300      	movs	r3, #0
 801aece:	77bb      	strb	r3, [r7, #30]
 801aed0:	e00e      	b.n	801aef0 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801aed2:	89b8      	ldrh	r0, [r7, #12]
 801aed4:	693b      	ldr	r3, [r7, #16]
 801aed6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801aeda:	7fbb      	ldrb	r3, [r7, #30]
 801aedc:	4a2a      	ldr	r2, [pc, #168]	; (801af88 <dhcp_renew+0x12c>)
 801aede:	5cd3      	ldrb	r3, [r2, r3]
 801aee0:	461a      	mov	r2, r3
 801aee2:	f000 fa91 	bl	801b408 <dhcp_option_byte>
 801aee6:	4603      	mov	r3, r0
 801aee8:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801aeea:	7fbb      	ldrb	r3, [r7, #30]
 801aeec:	3301      	adds	r3, #1
 801aeee:	77bb      	strb	r3, [r7, #30]
 801aef0:	7fbb      	ldrb	r3, [r7, #30]
 801aef2:	2b02      	cmp	r3, #2
 801aef4:	d9ed      	bls.n	801aed2 <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801aef6:	89b8      	ldrh	r0, [r7, #12]
 801aef8:	693b      	ldr	r3, [r7, #16]
 801aefa:	33f0      	adds	r3, #240	; 0xf0
 801aefc:	697a      	ldr	r2, [r7, #20]
 801aefe:	4619      	mov	r1, r3
 801af00:	f000 ff96 	bl	801be30 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801af04:	4b21      	ldr	r3, [pc, #132]	; (801af8c <dhcp_renew+0x130>)
 801af06:	6818      	ldr	r0, [r3, #0]
 801af08:	69bb      	ldr	r3, [r7, #24]
 801af0a:	f103 0218 	add.w	r2, r3, #24
 801af0e:	687b      	ldr	r3, [r7, #4]
 801af10:	9300      	str	r3, [sp, #0]
 801af12:	2343      	movs	r3, #67	; 0x43
 801af14:	6979      	ldr	r1, [r7, #20]
 801af16:	f7fe fe45 	bl	8019ba4 <udp_sendto_if>
 801af1a:	4603      	mov	r3, r0
 801af1c:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801af1e:	6978      	ldr	r0, [r7, #20]
 801af20:	f7f7 ff48 	bl	8012db4 <pbuf_free>
 801af24:	e001      	b.n	801af2a <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801af26:	23ff      	movs	r3, #255	; 0xff
 801af28:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801af2a:	69bb      	ldr	r3, [r7, #24]
 801af2c:	799b      	ldrb	r3, [r3, #6]
 801af2e:	2bff      	cmp	r3, #255	; 0xff
 801af30:	d005      	beq.n	801af3e <dhcp_renew+0xe2>
    dhcp->tries++;
 801af32:	69bb      	ldr	r3, [r7, #24]
 801af34:	799b      	ldrb	r3, [r3, #6]
 801af36:	3301      	adds	r3, #1
 801af38:	b2da      	uxtb	r2, r3
 801af3a:	69bb      	ldr	r3, [r7, #24]
 801af3c:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 801af3e:	69bb      	ldr	r3, [r7, #24]
 801af40:	799b      	ldrb	r3, [r3, #6]
 801af42:	2b09      	cmp	r3, #9
 801af44:	d80a      	bhi.n	801af5c <dhcp_renew+0x100>
 801af46:	69bb      	ldr	r3, [r7, #24]
 801af48:	799b      	ldrb	r3, [r3, #6]
 801af4a:	b29b      	uxth	r3, r3
 801af4c:	461a      	mov	r2, r3
 801af4e:	0152      	lsls	r2, r2, #5
 801af50:	1ad2      	subs	r2, r2, r3
 801af52:	0092      	lsls	r2, r2, #2
 801af54:	4413      	add	r3, r2
 801af56:	011b      	lsls	r3, r3, #4
 801af58:	b29b      	uxth	r3, r3
 801af5a:	e001      	b.n	801af60 <dhcp_renew+0x104>
 801af5c:	f644 6320 	movw	r3, #20000	; 0x4e20
 801af60:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801af62:	89fb      	ldrh	r3, [r7, #14]
 801af64:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801af68:	4a09      	ldr	r2, [pc, #36]	; (801af90 <dhcp_renew+0x134>)
 801af6a:	fb82 1203 	smull	r1, r2, r2, r3
 801af6e:	1152      	asrs	r2, r2, #5
 801af70:	17db      	asrs	r3, r3, #31
 801af72:	1ad3      	subs	r3, r2, r3
 801af74:	b29a      	uxth	r2, r3
 801af76:	69bb      	ldr	r3, [r7, #24]
 801af78:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801af7a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801af7e:	4618      	mov	r0, r3
 801af80:	3720      	adds	r7, #32
 801af82:	46bd      	mov	sp, r7
 801af84:	bd80      	pop	{r7, pc}
 801af86:	bf00      	nop
 801af88:	24000300 	.word	0x24000300
 801af8c:	24004580 	.word	0x24004580
 801af90:	10624dd3 	.word	0x10624dd3

0801af94 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 801af94:	b580      	push	{r7, lr}
 801af96:	b08a      	sub	sp, #40	; 0x28
 801af98:	af02      	add	r7, sp, #8
 801af9a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801af9c:	687b      	ldr	r3, [r7, #4]
 801af9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801afa0:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 801afa2:	2104      	movs	r1, #4
 801afa4:	69b8      	ldr	r0, [r7, #24]
 801afa6:	f000 f9e1 	bl	801b36c <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801afaa:	f107 030c 	add.w	r3, r7, #12
 801afae:	2203      	movs	r2, #3
 801afb0:	69b9      	ldr	r1, [r7, #24]
 801afb2:	6878      	ldr	r0, [r7, #4]
 801afb4:	f000 fe66 	bl	801bc84 <dhcp_create_msg>
 801afb8:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801afba:	697b      	ldr	r3, [r7, #20]
 801afbc:	2b00      	cmp	r3, #0
 801afbe:	d04c      	beq.n	801b05a <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801afc0:	697b      	ldr	r3, [r7, #20]
 801afc2:	685b      	ldr	r3, [r3, #4]
 801afc4:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801afc6:	89b8      	ldrh	r0, [r7, #12]
 801afc8:	693b      	ldr	r3, [r7, #16]
 801afca:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801afce:	2302      	movs	r3, #2
 801afd0:	2239      	movs	r2, #57	; 0x39
 801afd2:	f000 f9e5 	bl	801b3a0 <dhcp_option>
 801afd6:	4603      	mov	r3, r0
 801afd8:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801afda:	89b8      	ldrh	r0, [r7, #12]
 801afdc:	693b      	ldr	r3, [r7, #16]
 801afde:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801afe2:	687b      	ldr	r3, [r7, #4]
 801afe4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801afe6:	461a      	mov	r2, r3
 801afe8:	f000 fa34 	bl	801b454 <dhcp_option_short>
 801afec:	4603      	mov	r3, r0
 801afee:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801aff0:	89b8      	ldrh	r0, [r7, #12]
 801aff2:	693b      	ldr	r3, [r7, #16]
 801aff4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801aff8:	2303      	movs	r3, #3
 801affa:	2237      	movs	r2, #55	; 0x37
 801affc:	f000 f9d0 	bl	801b3a0 <dhcp_option>
 801b000:	4603      	mov	r3, r0
 801b002:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801b004:	2300      	movs	r3, #0
 801b006:	77bb      	strb	r3, [r7, #30]
 801b008:	e00e      	b.n	801b028 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801b00a:	89b8      	ldrh	r0, [r7, #12]
 801b00c:	693b      	ldr	r3, [r7, #16]
 801b00e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801b012:	7fbb      	ldrb	r3, [r7, #30]
 801b014:	4a29      	ldr	r2, [pc, #164]	; (801b0bc <dhcp_rebind+0x128>)
 801b016:	5cd3      	ldrb	r3, [r2, r3]
 801b018:	461a      	mov	r2, r3
 801b01a:	f000 f9f5 	bl	801b408 <dhcp_option_byte>
 801b01e:	4603      	mov	r3, r0
 801b020:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801b022:	7fbb      	ldrb	r3, [r7, #30]
 801b024:	3301      	adds	r3, #1
 801b026:	77bb      	strb	r3, [r7, #30]
 801b028:	7fbb      	ldrb	r3, [r7, #30]
 801b02a:	2b02      	cmp	r3, #2
 801b02c:	d9ed      	bls.n	801b00a <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801b02e:	89b8      	ldrh	r0, [r7, #12]
 801b030:	693b      	ldr	r3, [r7, #16]
 801b032:	33f0      	adds	r3, #240	; 0xf0
 801b034:	697a      	ldr	r2, [r7, #20]
 801b036:	4619      	mov	r1, r3
 801b038:	f000 fefa 	bl	801be30 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801b03c:	4b20      	ldr	r3, [pc, #128]	; (801b0c0 <dhcp_rebind+0x12c>)
 801b03e:	6818      	ldr	r0, [r3, #0]
 801b040:	687b      	ldr	r3, [r7, #4]
 801b042:	9300      	str	r3, [sp, #0]
 801b044:	2343      	movs	r3, #67	; 0x43
 801b046:	4a1f      	ldr	r2, [pc, #124]	; (801b0c4 <dhcp_rebind+0x130>)
 801b048:	6979      	ldr	r1, [r7, #20]
 801b04a:	f7fe fdab 	bl	8019ba4 <udp_sendto_if>
 801b04e:	4603      	mov	r3, r0
 801b050:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801b052:	6978      	ldr	r0, [r7, #20]
 801b054:	f7f7 feae 	bl	8012db4 <pbuf_free>
 801b058:	e001      	b.n	801b05e <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801b05a:	23ff      	movs	r3, #255	; 0xff
 801b05c:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801b05e:	69bb      	ldr	r3, [r7, #24]
 801b060:	799b      	ldrb	r3, [r3, #6]
 801b062:	2bff      	cmp	r3, #255	; 0xff
 801b064:	d005      	beq.n	801b072 <dhcp_rebind+0xde>
    dhcp->tries++;
 801b066:	69bb      	ldr	r3, [r7, #24]
 801b068:	799b      	ldrb	r3, [r3, #6]
 801b06a:	3301      	adds	r3, #1
 801b06c:	b2da      	uxtb	r2, r3
 801b06e:	69bb      	ldr	r3, [r7, #24]
 801b070:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 801b072:	69bb      	ldr	r3, [r7, #24]
 801b074:	799b      	ldrb	r3, [r3, #6]
 801b076:	2b09      	cmp	r3, #9
 801b078:	d80a      	bhi.n	801b090 <dhcp_rebind+0xfc>
 801b07a:	69bb      	ldr	r3, [r7, #24]
 801b07c:	799b      	ldrb	r3, [r3, #6]
 801b07e:	b29b      	uxth	r3, r3
 801b080:	461a      	mov	r2, r3
 801b082:	0152      	lsls	r2, r2, #5
 801b084:	1ad2      	subs	r2, r2, r3
 801b086:	0092      	lsls	r2, r2, #2
 801b088:	4413      	add	r3, r2
 801b08a:	00db      	lsls	r3, r3, #3
 801b08c:	b29b      	uxth	r3, r3
 801b08e:	e001      	b.n	801b094 <dhcp_rebind+0x100>
 801b090:	f242 7310 	movw	r3, #10000	; 0x2710
 801b094:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801b096:	89fb      	ldrh	r3, [r7, #14]
 801b098:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801b09c:	4a0a      	ldr	r2, [pc, #40]	; (801b0c8 <dhcp_rebind+0x134>)
 801b09e:	fb82 1203 	smull	r1, r2, r2, r3
 801b0a2:	1152      	asrs	r2, r2, #5
 801b0a4:	17db      	asrs	r3, r3, #31
 801b0a6:	1ad3      	subs	r3, r2, r3
 801b0a8:	b29a      	uxth	r2, r3
 801b0aa:	69bb      	ldr	r3, [r7, #24]
 801b0ac:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801b0ae:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801b0b2:	4618      	mov	r0, r3
 801b0b4:	3720      	adds	r7, #32
 801b0b6:	46bd      	mov	sp, r7
 801b0b8:	bd80      	pop	{r7, pc}
 801b0ba:	bf00      	nop
 801b0bc:	24000300 	.word	0x24000300
 801b0c0:	24004580 	.word	0x24004580
 801b0c4:	08027190 	.word	0x08027190
 801b0c8:	10624dd3 	.word	0x10624dd3

0801b0cc <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 801b0cc:	b5b0      	push	{r4, r5, r7, lr}
 801b0ce:	b08a      	sub	sp, #40	; 0x28
 801b0d0:	af02      	add	r7, sp, #8
 801b0d2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801b0d4:	687b      	ldr	r3, [r7, #4]
 801b0d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b0d8:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 801b0da:	2103      	movs	r1, #3
 801b0dc:	69b8      	ldr	r0, [r7, #24]
 801b0de:	f000 f945 	bl	801b36c <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801b0e2:	f107 030c 	add.w	r3, r7, #12
 801b0e6:	2203      	movs	r2, #3
 801b0e8:	69b9      	ldr	r1, [r7, #24]
 801b0ea:	6878      	ldr	r0, [r7, #4]
 801b0ec:	f000 fdca 	bl	801bc84 <dhcp_create_msg>
 801b0f0:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801b0f2:	697b      	ldr	r3, [r7, #20]
 801b0f4:	2b00      	cmp	r3, #0
 801b0f6:	d066      	beq.n	801b1c6 <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801b0f8:	697b      	ldr	r3, [r7, #20]
 801b0fa:	685b      	ldr	r3, [r3, #4]
 801b0fc:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801b0fe:	89b8      	ldrh	r0, [r7, #12]
 801b100:	693b      	ldr	r3, [r7, #16]
 801b102:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801b106:	2302      	movs	r3, #2
 801b108:	2239      	movs	r2, #57	; 0x39
 801b10a:	f000 f949 	bl	801b3a0 <dhcp_option>
 801b10e:	4603      	mov	r3, r0
 801b110:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 801b112:	89b8      	ldrh	r0, [r7, #12]
 801b114:	693b      	ldr	r3, [r7, #16]
 801b116:	33f0      	adds	r3, #240	; 0xf0
 801b118:	f44f 7210 	mov.w	r2, #576	; 0x240
 801b11c:	4619      	mov	r1, r3
 801b11e:	f000 f999 	bl	801b454 <dhcp_option_short>
 801b122:	4603      	mov	r3, r0
 801b124:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801b126:	89b8      	ldrh	r0, [r7, #12]
 801b128:	693b      	ldr	r3, [r7, #16]
 801b12a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801b12e:	2304      	movs	r3, #4
 801b130:	2232      	movs	r2, #50	; 0x32
 801b132:	f000 f935 	bl	801b3a0 <dhcp_option>
 801b136:	4603      	mov	r3, r0
 801b138:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801b13a:	89bc      	ldrh	r4, [r7, #12]
 801b13c:	693b      	ldr	r3, [r7, #16]
 801b13e:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801b142:	69bb      	ldr	r3, [r7, #24]
 801b144:	69db      	ldr	r3, [r3, #28]
 801b146:	4618      	mov	r0, r3
 801b148:	f7f6 f961 	bl	801140e <lwip_htonl>
 801b14c:	4603      	mov	r3, r0
 801b14e:	461a      	mov	r2, r3
 801b150:	4629      	mov	r1, r5
 801b152:	4620      	mov	r0, r4
 801b154:	f000 f9b0 	bl	801b4b8 <dhcp_option_long>
 801b158:	4603      	mov	r3, r0
 801b15a:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801b15c:	89b8      	ldrh	r0, [r7, #12]
 801b15e:	693b      	ldr	r3, [r7, #16]
 801b160:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801b164:	2303      	movs	r3, #3
 801b166:	2237      	movs	r2, #55	; 0x37
 801b168:	f000 f91a 	bl	801b3a0 <dhcp_option>
 801b16c:	4603      	mov	r3, r0
 801b16e:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801b170:	2300      	movs	r3, #0
 801b172:	77bb      	strb	r3, [r7, #30]
 801b174:	e00e      	b.n	801b194 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801b176:	89b8      	ldrh	r0, [r7, #12]
 801b178:	693b      	ldr	r3, [r7, #16]
 801b17a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801b17e:	7fbb      	ldrb	r3, [r7, #30]
 801b180:	4a29      	ldr	r2, [pc, #164]	; (801b228 <dhcp_reboot+0x15c>)
 801b182:	5cd3      	ldrb	r3, [r2, r3]
 801b184:	461a      	mov	r2, r3
 801b186:	f000 f93f 	bl	801b408 <dhcp_option_byte>
 801b18a:	4603      	mov	r3, r0
 801b18c:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801b18e:	7fbb      	ldrb	r3, [r7, #30]
 801b190:	3301      	adds	r3, #1
 801b192:	77bb      	strb	r3, [r7, #30]
 801b194:	7fbb      	ldrb	r3, [r7, #30]
 801b196:	2b02      	cmp	r3, #2
 801b198:	d9ed      	bls.n	801b176 <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801b19a:	89b8      	ldrh	r0, [r7, #12]
 801b19c:	693b      	ldr	r3, [r7, #16]
 801b19e:	33f0      	adds	r3, #240	; 0xf0
 801b1a0:	697a      	ldr	r2, [r7, #20]
 801b1a2:	4619      	mov	r1, r3
 801b1a4:	f000 fe44 	bl	801be30 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801b1a8:	4b20      	ldr	r3, [pc, #128]	; (801b22c <dhcp_reboot+0x160>)
 801b1aa:	6818      	ldr	r0, [r3, #0]
 801b1ac:	687b      	ldr	r3, [r7, #4]
 801b1ae:	9300      	str	r3, [sp, #0]
 801b1b0:	2343      	movs	r3, #67	; 0x43
 801b1b2:	4a1f      	ldr	r2, [pc, #124]	; (801b230 <dhcp_reboot+0x164>)
 801b1b4:	6979      	ldr	r1, [r7, #20]
 801b1b6:	f7fe fcf5 	bl	8019ba4 <udp_sendto_if>
 801b1ba:	4603      	mov	r3, r0
 801b1bc:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801b1be:	6978      	ldr	r0, [r7, #20]
 801b1c0:	f7f7 fdf8 	bl	8012db4 <pbuf_free>
 801b1c4:	e001      	b.n	801b1ca <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801b1c6:	23ff      	movs	r3, #255	; 0xff
 801b1c8:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801b1ca:	69bb      	ldr	r3, [r7, #24]
 801b1cc:	799b      	ldrb	r3, [r3, #6]
 801b1ce:	2bff      	cmp	r3, #255	; 0xff
 801b1d0:	d005      	beq.n	801b1de <dhcp_reboot+0x112>
    dhcp->tries++;
 801b1d2:	69bb      	ldr	r3, [r7, #24]
 801b1d4:	799b      	ldrb	r3, [r3, #6]
 801b1d6:	3301      	adds	r3, #1
 801b1d8:	b2da      	uxtb	r2, r3
 801b1da:	69bb      	ldr	r3, [r7, #24]
 801b1dc:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 801b1de:	69bb      	ldr	r3, [r7, #24]
 801b1e0:	799b      	ldrb	r3, [r3, #6]
 801b1e2:	2b09      	cmp	r3, #9
 801b1e4:	d80a      	bhi.n	801b1fc <dhcp_reboot+0x130>
 801b1e6:	69bb      	ldr	r3, [r7, #24]
 801b1e8:	799b      	ldrb	r3, [r3, #6]
 801b1ea:	b29b      	uxth	r3, r3
 801b1ec:	461a      	mov	r2, r3
 801b1ee:	0152      	lsls	r2, r2, #5
 801b1f0:	1ad2      	subs	r2, r2, r3
 801b1f2:	0092      	lsls	r2, r2, #2
 801b1f4:	4413      	add	r3, r2
 801b1f6:	00db      	lsls	r3, r3, #3
 801b1f8:	b29b      	uxth	r3, r3
 801b1fa:	e001      	b.n	801b200 <dhcp_reboot+0x134>
 801b1fc:	f242 7310 	movw	r3, #10000	; 0x2710
 801b200:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801b202:	89fb      	ldrh	r3, [r7, #14]
 801b204:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801b208:	4a0a      	ldr	r2, [pc, #40]	; (801b234 <dhcp_reboot+0x168>)
 801b20a:	fb82 1203 	smull	r1, r2, r2, r3
 801b20e:	1152      	asrs	r2, r2, #5
 801b210:	17db      	asrs	r3, r3, #31
 801b212:	1ad3      	subs	r3, r2, r3
 801b214:	b29a      	uxth	r2, r3
 801b216:	69bb      	ldr	r3, [r7, #24]
 801b218:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801b21a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801b21e:	4618      	mov	r0, r3
 801b220:	3720      	adds	r7, #32
 801b222:	46bd      	mov	sp, r7
 801b224:	bdb0      	pop	{r4, r5, r7, pc}
 801b226:	bf00      	nop
 801b228:	24000300 	.word	0x24000300
 801b22c:	24004580 	.word	0x24004580
 801b230:	08027190 	.word	0x08027190
 801b234:	10624dd3 	.word	0x10624dd3

0801b238 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 801b238:	b5b0      	push	{r4, r5, r7, lr}
 801b23a:	b08a      	sub	sp, #40	; 0x28
 801b23c:	af02      	add	r7, sp, #8
 801b23e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801b240:	687b      	ldr	r3, [r7, #4]
 801b242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b244:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 801b246:	69fb      	ldr	r3, [r7, #28]
 801b248:	2b00      	cmp	r3, #0
 801b24a:	f000 8084 	beq.w	801b356 <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 801b24e:	69fb      	ldr	r3, [r7, #28]
 801b250:	795b      	ldrb	r3, [r3, #5]
 801b252:	2b00      	cmp	r3, #0
 801b254:	f000 8081 	beq.w	801b35a <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 801b258:	69fb      	ldr	r3, [r7, #28]
 801b25a:	699b      	ldr	r3, [r3, #24]
 801b25c:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 801b25e:	69fb      	ldr	r3, [r7, #28]
 801b260:	2200      	movs	r2, #0
 801b262:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 801b264:	69fb      	ldr	r3, [r7, #28]
 801b266:	2200      	movs	r2, #0
 801b268:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 801b26a:	69fb      	ldr	r3, [r7, #28]
 801b26c:	2200      	movs	r2, #0
 801b26e:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 801b270:	69fb      	ldr	r3, [r7, #28]
 801b272:	2200      	movs	r2, #0
 801b274:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 801b276:	69fb      	ldr	r3, [r7, #28]
 801b278:	2200      	movs	r2, #0
 801b27a:	631a      	str	r2, [r3, #48]	; 0x30
 801b27c:	69fb      	ldr	r3, [r7, #28]
 801b27e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801b280:	69fb      	ldr	r3, [r7, #28]
 801b282:	62da      	str	r2, [r3, #44]	; 0x2c
 801b284:	69fb      	ldr	r3, [r7, #28]
 801b286:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b288:	69fb      	ldr	r3, [r7, #28]
 801b28a:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 801b28c:	69fb      	ldr	r3, [r7, #28]
 801b28e:	2200      	movs	r2, #0
 801b290:	829a      	strh	r2, [r3, #20]
 801b292:	69fb      	ldr	r3, [r7, #28]
 801b294:	8a9a      	ldrh	r2, [r3, #20]
 801b296:	69fb      	ldr	r3, [r7, #28]
 801b298:	825a      	strh	r2, [r3, #18]
 801b29a:	69fb      	ldr	r3, [r7, #28]
 801b29c:	8a5a      	ldrh	r2, [r3, #18]
 801b29e:	69fb      	ldr	r3, [r7, #28]
 801b2a0:	821a      	strh	r2, [r3, #16]
 801b2a2:	69fb      	ldr	r3, [r7, #28]
 801b2a4:	8a1a      	ldrh	r2, [r3, #16]
 801b2a6:	69fb      	ldr	r3, [r7, #28]
 801b2a8:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 801b2aa:	6878      	ldr	r0, [r7, #4]
 801b2ac:	f000 fdee 	bl	801be8c <dhcp_supplied_address>
 801b2b0:	4603      	mov	r3, r0
 801b2b2:	2b00      	cmp	r3, #0
 801b2b4:	d03b      	beq.n	801b32e <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 801b2b6:	f107 030e 	add.w	r3, r7, #14
 801b2ba:	2207      	movs	r2, #7
 801b2bc:	69f9      	ldr	r1, [r7, #28]
 801b2be:	6878      	ldr	r0, [r7, #4]
 801b2c0:	f000 fce0 	bl	801bc84 <dhcp_create_msg>
 801b2c4:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 801b2c6:	69bb      	ldr	r3, [r7, #24]
 801b2c8:	2b00      	cmp	r3, #0
 801b2ca:	d030      	beq.n	801b32e <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801b2cc:	69bb      	ldr	r3, [r7, #24]
 801b2ce:	685b      	ldr	r3, [r3, #4]
 801b2d0:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 801b2d2:	89f8      	ldrh	r0, [r7, #14]
 801b2d4:	697b      	ldr	r3, [r7, #20]
 801b2d6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801b2da:	2304      	movs	r3, #4
 801b2dc:	2236      	movs	r2, #54	; 0x36
 801b2de:	f000 f85f 	bl	801b3a0 <dhcp_option>
 801b2e2:	4603      	mov	r3, r0
 801b2e4:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 801b2e6:	89fc      	ldrh	r4, [r7, #14]
 801b2e8:	697b      	ldr	r3, [r7, #20]
 801b2ea:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801b2ee:	693b      	ldr	r3, [r7, #16]
 801b2f0:	4618      	mov	r0, r3
 801b2f2:	f7f6 f88c 	bl	801140e <lwip_htonl>
 801b2f6:	4603      	mov	r3, r0
 801b2f8:	461a      	mov	r2, r3
 801b2fa:	4629      	mov	r1, r5
 801b2fc:	4620      	mov	r0, r4
 801b2fe:	f000 f8db 	bl	801b4b8 <dhcp_option_long>
 801b302:	4603      	mov	r3, r0
 801b304:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801b306:	89f8      	ldrh	r0, [r7, #14]
 801b308:	697b      	ldr	r3, [r7, #20]
 801b30a:	33f0      	adds	r3, #240	; 0xf0
 801b30c:	69ba      	ldr	r2, [r7, #24]
 801b30e:	4619      	mov	r1, r3
 801b310:	f000 fd8e 	bl	801be30 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801b314:	4b13      	ldr	r3, [pc, #76]	; (801b364 <dhcp_release_and_stop+0x12c>)
 801b316:	6818      	ldr	r0, [r3, #0]
 801b318:	f107 0210 	add.w	r2, r7, #16
 801b31c:	687b      	ldr	r3, [r7, #4]
 801b31e:	9300      	str	r3, [sp, #0]
 801b320:	2343      	movs	r3, #67	; 0x43
 801b322:	69b9      	ldr	r1, [r7, #24]
 801b324:	f7fe fc3e 	bl	8019ba4 <udp_sendto_if>
      pbuf_free(p_out);
 801b328:	69b8      	ldr	r0, [r7, #24]
 801b32a:	f7f7 fd43 	bl	8012db4 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 801b32e:	4b0e      	ldr	r3, [pc, #56]	; (801b368 <dhcp_release_and_stop+0x130>)
 801b330:	4a0d      	ldr	r2, [pc, #52]	; (801b368 <dhcp_release_and_stop+0x130>)
 801b332:	490d      	ldr	r1, [pc, #52]	; (801b368 <dhcp_release_and_stop+0x130>)
 801b334:	6878      	ldr	r0, [r7, #4]
 801b336:	f7f6 fffd 	bl	8012334 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 801b33a:	2100      	movs	r1, #0
 801b33c:	69f8      	ldr	r0, [r7, #28]
 801b33e:	f000 f815 	bl	801b36c <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 801b342:	69fb      	ldr	r3, [r7, #28]
 801b344:	791b      	ldrb	r3, [r3, #4]
 801b346:	2b00      	cmp	r3, #0
 801b348:	d008      	beq.n	801b35c <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 801b34a:	f7fe ff83 	bl	801a254 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 801b34e:	69fb      	ldr	r3, [r7, #28]
 801b350:	2200      	movs	r2, #0
 801b352:	711a      	strb	r2, [r3, #4]
 801b354:	e002      	b.n	801b35c <dhcp_release_and_stop+0x124>
    return;
 801b356:	bf00      	nop
 801b358:	e000      	b.n	801b35c <dhcp_release_and_stop+0x124>
    return;
 801b35a:	bf00      	nop
  }
}
 801b35c:	3720      	adds	r7, #32
 801b35e:	46bd      	mov	sp, r7
 801b360:	bdb0      	pop	{r4, r5, r7, pc}
 801b362:	bf00      	nop
 801b364:	24004580 	.word	0x24004580
 801b368:	0802718c 	.word	0x0802718c

0801b36c <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 801b36c:	b480      	push	{r7}
 801b36e:	b083      	sub	sp, #12
 801b370:	af00      	add	r7, sp, #0
 801b372:	6078      	str	r0, [r7, #4]
 801b374:	460b      	mov	r3, r1
 801b376:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 801b378:	687b      	ldr	r3, [r7, #4]
 801b37a:	795b      	ldrb	r3, [r3, #5]
 801b37c:	78fa      	ldrb	r2, [r7, #3]
 801b37e:	429a      	cmp	r2, r3
 801b380:	d008      	beq.n	801b394 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 801b382:	687b      	ldr	r3, [r7, #4]
 801b384:	78fa      	ldrb	r2, [r7, #3]
 801b386:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 801b388:	687b      	ldr	r3, [r7, #4]
 801b38a:	2200      	movs	r2, #0
 801b38c:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 801b38e:	687b      	ldr	r3, [r7, #4]
 801b390:	2200      	movs	r2, #0
 801b392:	811a      	strh	r2, [r3, #8]
  }
}
 801b394:	bf00      	nop
 801b396:	370c      	adds	r7, #12
 801b398:	46bd      	mov	sp, r7
 801b39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b39e:	4770      	bx	lr

0801b3a0 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 801b3a0:	b580      	push	{r7, lr}
 801b3a2:	b082      	sub	sp, #8
 801b3a4:	af00      	add	r7, sp, #0
 801b3a6:	6039      	str	r1, [r7, #0]
 801b3a8:	4611      	mov	r1, r2
 801b3aa:	461a      	mov	r2, r3
 801b3ac:	4603      	mov	r3, r0
 801b3ae:	80fb      	strh	r3, [r7, #6]
 801b3b0:	460b      	mov	r3, r1
 801b3b2:	717b      	strb	r3, [r7, #5]
 801b3b4:	4613      	mov	r3, r2
 801b3b6:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 801b3b8:	88fa      	ldrh	r2, [r7, #6]
 801b3ba:	793b      	ldrb	r3, [r7, #4]
 801b3bc:	4413      	add	r3, r2
 801b3be:	3302      	adds	r3, #2
 801b3c0:	2b44      	cmp	r3, #68	; 0x44
 801b3c2:	d906      	bls.n	801b3d2 <dhcp_option+0x32>
 801b3c4:	4b0d      	ldr	r3, [pc, #52]	; (801b3fc <dhcp_option+0x5c>)
 801b3c6:	f240 529a 	movw	r2, #1434	; 0x59a
 801b3ca:	490d      	ldr	r1, [pc, #52]	; (801b400 <dhcp_option+0x60>)
 801b3cc:	480d      	ldr	r0, [pc, #52]	; (801b404 <dhcp_option+0x64>)
 801b3ce:	f004 f919 	bl	801f604 <iprintf>
  options[options_out_len++] = option_type;
 801b3d2:	88fb      	ldrh	r3, [r7, #6]
 801b3d4:	1c5a      	adds	r2, r3, #1
 801b3d6:	80fa      	strh	r2, [r7, #6]
 801b3d8:	461a      	mov	r2, r3
 801b3da:	683b      	ldr	r3, [r7, #0]
 801b3dc:	4413      	add	r3, r2
 801b3de:	797a      	ldrb	r2, [r7, #5]
 801b3e0:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 801b3e2:	88fb      	ldrh	r3, [r7, #6]
 801b3e4:	1c5a      	adds	r2, r3, #1
 801b3e6:	80fa      	strh	r2, [r7, #6]
 801b3e8:	461a      	mov	r2, r3
 801b3ea:	683b      	ldr	r3, [r7, #0]
 801b3ec:	4413      	add	r3, r2
 801b3ee:	793a      	ldrb	r2, [r7, #4]
 801b3f0:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801b3f2:	88fb      	ldrh	r3, [r7, #6]
}
 801b3f4:	4618      	mov	r0, r3
 801b3f6:	3708      	adds	r7, #8
 801b3f8:	46bd      	mov	sp, r7
 801b3fa:	bd80      	pop	{r7, pc}
 801b3fc:	0802657c 	.word	0x0802657c
 801b400:	08026710 	.word	0x08026710
 801b404:	080265dc 	.word	0x080265dc

0801b408 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 801b408:	b580      	push	{r7, lr}
 801b40a:	b082      	sub	sp, #8
 801b40c:	af00      	add	r7, sp, #0
 801b40e:	4603      	mov	r3, r0
 801b410:	6039      	str	r1, [r7, #0]
 801b412:	80fb      	strh	r3, [r7, #6]
 801b414:	4613      	mov	r3, r2
 801b416:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 801b418:	88fb      	ldrh	r3, [r7, #6]
 801b41a:	2b43      	cmp	r3, #67	; 0x43
 801b41c:	d906      	bls.n	801b42c <dhcp_option_byte+0x24>
 801b41e:	4b0a      	ldr	r3, [pc, #40]	; (801b448 <dhcp_option_byte+0x40>)
 801b420:	f240 52a6 	movw	r2, #1446	; 0x5a6
 801b424:	4909      	ldr	r1, [pc, #36]	; (801b44c <dhcp_option_byte+0x44>)
 801b426:	480a      	ldr	r0, [pc, #40]	; (801b450 <dhcp_option_byte+0x48>)
 801b428:	f004 f8ec 	bl	801f604 <iprintf>
  options[options_out_len++] = value;
 801b42c:	88fb      	ldrh	r3, [r7, #6]
 801b42e:	1c5a      	adds	r2, r3, #1
 801b430:	80fa      	strh	r2, [r7, #6]
 801b432:	461a      	mov	r2, r3
 801b434:	683b      	ldr	r3, [r7, #0]
 801b436:	4413      	add	r3, r2
 801b438:	797a      	ldrb	r2, [r7, #5]
 801b43a:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801b43c:	88fb      	ldrh	r3, [r7, #6]
}
 801b43e:	4618      	mov	r0, r3
 801b440:	3708      	adds	r7, #8
 801b442:	46bd      	mov	sp, r7
 801b444:	bd80      	pop	{r7, pc}
 801b446:	bf00      	nop
 801b448:	0802657c 	.word	0x0802657c
 801b44c:	08026754 	.word	0x08026754
 801b450:	080265dc 	.word	0x080265dc

0801b454 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 801b454:	b580      	push	{r7, lr}
 801b456:	b082      	sub	sp, #8
 801b458:	af00      	add	r7, sp, #0
 801b45a:	4603      	mov	r3, r0
 801b45c:	6039      	str	r1, [r7, #0]
 801b45e:	80fb      	strh	r3, [r7, #6]
 801b460:	4613      	mov	r3, r2
 801b462:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 801b464:	88fb      	ldrh	r3, [r7, #6]
 801b466:	3302      	adds	r3, #2
 801b468:	2b44      	cmp	r3, #68	; 0x44
 801b46a:	d906      	bls.n	801b47a <dhcp_option_short+0x26>
 801b46c:	4b0f      	ldr	r3, [pc, #60]	; (801b4ac <dhcp_option_short+0x58>)
 801b46e:	f240 52ae 	movw	r2, #1454	; 0x5ae
 801b472:	490f      	ldr	r1, [pc, #60]	; (801b4b0 <dhcp_option_short+0x5c>)
 801b474:	480f      	ldr	r0, [pc, #60]	; (801b4b4 <dhcp_option_short+0x60>)
 801b476:	f004 f8c5 	bl	801f604 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 801b47a:	88bb      	ldrh	r3, [r7, #4]
 801b47c:	0a1b      	lsrs	r3, r3, #8
 801b47e:	b29a      	uxth	r2, r3
 801b480:	88fb      	ldrh	r3, [r7, #6]
 801b482:	1c59      	adds	r1, r3, #1
 801b484:	80f9      	strh	r1, [r7, #6]
 801b486:	4619      	mov	r1, r3
 801b488:	683b      	ldr	r3, [r7, #0]
 801b48a:	440b      	add	r3, r1
 801b48c:	b2d2      	uxtb	r2, r2
 801b48e:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 801b490:	88fb      	ldrh	r3, [r7, #6]
 801b492:	1c5a      	adds	r2, r3, #1
 801b494:	80fa      	strh	r2, [r7, #6]
 801b496:	461a      	mov	r2, r3
 801b498:	683b      	ldr	r3, [r7, #0]
 801b49a:	4413      	add	r3, r2
 801b49c:	88ba      	ldrh	r2, [r7, #4]
 801b49e:	b2d2      	uxtb	r2, r2
 801b4a0:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801b4a2:	88fb      	ldrh	r3, [r7, #6]
}
 801b4a4:	4618      	mov	r0, r3
 801b4a6:	3708      	adds	r7, #8
 801b4a8:	46bd      	mov	sp, r7
 801b4aa:	bd80      	pop	{r7, pc}
 801b4ac:	0802657c 	.word	0x0802657c
 801b4b0:	0802678c 	.word	0x0802678c
 801b4b4:	080265dc 	.word	0x080265dc

0801b4b8 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 801b4b8:	b580      	push	{r7, lr}
 801b4ba:	b084      	sub	sp, #16
 801b4bc:	af00      	add	r7, sp, #0
 801b4be:	4603      	mov	r3, r0
 801b4c0:	60b9      	str	r1, [r7, #8]
 801b4c2:	607a      	str	r2, [r7, #4]
 801b4c4:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 801b4c6:	89fb      	ldrh	r3, [r7, #14]
 801b4c8:	3304      	adds	r3, #4
 801b4ca:	2b44      	cmp	r3, #68	; 0x44
 801b4cc:	d906      	bls.n	801b4dc <dhcp_option_long+0x24>
 801b4ce:	4b19      	ldr	r3, [pc, #100]	; (801b534 <dhcp_option_long+0x7c>)
 801b4d0:	f240 52b7 	movw	r2, #1463	; 0x5b7
 801b4d4:	4918      	ldr	r1, [pc, #96]	; (801b538 <dhcp_option_long+0x80>)
 801b4d6:	4819      	ldr	r0, [pc, #100]	; (801b53c <dhcp_option_long+0x84>)
 801b4d8:	f004 f894 	bl	801f604 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 801b4dc:	687b      	ldr	r3, [r7, #4]
 801b4de:	0e1a      	lsrs	r2, r3, #24
 801b4e0:	89fb      	ldrh	r3, [r7, #14]
 801b4e2:	1c59      	adds	r1, r3, #1
 801b4e4:	81f9      	strh	r1, [r7, #14]
 801b4e6:	4619      	mov	r1, r3
 801b4e8:	68bb      	ldr	r3, [r7, #8]
 801b4ea:	440b      	add	r3, r1
 801b4ec:	b2d2      	uxtb	r2, r2
 801b4ee:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 801b4f0:	687b      	ldr	r3, [r7, #4]
 801b4f2:	0c1a      	lsrs	r2, r3, #16
 801b4f4:	89fb      	ldrh	r3, [r7, #14]
 801b4f6:	1c59      	adds	r1, r3, #1
 801b4f8:	81f9      	strh	r1, [r7, #14]
 801b4fa:	4619      	mov	r1, r3
 801b4fc:	68bb      	ldr	r3, [r7, #8]
 801b4fe:	440b      	add	r3, r1
 801b500:	b2d2      	uxtb	r2, r2
 801b502:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 801b504:	687b      	ldr	r3, [r7, #4]
 801b506:	0a1a      	lsrs	r2, r3, #8
 801b508:	89fb      	ldrh	r3, [r7, #14]
 801b50a:	1c59      	adds	r1, r3, #1
 801b50c:	81f9      	strh	r1, [r7, #14]
 801b50e:	4619      	mov	r1, r3
 801b510:	68bb      	ldr	r3, [r7, #8]
 801b512:	440b      	add	r3, r1
 801b514:	b2d2      	uxtb	r2, r2
 801b516:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 801b518:	89fb      	ldrh	r3, [r7, #14]
 801b51a:	1c5a      	adds	r2, r3, #1
 801b51c:	81fa      	strh	r2, [r7, #14]
 801b51e:	461a      	mov	r2, r3
 801b520:	68bb      	ldr	r3, [r7, #8]
 801b522:	4413      	add	r3, r2
 801b524:	687a      	ldr	r2, [r7, #4]
 801b526:	b2d2      	uxtb	r2, r2
 801b528:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801b52a:	89fb      	ldrh	r3, [r7, #14]
}
 801b52c:	4618      	mov	r0, r3
 801b52e:	3710      	adds	r7, #16
 801b530:	46bd      	mov	sp, r7
 801b532:	bd80      	pop	{r7, pc}
 801b534:	0802657c 	.word	0x0802657c
 801b538:	080267c8 	.word	0x080267c8
 801b53c:	080265dc 	.word	0x080265dc

0801b540 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 801b540:	b580      	push	{r7, lr}
 801b542:	b090      	sub	sp, #64	; 0x40
 801b544:	af00      	add	r7, sp, #0
 801b546:	6078      	str	r0, [r7, #4]
 801b548:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 801b54a:	2300      	movs	r3, #0
 801b54c:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 801b54e:	2300      	movs	r3, #0
 801b550:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 801b552:	2208      	movs	r2, #8
 801b554:	2100      	movs	r1, #0
 801b556:	48be      	ldr	r0, [pc, #760]	; (801b850 <dhcp_parse_reply+0x310>)
 801b558:	f003 fa06 	bl	801e968 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 801b55c:	687b      	ldr	r3, [r7, #4]
 801b55e:	895b      	ldrh	r3, [r3, #10]
 801b560:	2b2b      	cmp	r3, #43	; 0x2b
 801b562:	d802      	bhi.n	801b56a <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 801b564:	f06f 0301 	mvn.w	r3, #1
 801b568:	e2a8      	b.n	801babc <dhcp_parse_reply+0x57c>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 801b56a:	687b      	ldr	r3, [r7, #4]
 801b56c:	685b      	ldr	r3, [r3, #4]
 801b56e:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 801b570:	23f0      	movs	r3, #240	; 0xf0
 801b572:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 801b574:	687b      	ldr	r3, [r7, #4]
 801b576:	891b      	ldrh	r3, [r3, #8]
 801b578:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 801b57a:	687b      	ldr	r3, [r7, #4]
 801b57c:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 801b57e:	e00c      	b.n	801b59a <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 801b580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b582:	895b      	ldrh	r3, [r3, #10]
 801b584:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801b586:	1ad3      	subs	r3, r2, r3
 801b588:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 801b58a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b58c:	895b      	ldrh	r3, [r3, #10]
 801b58e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 801b590:	1ad3      	subs	r3, r2, r3
 801b592:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 801b594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b596:	681b      	ldr	r3, [r3, #0]
 801b598:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 801b59a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b59c:	2b00      	cmp	r3, #0
 801b59e:	d004      	beq.n	801b5aa <dhcp_parse_reply+0x6a>
 801b5a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b5a2:	895b      	ldrh	r3, [r3, #10]
 801b5a4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801b5a6:	429a      	cmp	r2, r3
 801b5a8:	d2ea      	bcs.n	801b580 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 801b5aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b5ac:	2b00      	cmp	r3, #0
 801b5ae:	d102      	bne.n	801b5b6 <dhcp_parse_reply+0x76>
    return ERR_BUF;
 801b5b0:	f06f 0301 	mvn.w	r3, #1
 801b5b4:	e282      	b.n	801babc <dhcp_parse_reply+0x57c>
  }
  offset = options_idx;
 801b5b6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801b5b8:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 801b5ba:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801b5bc:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 801b5be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b5c0:	685b      	ldr	r3, [r3, #4]
 801b5c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 801b5c4:	e23a      	b.n	801ba3c <dhcp_parse_reply+0x4fc>
    u8_t op = options[offset];
 801b5c6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801b5c8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801b5ca:	4413      	add	r3, r2
 801b5cc:	781b      	ldrb	r3, [r3, #0]
 801b5ce:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 801b5d0:	2300      	movs	r3, #0
 801b5d2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 801b5d6:	f04f 33ff 	mov.w	r3, #4294967295
 801b5da:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 801b5dc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801b5de:	3302      	adds	r3, #2
 801b5e0:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 801b5e2:	8bfa      	ldrh	r2, [r7, #30]
 801b5e4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801b5e6:	429a      	cmp	r2, r3
 801b5e8:	d202      	bcs.n	801b5f0 <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 801b5ea:	f06f 0301 	mvn.w	r3, #1
 801b5ee:	e265      	b.n	801babc <dhcp_parse_reply+0x57c>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 801b5f0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801b5f2:	3301      	adds	r3, #1
 801b5f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801b5f6:	8952      	ldrh	r2, [r2, #10]
 801b5f8:	4293      	cmp	r3, r2
 801b5fa:	da07      	bge.n	801b60c <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 801b5fc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801b5fe:	3301      	adds	r3, #1
 801b600:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801b602:	4413      	add	r3, r2
 801b604:	781b      	ldrb	r3, [r3, #0]
 801b606:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801b60a:	e00b      	b.n	801b624 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 801b60c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b60e:	681b      	ldr	r3, [r3, #0]
 801b610:	2b00      	cmp	r3, #0
 801b612:	d004      	beq.n	801b61e <dhcp_parse_reply+0xde>
 801b614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b616:	681b      	ldr	r3, [r3, #0]
 801b618:	685b      	ldr	r3, [r3, #4]
 801b61a:	781b      	ldrb	r3, [r3, #0]
 801b61c:	e000      	b.n	801b620 <dhcp_parse_reply+0xe0>
 801b61e:	2300      	movs	r3, #0
 801b620:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 801b624:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b628:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 801b62c:	7dfb      	ldrb	r3, [r7, #23]
 801b62e:	2b3b      	cmp	r3, #59	; 0x3b
 801b630:	f200 812d 	bhi.w	801b88e <dhcp_parse_reply+0x34e>
 801b634:	a201      	add	r2, pc, #4	; (adr r2, 801b63c <dhcp_parse_reply+0xfc>)
 801b636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b63a:	bf00      	nop
 801b63c:	0801b72d 	.word	0x0801b72d
 801b640:	0801b73d 	.word	0x0801b73d
 801b644:	0801b88f 	.word	0x0801b88f
 801b648:	0801b75f 	.word	0x0801b75f
 801b64c:	0801b88f 	.word	0x0801b88f
 801b650:	0801b88f 	.word	0x0801b88f
 801b654:	0801b88f 	.word	0x0801b88f
 801b658:	0801b88f 	.word	0x0801b88f
 801b65c:	0801b88f 	.word	0x0801b88f
 801b660:	0801b88f 	.word	0x0801b88f
 801b664:	0801b88f 	.word	0x0801b88f
 801b668:	0801b88f 	.word	0x0801b88f
 801b66c:	0801b88f 	.word	0x0801b88f
 801b670:	0801b88f 	.word	0x0801b88f
 801b674:	0801b88f 	.word	0x0801b88f
 801b678:	0801b88f 	.word	0x0801b88f
 801b67c:	0801b88f 	.word	0x0801b88f
 801b680:	0801b88f 	.word	0x0801b88f
 801b684:	0801b88f 	.word	0x0801b88f
 801b688:	0801b88f 	.word	0x0801b88f
 801b68c:	0801b88f 	.word	0x0801b88f
 801b690:	0801b88f 	.word	0x0801b88f
 801b694:	0801b88f 	.word	0x0801b88f
 801b698:	0801b88f 	.word	0x0801b88f
 801b69c:	0801b88f 	.word	0x0801b88f
 801b6a0:	0801b88f 	.word	0x0801b88f
 801b6a4:	0801b88f 	.word	0x0801b88f
 801b6a8:	0801b88f 	.word	0x0801b88f
 801b6ac:	0801b88f 	.word	0x0801b88f
 801b6b0:	0801b88f 	.word	0x0801b88f
 801b6b4:	0801b88f 	.word	0x0801b88f
 801b6b8:	0801b88f 	.word	0x0801b88f
 801b6bc:	0801b88f 	.word	0x0801b88f
 801b6c0:	0801b88f 	.word	0x0801b88f
 801b6c4:	0801b88f 	.word	0x0801b88f
 801b6c8:	0801b88f 	.word	0x0801b88f
 801b6cc:	0801b88f 	.word	0x0801b88f
 801b6d0:	0801b88f 	.word	0x0801b88f
 801b6d4:	0801b88f 	.word	0x0801b88f
 801b6d8:	0801b88f 	.word	0x0801b88f
 801b6dc:	0801b88f 	.word	0x0801b88f
 801b6e0:	0801b88f 	.word	0x0801b88f
 801b6e4:	0801b88f 	.word	0x0801b88f
 801b6e8:	0801b88f 	.word	0x0801b88f
 801b6ec:	0801b88f 	.word	0x0801b88f
 801b6f0:	0801b88f 	.word	0x0801b88f
 801b6f4:	0801b88f 	.word	0x0801b88f
 801b6f8:	0801b88f 	.word	0x0801b88f
 801b6fc:	0801b88f 	.word	0x0801b88f
 801b700:	0801b88f 	.word	0x0801b88f
 801b704:	0801b88f 	.word	0x0801b88f
 801b708:	0801b78b 	.word	0x0801b78b
 801b70c:	0801b7ad 	.word	0x0801b7ad
 801b710:	0801b7e9 	.word	0x0801b7e9
 801b714:	0801b80b 	.word	0x0801b80b
 801b718:	0801b88f 	.word	0x0801b88f
 801b71c:	0801b88f 	.word	0x0801b88f
 801b720:	0801b88f 	.word	0x0801b88f
 801b724:	0801b82d 	.word	0x0801b82d
 801b728:	0801b86d 	.word	0x0801b86d
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 801b72c:	2300      	movs	r3, #0
 801b72e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801b732:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b736:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 801b73a:	e0ac      	b.n	801b896 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801b73c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b740:	2b04      	cmp	r3, #4
 801b742:	d009      	beq.n	801b758 <dhcp_parse_reply+0x218>
 801b744:	4b43      	ldr	r3, [pc, #268]	; (801b854 <dhcp_parse_reply+0x314>)
 801b746:	f240 622e 	movw	r2, #1582	; 0x62e
 801b74a:	4943      	ldr	r1, [pc, #268]	; (801b858 <dhcp_parse_reply+0x318>)
 801b74c:	4843      	ldr	r0, [pc, #268]	; (801b85c <dhcp_parse_reply+0x31c>)
 801b74e:	f003 ff59 	bl	801f604 <iprintf>
 801b752:	f06f 0305 	mvn.w	r3, #5
 801b756:	e1b1      	b.n	801babc <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 801b758:	2306      	movs	r3, #6
 801b75a:	623b      	str	r3, [r7, #32]
        break;
 801b75c:	e09b      	b.n	801b896 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 801b75e:	2304      	movs	r3, #4
 801b760:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 801b764:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801b768:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801b76c:	429a      	cmp	r2, r3
 801b76e:	d209      	bcs.n	801b784 <dhcp_parse_reply+0x244>
 801b770:	4b38      	ldr	r3, [pc, #224]	; (801b854 <dhcp_parse_reply+0x314>)
 801b772:	f240 6233 	movw	r2, #1587	; 0x633
 801b776:	493a      	ldr	r1, [pc, #232]	; (801b860 <dhcp_parse_reply+0x320>)
 801b778:	4838      	ldr	r0, [pc, #224]	; (801b85c <dhcp_parse_reply+0x31c>)
 801b77a:	f003 ff43 	bl	801f604 <iprintf>
 801b77e:	f06f 0305 	mvn.w	r3, #5
 801b782:	e19b      	b.n	801babc <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 801b784:	2307      	movs	r3, #7
 801b786:	623b      	str	r3, [r7, #32]
        break;
 801b788:	e085      	b.n	801b896 <dhcp_parse_reply+0x356>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801b78a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b78e:	2b04      	cmp	r3, #4
 801b790:	d009      	beq.n	801b7a6 <dhcp_parse_reply+0x266>
 801b792:	4b30      	ldr	r3, [pc, #192]	; (801b854 <dhcp_parse_reply+0x314>)
 801b794:	f240 6241 	movw	r2, #1601	; 0x641
 801b798:	492f      	ldr	r1, [pc, #188]	; (801b858 <dhcp_parse_reply+0x318>)
 801b79a:	4830      	ldr	r0, [pc, #192]	; (801b85c <dhcp_parse_reply+0x31c>)
 801b79c:	f003 ff32 	bl	801f604 <iprintf>
 801b7a0:	f06f 0305 	mvn.w	r3, #5
 801b7a4:	e18a      	b.n	801babc <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 801b7a6:	2303      	movs	r3, #3
 801b7a8:	623b      	str	r3, [r7, #32]
        break;
 801b7aa:	e074      	b.n	801b896 <dhcp_parse_reply+0x356>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 801b7ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b7b0:	2b01      	cmp	r3, #1
 801b7b2:	d009      	beq.n	801b7c8 <dhcp_parse_reply+0x288>
 801b7b4:	4b27      	ldr	r3, [pc, #156]	; (801b854 <dhcp_parse_reply+0x314>)
 801b7b6:	f240 624f 	movw	r2, #1615	; 0x64f
 801b7ba:	492a      	ldr	r1, [pc, #168]	; (801b864 <dhcp_parse_reply+0x324>)
 801b7bc:	4827      	ldr	r0, [pc, #156]	; (801b85c <dhcp_parse_reply+0x31c>)
 801b7be:	f003 ff21 	bl	801f604 <iprintf>
 801b7c2:	f06f 0305 	mvn.w	r3, #5
 801b7c6:	e179      	b.n	801babc <dhcp_parse_reply+0x57c>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 801b7c8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801b7ca:	2bf0      	cmp	r3, #240	; 0xf0
 801b7cc:	d009      	beq.n	801b7e2 <dhcp_parse_reply+0x2a2>
 801b7ce:	4b21      	ldr	r3, [pc, #132]	; (801b854 <dhcp_parse_reply+0x314>)
 801b7d0:	f240 6251 	movw	r2, #1617	; 0x651
 801b7d4:	4924      	ldr	r1, [pc, #144]	; (801b868 <dhcp_parse_reply+0x328>)
 801b7d6:	4821      	ldr	r0, [pc, #132]	; (801b85c <dhcp_parse_reply+0x31c>)
 801b7d8:	f003 ff14 	bl	801f604 <iprintf>
 801b7dc:	f06f 0305 	mvn.w	r3, #5
 801b7e0:	e16c      	b.n	801babc <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 801b7e2:	2300      	movs	r3, #0
 801b7e4:	623b      	str	r3, [r7, #32]
        break;
 801b7e6:	e056      	b.n	801b896 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 801b7e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b7ec:	2b01      	cmp	r3, #1
 801b7ee:	d009      	beq.n	801b804 <dhcp_parse_reply+0x2c4>
 801b7f0:	4b18      	ldr	r3, [pc, #96]	; (801b854 <dhcp_parse_reply+0x314>)
 801b7f2:	f240 6255 	movw	r2, #1621	; 0x655
 801b7f6:	491b      	ldr	r1, [pc, #108]	; (801b864 <dhcp_parse_reply+0x324>)
 801b7f8:	4818      	ldr	r0, [pc, #96]	; (801b85c <dhcp_parse_reply+0x31c>)
 801b7fa:	f003 ff03 	bl	801f604 <iprintf>
 801b7fe:	f06f 0305 	mvn.w	r3, #5
 801b802:	e15b      	b.n	801babc <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 801b804:	2301      	movs	r3, #1
 801b806:	623b      	str	r3, [r7, #32]
        break;
 801b808:	e045      	b.n	801b896 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801b80a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b80e:	2b04      	cmp	r3, #4
 801b810:	d009      	beq.n	801b826 <dhcp_parse_reply+0x2e6>
 801b812:	4b10      	ldr	r3, [pc, #64]	; (801b854 <dhcp_parse_reply+0x314>)
 801b814:	f240 6259 	movw	r2, #1625	; 0x659
 801b818:	490f      	ldr	r1, [pc, #60]	; (801b858 <dhcp_parse_reply+0x318>)
 801b81a:	4810      	ldr	r0, [pc, #64]	; (801b85c <dhcp_parse_reply+0x31c>)
 801b81c:	f003 fef2 	bl	801f604 <iprintf>
 801b820:	f06f 0305 	mvn.w	r3, #5
 801b824:	e14a      	b.n	801babc <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 801b826:	2302      	movs	r3, #2
 801b828:	623b      	str	r3, [r7, #32]
        break;
 801b82a:	e034      	b.n	801b896 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801b82c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b830:	2b04      	cmp	r3, #4
 801b832:	d009      	beq.n	801b848 <dhcp_parse_reply+0x308>
 801b834:	4b07      	ldr	r3, [pc, #28]	; (801b854 <dhcp_parse_reply+0x314>)
 801b836:	f240 625d 	movw	r2, #1629	; 0x65d
 801b83a:	4907      	ldr	r1, [pc, #28]	; (801b858 <dhcp_parse_reply+0x318>)
 801b83c:	4807      	ldr	r0, [pc, #28]	; (801b85c <dhcp_parse_reply+0x31c>)
 801b83e:	f003 fee1 	bl	801f604 <iprintf>
 801b842:	f06f 0305 	mvn.w	r3, #5
 801b846:	e139      	b.n	801babc <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_T1;
 801b848:	2304      	movs	r3, #4
 801b84a:	623b      	str	r3, [r7, #32]
        break;
 801b84c:	e023      	b.n	801b896 <dhcp_parse_reply+0x356>
 801b84e:	bf00      	nop
 801b850:	24007f58 	.word	0x24007f58
 801b854:	0802657c 	.word	0x0802657c
 801b858:	08026804 	.word	0x08026804
 801b85c:	080265dc 	.word	0x080265dc
 801b860:	08026810 	.word	0x08026810
 801b864:	08026824 	.word	0x08026824
 801b868:	08026830 	.word	0x08026830
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801b86c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b870:	2b04      	cmp	r3, #4
 801b872:	d009      	beq.n	801b888 <dhcp_parse_reply+0x348>
 801b874:	4b93      	ldr	r3, [pc, #588]	; (801bac4 <dhcp_parse_reply+0x584>)
 801b876:	f240 6261 	movw	r2, #1633	; 0x661
 801b87a:	4993      	ldr	r1, [pc, #588]	; (801bac8 <dhcp_parse_reply+0x588>)
 801b87c:	4893      	ldr	r0, [pc, #588]	; (801bacc <dhcp_parse_reply+0x58c>)
 801b87e:	f003 fec1 	bl	801f604 <iprintf>
 801b882:	f06f 0305 	mvn.w	r3, #5
 801b886:	e119      	b.n	801babc <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_T2;
 801b888:	2305      	movs	r3, #5
 801b88a:	623b      	str	r3, [r7, #32]
        break;
 801b88c:	e003      	b.n	801b896 <dhcp_parse_reply+0x356>
      default:
        decode_len = 0;
 801b88e:	2300      	movs	r3, #0
 801b890:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 801b894:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 801b896:	7dfb      	ldrb	r3, [r7, #23]
 801b898:	2b00      	cmp	r3, #0
 801b89a:	d103      	bne.n	801b8a4 <dhcp_parse_reply+0x364>
      offset++;
 801b89c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801b89e:	3301      	adds	r3, #1
 801b8a0:	877b      	strh	r3, [r7, #58]	; 0x3a
 801b8a2:	e0a1      	b.n	801b9e8 <dhcp_parse_reply+0x4a8>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 801b8a4:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801b8a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b8aa:	4413      	add	r3, r2
 801b8ac:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 801b8b0:	4293      	cmp	r3, r2
 801b8b2:	dd02      	ble.n	801b8ba <dhcp_parse_reply+0x37a>
        /* overflow */
        return ERR_BUF;
 801b8b4:	f06f 0301 	mvn.w	r3, #1
 801b8b8:	e100      	b.n	801babc <dhcp_parse_reply+0x57c>
      }
      offset = (u16_t)(offset + len + 2);
 801b8ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b8be:	b29a      	uxth	r2, r3
 801b8c0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801b8c2:	4413      	add	r3, r2
 801b8c4:	b29b      	uxth	r3, r3
 801b8c6:	3302      	adds	r3, #2
 801b8c8:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 801b8ca:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801b8ce:	2b00      	cmp	r3, #0
 801b8d0:	f000 808a 	beq.w	801b9e8 <dhcp_parse_reply+0x4a8>
        u32_t value = 0;
 801b8d4:	2300      	movs	r3, #0
 801b8d6:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 801b8d8:	6a3b      	ldr	r3, [r7, #32]
 801b8da:	2b00      	cmp	r3, #0
 801b8dc:	db02      	blt.n	801b8e4 <dhcp_parse_reply+0x3a4>
 801b8de:	6a3b      	ldr	r3, [r7, #32]
 801b8e0:	2b07      	cmp	r3, #7
 801b8e2:	dd06      	ble.n	801b8f2 <dhcp_parse_reply+0x3b2>
 801b8e4:	4b77      	ldr	r3, [pc, #476]	; (801bac4 <dhcp_parse_reply+0x584>)
 801b8e6:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 801b8ea:	4979      	ldr	r1, [pc, #484]	; (801bad0 <dhcp_parse_reply+0x590>)
 801b8ec:	4877      	ldr	r0, [pc, #476]	; (801bacc <dhcp_parse_reply+0x58c>)
 801b8ee:	f003 fe89 	bl	801f604 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 801b8f2:	4a78      	ldr	r2, [pc, #480]	; (801bad4 <dhcp_parse_reply+0x594>)
 801b8f4:	6a3b      	ldr	r3, [r7, #32]
 801b8f6:	4413      	add	r3, r2
 801b8f8:	781b      	ldrb	r3, [r3, #0]
 801b8fa:	2b00      	cmp	r3, #0
 801b8fc:	d174      	bne.n	801b9e8 <dhcp_parse_reply+0x4a8>
          copy_len = LWIP_MIN(decode_len, 4);
 801b8fe:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801b902:	2b04      	cmp	r3, #4
 801b904:	bf28      	it	cs
 801b906:	2304      	movcs	r3, #4
 801b908:	b2db      	uxtb	r3, r3
 801b90a:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 801b90c:	8bfb      	ldrh	r3, [r7, #30]
 801b90e:	8aba      	ldrh	r2, [r7, #20]
 801b910:	f107 0108 	add.w	r1, r7, #8
 801b914:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801b916:	f7f7 fc53 	bl	80131c0 <pbuf_copy_partial>
 801b91a:	4603      	mov	r3, r0
 801b91c:	461a      	mov	r2, r3
 801b91e:	8abb      	ldrh	r3, [r7, #20]
 801b920:	4293      	cmp	r3, r2
 801b922:	d002      	beq.n	801b92a <dhcp_parse_reply+0x3ea>
            return ERR_BUF;
 801b924:	f06f 0301 	mvn.w	r3, #1
 801b928:	e0c8      	b.n	801babc <dhcp_parse_reply+0x57c>
          }
          if (decode_len > 4) {
 801b92a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801b92e:	2b04      	cmp	r3, #4
 801b930:	d933      	bls.n	801b99a <dhcp_parse_reply+0x45a>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 801b932:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801b936:	f003 0303 	and.w	r3, r3, #3
 801b93a:	b2db      	uxtb	r3, r3
 801b93c:	2b00      	cmp	r3, #0
 801b93e:	d009      	beq.n	801b954 <dhcp_parse_reply+0x414>
 801b940:	4b60      	ldr	r3, [pc, #384]	; (801bac4 <dhcp_parse_reply+0x584>)
 801b942:	f240 6281 	movw	r2, #1665	; 0x681
 801b946:	4964      	ldr	r1, [pc, #400]	; (801bad8 <dhcp_parse_reply+0x598>)
 801b948:	4860      	ldr	r0, [pc, #384]	; (801bacc <dhcp_parse_reply+0x58c>)
 801b94a:	f003 fe5b 	bl	801f604 <iprintf>
 801b94e:	f06f 0305 	mvn.w	r3, #5
 801b952:	e0b3      	b.n	801babc <dhcp_parse_reply+0x57c>
            dhcp_got_option(dhcp, decode_idx);
 801b954:	4a5f      	ldr	r2, [pc, #380]	; (801bad4 <dhcp_parse_reply+0x594>)
 801b956:	6a3b      	ldr	r3, [r7, #32]
 801b958:	4413      	add	r3, r2
 801b95a:	2201      	movs	r2, #1
 801b95c:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 801b95e:	68bb      	ldr	r3, [r7, #8]
 801b960:	4618      	mov	r0, r3
 801b962:	f7f5 fd54 	bl	801140e <lwip_htonl>
 801b966:	4602      	mov	r2, r0
 801b968:	495c      	ldr	r1, [pc, #368]	; (801badc <dhcp_parse_reply+0x59c>)
 801b96a:	6a3b      	ldr	r3, [r7, #32]
 801b96c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 801b970:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801b974:	3b04      	subs	r3, #4
 801b976:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 801b97a:	8bfb      	ldrh	r3, [r7, #30]
 801b97c:	3304      	adds	r3, #4
 801b97e:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 801b980:	8a7a      	ldrh	r2, [r7, #18]
 801b982:	8bfb      	ldrh	r3, [r7, #30]
 801b984:	429a      	cmp	r2, r3
 801b986:	d202      	bcs.n	801b98e <dhcp_parse_reply+0x44e>
              /* overflow */
              return ERR_BUF;
 801b988:	f06f 0301 	mvn.w	r3, #1
 801b98c:	e096      	b.n	801babc <dhcp_parse_reply+0x57c>
            }
            val_offset = next_val_offset;
 801b98e:	8a7b      	ldrh	r3, [r7, #18]
 801b990:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 801b992:	6a3b      	ldr	r3, [r7, #32]
 801b994:	3301      	adds	r3, #1
 801b996:	623b      	str	r3, [r7, #32]
            goto decode_next;
 801b998:	e79e      	b.n	801b8d8 <dhcp_parse_reply+0x398>
          } else if (decode_len == 4) {
 801b99a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801b99e:	2b04      	cmp	r3, #4
 801b9a0:	d106      	bne.n	801b9b0 <dhcp_parse_reply+0x470>
            value = lwip_ntohl(value);
 801b9a2:	68bb      	ldr	r3, [r7, #8]
 801b9a4:	4618      	mov	r0, r3
 801b9a6:	f7f5 fd32 	bl	801140e <lwip_htonl>
 801b9aa:	4603      	mov	r3, r0
 801b9ac:	60bb      	str	r3, [r7, #8]
 801b9ae:	e011      	b.n	801b9d4 <dhcp_parse_reply+0x494>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 801b9b0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801b9b4:	2b01      	cmp	r3, #1
 801b9b6:	d009      	beq.n	801b9cc <dhcp_parse_reply+0x48c>
 801b9b8:	4b42      	ldr	r3, [pc, #264]	; (801bac4 <dhcp_parse_reply+0x584>)
 801b9ba:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 801b9be:	4948      	ldr	r1, [pc, #288]	; (801bae0 <dhcp_parse_reply+0x5a0>)
 801b9c0:	4842      	ldr	r0, [pc, #264]	; (801bacc <dhcp_parse_reply+0x58c>)
 801b9c2:	f003 fe1f 	bl	801f604 <iprintf>
 801b9c6:	f06f 0305 	mvn.w	r3, #5
 801b9ca:	e077      	b.n	801babc <dhcp_parse_reply+0x57c>
            value = ((u8_t *)&value)[0];
 801b9cc:	f107 0308 	add.w	r3, r7, #8
 801b9d0:	781b      	ldrb	r3, [r3, #0]
 801b9d2:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 801b9d4:	4a3f      	ldr	r2, [pc, #252]	; (801bad4 <dhcp_parse_reply+0x594>)
 801b9d6:	6a3b      	ldr	r3, [r7, #32]
 801b9d8:	4413      	add	r3, r2
 801b9da:	2201      	movs	r2, #1
 801b9dc:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 801b9de:	68ba      	ldr	r2, [r7, #8]
 801b9e0:	493e      	ldr	r1, [pc, #248]	; (801badc <dhcp_parse_reply+0x59c>)
 801b9e2:	6a3b      	ldr	r3, [r7, #32]
 801b9e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 801b9e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b9ea:	895b      	ldrh	r3, [r3, #10]
 801b9ec:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801b9ee:	429a      	cmp	r2, r3
 801b9f0:	d324      	bcc.n	801ba3c <dhcp_parse_reply+0x4fc>
      offset = (u16_t)(offset - q->len);
 801b9f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b9f4:	895b      	ldrh	r3, [r3, #10]
 801b9f6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801b9f8:	1ad3      	subs	r3, r2, r3
 801b9fa:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 801b9fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b9fe:	895b      	ldrh	r3, [r3, #10]
 801ba00:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 801ba02:	1ad3      	subs	r3, r2, r3
 801ba04:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 801ba06:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801ba08:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801ba0a:	429a      	cmp	r2, r3
 801ba0c:	d213      	bcs.n	801ba36 <dhcp_parse_reply+0x4f6>
        q = q->next;
 801ba0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ba10:	681b      	ldr	r3, [r3, #0]
 801ba12:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 801ba14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ba16:	2b00      	cmp	r3, #0
 801ba18:	d109      	bne.n	801ba2e <dhcp_parse_reply+0x4ee>
 801ba1a:	4b2a      	ldr	r3, [pc, #168]	; (801bac4 <dhcp_parse_reply+0x584>)
 801ba1c:	f240 629d 	movw	r2, #1693	; 0x69d
 801ba20:	4930      	ldr	r1, [pc, #192]	; (801bae4 <dhcp_parse_reply+0x5a4>)
 801ba22:	482a      	ldr	r0, [pc, #168]	; (801bacc <dhcp_parse_reply+0x58c>)
 801ba24:	f003 fdee 	bl	801f604 <iprintf>
 801ba28:	f06f 0305 	mvn.w	r3, #5
 801ba2c:	e046      	b.n	801babc <dhcp_parse_reply+0x57c>
        options = (u8_t *)q->payload;
 801ba2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ba30:	685b      	ldr	r3, [r3, #4]
 801ba32:	63fb      	str	r3, [r7, #60]	; 0x3c
 801ba34:	e002      	b.n	801ba3c <dhcp_parse_reply+0x4fc>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 801ba36:	f06f 0301 	mvn.w	r3, #1
 801ba3a:	e03f      	b.n	801babc <dhcp_parse_reply+0x57c>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 801ba3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ba3e:	2b00      	cmp	r3, #0
 801ba40:	d00a      	beq.n	801ba58 <dhcp_parse_reply+0x518>
 801ba42:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801ba44:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801ba46:	429a      	cmp	r2, r3
 801ba48:	d206      	bcs.n	801ba58 <dhcp_parse_reply+0x518>
 801ba4a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801ba4c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801ba4e:	4413      	add	r3, r2
 801ba50:	781b      	ldrb	r3, [r3, #0]
 801ba52:	2bff      	cmp	r3, #255	; 0xff
 801ba54:	f47f adb7 	bne.w	801b5c6 <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 801ba58:	4b1e      	ldr	r3, [pc, #120]	; (801bad4 <dhcp_parse_reply+0x594>)
 801ba5a:	781b      	ldrb	r3, [r3, #0]
 801ba5c:	2b00      	cmp	r3, #0
 801ba5e:	d018      	beq.n	801ba92 <dhcp_parse_reply+0x552>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 801ba60:	4b1e      	ldr	r3, [pc, #120]	; (801badc <dhcp_parse_reply+0x59c>)
 801ba62:	681b      	ldr	r3, [r3, #0]
 801ba64:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 801ba66:	4b1b      	ldr	r3, [pc, #108]	; (801bad4 <dhcp_parse_reply+0x594>)
 801ba68:	2200      	movs	r2, #0
 801ba6a:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 801ba6c:	68fb      	ldr	r3, [r7, #12]
 801ba6e:	2b01      	cmp	r3, #1
 801ba70:	d102      	bne.n	801ba78 <dhcp_parse_reply+0x538>
      parse_file_as_options = 1;
 801ba72:	2301      	movs	r3, #1
 801ba74:	62fb      	str	r3, [r7, #44]	; 0x2c
 801ba76:	e00c      	b.n	801ba92 <dhcp_parse_reply+0x552>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 801ba78:	68fb      	ldr	r3, [r7, #12]
 801ba7a:	2b02      	cmp	r3, #2
 801ba7c:	d102      	bne.n	801ba84 <dhcp_parse_reply+0x544>
      parse_sname_as_options = 1;
 801ba7e:	2301      	movs	r3, #1
 801ba80:	62bb      	str	r3, [r7, #40]	; 0x28
 801ba82:	e006      	b.n	801ba92 <dhcp_parse_reply+0x552>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 801ba84:	68fb      	ldr	r3, [r7, #12]
 801ba86:	2b03      	cmp	r3, #3
 801ba88:	d103      	bne.n	801ba92 <dhcp_parse_reply+0x552>
      parse_sname_as_options = 1;
 801ba8a:	2301      	movs	r3, #1
 801ba8c:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 801ba8e:	2301      	movs	r3, #1
 801ba90:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 801ba92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ba94:	2b00      	cmp	r3, #0
 801ba96:	d006      	beq.n	801baa6 <dhcp_parse_reply+0x566>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 801ba98:	2300      	movs	r3, #0
 801ba9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 801ba9c:	236c      	movs	r3, #108	; 0x6c
 801ba9e:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 801baa0:	23ec      	movs	r3, #236	; 0xec
 801baa2:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 801baa4:	e569      	b.n	801b57a <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 801baa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801baa8:	2b00      	cmp	r3, #0
 801baaa:	d006      	beq.n	801baba <dhcp_parse_reply+0x57a>
    parse_sname_as_options = 0;
 801baac:	2300      	movs	r3, #0
 801baae:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 801bab0:	232c      	movs	r3, #44	; 0x2c
 801bab2:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 801bab4:	236c      	movs	r3, #108	; 0x6c
 801bab6:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 801bab8:	e55f      	b.n	801b57a <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 801baba:	2300      	movs	r3, #0
}
 801babc:	4618      	mov	r0, r3
 801babe:	3740      	adds	r7, #64	; 0x40
 801bac0:	46bd      	mov	sp, r7
 801bac2:	bd80      	pop	{r7, pc}
 801bac4:	0802657c 	.word	0x0802657c
 801bac8:	08026804 	.word	0x08026804
 801bacc:	080265dc 	.word	0x080265dc
 801bad0:	08026848 	.word	0x08026848
 801bad4:	24007f58 	.word	0x24007f58
 801bad8:	0802685c 	.word	0x0802685c
 801badc:	24007f60 	.word	0x24007f60
 801bae0:	08026874 	.word	0x08026874
 801bae4:	08026888 	.word	0x08026888

0801bae8 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 801bae8:	b580      	push	{r7, lr}
 801baea:	b08a      	sub	sp, #40	; 0x28
 801baec:	af00      	add	r7, sp, #0
 801baee:	60f8      	str	r0, [r7, #12]
 801baf0:	60b9      	str	r1, [r7, #8]
 801baf2:	607a      	str	r2, [r7, #4]
 801baf4:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 801baf6:	4b60      	ldr	r3, [pc, #384]	; (801bc78 <dhcp_recv+0x190>)
 801baf8:	685b      	ldr	r3, [r3, #4]
 801bafa:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801bafc:	6a3b      	ldr	r3, [r7, #32]
 801bafe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bb00:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 801bb02:	687b      	ldr	r3, [r7, #4]
 801bb04:	685b      	ldr	r3, [r3, #4]
 801bb06:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 801bb08:	69fb      	ldr	r3, [r7, #28]
 801bb0a:	2b00      	cmp	r3, #0
 801bb0c:	f000 809d 	beq.w	801bc4a <dhcp_recv+0x162>
 801bb10:	69fb      	ldr	r3, [r7, #28]
 801bb12:	791b      	ldrb	r3, [r3, #4]
 801bb14:	2b00      	cmp	r3, #0
 801bb16:	f000 8098 	beq.w	801bc4a <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 801bb1a:	687b      	ldr	r3, [r7, #4]
 801bb1c:	895b      	ldrh	r3, [r3, #10]
 801bb1e:	2b2b      	cmp	r3, #43	; 0x2b
 801bb20:	f240 8095 	bls.w	801bc4e <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 801bb24:	69bb      	ldr	r3, [r7, #24]
 801bb26:	781b      	ldrb	r3, [r3, #0]
 801bb28:	2b02      	cmp	r3, #2
 801bb2a:	f040 8092 	bne.w	801bc52 <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801bb2e:	2300      	movs	r3, #0
 801bb30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801bb34:	e012      	b.n	801bb5c <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 801bb36:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801bb3a:	6a3a      	ldr	r2, [r7, #32]
 801bb3c:	4413      	add	r3, r2
 801bb3e:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 801bb42:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801bb46:	69b9      	ldr	r1, [r7, #24]
 801bb48:	440b      	add	r3, r1
 801bb4a:	7f1b      	ldrb	r3, [r3, #28]
 801bb4c:	429a      	cmp	r2, r3
 801bb4e:	f040 8082 	bne.w	801bc56 <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801bb52:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801bb56:	3301      	adds	r3, #1
 801bb58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801bb5c:	6a3b      	ldr	r3, [r7, #32]
 801bb5e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801bb62:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801bb66:	429a      	cmp	r2, r3
 801bb68:	d203      	bcs.n	801bb72 <dhcp_recv+0x8a>
 801bb6a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801bb6e:	2b05      	cmp	r3, #5
 801bb70:	d9e1      	bls.n	801bb36 <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 801bb72:	69bb      	ldr	r3, [r7, #24]
 801bb74:	685b      	ldr	r3, [r3, #4]
 801bb76:	4618      	mov	r0, r3
 801bb78:	f7f5 fc49 	bl	801140e <lwip_htonl>
 801bb7c:	4602      	mov	r2, r0
 801bb7e:	69fb      	ldr	r3, [r7, #28]
 801bb80:	681b      	ldr	r3, [r3, #0]
 801bb82:	429a      	cmp	r2, r3
 801bb84:	d169      	bne.n	801bc5a <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 801bb86:	69f9      	ldr	r1, [r7, #28]
 801bb88:	6878      	ldr	r0, [r7, #4]
 801bb8a:	f7ff fcd9 	bl	801b540 <dhcp_parse_reply>
 801bb8e:	4603      	mov	r3, r0
 801bb90:	2b00      	cmp	r3, #0
 801bb92:	d164      	bne.n	801bc5e <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 801bb94:	4b39      	ldr	r3, [pc, #228]	; (801bc7c <dhcp_recv+0x194>)
 801bb96:	785b      	ldrb	r3, [r3, #1]
 801bb98:	2b00      	cmp	r3, #0
 801bb9a:	d062      	beq.n	801bc62 <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 801bb9c:	687b      	ldr	r3, [r7, #4]
 801bb9e:	685b      	ldr	r3, [r3, #4]
 801bba0:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 801bba2:	4b37      	ldr	r3, [pc, #220]	; (801bc80 <dhcp_recv+0x198>)
 801bba4:	685b      	ldr	r3, [r3, #4]
 801bba6:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 801bba8:	7cfb      	ldrb	r3, [r7, #19]
 801bbaa:	2b05      	cmp	r3, #5
 801bbac:	d12a      	bne.n	801bc04 <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 801bbae:	69fb      	ldr	r3, [r7, #28]
 801bbb0:	795b      	ldrb	r3, [r3, #5]
 801bbb2:	2b01      	cmp	r3, #1
 801bbb4:	d112      	bne.n	801bbdc <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 801bbb6:	6979      	ldr	r1, [r7, #20]
 801bbb8:	6a38      	ldr	r0, [r7, #32]
 801bbba:	f7fe fe17 	bl	801a7ec <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 801bbbe:	6a3b      	ldr	r3, [r7, #32]
 801bbc0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801bbc4:	f003 0308 	and.w	r3, r3, #8
 801bbc8:	2b00      	cmp	r3, #0
 801bbca:	d003      	beq.n	801bbd4 <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 801bbcc:	6a38      	ldr	r0, [r7, #32]
 801bbce:	f7fe fb85 	bl	801a2dc <dhcp_check>
 801bbd2:	e049      	b.n	801bc68 <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 801bbd4:	6a38      	ldr	r0, [r7, #32]
 801bbd6:	f7ff f867 	bl	801aca8 <dhcp_bind>
 801bbda:	e045      	b.n	801bc68 <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 801bbdc:	69fb      	ldr	r3, [r7, #28]
 801bbde:	795b      	ldrb	r3, [r3, #5]
 801bbe0:	2b03      	cmp	r3, #3
 801bbe2:	d007      	beq.n	801bbf4 <dhcp_recv+0x10c>
 801bbe4:	69fb      	ldr	r3, [r7, #28]
 801bbe6:	795b      	ldrb	r3, [r3, #5]
 801bbe8:	2b04      	cmp	r3, #4
 801bbea:	d003      	beq.n	801bbf4 <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 801bbec:	69fb      	ldr	r3, [r7, #28]
 801bbee:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 801bbf0:	2b05      	cmp	r3, #5
 801bbf2:	d139      	bne.n	801bc68 <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 801bbf4:	6979      	ldr	r1, [r7, #20]
 801bbf6:	6a38      	ldr	r0, [r7, #32]
 801bbf8:	f7fe fdf8 	bl	801a7ec <dhcp_handle_ack>
      dhcp_bind(netif);
 801bbfc:	6a38      	ldr	r0, [r7, #32]
 801bbfe:	f7ff f853 	bl	801aca8 <dhcp_bind>
 801bc02:	e031      	b.n	801bc68 <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 801bc04:	7cfb      	ldrb	r3, [r7, #19]
 801bc06:	2b06      	cmp	r3, #6
 801bc08:	d113      	bne.n	801bc32 <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801bc0a:	69fb      	ldr	r3, [r7, #28]
 801bc0c:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 801bc0e:	2b03      	cmp	r3, #3
 801bc10:	d00b      	beq.n	801bc2a <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801bc12:	69fb      	ldr	r3, [r7, #28]
 801bc14:	795b      	ldrb	r3, [r3, #5]
 801bc16:	2b01      	cmp	r3, #1
 801bc18:	d007      	beq.n	801bc2a <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 801bc1a:	69fb      	ldr	r3, [r7, #28]
 801bc1c:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801bc1e:	2b04      	cmp	r3, #4
 801bc20:	d003      	beq.n	801bc2a <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 801bc22:	69fb      	ldr	r3, [r7, #28]
 801bc24:	795b      	ldrb	r3, [r3, #5]
 801bc26:	2b05      	cmp	r3, #5
 801bc28:	d103      	bne.n	801bc32 <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 801bc2a:	6a38      	ldr	r0, [r7, #32]
 801bc2c:	f7fe fb3c 	bl	801a2a8 <dhcp_handle_nak>
 801bc30:	e01a      	b.n	801bc68 <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 801bc32:	7cfb      	ldrb	r3, [r7, #19]
 801bc34:	2b02      	cmp	r3, #2
 801bc36:	d116      	bne.n	801bc66 <dhcp_recv+0x17e>
 801bc38:	69fb      	ldr	r3, [r7, #28]
 801bc3a:	795b      	ldrb	r3, [r3, #5]
 801bc3c:	2b06      	cmp	r3, #6
 801bc3e:	d112      	bne.n	801bc66 <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 801bc40:	6979      	ldr	r1, [r7, #20]
 801bc42:	6a38      	ldr	r0, [r7, #32]
 801bc44:	f7fe fb7e 	bl	801a344 <dhcp_handle_offer>
 801bc48:	e00e      	b.n	801bc68 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801bc4a:	bf00      	nop
 801bc4c:	e00c      	b.n	801bc68 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801bc4e:	bf00      	nop
 801bc50:	e00a      	b.n	801bc68 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801bc52:	bf00      	nop
 801bc54:	e008      	b.n	801bc68 <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 801bc56:	bf00      	nop
 801bc58:	e006      	b.n	801bc68 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801bc5a:	bf00      	nop
 801bc5c:	e004      	b.n	801bc68 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801bc5e:	bf00      	nop
 801bc60:	e002      	b.n	801bc68 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801bc62:	bf00      	nop
 801bc64:	e000      	b.n	801bc68 <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 801bc66:	bf00      	nop
  pbuf_free(p);
 801bc68:	6878      	ldr	r0, [r7, #4]
 801bc6a:	f7f7 f8a3 	bl	8012db4 <pbuf_free>
}
 801bc6e:	bf00      	nop
 801bc70:	3728      	adds	r7, #40	; 0x28
 801bc72:	46bd      	mov	sp, r7
 801bc74:	bd80      	pop	{r7, pc}
 801bc76:	bf00      	nop
 801bc78:	24004e5c 	.word	0x24004e5c
 801bc7c:	24007f58 	.word	0x24007f58
 801bc80:	24007f60 	.word	0x24007f60

0801bc84 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 801bc84:	b580      	push	{r7, lr}
 801bc86:	b088      	sub	sp, #32
 801bc88:	af00      	add	r7, sp, #0
 801bc8a:	60f8      	str	r0, [r7, #12]
 801bc8c:	60b9      	str	r1, [r7, #8]
 801bc8e:	603b      	str	r3, [r7, #0]
 801bc90:	4613      	mov	r3, r2
 801bc92:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 801bc94:	68fb      	ldr	r3, [r7, #12]
 801bc96:	2b00      	cmp	r3, #0
 801bc98:	d108      	bne.n	801bcac <dhcp_create_msg+0x28>
 801bc9a:	4b5f      	ldr	r3, [pc, #380]	; (801be18 <dhcp_create_msg+0x194>)
 801bc9c:	f240 7269 	movw	r2, #1897	; 0x769
 801bca0:	495e      	ldr	r1, [pc, #376]	; (801be1c <dhcp_create_msg+0x198>)
 801bca2:	485f      	ldr	r0, [pc, #380]	; (801be20 <dhcp_create_msg+0x19c>)
 801bca4:	f003 fcae 	bl	801f604 <iprintf>
 801bca8:	2300      	movs	r3, #0
 801bcaa:	e0b1      	b.n	801be10 <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 801bcac:	68bb      	ldr	r3, [r7, #8]
 801bcae:	2b00      	cmp	r3, #0
 801bcb0:	d108      	bne.n	801bcc4 <dhcp_create_msg+0x40>
 801bcb2:	4b59      	ldr	r3, [pc, #356]	; (801be18 <dhcp_create_msg+0x194>)
 801bcb4:	f240 726a 	movw	r2, #1898	; 0x76a
 801bcb8:	495a      	ldr	r1, [pc, #360]	; (801be24 <dhcp_create_msg+0x1a0>)
 801bcba:	4859      	ldr	r0, [pc, #356]	; (801be20 <dhcp_create_msg+0x19c>)
 801bcbc:	f003 fca2 	bl	801f604 <iprintf>
 801bcc0:	2300      	movs	r3, #0
 801bcc2:	e0a5      	b.n	801be10 <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 801bcc4:	f44f 7220 	mov.w	r2, #640	; 0x280
 801bcc8:	f44f 719a 	mov.w	r1, #308	; 0x134
 801bccc:	2036      	movs	r0, #54	; 0x36
 801bcce:	f7f6 fd5b 	bl	8012788 <pbuf_alloc>
 801bcd2:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 801bcd4:	69bb      	ldr	r3, [r7, #24]
 801bcd6:	2b00      	cmp	r3, #0
 801bcd8:	d101      	bne.n	801bcde <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 801bcda:	2300      	movs	r3, #0
 801bcdc:	e098      	b.n	801be10 <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 801bcde:	69bb      	ldr	r3, [r7, #24]
 801bce0:	895b      	ldrh	r3, [r3, #10]
 801bce2:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 801bce6:	d206      	bcs.n	801bcf6 <dhcp_create_msg+0x72>
 801bce8:	4b4b      	ldr	r3, [pc, #300]	; (801be18 <dhcp_create_msg+0x194>)
 801bcea:	f240 7271 	movw	r2, #1905	; 0x771
 801bcee:	494e      	ldr	r1, [pc, #312]	; (801be28 <dhcp_create_msg+0x1a4>)
 801bcf0:	484b      	ldr	r0, [pc, #300]	; (801be20 <dhcp_create_msg+0x19c>)
 801bcf2:	f003 fc87 	bl	801f604 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 801bcf6:	79fb      	ldrb	r3, [r7, #7]
 801bcf8:	2b03      	cmp	r3, #3
 801bcfa:	d103      	bne.n	801bd04 <dhcp_create_msg+0x80>
 801bcfc:	68bb      	ldr	r3, [r7, #8]
 801bcfe:	795b      	ldrb	r3, [r3, #5]
 801bd00:	2b03      	cmp	r3, #3
 801bd02:	d10d      	bne.n	801bd20 <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 801bd04:	68bb      	ldr	r3, [r7, #8]
 801bd06:	799b      	ldrb	r3, [r3, #6]
 801bd08:	2b00      	cmp	r3, #0
 801bd0a:	d105      	bne.n	801bd18 <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 801bd0c:	f003 fc92 	bl	801f634 <rand>
 801bd10:	4603      	mov	r3, r0
 801bd12:	461a      	mov	r2, r3
 801bd14:	4b45      	ldr	r3, [pc, #276]	; (801be2c <dhcp_create_msg+0x1a8>)
 801bd16:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 801bd18:	4b44      	ldr	r3, [pc, #272]	; (801be2c <dhcp_create_msg+0x1a8>)
 801bd1a:	681a      	ldr	r2, [r3, #0]
 801bd1c:	68bb      	ldr	r3, [r7, #8]
 801bd1e:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 801bd20:	69bb      	ldr	r3, [r7, #24]
 801bd22:	685b      	ldr	r3, [r3, #4]
 801bd24:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 801bd26:	f44f 729a 	mov.w	r2, #308	; 0x134
 801bd2a:	2100      	movs	r1, #0
 801bd2c:	6978      	ldr	r0, [r7, #20]
 801bd2e:	f002 fe1b 	bl	801e968 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 801bd32:	697b      	ldr	r3, [r7, #20]
 801bd34:	2201      	movs	r2, #1
 801bd36:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 801bd38:	697b      	ldr	r3, [r7, #20]
 801bd3a:	2201      	movs	r2, #1
 801bd3c:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 801bd3e:	68fb      	ldr	r3, [r7, #12]
 801bd40:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 801bd44:	697b      	ldr	r3, [r7, #20]
 801bd46:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 801bd48:	68bb      	ldr	r3, [r7, #8]
 801bd4a:	681b      	ldr	r3, [r3, #0]
 801bd4c:	4618      	mov	r0, r3
 801bd4e:	f7f5 fb5e 	bl	801140e <lwip_htonl>
 801bd52:	4602      	mov	r2, r0
 801bd54:	697b      	ldr	r3, [r7, #20]
 801bd56:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 801bd58:	79fb      	ldrb	r3, [r7, #7]
 801bd5a:	2b08      	cmp	r3, #8
 801bd5c:	d010      	beq.n	801bd80 <dhcp_create_msg+0xfc>
 801bd5e:	79fb      	ldrb	r3, [r7, #7]
 801bd60:	2b04      	cmp	r3, #4
 801bd62:	d00d      	beq.n	801bd80 <dhcp_create_msg+0xfc>
 801bd64:	79fb      	ldrb	r3, [r7, #7]
 801bd66:	2b07      	cmp	r3, #7
 801bd68:	d00a      	beq.n	801bd80 <dhcp_create_msg+0xfc>
 801bd6a:	79fb      	ldrb	r3, [r7, #7]
 801bd6c:	2b03      	cmp	r3, #3
 801bd6e:	d10c      	bne.n	801bd8a <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 801bd70:	68bb      	ldr	r3, [r7, #8]
 801bd72:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 801bd74:	2b05      	cmp	r3, #5
 801bd76:	d003      	beq.n	801bd80 <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 801bd78:	68bb      	ldr	r3, [r7, #8]
 801bd7a:	795b      	ldrb	r3, [r3, #5]
 801bd7c:	2b04      	cmp	r3, #4
 801bd7e:	d104      	bne.n	801bd8a <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 801bd80:	68fb      	ldr	r3, [r7, #12]
 801bd82:	3304      	adds	r3, #4
 801bd84:	681a      	ldr	r2, [r3, #0]
 801bd86:	697b      	ldr	r3, [r7, #20]
 801bd88:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801bd8a:	2300      	movs	r3, #0
 801bd8c:	83fb      	strh	r3, [r7, #30]
 801bd8e:	e00c      	b.n	801bdaa <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 801bd90:	8bfa      	ldrh	r2, [r7, #30]
 801bd92:	8bfb      	ldrh	r3, [r7, #30]
 801bd94:	68f9      	ldr	r1, [r7, #12]
 801bd96:	440a      	add	r2, r1
 801bd98:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 801bd9c:	697a      	ldr	r2, [r7, #20]
 801bd9e:	4413      	add	r3, r2
 801bda0:	460a      	mov	r2, r1
 801bda2:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801bda4:	8bfb      	ldrh	r3, [r7, #30]
 801bda6:	3301      	adds	r3, #1
 801bda8:	83fb      	strh	r3, [r7, #30]
 801bdaa:	8bfb      	ldrh	r3, [r7, #30]
 801bdac:	2b05      	cmp	r3, #5
 801bdae:	d9ef      	bls.n	801bd90 <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 801bdb0:	697b      	ldr	r3, [r7, #20]
 801bdb2:	2200      	movs	r2, #0
 801bdb4:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 801bdb8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 801bdbc:	2200      	movs	r2, #0
 801bdbe:	f062 027d 	orn	r2, r2, #125	; 0x7d
 801bdc2:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 801bdc6:	2200      	movs	r2, #0
 801bdc8:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 801bdcc:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 801bdd0:	2200      	movs	r2, #0
 801bdd2:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 801bdd6:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 801bdda:	697b      	ldr	r3, [r7, #20]
 801bddc:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801bde0:	2301      	movs	r3, #1
 801bde2:	2235      	movs	r2, #53	; 0x35
 801bde4:	2000      	movs	r0, #0
 801bde6:	f7ff fadb 	bl	801b3a0 <dhcp_option>
 801bdea:	4603      	mov	r3, r0
 801bdec:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 801bdee:	697b      	ldr	r3, [r7, #20]
 801bdf0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801bdf4:	79fa      	ldrb	r2, [r7, #7]
 801bdf6:	8a7b      	ldrh	r3, [r7, #18]
 801bdf8:	4618      	mov	r0, r3
 801bdfa:	f7ff fb05 	bl	801b408 <dhcp_option_byte>
 801bdfe:	4603      	mov	r3, r0
 801be00:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 801be02:	683b      	ldr	r3, [r7, #0]
 801be04:	2b00      	cmp	r3, #0
 801be06:	d002      	beq.n	801be0e <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 801be08:	683b      	ldr	r3, [r7, #0]
 801be0a:	8a7a      	ldrh	r2, [r7, #18]
 801be0c:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 801be0e:	69bb      	ldr	r3, [r7, #24]
}
 801be10:	4618      	mov	r0, r3
 801be12:	3720      	adds	r7, #32
 801be14:	46bd      	mov	sp, r7
 801be16:	bd80      	pop	{r7, pc}
 801be18:	0802657c 	.word	0x0802657c
 801be1c:	0802689c 	.word	0x0802689c
 801be20:	080265dc 	.word	0x080265dc
 801be24:	080268bc 	.word	0x080268bc
 801be28:	080268dc 	.word	0x080268dc
 801be2c:	24004588 	.word	0x24004588

0801be30 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 801be30:	b580      	push	{r7, lr}
 801be32:	b084      	sub	sp, #16
 801be34:	af00      	add	r7, sp, #0
 801be36:	4603      	mov	r3, r0
 801be38:	60b9      	str	r1, [r7, #8]
 801be3a:	607a      	str	r2, [r7, #4]
 801be3c:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 801be3e:	89fb      	ldrh	r3, [r7, #14]
 801be40:	1c5a      	adds	r2, r3, #1
 801be42:	81fa      	strh	r2, [r7, #14]
 801be44:	461a      	mov	r2, r3
 801be46:	68bb      	ldr	r3, [r7, #8]
 801be48:	4413      	add	r3, r2
 801be4a:	22ff      	movs	r2, #255	; 0xff
 801be4c:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 801be4e:	e007      	b.n	801be60 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 801be50:	89fb      	ldrh	r3, [r7, #14]
 801be52:	1c5a      	adds	r2, r3, #1
 801be54:	81fa      	strh	r2, [r7, #14]
 801be56:	461a      	mov	r2, r3
 801be58:	68bb      	ldr	r3, [r7, #8]
 801be5a:	4413      	add	r3, r2
 801be5c:	2200      	movs	r2, #0
 801be5e:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 801be60:	89fb      	ldrh	r3, [r7, #14]
 801be62:	2b43      	cmp	r3, #67	; 0x43
 801be64:	d904      	bls.n	801be70 <dhcp_option_trailer+0x40>
 801be66:	89fb      	ldrh	r3, [r7, #14]
 801be68:	f003 0303 	and.w	r3, r3, #3
 801be6c:	2b00      	cmp	r3, #0
 801be6e:	d002      	beq.n	801be76 <dhcp_option_trailer+0x46>
 801be70:	89fb      	ldrh	r3, [r7, #14]
 801be72:	2b43      	cmp	r3, #67	; 0x43
 801be74:	d9ec      	bls.n	801be50 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 801be76:	89fb      	ldrh	r3, [r7, #14]
 801be78:	33f0      	adds	r3, #240	; 0xf0
 801be7a:	b29b      	uxth	r3, r3
 801be7c:	4619      	mov	r1, r3
 801be7e:	6878      	ldr	r0, [r7, #4]
 801be80:	f7f6 fde0 	bl	8012a44 <pbuf_realloc>
}
 801be84:	bf00      	nop
 801be86:	3710      	adds	r7, #16
 801be88:	46bd      	mov	sp, r7
 801be8a:	bd80      	pop	{r7, pc}

0801be8c <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 801be8c:	b480      	push	{r7}
 801be8e:	b085      	sub	sp, #20
 801be90:	af00      	add	r7, sp, #0
 801be92:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 801be94:	687b      	ldr	r3, [r7, #4]
 801be96:	2b00      	cmp	r3, #0
 801be98:	d017      	beq.n	801beca <dhcp_supplied_address+0x3e>
 801be9a:	687b      	ldr	r3, [r7, #4]
 801be9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801be9e:	2b00      	cmp	r3, #0
 801bea0:	d013      	beq.n	801beca <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801bea2:	687b      	ldr	r3, [r7, #4]
 801bea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bea6:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 801bea8:	68fb      	ldr	r3, [r7, #12]
 801beaa:	795b      	ldrb	r3, [r3, #5]
 801beac:	2b0a      	cmp	r3, #10
 801beae:	d007      	beq.n	801bec0 <dhcp_supplied_address+0x34>
 801beb0:	68fb      	ldr	r3, [r7, #12]
 801beb2:	795b      	ldrb	r3, [r3, #5]
 801beb4:	2b05      	cmp	r3, #5
 801beb6:	d003      	beq.n	801bec0 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 801beb8:	68fb      	ldr	r3, [r7, #12]
 801beba:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 801bebc:	2b04      	cmp	r3, #4
 801bebe:	d101      	bne.n	801bec4 <dhcp_supplied_address+0x38>
 801bec0:	2301      	movs	r3, #1
 801bec2:	e000      	b.n	801bec6 <dhcp_supplied_address+0x3a>
 801bec4:	2300      	movs	r3, #0
 801bec6:	b2db      	uxtb	r3, r3
 801bec8:	e000      	b.n	801becc <dhcp_supplied_address+0x40>
  }
  return 0;
 801beca:	2300      	movs	r3, #0
}
 801becc:	4618      	mov	r0, r3
 801bece:	3714      	adds	r7, #20
 801bed0:	46bd      	mov	sp, r7
 801bed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bed6:	4770      	bx	lr

0801bed8 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 801bed8:	b580      	push	{r7, lr}
 801beda:	b082      	sub	sp, #8
 801bedc:	af00      	add	r7, sp, #0
 801bede:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 801bee0:	4915      	ldr	r1, [pc, #84]	; (801bf38 <etharp_free_entry+0x60>)
 801bee2:	687a      	ldr	r2, [r7, #4]
 801bee4:	4613      	mov	r3, r2
 801bee6:	005b      	lsls	r3, r3, #1
 801bee8:	4413      	add	r3, r2
 801beea:	00db      	lsls	r3, r3, #3
 801beec:	440b      	add	r3, r1
 801beee:	681b      	ldr	r3, [r3, #0]
 801bef0:	2b00      	cmp	r3, #0
 801bef2:	d013      	beq.n	801bf1c <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 801bef4:	4910      	ldr	r1, [pc, #64]	; (801bf38 <etharp_free_entry+0x60>)
 801bef6:	687a      	ldr	r2, [r7, #4]
 801bef8:	4613      	mov	r3, r2
 801befa:	005b      	lsls	r3, r3, #1
 801befc:	4413      	add	r3, r2
 801befe:	00db      	lsls	r3, r3, #3
 801bf00:	440b      	add	r3, r1
 801bf02:	681b      	ldr	r3, [r3, #0]
 801bf04:	4618      	mov	r0, r3
 801bf06:	f7f6 ff55 	bl	8012db4 <pbuf_free>
    arp_table[i].q = NULL;
 801bf0a:	490b      	ldr	r1, [pc, #44]	; (801bf38 <etharp_free_entry+0x60>)
 801bf0c:	687a      	ldr	r2, [r7, #4]
 801bf0e:	4613      	mov	r3, r2
 801bf10:	005b      	lsls	r3, r3, #1
 801bf12:	4413      	add	r3, r2
 801bf14:	00db      	lsls	r3, r3, #3
 801bf16:	440b      	add	r3, r1
 801bf18:	2200      	movs	r2, #0
 801bf1a:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801bf1c:	4906      	ldr	r1, [pc, #24]	; (801bf38 <etharp_free_entry+0x60>)
 801bf1e:	687a      	ldr	r2, [r7, #4]
 801bf20:	4613      	mov	r3, r2
 801bf22:	005b      	lsls	r3, r3, #1
 801bf24:	4413      	add	r3, r2
 801bf26:	00db      	lsls	r3, r3, #3
 801bf28:	440b      	add	r3, r1
 801bf2a:	3314      	adds	r3, #20
 801bf2c:	2200      	movs	r2, #0
 801bf2e:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 801bf30:	bf00      	nop
 801bf32:	3708      	adds	r7, #8
 801bf34:	46bd      	mov	sp, r7
 801bf36:	bd80      	pop	{r7, pc}
 801bf38:	2400458c 	.word	0x2400458c

0801bf3c <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 801bf3c:	b580      	push	{r7, lr}
 801bf3e:	b082      	sub	sp, #8
 801bf40:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801bf42:	2300      	movs	r3, #0
 801bf44:	607b      	str	r3, [r7, #4]
 801bf46:	e096      	b.n	801c076 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 801bf48:	494f      	ldr	r1, [pc, #316]	; (801c088 <etharp_tmr+0x14c>)
 801bf4a:	687a      	ldr	r2, [r7, #4]
 801bf4c:	4613      	mov	r3, r2
 801bf4e:	005b      	lsls	r3, r3, #1
 801bf50:	4413      	add	r3, r2
 801bf52:	00db      	lsls	r3, r3, #3
 801bf54:	440b      	add	r3, r1
 801bf56:	3314      	adds	r3, #20
 801bf58:	781b      	ldrb	r3, [r3, #0]
 801bf5a:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 801bf5c:	78fb      	ldrb	r3, [r7, #3]
 801bf5e:	2b00      	cmp	r3, #0
 801bf60:	f000 8086 	beq.w	801c070 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 801bf64:	4948      	ldr	r1, [pc, #288]	; (801c088 <etharp_tmr+0x14c>)
 801bf66:	687a      	ldr	r2, [r7, #4]
 801bf68:	4613      	mov	r3, r2
 801bf6a:	005b      	lsls	r3, r3, #1
 801bf6c:	4413      	add	r3, r2
 801bf6e:	00db      	lsls	r3, r3, #3
 801bf70:	440b      	add	r3, r1
 801bf72:	3312      	adds	r3, #18
 801bf74:	881b      	ldrh	r3, [r3, #0]
 801bf76:	3301      	adds	r3, #1
 801bf78:	b298      	uxth	r0, r3
 801bf7a:	4943      	ldr	r1, [pc, #268]	; (801c088 <etharp_tmr+0x14c>)
 801bf7c:	687a      	ldr	r2, [r7, #4]
 801bf7e:	4613      	mov	r3, r2
 801bf80:	005b      	lsls	r3, r3, #1
 801bf82:	4413      	add	r3, r2
 801bf84:	00db      	lsls	r3, r3, #3
 801bf86:	440b      	add	r3, r1
 801bf88:	3312      	adds	r3, #18
 801bf8a:	4602      	mov	r2, r0
 801bf8c:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801bf8e:	493e      	ldr	r1, [pc, #248]	; (801c088 <etharp_tmr+0x14c>)
 801bf90:	687a      	ldr	r2, [r7, #4]
 801bf92:	4613      	mov	r3, r2
 801bf94:	005b      	lsls	r3, r3, #1
 801bf96:	4413      	add	r3, r2
 801bf98:	00db      	lsls	r3, r3, #3
 801bf9a:	440b      	add	r3, r1
 801bf9c:	3312      	adds	r3, #18
 801bf9e:	881b      	ldrh	r3, [r3, #0]
 801bfa0:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 801bfa4:	d215      	bcs.n	801bfd2 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801bfa6:	4938      	ldr	r1, [pc, #224]	; (801c088 <etharp_tmr+0x14c>)
 801bfa8:	687a      	ldr	r2, [r7, #4]
 801bfaa:	4613      	mov	r3, r2
 801bfac:	005b      	lsls	r3, r3, #1
 801bfae:	4413      	add	r3, r2
 801bfb0:	00db      	lsls	r3, r3, #3
 801bfb2:	440b      	add	r3, r1
 801bfb4:	3314      	adds	r3, #20
 801bfb6:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801bfb8:	2b01      	cmp	r3, #1
 801bfba:	d10e      	bne.n	801bfda <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 801bfbc:	4932      	ldr	r1, [pc, #200]	; (801c088 <etharp_tmr+0x14c>)
 801bfbe:	687a      	ldr	r2, [r7, #4]
 801bfc0:	4613      	mov	r3, r2
 801bfc2:	005b      	lsls	r3, r3, #1
 801bfc4:	4413      	add	r3, r2
 801bfc6:	00db      	lsls	r3, r3, #3
 801bfc8:	440b      	add	r3, r1
 801bfca:	3312      	adds	r3, #18
 801bfcc:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801bfce:	2b04      	cmp	r3, #4
 801bfd0:	d903      	bls.n	801bfda <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801bfd2:	6878      	ldr	r0, [r7, #4]
 801bfd4:	f7ff ff80 	bl	801bed8 <etharp_free_entry>
 801bfd8:	e04a      	b.n	801c070 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801bfda:	492b      	ldr	r1, [pc, #172]	; (801c088 <etharp_tmr+0x14c>)
 801bfdc:	687a      	ldr	r2, [r7, #4]
 801bfde:	4613      	mov	r3, r2
 801bfe0:	005b      	lsls	r3, r3, #1
 801bfe2:	4413      	add	r3, r2
 801bfe4:	00db      	lsls	r3, r3, #3
 801bfe6:	440b      	add	r3, r1
 801bfe8:	3314      	adds	r3, #20
 801bfea:	781b      	ldrb	r3, [r3, #0]
 801bfec:	2b03      	cmp	r3, #3
 801bfee:	d10a      	bne.n	801c006 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 801bff0:	4925      	ldr	r1, [pc, #148]	; (801c088 <etharp_tmr+0x14c>)
 801bff2:	687a      	ldr	r2, [r7, #4]
 801bff4:	4613      	mov	r3, r2
 801bff6:	005b      	lsls	r3, r3, #1
 801bff8:	4413      	add	r3, r2
 801bffa:	00db      	lsls	r3, r3, #3
 801bffc:	440b      	add	r3, r1
 801bffe:	3314      	adds	r3, #20
 801c000:	2204      	movs	r2, #4
 801c002:	701a      	strb	r2, [r3, #0]
 801c004:	e034      	b.n	801c070 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801c006:	4920      	ldr	r1, [pc, #128]	; (801c088 <etharp_tmr+0x14c>)
 801c008:	687a      	ldr	r2, [r7, #4]
 801c00a:	4613      	mov	r3, r2
 801c00c:	005b      	lsls	r3, r3, #1
 801c00e:	4413      	add	r3, r2
 801c010:	00db      	lsls	r3, r3, #3
 801c012:	440b      	add	r3, r1
 801c014:	3314      	adds	r3, #20
 801c016:	781b      	ldrb	r3, [r3, #0]
 801c018:	2b04      	cmp	r3, #4
 801c01a:	d10a      	bne.n	801c032 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 801c01c:	491a      	ldr	r1, [pc, #104]	; (801c088 <etharp_tmr+0x14c>)
 801c01e:	687a      	ldr	r2, [r7, #4]
 801c020:	4613      	mov	r3, r2
 801c022:	005b      	lsls	r3, r3, #1
 801c024:	4413      	add	r3, r2
 801c026:	00db      	lsls	r3, r3, #3
 801c028:	440b      	add	r3, r1
 801c02a:	3314      	adds	r3, #20
 801c02c:	2202      	movs	r2, #2
 801c02e:	701a      	strb	r2, [r3, #0]
 801c030:	e01e      	b.n	801c070 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801c032:	4915      	ldr	r1, [pc, #84]	; (801c088 <etharp_tmr+0x14c>)
 801c034:	687a      	ldr	r2, [r7, #4]
 801c036:	4613      	mov	r3, r2
 801c038:	005b      	lsls	r3, r3, #1
 801c03a:	4413      	add	r3, r2
 801c03c:	00db      	lsls	r3, r3, #3
 801c03e:	440b      	add	r3, r1
 801c040:	3314      	adds	r3, #20
 801c042:	781b      	ldrb	r3, [r3, #0]
 801c044:	2b01      	cmp	r3, #1
 801c046:	d113      	bne.n	801c070 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 801c048:	490f      	ldr	r1, [pc, #60]	; (801c088 <etharp_tmr+0x14c>)
 801c04a:	687a      	ldr	r2, [r7, #4]
 801c04c:	4613      	mov	r3, r2
 801c04e:	005b      	lsls	r3, r3, #1
 801c050:	4413      	add	r3, r2
 801c052:	00db      	lsls	r3, r3, #3
 801c054:	440b      	add	r3, r1
 801c056:	3308      	adds	r3, #8
 801c058:	6818      	ldr	r0, [r3, #0]
 801c05a:	687a      	ldr	r2, [r7, #4]
 801c05c:	4613      	mov	r3, r2
 801c05e:	005b      	lsls	r3, r3, #1
 801c060:	4413      	add	r3, r2
 801c062:	00db      	lsls	r3, r3, #3
 801c064:	4a08      	ldr	r2, [pc, #32]	; (801c088 <etharp_tmr+0x14c>)
 801c066:	4413      	add	r3, r2
 801c068:	3304      	adds	r3, #4
 801c06a:	4619      	mov	r1, r3
 801c06c:	f000 fe72 	bl	801cd54 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801c070:	687b      	ldr	r3, [r7, #4]
 801c072:	3301      	adds	r3, #1
 801c074:	607b      	str	r3, [r7, #4]
 801c076:	687b      	ldr	r3, [r7, #4]
 801c078:	2b09      	cmp	r3, #9
 801c07a:	f77f af65 	ble.w	801bf48 <etharp_tmr+0xc>
      }
    }
  }
}
 801c07e:	bf00      	nop
 801c080:	bf00      	nop
 801c082:	3708      	adds	r7, #8
 801c084:	46bd      	mov	sp, r7
 801c086:	bd80      	pop	{r7, pc}
 801c088:	2400458c 	.word	0x2400458c

0801c08c <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 801c08c:	b580      	push	{r7, lr}
 801c08e:	b08a      	sub	sp, #40	; 0x28
 801c090:	af00      	add	r7, sp, #0
 801c092:	60f8      	str	r0, [r7, #12]
 801c094:	460b      	mov	r3, r1
 801c096:	607a      	str	r2, [r7, #4]
 801c098:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801c09a:	230a      	movs	r3, #10
 801c09c:	84fb      	strh	r3, [r7, #38]	; 0x26
 801c09e:	230a      	movs	r3, #10
 801c0a0:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801c0a2:	230a      	movs	r3, #10
 801c0a4:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 801c0a6:	2300      	movs	r3, #0
 801c0a8:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801c0aa:	230a      	movs	r3, #10
 801c0ac:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801c0ae:	2300      	movs	r3, #0
 801c0b0:	83bb      	strh	r3, [r7, #28]
 801c0b2:	2300      	movs	r3, #0
 801c0b4:	837b      	strh	r3, [r7, #26]
 801c0b6:	2300      	movs	r3, #0
 801c0b8:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801c0ba:	2300      	movs	r3, #0
 801c0bc:	843b      	strh	r3, [r7, #32]
 801c0be:	e0ae      	b.n	801c21e <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 801c0c0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801c0c4:	49a6      	ldr	r1, [pc, #664]	; (801c360 <etharp_find_entry+0x2d4>)
 801c0c6:	4613      	mov	r3, r2
 801c0c8:	005b      	lsls	r3, r3, #1
 801c0ca:	4413      	add	r3, r2
 801c0cc:	00db      	lsls	r3, r3, #3
 801c0ce:	440b      	add	r3, r1
 801c0d0:	3314      	adds	r3, #20
 801c0d2:	781b      	ldrb	r3, [r3, #0]
 801c0d4:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801c0d6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801c0da:	2b0a      	cmp	r3, #10
 801c0dc:	d105      	bne.n	801c0ea <etharp_find_entry+0x5e>
 801c0de:	7dfb      	ldrb	r3, [r7, #23]
 801c0e0:	2b00      	cmp	r3, #0
 801c0e2:	d102      	bne.n	801c0ea <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 801c0e4:	8c3b      	ldrh	r3, [r7, #32]
 801c0e6:	847b      	strh	r3, [r7, #34]	; 0x22
 801c0e8:	e095      	b.n	801c216 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801c0ea:	7dfb      	ldrb	r3, [r7, #23]
 801c0ec:	2b00      	cmp	r3, #0
 801c0ee:	f000 8092 	beq.w	801c216 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801c0f2:	7dfb      	ldrb	r3, [r7, #23]
 801c0f4:	2b01      	cmp	r3, #1
 801c0f6:	d009      	beq.n	801c10c <etharp_find_entry+0x80>
 801c0f8:	7dfb      	ldrb	r3, [r7, #23]
 801c0fa:	2b01      	cmp	r3, #1
 801c0fc:	d806      	bhi.n	801c10c <etharp_find_entry+0x80>
 801c0fe:	4b99      	ldr	r3, [pc, #612]	; (801c364 <etharp_find_entry+0x2d8>)
 801c100:	f240 1223 	movw	r2, #291	; 0x123
 801c104:	4998      	ldr	r1, [pc, #608]	; (801c368 <etharp_find_entry+0x2dc>)
 801c106:	4899      	ldr	r0, [pc, #612]	; (801c36c <etharp_find_entry+0x2e0>)
 801c108:	f003 fa7c 	bl	801f604 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 801c10c:	68fb      	ldr	r3, [r7, #12]
 801c10e:	2b00      	cmp	r3, #0
 801c110:	d020      	beq.n	801c154 <etharp_find_entry+0xc8>
 801c112:	68fb      	ldr	r3, [r7, #12]
 801c114:	6819      	ldr	r1, [r3, #0]
 801c116:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801c11a:	4891      	ldr	r0, [pc, #580]	; (801c360 <etharp_find_entry+0x2d4>)
 801c11c:	4613      	mov	r3, r2
 801c11e:	005b      	lsls	r3, r3, #1
 801c120:	4413      	add	r3, r2
 801c122:	00db      	lsls	r3, r3, #3
 801c124:	4403      	add	r3, r0
 801c126:	3304      	adds	r3, #4
 801c128:	681b      	ldr	r3, [r3, #0]
 801c12a:	4299      	cmp	r1, r3
 801c12c:	d112      	bne.n	801c154 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801c12e:	687b      	ldr	r3, [r7, #4]
 801c130:	2b00      	cmp	r3, #0
 801c132:	d00c      	beq.n	801c14e <etharp_find_entry+0xc2>
 801c134:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801c138:	4989      	ldr	r1, [pc, #548]	; (801c360 <etharp_find_entry+0x2d4>)
 801c13a:	4613      	mov	r3, r2
 801c13c:	005b      	lsls	r3, r3, #1
 801c13e:	4413      	add	r3, r2
 801c140:	00db      	lsls	r3, r3, #3
 801c142:	440b      	add	r3, r1
 801c144:	3308      	adds	r3, #8
 801c146:	681b      	ldr	r3, [r3, #0]
 801c148:	687a      	ldr	r2, [r7, #4]
 801c14a:	429a      	cmp	r2, r3
 801c14c:	d102      	bne.n	801c154 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801c14e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801c152:	e100      	b.n	801c356 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 801c154:	7dfb      	ldrb	r3, [r7, #23]
 801c156:	2b01      	cmp	r3, #1
 801c158:	d140      	bne.n	801c1dc <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801c15a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801c15e:	4980      	ldr	r1, [pc, #512]	; (801c360 <etharp_find_entry+0x2d4>)
 801c160:	4613      	mov	r3, r2
 801c162:	005b      	lsls	r3, r3, #1
 801c164:	4413      	add	r3, r2
 801c166:	00db      	lsls	r3, r3, #3
 801c168:	440b      	add	r3, r1
 801c16a:	681b      	ldr	r3, [r3, #0]
 801c16c:	2b00      	cmp	r3, #0
 801c16e:	d01a      	beq.n	801c1a6 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 801c170:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801c174:	497a      	ldr	r1, [pc, #488]	; (801c360 <etharp_find_entry+0x2d4>)
 801c176:	4613      	mov	r3, r2
 801c178:	005b      	lsls	r3, r3, #1
 801c17a:	4413      	add	r3, r2
 801c17c:	00db      	lsls	r3, r3, #3
 801c17e:	440b      	add	r3, r1
 801c180:	3312      	adds	r3, #18
 801c182:	881b      	ldrh	r3, [r3, #0]
 801c184:	8bba      	ldrh	r2, [r7, #28]
 801c186:	429a      	cmp	r2, r3
 801c188:	d845      	bhi.n	801c216 <etharp_find_entry+0x18a>
            old_queue = i;
 801c18a:	8c3b      	ldrh	r3, [r7, #32]
 801c18c:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801c18e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801c192:	4973      	ldr	r1, [pc, #460]	; (801c360 <etharp_find_entry+0x2d4>)
 801c194:	4613      	mov	r3, r2
 801c196:	005b      	lsls	r3, r3, #1
 801c198:	4413      	add	r3, r2
 801c19a:	00db      	lsls	r3, r3, #3
 801c19c:	440b      	add	r3, r1
 801c19e:	3312      	adds	r3, #18
 801c1a0:	881b      	ldrh	r3, [r3, #0]
 801c1a2:	83bb      	strh	r3, [r7, #28]
 801c1a4:	e037      	b.n	801c216 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801c1a6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801c1aa:	496d      	ldr	r1, [pc, #436]	; (801c360 <etharp_find_entry+0x2d4>)
 801c1ac:	4613      	mov	r3, r2
 801c1ae:	005b      	lsls	r3, r3, #1
 801c1b0:	4413      	add	r3, r2
 801c1b2:	00db      	lsls	r3, r3, #3
 801c1b4:	440b      	add	r3, r1
 801c1b6:	3312      	adds	r3, #18
 801c1b8:	881b      	ldrh	r3, [r3, #0]
 801c1ba:	8b7a      	ldrh	r2, [r7, #26]
 801c1bc:	429a      	cmp	r2, r3
 801c1be:	d82a      	bhi.n	801c216 <etharp_find_entry+0x18a>
            old_pending = i;
 801c1c0:	8c3b      	ldrh	r3, [r7, #32]
 801c1c2:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 801c1c4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801c1c8:	4965      	ldr	r1, [pc, #404]	; (801c360 <etharp_find_entry+0x2d4>)
 801c1ca:	4613      	mov	r3, r2
 801c1cc:	005b      	lsls	r3, r3, #1
 801c1ce:	4413      	add	r3, r2
 801c1d0:	00db      	lsls	r3, r3, #3
 801c1d2:	440b      	add	r3, r1
 801c1d4:	3312      	adds	r3, #18
 801c1d6:	881b      	ldrh	r3, [r3, #0]
 801c1d8:	837b      	strh	r3, [r7, #26]
 801c1da:	e01c      	b.n	801c216 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 801c1dc:	7dfb      	ldrb	r3, [r7, #23]
 801c1de:	2b01      	cmp	r3, #1
 801c1e0:	d919      	bls.n	801c216 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801c1e2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801c1e6:	495e      	ldr	r1, [pc, #376]	; (801c360 <etharp_find_entry+0x2d4>)
 801c1e8:	4613      	mov	r3, r2
 801c1ea:	005b      	lsls	r3, r3, #1
 801c1ec:	4413      	add	r3, r2
 801c1ee:	00db      	lsls	r3, r3, #3
 801c1f0:	440b      	add	r3, r1
 801c1f2:	3312      	adds	r3, #18
 801c1f4:	881b      	ldrh	r3, [r3, #0]
 801c1f6:	8b3a      	ldrh	r2, [r7, #24]
 801c1f8:	429a      	cmp	r2, r3
 801c1fa:	d80c      	bhi.n	801c216 <etharp_find_entry+0x18a>
            old_stable = i;
 801c1fc:	8c3b      	ldrh	r3, [r7, #32]
 801c1fe:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 801c200:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801c204:	4956      	ldr	r1, [pc, #344]	; (801c360 <etharp_find_entry+0x2d4>)
 801c206:	4613      	mov	r3, r2
 801c208:	005b      	lsls	r3, r3, #1
 801c20a:	4413      	add	r3, r2
 801c20c:	00db      	lsls	r3, r3, #3
 801c20e:	440b      	add	r3, r1
 801c210:	3312      	adds	r3, #18
 801c212:	881b      	ldrh	r3, [r3, #0]
 801c214:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801c216:	8c3b      	ldrh	r3, [r7, #32]
 801c218:	3301      	adds	r3, #1
 801c21a:	b29b      	uxth	r3, r3
 801c21c:	843b      	strh	r3, [r7, #32]
 801c21e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801c222:	2b09      	cmp	r3, #9
 801c224:	f77f af4c 	ble.w	801c0c0 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 801c228:	7afb      	ldrb	r3, [r7, #11]
 801c22a:	f003 0302 	and.w	r3, r3, #2
 801c22e:	2b00      	cmp	r3, #0
 801c230:	d108      	bne.n	801c244 <etharp_find_entry+0x1b8>
 801c232:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801c236:	2b0a      	cmp	r3, #10
 801c238:	d107      	bne.n	801c24a <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801c23a:	7afb      	ldrb	r3, [r7, #11]
 801c23c:	f003 0301 	and.w	r3, r3, #1
 801c240:	2b00      	cmp	r3, #0
 801c242:	d102      	bne.n	801c24a <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 801c244:	f04f 33ff 	mov.w	r3, #4294967295
 801c248:	e085      	b.n	801c356 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801c24a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801c24e:	2b09      	cmp	r3, #9
 801c250:	dc02      	bgt.n	801c258 <etharp_find_entry+0x1cc>
    i = empty;
 801c252:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801c254:	843b      	strh	r3, [r7, #32]
 801c256:	e039      	b.n	801c2cc <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 801c258:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 801c25c:	2b09      	cmp	r3, #9
 801c25e:	dc14      	bgt.n	801c28a <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 801c260:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801c262:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801c264:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801c268:	493d      	ldr	r1, [pc, #244]	; (801c360 <etharp_find_entry+0x2d4>)
 801c26a:	4613      	mov	r3, r2
 801c26c:	005b      	lsls	r3, r3, #1
 801c26e:	4413      	add	r3, r2
 801c270:	00db      	lsls	r3, r3, #3
 801c272:	440b      	add	r3, r1
 801c274:	681b      	ldr	r3, [r3, #0]
 801c276:	2b00      	cmp	r3, #0
 801c278:	d018      	beq.n	801c2ac <etharp_find_entry+0x220>
 801c27a:	4b3a      	ldr	r3, [pc, #232]	; (801c364 <etharp_find_entry+0x2d8>)
 801c27c:	f240 126d 	movw	r2, #365	; 0x16d
 801c280:	493b      	ldr	r1, [pc, #236]	; (801c370 <etharp_find_entry+0x2e4>)
 801c282:	483a      	ldr	r0, [pc, #232]	; (801c36c <etharp_find_entry+0x2e0>)
 801c284:	f003 f9be 	bl	801f604 <iprintf>
 801c288:	e010      	b.n	801c2ac <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801c28a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801c28e:	2b09      	cmp	r3, #9
 801c290:	dc02      	bgt.n	801c298 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801c292:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801c294:	843b      	strh	r3, [r7, #32]
 801c296:	e009      	b.n	801c2ac <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 801c298:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801c29c:	2b09      	cmp	r3, #9
 801c29e:	dc02      	bgt.n	801c2a6 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801c2a0:	8bfb      	ldrh	r3, [r7, #30]
 801c2a2:	843b      	strh	r3, [r7, #32]
 801c2a4:	e002      	b.n	801c2ac <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801c2a6:	f04f 33ff 	mov.w	r3, #4294967295
 801c2aa:	e054      	b.n	801c356 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801c2ac:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801c2b0:	2b09      	cmp	r3, #9
 801c2b2:	dd06      	ble.n	801c2c2 <etharp_find_entry+0x236>
 801c2b4:	4b2b      	ldr	r3, [pc, #172]	; (801c364 <etharp_find_entry+0x2d8>)
 801c2b6:	f240 127f 	movw	r2, #383	; 0x17f
 801c2ba:	492e      	ldr	r1, [pc, #184]	; (801c374 <etharp_find_entry+0x2e8>)
 801c2bc:	482b      	ldr	r0, [pc, #172]	; (801c36c <etharp_find_entry+0x2e0>)
 801c2be:	f003 f9a1 	bl	801f604 <iprintf>
    etharp_free_entry(i);
 801c2c2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801c2c6:	4618      	mov	r0, r3
 801c2c8:	f7ff fe06 	bl	801bed8 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801c2cc:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801c2d0:	2b09      	cmp	r3, #9
 801c2d2:	dd06      	ble.n	801c2e2 <etharp_find_entry+0x256>
 801c2d4:	4b23      	ldr	r3, [pc, #140]	; (801c364 <etharp_find_entry+0x2d8>)
 801c2d6:	f240 1283 	movw	r2, #387	; 0x183
 801c2da:	4926      	ldr	r1, [pc, #152]	; (801c374 <etharp_find_entry+0x2e8>)
 801c2dc:	4823      	ldr	r0, [pc, #140]	; (801c36c <etharp_find_entry+0x2e0>)
 801c2de:	f003 f991 	bl	801f604 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801c2e2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801c2e6:	491e      	ldr	r1, [pc, #120]	; (801c360 <etharp_find_entry+0x2d4>)
 801c2e8:	4613      	mov	r3, r2
 801c2ea:	005b      	lsls	r3, r3, #1
 801c2ec:	4413      	add	r3, r2
 801c2ee:	00db      	lsls	r3, r3, #3
 801c2f0:	440b      	add	r3, r1
 801c2f2:	3314      	adds	r3, #20
 801c2f4:	781b      	ldrb	r3, [r3, #0]
 801c2f6:	2b00      	cmp	r3, #0
 801c2f8:	d006      	beq.n	801c308 <etharp_find_entry+0x27c>
 801c2fa:	4b1a      	ldr	r3, [pc, #104]	; (801c364 <etharp_find_entry+0x2d8>)
 801c2fc:	f44f 72c2 	mov.w	r2, #388	; 0x184
 801c300:	491d      	ldr	r1, [pc, #116]	; (801c378 <etharp_find_entry+0x2ec>)
 801c302:	481a      	ldr	r0, [pc, #104]	; (801c36c <etharp_find_entry+0x2e0>)
 801c304:	f003 f97e 	bl	801f604 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 801c308:	68fb      	ldr	r3, [r7, #12]
 801c30a:	2b00      	cmp	r3, #0
 801c30c:	d00b      	beq.n	801c326 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801c30e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801c312:	68fb      	ldr	r3, [r7, #12]
 801c314:	6819      	ldr	r1, [r3, #0]
 801c316:	4812      	ldr	r0, [pc, #72]	; (801c360 <etharp_find_entry+0x2d4>)
 801c318:	4613      	mov	r3, r2
 801c31a:	005b      	lsls	r3, r3, #1
 801c31c:	4413      	add	r3, r2
 801c31e:	00db      	lsls	r3, r3, #3
 801c320:	4403      	add	r3, r0
 801c322:	3304      	adds	r3, #4
 801c324:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801c326:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801c32a:	490d      	ldr	r1, [pc, #52]	; (801c360 <etharp_find_entry+0x2d4>)
 801c32c:	4613      	mov	r3, r2
 801c32e:	005b      	lsls	r3, r3, #1
 801c330:	4413      	add	r3, r2
 801c332:	00db      	lsls	r3, r3, #3
 801c334:	440b      	add	r3, r1
 801c336:	3312      	adds	r3, #18
 801c338:	2200      	movs	r2, #0
 801c33a:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 801c33c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801c340:	4907      	ldr	r1, [pc, #28]	; (801c360 <etharp_find_entry+0x2d4>)
 801c342:	4613      	mov	r3, r2
 801c344:	005b      	lsls	r3, r3, #1
 801c346:	4413      	add	r3, r2
 801c348:	00db      	lsls	r3, r3, #3
 801c34a:	440b      	add	r3, r1
 801c34c:	3308      	adds	r3, #8
 801c34e:	687a      	ldr	r2, [r7, #4]
 801c350:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801c352:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 801c356:	4618      	mov	r0, r3
 801c358:	3728      	adds	r7, #40	; 0x28
 801c35a:	46bd      	mov	sp, r7
 801c35c:	bd80      	pop	{r7, pc}
 801c35e:	bf00      	nop
 801c360:	2400458c 	.word	0x2400458c
 801c364:	0802691c 	.word	0x0802691c
 801c368:	08026954 	.word	0x08026954
 801c36c:	08026994 	.word	0x08026994
 801c370:	080269bc 	.word	0x080269bc
 801c374:	080269d4 	.word	0x080269d4
 801c378:	080269e8 	.word	0x080269e8

0801c37c <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 801c37c:	b580      	push	{r7, lr}
 801c37e:	b088      	sub	sp, #32
 801c380:	af02      	add	r7, sp, #8
 801c382:	60f8      	str	r0, [r7, #12]
 801c384:	60b9      	str	r1, [r7, #8]
 801c386:	607a      	str	r2, [r7, #4]
 801c388:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801c38a:	68fb      	ldr	r3, [r7, #12]
 801c38c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801c390:	2b06      	cmp	r3, #6
 801c392:	d006      	beq.n	801c3a2 <etharp_update_arp_entry+0x26>
 801c394:	4b48      	ldr	r3, [pc, #288]	; (801c4b8 <etharp_update_arp_entry+0x13c>)
 801c396:	f240 12a9 	movw	r2, #425	; 0x1a9
 801c39a:	4948      	ldr	r1, [pc, #288]	; (801c4bc <etharp_update_arp_entry+0x140>)
 801c39c:	4848      	ldr	r0, [pc, #288]	; (801c4c0 <etharp_update_arp_entry+0x144>)
 801c39e:	f003 f931 	bl	801f604 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801c3a2:	68bb      	ldr	r3, [r7, #8]
 801c3a4:	2b00      	cmp	r3, #0
 801c3a6:	d012      	beq.n	801c3ce <etharp_update_arp_entry+0x52>
 801c3a8:	68bb      	ldr	r3, [r7, #8]
 801c3aa:	681b      	ldr	r3, [r3, #0]
 801c3ac:	2b00      	cmp	r3, #0
 801c3ae:	d00e      	beq.n	801c3ce <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801c3b0:	68bb      	ldr	r3, [r7, #8]
 801c3b2:	681b      	ldr	r3, [r3, #0]
 801c3b4:	68f9      	ldr	r1, [r7, #12]
 801c3b6:	4618      	mov	r0, r3
 801c3b8:	f001 f946 	bl	801d648 <ip4_addr_isbroadcast_u32>
 801c3bc:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801c3be:	2b00      	cmp	r3, #0
 801c3c0:	d105      	bne.n	801c3ce <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801c3c2:	68bb      	ldr	r3, [r7, #8]
 801c3c4:	681b      	ldr	r3, [r3, #0]
 801c3c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801c3ca:	2be0      	cmp	r3, #224	; 0xe0
 801c3cc:	d102      	bne.n	801c3d4 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801c3ce:	f06f 030f 	mvn.w	r3, #15
 801c3d2:	e06c      	b.n	801c4ae <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 801c3d4:	78fb      	ldrb	r3, [r7, #3]
 801c3d6:	68fa      	ldr	r2, [r7, #12]
 801c3d8:	4619      	mov	r1, r3
 801c3da:	68b8      	ldr	r0, [r7, #8]
 801c3dc:	f7ff fe56 	bl	801c08c <etharp_find_entry>
 801c3e0:	4603      	mov	r3, r0
 801c3e2:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 801c3e4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801c3e8:	2b00      	cmp	r3, #0
 801c3ea:	da02      	bge.n	801c3f2 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 801c3ec:	8afb      	ldrh	r3, [r7, #22]
 801c3ee:	b25b      	sxtb	r3, r3
 801c3f0:	e05d      	b.n	801c4ae <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801c3f2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801c3f6:	4933      	ldr	r1, [pc, #204]	; (801c4c4 <etharp_update_arp_entry+0x148>)
 801c3f8:	4613      	mov	r3, r2
 801c3fa:	005b      	lsls	r3, r3, #1
 801c3fc:	4413      	add	r3, r2
 801c3fe:	00db      	lsls	r3, r3, #3
 801c400:	440b      	add	r3, r1
 801c402:	3314      	adds	r3, #20
 801c404:	2202      	movs	r2, #2
 801c406:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 801c408:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801c40c:	492d      	ldr	r1, [pc, #180]	; (801c4c4 <etharp_update_arp_entry+0x148>)
 801c40e:	4613      	mov	r3, r2
 801c410:	005b      	lsls	r3, r3, #1
 801c412:	4413      	add	r3, r2
 801c414:	00db      	lsls	r3, r3, #3
 801c416:	440b      	add	r3, r1
 801c418:	3308      	adds	r3, #8
 801c41a:	68fa      	ldr	r2, [r7, #12]
 801c41c:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801c41e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801c422:	4613      	mov	r3, r2
 801c424:	005b      	lsls	r3, r3, #1
 801c426:	4413      	add	r3, r2
 801c428:	00db      	lsls	r3, r3, #3
 801c42a:	3308      	adds	r3, #8
 801c42c:	4a25      	ldr	r2, [pc, #148]	; (801c4c4 <etharp_update_arp_entry+0x148>)
 801c42e:	4413      	add	r3, r2
 801c430:	3304      	adds	r3, #4
 801c432:	2206      	movs	r2, #6
 801c434:	6879      	ldr	r1, [r7, #4]
 801c436:	4618      	mov	r0, r3
 801c438:	f002 fa6e 	bl	801e918 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 801c43c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801c440:	4920      	ldr	r1, [pc, #128]	; (801c4c4 <etharp_update_arp_entry+0x148>)
 801c442:	4613      	mov	r3, r2
 801c444:	005b      	lsls	r3, r3, #1
 801c446:	4413      	add	r3, r2
 801c448:	00db      	lsls	r3, r3, #3
 801c44a:	440b      	add	r3, r1
 801c44c:	3312      	adds	r3, #18
 801c44e:	2200      	movs	r2, #0
 801c450:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801c452:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801c456:	491b      	ldr	r1, [pc, #108]	; (801c4c4 <etharp_update_arp_entry+0x148>)
 801c458:	4613      	mov	r3, r2
 801c45a:	005b      	lsls	r3, r3, #1
 801c45c:	4413      	add	r3, r2
 801c45e:	00db      	lsls	r3, r3, #3
 801c460:	440b      	add	r3, r1
 801c462:	681b      	ldr	r3, [r3, #0]
 801c464:	2b00      	cmp	r3, #0
 801c466:	d021      	beq.n	801c4ac <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 801c468:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801c46c:	4915      	ldr	r1, [pc, #84]	; (801c4c4 <etharp_update_arp_entry+0x148>)
 801c46e:	4613      	mov	r3, r2
 801c470:	005b      	lsls	r3, r3, #1
 801c472:	4413      	add	r3, r2
 801c474:	00db      	lsls	r3, r3, #3
 801c476:	440b      	add	r3, r1
 801c478:	681b      	ldr	r3, [r3, #0]
 801c47a:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 801c47c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801c480:	4910      	ldr	r1, [pc, #64]	; (801c4c4 <etharp_update_arp_entry+0x148>)
 801c482:	4613      	mov	r3, r2
 801c484:	005b      	lsls	r3, r3, #1
 801c486:	4413      	add	r3, r2
 801c488:	00db      	lsls	r3, r3, #3
 801c48a:	440b      	add	r3, r1
 801c48c:	2200      	movs	r2, #0
 801c48e:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 801c490:	68fb      	ldr	r3, [r7, #12]
 801c492:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 801c496:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801c49a:	9300      	str	r3, [sp, #0]
 801c49c:	687b      	ldr	r3, [r7, #4]
 801c49e:	6939      	ldr	r1, [r7, #16]
 801c4a0:	68f8      	ldr	r0, [r7, #12]
 801c4a2:	f001 ffd9 	bl	801e458 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801c4a6:	6938      	ldr	r0, [r7, #16]
 801c4a8:	f7f6 fc84 	bl	8012db4 <pbuf_free>
  }
  return ERR_OK;
 801c4ac:	2300      	movs	r3, #0
}
 801c4ae:	4618      	mov	r0, r3
 801c4b0:	3718      	adds	r7, #24
 801c4b2:	46bd      	mov	sp, r7
 801c4b4:	bd80      	pop	{r7, pc}
 801c4b6:	bf00      	nop
 801c4b8:	0802691c 	.word	0x0802691c
 801c4bc:	08026a14 	.word	0x08026a14
 801c4c0:	08026994 	.word	0x08026994
 801c4c4:	2400458c 	.word	0x2400458c

0801c4c8 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 801c4c8:	b580      	push	{r7, lr}
 801c4ca:	b084      	sub	sp, #16
 801c4cc:	af00      	add	r7, sp, #0
 801c4ce:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801c4d0:	2300      	movs	r3, #0
 801c4d2:	60fb      	str	r3, [r7, #12]
 801c4d4:	e01e      	b.n	801c514 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801c4d6:	4913      	ldr	r1, [pc, #76]	; (801c524 <etharp_cleanup_netif+0x5c>)
 801c4d8:	68fa      	ldr	r2, [r7, #12]
 801c4da:	4613      	mov	r3, r2
 801c4dc:	005b      	lsls	r3, r3, #1
 801c4de:	4413      	add	r3, r2
 801c4e0:	00db      	lsls	r3, r3, #3
 801c4e2:	440b      	add	r3, r1
 801c4e4:	3314      	adds	r3, #20
 801c4e6:	781b      	ldrb	r3, [r3, #0]
 801c4e8:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801c4ea:	7afb      	ldrb	r3, [r7, #11]
 801c4ec:	2b00      	cmp	r3, #0
 801c4ee:	d00e      	beq.n	801c50e <etharp_cleanup_netif+0x46>
 801c4f0:	490c      	ldr	r1, [pc, #48]	; (801c524 <etharp_cleanup_netif+0x5c>)
 801c4f2:	68fa      	ldr	r2, [r7, #12]
 801c4f4:	4613      	mov	r3, r2
 801c4f6:	005b      	lsls	r3, r3, #1
 801c4f8:	4413      	add	r3, r2
 801c4fa:	00db      	lsls	r3, r3, #3
 801c4fc:	440b      	add	r3, r1
 801c4fe:	3308      	adds	r3, #8
 801c500:	681b      	ldr	r3, [r3, #0]
 801c502:	687a      	ldr	r2, [r7, #4]
 801c504:	429a      	cmp	r2, r3
 801c506:	d102      	bne.n	801c50e <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 801c508:	68f8      	ldr	r0, [r7, #12]
 801c50a:	f7ff fce5 	bl	801bed8 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801c50e:	68fb      	ldr	r3, [r7, #12]
 801c510:	3301      	adds	r3, #1
 801c512:	60fb      	str	r3, [r7, #12]
 801c514:	68fb      	ldr	r3, [r7, #12]
 801c516:	2b09      	cmp	r3, #9
 801c518:	dddd      	ble.n	801c4d6 <etharp_cleanup_netif+0xe>
    }
  }
}
 801c51a:	bf00      	nop
 801c51c:	bf00      	nop
 801c51e:	3710      	adds	r7, #16
 801c520:	46bd      	mov	sp, r7
 801c522:	bd80      	pop	{r7, pc}
 801c524:	2400458c 	.word	0x2400458c

0801c528 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 801c528:	b5b0      	push	{r4, r5, r7, lr}
 801c52a:	b08a      	sub	sp, #40	; 0x28
 801c52c:	af04      	add	r7, sp, #16
 801c52e:	6078      	str	r0, [r7, #4]
 801c530:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801c532:	683b      	ldr	r3, [r7, #0]
 801c534:	2b00      	cmp	r3, #0
 801c536:	d107      	bne.n	801c548 <etharp_input+0x20>
 801c538:	4b3f      	ldr	r3, [pc, #252]	; (801c638 <etharp_input+0x110>)
 801c53a:	f240 228a 	movw	r2, #650	; 0x28a
 801c53e:	493f      	ldr	r1, [pc, #252]	; (801c63c <etharp_input+0x114>)
 801c540:	483f      	ldr	r0, [pc, #252]	; (801c640 <etharp_input+0x118>)
 801c542:	f003 f85f 	bl	801f604 <iprintf>
 801c546:	e074      	b.n	801c632 <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 801c548:	687b      	ldr	r3, [r7, #4]
 801c54a:	685b      	ldr	r3, [r3, #4]
 801c54c:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801c54e:	693b      	ldr	r3, [r7, #16]
 801c550:	881b      	ldrh	r3, [r3, #0]
 801c552:	b29b      	uxth	r3, r3
 801c554:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801c558:	d10c      	bne.n	801c574 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801c55a:	693b      	ldr	r3, [r7, #16]
 801c55c:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801c55e:	2b06      	cmp	r3, #6
 801c560:	d108      	bne.n	801c574 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801c562:	693b      	ldr	r3, [r7, #16]
 801c564:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801c566:	2b04      	cmp	r3, #4
 801c568:	d104      	bne.n	801c574 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801c56a:	693b      	ldr	r3, [r7, #16]
 801c56c:	885b      	ldrh	r3, [r3, #2]
 801c56e:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801c570:	2b08      	cmp	r3, #8
 801c572:	d003      	beq.n	801c57c <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 801c574:	6878      	ldr	r0, [r7, #4]
 801c576:	f7f6 fc1d 	bl	8012db4 <pbuf_free>
    return;
 801c57a:	e05a      	b.n	801c632 <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 801c57c:	693b      	ldr	r3, [r7, #16]
 801c57e:	330e      	adds	r3, #14
 801c580:	681b      	ldr	r3, [r3, #0]
 801c582:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 801c584:	693b      	ldr	r3, [r7, #16]
 801c586:	3318      	adds	r3, #24
 801c588:	681b      	ldr	r3, [r3, #0]
 801c58a:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801c58c:	683b      	ldr	r3, [r7, #0]
 801c58e:	3304      	adds	r3, #4
 801c590:	681b      	ldr	r3, [r3, #0]
 801c592:	2b00      	cmp	r3, #0
 801c594:	d102      	bne.n	801c59c <etharp_input+0x74>
    for_us = 0;
 801c596:	2300      	movs	r3, #0
 801c598:	75fb      	strb	r3, [r7, #23]
 801c59a:	e009      	b.n	801c5b0 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 801c59c:	68ba      	ldr	r2, [r7, #8]
 801c59e:	683b      	ldr	r3, [r7, #0]
 801c5a0:	3304      	adds	r3, #4
 801c5a2:	681b      	ldr	r3, [r3, #0]
 801c5a4:	429a      	cmp	r2, r3
 801c5a6:	bf0c      	ite	eq
 801c5a8:	2301      	moveq	r3, #1
 801c5aa:	2300      	movne	r3, #0
 801c5ac:	b2db      	uxtb	r3, r3
 801c5ae:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801c5b0:	693b      	ldr	r3, [r7, #16]
 801c5b2:	f103 0208 	add.w	r2, r3, #8
 801c5b6:	7dfb      	ldrb	r3, [r7, #23]
 801c5b8:	2b00      	cmp	r3, #0
 801c5ba:	d001      	beq.n	801c5c0 <etharp_input+0x98>
 801c5bc:	2301      	movs	r3, #1
 801c5be:	e000      	b.n	801c5c2 <etharp_input+0x9a>
 801c5c0:	2302      	movs	r3, #2
 801c5c2:	f107 010c 	add.w	r1, r7, #12
 801c5c6:	6838      	ldr	r0, [r7, #0]
 801c5c8:	f7ff fed8 	bl	801c37c <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 801c5cc:	693b      	ldr	r3, [r7, #16]
 801c5ce:	88db      	ldrh	r3, [r3, #6]
 801c5d0:	b29b      	uxth	r3, r3
 801c5d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801c5d6:	d003      	beq.n	801c5e0 <etharp_input+0xb8>
 801c5d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801c5dc:	d01e      	beq.n	801c61c <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801c5de:	e025      	b.n	801c62c <etharp_input+0x104>
      if (for_us) {
 801c5e0:	7dfb      	ldrb	r3, [r7, #23]
 801c5e2:	2b00      	cmp	r3, #0
 801c5e4:	d021      	beq.n	801c62a <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801c5e6:	683b      	ldr	r3, [r7, #0]
 801c5e8:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 801c5ec:	693b      	ldr	r3, [r7, #16]
 801c5ee:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801c5f2:	683b      	ldr	r3, [r7, #0]
 801c5f4:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 801c5f8:	683b      	ldr	r3, [r7, #0]
 801c5fa:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 801c5fc:	693a      	ldr	r2, [r7, #16]
 801c5fe:	3208      	adds	r2, #8
        etharp_raw(netif,
 801c600:	2102      	movs	r1, #2
 801c602:	9103      	str	r1, [sp, #12]
 801c604:	f107 010c 	add.w	r1, r7, #12
 801c608:	9102      	str	r1, [sp, #8]
 801c60a:	9201      	str	r2, [sp, #4]
 801c60c:	9300      	str	r3, [sp, #0]
 801c60e:	462b      	mov	r3, r5
 801c610:	4622      	mov	r2, r4
 801c612:	4601      	mov	r1, r0
 801c614:	6838      	ldr	r0, [r7, #0]
 801c616:	f000 faef 	bl	801cbf8 <etharp_raw>
      break;
 801c61a:	e006      	b.n	801c62a <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 801c61c:	f107 030c 	add.w	r3, r7, #12
 801c620:	4619      	mov	r1, r3
 801c622:	6838      	ldr	r0, [r7, #0]
 801c624:	f7fe f9fc 	bl	801aa20 <dhcp_arp_reply>
      break;
 801c628:	e000      	b.n	801c62c <etharp_input+0x104>
      break;
 801c62a:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801c62c:	6878      	ldr	r0, [r7, #4]
 801c62e:	f7f6 fbc1 	bl	8012db4 <pbuf_free>
}
 801c632:	3718      	adds	r7, #24
 801c634:	46bd      	mov	sp, r7
 801c636:	bdb0      	pop	{r4, r5, r7, pc}
 801c638:	0802691c 	.word	0x0802691c
 801c63c:	08026a6c 	.word	0x08026a6c
 801c640:	08026994 	.word	0x08026994

0801c644 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 801c644:	b580      	push	{r7, lr}
 801c646:	b086      	sub	sp, #24
 801c648:	af02      	add	r7, sp, #8
 801c64a:	60f8      	str	r0, [r7, #12]
 801c64c:	60b9      	str	r1, [r7, #8]
 801c64e:	4613      	mov	r3, r2
 801c650:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801c652:	79fa      	ldrb	r2, [r7, #7]
 801c654:	4944      	ldr	r1, [pc, #272]	; (801c768 <etharp_output_to_arp_index+0x124>)
 801c656:	4613      	mov	r3, r2
 801c658:	005b      	lsls	r3, r3, #1
 801c65a:	4413      	add	r3, r2
 801c65c:	00db      	lsls	r3, r3, #3
 801c65e:	440b      	add	r3, r1
 801c660:	3314      	adds	r3, #20
 801c662:	781b      	ldrb	r3, [r3, #0]
 801c664:	2b01      	cmp	r3, #1
 801c666:	d806      	bhi.n	801c676 <etharp_output_to_arp_index+0x32>
 801c668:	4b40      	ldr	r3, [pc, #256]	; (801c76c <etharp_output_to_arp_index+0x128>)
 801c66a:	f240 22ee 	movw	r2, #750	; 0x2ee
 801c66e:	4940      	ldr	r1, [pc, #256]	; (801c770 <etharp_output_to_arp_index+0x12c>)
 801c670:	4840      	ldr	r0, [pc, #256]	; (801c774 <etharp_output_to_arp_index+0x130>)
 801c672:	f002 ffc7 	bl	801f604 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801c676:	79fa      	ldrb	r2, [r7, #7]
 801c678:	493b      	ldr	r1, [pc, #236]	; (801c768 <etharp_output_to_arp_index+0x124>)
 801c67a:	4613      	mov	r3, r2
 801c67c:	005b      	lsls	r3, r3, #1
 801c67e:	4413      	add	r3, r2
 801c680:	00db      	lsls	r3, r3, #3
 801c682:	440b      	add	r3, r1
 801c684:	3314      	adds	r3, #20
 801c686:	781b      	ldrb	r3, [r3, #0]
 801c688:	2b02      	cmp	r3, #2
 801c68a:	d153      	bne.n	801c734 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 801c68c:	79fa      	ldrb	r2, [r7, #7]
 801c68e:	4936      	ldr	r1, [pc, #216]	; (801c768 <etharp_output_to_arp_index+0x124>)
 801c690:	4613      	mov	r3, r2
 801c692:	005b      	lsls	r3, r3, #1
 801c694:	4413      	add	r3, r2
 801c696:	00db      	lsls	r3, r3, #3
 801c698:	440b      	add	r3, r1
 801c69a:	3312      	adds	r3, #18
 801c69c:	881b      	ldrh	r3, [r3, #0]
 801c69e:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 801c6a2:	d919      	bls.n	801c6d8 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801c6a4:	79fa      	ldrb	r2, [r7, #7]
 801c6a6:	4613      	mov	r3, r2
 801c6a8:	005b      	lsls	r3, r3, #1
 801c6aa:	4413      	add	r3, r2
 801c6ac:	00db      	lsls	r3, r3, #3
 801c6ae:	4a2e      	ldr	r2, [pc, #184]	; (801c768 <etharp_output_to_arp_index+0x124>)
 801c6b0:	4413      	add	r3, r2
 801c6b2:	3304      	adds	r3, #4
 801c6b4:	4619      	mov	r1, r3
 801c6b6:	68f8      	ldr	r0, [r7, #12]
 801c6b8:	f000 fb4c 	bl	801cd54 <etharp_request>
 801c6bc:	4603      	mov	r3, r0
 801c6be:	2b00      	cmp	r3, #0
 801c6c0:	d138      	bne.n	801c734 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801c6c2:	79fa      	ldrb	r2, [r7, #7]
 801c6c4:	4928      	ldr	r1, [pc, #160]	; (801c768 <etharp_output_to_arp_index+0x124>)
 801c6c6:	4613      	mov	r3, r2
 801c6c8:	005b      	lsls	r3, r3, #1
 801c6ca:	4413      	add	r3, r2
 801c6cc:	00db      	lsls	r3, r3, #3
 801c6ce:	440b      	add	r3, r1
 801c6d0:	3314      	adds	r3, #20
 801c6d2:	2203      	movs	r2, #3
 801c6d4:	701a      	strb	r2, [r3, #0]
 801c6d6:	e02d      	b.n	801c734 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 801c6d8:	79fa      	ldrb	r2, [r7, #7]
 801c6da:	4923      	ldr	r1, [pc, #140]	; (801c768 <etharp_output_to_arp_index+0x124>)
 801c6dc:	4613      	mov	r3, r2
 801c6de:	005b      	lsls	r3, r3, #1
 801c6e0:	4413      	add	r3, r2
 801c6e2:	00db      	lsls	r3, r3, #3
 801c6e4:	440b      	add	r3, r1
 801c6e6:	3312      	adds	r3, #18
 801c6e8:	881b      	ldrh	r3, [r3, #0]
 801c6ea:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 801c6ee:	d321      	bcc.n	801c734 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801c6f0:	79fa      	ldrb	r2, [r7, #7]
 801c6f2:	4613      	mov	r3, r2
 801c6f4:	005b      	lsls	r3, r3, #1
 801c6f6:	4413      	add	r3, r2
 801c6f8:	00db      	lsls	r3, r3, #3
 801c6fa:	4a1b      	ldr	r2, [pc, #108]	; (801c768 <etharp_output_to_arp_index+0x124>)
 801c6fc:	4413      	add	r3, r2
 801c6fe:	1d19      	adds	r1, r3, #4
 801c700:	79fa      	ldrb	r2, [r7, #7]
 801c702:	4613      	mov	r3, r2
 801c704:	005b      	lsls	r3, r3, #1
 801c706:	4413      	add	r3, r2
 801c708:	00db      	lsls	r3, r3, #3
 801c70a:	3308      	adds	r3, #8
 801c70c:	4a16      	ldr	r2, [pc, #88]	; (801c768 <etharp_output_to_arp_index+0x124>)
 801c70e:	4413      	add	r3, r2
 801c710:	3304      	adds	r3, #4
 801c712:	461a      	mov	r2, r3
 801c714:	68f8      	ldr	r0, [r7, #12]
 801c716:	f000 fafb 	bl	801cd10 <etharp_request_dst>
 801c71a:	4603      	mov	r3, r0
 801c71c:	2b00      	cmp	r3, #0
 801c71e:	d109      	bne.n	801c734 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801c720:	79fa      	ldrb	r2, [r7, #7]
 801c722:	4911      	ldr	r1, [pc, #68]	; (801c768 <etharp_output_to_arp_index+0x124>)
 801c724:	4613      	mov	r3, r2
 801c726:	005b      	lsls	r3, r3, #1
 801c728:	4413      	add	r3, r2
 801c72a:	00db      	lsls	r3, r3, #3
 801c72c:	440b      	add	r3, r1
 801c72e:	3314      	adds	r3, #20
 801c730:	2203      	movs	r2, #3
 801c732:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801c734:	68fb      	ldr	r3, [r7, #12]
 801c736:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 801c73a:	79fa      	ldrb	r2, [r7, #7]
 801c73c:	4613      	mov	r3, r2
 801c73e:	005b      	lsls	r3, r3, #1
 801c740:	4413      	add	r3, r2
 801c742:	00db      	lsls	r3, r3, #3
 801c744:	3308      	adds	r3, #8
 801c746:	4a08      	ldr	r2, [pc, #32]	; (801c768 <etharp_output_to_arp_index+0x124>)
 801c748:	4413      	add	r3, r2
 801c74a:	3304      	adds	r3, #4
 801c74c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801c750:	9200      	str	r2, [sp, #0]
 801c752:	460a      	mov	r2, r1
 801c754:	68b9      	ldr	r1, [r7, #8]
 801c756:	68f8      	ldr	r0, [r7, #12]
 801c758:	f001 fe7e 	bl	801e458 <ethernet_output>
 801c75c:	4603      	mov	r3, r0
}
 801c75e:	4618      	mov	r0, r3
 801c760:	3710      	adds	r7, #16
 801c762:	46bd      	mov	sp, r7
 801c764:	bd80      	pop	{r7, pc}
 801c766:	bf00      	nop
 801c768:	2400458c 	.word	0x2400458c
 801c76c:	0802691c 	.word	0x0802691c
 801c770:	08026a8c 	.word	0x08026a8c
 801c774:	08026994 	.word	0x08026994

0801c778 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 801c778:	b580      	push	{r7, lr}
 801c77a:	b08a      	sub	sp, #40	; 0x28
 801c77c:	af02      	add	r7, sp, #8
 801c77e:	60f8      	str	r0, [r7, #12]
 801c780:	60b9      	str	r1, [r7, #8]
 801c782:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801c784:	687b      	ldr	r3, [r7, #4]
 801c786:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801c788:	68fb      	ldr	r3, [r7, #12]
 801c78a:	2b00      	cmp	r3, #0
 801c78c:	d106      	bne.n	801c79c <etharp_output+0x24>
 801c78e:	4b73      	ldr	r3, [pc, #460]	; (801c95c <etharp_output+0x1e4>)
 801c790:	f240 321e 	movw	r2, #798	; 0x31e
 801c794:	4972      	ldr	r1, [pc, #456]	; (801c960 <etharp_output+0x1e8>)
 801c796:	4873      	ldr	r0, [pc, #460]	; (801c964 <etharp_output+0x1ec>)
 801c798:	f002 ff34 	bl	801f604 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 801c79c:	68bb      	ldr	r3, [r7, #8]
 801c79e:	2b00      	cmp	r3, #0
 801c7a0:	d106      	bne.n	801c7b0 <etharp_output+0x38>
 801c7a2:	4b6e      	ldr	r3, [pc, #440]	; (801c95c <etharp_output+0x1e4>)
 801c7a4:	f240 321f 	movw	r2, #799	; 0x31f
 801c7a8:	496f      	ldr	r1, [pc, #444]	; (801c968 <etharp_output+0x1f0>)
 801c7aa:	486e      	ldr	r0, [pc, #440]	; (801c964 <etharp_output+0x1ec>)
 801c7ac:	f002 ff2a 	bl	801f604 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801c7b0:	687b      	ldr	r3, [r7, #4]
 801c7b2:	2b00      	cmp	r3, #0
 801c7b4:	d106      	bne.n	801c7c4 <etharp_output+0x4c>
 801c7b6:	4b69      	ldr	r3, [pc, #420]	; (801c95c <etharp_output+0x1e4>)
 801c7b8:	f44f 7248 	mov.w	r2, #800	; 0x320
 801c7bc:	496b      	ldr	r1, [pc, #428]	; (801c96c <etharp_output+0x1f4>)
 801c7be:	4869      	ldr	r0, [pc, #420]	; (801c964 <etharp_output+0x1ec>)
 801c7c0:	f002 ff20 	bl	801f604 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801c7c4:	687b      	ldr	r3, [r7, #4]
 801c7c6:	681b      	ldr	r3, [r3, #0]
 801c7c8:	68f9      	ldr	r1, [r7, #12]
 801c7ca:	4618      	mov	r0, r3
 801c7cc:	f000 ff3c 	bl	801d648 <ip4_addr_isbroadcast_u32>
 801c7d0:	4603      	mov	r3, r0
 801c7d2:	2b00      	cmp	r3, #0
 801c7d4:	d002      	beq.n	801c7dc <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801c7d6:	4b66      	ldr	r3, [pc, #408]	; (801c970 <etharp_output+0x1f8>)
 801c7d8:	61fb      	str	r3, [r7, #28]
 801c7da:	e0af      	b.n	801c93c <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801c7dc:	687b      	ldr	r3, [r7, #4]
 801c7de:	681b      	ldr	r3, [r3, #0]
 801c7e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801c7e4:	2be0      	cmp	r3, #224	; 0xe0
 801c7e6:	d118      	bne.n	801c81a <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801c7e8:	2301      	movs	r3, #1
 801c7ea:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801c7ec:	2300      	movs	r3, #0
 801c7ee:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 801c7f0:	235e      	movs	r3, #94	; 0x5e
 801c7f2:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801c7f4:	687b      	ldr	r3, [r7, #4]
 801c7f6:	3301      	adds	r3, #1
 801c7f8:	781b      	ldrb	r3, [r3, #0]
 801c7fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801c7fe:	b2db      	uxtb	r3, r3
 801c800:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801c802:	687b      	ldr	r3, [r7, #4]
 801c804:	3302      	adds	r3, #2
 801c806:	781b      	ldrb	r3, [r3, #0]
 801c808:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801c80a:	687b      	ldr	r3, [r7, #4]
 801c80c:	3303      	adds	r3, #3
 801c80e:	781b      	ldrb	r3, [r3, #0]
 801c810:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801c812:	f107 0310 	add.w	r3, r7, #16
 801c816:	61fb      	str	r3, [r7, #28]
 801c818:	e090      	b.n	801c93c <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801c81a:	687b      	ldr	r3, [r7, #4]
 801c81c:	681a      	ldr	r2, [r3, #0]
 801c81e:	68fb      	ldr	r3, [r7, #12]
 801c820:	3304      	adds	r3, #4
 801c822:	681b      	ldr	r3, [r3, #0]
 801c824:	405a      	eors	r2, r3
 801c826:	68fb      	ldr	r3, [r7, #12]
 801c828:	3308      	adds	r3, #8
 801c82a:	681b      	ldr	r3, [r3, #0]
 801c82c:	4013      	ands	r3, r2
 801c82e:	2b00      	cmp	r3, #0
 801c830:	d012      	beq.n	801c858 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801c832:	687b      	ldr	r3, [r7, #4]
 801c834:	681b      	ldr	r3, [r3, #0]
 801c836:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801c838:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 801c83c:	4293      	cmp	r3, r2
 801c83e:	d00b      	beq.n	801c858 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801c840:	68fb      	ldr	r3, [r7, #12]
 801c842:	330c      	adds	r3, #12
 801c844:	681b      	ldr	r3, [r3, #0]
 801c846:	2b00      	cmp	r3, #0
 801c848:	d003      	beq.n	801c852 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801c84a:	68fb      	ldr	r3, [r7, #12]
 801c84c:	330c      	adds	r3, #12
 801c84e:	61bb      	str	r3, [r7, #24]
 801c850:	e002      	b.n	801c858 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801c852:	f06f 0303 	mvn.w	r3, #3
 801c856:	e07d      	b.n	801c954 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801c858:	4b46      	ldr	r3, [pc, #280]	; (801c974 <etharp_output+0x1fc>)
 801c85a:	781b      	ldrb	r3, [r3, #0]
 801c85c:	4619      	mov	r1, r3
 801c85e:	4a46      	ldr	r2, [pc, #280]	; (801c978 <etharp_output+0x200>)
 801c860:	460b      	mov	r3, r1
 801c862:	005b      	lsls	r3, r3, #1
 801c864:	440b      	add	r3, r1
 801c866:	00db      	lsls	r3, r3, #3
 801c868:	4413      	add	r3, r2
 801c86a:	3314      	adds	r3, #20
 801c86c:	781b      	ldrb	r3, [r3, #0]
 801c86e:	2b01      	cmp	r3, #1
 801c870:	d925      	bls.n	801c8be <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801c872:	4b40      	ldr	r3, [pc, #256]	; (801c974 <etharp_output+0x1fc>)
 801c874:	781b      	ldrb	r3, [r3, #0]
 801c876:	4619      	mov	r1, r3
 801c878:	4a3f      	ldr	r2, [pc, #252]	; (801c978 <etharp_output+0x200>)
 801c87a:	460b      	mov	r3, r1
 801c87c:	005b      	lsls	r3, r3, #1
 801c87e:	440b      	add	r3, r1
 801c880:	00db      	lsls	r3, r3, #3
 801c882:	4413      	add	r3, r2
 801c884:	3308      	adds	r3, #8
 801c886:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801c888:	68fa      	ldr	r2, [r7, #12]
 801c88a:	429a      	cmp	r2, r3
 801c88c:	d117      	bne.n	801c8be <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801c88e:	69bb      	ldr	r3, [r7, #24]
 801c890:	681a      	ldr	r2, [r3, #0]
 801c892:	4b38      	ldr	r3, [pc, #224]	; (801c974 <etharp_output+0x1fc>)
 801c894:	781b      	ldrb	r3, [r3, #0]
 801c896:	4618      	mov	r0, r3
 801c898:	4937      	ldr	r1, [pc, #220]	; (801c978 <etharp_output+0x200>)
 801c89a:	4603      	mov	r3, r0
 801c89c:	005b      	lsls	r3, r3, #1
 801c89e:	4403      	add	r3, r0
 801c8a0:	00db      	lsls	r3, r3, #3
 801c8a2:	440b      	add	r3, r1
 801c8a4:	3304      	adds	r3, #4
 801c8a6:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 801c8a8:	429a      	cmp	r2, r3
 801c8aa:	d108      	bne.n	801c8be <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 801c8ac:	4b31      	ldr	r3, [pc, #196]	; (801c974 <etharp_output+0x1fc>)
 801c8ae:	781b      	ldrb	r3, [r3, #0]
 801c8b0:	461a      	mov	r2, r3
 801c8b2:	68b9      	ldr	r1, [r7, #8]
 801c8b4:	68f8      	ldr	r0, [r7, #12]
 801c8b6:	f7ff fec5 	bl	801c644 <etharp_output_to_arp_index>
 801c8ba:	4603      	mov	r3, r0
 801c8bc:	e04a      	b.n	801c954 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801c8be:	2300      	movs	r3, #0
 801c8c0:	75fb      	strb	r3, [r7, #23]
 801c8c2:	e031      	b.n	801c928 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801c8c4:	7dfa      	ldrb	r2, [r7, #23]
 801c8c6:	492c      	ldr	r1, [pc, #176]	; (801c978 <etharp_output+0x200>)
 801c8c8:	4613      	mov	r3, r2
 801c8ca:	005b      	lsls	r3, r3, #1
 801c8cc:	4413      	add	r3, r2
 801c8ce:	00db      	lsls	r3, r3, #3
 801c8d0:	440b      	add	r3, r1
 801c8d2:	3314      	adds	r3, #20
 801c8d4:	781b      	ldrb	r3, [r3, #0]
 801c8d6:	2b01      	cmp	r3, #1
 801c8d8:	d923      	bls.n	801c922 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801c8da:	7dfa      	ldrb	r2, [r7, #23]
 801c8dc:	4926      	ldr	r1, [pc, #152]	; (801c978 <etharp_output+0x200>)
 801c8de:	4613      	mov	r3, r2
 801c8e0:	005b      	lsls	r3, r3, #1
 801c8e2:	4413      	add	r3, r2
 801c8e4:	00db      	lsls	r3, r3, #3
 801c8e6:	440b      	add	r3, r1
 801c8e8:	3308      	adds	r3, #8
 801c8ea:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801c8ec:	68fa      	ldr	r2, [r7, #12]
 801c8ee:	429a      	cmp	r2, r3
 801c8f0:	d117      	bne.n	801c922 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801c8f2:	69bb      	ldr	r3, [r7, #24]
 801c8f4:	6819      	ldr	r1, [r3, #0]
 801c8f6:	7dfa      	ldrb	r2, [r7, #23]
 801c8f8:	481f      	ldr	r0, [pc, #124]	; (801c978 <etharp_output+0x200>)
 801c8fa:	4613      	mov	r3, r2
 801c8fc:	005b      	lsls	r3, r3, #1
 801c8fe:	4413      	add	r3, r2
 801c900:	00db      	lsls	r3, r3, #3
 801c902:	4403      	add	r3, r0
 801c904:	3304      	adds	r3, #4
 801c906:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 801c908:	4299      	cmp	r1, r3
 801c90a:	d10a      	bne.n	801c922 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 801c90c:	4a19      	ldr	r2, [pc, #100]	; (801c974 <etharp_output+0x1fc>)
 801c90e:	7dfb      	ldrb	r3, [r7, #23]
 801c910:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801c912:	7dfb      	ldrb	r3, [r7, #23]
 801c914:	461a      	mov	r2, r3
 801c916:	68b9      	ldr	r1, [r7, #8]
 801c918:	68f8      	ldr	r0, [r7, #12]
 801c91a:	f7ff fe93 	bl	801c644 <etharp_output_to_arp_index>
 801c91e:	4603      	mov	r3, r0
 801c920:	e018      	b.n	801c954 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801c922:	7dfb      	ldrb	r3, [r7, #23]
 801c924:	3301      	adds	r3, #1
 801c926:	75fb      	strb	r3, [r7, #23]
 801c928:	7dfb      	ldrb	r3, [r7, #23]
 801c92a:	2b09      	cmp	r3, #9
 801c92c:	d9ca      	bls.n	801c8c4 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801c92e:	68ba      	ldr	r2, [r7, #8]
 801c930:	69b9      	ldr	r1, [r7, #24]
 801c932:	68f8      	ldr	r0, [r7, #12]
 801c934:	f000 f822 	bl	801c97c <etharp_query>
 801c938:	4603      	mov	r3, r0
 801c93a:	e00b      	b.n	801c954 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 801c93c:	68fb      	ldr	r3, [r7, #12]
 801c93e:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 801c942:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801c946:	9300      	str	r3, [sp, #0]
 801c948:	69fb      	ldr	r3, [r7, #28]
 801c94a:	68b9      	ldr	r1, [r7, #8]
 801c94c:	68f8      	ldr	r0, [r7, #12]
 801c94e:	f001 fd83 	bl	801e458 <ethernet_output>
 801c952:	4603      	mov	r3, r0
}
 801c954:	4618      	mov	r0, r3
 801c956:	3720      	adds	r7, #32
 801c958:	46bd      	mov	sp, r7
 801c95a:	bd80      	pop	{r7, pc}
 801c95c:	0802691c 	.word	0x0802691c
 801c960:	08026a6c 	.word	0x08026a6c
 801c964:	08026994 	.word	0x08026994
 801c968:	08026abc 	.word	0x08026abc
 801c96c:	08026a5c 	.word	0x08026a5c
 801c970:	08027194 	.word	0x08027194
 801c974:	2400467c 	.word	0x2400467c
 801c978:	2400458c 	.word	0x2400458c

0801c97c <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 801c97c:	b580      	push	{r7, lr}
 801c97e:	b08c      	sub	sp, #48	; 0x30
 801c980:	af02      	add	r7, sp, #8
 801c982:	60f8      	str	r0, [r7, #12]
 801c984:	60b9      	str	r1, [r7, #8]
 801c986:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 801c988:	68fb      	ldr	r3, [r7, #12]
 801c98a:	332a      	adds	r3, #42	; 0x2a
 801c98c:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801c98e:	23ff      	movs	r3, #255	; 0xff
 801c990:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 801c994:	2300      	movs	r3, #0
 801c996:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801c998:	68bb      	ldr	r3, [r7, #8]
 801c99a:	681b      	ldr	r3, [r3, #0]
 801c99c:	68f9      	ldr	r1, [r7, #12]
 801c99e:	4618      	mov	r0, r3
 801c9a0:	f000 fe52 	bl	801d648 <ip4_addr_isbroadcast_u32>
 801c9a4:	4603      	mov	r3, r0
 801c9a6:	2b00      	cmp	r3, #0
 801c9a8:	d10c      	bne.n	801c9c4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801c9aa:	68bb      	ldr	r3, [r7, #8]
 801c9ac:	681b      	ldr	r3, [r3, #0]
 801c9ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801c9b2:	2be0      	cmp	r3, #224	; 0xe0
 801c9b4:	d006      	beq.n	801c9c4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801c9b6:	68bb      	ldr	r3, [r7, #8]
 801c9b8:	2b00      	cmp	r3, #0
 801c9ba:	d003      	beq.n	801c9c4 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 801c9bc:	68bb      	ldr	r3, [r7, #8]
 801c9be:	681b      	ldr	r3, [r3, #0]
 801c9c0:	2b00      	cmp	r3, #0
 801c9c2:	d102      	bne.n	801c9ca <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801c9c4:	f06f 030f 	mvn.w	r3, #15
 801c9c8:	e101      	b.n	801cbce <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801c9ca:	68fa      	ldr	r2, [r7, #12]
 801c9cc:	2101      	movs	r1, #1
 801c9ce:	68b8      	ldr	r0, [r7, #8]
 801c9d0:	f7ff fb5c 	bl	801c08c <etharp_find_entry>
 801c9d4:	4603      	mov	r3, r0
 801c9d6:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 801c9d8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801c9dc:	2b00      	cmp	r3, #0
 801c9de:	da02      	bge.n	801c9e6 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 801c9e0:	8a7b      	ldrh	r3, [r7, #18]
 801c9e2:	b25b      	sxtb	r3, r3
 801c9e4:	e0f3      	b.n	801cbce <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801c9e6:	8a7b      	ldrh	r3, [r7, #18]
 801c9e8:	2b7e      	cmp	r3, #126	; 0x7e
 801c9ea:	d906      	bls.n	801c9fa <etharp_query+0x7e>
 801c9ec:	4b7a      	ldr	r3, [pc, #488]	; (801cbd8 <etharp_query+0x25c>)
 801c9ee:	f240 32c1 	movw	r2, #961	; 0x3c1
 801c9f2:	497a      	ldr	r1, [pc, #488]	; (801cbdc <etharp_query+0x260>)
 801c9f4:	487a      	ldr	r0, [pc, #488]	; (801cbe0 <etharp_query+0x264>)
 801c9f6:	f002 fe05 	bl	801f604 <iprintf>
  i = (netif_addr_idx_t)i_err;
 801c9fa:	8a7b      	ldrh	r3, [r7, #18]
 801c9fc:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801c9fe:	7c7a      	ldrb	r2, [r7, #17]
 801ca00:	4978      	ldr	r1, [pc, #480]	; (801cbe4 <etharp_query+0x268>)
 801ca02:	4613      	mov	r3, r2
 801ca04:	005b      	lsls	r3, r3, #1
 801ca06:	4413      	add	r3, r2
 801ca08:	00db      	lsls	r3, r3, #3
 801ca0a:	440b      	add	r3, r1
 801ca0c:	3314      	adds	r3, #20
 801ca0e:	781b      	ldrb	r3, [r3, #0]
 801ca10:	2b00      	cmp	r3, #0
 801ca12:	d115      	bne.n	801ca40 <etharp_query+0xc4>
    is_new_entry = 1;
 801ca14:	2301      	movs	r3, #1
 801ca16:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 801ca18:	7c7a      	ldrb	r2, [r7, #17]
 801ca1a:	4972      	ldr	r1, [pc, #456]	; (801cbe4 <etharp_query+0x268>)
 801ca1c:	4613      	mov	r3, r2
 801ca1e:	005b      	lsls	r3, r3, #1
 801ca20:	4413      	add	r3, r2
 801ca22:	00db      	lsls	r3, r3, #3
 801ca24:	440b      	add	r3, r1
 801ca26:	3314      	adds	r3, #20
 801ca28:	2201      	movs	r2, #1
 801ca2a:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 801ca2c:	7c7a      	ldrb	r2, [r7, #17]
 801ca2e:	496d      	ldr	r1, [pc, #436]	; (801cbe4 <etharp_query+0x268>)
 801ca30:	4613      	mov	r3, r2
 801ca32:	005b      	lsls	r3, r3, #1
 801ca34:	4413      	add	r3, r2
 801ca36:	00db      	lsls	r3, r3, #3
 801ca38:	440b      	add	r3, r1
 801ca3a:	3308      	adds	r3, #8
 801ca3c:	68fa      	ldr	r2, [r7, #12]
 801ca3e:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801ca40:	7c7a      	ldrb	r2, [r7, #17]
 801ca42:	4968      	ldr	r1, [pc, #416]	; (801cbe4 <etharp_query+0x268>)
 801ca44:	4613      	mov	r3, r2
 801ca46:	005b      	lsls	r3, r3, #1
 801ca48:	4413      	add	r3, r2
 801ca4a:	00db      	lsls	r3, r3, #3
 801ca4c:	440b      	add	r3, r1
 801ca4e:	3314      	adds	r3, #20
 801ca50:	781b      	ldrb	r3, [r3, #0]
 801ca52:	2b01      	cmp	r3, #1
 801ca54:	d011      	beq.n	801ca7a <etharp_query+0xfe>
 801ca56:	7c7a      	ldrb	r2, [r7, #17]
 801ca58:	4962      	ldr	r1, [pc, #392]	; (801cbe4 <etharp_query+0x268>)
 801ca5a:	4613      	mov	r3, r2
 801ca5c:	005b      	lsls	r3, r3, #1
 801ca5e:	4413      	add	r3, r2
 801ca60:	00db      	lsls	r3, r3, #3
 801ca62:	440b      	add	r3, r1
 801ca64:	3314      	adds	r3, #20
 801ca66:	781b      	ldrb	r3, [r3, #0]
 801ca68:	2b01      	cmp	r3, #1
 801ca6a:	d806      	bhi.n	801ca7a <etharp_query+0xfe>
 801ca6c:	4b5a      	ldr	r3, [pc, #360]	; (801cbd8 <etharp_query+0x25c>)
 801ca6e:	f240 32cd 	movw	r2, #973	; 0x3cd
 801ca72:	495d      	ldr	r1, [pc, #372]	; (801cbe8 <etharp_query+0x26c>)
 801ca74:	485a      	ldr	r0, [pc, #360]	; (801cbe0 <etharp_query+0x264>)
 801ca76:	f002 fdc5 	bl	801f604 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801ca7a:	6a3b      	ldr	r3, [r7, #32]
 801ca7c:	2b00      	cmp	r3, #0
 801ca7e:	d102      	bne.n	801ca86 <etharp_query+0x10a>
 801ca80:	687b      	ldr	r3, [r7, #4]
 801ca82:	2b00      	cmp	r3, #0
 801ca84:	d10c      	bne.n	801caa0 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801ca86:	68b9      	ldr	r1, [r7, #8]
 801ca88:	68f8      	ldr	r0, [r7, #12]
 801ca8a:	f000 f963 	bl	801cd54 <etharp_request>
 801ca8e:	4603      	mov	r3, r0
 801ca90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 801ca94:	687b      	ldr	r3, [r7, #4]
 801ca96:	2b00      	cmp	r3, #0
 801ca98:	d102      	bne.n	801caa0 <etharp_query+0x124>
      return result;
 801ca9a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801ca9e:	e096      	b.n	801cbce <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801caa0:	687b      	ldr	r3, [r7, #4]
 801caa2:	2b00      	cmp	r3, #0
 801caa4:	d106      	bne.n	801cab4 <etharp_query+0x138>
 801caa6:	4b4c      	ldr	r3, [pc, #304]	; (801cbd8 <etharp_query+0x25c>)
 801caa8:	f240 32e1 	movw	r2, #993	; 0x3e1
 801caac:	494f      	ldr	r1, [pc, #316]	; (801cbec <etharp_query+0x270>)
 801caae:	484c      	ldr	r0, [pc, #304]	; (801cbe0 <etharp_query+0x264>)
 801cab0:	f002 fda8 	bl	801f604 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801cab4:	7c7a      	ldrb	r2, [r7, #17]
 801cab6:	494b      	ldr	r1, [pc, #300]	; (801cbe4 <etharp_query+0x268>)
 801cab8:	4613      	mov	r3, r2
 801caba:	005b      	lsls	r3, r3, #1
 801cabc:	4413      	add	r3, r2
 801cabe:	00db      	lsls	r3, r3, #3
 801cac0:	440b      	add	r3, r1
 801cac2:	3314      	adds	r3, #20
 801cac4:	781b      	ldrb	r3, [r3, #0]
 801cac6:	2b01      	cmp	r3, #1
 801cac8:	d917      	bls.n	801cafa <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801caca:	4a49      	ldr	r2, [pc, #292]	; (801cbf0 <etharp_query+0x274>)
 801cacc:	7c7b      	ldrb	r3, [r7, #17]
 801cace:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801cad0:	7c7a      	ldrb	r2, [r7, #17]
 801cad2:	4613      	mov	r3, r2
 801cad4:	005b      	lsls	r3, r3, #1
 801cad6:	4413      	add	r3, r2
 801cad8:	00db      	lsls	r3, r3, #3
 801cada:	3308      	adds	r3, #8
 801cadc:	4a41      	ldr	r2, [pc, #260]	; (801cbe4 <etharp_query+0x268>)
 801cade:	4413      	add	r3, r2
 801cae0:	3304      	adds	r3, #4
 801cae2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801cae6:	9200      	str	r2, [sp, #0]
 801cae8:	697a      	ldr	r2, [r7, #20]
 801caea:	6879      	ldr	r1, [r7, #4]
 801caec:	68f8      	ldr	r0, [r7, #12]
 801caee:	f001 fcb3 	bl	801e458 <ethernet_output>
 801caf2:	4603      	mov	r3, r0
 801caf4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801caf8:	e067      	b.n	801cbca <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801cafa:	7c7a      	ldrb	r2, [r7, #17]
 801cafc:	4939      	ldr	r1, [pc, #228]	; (801cbe4 <etharp_query+0x268>)
 801cafe:	4613      	mov	r3, r2
 801cb00:	005b      	lsls	r3, r3, #1
 801cb02:	4413      	add	r3, r2
 801cb04:	00db      	lsls	r3, r3, #3
 801cb06:	440b      	add	r3, r1
 801cb08:	3314      	adds	r3, #20
 801cb0a:	781b      	ldrb	r3, [r3, #0]
 801cb0c:	2b01      	cmp	r3, #1
 801cb0e:	d15c      	bne.n	801cbca <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801cb10:	2300      	movs	r3, #0
 801cb12:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 801cb14:	687b      	ldr	r3, [r7, #4]
 801cb16:	61fb      	str	r3, [r7, #28]
    while (p) {
 801cb18:	e01c      	b.n	801cb54 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801cb1a:	69fb      	ldr	r3, [r7, #28]
 801cb1c:	895a      	ldrh	r2, [r3, #10]
 801cb1e:	69fb      	ldr	r3, [r7, #28]
 801cb20:	891b      	ldrh	r3, [r3, #8]
 801cb22:	429a      	cmp	r2, r3
 801cb24:	d10a      	bne.n	801cb3c <etharp_query+0x1c0>
 801cb26:	69fb      	ldr	r3, [r7, #28]
 801cb28:	681b      	ldr	r3, [r3, #0]
 801cb2a:	2b00      	cmp	r3, #0
 801cb2c:	d006      	beq.n	801cb3c <etharp_query+0x1c0>
 801cb2e:	4b2a      	ldr	r3, [pc, #168]	; (801cbd8 <etharp_query+0x25c>)
 801cb30:	f240 32f1 	movw	r2, #1009	; 0x3f1
 801cb34:	492f      	ldr	r1, [pc, #188]	; (801cbf4 <etharp_query+0x278>)
 801cb36:	482a      	ldr	r0, [pc, #168]	; (801cbe0 <etharp_query+0x264>)
 801cb38:	f002 fd64 	bl	801f604 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 801cb3c:	69fb      	ldr	r3, [r7, #28]
 801cb3e:	7b1b      	ldrb	r3, [r3, #12]
 801cb40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801cb44:	2b00      	cmp	r3, #0
 801cb46:	d002      	beq.n	801cb4e <etharp_query+0x1d2>
        copy_needed = 1;
 801cb48:	2301      	movs	r3, #1
 801cb4a:	61bb      	str	r3, [r7, #24]
        break;
 801cb4c:	e005      	b.n	801cb5a <etharp_query+0x1de>
      }
      p = p->next;
 801cb4e:	69fb      	ldr	r3, [r7, #28]
 801cb50:	681b      	ldr	r3, [r3, #0]
 801cb52:	61fb      	str	r3, [r7, #28]
    while (p) {
 801cb54:	69fb      	ldr	r3, [r7, #28]
 801cb56:	2b00      	cmp	r3, #0
 801cb58:	d1df      	bne.n	801cb1a <etharp_query+0x19e>
    }
    if (copy_needed) {
 801cb5a:	69bb      	ldr	r3, [r7, #24]
 801cb5c:	2b00      	cmp	r3, #0
 801cb5e:	d007      	beq.n	801cb70 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 801cb60:	687a      	ldr	r2, [r7, #4]
 801cb62:	f44f 7120 	mov.w	r1, #640	; 0x280
 801cb66:	200e      	movs	r0, #14
 801cb68:	f7f6 fb9c 	bl	80132a4 <pbuf_clone>
 801cb6c:	61f8      	str	r0, [r7, #28]
 801cb6e:	e004      	b.n	801cb7a <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801cb70:	687b      	ldr	r3, [r7, #4]
 801cb72:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801cb74:	69f8      	ldr	r0, [r7, #28]
 801cb76:	f7f6 f9c3 	bl	8012f00 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801cb7a:	69fb      	ldr	r3, [r7, #28]
 801cb7c:	2b00      	cmp	r3, #0
 801cb7e:	d021      	beq.n	801cbc4 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801cb80:	7c7a      	ldrb	r2, [r7, #17]
 801cb82:	4918      	ldr	r1, [pc, #96]	; (801cbe4 <etharp_query+0x268>)
 801cb84:	4613      	mov	r3, r2
 801cb86:	005b      	lsls	r3, r3, #1
 801cb88:	4413      	add	r3, r2
 801cb8a:	00db      	lsls	r3, r3, #3
 801cb8c:	440b      	add	r3, r1
 801cb8e:	681b      	ldr	r3, [r3, #0]
 801cb90:	2b00      	cmp	r3, #0
 801cb92:	d00a      	beq.n	801cbaa <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 801cb94:	7c7a      	ldrb	r2, [r7, #17]
 801cb96:	4913      	ldr	r1, [pc, #76]	; (801cbe4 <etharp_query+0x268>)
 801cb98:	4613      	mov	r3, r2
 801cb9a:	005b      	lsls	r3, r3, #1
 801cb9c:	4413      	add	r3, r2
 801cb9e:	00db      	lsls	r3, r3, #3
 801cba0:	440b      	add	r3, r1
 801cba2:	681b      	ldr	r3, [r3, #0]
 801cba4:	4618      	mov	r0, r3
 801cba6:	f7f6 f905 	bl	8012db4 <pbuf_free>
      }
      arp_table[i].q = p;
 801cbaa:	7c7a      	ldrb	r2, [r7, #17]
 801cbac:	490d      	ldr	r1, [pc, #52]	; (801cbe4 <etharp_query+0x268>)
 801cbae:	4613      	mov	r3, r2
 801cbb0:	005b      	lsls	r3, r3, #1
 801cbb2:	4413      	add	r3, r2
 801cbb4:	00db      	lsls	r3, r3, #3
 801cbb6:	440b      	add	r3, r1
 801cbb8:	69fa      	ldr	r2, [r7, #28]
 801cbba:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 801cbbc:	2300      	movs	r3, #0
 801cbbe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801cbc2:	e002      	b.n	801cbca <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801cbc4:	23ff      	movs	r3, #255	; 0xff
 801cbc6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 801cbca:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 801cbce:	4618      	mov	r0, r3
 801cbd0:	3728      	adds	r7, #40	; 0x28
 801cbd2:	46bd      	mov	sp, r7
 801cbd4:	bd80      	pop	{r7, pc}
 801cbd6:	bf00      	nop
 801cbd8:	0802691c 	.word	0x0802691c
 801cbdc:	08026ac8 	.word	0x08026ac8
 801cbe0:	08026994 	.word	0x08026994
 801cbe4:	2400458c 	.word	0x2400458c
 801cbe8:	08026ad8 	.word	0x08026ad8
 801cbec:	08026abc 	.word	0x08026abc
 801cbf0:	2400467c 	.word	0x2400467c
 801cbf4:	08026b00 	.word	0x08026b00

0801cbf8 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 801cbf8:	b580      	push	{r7, lr}
 801cbfa:	b08a      	sub	sp, #40	; 0x28
 801cbfc:	af02      	add	r7, sp, #8
 801cbfe:	60f8      	str	r0, [r7, #12]
 801cc00:	60b9      	str	r1, [r7, #8]
 801cc02:	607a      	str	r2, [r7, #4]
 801cc04:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801cc06:	2300      	movs	r3, #0
 801cc08:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801cc0a:	68fb      	ldr	r3, [r7, #12]
 801cc0c:	2b00      	cmp	r3, #0
 801cc0e:	d106      	bne.n	801cc1e <etharp_raw+0x26>
 801cc10:	4b3a      	ldr	r3, [pc, #232]	; (801ccfc <etharp_raw+0x104>)
 801cc12:	f240 4257 	movw	r2, #1111	; 0x457
 801cc16:	493a      	ldr	r1, [pc, #232]	; (801cd00 <etharp_raw+0x108>)
 801cc18:	483a      	ldr	r0, [pc, #232]	; (801cd04 <etharp_raw+0x10c>)
 801cc1a:	f002 fcf3 	bl	801f604 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801cc1e:	f44f 7220 	mov.w	r2, #640	; 0x280
 801cc22:	211c      	movs	r1, #28
 801cc24:	200e      	movs	r0, #14
 801cc26:	f7f5 fdaf 	bl	8012788 <pbuf_alloc>
 801cc2a:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801cc2c:	69bb      	ldr	r3, [r7, #24]
 801cc2e:	2b00      	cmp	r3, #0
 801cc30:	d102      	bne.n	801cc38 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801cc32:	f04f 33ff 	mov.w	r3, #4294967295
 801cc36:	e05d      	b.n	801ccf4 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801cc38:	69bb      	ldr	r3, [r7, #24]
 801cc3a:	895b      	ldrh	r3, [r3, #10]
 801cc3c:	2b1b      	cmp	r3, #27
 801cc3e:	d806      	bhi.n	801cc4e <etharp_raw+0x56>
 801cc40:	4b2e      	ldr	r3, [pc, #184]	; (801ccfc <etharp_raw+0x104>)
 801cc42:	f240 4262 	movw	r2, #1122	; 0x462
 801cc46:	4930      	ldr	r1, [pc, #192]	; (801cd08 <etharp_raw+0x110>)
 801cc48:	482e      	ldr	r0, [pc, #184]	; (801cd04 <etharp_raw+0x10c>)
 801cc4a:	f002 fcdb 	bl	801f604 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801cc4e:	69bb      	ldr	r3, [r7, #24]
 801cc50:	685b      	ldr	r3, [r3, #4]
 801cc52:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801cc54:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801cc56:	4618      	mov	r0, r3
 801cc58:	f7f4 fbc4 	bl	80113e4 <lwip_htons>
 801cc5c:	4603      	mov	r3, r0
 801cc5e:	461a      	mov	r2, r3
 801cc60:	697b      	ldr	r3, [r7, #20]
 801cc62:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801cc64:	68fb      	ldr	r3, [r7, #12]
 801cc66:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801cc6a:	2b06      	cmp	r3, #6
 801cc6c:	d006      	beq.n	801cc7c <etharp_raw+0x84>
 801cc6e:	4b23      	ldr	r3, [pc, #140]	; (801ccfc <etharp_raw+0x104>)
 801cc70:	f240 4269 	movw	r2, #1129	; 0x469
 801cc74:	4925      	ldr	r1, [pc, #148]	; (801cd0c <etharp_raw+0x114>)
 801cc76:	4823      	ldr	r0, [pc, #140]	; (801cd04 <etharp_raw+0x10c>)
 801cc78:	f002 fcc4 	bl	801f604 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801cc7c:	697b      	ldr	r3, [r7, #20]
 801cc7e:	3308      	adds	r3, #8
 801cc80:	2206      	movs	r2, #6
 801cc82:	6839      	ldr	r1, [r7, #0]
 801cc84:	4618      	mov	r0, r3
 801cc86:	f001 fe47 	bl	801e918 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801cc8a:	697b      	ldr	r3, [r7, #20]
 801cc8c:	3312      	adds	r3, #18
 801cc8e:	2206      	movs	r2, #6
 801cc90:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801cc92:	4618      	mov	r0, r3
 801cc94:	f001 fe40 	bl	801e918 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 801cc98:	697b      	ldr	r3, [r7, #20]
 801cc9a:	330e      	adds	r3, #14
 801cc9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801cc9e:	6812      	ldr	r2, [r2, #0]
 801cca0:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801cca2:	697b      	ldr	r3, [r7, #20]
 801cca4:	3318      	adds	r3, #24
 801cca6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801cca8:	6812      	ldr	r2, [r2, #0]
 801ccaa:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 801ccac:	697b      	ldr	r3, [r7, #20]
 801ccae:	2200      	movs	r2, #0
 801ccb0:	701a      	strb	r2, [r3, #0]
 801ccb2:	2200      	movs	r2, #0
 801ccb4:	f042 0201 	orr.w	r2, r2, #1
 801ccb8:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801ccba:	697b      	ldr	r3, [r7, #20]
 801ccbc:	2200      	movs	r2, #0
 801ccbe:	f042 0208 	orr.w	r2, r2, #8
 801ccc2:	709a      	strb	r2, [r3, #2]
 801ccc4:	2200      	movs	r2, #0
 801ccc6:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801ccc8:	697b      	ldr	r3, [r7, #20]
 801ccca:	2206      	movs	r2, #6
 801cccc:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801ccce:	697b      	ldr	r3, [r7, #20]
 801ccd0:	2204      	movs	r2, #4
 801ccd2:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801ccd4:	f640 0306 	movw	r3, #2054	; 0x806
 801ccd8:	9300      	str	r3, [sp, #0]
 801ccda:	687b      	ldr	r3, [r7, #4]
 801ccdc:	68ba      	ldr	r2, [r7, #8]
 801ccde:	69b9      	ldr	r1, [r7, #24]
 801cce0:	68f8      	ldr	r0, [r7, #12]
 801cce2:	f001 fbb9 	bl	801e458 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801cce6:	69b8      	ldr	r0, [r7, #24]
 801cce8:	f7f6 f864 	bl	8012db4 <pbuf_free>
  p = NULL;
 801ccec:	2300      	movs	r3, #0
 801ccee:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801ccf0:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801ccf4:	4618      	mov	r0, r3
 801ccf6:	3720      	adds	r7, #32
 801ccf8:	46bd      	mov	sp, r7
 801ccfa:	bd80      	pop	{r7, pc}
 801ccfc:	0802691c 	.word	0x0802691c
 801cd00:	08026a6c 	.word	0x08026a6c
 801cd04:	08026994 	.word	0x08026994
 801cd08:	08026b1c 	.word	0x08026b1c
 801cd0c:	08026b50 	.word	0x08026b50

0801cd10 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 801cd10:	b580      	push	{r7, lr}
 801cd12:	b088      	sub	sp, #32
 801cd14:	af04      	add	r7, sp, #16
 801cd16:	60f8      	str	r0, [r7, #12]
 801cd18:	60b9      	str	r1, [r7, #8]
 801cd1a:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801cd1c:	68fb      	ldr	r3, [r7, #12]
 801cd1e:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801cd22:	68fb      	ldr	r3, [r7, #12]
 801cd24:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 801cd28:	68fb      	ldr	r3, [r7, #12]
 801cd2a:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801cd2c:	2201      	movs	r2, #1
 801cd2e:	9203      	str	r2, [sp, #12]
 801cd30:	68ba      	ldr	r2, [r7, #8]
 801cd32:	9202      	str	r2, [sp, #8]
 801cd34:	4a06      	ldr	r2, [pc, #24]	; (801cd50 <etharp_request_dst+0x40>)
 801cd36:	9201      	str	r2, [sp, #4]
 801cd38:	9300      	str	r3, [sp, #0]
 801cd3a:	4603      	mov	r3, r0
 801cd3c:	687a      	ldr	r2, [r7, #4]
 801cd3e:	68f8      	ldr	r0, [r7, #12]
 801cd40:	f7ff ff5a 	bl	801cbf8 <etharp_raw>
 801cd44:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801cd46:	4618      	mov	r0, r3
 801cd48:	3710      	adds	r7, #16
 801cd4a:	46bd      	mov	sp, r7
 801cd4c:	bd80      	pop	{r7, pc}
 801cd4e:	bf00      	nop
 801cd50:	0802719c 	.word	0x0802719c

0801cd54 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801cd54:	b580      	push	{r7, lr}
 801cd56:	b082      	sub	sp, #8
 801cd58:	af00      	add	r7, sp, #0
 801cd5a:	6078      	str	r0, [r7, #4]
 801cd5c:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801cd5e:	4a05      	ldr	r2, [pc, #20]	; (801cd74 <etharp_request+0x20>)
 801cd60:	6839      	ldr	r1, [r7, #0]
 801cd62:	6878      	ldr	r0, [r7, #4]
 801cd64:	f7ff ffd4 	bl	801cd10 <etharp_request_dst>
 801cd68:	4603      	mov	r3, r0
}
 801cd6a:	4618      	mov	r0, r3
 801cd6c:	3708      	adds	r7, #8
 801cd6e:	46bd      	mov	sp, r7
 801cd70:	bd80      	pop	{r7, pc}
 801cd72:	bf00      	nop
 801cd74:	08027194 	.word	0x08027194

0801cd78 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 801cd78:	b580      	push	{r7, lr}
 801cd7a:	b08e      	sub	sp, #56	; 0x38
 801cd7c:	af04      	add	r7, sp, #16
 801cd7e:	6078      	str	r0, [r7, #4]
 801cd80:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801cd82:	4b87      	ldr	r3, [pc, #540]	; (801cfa0 <icmp_input+0x228>)
 801cd84:	689b      	ldr	r3, [r3, #8]
 801cd86:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 801cd88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cd8a:	781b      	ldrb	r3, [r3, #0]
 801cd8c:	f003 030f 	and.w	r3, r3, #15
 801cd90:	b2db      	uxtb	r3, r3
 801cd92:	009b      	lsls	r3, r3, #2
 801cd94:	b2db      	uxtb	r3, r3
 801cd96:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 801cd98:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801cd9a:	2b13      	cmp	r3, #19
 801cd9c:	f240 80e8 	bls.w	801cf70 <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 801cda0:	687b      	ldr	r3, [r7, #4]
 801cda2:	895b      	ldrh	r3, [r3, #10]
 801cda4:	2b03      	cmp	r3, #3
 801cda6:	f240 80e5 	bls.w	801cf74 <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801cdaa:	687b      	ldr	r3, [r7, #4]
 801cdac:	685b      	ldr	r3, [r3, #4]
 801cdae:	781b      	ldrb	r3, [r3, #0]
 801cdb0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 801cdb4:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 801cdb8:	2b00      	cmp	r3, #0
 801cdba:	f000 80d2 	beq.w	801cf62 <icmp_input+0x1ea>
 801cdbe:	2b08      	cmp	r3, #8
 801cdc0:	f040 80d2 	bne.w	801cf68 <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 801cdc4:	4b77      	ldr	r3, [pc, #476]	; (801cfa4 <icmp_input+0x22c>)
 801cdc6:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801cdc8:	4b75      	ldr	r3, [pc, #468]	; (801cfa0 <icmp_input+0x228>)
 801cdca:	695b      	ldr	r3, [r3, #20]
 801cdcc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801cdd0:	2be0      	cmp	r3, #224	; 0xe0
 801cdd2:	f000 80d6 	beq.w	801cf82 <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801cdd6:	4b72      	ldr	r3, [pc, #456]	; (801cfa0 <icmp_input+0x228>)
 801cdd8:	695b      	ldr	r3, [r3, #20]
 801cdda:	4a71      	ldr	r2, [pc, #452]	; (801cfa0 <icmp_input+0x228>)
 801cddc:	6812      	ldr	r2, [r2, #0]
 801cdde:	4611      	mov	r1, r2
 801cde0:	4618      	mov	r0, r3
 801cde2:	f000 fc31 	bl	801d648 <ip4_addr_isbroadcast_u32>
 801cde6:	4603      	mov	r3, r0
 801cde8:	2b00      	cmp	r3, #0
 801cdea:	f040 80cc 	bne.w	801cf86 <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801cdee:	687b      	ldr	r3, [r7, #4]
 801cdf0:	891b      	ldrh	r3, [r3, #8]
 801cdf2:	2b07      	cmp	r3, #7
 801cdf4:	f240 80c0 	bls.w	801cf78 <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 801cdf8:	6878      	ldr	r0, [r7, #4]
 801cdfa:	f7f4 fb90 	bl	801151e <inet_chksum_pbuf>
 801cdfe:	4603      	mov	r3, r0
 801ce00:	2b00      	cmp	r3, #0
 801ce02:	d003      	beq.n	801ce0c <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 801ce04:	6878      	ldr	r0, [r7, #4]
 801ce06:	f7f5 ffd5 	bl	8012db4 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 801ce0a:	e0c5      	b.n	801cf98 <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801ce0c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801ce0e:	330e      	adds	r3, #14
 801ce10:	4619      	mov	r1, r3
 801ce12:	6878      	ldr	r0, [r7, #4]
 801ce14:	f7f5 ff06 	bl	8012c24 <pbuf_add_header>
 801ce18:	4603      	mov	r3, r0
 801ce1a:	2b00      	cmp	r3, #0
 801ce1c:	d04b      	beq.n	801ceb6 <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801ce1e:	687b      	ldr	r3, [r7, #4]
 801ce20:	891a      	ldrh	r2, [r3, #8]
 801ce22:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801ce24:	4413      	add	r3, r2
 801ce26:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 801ce28:	687b      	ldr	r3, [r7, #4]
 801ce2a:	891b      	ldrh	r3, [r3, #8]
 801ce2c:	8b7a      	ldrh	r2, [r7, #26]
 801ce2e:	429a      	cmp	r2, r3
 801ce30:	f0c0 80ab 	bcc.w	801cf8a <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801ce34:	8b7b      	ldrh	r3, [r7, #26]
 801ce36:	f44f 7220 	mov.w	r2, #640	; 0x280
 801ce3a:	4619      	mov	r1, r3
 801ce3c:	200e      	movs	r0, #14
 801ce3e:	f7f5 fca3 	bl	8012788 <pbuf_alloc>
 801ce42:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801ce44:	697b      	ldr	r3, [r7, #20]
 801ce46:	2b00      	cmp	r3, #0
 801ce48:	f000 80a1 	beq.w	801cf8e <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801ce4c:	697b      	ldr	r3, [r7, #20]
 801ce4e:	895b      	ldrh	r3, [r3, #10]
 801ce50:	461a      	mov	r2, r3
 801ce52:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801ce54:	3308      	adds	r3, #8
 801ce56:	429a      	cmp	r2, r3
 801ce58:	d203      	bcs.n	801ce62 <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801ce5a:	6978      	ldr	r0, [r7, #20]
 801ce5c:	f7f5 ffaa 	bl	8012db4 <pbuf_free>
          goto icmperr;
 801ce60:	e096      	b.n	801cf90 <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801ce62:	697b      	ldr	r3, [r7, #20]
 801ce64:	685b      	ldr	r3, [r3, #4]
 801ce66:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801ce68:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801ce6a:	4618      	mov	r0, r3
 801ce6c:	f001 fd54 	bl	801e918 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 801ce70:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801ce72:	4619      	mov	r1, r3
 801ce74:	6978      	ldr	r0, [r7, #20]
 801ce76:	f7f5 fee5 	bl	8012c44 <pbuf_remove_header>
 801ce7a:	4603      	mov	r3, r0
 801ce7c:	2b00      	cmp	r3, #0
 801ce7e:	d009      	beq.n	801ce94 <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801ce80:	4b49      	ldr	r3, [pc, #292]	; (801cfa8 <icmp_input+0x230>)
 801ce82:	22b6      	movs	r2, #182	; 0xb6
 801ce84:	4949      	ldr	r1, [pc, #292]	; (801cfac <icmp_input+0x234>)
 801ce86:	484a      	ldr	r0, [pc, #296]	; (801cfb0 <icmp_input+0x238>)
 801ce88:	f002 fbbc 	bl	801f604 <iprintf>
          pbuf_free(r);
 801ce8c:	6978      	ldr	r0, [r7, #20]
 801ce8e:	f7f5 ff91 	bl	8012db4 <pbuf_free>
          goto icmperr;
 801ce92:	e07d      	b.n	801cf90 <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 801ce94:	6879      	ldr	r1, [r7, #4]
 801ce96:	6978      	ldr	r0, [r7, #20]
 801ce98:	f7f6 f8c0 	bl	801301c <pbuf_copy>
 801ce9c:	4603      	mov	r3, r0
 801ce9e:	2b00      	cmp	r3, #0
 801cea0:	d003      	beq.n	801ceaa <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801cea2:	6978      	ldr	r0, [r7, #20]
 801cea4:	f7f5 ff86 	bl	8012db4 <pbuf_free>
          goto icmperr;
 801cea8:	e072      	b.n	801cf90 <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 801ceaa:	6878      	ldr	r0, [r7, #4]
 801ceac:	f7f5 ff82 	bl	8012db4 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 801ceb0:	697b      	ldr	r3, [r7, #20]
 801ceb2:	607b      	str	r3, [r7, #4]
 801ceb4:	e00f      	b.n	801ced6 <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801ceb6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801ceb8:	330e      	adds	r3, #14
 801ceba:	4619      	mov	r1, r3
 801cebc:	6878      	ldr	r0, [r7, #4]
 801cebe:	f7f5 fec1 	bl	8012c44 <pbuf_remove_header>
 801cec2:	4603      	mov	r3, r0
 801cec4:	2b00      	cmp	r3, #0
 801cec6:	d006      	beq.n	801ced6 <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801cec8:	4b37      	ldr	r3, [pc, #220]	; (801cfa8 <icmp_input+0x230>)
 801ceca:	22c7      	movs	r2, #199	; 0xc7
 801cecc:	4939      	ldr	r1, [pc, #228]	; (801cfb4 <icmp_input+0x23c>)
 801cece:	4838      	ldr	r0, [pc, #224]	; (801cfb0 <icmp_input+0x238>)
 801ced0:	f002 fb98 	bl	801f604 <iprintf>
          goto icmperr;
 801ced4:	e05c      	b.n	801cf90 <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801ced6:	687b      	ldr	r3, [r7, #4]
 801ced8:	685b      	ldr	r3, [r3, #4]
 801ceda:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 801cedc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801cede:	4619      	mov	r1, r3
 801cee0:	6878      	ldr	r0, [r7, #4]
 801cee2:	f7f5 fe9f 	bl	8012c24 <pbuf_add_header>
 801cee6:	4603      	mov	r3, r0
 801cee8:	2b00      	cmp	r3, #0
 801ceea:	d13c      	bne.n	801cf66 <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801ceec:	687b      	ldr	r3, [r7, #4]
 801ceee:	685b      	ldr	r3, [r3, #4]
 801cef0:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801cef2:	69fb      	ldr	r3, [r7, #28]
 801cef4:	681a      	ldr	r2, [r3, #0]
 801cef6:	68fb      	ldr	r3, [r7, #12]
 801cef8:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801cefa:	4b29      	ldr	r3, [pc, #164]	; (801cfa0 <icmp_input+0x228>)
 801cefc:	691a      	ldr	r2, [r3, #16]
 801cefe:	68fb      	ldr	r3, [r7, #12]
 801cf00:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801cf02:	693b      	ldr	r3, [r7, #16]
 801cf04:	2200      	movs	r2, #0
 801cf06:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 801cf08:	693b      	ldr	r3, [r7, #16]
 801cf0a:	885b      	ldrh	r3, [r3, #2]
 801cf0c:	b29b      	uxth	r3, r3
 801cf0e:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 801cf12:	4293      	cmp	r3, r2
 801cf14:	d907      	bls.n	801cf26 <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 801cf16:	693b      	ldr	r3, [r7, #16]
 801cf18:	885b      	ldrh	r3, [r3, #2]
 801cf1a:	b29b      	uxth	r3, r3
 801cf1c:	3309      	adds	r3, #9
 801cf1e:	b29a      	uxth	r2, r3
 801cf20:	693b      	ldr	r3, [r7, #16]
 801cf22:	805a      	strh	r2, [r3, #2]
 801cf24:	e006      	b.n	801cf34 <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 801cf26:	693b      	ldr	r3, [r7, #16]
 801cf28:	885b      	ldrh	r3, [r3, #2]
 801cf2a:	b29b      	uxth	r3, r3
 801cf2c:	3308      	adds	r3, #8
 801cf2e:	b29a      	uxth	r2, r3
 801cf30:	693b      	ldr	r3, [r7, #16]
 801cf32:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801cf34:	68fb      	ldr	r3, [r7, #12]
 801cf36:	22ff      	movs	r2, #255	; 0xff
 801cf38:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 801cf3a:	68fb      	ldr	r3, [r7, #12]
 801cf3c:	2200      	movs	r2, #0
 801cf3e:	729a      	strb	r2, [r3, #10]
 801cf40:	2200      	movs	r2, #0
 801cf42:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801cf44:	683b      	ldr	r3, [r7, #0]
 801cf46:	9302      	str	r3, [sp, #8]
 801cf48:	2301      	movs	r3, #1
 801cf4a:	9301      	str	r3, [sp, #4]
 801cf4c:	2300      	movs	r3, #0
 801cf4e:	9300      	str	r3, [sp, #0]
 801cf50:	23ff      	movs	r3, #255	; 0xff
 801cf52:	2200      	movs	r2, #0
 801cf54:	69f9      	ldr	r1, [r7, #28]
 801cf56:	6878      	ldr	r0, [r7, #4]
 801cf58:	f000 fa9e 	bl	801d498 <ip4_output_if>
 801cf5c:	4603      	mov	r3, r0
 801cf5e:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801cf60:	e001      	b.n	801cf66 <icmp_input+0x1ee>
      break;
 801cf62:	bf00      	nop
 801cf64:	e000      	b.n	801cf68 <icmp_input+0x1f0>
      break;
 801cf66:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801cf68:	6878      	ldr	r0, [r7, #4]
 801cf6a:	f7f5 ff23 	bl	8012db4 <pbuf_free>
  return;
 801cf6e:	e013      	b.n	801cf98 <icmp_input+0x220>
    goto lenerr;
 801cf70:	bf00      	nop
 801cf72:	e002      	b.n	801cf7a <icmp_input+0x202>
    goto lenerr;
 801cf74:	bf00      	nop
 801cf76:	e000      	b.n	801cf7a <icmp_input+0x202>
        goto lenerr;
 801cf78:	bf00      	nop
lenerr:
  pbuf_free(p);
 801cf7a:	6878      	ldr	r0, [r7, #4]
 801cf7c:	f7f5 ff1a 	bl	8012db4 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801cf80:	e00a      	b.n	801cf98 <icmp_input+0x220>
        goto icmperr;
 801cf82:	bf00      	nop
 801cf84:	e004      	b.n	801cf90 <icmp_input+0x218>
        goto icmperr;
 801cf86:	bf00      	nop
 801cf88:	e002      	b.n	801cf90 <icmp_input+0x218>
          goto icmperr;
 801cf8a:	bf00      	nop
 801cf8c:	e000      	b.n	801cf90 <icmp_input+0x218>
          goto icmperr;
 801cf8e:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801cf90:	6878      	ldr	r0, [r7, #4]
 801cf92:	f7f5 ff0f 	bl	8012db4 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801cf96:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801cf98:	3728      	adds	r7, #40	; 0x28
 801cf9a:	46bd      	mov	sp, r7
 801cf9c:	bd80      	pop	{r7, pc}
 801cf9e:	bf00      	nop
 801cfa0:	24004e5c 	.word	0x24004e5c
 801cfa4:	24004e70 	.word	0x24004e70
 801cfa8:	08026b94 	.word	0x08026b94
 801cfac:	08026bcc 	.word	0x08026bcc
 801cfb0:	08026c04 	.word	0x08026c04
 801cfb4:	08026c2c 	.word	0x08026c2c

0801cfb8 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801cfb8:	b580      	push	{r7, lr}
 801cfba:	b082      	sub	sp, #8
 801cfbc:	af00      	add	r7, sp, #0
 801cfbe:	6078      	str	r0, [r7, #4]
 801cfc0:	460b      	mov	r3, r1
 801cfc2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 801cfc4:	78fb      	ldrb	r3, [r7, #3]
 801cfc6:	461a      	mov	r2, r3
 801cfc8:	2103      	movs	r1, #3
 801cfca:	6878      	ldr	r0, [r7, #4]
 801cfcc:	f000 f814 	bl	801cff8 <icmp_send_response>
}
 801cfd0:	bf00      	nop
 801cfd2:	3708      	adds	r7, #8
 801cfd4:	46bd      	mov	sp, r7
 801cfd6:	bd80      	pop	{r7, pc}

0801cfd8 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801cfd8:	b580      	push	{r7, lr}
 801cfda:	b082      	sub	sp, #8
 801cfdc:	af00      	add	r7, sp, #0
 801cfde:	6078      	str	r0, [r7, #4]
 801cfe0:	460b      	mov	r3, r1
 801cfe2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801cfe4:	78fb      	ldrb	r3, [r7, #3]
 801cfe6:	461a      	mov	r2, r3
 801cfe8:	210b      	movs	r1, #11
 801cfea:	6878      	ldr	r0, [r7, #4]
 801cfec:	f000 f804 	bl	801cff8 <icmp_send_response>
}
 801cff0:	bf00      	nop
 801cff2:	3708      	adds	r7, #8
 801cff4:	46bd      	mov	sp, r7
 801cff6:	bd80      	pop	{r7, pc}

0801cff8 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801cff8:	b580      	push	{r7, lr}
 801cffa:	b08c      	sub	sp, #48	; 0x30
 801cffc:	af04      	add	r7, sp, #16
 801cffe:	6078      	str	r0, [r7, #4]
 801d000:	460b      	mov	r3, r1
 801d002:	70fb      	strb	r3, [r7, #3]
 801d004:	4613      	mov	r3, r2
 801d006:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801d008:	f44f 7220 	mov.w	r2, #640	; 0x280
 801d00c:	2124      	movs	r1, #36	; 0x24
 801d00e:	2022      	movs	r0, #34	; 0x22
 801d010:	f7f5 fbba 	bl	8012788 <pbuf_alloc>
 801d014:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801d016:	69fb      	ldr	r3, [r7, #28]
 801d018:	2b00      	cmp	r3, #0
 801d01a:	d056      	beq.n	801d0ca <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801d01c:	69fb      	ldr	r3, [r7, #28]
 801d01e:	895b      	ldrh	r3, [r3, #10]
 801d020:	2b23      	cmp	r3, #35	; 0x23
 801d022:	d806      	bhi.n	801d032 <icmp_send_response+0x3a>
 801d024:	4b2b      	ldr	r3, [pc, #172]	; (801d0d4 <icmp_send_response+0xdc>)
 801d026:	f44f 72b4 	mov.w	r2, #360	; 0x168
 801d02a:	492b      	ldr	r1, [pc, #172]	; (801d0d8 <icmp_send_response+0xe0>)
 801d02c:	482b      	ldr	r0, [pc, #172]	; (801d0dc <icmp_send_response+0xe4>)
 801d02e:	f002 fae9 	bl	801f604 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801d032:	687b      	ldr	r3, [r7, #4]
 801d034:	685b      	ldr	r3, [r3, #4]
 801d036:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801d038:	69fb      	ldr	r3, [r7, #28]
 801d03a:	685b      	ldr	r3, [r3, #4]
 801d03c:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801d03e:	697b      	ldr	r3, [r7, #20]
 801d040:	78fa      	ldrb	r2, [r7, #3]
 801d042:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801d044:	697b      	ldr	r3, [r7, #20]
 801d046:	78ba      	ldrb	r2, [r7, #2]
 801d048:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801d04a:	697b      	ldr	r3, [r7, #20]
 801d04c:	2200      	movs	r2, #0
 801d04e:	711a      	strb	r2, [r3, #4]
 801d050:	2200      	movs	r2, #0
 801d052:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801d054:	697b      	ldr	r3, [r7, #20]
 801d056:	2200      	movs	r2, #0
 801d058:	719a      	strb	r2, [r3, #6]
 801d05a:	2200      	movs	r2, #0
 801d05c:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801d05e:	69fb      	ldr	r3, [r7, #28]
 801d060:	685b      	ldr	r3, [r3, #4]
 801d062:	f103 0008 	add.w	r0, r3, #8
 801d066:	687b      	ldr	r3, [r7, #4]
 801d068:	685b      	ldr	r3, [r3, #4]
 801d06a:	221c      	movs	r2, #28
 801d06c:	4619      	mov	r1, r3
 801d06e:	f001 fc53 	bl	801e918 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801d072:	69bb      	ldr	r3, [r7, #24]
 801d074:	68db      	ldr	r3, [r3, #12]
 801d076:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801d078:	f107 030c 	add.w	r3, r7, #12
 801d07c:	4618      	mov	r0, r3
 801d07e:	f000 f82f 	bl	801d0e0 <ip4_route>
 801d082:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801d084:	693b      	ldr	r3, [r7, #16]
 801d086:	2b00      	cmp	r3, #0
 801d088:	d01b      	beq.n	801d0c2 <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801d08a:	697b      	ldr	r3, [r7, #20]
 801d08c:	2200      	movs	r2, #0
 801d08e:	709a      	strb	r2, [r3, #2]
 801d090:	2200      	movs	r2, #0
 801d092:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 801d094:	69fb      	ldr	r3, [r7, #28]
 801d096:	895b      	ldrh	r3, [r3, #10]
 801d098:	4619      	mov	r1, r3
 801d09a:	6978      	ldr	r0, [r7, #20]
 801d09c:	f7f4 fa2d 	bl	80114fa <inet_chksum>
 801d0a0:	4603      	mov	r3, r0
 801d0a2:	461a      	mov	r2, r3
 801d0a4:	697b      	ldr	r3, [r7, #20]
 801d0a6:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801d0a8:	f107 020c 	add.w	r2, r7, #12
 801d0ac:	693b      	ldr	r3, [r7, #16]
 801d0ae:	9302      	str	r3, [sp, #8]
 801d0b0:	2301      	movs	r3, #1
 801d0b2:	9301      	str	r3, [sp, #4]
 801d0b4:	2300      	movs	r3, #0
 801d0b6:	9300      	str	r3, [sp, #0]
 801d0b8:	23ff      	movs	r3, #255	; 0xff
 801d0ba:	2100      	movs	r1, #0
 801d0bc:	69f8      	ldr	r0, [r7, #28]
 801d0be:	f000 f9eb 	bl	801d498 <ip4_output_if>
  }
  pbuf_free(q);
 801d0c2:	69f8      	ldr	r0, [r7, #28]
 801d0c4:	f7f5 fe76 	bl	8012db4 <pbuf_free>
 801d0c8:	e000      	b.n	801d0cc <icmp_send_response+0xd4>
    return;
 801d0ca:	bf00      	nop
}
 801d0cc:	3720      	adds	r7, #32
 801d0ce:	46bd      	mov	sp, r7
 801d0d0:	bd80      	pop	{r7, pc}
 801d0d2:	bf00      	nop
 801d0d4:	08026b94 	.word	0x08026b94
 801d0d8:	08026c60 	.word	0x08026c60
 801d0dc:	08026c04 	.word	0x08026c04

0801d0e0 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801d0e0:	b480      	push	{r7}
 801d0e2:	b085      	sub	sp, #20
 801d0e4:	af00      	add	r7, sp, #0
 801d0e6:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 801d0e8:	4b33      	ldr	r3, [pc, #204]	; (801d1b8 <ip4_route+0xd8>)
 801d0ea:	681b      	ldr	r3, [r3, #0]
 801d0ec:	60fb      	str	r3, [r7, #12]
 801d0ee:	e036      	b.n	801d15e <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801d0f0:	68fb      	ldr	r3, [r7, #12]
 801d0f2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801d0f6:	f003 0301 	and.w	r3, r3, #1
 801d0fa:	b2db      	uxtb	r3, r3
 801d0fc:	2b00      	cmp	r3, #0
 801d0fe:	d02b      	beq.n	801d158 <ip4_route+0x78>
 801d100:	68fb      	ldr	r3, [r7, #12]
 801d102:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801d106:	089b      	lsrs	r3, r3, #2
 801d108:	f003 0301 	and.w	r3, r3, #1
 801d10c:	b2db      	uxtb	r3, r3
 801d10e:	2b00      	cmp	r3, #0
 801d110:	d022      	beq.n	801d158 <ip4_route+0x78>
 801d112:	68fb      	ldr	r3, [r7, #12]
 801d114:	3304      	adds	r3, #4
 801d116:	681b      	ldr	r3, [r3, #0]
 801d118:	2b00      	cmp	r3, #0
 801d11a:	d01d      	beq.n	801d158 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801d11c:	687b      	ldr	r3, [r7, #4]
 801d11e:	681a      	ldr	r2, [r3, #0]
 801d120:	68fb      	ldr	r3, [r7, #12]
 801d122:	3304      	adds	r3, #4
 801d124:	681b      	ldr	r3, [r3, #0]
 801d126:	405a      	eors	r2, r3
 801d128:	68fb      	ldr	r3, [r7, #12]
 801d12a:	3308      	adds	r3, #8
 801d12c:	681b      	ldr	r3, [r3, #0]
 801d12e:	4013      	ands	r3, r2
 801d130:	2b00      	cmp	r3, #0
 801d132:	d101      	bne.n	801d138 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801d134:	68fb      	ldr	r3, [r7, #12]
 801d136:	e038      	b.n	801d1aa <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801d138:	68fb      	ldr	r3, [r7, #12]
 801d13a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801d13e:	f003 0302 	and.w	r3, r3, #2
 801d142:	2b00      	cmp	r3, #0
 801d144:	d108      	bne.n	801d158 <ip4_route+0x78>
 801d146:	687b      	ldr	r3, [r7, #4]
 801d148:	681a      	ldr	r2, [r3, #0]
 801d14a:	68fb      	ldr	r3, [r7, #12]
 801d14c:	330c      	adds	r3, #12
 801d14e:	681b      	ldr	r3, [r3, #0]
 801d150:	429a      	cmp	r2, r3
 801d152:	d101      	bne.n	801d158 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 801d154:	68fb      	ldr	r3, [r7, #12]
 801d156:	e028      	b.n	801d1aa <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 801d158:	68fb      	ldr	r3, [r7, #12]
 801d15a:	681b      	ldr	r3, [r3, #0]
 801d15c:	60fb      	str	r3, [r7, #12]
 801d15e:	68fb      	ldr	r3, [r7, #12]
 801d160:	2b00      	cmp	r3, #0
 801d162:	d1c5      	bne.n	801d0f0 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801d164:	4b15      	ldr	r3, [pc, #84]	; (801d1bc <ip4_route+0xdc>)
 801d166:	681b      	ldr	r3, [r3, #0]
 801d168:	2b00      	cmp	r3, #0
 801d16a:	d01a      	beq.n	801d1a2 <ip4_route+0xc2>
 801d16c:	4b13      	ldr	r3, [pc, #76]	; (801d1bc <ip4_route+0xdc>)
 801d16e:	681b      	ldr	r3, [r3, #0]
 801d170:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801d174:	f003 0301 	and.w	r3, r3, #1
 801d178:	2b00      	cmp	r3, #0
 801d17a:	d012      	beq.n	801d1a2 <ip4_route+0xc2>
 801d17c:	4b0f      	ldr	r3, [pc, #60]	; (801d1bc <ip4_route+0xdc>)
 801d17e:	681b      	ldr	r3, [r3, #0]
 801d180:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801d184:	f003 0304 	and.w	r3, r3, #4
 801d188:	2b00      	cmp	r3, #0
 801d18a:	d00a      	beq.n	801d1a2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801d18c:	4b0b      	ldr	r3, [pc, #44]	; (801d1bc <ip4_route+0xdc>)
 801d18e:	681b      	ldr	r3, [r3, #0]
 801d190:	3304      	adds	r3, #4
 801d192:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801d194:	2b00      	cmp	r3, #0
 801d196:	d004      	beq.n	801d1a2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801d198:	687b      	ldr	r3, [r7, #4]
 801d19a:	681b      	ldr	r3, [r3, #0]
 801d19c:	b2db      	uxtb	r3, r3
 801d19e:	2b7f      	cmp	r3, #127	; 0x7f
 801d1a0:	d101      	bne.n	801d1a6 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801d1a2:	2300      	movs	r3, #0
 801d1a4:	e001      	b.n	801d1aa <ip4_route+0xca>
  }

  return netif_default;
 801d1a6:	4b05      	ldr	r3, [pc, #20]	; (801d1bc <ip4_route+0xdc>)
 801d1a8:	681b      	ldr	r3, [r3, #0]
}
 801d1aa:	4618      	mov	r0, r3
 801d1ac:	3714      	adds	r7, #20
 801d1ae:	46bd      	mov	sp, r7
 801d1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d1b4:	4770      	bx	lr
 801d1b6:	bf00      	nop
 801d1b8:	24007f2c 	.word	0x24007f2c
 801d1bc:	24007f30 	.word	0x24007f30

0801d1c0 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 801d1c0:	b580      	push	{r7, lr}
 801d1c2:	b082      	sub	sp, #8
 801d1c4:	af00      	add	r7, sp, #0
 801d1c6:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801d1c8:	687b      	ldr	r3, [r7, #4]
 801d1ca:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801d1ce:	f003 0301 	and.w	r3, r3, #1
 801d1d2:	b2db      	uxtb	r3, r3
 801d1d4:	2b00      	cmp	r3, #0
 801d1d6:	d016      	beq.n	801d206 <ip4_input_accept+0x46>
 801d1d8:	687b      	ldr	r3, [r7, #4]
 801d1da:	3304      	adds	r3, #4
 801d1dc:	681b      	ldr	r3, [r3, #0]
 801d1de:	2b00      	cmp	r3, #0
 801d1e0:	d011      	beq.n	801d206 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801d1e2:	4b0b      	ldr	r3, [pc, #44]	; (801d210 <ip4_input_accept+0x50>)
 801d1e4:	695a      	ldr	r2, [r3, #20]
 801d1e6:	687b      	ldr	r3, [r7, #4]
 801d1e8:	3304      	adds	r3, #4
 801d1ea:	681b      	ldr	r3, [r3, #0]
 801d1ec:	429a      	cmp	r2, r3
 801d1ee:	d008      	beq.n	801d202 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801d1f0:	4b07      	ldr	r3, [pc, #28]	; (801d210 <ip4_input_accept+0x50>)
 801d1f2:	695b      	ldr	r3, [r3, #20]
 801d1f4:	6879      	ldr	r1, [r7, #4]
 801d1f6:	4618      	mov	r0, r3
 801d1f8:	f000 fa26 	bl	801d648 <ip4_addr_isbroadcast_u32>
 801d1fc:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801d1fe:	2b00      	cmp	r3, #0
 801d200:	d001      	beq.n	801d206 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801d202:	2301      	movs	r3, #1
 801d204:	e000      	b.n	801d208 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801d206:	2300      	movs	r3, #0
}
 801d208:	4618      	mov	r0, r3
 801d20a:	3708      	adds	r7, #8
 801d20c:	46bd      	mov	sp, r7
 801d20e:	bd80      	pop	{r7, pc}
 801d210:	24004e5c 	.word	0x24004e5c

0801d214 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801d214:	b580      	push	{r7, lr}
 801d216:	b088      	sub	sp, #32
 801d218:	af00      	add	r7, sp, #0
 801d21a:	6078      	str	r0, [r7, #4]
 801d21c:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 801d21e:	2301      	movs	r3, #1
 801d220:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801d222:	687b      	ldr	r3, [r7, #4]
 801d224:	685b      	ldr	r3, [r3, #4]
 801d226:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 801d228:	69fb      	ldr	r3, [r7, #28]
 801d22a:	781b      	ldrb	r3, [r3, #0]
 801d22c:	091b      	lsrs	r3, r3, #4
 801d22e:	b2db      	uxtb	r3, r3
 801d230:	2b04      	cmp	r3, #4
 801d232:	d004      	beq.n	801d23e <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801d234:	6878      	ldr	r0, [r7, #4]
 801d236:	f7f5 fdbd 	bl	8012db4 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801d23a:	2300      	movs	r3, #0
 801d23c:	e123      	b.n	801d486 <ip4_input+0x272>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801d23e:	69fb      	ldr	r3, [r7, #28]
 801d240:	781b      	ldrb	r3, [r3, #0]
 801d242:	f003 030f 	and.w	r3, r3, #15
 801d246:	b2db      	uxtb	r3, r3
 801d248:	009b      	lsls	r3, r3, #2
 801d24a:	b2db      	uxtb	r3, r3
 801d24c:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801d24e:	69fb      	ldr	r3, [r7, #28]
 801d250:	885b      	ldrh	r3, [r3, #2]
 801d252:	b29b      	uxth	r3, r3
 801d254:	4618      	mov	r0, r3
 801d256:	f7f4 f8c5 	bl	80113e4 <lwip_htons>
 801d25a:	4603      	mov	r3, r0
 801d25c:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801d25e:	687b      	ldr	r3, [r7, #4]
 801d260:	891b      	ldrh	r3, [r3, #8]
 801d262:	8a3a      	ldrh	r2, [r7, #16]
 801d264:	429a      	cmp	r2, r3
 801d266:	d204      	bcs.n	801d272 <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 801d268:	8a3b      	ldrh	r3, [r7, #16]
 801d26a:	4619      	mov	r1, r3
 801d26c:	6878      	ldr	r0, [r7, #4]
 801d26e:	f7f5 fbe9 	bl	8012a44 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801d272:	687b      	ldr	r3, [r7, #4]
 801d274:	895b      	ldrh	r3, [r3, #10]
 801d276:	8a7a      	ldrh	r2, [r7, #18]
 801d278:	429a      	cmp	r2, r3
 801d27a:	d807      	bhi.n	801d28c <ip4_input+0x78>
 801d27c:	687b      	ldr	r3, [r7, #4]
 801d27e:	891b      	ldrh	r3, [r3, #8]
 801d280:	8a3a      	ldrh	r2, [r7, #16]
 801d282:	429a      	cmp	r2, r3
 801d284:	d802      	bhi.n	801d28c <ip4_input+0x78>
 801d286:	8a7b      	ldrh	r3, [r7, #18]
 801d288:	2b13      	cmp	r3, #19
 801d28a:	d804      	bhi.n	801d296 <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801d28c:	6878      	ldr	r0, [r7, #4]
 801d28e:	f7f5 fd91 	bl	8012db4 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801d292:	2300      	movs	r3, #0
 801d294:	e0f7      	b.n	801d486 <ip4_input+0x272>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801d296:	69fb      	ldr	r3, [r7, #28]
 801d298:	691b      	ldr	r3, [r3, #16]
 801d29a:	4a7d      	ldr	r2, [pc, #500]	; (801d490 <ip4_input+0x27c>)
 801d29c:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801d29e:	69fb      	ldr	r3, [r7, #28]
 801d2a0:	68db      	ldr	r3, [r3, #12]
 801d2a2:	4a7b      	ldr	r2, [pc, #492]	; (801d490 <ip4_input+0x27c>)
 801d2a4:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801d2a6:	4b7a      	ldr	r3, [pc, #488]	; (801d490 <ip4_input+0x27c>)
 801d2a8:	695b      	ldr	r3, [r3, #20]
 801d2aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801d2ae:	2be0      	cmp	r3, #224	; 0xe0
 801d2b0:	d112      	bne.n	801d2d8 <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801d2b2:	683b      	ldr	r3, [r7, #0]
 801d2b4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801d2b8:	f003 0301 	and.w	r3, r3, #1
 801d2bc:	b2db      	uxtb	r3, r3
 801d2be:	2b00      	cmp	r3, #0
 801d2c0:	d007      	beq.n	801d2d2 <ip4_input+0xbe>
 801d2c2:	683b      	ldr	r3, [r7, #0]
 801d2c4:	3304      	adds	r3, #4
 801d2c6:	681b      	ldr	r3, [r3, #0]
 801d2c8:	2b00      	cmp	r3, #0
 801d2ca:	d002      	beq.n	801d2d2 <ip4_input+0xbe>
      netif = inp;
 801d2cc:	683b      	ldr	r3, [r7, #0]
 801d2ce:	61bb      	str	r3, [r7, #24]
 801d2d0:	e02a      	b.n	801d328 <ip4_input+0x114>
    } else {
      netif = NULL;
 801d2d2:	2300      	movs	r3, #0
 801d2d4:	61bb      	str	r3, [r7, #24]
 801d2d6:	e027      	b.n	801d328 <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 801d2d8:	6838      	ldr	r0, [r7, #0]
 801d2da:	f7ff ff71 	bl	801d1c0 <ip4_input_accept>
 801d2de:	4603      	mov	r3, r0
 801d2e0:	2b00      	cmp	r3, #0
 801d2e2:	d002      	beq.n	801d2ea <ip4_input+0xd6>
      netif = inp;
 801d2e4:	683b      	ldr	r3, [r7, #0]
 801d2e6:	61bb      	str	r3, [r7, #24]
 801d2e8:	e01e      	b.n	801d328 <ip4_input+0x114>
    } else {
      netif = NULL;
 801d2ea:	2300      	movs	r3, #0
 801d2ec:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801d2ee:	4b68      	ldr	r3, [pc, #416]	; (801d490 <ip4_input+0x27c>)
 801d2f0:	695b      	ldr	r3, [r3, #20]
 801d2f2:	b2db      	uxtb	r3, r3
 801d2f4:	2b7f      	cmp	r3, #127	; 0x7f
 801d2f6:	d017      	beq.n	801d328 <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 801d2f8:	4b66      	ldr	r3, [pc, #408]	; (801d494 <ip4_input+0x280>)
 801d2fa:	681b      	ldr	r3, [r3, #0]
 801d2fc:	61bb      	str	r3, [r7, #24]
 801d2fe:	e00e      	b.n	801d31e <ip4_input+0x10a>
          if (netif == inp) {
 801d300:	69ba      	ldr	r2, [r7, #24]
 801d302:	683b      	ldr	r3, [r7, #0]
 801d304:	429a      	cmp	r2, r3
 801d306:	d006      	beq.n	801d316 <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 801d308:	69b8      	ldr	r0, [r7, #24]
 801d30a:	f7ff ff59 	bl	801d1c0 <ip4_input_accept>
 801d30e:	4603      	mov	r3, r0
 801d310:	2b00      	cmp	r3, #0
 801d312:	d108      	bne.n	801d326 <ip4_input+0x112>
 801d314:	e000      	b.n	801d318 <ip4_input+0x104>
            continue;
 801d316:	bf00      	nop
        NETIF_FOREACH(netif) {
 801d318:	69bb      	ldr	r3, [r7, #24]
 801d31a:	681b      	ldr	r3, [r3, #0]
 801d31c:	61bb      	str	r3, [r7, #24]
 801d31e:	69bb      	ldr	r3, [r7, #24]
 801d320:	2b00      	cmp	r3, #0
 801d322:	d1ed      	bne.n	801d300 <ip4_input+0xec>
 801d324:	e000      	b.n	801d328 <ip4_input+0x114>
            break;
 801d326:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 801d328:	69bb      	ldr	r3, [r7, #24]
 801d32a:	2b00      	cmp	r3, #0
 801d32c:	d111      	bne.n	801d352 <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 801d32e:	69fb      	ldr	r3, [r7, #28]
 801d330:	7a5b      	ldrb	r3, [r3, #9]
 801d332:	2b11      	cmp	r3, #17
 801d334:	d10d      	bne.n	801d352 <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 801d336:	8a7b      	ldrh	r3, [r7, #18]
 801d338:	69fa      	ldr	r2, [r7, #28]
 801d33a:	4413      	add	r3, r2
 801d33c:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 801d33e:	68fb      	ldr	r3, [r7, #12]
 801d340:	885b      	ldrh	r3, [r3, #2]
 801d342:	b29b      	uxth	r3, r3
 801d344:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 801d348:	d103      	bne.n	801d352 <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 801d34a:	683b      	ldr	r3, [r7, #0]
 801d34c:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 801d34e:	2300      	movs	r3, #0
 801d350:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 801d352:	697b      	ldr	r3, [r7, #20]
 801d354:	2b00      	cmp	r3, #0
 801d356:	d017      	beq.n	801d388 <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 801d358:	4b4d      	ldr	r3, [pc, #308]	; (801d490 <ip4_input+0x27c>)
 801d35a:	691b      	ldr	r3, [r3, #16]
 801d35c:	2b00      	cmp	r3, #0
 801d35e:	d013      	beq.n	801d388 <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801d360:	4b4b      	ldr	r3, [pc, #300]	; (801d490 <ip4_input+0x27c>)
 801d362:	691b      	ldr	r3, [r3, #16]
 801d364:	6839      	ldr	r1, [r7, #0]
 801d366:	4618      	mov	r0, r3
 801d368:	f000 f96e 	bl	801d648 <ip4_addr_isbroadcast_u32>
 801d36c:	4603      	mov	r3, r0
 801d36e:	2b00      	cmp	r3, #0
 801d370:	d105      	bne.n	801d37e <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801d372:	4b47      	ldr	r3, [pc, #284]	; (801d490 <ip4_input+0x27c>)
 801d374:	691b      	ldr	r3, [r3, #16]
 801d376:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801d37a:	2be0      	cmp	r3, #224	; 0xe0
 801d37c:	d104      	bne.n	801d388 <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801d37e:	6878      	ldr	r0, [r7, #4]
 801d380:	f7f5 fd18 	bl	8012db4 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801d384:	2300      	movs	r3, #0
 801d386:	e07e      	b.n	801d486 <ip4_input+0x272>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801d388:	69bb      	ldr	r3, [r7, #24]
 801d38a:	2b00      	cmp	r3, #0
 801d38c:	d104      	bne.n	801d398 <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801d38e:	6878      	ldr	r0, [r7, #4]
 801d390:	f7f5 fd10 	bl	8012db4 <pbuf_free>
    return ERR_OK;
 801d394:	2300      	movs	r3, #0
 801d396:	e076      	b.n	801d486 <ip4_input+0x272>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801d398:	69fb      	ldr	r3, [r7, #28]
 801d39a:	88db      	ldrh	r3, [r3, #6]
 801d39c:	b29b      	uxth	r3, r3
 801d39e:	461a      	mov	r2, r3
 801d3a0:	f64f 733f 	movw	r3, #65343	; 0xff3f
 801d3a4:	4013      	ands	r3, r2
 801d3a6:	2b00      	cmp	r3, #0
 801d3a8:	d00b      	beq.n	801d3c2 <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801d3aa:	6878      	ldr	r0, [r7, #4]
 801d3ac:	f000 fc92 	bl	801dcd4 <ip4_reass>
 801d3b0:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801d3b2:	687b      	ldr	r3, [r7, #4]
 801d3b4:	2b00      	cmp	r3, #0
 801d3b6:	d101      	bne.n	801d3bc <ip4_input+0x1a8>
      return ERR_OK;
 801d3b8:	2300      	movs	r3, #0
 801d3ba:	e064      	b.n	801d486 <ip4_input+0x272>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801d3bc:	687b      	ldr	r3, [r7, #4]
 801d3be:	685b      	ldr	r3, [r3, #4]
 801d3c0:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801d3c2:	4a33      	ldr	r2, [pc, #204]	; (801d490 <ip4_input+0x27c>)
 801d3c4:	69bb      	ldr	r3, [r7, #24]
 801d3c6:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 801d3c8:	4a31      	ldr	r2, [pc, #196]	; (801d490 <ip4_input+0x27c>)
 801d3ca:	683b      	ldr	r3, [r7, #0]
 801d3cc:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801d3ce:	4a30      	ldr	r2, [pc, #192]	; (801d490 <ip4_input+0x27c>)
 801d3d0:	69fb      	ldr	r3, [r7, #28]
 801d3d2:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 801d3d4:	69fb      	ldr	r3, [r7, #28]
 801d3d6:	781b      	ldrb	r3, [r3, #0]
 801d3d8:	f003 030f 	and.w	r3, r3, #15
 801d3dc:	b2db      	uxtb	r3, r3
 801d3de:	009b      	lsls	r3, r3, #2
 801d3e0:	b2db      	uxtb	r3, r3
 801d3e2:	b29a      	uxth	r2, r3
 801d3e4:	4b2a      	ldr	r3, [pc, #168]	; (801d490 <ip4_input+0x27c>)
 801d3e6:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 801d3e8:	8a7b      	ldrh	r3, [r7, #18]
 801d3ea:	4619      	mov	r1, r3
 801d3ec:	6878      	ldr	r0, [r7, #4]
 801d3ee:	f7f5 fc29 	bl	8012c44 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801d3f2:	69fb      	ldr	r3, [r7, #28]
 801d3f4:	7a5b      	ldrb	r3, [r3, #9]
 801d3f6:	2b11      	cmp	r3, #17
 801d3f8:	d006      	beq.n	801d408 <ip4_input+0x1f4>
 801d3fa:	2b11      	cmp	r3, #17
 801d3fc:	dc13      	bgt.n	801d426 <ip4_input+0x212>
 801d3fe:	2b01      	cmp	r3, #1
 801d400:	d00c      	beq.n	801d41c <ip4_input+0x208>
 801d402:	2b06      	cmp	r3, #6
 801d404:	d005      	beq.n	801d412 <ip4_input+0x1fe>
 801d406:	e00e      	b.n	801d426 <ip4_input+0x212>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 801d408:	6839      	ldr	r1, [r7, #0]
 801d40a:	6878      	ldr	r0, [r7, #4]
 801d40c:	f7fc fa26 	bl	801985c <udp_input>
        break;
 801d410:	e026      	b.n	801d460 <ip4_input+0x24c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801d412:	6839      	ldr	r1, [r7, #0]
 801d414:	6878      	ldr	r0, [r7, #4]
 801d416:	f7f7 fde3 	bl	8014fe0 <tcp_input>
        break;
 801d41a:	e021      	b.n	801d460 <ip4_input+0x24c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801d41c:	6839      	ldr	r1, [r7, #0]
 801d41e:	6878      	ldr	r0, [r7, #4]
 801d420:	f7ff fcaa 	bl	801cd78 <icmp_input>
        break;
 801d424:	e01c      	b.n	801d460 <ip4_input+0x24c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801d426:	4b1a      	ldr	r3, [pc, #104]	; (801d490 <ip4_input+0x27c>)
 801d428:	695b      	ldr	r3, [r3, #20]
 801d42a:	69b9      	ldr	r1, [r7, #24]
 801d42c:	4618      	mov	r0, r3
 801d42e:	f000 f90b 	bl	801d648 <ip4_addr_isbroadcast_u32>
 801d432:	4603      	mov	r3, r0
 801d434:	2b00      	cmp	r3, #0
 801d436:	d10f      	bne.n	801d458 <ip4_input+0x244>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801d438:	4b15      	ldr	r3, [pc, #84]	; (801d490 <ip4_input+0x27c>)
 801d43a:	695b      	ldr	r3, [r3, #20]
 801d43c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801d440:	2be0      	cmp	r3, #224	; 0xe0
 801d442:	d009      	beq.n	801d458 <ip4_input+0x244>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801d444:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801d448:	4619      	mov	r1, r3
 801d44a:	6878      	ldr	r0, [r7, #4]
 801d44c:	f7f5 fc6d 	bl	8012d2a <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801d450:	2102      	movs	r1, #2
 801d452:	6878      	ldr	r0, [r7, #4]
 801d454:	f7ff fdb0 	bl	801cfb8 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 801d458:	6878      	ldr	r0, [r7, #4]
 801d45a:	f7f5 fcab 	bl	8012db4 <pbuf_free>
        break;
 801d45e:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801d460:	4b0b      	ldr	r3, [pc, #44]	; (801d490 <ip4_input+0x27c>)
 801d462:	2200      	movs	r2, #0
 801d464:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801d466:	4b0a      	ldr	r3, [pc, #40]	; (801d490 <ip4_input+0x27c>)
 801d468:	2200      	movs	r2, #0
 801d46a:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801d46c:	4b08      	ldr	r3, [pc, #32]	; (801d490 <ip4_input+0x27c>)
 801d46e:	2200      	movs	r2, #0
 801d470:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801d472:	4b07      	ldr	r3, [pc, #28]	; (801d490 <ip4_input+0x27c>)
 801d474:	2200      	movs	r2, #0
 801d476:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801d478:	4b05      	ldr	r3, [pc, #20]	; (801d490 <ip4_input+0x27c>)
 801d47a:	2200      	movs	r2, #0
 801d47c:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801d47e:	4b04      	ldr	r3, [pc, #16]	; (801d490 <ip4_input+0x27c>)
 801d480:	2200      	movs	r2, #0
 801d482:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801d484:	2300      	movs	r3, #0
}
 801d486:	4618      	mov	r0, r3
 801d488:	3720      	adds	r7, #32
 801d48a:	46bd      	mov	sp, r7
 801d48c:	bd80      	pop	{r7, pc}
 801d48e:	bf00      	nop
 801d490:	24004e5c 	.word	0x24004e5c
 801d494:	24007f2c 	.word	0x24007f2c

0801d498 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 801d498:	b580      	push	{r7, lr}
 801d49a:	b08a      	sub	sp, #40	; 0x28
 801d49c:	af04      	add	r7, sp, #16
 801d49e:	60f8      	str	r0, [r7, #12]
 801d4a0:	60b9      	str	r1, [r7, #8]
 801d4a2:	607a      	str	r2, [r7, #4]
 801d4a4:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801d4a6:	68bb      	ldr	r3, [r7, #8]
 801d4a8:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801d4aa:	687b      	ldr	r3, [r7, #4]
 801d4ac:	2b00      	cmp	r3, #0
 801d4ae:	d009      	beq.n	801d4c4 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 801d4b0:	68bb      	ldr	r3, [r7, #8]
 801d4b2:	2b00      	cmp	r3, #0
 801d4b4:	d003      	beq.n	801d4be <ip4_output_if+0x26>
 801d4b6:	68bb      	ldr	r3, [r7, #8]
 801d4b8:	681b      	ldr	r3, [r3, #0]
 801d4ba:	2b00      	cmp	r3, #0
 801d4bc:	d102      	bne.n	801d4c4 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801d4be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d4c0:	3304      	adds	r3, #4
 801d4c2:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801d4c4:	78fa      	ldrb	r2, [r7, #3]
 801d4c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d4c8:	9302      	str	r3, [sp, #8]
 801d4ca:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801d4ce:	9301      	str	r3, [sp, #4]
 801d4d0:	f897 3020 	ldrb.w	r3, [r7, #32]
 801d4d4:	9300      	str	r3, [sp, #0]
 801d4d6:	4613      	mov	r3, r2
 801d4d8:	687a      	ldr	r2, [r7, #4]
 801d4da:	6979      	ldr	r1, [r7, #20]
 801d4dc:	68f8      	ldr	r0, [r7, #12]
 801d4de:	f000 f805 	bl	801d4ec <ip4_output_if_src>
 801d4e2:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 801d4e4:	4618      	mov	r0, r3
 801d4e6:	3718      	adds	r7, #24
 801d4e8:	46bd      	mov	sp, r7
 801d4ea:	bd80      	pop	{r7, pc}

0801d4ec <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801d4ec:	b580      	push	{r7, lr}
 801d4ee:	b088      	sub	sp, #32
 801d4f0:	af00      	add	r7, sp, #0
 801d4f2:	60f8      	str	r0, [r7, #12]
 801d4f4:	60b9      	str	r1, [r7, #8]
 801d4f6:	607a      	str	r2, [r7, #4]
 801d4f8:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801d4fa:	68fb      	ldr	r3, [r7, #12]
 801d4fc:	7b9b      	ldrb	r3, [r3, #14]
 801d4fe:	2b01      	cmp	r3, #1
 801d500:	d006      	beq.n	801d510 <ip4_output_if_src+0x24>
 801d502:	4b4b      	ldr	r3, [pc, #300]	; (801d630 <ip4_output_if_src+0x144>)
 801d504:	f44f 7255 	mov.w	r2, #852	; 0x354
 801d508:	494a      	ldr	r1, [pc, #296]	; (801d634 <ip4_output_if_src+0x148>)
 801d50a:	484b      	ldr	r0, [pc, #300]	; (801d638 <ip4_output_if_src+0x14c>)
 801d50c:	f002 f87a 	bl	801f604 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801d510:	687b      	ldr	r3, [r7, #4]
 801d512:	2b00      	cmp	r3, #0
 801d514:	d060      	beq.n	801d5d8 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801d516:	2314      	movs	r3, #20
 801d518:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801d51a:	2114      	movs	r1, #20
 801d51c:	68f8      	ldr	r0, [r7, #12]
 801d51e:	f7f5 fb81 	bl	8012c24 <pbuf_add_header>
 801d522:	4603      	mov	r3, r0
 801d524:	2b00      	cmp	r3, #0
 801d526:	d002      	beq.n	801d52e <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801d528:	f06f 0301 	mvn.w	r3, #1
 801d52c:	e07c      	b.n	801d628 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801d52e:	68fb      	ldr	r3, [r7, #12]
 801d530:	685b      	ldr	r3, [r3, #4]
 801d532:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801d534:	68fb      	ldr	r3, [r7, #12]
 801d536:	895b      	ldrh	r3, [r3, #10]
 801d538:	2b13      	cmp	r3, #19
 801d53a:	d806      	bhi.n	801d54a <ip4_output_if_src+0x5e>
 801d53c:	4b3c      	ldr	r3, [pc, #240]	; (801d630 <ip4_output_if_src+0x144>)
 801d53e:	f44f 7262 	mov.w	r2, #904	; 0x388
 801d542:	493e      	ldr	r1, [pc, #248]	; (801d63c <ip4_output_if_src+0x150>)
 801d544:	483c      	ldr	r0, [pc, #240]	; (801d638 <ip4_output_if_src+0x14c>)
 801d546:	f002 f85d 	bl	801f604 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801d54a:	69fb      	ldr	r3, [r7, #28]
 801d54c:	78fa      	ldrb	r2, [r7, #3]
 801d54e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801d550:	69fb      	ldr	r3, [r7, #28]
 801d552:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801d556:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801d558:	687b      	ldr	r3, [r7, #4]
 801d55a:	681a      	ldr	r2, [r3, #0]
 801d55c:	69fb      	ldr	r3, [r7, #28]
 801d55e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801d560:	8b7b      	ldrh	r3, [r7, #26]
 801d562:	089b      	lsrs	r3, r3, #2
 801d564:	b29b      	uxth	r3, r3
 801d566:	b2db      	uxtb	r3, r3
 801d568:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d56c:	b2da      	uxtb	r2, r3
 801d56e:	69fb      	ldr	r3, [r7, #28]
 801d570:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801d572:	69fb      	ldr	r3, [r7, #28]
 801d574:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801d578:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801d57a:	68fb      	ldr	r3, [r7, #12]
 801d57c:	891b      	ldrh	r3, [r3, #8]
 801d57e:	4618      	mov	r0, r3
 801d580:	f7f3 ff30 	bl	80113e4 <lwip_htons>
 801d584:	4603      	mov	r3, r0
 801d586:	461a      	mov	r2, r3
 801d588:	69fb      	ldr	r3, [r7, #28]
 801d58a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801d58c:	69fb      	ldr	r3, [r7, #28]
 801d58e:	2200      	movs	r2, #0
 801d590:	719a      	strb	r2, [r3, #6]
 801d592:	2200      	movs	r2, #0
 801d594:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801d596:	4b2a      	ldr	r3, [pc, #168]	; (801d640 <ip4_output_if_src+0x154>)
 801d598:	881b      	ldrh	r3, [r3, #0]
 801d59a:	4618      	mov	r0, r3
 801d59c:	f7f3 ff22 	bl	80113e4 <lwip_htons>
 801d5a0:	4603      	mov	r3, r0
 801d5a2:	461a      	mov	r2, r3
 801d5a4:	69fb      	ldr	r3, [r7, #28]
 801d5a6:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801d5a8:	4b25      	ldr	r3, [pc, #148]	; (801d640 <ip4_output_if_src+0x154>)
 801d5aa:	881b      	ldrh	r3, [r3, #0]
 801d5ac:	3301      	adds	r3, #1
 801d5ae:	b29a      	uxth	r2, r3
 801d5b0:	4b23      	ldr	r3, [pc, #140]	; (801d640 <ip4_output_if_src+0x154>)
 801d5b2:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801d5b4:	68bb      	ldr	r3, [r7, #8]
 801d5b6:	2b00      	cmp	r3, #0
 801d5b8:	d104      	bne.n	801d5c4 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801d5ba:	4b22      	ldr	r3, [pc, #136]	; (801d644 <ip4_output_if_src+0x158>)
 801d5bc:	681a      	ldr	r2, [r3, #0]
 801d5be:	69fb      	ldr	r3, [r7, #28]
 801d5c0:	60da      	str	r2, [r3, #12]
 801d5c2:	e003      	b.n	801d5cc <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801d5c4:	68bb      	ldr	r3, [r7, #8]
 801d5c6:	681a      	ldr	r2, [r3, #0]
 801d5c8:	69fb      	ldr	r3, [r7, #28]
 801d5ca:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801d5cc:	69fb      	ldr	r3, [r7, #28]
 801d5ce:	2200      	movs	r2, #0
 801d5d0:	729a      	strb	r2, [r3, #10]
 801d5d2:	2200      	movs	r2, #0
 801d5d4:	72da      	strb	r2, [r3, #11]
 801d5d6:	e00f      	b.n	801d5f8 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 801d5d8:	68fb      	ldr	r3, [r7, #12]
 801d5da:	895b      	ldrh	r3, [r3, #10]
 801d5dc:	2b13      	cmp	r3, #19
 801d5de:	d802      	bhi.n	801d5e6 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801d5e0:	f06f 0301 	mvn.w	r3, #1
 801d5e4:	e020      	b.n	801d628 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801d5e6:	68fb      	ldr	r3, [r7, #12]
 801d5e8:	685b      	ldr	r3, [r3, #4]
 801d5ea:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801d5ec:	69fb      	ldr	r3, [r7, #28]
 801d5ee:	691b      	ldr	r3, [r3, #16]
 801d5f0:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801d5f2:	f107 0314 	add.w	r3, r7, #20
 801d5f6:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801d5f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d5fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801d5fc:	2b00      	cmp	r3, #0
 801d5fe:	d00c      	beq.n	801d61a <ip4_output_if_src+0x12e>
 801d600:	68fb      	ldr	r3, [r7, #12]
 801d602:	891a      	ldrh	r2, [r3, #8]
 801d604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d606:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801d608:	429a      	cmp	r2, r3
 801d60a:	d906      	bls.n	801d61a <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 801d60c:	687a      	ldr	r2, [r7, #4]
 801d60e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801d610:	68f8      	ldr	r0, [r7, #12]
 801d612:	f000 fd4d 	bl	801e0b0 <ip4_frag>
 801d616:	4603      	mov	r3, r0
 801d618:	e006      	b.n	801d628 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801d61a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d61c:	695b      	ldr	r3, [r3, #20]
 801d61e:	687a      	ldr	r2, [r7, #4]
 801d620:	68f9      	ldr	r1, [r7, #12]
 801d622:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801d624:	4798      	blx	r3
 801d626:	4603      	mov	r3, r0
}
 801d628:	4618      	mov	r0, r3
 801d62a:	3720      	adds	r7, #32
 801d62c:	46bd      	mov	sp, r7
 801d62e:	bd80      	pop	{r7, pc}
 801d630:	08026c8c 	.word	0x08026c8c
 801d634:	08026cc0 	.word	0x08026cc0
 801d638:	08026ccc 	.word	0x08026ccc
 801d63c:	08026cf4 	.word	0x08026cf4
 801d640:	2400467e 	.word	0x2400467e
 801d644:	0802718c 	.word	0x0802718c

0801d648 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801d648:	b480      	push	{r7}
 801d64a:	b085      	sub	sp, #20
 801d64c:	af00      	add	r7, sp, #0
 801d64e:	6078      	str	r0, [r7, #4]
 801d650:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801d652:	687b      	ldr	r3, [r7, #4]
 801d654:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801d656:	687b      	ldr	r3, [r7, #4]
 801d658:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d65c:	d002      	beq.n	801d664 <ip4_addr_isbroadcast_u32+0x1c>
 801d65e:	687b      	ldr	r3, [r7, #4]
 801d660:	2b00      	cmp	r3, #0
 801d662:	d101      	bne.n	801d668 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801d664:	2301      	movs	r3, #1
 801d666:	e02a      	b.n	801d6be <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801d668:	683b      	ldr	r3, [r7, #0]
 801d66a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801d66e:	f003 0302 	and.w	r3, r3, #2
 801d672:	2b00      	cmp	r3, #0
 801d674:	d101      	bne.n	801d67a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801d676:	2300      	movs	r3, #0
 801d678:	e021      	b.n	801d6be <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801d67a:	683b      	ldr	r3, [r7, #0]
 801d67c:	3304      	adds	r3, #4
 801d67e:	681b      	ldr	r3, [r3, #0]
 801d680:	687a      	ldr	r2, [r7, #4]
 801d682:	429a      	cmp	r2, r3
 801d684:	d101      	bne.n	801d68a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801d686:	2300      	movs	r3, #0
 801d688:	e019      	b.n	801d6be <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801d68a:	68fa      	ldr	r2, [r7, #12]
 801d68c:	683b      	ldr	r3, [r7, #0]
 801d68e:	3304      	adds	r3, #4
 801d690:	681b      	ldr	r3, [r3, #0]
 801d692:	405a      	eors	r2, r3
 801d694:	683b      	ldr	r3, [r7, #0]
 801d696:	3308      	adds	r3, #8
 801d698:	681b      	ldr	r3, [r3, #0]
 801d69a:	4013      	ands	r3, r2
 801d69c:	2b00      	cmp	r3, #0
 801d69e:	d10d      	bne.n	801d6bc <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801d6a0:	683b      	ldr	r3, [r7, #0]
 801d6a2:	3308      	adds	r3, #8
 801d6a4:	681b      	ldr	r3, [r3, #0]
 801d6a6:	43da      	mvns	r2, r3
 801d6a8:	687b      	ldr	r3, [r7, #4]
 801d6aa:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801d6ac:	683b      	ldr	r3, [r7, #0]
 801d6ae:	3308      	adds	r3, #8
 801d6b0:	681b      	ldr	r3, [r3, #0]
 801d6b2:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801d6b4:	429a      	cmp	r2, r3
 801d6b6:	d101      	bne.n	801d6bc <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801d6b8:	2301      	movs	r3, #1
 801d6ba:	e000      	b.n	801d6be <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801d6bc:	2300      	movs	r3, #0
  }
}
 801d6be:	4618      	mov	r0, r3
 801d6c0:	3714      	adds	r7, #20
 801d6c2:	46bd      	mov	sp, r7
 801d6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d6c8:	4770      	bx	lr
	...

0801d6cc <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801d6cc:	b580      	push	{r7, lr}
 801d6ce:	b084      	sub	sp, #16
 801d6d0:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801d6d2:	2300      	movs	r3, #0
 801d6d4:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801d6d6:	4b12      	ldr	r3, [pc, #72]	; (801d720 <ip_reass_tmr+0x54>)
 801d6d8:	681b      	ldr	r3, [r3, #0]
 801d6da:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801d6dc:	e018      	b.n	801d710 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801d6de:	68fb      	ldr	r3, [r7, #12]
 801d6e0:	7fdb      	ldrb	r3, [r3, #31]
 801d6e2:	2b00      	cmp	r3, #0
 801d6e4:	d00b      	beq.n	801d6fe <ip_reass_tmr+0x32>
      r->timer--;
 801d6e6:	68fb      	ldr	r3, [r7, #12]
 801d6e8:	7fdb      	ldrb	r3, [r3, #31]
 801d6ea:	3b01      	subs	r3, #1
 801d6ec:	b2da      	uxtb	r2, r3
 801d6ee:	68fb      	ldr	r3, [r7, #12]
 801d6f0:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801d6f2:	68fb      	ldr	r3, [r7, #12]
 801d6f4:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801d6f6:	68fb      	ldr	r3, [r7, #12]
 801d6f8:	681b      	ldr	r3, [r3, #0]
 801d6fa:	60fb      	str	r3, [r7, #12]
 801d6fc:	e008      	b.n	801d710 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801d6fe:	68fb      	ldr	r3, [r7, #12]
 801d700:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801d702:	68fb      	ldr	r3, [r7, #12]
 801d704:	681b      	ldr	r3, [r3, #0]
 801d706:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801d708:	68b9      	ldr	r1, [r7, #8]
 801d70a:	6878      	ldr	r0, [r7, #4]
 801d70c:	f000 f80a 	bl	801d724 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801d710:	68fb      	ldr	r3, [r7, #12]
 801d712:	2b00      	cmp	r3, #0
 801d714:	d1e3      	bne.n	801d6de <ip_reass_tmr+0x12>
    }
  }
}
 801d716:	bf00      	nop
 801d718:	bf00      	nop
 801d71a:	3710      	adds	r7, #16
 801d71c:	46bd      	mov	sp, r7
 801d71e:	bd80      	pop	{r7, pc}
 801d720:	24004680 	.word	0x24004680

0801d724 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801d724:	b580      	push	{r7, lr}
 801d726:	b088      	sub	sp, #32
 801d728:	af00      	add	r7, sp, #0
 801d72a:	6078      	str	r0, [r7, #4]
 801d72c:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801d72e:	2300      	movs	r3, #0
 801d730:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801d732:	683a      	ldr	r2, [r7, #0]
 801d734:	687b      	ldr	r3, [r7, #4]
 801d736:	429a      	cmp	r2, r3
 801d738:	d105      	bne.n	801d746 <ip_reass_free_complete_datagram+0x22>
 801d73a:	4b45      	ldr	r3, [pc, #276]	; (801d850 <ip_reass_free_complete_datagram+0x12c>)
 801d73c:	22ab      	movs	r2, #171	; 0xab
 801d73e:	4945      	ldr	r1, [pc, #276]	; (801d854 <ip_reass_free_complete_datagram+0x130>)
 801d740:	4845      	ldr	r0, [pc, #276]	; (801d858 <ip_reass_free_complete_datagram+0x134>)
 801d742:	f001 ff5f 	bl	801f604 <iprintf>
  if (prev != NULL) {
 801d746:	683b      	ldr	r3, [r7, #0]
 801d748:	2b00      	cmp	r3, #0
 801d74a:	d00a      	beq.n	801d762 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801d74c:	683b      	ldr	r3, [r7, #0]
 801d74e:	681b      	ldr	r3, [r3, #0]
 801d750:	687a      	ldr	r2, [r7, #4]
 801d752:	429a      	cmp	r2, r3
 801d754:	d005      	beq.n	801d762 <ip_reass_free_complete_datagram+0x3e>
 801d756:	4b3e      	ldr	r3, [pc, #248]	; (801d850 <ip_reass_free_complete_datagram+0x12c>)
 801d758:	22ad      	movs	r2, #173	; 0xad
 801d75a:	4940      	ldr	r1, [pc, #256]	; (801d85c <ip_reass_free_complete_datagram+0x138>)
 801d75c:	483e      	ldr	r0, [pc, #248]	; (801d858 <ip_reass_free_complete_datagram+0x134>)
 801d75e:	f001 ff51 	bl	801f604 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801d762:	687b      	ldr	r3, [r7, #4]
 801d764:	685b      	ldr	r3, [r3, #4]
 801d766:	685b      	ldr	r3, [r3, #4]
 801d768:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801d76a:	697b      	ldr	r3, [r7, #20]
 801d76c:	889b      	ldrh	r3, [r3, #4]
 801d76e:	b29b      	uxth	r3, r3
 801d770:	2b00      	cmp	r3, #0
 801d772:	d12a      	bne.n	801d7ca <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801d774:	687b      	ldr	r3, [r7, #4]
 801d776:	685b      	ldr	r3, [r3, #4]
 801d778:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801d77a:	697b      	ldr	r3, [r7, #20]
 801d77c:	681a      	ldr	r2, [r3, #0]
 801d77e:	687b      	ldr	r3, [r7, #4]
 801d780:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801d782:	69bb      	ldr	r3, [r7, #24]
 801d784:	6858      	ldr	r0, [r3, #4]
 801d786:	687b      	ldr	r3, [r7, #4]
 801d788:	3308      	adds	r3, #8
 801d78a:	2214      	movs	r2, #20
 801d78c:	4619      	mov	r1, r3
 801d78e:	f001 f8c3 	bl	801e918 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801d792:	2101      	movs	r1, #1
 801d794:	69b8      	ldr	r0, [r7, #24]
 801d796:	f7ff fc1f 	bl	801cfd8 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801d79a:	69b8      	ldr	r0, [r7, #24]
 801d79c:	f7f5 fb98 	bl	8012ed0 <pbuf_clen>
 801d7a0:	4603      	mov	r3, r0
 801d7a2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801d7a4:	8bfa      	ldrh	r2, [r7, #30]
 801d7a6:	8a7b      	ldrh	r3, [r7, #18]
 801d7a8:	4413      	add	r3, r2
 801d7aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801d7ae:	db05      	blt.n	801d7bc <ip_reass_free_complete_datagram+0x98>
 801d7b0:	4b27      	ldr	r3, [pc, #156]	; (801d850 <ip_reass_free_complete_datagram+0x12c>)
 801d7b2:	22bc      	movs	r2, #188	; 0xbc
 801d7b4:	492a      	ldr	r1, [pc, #168]	; (801d860 <ip_reass_free_complete_datagram+0x13c>)
 801d7b6:	4828      	ldr	r0, [pc, #160]	; (801d858 <ip_reass_free_complete_datagram+0x134>)
 801d7b8:	f001 ff24 	bl	801f604 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801d7bc:	8bfa      	ldrh	r2, [r7, #30]
 801d7be:	8a7b      	ldrh	r3, [r7, #18]
 801d7c0:	4413      	add	r3, r2
 801d7c2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801d7c4:	69b8      	ldr	r0, [r7, #24]
 801d7c6:	f7f5 faf5 	bl	8012db4 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801d7ca:	687b      	ldr	r3, [r7, #4]
 801d7cc:	685b      	ldr	r3, [r3, #4]
 801d7ce:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801d7d0:	e01f      	b.n	801d812 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801d7d2:	69bb      	ldr	r3, [r7, #24]
 801d7d4:	685b      	ldr	r3, [r3, #4]
 801d7d6:	617b      	str	r3, [r7, #20]
    pcur = p;
 801d7d8:	69bb      	ldr	r3, [r7, #24]
 801d7da:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801d7dc:	697b      	ldr	r3, [r7, #20]
 801d7de:	681b      	ldr	r3, [r3, #0]
 801d7e0:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801d7e2:	68f8      	ldr	r0, [r7, #12]
 801d7e4:	f7f5 fb74 	bl	8012ed0 <pbuf_clen>
 801d7e8:	4603      	mov	r3, r0
 801d7ea:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801d7ec:	8bfa      	ldrh	r2, [r7, #30]
 801d7ee:	8a7b      	ldrh	r3, [r7, #18]
 801d7f0:	4413      	add	r3, r2
 801d7f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801d7f6:	db05      	blt.n	801d804 <ip_reass_free_complete_datagram+0xe0>
 801d7f8:	4b15      	ldr	r3, [pc, #84]	; (801d850 <ip_reass_free_complete_datagram+0x12c>)
 801d7fa:	22cc      	movs	r2, #204	; 0xcc
 801d7fc:	4918      	ldr	r1, [pc, #96]	; (801d860 <ip_reass_free_complete_datagram+0x13c>)
 801d7fe:	4816      	ldr	r0, [pc, #88]	; (801d858 <ip_reass_free_complete_datagram+0x134>)
 801d800:	f001 ff00 	bl	801f604 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801d804:	8bfa      	ldrh	r2, [r7, #30]
 801d806:	8a7b      	ldrh	r3, [r7, #18]
 801d808:	4413      	add	r3, r2
 801d80a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801d80c:	68f8      	ldr	r0, [r7, #12]
 801d80e:	f7f5 fad1 	bl	8012db4 <pbuf_free>
  while (p != NULL) {
 801d812:	69bb      	ldr	r3, [r7, #24]
 801d814:	2b00      	cmp	r3, #0
 801d816:	d1dc      	bne.n	801d7d2 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801d818:	6839      	ldr	r1, [r7, #0]
 801d81a:	6878      	ldr	r0, [r7, #4]
 801d81c:	f000 f8c2 	bl	801d9a4 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801d820:	4b10      	ldr	r3, [pc, #64]	; (801d864 <ip_reass_free_complete_datagram+0x140>)
 801d822:	881b      	ldrh	r3, [r3, #0]
 801d824:	8bfa      	ldrh	r2, [r7, #30]
 801d826:	429a      	cmp	r2, r3
 801d828:	d905      	bls.n	801d836 <ip_reass_free_complete_datagram+0x112>
 801d82a:	4b09      	ldr	r3, [pc, #36]	; (801d850 <ip_reass_free_complete_datagram+0x12c>)
 801d82c:	22d2      	movs	r2, #210	; 0xd2
 801d82e:	490e      	ldr	r1, [pc, #56]	; (801d868 <ip_reass_free_complete_datagram+0x144>)
 801d830:	4809      	ldr	r0, [pc, #36]	; (801d858 <ip_reass_free_complete_datagram+0x134>)
 801d832:	f001 fee7 	bl	801f604 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801d836:	4b0b      	ldr	r3, [pc, #44]	; (801d864 <ip_reass_free_complete_datagram+0x140>)
 801d838:	881a      	ldrh	r2, [r3, #0]
 801d83a:	8bfb      	ldrh	r3, [r7, #30]
 801d83c:	1ad3      	subs	r3, r2, r3
 801d83e:	b29a      	uxth	r2, r3
 801d840:	4b08      	ldr	r3, [pc, #32]	; (801d864 <ip_reass_free_complete_datagram+0x140>)
 801d842:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801d844:	8bfb      	ldrh	r3, [r7, #30]
}
 801d846:	4618      	mov	r0, r3
 801d848:	3720      	adds	r7, #32
 801d84a:	46bd      	mov	sp, r7
 801d84c:	bd80      	pop	{r7, pc}
 801d84e:	bf00      	nop
 801d850:	08026d24 	.word	0x08026d24
 801d854:	08026d60 	.word	0x08026d60
 801d858:	08026d6c 	.word	0x08026d6c
 801d85c:	08026d94 	.word	0x08026d94
 801d860:	08026da8 	.word	0x08026da8
 801d864:	24004684 	.word	0x24004684
 801d868:	08026dc8 	.word	0x08026dc8

0801d86c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801d86c:	b580      	push	{r7, lr}
 801d86e:	b08a      	sub	sp, #40	; 0x28
 801d870:	af00      	add	r7, sp, #0
 801d872:	6078      	str	r0, [r7, #4]
 801d874:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801d876:	2300      	movs	r3, #0
 801d878:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801d87a:	2300      	movs	r3, #0
 801d87c:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801d87e:	2300      	movs	r3, #0
 801d880:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801d882:	2300      	movs	r3, #0
 801d884:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801d886:	2300      	movs	r3, #0
 801d888:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801d88a:	4b28      	ldr	r3, [pc, #160]	; (801d92c <ip_reass_remove_oldest_datagram+0xc0>)
 801d88c:	681b      	ldr	r3, [r3, #0]
 801d88e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801d890:	e030      	b.n	801d8f4 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801d892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d894:	695a      	ldr	r2, [r3, #20]
 801d896:	687b      	ldr	r3, [r7, #4]
 801d898:	68db      	ldr	r3, [r3, #12]
 801d89a:	429a      	cmp	r2, r3
 801d89c:	d10c      	bne.n	801d8b8 <ip_reass_remove_oldest_datagram+0x4c>
 801d89e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d8a0:	699a      	ldr	r2, [r3, #24]
 801d8a2:	687b      	ldr	r3, [r7, #4]
 801d8a4:	691b      	ldr	r3, [r3, #16]
 801d8a6:	429a      	cmp	r2, r3
 801d8a8:	d106      	bne.n	801d8b8 <ip_reass_remove_oldest_datagram+0x4c>
 801d8aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d8ac:	899a      	ldrh	r2, [r3, #12]
 801d8ae:	687b      	ldr	r3, [r7, #4]
 801d8b0:	889b      	ldrh	r3, [r3, #4]
 801d8b2:	b29b      	uxth	r3, r3
 801d8b4:	429a      	cmp	r2, r3
 801d8b6:	d014      	beq.n	801d8e2 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801d8b8:	693b      	ldr	r3, [r7, #16]
 801d8ba:	3301      	adds	r3, #1
 801d8bc:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801d8be:	6a3b      	ldr	r3, [r7, #32]
 801d8c0:	2b00      	cmp	r3, #0
 801d8c2:	d104      	bne.n	801d8ce <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801d8c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d8c6:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801d8c8:	69fb      	ldr	r3, [r7, #28]
 801d8ca:	61bb      	str	r3, [r7, #24]
 801d8cc:	e009      	b.n	801d8e2 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801d8ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d8d0:	7fda      	ldrb	r2, [r3, #31]
 801d8d2:	6a3b      	ldr	r3, [r7, #32]
 801d8d4:	7fdb      	ldrb	r3, [r3, #31]
 801d8d6:	429a      	cmp	r2, r3
 801d8d8:	d803      	bhi.n	801d8e2 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801d8da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d8dc:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801d8de:	69fb      	ldr	r3, [r7, #28]
 801d8e0:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801d8e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d8e4:	681b      	ldr	r3, [r3, #0]
 801d8e6:	2b00      	cmp	r3, #0
 801d8e8:	d001      	beq.n	801d8ee <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801d8ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d8ec:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801d8ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d8f0:	681b      	ldr	r3, [r3, #0]
 801d8f2:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801d8f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d8f6:	2b00      	cmp	r3, #0
 801d8f8:	d1cb      	bne.n	801d892 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801d8fa:	6a3b      	ldr	r3, [r7, #32]
 801d8fc:	2b00      	cmp	r3, #0
 801d8fe:	d008      	beq.n	801d912 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801d900:	69b9      	ldr	r1, [r7, #24]
 801d902:	6a38      	ldr	r0, [r7, #32]
 801d904:	f7ff ff0e 	bl	801d724 <ip_reass_free_complete_datagram>
 801d908:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801d90a:	697a      	ldr	r2, [r7, #20]
 801d90c:	68fb      	ldr	r3, [r7, #12]
 801d90e:	4413      	add	r3, r2
 801d910:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801d912:	697a      	ldr	r2, [r7, #20]
 801d914:	683b      	ldr	r3, [r7, #0]
 801d916:	429a      	cmp	r2, r3
 801d918:	da02      	bge.n	801d920 <ip_reass_remove_oldest_datagram+0xb4>
 801d91a:	693b      	ldr	r3, [r7, #16]
 801d91c:	2b01      	cmp	r3, #1
 801d91e:	dcac      	bgt.n	801d87a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801d920:	697b      	ldr	r3, [r7, #20]
}
 801d922:	4618      	mov	r0, r3
 801d924:	3728      	adds	r7, #40	; 0x28
 801d926:	46bd      	mov	sp, r7
 801d928:	bd80      	pop	{r7, pc}
 801d92a:	bf00      	nop
 801d92c:	24004680 	.word	0x24004680

0801d930 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801d930:	b580      	push	{r7, lr}
 801d932:	b084      	sub	sp, #16
 801d934:	af00      	add	r7, sp, #0
 801d936:	6078      	str	r0, [r7, #4]
 801d938:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801d93a:	2004      	movs	r0, #4
 801d93c:	f7f4 fae2 	bl	8011f04 <memp_malloc>
 801d940:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801d942:	68fb      	ldr	r3, [r7, #12]
 801d944:	2b00      	cmp	r3, #0
 801d946:	d110      	bne.n	801d96a <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801d948:	6839      	ldr	r1, [r7, #0]
 801d94a:	6878      	ldr	r0, [r7, #4]
 801d94c:	f7ff ff8e 	bl	801d86c <ip_reass_remove_oldest_datagram>
 801d950:	4602      	mov	r2, r0
 801d952:	683b      	ldr	r3, [r7, #0]
 801d954:	4293      	cmp	r3, r2
 801d956:	dc03      	bgt.n	801d960 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801d958:	2004      	movs	r0, #4
 801d95a:	f7f4 fad3 	bl	8011f04 <memp_malloc>
 801d95e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801d960:	68fb      	ldr	r3, [r7, #12]
 801d962:	2b00      	cmp	r3, #0
 801d964:	d101      	bne.n	801d96a <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801d966:	2300      	movs	r3, #0
 801d968:	e016      	b.n	801d998 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801d96a:	2220      	movs	r2, #32
 801d96c:	2100      	movs	r1, #0
 801d96e:	68f8      	ldr	r0, [r7, #12]
 801d970:	f000 fffa 	bl	801e968 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801d974:	68fb      	ldr	r3, [r7, #12]
 801d976:	220f      	movs	r2, #15
 801d978:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801d97a:	4b09      	ldr	r3, [pc, #36]	; (801d9a0 <ip_reass_enqueue_new_datagram+0x70>)
 801d97c:	681a      	ldr	r2, [r3, #0]
 801d97e:	68fb      	ldr	r3, [r7, #12]
 801d980:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801d982:	4a07      	ldr	r2, [pc, #28]	; (801d9a0 <ip_reass_enqueue_new_datagram+0x70>)
 801d984:	68fb      	ldr	r3, [r7, #12]
 801d986:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801d988:	68fb      	ldr	r3, [r7, #12]
 801d98a:	3308      	adds	r3, #8
 801d98c:	2214      	movs	r2, #20
 801d98e:	6879      	ldr	r1, [r7, #4]
 801d990:	4618      	mov	r0, r3
 801d992:	f000 ffc1 	bl	801e918 <memcpy>
  return ipr;
 801d996:	68fb      	ldr	r3, [r7, #12]
}
 801d998:	4618      	mov	r0, r3
 801d99a:	3710      	adds	r7, #16
 801d99c:	46bd      	mov	sp, r7
 801d99e:	bd80      	pop	{r7, pc}
 801d9a0:	24004680 	.word	0x24004680

0801d9a4 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801d9a4:	b580      	push	{r7, lr}
 801d9a6:	b082      	sub	sp, #8
 801d9a8:	af00      	add	r7, sp, #0
 801d9aa:	6078      	str	r0, [r7, #4]
 801d9ac:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801d9ae:	4b10      	ldr	r3, [pc, #64]	; (801d9f0 <ip_reass_dequeue_datagram+0x4c>)
 801d9b0:	681b      	ldr	r3, [r3, #0]
 801d9b2:	687a      	ldr	r2, [r7, #4]
 801d9b4:	429a      	cmp	r2, r3
 801d9b6:	d104      	bne.n	801d9c2 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801d9b8:	687b      	ldr	r3, [r7, #4]
 801d9ba:	681b      	ldr	r3, [r3, #0]
 801d9bc:	4a0c      	ldr	r2, [pc, #48]	; (801d9f0 <ip_reass_dequeue_datagram+0x4c>)
 801d9be:	6013      	str	r3, [r2, #0]
 801d9c0:	e00d      	b.n	801d9de <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801d9c2:	683b      	ldr	r3, [r7, #0]
 801d9c4:	2b00      	cmp	r3, #0
 801d9c6:	d106      	bne.n	801d9d6 <ip_reass_dequeue_datagram+0x32>
 801d9c8:	4b0a      	ldr	r3, [pc, #40]	; (801d9f4 <ip_reass_dequeue_datagram+0x50>)
 801d9ca:	f240 1245 	movw	r2, #325	; 0x145
 801d9ce:	490a      	ldr	r1, [pc, #40]	; (801d9f8 <ip_reass_dequeue_datagram+0x54>)
 801d9d0:	480a      	ldr	r0, [pc, #40]	; (801d9fc <ip_reass_dequeue_datagram+0x58>)
 801d9d2:	f001 fe17 	bl	801f604 <iprintf>
    prev->next = ipr->next;
 801d9d6:	687b      	ldr	r3, [r7, #4]
 801d9d8:	681a      	ldr	r2, [r3, #0]
 801d9da:	683b      	ldr	r3, [r7, #0]
 801d9dc:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801d9de:	6879      	ldr	r1, [r7, #4]
 801d9e0:	2004      	movs	r0, #4
 801d9e2:	f7f4 fb05 	bl	8011ff0 <memp_free>
}
 801d9e6:	bf00      	nop
 801d9e8:	3708      	adds	r7, #8
 801d9ea:	46bd      	mov	sp, r7
 801d9ec:	bd80      	pop	{r7, pc}
 801d9ee:	bf00      	nop
 801d9f0:	24004680 	.word	0x24004680
 801d9f4:	08026d24 	.word	0x08026d24
 801d9f8:	08026dec 	.word	0x08026dec
 801d9fc:	08026d6c 	.word	0x08026d6c

0801da00 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801da00:	b580      	push	{r7, lr}
 801da02:	b08c      	sub	sp, #48	; 0x30
 801da04:	af00      	add	r7, sp, #0
 801da06:	60f8      	str	r0, [r7, #12]
 801da08:	60b9      	str	r1, [r7, #8]
 801da0a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801da0c:	2300      	movs	r3, #0
 801da0e:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801da10:	2301      	movs	r3, #1
 801da12:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 801da14:	68bb      	ldr	r3, [r7, #8]
 801da16:	685b      	ldr	r3, [r3, #4]
 801da18:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801da1a:	69fb      	ldr	r3, [r7, #28]
 801da1c:	885b      	ldrh	r3, [r3, #2]
 801da1e:	b29b      	uxth	r3, r3
 801da20:	4618      	mov	r0, r3
 801da22:	f7f3 fcdf 	bl	80113e4 <lwip_htons>
 801da26:	4603      	mov	r3, r0
 801da28:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801da2a:	69fb      	ldr	r3, [r7, #28]
 801da2c:	781b      	ldrb	r3, [r3, #0]
 801da2e:	f003 030f 	and.w	r3, r3, #15
 801da32:	b2db      	uxtb	r3, r3
 801da34:	009b      	lsls	r3, r3, #2
 801da36:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801da38:	7e7b      	ldrb	r3, [r7, #25]
 801da3a:	b29b      	uxth	r3, r3
 801da3c:	8b7a      	ldrh	r2, [r7, #26]
 801da3e:	429a      	cmp	r2, r3
 801da40:	d202      	bcs.n	801da48 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801da42:	f04f 33ff 	mov.w	r3, #4294967295
 801da46:	e135      	b.n	801dcb4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801da48:	7e7b      	ldrb	r3, [r7, #25]
 801da4a:	b29b      	uxth	r3, r3
 801da4c:	8b7a      	ldrh	r2, [r7, #26]
 801da4e:	1ad3      	subs	r3, r2, r3
 801da50:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801da52:	69fb      	ldr	r3, [r7, #28]
 801da54:	88db      	ldrh	r3, [r3, #6]
 801da56:	b29b      	uxth	r3, r3
 801da58:	4618      	mov	r0, r3
 801da5a:	f7f3 fcc3 	bl	80113e4 <lwip_htons>
 801da5e:	4603      	mov	r3, r0
 801da60:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801da64:	b29b      	uxth	r3, r3
 801da66:	00db      	lsls	r3, r3, #3
 801da68:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801da6a:	68bb      	ldr	r3, [r7, #8]
 801da6c:	685b      	ldr	r3, [r3, #4]
 801da6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 801da70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801da72:	2200      	movs	r2, #0
 801da74:	701a      	strb	r2, [r3, #0]
 801da76:	2200      	movs	r2, #0
 801da78:	705a      	strb	r2, [r3, #1]
 801da7a:	2200      	movs	r2, #0
 801da7c:	709a      	strb	r2, [r3, #2]
 801da7e:	2200      	movs	r2, #0
 801da80:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801da82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801da84:	8afa      	ldrh	r2, [r7, #22]
 801da86:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801da88:	8afa      	ldrh	r2, [r7, #22]
 801da8a:	8b7b      	ldrh	r3, [r7, #26]
 801da8c:	4413      	add	r3, r2
 801da8e:	b29a      	uxth	r2, r3
 801da90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801da92:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801da94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801da96:	88db      	ldrh	r3, [r3, #6]
 801da98:	b29b      	uxth	r3, r3
 801da9a:	8afa      	ldrh	r2, [r7, #22]
 801da9c:	429a      	cmp	r2, r3
 801da9e:	d902      	bls.n	801daa6 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801daa0:	f04f 33ff 	mov.w	r3, #4294967295
 801daa4:	e106      	b.n	801dcb4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801daa6:	68fb      	ldr	r3, [r7, #12]
 801daa8:	685b      	ldr	r3, [r3, #4]
 801daaa:	627b      	str	r3, [r7, #36]	; 0x24
 801daac:	e068      	b.n	801db80 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801daae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dab0:	685b      	ldr	r3, [r3, #4]
 801dab2:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801dab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dab6:	889b      	ldrh	r3, [r3, #4]
 801dab8:	b29a      	uxth	r2, r3
 801daba:	693b      	ldr	r3, [r7, #16]
 801dabc:	889b      	ldrh	r3, [r3, #4]
 801dabe:	b29b      	uxth	r3, r3
 801dac0:	429a      	cmp	r2, r3
 801dac2:	d235      	bcs.n	801db30 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801dac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dac6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801dac8:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801daca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dacc:	2b00      	cmp	r3, #0
 801dace:	d020      	beq.n	801db12 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801dad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dad2:	889b      	ldrh	r3, [r3, #4]
 801dad4:	b29a      	uxth	r2, r3
 801dad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dad8:	88db      	ldrh	r3, [r3, #6]
 801dada:	b29b      	uxth	r3, r3
 801dadc:	429a      	cmp	r2, r3
 801dade:	d307      	bcc.n	801daf0 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801dae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dae2:	88db      	ldrh	r3, [r3, #6]
 801dae4:	b29a      	uxth	r2, r3
 801dae6:	693b      	ldr	r3, [r7, #16]
 801dae8:	889b      	ldrh	r3, [r3, #4]
 801daea:	b29b      	uxth	r3, r3
 801daec:	429a      	cmp	r2, r3
 801daee:	d902      	bls.n	801daf6 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801daf0:	f04f 33ff 	mov.w	r3, #4294967295
 801daf4:	e0de      	b.n	801dcb4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801daf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801daf8:	68ba      	ldr	r2, [r7, #8]
 801dafa:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801dafc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dafe:	88db      	ldrh	r3, [r3, #6]
 801db00:	b29a      	uxth	r2, r3
 801db02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801db04:	889b      	ldrh	r3, [r3, #4]
 801db06:	b29b      	uxth	r3, r3
 801db08:	429a      	cmp	r2, r3
 801db0a:	d03d      	beq.n	801db88 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801db0c:	2300      	movs	r3, #0
 801db0e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801db10:	e03a      	b.n	801db88 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801db12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801db14:	88db      	ldrh	r3, [r3, #6]
 801db16:	b29a      	uxth	r2, r3
 801db18:	693b      	ldr	r3, [r7, #16]
 801db1a:	889b      	ldrh	r3, [r3, #4]
 801db1c:	b29b      	uxth	r3, r3
 801db1e:	429a      	cmp	r2, r3
 801db20:	d902      	bls.n	801db28 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801db22:	f04f 33ff 	mov.w	r3, #4294967295
 801db26:	e0c5      	b.n	801dcb4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801db28:	68fb      	ldr	r3, [r7, #12]
 801db2a:	68ba      	ldr	r2, [r7, #8]
 801db2c:	605a      	str	r2, [r3, #4]
      break;
 801db2e:	e02b      	b.n	801db88 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801db30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801db32:	889b      	ldrh	r3, [r3, #4]
 801db34:	b29a      	uxth	r2, r3
 801db36:	693b      	ldr	r3, [r7, #16]
 801db38:	889b      	ldrh	r3, [r3, #4]
 801db3a:	b29b      	uxth	r3, r3
 801db3c:	429a      	cmp	r2, r3
 801db3e:	d102      	bne.n	801db46 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801db40:	f04f 33ff 	mov.w	r3, #4294967295
 801db44:	e0b6      	b.n	801dcb4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801db46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801db48:	889b      	ldrh	r3, [r3, #4]
 801db4a:	b29a      	uxth	r2, r3
 801db4c:	693b      	ldr	r3, [r7, #16]
 801db4e:	88db      	ldrh	r3, [r3, #6]
 801db50:	b29b      	uxth	r3, r3
 801db52:	429a      	cmp	r2, r3
 801db54:	d202      	bcs.n	801db5c <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801db56:	f04f 33ff 	mov.w	r3, #4294967295
 801db5a:	e0ab      	b.n	801dcb4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801db5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801db5e:	2b00      	cmp	r3, #0
 801db60:	d009      	beq.n	801db76 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801db62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801db64:	88db      	ldrh	r3, [r3, #6]
 801db66:	b29a      	uxth	r2, r3
 801db68:	693b      	ldr	r3, [r7, #16]
 801db6a:	889b      	ldrh	r3, [r3, #4]
 801db6c:	b29b      	uxth	r3, r3
 801db6e:	429a      	cmp	r2, r3
 801db70:	d001      	beq.n	801db76 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801db72:	2300      	movs	r3, #0
 801db74:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801db76:	693b      	ldr	r3, [r7, #16]
 801db78:	681b      	ldr	r3, [r3, #0]
 801db7a:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 801db7c:	693b      	ldr	r3, [r7, #16]
 801db7e:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 801db80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801db82:	2b00      	cmp	r3, #0
 801db84:	d193      	bne.n	801daae <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801db86:	e000      	b.n	801db8a <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801db88:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801db8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801db8c:	2b00      	cmp	r3, #0
 801db8e:	d12d      	bne.n	801dbec <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801db90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801db92:	2b00      	cmp	r3, #0
 801db94:	d01c      	beq.n	801dbd0 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801db96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801db98:	88db      	ldrh	r3, [r3, #6]
 801db9a:	b29a      	uxth	r2, r3
 801db9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801db9e:	889b      	ldrh	r3, [r3, #4]
 801dba0:	b29b      	uxth	r3, r3
 801dba2:	429a      	cmp	r2, r3
 801dba4:	d906      	bls.n	801dbb4 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801dba6:	4b45      	ldr	r3, [pc, #276]	; (801dcbc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801dba8:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 801dbac:	4944      	ldr	r1, [pc, #272]	; (801dcc0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801dbae:	4845      	ldr	r0, [pc, #276]	; (801dcc4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801dbb0:	f001 fd28 	bl	801f604 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801dbb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dbb6:	68ba      	ldr	r2, [r7, #8]
 801dbb8:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801dbba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dbbc:	88db      	ldrh	r3, [r3, #6]
 801dbbe:	b29a      	uxth	r2, r3
 801dbc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dbc2:	889b      	ldrh	r3, [r3, #4]
 801dbc4:	b29b      	uxth	r3, r3
 801dbc6:	429a      	cmp	r2, r3
 801dbc8:	d010      	beq.n	801dbec <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801dbca:	2300      	movs	r3, #0
 801dbcc:	623b      	str	r3, [r7, #32]
 801dbce:	e00d      	b.n	801dbec <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801dbd0:	68fb      	ldr	r3, [r7, #12]
 801dbd2:	685b      	ldr	r3, [r3, #4]
 801dbd4:	2b00      	cmp	r3, #0
 801dbd6:	d006      	beq.n	801dbe6 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801dbd8:	4b38      	ldr	r3, [pc, #224]	; (801dcbc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801dbda:	f44f 72df 	mov.w	r2, #446	; 0x1be
 801dbde:	493a      	ldr	r1, [pc, #232]	; (801dcc8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801dbe0:	4838      	ldr	r0, [pc, #224]	; (801dcc4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801dbe2:	f001 fd0f 	bl	801f604 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801dbe6:	68fb      	ldr	r3, [r7, #12]
 801dbe8:	68ba      	ldr	r2, [r7, #8]
 801dbea:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801dbec:	687b      	ldr	r3, [r7, #4]
 801dbee:	2b00      	cmp	r3, #0
 801dbf0:	d105      	bne.n	801dbfe <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801dbf2:	68fb      	ldr	r3, [r7, #12]
 801dbf4:	7f9b      	ldrb	r3, [r3, #30]
 801dbf6:	f003 0301 	and.w	r3, r3, #1
 801dbfa:	2b00      	cmp	r3, #0
 801dbfc:	d059      	beq.n	801dcb2 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801dbfe:	6a3b      	ldr	r3, [r7, #32]
 801dc00:	2b00      	cmp	r3, #0
 801dc02:	d04f      	beq.n	801dca4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801dc04:	68fb      	ldr	r3, [r7, #12]
 801dc06:	685b      	ldr	r3, [r3, #4]
 801dc08:	2b00      	cmp	r3, #0
 801dc0a:	d006      	beq.n	801dc1a <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801dc0c:	68fb      	ldr	r3, [r7, #12]
 801dc0e:	685b      	ldr	r3, [r3, #4]
 801dc10:	685b      	ldr	r3, [r3, #4]
 801dc12:	889b      	ldrh	r3, [r3, #4]
 801dc14:	b29b      	uxth	r3, r3
 801dc16:	2b00      	cmp	r3, #0
 801dc18:	d002      	beq.n	801dc20 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801dc1a:	2300      	movs	r3, #0
 801dc1c:	623b      	str	r3, [r7, #32]
 801dc1e:	e041      	b.n	801dca4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801dc20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dc22:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 801dc24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dc26:	681b      	ldr	r3, [r3, #0]
 801dc28:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801dc2a:	e012      	b.n	801dc52 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801dc2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dc2e:	685b      	ldr	r3, [r3, #4]
 801dc30:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 801dc32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dc34:	88db      	ldrh	r3, [r3, #6]
 801dc36:	b29a      	uxth	r2, r3
 801dc38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dc3a:	889b      	ldrh	r3, [r3, #4]
 801dc3c:	b29b      	uxth	r3, r3
 801dc3e:	429a      	cmp	r2, r3
 801dc40:	d002      	beq.n	801dc48 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801dc42:	2300      	movs	r3, #0
 801dc44:	623b      	str	r3, [r7, #32]
            break;
 801dc46:	e007      	b.n	801dc58 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801dc48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dc4a:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 801dc4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dc4e:	681b      	ldr	r3, [r3, #0]
 801dc50:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801dc52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dc54:	2b00      	cmp	r3, #0
 801dc56:	d1e9      	bne.n	801dc2c <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801dc58:	6a3b      	ldr	r3, [r7, #32]
 801dc5a:	2b00      	cmp	r3, #0
 801dc5c:	d022      	beq.n	801dca4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801dc5e:	68fb      	ldr	r3, [r7, #12]
 801dc60:	685b      	ldr	r3, [r3, #4]
 801dc62:	2b00      	cmp	r3, #0
 801dc64:	d106      	bne.n	801dc74 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801dc66:	4b15      	ldr	r3, [pc, #84]	; (801dcbc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801dc68:	f240 12df 	movw	r2, #479	; 0x1df
 801dc6c:	4917      	ldr	r1, [pc, #92]	; (801dccc <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801dc6e:	4815      	ldr	r0, [pc, #84]	; (801dcc4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801dc70:	f001 fcc8 	bl	801f604 <iprintf>
          LWIP_ASSERT("sanity check",
 801dc74:	68fb      	ldr	r3, [r7, #12]
 801dc76:	685b      	ldr	r3, [r3, #4]
 801dc78:	685b      	ldr	r3, [r3, #4]
 801dc7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801dc7c:	429a      	cmp	r2, r3
 801dc7e:	d106      	bne.n	801dc8e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801dc80:	4b0e      	ldr	r3, [pc, #56]	; (801dcbc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801dc82:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801dc86:	4911      	ldr	r1, [pc, #68]	; (801dccc <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801dc88:	480e      	ldr	r0, [pc, #56]	; (801dcc4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801dc8a:	f001 fcbb 	bl	801f604 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801dc8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dc90:	681b      	ldr	r3, [r3, #0]
 801dc92:	2b00      	cmp	r3, #0
 801dc94:	d006      	beq.n	801dca4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801dc96:	4b09      	ldr	r3, [pc, #36]	; (801dcbc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801dc98:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 801dc9c:	490c      	ldr	r1, [pc, #48]	; (801dcd0 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801dc9e:	4809      	ldr	r0, [pc, #36]	; (801dcc4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801dca0:	f001 fcb0 	bl	801f604 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801dca4:	6a3b      	ldr	r3, [r7, #32]
 801dca6:	2b00      	cmp	r3, #0
 801dca8:	bf14      	ite	ne
 801dcaa:	2301      	movne	r3, #1
 801dcac:	2300      	moveq	r3, #0
 801dcae:	b2db      	uxtb	r3, r3
 801dcb0:	e000      	b.n	801dcb4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801dcb2:	2300      	movs	r3, #0
}
 801dcb4:	4618      	mov	r0, r3
 801dcb6:	3730      	adds	r7, #48	; 0x30
 801dcb8:	46bd      	mov	sp, r7
 801dcba:	bd80      	pop	{r7, pc}
 801dcbc:	08026d24 	.word	0x08026d24
 801dcc0:	08026e08 	.word	0x08026e08
 801dcc4:	08026d6c 	.word	0x08026d6c
 801dcc8:	08026e28 	.word	0x08026e28
 801dccc:	08026e60 	.word	0x08026e60
 801dcd0:	08026e70 	.word	0x08026e70

0801dcd4 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801dcd4:	b580      	push	{r7, lr}
 801dcd6:	b08e      	sub	sp, #56	; 0x38
 801dcd8:	af00      	add	r7, sp, #0
 801dcda:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801dcdc:	687b      	ldr	r3, [r7, #4]
 801dcde:	685b      	ldr	r3, [r3, #4]
 801dce0:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801dce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dce4:	781b      	ldrb	r3, [r3, #0]
 801dce6:	f003 030f 	and.w	r3, r3, #15
 801dcea:	b2db      	uxtb	r3, r3
 801dcec:	009b      	lsls	r3, r3, #2
 801dcee:	b2db      	uxtb	r3, r3
 801dcf0:	2b14      	cmp	r3, #20
 801dcf2:	f040 8167 	bne.w	801dfc4 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801dcf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dcf8:	88db      	ldrh	r3, [r3, #6]
 801dcfa:	b29b      	uxth	r3, r3
 801dcfc:	4618      	mov	r0, r3
 801dcfe:	f7f3 fb71 	bl	80113e4 <lwip_htons>
 801dd02:	4603      	mov	r3, r0
 801dd04:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801dd08:	b29b      	uxth	r3, r3
 801dd0a:	00db      	lsls	r3, r3, #3
 801dd0c:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801dd0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dd10:	885b      	ldrh	r3, [r3, #2]
 801dd12:	b29b      	uxth	r3, r3
 801dd14:	4618      	mov	r0, r3
 801dd16:	f7f3 fb65 	bl	80113e4 <lwip_htons>
 801dd1a:	4603      	mov	r3, r0
 801dd1c:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801dd1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dd20:	781b      	ldrb	r3, [r3, #0]
 801dd22:	f003 030f 	and.w	r3, r3, #15
 801dd26:	b2db      	uxtb	r3, r3
 801dd28:	009b      	lsls	r3, r3, #2
 801dd2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 801dd2e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801dd32:	b29b      	uxth	r3, r3
 801dd34:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801dd36:	429a      	cmp	r2, r3
 801dd38:	f0c0 8146 	bcc.w	801dfc8 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801dd3c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801dd40:	b29b      	uxth	r3, r3
 801dd42:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801dd44:	1ad3      	subs	r3, r2, r3
 801dd46:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801dd48:	6878      	ldr	r0, [r7, #4]
 801dd4a:	f7f5 f8c1 	bl	8012ed0 <pbuf_clen>
 801dd4e:	4603      	mov	r3, r0
 801dd50:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801dd52:	4b9f      	ldr	r3, [pc, #636]	; (801dfd0 <ip4_reass+0x2fc>)
 801dd54:	881b      	ldrh	r3, [r3, #0]
 801dd56:	461a      	mov	r2, r3
 801dd58:	8c3b      	ldrh	r3, [r7, #32]
 801dd5a:	4413      	add	r3, r2
 801dd5c:	2b0a      	cmp	r3, #10
 801dd5e:	dd10      	ble.n	801dd82 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801dd60:	8c3b      	ldrh	r3, [r7, #32]
 801dd62:	4619      	mov	r1, r3
 801dd64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801dd66:	f7ff fd81 	bl	801d86c <ip_reass_remove_oldest_datagram>
 801dd6a:	4603      	mov	r3, r0
 801dd6c:	2b00      	cmp	r3, #0
 801dd6e:	f000 812d 	beq.w	801dfcc <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801dd72:	4b97      	ldr	r3, [pc, #604]	; (801dfd0 <ip4_reass+0x2fc>)
 801dd74:	881b      	ldrh	r3, [r3, #0]
 801dd76:	461a      	mov	r2, r3
 801dd78:	8c3b      	ldrh	r3, [r7, #32]
 801dd7a:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801dd7c:	2b0a      	cmp	r3, #10
 801dd7e:	f300 8125 	bgt.w	801dfcc <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801dd82:	4b94      	ldr	r3, [pc, #592]	; (801dfd4 <ip4_reass+0x300>)
 801dd84:	681b      	ldr	r3, [r3, #0]
 801dd86:	633b      	str	r3, [r7, #48]	; 0x30
 801dd88:	e015      	b.n	801ddb6 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801dd8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801dd8c:	695a      	ldr	r2, [r3, #20]
 801dd8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dd90:	68db      	ldr	r3, [r3, #12]
 801dd92:	429a      	cmp	r2, r3
 801dd94:	d10c      	bne.n	801ddb0 <ip4_reass+0xdc>
 801dd96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801dd98:	699a      	ldr	r2, [r3, #24]
 801dd9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dd9c:	691b      	ldr	r3, [r3, #16]
 801dd9e:	429a      	cmp	r2, r3
 801dda0:	d106      	bne.n	801ddb0 <ip4_reass+0xdc>
 801dda2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801dda4:	899a      	ldrh	r2, [r3, #12]
 801dda6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dda8:	889b      	ldrh	r3, [r3, #4]
 801ddaa:	b29b      	uxth	r3, r3
 801ddac:	429a      	cmp	r2, r3
 801ddae:	d006      	beq.n	801ddbe <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801ddb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ddb2:	681b      	ldr	r3, [r3, #0]
 801ddb4:	633b      	str	r3, [r7, #48]	; 0x30
 801ddb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ddb8:	2b00      	cmp	r3, #0
 801ddba:	d1e6      	bne.n	801dd8a <ip4_reass+0xb6>
 801ddbc:	e000      	b.n	801ddc0 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801ddbe:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801ddc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ddc2:	2b00      	cmp	r3, #0
 801ddc4:	d109      	bne.n	801ddda <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801ddc6:	8c3b      	ldrh	r3, [r7, #32]
 801ddc8:	4619      	mov	r1, r3
 801ddca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801ddcc:	f7ff fdb0 	bl	801d930 <ip_reass_enqueue_new_datagram>
 801ddd0:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801ddd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ddd4:	2b00      	cmp	r3, #0
 801ddd6:	d11c      	bne.n	801de12 <ip4_reass+0x13e>
      goto nullreturn;
 801ddd8:	e109      	b.n	801dfee <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801ddda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dddc:	88db      	ldrh	r3, [r3, #6]
 801ddde:	b29b      	uxth	r3, r3
 801dde0:	4618      	mov	r0, r3
 801dde2:	f7f3 faff 	bl	80113e4 <lwip_htons>
 801dde6:	4603      	mov	r3, r0
 801dde8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801ddec:	2b00      	cmp	r3, #0
 801ddee:	d110      	bne.n	801de12 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801ddf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ddf2:	89db      	ldrh	r3, [r3, #14]
 801ddf4:	4618      	mov	r0, r3
 801ddf6:	f7f3 faf5 	bl	80113e4 <lwip_htons>
 801ddfa:	4603      	mov	r3, r0
 801ddfc:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801de00:	2b00      	cmp	r3, #0
 801de02:	d006      	beq.n	801de12 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801de04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801de06:	3308      	adds	r3, #8
 801de08:	2214      	movs	r2, #20
 801de0a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801de0c:	4618      	mov	r0, r3
 801de0e:	f000 fd83 	bl	801e918 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801de12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801de14:	88db      	ldrh	r3, [r3, #6]
 801de16:	b29b      	uxth	r3, r3
 801de18:	f003 0320 	and.w	r3, r3, #32
 801de1c:	2b00      	cmp	r3, #0
 801de1e:	bf0c      	ite	eq
 801de20:	2301      	moveq	r3, #1
 801de22:	2300      	movne	r3, #0
 801de24:	b2db      	uxtb	r3, r3
 801de26:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801de28:	69fb      	ldr	r3, [r7, #28]
 801de2a:	2b00      	cmp	r3, #0
 801de2c:	d00e      	beq.n	801de4c <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801de2e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801de30:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801de32:	4413      	add	r3, r2
 801de34:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801de36:	8b7a      	ldrh	r2, [r7, #26]
 801de38:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801de3a:	429a      	cmp	r2, r3
 801de3c:	f0c0 80a0 	bcc.w	801df80 <ip4_reass+0x2ac>
 801de40:	8b7b      	ldrh	r3, [r7, #26]
 801de42:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801de46:	4293      	cmp	r3, r2
 801de48:	f200 809a 	bhi.w	801df80 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801de4c:	69fa      	ldr	r2, [r7, #28]
 801de4e:	6879      	ldr	r1, [r7, #4]
 801de50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801de52:	f7ff fdd5 	bl	801da00 <ip_reass_chain_frag_into_datagram_and_validate>
 801de56:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801de58:	697b      	ldr	r3, [r7, #20]
 801de5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801de5e:	f000 8091 	beq.w	801df84 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801de62:	4b5b      	ldr	r3, [pc, #364]	; (801dfd0 <ip4_reass+0x2fc>)
 801de64:	881a      	ldrh	r2, [r3, #0]
 801de66:	8c3b      	ldrh	r3, [r7, #32]
 801de68:	4413      	add	r3, r2
 801de6a:	b29a      	uxth	r2, r3
 801de6c:	4b58      	ldr	r3, [pc, #352]	; (801dfd0 <ip4_reass+0x2fc>)
 801de6e:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801de70:	69fb      	ldr	r3, [r7, #28]
 801de72:	2b00      	cmp	r3, #0
 801de74:	d00d      	beq.n	801de92 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801de76:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801de78:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801de7a:	4413      	add	r3, r2
 801de7c:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801de7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801de80:	8a7a      	ldrh	r2, [r7, #18]
 801de82:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801de84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801de86:	7f9b      	ldrb	r3, [r3, #30]
 801de88:	f043 0301 	orr.w	r3, r3, #1
 801de8c:	b2da      	uxtb	r2, r3
 801de8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801de90:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801de92:	697b      	ldr	r3, [r7, #20]
 801de94:	2b01      	cmp	r3, #1
 801de96:	d171      	bne.n	801df7c <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801de98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801de9a:	8b9b      	ldrh	r3, [r3, #28]
 801de9c:	3314      	adds	r3, #20
 801de9e:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801dea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801dea2:	685b      	ldr	r3, [r3, #4]
 801dea4:	685b      	ldr	r3, [r3, #4]
 801dea6:	681b      	ldr	r3, [r3, #0]
 801dea8:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801deaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801deac:	685b      	ldr	r3, [r3, #4]
 801deae:	685b      	ldr	r3, [r3, #4]
 801deb0:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801deb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801deb4:	3308      	adds	r3, #8
 801deb6:	2214      	movs	r2, #20
 801deb8:	4619      	mov	r1, r3
 801deba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801debc:	f000 fd2c 	bl	801e918 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801dec0:	8a3b      	ldrh	r3, [r7, #16]
 801dec2:	4618      	mov	r0, r3
 801dec4:	f7f3 fa8e 	bl	80113e4 <lwip_htons>
 801dec8:	4603      	mov	r3, r0
 801deca:	461a      	mov	r2, r3
 801decc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dece:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801ded0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ded2:	2200      	movs	r2, #0
 801ded4:	719a      	strb	r2, [r3, #6]
 801ded6:	2200      	movs	r2, #0
 801ded8:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801deda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dedc:	2200      	movs	r2, #0
 801dede:	729a      	strb	r2, [r3, #10]
 801dee0:	2200      	movs	r2, #0
 801dee2:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801dee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801dee6:	685b      	ldr	r3, [r3, #4]
 801dee8:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801deea:	e00d      	b.n	801df08 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801deec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801deee:	685b      	ldr	r3, [r3, #4]
 801def0:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801def2:	2114      	movs	r1, #20
 801def4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801def6:	f7f4 fea5 	bl	8012c44 <pbuf_remove_header>
      pbuf_cat(p, r);
 801defa:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801defc:	6878      	ldr	r0, [r7, #4]
 801defe:	f7f5 f827 	bl	8012f50 <pbuf_cat>
      r = iprh->next_pbuf;
 801df02:	68fb      	ldr	r3, [r7, #12]
 801df04:	681b      	ldr	r3, [r3, #0]
 801df06:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 801df08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801df0a:	2b00      	cmp	r3, #0
 801df0c:	d1ee      	bne.n	801deec <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801df0e:	4b31      	ldr	r3, [pc, #196]	; (801dfd4 <ip4_reass+0x300>)
 801df10:	681b      	ldr	r3, [r3, #0]
 801df12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801df14:	429a      	cmp	r2, r3
 801df16:	d102      	bne.n	801df1e <ip4_reass+0x24a>
      ipr_prev = NULL;
 801df18:	2300      	movs	r3, #0
 801df1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801df1c:	e010      	b.n	801df40 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801df1e:	4b2d      	ldr	r3, [pc, #180]	; (801dfd4 <ip4_reass+0x300>)
 801df20:	681b      	ldr	r3, [r3, #0]
 801df22:	62fb      	str	r3, [r7, #44]	; 0x2c
 801df24:	e007      	b.n	801df36 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801df26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801df28:	681b      	ldr	r3, [r3, #0]
 801df2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801df2c:	429a      	cmp	r2, r3
 801df2e:	d006      	beq.n	801df3e <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801df30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801df32:	681b      	ldr	r3, [r3, #0]
 801df34:	62fb      	str	r3, [r7, #44]	; 0x2c
 801df36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801df38:	2b00      	cmp	r3, #0
 801df3a:	d1f4      	bne.n	801df26 <ip4_reass+0x252>
 801df3c:	e000      	b.n	801df40 <ip4_reass+0x26c>
          break;
 801df3e:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801df40:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801df42:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801df44:	f7ff fd2e 	bl	801d9a4 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801df48:	6878      	ldr	r0, [r7, #4]
 801df4a:	f7f4 ffc1 	bl	8012ed0 <pbuf_clen>
 801df4e:	4603      	mov	r3, r0
 801df50:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801df52:	4b1f      	ldr	r3, [pc, #124]	; (801dfd0 <ip4_reass+0x2fc>)
 801df54:	881b      	ldrh	r3, [r3, #0]
 801df56:	8c3a      	ldrh	r2, [r7, #32]
 801df58:	429a      	cmp	r2, r3
 801df5a:	d906      	bls.n	801df6a <ip4_reass+0x296>
 801df5c:	4b1e      	ldr	r3, [pc, #120]	; (801dfd8 <ip4_reass+0x304>)
 801df5e:	f240 229b 	movw	r2, #667	; 0x29b
 801df62:	491e      	ldr	r1, [pc, #120]	; (801dfdc <ip4_reass+0x308>)
 801df64:	481e      	ldr	r0, [pc, #120]	; (801dfe0 <ip4_reass+0x30c>)
 801df66:	f001 fb4d 	bl	801f604 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801df6a:	4b19      	ldr	r3, [pc, #100]	; (801dfd0 <ip4_reass+0x2fc>)
 801df6c:	881a      	ldrh	r2, [r3, #0]
 801df6e:	8c3b      	ldrh	r3, [r7, #32]
 801df70:	1ad3      	subs	r3, r2, r3
 801df72:	b29a      	uxth	r2, r3
 801df74:	4b16      	ldr	r3, [pc, #88]	; (801dfd0 <ip4_reass+0x2fc>)
 801df76:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801df78:	687b      	ldr	r3, [r7, #4]
 801df7a:	e03c      	b.n	801dff6 <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801df7c:	2300      	movs	r3, #0
 801df7e:	e03a      	b.n	801dff6 <ip4_reass+0x322>
      goto nullreturn_ipr;
 801df80:	bf00      	nop
 801df82:	e000      	b.n	801df86 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 801df84:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801df86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801df88:	2b00      	cmp	r3, #0
 801df8a:	d106      	bne.n	801df9a <ip4_reass+0x2c6>
 801df8c:	4b12      	ldr	r3, [pc, #72]	; (801dfd8 <ip4_reass+0x304>)
 801df8e:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 801df92:	4914      	ldr	r1, [pc, #80]	; (801dfe4 <ip4_reass+0x310>)
 801df94:	4812      	ldr	r0, [pc, #72]	; (801dfe0 <ip4_reass+0x30c>)
 801df96:	f001 fb35 	bl	801f604 <iprintf>
  if (ipr->p == NULL) {
 801df9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801df9c:	685b      	ldr	r3, [r3, #4]
 801df9e:	2b00      	cmp	r3, #0
 801dfa0:	d124      	bne.n	801dfec <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801dfa2:	4b0c      	ldr	r3, [pc, #48]	; (801dfd4 <ip4_reass+0x300>)
 801dfa4:	681b      	ldr	r3, [r3, #0]
 801dfa6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801dfa8:	429a      	cmp	r2, r3
 801dfaa:	d006      	beq.n	801dfba <ip4_reass+0x2e6>
 801dfac:	4b0a      	ldr	r3, [pc, #40]	; (801dfd8 <ip4_reass+0x304>)
 801dfae:	f240 22ab 	movw	r2, #683	; 0x2ab
 801dfb2:	490d      	ldr	r1, [pc, #52]	; (801dfe8 <ip4_reass+0x314>)
 801dfb4:	480a      	ldr	r0, [pc, #40]	; (801dfe0 <ip4_reass+0x30c>)
 801dfb6:	f001 fb25 	bl	801f604 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801dfba:	2100      	movs	r1, #0
 801dfbc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801dfbe:	f7ff fcf1 	bl	801d9a4 <ip_reass_dequeue_datagram>
 801dfc2:	e014      	b.n	801dfee <ip4_reass+0x31a>
    goto nullreturn;
 801dfc4:	bf00      	nop
 801dfc6:	e012      	b.n	801dfee <ip4_reass+0x31a>
    goto nullreturn;
 801dfc8:	bf00      	nop
 801dfca:	e010      	b.n	801dfee <ip4_reass+0x31a>
      goto nullreturn;
 801dfcc:	bf00      	nop
 801dfce:	e00e      	b.n	801dfee <ip4_reass+0x31a>
 801dfd0:	24004684 	.word	0x24004684
 801dfd4:	24004680 	.word	0x24004680
 801dfd8:	08026d24 	.word	0x08026d24
 801dfdc:	08026e94 	.word	0x08026e94
 801dfe0:	08026d6c 	.word	0x08026d6c
 801dfe4:	08026eb0 	.word	0x08026eb0
 801dfe8:	08026ebc 	.word	0x08026ebc
  }

nullreturn:
 801dfec:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801dfee:	6878      	ldr	r0, [r7, #4]
 801dff0:	f7f4 fee0 	bl	8012db4 <pbuf_free>
  return NULL;
 801dff4:	2300      	movs	r3, #0
}
 801dff6:	4618      	mov	r0, r3
 801dff8:	3738      	adds	r7, #56	; 0x38
 801dffa:	46bd      	mov	sp, r7
 801dffc:	bd80      	pop	{r7, pc}
 801dffe:	bf00      	nop

0801e000 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801e000:	b580      	push	{r7, lr}
 801e002:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801e004:	2005      	movs	r0, #5
 801e006:	f7f3 ff7d 	bl	8011f04 <memp_malloc>
 801e00a:	4603      	mov	r3, r0
}
 801e00c:	4618      	mov	r0, r3
 801e00e:	bd80      	pop	{r7, pc}

0801e010 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801e010:	b580      	push	{r7, lr}
 801e012:	b082      	sub	sp, #8
 801e014:	af00      	add	r7, sp, #0
 801e016:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801e018:	687b      	ldr	r3, [r7, #4]
 801e01a:	2b00      	cmp	r3, #0
 801e01c:	d106      	bne.n	801e02c <ip_frag_free_pbuf_custom_ref+0x1c>
 801e01e:	4b07      	ldr	r3, [pc, #28]	; (801e03c <ip_frag_free_pbuf_custom_ref+0x2c>)
 801e020:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 801e024:	4906      	ldr	r1, [pc, #24]	; (801e040 <ip_frag_free_pbuf_custom_ref+0x30>)
 801e026:	4807      	ldr	r0, [pc, #28]	; (801e044 <ip_frag_free_pbuf_custom_ref+0x34>)
 801e028:	f001 faec 	bl	801f604 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801e02c:	6879      	ldr	r1, [r7, #4]
 801e02e:	2005      	movs	r0, #5
 801e030:	f7f3 ffde 	bl	8011ff0 <memp_free>
}
 801e034:	bf00      	nop
 801e036:	3708      	adds	r7, #8
 801e038:	46bd      	mov	sp, r7
 801e03a:	bd80      	pop	{r7, pc}
 801e03c:	08026d24 	.word	0x08026d24
 801e040:	08026edc 	.word	0x08026edc
 801e044:	08026d6c 	.word	0x08026d6c

0801e048 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801e048:	b580      	push	{r7, lr}
 801e04a:	b084      	sub	sp, #16
 801e04c:	af00      	add	r7, sp, #0
 801e04e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801e050:	687b      	ldr	r3, [r7, #4]
 801e052:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801e054:	68fb      	ldr	r3, [r7, #12]
 801e056:	2b00      	cmp	r3, #0
 801e058:	d106      	bne.n	801e068 <ipfrag_free_pbuf_custom+0x20>
 801e05a:	4b11      	ldr	r3, [pc, #68]	; (801e0a0 <ipfrag_free_pbuf_custom+0x58>)
 801e05c:	f240 22ce 	movw	r2, #718	; 0x2ce
 801e060:	4910      	ldr	r1, [pc, #64]	; (801e0a4 <ipfrag_free_pbuf_custom+0x5c>)
 801e062:	4811      	ldr	r0, [pc, #68]	; (801e0a8 <ipfrag_free_pbuf_custom+0x60>)
 801e064:	f001 face 	bl	801f604 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801e068:	68fa      	ldr	r2, [r7, #12]
 801e06a:	687b      	ldr	r3, [r7, #4]
 801e06c:	429a      	cmp	r2, r3
 801e06e:	d006      	beq.n	801e07e <ipfrag_free_pbuf_custom+0x36>
 801e070:	4b0b      	ldr	r3, [pc, #44]	; (801e0a0 <ipfrag_free_pbuf_custom+0x58>)
 801e072:	f240 22cf 	movw	r2, #719	; 0x2cf
 801e076:	490d      	ldr	r1, [pc, #52]	; (801e0ac <ipfrag_free_pbuf_custom+0x64>)
 801e078:	480b      	ldr	r0, [pc, #44]	; (801e0a8 <ipfrag_free_pbuf_custom+0x60>)
 801e07a:	f001 fac3 	bl	801f604 <iprintf>
  if (pcr->original != NULL) {
 801e07e:	68fb      	ldr	r3, [r7, #12]
 801e080:	695b      	ldr	r3, [r3, #20]
 801e082:	2b00      	cmp	r3, #0
 801e084:	d004      	beq.n	801e090 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801e086:	68fb      	ldr	r3, [r7, #12]
 801e088:	695b      	ldr	r3, [r3, #20]
 801e08a:	4618      	mov	r0, r3
 801e08c:	f7f4 fe92 	bl	8012db4 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801e090:	68f8      	ldr	r0, [r7, #12]
 801e092:	f7ff ffbd 	bl	801e010 <ip_frag_free_pbuf_custom_ref>
}
 801e096:	bf00      	nop
 801e098:	3710      	adds	r7, #16
 801e09a:	46bd      	mov	sp, r7
 801e09c:	bd80      	pop	{r7, pc}
 801e09e:	bf00      	nop
 801e0a0:	08026d24 	.word	0x08026d24
 801e0a4:	08026ee8 	.word	0x08026ee8
 801e0a8:	08026d6c 	.word	0x08026d6c
 801e0ac:	08026ef4 	.word	0x08026ef4

0801e0b0 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801e0b0:	b580      	push	{r7, lr}
 801e0b2:	b094      	sub	sp, #80	; 0x50
 801e0b4:	af02      	add	r7, sp, #8
 801e0b6:	60f8      	str	r0, [r7, #12]
 801e0b8:	60b9      	str	r1, [r7, #8]
 801e0ba:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801e0bc:	2300      	movs	r3, #0
 801e0be:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801e0c2:	68bb      	ldr	r3, [r7, #8]
 801e0c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801e0c6:	3b14      	subs	r3, #20
 801e0c8:	2b00      	cmp	r3, #0
 801e0ca:	da00      	bge.n	801e0ce <ip4_frag+0x1e>
 801e0cc:	3307      	adds	r3, #7
 801e0ce:	10db      	asrs	r3, r3, #3
 801e0d0:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801e0d2:	2314      	movs	r3, #20
 801e0d4:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801e0d6:	68fb      	ldr	r3, [r7, #12]
 801e0d8:	685b      	ldr	r3, [r3, #4]
 801e0da:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 801e0dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801e0de:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801e0e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e0e2:	781b      	ldrb	r3, [r3, #0]
 801e0e4:	f003 030f 	and.w	r3, r3, #15
 801e0e8:	b2db      	uxtb	r3, r3
 801e0ea:	009b      	lsls	r3, r3, #2
 801e0ec:	b2db      	uxtb	r3, r3
 801e0ee:	2b14      	cmp	r3, #20
 801e0f0:	d002      	beq.n	801e0f8 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801e0f2:	f06f 0305 	mvn.w	r3, #5
 801e0f6:	e110      	b.n	801e31a <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801e0f8:	68fb      	ldr	r3, [r7, #12]
 801e0fa:	895b      	ldrh	r3, [r3, #10]
 801e0fc:	2b13      	cmp	r3, #19
 801e0fe:	d809      	bhi.n	801e114 <ip4_frag+0x64>
 801e100:	4b88      	ldr	r3, [pc, #544]	; (801e324 <ip4_frag+0x274>)
 801e102:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 801e106:	4988      	ldr	r1, [pc, #544]	; (801e328 <ip4_frag+0x278>)
 801e108:	4888      	ldr	r0, [pc, #544]	; (801e32c <ip4_frag+0x27c>)
 801e10a:	f001 fa7b 	bl	801f604 <iprintf>
 801e10e:	f06f 0305 	mvn.w	r3, #5
 801e112:	e102      	b.n	801e31a <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801e114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e116:	88db      	ldrh	r3, [r3, #6]
 801e118:	b29b      	uxth	r3, r3
 801e11a:	4618      	mov	r0, r3
 801e11c:	f7f3 f962 	bl	80113e4 <lwip_htons>
 801e120:	4603      	mov	r3, r0
 801e122:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 801e124:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801e126:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801e12a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801e12e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801e130:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801e134:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801e136:	68fb      	ldr	r3, [r7, #12]
 801e138:	891b      	ldrh	r3, [r3, #8]
 801e13a:	3b14      	subs	r3, #20
 801e13c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 801e140:	e0e1      	b.n	801e306 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801e142:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801e144:	00db      	lsls	r3, r3, #3
 801e146:	b29b      	uxth	r3, r3
 801e148:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801e14c:	4293      	cmp	r3, r2
 801e14e:	bf28      	it	cs
 801e150:	4613      	movcs	r3, r2
 801e152:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801e154:	f44f 7220 	mov.w	r2, #640	; 0x280
 801e158:	2114      	movs	r1, #20
 801e15a:	200e      	movs	r0, #14
 801e15c:	f7f4 fb14 	bl	8012788 <pbuf_alloc>
 801e160:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801e162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e164:	2b00      	cmp	r3, #0
 801e166:	f000 80d5 	beq.w	801e314 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801e16a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e16c:	895b      	ldrh	r3, [r3, #10]
 801e16e:	2b13      	cmp	r3, #19
 801e170:	d806      	bhi.n	801e180 <ip4_frag+0xd0>
 801e172:	4b6c      	ldr	r3, [pc, #432]	; (801e324 <ip4_frag+0x274>)
 801e174:	f44f 7249 	mov.w	r2, #804	; 0x324
 801e178:	496d      	ldr	r1, [pc, #436]	; (801e330 <ip4_frag+0x280>)
 801e17a:	486c      	ldr	r0, [pc, #432]	; (801e32c <ip4_frag+0x27c>)
 801e17c:	f001 fa42 	bl	801f604 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801e180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e182:	685b      	ldr	r3, [r3, #4]
 801e184:	2214      	movs	r2, #20
 801e186:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801e188:	4618      	mov	r0, r3
 801e18a:	f000 fbc5 	bl	801e918 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801e18e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e190:	685b      	ldr	r3, [r3, #4]
 801e192:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 801e194:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801e196:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 801e19a:	e064      	b.n	801e266 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801e19c:	68fb      	ldr	r3, [r7, #12]
 801e19e:	895a      	ldrh	r2, [r3, #10]
 801e1a0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801e1a2:	1ad3      	subs	r3, r2, r3
 801e1a4:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801e1a6:	68fb      	ldr	r3, [r7, #12]
 801e1a8:	895b      	ldrh	r3, [r3, #10]
 801e1aa:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801e1ac:	429a      	cmp	r2, r3
 801e1ae:	d906      	bls.n	801e1be <ip4_frag+0x10e>
 801e1b0:	4b5c      	ldr	r3, [pc, #368]	; (801e324 <ip4_frag+0x274>)
 801e1b2:	f240 322d 	movw	r2, #813	; 0x32d
 801e1b6:	495f      	ldr	r1, [pc, #380]	; (801e334 <ip4_frag+0x284>)
 801e1b8:	485c      	ldr	r0, [pc, #368]	; (801e32c <ip4_frag+0x27c>)
 801e1ba:	f001 fa23 	bl	801f604 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801e1be:	8bfa      	ldrh	r2, [r7, #30]
 801e1c0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801e1c4:	4293      	cmp	r3, r2
 801e1c6:	bf28      	it	cs
 801e1c8:	4613      	movcs	r3, r2
 801e1ca:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801e1ce:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801e1d2:	2b00      	cmp	r3, #0
 801e1d4:	d105      	bne.n	801e1e2 <ip4_frag+0x132>
        poff = 0;
 801e1d6:	2300      	movs	r3, #0
 801e1d8:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801e1da:	68fb      	ldr	r3, [r7, #12]
 801e1dc:	681b      	ldr	r3, [r3, #0]
 801e1de:	60fb      	str	r3, [r7, #12]
        continue;
 801e1e0:	e041      	b.n	801e266 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801e1e2:	f7ff ff0d 	bl	801e000 <ip_frag_alloc_pbuf_custom_ref>
 801e1e6:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801e1e8:	69bb      	ldr	r3, [r7, #24]
 801e1ea:	2b00      	cmp	r3, #0
 801e1ec:	d103      	bne.n	801e1f6 <ip4_frag+0x146>
        pbuf_free(rambuf);
 801e1ee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801e1f0:	f7f4 fde0 	bl	8012db4 <pbuf_free>
        goto memerr;
 801e1f4:	e08f      	b.n	801e316 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801e1f6:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801e1f8:	68fb      	ldr	r3, [r7, #12]
 801e1fa:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801e1fc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801e1fe:	4413      	add	r3, r2
 801e200:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 801e204:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801e208:	9201      	str	r2, [sp, #4]
 801e20a:	9300      	str	r3, [sp, #0]
 801e20c:	4603      	mov	r3, r0
 801e20e:	2241      	movs	r2, #65	; 0x41
 801e210:	2000      	movs	r0, #0
 801e212:	f7f4 fbe3 	bl	80129dc <pbuf_alloced_custom>
 801e216:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801e218:	697b      	ldr	r3, [r7, #20]
 801e21a:	2b00      	cmp	r3, #0
 801e21c:	d106      	bne.n	801e22c <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801e21e:	69b8      	ldr	r0, [r7, #24]
 801e220:	f7ff fef6 	bl	801e010 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801e224:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801e226:	f7f4 fdc5 	bl	8012db4 <pbuf_free>
        goto memerr;
 801e22a:	e074      	b.n	801e316 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 801e22c:	68f8      	ldr	r0, [r7, #12]
 801e22e:	f7f4 fe67 	bl	8012f00 <pbuf_ref>
      pcr->original = p;
 801e232:	69bb      	ldr	r3, [r7, #24]
 801e234:	68fa      	ldr	r2, [r7, #12]
 801e236:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801e238:	69bb      	ldr	r3, [r7, #24]
 801e23a:	4a3f      	ldr	r2, [pc, #252]	; (801e338 <ip4_frag+0x288>)
 801e23c:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801e23e:	6979      	ldr	r1, [r7, #20]
 801e240:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801e242:	f7f4 fe85 	bl	8012f50 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801e246:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 801e24a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801e24e:	1ad3      	subs	r3, r2, r3
 801e250:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 801e254:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801e258:	2b00      	cmp	r3, #0
 801e25a:	d004      	beq.n	801e266 <ip4_frag+0x1b6>
        poff = 0;
 801e25c:	2300      	movs	r3, #0
 801e25e:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801e260:	68fb      	ldr	r3, [r7, #12]
 801e262:	681b      	ldr	r3, [r3, #0]
 801e264:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801e266:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801e26a:	2b00      	cmp	r3, #0
 801e26c:	d196      	bne.n	801e19c <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801e26e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801e270:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801e274:	4413      	add	r3, r2
 801e276:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801e278:	68bb      	ldr	r3, [r7, #8]
 801e27a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801e27c:	f1a3 0213 	sub.w	r2, r3, #19
 801e280:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801e284:	429a      	cmp	r2, r3
 801e286:	bfcc      	ite	gt
 801e288:	2301      	movgt	r3, #1
 801e28a:	2300      	movle	r3, #0
 801e28c:	b2db      	uxtb	r3, r3
 801e28e:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801e290:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801e294:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801e298:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 801e29a:	6a3b      	ldr	r3, [r7, #32]
 801e29c:	2b00      	cmp	r3, #0
 801e29e:	d002      	beq.n	801e2a6 <ip4_frag+0x1f6>
 801e2a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e2a2:	2b00      	cmp	r3, #0
 801e2a4:	d003      	beq.n	801e2ae <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801e2a6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801e2a8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801e2ac:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801e2ae:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801e2b0:	4618      	mov	r0, r3
 801e2b2:	f7f3 f897 	bl	80113e4 <lwip_htons>
 801e2b6:	4603      	mov	r3, r0
 801e2b8:	461a      	mov	r2, r3
 801e2ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e2bc:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801e2be:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801e2c0:	3314      	adds	r3, #20
 801e2c2:	b29b      	uxth	r3, r3
 801e2c4:	4618      	mov	r0, r3
 801e2c6:	f7f3 f88d 	bl	80113e4 <lwip_htons>
 801e2ca:	4603      	mov	r3, r0
 801e2cc:	461a      	mov	r2, r3
 801e2ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e2d0:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801e2d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e2d4:	2200      	movs	r2, #0
 801e2d6:	729a      	strb	r2, [r3, #10]
 801e2d8:	2200      	movs	r2, #0
 801e2da:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801e2dc:	68bb      	ldr	r3, [r7, #8]
 801e2de:	695b      	ldr	r3, [r3, #20]
 801e2e0:	687a      	ldr	r2, [r7, #4]
 801e2e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801e2e4:	68b8      	ldr	r0, [r7, #8]
 801e2e6:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801e2e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801e2ea:	f7f4 fd63 	bl	8012db4 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801e2ee:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801e2f2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801e2f4:	1ad3      	subs	r3, r2, r3
 801e2f6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 801e2fa:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801e2fe:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801e300:	4413      	add	r3, r2
 801e302:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 801e306:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801e30a:	2b00      	cmp	r3, #0
 801e30c:	f47f af19 	bne.w	801e142 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801e310:	2300      	movs	r3, #0
 801e312:	e002      	b.n	801e31a <ip4_frag+0x26a>
      goto memerr;
 801e314:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801e316:	f04f 33ff 	mov.w	r3, #4294967295
}
 801e31a:	4618      	mov	r0, r3
 801e31c:	3748      	adds	r7, #72	; 0x48
 801e31e:	46bd      	mov	sp, r7
 801e320:	bd80      	pop	{r7, pc}
 801e322:	bf00      	nop
 801e324:	08026d24 	.word	0x08026d24
 801e328:	08026f00 	.word	0x08026f00
 801e32c:	08026d6c 	.word	0x08026d6c
 801e330:	08026f1c 	.word	0x08026f1c
 801e334:	08026f3c 	.word	0x08026f3c
 801e338:	0801e049 	.word	0x0801e049

0801e33c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801e33c:	b580      	push	{r7, lr}
 801e33e:	b086      	sub	sp, #24
 801e340:	af00      	add	r7, sp, #0
 801e342:	6078      	str	r0, [r7, #4]
 801e344:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801e346:	230e      	movs	r3, #14
 801e348:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801e34a:	687b      	ldr	r3, [r7, #4]
 801e34c:	895b      	ldrh	r3, [r3, #10]
 801e34e:	2b0e      	cmp	r3, #14
 801e350:	d96e      	bls.n	801e430 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801e352:	687b      	ldr	r3, [r7, #4]
 801e354:	7bdb      	ldrb	r3, [r3, #15]
 801e356:	2b00      	cmp	r3, #0
 801e358:	d106      	bne.n	801e368 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801e35a:	683b      	ldr	r3, [r7, #0]
 801e35c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801e360:	3301      	adds	r3, #1
 801e362:	b2da      	uxtb	r2, r3
 801e364:	687b      	ldr	r3, [r7, #4]
 801e366:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801e368:	687b      	ldr	r3, [r7, #4]
 801e36a:	685b      	ldr	r3, [r3, #4]
 801e36c:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801e36e:	693b      	ldr	r3, [r7, #16]
 801e370:	7b1a      	ldrb	r2, [r3, #12]
 801e372:	7b5b      	ldrb	r3, [r3, #13]
 801e374:	021b      	lsls	r3, r3, #8
 801e376:	4313      	orrs	r3, r2
 801e378:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801e37a:	693b      	ldr	r3, [r7, #16]
 801e37c:	781b      	ldrb	r3, [r3, #0]
 801e37e:	f003 0301 	and.w	r3, r3, #1
 801e382:	2b00      	cmp	r3, #0
 801e384:	d023      	beq.n	801e3ce <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801e386:	693b      	ldr	r3, [r7, #16]
 801e388:	781b      	ldrb	r3, [r3, #0]
 801e38a:	2b01      	cmp	r3, #1
 801e38c:	d10f      	bne.n	801e3ae <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801e38e:	693b      	ldr	r3, [r7, #16]
 801e390:	785b      	ldrb	r3, [r3, #1]
 801e392:	2b00      	cmp	r3, #0
 801e394:	d11b      	bne.n	801e3ce <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801e396:	693b      	ldr	r3, [r7, #16]
 801e398:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801e39a:	2b5e      	cmp	r3, #94	; 0x5e
 801e39c:	d117      	bne.n	801e3ce <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801e39e:	687b      	ldr	r3, [r7, #4]
 801e3a0:	7b5b      	ldrb	r3, [r3, #13]
 801e3a2:	f043 0310 	orr.w	r3, r3, #16
 801e3a6:	b2da      	uxtb	r2, r3
 801e3a8:	687b      	ldr	r3, [r7, #4]
 801e3aa:	735a      	strb	r2, [r3, #13]
 801e3ac:	e00f      	b.n	801e3ce <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801e3ae:	693b      	ldr	r3, [r7, #16]
 801e3b0:	2206      	movs	r2, #6
 801e3b2:	4928      	ldr	r1, [pc, #160]	; (801e454 <ethernet_input+0x118>)
 801e3b4:	4618      	mov	r0, r3
 801e3b6:	f000 faa1 	bl	801e8fc <memcmp>
 801e3ba:	4603      	mov	r3, r0
 801e3bc:	2b00      	cmp	r3, #0
 801e3be:	d106      	bne.n	801e3ce <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801e3c0:	687b      	ldr	r3, [r7, #4]
 801e3c2:	7b5b      	ldrb	r3, [r3, #13]
 801e3c4:	f043 0308 	orr.w	r3, r3, #8
 801e3c8:	b2da      	uxtb	r2, r3
 801e3ca:	687b      	ldr	r3, [r7, #4]
 801e3cc:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801e3ce:	89fb      	ldrh	r3, [r7, #14]
 801e3d0:	2b08      	cmp	r3, #8
 801e3d2:	d003      	beq.n	801e3dc <ethernet_input+0xa0>
 801e3d4:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 801e3d8:	d014      	beq.n	801e404 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801e3da:	e032      	b.n	801e442 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801e3dc:	683b      	ldr	r3, [r7, #0]
 801e3de:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801e3e2:	f003 0308 	and.w	r3, r3, #8
 801e3e6:	2b00      	cmp	r3, #0
 801e3e8:	d024      	beq.n	801e434 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801e3ea:	8afb      	ldrh	r3, [r7, #22]
 801e3ec:	4619      	mov	r1, r3
 801e3ee:	6878      	ldr	r0, [r7, #4]
 801e3f0:	f7f4 fc28 	bl	8012c44 <pbuf_remove_header>
 801e3f4:	4603      	mov	r3, r0
 801e3f6:	2b00      	cmp	r3, #0
 801e3f8:	d11e      	bne.n	801e438 <ethernet_input+0xfc>
        ip4_input(p, netif);
 801e3fa:	6839      	ldr	r1, [r7, #0]
 801e3fc:	6878      	ldr	r0, [r7, #4]
 801e3fe:	f7fe ff09 	bl	801d214 <ip4_input>
      break;
 801e402:	e013      	b.n	801e42c <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801e404:	683b      	ldr	r3, [r7, #0]
 801e406:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801e40a:	f003 0308 	and.w	r3, r3, #8
 801e40e:	2b00      	cmp	r3, #0
 801e410:	d014      	beq.n	801e43c <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801e412:	8afb      	ldrh	r3, [r7, #22]
 801e414:	4619      	mov	r1, r3
 801e416:	6878      	ldr	r0, [r7, #4]
 801e418:	f7f4 fc14 	bl	8012c44 <pbuf_remove_header>
 801e41c:	4603      	mov	r3, r0
 801e41e:	2b00      	cmp	r3, #0
 801e420:	d10e      	bne.n	801e440 <ethernet_input+0x104>
        etharp_input(p, netif);
 801e422:	6839      	ldr	r1, [r7, #0]
 801e424:	6878      	ldr	r0, [r7, #4]
 801e426:	f7fe f87f 	bl	801c528 <etharp_input>
      break;
 801e42a:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801e42c:	2300      	movs	r3, #0
 801e42e:	e00c      	b.n	801e44a <ethernet_input+0x10e>
    goto free_and_return;
 801e430:	bf00      	nop
 801e432:	e006      	b.n	801e442 <ethernet_input+0x106>
        goto free_and_return;
 801e434:	bf00      	nop
 801e436:	e004      	b.n	801e442 <ethernet_input+0x106>
        goto free_and_return;
 801e438:	bf00      	nop
 801e43a:	e002      	b.n	801e442 <ethernet_input+0x106>
        goto free_and_return;
 801e43c:	bf00      	nop
 801e43e:	e000      	b.n	801e442 <ethernet_input+0x106>
        goto free_and_return;
 801e440:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801e442:	6878      	ldr	r0, [r7, #4]
 801e444:	f7f4 fcb6 	bl	8012db4 <pbuf_free>
  return ERR_OK;
 801e448:	2300      	movs	r3, #0
}
 801e44a:	4618      	mov	r0, r3
 801e44c:	3718      	adds	r7, #24
 801e44e:	46bd      	mov	sp, r7
 801e450:	bd80      	pop	{r7, pc}
 801e452:	bf00      	nop
 801e454:	08027194 	.word	0x08027194

0801e458 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801e458:	b580      	push	{r7, lr}
 801e45a:	b086      	sub	sp, #24
 801e45c:	af00      	add	r7, sp, #0
 801e45e:	60f8      	str	r0, [r7, #12]
 801e460:	60b9      	str	r1, [r7, #8]
 801e462:	607a      	str	r2, [r7, #4]
 801e464:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801e466:	8c3b      	ldrh	r3, [r7, #32]
 801e468:	4618      	mov	r0, r3
 801e46a:	f7f2 ffbb 	bl	80113e4 <lwip_htons>
 801e46e:	4603      	mov	r3, r0
 801e470:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801e472:	210e      	movs	r1, #14
 801e474:	68b8      	ldr	r0, [r7, #8]
 801e476:	f7f4 fbd5 	bl	8012c24 <pbuf_add_header>
 801e47a:	4603      	mov	r3, r0
 801e47c:	2b00      	cmp	r3, #0
 801e47e:	d125      	bne.n	801e4cc <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801e480:	68bb      	ldr	r3, [r7, #8]
 801e482:	685b      	ldr	r3, [r3, #4]
 801e484:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801e486:	693b      	ldr	r3, [r7, #16]
 801e488:	8afa      	ldrh	r2, [r7, #22]
 801e48a:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801e48c:	693b      	ldr	r3, [r7, #16]
 801e48e:	2206      	movs	r2, #6
 801e490:	6839      	ldr	r1, [r7, #0]
 801e492:	4618      	mov	r0, r3
 801e494:	f000 fa40 	bl	801e918 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801e498:	693b      	ldr	r3, [r7, #16]
 801e49a:	3306      	adds	r3, #6
 801e49c:	2206      	movs	r2, #6
 801e49e:	6879      	ldr	r1, [r7, #4]
 801e4a0:	4618      	mov	r0, r3
 801e4a2:	f000 fa39 	bl	801e918 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801e4a6:	68fb      	ldr	r3, [r7, #12]
 801e4a8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801e4ac:	2b06      	cmp	r3, #6
 801e4ae:	d006      	beq.n	801e4be <ethernet_output+0x66>
 801e4b0:	4b0a      	ldr	r3, [pc, #40]	; (801e4dc <ethernet_output+0x84>)
 801e4b2:	f44f 7299 	mov.w	r2, #306	; 0x132
 801e4b6:	490a      	ldr	r1, [pc, #40]	; (801e4e0 <ethernet_output+0x88>)
 801e4b8:	480a      	ldr	r0, [pc, #40]	; (801e4e4 <ethernet_output+0x8c>)
 801e4ba:	f001 f8a3 	bl	801f604 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801e4be:	68fb      	ldr	r3, [r7, #12]
 801e4c0:	699b      	ldr	r3, [r3, #24]
 801e4c2:	68b9      	ldr	r1, [r7, #8]
 801e4c4:	68f8      	ldr	r0, [r7, #12]
 801e4c6:	4798      	blx	r3
 801e4c8:	4603      	mov	r3, r0
 801e4ca:	e002      	b.n	801e4d2 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801e4cc:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801e4ce:	f06f 0301 	mvn.w	r3, #1
}
 801e4d2:	4618      	mov	r0, r3
 801e4d4:	3718      	adds	r7, #24
 801e4d6:	46bd      	mov	sp, r7
 801e4d8:	bd80      	pop	{r7, pc}
 801e4da:	bf00      	nop
 801e4dc:	08026f4c 	.word	0x08026f4c
 801e4e0:	08026f84 	.word	0x08026f84
 801e4e4:	08026fb8 	.word	0x08026fb8

0801e4e8 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801e4e8:	b580      	push	{r7, lr}
 801e4ea:	b086      	sub	sp, #24
 801e4ec:	af00      	add	r7, sp, #0
 801e4ee:	6078      	str	r0, [r7, #4]
 801e4f0:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 801e4f2:	683b      	ldr	r3, [r7, #0]
 801e4f4:	60bb      	str	r3, [r7, #8]
 801e4f6:	2304      	movs	r3, #4
 801e4f8:	60fb      	str	r3, [r7, #12]
 801e4fa:	2300      	movs	r3, #0
 801e4fc:	613b      	str	r3, [r7, #16]
 801e4fe:	2300      	movs	r3, #0
 801e500:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 801e502:	f107 0308 	add.w	r3, r7, #8
 801e506:	2100      	movs	r1, #0
 801e508:	4618      	mov	r0, r3
 801e50a:	f7ec fb18 	bl	800ab3e <osMessageCreate>
 801e50e:	4602      	mov	r2, r0
 801e510:	687b      	ldr	r3, [r7, #4]
 801e512:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 801e514:	687b      	ldr	r3, [r7, #4]
 801e516:	681b      	ldr	r3, [r3, #0]
 801e518:	2b00      	cmp	r3, #0
 801e51a:	d102      	bne.n	801e522 <sys_mbox_new+0x3a>
    return ERR_MEM;
 801e51c:	f04f 33ff 	mov.w	r3, #4294967295
 801e520:	e000      	b.n	801e524 <sys_mbox_new+0x3c>

  return ERR_OK;
 801e522:	2300      	movs	r3, #0
}
 801e524:	4618      	mov	r0, r3
 801e526:	3718      	adds	r7, #24
 801e528:	46bd      	mov	sp, r7
 801e52a:	bd80      	pop	{r7, pc}

0801e52c <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 801e52c:	b580      	push	{r7, lr}
 801e52e:	b082      	sub	sp, #8
 801e530:	af00      	add	r7, sp, #0
 801e532:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 801e534:	687b      	ldr	r3, [r7, #4]
 801e536:	681b      	ldr	r3, [r3, #0]
 801e538:	4618      	mov	r0, r3
 801e53a:	f7ec fbdd 	bl	800acf8 <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 801e53e:	687b      	ldr	r3, [r7, #4]
 801e540:	681b      	ldr	r3, [r3, #0]
 801e542:	4618      	mov	r0, r3
 801e544:	f7ec fbee 	bl	800ad24 <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 801e548:	bf00      	nop
 801e54a:	3708      	adds	r7, #8
 801e54c:	46bd      	mov	sp, r7
 801e54e:	bd80      	pop	{r7, pc}

0801e550 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801e550:	b580      	push	{r7, lr}
 801e552:	b084      	sub	sp, #16
 801e554:	af00      	add	r7, sp, #0
 801e556:	6078      	str	r0, [r7, #4]
 801e558:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 801e55a:	687b      	ldr	r3, [r7, #4]
 801e55c:	681b      	ldr	r3, [r3, #0]
 801e55e:	6839      	ldr	r1, [r7, #0]
 801e560:	2200      	movs	r2, #0
 801e562:	4618      	mov	r0, r3
 801e564:	f7ec fb14 	bl	800ab90 <osMessagePut>
 801e568:	4603      	mov	r3, r0
 801e56a:	2b00      	cmp	r3, #0
 801e56c:	d102      	bne.n	801e574 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 801e56e:	2300      	movs	r3, #0
 801e570:	73fb      	strb	r3, [r7, #15]
 801e572:	e001      	b.n	801e578 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 801e574:	23ff      	movs	r3, #255	; 0xff
 801e576:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 801e578:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801e57c:	4618      	mov	r0, r3
 801e57e:	3710      	adds	r7, #16
 801e580:	46bd      	mov	sp, r7
 801e582:	bd80      	pop	{r7, pc}

0801e584 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801e584:	b580      	push	{r7, lr}
 801e586:	b08c      	sub	sp, #48	; 0x30
 801e588:	af00      	add	r7, sp, #0
 801e58a:	61f8      	str	r0, [r7, #28]
 801e58c:	61b9      	str	r1, [r7, #24]
 801e58e:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 801e590:	f7ec f8f3 	bl	800a77a <osKernelSysTick>
 801e594:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801e596:	697b      	ldr	r3, [r7, #20]
 801e598:	2b00      	cmp	r3, #0
 801e59a:	d017      	beq.n	801e5cc <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 801e59c:	69fb      	ldr	r3, [r7, #28]
 801e59e:	6819      	ldr	r1, [r3, #0]
 801e5a0:	f107 0320 	add.w	r3, r7, #32
 801e5a4:	697a      	ldr	r2, [r7, #20]
 801e5a6:	4618      	mov	r0, r3
 801e5a8:	f7ec fb32 	bl	800ac10 <osMessageGet>

    if(event.status == osEventMessage)
 801e5ac:	6a3b      	ldr	r3, [r7, #32]
 801e5ae:	2b10      	cmp	r3, #16
 801e5b0:	d109      	bne.n	801e5c6 <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 801e5b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e5b4:	461a      	mov	r2, r3
 801e5b6:	69bb      	ldr	r3, [r7, #24]
 801e5b8:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 801e5ba:	f7ec f8de 	bl	800a77a <osKernelSysTick>
 801e5be:	4602      	mov	r2, r0
 801e5c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e5c2:	1ad3      	subs	r3, r2, r3
 801e5c4:	e019      	b.n	801e5fa <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801e5c6:	f04f 33ff 	mov.w	r3, #4294967295
 801e5ca:	e016      	b.n	801e5fa <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 801e5cc:	69fb      	ldr	r3, [r7, #28]
 801e5ce:	6819      	ldr	r1, [r3, #0]
 801e5d0:	463b      	mov	r3, r7
 801e5d2:	f04f 32ff 	mov.w	r2, #4294967295
 801e5d6:	4618      	mov	r0, r3
 801e5d8:	f7ec fb1a 	bl	800ac10 <osMessageGet>
 801e5dc:	f107 0320 	add.w	r3, r7, #32
 801e5e0:	463a      	mov	r2, r7
 801e5e2:	ca07      	ldmia	r2, {r0, r1, r2}
 801e5e4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 801e5e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e5ea:	461a      	mov	r2, r3
 801e5ec:	69bb      	ldr	r3, [r7, #24]
 801e5ee:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 801e5f0:	f7ec f8c3 	bl	800a77a <osKernelSysTick>
 801e5f4:	4602      	mov	r2, r0
 801e5f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e5f8:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 801e5fa:	4618      	mov	r0, r3
 801e5fc:	3730      	adds	r7, #48	; 0x30
 801e5fe:	46bd      	mov	sp, r7
 801e600:	bd80      	pop	{r7, pc}

0801e602 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 801e602:	b580      	push	{r7, lr}
 801e604:	b086      	sub	sp, #24
 801e606:	af00      	add	r7, sp, #0
 801e608:	6078      	str	r0, [r7, #4]
 801e60a:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 801e60c:	687b      	ldr	r3, [r7, #4]
 801e60e:	6819      	ldr	r1, [r3, #0]
 801e610:	f107 030c 	add.w	r3, r7, #12
 801e614:	2200      	movs	r2, #0
 801e616:	4618      	mov	r0, r3
 801e618:	f7ec fafa 	bl	800ac10 <osMessageGet>

  if(event.status == osEventMessage)
 801e61c:	68fb      	ldr	r3, [r7, #12]
 801e61e:	2b10      	cmp	r3, #16
 801e620:	d105      	bne.n	801e62e <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 801e622:	693b      	ldr	r3, [r7, #16]
 801e624:	461a      	mov	r2, r3
 801e626:	683b      	ldr	r3, [r7, #0]
 801e628:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 801e62a:	2300      	movs	r3, #0
 801e62c:	e001      	b.n	801e632 <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 801e62e:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 801e632:	4618      	mov	r0, r3
 801e634:	3718      	adds	r7, #24
 801e636:	46bd      	mov	sp, r7
 801e638:	bd80      	pop	{r7, pc}

0801e63a <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801e63a:	b480      	push	{r7}
 801e63c:	b083      	sub	sp, #12
 801e63e:	af00      	add	r7, sp, #0
 801e640:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801e642:	687b      	ldr	r3, [r7, #4]
 801e644:	681b      	ldr	r3, [r3, #0]
 801e646:	2b00      	cmp	r3, #0
 801e648:	d101      	bne.n	801e64e <sys_mbox_valid+0x14>
    return 0;
 801e64a:	2300      	movs	r3, #0
 801e64c:	e000      	b.n	801e650 <sys_mbox_valid+0x16>
  else
    return 1;
 801e64e:	2301      	movs	r3, #1
}
 801e650:	4618      	mov	r0, r3
 801e652:	370c      	adds	r7, #12
 801e654:	46bd      	mov	sp, r7
 801e656:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e65a:	4770      	bx	lr

0801e65c <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 801e65c:	b480      	push	{r7}
 801e65e:	b083      	sub	sp, #12
 801e660:	af00      	add	r7, sp, #0
 801e662:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 801e664:	687b      	ldr	r3, [r7, #4]
 801e666:	2200      	movs	r2, #0
 801e668:	601a      	str	r2, [r3, #0]
}
 801e66a:	bf00      	nop
 801e66c:	370c      	adds	r7, #12
 801e66e:	46bd      	mov	sp, r7
 801e670:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e674:	4770      	bx	lr

0801e676 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 801e676:	b580      	push	{r7, lr}
 801e678:	b084      	sub	sp, #16
 801e67a:	af00      	add	r7, sp, #0
 801e67c:	6078      	str	r0, [r7, #4]
 801e67e:	460b      	mov	r3, r1
 801e680:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 801e682:	2300      	movs	r3, #0
 801e684:	60bb      	str	r3, [r7, #8]
 801e686:	2300      	movs	r3, #0
 801e688:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 801e68a:	f107 0308 	add.w	r3, r7, #8
 801e68e:	2101      	movs	r1, #1
 801e690:	4618      	mov	r0, r3
 801e692:	f7ec f98b 	bl	800a9ac <osSemaphoreCreate>
 801e696:	4602      	mov	r2, r0
 801e698:	687b      	ldr	r3, [r7, #4]
 801e69a:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 801e69c:	687b      	ldr	r3, [r7, #4]
 801e69e:	681b      	ldr	r3, [r3, #0]
 801e6a0:	2b00      	cmp	r3, #0
 801e6a2:	d102      	bne.n	801e6aa <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801e6a4:	f04f 33ff 	mov.w	r3, #4294967295
 801e6a8:	e009      	b.n	801e6be <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 801e6aa:	78fb      	ldrb	r3, [r7, #3]
 801e6ac:	2b00      	cmp	r3, #0
 801e6ae:	d105      	bne.n	801e6bc <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 801e6b0:	687b      	ldr	r3, [r7, #4]
 801e6b2:	681b      	ldr	r3, [r3, #0]
 801e6b4:	2100      	movs	r1, #0
 801e6b6:	4618      	mov	r0, r3
 801e6b8:	f7ec f9aa 	bl	800aa10 <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 801e6bc:	2300      	movs	r3, #0
}
 801e6be:	4618      	mov	r0, r3
 801e6c0:	3710      	adds	r7, #16
 801e6c2:	46bd      	mov	sp, r7
 801e6c4:	bd80      	pop	{r7, pc}

0801e6c6 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 801e6c6:	b580      	push	{r7, lr}
 801e6c8:	b084      	sub	sp, #16
 801e6ca:	af00      	add	r7, sp, #0
 801e6cc:	6078      	str	r0, [r7, #4]
 801e6ce:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 801e6d0:	f7ec f853 	bl	800a77a <osKernelSysTick>
 801e6d4:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801e6d6:	683b      	ldr	r3, [r7, #0]
 801e6d8:	2b00      	cmp	r3, #0
 801e6da:	d011      	beq.n	801e700 <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 801e6dc:	687b      	ldr	r3, [r7, #4]
 801e6de:	681b      	ldr	r3, [r3, #0]
 801e6e0:	6839      	ldr	r1, [r7, #0]
 801e6e2:	4618      	mov	r0, r3
 801e6e4:	f7ec f994 	bl	800aa10 <osSemaphoreWait>
 801e6e8:	4603      	mov	r3, r0
 801e6ea:	2b00      	cmp	r3, #0
 801e6ec:	d105      	bne.n	801e6fa <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 801e6ee:	f7ec f844 	bl	800a77a <osKernelSysTick>
 801e6f2:	4602      	mov	r2, r0
 801e6f4:	68fb      	ldr	r3, [r7, #12]
 801e6f6:	1ad3      	subs	r3, r2, r3
 801e6f8:	e012      	b.n	801e720 <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 801e6fa:	f04f 33ff 	mov.w	r3, #4294967295
 801e6fe:	e00f      	b.n	801e720 <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 801e700:	bf00      	nop
 801e702:	687b      	ldr	r3, [r7, #4]
 801e704:	681b      	ldr	r3, [r3, #0]
 801e706:	f04f 31ff 	mov.w	r1, #4294967295
 801e70a:	4618      	mov	r0, r3
 801e70c:	f7ec f980 	bl	800aa10 <osSemaphoreWait>
 801e710:	4603      	mov	r3, r0
 801e712:	2b00      	cmp	r3, #0
 801e714:	d1f5      	bne.n	801e702 <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 801e716:	f7ec f830 	bl	800a77a <osKernelSysTick>
 801e71a:	4602      	mov	r2, r0
 801e71c:	68fb      	ldr	r3, [r7, #12]
 801e71e:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 801e720:	4618      	mov	r0, r3
 801e722:	3710      	adds	r7, #16
 801e724:	46bd      	mov	sp, r7
 801e726:	bd80      	pop	{r7, pc}

0801e728 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 801e728:	b580      	push	{r7, lr}
 801e72a:	b082      	sub	sp, #8
 801e72c:	af00      	add	r7, sp, #0
 801e72e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 801e730:	687b      	ldr	r3, [r7, #4]
 801e732:	681b      	ldr	r3, [r3, #0]
 801e734:	4618      	mov	r0, r3
 801e736:	f7ec f9b9 	bl	800aaac <osSemaphoreRelease>
}
 801e73a:	bf00      	nop
 801e73c:	3708      	adds	r7, #8
 801e73e:	46bd      	mov	sp, r7
 801e740:	bd80      	pop	{r7, pc}

0801e742 <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 801e742:	b580      	push	{r7, lr}
 801e744:	b082      	sub	sp, #8
 801e746:	af00      	add	r7, sp, #0
 801e748:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 801e74a:	687b      	ldr	r3, [r7, #4]
 801e74c:	681b      	ldr	r3, [r3, #0]
 801e74e:	4618      	mov	r0, r3
 801e750:	f7ec f9e2 	bl	800ab18 <osSemaphoreDelete>
}
 801e754:	bf00      	nop
 801e756:	3708      	adds	r7, #8
 801e758:	46bd      	mov	sp, r7
 801e75a:	bd80      	pop	{r7, pc}

0801e75c <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 801e75c:	b480      	push	{r7}
 801e75e:	b083      	sub	sp, #12
 801e760:	af00      	add	r7, sp, #0
 801e762:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 801e764:	687b      	ldr	r3, [r7, #4]
 801e766:	681b      	ldr	r3, [r3, #0]
 801e768:	2b00      	cmp	r3, #0
 801e76a:	d101      	bne.n	801e770 <sys_sem_valid+0x14>
    return 0;
 801e76c:	2300      	movs	r3, #0
 801e76e:	e000      	b.n	801e772 <sys_sem_valid+0x16>
  else
    return 1;
 801e770:	2301      	movs	r3, #1
}
 801e772:	4618      	mov	r0, r3
 801e774:	370c      	adds	r7, #12
 801e776:	46bd      	mov	sp, r7
 801e778:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e77c:	4770      	bx	lr

0801e77e <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 801e77e:	b480      	push	{r7}
 801e780:	b083      	sub	sp, #12
 801e782:	af00      	add	r7, sp, #0
 801e784:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 801e786:	687b      	ldr	r3, [r7, #4]
 801e788:	2200      	movs	r2, #0
 801e78a:	601a      	str	r2, [r3, #0]
}
 801e78c:	bf00      	nop
 801e78e:	370c      	adds	r7, #12
 801e790:	46bd      	mov	sp, r7
 801e792:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e796:	4770      	bx	lr

0801e798 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 801e798:	b580      	push	{r7, lr}
 801e79a:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 801e79c:	4803      	ldr	r0, [pc, #12]	; (801e7ac <sys_init+0x14>)
 801e79e:	f7ec f868 	bl	800a872 <osMutexCreate>
 801e7a2:	4603      	mov	r3, r0
 801e7a4:	4a02      	ldr	r2, [pc, #8]	; (801e7b0 <sys_init+0x18>)
 801e7a6:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 801e7a8:	bf00      	nop
 801e7aa:	bd80      	pop	{r7, pc}
 801e7ac:	080271a4 	.word	0x080271a4
 801e7b0:	24007f84 	.word	0x24007f84

0801e7b4 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801e7b4:	b580      	push	{r7, lr}
 801e7b6:	b084      	sub	sp, #16
 801e7b8:	af00      	add	r7, sp, #0
 801e7ba:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 801e7bc:	2300      	movs	r3, #0
 801e7be:	60bb      	str	r3, [r7, #8]
 801e7c0:	2300      	movs	r3, #0
 801e7c2:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 801e7c4:	f107 0308 	add.w	r3, r7, #8
 801e7c8:	4618      	mov	r0, r3
 801e7ca:	f7ec f852 	bl	800a872 <osMutexCreate>
 801e7ce:	4602      	mov	r2, r0
 801e7d0:	687b      	ldr	r3, [r7, #4]
 801e7d2:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 801e7d4:	687b      	ldr	r3, [r7, #4]
 801e7d6:	681b      	ldr	r3, [r3, #0]
 801e7d8:	2b00      	cmp	r3, #0
 801e7da:	d102      	bne.n	801e7e2 <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801e7dc:	f04f 33ff 	mov.w	r3, #4294967295
 801e7e0:	e000      	b.n	801e7e4 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801e7e2:	2300      	movs	r3, #0
}
 801e7e4:	4618      	mov	r0, r3
 801e7e6:	3710      	adds	r7, #16
 801e7e8:	46bd      	mov	sp, r7
 801e7ea:	bd80      	pop	{r7, pc}

0801e7ec <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801e7ec:	b580      	push	{r7, lr}
 801e7ee:	b082      	sub	sp, #8
 801e7f0:	af00      	add	r7, sp, #0
 801e7f2:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 801e7f4:	687b      	ldr	r3, [r7, #4]
 801e7f6:	681b      	ldr	r3, [r3, #0]
 801e7f8:	f04f 31ff 	mov.w	r1, #4294967295
 801e7fc:	4618      	mov	r0, r3
 801e7fe:	f7ec f851 	bl	800a8a4 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 801e802:	bf00      	nop
 801e804:	3708      	adds	r7, #8
 801e806:	46bd      	mov	sp, r7
 801e808:	bd80      	pop	{r7, pc}

0801e80a <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801e80a:	b580      	push	{r7, lr}
 801e80c:	b082      	sub	sp, #8
 801e80e:	af00      	add	r7, sp, #0
 801e810:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801e812:	687b      	ldr	r3, [r7, #4]
 801e814:	681b      	ldr	r3, [r3, #0]
 801e816:	4618      	mov	r0, r3
 801e818:	f7ec f892 	bl	800a940 <osMutexRelease>
}
 801e81c:	bf00      	nop
 801e81e:	3708      	adds	r7, #8
 801e820:	46bd      	mov	sp, r7
 801e822:	bd80      	pop	{r7, pc}

0801e824 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801e824:	b580      	push	{r7, lr}
 801e826:	b08c      	sub	sp, #48	; 0x30
 801e828:	af00      	add	r7, sp, #0
 801e82a:	60f8      	str	r0, [r7, #12]
 801e82c:	60b9      	str	r1, [r7, #8]
 801e82e:	607a      	str	r2, [r7, #4]
 801e830:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 801e832:	f107 0314 	add.w	r3, r7, #20
 801e836:	2200      	movs	r2, #0
 801e838:	601a      	str	r2, [r3, #0]
 801e83a:	605a      	str	r2, [r3, #4]
 801e83c:	609a      	str	r2, [r3, #8]
 801e83e:	60da      	str	r2, [r3, #12]
 801e840:	611a      	str	r2, [r3, #16]
 801e842:	615a      	str	r2, [r3, #20]
 801e844:	619a      	str	r2, [r3, #24]
 801e846:	68fb      	ldr	r3, [r7, #12]
 801e848:	617b      	str	r3, [r7, #20]
 801e84a:	68bb      	ldr	r3, [r7, #8]
 801e84c:	61bb      	str	r3, [r7, #24]
 801e84e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e850:	b21b      	sxth	r3, r3
 801e852:	83bb      	strh	r3, [r7, #28]
 801e854:	683b      	ldr	r3, [r7, #0]
 801e856:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 801e858:	f107 0314 	add.w	r3, r7, #20
 801e85c:	6879      	ldr	r1, [r7, #4]
 801e85e:	4618      	mov	r0, r3
 801e860:	f7eb ff9b 	bl	800a79a <osThreadCreate>
 801e864:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 801e866:	4618      	mov	r0, r3
 801e868:	3730      	adds	r7, #48	; 0x30
 801e86a:	46bd      	mov	sp, r7
 801e86c:	bd80      	pop	{r7, pc}
	...

0801e870 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801e870:	b580      	push	{r7, lr}
 801e872:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 801e874:	4b04      	ldr	r3, [pc, #16]	; (801e888 <sys_arch_protect+0x18>)
 801e876:	681b      	ldr	r3, [r3, #0]
 801e878:	f04f 31ff 	mov.w	r1, #4294967295
 801e87c:	4618      	mov	r0, r3
 801e87e:	f7ec f811 	bl	800a8a4 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 801e882:	2301      	movs	r3, #1
}
 801e884:	4618      	mov	r0, r3
 801e886:	bd80      	pop	{r7, pc}
 801e888:	24007f84 	.word	0x24007f84

0801e88c <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801e88c:	b580      	push	{r7, lr}
 801e88e:	b082      	sub	sp, #8
 801e890:	af00      	add	r7, sp, #0
 801e892:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 801e894:	4b04      	ldr	r3, [pc, #16]	; (801e8a8 <sys_arch_unprotect+0x1c>)
 801e896:	681b      	ldr	r3, [r3, #0]
 801e898:	4618      	mov	r0, r3
 801e89a:	f7ec f851 	bl	800a940 <osMutexRelease>
}
 801e89e:	bf00      	nop
 801e8a0:	3708      	adds	r7, #8
 801e8a2:	46bd      	mov	sp, r7
 801e8a4:	bd80      	pop	{r7, pc}
 801e8a6:	bf00      	nop
 801e8a8:	24007f84 	.word	0x24007f84

0801e8ac <atof>:
 801e8ac:	2100      	movs	r1, #0
 801e8ae:	f001 bd2f 	b.w	8020310 <strtod>
	...

0801e8b4 <__libc_init_array>:
 801e8b4:	b570      	push	{r4, r5, r6, lr}
 801e8b6:	4d0d      	ldr	r5, [pc, #52]	; (801e8ec <__libc_init_array+0x38>)
 801e8b8:	4c0d      	ldr	r4, [pc, #52]	; (801e8f0 <__libc_init_array+0x3c>)
 801e8ba:	1b64      	subs	r4, r4, r5
 801e8bc:	10a4      	asrs	r4, r4, #2
 801e8be:	2600      	movs	r6, #0
 801e8c0:	42a6      	cmp	r6, r4
 801e8c2:	d109      	bne.n	801e8d8 <__libc_init_array+0x24>
 801e8c4:	4d0b      	ldr	r5, [pc, #44]	; (801e8f4 <__libc_init_array+0x40>)
 801e8c6:	4c0c      	ldr	r4, [pc, #48]	; (801e8f8 <__libc_init_array+0x44>)
 801e8c8:	f004 fc2e 	bl	8023128 <_init>
 801e8cc:	1b64      	subs	r4, r4, r5
 801e8ce:	10a4      	asrs	r4, r4, #2
 801e8d0:	2600      	movs	r6, #0
 801e8d2:	42a6      	cmp	r6, r4
 801e8d4:	d105      	bne.n	801e8e2 <__libc_init_array+0x2e>
 801e8d6:	bd70      	pop	{r4, r5, r6, pc}
 801e8d8:	f855 3b04 	ldr.w	r3, [r5], #4
 801e8dc:	4798      	blx	r3
 801e8de:	3601      	adds	r6, #1
 801e8e0:	e7ee      	b.n	801e8c0 <__libc_init_array+0xc>
 801e8e2:	f855 3b04 	ldr.w	r3, [r5], #4
 801e8e6:	4798      	blx	r3
 801e8e8:	3601      	adds	r6, #1
 801e8ea:	e7f2      	b.n	801e8d2 <__libc_init_array+0x1e>
 801e8ec:	080276d0 	.word	0x080276d0
 801e8f0:	080276d0 	.word	0x080276d0
 801e8f4:	080276d0 	.word	0x080276d0
 801e8f8:	080276d4 	.word	0x080276d4

0801e8fc <memcmp>:
 801e8fc:	b530      	push	{r4, r5, lr}
 801e8fe:	3901      	subs	r1, #1
 801e900:	2400      	movs	r4, #0
 801e902:	42a2      	cmp	r2, r4
 801e904:	d101      	bne.n	801e90a <memcmp+0xe>
 801e906:	2000      	movs	r0, #0
 801e908:	e005      	b.n	801e916 <memcmp+0x1a>
 801e90a:	5d03      	ldrb	r3, [r0, r4]
 801e90c:	3401      	adds	r4, #1
 801e90e:	5d0d      	ldrb	r5, [r1, r4]
 801e910:	42ab      	cmp	r3, r5
 801e912:	d0f6      	beq.n	801e902 <memcmp+0x6>
 801e914:	1b58      	subs	r0, r3, r5
 801e916:	bd30      	pop	{r4, r5, pc}

0801e918 <memcpy>:
 801e918:	440a      	add	r2, r1
 801e91a:	4291      	cmp	r1, r2
 801e91c:	f100 33ff 	add.w	r3, r0, #4294967295
 801e920:	d100      	bne.n	801e924 <memcpy+0xc>
 801e922:	4770      	bx	lr
 801e924:	b510      	push	{r4, lr}
 801e926:	f811 4b01 	ldrb.w	r4, [r1], #1
 801e92a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801e92e:	4291      	cmp	r1, r2
 801e930:	d1f9      	bne.n	801e926 <memcpy+0xe>
 801e932:	bd10      	pop	{r4, pc}

0801e934 <memmove>:
 801e934:	4288      	cmp	r0, r1
 801e936:	b510      	push	{r4, lr}
 801e938:	eb01 0402 	add.w	r4, r1, r2
 801e93c:	d902      	bls.n	801e944 <memmove+0x10>
 801e93e:	4284      	cmp	r4, r0
 801e940:	4623      	mov	r3, r4
 801e942:	d807      	bhi.n	801e954 <memmove+0x20>
 801e944:	1e43      	subs	r3, r0, #1
 801e946:	42a1      	cmp	r1, r4
 801e948:	d008      	beq.n	801e95c <memmove+0x28>
 801e94a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801e94e:	f803 2f01 	strb.w	r2, [r3, #1]!
 801e952:	e7f8      	b.n	801e946 <memmove+0x12>
 801e954:	4402      	add	r2, r0
 801e956:	4601      	mov	r1, r0
 801e958:	428a      	cmp	r2, r1
 801e95a:	d100      	bne.n	801e95e <memmove+0x2a>
 801e95c:	bd10      	pop	{r4, pc}
 801e95e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801e962:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801e966:	e7f7      	b.n	801e958 <memmove+0x24>

0801e968 <memset>:
 801e968:	4402      	add	r2, r0
 801e96a:	4603      	mov	r3, r0
 801e96c:	4293      	cmp	r3, r2
 801e96e:	d100      	bne.n	801e972 <memset+0xa>
 801e970:	4770      	bx	lr
 801e972:	f803 1b01 	strb.w	r1, [r3], #1
 801e976:	e7f9      	b.n	801e96c <memset+0x4>

0801e978 <__cvt>:
 801e978:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e97a:	ed2d 8b02 	vpush	{d8}
 801e97e:	eeb0 8b40 	vmov.f64	d8, d0
 801e982:	b085      	sub	sp, #20
 801e984:	4617      	mov	r7, r2
 801e986:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801e988:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801e98a:	ee18 2a90 	vmov	r2, s17
 801e98e:	f025 0520 	bic.w	r5, r5, #32
 801e992:	2a00      	cmp	r2, #0
 801e994:	bfb6      	itet	lt
 801e996:	222d      	movlt	r2, #45	; 0x2d
 801e998:	2200      	movge	r2, #0
 801e99a:	eeb1 8b40 	vneglt.f64	d8, d0
 801e99e:	2d46      	cmp	r5, #70	; 0x46
 801e9a0:	460c      	mov	r4, r1
 801e9a2:	701a      	strb	r2, [r3, #0]
 801e9a4:	d004      	beq.n	801e9b0 <__cvt+0x38>
 801e9a6:	2d45      	cmp	r5, #69	; 0x45
 801e9a8:	d100      	bne.n	801e9ac <__cvt+0x34>
 801e9aa:	3401      	adds	r4, #1
 801e9ac:	2102      	movs	r1, #2
 801e9ae:	e000      	b.n	801e9b2 <__cvt+0x3a>
 801e9b0:	2103      	movs	r1, #3
 801e9b2:	ab03      	add	r3, sp, #12
 801e9b4:	9301      	str	r3, [sp, #4]
 801e9b6:	ab02      	add	r3, sp, #8
 801e9b8:	9300      	str	r3, [sp, #0]
 801e9ba:	4622      	mov	r2, r4
 801e9bc:	4633      	mov	r3, r6
 801e9be:	eeb0 0b48 	vmov.f64	d0, d8
 801e9c2:	f001 fde1 	bl	8020588 <_dtoa_r>
 801e9c6:	2d47      	cmp	r5, #71	; 0x47
 801e9c8:	d109      	bne.n	801e9de <__cvt+0x66>
 801e9ca:	07fb      	lsls	r3, r7, #31
 801e9cc:	d407      	bmi.n	801e9de <__cvt+0x66>
 801e9ce:	9b03      	ldr	r3, [sp, #12]
 801e9d0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801e9d2:	1a1b      	subs	r3, r3, r0
 801e9d4:	6013      	str	r3, [r2, #0]
 801e9d6:	b005      	add	sp, #20
 801e9d8:	ecbd 8b02 	vpop	{d8}
 801e9dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e9de:	2d46      	cmp	r5, #70	; 0x46
 801e9e0:	eb00 0204 	add.w	r2, r0, r4
 801e9e4:	d10c      	bne.n	801ea00 <__cvt+0x88>
 801e9e6:	7803      	ldrb	r3, [r0, #0]
 801e9e8:	2b30      	cmp	r3, #48	; 0x30
 801e9ea:	d107      	bne.n	801e9fc <__cvt+0x84>
 801e9ec:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801e9f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e9f4:	bf1c      	itt	ne
 801e9f6:	f1c4 0401 	rsbne	r4, r4, #1
 801e9fa:	6034      	strne	r4, [r6, #0]
 801e9fc:	6833      	ldr	r3, [r6, #0]
 801e9fe:	441a      	add	r2, r3
 801ea00:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801ea04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ea08:	bf08      	it	eq
 801ea0a:	9203      	streq	r2, [sp, #12]
 801ea0c:	2130      	movs	r1, #48	; 0x30
 801ea0e:	9b03      	ldr	r3, [sp, #12]
 801ea10:	4293      	cmp	r3, r2
 801ea12:	d2dc      	bcs.n	801e9ce <__cvt+0x56>
 801ea14:	1c5c      	adds	r4, r3, #1
 801ea16:	9403      	str	r4, [sp, #12]
 801ea18:	7019      	strb	r1, [r3, #0]
 801ea1a:	e7f8      	b.n	801ea0e <__cvt+0x96>

0801ea1c <__exponent>:
 801ea1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801ea1e:	4603      	mov	r3, r0
 801ea20:	2900      	cmp	r1, #0
 801ea22:	bfb8      	it	lt
 801ea24:	4249      	neglt	r1, r1
 801ea26:	f803 2b02 	strb.w	r2, [r3], #2
 801ea2a:	bfb4      	ite	lt
 801ea2c:	222d      	movlt	r2, #45	; 0x2d
 801ea2e:	222b      	movge	r2, #43	; 0x2b
 801ea30:	2909      	cmp	r1, #9
 801ea32:	7042      	strb	r2, [r0, #1]
 801ea34:	dd2a      	ble.n	801ea8c <__exponent+0x70>
 801ea36:	f10d 0407 	add.w	r4, sp, #7
 801ea3a:	46a4      	mov	ip, r4
 801ea3c:	270a      	movs	r7, #10
 801ea3e:	46a6      	mov	lr, r4
 801ea40:	460a      	mov	r2, r1
 801ea42:	fb91 f6f7 	sdiv	r6, r1, r7
 801ea46:	fb07 1516 	mls	r5, r7, r6, r1
 801ea4a:	3530      	adds	r5, #48	; 0x30
 801ea4c:	2a63      	cmp	r2, #99	; 0x63
 801ea4e:	f104 34ff 	add.w	r4, r4, #4294967295
 801ea52:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801ea56:	4631      	mov	r1, r6
 801ea58:	dcf1      	bgt.n	801ea3e <__exponent+0x22>
 801ea5a:	3130      	adds	r1, #48	; 0x30
 801ea5c:	f1ae 0502 	sub.w	r5, lr, #2
 801ea60:	f804 1c01 	strb.w	r1, [r4, #-1]
 801ea64:	1c44      	adds	r4, r0, #1
 801ea66:	4629      	mov	r1, r5
 801ea68:	4561      	cmp	r1, ip
 801ea6a:	d30a      	bcc.n	801ea82 <__exponent+0x66>
 801ea6c:	f10d 0209 	add.w	r2, sp, #9
 801ea70:	eba2 020e 	sub.w	r2, r2, lr
 801ea74:	4565      	cmp	r5, ip
 801ea76:	bf88      	it	hi
 801ea78:	2200      	movhi	r2, #0
 801ea7a:	4413      	add	r3, r2
 801ea7c:	1a18      	subs	r0, r3, r0
 801ea7e:	b003      	add	sp, #12
 801ea80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ea82:	f811 2b01 	ldrb.w	r2, [r1], #1
 801ea86:	f804 2f01 	strb.w	r2, [r4, #1]!
 801ea8a:	e7ed      	b.n	801ea68 <__exponent+0x4c>
 801ea8c:	2330      	movs	r3, #48	; 0x30
 801ea8e:	3130      	adds	r1, #48	; 0x30
 801ea90:	7083      	strb	r3, [r0, #2]
 801ea92:	70c1      	strb	r1, [r0, #3]
 801ea94:	1d03      	adds	r3, r0, #4
 801ea96:	e7f1      	b.n	801ea7c <__exponent+0x60>

0801ea98 <_printf_float>:
 801ea98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ea9c:	b08b      	sub	sp, #44	; 0x2c
 801ea9e:	460c      	mov	r4, r1
 801eaa0:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 801eaa4:	4616      	mov	r6, r2
 801eaa6:	461f      	mov	r7, r3
 801eaa8:	4605      	mov	r5, r0
 801eaaa:	f002 ff6b 	bl	8021984 <_localeconv_r>
 801eaae:	f8d0 b000 	ldr.w	fp, [r0]
 801eab2:	4658      	mov	r0, fp
 801eab4:	f7e1 fc1e 	bl	80002f4 <strlen>
 801eab8:	2300      	movs	r3, #0
 801eaba:	9308      	str	r3, [sp, #32]
 801eabc:	f8d8 3000 	ldr.w	r3, [r8]
 801eac0:	f894 9018 	ldrb.w	r9, [r4, #24]
 801eac4:	6822      	ldr	r2, [r4, #0]
 801eac6:	3307      	adds	r3, #7
 801eac8:	f023 0307 	bic.w	r3, r3, #7
 801eacc:	f103 0108 	add.w	r1, r3, #8
 801ead0:	f8c8 1000 	str.w	r1, [r8]
 801ead4:	4682      	mov	sl, r0
 801ead6:	e9d3 0100 	ldrd	r0, r1, [r3]
 801eada:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 801eade:	ed9f 7b98 	vldr	d7, [pc, #608]	; 801ed40 <_printf_float+0x2a8>
 801eae2:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 801eae6:	eeb0 6bc0 	vabs.f64	d6, d0
 801eaea:	eeb4 6b47 	vcmp.f64	d6, d7
 801eaee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801eaf2:	dd24      	ble.n	801eb3e <_printf_float+0xa6>
 801eaf4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801eaf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801eafc:	d502      	bpl.n	801eb04 <_printf_float+0x6c>
 801eafe:	232d      	movs	r3, #45	; 0x2d
 801eb00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801eb04:	4b90      	ldr	r3, [pc, #576]	; (801ed48 <_printf_float+0x2b0>)
 801eb06:	4891      	ldr	r0, [pc, #580]	; (801ed4c <_printf_float+0x2b4>)
 801eb08:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 801eb0c:	bf94      	ite	ls
 801eb0e:	4698      	movls	r8, r3
 801eb10:	4680      	movhi	r8, r0
 801eb12:	2303      	movs	r3, #3
 801eb14:	6123      	str	r3, [r4, #16]
 801eb16:	f022 0204 	bic.w	r2, r2, #4
 801eb1a:	2300      	movs	r3, #0
 801eb1c:	6022      	str	r2, [r4, #0]
 801eb1e:	9304      	str	r3, [sp, #16]
 801eb20:	9700      	str	r7, [sp, #0]
 801eb22:	4633      	mov	r3, r6
 801eb24:	aa09      	add	r2, sp, #36	; 0x24
 801eb26:	4621      	mov	r1, r4
 801eb28:	4628      	mov	r0, r5
 801eb2a:	f000 f9d3 	bl	801eed4 <_printf_common>
 801eb2e:	3001      	adds	r0, #1
 801eb30:	f040 808a 	bne.w	801ec48 <_printf_float+0x1b0>
 801eb34:	f04f 30ff 	mov.w	r0, #4294967295
 801eb38:	b00b      	add	sp, #44	; 0x2c
 801eb3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801eb3e:	eeb4 0b40 	vcmp.f64	d0, d0
 801eb42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801eb46:	d709      	bvc.n	801eb5c <_printf_float+0xc4>
 801eb48:	ee10 3a90 	vmov	r3, s1
 801eb4c:	2b00      	cmp	r3, #0
 801eb4e:	bfbc      	itt	lt
 801eb50:	232d      	movlt	r3, #45	; 0x2d
 801eb52:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801eb56:	487e      	ldr	r0, [pc, #504]	; (801ed50 <_printf_float+0x2b8>)
 801eb58:	4b7e      	ldr	r3, [pc, #504]	; (801ed54 <_printf_float+0x2bc>)
 801eb5a:	e7d5      	b.n	801eb08 <_printf_float+0x70>
 801eb5c:	6863      	ldr	r3, [r4, #4]
 801eb5e:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 801eb62:	9104      	str	r1, [sp, #16]
 801eb64:	1c59      	adds	r1, r3, #1
 801eb66:	d13c      	bne.n	801ebe2 <_printf_float+0x14a>
 801eb68:	2306      	movs	r3, #6
 801eb6a:	6063      	str	r3, [r4, #4]
 801eb6c:	2300      	movs	r3, #0
 801eb6e:	9303      	str	r3, [sp, #12]
 801eb70:	ab08      	add	r3, sp, #32
 801eb72:	e9cd 9301 	strd	r9, r3, [sp, #4]
 801eb76:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801eb7a:	ab07      	add	r3, sp, #28
 801eb7c:	6861      	ldr	r1, [r4, #4]
 801eb7e:	9300      	str	r3, [sp, #0]
 801eb80:	6022      	str	r2, [r4, #0]
 801eb82:	f10d 031b 	add.w	r3, sp, #27
 801eb86:	4628      	mov	r0, r5
 801eb88:	f7ff fef6 	bl	801e978 <__cvt>
 801eb8c:	9b04      	ldr	r3, [sp, #16]
 801eb8e:	9907      	ldr	r1, [sp, #28]
 801eb90:	2b47      	cmp	r3, #71	; 0x47
 801eb92:	4680      	mov	r8, r0
 801eb94:	d108      	bne.n	801eba8 <_printf_float+0x110>
 801eb96:	1cc8      	adds	r0, r1, #3
 801eb98:	db02      	blt.n	801eba0 <_printf_float+0x108>
 801eb9a:	6863      	ldr	r3, [r4, #4]
 801eb9c:	4299      	cmp	r1, r3
 801eb9e:	dd41      	ble.n	801ec24 <_printf_float+0x18c>
 801eba0:	f1a9 0902 	sub.w	r9, r9, #2
 801eba4:	fa5f f989 	uxtb.w	r9, r9
 801eba8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801ebac:	d820      	bhi.n	801ebf0 <_printf_float+0x158>
 801ebae:	3901      	subs	r1, #1
 801ebb0:	464a      	mov	r2, r9
 801ebb2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801ebb6:	9107      	str	r1, [sp, #28]
 801ebb8:	f7ff ff30 	bl	801ea1c <__exponent>
 801ebbc:	9a08      	ldr	r2, [sp, #32]
 801ebbe:	9004      	str	r0, [sp, #16]
 801ebc0:	1813      	adds	r3, r2, r0
 801ebc2:	2a01      	cmp	r2, #1
 801ebc4:	6123      	str	r3, [r4, #16]
 801ebc6:	dc02      	bgt.n	801ebce <_printf_float+0x136>
 801ebc8:	6822      	ldr	r2, [r4, #0]
 801ebca:	07d2      	lsls	r2, r2, #31
 801ebcc:	d501      	bpl.n	801ebd2 <_printf_float+0x13a>
 801ebce:	3301      	adds	r3, #1
 801ebd0:	6123      	str	r3, [r4, #16]
 801ebd2:	f89d 301b 	ldrb.w	r3, [sp, #27]
 801ebd6:	2b00      	cmp	r3, #0
 801ebd8:	d0a2      	beq.n	801eb20 <_printf_float+0x88>
 801ebda:	232d      	movs	r3, #45	; 0x2d
 801ebdc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801ebe0:	e79e      	b.n	801eb20 <_printf_float+0x88>
 801ebe2:	9904      	ldr	r1, [sp, #16]
 801ebe4:	2947      	cmp	r1, #71	; 0x47
 801ebe6:	d1c1      	bne.n	801eb6c <_printf_float+0xd4>
 801ebe8:	2b00      	cmp	r3, #0
 801ebea:	d1bf      	bne.n	801eb6c <_printf_float+0xd4>
 801ebec:	2301      	movs	r3, #1
 801ebee:	e7bc      	b.n	801eb6a <_printf_float+0xd2>
 801ebf0:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 801ebf4:	d118      	bne.n	801ec28 <_printf_float+0x190>
 801ebf6:	2900      	cmp	r1, #0
 801ebf8:	6863      	ldr	r3, [r4, #4]
 801ebfa:	dd0b      	ble.n	801ec14 <_printf_float+0x17c>
 801ebfc:	6121      	str	r1, [r4, #16]
 801ebfe:	b913      	cbnz	r3, 801ec06 <_printf_float+0x16e>
 801ec00:	6822      	ldr	r2, [r4, #0]
 801ec02:	07d0      	lsls	r0, r2, #31
 801ec04:	d502      	bpl.n	801ec0c <_printf_float+0x174>
 801ec06:	3301      	adds	r3, #1
 801ec08:	440b      	add	r3, r1
 801ec0a:	6123      	str	r3, [r4, #16]
 801ec0c:	2300      	movs	r3, #0
 801ec0e:	65a1      	str	r1, [r4, #88]	; 0x58
 801ec10:	9304      	str	r3, [sp, #16]
 801ec12:	e7de      	b.n	801ebd2 <_printf_float+0x13a>
 801ec14:	b913      	cbnz	r3, 801ec1c <_printf_float+0x184>
 801ec16:	6822      	ldr	r2, [r4, #0]
 801ec18:	07d2      	lsls	r2, r2, #31
 801ec1a:	d501      	bpl.n	801ec20 <_printf_float+0x188>
 801ec1c:	3302      	adds	r3, #2
 801ec1e:	e7f4      	b.n	801ec0a <_printf_float+0x172>
 801ec20:	2301      	movs	r3, #1
 801ec22:	e7f2      	b.n	801ec0a <_printf_float+0x172>
 801ec24:	f04f 0967 	mov.w	r9, #103	; 0x67
 801ec28:	9b08      	ldr	r3, [sp, #32]
 801ec2a:	4299      	cmp	r1, r3
 801ec2c:	db05      	blt.n	801ec3a <_printf_float+0x1a2>
 801ec2e:	6823      	ldr	r3, [r4, #0]
 801ec30:	6121      	str	r1, [r4, #16]
 801ec32:	07d8      	lsls	r0, r3, #31
 801ec34:	d5ea      	bpl.n	801ec0c <_printf_float+0x174>
 801ec36:	1c4b      	adds	r3, r1, #1
 801ec38:	e7e7      	b.n	801ec0a <_printf_float+0x172>
 801ec3a:	2900      	cmp	r1, #0
 801ec3c:	bfd4      	ite	le
 801ec3e:	f1c1 0202 	rsble	r2, r1, #2
 801ec42:	2201      	movgt	r2, #1
 801ec44:	4413      	add	r3, r2
 801ec46:	e7e0      	b.n	801ec0a <_printf_float+0x172>
 801ec48:	6823      	ldr	r3, [r4, #0]
 801ec4a:	055a      	lsls	r2, r3, #21
 801ec4c:	d407      	bmi.n	801ec5e <_printf_float+0x1c6>
 801ec4e:	6923      	ldr	r3, [r4, #16]
 801ec50:	4642      	mov	r2, r8
 801ec52:	4631      	mov	r1, r6
 801ec54:	4628      	mov	r0, r5
 801ec56:	47b8      	blx	r7
 801ec58:	3001      	adds	r0, #1
 801ec5a:	d12a      	bne.n	801ecb2 <_printf_float+0x21a>
 801ec5c:	e76a      	b.n	801eb34 <_printf_float+0x9c>
 801ec5e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801ec62:	f240 80e2 	bls.w	801ee2a <_printf_float+0x392>
 801ec66:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 801ec6a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801ec6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ec72:	d133      	bne.n	801ecdc <_printf_float+0x244>
 801ec74:	4a38      	ldr	r2, [pc, #224]	; (801ed58 <_printf_float+0x2c0>)
 801ec76:	2301      	movs	r3, #1
 801ec78:	4631      	mov	r1, r6
 801ec7a:	4628      	mov	r0, r5
 801ec7c:	47b8      	blx	r7
 801ec7e:	3001      	adds	r0, #1
 801ec80:	f43f af58 	beq.w	801eb34 <_printf_float+0x9c>
 801ec84:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801ec88:	429a      	cmp	r2, r3
 801ec8a:	db02      	blt.n	801ec92 <_printf_float+0x1fa>
 801ec8c:	6823      	ldr	r3, [r4, #0]
 801ec8e:	07d8      	lsls	r0, r3, #31
 801ec90:	d50f      	bpl.n	801ecb2 <_printf_float+0x21a>
 801ec92:	4653      	mov	r3, sl
 801ec94:	465a      	mov	r2, fp
 801ec96:	4631      	mov	r1, r6
 801ec98:	4628      	mov	r0, r5
 801ec9a:	47b8      	blx	r7
 801ec9c:	3001      	adds	r0, #1
 801ec9e:	f43f af49 	beq.w	801eb34 <_printf_float+0x9c>
 801eca2:	f04f 0800 	mov.w	r8, #0
 801eca6:	f104 091a 	add.w	r9, r4, #26
 801ecaa:	9b08      	ldr	r3, [sp, #32]
 801ecac:	3b01      	subs	r3, #1
 801ecae:	4543      	cmp	r3, r8
 801ecb0:	dc09      	bgt.n	801ecc6 <_printf_float+0x22e>
 801ecb2:	6823      	ldr	r3, [r4, #0]
 801ecb4:	079b      	lsls	r3, r3, #30
 801ecb6:	f100 8108 	bmi.w	801eeca <_printf_float+0x432>
 801ecba:	68e0      	ldr	r0, [r4, #12]
 801ecbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ecbe:	4298      	cmp	r0, r3
 801ecc0:	bfb8      	it	lt
 801ecc2:	4618      	movlt	r0, r3
 801ecc4:	e738      	b.n	801eb38 <_printf_float+0xa0>
 801ecc6:	2301      	movs	r3, #1
 801ecc8:	464a      	mov	r2, r9
 801ecca:	4631      	mov	r1, r6
 801eccc:	4628      	mov	r0, r5
 801ecce:	47b8      	blx	r7
 801ecd0:	3001      	adds	r0, #1
 801ecd2:	f43f af2f 	beq.w	801eb34 <_printf_float+0x9c>
 801ecd6:	f108 0801 	add.w	r8, r8, #1
 801ecda:	e7e6      	b.n	801ecaa <_printf_float+0x212>
 801ecdc:	9b07      	ldr	r3, [sp, #28]
 801ecde:	2b00      	cmp	r3, #0
 801ece0:	dc3c      	bgt.n	801ed5c <_printf_float+0x2c4>
 801ece2:	4a1d      	ldr	r2, [pc, #116]	; (801ed58 <_printf_float+0x2c0>)
 801ece4:	2301      	movs	r3, #1
 801ece6:	4631      	mov	r1, r6
 801ece8:	4628      	mov	r0, r5
 801ecea:	47b8      	blx	r7
 801ecec:	3001      	adds	r0, #1
 801ecee:	f43f af21 	beq.w	801eb34 <_printf_float+0x9c>
 801ecf2:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801ecf6:	4313      	orrs	r3, r2
 801ecf8:	d102      	bne.n	801ed00 <_printf_float+0x268>
 801ecfa:	6823      	ldr	r3, [r4, #0]
 801ecfc:	07d9      	lsls	r1, r3, #31
 801ecfe:	d5d8      	bpl.n	801ecb2 <_printf_float+0x21a>
 801ed00:	4653      	mov	r3, sl
 801ed02:	465a      	mov	r2, fp
 801ed04:	4631      	mov	r1, r6
 801ed06:	4628      	mov	r0, r5
 801ed08:	47b8      	blx	r7
 801ed0a:	3001      	adds	r0, #1
 801ed0c:	f43f af12 	beq.w	801eb34 <_printf_float+0x9c>
 801ed10:	f04f 0900 	mov.w	r9, #0
 801ed14:	f104 0a1a 	add.w	sl, r4, #26
 801ed18:	9b07      	ldr	r3, [sp, #28]
 801ed1a:	425b      	negs	r3, r3
 801ed1c:	454b      	cmp	r3, r9
 801ed1e:	dc01      	bgt.n	801ed24 <_printf_float+0x28c>
 801ed20:	9b08      	ldr	r3, [sp, #32]
 801ed22:	e795      	b.n	801ec50 <_printf_float+0x1b8>
 801ed24:	2301      	movs	r3, #1
 801ed26:	4652      	mov	r2, sl
 801ed28:	4631      	mov	r1, r6
 801ed2a:	4628      	mov	r0, r5
 801ed2c:	47b8      	blx	r7
 801ed2e:	3001      	adds	r0, #1
 801ed30:	f43f af00 	beq.w	801eb34 <_printf_float+0x9c>
 801ed34:	f109 0901 	add.w	r9, r9, #1
 801ed38:	e7ee      	b.n	801ed18 <_printf_float+0x280>
 801ed3a:	bf00      	nop
 801ed3c:	f3af 8000 	nop.w
 801ed40:	ffffffff 	.word	0xffffffff
 801ed44:	7fefffff 	.word	0x7fefffff
 801ed48:	080272b4 	.word	0x080272b4
 801ed4c:	080272b8 	.word	0x080272b8
 801ed50:	080272c0 	.word	0x080272c0
 801ed54:	080272bc 	.word	0x080272bc
 801ed58:	080272c4 	.word	0x080272c4
 801ed5c:	9a08      	ldr	r2, [sp, #32]
 801ed5e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801ed60:	429a      	cmp	r2, r3
 801ed62:	bfa8      	it	ge
 801ed64:	461a      	movge	r2, r3
 801ed66:	2a00      	cmp	r2, #0
 801ed68:	4691      	mov	r9, r2
 801ed6a:	dc38      	bgt.n	801edde <_printf_float+0x346>
 801ed6c:	2300      	movs	r3, #0
 801ed6e:	9305      	str	r3, [sp, #20]
 801ed70:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801ed74:	f104 021a 	add.w	r2, r4, #26
 801ed78:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801ed7a:	9905      	ldr	r1, [sp, #20]
 801ed7c:	9304      	str	r3, [sp, #16]
 801ed7e:	eba3 0309 	sub.w	r3, r3, r9
 801ed82:	428b      	cmp	r3, r1
 801ed84:	dc33      	bgt.n	801edee <_printf_float+0x356>
 801ed86:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801ed8a:	429a      	cmp	r2, r3
 801ed8c:	db3c      	blt.n	801ee08 <_printf_float+0x370>
 801ed8e:	6823      	ldr	r3, [r4, #0]
 801ed90:	07da      	lsls	r2, r3, #31
 801ed92:	d439      	bmi.n	801ee08 <_printf_float+0x370>
 801ed94:	9a08      	ldr	r2, [sp, #32]
 801ed96:	9b04      	ldr	r3, [sp, #16]
 801ed98:	9907      	ldr	r1, [sp, #28]
 801ed9a:	1ad3      	subs	r3, r2, r3
 801ed9c:	eba2 0901 	sub.w	r9, r2, r1
 801eda0:	4599      	cmp	r9, r3
 801eda2:	bfa8      	it	ge
 801eda4:	4699      	movge	r9, r3
 801eda6:	f1b9 0f00 	cmp.w	r9, #0
 801edaa:	dc35      	bgt.n	801ee18 <_printf_float+0x380>
 801edac:	f04f 0800 	mov.w	r8, #0
 801edb0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801edb4:	f104 0a1a 	add.w	sl, r4, #26
 801edb8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801edbc:	1a9b      	subs	r3, r3, r2
 801edbe:	eba3 0309 	sub.w	r3, r3, r9
 801edc2:	4543      	cmp	r3, r8
 801edc4:	f77f af75 	ble.w	801ecb2 <_printf_float+0x21a>
 801edc8:	2301      	movs	r3, #1
 801edca:	4652      	mov	r2, sl
 801edcc:	4631      	mov	r1, r6
 801edce:	4628      	mov	r0, r5
 801edd0:	47b8      	blx	r7
 801edd2:	3001      	adds	r0, #1
 801edd4:	f43f aeae 	beq.w	801eb34 <_printf_float+0x9c>
 801edd8:	f108 0801 	add.w	r8, r8, #1
 801eddc:	e7ec      	b.n	801edb8 <_printf_float+0x320>
 801edde:	4613      	mov	r3, r2
 801ede0:	4631      	mov	r1, r6
 801ede2:	4642      	mov	r2, r8
 801ede4:	4628      	mov	r0, r5
 801ede6:	47b8      	blx	r7
 801ede8:	3001      	adds	r0, #1
 801edea:	d1bf      	bne.n	801ed6c <_printf_float+0x2d4>
 801edec:	e6a2      	b.n	801eb34 <_printf_float+0x9c>
 801edee:	2301      	movs	r3, #1
 801edf0:	4631      	mov	r1, r6
 801edf2:	4628      	mov	r0, r5
 801edf4:	9204      	str	r2, [sp, #16]
 801edf6:	47b8      	blx	r7
 801edf8:	3001      	adds	r0, #1
 801edfa:	f43f ae9b 	beq.w	801eb34 <_printf_float+0x9c>
 801edfe:	9b05      	ldr	r3, [sp, #20]
 801ee00:	9a04      	ldr	r2, [sp, #16]
 801ee02:	3301      	adds	r3, #1
 801ee04:	9305      	str	r3, [sp, #20]
 801ee06:	e7b7      	b.n	801ed78 <_printf_float+0x2e0>
 801ee08:	4653      	mov	r3, sl
 801ee0a:	465a      	mov	r2, fp
 801ee0c:	4631      	mov	r1, r6
 801ee0e:	4628      	mov	r0, r5
 801ee10:	47b8      	blx	r7
 801ee12:	3001      	adds	r0, #1
 801ee14:	d1be      	bne.n	801ed94 <_printf_float+0x2fc>
 801ee16:	e68d      	b.n	801eb34 <_printf_float+0x9c>
 801ee18:	9a04      	ldr	r2, [sp, #16]
 801ee1a:	464b      	mov	r3, r9
 801ee1c:	4442      	add	r2, r8
 801ee1e:	4631      	mov	r1, r6
 801ee20:	4628      	mov	r0, r5
 801ee22:	47b8      	blx	r7
 801ee24:	3001      	adds	r0, #1
 801ee26:	d1c1      	bne.n	801edac <_printf_float+0x314>
 801ee28:	e684      	b.n	801eb34 <_printf_float+0x9c>
 801ee2a:	9a08      	ldr	r2, [sp, #32]
 801ee2c:	2a01      	cmp	r2, #1
 801ee2e:	dc01      	bgt.n	801ee34 <_printf_float+0x39c>
 801ee30:	07db      	lsls	r3, r3, #31
 801ee32:	d537      	bpl.n	801eea4 <_printf_float+0x40c>
 801ee34:	2301      	movs	r3, #1
 801ee36:	4642      	mov	r2, r8
 801ee38:	4631      	mov	r1, r6
 801ee3a:	4628      	mov	r0, r5
 801ee3c:	47b8      	blx	r7
 801ee3e:	3001      	adds	r0, #1
 801ee40:	f43f ae78 	beq.w	801eb34 <_printf_float+0x9c>
 801ee44:	4653      	mov	r3, sl
 801ee46:	465a      	mov	r2, fp
 801ee48:	4631      	mov	r1, r6
 801ee4a:	4628      	mov	r0, r5
 801ee4c:	47b8      	blx	r7
 801ee4e:	3001      	adds	r0, #1
 801ee50:	f43f ae70 	beq.w	801eb34 <_printf_float+0x9c>
 801ee54:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 801ee58:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801ee5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ee60:	d01b      	beq.n	801ee9a <_printf_float+0x402>
 801ee62:	9b08      	ldr	r3, [sp, #32]
 801ee64:	f108 0201 	add.w	r2, r8, #1
 801ee68:	3b01      	subs	r3, #1
 801ee6a:	4631      	mov	r1, r6
 801ee6c:	4628      	mov	r0, r5
 801ee6e:	47b8      	blx	r7
 801ee70:	3001      	adds	r0, #1
 801ee72:	d10e      	bne.n	801ee92 <_printf_float+0x3fa>
 801ee74:	e65e      	b.n	801eb34 <_printf_float+0x9c>
 801ee76:	2301      	movs	r3, #1
 801ee78:	464a      	mov	r2, r9
 801ee7a:	4631      	mov	r1, r6
 801ee7c:	4628      	mov	r0, r5
 801ee7e:	47b8      	blx	r7
 801ee80:	3001      	adds	r0, #1
 801ee82:	f43f ae57 	beq.w	801eb34 <_printf_float+0x9c>
 801ee86:	f108 0801 	add.w	r8, r8, #1
 801ee8a:	9b08      	ldr	r3, [sp, #32]
 801ee8c:	3b01      	subs	r3, #1
 801ee8e:	4543      	cmp	r3, r8
 801ee90:	dcf1      	bgt.n	801ee76 <_printf_float+0x3de>
 801ee92:	9b04      	ldr	r3, [sp, #16]
 801ee94:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801ee98:	e6db      	b.n	801ec52 <_printf_float+0x1ba>
 801ee9a:	f04f 0800 	mov.w	r8, #0
 801ee9e:	f104 091a 	add.w	r9, r4, #26
 801eea2:	e7f2      	b.n	801ee8a <_printf_float+0x3f2>
 801eea4:	2301      	movs	r3, #1
 801eea6:	4642      	mov	r2, r8
 801eea8:	e7df      	b.n	801ee6a <_printf_float+0x3d2>
 801eeaa:	2301      	movs	r3, #1
 801eeac:	464a      	mov	r2, r9
 801eeae:	4631      	mov	r1, r6
 801eeb0:	4628      	mov	r0, r5
 801eeb2:	47b8      	blx	r7
 801eeb4:	3001      	adds	r0, #1
 801eeb6:	f43f ae3d 	beq.w	801eb34 <_printf_float+0x9c>
 801eeba:	f108 0801 	add.w	r8, r8, #1
 801eebe:	68e3      	ldr	r3, [r4, #12]
 801eec0:	9909      	ldr	r1, [sp, #36]	; 0x24
 801eec2:	1a5b      	subs	r3, r3, r1
 801eec4:	4543      	cmp	r3, r8
 801eec6:	dcf0      	bgt.n	801eeaa <_printf_float+0x412>
 801eec8:	e6f7      	b.n	801ecba <_printf_float+0x222>
 801eeca:	f04f 0800 	mov.w	r8, #0
 801eece:	f104 0919 	add.w	r9, r4, #25
 801eed2:	e7f4      	b.n	801eebe <_printf_float+0x426>

0801eed4 <_printf_common>:
 801eed4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801eed8:	4616      	mov	r6, r2
 801eeda:	4699      	mov	r9, r3
 801eedc:	688a      	ldr	r2, [r1, #8]
 801eede:	690b      	ldr	r3, [r1, #16]
 801eee0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801eee4:	4293      	cmp	r3, r2
 801eee6:	bfb8      	it	lt
 801eee8:	4613      	movlt	r3, r2
 801eeea:	6033      	str	r3, [r6, #0]
 801eeec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801eef0:	4607      	mov	r7, r0
 801eef2:	460c      	mov	r4, r1
 801eef4:	b10a      	cbz	r2, 801eefa <_printf_common+0x26>
 801eef6:	3301      	adds	r3, #1
 801eef8:	6033      	str	r3, [r6, #0]
 801eefa:	6823      	ldr	r3, [r4, #0]
 801eefc:	0699      	lsls	r1, r3, #26
 801eefe:	bf42      	ittt	mi
 801ef00:	6833      	ldrmi	r3, [r6, #0]
 801ef02:	3302      	addmi	r3, #2
 801ef04:	6033      	strmi	r3, [r6, #0]
 801ef06:	6825      	ldr	r5, [r4, #0]
 801ef08:	f015 0506 	ands.w	r5, r5, #6
 801ef0c:	d106      	bne.n	801ef1c <_printf_common+0x48>
 801ef0e:	f104 0a19 	add.w	sl, r4, #25
 801ef12:	68e3      	ldr	r3, [r4, #12]
 801ef14:	6832      	ldr	r2, [r6, #0]
 801ef16:	1a9b      	subs	r3, r3, r2
 801ef18:	42ab      	cmp	r3, r5
 801ef1a:	dc26      	bgt.n	801ef6a <_printf_common+0x96>
 801ef1c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801ef20:	1e13      	subs	r3, r2, #0
 801ef22:	6822      	ldr	r2, [r4, #0]
 801ef24:	bf18      	it	ne
 801ef26:	2301      	movne	r3, #1
 801ef28:	0692      	lsls	r2, r2, #26
 801ef2a:	d42b      	bmi.n	801ef84 <_printf_common+0xb0>
 801ef2c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801ef30:	4649      	mov	r1, r9
 801ef32:	4638      	mov	r0, r7
 801ef34:	47c0      	blx	r8
 801ef36:	3001      	adds	r0, #1
 801ef38:	d01e      	beq.n	801ef78 <_printf_common+0xa4>
 801ef3a:	6823      	ldr	r3, [r4, #0]
 801ef3c:	68e5      	ldr	r5, [r4, #12]
 801ef3e:	6832      	ldr	r2, [r6, #0]
 801ef40:	f003 0306 	and.w	r3, r3, #6
 801ef44:	2b04      	cmp	r3, #4
 801ef46:	bf08      	it	eq
 801ef48:	1aad      	subeq	r5, r5, r2
 801ef4a:	68a3      	ldr	r3, [r4, #8]
 801ef4c:	6922      	ldr	r2, [r4, #16]
 801ef4e:	bf0c      	ite	eq
 801ef50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801ef54:	2500      	movne	r5, #0
 801ef56:	4293      	cmp	r3, r2
 801ef58:	bfc4      	itt	gt
 801ef5a:	1a9b      	subgt	r3, r3, r2
 801ef5c:	18ed      	addgt	r5, r5, r3
 801ef5e:	2600      	movs	r6, #0
 801ef60:	341a      	adds	r4, #26
 801ef62:	42b5      	cmp	r5, r6
 801ef64:	d11a      	bne.n	801ef9c <_printf_common+0xc8>
 801ef66:	2000      	movs	r0, #0
 801ef68:	e008      	b.n	801ef7c <_printf_common+0xa8>
 801ef6a:	2301      	movs	r3, #1
 801ef6c:	4652      	mov	r2, sl
 801ef6e:	4649      	mov	r1, r9
 801ef70:	4638      	mov	r0, r7
 801ef72:	47c0      	blx	r8
 801ef74:	3001      	adds	r0, #1
 801ef76:	d103      	bne.n	801ef80 <_printf_common+0xac>
 801ef78:	f04f 30ff 	mov.w	r0, #4294967295
 801ef7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ef80:	3501      	adds	r5, #1
 801ef82:	e7c6      	b.n	801ef12 <_printf_common+0x3e>
 801ef84:	18e1      	adds	r1, r4, r3
 801ef86:	1c5a      	adds	r2, r3, #1
 801ef88:	2030      	movs	r0, #48	; 0x30
 801ef8a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801ef8e:	4422      	add	r2, r4
 801ef90:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801ef94:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801ef98:	3302      	adds	r3, #2
 801ef9a:	e7c7      	b.n	801ef2c <_printf_common+0x58>
 801ef9c:	2301      	movs	r3, #1
 801ef9e:	4622      	mov	r2, r4
 801efa0:	4649      	mov	r1, r9
 801efa2:	4638      	mov	r0, r7
 801efa4:	47c0      	blx	r8
 801efa6:	3001      	adds	r0, #1
 801efa8:	d0e6      	beq.n	801ef78 <_printf_common+0xa4>
 801efaa:	3601      	adds	r6, #1
 801efac:	e7d9      	b.n	801ef62 <_printf_common+0x8e>
	...

0801efb0 <_printf_i>:
 801efb0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801efb4:	460c      	mov	r4, r1
 801efb6:	4691      	mov	r9, r2
 801efb8:	7e27      	ldrb	r7, [r4, #24]
 801efba:	990c      	ldr	r1, [sp, #48]	; 0x30
 801efbc:	2f78      	cmp	r7, #120	; 0x78
 801efbe:	4680      	mov	r8, r0
 801efc0:	469a      	mov	sl, r3
 801efc2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801efc6:	d807      	bhi.n	801efd8 <_printf_i+0x28>
 801efc8:	2f62      	cmp	r7, #98	; 0x62
 801efca:	d80a      	bhi.n	801efe2 <_printf_i+0x32>
 801efcc:	2f00      	cmp	r7, #0
 801efce:	f000 80d8 	beq.w	801f182 <_printf_i+0x1d2>
 801efd2:	2f58      	cmp	r7, #88	; 0x58
 801efd4:	f000 80a3 	beq.w	801f11e <_printf_i+0x16e>
 801efd8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801efdc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801efe0:	e03a      	b.n	801f058 <_printf_i+0xa8>
 801efe2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801efe6:	2b15      	cmp	r3, #21
 801efe8:	d8f6      	bhi.n	801efd8 <_printf_i+0x28>
 801efea:	a001      	add	r0, pc, #4	; (adr r0, 801eff0 <_printf_i+0x40>)
 801efec:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801eff0:	0801f049 	.word	0x0801f049
 801eff4:	0801f05d 	.word	0x0801f05d
 801eff8:	0801efd9 	.word	0x0801efd9
 801effc:	0801efd9 	.word	0x0801efd9
 801f000:	0801efd9 	.word	0x0801efd9
 801f004:	0801efd9 	.word	0x0801efd9
 801f008:	0801f05d 	.word	0x0801f05d
 801f00c:	0801efd9 	.word	0x0801efd9
 801f010:	0801efd9 	.word	0x0801efd9
 801f014:	0801efd9 	.word	0x0801efd9
 801f018:	0801efd9 	.word	0x0801efd9
 801f01c:	0801f169 	.word	0x0801f169
 801f020:	0801f08d 	.word	0x0801f08d
 801f024:	0801f14b 	.word	0x0801f14b
 801f028:	0801efd9 	.word	0x0801efd9
 801f02c:	0801efd9 	.word	0x0801efd9
 801f030:	0801f18b 	.word	0x0801f18b
 801f034:	0801efd9 	.word	0x0801efd9
 801f038:	0801f08d 	.word	0x0801f08d
 801f03c:	0801efd9 	.word	0x0801efd9
 801f040:	0801efd9 	.word	0x0801efd9
 801f044:	0801f153 	.word	0x0801f153
 801f048:	680b      	ldr	r3, [r1, #0]
 801f04a:	1d1a      	adds	r2, r3, #4
 801f04c:	681b      	ldr	r3, [r3, #0]
 801f04e:	600a      	str	r2, [r1, #0]
 801f050:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801f054:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801f058:	2301      	movs	r3, #1
 801f05a:	e0a3      	b.n	801f1a4 <_printf_i+0x1f4>
 801f05c:	6825      	ldr	r5, [r4, #0]
 801f05e:	6808      	ldr	r0, [r1, #0]
 801f060:	062e      	lsls	r6, r5, #24
 801f062:	f100 0304 	add.w	r3, r0, #4
 801f066:	d50a      	bpl.n	801f07e <_printf_i+0xce>
 801f068:	6805      	ldr	r5, [r0, #0]
 801f06a:	600b      	str	r3, [r1, #0]
 801f06c:	2d00      	cmp	r5, #0
 801f06e:	da03      	bge.n	801f078 <_printf_i+0xc8>
 801f070:	232d      	movs	r3, #45	; 0x2d
 801f072:	426d      	negs	r5, r5
 801f074:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801f078:	485e      	ldr	r0, [pc, #376]	; (801f1f4 <_printf_i+0x244>)
 801f07a:	230a      	movs	r3, #10
 801f07c:	e019      	b.n	801f0b2 <_printf_i+0x102>
 801f07e:	f015 0f40 	tst.w	r5, #64	; 0x40
 801f082:	6805      	ldr	r5, [r0, #0]
 801f084:	600b      	str	r3, [r1, #0]
 801f086:	bf18      	it	ne
 801f088:	b22d      	sxthne	r5, r5
 801f08a:	e7ef      	b.n	801f06c <_printf_i+0xbc>
 801f08c:	680b      	ldr	r3, [r1, #0]
 801f08e:	6825      	ldr	r5, [r4, #0]
 801f090:	1d18      	adds	r0, r3, #4
 801f092:	6008      	str	r0, [r1, #0]
 801f094:	0628      	lsls	r0, r5, #24
 801f096:	d501      	bpl.n	801f09c <_printf_i+0xec>
 801f098:	681d      	ldr	r5, [r3, #0]
 801f09a:	e002      	b.n	801f0a2 <_printf_i+0xf2>
 801f09c:	0669      	lsls	r1, r5, #25
 801f09e:	d5fb      	bpl.n	801f098 <_printf_i+0xe8>
 801f0a0:	881d      	ldrh	r5, [r3, #0]
 801f0a2:	4854      	ldr	r0, [pc, #336]	; (801f1f4 <_printf_i+0x244>)
 801f0a4:	2f6f      	cmp	r7, #111	; 0x6f
 801f0a6:	bf0c      	ite	eq
 801f0a8:	2308      	moveq	r3, #8
 801f0aa:	230a      	movne	r3, #10
 801f0ac:	2100      	movs	r1, #0
 801f0ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801f0b2:	6866      	ldr	r6, [r4, #4]
 801f0b4:	60a6      	str	r6, [r4, #8]
 801f0b6:	2e00      	cmp	r6, #0
 801f0b8:	bfa2      	ittt	ge
 801f0ba:	6821      	ldrge	r1, [r4, #0]
 801f0bc:	f021 0104 	bicge.w	r1, r1, #4
 801f0c0:	6021      	strge	r1, [r4, #0]
 801f0c2:	b90d      	cbnz	r5, 801f0c8 <_printf_i+0x118>
 801f0c4:	2e00      	cmp	r6, #0
 801f0c6:	d04d      	beq.n	801f164 <_printf_i+0x1b4>
 801f0c8:	4616      	mov	r6, r2
 801f0ca:	fbb5 f1f3 	udiv	r1, r5, r3
 801f0ce:	fb03 5711 	mls	r7, r3, r1, r5
 801f0d2:	5dc7      	ldrb	r7, [r0, r7]
 801f0d4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801f0d8:	462f      	mov	r7, r5
 801f0da:	42bb      	cmp	r3, r7
 801f0dc:	460d      	mov	r5, r1
 801f0de:	d9f4      	bls.n	801f0ca <_printf_i+0x11a>
 801f0e0:	2b08      	cmp	r3, #8
 801f0e2:	d10b      	bne.n	801f0fc <_printf_i+0x14c>
 801f0e4:	6823      	ldr	r3, [r4, #0]
 801f0e6:	07df      	lsls	r7, r3, #31
 801f0e8:	d508      	bpl.n	801f0fc <_printf_i+0x14c>
 801f0ea:	6923      	ldr	r3, [r4, #16]
 801f0ec:	6861      	ldr	r1, [r4, #4]
 801f0ee:	4299      	cmp	r1, r3
 801f0f0:	bfde      	ittt	le
 801f0f2:	2330      	movle	r3, #48	; 0x30
 801f0f4:	f806 3c01 	strble.w	r3, [r6, #-1]
 801f0f8:	f106 36ff 	addle.w	r6, r6, #4294967295
 801f0fc:	1b92      	subs	r2, r2, r6
 801f0fe:	6122      	str	r2, [r4, #16]
 801f100:	f8cd a000 	str.w	sl, [sp]
 801f104:	464b      	mov	r3, r9
 801f106:	aa03      	add	r2, sp, #12
 801f108:	4621      	mov	r1, r4
 801f10a:	4640      	mov	r0, r8
 801f10c:	f7ff fee2 	bl	801eed4 <_printf_common>
 801f110:	3001      	adds	r0, #1
 801f112:	d14c      	bne.n	801f1ae <_printf_i+0x1fe>
 801f114:	f04f 30ff 	mov.w	r0, #4294967295
 801f118:	b004      	add	sp, #16
 801f11a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f11e:	4835      	ldr	r0, [pc, #212]	; (801f1f4 <_printf_i+0x244>)
 801f120:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801f124:	6823      	ldr	r3, [r4, #0]
 801f126:	680e      	ldr	r6, [r1, #0]
 801f128:	061f      	lsls	r7, r3, #24
 801f12a:	f856 5b04 	ldr.w	r5, [r6], #4
 801f12e:	600e      	str	r6, [r1, #0]
 801f130:	d514      	bpl.n	801f15c <_printf_i+0x1ac>
 801f132:	07d9      	lsls	r1, r3, #31
 801f134:	bf44      	itt	mi
 801f136:	f043 0320 	orrmi.w	r3, r3, #32
 801f13a:	6023      	strmi	r3, [r4, #0]
 801f13c:	b91d      	cbnz	r5, 801f146 <_printf_i+0x196>
 801f13e:	6823      	ldr	r3, [r4, #0]
 801f140:	f023 0320 	bic.w	r3, r3, #32
 801f144:	6023      	str	r3, [r4, #0]
 801f146:	2310      	movs	r3, #16
 801f148:	e7b0      	b.n	801f0ac <_printf_i+0xfc>
 801f14a:	6823      	ldr	r3, [r4, #0]
 801f14c:	f043 0320 	orr.w	r3, r3, #32
 801f150:	6023      	str	r3, [r4, #0]
 801f152:	2378      	movs	r3, #120	; 0x78
 801f154:	4828      	ldr	r0, [pc, #160]	; (801f1f8 <_printf_i+0x248>)
 801f156:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801f15a:	e7e3      	b.n	801f124 <_printf_i+0x174>
 801f15c:	065e      	lsls	r6, r3, #25
 801f15e:	bf48      	it	mi
 801f160:	b2ad      	uxthmi	r5, r5
 801f162:	e7e6      	b.n	801f132 <_printf_i+0x182>
 801f164:	4616      	mov	r6, r2
 801f166:	e7bb      	b.n	801f0e0 <_printf_i+0x130>
 801f168:	680b      	ldr	r3, [r1, #0]
 801f16a:	6826      	ldr	r6, [r4, #0]
 801f16c:	6960      	ldr	r0, [r4, #20]
 801f16e:	1d1d      	adds	r5, r3, #4
 801f170:	600d      	str	r5, [r1, #0]
 801f172:	0635      	lsls	r5, r6, #24
 801f174:	681b      	ldr	r3, [r3, #0]
 801f176:	d501      	bpl.n	801f17c <_printf_i+0x1cc>
 801f178:	6018      	str	r0, [r3, #0]
 801f17a:	e002      	b.n	801f182 <_printf_i+0x1d2>
 801f17c:	0671      	lsls	r1, r6, #25
 801f17e:	d5fb      	bpl.n	801f178 <_printf_i+0x1c8>
 801f180:	8018      	strh	r0, [r3, #0]
 801f182:	2300      	movs	r3, #0
 801f184:	6123      	str	r3, [r4, #16]
 801f186:	4616      	mov	r6, r2
 801f188:	e7ba      	b.n	801f100 <_printf_i+0x150>
 801f18a:	680b      	ldr	r3, [r1, #0]
 801f18c:	1d1a      	adds	r2, r3, #4
 801f18e:	600a      	str	r2, [r1, #0]
 801f190:	681e      	ldr	r6, [r3, #0]
 801f192:	6862      	ldr	r2, [r4, #4]
 801f194:	2100      	movs	r1, #0
 801f196:	4630      	mov	r0, r6
 801f198:	f7e1 f8ba 	bl	8000310 <memchr>
 801f19c:	b108      	cbz	r0, 801f1a2 <_printf_i+0x1f2>
 801f19e:	1b80      	subs	r0, r0, r6
 801f1a0:	6060      	str	r0, [r4, #4]
 801f1a2:	6863      	ldr	r3, [r4, #4]
 801f1a4:	6123      	str	r3, [r4, #16]
 801f1a6:	2300      	movs	r3, #0
 801f1a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801f1ac:	e7a8      	b.n	801f100 <_printf_i+0x150>
 801f1ae:	6923      	ldr	r3, [r4, #16]
 801f1b0:	4632      	mov	r2, r6
 801f1b2:	4649      	mov	r1, r9
 801f1b4:	4640      	mov	r0, r8
 801f1b6:	47d0      	blx	sl
 801f1b8:	3001      	adds	r0, #1
 801f1ba:	d0ab      	beq.n	801f114 <_printf_i+0x164>
 801f1bc:	6823      	ldr	r3, [r4, #0]
 801f1be:	079b      	lsls	r3, r3, #30
 801f1c0:	d413      	bmi.n	801f1ea <_printf_i+0x23a>
 801f1c2:	68e0      	ldr	r0, [r4, #12]
 801f1c4:	9b03      	ldr	r3, [sp, #12]
 801f1c6:	4298      	cmp	r0, r3
 801f1c8:	bfb8      	it	lt
 801f1ca:	4618      	movlt	r0, r3
 801f1cc:	e7a4      	b.n	801f118 <_printf_i+0x168>
 801f1ce:	2301      	movs	r3, #1
 801f1d0:	4632      	mov	r2, r6
 801f1d2:	4649      	mov	r1, r9
 801f1d4:	4640      	mov	r0, r8
 801f1d6:	47d0      	blx	sl
 801f1d8:	3001      	adds	r0, #1
 801f1da:	d09b      	beq.n	801f114 <_printf_i+0x164>
 801f1dc:	3501      	adds	r5, #1
 801f1de:	68e3      	ldr	r3, [r4, #12]
 801f1e0:	9903      	ldr	r1, [sp, #12]
 801f1e2:	1a5b      	subs	r3, r3, r1
 801f1e4:	42ab      	cmp	r3, r5
 801f1e6:	dcf2      	bgt.n	801f1ce <_printf_i+0x21e>
 801f1e8:	e7eb      	b.n	801f1c2 <_printf_i+0x212>
 801f1ea:	2500      	movs	r5, #0
 801f1ec:	f104 0619 	add.w	r6, r4, #25
 801f1f0:	e7f5      	b.n	801f1de <_printf_i+0x22e>
 801f1f2:	bf00      	nop
 801f1f4:	080272c6 	.word	0x080272c6
 801f1f8:	080272d7 	.word	0x080272d7

0801f1fc <_scanf_float>:
 801f1fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f200:	b087      	sub	sp, #28
 801f202:	4617      	mov	r7, r2
 801f204:	9303      	str	r3, [sp, #12]
 801f206:	688b      	ldr	r3, [r1, #8]
 801f208:	1e5a      	subs	r2, r3, #1
 801f20a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801f20e:	bf83      	ittte	hi
 801f210:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801f214:	195b      	addhi	r3, r3, r5
 801f216:	9302      	strhi	r3, [sp, #8]
 801f218:	2300      	movls	r3, #0
 801f21a:	bf86      	itte	hi
 801f21c:	f240 135d 	movwhi	r3, #349	; 0x15d
 801f220:	608b      	strhi	r3, [r1, #8]
 801f222:	9302      	strls	r3, [sp, #8]
 801f224:	680b      	ldr	r3, [r1, #0]
 801f226:	468b      	mov	fp, r1
 801f228:	2500      	movs	r5, #0
 801f22a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801f22e:	f84b 3b1c 	str.w	r3, [fp], #28
 801f232:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801f236:	4680      	mov	r8, r0
 801f238:	460c      	mov	r4, r1
 801f23a:	465e      	mov	r6, fp
 801f23c:	46aa      	mov	sl, r5
 801f23e:	46a9      	mov	r9, r5
 801f240:	9501      	str	r5, [sp, #4]
 801f242:	68a2      	ldr	r2, [r4, #8]
 801f244:	b152      	cbz	r2, 801f25c <_scanf_float+0x60>
 801f246:	683b      	ldr	r3, [r7, #0]
 801f248:	781b      	ldrb	r3, [r3, #0]
 801f24a:	2b4e      	cmp	r3, #78	; 0x4e
 801f24c:	d864      	bhi.n	801f318 <_scanf_float+0x11c>
 801f24e:	2b40      	cmp	r3, #64	; 0x40
 801f250:	d83c      	bhi.n	801f2cc <_scanf_float+0xd0>
 801f252:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 801f256:	b2c8      	uxtb	r0, r1
 801f258:	280e      	cmp	r0, #14
 801f25a:	d93a      	bls.n	801f2d2 <_scanf_float+0xd6>
 801f25c:	f1b9 0f00 	cmp.w	r9, #0
 801f260:	d003      	beq.n	801f26a <_scanf_float+0x6e>
 801f262:	6823      	ldr	r3, [r4, #0]
 801f264:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801f268:	6023      	str	r3, [r4, #0]
 801f26a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801f26e:	f1ba 0f01 	cmp.w	sl, #1
 801f272:	f200 8113 	bhi.w	801f49c <_scanf_float+0x2a0>
 801f276:	455e      	cmp	r6, fp
 801f278:	f200 8105 	bhi.w	801f486 <_scanf_float+0x28a>
 801f27c:	2501      	movs	r5, #1
 801f27e:	4628      	mov	r0, r5
 801f280:	b007      	add	sp, #28
 801f282:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f286:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 801f28a:	2a0d      	cmp	r2, #13
 801f28c:	d8e6      	bhi.n	801f25c <_scanf_float+0x60>
 801f28e:	a101      	add	r1, pc, #4	; (adr r1, 801f294 <_scanf_float+0x98>)
 801f290:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801f294:	0801f3d3 	.word	0x0801f3d3
 801f298:	0801f25d 	.word	0x0801f25d
 801f29c:	0801f25d 	.word	0x0801f25d
 801f2a0:	0801f25d 	.word	0x0801f25d
 801f2a4:	0801f433 	.word	0x0801f433
 801f2a8:	0801f40b 	.word	0x0801f40b
 801f2ac:	0801f25d 	.word	0x0801f25d
 801f2b0:	0801f25d 	.word	0x0801f25d
 801f2b4:	0801f3e1 	.word	0x0801f3e1
 801f2b8:	0801f25d 	.word	0x0801f25d
 801f2bc:	0801f25d 	.word	0x0801f25d
 801f2c0:	0801f25d 	.word	0x0801f25d
 801f2c4:	0801f25d 	.word	0x0801f25d
 801f2c8:	0801f399 	.word	0x0801f399
 801f2cc:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 801f2d0:	e7db      	b.n	801f28a <_scanf_float+0x8e>
 801f2d2:	290e      	cmp	r1, #14
 801f2d4:	d8c2      	bhi.n	801f25c <_scanf_float+0x60>
 801f2d6:	a001      	add	r0, pc, #4	; (adr r0, 801f2dc <_scanf_float+0xe0>)
 801f2d8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801f2dc:	0801f38b 	.word	0x0801f38b
 801f2e0:	0801f25d 	.word	0x0801f25d
 801f2e4:	0801f38b 	.word	0x0801f38b
 801f2e8:	0801f41f 	.word	0x0801f41f
 801f2ec:	0801f25d 	.word	0x0801f25d
 801f2f0:	0801f339 	.word	0x0801f339
 801f2f4:	0801f375 	.word	0x0801f375
 801f2f8:	0801f375 	.word	0x0801f375
 801f2fc:	0801f375 	.word	0x0801f375
 801f300:	0801f375 	.word	0x0801f375
 801f304:	0801f375 	.word	0x0801f375
 801f308:	0801f375 	.word	0x0801f375
 801f30c:	0801f375 	.word	0x0801f375
 801f310:	0801f375 	.word	0x0801f375
 801f314:	0801f375 	.word	0x0801f375
 801f318:	2b6e      	cmp	r3, #110	; 0x6e
 801f31a:	d809      	bhi.n	801f330 <_scanf_float+0x134>
 801f31c:	2b60      	cmp	r3, #96	; 0x60
 801f31e:	d8b2      	bhi.n	801f286 <_scanf_float+0x8a>
 801f320:	2b54      	cmp	r3, #84	; 0x54
 801f322:	d077      	beq.n	801f414 <_scanf_float+0x218>
 801f324:	2b59      	cmp	r3, #89	; 0x59
 801f326:	d199      	bne.n	801f25c <_scanf_float+0x60>
 801f328:	2d07      	cmp	r5, #7
 801f32a:	d197      	bne.n	801f25c <_scanf_float+0x60>
 801f32c:	2508      	movs	r5, #8
 801f32e:	e029      	b.n	801f384 <_scanf_float+0x188>
 801f330:	2b74      	cmp	r3, #116	; 0x74
 801f332:	d06f      	beq.n	801f414 <_scanf_float+0x218>
 801f334:	2b79      	cmp	r3, #121	; 0x79
 801f336:	e7f6      	b.n	801f326 <_scanf_float+0x12a>
 801f338:	6821      	ldr	r1, [r4, #0]
 801f33a:	05c8      	lsls	r0, r1, #23
 801f33c:	d51a      	bpl.n	801f374 <_scanf_float+0x178>
 801f33e:	9b02      	ldr	r3, [sp, #8]
 801f340:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 801f344:	6021      	str	r1, [r4, #0]
 801f346:	f109 0901 	add.w	r9, r9, #1
 801f34a:	b11b      	cbz	r3, 801f354 <_scanf_float+0x158>
 801f34c:	3b01      	subs	r3, #1
 801f34e:	3201      	adds	r2, #1
 801f350:	9302      	str	r3, [sp, #8]
 801f352:	60a2      	str	r2, [r4, #8]
 801f354:	68a3      	ldr	r3, [r4, #8]
 801f356:	3b01      	subs	r3, #1
 801f358:	60a3      	str	r3, [r4, #8]
 801f35a:	6923      	ldr	r3, [r4, #16]
 801f35c:	3301      	adds	r3, #1
 801f35e:	6123      	str	r3, [r4, #16]
 801f360:	687b      	ldr	r3, [r7, #4]
 801f362:	3b01      	subs	r3, #1
 801f364:	2b00      	cmp	r3, #0
 801f366:	607b      	str	r3, [r7, #4]
 801f368:	f340 8084 	ble.w	801f474 <_scanf_float+0x278>
 801f36c:	683b      	ldr	r3, [r7, #0]
 801f36e:	3301      	adds	r3, #1
 801f370:	603b      	str	r3, [r7, #0]
 801f372:	e766      	b.n	801f242 <_scanf_float+0x46>
 801f374:	eb1a 0f05 	cmn.w	sl, r5
 801f378:	f47f af70 	bne.w	801f25c <_scanf_float+0x60>
 801f37c:	6822      	ldr	r2, [r4, #0]
 801f37e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 801f382:	6022      	str	r2, [r4, #0]
 801f384:	f806 3b01 	strb.w	r3, [r6], #1
 801f388:	e7e4      	b.n	801f354 <_scanf_float+0x158>
 801f38a:	6822      	ldr	r2, [r4, #0]
 801f38c:	0610      	lsls	r0, r2, #24
 801f38e:	f57f af65 	bpl.w	801f25c <_scanf_float+0x60>
 801f392:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801f396:	e7f4      	b.n	801f382 <_scanf_float+0x186>
 801f398:	f1ba 0f00 	cmp.w	sl, #0
 801f39c:	d10e      	bne.n	801f3bc <_scanf_float+0x1c0>
 801f39e:	f1b9 0f00 	cmp.w	r9, #0
 801f3a2:	d10e      	bne.n	801f3c2 <_scanf_float+0x1c6>
 801f3a4:	6822      	ldr	r2, [r4, #0]
 801f3a6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801f3aa:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801f3ae:	d108      	bne.n	801f3c2 <_scanf_float+0x1c6>
 801f3b0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801f3b4:	6022      	str	r2, [r4, #0]
 801f3b6:	f04f 0a01 	mov.w	sl, #1
 801f3ba:	e7e3      	b.n	801f384 <_scanf_float+0x188>
 801f3bc:	f1ba 0f02 	cmp.w	sl, #2
 801f3c0:	d055      	beq.n	801f46e <_scanf_float+0x272>
 801f3c2:	2d01      	cmp	r5, #1
 801f3c4:	d002      	beq.n	801f3cc <_scanf_float+0x1d0>
 801f3c6:	2d04      	cmp	r5, #4
 801f3c8:	f47f af48 	bne.w	801f25c <_scanf_float+0x60>
 801f3cc:	3501      	adds	r5, #1
 801f3ce:	b2ed      	uxtb	r5, r5
 801f3d0:	e7d8      	b.n	801f384 <_scanf_float+0x188>
 801f3d2:	f1ba 0f01 	cmp.w	sl, #1
 801f3d6:	f47f af41 	bne.w	801f25c <_scanf_float+0x60>
 801f3da:	f04f 0a02 	mov.w	sl, #2
 801f3de:	e7d1      	b.n	801f384 <_scanf_float+0x188>
 801f3e0:	b97d      	cbnz	r5, 801f402 <_scanf_float+0x206>
 801f3e2:	f1b9 0f00 	cmp.w	r9, #0
 801f3e6:	f47f af3c 	bne.w	801f262 <_scanf_float+0x66>
 801f3ea:	6822      	ldr	r2, [r4, #0]
 801f3ec:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801f3f0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801f3f4:	f47f af39 	bne.w	801f26a <_scanf_float+0x6e>
 801f3f8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801f3fc:	6022      	str	r2, [r4, #0]
 801f3fe:	2501      	movs	r5, #1
 801f400:	e7c0      	b.n	801f384 <_scanf_float+0x188>
 801f402:	2d03      	cmp	r5, #3
 801f404:	d0e2      	beq.n	801f3cc <_scanf_float+0x1d0>
 801f406:	2d05      	cmp	r5, #5
 801f408:	e7de      	b.n	801f3c8 <_scanf_float+0x1cc>
 801f40a:	2d02      	cmp	r5, #2
 801f40c:	f47f af26 	bne.w	801f25c <_scanf_float+0x60>
 801f410:	2503      	movs	r5, #3
 801f412:	e7b7      	b.n	801f384 <_scanf_float+0x188>
 801f414:	2d06      	cmp	r5, #6
 801f416:	f47f af21 	bne.w	801f25c <_scanf_float+0x60>
 801f41a:	2507      	movs	r5, #7
 801f41c:	e7b2      	b.n	801f384 <_scanf_float+0x188>
 801f41e:	6822      	ldr	r2, [r4, #0]
 801f420:	0591      	lsls	r1, r2, #22
 801f422:	f57f af1b 	bpl.w	801f25c <_scanf_float+0x60>
 801f426:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 801f42a:	6022      	str	r2, [r4, #0]
 801f42c:	f8cd 9004 	str.w	r9, [sp, #4]
 801f430:	e7a8      	b.n	801f384 <_scanf_float+0x188>
 801f432:	6822      	ldr	r2, [r4, #0]
 801f434:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 801f438:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 801f43c:	d006      	beq.n	801f44c <_scanf_float+0x250>
 801f43e:	0550      	lsls	r0, r2, #21
 801f440:	f57f af0c 	bpl.w	801f25c <_scanf_float+0x60>
 801f444:	f1b9 0f00 	cmp.w	r9, #0
 801f448:	f43f af0f 	beq.w	801f26a <_scanf_float+0x6e>
 801f44c:	0591      	lsls	r1, r2, #22
 801f44e:	bf58      	it	pl
 801f450:	9901      	ldrpl	r1, [sp, #4]
 801f452:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801f456:	bf58      	it	pl
 801f458:	eba9 0101 	subpl.w	r1, r9, r1
 801f45c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 801f460:	bf58      	it	pl
 801f462:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801f466:	6022      	str	r2, [r4, #0]
 801f468:	f04f 0900 	mov.w	r9, #0
 801f46c:	e78a      	b.n	801f384 <_scanf_float+0x188>
 801f46e:	f04f 0a03 	mov.w	sl, #3
 801f472:	e787      	b.n	801f384 <_scanf_float+0x188>
 801f474:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801f478:	4639      	mov	r1, r7
 801f47a:	4640      	mov	r0, r8
 801f47c:	4798      	blx	r3
 801f47e:	2800      	cmp	r0, #0
 801f480:	f43f aedf 	beq.w	801f242 <_scanf_float+0x46>
 801f484:	e6ea      	b.n	801f25c <_scanf_float+0x60>
 801f486:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801f48a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801f48e:	463a      	mov	r2, r7
 801f490:	4640      	mov	r0, r8
 801f492:	4798      	blx	r3
 801f494:	6923      	ldr	r3, [r4, #16]
 801f496:	3b01      	subs	r3, #1
 801f498:	6123      	str	r3, [r4, #16]
 801f49a:	e6ec      	b.n	801f276 <_scanf_float+0x7a>
 801f49c:	1e6b      	subs	r3, r5, #1
 801f49e:	2b06      	cmp	r3, #6
 801f4a0:	d825      	bhi.n	801f4ee <_scanf_float+0x2f2>
 801f4a2:	2d02      	cmp	r5, #2
 801f4a4:	d836      	bhi.n	801f514 <_scanf_float+0x318>
 801f4a6:	455e      	cmp	r6, fp
 801f4a8:	f67f aee8 	bls.w	801f27c <_scanf_float+0x80>
 801f4ac:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801f4b0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801f4b4:	463a      	mov	r2, r7
 801f4b6:	4640      	mov	r0, r8
 801f4b8:	4798      	blx	r3
 801f4ba:	6923      	ldr	r3, [r4, #16]
 801f4bc:	3b01      	subs	r3, #1
 801f4be:	6123      	str	r3, [r4, #16]
 801f4c0:	e7f1      	b.n	801f4a6 <_scanf_float+0x2aa>
 801f4c2:	9802      	ldr	r0, [sp, #8]
 801f4c4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801f4c8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 801f4cc:	9002      	str	r0, [sp, #8]
 801f4ce:	463a      	mov	r2, r7
 801f4d0:	4640      	mov	r0, r8
 801f4d2:	4798      	blx	r3
 801f4d4:	6923      	ldr	r3, [r4, #16]
 801f4d6:	3b01      	subs	r3, #1
 801f4d8:	6123      	str	r3, [r4, #16]
 801f4da:	f10a 3aff 	add.w	sl, sl, #4294967295
 801f4de:	fa5f fa8a 	uxtb.w	sl, sl
 801f4e2:	f1ba 0f02 	cmp.w	sl, #2
 801f4e6:	d1ec      	bne.n	801f4c2 <_scanf_float+0x2c6>
 801f4e8:	3d03      	subs	r5, #3
 801f4ea:	b2ed      	uxtb	r5, r5
 801f4ec:	1b76      	subs	r6, r6, r5
 801f4ee:	6823      	ldr	r3, [r4, #0]
 801f4f0:	05da      	lsls	r2, r3, #23
 801f4f2:	d52f      	bpl.n	801f554 <_scanf_float+0x358>
 801f4f4:	055b      	lsls	r3, r3, #21
 801f4f6:	d510      	bpl.n	801f51a <_scanf_float+0x31e>
 801f4f8:	455e      	cmp	r6, fp
 801f4fa:	f67f aebf 	bls.w	801f27c <_scanf_float+0x80>
 801f4fe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801f502:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801f506:	463a      	mov	r2, r7
 801f508:	4640      	mov	r0, r8
 801f50a:	4798      	blx	r3
 801f50c:	6923      	ldr	r3, [r4, #16]
 801f50e:	3b01      	subs	r3, #1
 801f510:	6123      	str	r3, [r4, #16]
 801f512:	e7f1      	b.n	801f4f8 <_scanf_float+0x2fc>
 801f514:	46aa      	mov	sl, r5
 801f516:	9602      	str	r6, [sp, #8]
 801f518:	e7df      	b.n	801f4da <_scanf_float+0x2de>
 801f51a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801f51e:	6923      	ldr	r3, [r4, #16]
 801f520:	2965      	cmp	r1, #101	; 0x65
 801f522:	f103 33ff 	add.w	r3, r3, #4294967295
 801f526:	f106 35ff 	add.w	r5, r6, #4294967295
 801f52a:	6123      	str	r3, [r4, #16]
 801f52c:	d00c      	beq.n	801f548 <_scanf_float+0x34c>
 801f52e:	2945      	cmp	r1, #69	; 0x45
 801f530:	d00a      	beq.n	801f548 <_scanf_float+0x34c>
 801f532:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801f536:	463a      	mov	r2, r7
 801f538:	4640      	mov	r0, r8
 801f53a:	4798      	blx	r3
 801f53c:	6923      	ldr	r3, [r4, #16]
 801f53e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801f542:	3b01      	subs	r3, #1
 801f544:	1eb5      	subs	r5, r6, #2
 801f546:	6123      	str	r3, [r4, #16]
 801f548:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801f54c:	463a      	mov	r2, r7
 801f54e:	4640      	mov	r0, r8
 801f550:	4798      	blx	r3
 801f552:	462e      	mov	r6, r5
 801f554:	6825      	ldr	r5, [r4, #0]
 801f556:	f015 0510 	ands.w	r5, r5, #16
 801f55a:	d14d      	bne.n	801f5f8 <_scanf_float+0x3fc>
 801f55c:	7035      	strb	r5, [r6, #0]
 801f55e:	6823      	ldr	r3, [r4, #0]
 801f560:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801f564:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801f568:	d11a      	bne.n	801f5a0 <_scanf_float+0x3a4>
 801f56a:	9b01      	ldr	r3, [sp, #4]
 801f56c:	454b      	cmp	r3, r9
 801f56e:	eba3 0209 	sub.w	r2, r3, r9
 801f572:	d122      	bne.n	801f5ba <_scanf_float+0x3be>
 801f574:	2200      	movs	r2, #0
 801f576:	4659      	mov	r1, fp
 801f578:	4640      	mov	r0, r8
 801f57a:	f000 fec3 	bl	8020304 <_strtod_r>
 801f57e:	9b03      	ldr	r3, [sp, #12]
 801f580:	6821      	ldr	r1, [r4, #0]
 801f582:	681b      	ldr	r3, [r3, #0]
 801f584:	f011 0f02 	tst.w	r1, #2
 801f588:	f103 0204 	add.w	r2, r3, #4
 801f58c:	d020      	beq.n	801f5d0 <_scanf_float+0x3d4>
 801f58e:	9903      	ldr	r1, [sp, #12]
 801f590:	600a      	str	r2, [r1, #0]
 801f592:	681b      	ldr	r3, [r3, #0]
 801f594:	ed83 0b00 	vstr	d0, [r3]
 801f598:	68e3      	ldr	r3, [r4, #12]
 801f59a:	3301      	adds	r3, #1
 801f59c:	60e3      	str	r3, [r4, #12]
 801f59e:	e66e      	b.n	801f27e <_scanf_float+0x82>
 801f5a0:	9b04      	ldr	r3, [sp, #16]
 801f5a2:	2b00      	cmp	r3, #0
 801f5a4:	d0e6      	beq.n	801f574 <_scanf_float+0x378>
 801f5a6:	9905      	ldr	r1, [sp, #20]
 801f5a8:	230a      	movs	r3, #10
 801f5aa:	462a      	mov	r2, r5
 801f5ac:	3101      	adds	r1, #1
 801f5ae:	4640      	mov	r0, r8
 801f5b0:	f000 ff3e 	bl	8020430 <_strtol_r>
 801f5b4:	9b04      	ldr	r3, [sp, #16]
 801f5b6:	9e05      	ldr	r6, [sp, #20]
 801f5b8:	1ac2      	subs	r2, r0, r3
 801f5ba:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801f5be:	429e      	cmp	r6, r3
 801f5c0:	bf28      	it	cs
 801f5c2:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 801f5c6:	490d      	ldr	r1, [pc, #52]	; (801f5fc <_scanf_float+0x400>)
 801f5c8:	4630      	mov	r0, r6
 801f5ca:	f000 f879 	bl	801f6c0 <siprintf>
 801f5ce:	e7d1      	b.n	801f574 <_scanf_float+0x378>
 801f5d0:	f011 0f04 	tst.w	r1, #4
 801f5d4:	9903      	ldr	r1, [sp, #12]
 801f5d6:	600a      	str	r2, [r1, #0]
 801f5d8:	d1db      	bne.n	801f592 <_scanf_float+0x396>
 801f5da:	eeb4 0b40 	vcmp.f64	d0, d0
 801f5de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f5e2:	681e      	ldr	r6, [r3, #0]
 801f5e4:	d705      	bvc.n	801f5f2 <_scanf_float+0x3f6>
 801f5e6:	4806      	ldr	r0, [pc, #24]	; (801f600 <_scanf_float+0x404>)
 801f5e8:	f000 f864 	bl	801f6b4 <nanf>
 801f5ec:	ed86 0a00 	vstr	s0, [r6]
 801f5f0:	e7d2      	b.n	801f598 <_scanf_float+0x39c>
 801f5f2:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801f5f6:	e7f9      	b.n	801f5ec <_scanf_float+0x3f0>
 801f5f8:	2500      	movs	r5, #0
 801f5fa:	e640      	b.n	801f27e <_scanf_float+0x82>
 801f5fc:	080272e8 	.word	0x080272e8
 801f600:	080273f3 	.word	0x080273f3

0801f604 <iprintf>:
 801f604:	b40f      	push	{r0, r1, r2, r3}
 801f606:	4b0a      	ldr	r3, [pc, #40]	; (801f630 <iprintf+0x2c>)
 801f608:	b513      	push	{r0, r1, r4, lr}
 801f60a:	681c      	ldr	r4, [r3, #0]
 801f60c:	b124      	cbz	r4, 801f618 <iprintf+0x14>
 801f60e:	69a3      	ldr	r3, [r4, #24]
 801f610:	b913      	cbnz	r3, 801f618 <iprintf+0x14>
 801f612:	4620      	mov	r0, r4
 801f614:	f001 fd98 	bl	8021148 <__sinit>
 801f618:	ab05      	add	r3, sp, #20
 801f61a:	9a04      	ldr	r2, [sp, #16]
 801f61c:	68a1      	ldr	r1, [r4, #8]
 801f61e:	9301      	str	r3, [sp, #4]
 801f620:	4620      	mov	r0, r4
 801f622:	f003 f8cd 	bl	80227c0 <_vfiprintf_r>
 801f626:	b002      	add	sp, #8
 801f628:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f62c:	b004      	add	sp, #16
 801f62e:	4770      	bx	lr
 801f630:	24000304 	.word	0x24000304

0801f634 <rand>:
 801f634:	4b17      	ldr	r3, [pc, #92]	; (801f694 <rand+0x60>)
 801f636:	b510      	push	{r4, lr}
 801f638:	681c      	ldr	r4, [r3, #0]
 801f63a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801f63c:	b9b3      	cbnz	r3, 801f66c <rand+0x38>
 801f63e:	2018      	movs	r0, #24
 801f640:	f002 f9a8 	bl	8021994 <malloc>
 801f644:	63a0      	str	r0, [r4, #56]	; 0x38
 801f646:	b928      	cbnz	r0, 801f654 <rand+0x20>
 801f648:	4602      	mov	r2, r0
 801f64a:	4b13      	ldr	r3, [pc, #76]	; (801f698 <rand+0x64>)
 801f64c:	4813      	ldr	r0, [pc, #76]	; (801f69c <rand+0x68>)
 801f64e:	214e      	movs	r1, #78	; 0x4e
 801f650:	f000 fef0 	bl	8020434 <__assert_func>
 801f654:	4a12      	ldr	r2, [pc, #72]	; (801f6a0 <rand+0x6c>)
 801f656:	4b13      	ldr	r3, [pc, #76]	; (801f6a4 <rand+0x70>)
 801f658:	e9c0 2300 	strd	r2, r3, [r0]
 801f65c:	4b12      	ldr	r3, [pc, #72]	; (801f6a8 <rand+0x74>)
 801f65e:	6083      	str	r3, [r0, #8]
 801f660:	230b      	movs	r3, #11
 801f662:	8183      	strh	r3, [r0, #12]
 801f664:	2201      	movs	r2, #1
 801f666:	2300      	movs	r3, #0
 801f668:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801f66c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801f66e:	480f      	ldr	r0, [pc, #60]	; (801f6ac <rand+0x78>)
 801f670:	690a      	ldr	r2, [r1, #16]
 801f672:	694b      	ldr	r3, [r1, #20]
 801f674:	4c0e      	ldr	r4, [pc, #56]	; (801f6b0 <rand+0x7c>)
 801f676:	4350      	muls	r0, r2
 801f678:	fb04 0003 	mla	r0, r4, r3, r0
 801f67c:	fba2 3404 	umull	r3, r4, r2, r4
 801f680:	1c5a      	adds	r2, r3, #1
 801f682:	4404      	add	r4, r0
 801f684:	f144 0000 	adc.w	r0, r4, #0
 801f688:	e9c1 2004 	strd	r2, r0, [r1, #16]
 801f68c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801f690:	bd10      	pop	{r4, pc}
 801f692:	bf00      	nop
 801f694:	24000304 	.word	0x24000304
 801f698:	080272ed 	.word	0x080272ed
 801f69c:	08027304 	.word	0x08027304
 801f6a0:	abcd330e 	.word	0xabcd330e
 801f6a4:	e66d1234 	.word	0xe66d1234
 801f6a8:	0005deec 	.word	0x0005deec
 801f6ac:	5851f42d 	.word	0x5851f42d
 801f6b0:	4c957f2d 	.word	0x4c957f2d

0801f6b4 <nanf>:
 801f6b4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801f6bc <nanf+0x8>
 801f6b8:	4770      	bx	lr
 801f6ba:	bf00      	nop
 801f6bc:	7fc00000 	.word	0x7fc00000

0801f6c0 <siprintf>:
 801f6c0:	b40e      	push	{r1, r2, r3}
 801f6c2:	b500      	push	{lr}
 801f6c4:	b09c      	sub	sp, #112	; 0x70
 801f6c6:	ab1d      	add	r3, sp, #116	; 0x74
 801f6c8:	9002      	str	r0, [sp, #8]
 801f6ca:	9006      	str	r0, [sp, #24]
 801f6cc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801f6d0:	4809      	ldr	r0, [pc, #36]	; (801f6f8 <siprintf+0x38>)
 801f6d2:	9107      	str	r1, [sp, #28]
 801f6d4:	9104      	str	r1, [sp, #16]
 801f6d6:	4909      	ldr	r1, [pc, #36]	; (801f6fc <siprintf+0x3c>)
 801f6d8:	f853 2b04 	ldr.w	r2, [r3], #4
 801f6dc:	9105      	str	r1, [sp, #20]
 801f6de:	6800      	ldr	r0, [r0, #0]
 801f6e0:	9301      	str	r3, [sp, #4]
 801f6e2:	a902      	add	r1, sp, #8
 801f6e4:	f002 ff42 	bl	802256c <_svfiprintf_r>
 801f6e8:	9b02      	ldr	r3, [sp, #8]
 801f6ea:	2200      	movs	r2, #0
 801f6ec:	701a      	strb	r2, [r3, #0]
 801f6ee:	b01c      	add	sp, #112	; 0x70
 801f6f0:	f85d eb04 	ldr.w	lr, [sp], #4
 801f6f4:	b003      	add	sp, #12
 801f6f6:	4770      	bx	lr
 801f6f8:	24000304 	.word	0x24000304
 801f6fc:	ffff0208 	.word	0xffff0208

0801f700 <strncmp>:
 801f700:	b510      	push	{r4, lr}
 801f702:	b16a      	cbz	r2, 801f720 <strncmp+0x20>
 801f704:	3901      	subs	r1, #1
 801f706:	1884      	adds	r4, r0, r2
 801f708:	f810 3b01 	ldrb.w	r3, [r0], #1
 801f70c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801f710:	4293      	cmp	r3, r2
 801f712:	d103      	bne.n	801f71c <strncmp+0x1c>
 801f714:	42a0      	cmp	r0, r4
 801f716:	d001      	beq.n	801f71c <strncmp+0x1c>
 801f718:	2b00      	cmp	r3, #0
 801f71a:	d1f5      	bne.n	801f708 <strncmp+0x8>
 801f71c:	1a98      	subs	r0, r3, r2
 801f71e:	bd10      	pop	{r4, pc}
 801f720:	4610      	mov	r0, r2
 801f722:	e7fc      	b.n	801f71e <strncmp+0x1e>

0801f724 <sulp>:
 801f724:	b570      	push	{r4, r5, r6, lr}
 801f726:	4604      	mov	r4, r0
 801f728:	460d      	mov	r5, r1
 801f72a:	4616      	mov	r6, r2
 801f72c:	ec45 4b10 	vmov	d0, r4, r5
 801f730:	f002 fcb6 	bl	80220a0 <__ulp>
 801f734:	b17e      	cbz	r6, 801f756 <sulp+0x32>
 801f736:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801f73a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801f73e:	2b00      	cmp	r3, #0
 801f740:	dd09      	ble.n	801f756 <sulp+0x32>
 801f742:	051b      	lsls	r3, r3, #20
 801f744:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 801f748:	2000      	movs	r0, #0
 801f74a:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 801f74e:	ec41 0b17 	vmov	d7, r0, r1
 801f752:	ee20 0b07 	vmul.f64	d0, d0, d7
 801f756:	bd70      	pop	{r4, r5, r6, pc}

0801f758 <_strtod_l>:
 801f758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f75c:	ed2d 8b0c 	vpush	{d8-d13}
 801f760:	b09d      	sub	sp, #116	; 0x74
 801f762:	461f      	mov	r7, r3
 801f764:	2300      	movs	r3, #0
 801f766:	9318      	str	r3, [sp, #96]	; 0x60
 801f768:	4ba6      	ldr	r3, [pc, #664]	; (801fa04 <_strtod_l+0x2ac>)
 801f76a:	9213      	str	r2, [sp, #76]	; 0x4c
 801f76c:	681b      	ldr	r3, [r3, #0]
 801f76e:	9308      	str	r3, [sp, #32]
 801f770:	4604      	mov	r4, r0
 801f772:	4618      	mov	r0, r3
 801f774:	468a      	mov	sl, r1
 801f776:	f7e0 fdbd 	bl	80002f4 <strlen>
 801f77a:	f04f 0800 	mov.w	r8, #0
 801f77e:	4605      	mov	r5, r0
 801f780:	f04f 0900 	mov.w	r9, #0
 801f784:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 801f788:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801f78a:	781a      	ldrb	r2, [r3, #0]
 801f78c:	2a2b      	cmp	r2, #43	; 0x2b
 801f78e:	d04d      	beq.n	801f82c <_strtod_l+0xd4>
 801f790:	d83a      	bhi.n	801f808 <_strtod_l+0xb0>
 801f792:	2a0d      	cmp	r2, #13
 801f794:	d833      	bhi.n	801f7fe <_strtod_l+0xa6>
 801f796:	2a08      	cmp	r2, #8
 801f798:	d833      	bhi.n	801f802 <_strtod_l+0xaa>
 801f79a:	2a00      	cmp	r2, #0
 801f79c:	d03d      	beq.n	801f81a <_strtod_l+0xc2>
 801f79e:	2300      	movs	r3, #0
 801f7a0:	930b      	str	r3, [sp, #44]	; 0x2c
 801f7a2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 801f7a4:	7833      	ldrb	r3, [r6, #0]
 801f7a6:	2b30      	cmp	r3, #48	; 0x30
 801f7a8:	f040 80b6 	bne.w	801f918 <_strtod_l+0x1c0>
 801f7ac:	7873      	ldrb	r3, [r6, #1]
 801f7ae:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801f7b2:	2b58      	cmp	r3, #88	; 0x58
 801f7b4:	d16d      	bne.n	801f892 <_strtod_l+0x13a>
 801f7b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f7b8:	9301      	str	r3, [sp, #4]
 801f7ba:	ab18      	add	r3, sp, #96	; 0x60
 801f7bc:	9702      	str	r7, [sp, #8]
 801f7be:	9300      	str	r3, [sp, #0]
 801f7c0:	4a91      	ldr	r2, [pc, #580]	; (801fa08 <_strtod_l+0x2b0>)
 801f7c2:	ab19      	add	r3, sp, #100	; 0x64
 801f7c4:	a917      	add	r1, sp, #92	; 0x5c
 801f7c6:	4620      	mov	r0, r4
 801f7c8:	f001 fdd4 	bl	8021374 <__gethex>
 801f7cc:	f010 0507 	ands.w	r5, r0, #7
 801f7d0:	4607      	mov	r7, r0
 801f7d2:	d005      	beq.n	801f7e0 <_strtod_l+0x88>
 801f7d4:	2d06      	cmp	r5, #6
 801f7d6:	d12b      	bne.n	801f830 <_strtod_l+0xd8>
 801f7d8:	3601      	adds	r6, #1
 801f7da:	2300      	movs	r3, #0
 801f7dc:	9617      	str	r6, [sp, #92]	; 0x5c
 801f7de:	930b      	str	r3, [sp, #44]	; 0x2c
 801f7e0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801f7e2:	2b00      	cmp	r3, #0
 801f7e4:	f040 856e 	bne.w	80202c4 <_strtod_l+0xb6c>
 801f7e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f7ea:	b1e3      	cbz	r3, 801f826 <_strtod_l+0xce>
 801f7ec:	ec49 8b17 	vmov	d7, r8, r9
 801f7f0:	eeb1 0b47 	vneg.f64	d0, d7
 801f7f4:	b01d      	add	sp, #116	; 0x74
 801f7f6:	ecbd 8b0c 	vpop	{d8-d13}
 801f7fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f7fe:	2a20      	cmp	r2, #32
 801f800:	d1cd      	bne.n	801f79e <_strtod_l+0x46>
 801f802:	3301      	adds	r3, #1
 801f804:	9317      	str	r3, [sp, #92]	; 0x5c
 801f806:	e7bf      	b.n	801f788 <_strtod_l+0x30>
 801f808:	2a2d      	cmp	r2, #45	; 0x2d
 801f80a:	d1c8      	bne.n	801f79e <_strtod_l+0x46>
 801f80c:	2201      	movs	r2, #1
 801f80e:	920b      	str	r2, [sp, #44]	; 0x2c
 801f810:	1c5a      	adds	r2, r3, #1
 801f812:	9217      	str	r2, [sp, #92]	; 0x5c
 801f814:	785b      	ldrb	r3, [r3, #1]
 801f816:	2b00      	cmp	r3, #0
 801f818:	d1c3      	bne.n	801f7a2 <_strtod_l+0x4a>
 801f81a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801f81c:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 801f820:	2b00      	cmp	r3, #0
 801f822:	f040 854d 	bne.w	80202c0 <_strtod_l+0xb68>
 801f826:	ec49 8b10 	vmov	d0, r8, r9
 801f82a:	e7e3      	b.n	801f7f4 <_strtod_l+0x9c>
 801f82c:	2200      	movs	r2, #0
 801f82e:	e7ee      	b.n	801f80e <_strtod_l+0xb6>
 801f830:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801f832:	b13a      	cbz	r2, 801f844 <_strtod_l+0xec>
 801f834:	2135      	movs	r1, #53	; 0x35
 801f836:	a81a      	add	r0, sp, #104	; 0x68
 801f838:	f002 fd3e 	bl	80222b8 <__copybits>
 801f83c:	9918      	ldr	r1, [sp, #96]	; 0x60
 801f83e:	4620      	mov	r0, r4
 801f840:	f002 f902 	bl	8021a48 <_Bfree>
 801f844:	3d01      	subs	r5, #1
 801f846:	2d05      	cmp	r5, #5
 801f848:	d807      	bhi.n	801f85a <_strtod_l+0x102>
 801f84a:	e8df f005 	tbb	[pc, r5]
 801f84e:	0b0e      	.short	0x0b0e
 801f850:	030e1d18 	.word	0x030e1d18
 801f854:	f04f 0900 	mov.w	r9, #0
 801f858:	46c8      	mov	r8, r9
 801f85a:	073b      	lsls	r3, r7, #28
 801f85c:	d5c0      	bpl.n	801f7e0 <_strtod_l+0x88>
 801f85e:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 801f862:	e7bd      	b.n	801f7e0 <_strtod_l+0x88>
 801f864:	e9dd 891a 	ldrd	r8, r9, [sp, #104]	; 0x68
 801f868:	e7f7      	b.n	801f85a <_strtod_l+0x102>
 801f86a:	e9dd 831a 	ldrd	r8, r3, [sp, #104]	; 0x68
 801f86e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801f870:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801f874:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801f878:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 801f87c:	e7ed      	b.n	801f85a <_strtod_l+0x102>
 801f87e:	f8df 918c 	ldr.w	r9, [pc, #396]	; 801fa0c <_strtod_l+0x2b4>
 801f882:	f04f 0800 	mov.w	r8, #0
 801f886:	e7e8      	b.n	801f85a <_strtod_l+0x102>
 801f888:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 801f88c:	f04f 38ff 	mov.w	r8, #4294967295
 801f890:	e7e3      	b.n	801f85a <_strtod_l+0x102>
 801f892:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801f894:	1c5a      	adds	r2, r3, #1
 801f896:	9217      	str	r2, [sp, #92]	; 0x5c
 801f898:	785b      	ldrb	r3, [r3, #1]
 801f89a:	2b30      	cmp	r3, #48	; 0x30
 801f89c:	d0f9      	beq.n	801f892 <_strtod_l+0x13a>
 801f89e:	2b00      	cmp	r3, #0
 801f8a0:	d09e      	beq.n	801f7e0 <_strtod_l+0x88>
 801f8a2:	2301      	movs	r3, #1
 801f8a4:	9306      	str	r3, [sp, #24]
 801f8a6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801f8a8:	930c      	str	r3, [sp, #48]	; 0x30
 801f8aa:	2300      	movs	r3, #0
 801f8ac:	9304      	str	r3, [sp, #16]
 801f8ae:	930a      	str	r3, [sp, #40]	; 0x28
 801f8b0:	461e      	mov	r6, r3
 801f8b2:	220a      	movs	r2, #10
 801f8b4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801f8b6:	f890 b000 	ldrb.w	fp, [r0]
 801f8ba:	f1ab 0330 	sub.w	r3, fp, #48	; 0x30
 801f8be:	b2d9      	uxtb	r1, r3
 801f8c0:	2909      	cmp	r1, #9
 801f8c2:	d92b      	bls.n	801f91c <_strtod_l+0x1c4>
 801f8c4:	9908      	ldr	r1, [sp, #32]
 801f8c6:	462a      	mov	r2, r5
 801f8c8:	f7ff ff1a 	bl	801f700 <strncmp>
 801f8cc:	2800      	cmp	r0, #0
 801f8ce:	d035      	beq.n	801f93c <_strtod_l+0x1e4>
 801f8d0:	2000      	movs	r0, #0
 801f8d2:	465a      	mov	r2, fp
 801f8d4:	4633      	mov	r3, r6
 801f8d6:	4683      	mov	fp, r0
 801f8d8:	4601      	mov	r1, r0
 801f8da:	2a65      	cmp	r2, #101	; 0x65
 801f8dc:	d001      	beq.n	801f8e2 <_strtod_l+0x18a>
 801f8de:	2a45      	cmp	r2, #69	; 0x45
 801f8e0:	d118      	bne.n	801f914 <_strtod_l+0x1bc>
 801f8e2:	b91b      	cbnz	r3, 801f8ec <_strtod_l+0x194>
 801f8e4:	9b06      	ldr	r3, [sp, #24]
 801f8e6:	4303      	orrs	r3, r0
 801f8e8:	d097      	beq.n	801f81a <_strtod_l+0xc2>
 801f8ea:	2300      	movs	r3, #0
 801f8ec:	f8dd a05c 	ldr.w	sl, [sp, #92]	; 0x5c
 801f8f0:	f10a 0201 	add.w	r2, sl, #1
 801f8f4:	9217      	str	r2, [sp, #92]	; 0x5c
 801f8f6:	f89a 2001 	ldrb.w	r2, [sl, #1]
 801f8fa:	2a2b      	cmp	r2, #43	; 0x2b
 801f8fc:	d077      	beq.n	801f9ee <_strtod_l+0x296>
 801f8fe:	2a2d      	cmp	r2, #45	; 0x2d
 801f900:	d07d      	beq.n	801f9fe <_strtod_l+0x2a6>
 801f902:	f04f 0e00 	mov.w	lr, #0
 801f906:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 801f90a:	2d09      	cmp	r5, #9
 801f90c:	f240 8084 	bls.w	801fa18 <_strtod_l+0x2c0>
 801f910:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 801f914:	2500      	movs	r5, #0
 801f916:	e09f      	b.n	801fa58 <_strtod_l+0x300>
 801f918:	2300      	movs	r3, #0
 801f91a:	e7c3      	b.n	801f8a4 <_strtod_l+0x14c>
 801f91c:	2e08      	cmp	r6, #8
 801f91e:	bfd5      	itete	le
 801f920:	990a      	ldrle	r1, [sp, #40]	; 0x28
 801f922:	9904      	ldrgt	r1, [sp, #16]
 801f924:	fb02 3301 	mlale	r3, r2, r1, r3
 801f928:	fb02 3301 	mlagt	r3, r2, r1, r3
 801f92c:	f100 0001 	add.w	r0, r0, #1
 801f930:	bfd4      	ite	le
 801f932:	930a      	strle	r3, [sp, #40]	; 0x28
 801f934:	9304      	strgt	r3, [sp, #16]
 801f936:	3601      	adds	r6, #1
 801f938:	9017      	str	r0, [sp, #92]	; 0x5c
 801f93a:	e7bb      	b.n	801f8b4 <_strtod_l+0x15c>
 801f93c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801f93e:	195a      	adds	r2, r3, r5
 801f940:	9217      	str	r2, [sp, #92]	; 0x5c
 801f942:	5d5a      	ldrb	r2, [r3, r5]
 801f944:	b3ae      	cbz	r6, 801f9b2 <_strtod_l+0x25a>
 801f946:	4683      	mov	fp, r0
 801f948:	4633      	mov	r3, r6
 801f94a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 801f94e:	2909      	cmp	r1, #9
 801f950:	d912      	bls.n	801f978 <_strtod_l+0x220>
 801f952:	2101      	movs	r1, #1
 801f954:	e7c1      	b.n	801f8da <_strtod_l+0x182>
 801f956:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801f958:	1c5a      	adds	r2, r3, #1
 801f95a:	9217      	str	r2, [sp, #92]	; 0x5c
 801f95c:	785a      	ldrb	r2, [r3, #1]
 801f95e:	3001      	adds	r0, #1
 801f960:	2a30      	cmp	r2, #48	; 0x30
 801f962:	d0f8      	beq.n	801f956 <_strtod_l+0x1fe>
 801f964:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 801f968:	2b08      	cmp	r3, #8
 801f96a:	f200 84b0 	bhi.w	80202ce <_strtod_l+0xb76>
 801f96e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801f970:	930c      	str	r3, [sp, #48]	; 0x30
 801f972:	4683      	mov	fp, r0
 801f974:	2000      	movs	r0, #0
 801f976:	4603      	mov	r3, r0
 801f978:	3a30      	subs	r2, #48	; 0x30
 801f97a:	f100 0101 	add.w	r1, r0, #1
 801f97e:	d012      	beq.n	801f9a6 <_strtod_l+0x24e>
 801f980:	448b      	add	fp, r1
 801f982:	eb00 0c03 	add.w	ip, r0, r3
 801f986:	4619      	mov	r1, r3
 801f988:	250a      	movs	r5, #10
 801f98a:	4561      	cmp	r1, ip
 801f98c:	d113      	bne.n	801f9b6 <_strtod_l+0x25e>
 801f98e:	1819      	adds	r1, r3, r0
 801f990:	2908      	cmp	r1, #8
 801f992:	f103 0301 	add.w	r3, r3, #1
 801f996:	4403      	add	r3, r0
 801f998:	dc1d      	bgt.n	801f9d6 <_strtod_l+0x27e>
 801f99a:	980a      	ldr	r0, [sp, #40]	; 0x28
 801f99c:	210a      	movs	r1, #10
 801f99e:	fb01 2200 	mla	r2, r1, r0, r2
 801f9a2:	920a      	str	r2, [sp, #40]	; 0x28
 801f9a4:	2100      	movs	r1, #0
 801f9a6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801f9a8:	1c50      	adds	r0, r2, #1
 801f9aa:	9017      	str	r0, [sp, #92]	; 0x5c
 801f9ac:	7852      	ldrb	r2, [r2, #1]
 801f9ae:	4608      	mov	r0, r1
 801f9b0:	e7cb      	b.n	801f94a <_strtod_l+0x1f2>
 801f9b2:	4630      	mov	r0, r6
 801f9b4:	e7d4      	b.n	801f960 <_strtod_l+0x208>
 801f9b6:	2908      	cmp	r1, #8
 801f9b8:	dc04      	bgt.n	801f9c4 <_strtod_l+0x26c>
 801f9ba:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801f9bc:	436f      	muls	r7, r5
 801f9be:	970a      	str	r7, [sp, #40]	; 0x28
 801f9c0:	3101      	adds	r1, #1
 801f9c2:	e7e2      	b.n	801f98a <_strtod_l+0x232>
 801f9c4:	f101 0e01 	add.w	lr, r1, #1
 801f9c8:	f1be 0f10 	cmp.w	lr, #16
 801f9cc:	bfde      	ittt	le
 801f9ce:	9f04      	ldrle	r7, [sp, #16]
 801f9d0:	436f      	mulle	r7, r5
 801f9d2:	9704      	strle	r7, [sp, #16]
 801f9d4:	e7f4      	b.n	801f9c0 <_strtod_l+0x268>
 801f9d6:	2b10      	cmp	r3, #16
 801f9d8:	bfdf      	itttt	le
 801f9da:	9804      	ldrle	r0, [sp, #16]
 801f9dc:	210a      	movle	r1, #10
 801f9de:	fb01 2200 	mlale	r2, r1, r0, r2
 801f9e2:	9204      	strle	r2, [sp, #16]
 801f9e4:	e7de      	b.n	801f9a4 <_strtod_l+0x24c>
 801f9e6:	f04f 0b00 	mov.w	fp, #0
 801f9ea:	2101      	movs	r1, #1
 801f9ec:	e77a      	b.n	801f8e4 <_strtod_l+0x18c>
 801f9ee:	f04f 0e00 	mov.w	lr, #0
 801f9f2:	f10a 0202 	add.w	r2, sl, #2
 801f9f6:	9217      	str	r2, [sp, #92]	; 0x5c
 801f9f8:	f89a 2002 	ldrb.w	r2, [sl, #2]
 801f9fc:	e783      	b.n	801f906 <_strtod_l+0x1ae>
 801f9fe:	f04f 0e01 	mov.w	lr, #1
 801fa02:	e7f6      	b.n	801f9f2 <_strtod_l+0x29a>
 801fa04:	08027540 	.word	0x08027540
 801fa08:	08027364 	.word	0x08027364
 801fa0c:	7ff00000 	.word	0x7ff00000
 801fa10:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801fa12:	1c55      	adds	r5, r2, #1
 801fa14:	9517      	str	r5, [sp, #92]	; 0x5c
 801fa16:	7852      	ldrb	r2, [r2, #1]
 801fa18:	2a30      	cmp	r2, #48	; 0x30
 801fa1a:	d0f9      	beq.n	801fa10 <_strtod_l+0x2b8>
 801fa1c:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 801fa20:	2d08      	cmp	r5, #8
 801fa22:	f63f af77 	bhi.w	801f914 <_strtod_l+0x1bc>
 801fa26:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 801fa2a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801fa2c:	9208      	str	r2, [sp, #32]
 801fa2e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801fa30:	1c55      	adds	r5, r2, #1
 801fa32:	9517      	str	r5, [sp, #92]	; 0x5c
 801fa34:	7852      	ldrb	r2, [r2, #1]
 801fa36:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 801fa3a:	2f09      	cmp	r7, #9
 801fa3c:	d937      	bls.n	801faae <_strtod_l+0x356>
 801fa3e:	9f08      	ldr	r7, [sp, #32]
 801fa40:	1bed      	subs	r5, r5, r7
 801fa42:	2d08      	cmp	r5, #8
 801fa44:	f644 651f 	movw	r5, #19999	; 0x4e1f
 801fa48:	dc02      	bgt.n	801fa50 <_strtod_l+0x2f8>
 801fa4a:	4565      	cmp	r5, ip
 801fa4c:	bfa8      	it	ge
 801fa4e:	4665      	movge	r5, ip
 801fa50:	f1be 0f00 	cmp.w	lr, #0
 801fa54:	d000      	beq.n	801fa58 <_strtod_l+0x300>
 801fa56:	426d      	negs	r5, r5
 801fa58:	2b00      	cmp	r3, #0
 801fa5a:	d14f      	bne.n	801fafc <_strtod_l+0x3a4>
 801fa5c:	9b06      	ldr	r3, [sp, #24]
 801fa5e:	4303      	orrs	r3, r0
 801fa60:	f47f aebe 	bne.w	801f7e0 <_strtod_l+0x88>
 801fa64:	2900      	cmp	r1, #0
 801fa66:	f47f aed8 	bne.w	801f81a <_strtod_l+0xc2>
 801fa6a:	2a69      	cmp	r2, #105	; 0x69
 801fa6c:	d027      	beq.n	801fabe <_strtod_l+0x366>
 801fa6e:	dc24      	bgt.n	801faba <_strtod_l+0x362>
 801fa70:	2a49      	cmp	r2, #73	; 0x49
 801fa72:	d024      	beq.n	801fabe <_strtod_l+0x366>
 801fa74:	2a4e      	cmp	r2, #78	; 0x4e
 801fa76:	f47f aed0 	bne.w	801f81a <_strtod_l+0xc2>
 801fa7a:	499b      	ldr	r1, [pc, #620]	; (801fce8 <_strtod_l+0x590>)
 801fa7c:	a817      	add	r0, sp, #92	; 0x5c
 801fa7e:	f001 fed1 	bl	8021824 <__match>
 801fa82:	2800      	cmp	r0, #0
 801fa84:	f43f aec9 	beq.w	801f81a <_strtod_l+0xc2>
 801fa88:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801fa8a:	781b      	ldrb	r3, [r3, #0]
 801fa8c:	2b28      	cmp	r3, #40	; 0x28
 801fa8e:	d12d      	bne.n	801faec <_strtod_l+0x394>
 801fa90:	4996      	ldr	r1, [pc, #600]	; (801fcec <_strtod_l+0x594>)
 801fa92:	aa1a      	add	r2, sp, #104	; 0x68
 801fa94:	a817      	add	r0, sp, #92	; 0x5c
 801fa96:	f001 fed9 	bl	802184c <__hexnan>
 801fa9a:	2805      	cmp	r0, #5
 801fa9c:	d126      	bne.n	801faec <_strtod_l+0x394>
 801fa9e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801faa0:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 801faa4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 801faa8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 801faac:	e698      	b.n	801f7e0 <_strtod_l+0x88>
 801faae:	250a      	movs	r5, #10
 801fab0:	fb05 250c 	mla	r5, r5, ip, r2
 801fab4:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 801fab8:	e7b9      	b.n	801fa2e <_strtod_l+0x2d6>
 801faba:	2a6e      	cmp	r2, #110	; 0x6e
 801fabc:	e7db      	b.n	801fa76 <_strtod_l+0x31e>
 801fabe:	498c      	ldr	r1, [pc, #560]	; (801fcf0 <_strtod_l+0x598>)
 801fac0:	a817      	add	r0, sp, #92	; 0x5c
 801fac2:	f001 feaf 	bl	8021824 <__match>
 801fac6:	2800      	cmp	r0, #0
 801fac8:	f43f aea7 	beq.w	801f81a <_strtod_l+0xc2>
 801facc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801face:	4989      	ldr	r1, [pc, #548]	; (801fcf4 <_strtod_l+0x59c>)
 801fad0:	3b01      	subs	r3, #1
 801fad2:	a817      	add	r0, sp, #92	; 0x5c
 801fad4:	9317      	str	r3, [sp, #92]	; 0x5c
 801fad6:	f001 fea5 	bl	8021824 <__match>
 801fada:	b910      	cbnz	r0, 801fae2 <_strtod_l+0x38a>
 801fadc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801fade:	3301      	adds	r3, #1
 801fae0:	9317      	str	r3, [sp, #92]	; 0x5c
 801fae2:	f8df 9224 	ldr.w	r9, [pc, #548]	; 801fd08 <_strtod_l+0x5b0>
 801fae6:	f04f 0800 	mov.w	r8, #0
 801faea:	e679      	b.n	801f7e0 <_strtod_l+0x88>
 801faec:	4882      	ldr	r0, [pc, #520]	; (801fcf8 <_strtod_l+0x5a0>)
 801faee:	f002 ff97 	bl	8022a20 <nan>
 801faf2:	ed8d 0b04 	vstr	d0, [sp, #16]
 801faf6:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 801fafa:	e671      	b.n	801f7e0 <_strtod_l+0x88>
 801fafc:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
 801fb00:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801fb04:	eba5 020b 	sub.w	r2, r5, fp
 801fb08:	2e00      	cmp	r6, #0
 801fb0a:	bf08      	it	eq
 801fb0c:	461e      	moveq	r6, r3
 801fb0e:	2b10      	cmp	r3, #16
 801fb10:	ed8d 7b08 	vstr	d7, [sp, #32]
 801fb14:	9206      	str	r2, [sp, #24]
 801fb16:	461a      	mov	r2, r3
 801fb18:	bfa8      	it	ge
 801fb1a:	2210      	movge	r2, #16
 801fb1c:	2b09      	cmp	r3, #9
 801fb1e:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 801fb22:	dd0e      	ble.n	801fb42 <_strtod_l+0x3ea>
 801fb24:	4975      	ldr	r1, [pc, #468]	; (801fcfc <_strtod_l+0x5a4>)
 801fb26:	eddd 7a04 	vldr	s15, [sp, #16]
 801fb2a:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 801fb2e:	ed11 6b12 	vldr	d6, [r1, #-72]	; 0xffffffb8
 801fb32:	ed9d 5b08 	vldr	d5, [sp, #32]
 801fb36:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801fb3a:	eea5 7b06 	vfma.f64	d7, d5, d6
 801fb3e:	ec59 8b17 	vmov	r8, r9, d7
 801fb42:	2b0f      	cmp	r3, #15
 801fb44:	dc37      	bgt.n	801fbb6 <_strtod_l+0x45e>
 801fb46:	9906      	ldr	r1, [sp, #24]
 801fb48:	2900      	cmp	r1, #0
 801fb4a:	f43f ae49 	beq.w	801f7e0 <_strtod_l+0x88>
 801fb4e:	dd23      	ble.n	801fb98 <_strtod_l+0x440>
 801fb50:	2916      	cmp	r1, #22
 801fb52:	dc0b      	bgt.n	801fb6c <_strtod_l+0x414>
 801fb54:	4b69      	ldr	r3, [pc, #420]	; (801fcfc <_strtod_l+0x5a4>)
 801fb56:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 801fb5a:	ed93 7b00 	vldr	d7, [r3]
 801fb5e:	ec49 8b16 	vmov	d6, r8, r9
 801fb62:	ee27 7b06 	vmul.f64	d7, d7, d6
 801fb66:	ec59 8b17 	vmov	r8, r9, d7
 801fb6a:	e639      	b.n	801f7e0 <_strtod_l+0x88>
 801fb6c:	9806      	ldr	r0, [sp, #24]
 801fb6e:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 801fb72:	4281      	cmp	r1, r0
 801fb74:	db1f      	blt.n	801fbb6 <_strtod_l+0x45e>
 801fb76:	4a61      	ldr	r2, [pc, #388]	; (801fcfc <_strtod_l+0x5a4>)
 801fb78:	f1c3 030f 	rsb	r3, r3, #15
 801fb7c:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 801fb80:	ed91 7b00 	vldr	d7, [r1]
 801fb84:	ec49 8b16 	vmov	d6, r8, r9
 801fb88:	1ac3      	subs	r3, r0, r3
 801fb8a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 801fb8e:	ee27 7b06 	vmul.f64	d7, d7, d6
 801fb92:	ed92 6b00 	vldr	d6, [r2]
 801fb96:	e7e4      	b.n	801fb62 <_strtod_l+0x40a>
 801fb98:	9906      	ldr	r1, [sp, #24]
 801fb9a:	3116      	adds	r1, #22
 801fb9c:	db0b      	blt.n	801fbb6 <_strtod_l+0x45e>
 801fb9e:	4b57      	ldr	r3, [pc, #348]	; (801fcfc <_strtod_l+0x5a4>)
 801fba0:	ebab 0505 	sub.w	r5, fp, r5
 801fba4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 801fba8:	ed95 7b00 	vldr	d7, [r5]
 801fbac:	ec49 8b16 	vmov	d6, r8, r9
 801fbb0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801fbb4:	e7d7      	b.n	801fb66 <_strtod_l+0x40e>
 801fbb6:	9906      	ldr	r1, [sp, #24]
 801fbb8:	1a9a      	subs	r2, r3, r2
 801fbba:	440a      	add	r2, r1
 801fbbc:	2a00      	cmp	r2, #0
 801fbbe:	dd74      	ble.n	801fcaa <_strtod_l+0x552>
 801fbc0:	f012 000f 	ands.w	r0, r2, #15
 801fbc4:	d00a      	beq.n	801fbdc <_strtod_l+0x484>
 801fbc6:	494d      	ldr	r1, [pc, #308]	; (801fcfc <_strtod_l+0x5a4>)
 801fbc8:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 801fbcc:	ed91 7b00 	vldr	d7, [r1]
 801fbd0:	ec49 8b16 	vmov	d6, r8, r9
 801fbd4:	ee27 7b06 	vmul.f64	d7, d7, d6
 801fbd8:	ec59 8b17 	vmov	r8, r9, d7
 801fbdc:	f032 020f 	bics.w	r2, r2, #15
 801fbe0:	d04f      	beq.n	801fc82 <_strtod_l+0x52a>
 801fbe2:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 801fbe6:	dd22      	ble.n	801fc2e <_strtod_l+0x4d6>
 801fbe8:	2500      	movs	r5, #0
 801fbea:	462e      	mov	r6, r5
 801fbec:	950a      	str	r5, [sp, #40]	; 0x28
 801fbee:	462f      	mov	r7, r5
 801fbf0:	2322      	movs	r3, #34	; 0x22
 801fbf2:	f8df 9114 	ldr.w	r9, [pc, #276]	; 801fd08 <_strtod_l+0x5b0>
 801fbf6:	6023      	str	r3, [r4, #0]
 801fbf8:	f04f 0800 	mov.w	r8, #0
 801fbfc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801fbfe:	2b00      	cmp	r3, #0
 801fc00:	f43f adee 	beq.w	801f7e0 <_strtod_l+0x88>
 801fc04:	9918      	ldr	r1, [sp, #96]	; 0x60
 801fc06:	4620      	mov	r0, r4
 801fc08:	f001 ff1e 	bl	8021a48 <_Bfree>
 801fc0c:	4639      	mov	r1, r7
 801fc0e:	4620      	mov	r0, r4
 801fc10:	f001 ff1a 	bl	8021a48 <_Bfree>
 801fc14:	4631      	mov	r1, r6
 801fc16:	4620      	mov	r0, r4
 801fc18:	f001 ff16 	bl	8021a48 <_Bfree>
 801fc1c:	990a      	ldr	r1, [sp, #40]	; 0x28
 801fc1e:	4620      	mov	r0, r4
 801fc20:	f001 ff12 	bl	8021a48 <_Bfree>
 801fc24:	4629      	mov	r1, r5
 801fc26:	4620      	mov	r0, r4
 801fc28:	f001 ff0e 	bl	8021a48 <_Bfree>
 801fc2c:	e5d8      	b.n	801f7e0 <_strtod_l+0x88>
 801fc2e:	e9cd 8904 	strd	r8, r9, [sp, #16]
 801fc32:	2000      	movs	r0, #0
 801fc34:	4f32      	ldr	r7, [pc, #200]	; (801fd00 <_strtod_l+0x5a8>)
 801fc36:	1112      	asrs	r2, r2, #4
 801fc38:	4601      	mov	r1, r0
 801fc3a:	2a01      	cmp	r2, #1
 801fc3c:	dc24      	bgt.n	801fc88 <_strtod_l+0x530>
 801fc3e:	b108      	cbz	r0, 801fc44 <_strtod_l+0x4ec>
 801fc40:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 801fc44:	4a2e      	ldr	r2, [pc, #184]	; (801fd00 <_strtod_l+0x5a8>)
 801fc46:	482f      	ldr	r0, [pc, #188]	; (801fd04 <_strtod_l+0x5ac>)
 801fc48:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 801fc4c:	ed91 7b00 	vldr	d7, [r1]
 801fc50:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 801fc54:	ec49 8b16 	vmov	d6, r8, r9
 801fc58:	ee27 7b06 	vmul.f64	d7, d7, d6
 801fc5c:	ed8d 7b04 	vstr	d7, [sp, #16]
 801fc60:	9905      	ldr	r1, [sp, #20]
 801fc62:	4a29      	ldr	r2, [pc, #164]	; (801fd08 <_strtod_l+0x5b0>)
 801fc64:	400a      	ands	r2, r1
 801fc66:	4282      	cmp	r2, r0
 801fc68:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 801fc6c:	d8bc      	bhi.n	801fbe8 <_strtod_l+0x490>
 801fc6e:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 801fc72:	4282      	cmp	r2, r0
 801fc74:	bf86      	itte	hi
 801fc76:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 801fd0c <_strtod_l+0x5b4>
 801fc7a:	f04f 38ff 	movhi.w	r8, #4294967295
 801fc7e:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 801fc82:	2200      	movs	r2, #0
 801fc84:	9204      	str	r2, [sp, #16]
 801fc86:	e07f      	b.n	801fd88 <_strtod_l+0x630>
 801fc88:	f012 0f01 	tst.w	r2, #1
 801fc8c:	d00a      	beq.n	801fca4 <_strtod_l+0x54c>
 801fc8e:	eb07 00c1 	add.w	r0, r7, r1, lsl #3
 801fc92:	ed90 7b00 	vldr	d7, [r0]
 801fc96:	ed9d 6b04 	vldr	d6, [sp, #16]
 801fc9a:	ee26 7b07 	vmul.f64	d7, d6, d7
 801fc9e:	ed8d 7b04 	vstr	d7, [sp, #16]
 801fca2:	2001      	movs	r0, #1
 801fca4:	3101      	adds	r1, #1
 801fca6:	1052      	asrs	r2, r2, #1
 801fca8:	e7c7      	b.n	801fc3a <_strtod_l+0x4e2>
 801fcaa:	d0ea      	beq.n	801fc82 <_strtod_l+0x52a>
 801fcac:	4252      	negs	r2, r2
 801fcae:	f012 000f 	ands.w	r0, r2, #15
 801fcb2:	d00a      	beq.n	801fcca <_strtod_l+0x572>
 801fcb4:	4911      	ldr	r1, [pc, #68]	; (801fcfc <_strtod_l+0x5a4>)
 801fcb6:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 801fcba:	ed91 7b00 	vldr	d7, [r1]
 801fcbe:	ec49 8b16 	vmov	d6, r8, r9
 801fcc2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801fcc6:	ec59 8b17 	vmov	r8, r9, d7
 801fcca:	1112      	asrs	r2, r2, #4
 801fccc:	d0d9      	beq.n	801fc82 <_strtod_l+0x52a>
 801fcce:	2a1f      	cmp	r2, #31
 801fcd0:	dd1e      	ble.n	801fd10 <_strtod_l+0x5b8>
 801fcd2:	2500      	movs	r5, #0
 801fcd4:	462e      	mov	r6, r5
 801fcd6:	950a      	str	r5, [sp, #40]	; 0x28
 801fcd8:	462f      	mov	r7, r5
 801fcda:	2322      	movs	r3, #34	; 0x22
 801fcdc:	f04f 0800 	mov.w	r8, #0
 801fce0:	f04f 0900 	mov.w	r9, #0
 801fce4:	6023      	str	r3, [r4, #0]
 801fce6:	e789      	b.n	801fbfc <_strtod_l+0x4a4>
 801fce8:	080272c1 	.word	0x080272c1
 801fcec:	08027378 	.word	0x08027378
 801fcf0:	080272b9 	.word	0x080272b9
 801fcf4:	080273f7 	.word	0x080273f7
 801fcf8:	080273f3 	.word	0x080273f3
 801fcfc:	080275e0 	.word	0x080275e0
 801fd00:	080275b8 	.word	0x080275b8
 801fd04:	7ca00000 	.word	0x7ca00000
 801fd08:	7ff00000 	.word	0x7ff00000
 801fd0c:	7fefffff 	.word	0x7fefffff
 801fd10:	f012 0110 	ands.w	r1, r2, #16
 801fd14:	bf18      	it	ne
 801fd16:	216a      	movne	r1, #106	; 0x6a
 801fd18:	e9cd 8908 	strd	r8, r9, [sp, #32]
 801fd1c:	9104      	str	r1, [sp, #16]
 801fd1e:	49c0      	ldr	r1, [pc, #768]	; (8020020 <_strtod_l+0x8c8>)
 801fd20:	2000      	movs	r0, #0
 801fd22:	07d7      	lsls	r7, r2, #31
 801fd24:	d508      	bpl.n	801fd38 <_strtod_l+0x5e0>
 801fd26:	ed9d 6b08 	vldr	d6, [sp, #32]
 801fd2a:	ed91 7b00 	vldr	d7, [r1]
 801fd2e:	ee26 7b07 	vmul.f64	d7, d6, d7
 801fd32:	ed8d 7b08 	vstr	d7, [sp, #32]
 801fd36:	2001      	movs	r0, #1
 801fd38:	1052      	asrs	r2, r2, #1
 801fd3a:	f101 0108 	add.w	r1, r1, #8
 801fd3e:	d1f0      	bne.n	801fd22 <_strtod_l+0x5ca>
 801fd40:	b108      	cbz	r0, 801fd46 <_strtod_l+0x5ee>
 801fd42:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 801fd46:	9a04      	ldr	r2, [sp, #16]
 801fd48:	b1ba      	cbz	r2, 801fd7a <_strtod_l+0x622>
 801fd4a:	f3c9 520a 	ubfx	r2, r9, #20, #11
 801fd4e:	f1c2 026b 	rsb	r2, r2, #107	; 0x6b
 801fd52:	2a00      	cmp	r2, #0
 801fd54:	4649      	mov	r1, r9
 801fd56:	dd10      	ble.n	801fd7a <_strtod_l+0x622>
 801fd58:	2a1f      	cmp	r2, #31
 801fd5a:	f340 8132 	ble.w	801ffc2 <_strtod_l+0x86a>
 801fd5e:	2a34      	cmp	r2, #52	; 0x34
 801fd60:	bfde      	ittt	le
 801fd62:	3a20      	suble	r2, #32
 801fd64:	f04f 30ff 	movle.w	r0, #4294967295
 801fd68:	fa00 f202 	lslle.w	r2, r0, r2
 801fd6c:	f04f 0800 	mov.w	r8, #0
 801fd70:	bfcc      	ite	gt
 801fd72:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 801fd76:	ea02 0901 	andle.w	r9, r2, r1
 801fd7a:	ec49 8b17 	vmov	d7, r8, r9
 801fd7e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801fd82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fd86:	d0a4      	beq.n	801fcd2 <_strtod_l+0x57a>
 801fd88:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801fd8a:	9200      	str	r2, [sp, #0]
 801fd8c:	990c      	ldr	r1, [sp, #48]	; 0x30
 801fd8e:	4632      	mov	r2, r6
 801fd90:	4620      	mov	r0, r4
 801fd92:	f001 fec5 	bl	8021b20 <__s2b>
 801fd96:	900a      	str	r0, [sp, #40]	; 0x28
 801fd98:	2800      	cmp	r0, #0
 801fd9a:	f43f af25 	beq.w	801fbe8 <_strtod_l+0x490>
 801fd9e:	9b06      	ldr	r3, [sp, #24]
 801fda0:	ebab 0505 	sub.w	r5, fp, r5
 801fda4:	2b00      	cmp	r3, #0
 801fda6:	bfb4      	ite	lt
 801fda8:	462b      	movlt	r3, r5
 801fdaa:	2300      	movge	r3, #0
 801fdac:	930c      	str	r3, [sp, #48]	; 0x30
 801fdae:	9b06      	ldr	r3, [sp, #24]
 801fdb0:	ed9f 9b95 	vldr	d9, [pc, #596]	; 8020008 <_strtod_l+0x8b0>
 801fdb4:	ed9f ab96 	vldr	d10, [pc, #600]	; 8020010 <_strtod_l+0x8b8>
 801fdb8:	ed9f bb97 	vldr	d11, [pc, #604]	; 8020018 <_strtod_l+0x8c0>
 801fdbc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801fdc0:	2500      	movs	r5, #0
 801fdc2:	9312      	str	r3, [sp, #72]	; 0x48
 801fdc4:	462e      	mov	r6, r5
 801fdc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801fdc8:	4620      	mov	r0, r4
 801fdca:	6859      	ldr	r1, [r3, #4]
 801fdcc:	f001 fdfc 	bl	80219c8 <_Balloc>
 801fdd0:	4607      	mov	r7, r0
 801fdd2:	2800      	cmp	r0, #0
 801fdd4:	f43f af0c 	beq.w	801fbf0 <_strtod_l+0x498>
 801fdd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801fdda:	691a      	ldr	r2, [r3, #16]
 801fddc:	3202      	adds	r2, #2
 801fdde:	f103 010c 	add.w	r1, r3, #12
 801fde2:	0092      	lsls	r2, r2, #2
 801fde4:	300c      	adds	r0, #12
 801fde6:	f7fe fd97 	bl	801e918 <memcpy>
 801fdea:	ec49 8b10 	vmov	d0, r8, r9
 801fdee:	aa1a      	add	r2, sp, #104	; 0x68
 801fdf0:	a919      	add	r1, sp, #100	; 0x64
 801fdf2:	4620      	mov	r0, r4
 801fdf4:	e9cd 8908 	strd	r8, r9, [sp, #32]
 801fdf8:	f002 f9ce 	bl	8022198 <__d2b>
 801fdfc:	9018      	str	r0, [sp, #96]	; 0x60
 801fdfe:	2800      	cmp	r0, #0
 801fe00:	f43f aef6 	beq.w	801fbf0 <_strtod_l+0x498>
 801fe04:	2101      	movs	r1, #1
 801fe06:	4620      	mov	r0, r4
 801fe08:	f001 ff24 	bl	8021c54 <__i2b>
 801fe0c:	4606      	mov	r6, r0
 801fe0e:	2800      	cmp	r0, #0
 801fe10:	f43f aeee 	beq.w	801fbf0 <_strtod_l+0x498>
 801fe14:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801fe16:	991a      	ldr	r1, [sp, #104]	; 0x68
 801fe18:	2b00      	cmp	r3, #0
 801fe1a:	bfab      	itete	ge
 801fe1c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 801fe1e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 801fe20:	f8dd a048 	ldrge.w	sl, [sp, #72]	; 0x48
 801fe24:	f8dd b030 	ldrlt.w	fp, [sp, #48]	; 0x30
 801fe28:	bfac      	ite	ge
 801fe2a:	eb03 0b02 	addge.w	fp, r3, r2
 801fe2e:	eba2 0a03 	sublt.w	sl, r2, r3
 801fe32:	9a04      	ldr	r2, [sp, #16]
 801fe34:	1a9b      	subs	r3, r3, r2
 801fe36:	440b      	add	r3, r1
 801fe38:	4a7a      	ldr	r2, [pc, #488]	; (8020024 <_strtod_l+0x8cc>)
 801fe3a:	3b01      	subs	r3, #1
 801fe3c:	4293      	cmp	r3, r2
 801fe3e:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 801fe42:	f280 80d1 	bge.w	801ffe8 <_strtod_l+0x890>
 801fe46:	1ad2      	subs	r2, r2, r3
 801fe48:	2a1f      	cmp	r2, #31
 801fe4a:	eba1 0102 	sub.w	r1, r1, r2
 801fe4e:	f04f 0001 	mov.w	r0, #1
 801fe52:	f300 80bd 	bgt.w	801ffd0 <_strtod_l+0x878>
 801fe56:	fa00 f302 	lsl.w	r3, r0, r2
 801fe5a:	930e      	str	r3, [sp, #56]	; 0x38
 801fe5c:	2300      	movs	r3, #0
 801fe5e:	930d      	str	r3, [sp, #52]	; 0x34
 801fe60:	eb0b 0301 	add.w	r3, fp, r1
 801fe64:	9a04      	ldr	r2, [sp, #16]
 801fe66:	459b      	cmp	fp, r3
 801fe68:	448a      	add	sl, r1
 801fe6a:	4492      	add	sl, r2
 801fe6c:	465a      	mov	r2, fp
 801fe6e:	bfa8      	it	ge
 801fe70:	461a      	movge	r2, r3
 801fe72:	4552      	cmp	r2, sl
 801fe74:	bfa8      	it	ge
 801fe76:	4652      	movge	r2, sl
 801fe78:	2a00      	cmp	r2, #0
 801fe7a:	bfc2      	ittt	gt
 801fe7c:	1a9b      	subgt	r3, r3, r2
 801fe7e:	ebaa 0a02 	subgt.w	sl, sl, r2
 801fe82:	ebab 0b02 	subgt.w	fp, fp, r2
 801fe86:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801fe88:	2a00      	cmp	r2, #0
 801fe8a:	dd18      	ble.n	801febe <_strtod_l+0x766>
 801fe8c:	4631      	mov	r1, r6
 801fe8e:	4620      	mov	r0, r4
 801fe90:	9315      	str	r3, [sp, #84]	; 0x54
 801fe92:	f001 ff9b 	bl	8021dcc <__pow5mult>
 801fe96:	4606      	mov	r6, r0
 801fe98:	2800      	cmp	r0, #0
 801fe9a:	f43f aea9 	beq.w	801fbf0 <_strtod_l+0x498>
 801fe9e:	4601      	mov	r1, r0
 801fea0:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801fea2:	4620      	mov	r0, r4
 801fea4:	f001 feec 	bl	8021c80 <__multiply>
 801fea8:	9014      	str	r0, [sp, #80]	; 0x50
 801feaa:	2800      	cmp	r0, #0
 801feac:	f43f aea0 	beq.w	801fbf0 <_strtod_l+0x498>
 801feb0:	9918      	ldr	r1, [sp, #96]	; 0x60
 801feb2:	4620      	mov	r0, r4
 801feb4:	f001 fdc8 	bl	8021a48 <_Bfree>
 801feb8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801feba:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801febc:	9218      	str	r2, [sp, #96]	; 0x60
 801febe:	2b00      	cmp	r3, #0
 801fec0:	f300 8097 	bgt.w	801fff2 <_strtod_l+0x89a>
 801fec4:	9b06      	ldr	r3, [sp, #24]
 801fec6:	2b00      	cmp	r3, #0
 801fec8:	dd08      	ble.n	801fedc <_strtod_l+0x784>
 801feca:	4639      	mov	r1, r7
 801fecc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801fece:	4620      	mov	r0, r4
 801fed0:	f001 ff7c 	bl	8021dcc <__pow5mult>
 801fed4:	4607      	mov	r7, r0
 801fed6:	2800      	cmp	r0, #0
 801fed8:	f43f ae8a 	beq.w	801fbf0 <_strtod_l+0x498>
 801fedc:	f1ba 0f00 	cmp.w	sl, #0
 801fee0:	dd08      	ble.n	801fef4 <_strtod_l+0x79c>
 801fee2:	4639      	mov	r1, r7
 801fee4:	4652      	mov	r2, sl
 801fee6:	4620      	mov	r0, r4
 801fee8:	f001 ffca 	bl	8021e80 <__lshift>
 801feec:	4607      	mov	r7, r0
 801feee:	2800      	cmp	r0, #0
 801fef0:	f43f ae7e 	beq.w	801fbf0 <_strtod_l+0x498>
 801fef4:	f1bb 0f00 	cmp.w	fp, #0
 801fef8:	dd08      	ble.n	801ff0c <_strtod_l+0x7b4>
 801fefa:	4631      	mov	r1, r6
 801fefc:	465a      	mov	r2, fp
 801fefe:	4620      	mov	r0, r4
 801ff00:	f001 ffbe 	bl	8021e80 <__lshift>
 801ff04:	4606      	mov	r6, r0
 801ff06:	2800      	cmp	r0, #0
 801ff08:	f43f ae72 	beq.w	801fbf0 <_strtod_l+0x498>
 801ff0c:	9918      	ldr	r1, [sp, #96]	; 0x60
 801ff0e:	463a      	mov	r2, r7
 801ff10:	4620      	mov	r0, r4
 801ff12:	f002 f83d 	bl	8021f90 <__mdiff>
 801ff16:	4605      	mov	r5, r0
 801ff18:	2800      	cmp	r0, #0
 801ff1a:	f43f ae69 	beq.w	801fbf0 <_strtod_l+0x498>
 801ff1e:	2300      	movs	r3, #0
 801ff20:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 801ff24:	60c3      	str	r3, [r0, #12]
 801ff26:	4631      	mov	r1, r6
 801ff28:	f002 f816 	bl	8021f58 <__mcmp>
 801ff2c:	2800      	cmp	r0, #0
 801ff2e:	da7f      	bge.n	8020030 <_strtod_l+0x8d8>
 801ff30:	ea5a 0308 	orrs.w	r3, sl, r8
 801ff34:	f040 80a5 	bne.w	8020082 <_strtod_l+0x92a>
 801ff38:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801ff3c:	2b00      	cmp	r3, #0
 801ff3e:	f040 80a0 	bne.w	8020082 <_strtod_l+0x92a>
 801ff42:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801ff46:	0d1b      	lsrs	r3, r3, #20
 801ff48:	051b      	lsls	r3, r3, #20
 801ff4a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801ff4e:	f240 8098 	bls.w	8020082 <_strtod_l+0x92a>
 801ff52:	696b      	ldr	r3, [r5, #20]
 801ff54:	b91b      	cbnz	r3, 801ff5e <_strtod_l+0x806>
 801ff56:	692b      	ldr	r3, [r5, #16]
 801ff58:	2b01      	cmp	r3, #1
 801ff5a:	f340 8092 	ble.w	8020082 <_strtod_l+0x92a>
 801ff5e:	4629      	mov	r1, r5
 801ff60:	2201      	movs	r2, #1
 801ff62:	4620      	mov	r0, r4
 801ff64:	f001 ff8c 	bl	8021e80 <__lshift>
 801ff68:	4631      	mov	r1, r6
 801ff6a:	4605      	mov	r5, r0
 801ff6c:	f001 fff4 	bl	8021f58 <__mcmp>
 801ff70:	2800      	cmp	r0, #0
 801ff72:	f340 8086 	ble.w	8020082 <_strtod_l+0x92a>
 801ff76:	9904      	ldr	r1, [sp, #16]
 801ff78:	4a2b      	ldr	r2, [pc, #172]	; (8020028 <_strtod_l+0x8d0>)
 801ff7a:	464b      	mov	r3, r9
 801ff7c:	2900      	cmp	r1, #0
 801ff7e:	f000 80a1 	beq.w	80200c4 <_strtod_l+0x96c>
 801ff82:	ea02 0109 	and.w	r1, r2, r9
 801ff86:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801ff8a:	f300 809b 	bgt.w	80200c4 <_strtod_l+0x96c>
 801ff8e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801ff92:	f77f aea2 	ble.w	801fcda <_strtod_l+0x582>
 801ff96:	4a25      	ldr	r2, [pc, #148]	; (802002c <_strtod_l+0x8d4>)
 801ff98:	2300      	movs	r3, #0
 801ff9a:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
 801ff9e:	ed9d 6b10 	vldr	d6, [sp, #64]	; 0x40
 801ffa2:	ec49 8b17 	vmov	d7, r8, r9
 801ffa6:	ee27 7b06 	vmul.f64	d7, d7, d6
 801ffaa:	ed8d 7b04 	vstr	d7, [sp, #16]
 801ffae:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 801ffb2:	4313      	orrs	r3, r2
 801ffb4:	bf08      	it	eq
 801ffb6:	2322      	moveq	r3, #34	; 0x22
 801ffb8:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 801ffbc:	bf08      	it	eq
 801ffbe:	6023      	streq	r3, [r4, #0]
 801ffc0:	e620      	b.n	801fc04 <_strtod_l+0x4ac>
 801ffc2:	f04f 31ff 	mov.w	r1, #4294967295
 801ffc6:	fa01 f202 	lsl.w	r2, r1, r2
 801ffca:	ea02 0808 	and.w	r8, r2, r8
 801ffce:	e6d4      	b.n	801fd7a <_strtod_l+0x622>
 801ffd0:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 801ffd4:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 801ffd8:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 801ffdc:	33e2      	adds	r3, #226	; 0xe2
 801ffde:	fa00 f303 	lsl.w	r3, r0, r3
 801ffe2:	e9cd 300d 	strd	r3, r0, [sp, #52]	; 0x34
 801ffe6:	e73b      	b.n	801fe60 <_strtod_l+0x708>
 801ffe8:	2000      	movs	r0, #0
 801ffea:	2301      	movs	r3, #1
 801ffec:	e9cd 030d 	strd	r0, r3, [sp, #52]	; 0x34
 801fff0:	e736      	b.n	801fe60 <_strtod_l+0x708>
 801fff2:	9918      	ldr	r1, [sp, #96]	; 0x60
 801fff4:	461a      	mov	r2, r3
 801fff6:	4620      	mov	r0, r4
 801fff8:	f001 ff42 	bl	8021e80 <__lshift>
 801fffc:	9018      	str	r0, [sp, #96]	; 0x60
 801fffe:	2800      	cmp	r0, #0
 8020000:	f47f af60 	bne.w	801fec4 <_strtod_l+0x76c>
 8020004:	e5f4      	b.n	801fbf0 <_strtod_l+0x498>
 8020006:	bf00      	nop
 8020008:	94a03595 	.word	0x94a03595
 802000c:	3fcfffff 	.word	0x3fcfffff
 8020010:	94a03595 	.word	0x94a03595
 8020014:	3fdfffff 	.word	0x3fdfffff
 8020018:	35afe535 	.word	0x35afe535
 802001c:	3fe00000 	.word	0x3fe00000
 8020020:	08027390 	.word	0x08027390
 8020024:	fffffc02 	.word	0xfffffc02
 8020028:	7ff00000 	.word	0x7ff00000
 802002c:	39500000 	.word	0x39500000
 8020030:	46cb      	mov	fp, r9
 8020032:	d165      	bne.n	8020100 <_strtod_l+0x9a8>
 8020034:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8020038:	f1ba 0f00 	cmp.w	sl, #0
 802003c:	d02a      	beq.n	8020094 <_strtod_l+0x93c>
 802003e:	4aaa      	ldr	r2, [pc, #680]	; (80202e8 <_strtod_l+0xb90>)
 8020040:	4293      	cmp	r3, r2
 8020042:	d12b      	bne.n	802009c <_strtod_l+0x944>
 8020044:	9b04      	ldr	r3, [sp, #16]
 8020046:	4641      	mov	r1, r8
 8020048:	b1fb      	cbz	r3, 802008a <_strtod_l+0x932>
 802004a:	4aa8      	ldr	r2, [pc, #672]	; (80202ec <_strtod_l+0xb94>)
 802004c:	ea09 0202 	and.w	r2, r9, r2
 8020050:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8020054:	f04f 30ff 	mov.w	r0, #4294967295
 8020058:	d81a      	bhi.n	8020090 <_strtod_l+0x938>
 802005a:	0d12      	lsrs	r2, r2, #20
 802005c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8020060:	fa00 f303 	lsl.w	r3, r0, r3
 8020064:	4299      	cmp	r1, r3
 8020066:	d119      	bne.n	802009c <_strtod_l+0x944>
 8020068:	4ba1      	ldr	r3, [pc, #644]	; (80202f0 <_strtod_l+0xb98>)
 802006a:	459b      	cmp	fp, r3
 802006c:	d102      	bne.n	8020074 <_strtod_l+0x91c>
 802006e:	3101      	adds	r1, #1
 8020070:	f43f adbe 	beq.w	801fbf0 <_strtod_l+0x498>
 8020074:	4b9d      	ldr	r3, [pc, #628]	; (80202ec <_strtod_l+0xb94>)
 8020076:	ea0b 0303 	and.w	r3, fp, r3
 802007a:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 802007e:	f04f 0800 	mov.w	r8, #0
 8020082:	9b04      	ldr	r3, [sp, #16]
 8020084:	2b00      	cmp	r3, #0
 8020086:	d186      	bne.n	801ff96 <_strtod_l+0x83e>
 8020088:	e5bc      	b.n	801fc04 <_strtod_l+0x4ac>
 802008a:	f04f 33ff 	mov.w	r3, #4294967295
 802008e:	e7e9      	b.n	8020064 <_strtod_l+0x90c>
 8020090:	4603      	mov	r3, r0
 8020092:	e7e7      	b.n	8020064 <_strtod_l+0x90c>
 8020094:	ea53 0308 	orrs.w	r3, r3, r8
 8020098:	f43f af6d 	beq.w	801ff76 <_strtod_l+0x81e>
 802009c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802009e:	b1db      	cbz	r3, 80200d8 <_strtod_l+0x980>
 80200a0:	ea13 0f0b 	tst.w	r3, fp
 80200a4:	d0ed      	beq.n	8020082 <_strtod_l+0x92a>
 80200a6:	9a04      	ldr	r2, [sp, #16]
 80200a8:	4640      	mov	r0, r8
 80200aa:	4649      	mov	r1, r9
 80200ac:	f1ba 0f00 	cmp.w	sl, #0
 80200b0:	d016      	beq.n	80200e0 <_strtod_l+0x988>
 80200b2:	f7ff fb37 	bl	801f724 <sulp>
 80200b6:	ed9d 7b08 	vldr	d7, [sp, #32]
 80200ba:	ee37 7b00 	vadd.f64	d7, d7, d0
 80200be:	ec59 8b17 	vmov	r8, r9, d7
 80200c2:	e7de      	b.n	8020082 <_strtod_l+0x92a>
 80200c4:	4013      	ands	r3, r2
 80200c6:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80200ca:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80200ce:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80200d2:	f04f 38ff 	mov.w	r8, #4294967295
 80200d6:	e7d4      	b.n	8020082 <_strtod_l+0x92a>
 80200d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80200da:	ea13 0f08 	tst.w	r3, r8
 80200de:	e7e1      	b.n	80200a4 <_strtod_l+0x94c>
 80200e0:	f7ff fb20 	bl	801f724 <sulp>
 80200e4:	ed9d 7b08 	vldr	d7, [sp, #32]
 80200e8:	ee37 7b40 	vsub.f64	d7, d7, d0
 80200ec:	ed8d 7b06 	vstr	d7, [sp, #24]
 80200f0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80200f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80200f8:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 80200fc:	d1c1      	bne.n	8020082 <_strtod_l+0x92a>
 80200fe:	e5ec      	b.n	801fcda <_strtod_l+0x582>
 8020100:	4631      	mov	r1, r6
 8020102:	4628      	mov	r0, r5
 8020104:	f002 f8a4 	bl	8022250 <__ratio>
 8020108:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 802010c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8020110:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020114:	d867      	bhi.n	80201e6 <_strtod_l+0xa8e>
 8020116:	f1ba 0f00 	cmp.w	sl, #0
 802011a:	d044      	beq.n	80201a6 <_strtod_l+0xa4e>
 802011c:	4b75      	ldr	r3, [pc, #468]	; (80202f4 <_strtod_l+0xb9c>)
 802011e:	2200      	movs	r2, #0
 8020120:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
 8020124:	4971      	ldr	r1, [pc, #452]	; (80202ec <_strtod_l+0xb94>)
 8020126:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 8020300 <_strtod_l+0xba8>
 802012a:	ea0b 0001 	and.w	r0, fp, r1
 802012e:	4560      	cmp	r0, ip
 8020130:	900d      	str	r0, [sp, #52]	; 0x34
 8020132:	f040 808b 	bne.w	802024c <_strtod_l+0xaf4>
 8020136:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 802013a:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 802013e:	ec49 8b10 	vmov	d0, r8, r9
 8020142:	ec43 2b1c 	vmov	d12, r2, r3
 8020146:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 802014a:	f001 ffa9 	bl	80220a0 <__ulp>
 802014e:	ec49 8b1d 	vmov	d13, r8, r9
 8020152:	eeac db00 	vfma.f64	d13, d12, d0
 8020156:	ed8d db0e 	vstr	d13, [sp, #56]	; 0x38
 802015a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802015c:	4963      	ldr	r1, [pc, #396]	; (80202ec <_strtod_l+0xb94>)
 802015e:	4a66      	ldr	r2, [pc, #408]	; (80202f8 <_strtod_l+0xba0>)
 8020160:	4019      	ands	r1, r3
 8020162:	4291      	cmp	r1, r2
 8020164:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
 8020168:	d947      	bls.n	80201fa <_strtod_l+0xaa2>
 802016a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802016c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8020170:	4293      	cmp	r3, r2
 8020172:	d103      	bne.n	802017c <_strtod_l+0xa24>
 8020174:	9b08      	ldr	r3, [sp, #32]
 8020176:	3301      	adds	r3, #1
 8020178:	f43f ad3a 	beq.w	801fbf0 <_strtod_l+0x498>
 802017c:	f8df 9170 	ldr.w	r9, [pc, #368]	; 80202f0 <_strtod_l+0xb98>
 8020180:	f04f 38ff 	mov.w	r8, #4294967295
 8020184:	9918      	ldr	r1, [sp, #96]	; 0x60
 8020186:	4620      	mov	r0, r4
 8020188:	f001 fc5e 	bl	8021a48 <_Bfree>
 802018c:	4639      	mov	r1, r7
 802018e:	4620      	mov	r0, r4
 8020190:	f001 fc5a 	bl	8021a48 <_Bfree>
 8020194:	4631      	mov	r1, r6
 8020196:	4620      	mov	r0, r4
 8020198:	f001 fc56 	bl	8021a48 <_Bfree>
 802019c:	4629      	mov	r1, r5
 802019e:	4620      	mov	r0, r4
 80201a0:	f001 fc52 	bl	8021a48 <_Bfree>
 80201a4:	e60f      	b.n	801fdc6 <_strtod_l+0x66e>
 80201a6:	f1b8 0f00 	cmp.w	r8, #0
 80201aa:	d112      	bne.n	80201d2 <_strtod_l+0xa7a>
 80201ac:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80201b0:	b9b3      	cbnz	r3, 80201e0 <_strtod_l+0xa88>
 80201b2:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 80201b6:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80201ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80201be:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 80201c2:	d401      	bmi.n	80201c8 <_strtod_l+0xa70>
 80201c4:	ee20 8b08 	vmul.f64	d8, d0, d8
 80201c8:	eeb1 7b48 	vneg.f64	d7, d8
 80201cc:	ec53 2b17 	vmov	r2, r3, d7
 80201d0:	e7a8      	b.n	8020124 <_strtod_l+0x9cc>
 80201d2:	f1b8 0f01 	cmp.w	r8, #1
 80201d6:	d103      	bne.n	80201e0 <_strtod_l+0xa88>
 80201d8:	f1b9 0f00 	cmp.w	r9, #0
 80201dc:	f43f ad7d 	beq.w	801fcda <_strtod_l+0x582>
 80201e0:	4b46      	ldr	r3, [pc, #280]	; (80202fc <_strtod_l+0xba4>)
 80201e2:	2200      	movs	r2, #0
 80201e4:	e79c      	b.n	8020120 <_strtod_l+0x9c8>
 80201e6:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 80201ea:	ee20 8b08 	vmul.f64	d8, d0, d8
 80201ee:	f1ba 0f00 	cmp.w	sl, #0
 80201f2:	d0e9      	beq.n	80201c8 <_strtod_l+0xa70>
 80201f4:	ec53 2b18 	vmov	r2, r3, d8
 80201f8:	e794      	b.n	8020124 <_strtod_l+0x9cc>
 80201fa:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80201fe:	9b04      	ldr	r3, [sp, #16]
 8020200:	2b00      	cmp	r3, #0
 8020202:	d1bf      	bne.n	8020184 <_strtod_l+0xa2c>
 8020204:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8020208:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 802020a:	0d1b      	lsrs	r3, r3, #20
 802020c:	051b      	lsls	r3, r3, #20
 802020e:	429a      	cmp	r2, r3
 8020210:	d1b8      	bne.n	8020184 <_strtod_l+0xa2c>
 8020212:	ec51 0b18 	vmov	r0, r1, d8
 8020216:	f7e0 fa9f 	bl	8000758 <__aeabi_d2lz>
 802021a:	f7e0 fa57 	bl	80006cc <__aeabi_l2d>
 802021e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8020222:	ec41 0b17 	vmov	d7, r0, r1
 8020226:	ea43 0308 	orr.w	r3, r3, r8
 802022a:	ea53 030a 	orrs.w	r3, r3, sl
 802022e:	ee38 8b47 	vsub.f64	d8, d8, d7
 8020232:	d03e      	beq.n	80202b2 <_strtod_l+0xb5a>
 8020234:	eeb4 8bca 	vcmpe.f64	d8, d10
 8020238:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802023c:	f53f ace2 	bmi.w	801fc04 <_strtod_l+0x4ac>
 8020240:	eeb4 8bcb 	vcmpe.f64	d8, d11
 8020244:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020248:	dd9c      	ble.n	8020184 <_strtod_l+0xa2c>
 802024a:	e4db      	b.n	801fc04 <_strtod_l+0x4ac>
 802024c:	9904      	ldr	r1, [sp, #16]
 802024e:	b301      	cbz	r1, 8020292 <_strtod_l+0xb3a>
 8020250:	990d      	ldr	r1, [sp, #52]	; 0x34
 8020252:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 8020256:	d81c      	bhi.n	8020292 <_strtod_l+0xb3a>
 8020258:	ed9f 7b21 	vldr	d7, [pc, #132]	; 80202e0 <_strtod_l+0xb88>
 802025c:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8020260:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020264:	d811      	bhi.n	802028a <_strtod_l+0xb32>
 8020266:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 802026a:	ee18 3a10 	vmov	r3, s16
 802026e:	2b01      	cmp	r3, #1
 8020270:	bf38      	it	cc
 8020272:	2301      	movcc	r3, #1
 8020274:	ee08 3a10 	vmov	s16, r3
 8020278:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 802027c:	f1ba 0f00 	cmp.w	sl, #0
 8020280:	d114      	bne.n	80202ac <_strtod_l+0xb54>
 8020282:	eeb1 7b48 	vneg.f64	d7, d8
 8020286:	ec53 2b17 	vmov	r2, r3, d7
 802028a:	980d      	ldr	r0, [sp, #52]	; 0x34
 802028c:	f103 61d6 	add.w	r1, r3, #112197632	; 0x6b00000
 8020290:	1a0b      	subs	r3, r1, r0
 8020292:	ed9d 0b08 	vldr	d0, [sp, #32]
 8020296:	ec43 2b1c 	vmov	d12, r2, r3
 802029a:	f001 ff01 	bl	80220a0 <__ulp>
 802029e:	ed9d 7b08 	vldr	d7, [sp, #32]
 80202a2:	eeac 7b00 	vfma.f64	d7, d12, d0
 80202a6:	ec59 8b17 	vmov	r8, r9, d7
 80202aa:	e7a8      	b.n	80201fe <_strtod_l+0xaa6>
 80202ac:	ec53 2b18 	vmov	r2, r3, d8
 80202b0:	e7eb      	b.n	802028a <_strtod_l+0xb32>
 80202b2:	eeb4 8bc9 	vcmpe.f64	d8, d9
 80202b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80202ba:	f57f af63 	bpl.w	8020184 <_strtod_l+0xa2c>
 80202be:	e4a1      	b.n	801fc04 <_strtod_l+0x4ac>
 80202c0:	2300      	movs	r3, #0
 80202c2:	930b      	str	r3, [sp, #44]	; 0x2c
 80202c4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80202c6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80202c8:	6013      	str	r3, [r2, #0]
 80202ca:	f7ff ba8d 	b.w	801f7e8 <_strtod_l+0x90>
 80202ce:	2a65      	cmp	r2, #101	; 0x65
 80202d0:	f43f ab89 	beq.w	801f9e6 <_strtod_l+0x28e>
 80202d4:	2a45      	cmp	r2, #69	; 0x45
 80202d6:	f43f ab86 	beq.w	801f9e6 <_strtod_l+0x28e>
 80202da:	2101      	movs	r1, #1
 80202dc:	f7ff bbbe 	b.w	801fa5c <_strtod_l+0x304>
 80202e0:	ffc00000 	.word	0xffc00000
 80202e4:	41dfffff 	.word	0x41dfffff
 80202e8:	000fffff 	.word	0x000fffff
 80202ec:	7ff00000 	.word	0x7ff00000
 80202f0:	7fefffff 	.word	0x7fefffff
 80202f4:	3ff00000 	.word	0x3ff00000
 80202f8:	7c9fffff 	.word	0x7c9fffff
 80202fc:	bff00000 	.word	0xbff00000
 8020300:	7fe00000 	.word	0x7fe00000

08020304 <_strtod_r>:
 8020304:	4b01      	ldr	r3, [pc, #4]	; (802030c <_strtod_r+0x8>)
 8020306:	f7ff ba27 	b.w	801f758 <_strtod_l>
 802030a:	bf00      	nop
 802030c:	2400036c 	.word	0x2400036c

08020310 <strtod>:
 8020310:	460a      	mov	r2, r1
 8020312:	4601      	mov	r1, r0
 8020314:	4802      	ldr	r0, [pc, #8]	; (8020320 <strtod+0x10>)
 8020316:	4b03      	ldr	r3, [pc, #12]	; (8020324 <strtod+0x14>)
 8020318:	6800      	ldr	r0, [r0, #0]
 802031a:	f7ff ba1d 	b.w	801f758 <_strtod_l>
 802031e:	bf00      	nop
 8020320:	24000304 	.word	0x24000304
 8020324:	2400036c 	.word	0x2400036c

08020328 <_strtol_l.isra.0>:
 8020328:	2b01      	cmp	r3, #1
 802032a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802032e:	d001      	beq.n	8020334 <_strtol_l.isra.0+0xc>
 8020330:	2b24      	cmp	r3, #36	; 0x24
 8020332:	d906      	bls.n	8020342 <_strtol_l.isra.0+0x1a>
 8020334:	f000 feaa 	bl	802108c <__errno>
 8020338:	2316      	movs	r3, #22
 802033a:	6003      	str	r3, [r0, #0]
 802033c:	2000      	movs	r0, #0
 802033e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020342:	4f3a      	ldr	r7, [pc, #232]	; (802042c <_strtol_l.isra.0+0x104>)
 8020344:	468e      	mov	lr, r1
 8020346:	4676      	mov	r6, lr
 8020348:	f81e 4b01 	ldrb.w	r4, [lr], #1
 802034c:	5de5      	ldrb	r5, [r4, r7]
 802034e:	f015 0508 	ands.w	r5, r5, #8
 8020352:	d1f8      	bne.n	8020346 <_strtol_l.isra.0+0x1e>
 8020354:	2c2d      	cmp	r4, #45	; 0x2d
 8020356:	d134      	bne.n	80203c2 <_strtol_l.isra.0+0x9a>
 8020358:	f89e 4000 	ldrb.w	r4, [lr]
 802035c:	f04f 0801 	mov.w	r8, #1
 8020360:	f106 0e02 	add.w	lr, r6, #2
 8020364:	2b00      	cmp	r3, #0
 8020366:	d05c      	beq.n	8020422 <_strtol_l.isra.0+0xfa>
 8020368:	2b10      	cmp	r3, #16
 802036a:	d10c      	bne.n	8020386 <_strtol_l.isra.0+0x5e>
 802036c:	2c30      	cmp	r4, #48	; 0x30
 802036e:	d10a      	bne.n	8020386 <_strtol_l.isra.0+0x5e>
 8020370:	f89e 4000 	ldrb.w	r4, [lr]
 8020374:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8020378:	2c58      	cmp	r4, #88	; 0x58
 802037a:	d14d      	bne.n	8020418 <_strtol_l.isra.0+0xf0>
 802037c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8020380:	2310      	movs	r3, #16
 8020382:	f10e 0e02 	add.w	lr, lr, #2
 8020386:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 802038a:	f10c 3cff 	add.w	ip, ip, #4294967295
 802038e:	2600      	movs	r6, #0
 8020390:	fbbc f9f3 	udiv	r9, ip, r3
 8020394:	4635      	mov	r5, r6
 8020396:	fb03 ca19 	mls	sl, r3, r9, ip
 802039a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 802039e:	2f09      	cmp	r7, #9
 80203a0:	d818      	bhi.n	80203d4 <_strtol_l.isra.0+0xac>
 80203a2:	463c      	mov	r4, r7
 80203a4:	42a3      	cmp	r3, r4
 80203a6:	dd24      	ble.n	80203f2 <_strtol_l.isra.0+0xca>
 80203a8:	2e00      	cmp	r6, #0
 80203aa:	db1f      	blt.n	80203ec <_strtol_l.isra.0+0xc4>
 80203ac:	45a9      	cmp	r9, r5
 80203ae:	d31d      	bcc.n	80203ec <_strtol_l.isra.0+0xc4>
 80203b0:	d101      	bne.n	80203b6 <_strtol_l.isra.0+0x8e>
 80203b2:	45a2      	cmp	sl, r4
 80203b4:	db1a      	blt.n	80203ec <_strtol_l.isra.0+0xc4>
 80203b6:	fb05 4503 	mla	r5, r5, r3, r4
 80203ba:	2601      	movs	r6, #1
 80203bc:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80203c0:	e7eb      	b.n	802039a <_strtol_l.isra.0+0x72>
 80203c2:	2c2b      	cmp	r4, #43	; 0x2b
 80203c4:	bf08      	it	eq
 80203c6:	f89e 4000 	ldrbeq.w	r4, [lr]
 80203ca:	46a8      	mov	r8, r5
 80203cc:	bf08      	it	eq
 80203ce:	f106 0e02 	addeq.w	lr, r6, #2
 80203d2:	e7c7      	b.n	8020364 <_strtol_l.isra.0+0x3c>
 80203d4:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80203d8:	2f19      	cmp	r7, #25
 80203da:	d801      	bhi.n	80203e0 <_strtol_l.isra.0+0xb8>
 80203dc:	3c37      	subs	r4, #55	; 0x37
 80203de:	e7e1      	b.n	80203a4 <_strtol_l.isra.0+0x7c>
 80203e0:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80203e4:	2f19      	cmp	r7, #25
 80203e6:	d804      	bhi.n	80203f2 <_strtol_l.isra.0+0xca>
 80203e8:	3c57      	subs	r4, #87	; 0x57
 80203ea:	e7db      	b.n	80203a4 <_strtol_l.isra.0+0x7c>
 80203ec:	f04f 36ff 	mov.w	r6, #4294967295
 80203f0:	e7e4      	b.n	80203bc <_strtol_l.isra.0+0x94>
 80203f2:	2e00      	cmp	r6, #0
 80203f4:	da05      	bge.n	8020402 <_strtol_l.isra.0+0xda>
 80203f6:	2322      	movs	r3, #34	; 0x22
 80203f8:	6003      	str	r3, [r0, #0]
 80203fa:	4665      	mov	r5, ip
 80203fc:	b942      	cbnz	r2, 8020410 <_strtol_l.isra.0+0xe8>
 80203fe:	4628      	mov	r0, r5
 8020400:	e79d      	b.n	802033e <_strtol_l.isra.0+0x16>
 8020402:	f1b8 0f00 	cmp.w	r8, #0
 8020406:	d000      	beq.n	802040a <_strtol_l.isra.0+0xe2>
 8020408:	426d      	negs	r5, r5
 802040a:	2a00      	cmp	r2, #0
 802040c:	d0f7      	beq.n	80203fe <_strtol_l.isra.0+0xd6>
 802040e:	b10e      	cbz	r6, 8020414 <_strtol_l.isra.0+0xec>
 8020410:	f10e 31ff 	add.w	r1, lr, #4294967295
 8020414:	6011      	str	r1, [r2, #0]
 8020416:	e7f2      	b.n	80203fe <_strtol_l.isra.0+0xd6>
 8020418:	2430      	movs	r4, #48	; 0x30
 802041a:	2b00      	cmp	r3, #0
 802041c:	d1b3      	bne.n	8020386 <_strtol_l.isra.0+0x5e>
 802041e:	2308      	movs	r3, #8
 8020420:	e7b1      	b.n	8020386 <_strtol_l.isra.0+0x5e>
 8020422:	2c30      	cmp	r4, #48	; 0x30
 8020424:	d0a4      	beq.n	8020370 <_strtol_l.isra.0+0x48>
 8020426:	230a      	movs	r3, #10
 8020428:	e7ad      	b.n	8020386 <_strtol_l.isra.0+0x5e>
 802042a:	bf00      	nop
 802042c:	080271ad 	.word	0x080271ad

08020430 <_strtol_r>:
 8020430:	f7ff bf7a 	b.w	8020328 <_strtol_l.isra.0>

08020434 <__assert_func>:
 8020434:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8020436:	4614      	mov	r4, r2
 8020438:	461a      	mov	r2, r3
 802043a:	4b09      	ldr	r3, [pc, #36]	; (8020460 <__assert_func+0x2c>)
 802043c:	681b      	ldr	r3, [r3, #0]
 802043e:	4605      	mov	r5, r0
 8020440:	68d8      	ldr	r0, [r3, #12]
 8020442:	b14c      	cbz	r4, 8020458 <__assert_func+0x24>
 8020444:	4b07      	ldr	r3, [pc, #28]	; (8020464 <__assert_func+0x30>)
 8020446:	9100      	str	r1, [sp, #0]
 8020448:	e9cd 3401 	strd	r3, r4, [sp, #4]
 802044c:	4906      	ldr	r1, [pc, #24]	; (8020468 <__assert_func+0x34>)
 802044e:	462b      	mov	r3, r5
 8020450:	f000 fef8 	bl	8021244 <fiprintf>
 8020454:	f002 fc20 	bl	8022c98 <abort>
 8020458:	4b04      	ldr	r3, [pc, #16]	; (802046c <__assert_func+0x38>)
 802045a:	461c      	mov	r4, r3
 802045c:	e7f3      	b.n	8020446 <__assert_func+0x12>
 802045e:	bf00      	nop
 8020460:	24000304 	.word	0x24000304
 8020464:	080273b8 	.word	0x080273b8
 8020468:	080273c5 	.word	0x080273c5
 802046c:	080273f3 	.word	0x080273f3

08020470 <quorem>:
 8020470:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020474:	6903      	ldr	r3, [r0, #16]
 8020476:	690c      	ldr	r4, [r1, #16]
 8020478:	42a3      	cmp	r3, r4
 802047a:	4607      	mov	r7, r0
 802047c:	f2c0 8081 	blt.w	8020582 <quorem+0x112>
 8020480:	3c01      	subs	r4, #1
 8020482:	f101 0814 	add.w	r8, r1, #20
 8020486:	f100 0514 	add.w	r5, r0, #20
 802048a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 802048e:	9301      	str	r3, [sp, #4]
 8020490:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8020494:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8020498:	3301      	adds	r3, #1
 802049a:	429a      	cmp	r2, r3
 802049c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80204a0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80204a4:	fbb2 f6f3 	udiv	r6, r2, r3
 80204a8:	d331      	bcc.n	802050e <quorem+0x9e>
 80204aa:	f04f 0e00 	mov.w	lr, #0
 80204ae:	4640      	mov	r0, r8
 80204b0:	46ac      	mov	ip, r5
 80204b2:	46f2      	mov	sl, lr
 80204b4:	f850 2b04 	ldr.w	r2, [r0], #4
 80204b8:	b293      	uxth	r3, r2
 80204ba:	fb06 e303 	mla	r3, r6, r3, lr
 80204be:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80204c2:	b29b      	uxth	r3, r3
 80204c4:	ebaa 0303 	sub.w	r3, sl, r3
 80204c8:	0c12      	lsrs	r2, r2, #16
 80204ca:	f8dc a000 	ldr.w	sl, [ip]
 80204ce:	fb06 e202 	mla	r2, r6, r2, lr
 80204d2:	fa13 f38a 	uxtah	r3, r3, sl
 80204d6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80204da:	fa1f fa82 	uxth.w	sl, r2
 80204de:	f8dc 2000 	ldr.w	r2, [ip]
 80204e2:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80204e6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80204ea:	b29b      	uxth	r3, r3
 80204ec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80204f0:	4581      	cmp	r9, r0
 80204f2:	f84c 3b04 	str.w	r3, [ip], #4
 80204f6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80204fa:	d2db      	bcs.n	80204b4 <quorem+0x44>
 80204fc:	f855 300b 	ldr.w	r3, [r5, fp]
 8020500:	b92b      	cbnz	r3, 802050e <quorem+0x9e>
 8020502:	9b01      	ldr	r3, [sp, #4]
 8020504:	3b04      	subs	r3, #4
 8020506:	429d      	cmp	r5, r3
 8020508:	461a      	mov	r2, r3
 802050a:	d32e      	bcc.n	802056a <quorem+0xfa>
 802050c:	613c      	str	r4, [r7, #16]
 802050e:	4638      	mov	r0, r7
 8020510:	f001 fd22 	bl	8021f58 <__mcmp>
 8020514:	2800      	cmp	r0, #0
 8020516:	db24      	blt.n	8020562 <quorem+0xf2>
 8020518:	3601      	adds	r6, #1
 802051a:	4628      	mov	r0, r5
 802051c:	f04f 0c00 	mov.w	ip, #0
 8020520:	f858 2b04 	ldr.w	r2, [r8], #4
 8020524:	f8d0 e000 	ldr.w	lr, [r0]
 8020528:	b293      	uxth	r3, r2
 802052a:	ebac 0303 	sub.w	r3, ip, r3
 802052e:	0c12      	lsrs	r2, r2, #16
 8020530:	fa13 f38e 	uxtah	r3, r3, lr
 8020534:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8020538:	eb02 4223 	add.w	r2, r2, r3, asr #16
 802053c:	b29b      	uxth	r3, r3
 802053e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8020542:	45c1      	cmp	r9, r8
 8020544:	f840 3b04 	str.w	r3, [r0], #4
 8020548:	ea4f 4c22 	mov.w	ip, r2, asr #16
 802054c:	d2e8      	bcs.n	8020520 <quorem+0xb0>
 802054e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8020552:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8020556:	b922      	cbnz	r2, 8020562 <quorem+0xf2>
 8020558:	3b04      	subs	r3, #4
 802055a:	429d      	cmp	r5, r3
 802055c:	461a      	mov	r2, r3
 802055e:	d30a      	bcc.n	8020576 <quorem+0x106>
 8020560:	613c      	str	r4, [r7, #16]
 8020562:	4630      	mov	r0, r6
 8020564:	b003      	add	sp, #12
 8020566:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802056a:	6812      	ldr	r2, [r2, #0]
 802056c:	3b04      	subs	r3, #4
 802056e:	2a00      	cmp	r2, #0
 8020570:	d1cc      	bne.n	802050c <quorem+0x9c>
 8020572:	3c01      	subs	r4, #1
 8020574:	e7c7      	b.n	8020506 <quorem+0x96>
 8020576:	6812      	ldr	r2, [r2, #0]
 8020578:	3b04      	subs	r3, #4
 802057a:	2a00      	cmp	r2, #0
 802057c:	d1f0      	bne.n	8020560 <quorem+0xf0>
 802057e:	3c01      	subs	r4, #1
 8020580:	e7eb      	b.n	802055a <quorem+0xea>
 8020582:	2000      	movs	r0, #0
 8020584:	e7ee      	b.n	8020564 <quorem+0xf4>
	...

08020588 <_dtoa_r>:
 8020588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802058c:	ec59 8b10 	vmov	r8, r9, d0
 8020590:	b095      	sub	sp, #84	; 0x54
 8020592:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8020594:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 8020596:	9107      	str	r1, [sp, #28]
 8020598:	e9cd 8902 	strd	r8, r9, [sp, #8]
 802059c:	4606      	mov	r6, r0
 802059e:	9209      	str	r2, [sp, #36]	; 0x24
 80205a0:	9310      	str	r3, [sp, #64]	; 0x40
 80205a2:	b975      	cbnz	r5, 80205c2 <_dtoa_r+0x3a>
 80205a4:	2010      	movs	r0, #16
 80205a6:	f001 f9f5 	bl	8021994 <malloc>
 80205aa:	4602      	mov	r2, r0
 80205ac:	6270      	str	r0, [r6, #36]	; 0x24
 80205ae:	b920      	cbnz	r0, 80205ba <_dtoa_r+0x32>
 80205b0:	4bab      	ldr	r3, [pc, #684]	; (8020860 <_dtoa_r+0x2d8>)
 80205b2:	21ea      	movs	r1, #234	; 0xea
 80205b4:	48ab      	ldr	r0, [pc, #684]	; (8020864 <_dtoa_r+0x2dc>)
 80205b6:	f7ff ff3d 	bl	8020434 <__assert_func>
 80205ba:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80205be:	6005      	str	r5, [r0, #0]
 80205c0:	60c5      	str	r5, [r0, #12]
 80205c2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80205c4:	6819      	ldr	r1, [r3, #0]
 80205c6:	b151      	cbz	r1, 80205de <_dtoa_r+0x56>
 80205c8:	685a      	ldr	r2, [r3, #4]
 80205ca:	604a      	str	r2, [r1, #4]
 80205cc:	2301      	movs	r3, #1
 80205ce:	4093      	lsls	r3, r2
 80205d0:	608b      	str	r3, [r1, #8]
 80205d2:	4630      	mov	r0, r6
 80205d4:	f001 fa38 	bl	8021a48 <_Bfree>
 80205d8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80205da:	2200      	movs	r2, #0
 80205dc:	601a      	str	r2, [r3, #0]
 80205de:	f1b9 0300 	subs.w	r3, r9, #0
 80205e2:	bfbb      	ittet	lt
 80205e4:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80205e8:	9303      	strlt	r3, [sp, #12]
 80205ea:	2300      	movge	r3, #0
 80205ec:	2201      	movlt	r2, #1
 80205ee:	bfac      	ite	ge
 80205f0:	6023      	strge	r3, [r4, #0]
 80205f2:	6022      	strlt	r2, [r4, #0]
 80205f4:	4b9c      	ldr	r3, [pc, #624]	; (8020868 <_dtoa_r+0x2e0>)
 80205f6:	9c03      	ldr	r4, [sp, #12]
 80205f8:	43a3      	bics	r3, r4
 80205fa:	d11a      	bne.n	8020632 <_dtoa_r+0xaa>
 80205fc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80205fe:	f242 730f 	movw	r3, #9999	; 0x270f
 8020602:	6013      	str	r3, [r2, #0]
 8020604:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8020608:	ea53 0308 	orrs.w	r3, r3, r8
 802060c:	f000 8512 	beq.w	8021034 <_dtoa_r+0xaac>
 8020610:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8020612:	b953      	cbnz	r3, 802062a <_dtoa_r+0xa2>
 8020614:	4b95      	ldr	r3, [pc, #596]	; (802086c <_dtoa_r+0x2e4>)
 8020616:	e01f      	b.n	8020658 <_dtoa_r+0xd0>
 8020618:	4b95      	ldr	r3, [pc, #596]	; (8020870 <_dtoa_r+0x2e8>)
 802061a:	9300      	str	r3, [sp, #0]
 802061c:	3308      	adds	r3, #8
 802061e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8020620:	6013      	str	r3, [r2, #0]
 8020622:	9800      	ldr	r0, [sp, #0]
 8020624:	b015      	add	sp, #84	; 0x54
 8020626:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802062a:	4b90      	ldr	r3, [pc, #576]	; (802086c <_dtoa_r+0x2e4>)
 802062c:	9300      	str	r3, [sp, #0]
 802062e:	3303      	adds	r3, #3
 8020630:	e7f5      	b.n	802061e <_dtoa_r+0x96>
 8020632:	ed9d 7b02 	vldr	d7, [sp, #8]
 8020636:	eeb5 7b40 	vcmp.f64	d7, #0.0
 802063a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802063e:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8020642:	d10b      	bne.n	802065c <_dtoa_r+0xd4>
 8020644:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8020646:	2301      	movs	r3, #1
 8020648:	6013      	str	r3, [r2, #0]
 802064a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 802064c:	2b00      	cmp	r3, #0
 802064e:	f000 84ee 	beq.w	802102e <_dtoa_r+0xaa6>
 8020652:	4888      	ldr	r0, [pc, #544]	; (8020874 <_dtoa_r+0x2ec>)
 8020654:	6018      	str	r0, [r3, #0]
 8020656:	1e43      	subs	r3, r0, #1
 8020658:	9300      	str	r3, [sp, #0]
 802065a:	e7e2      	b.n	8020622 <_dtoa_r+0x9a>
 802065c:	a913      	add	r1, sp, #76	; 0x4c
 802065e:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8020662:	aa12      	add	r2, sp, #72	; 0x48
 8020664:	4630      	mov	r0, r6
 8020666:	f001 fd97 	bl	8022198 <__d2b>
 802066a:	f3c4 510a 	ubfx	r1, r4, #20, #11
 802066e:	4605      	mov	r5, r0
 8020670:	9812      	ldr	r0, [sp, #72]	; 0x48
 8020672:	2900      	cmp	r1, #0
 8020674:	d047      	beq.n	8020706 <_dtoa_r+0x17e>
 8020676:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8020678:	f3c4 0413 	ubfx	r4, r4, #0, #20
 802067c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8020680:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8020684:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8020688:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 802068c:	2400      	movs	r4, #0
 802068e:	ec43 2b16 	vmov	d6, r2, r3
 8020692:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8020696:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 8020848 <_dtoa_r+0x2c0>
 802069a:	ee36 7b47 	vsub.f64	d7, d6, d7
 802069e:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 8020850 <_dtoa_r+0x2c8>
 80206a2:	eea7 6b05 	vfma.f64	d6, d7, d5
 80206a6:	eeb0 7b46 	vmov.f64	d7, d6
 80206aa:	ee06 1a90 	vmov	s13, r1
 80206ae:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 80206b2:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8020858 <_dtoa_r+0x2d0>
 80206b6:	eea5 7b06 	vfma.f64	d7, d5, d6
 80206ba:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80206be:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80206c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80206c6:	ee16 ba90 	vmov	fp, s13
 80206ca:	9411      	str	r4, [sp, #68]	; 0x44
 80206cc:	d508      	bpl.n	80206e0 <_dtoa_r+0x158>
 80206ce:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80206d2:	eeb4 6b47 	vcmp.f64	d6, d7
 80206d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80206da:	bf18      	it	ne
 80206dc:	f10b 3bff 	addne.w	fp, fp, #4294967295
 80206e0:	f1bb 0f16 	cmp.w	fp, #22
 80206e4:	d832      	bhi.n	802074c <_dtoa_r+0x1c4>
 80206e6:	4b64      	ldr	r3, [pc, #400]	; (8020878 <_dtoa_r+0x2f0>)
 80206e8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80206ec:	ed93 7b00 	vldr	d7, [r3]
 80206f0:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 80206f4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80206f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80206fc:	d501      	bpl.n	8020702 <_dtoa_r+0x17a>
 80206fe:	f10b 3bff 	add.w	fp, fp, #4294967295
 8020702:	2300      	movs	r3, #0
 8020704:	e023      	b.n	802074e <_dtoa_r+0x1c6>
 8020706:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8020708:	4401      	add	r1, r0
 802070a:	f201 4332 	addw	r3, r1, #1074	; 0x432
 802070e:	2b20      	cmp	r3, #32
 8020710:	bfc3      	ittte	gt
 8020712:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8020716:	fa04 f303 	lslgt.w	r3, r4, r3
 802071a:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 802071e:	f1c3 0320 	rsble	r3, r3, #32
 8020722:	bfc6      	itte	gt
 8020724:	fa28 f804 	lsrgt.w	r8, r8, r4
 8020728:	ea43 0308 	orrgt.w	r3, r3, r8
 802072c:	fa08 f303 	lslle.w	r3, r8, r3
 8020730:	ee07 3a90 	vmov	s15, r3
 8020734:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8020738:	3901      	subs	r1, #1
 802073a:	ed8d 7b00 	vstr	d7, [sp]
 802073e:	9c01      	ldr	r4, [sp, #4]
 8020740:	e9dd 2300 	ldrd	r2, r3, [sp]
 8020744:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8020748:	2401      	movs	r4, #1
 802074a:	e7a0      	b.n	802068e <_dtoa_r+0x106>
 802074c:	2301      	movs	r3, #1
 802074e:	930f      	str	r3, [sp, #60]	; 0x3c
 8020750:	1a43      	subs	r3, r0, r1
 8020752:	1e5a      	subs	r2, r3, #1
 8020754:	bf45      	ittet	mi
 8020756:	f1c3 0301 	rsbmi	r3, r3, #1
 802075a:	9305      	strmi	r3, [sp, #20]
 802075c:	2300      	movpl	r3, #0
 802075e:	2300      	movmi	r3, #0
 8020760:	9206      	str	r2, [sp, #24]
 8020762:	bf54      	ite	pl
 8020764:	9305      	strpl	r3, [sp, #20]
 8020766:	9306      	strmi	r3, [sp, #24]
 8020768:	f1bb 0f00 	cmp.w	fp, #0
 802076c:	db18      	blt.n	80207a0 <_dtoa_r+0x218>
 802076e:	9b06      	ldr	r3, [sp, #24]
 8020770:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8020774:	445b      	add	r3, fp
 8020776:	9306      	str	r3, [sp, #24]
 8020778:	2300      	movs	r3, #0
 802077a:	9a07      	ldr	r2, [sp, #28]
 802077c:	2a09      	cmp	r2, #9
 802077e:	d849      	bhi.n	8020814 <_dtoa_r+0x28c>
 8020780:	2a05      	cmp	r2, #5
 8020782:	bfc4      	itt	gt
 8020784:	3a04      	subgt	r2, #4
 8020786:	9207      	strgt	r2, [sp, #28]
 8020788:	9a07      	ldr	r2, [sp, #28]
 802078a:	f1a2 0202 	sub.w	r2, r2, #2
 802078e:	bfcc      	ite	gt
 8020790:	2400      	movgt	r4, #0
 8020792:	2401      	movle	r4, #1
 8020794:	2a03      	cmp	r2, #3
 8020796:	d848      	bhi.n	802082a <_dtoa_r+0x2a2>
 8020798:	e8df f002 	tbb	[pc, r2]
 802079c:	3a2c2e0b 	.word	0x3a2c2e0b
 80207a0:	9b05      	ldr	r3, [sp, #20]
 80207a2:	2200      	movs	r2, #0
 80207a4:	eba3 030b 	sub.w	r3, r3, fp
 80207a8:	9305      	str	r3, [sp, #20]
 80207aa:	920e      	str	r2, [sp, #56]	; 0x38
 80207ac:	f1cb 0300 	rsb	r3, fp, #0
 80207b0:	e7e3      	b.n	802077a <_dtoa_r+0x1f2>
 80207b2:	2200      	movs	r2, #0
 80207b4:	9208      	str	r2, [sp, #32]
 80207b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80207b8:	2a00      	cmp	r2, #0
 80207ba:	dc39      	bgt.n	8020830 <_dtoa_r+0x2a8>
 80207bc:	f04f 0a01 	mov.w	sl, #1
 80207c0:	46d1      	mov	r9, sl
 80207c2:	4652      	mov	r2, sl
 80207c4:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80207c8:	6a77      	ldr	r7, [r6, #36]	; 0x24
 80207ca:	2100      	movs	r1, #0
 80207cc:	6079      	str	r1, [r7, #4]
 80207ce:	2004      	movs	r0, #4
 80207d0:	f100 0c14 	add.w	ip, r0, #20
 80207d4:	4594      	cmp	ip, r2
 80207d6:	6879      	ldr	r1, [r7, #4]
 80207d8:	d92f      	bls.n	802083a <_dtoa_r+0x2b2>
 80207da:	4630      	mov	r0, r6
 80207dc:	930c      	str	r3, [sp, #48]	; 0x30
 80207de:	f001 f8f3 	bl	80219c8 <_Balloc>
 80207e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80207e4:	9000      	str	r0, [sp, #0]
 80207e6:	4602      	mov	r2, r0
 80207e8:	2800      	cmp	r0, #0
 80207ea:	d149      	bne.n	8020880 <_dtoa_r+0x2f8>
 80207ec:	4b23      	ldr	r3, [pc, #140]	; (802087c <_dtoa_r+0x2f4>)
 80207ee:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80207f2:	e6df      	b.n	80205b4 <_dtoa_r+0x2c>
 80207f4:	2201      	movs	r2, #1
 80207f6:	e7dd      	b.n	80207b4 <_dtoa_r+0x22c>
 80207f8:	2200      	movs	r2, #0
 80207fa:	9208      	str	r2, [sp, #32]
 80207fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80207fe:	eb0b 0a02 	add.w	sl, fp, r2
 8020802:	f10a 0901 	add.w	r9, sl, #1
 8020806:	464a      	mov	r2, r9
 8020808:	2a01      	cmp	r2, #1
 802080a:	bfb8      	it	lt
 802080c:	2201      	movlt	r2, #1
 802080e:	e7db      	b.n	80207c8 <_dtoa_r+0x240>
 8020810:	2201      	movs	r2, #1
 8020812:	e7f2      	b.n	80207fa <_dtoa_r+0x272>
 8020814:	2401      	movs	r4, #1
 8020816:	2200      	movs	r2, #0
 8020818:	e9cd 2407 	strd	r2, r4, [sp, #28]
 802081c:	f04f 3aff 	mov.w	sl, #4294967295
 8020820:	2100      	movs	r1, #0
 8020822:	46d1      	mov	r9, sl
 8020824:	2212      	movs	r2, #18
 8020826:	9109      	str	r1, [sp, #36]	; 0x24
 8020828:	e7ce      	b.n	80207c8 <_dtoa_r+0x240>
 802082a:	2201      	movs	r2, #1
 802082c:	9208      	str	r2, [sp, #32]
 802082e:	e7f5      	b.n	802081c <_dtoa_r+0x294>
 8020830:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8020834:	46d1      	mov	r9, sl
 8020836:	4652      	mov	r2, sl
 8020838:	e7c6      	b.n	80207c8 <_dtoa_r+0x240>
 802083a:	3101      	adds	r1, #1
 802083c:	6079      	str	r1, [r7, #4]
 802083e:	0040      	lsls	r0, r0, #1
 8020840:	e7c6      	b.n	80207d0 <_dtoa_r+0x248>
 8020842:	bf00      	nop
 8020844:	f3af 8000 	nop.w
 8020848:	636f4361 	.word	0x636f4361
 802084c:	3fd287a7 	.word	0x3fd287a7
 8020850:	8b60c8b3 	.word	0x8b60c8b3
 8020854:	3fc68a28 	.word	0x3fc68a28
 8020858:	509f79fb 	.word	0x509f79fb
 802085c:	3fd34413 	.word	0x3fd34413
 8020860:	080272ed 	.word	0x080272ed
 8020864:	08027401 	.word	0x08027401
 8020868:	7ff00000 	.word	0x7ff00000
 802086c:	080273fd 	.word	0x080273fd
 8020870:	080273f4 	.word	0x080273f4
 8020874:	080272c5 	.word	0x080272c5
 8020878:	080275e0 	.word	0x080275e0
 802087c:	08027460 	.word	0x08027460
 8020880:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8020882:	9900      	ldr	r1, [sp, #0]
 8020884:	6011      	str	r1, [r2, #0]
 8020886:	f1b9 0f0e 	cmp.w	r9, #14
 802088a:	d872      	bhi.n	8020972 <_dtoa_r+0x3ea>
 802088c:	2c00      	cmp	r4, #0
 802088e:	d070      	beq.n	8020972 <_dtoa_r+0x3ea>
 8020890:	f1bb 0f00 	cmp.w	fp, #0
 8020894:	f340 80a6 	ble.w	80209e4 <_dtoa_r+0x45c>
 8020898:	49ca      	ldr	r1, [pc, #808]	; (8020bc4 <_dtoa_r+0x63c>)
 802089a:	f00b 020f 	and.w	r2, fp, #15
 802089e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 80208a2:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80208a6:	ed92 7b00 	vldr	d7, [r2]
 80208aa:	ea4f 112b 	mov.w	r1, fp, asr #4
 80208ae:	f000 808d 	beq.w	80209cc <_dtoa_r+0x444>
 80208b2:	4ac5      	ldr	r2, [pc, #788]	; (8020bc8 <_dtoa_r+0x640>)
 80208b4:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 80208b8:	ed92 6b08 	vldr	d6, [r2, #32]
 80208bc:	ee85 6b06 	vdiv.f64	d6, d5, d6
 80208c0:	ed8d 6b02 	vstr	d6, [sp, #8]
 80208c4:	f001 010f 	and.w	r1, r1, #15
 80208c8:	2203      	movs	r2, #3
 80208ca:	48bf      	ldr	r0, [pc, #764]	; (8020bc8 <_dtoa_r+0x640>)
 80208cc:	2900      	cmp	r1, #0
 80208ce:	d17f      	bne.n	80209d0 <_dtoa_r+0x448>
 80208d0:	ed9d 6b02 	vldr	d6, [sp, #8]
 80208d4:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80208d8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80208dc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80208de:	2900      	cmp	r1, #0
 80208e0:	f000 80b2 	beq.w	8020a48 <_dtoa_r+0x4c0>
 80208e4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80208e8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80208ec:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80208f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80208f4:	f140 80a8 	bpl.w	8020a48 <_dtoa_r+0x4c0>
 80208f8:	f1b9 0f00 	cmp.w	r9, #0
 80208fc:	f000 80a4 	beq.w	8020a48 <_dtoa_r+0x4c0>
 8020900:	f1ba 0f00 	cmp.w	sl, #0
 8020904:	dd31      	ble.n	802096a <_dtoa_r+0x3e2>
 8020906:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 802090a:	ee27 7b06 	vmul.f64	d7, d7, d6
 802090e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8020912:	f10b 37ff 	add.w	r7, fp, #4294967295
 8020916:	3201      	adds	r2, #1
 8020918:	4650      	mov	r0, sl
 802091a:	ed9d 6b02 	vldr	d6, [sp, #8]
 802091e:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8020922:	ee07 2a90 	vmov	s15, r2
 8020926:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 802092a:	eea7 5b06 	vfma.f64	d5, d7, d6
 802092e:	ed8d 5b02 	vstr	d5, [sp, #8]
 8020932:	9c03      	ldr	r4, [sp, #12]
 8020934:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8020938:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 802093c:	2800      	cmp	r0, #0
 802093e:	f040 8086 	bne.w	8020a4e <_dtoa_r+0x4c6>
 8020942:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8020946:	ee36 6b47 	vsub.f64	d6, d6, d7
 802094a:	ec42 1b17 	vmov	d7, r1, r2
 802094e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8020952:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020956:	f300 8272 	bgt.w	8020e3e <_dtoa_r+0x8b6>
 802095a:	eeb1 7b47 	vneg.f64	d7, d7
 802095e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8020962:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020966:	f100 8267 	bmi.w	8020e38 <_dtoa_r+0x8b0>
 802096a:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 802096e:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8020972:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8020974:	2a00      	cmp	r2, #0
 8020976:	f2c0 8129 	blt.w	8020bcc <_dtoa_r+0x644>
 802097a:	f1bb 0f0e 	cmp.w	fp, #14
 802097e:	f300 8125 	bgt.w	8020bcc <_dtoa_r+0x644>
 8020982:	4b90      	ldr	r3, [pc, #576]	; (8020bc4 <_dtoa_r+0x63c>)
 8020984:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8020988:	ed93 6b00 	vldr	d6, [r3]
 802098c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802098e:	2b00      	cmp	r3, #0
 8020990:	f280 80c3 	bge.w	8020b1a <_dtoa_r+0x592>
 8020994:	f1b9 0f00 	cmp.w	r9, #0
 8020998:	f300 80bf 	bgt.w	8020b1a <_dtoa_r+0x592>
 802099c:	f040 824c 	bne.w	8020e38 <_dtoa_r+0x8b0>
 80209a0:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80209a4:	ee26 6b07 	vmul.f64	d6, d6, d7
 80209a8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80209ac:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80209b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80209b4:	464c      	mov	r4, r9
 80209b6:	464f      	mov	r7, r9
 80209b8:	f280 8222 	bge.w	8020e00 <_dtoa_r+0x878>
 80209bc:	f8dd 8000 	ldr.w	r8, [sp]
 80209c0:	2331      	movs	r3, #49	; 0x31
 80209c2:	f808 3b01 	strb.w	r3, [r8], #1
 80209c6:	f10b 0b01 	add.w	fp, fp, #1
 80209ca:	e21e      	b.n	8020e0a <_dtoa_r+0x882>
 80209cc:	2202      	movs	r2, #2
 80209ce:	e77c      	b.n	80208ca <_dtoa_r+0x342>
 80209d0:	07cc      	lsls	r4, r1, #31
 80209d2:	d504      	bpl.n	80209de <_dtoa_r+0x456>
 80209d4:	ed90 6b00 	vldr	d6, [r0]
 80209d8:	3201      	adds	r2, #1
 80209da:	ee27 7b06 	vmul.f64	d7, d7, d6
 80209de:	1049      	asrs	r1, r1, #1
 80209e0:	3008      	adds	r0, #8
 80209e2:	e773      	b.n	80208cc <_dtoa_r+0x344>
 80209e4:	d02e      	beq.n	8020a44 <_dtoa_r+0x4bc>
 80209e6:	f1cb 0100 	rsb	r1, fp, #0
 80209ea:	4a76      	ldr	r2, [pc, #472]	; (8020bc4 <_dtoa_r+0x63c>)
 80209ec:	f001 000f 	and.w	r0, r1, #15
 80209f0:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80209f4:	ed92 7b00 	vldr	d7, [r2]
 80209f8:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 80209fc:	ee26 7b07 	vmul.f64	d7, d6, d7
 8020a00:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8020a04:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 8020a08:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8020a0c:	486e      	ldr	r0, [pc, #440]	; (8020bc8 <_dtoa_r+0x640>)
 8020a0e:	1109      	asrs	r1, r1, #4
 8020a10:	2400      	movs	r4, #0
 8020a12:	2202      	movs	r2, #2
 8020a14:	b939      	cbnz	r1, 8020a26 <_dtoa_r+0x49e>
 8020a16:	2c00      	cmp	r4, #0
 8020a18:	f43f af60 	beq.w	80208dc <_dtoa_r+0x354>
 8020a1c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8020a20:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8020a24:	e75a      	b.n	80208dc <_dtoa_r+0x354>
 8020a26:	07cf      	lsls	r7, r1, #31
 8020a28:	d509      	bpl.n	8020a3e <_dtoa_r+0x4b6>
 8020a2a:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 8020a2e:	ed90 7b00 	vldr	d7, [r0]
 8020a32:	ee26 7b07 	vmul.f64	d7, d6, d7
 8020a36:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8020a3a:	3201      	adds	r2, #1
 8020a3c:	2401      	movs	r4, #1
 8020a3e:	1049      	asrs	r1, r1, #1
 8020a40:	3008      	adds	r0, #8
 8020a42:	e7e7      	b.n	8020a14 <_dtoa_r+0x48c>
 8020a44:	2202      	movs	r2, #2
 8020a46:	e749      	b.n	80208dc <_dtoa_r+0x354>
 8020a48:	465f      	mov	r7, fp
 8020a4a:	4648      	mov	r0, r9
 8020a4c:	e765      	b.n	802091a <_dtoa_r+0x392>
 8020a4e:	ec42 1b17 	vmov	d7, r1, r2
 8020a52:	4a5c      	ldr	r2, [pc, #368]	; (8020bc4 <_dtoa_r+0x63c>)
 8020a54:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8020a58:	ed12 4b02 	vldr	d4, [r2, #-8]
 8020a5c:	9a00      	ldr	r2, [sp, #0]
 8020a5e:	1814      	adds	r4, r2, r0
 8020a60:	9a08      	ldr	r2, [sp, #32]
 8020a62:	b352      	cbz	r2, 8020aba <_dtoa_r+0x532>
 8020a64:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8020a68:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8020a6c:	f8dd 8000 	ldr.w	r8, [sp]
 8020a70:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8020a74:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8020a78:	ee35 7b47 	vsub.f64	d7, d5, d7
 8020a7c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8020a80:	ee14 2a90 	vmov	r2, s9
 8020a84:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8020a88:	3230      	adds	r2, #48	; 0x30
 8020a8a:	ee36 6b45 	vsub.f64	d6, d6, d5
 8020a8e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8020a92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020a96:	f808 2b01 	strb.w	r2, [r8], #1
 8020a9a:	d439      	bmi.n	8020b10 <_dtoa_r+0x588>
 8020a9c:	ee32 5b46 	vsub.f64	d5, d2, d6
 8020aa0:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8020aa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020aa8:	d472      	bmi.n	8020b90 <_dtoa_r+0x608>
 8020aaa:	45a0      	cmp	r8, r4
 8020aac:	f43f af5d 	beq.w	802096a <_dtoa_r+0x3e2>
 8020ab0:	ee27 7b03 	vmul.f64	d7, d7, d3
 8020ab4:	ee26 6b03 	vmul.f64	d6, d6, d3
 8020ab8:	e7e0      	b.n	8020a7c <_dtoa_r+0x4f4>
 8020aba:	f8dd 8000 	ldr.w	r8, [sp]
 8020abe:	ee27 7b04 	vmul.f64	d7, d7, d4
 8020ac2:	4621      	mov	r1, r4
 8020ac4:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8020ac8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8020acc:	ee14 2a90 	vmov	r2, s9
 8020ad0:	3230      	adds	r2, #48	; 0x30
 8020ad2:	f808 2b01 	strb.w	r2, [r8], #1
 8020ad6:	45a0      	cmp	r8, r4
 8020ad8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8020adc:	ee36 6b45 	vsub.f64	d6, d6, d5
 8020ae0:	d118      	bne.n	8020b14 <_dtoa_r+0x58c>
 8020ae2:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8020ae6:	ee37 4b05 	vadd.f64	d4, d7, d5
 8020aea:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8020aee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020af2:	dc4d      	bgt.n	8020b90 <_dtoa_r+0x608>
 8020af4:	ee35 7b47 	vsub.f64	d7, d5, d7
 8020af8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8020afc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020b00:	f57f af33 	bpl.w	802096a <_dtoa_r+0x3e2>
 8020b04:	4688      	mov	r8, r1
 8020b06:	3901      	subs	r1, #1
 8020b08:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8020b0c:	2b30      	cmp	r3, #48	; 0x30
 8020b0e:	d0f9      	beq.n	8020b04 <_dtoa_r+0x57c>
 8020b10:	46bb      	mov	fp, r7
 8020b12:	e02a      	b.n	8020b6a <_dtoa_r+0x5e2>
 8020b14:	ee26 6b03 	vmul.f64	d6, d6, d3
 8020b18:	e7d6      	b.n	8020ac8 <_dtoa_r+0x540>
 8020b1a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8020b1e:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8020b22:	f8dd 8000 	ldr.w	r8, [sp]
 8020b26:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8020b2a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8020b2e:	ee15 3a10 	vmov	r3, s10
 8020b32:	3330      	adds	r3, #48	; 0x30
 8020b34:	f808 3b01 	strb.w	r3, [r8], #1
 8020b38:	9b00      	ldr	r3, [sp, #0]
 8020b3a:	eba8 0303 	sub.w	r3, r8, r3
 8020b3e:	4599      	cmp	r9, r3
 8020b40:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8020b44:	eea3 7b46 	vfms.f64	d7, d3, d6
 8020b48:	d133      	bne.n	8020bb2 <_dtoa_r+0x62a>
 8020b4a:	ee37 7b07 	vadd.f64	d7, d7, d7
 8020b4e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8020b52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020b56:	dc1a      	bgt.n	8020b8e <_dtoa_r+0x606>
 8020b58:	eeb4 7b46 	vcmp.f64	d7, d6
 8020b5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020b60:	d103      	bne.n	8020b6a <_dtoa_r+0x5e2>
 8020b62:	ee15 3a10 	vmov	r3, s10
 8020b66:	07d9      	lsls	r1, r3, #31
 8020b68:	d411      	bmi.n	8020b8e <_dtoa_r+0x606>
 8020b6a:	4629      	mov	r1, r5
 8020b6c:	4630      	mov	r0, r6
 8020b6e:	f000 ff6b 	bl	8021a48 <_Bfree>
 8020b72:	2300      	movs	r3, #0
 8020b74:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8020b76:	f888 3000 	strb.w	r3, [r8]
 8020b7a:	f10b 0301 	add.w	r3, fp, #1
 8020b7e:	6013      	str	r3, [r2, #0]
 8020b80:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8020b82:	2b00      	cmp	r3, #0
 8020b84:	f43f ad4d 	beq.w	8020622 <_dtoa_r+0x9a>
 8020b88:	f8c3 8000 	str.w	r8, [r3]
 8020b8c:	e549      	b.n	8020622 <_dtoa_r+0x9a>
 8020b8e:	465f      	mov	r7, fp
 8020b90:	4643      	mov	r3, r8
 8020b92:	4698      	mov	r8, r3
 8020b94:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8020b98:	2a39      	cmp	r2, #57	; 0x39
 8020b9a:	d106      	bne.n	8020baa <_dtoa_r+0x622>
 8020b9c:	9a00      	ldr	r2, [sp, #0]
 8020b9e:	429a      	cmp	r2, r3
 8020ba0:	d1f7      	bne.n	8020b92 <_dtoa_r+0x60a>
 8020ba2:	9900      	ldr	r1, [sp, #0]
 8020ba4:	2230      	movs	r2, #48	; 0x30
 8020ba6:	3701      	adds	r7, #1
 8020ba8:	700a      	strb	r2, [r1, #0]
 8020baa:	781a      	ldrb	r2, [r3, #0]
 8020bac:	3201      	adds	r2, #1
 8020bae:	701a      	strb	r2, [r3, #0]
 8020bb0:	e7ae      	b.n	8020b10 <_dtoa_r+0x588>
 8020bb2:	ee27 7b04 	vmul.f64	d7, d7, d4
 8020bb6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8020bba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020bbe:	d1b2      	bne.n	8020b26 <_dtoa_r+0x59e>
 8020bc0:	e7d3      	b.n	8020b6a <_dtoa_r+0x5e2>
 8020bc2:	bf00      	nop
 8020bc4:	080275e0 	.word	0x080275e0
 8020bc8:	080275b8 	.word	0x080275b8
 8020bcc:	9908      	ldr	r1, [sp, #32]
 8020bce:	2900      	cmp	r1, #0
 8020bd0:	f000 80d1 	beq.w	8020d76 <_dtoa_r+0x7ee>
 8020bd4:	9907      	ldr	r1, [sp, #28]
 8020bd6:	2901      	cmp	r1, #1
 8020bd8:	f300 80b4 	bgt.w	8020d44 <_dtoa_r+0x7bc>
 8020bdc:	9911      	ldr	r1, [sp, #68]	; 0x44
 8020bde:	2900      	cmp	r1, #0
 8020be0:	f000 80ac 	beq.w	8020d3c <_dtoa_r+0x7b4>
 8020be4:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8020be8:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8020bec:	461c      	mov	r4, r3
 8020bee:	930a      	str	r3, [sp, #40]	; 0x28
 8020bf0:	9b05      	ldr	r3, [sp, #20]
 8020bf2:	4413      	add	r3, r2
 8020bf4:	9305      	str	r3, [sp, #20]
 8020bf6:	9b06      	ldr	r3, [sp, #24]
 8020bf8:	2101      	movs	r1, #1
 8020bfa:	4413      	add	r3, r2
 8020bfc:	4630      	mov	r0, r6
 8020bfe:	9306      	str	r3, [sp, #24]
 8020c00:	f001 f828 	bl	8021c54 <__i2b>
 8020c04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020c06:	4607      	mov	r7, r0
 8020c08:	f1b8 0f00 	cmp.w	r8, #0
 8020c0c:	dd0d      	ble.n	8020c2a <_dtoa_r+0x6a2>
 8020c0e:	9a06      	ldr	r2, [sp, #24]
 8020c10:	2a00      	cmp	r2, #0
 8020c12:	dd0a      	ble.n	8020c2a <_dtoa_r+0x6a2>
 8020c14:	4542      	cmp	r2, r8
 8020c16:	9905      	ldr	r1, [sp, #20]
 8020c18:	bfa8      	it	ge
 8020c1a:	4642      	movge	r2, r8
 8020c1c:	1a89      	subs	r1, r1, r2
 8020c1e:	9105      	str	r1, [sp, #20]
 8020c20:	9906      	ldr	r1, [sp, #24]
 8020c22:	eba8 0802 	sub.w	r8, r8, r2
 8020c26:	1a8a      	subs	r2, r1, r2
 8020c28:	9206      	str	r2, [sp, #24]
 8020c2a:	b303      	cbz	r3, 8020c6e <_dtoa_r+0x6e6>
 8020c2c:	9a08      	ldr	r2, [sp, #32]
 8020c2e:	2a00      	cmp	r2, #0
 8020c30:	f000 80a6 	beq.w	8020d80 <_dtoa_r+0x7f8>
 8020c34:	2c00      	cmp	r4, #0
 8020c36:	dd13      	ble.n	8020c60 <_dtoa_r+0x6d8>
 8020c38:	4639      	mov	r1, r7
 8020c3a:	4622      	mov	r2, r4
 8020c3c:	4630      	mov	r0, r6
 8020c3e:	930c      	str	r3, [sp, #48]	; 0x30
 8020c40:	f001 f8c4 	bl	8021dcc <__pow5mult>
 8020c44:	462a      	mov	r2, r5
 8020c46:	4601      	mov	r1, r0
 8020c48:	4607      	mov	r7, r0
 8020c4a:	4630      	mov	r0, r6
 8020c4c:	f001 f818 	bl	8021c80 <__multiply>
 8020c50:	4629      	mov	r1, r5
 8020c52:	900a      	str	r0, [sp, #40]	; 0x28
 8020c54:	4630      	mov	r0, r6
 8020c56:	f000 fef7 	bl	8021a48 <_Bfree>
 8020c5a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8020c5c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020c5e:	4615      	mov	r5, r2
 8020c60:	1b1a      	subs	r2, r3, r4
 8020c62:	d004      	beq.n	8020c6e <_dtoa_r+0x6e6>
 8020c64:	4629      	mov	r1, r5
 8020c66:	4630      	mov	r0, r6
 8020c68:	f001 f8b0 	bl	8021dcc <__pow5mult>
 8020c6c:	4605      	mov	r5, r0
 8020c6e:	2101      	movs	r1, #1
 8020c70:	4630      	mov	r0, r6
 8020c72:	f000 ffef 	bl	8021c54 <__i2b>
 8020c76:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020c78:	2b00      	cmp	r3, #0
 8020c7a:	4604      	mov	r4, r0
 8020c7c:	f340 8082 	ble.w	8020d84 <_dtoa_r+0x7fc>
 8020c80:	461a      	mov	r2, r3
 8020c82:	4601      	mov	r1, r0
 8020c84:	4630      	mov	r0, r6
 8020c86:	f001 f8a1 	bl	8021dcc <__pow5mult>
 8020c8a:	9b07      	ldr	r3, [sp, #28]
 8020c8c:	2b01      	cmp	r3, #1
 8020c8e:	4604      	mov	r4, r0
 8020c90:	dd7b      	ble.n	8020d8a <_dtoa_r+0x802>
 8020c92:	2300      	movs	r3, #0
 8020c94:	930a      	str	r3, [sp, #40]	; 0x28
 8020c96:	6922      	ldr	r2, [r4, #16]
 8020c98:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8020c9c:	6910      	ldr	r0, [r2, #16]
 8020c9e:	f000 ff89 	bl	8021bb4 <__hi0bits>
 8020ca2:	f1c0 0020 	rsb	r0, r0, #32
 8020ca6:	9b06      	ldr	r3, [sp, #24]
 8020ca8:	4418      	add	r0, r3
 8020caa:	f010 001f 	ands.w	r0, r0, #31
 8020cae:	f000 808d 	beq.w	8020dcc <_dtoa_r+0x844>
 8020cb2:	f1c0 0220 	rsb	r2, r0, #32
 8020cb6:	2a04      	cmp	r2, #4
 8020cb8:	f340 8086 	ble.w	8020dc8 <_dtoa_r+0x840>
 8020cbc:	f1c0 001c 	rsb	r0, r0, #28
 8020cc0:	9b05      	ldr	r3, [sp, #20]
 8020cc2:	4403      	add	r3, r0
 8020cc4:	9305      	str	r3, [sp, #20]
 8020cc6:	9b06      	ldr	r3, [sp, #24]
 8020cc8:	4403      	add	r3, r0
 8020cca:	4480      	add	r8, r0
 8020ccc:	9306      	str	r3, [sp, #24]
 8020cce:	9b05      	ldr	r3, [sp, #20]
 8020cd0:	2b00      	cmp	r3, #0
 8020cd2:	dd05      	ble.n	8020ce0 <_dtoa_r+0x758>
 8020cd4:	4629      	mov	r1, r5
 8020cd6:	461a      	mov	r2, r3
 8020cd8:	4630      	mov	r0, r6
 8020cda:	f001 f8d1 	bl	8021e80 <__lshift>
 8020cde:	4605      	mov	r5, r0
 8020ce0:	9b06      	ldr	r3, [sp, #24]
 8020ce2:	2b00      	cmp	r3, #0
 8020ce4:	dd05      	ble.n	8020cf2 <_dtoa_r+0x76a>
 8020ce6:	4621      	mov	r1, r4
 8020ce8:	461a      	mov	r2, r3
 8020cea:	4630      	mov	r0, r6
 8020cec:	f001 f8c8 	bl	8021e80 <__lshift>
 8020cf0:	4604      	mov	r4, r0
 8020cf2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8020cf4:	2b00      	cmp	r3, #0
 8020cf6:	d06b      	beq.n	8020dd0 <_dtoa_r+0x848>
 8020cf8:	4621      	mov	r1, r4
 8020cfa:	4628      	mov	r0, r5
 8020cfc:	f001 f92c 	bl	8021f58 <__mcmp>
 8020d00:	2800      	cmp	r0, #0
 8020d02:	da65      	bge.n	8020dd0 <_dtoa_r+0x848>
 8020d04:	2300      	movs	r3, #0
 8020d06:	4629      	mov	r1, r5
 8020d08:	220a      	movs	r2, #10
 8020d0a:	4630      	mov	r0, r6
 8020d0c:	f000 febe 	bl	8021a8c <__multadd>
 8020d10:	9b08      	ldr	r3, [sp, #32]
 8020d12:	f10b 3bff 	add.w	fp, fp, #4294967295
 8020d16:	4605      	mov	r5, r0
 8020d18:	2b00      	cmp	r3, #0
 8020d1a:	f000 8192 	beq.w	8021042 <_dtoa_r+0xaba>
 8020d1e:	4639      	mov	r1, r7
 8020d20:	2300      	movs	r3, #0
 8020d22:	220a      	movs	r2, #10
 8020d24:	4630      	mov	r0, r6
 8020d26:	f000 feb1 	bl	8021a8c <__multadd>
 8020d2a:	f1ba 0f00 	cmp.w	sl, #0
 8020d2e:	4607      	mov	r7, r0
 8020d30:	f300 808e 	bgt.w	8020e50 <_dtoa_r+0x8c8>
 8020d34:	9b07      	ldr	r3, [sp, #28]
 8020d36:	2b02      	cmp	r3, #2
 8020d38:	dc51      	bgt.n	8020dde <_dtoa_r+0x856>
 8020d3a:	e089      	b.n	8020e50 <_dtoa_r+0x8c8>
 8020d3c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8020d3e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8020d42:	e751      	b.n	8020be8 <_dtoa_r+0x660>
 8020d44:	f109 34ff 	add.w	r4, r9, #4294967295
 8020d48:	42a3      	cmp	r3, r4
 8020d4a:	bfbf      	itttt	lt
 8020d4c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8020d4e:	1ae3      	sublt	r3, r4, r3
 8020d50:	18d2      	addlt	r2, r2, r3
 8020d52:	4613      	movlt	r3, r2
 8020d54:	bfb7      	itett	lt
 8020d56:	930e      	strlt	r3, [sp, #56]	; 0x38
 8020d58:	1b1c      	subge	r4, r3, r4
 8020d5a:	4623      	movlt	r3, r4
 8020d5c:	2400      	movlt	r4, #0
 8020d5e:	f1b9 0f00 	cmp.w	r9, #0
 8020d62:	bfb5      	itete	lt
 8020d64:	9a05      	ldrlt	r2, [sp, #20]
 8020d66:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 8020d6a:	eba2 0809 	sublt.w	r8, r2, r9
 8020d6e:	464a      	movge	r2, r9
 8020d70:	bfb8      	it	lt
 8020d72:	2200      	movlt	r2, #0
 8020d74:	e73b      	b.n	8020bee <_dtoa_r+0x666>
 8020d76:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8020d7a:	9f08      	ldr	r7, [sp, #32]
 8020d7c:	461c      	mov	r4, r3
 8020d7e:	e743      	b.n	8020c08 <_dtoa_r+0x680>
 8020d80:	461a      	mov	r2, r3
 8020d82:	e76f      	b.n	8020c64 <_dtoa_r+0x6dc>
 8020d84:	9b07      	ldr	r3, [sp, #28]
 8020d86:	2b01      	cmp	r3, #1
 8020d88:	dc18      	bgt.n	8020dbc <_dtoa_r+0x834>
 8020d8a:	9b02      	ldr	r3, [sp, #8]
 8020d8c:	b9b3      	cbnz	r3, 8020dbc <_dtoa_r+0x834>
 8020d8e:	9b03      	ldr	r3, [sp, #12]
 8020d90:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8020d94:	b9a2      	cbnz	r2, 8020dc0 <_dtoa_r+0x838>
 8020d96:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8020d9a:	0d12      	lsrs	r2, r2, #20
 8020d9c:	0512      	lsls	r2, r2, #20
 8020d9e:	b18a      	cbz	r2, 8020dc4 <_dtoa_r+0x83c>
 8020da0:	9b05      	ldr	r3, [sp, #20]
 8020da2:	3301      	adds	r3, #1
 8020da4:	9305      	str	r3, [sp, #20]
 8020da6:	9b06      	ldr	r3, [sp, #24]
 8020da8:	3301      	adds	r3, #1
 8020daa:	9306      	str	r3, [sp, #24]
 8020dac:	2301      	movs	r3, #1
 8020dae:	930a      	str	r3, [sp, #40]	; 0x28
 8020db0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020db2:	2b00      	cmp	r3, #0
 8020db4:	f47f af6f 	bne.w	8020c96 <_dtoa_r+0x70e>
 8020db8:	2001      	movs	r0, #1
 8020dba:	e774      	b.n	8020ca6 <_dtoa_r+0x71e>
 8020dbc:	2300      	movs	r3, #0
 8020dbe:	e7f6      	b.n	8020dae <_dtoa_r+0x826>
 8020dc0:	9b02      	ldr	r3, [sp, #8]
 8020dc2:	e7f4      	b.n	8020dae <_dtoa_r+0x826>
 8020dc4:	920a      	str	r2, [sp, #40]	; 0x28
 8020dc6:	e7f3      	b.n	8020db0 <_dtoa_r+0x828>
 8020dc8:	d081      	beq.n	8020cce <_dtoa_r+0x746>
 8020dca:	4610      	mov	r0, r2
 8020dcc:	301c      	adds	r0, #28
 8020dce:	e777      	b.n	8020cc0 <_dtoa_r+0x738>
 8020dd0:	f1b9 0f00 	cmp.w	r9, #0
 8020dd4:	dc37      	bgt.n	8020e46 <_dtoa_r+0x8be>
 8020dd6:	9b07      	ldr	r3, [sp, #28]
 8020dd8:	2b02      	cmp	r3, #2
 8020dda:	dd34      	ble.n	8020e46 <_dtoa_r+0x8be>
 8020ddc:	46ca      	mov	sl, r9
 8020dde:	f1ba 0f00 	cmp.w	sl, #0
 8020de2:	d10d      	bne.n	8020e00 <_dtoa_r+0x878>
 8020de4:	4621      	mov	r1, r4
 8020de6:	4653      	mov	r3, sl
 8020de8:	2205      	movs	r2, #5
 8020dea:	4630      	mov	r0, r6
 8020dec:	f000 fe4e 	bl	8021a8c <__multadd>
 8020df0:	4601      	mov	r1, r0
 8020df2:	4604      	mov	r4, r0
 8020df4:	4628      	mov	r0, r5
 8020df6:	f001 f8af 	bl	8021f58 <__mcmp>
 8020dfa:	2800      	cmp	r0, #0
 8020dfc:	f73f adde 	bgt.w	80209bc <_dtoa_r+0x434>
 8020e00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020e02:	f8dd 8000 	ldr.w	r8, [sp]
 8020e06:	ea6f 0b03 	mvn.w	fp, r3
 8020e0a:	f04f 0900 	mov.w	r9, #0
 8020e0e:	4621      	mov	r1, r4
 8020e10:	4630      	mov	r0, r6
 8020e12:	f000 fe19 	bl	8021a48 <_Bfree>
 8020e16:	2f00      	cmp	r7, #0
 8020e18:	f43f aea7 	beq.w	8020b6a <_dtoa_r+0x5e2>
 8020e1c:	f1b9 0f00 	cmp.w	r9, #0
 8020e20:	d005      	beq.n	8020e2e <_dtoa_r+0x8a6>
 8020e22:	45b9      	cmp	r9, r7
 8020e24:	d003      	beq.n	8020e2e <_dtoa_r+0x8a6>
 8020e26:	4649      	mov	r1, r9
 8020e28:	4630      	mov	r0, r6
 8020e2a:	f000 fe0d 	bl	8021a48 <_Bfree>
 8020e2e:	4639      	mov	r1, r7
 8020e30:	4630      	mov	r0, r6
 8020e32:	f000 fe09 	bl	8021a48 <_Bfree>
 8020e36:	e698      	b.n	8020b6a <_dtoa_r+0x5e2>
 8020e38:	2400      	movs	r4, #0
 8020e3a:	4627      	mov	r7, r4
 8020e3c:	e7e0      	b.n	8020e00 <_dtoa_r+0x878>
 8020e3e:	46bb      	mov	fp, r7
 8020e40:	4604      	mov	r4, r0
 8020e42:	4607      	mov	r7, r0
 8020e44:	e5ba      	b.n	80209bc <_dtoa_r+0x434>
 8020e46:	9b08      	ldr	r3, [sp, #32]
 8020e48:	46ca      	mov	sl, r9
 8020e4a:	2b00      	cmp	r3, #0
 8020e4c:	f000 8100 	beq.w	8021050 <_dtoa_r+0xac8>
 8020e50:	f1b8 0f00 	cmp.w	r8, #0
 8020e54:	dd05      	ble.n	8020e62 <_dtoa_r+0x8da>
 8020e56:	4639      	mov	r1, r7
 8020e58:	4642      	mov	r2, r8
 8020e5a:	4630      	mov	r0, r6
 8020e5c:	f001 f810 	bl	8021e80 <__lshift>
 8020e60:	4607      	mov	r7, r0
 8020e62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020e64:	2b00      	cmp	r3, #0
 8020e66:	d05d      	beq.n	8020f24 <_dtoa_r+0x99c>
 8020e68:	6879      	ldr	r1, [r7, #4]
 8020e6a:	4630      	mov	r0, r6
 8020e6c:	f000 fdac 	bl	80219c8 <_Balloc>
 8020e70:	4680      	mov	r8, r0
 8020e72:	b928      	cbnz	r0, 8020e80 <_dtoa_r+0x8f8>
 8020e74:	4b82      	ldr	r3, [pc, #520]	; (8021080 <_dtoa_r+0xaf8>)
 8020e76:	4602      	mov	r2, r0
 8020e78:	f240 21ea 	movw	r1, #746	; 0x2ea
 8020e7c:	f7ff bb9a 	b.w	80205b4 <_dtoa_r+0x2c>
 8020e80:	693a      	ldr	r2, [r7, #16]
 8020e82:	3202      	adds	r2, #2
 8020e84:	0092      	lsls	r2, r2, #2
 8020e86:	f107 010c 	add.w	r1, r7, #12
 8020e8a:	300c      	adds	r0, #12
 8020e8c:	f7fd fd44 	bl	801e918 <memcpy>
 8020e90:	2201      	movs	r2, #1
 8020e92:	4641      	mov	r1, r8
 8020e94:	4630      	mov	r0, r6
 8020e96:	f000 fff3 	bl	8021e80 <__lshift>
 8020e9a:	9b00      	ldr	r3, [sp, #0]
 8020e9c:	3301      	adds	r3, #1
 8020e9e:	9305      	str	r3, [sp, #20]
 8020ea0:	9b00      	ldr	r3, [sp, #0]
 8020ea2:	4453      	add	r3, sl
 8020ea4:	9309      	str	r3, [sp, #36]	; 0x24
 8020ea6:	9b02      	ldr	r3, [sp, #8]
 8020ea8:	f003 0301 	and.w	r3, r3, #1
 8020eac:	46b9      	mov	r9, r7
 8020eae:	9308      	str	r3, [sp, #32]
 8020eb0:	4607      	mov	r7, r0
 8020eb2:	9b05      	ldr	r3, [sp, #20]
 8020eb4:	4621      	mov	r1, r4
 8020eb6:	3b01      	subs	r3, #1
 8020eb8:	4628      	mov	r0, r5
 8020eba:	9302      	str	r3, [sp, #8]
 8020ebc:	f7ff fad8 	bl	8020470 <quorem>
 8020ec0:	4603      	mov	r3, r0
 8020ec2:	3330      	adds	r3, #48	; 0x30
 8020ec4:	9006      	str	r0, [sp, #24]
 8020ec6:	4649      	mov	r1, r9
 8020ec8:	4628      	mov	r0, r5
 8020eca:	930a      	str	r3, [sp, #40]	; 0x28
 8020ecc:	f001 f844 	bl	8021f58 <__mcmp>
 8020ed0:	463a      	mov	r2, r7
 8020ed2:	4682      	mov	sl, r0
 8020ed4:	4621      	mov	r1, r4
 8020ed6:	4630      	mov	r0, r6
 8020ed8:	f001 f85a 	bl	8021f90 <__mdiff>
 8020edc:	68c2      	ldr	r2, [r0, #12]
 8020ede:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020ee0:	4680      	mov	r8, r0
 8020ee2:	bb0a      	cbnz	r2, 8020f28 <_dtoa_r+0x9a0>
 8020ee4:	4601      	mov	r1, r0
 8020ee6:	4628      	mov	r0, r5
 8020ee8:	f001 f836 	bl	8021f58 <__mcmp>
 8020eec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020eee:	4602      	mov	r2, r0
 8020ef0:	4641      	mov	r1, r8
 8020ef2:	4630      	mov	r0, r6
 8020ef4:	920e      	str	r2, [sp, #56]	; 0x38
 8020ef6:	930a      	str	r3, [sp, #40]	; 0x28
 8020ef8:	f000 fda6 	bl	8021a48 <_Bfree>
 8020efc:	9b07      	ldr	r3, [sp, #28]
 8020efe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8020f00:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8020f04:	ea43 0102 	orr.w	r1, r3, r2
 8020f08:	9b08      	ldr	r3, [sp, #32]
 8020f0a:	430b      	orrs	r3, r1
 8020f0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020f0e:	d10d      	bne.n	8020f2c <_dtoa_r+0x9a4>
 8020f10:	2b39      	cmp	r3, #57	; 0x39
 8020f12:	d029      	beq.n	8020f68 <_dtoa_r+0x9e0>
 8020f14:	f1ba 0f00 	cmp.w	sl, #0
 8020f18:	dd01      	ble.n	8020f1e <_dtoa_r+0x996>
 8020f1a:	9b06      	ldr	r3, [sp, #24]
 8020f1c:	3331      	adds	r3, #49	; 0x31
 8020f1e:	9a02      	ldr	r2, [sp, #8]
 8020f20:	7013      	strb	r3, [r2, #0]
 8020f22:	e774      	b.n	8020e0e <_dtoa_r+0x886>
 8020f24:	4638      	mov	r0, r7
 8020f26:	e7b8      	b.n	8020e9a <_dtoa_r+0x912>
 8020f28:	2201      	movs	r2, #1
 8020f2a:	e7e1      	b.n	8020ef0 <_dtoa_r+0x968>
 8020f2c:	f1ba 0f00 	cmp.w	sl, #0
 8020f30:	db06      	blt.n	8020f40 <_dtoa_r+0x9b8>
 8020f32:	9907      	ldr	r1, [sp, #28]
 8020f34:	ea41 0a0a 	orr.w	sl, r1, sl
 8020f38:	9908      	ldr	r1, [sp, #32]
 8020f3a:	ea5a 0101 	orrs.w	r1, sl, r1
 8020f3e:	d120      	bne.n	8020f82 <_dtoa_r+0x9fa>
 8020f40:	2a00      	cmp	r2, #0
 8020f42:	ddec      	ble.n	8020f1e <_dtoa_r+0x996>
 8020f44:	4629      	mov	r1, r5
 8020f46:	2201      	movs	r2, #1
 8020f48:	4630      	mov	r0, r6
 8020f4a:	9305      	str	r3, [sp, #20]
 8020f4c:	f000 ff98 	bl	8021e80 <__lshift>
 8020f50:	4621      	mov	r1, r4
 8020f52:	4605      	mov	r5, r0
 8020f54:	f001 f800 	bl	8021f58 <__mcmp>
 8020f58:	2800      	cmp	r0, #0
 8020f5a:	9b05      	ldr	r3, [sp, #20]
 8020f5c:	dc02      	bgt.n	8020f64 <_dtoa_r+0x9dc>
 8020f5e:	d1de      	bne.n	8020f1e <_dtoa_r+0x996>
 8020f60:	07da      	lsls	r2, r3, #31
 8020f62:	d5dc      	bpl.n	8020f1e <_dtoa_r+0x996>
 8020f64:	2b39      	cmp	r3, #57	; 0x39
 8020f66:	d1d8      	bne.n	8020f1a <_dtoa_r+0x992>
 8020f68:	9a02      	ldr	r2, [sp, #8]
 8020f6a:	2339      	movs	r3, #57	; 0x39
 8020f6c:	7013      	strb	r3, [r2, #0]
 8020f6e:	4643      	mov	r3, r8
 8020f70:	4698      	mov	r8, r3
 8020f72:	3b01      	subs	r3, #1
 8020f74:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8020f78:	2a39      	cmp	r2, #57	; 0x39
 8020f7a:	d051      	beq.n	8021020 <_dtoa_r+0xa98>
 8020f7c:	3201      	adds	r2, #1
 8020f7e:	701a      	strb	r2, [r3, #0]
 8020f80:	e745      	b.n	8020e0e <_dtoa_r+0x886>
 8020f82:	2a00      	cmp	r2, #0
 8020f84:	dd03      	ble.n	8020f8e <_dtoa_r+0xa06>
 8020f86:	2b39      	cmp	r3, #57	; 0x39
 8020f88:	d0ee      	beq.n	8020f68 <_dtoa_r+0x9e0>
 8020f8a:	3301      	adds	r3, #1
 8020f8c:	e7c7      	b.n	8020f1e <_dtoa_r+0x996>
 8020f8e:	9a05      	ldr	r2, [sp, #20]
 8020f90:	9909      	ldr	r1, [sp, #36]	; 0x24
 8020f92:	f802 3c01 	strb.w	r3, [r2, #-1]
 8020f96:	428a      	cmp	r2, r1
 8020f98:	d02b      	beq.n	8020ff2 <_dtoa_r+0xa6a>
 8020f9a:	4629      	mov	r1, r5
 8020f9c:	2300      	movs	r3, #0
 8020f9e:	220a      	movs	r2, #10
 8020fa0:	4630      	mov	r0, r6
 8020fa2:	f000 fd73 	bl	8021a8c <__multadd>
 8020fa6:	45b9      	cmp	r9, r7
 8020fa8:	4605      	mov	r5, r0
 8020faa:	f04f 0300 	mov.w	r3, #0
 8020fae:	f04f 020a 	mov.w	r2, #10
 8020fb2:	4649      	mov	r1, r9
 8020fb4:	4630      	mov	r0, r6
 8020fb6:	d107      	bne.n	8020fc8 <_dtoa_r+0xa40>
 8020fb8:	f000 fd68 	bl	8021a8c <__multadd>
 8020fbc:	4681      	mov	r9, r0
 8020fbe:	4607      	mov	r7, r0
 8020fc0:	9b05      	ldr	r3, [sp, #20]
 8020fc2:	3301      	adds	r3, #1
 8020fc4:	9305      	str	r3, [sp, #20]
 8020fc6:	e774      	b.n	8020eb2 <_dtoa_r+0x92a>
 8020fc8:	f000 fd60 	bl	8021a8c <__multadd>
 8020fcc:	4639      	mov	r1, r7
 8020fce:	4681      	mov	r9, r0
 8020fd0:	2300      	movs	r3, #0
 8020fd2:	220a      	movs	r2, #10
 8020fd4:	4630      	mov	r0, r6
 8020fd6:	f000 fd59 	bl	8021a8c <__multadd>
 8020fda:	4607      	mov	r7, r0
 8020fdc:	e7f0      	b.n	8020fc0 <_dtoa_r+0xa38>
 8020fde:	f1ba 0f00 	cmp.w	sl, #0
 8020fe2:	9a00      	ldr	r2, [sp, #0]
 8020fe4:	bfcc      	ite	gt
 8020fe6:	46d0      	movgt	r8, sl
 8020fe8:	f04f 0801 	movle.w	r8, #1
 8020fec:	4490      	add	r8, r2
 8020fee:	f04f 0900 	mov.w	r9, #0
 8020ff2:	4629      	mov	r1, r5
 8020ff4:	2201      	movs	r2, #1
 8020ff6:	4630      	mov	r0, r6
 8020ff8:	9302      	str	r3, [sp, #8]
 8020ffa:	f000 ff41 	bl	8021e80 <__lshift>
 8020ffe:	4621      	mov	r1, r4
 8021000:	4605      	mov	r5, r0
 8021002:	f000 ffa9 	bl	8021f58 <__mcmp>
 8021006:	2800      	cmp	r0, #0
 8021008:	dcb1      	bgt.n	8020f6e <_dtoa_r+0x9e6>
 802100a:	d102      	bne.n	8021012 <_dtoa_r+0xa8a>
 802100c:	9b02      	ldr	r3, [sp, #8]
 802100e:	07db      	lsls	r3, r3, #31
 8021010:	d4ad      	bmi.n	8020f6e <_dtoa_r+0x9e6>
 8021012:	4643      	mov	r3, r8
 8021014:	4698      	mov	r8, r3
 8021016:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 802101a:	2a30      	cmp	r2, #48	; 0x30
 802101c:	d0fa      	beq.n	8021014 <_dtoa_r+0xa8c>
 802101e:	e6f6      	b.n	8020e0e <_dtoa_r+0x886>
 8021020:	9a00      	ldr	r2, [sp, #0]
 8021022:	429a      	cmp	r2, r3
 8021024:	d1a4      	bne.n	8020f70 <_dtoa_r+0x9e8>
 8021026:	f10b 0b01 	add.w	fp, fp, #1
 802102a:	2331      	movs	r3, #49	; 0x31
 802102c:	e778      	b.n	8020f20 <_dtoa_r+0x998>
 802102e:	4b15      	ldr	r3, [pc, #84]	; (8021084 <_dtoa_r+0xafc>)
 8021030:	f7ff bb12 	b.w	8020658 <_dtoa_r+0xd0>
 8021034:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8021036:	2b00      	cmp	r3, #0
 8021038:	f47f aaee 	bne.w	8020618 <_dtoa_r+0x90>
 802103c:	4b12      	ldr	r3, [pc, #72]	; (8021088 <_dtoa_r+0xb00>)
 802103e:	f7ff bb0b 	b.w	8020658 <_dtoa_r+0xd0>
 8021042:	f1ba 0f00 	cmp.w	sl, #0
 8021046:	dc03      	bgt.n	8021050 <_dtoa_r+0xac8>
 8021048:	9b07      	ldr	r3, [sp, #28]
 802104a:	2b02      	cmp	r3, #2
 802104c:	f73f aec7 	bgt.w	8020dde <_dtoa_r+0x856>
 8021050:	f8dd 8000 	ldr.w	r8, [sp]
 8021054:	4621      	mov	r1, r4
 8021056:	4628      	mov	r0, r5
 8021058:	f7ff fa0a 	bl	8020470 <quorem>
 802105c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8021060:	f808 3b01 	strb.w	r3, [r8], #1
 8021064:	9a00      	ldr	r2, [sp, #0]
 8021066:	eba8 0202 	sub.w	r2, r8, r2
 802106a:	4592      	cmp	sl, r2
 802106c:	ddb7      	ble.n	8020fde <_dtoa_r+0xa56>
 802106e:	4629      	mov	r1, r5
 8021070:	2300      	movs	r3, #0
 8021072:	220a      	movs	r2, #10
 8021074:	4630      	mov	r0, r6
 8021076:	f000 fd09 	bl	8021a8c <__multadd>
 802107a:	4605      	mov	r5, r0
 802107c:	e7ea      	b.n	8021054 <_dtoa_r+0xacc>
 802107e:	bf00      	nop
 8021080:	08027460 	.word	0x08027460
 8021084:	080272c4 	.word	0x080272c4
 8021088:	080273f4 	.word	0x080273f4

0802108c <__errno>:
 802108c:	4b01      	ldr	r3, [pc, #4]	; (8021094 <__errno+0x8>)
 802108e:	6818      	ldr	r0, [r3, #0]
 8021090:	4770      	bx	lr
 8021092:	bf00      	nop
 8021094:	24000304 	.word	0x24000304

08021098 <std>:
 8021098:	2300      	movs	r3, #0
 802109a:	b510      	push	{r4, lr}
 802109c:	4604      	mov	r4, r0
 802109e:	e9c0 3300 	strd	r3, r3, [r0]
 80210a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80210a6:	6083      	str	r3, [r0, #8]
 80210a8:	8181      	strh	r1, [r0, #12]
 80210aa:	6643      	str	r3, [r0, #100]	; 0x64
 80210ac:	81c2      	strh	r2, [r0, #14]
 80210ae:	6183      	str	r3, [r0, #24]
 80210b0:	4619      	mov	r1, r3
 80210b2:	2208      	movs	r2, #8
 80210b4:	305c      	adds	r0, #92	; 0x5c
 80210b6:	f7fd fc57 	bl	801e968 <memset>
 80210ba:	4b05      	ldr	r3, [pc, #20]	; (80210d0 <std+0x38>)
 80210bc:	6263      	str	r3, [r4, #36]	; 0x24
 80210be:	4b05      	ldr	r3, [pc, #20]	; (80210d4 <std+0x3c>)
 80210c0:	62a3      	str	r3, [r4, #40]	; 0x28
 80210c2:	4b05      	ldr	r3, [pc, #20]	; (80210d8 <std+0x40>)
 80210c4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80210c6:	4b05      	ldr	r3, [pc, #20]	; (80210dc <std+0x44>)
 80210c8:	6224      	str	r4, [r4, #32]
 80210ca:	6323      	str	r3, [r4, #48]	; 0x30
 80210cc:	bd10      	pop	{r4, pc}
 80210ce:	bf00      	nop
 80210d0:	08022a51 	.word	0x08022a51
 80210d4:	08022a73 	.word	0x08022a73
 80210d8:	08022aab 	.word	0x08022aab
 80210dc:	08022acf 	.word	0x08022acf

080210e0 <_cleanup_r>:
 80210e0:	4901      	ldr	r1, [pc, #4]	; (80210e8 <_cleanup_r+0x8>)
 80210e2:	f000 b8c1 	b.w	8021268 <_fwalk_reent>
 80210e6:	bf00      	nop
 80210e8:	08022dd5 	.word	0x08022dd5

080210ec <__sfmoreglue>:
 80210ec:	b570      	push	{r4, r5, r6, lr}
 80210ee:	1e4a      	subs	r2, r1, #1
 80210f0:	2568      	movs	r5, #104	; 0x68
 80210f2:	4355      	muls	r5, r2
 80210f4:	460e      	mov	r6, r1
 80210f6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80210fa:	f001 f981 	bl	8022400 <_malloc_r>
 80210fe:	4604      	mov	r4, r0
 8021100:	b140      	cbz	r0, 8021114 <__sfmoreglue+0x28>
 8021102:	2100      	movs	r1, #0
 8021104:	e9c0 1600 	strd	r1, r6, [r0]
 8021108:	300c      	adds	r0, #12
 802110a:	60a0      	str	r0, [r4, #8]
 802110c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8021110:	f7fd fc2a 	bl	801e968 <memset>
 8021114:	4620      	mov	r0, r4
 8021116:	bd70      	pop	{r4, r5, r6, pc}

08021118 <__sfp_lock_acquire>:
 8021118:	4801      	ldr	r0, [pc, #4]	; (8021120 <__sfp_lock_acquire+0x8>)
 802111a:	f000 bc38 	b.w	802198e <__retarget_lock_acquire_recursive>
 802111e:	bf00      	nop
 8021120:	24007f90 	.word	0x24007f90

08021124 <__sfp_lock_release>:
 8021124:	4801      	ldr	r0, [pc, #4]	; (802112c <__sfp_lock_release+0x8>)
 8021126:	f000 bc33 	b.w	8021990 <__retarget_lock_release_recursive>
 802112a:	bf00      	nop
 802112c:	24007f90 	.word	0x24007f90

08021130 <__sinit_lock_acquire>:
 8021130:	4801      	ldr	r0, [pc, #4]	; (8021138 <__sinit_lock_acquire+0x8>)
 8021132:	f000 bc2c 	b.w	802198e <__retarget_lock_acquire_recursive>
 8021136:	bf00      	nop
 8021138:	24007f8b 	.word	0x24007f8b

0802113c <__sinit_lock_release>:
 802113c:	4801      	ldr	r0, [pc, #4]	; (8021144 <__sinit_lock_release+0x8>)
 802113e:	f000 bc27 	b.w	8021990 <__retarget_lock_release_recursive>
 8021142:	bf00      	nop
 8021144:	24007f8b 	.word	0x24007f8b

08021148 <__sinit>:
 8021148:	b510      	push	{r4, lr}
 802114a:	4604      	mov	r4, r0
 802114c:	f7ff fff0 	bl	8021130 <__sinit_lock_acquire>
 8021150:	69a3      	ldr	r3, [r4, #24]
 8021152:	b11b      	cbz	r3, 802115c <__sinit+0x14>
 8021154:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021158:	f7ff bff0 	b.w	802113c <__sinit_lock_release>
 802115c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8021160:	6523      	str	r3, [r4, #80]	; 0x50
 8021162:	4b13      	ldr	r3, [pc, #76]	; (80211b0 <__sinit+0x68>)
 8021164:	4a13      	ldr	r2, [pc, #76]	; (80211b4 <__sinit+0x6c>)
 8021166:	681b      	ldr	r3, [r3, #0]
 8021168:	62a2      	str	r2, [r4, #40]	; 0x28
 802116a:	42a3      	cmp	r3, r4
 802116c:	bf04      	itt	eq
 802116e:	2301      	moveq	r3, #1
 8021170:	61a3      	streq	r3, [r4, #24]
 8021172:	4620      	mov	r0, r4
 8021174:	f000 f820 	bl	80211b8 <__sfp>
 8021178:	6060      	str	r0, [r4, #4]
 802117a:	4620      	mov	r0, r4
 802117c:	f000 f81c 	bl	80211b8 <__sfp>
 8021180:	60a0      	str	r0, [r4, #8]
 8021182:	4620      	mov	r0, r4
 8021184:	f000 f818 	bl	80211b8 <__sfp>
 8021188:	2200      	movs	r2, #0
 802118a:	60e0      	str	r0, [r4, #12]
 802118c:	2104      	movs	r1, #4
 802118e:	6860      	ldr	r0, [r4, #4]
 8021190:	f7ff ff82 	bl	8021098 <std>
 8021194:	68a0      	ldr	r0, [r4, #8]
 8021196:	2201      	movs	r2, #1
 8021198:	2109      	movs	r1, #9
 802119a:	f7ff ff7d 	bl	8021098 <std>
 802119e:	68e0      	ldr	r0, [r4, #12]
 80211a0:	2202      	movs	r2, #2
 80211a2:	2112      	movs	r1, #18
 80211a4:	f7ff ff78 	bl	8021098 <std>
 80211a8:	2301      	movs	r3, #1
 80211aa:	61a3      	str	r3, [r4, #24]
 80211ac:	e7d2      	b.n	8021154 <__sinit+0xc>
 80211ae:	bf00      	nop
 80211b0:	080272b0 	.word	0x080272b0
 80211b4:	080210e1 	.word	0x080210e1

080211b8 <__sfp>:
 80211b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80211ba:	4607      	mov	r7, r0
 80211bc:	f7ff ffac 	bl	8021118 <__sfp_lock_acquire>
 80211c0:	4b1e      	ldr	r3, [pc, #120]	; (802123c <__sfp+0x84>)
 80211c2:	681e      	ldr	r6, [r3, #0]
 80211c4:	69b3      	ldr	r3, [r6, #24]
 80211c6:	b913      	cbnz	r3, 80211ce <__sfp+0x16>
 80211c8:	4630      	mov	r0, r6
 80211ca:	f7ff ffbd 	bl	8021148 <__sinit>
 80211ce:	3648      	adds	r6, #72	; 0x48
 80211d0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80211d4:	3b01      	subs	r3, #1
 80211d6:	d503      	bpl.n	80211e0 <__sfp+0x28>
 80211d8:	6833      	ldr	r3, [r6, #0]
 80211da:	b30b      	cbz	r3, 8021220 <__sfp+0x68>
 80211dc:	6836      	ldr	r6, [r6, #0]
 80211de:	e7f7      	b.n	80211d0 <__sfp+0x18>
 80211e0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80211e4:	b9d5      	cbnz	r5, 802121c <__sfp+0x64>
 80211e6:	4b16      	ldr	r3, [pc, #88]	; (8021240 <__sfp+0x88>)
 80211e8:	60e3      	str	r3, [r4, #12]
 80211ea:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80211ee:	6665      	str	r5, [r4, #100]	; 0x64
 80211f0:	f000 fbcc 	bl	802198c <__retarget_lock_init_recursive>
 80211f4:	f7ff ff96 	bl	8021124 <__sfp_lock_release>
 80211f8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80211fc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8021200:	6025      	str	r5, [r4, #0]
 8021202:	61a5      	str	r5, [r4, #24]
 8021204:	2208      	movs	r2, #8
 8021206:	4629      	mov	r1, r5
 8021208:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 802120c:	f7fd fbac 	bl	801e968 <memset>
 8021210:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8021214:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8021218:	4620      	mov	r0, r4
 802121a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802121c:	3468      	adds	r4, #104	; 0x68
 802121e:	e7d9      	b.n	80211d4 <__sfp+0x1c>
 8021220:	2104      	movs	r1, #4
 8021222:	4638      	mov	r0, r7
 8021224:	f7ff ff62 	bl	80210ec <__sfmoreglue>
 8021228:	4604      	mov	r4, r0
 802122a:	6030      	str	r0, [r6, #0]
 802122c:	2800      	cmp	r0, #0
 802122e:	d1d5      	bne.n	80211dc <__sfp+0x24>
 8021230:	f7ff ff78 	bl	8021124 <__sfp_lock_release>
 8021234:	230c      	movs	r3, #12
 8021236:	603b      	str	r3, [r7, #0]
 8021238:	e7ee      	b.n	8021218 <__sfp+0x60>
 802123a:	bf00      	nop
 802123c:	080272b0 	.word	0x080272b0
 8021240:	ffff0001 	.word	0xffff0001

08021244 <fiprintf>:
 8021244:	b40e      	push	{r1, r2, r3}
 8021246:	b503      	push	{r0, r1, lr}
 8021248:	4601      	mov	r1, r0
 802124a:	ab03      	add	r3, sp, #12
 802124c:	4805      	ldr	r0, [pc, #20]	; (8021264 <fiprintf+0x20>)
 802124e:	f853 2b04 	ldr.w	r2, [r3], #4
 8021252:	6800      	ldr	r0, [r0, #0]
 8021254:	9301      	str	r3, [sp, #4]
 8021256:	f001 fab3 	bl	80227c0 <_vfiprintf_r>
 802125a:	b002      	add	sp, #8
 802125c:	f85d eb04 	ldr.w	lr, [sp], #4
 8021260:	b003      	add	sp, #12
 8021262:	4770      	bx	lr
 8021264:	24000304 	.word	0x24000304

08021268 <_fwalk_reent>:
 8021268:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802126c:	4606      	mov	r6, r0
 802126e:	4688      	mov	r8, r1
 8021270:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8021274:	2700      	movs	r7, #0
 8021276:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 802127a:	f1b9 0901 	subs.w	r9, r9, #1
 802127e:	d505      	bpl.n	802128c <_fwalk_reent+0x24>
 8021280:	6824      	ldr	r4, [r4, #0]
 8021282:	2c00      	cmp	r4, #0
 8021284:	d1f7      	bne.n	8021276 <_fwalk_reent+0xe>
 8021286:	4638      	mov	r0, r7
 8021288:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802128c:	89ab      	ldrh	r3, [r5, #12]
 802128e:	2b01      	cmp	r3, #1
 8021290:	d907      	bls.n	80212a2 <_fwalk_reent+0x3a>
 8021292:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8021296:	3301      	adds	r3, #1
 8021298:	d003      	beq.n	80212a2 <_fwalk_reent+0x3a>
 802129a:	4629      	mov	r1, r5
 802129c:	4630      	mov	r0, r6
 802129e:	47c0      	blx	r8
 80212a0:	4307      	orrs	r7, r0
 80212a2:	3568      	adds	r5, #104	; 0x68
 80212a4:	e7e9      	b.n	802127a <_fwalk_reent+0x12>

080212a6 <rshift>:
 80212a6:	6903      	ldr	r3, [r0, #16]
 80212a8:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80212ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80212b0:	ea4f 1261 	mov.w	r2, r1, asr #5
 80212b4:	f100 0414 	add.w	r4, r0, #20
 80212b8:	dd45      	ble.n	8021346 <rshift+0xa0>
 80212ba:	f011 011f 	ands.w	r1, r1, #31
 80212be:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80212c2:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80212c6:	d10c      	bne.n	80212e2 <rshift+0x3c>
 80212c8:	f100 0710 	add.w	r7, r0, #16
 80212cc:	4629      	mov	r1, r5
 80212ce:	42b1      	cmp	r1, r6
 80212d0:	d334      	bcc.n	802133c <rshift+0x96>
 80212d2:	1a9b      	subs	r3, r3, r2
 80212d4:	009b      	lsls	r3, r3, #2
 80212d6:	1eea      	subs	r2, r5, #3
 80212d8:	4296      	cmp	r6, r2
 80212da:	bf38      	it	cc
 80212dc:	2300      	movcc	r3, #0
 80212de:	4423      	add	r3, r4
 80212e0:	e015      	b.n	802130e <rshift+0x68>
 80212e2:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80212e6:	f1c1 0820 	rsb	r8, r1, #32
 80212ea:	40cf      	lsrs	r7, r1
 80212ec:	f105 0e04 	add.w	lr, r5, #4
 80212f0:	46a1      	mov	r9, r4
 80212f2:	4576      	cmp	r6, lr
 80212f4:	46f4      	mov	ip, lr
 80212f6:	d815      	bhi.n	8021324 <rshift+0x7e>
 80212f8:	1a9b      	subs	r3, r3, r2
 80212fa:	009a      	lsls	r2, r3, #2
 80212fc:	3a04      	subs	r2, #4
 80212fe:	3501      	adds	r5, #1
 8021300:	42ae      	cmp	r6, r5
 8021302:	bf38      	it	cc
 8021304:	2200      	movcc	r2, #0
 8021306:	18a3      	adds	r3, r4, r2
 8021308:	50a7      	str	r7, [r4, r2]
 802130a:	b107      	cbz	r7, 802130e <rshift+0x68>
 802130c:	3304      	adds	r3, #4
 802130e:	1b1a      	subs	r2, r3, r4
 8021310:	42a3      	cmp	r3, r4
 8021312:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8021316:	bf08      	it	eq
 8021318:	2300      	moveq	r3, #0
 802131a:	6102      	str	r2, [r0, #16]
 802131c:	bf08      	it	eq
 802131e:	6143      	streq	r3, [r0, #20]
 8021320:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8021324:	f8dc c000 	ldr.w	ip, [ip]
 8021328:	fa0c fc08 	lsl.w	ip, ip, r8
 802132c:	ea4c 0707 	orr.w	r7, ip, r7
 8021330:	f849 7b04 	str.w	r7, [r9], #4
 8021334:	f85e 7b04 	ldr.w	r7, [lr], #4
 8021338:	40cf      	lsrs	r7, r1
 802133a:	e7da      	b.n	80212f2 <rshift+0x4c>
 802133c:	f851 cb04 	ldr.w	ip, [r1], #4
 8021340:	f847 cf04 	str.w	ip, [r7, #4]!
 8021344:	e7c3      	b.n	80212ce <rshift+0x28>
 8021346:	4623      	mov	r3, r4
 8021348:	e7e1      	b.n	802130e <rshift+0x68>

0802134a <__hexdig_fun>:
 802134a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 802134e:	2b09      	cmp	r3, #9
 8021350:	d802      	bhi.n	8021358 <__hexdig_fun+0xe>
 8021352:	3820      	subs	r0, #32
 8021354:	b2c0      	uxtb	r0, r0
 8021356:	4770      	bx	lr
 8021358:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 802135c:	2b05      	cmp	r3, #5
 802135e:	d801      	bhi.n	8021364 <__hexdig_fun+0x1a>
 8021360:	3847      	subs	r0, #71	; 0x47
 8021362:	e7f7      	b.n	8021354 <__hexdig_fun+0xa>
 8021364:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8021368:	2b05      	cmp	r3, #5
 802136a:	d801      	bhi.n	8021370 <__hexdig_fun+0x26>
 802136c:	3827      	subs	r0, #39	; 0x27
 802136e:	e7f1      	b.n	8021354 <__hexdig_fun+0xa>
 8021370:	2000      	movs	r0, #0
 8021372:	4770      	bx	lr

08021374 <__gethex>:
 8021374:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021378:	ed2d 8b02 	vpush	{d8}
 802137c:	b089      	sub	sp, #36	; 0x24
 802137e:	ee08 0a10 	vmov	s16, r0
 8021382:	9304      	str	r3, [sp, #16]
 8021384:	4bbc      	ldr	r3, [pc, #752]	; (8021678 <__gethex+0x304>)
 8021386:	681b      	ldr	r3, [r3, #0]
 8021388:	9301      	str	r3, [sp, #4]
 802138a:	4618      	mov	r0, r3
 802138c:	468b      	mov	fp, r1
 802138e:	4690      	mov	r8, r2
 8021390:	f7de ffb0 	bl	80002f4 <strlen>
 8021394:	9b01      	ldr	r3, [sp, #4]
 8021396:	f8db 2000 	ldr.w	r2, [fp]
 802139a:	4403      	add	r3, r0
 802139c:	4682      	mov	sl, r0
 802139e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80213a2:	9305      	str	r3, [sp, #20]
 80213a4:	1c93      	adds	r3, r2, #2
 80213a6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80213aa:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80213ae:	32fe      	adds	r2, #254	; 0xfe
 80213b0:	18d1      	adds	r1, r2, r3
 80213b2:	461f      	mov	r7, r3
 80213b4:	f813 0b01 	ldrb.w	r0, [r3], #1
 80213b8:	9100      	str	r1, [sp, #0]
 80213ba:	2830      	cmp	r0, #48	; 0x30
 80213bc:	d0f8      	beq.n	80213b0 <__gethex+0x3c>
 80213be:	f7ff ffc4 	bl	802134a <__hexdig_fun>
 80213c2:	4604      	mov	r4, r0
 80213c4:	2800      	cmp	r0, #0
 80213c6:	d13a      	bne.n	802143e <__gethex+0xca>
 80213c8:	9901      	ldr	r1, [sp, #4]
 80213ca:	4652      	mov	r2, sl
 80213cc:	4638      	mov	r0, r7
 80213ce:	f7fe f997 	bl	801f700 <strncmp>
 80213d2:	4605      	mov	r5, r0
 80213d4:	2800      	cmp	r0, #0
 80213d6:	d168      	bne.n	80214aa <__gethex+0x136>
 80213d8:	f817 000a 	ldrb.w	r0, [r7, sl]
 80213dc:	eb07 060a 	add.w	r6, r7, sl
 80213e0:	f7ff ffb3 	bl	802134a <__hexdig_fun>
 80213e4:	2800      	cmp	r0, #0
 80213e6:	d062      	beq.n	80214ae <__gethex+0x13a>
 80213e8:	4633      	mov	r3, r6
 80213ea:	7818      	ldrb	r0, [r3, #0]
 80213ec:	2830      	cmp	r0, #48	; 0x30
 80213ee:	461f      	mov	r7, r3
 80213f0:	f103 0301 	add.w	r3, r3, #1
 80213f4:	d0f9      	beq.n	80213ea <__gethex+0x76>
 80213f6:	f7ff ffa8 	bl	802134a <__hexdig_fun>
 80213fa:	2301      	movs	r3, #1
 80213fc:	fab0 f480 	clz	r4, r0
 8021400:	0964      	lsrs	r4, r4, #5
 8021402:	4635      	mov	r5, r6
 8021404:	9300      	str	r3, [sp, #0]
 8021406:	463a      	mov	r2, r7
 8021408:	4616      	mov	r6, r2
 802140a:	3201      	adds	r2, #1
 802140c:	7830      	ldrb	r0, [r6, #0]
 802140e:	f7ff ff9c 	bl	802134a <__hexdig_fun>
 8021412:	2800      	cmp	r0, #0
 8021414:	d1f8      	bne.n	8021408 <__gethex+0x94>
 8021416:	9901      	ldr	r1, [sp, #4]
 8021418:	4652      	mov	r2, sl
 802141a:	4630      	mov	r0, r6
 802141c:	f7fe f970 	bl	801f700 <strncmp>
 8021420:	b980      	cbnz	r0, 8021444 <__gethex+0xd0>
 8021422:	b94d      	cbnz	r5, 8021438 <__gethex+0xc4>
 8021424:	eb06 050a 	add.w	r5, r6, sl
 8021428:	462a      	mov	r2, r5
 802142a:	4616      	mov	r6, r2
 802142c:	3201      	adds	r2, #1
 802142e:	7830      	ldrb	r0, [r6, #0]
 8021430:	f7ff ff8b 	bl	802134a <__hexdig_fun>
 8021434:	2800      	cmp	r0, #0
 8021436:	d1f8      	bne.n	802142a <__gethex+0xb6>
 8021438:	1bad      	subs	r5, r5, r6
 802143a:	00ad      	lsls	r5, r5, #2
 802143c:	e004      	b.n	8021448 <__gethex+0xd4>
 802143e:	2400      	movs	r4, #0
 8021440:	4625      	mov	r5, r4
 8021442:	e7e0      	b.n	8021406 <__gethex+0x92>
 8021444:	2d00      	cmp	r5, #0
 8021446:	d1f7      	bne.n	8021438 <__gethex+0xc4>
 8021448:	7833      	ldrb	r3, [r6, #0]
 802144a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 802144e:	2b50      	cmp	r3, #80	; 0x50
 8021450:	d13b      	bne.n	80214ca <__gethex+0x156>
 8021452:	7873      	ldrb	r3, [r6, #1]
 8021454:	2b2b      	cmp	r3, #43	; 0x2b
 8021456:	d02c      	beq.n	80214b2 <__gethex+0x13e>
 8021458:	2b2d      	cmp	r3, #45	; 0x2d
 802145a:	d02e      	beq.n	80214ba <__gethex+0x146>
 802145c:	1c71      	adds	r1, r6, #1
 802145e:	f04f 0900 	mov.w	r9, #0
 8021462:	7808      	ldrb	r0, [r1, #0]
 8021464:	f7ff ff71 	bl	802134a <__hexdig_fun>
 8021468:	1e43      	subs	r3, r0, #1
 802146a:	b2db      	uxtb	r3, r3
 802146c:	2b18      	cmp	r3, #24
 802146e:	d82c      	bhi.n	80214ca <__gethex+0x156>
 8021470:	f1a0 0210 	sub.w	r2, r0, #16
 8021474:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8021478:	f7ff ff67 	bl	802134a <__hexdig_fun>
 802147c:	1e43      	subs	r3, r0, #1
 802147e:	b2db      	uxtb	r3, r3
 8021480:	2b18      	cmp	r3, #24
 8021482:	d91d      	bls.n	80214c0 <__gethex+0x14c>
 8021484:	f1b9 0f00 	cmp.w	r9, #0
 8021488:	d000      	beq.n	802148c <__gethex+0x118>
 802148a:	4252      	negs	r2, r2
 802148c:	4415      	add	r5, r2
 802148e:	f8cb 1000 	str.w	r1, [fp]
 8021492:	b1e4      	cbz	r4, 80214ce <__gethex+0x15a>
 8021494:	9b00      	ldr	r3, [sp, #0]
 8021496:	2b00      	cmp	r3, #0
 8021498:	bf14      	ite	ne
 802149a:	2700      	movne	r7, #0
 802149c:	2706      	moveq	r7, #6
 802149e:	4638      	mov	r0, r7
 80214a0:	b009      	add	sp, #36	; 0x24
 80214a2:	ecbd 8b02 	vpop	{d8}
 80214a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80214aa:	463e      	mov	r6, r7
 80214ac:	4625      	mov	r5, r4
 80214ae:	2401      	movs	r4, #1
 80214b0:	e7ca      	b.n	8021448 <__gethex+0xd4>
 80214b2:	f04f 0900 	mov.w	r9, #0
 80214b6:	1cb1      	adds	r1, r6, #2
 80214b8:	e7d3      	b.n	8021462 <__gethex+0xee>
 80214ba:	f04f 0901 	mov.w	r9, #1
 80214be:	e7fa      	b.n	80214b6 <__gethex+0x142>
 80214c0:	230a      	movs	r3, #10
 80214c2:	fb03 0202 	mla	r2, r3, r2, r0
 80214c6:	3a10      	subs	r2, #16
 80214c8:	e7d4      	b.n	8021474 <__gethex+0x100>
 80214ca:	4631      	mov	r1, r6
 80214cc:	e7df      	b.n	802148e <__gethex+0x11a>
 80214ce:	1bf3      	subs	r3, r6, r7
 80214d0:	3b01      	subs	r3, #1
 80214d2:	4621      	mov	r1, r4
 80214d4:	2b07      	cmp	r3, #7
 80214d6:	dc0b      	bgt.n	80214f0 <__gethex+0x17c>
 80214d8:	ee18 0a10 	vmov	r0, s16
 80214dc:	f000 fa74 	bl	80219c8 <_Balloc>
 80214e0:	4604      	mov	r4, r0
 80214e2:	b940      	cbnz	r0, 80214f6 <__gethex+0x182>
 80214e4:	4b65      	ldr	r3, [pc, #404]	; (802167c <__gethex+0x308>)
 80214e6:	4602      	mov	r2, r0
 80214e8:	21de      	movs	r1, #222	; 0xde
 80214ea:	4865      	ldr	r0, [pc, #404]	; (8021680 <__gethex+0x30c>)
 80214ec:	f7fe ffa2 	bl	8020434 <__assert_func>
 80214f0:	3101      	adds	r1, #1
 80214f2:	105b      	asrs	r3, r3, #1
 80214f4:	e7ee      	b.n	80214d4 <__gethex+0x160>
 80214f6:	f100 0914 	add.w	r9, r0, #20
 80214fa:	f04f 0b00 	mov.w	fp, #0
 80214fe:	f1ca 0301 	rsb	r3, sl, #1
 8021502:	f8cd 9008 	str.w	r9, [sp, #8]
 8021506:	f8cd b000 	str.w	fp, [sp]
 802150a:	9306      	str	r3, [sp, #24]
 802150c:	42b7      	cmp	r7, r6
 802150e:	d340      	bcc.n	8021592 <__gethex+0x21e>
 8021510:	9802      	ldr	r0, [sp, #8]
 8021512:	9b00      	ldr	r3, [sp, #0]
 8021514:	f840 3b04 	str.w	r3, [r0], #4
 8021518:	eba0 0009 	sub.w	r0, r0, r9
 802151c:	1080      	asrs	r0, r0, #2
 802151e:	0146      	lsls	r6, r0, #5
 8021520:	6120      	str	r0, [r4, #16]
 8021522:	4618      	mov	r0, r3
 8021524:	f000 fb46 	bl	8021bb4 <__hi0bits>
 8021528:	1a30      	subs	r0, r6, r0
 802152a:	f8d8 6000 	ldr.w	r6, [r8]
 802152e:	42b0      	cmp	r0, r6
 8021530:	dd63      	ble.n	80215fa <__gethex+0x286>
 8021532:	1b87      	subs	r7, r0, r6
 8021534:	4639      	mov	r1, r7
 8021536:	4620      	mov	r0, r4
 8021538:	f000 fee1 	bl	80222fe <__any_on>
 802153c:	4682      	mov	sl, r0
 802153e:	b1a8      	cbz	r0, 802156c <__gethex+0x1f8>
 8021540:	1e7b      	subs	r3, r7, #1
 8021542:	1159      	asrs	r1, r3, #5
 8021544:	f003 021f 	and.w	r2, r3, #31
 8021548:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 802154c:	f04f 0a01 	mov.w	sl, #1
 8021550:	fa0a f202 	lsl.w	r2, sl, r2
 8021554:	420a      	tst	r2, r1
 8021556:	d009      	beq.n	802156c <__gethex+0x1f8>
 8021558:	4553      	cmp	r3, sl
 802155a:	dd05      	ble.n	8021568 <__gethex+0x1f4>
 802155c:	1eb9      	subs	r1, r7, #2
 802155e:	4620      	mov	r0, r4
 8021560:	f000 fecd 	bl	80222fe <__any_on>
 8021564:	2800      	cmp	r0, #0
 8021566:	d145      	bne.n	80215f4 <__gethex+0x280>
 8021568:	f04f 0a02 	mov.w	sl, #2
 802156c:	4639      	mov	r1, r7
 802156e:	4620      	mov	r0, r4
 8021570:	f7ff fe99 	bl	80212a6 <rshift>
 8021574:	443d      	add	r5, r7
 8021576:	f8d8 3008 	ldr.w	r3, [r8, #8]
 802157a:	42ab      	cmp	r3, r5
 802157c:	da4c      	bge.n	8021618 <__gethex+0x2a4>
 802157e:	ee18 0a10 	vmov	r0, s16
 8021582:	4621      	mov	r1, r4
 8021584:	f000 fa60 	bl	8021a48 <_Bfree>
 8021588:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802158a:	2300      	movs	r3, #0
 802158c:	6013      	str	r3, [r2, #0]
 802158e:	27a3      	movs	r7, #163	; 0xa3
 8021590:	e785      	b.n	802149e <__gethex+0x12a>
 8021592:	1e73      	subs	r3, r6, #1
 8021594:	9a05      	ldr	r2, [sp, #20]
 8021596:	9303      	str	r3, [sp, #12]
 8021598:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 802159c:	4293      	cmp	r3, r2
 802159e:	d019      	beq.n	80215d4 <__gethex+0x260>
 80215a0:	f1bb 0f20 	cmp.w	fp, #32
 80215a4:	d107      	bne.n	80215b6 <__gethex+0x242>
 80215a6:	9b02      	ldr	r3, [sp, #8]
 80215a8:	9a00      	ldr	r2, [sp, #0]
 80215aa:	f843 2b04 	str.w	r2, [r3], #4
 80215ae:	9302      	str	r3, [sp, #8]
 80215b0:	2300      	movs	r3, #0
 80215b2:	9300      	str	r3, [sp, #0]
 80215b4:	469b      	mov	fp, r3
 80215b6:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80215ba:	f7ff fec6 	bl	802134a <__hexdig_fun>
 80215be:	9b00      	ldr	r3, [sp, #0]
 80215c0:	f000 000f 	and.w	r0, r0, #15
 80215c4:	fa00 f00b 	lsl.w	r0, r0, fp
 80215c8:	4303      	orrs	r3, r0
 80215ca:	9300      	str	r3, [sp, #0]
 80215cc:	f10b 0b04 	add.w	fp, fp, #4
 80215d0:	9b03      	ldr	r3, [sp, #12]
 80215d2:	e00d      	b.n	80215f0 <__gethex+0x27c>
 80215d4:	9b03      	ldr	r3, [sp, #12]
 80215d6:	9a06      	ldr	r2, [sp, #24]
 80215d8:	4413      	add	r3, r2
 80215da:	42bb      	cmp	r3, r7
 80215dc:	d3e0      	bcc.n	80215a0 <__gethex+0x22c>
 80215de:	4618      	mov	r0, r3
 80215e0:	9901      	ldr	r1, [sp, #4]
 80215e2:	9307      	str	r3, [sp, #28]
 80215e4:	4652      	mov	r2, sl
 80215e6:	f7fe f88b 	bl	801f700 <strncmp>
 80215ea:	9b07      	ldr	r3, [sp, #28]
 80215ec:	2800      	cmp	r0, #0
 80215ee:	d1d7      	bne.n	80215a0 <__gethex+0x22c>
 80215f0:	461e      	mov	r6, r3
 80215f2:	e78b      	b.n	802150c <__gethex+0x198>
 80215f4:	f04f 0a03 	mov.w	sl, #3
 80215f8:	e7b8      	b.n	802156c <__gethex+0x1f8>
 80215fa:	da0a      	bge.n	8021612 <__gethex+0x29e>
 80215fc:	1a37      	subs	r7, r6, r0
 80215fe:	4621      	mov	r1, r4
 8021600:	ee18 0a10 	vmov	r0, s16
 8021604:	463a      	mov	r2, r7
 8021606:	f000 fc3b 	bl	8021e80 <__lshift>
 802160a:	1bed      	subs	r5, r5, r7
 802160c:	4604      	mov	r4, r0
 802160e:	f100 0914 	add.w	r9, r0, #20
 8021612:	f04f 0a00 	mov.w	sl, #0
 8021616:	e7ae      	b.n	8021576 <__gethex+0x202>
 8021618:	f8d8 0004 	ldr.w	r0, [r8, #4]
 802161c:	42a8      	cmp	r0, r5
 802161e:	dd72      	ble.n	8021706 <__gethex+0x392>
 8021620:	1b45      	subs	r5, r0, r5
 8021622:	42ae      	cmp	r6, r5
 8021624:	dc36      	bgt.n	8021694 <__gethex+0x320>
 8021626:	f8d8 300c 	ldr.w	r3, [r8, #12]
 802162a:	2b02      	cmp	r3, #2
 802162c:	d02a      	beq.n	8021684 <__gethex+0x310>
 802162e:	2b03      	cmp	r3, #3
 8021630:	d02c      	beq.n	802168c <__gethex+0x318>
 8021632:	2b01      	cmp	r3, #1
 8021634:	d115      	bne.n	8021662 <__gethex+0x2ee>
 8021636:	42ae      	cmp	r6, r5
 8021638:	d113      	bne.n	8021662 <__gethex+0x2ee>
 802163a:	2e01      	cmp	r6, #1
 802163c:	d10b      	bne.n	8021656 <__gethex+0x2e2>
 802163e:	9a04      	ldr	r2, [sp, #16]
 8021640:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8021644:	6013      	str	r3, [r2, #0]
 8021646:	2301      	movs	r3, #1
 8021648:	6123      	str	r3, [r4, #16]
 802164a:	f8c9 3000 	str.w	r3, [r9]
 802164e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8021650:	2762      	movs	r7, #98	; 0x62
 8021652:	601c      	str	r4, [r3, #0]
 8021654:	e723      	b.n	802149e <__gethex+0x12a>
 8021656:	1e71      	subs	r1, r6, #1
 8021658:	4620      	mov	r0, r4
 802165a:	f000 fe50 	bl	80222fe <__any_on>
 802165e:	2800      	cmp	r0, #0
 8021660:	d1ed      	bne.n	802163e <__gethex+0x2ca>
 8021662:	ee18 0a10 	vmov	r0, s16
 8021666:	4621      	mov	r1, r4
 8021668:	f000 f9ee 	bl	8021a48 <_Bfree>
 802166c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802166e:	2300      	movs	r3, #0
 8021670:	6013      	str	r3, [r2, #0]
 8021672:	2750      	movs	r7, #80	; 0x50
 8021674:	e713      	b.n	802149e <__gethex+0x12a>
 8021676:	bf00      	nop
 8021678:	08027540 	.word	0x08027540
 802167c:	08027460 	.word	0x08027460
 8021680:	080274d4 	.word	0x080274d4
 8021684:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8021686:	2b00      	cmp	r3, #0
 8021688:	d1eb      	bne.n	8021662 <__gethex+0x2ee>
 802168a:	e7d8      	b.n	802163e <__gethex+0x2ca>
 802168c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802168e:	2b00      	cmp	r3, #0
 8021690:	d1d5      	bne.n	802163e <__gethex+0x2ca>
 8021692:	e7e6      	b.n	8021662 <__gethex+0x2ee>
 8021694:	1e6f      	subs	r7, r5, #1
 8021696:	f1ba 0f00 	cmp.w	sl, #0
 802169a:	d131      	bne.n	8021700 <__gethex+0x38c>
 802169c:	b127      	cbz	r7, 80216a8 <__gethex+0x334>
 802169e:	4639      	mov	r1, r7
 80216a0:	4620      	mov	r0, r4
 80216a2:	f000 fe2c 	bl	80222fe <__any_on>
 80216a6:	4682      	mov	sl, r0
 80216a8:	117b      	asrs	r3, r7, #5
 80216aa:	2101      	movs	r1, #1
 80216ac:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80216b0:	f007 071f 	and.w	r7, r7, #31
 80216b4:	fa01 f707 	lsl.w	r7, r1, r7
 80216b8:	421f      	tst	r7, r3
 80216ba:	4629      	mov	r1, r5
 80216bc:	4620      	mov	r0, r4
 80216be:	bf18      	it	ne
 80216c0:	f04a 0a02 	orrne.w	sl, sl, #2
 80216c4:	1b76      	subs	r6, r6, r5
 80216c6:	f7ff fdee 	bl	80212a6 <rshift>
 80216ca:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80216ce:	2702      	movs	r7, #2
 80216d0:	f1ba 0f00 	cmp.w	sl, #0
 80216d4:	d048      	beq.n	8021768 <__gethex+0x3f4>
 80216d6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80216da:	2b02      	cmp	r3, #2
 80216dc:	d015      	beq.n	802170a <__gethex+0x396>
 80216de:	2b03      	cmp	r3, #3
 80216e0:	d017      	beq.n	8021712 <__gethex+0x39e>
 80216e2:	2b01      	cmp	r3, #1
 80216e4:	d109      	bne.n	80216fa <__gethex+0x386>
 80216e6:	f01a 0f02 	tst.w	sl, #2
 80216ea:	d006      	beq.n	80216fa <__gethex+0x386>
 80216ec:	f8d9 0000 	ldr.w	r0, [r9]
 80216f0:	ea4a 0a00 	orr.w	sl, sl, r0
 80216f4:	f01a 0f01 	tst.w	sl, #1
 80216f8:	d10e      	bne.n	8021718 <__gethex+0x3a4>
 80216fa:	f047 0710 	orr.w	r7, r7, #16
 80216fe:	e033      	b.n	8021768 <__gethex+0x3f4>
 8021700:	f04f 0a01 	mov.w	sl, #1
 8021704:	e7d0      	b.n	80216a8 <__gethex+0x334>
 8021706:	2701      	movs	r7, #1
 8021708:	e7e2      	b.n	80216d0 <__gethex+0x35c>
 802170a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802170c:	f1c3 0301 	rsb	r3, r3, #1
 8021710:	9315      	str	r3, [sp, #84]	; 0x54
 8021712:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8021714:	2b00      	cmp	r3, #0
 8021716:	d0f0      	beq.n	80216fa <__gethex+0x386>
 8021718:	f8d4 b010 	ldr.w	fp, [r4, #16]
 802171c:	f104 0314 	add.w	r3, r4, #20
 8021720:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8021724:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8021728:	f04f 0c00 	mov.w	ip, #0
 802172c:	4618      	mov	r0, r3
 802172e:	f853 2b04 	ldr.w	r2, [r3], #4
 8021732:	f1b2 3fff 	cmp.w	r2, #4294967295
 8021736:	d01c      	beq.n	8021772 <__gethex+0x3fe>
 8021738:	3201      	adds	r2, #1
 802173a:	6002      	str	r2, [r0, #0]
 802173c:	2f02      	cmp	r7, #2
 802173e:	f104 0314 	add.w	r3, r4, #20
 8021742:	d13f      	bne.n	80217c4 <__gethex+0x450>
 8021744:	f8d8 2000 	ldr.w	r2, [r8]
 8021748:	3a01      	subs	r2, #1
 802174a:	42b2      	cmp	r2, r6
 802174c:	d10a      	bne.n	8021764 <__gethex+0x3f0>
 802174e:	1171      	asrs	r1, r6, #5
 8021750:	2201      	movs	r2, #1
 8021752:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8021756:	f006 061f 	and.w	r6, r6, #31
 802175a:	fa02 f606 	lsl.w	r6, r2, r6
 802175e:	421e      	tst	r6, r3
 8021760:	bf18      	it	ne
 8021762:	4617      	movne	r7, r2
 8021764:	f047 0720 	orr.w	r7, r7, #32
 8021768:	9b14      	ldr	r3, [sp, #80]	; 0x50
 802176a:	601c      	str	r4, [r3, #0]
 802176c:	9b04      	ldr	r3, [sp, #16]
 802176e:	601d      	str	r5, [r3, #0]
 8021770:	e695      	b.n	802149e <__gethex+0x12a>
 8021772:	4299      	cmp	r1, r3
 8021774:	f843 cc04 	str.w	ip, [r3, #-4]
 8021778:	d8d8      	bhi.n	802172c <__gethex+0x3b8>
 802177a:	68a3      	ldr	r3, [r4, #8]
 802177c:	459b      	cmp	fp, r3
 802177e:	db19      	blt.n	80217b4 <__gethex+0x440>
 8021780:	6861      	ldr	r1, [r4, #4]
 8021782:	ee18 0a10 	vmov	r0, s16
 8021786:	3101      	adds	r1, #1
 8021788:	f000 f91e 	bl	80219c8 <_Balloc>
 802178c:	4681      	mov	r9, r0
 802178e:	b918      	cbnz	r0, 8021798 <__gethex+0x424>
 8021790:	4b1a      	ldr	r3, [pc, #104]	; (80217fc <__gethex+0x488>)
 8021792:	4602      	mov	r2, r0
 8021794:	2184      	movs	r1, #132	; 0x84
 8021796:	e6a8      	b.n	80214ea <__gethex+0x176>
 8021798:	6922      	ldr	r2, [r4, #16]
 802179a:	3202      	adds	r2, #2
 802179c:	f104 010c 	add.w	r1, r4, #12
 80217a0:	0092      	lsls	r2, r2, #2
 80217a2:	300c      	adds	r0, #12
 80217a4:	f7fd f8b8 	bl	801e918 <memcpy>
 80217a8:	4621      	mov	r1, r4
 80217aa:	ee18 0a10 	vmov	r0, s16
 80217ae:	f000 f94b 	bl	8021a48 <_Bfree>
 80217b2:	464c      	mov	r4, r9
 80217b4:	6923      	ldr	r3, [r4, #16]
 80217b6:	1c5a      	adds	r2, r3, #1
 80217b8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80217bc:	6122      	str	r2, [r4, #16]
 80217be:	2201      	movs	r2, #1
 80217c0:	615a      	str	r2, [r3, #20]
 80217c2:	e7bb      	b.n	802173c <__gethex+0x3c8>
 80217c4:	6922      	ldr	r2, [r4, #16]
 80217c6:	455a      	cmp	r2, fp
 80217c8:	dd0b      	ble.n	80217e2 <__gethex+0x46e>
 80217ca:	2101      	movs	r1, #1
 80217cc:	4620      	mov	r0, r4
 80217ce:	f7ff fd6a 	bl	80212a6 <rshift>
 80217d2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80217d6:	3501      	adds	r5, #1
 80217d8:	42ab      	cmp	r3, r5
 80217da:	f6ff aed0 	blt.w	802157e <__gethex+0x20a>
 80217de:	2701      	movs	r7, #1
 80217e0:	e7c0      	b.n	8021764 <__gethex+0x3f0>
 80217e2:	f016 061f 	ands.w	r6, r6, #31
 80217e6:	d0fa      	beq.n	80217de <__gethex+0x46a>
 80217e8:	449a      	add	sl, r3
 80217ea:	f1c6 0620 	rsb	r6, r6, #32
 80217ee:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80217f2:	f000 f9df 	bl	8021bb4 <__hi0bits>
 80217f6:	42b0      	cmp	r0, r6
 80217f8:	dbe7      	blt.n	80217ca <__gethex+0x456>
 80217fa:	e7f0      	b.n	80217de <__gethex+0x46a>
 80217fc:	08027460 	.word	0x08027460

08021800 <L_shift>:
 8021800:	f1c2 0208 	rsb	r2, r2, #8
 8021804:	0092      	lsls	r2, r2, #2
 8021806:	b570      	push	{r4, r5, r6, lr}
 8021808:	f1c2 0620 	rsb	r6, r2, #32
 802180c:	6843      	ldr	r3, [r0, #4]
 802180e:	6804      	ldr	r4, [r0, #0]
 8021810:	fa03 f506 	lsl.w	r5, r3, r6
 8021814:	432c      	orrs	r4, r5
 8021816:	40d3      	lsrs	r3, r2
 8021818:	6004      	str	r4, [r0, #0]
 802181a:	f840 3f04 	str.w	r3, [r0, #4]!
 802181e:	4288      	cmp	r0, r1
 8021820:	d3f4      	bcc.n	802180c <L_shift+0xc>
 8021822:	bd70      	pop	{r4, r5, r6, pc}

08021824 <__match>:
 8021824:	b530      	push	{r4, r5, lr}
 8021826:	6803      	ldr	r3, [r0, #0]
 8021828:	3301      	adds	r3, #1
 802182a:	f811 4b01 	ldrb.w	r4, [r1], #1
 802182e:	b914      	cbnz	r4, 8021836 <__match+0x12>
 8021830:	6003      	str	r3, [r0, #0]
 8021832:	2001      	movs	r0, #1
 8021834:	bd30      	pop	{r4, r5, pc}
 8021836:	f813 2b01 	ldrb.w	r2, [r3], #1
 802183a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 802183e:	2d19      	cmp	r5, #25
 8021840:	bf98      	it	ls
 8021842:	3220      	addls	r2, #32
 8021844:	42a2      	cmp	r2, r4
 8021846:	d0f0      	beq.n	802182a <__match+0x6>
 8021848:	2000      	movs	r0, #0
 802184a:	e7f3      	b.n	8021834 <__match+0x10>

0802184c <__hexnan>:
 802184c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021850:	680b      	ldr	r3, [r1, #0]
 8021852:	6801      	ldr	r1, [r0, #0]
 8021854:	115e      	asrs	r6, r3, #5
 8021856:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 802185a:	f013 031f 	ands.w	r3, r3, #31
 802185e:	b087      	sub	sp, #28
 8021860:	bf18      	it	ne
 8021862:	3604      	addne	r6, #4
 8021864:	2500      	movs	r5, #0
 8021866:	1f37      	subs	r7, r6, #4
 8021868:	4682      	mov	sl, r0
 802186a:	4690      	mov	r8, r2
 802186c:	9301      	str	r3, [sp, #4]
 802186e:	f846 5c04 	str.w	r5, [r6, #-4]
 8021872:	46b9      	mov	r9, r7
 8021874:	463c      	mov	r4, r7
 8021876:	9502      	str	r5, [sp, #8]
 8021878:	46ab      	mov	fp, r5
 802187a:	784a      	ldrb	r2, [r1, #1]
 802187c:	1c4b      	adds	r3, r1, #1
 802187e:	9303      	str	r3, [sp, #12]
 8021880:	b342      	cbz	r2, 80218d4 <__hexnan+0x88>
 8021882:	4610      	mov	r0, r2
 8021884:	9105      	str	r1, [sp, #20]
 8021886:	9204      	str	r2, [sp, #16]
 8021888:	f7ff fd5f 	bl	802134a <__hexdig_fun>
 802188c:	2800      	cmp	r0, #0
 802188e:	d14f      	bne.n	8021930 <__hexnan+0xe4>
 8021890:	9a04      	ldr	r2, [sp, #16]
 8021892:	9905      	ldr	r1, [sp, #20]
 8021894:	2a20      	cmp	r2, #32
 8021896:	d818      	bhi.n	80218ca <__hexnan+0x7e>
 8021898:	9b02      	ldr	r3, [sp, #8]
 802189a:	459b      	cmp	fp, r3
 802189c:	dd13      	ble.n	80218c6 <__hexnan+0x7a>
 802189e:	454c      	cmp	r4, r9
 80218a0:	d206      	bcs.n	80218b0 <__hexnan+0x64>
 80218a2:	2d07      	cmp	r5, #7
 80218a4:	dc04      	bgt.n	80218b0 <__hexnan+0x64>
 80218a6:	462a      	mov	r2, r5
 80218a8:	4649      	mov	r1, r9
 80218aa:	4620      	mov	r0, r4
 80218ac:	f7ff ffa8 	bl	8021800 <L_shift>
 80218b0:	4544      	cmp	r4, r8
 80218b2:	d950      	bls.n	8021956 <__hexnan+0x10a>
 80218b4:	2300      	movs	r3, #0
 80218b6:	f1a4 0904 	sub.w	r9, r4, #4
 80218ba:	f844 3c04 	str.w	r3, [r4, #-4]
 80218be:	f8cd b008 	str.w	fp, [sp, #8]
 80218c2:	464c      	mov	r4, r9
 80218c4:	461d      	mov	r5, r3
 80218c6:	9903      	ldr	r1, [sp, #12]
 80218c8:	e7d7      	b.n	802187a <__hexnan+0x2e>
 80218ca:	2a29      	cmp	r2, #41	; 0x29
 80218cc:	d156      	bne.n	802197c <__hexnan+0x130>
 80218ce:	3102      	adds	r1, #2
 80218d0:	f8ca 1000 	str.w	r1, [sl]
 80218d4:	f1bb 0f00 	cmp.w	fp, #0
 80218d8:	d050      	beq.n	802197c <__hexnan+0x130>
 80218da:	454c      	cmp	r4, r9
 80218dc:	d206      	bcs.n	80218ec <__hexnan+0xa0>
 80218de:	2d07      	cmp	r5, #7
 80218e0:	dc04      	bgt.n	80218ec <__hexnan+0xa0>
 80218e2:	462a      	mov	r2, r5
 80218e4:	4649      	mov	r1, r9
 80218e6:	4620      	mov	r0, r4
 80218e8:	f7ff ff8a 	bl	8021800 <L_shift>
 80218ec:	4544      	cmp	r4, r8
 80218ee:	d934      	bls.n	802195a <__hexnan+0x10e>
 80218f0:	f1a8 0204 	sub.w	r2, r8, #4
 80218f4:	4623      	mov	r3, r4
 80218f6:	f853 1b04 	ldr.w	r1, [r3], #4
 80218fa:	f842 1f04 	str.w	r1, [r2, #4]!
 80218fe:	429f      	cmp	r7, r3
 8021900:	d2f9      	bcs.n	80218f6 <__hexnan+0xaa>
 8021902:	1b3b      	subs	r3, r7, r4
 8021904:	f023 0303 	bic.w	r3, r3, #3
 8021908:	3304      	adds	r3, #4
 802190a:	3401      	adds	r4, #1
 802190c:	3e03      	subs	r6, #3
 802190e:	42b4      	cmp	r4, r6
 8021910:	bf88      	it	hi
 8021912:	2304      	movhi	r3, #4
 8021914:	4443      	add	r3, r8
 8021916:	2200      	movs	r2, #0
 8021918:	f843 2b04 	str.w	r2, [r3], #4
 802191c:	429f      	cmp	r7, r3
 802191e:	d2fb      	bcs.n	8021918 <__hexnan+0xcc>
 8021920:	683b      	ldr	r3, [r7, #0]
 8021922:	b91b      	cbnz	r3, 802192c <__hexnan+0xe0>
 8021924:	4547      	cmp	r7, r8
 8021926:	d127      	bne.n	8021978 <__hexnan+0x12c>
 8021928:	2301      	movs	r3, #1
 802192a:	603b      	str	r3, [r7, #0]
 802192c:	2005      	movs	r0, #5
 802192e:	e026      	b.n	802197e <__hexnan+0x132>
 8021930:	3501      	adds	r5, #1
 8021932:	2d08      	cmp	r5, #8
 8021934:	f10b 0b01 	add.w	fp, fp, #1
 8021938:	dd06      	ble.n	8021948 <__hexnan+0xfc>
 802193a:	4544      	cmp	r4, r8
 802193c:	d9c3      	bls.n	80218c6 <__hexnan+0x7a>
 802193e:	2300      	movs	r3, #0
 8021940:	f844 3c04 	str.w	r3, [r4, #-4]
 8021944:	2501      	movs	r5, #1
 8021946:	3c04      	subs	r4, #4
 8021948:	6822      	ldr	r2, [r4, #0]
 802194a:	f000 000f 	and.w	r0, r0, #15
 802194e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8021952:	6022      	str	r2, [r4, #0]
 8021954:	e7b7      	b.n	80218c6 <__hexnan+0x7a>
 8021956:	2508      	movs	r5, #8
 8021958:	e7b5      	b.n	80218c6 <__hexnan+0x7a>
 802195a:	9b01      	ldr	r3, [sp, #4]
 802195c:	2b00      	cmp	r3, #0
 802195e:	d0df      	beq.n	8021920 <__hexnan+0xd4>
 8021960:	f04f 32ff 	mov.w	r2, #4294967295
 8021964:	f1c3 0320 	rsb	r3, r3, #32
 8021968:	fa22 f303 	lsr.w	r3, r2, r3
 802196c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8021970:	401a      	ands	r2, r3
 8021972:	f846 2c04 	str.w	r2, [r6, #-4]
 8021976:	e7d3      	b.n	8021920 <__hexnan+0xd4>
 8021978:	3f04      	subs	r7, #4
 802197a:	e7d1      	b.n	8021920 <__hexnan+0xd4>
 802197c:	2004      	movs	r0, #4
 802197e:	b007      	add	sp, #28
 8021980:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08021984 <_localeconv_r>:
 8021984:	4800      	ldr	r0, [pc, #0]	; (8021988 <_localeconv_r+0x4>)
 8021986:	4770      	bx	lr
 8021988:	2400045c 	.word	0x2400045c

0802198c <__retarget_lock_init_recursive>:
 802198c:	4770      	bx	lr

0802198e <__retarget_lock_acquire_recursive>:
 802198e:	4770      	bx	lr

08021990 <__retarget_lock_release_recursive>:
 8021990:	4770      	bx	lr
	...

08021994 <malloc>:
 8021994:	4b02      	ldr	r3, [pc, #8]	; (80219a0 <malloc+0xc>)
 8021996:	4601      	mov	r1, r0
 8021998:	6818      	ldr	r0, [r3, #0]
 802199a:	f000 bd31 	b.w	8022400 <_malloc_r>
 802199e:	bf00      	nop
 80219a0:	24000304 	.word	0x24000304

080219a4 <__ascii_mbtowc>:
 80219a4:	b082      	sub	sp, #8
 80219a6:	b901      	cbnz	r1, 80219aa <__ascii_mbtowc+0x6>
 80219a8:	a901      	add	r1, sp, #4
 80219aa:	b142      	cbz	r2, 80219be <__ascii_mbtowc+0x1a>
 80219ac:	b14b      	cbz	r3, 80219c2 <__ascii_mbtowc+0x1e>
 80219ae:	7813      	ldrb	r3, [r2, #0]
 80219b0:	600b      	str	r3, [r1, #0]
 80219b2:	7812      	ldrb	r2, [r2, #0]
 80219b4:	1e10      	subs	r0, r2, #0
 80219b6:	bf18      	it	ne
 80219b8:	2001      	movne	r0, #1
 80219ba:	b002      	add	sp, #8
 80219bc:	4770      	bx	lr
 80219be:	4610      	mov	r0, r2
 80219c0:	e7fb      	b.n	80219ba <__ascii_mbtowc+0x16>
 80219c2:	f06f 0001 	mvn.w	r0, #1
 80219c6:	e7f8      	b.n	80219ba <__ascii_mbtowc+0x16>

080219c8 <_Balloc>:
 80219c8:	b570      	push	{r4, r5, r6, lr}
 80219ca:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80219cc:	4604      	mov	r4, r0
 80219ce:	460d      	mov	r5, r1
 80219d0:	b976      	cbnz	r6, 80219f0 <_Balloc+0x28>
 80219d2:	2010      	movs	r0, #16
 80219d4:	f7ff ffde 	bl	8021994 <malloc>
 80219d8:	4602      	mov	r2, r0
 80219da:	6260      	str	r0, [r4, #36]	; 0x24
 80219dc:	b920      	cbnz	r0, 80219e8 <_Balloc+0x20>
 80219de:	4b18      	ldr	r3, [pc, #96]	; (8021a40 <_Balloc+0x78>)
 80219e0:	4818      	ldr	r0, [pc, #96]	; (8021a44 <_Balloc+0x7c>)
 80219e2:	2166      	movs	r1, #102	; 0x66
 80219e4:	f7fe fd26 	bl	8020434 <__assert_func>
 80219e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80219ec:	6006      	str	r6, [r0, #0]
 80219ee:	60c6      	str	r6, [r0, #12]
 80219f0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80219f2:	68f3      	ldr	r3, [r6, #12]
 80219f4:	b183      	cbz	r3, 8021a18 <_Balloc+0x50>
 80219f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80219f8:	68db      	ldr	r3, [r3, #12]
 80219fa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80219fe:	b9b8      	cbnz	r0, 8021a30 <_Balloc+0x68>
 8021a00:	2101      	movs	r1, #1
 8021a02:	fa01 f605 	lsl.w	r6, r1, r5
 8021a06:	1d72      	adds	r2, r6, #5
 8021a08:	0092      	lsls	r2, r2, #2
 8021a0a:	4620      	mov	r0, r4
 8021a0c:	f000 fc98 	bl	8022340 <_calloc_r>
 8021a10:	b160      	cbz	r0, 8021a2c <_Balloc+0x64>
 8021a12:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8021a16:	e00e      	b.n	8021a36 <_Balloc+0x6e>
 8021a18:	2221      	movs	r2, #33	; 0x21
 8021a1a:	2104      	movs	r1, #4
 8021a1c:	4620      	mov	r0, r4
 8021a1e:	f000 fc8f 	bl	8022340 <_calloc_r>
 8021a22:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8021a24:	60f0      	str	r0, [r6, #12]
 8021a26:	68db      	ldr	r3, [r3, #12]
 8021a28:	2b00      	cmp	r3, #0
 8021a2a:	d1e4      	bne.n	80219f6 <_Balloc+0x2e>
 8021a2c:	2000      	movs	r0, #0
 8021a2e:	bd70      	pop	{r4, r5, r6, pc}
 8021a30:	6802      	ldr	r2, [r0, #0]
 8021a32:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8021a36:	2300      	movs	r3, #0
 8021a38:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8021a3c:	e7f7      	b.n	8021a2e <_Balloc+0x66>
 8021a3e:	bf00      	nop
 8021a40:	080272ed 	.word	0x080272ed
 8021a44:	08027554 	.word	0x08027554

08021a48 <_Bfree>:
 8021a48:	b570      	push	{r4, r5, r6, lr}
 8021a4a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8021a4c:	4605      	mov	r5, r0
 8021a4e:	460c      	mov	r4, r1
 8021a50:	b976      	cbnz	r6, 8021a70 <_Bfree+0x28>
 8021a52:	2010      	movs	r0, #16
 8021a54:	f7ff ff9e 	bl	8021994 <malloc>
 8021a58:	4602      	mov	r2, r0
 8021a5a:	6268      	str	r0, [r5, #36]	; 0x24
 8021a5c:	b920      	cbnz	r0, 8021a68 <_Bfree+0x20>
 8021a5e:	4b09      	ldr	r3, [pc, #36]	; (8021a84 <_Bfree+0x3c>)
 8021a60:	4809      	ldr	r0, [pc, #36]	; (8021a88 <_Bfree+0x40>)
 8021a62:	218a      	movs	r1, #138	; 0x8a
 8021a64:	f7fe fce6 	bl	8020434 <__assert_func>
 8021a68:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8021a6c:	6006      	str	r6, [r0, #0]
 8021a6e:	60c6      	str	r6, [r0, #12]
 8021a70:	b13c      	cbz	r4, 8021a82 <_Bfree+0x3a>
 8021a72:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8021a74:	6862      	ldr	r2, [r4, #4]
 8021a76:	68db      	ldr	r3, [r3, #12]
 8021a78:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8021a7c:	6021      	str	r1, [r4, #0]
 8021a7e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8021a82:	bd70      	pop	{r4, r5, r6, pc}
 8021a84:	080272ed 	.word	0x080272ed
 8021a88:	08027554 	.word	0x08027554

08021a8c <__multadd>:
 8021a8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021a90:	690e      	ldr	r6, [r1, #16]
 8021a92:	4607      	mov	r7, r0
 8021a94:	4698      	mov	r8, r3
 8021a96:	460c      	mov	r4, r1
 8021a98:	f101 0014 	add.w	r0, r1, #20
 8021a9c:	2300      	movs	r3, #0
 8021a9e:	6805      	ldr	r5, [r0, #0]
 8021aa0:	b2a9      	uxth	r1, r5
 8021aa2:	fb02 8101 	mla	r1, r2, r1, r8
 8021aa6:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8021aaa:	0c2d      	lsrs	r5, r5, #16
 8021aac:	fb02 c505 	mla	r5, r2, r5, ip
 8021ab0:	b289      	uxth	r1, r1
 8021ab2:	3301      	adds	r3, #1
 8021ab4:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8021ab8:	429e      	cmp	r6, r3
 8021aba:	f840 1b04 	str.w	r1, [r0], #4
 8021abe:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8021ac2:	dcec      	bgt.n	8021a9e <__multadd+0x12>
 8021ac4:	f1b8 0f00 	cmp.w	r8, #0
 8021ac8:	d022      	beq.n	8021b10 <__multadd+0x84>
 8021aca:	68a3      	ldr	r3, [r4, #8]
 8021acc:	42b3      	cmp	r3, r6
 8021ace:	dc19      	bgt.n	8021b04 <__multadd+0x78>
 8021ad0:	6861      	ldr	r1, [r4, #4]
 8021ad2:	4638      	mov	r0, r7
 8021ad4:	3101      	adds	r1, #1
 8021ad6:	f7ff ff77 	bl	80219c8 <_Balloc>
 8021ada:	4605      	mov	r5, r0
 8021adc:	b928      	cbnz	r0, 8021aea <__multadd+0x5e>
 8021ade:	4602      	mov	r2, r0
 8021ae0:	4b0d      	ldr	r3, [pc, #52]	; (8021b18 <__multadd+0x8c>)
 8021ae2:	480e      	ldr	r0, [pc, #56]	; (8021b1c <__multadd+0x90>)
 8021ae4:	21b5      	movs	r1, #181	; 0xb5
 8021ae6:	f7fe fca5 	bl	8020434 <__assert_func>
 8021aea:	6922      	ldr	r2, [r4, #16]
 8021aec:	3202      	adds	r2, #2
 8021aee:	f104 010c 	add.w	r1, r4, #12
 8021af2:	0092      	lsls	r2, r2, #2
 8021af4:	300c      	adds	r0, #12
 8021af6:	f7fc ff0f 	bl	801e918 <memcpy>
 8021afa:	4621      	mov	r1, r4
 8021afc:	4638      	mov	r0, r7
 8021afe:	f7ff ffa3 	bl	8021a48 <_Bfree>
 8021b02:	462c      	mov	r4, r5
 8021b04:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8021b08:	3601      	adds	r6, #1
 8021b0a:	f8c3 8014 	str.w	r8, [r3, #20]
 8021b0e:	6126      	str	r6, [r4, #16]
 8021b10:	4620      	mov	r0, r4
 8021b12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021b16:	bf00      	nop
 8021b18:	08027460 	.word	0x08027460
 8021b1c:	08027554 	.word	0x08027554

08021b20 <__s2b>:
 8021b20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021b24:	460c      	mov	r4, r1
 8021b26:	4615      	mov	r5, r2
 8021b28:	461f      	mov	r7, r3
 8021b2a:	2209      	movs	r2, #9
 8021b2c:	3308      	adds	r3, #8
 8021b2e:	4606      	mov	r6, r0
 8021b30:	fb93 f3f2 	sdiv	r3, r3, r2
 8021b34:	2100      	movs	r1, #0
 8021b36:	2201      	movs	r2, #1
 8021b38:	429a      	cmp	r2, r3
 8021b3a:	db09      	blt.n	8021b50 <__s2b+0x30>
 8021b3c:	4630      	mov	r0, r6
 8021b3e:	f7ff ff43 	bl	80219c8 <_Balloc>
 8021b42:	b940      	cbnz	r0, 8021b56 <__s2b+0x36>
 8021b44:	4602      	mov	r2, r0
 8021b46:	4b19      	ldr	r3, [pc, #100]	; (8021bac <__s2b+0x8c>)
 8021b48:	4819      	ldr	r0, [pc, #100]	; (8021bb0 <__s2b+0x90>)
 8021b4a:	21ce      	movs	r1, #206	; 0xce
 8021b4c:	f7fe fc72 	bl	8020434 <__assert_func>
 8021b50:	0052      	lsls	r2, r2, #1
 8021b52:	3101      	adds	r1, #1
 8021b54:	e7f0      	b.n	8021b38 <__s2b+0x18>
 8021b56:	9b08      	ldr	r3, [sp, #32]
 8021b58:	6143      	str	r3, [r0, #20]
 8021b5a:	2d09      	cmp	r5, #9
 8021b5c:	f04f 0301 	mov.w	r3, #1
 8021b60:	6103      	str	r3, [r0, #16]
 8021b62:	dd16      	ble.n	8021b92 <__s2b+0x72>
 8021b64:	f104 0909 	add.w	r9, r4, #9
 8021b68:	46c8      	mov	r8, r9
 8021b6a:	442c      	add	r4, r5
 8021b6c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8021b70:	4601      	mov	r1, r0
 8021b72:	3b30      	subs	r3, #48	; 0x30
 8021b74:	220a      	movs	r2, #10
 8021b76:	4630      	mov	r0, r6
 8021b78:	f7ff ff88 	bl	8021a8c <__multadd>
 8021b7c:	45a0      	cmp	r8, r4
 8021b7e:	d1f5      	bne.n	8021b6c <__s2b+0x4c>
 8021b80:	f1a5 0408 	sub.w	r4, r5, #8
 8021b84:	444c      	add	r4, r9
 8021b86:	1b2d      	subs	r5, r5, r4
 8021b88:	1963      	adds	r3, r4, r5
 8021b8a:	42bb      	cmp	r3, r7
 8021b8c:	db04      	blt.n	8021b98 <__s2b+0x78>
 8021b8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8021b92:	340a      	adds	r4, #10
 8021b94:	2509      	movs	r5, #9
 8021b96:	e7f6      	b.n	8021b86 <__s2b+0x66>
 8021b98:	f814 3b01 	ldrb.w	r3, [r4], #1
 8021b9c:	4601      	mov	r1, r0
 8021b9e:	3b30      	subs	r3, #48	; 0x30
 8021ba0:	220a      	movs	r2, #10
 8021ba2:	4630      	mov	r0, r6
 8021ba4:	f7ff ff72 	bl	8021a8c <__multadd>
 8021ba8:	e7ee      	b.n	8021b88 <__s2b+0x68>
 8021baa:	bf00      	nop
 8021bac:	08027460 	.word	0x08027460
 8021bb0:	08027554 	.word	0x08027554

08021bb4 <__hi0bits>:
 8021bb4:	0c03      	lsrs	r3, r0, #16
 8021bb6:	041b      	lsls	r3, r3, #16
 8021bb8:	b9d3      	cbnz	r3, 8021bf0 <__hi0bits+0x3c>
 8021bba:	0400      	lsls	r0, r0, #16
 8021bbc:	2310      	movs	r3, #16
 8021bbe:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8021bc2:	bf04      	itt	eq
 8021bc4:	0200      	lsleq	r0, r0, #8
 8021bc6:	3308      	addeq	r3, #8
 8021bc8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8021bcc:	bf04      	itt	eq
 8021bce:	0100      	lsleq	r0, r0, #4
 8021bd0:	3304      	addeq	r3, #4
 8021bd2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8021bd6:	bf04      	itt	eq
 8021bd8:	0080      	lsleq	r0, r0, #2
 8021bda:	3302      	addeq	r3, #2
 8021bdc:	2800      	cmp	r0, #0
 8021bde:	db05      	blt.n	8021bec <__hi0bits+0x38>
 8021be0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8021be4:	f103 0301 	add.w	r3, r3, #1
 8021be8:	bf08      	it	eq
 8021bea:	2320      	moveq	r3, #32
 8021bec:	4618      	mov	r0, r3
 8021bee:	4770      	bx	lr
 8021bf0:	2300      	movs	r3, #0
 8021bf2:	e7e4      	b.n	8021bbe <__hi0bits+0xa>

08021bf4 <__lo0bits>:
 8021bf4:	6803      	ldr	r3, [r0, #0]
 8021bf6:	f013 0207 	ands.w	r2, r3, #7
 8021bfa:	4601      	mov	r1, r0
 8021bfc:	d00b      	beq.n	8021c16 <__lo0bits+0x22>
 8021bfe:	07da      	lsls	r2, r3, #31
 8021c00:	d424      	bmi.n	8021c4c <__lo0bits+0x58>
 8021c02:	0798      	lsls	r0, r3, #30
 8021c04:	bf49      	itett	mi
 8021c06:	085b      	lsrmi	r3, r3, #1
 8021c08:	089b      	lsrpl	r3, r3, #2
 8021c0a:	2001      	movmi	r0, #1
 8021c0c:	600b      	strmi	r3, [r1, #0]
 8021c0e:	bf5c      	itt	pl
 8021c10:	600b      	strpl	r3, [r1, #0]
 8021c12:	2002      	movpl	r0, #2
 8021c14:	4770      	bx	lr
 8021c16:	b298      	uxth	r0, r3
 8021c18:	b9b0      	cbnz	r0, 8021c48 <__lo0bits+0x54>
 8021c1a:	0c1b      	lsrs	r3, r3, #16
 8021c1c:	2010      	movs	r0, #16
 8021c1e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8021c22:	bf04      	itt	eq
 8021c24:	0a1b      	lsreq	r3, r3, #8
 8021c26:	3008      	addeq	r0, #8
 8021c28:	071a      	lsls	r2, r3, #28
 8021c2a:	bf04      	itt	eq
 8021c2c:	091b      	lsreq	r3, r3, #4
 8021c2e:	3004      	addeq	r0, #4
 8021c30:	079a      	lsls	r2, r3, #30
 8021c32:	bf04      	itt	eq
 8021c34:	089b      	lsreq	r3, r3, #2
 8021c36:	3002      	addeq	r0, #2
 8021c38:	07da      	lsls	r2, r3, #31
 8021c3a:	d403      	bmi.n	8021c44 <__lo0bits+0x50>
 8021c3c:	085b      	lsrs	r3, r3, #1
 8021c3e:	f100 0001 	add.w	r0, r0, #1
 8021c42:	d005      	beq.n	8021c50 <__lo0bits+0x5c>
 8021c44:	600b      	str	r3, [r1, #0]
 8021c46:	4770      	bx	lr
 8021c48:	4610      	mov	r0, r2
 8021c4a:	e7e8      	b.n	8021c1e <__lo0bits+0x2a>
 8021c4c:	2000      	movs	r0, #0
 8021c4e:	4770      	bx	lr
 8021c50:	2020      	movs	r0, #32
 8021c52:	4770      	bx	lr

08021c54 <__i2b>:
 8021c54:	b510      	push	{r4, lr}
 8021c56:	460c      	mov	r4, r1
 8021c58:	2101      	movs	r1, #1
 8021c5a:	f7ff feb5 	bl	80219c8 <_Balloc>
 8021c5e:	4602      	mov	r2, r0
 8021c60:	b928      	cbnz	r0, 8021c6e <__i2b+0x1a>
 8021c62:	4b05      	ldr	r3, [pc, #20]	; (8021c78 <__i2b+0x24>)
 8021c64:	4805      	ldr	r0, [pc, #20]	; (8021c7c <__i2b+0x28>)
 8021c66:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8021c6a:	f7fe fbe3 	bl	8020434 <__assert_func>
 8021c6e:	2301      	movs	r3, #1
 8021c70:	6144      	str	r4, [r0, #20]
 8021c72:	6103      	str	r3, [r0, #16]
 8021c74:	bd10      	pop	{r4, pc}
 8021c76:	bf00      	nop
 8021c78:	08027460 	.word	0x08027460
 8021c7c:	08027554 	.word	0x08027554

08021c80 <__multiply>:
 8021c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021c84:	4614      	mov	r4, r2
 8021c86:	690a      	ldr	r2, [r1, #16]
 8021c88:	6923      	ldr	r3, [r4, #16]
 8021c8a:	429a      	cmp	r2, r3
 8021c8c:	bfb8      	it	lt
 8021c8e:	460b      	movlt	r3, r1
 8021c90:	460d      	mov	r5, r1
 8021c92:	bfbc      	itt	lt
 8021c94:	4625      	movlt	r5, r4
 8021c96:	461c      	movlt	r4, r3
 8021c98:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8021c9c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8021ca0:	68ab      	ldr	r3, [r5, #8]
 8021ca2:	6869      	ldr	r1, [r5, #4]
 8021ca4:	eb0a 0709 	add.w	r7, sl, r9
 8021ca8:	42bb      	cmp	r3, r7
 8021caa:	b085      	sub	sp, #20
 8021cac:	bfb8      	it	lt
 8021cae:	3101      	addlt	r1, #1
 8021cb0:	f7ff fe8a 	bl	80219c8 <_Balloc>
 8021cb4:	b930      	cbnz	r0, 8021cc4 <__multiply+0x44>
 8021cb6:	4602      	mov	r2, r0
 8021cb8:	4b42      	ldr	r3, [pc, #264]	; (8021dc4 <__multiply+0x144>)
 8021cba:	4843      	ldr	r0, [pc, #268]	; (8021dc8 <__multiply+0x148>)
 8021cbc:	f240 115d 	movw	r1, #349	; 0x15d
 8021cc0:	f7fe fbb8 	bl	8020434 <__assert_func>
 8021cc4:	f100 0614 	add.w	r6, r0, #20
 8021cc8:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8021ccc:	4633      	mov	r3, r6
 8021cce:	2200      	movs	r2, #0
 8021cd0:	4543      	cmp	r3, r8
 8021cd2:	d31e      	bcc.n	8021d12 <__multiply+0x92>
 8021cd4:	f105 0c14 	add.w	ip, r5, #20
 8021cd8:	f104 0314 	add.w	r3, r4, #20
 8021cdc:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8021ce0:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8021ce4:	9202      	str	r2, [sp, #8]
 8021ce6:	ebac 0205 	sub.w	r2, ip, r5
 8021cea:	3a15      	subs	r2, #21
 8021cec:	f022 0203 	bic.w	r2, r2, #3
 8021cf0:	3204      	adds	r2, #4
 8021cf2:	f105 0115 	add.w	r1, r5, #21
 8021cf6:	458c      	cmp	ip, r1
 8021cf8:	bf38      	it	cc
 8021cfa:	2204      	movcc	r2, #4
 8021cfc:	9201      	str	r2, [sp, #4]
 8021cfe:	9a02      	ldr	r2, [sp, #8]
 8021d00:	9303      	str	r3, [sp, #12]
 8021d02:	429a      	cmp	r2, r3
 8021d04:	d808      	bhi.n	8021d18 <__multiply+0x98>
 8021d06:	2f00      	cmp	r7, #0
 8021d08:	dc55      	bgt.n	8021db6 <__multiply+0x136>
 8021d0a:	6107      	str	r7, [r0, #16]
 8021d0c:	b005      	add	sp, #20
 8021d0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021d12:	f843 2b04 	str.w	r2, [r3], #4
 8021d16:	e7db      	b.n	8021cd0 <__multiply+0x50>
 8021d18:	f8b3 a000 	ldrh.w	sl, [r3]
 8021d1c:	f1ba 0f00 	cmp.w	sl, #0
 8021d20:	d020      	beq.n	8021d64 <__multiply+0xe4>
 8021d22:	f105 0e14 	add.w	lr, r5, #20
 8021d26:	46b1      	mov	r9, r6
 8021d28:	2200      	movs	r2, #0
 8021d2a:	f85e 4b04 	ldr.w	r4, [lr], #4
 8021d2e:	f8d9 b000 	ldr.w	fp, [r9]
 8021d32:	b2a1      	uxth	r1, r4
 8021d34:	fa1f fb8b 	uxth.w	fp, fp
 8021d38:	fb0a b101 	mla	r1, sl, r1, fp
 8021d3c:	4411      	add	r1, r2
 8021d3e:	f8d9 2000 	ldr.w	r2, [r9]
 8021d42:	0c24      	lsrs	r4, r4, #16
 8021d44:	0c12      	lsrs	r2, r2, #16
 8021d46:	fb0a 2404 	mla	r4, sl, r4, r2
 8021d4a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8021d4e:	b289      	uxth	r1, r1
 8021d50:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8021d54:	45f4      	cmp	ip, lr
 8021d56:	f849 1b04 	str.w	r1, [r9], #4
 8021d5a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8021d5e:	d8e4      	bhi.n	8021d2a <__multiply+0xaa>
 8021d60:	9901      	ldr	r1, [sp, #4]
 8021d62:	5072      	str	r2, [r6, r1]
 8021d64:	9a03      	ldr	r2, [sp, #12]
 8021d66:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8021d6a:	3304      	adds	r3, #4
 8021d6c:	f1b9 0f00 	cmp.w	r9, #0
 8021d70:	d01f      	beq.n	8021db2 <__multiply+0x132>
 8021d72:	6834      	ldr	r4, [r6, #0]
 8021d74:	f105 0114 	add.w	r1, r5, #20
 8021d78:	46b6      	mov	lr, r6
 8021d7a:	f04f 0a00 	mov.w	sl, #0
 8021d7e:	880a      	ldrh	r2, [r1, #0]
 8021d80:	f8be b002 	ldrh.w	fp, [lr, #2]
 8021d84:	fb09 b202 	mla	r2, r9, r2, fp
 8021d88:	4492      	add	sl, r2
 8021d8a:	b2a4      	uxth	r4, r4
 8021d8c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8021d90:	f84e 4b04 	str.w	r4, [lr], #4
 8021d94:	f851 4b04 	ldr.w	r4, [r1], #4
 8021d98:	f8be 2000 	ldrh.w	r2, [lr]
 8021d9c:	0c24      	lsrs	r4, r4, #16
 8021d9e:	fb09 2404 	mla	r4, r9, r4, r2
 8021da2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8021da6:	458c      	cmp	ip, r1
 8021da8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8021dac:	d8e7      	bhi.n	8021d7e <__multiply+0xfe>
 8021dae:	9a01      	ldr	r2, [sp, #4]
 8021db0:	50b4      	str	r4, [r6, r2]
 8021db2:	3604      	adds	r6, #4
 8021db4:	e7a3      	b.n	8021cfe <__multiply+0x7e>
 8021db6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8021dba:	2b00      	cmp	r3, #0
 8021dbc:	d1a5      	bne.n	8021d0a <__multiply+0x8a>
 8021dbe:	3f01      	subs	r7, #1
 8021dc0:	e7a1      	b.n	8021d06 <__multiply+0x86>
 8021dc2:	bf00      	nop
 8021dc4:	08027460 	.word	0x08027460
 8021dc8:	08027554 	.word	0x08027554

08021dcc <__pow5mult>:
 8021dcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021dd0:	4615      	mov	r5, r2
 8021dd2:	f012 0203 	ands.w	r2, r2, #3
 8021dd6:	4606      	mov	r6, r0
 8021dd8:	460f      	mov	r7, r1
 8021dda:	d007      	beq.n	8021dec <__pow5mult+0x20>
 8021ddc:	4c25      	ldr	r4, [pc, #148]	; (8021e74 <__pow5mult+0xa8>)
 8021dde:	3a01      	subs	r2, #1
 8021de0:	2300      	movs	r3, #0
 8021de2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8021de6:	f7ff fe51 	bl	8021a8c <__multadd>
 8021dea:	4607      	mov	r7, r0
 8021dec:	10ad      	asrs	r5, r5, #2
 8021dee:	d03d      	beq.n	8021e6c <__pow5mult+0xa0>
 8021df0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8021df2:	b97c      	cbnz	r4, 8021e14 <__pow5mult+0x48>
 8021df4:	2010      	movs	r0, #16
 8021df6:	f7ff fdcd 	bl	8021994 <malloc>
 8021dfa:	4602      	mov	r2, r0
 8021dfc:	6270      	str	r0, [r6, #36]	; 0x24
 8021dfe:	b928      	cbnz	r0, 8021e0c <__pow5mult+0x40>
 8021e00:	4b1d      	ldr	r3, [pc, #116]	; (8021e78 <__pow5mult+0xac>)
 8021e02:	481e      	ldr	r0, [pc, #120]	; (8021e7c <__pow5mult+0xb0>)
 8021e04:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8021e08:	f7fe fb14 	bl	8020434 <__assert_func>
 8021e0c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8021e10:	6004      	str	r4, [r0, #0]
 8021e12:	60c4      	str	r4, [r0, #12]
 8021e14:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8021e18:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8021e1c:	b94c      	cbnz	r4, 8021e32 <__pow5mult+0x66>
 8021e1e:	f240 2171 	movw	r1, #625	; 0x271
 8021e22:	4630      	mov	r0, r6
 8021e24:	f7ff ff16 	bl	8021c54 <__i2b>
 8021e28:	2300      	movs	r3, #0
 8021e2a:	f8c8 0008 	str.w	r0, [r8, #8]
 8021e2e:	4604      	mov	r4, r0
 8021e30:	6003      	str	r3, [r0, #0]
 8021e32:	f04f 0900 	mov.w	r9, #0
 8021e36:	07eb      	lsls	r3, r5, #31
 8021e38:	d50a      	bpl.n	8021e50 <__pow5mult+0x84>
 8021e3a:	4639      	mov	r1, r7
 8021e3c:	4622      	mov	r2, r4
 8021e3e:	4630      	mov	r0, r6
 8021e40:	f7ff ff1e 	bl	8021c80 <__multiply>
 8021e44:	4639      	mov	r1, r7
 8021e46:	4680      	mov	r8, r0
 8021e48:	4630      	mov	r0, r6
 8021e4a:	f7ff fdfd 	bl	8021a48 <_Bfree>
 8021e4e:	4647      	mov	r7, r8
 8021e50:	106d      	asrs	r5, r5, #1
 8021e52:	d00b      	beq.n	8021e6c <__pow5mult+0xa0>
 8021e54:	6820      	ldr	r0, [r4, #0]
 8021e56:	b938      	cbnz	r0, 8021e68 <__pow5mult+0x9c>
 8021e58:	4622      	mov	r2, r4
 8021e5a:	4621      	mov	r1, r4
 8021e5c:	4630      	mov	r0, r6
 8021e5e:	f7ff ff0f 	bl	8021c80 <__multiply>
 8021e62:	6020      	str	r0, [r4, #0]
 8021e64:	f8c0 9000 	str.w	r9, [r0]
 8021e68:	4604      	mov	r4, r0
 8021e6a:	e7e4      	b.n	8021e36 <__pow5mult+0x6a>
 8021e6c:	4638      	mov	r0, r7
 8021e6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8021e72:	bf00      	nop
 8021e74:	080276a8 	.word	0x080276a8
 8021e78:	080272ed 	.word	0x080272ed
 8021e7c:	08027554 	.word	0x08027554

08021e80 <__lshift>:
 8021e80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021e84:	460c      	mov	r4, r1
 8021e86:	6849      	ldr	r1, [r1, #4]
 8021e88:	6923      	ldr	r3, [r4, #16]
 8021e8a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8021e8e:	68a3      	ldr	r3, [r4, #8]
 8021e90:	4607      	mov	r7, r0
 8021e92:	4691      	mov	r9, r2
 8021e94:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8021e98:	f108 0601 	add.w	r6, r8, #1
 8021e9c:	42b3      	cmp	r3, r6
 8021e9e:	db0b      	blt.n	8021eb8 <__lshift+0x38>
 8021ea0:	4638      	mov	r0, r7
 8021ea2:	f7ff fd91 	bl	80219c8 <_Balloc>
 8021ea6:	4605      	mov	r5, r0
 8021ea8:	b948      	cbnz	r0, 8021ebe <__lshift+0x3e>
 8021eaa:	4602      	mov	r2, r0
 8021eac:	4b28      	ldr	r3, [pc, #160]	; (8021f50 <__lshift+0xd0>)
 8021eae:	4829      	ldr	r0, [pc, #164]	; (8021f54 <__lshift+0xd4>)
 8021eb0:	f240 11d9 	movw	r1, #473	; 0x1d9
 8021eb4:	f7fe fabe 	bl	8020434 <__assert_func>
 8021eb8:	3101      	adds	r1, #1
 8021eba:	005b      	lsls	r3, r3, #1
 8021ebc:	e7ee      	b.n	8021e9c <__lshift+0x1c>
 8021ebe:	2300      	movs	r3, #0
 8021ec0:	f100 0114 	add.w	r1, r0, #20
 8021ec4:	f100 0210 	add.w	r2, r0, #16
 8021ec8:	4618      	mov	r0, r3
 8021eca:	4553      	cmp	r3, sl
 8021ecc:	db33      	blt.n	8021f36 <__lshift+0xb6>
 8021ece:	6920      	ldr	r0, [r4, #16]
 8021ed0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8021ed4:	f104 0314 	add.w	r3, r4, #20
 8021ed8:	f019 091f 	ands.w	r9, r9, #31
 8021edc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8021ee0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8021ee4:	d02b      	beq.n	8021f3e <__lshift+0xbe>
 8021ee6:	f1c9 0e20 	rsb	lr, r9, #32
 8021eea:	468a      	mov	sl, r1
 8021eec:	2200      	movs	r2, #0
 8021eee:	6818      	ldr	r0, [r3, #0]
 8021ef0:	fa00 f009 	lsl.w	r0, r0, r9
 8021ef4:	4302      	orrs	r2, r0
 8021ef6:	f84a 2b04 	str.w	r2, [sl], #4
 8021efa:	f853 2b04 	ldr.w	r2, [r3], #4
 8021efe:	459c      	cmp	ip, r3
 8021f00:	fa22 f20e 	lsr.w	r2, r2, lr
 8021f04:	d8f3      	bhi.n	8021eee <__lshift+0x6e>
 8021f06:	ebac 0304 	sub.w	r3, ip, r4
 8021f0a:	3b15      	subs	r3, #21
 8021f0c:	f023 0303 	bic.w	r3, r3, #3
 8021f10:	3304      	adds	r3, #4
 8021f12:	f104 0015 	add.w	r0, r4, #21
 8021f16:	4584      	cmp	ip, r0
 8021f18:	bf38      	it	cc
 8021f1a:	2304      	movcc	r3, #4
 8021f1c:	50ca      	str	r2, [r1, r3]
 8021f1e:	b10a      	cbz	r2, 8021f24 <__lshift+0xa4>
 8021f20:	f108 0602 	add.w	r6, r8, #2
 8021f24:	3e01      	subs	r6, #1
 8021f26:	4638      	mov	r0, r7
 8021f28:	612e      	str	r6, [r5, #16]
 8021f2a:	4621      	mov	r1, r4
 8021f2c:	f7ff fd8c 	bl	8021a48 <_Bfree>
 8021f30:	4628      	mov	r0, r5
 8021f32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021f36:	f842 0f04 	str.w	r0, [r2, #4]!
 8021f3a:	3301      	adds	r3, #1
 8021f3c:	e7c5      	b.n	8021eca <__lshift+0x4a>
 8021f3e:	3904      	subs	r1, #4
 8021f40:	f853 2b04 	ldr.w	r2, [r3], #4
 8021f44:	f841 2f04 	str.w	r2, [r1, #4]!
 8021f48:	459c      	cmp	ip, r3
 8021f4a:	d8f9      	bhi.n	8021f40 <__lshift+0xc0>
 8021f4c:	e7ea      	b.n	8021f24 <__lshift+0xa4>
 8021f4e:	bf00      	nop
 8021f50:	08027460 	.word	0x08027460
 8021f54:	08027554 	.word	0x08027554

08021f58 <__mcmp>:
 8021f58:	b530      	push	{r4, r5, lr}
 8021f5a:	6902      	ldr	r2, [r0, #16]
 8021f5c:	690c      	ldr	r4, [r1, #16]
 8021f5e:	1b12      	subs	r2, r2, r4
 8021f60:	d10e      	bne.n	8021f80 <__mcmp+0x28>
 8021f62:	f100 0314 	add.w	r3, r0, #20
 8021f66:	3114      	adds	r1, #20
 8021f68:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8021f6c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8021f70:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8021f74:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8021f78:	42a5      	cmp	r5, r4
 8021f7a:	d003      	beq.n	8021f84 <__mcmp+0x2c>
 8021f7c:	d305      	bcc.n	8021f8a <__mcmp+0x32>
 8021f7e:	2201      	movs	r2, #1
 8021f80:	4610      	mov	r0, r2
 8021f82:	bd30      	pop	{r4, r5, pc}
 8021f84:	4283      	cmp	r3, r0
 8021f86:	d3f3      	bcc.n	8021f70 <__mcmp+0x18>
 8021f88:	e7fa      	b.n	8021f80 <__mcmp+0x28>
 8021f8a:	f04f 32ff 	mov.w	r2, #4294967295
 8021f8e:	e7f7      	b.n	8021f80 <__mcmp+0x28>

08021f90 <__mdiff>:
 8021f90:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021f94:	460c      	mov	r4, r1
 8021f96:	4606      	mov	r6, r0
 8021f98:	4611      	mov	r1, r2
 8021f9a:	4620      	mov	r0, r4
 8021f9c:	4617      	mov	r7, r2
 8021f9e:	f7ff ffdb 	bl	8021f58 <__mcmp>
 8021fa2:	1e05      	subs	r5, r0, #0
 8021fa4:	d110      	bne.n	8021fc8 <__mdiff+0x38>
 8021fa6:	4629      	mov	r1, r5
 8021fa8:	4630      	mov	r0, r6
 8021faa:	f7ff fd0d 	bl	80219c8 <_Balloc>
 8021fae:	b930      	cbnz	r0, 8021fbe <__mdiff+0x2e>
 8021fb0:	4b39      	ldr	r3, [pc, #228]	; (8022098 <__mdiff+0x108>)
 8021fb2:	4602      	mov	r2, r0
 8021fb4:	f240 2132 	movw	r1, #562	; 0x232
 8021fb8:	4838      	ldr	r0, [pc, #224]	; (802209c <__mdiff+0x10c>)
 8021fba:	f7fe fa3b 	bl	8020434 <__assert_func>
 8021fbe:	2301      	movs	r3, #1
 8021fc0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8021fc4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021fc8:	bfa4      	itt	ge
 8021fca:	463b      	movge	r3, r7
 8021fcc:	4627      	movge	r7, r4
 8021fce:	4630      	mov	r0, r6
 8021fd0:	6879      	ldr	r1, [r7, #4]
 8021fd2:	bfa6      	itte	ge
 8021fd4:	461c      	movge	r4, r3
 8021fd6:	2500      	movge	r5, #0
 8021fd8:	2501      	movlt	r5, #1
 8021fda:	f7ff fcf5 	bl	80219c8 <_Balloc>
 8021fde:	b920      	cbnz	r0, 8021fea <__mdiff+0x5a>
 8021fe0:	4b2d      	ldr	r3, [pc, #180]	; (8022098 <__mdiff+0x108>)
 8021fe2:	4602      	mov	r2, r0
 8021fe4:	f44f 7110 	mov.w	r1, #576	; 0x240
 8021fe8:	e7e6      	b.n	8021fb8 <__mdiff+0x28>
 8021fea:	693e      	ldr	r6, [r7, #16]
 8021fec:	60c5      	str	r5, [r0, #12]
 8021fee:	6925      	ldr	r5, [r4, #16]
 8021ff0:	f107 0114 	add.w	r1, r7, #20
 8021ff4:	f104 0914 	add.w	r9, r4, #20
 8021ff8:	f100 0e14 	add.w	lr, r0, #20
 8021ffc:	f107 0210 	add.w	r2, r7, #16
 8022000:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8022004:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8022008:	46f2      	mov	sl, lr
 802200a:	2700      	movs	r7, #0
 802200c:	f859 3b04 	ldr.w	r3, [r9], #4
 8022010:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8022014:	fa1f f883 	uxth.w	r8, r3
 8022018:	fa17 f78b 	uxtah	r7, r7, fp
 802201c:	0c1b      	lsrs	r3, r3, #16
 802201e:	eba7 0808 	sub.w	r8, r7, r8
 8022022:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8022026:	eb03 4328 	add.w	r3, r3, r8, asr #16
 802202a:	fa1f f888 	uxth.w	r8, r8
 802202e:	141f      	asrs	r7, r3, #16
 8022030:	454d      	cmp	r5, r9
 8022032:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8022036:	f84a 3b04 	str.w	r3, [sl], #4
 802203a:	d8e7      	bhi.n	802200c <__mdiff+0x7c>
 802203c:	1b2b      	subs	r3, r5, r4
 802203e:	3b15      	subs	r3, #21
 8022040:	f023 0303 	bic.w	r3, r3, #3
 8022044:	3304      	adds	r3, #4
 8022046:	3415      	adds	r4, #21
 8022048:	42a5      	cmp	r5, r4
 802204a:	bf38      	it	cc
 802204c:	2304      	movcc	r3, #4
 802204e:	4419      	add	r1, r3
 8022050:	4473      	add	r3, lr
 8022052:	469e      	mov	lr, r3
 8022054:	460d      	mov	r5, r1
 8022056:	4565      	cmp	r5, ip
 8022058:	d30e      	bcc.n	8022078 <__mdiff+0xe8>
 802205a:	f10c 0203 	add.w	r2, ip, #3
 802205e:	1a52      	subs	r2, r2, r1
 8022060:	f022 0203 	bic.w	r2, r2, #3
 8022064:	3903      	subs	r1, #3
 8022066:	458c      	cmp	ip, r1
 8022068:	bf38      	it	cc
 802206a:	2200      	movcc	r2, #0
 802206c:	441a      	add	r2, r3
 802206e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8022072:	b17b      	cbz	r3, 8022094 <__mdiff+0x104>
 8022074:	6106      	str	r6, [r0, #16]
 8022076:	e7a5      	b.n	8021fc4 <__mdiff+0x34>
 8022078:	f855 8b04 	ldr.w	r8, [r5], #4
 802207c:	fa17 f488 	uxtah	r4, r7, r8
 8022080:	1422      	asrs	r2, r4, #16
 8022082:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8022086:	b2a4      	uxth	r4, r4
 8022088:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 802208c:	f84e 4b04 	str.w	r4, [lr], #4
 8022090:	1417      	asrs	r7, r2, #16
 8022092:	e7e0      	b.n	8022056 <__mdiff+0xc6>
 8022094:	3e01      	subs	r6, #1
 8022096:	e7ea      	b.n	802206e <__mdiff+0xde>
 8022098:	08027460 	.word	0x08027460
 802209c:	08027554 	.word	0x08027554

080220a0 <__ulp>:
 80220a0:	b082      	sub	sp, #8
 80220a2:	ed8d 0b00 	vstr	d0, [sp]
 80220a6:	9b01      	ldr	r3, [sp, #4]
 80220a8:	4912      	ldr	r1, [pc, #72]	; (80220f4 <__ulp+0x54>)
 80220aa:	4019      	ands	r1, r3
 80220ac:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80220b0:	2900      	cmp	r1, #0
 80220b2:	dd05      	ble.n	80220c0 <__ulp+0x20>
 80220b4:	2200      	movs	r2, #0
 80220b6:	460b      	mov	r3, r1
 80220b8:	ec43 2b10 	vmov	d0, r2, r3
 80220bc:	b002      	add	sp, #8
 80220be:	4770      	bx	lr
 80220c0:	4249      	negs	r1, r1
 80220c2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80220c6:	ea4f 5021 	mov.w	r0, r1, asr #20
 80220ca:	f04f 0200 	mov.w	r2, #0
 80220ce:	f04f 0300 	mov.w	r3, #0
 80220d2:	da04      	bge.n	80220de <__ulp+0x3e>
 80220d4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80220d8:	fa41 f300 	asr.w	r3, r1, r0
 80220dc:	e7ec      	b.n	80220b8 <__ulp+0x18>
 80220de:	f1a0 0114 	sub.w	r1, r0, #20
 80220e2:	291e      	cmp	r1, #30
 80220e4:	bfda      	itte	le
 80220e6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 80220ea:	fa20 f101 	lsrle.w	r1, r0, r1
 80220ee:	2101      	movgt	r1, #1
 80220f0:	460a      	mov	r2, r1
 80220f2:	e7e1      	b.n	80220b8 <__ulp+0x18>
 80220f4:	7ff00000 	.word	0x7ff00000

080220f8 <__b2d>:
 80220f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80220fa:	6905      	ldr	r5, [r0, #16]
 80220fc:	f100 0714 	add.w	r7, r0, #20
 8022100:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8022104:	1f2e      	subs	r6, r5, #4
 8022106:	f855 4c04 	ldr.w	r4, [r5, #-4]
 802210a:	4620      	mov	r0, r4
 802210c:	f7ff fd52 	bl	8021bb4 <__hi0bits>
 8022110:	f1c0 0320 	rsb	r3, r0, #32
 8022114:	280a      	cmp	r0, #10
 8022116:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8022194 <__b2d+0x9c>
 802211a:	600b      	str	r3, [r1, #0]
 802211c:	dc14      	bgt.n	8022148 <__b2d+0x50>
 802211e:	f1c0 0e0b 	rsb	lr, r0, #11
 8022122:	fa24 f10e 	lsr.w	r1, r4, lr
 8022126:	42b7      	cmp	r7, r6
 8022128:	ea41 030c 	orr.w	r3, r1, ip
 802212c:	bf34      	ite	cc
 802212e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8022132:	2100      	movcs	r1, #0
 8022134:	3015      	adds	r0, #21
 8022136:	fa04 f000 	lsl.w	r0, r4, r0
 802213a:	fa21 f10e 	lsr.w	r1, r1, lr
 802213e:	ea40 0201 	orr.w	r2, r0, r1
 8022142:	ec43 2b10 	vmov	d0, r2, r3
 8022146:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8022148:	42b7      	cmp	r7, r6
 802214a:	bf3a      	itte	cc
 802214c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8022150:	f1a5 0608 	subcc.w	r6, r5, #8
 8022154:	2100      	movcs	r1, #0
 8022156:	380b      	subs	r0, #11
 8022158:	d017      	beq.n	802218a <__b2d+0x92>
 802215a:	f1c0 0c20 	rsb	ip, r0, #32
 802215e:	fa04 f500 	lsl.w	r5, r4, r0
 8022162:	42be      	cmp	r6, r7
 8022164:	fa21 f40c 	lsr.w	r4, r1, ip
 8022168:	ea45 0504 	orr.w	r5, r5, r4
 802216c:	bf8c      	ite	hi
 802216e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8022172:	2400      	movls	r4, #0
 8022174:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8022178:	fa01 f000 	lsl.w	r0, r1, r0
 802217c:	fa24 f40c 	lsr.w	r4, r4, ip
 8022180:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8022184:	ea40 0204 	orr.w	r2, r0, r4
 8022188:	e7db      	b.n	8022142 <__b2d+0x4a>
 802218a:	ea44 030c 	orr.w	r3, r4, ip
 802218e:	460a      	mov	r2, r1
 8022190:	e7d7      	b.n	8022142 <__b2d+0x4a>
 8022192:	bf00      	nop
 8022194:	3ff00000 	.word	0x3ff00000

08022198 <__d2b>:
 8022198:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 802219c:	4689      	mov	r9, r1
 802219e:	2101      	movs	r1, #1
 80221a0:	ec57 6b10 	vmov	r6, r7, d0
 80221a4:	4690      	mov	r8, r2
 80221a6:	f7ff fc0f 	bl	80219c8 <_Balloc>
 80221aa:	4604      	mov	r4, r0
 80221ac:	b930      	cbnz	r0, 80221bc <__d2b+0x24>
 80221ae:	4602      	mov	r2, r0
 80221b0:	4b25      	ldr	r3, [pc, #148]	; (8022248 <__d2b+0xb0>)
 80221b2:	4826      	ldr	r0, [pc, #152]	; (802224c <__d2b+0xb4>)
 80221b4:	f240 310a 	movw	r1, #778	; 0x30a
 80221b8:	f7fe f93c 	bl	8020434 <__assert_func>
 80221bc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80221c0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80221c4:	bb35      	cbnz	r5, 8022214 <__d2b+0x7c>
 80221c6:	2e00      	cmp	r6, #0
 80221c8:	9301      	str	r3, [sp, #4]
 80221ca:	d028      	beq.n	802221e <__d2b+0x86>
 80221cc:	4668      	mov	r0, sp
 80221ce:	9600      	str	r6, [sp, #0]
 80221d0:	f7ff fd10 	bl	8021bf4 <__lo0bits>
 80221d4:	9900      	ldr	r1, [sp, #0]
 80221d6:	b300      	cbz	r0, 802221a <__d2b+0x82>
 80221d8:	9a01      	ldr	r2, [sp, #4]
 80221da:	f1c0 0320 	rsb	r3, r0, #32
 80221de:	fa02 f303 	lsl.w	r3, r2, r3
 80221e2:	430b      	orrs	r3, r1
 80221e4:	40c2      	lsrs	r2, r0
 80221e6:	6163      	str	r3, [r4, #20]
 80221e8:	9201      	str	r2, [sp, #4]
 80221ea:	9b01      	ldr	r3, [sp, #4]
 80221ec:	61a3      	str	r3, [r4, #24]
 80221ee:	2b00      	cmp	r3, #0
 80221f0:	bf14      	ite	ne
 80221f2:	2202      	movne	r2, #2
 80221f4:	2201      	moveq	r2, #1
 80221f6:	6122      	str	r2, [r4, #16]
 80221f8:	b1d5      	cbz	r5, 8022230 <__d2b+0x98>
 80221fa:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80221fe:	4405      	add	r5, r0
 8022200:	f8c9 5000 	str.w	r5, [r9]
 8022204:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8022208:	f8c8 0000 	str.w	r0, [r8]
 802220c:	4620      	mov	r0, r4
 802220e:	b003      	add	sp, #12
 8022210:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8022214:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8022218:	e7d5      	b.n	80221c6 <__d2b+0x2e>
 802221a:	6161      	str	r1, [r4, #20]
 802221c:	e7e5      	b.n	80221ea <__d2b+0x52>
 802221e:	a801      	add	r0, sp, #4
 8022220:	f7ff fce8 	bl	8021bf4 <__lo0bits>
 8022224:	9b01      	ldr	r3, [sp, #4]
 8022226:	6163      	str	r3, [r4, #20]
 8022228:	2201      	movs	r2, #1
 802222a:	6122      	str	r2, [r4, #16]
 802222c:	3020      	adds	r0, #32
 802222e:	e7e3      	b.n	80221f8 <__d2b+0x60>
 8022230:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8022234:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8022238:	f8c9 0000 	str.w	r0, [r9]
 802223c:	6918      	ldr	r0, [r3, #16]
 802223e:	f7ff fcb9 	bl	8021bb4 <__hi0bits>
 8022242:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8022246:	e7df      	b.n	8022208 <__d2b+0x70>
 8022248:	08027460 	.word	0x08027460
 802224c:	08027554 	.word	0x08027554

08022250 <__ratio>:
 8022250:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022254:	468a      	mov	sl, r1
 8022256:	4669      	mov	r1, sp
 8022258:	4683      	mov	fp, r0
 802225a:	f7ff ff4d 	bl	80220f8 <__b2d>
 802225e:	a901      	add	r1, sp, #4
 8022260:	4650      	mov	r0, sl
 8022262:	ec59 8b10 	vmov	r8, r9, d0
 8022266:	ee10 6a10 	vmov	r6, s0
 802226a:	f7ff ff45 	bl	80220f8 <__b2d>
 802226e:	f8db 3010 	ldr.w	r3, [fp, #16]
 8022272:	f8da 2010 	ldr.w	r2, [sl, #16]
 8022276:	eba3 0c02 	sub.w	ip, r3, r2
 802227a:	e9dd 3200 	ldrd	r3, r2, [sp]
 802227e:	1a9b      	subs	r3, r3, r2
 8022280:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8022284:	ec55 4b10 	vmov	r4, r5, d0
 8022288:	2b00      	cmp	r3, #0
 802228a:	ee10 0a10 	vmov	r0, s0
 802228e:	bfce      	itee	gt
 8022290:	464a      	movgt	r2, r9
 8022292:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8022296:	462a      	movle	r2, r5
 8022298:	464f      	mov	r7, r9
 802229a:	4629      	mov	r1, r5
 802229c:	bfcc      	ite	gt
 802229e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80222a2:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 80222a6:	ec47 6b17 	vmov	d7, r6, r7
 80222aa:	ec41 0b16 	vmov	d6, r0, r1
 80222ae:	ee87 0b06 	vdiv.f64	d0, d7, d6
 80222b2:	b003      	add	sp, #12
 80222b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080222b8 <__copybits>:
 80222b8:	3901      	subs	r1, #1
 80222ba:	b570      	push	{r4, r5, r6, lr}
 80222bc:	1149      	asrs	r1, r1, #5
 80222be:	6914      	ldr	r4, [r2, #16]
 80222c0:	3101      	adds	r1, #1
 80222c2:	f102 0314 	add.w	r3, r2, #20
 80222c6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80222ca:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80222ce:	1f05      	subs	r5, r0, #4
 80222d0:	42a3      	cmp	r3, r4
 80222d2:	d30c      	bcc.n	80222ee <__copybits+0x36>
 80222d4:	1aa3      	subs	r3, r4, r2
 80222d6:	3b11      	subs	r3, #17
 80222d8:	f023 0303 	bic.w	r3, r3, #3
 80222dc:	3211      	adds	r2, #17
 80222de:	42a2      	cmp	r2, r4
 80222e0:	bf88      	it	hi
 80222e2:	2300      	movhi	r3, #0
 80222e4:	4418      	add	r0, r3
 80222e6:	2300      	movs	r3, #0
 80222e8:	4288      	cmp	r0, r1
 80222ea:	d305      	bcc.n	80222f8 <__copybits+0x40>
 80222ec:	bd70      	pop	{r4, r5, r6, pc}
 80222ee:	f853 6b04 	ldr.w	r6, [r3], #4
 80222f2:	f845 6f04 	str.w	r6, [r5, #4]!
 80222f6:	e7eb      	b.n	80222d0 <__copybits+0x18>
 80222f8:	f840 3b04 	str.w	r3, [r0], #4
 80222fc:	e7f4      	b.n	80222e8 <__copybits+0x30>

080222fe <__any_on>:
 80222fe:	f100 0214 	add.w	r2, r0, #20
 8022302:	6900      	ldr	r0, [r0, #16]
 8022304:	114b      	asrs	r3, r1, #5
 8022306:	4298      	cmp	r0, r3
 8022308:	b510      	push	{r4, lr}
 802230a:	db11      	blt.n	8022330 <__any_on+0x32>
 802230c:	dd0a      	ble.n	8022324 <__any_on+0x26>
 802230e:	f011 011f 	ands.w	r1, r1, #31
 8022312:	d007      	beq.n	8022324 <__any_on+0x26>
 8022314:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8022318:	fa24 f001 	lsr.w	r0, r4, r1
 802231c:	fa00 f101 	lsl.w	r1, r0, r1
 8022320:	428c      	cmp	r4, r1
 8022322:	d10b      	bne.n	802233c <__any_on+0x3e>
 8022324:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8022328:	4293      	cmp	r3, r2
 802232a:	d803      	bhi.n	8022334 <__any_on+0x36>
 802232c:	2000      	movs	r0, #0
 802232e:	bd10      	pop	{r4, pc}
 8022330:	4603      	mov	r3, r0
 8022332:	e7f7      	b.n	8022324 <__any_on+0x26>
 8022334:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8022338:	2900      	cmp	r1, #0
 802233a:	d0f5      	beq.n	8022328 <__any_on+0x2a>
 802233c:	2001      	movs	r0, #1
 802233e:	e7f6      	b.n	802232e <__any_on+0x30>

08022340 <_calloc_r>:
 8022340:	b513      	push	{r0, r1, r4, lr}
 8022342:	434a      	muls	r2, r1
 8022344:	4611      	mov	r1, r2
 8022346:	9201      	str	r2, [sp, #4]
 8022348:	f000 f85a 	bl	8022400 <_malloc_r>
 802234c:	4604      	mov	r4, r0
 802234e:	b118      	cbz	r0, 8022358 <_calloc_r+0x18>
 8022350:	9a01      	ldr	r2, [sp, #4]
 8022352:	2100      	movs	r1, #0
 8022354:	f7fc fb08 	bl	801e968 <memset>
 8022358:	4620      	mov	r0, r4
 802235a:	b002      	add	sp, #8
 802235c:	bd10      	pop	{r4, pc}
	...

08022360 <_free_r>:
 8022360:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8022362:	2900      	cmp	r1, #0
 8022364:	d048      	beq.n	80223f8 <_free_r+0x98>
 8022366:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802236a:	9001      	str	r0, [sp, #4]
 802236c:	2b00      	cmp	r3, #0
 802236e:	f1a1 0404 	sub.w	r4, r1, #4
 8022372:	bfb8      	it	lt
 8022374:	18e4      	addlt	r4, r4, r3
 8022376:	f000 fddf 	bl	8022f38 <__malloc_lock>
 802237a:	4a20      	ldr	r2, [pc, #128]	; (80223fc <_free_r+0x9c>)
 802237c:	9801      	ldr	r0, [sp, #4]
 802237e:	6813      	ldr	r3, [r2, #0]
 8022380:	4615      	mov	r5, r2
 8022382:	b933      	cbnz	r3, 8022392 <_free_r+0x32>
 8022384:	6063      	str	r3, [r4, #4]
 8022386:	6014      	str	r4, [r2, #0]
 8022388:	b003      	add	sp, #12
 802238a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802238e:	f000 bdd9 	b.w	8022f44 <__malloc_unlock>
 8022392:	42a3      	cmp	r3, r4
 8022394:	d90b      	bls.n	80223ae <_free_r+0x4e>
 8022396:	6821      	ldr	r1, [r4, #0]
 8022398:	1862      	adds	r2, r4, r1
 802239a:	4293      	cmp	r3, r2
 802239c:	bf04      	itt	eq
 802239e:	681a      	ldreq	r2, [r3, #0]
 80223a0:	685b      	ldreq	r3, [r3, #4]
 80223a2:	6063      	str	r3, [r4, #4]
 80223a4:	bf04      	itt	eq
 80223a6:	1852      	addeq	r2, r2, r1
 80223a8:	6022      	streq	r2, [r4, #0]
 80223aa:	602c      	str	r4, [r5, #0]
 80223ac:	e7ec      	b.n	8022388 <_free_r+0x28>
 80223ae:	461a      	mov	r2, r3
 80223b0:	685b      	ldr	r3, [r3, #4]
 80223b2:	b10b      	cbz	r3, 80223b8 <_free_r+0x58>
 80223b4:	42a3      	cmp	r3, r4
 80223b6:	d9fa      	bls.n	80223ae <_free_r+0x4e>
 80223b8:	6811      	ldr	r1, [r2, #0]
 80223ba:	1855      	adds	r5, r2, r1
 80223bc:	42a5      	cmp	r5, r4
 80223be:	d10b      	bne.n	80223d8 <_free_r+0x78>
 80223c0:	6824      	ldr	r4, [r4, #0]
 80223c2:	4421      	add	r1, r4
 80223c4:	1854      	adds	r4, r2, r1
 80223c6:	42a3      	cmp	r3, r4
 80223c8:	6011      	str	r1, [r2, #0]
 80223ca:	d1dd      	bne.n	8022388 <_free_r+0x28>
 80223cc:	681c      	ldr	r4, [r3, #0]
 80223ce:	685b      	ldr	r3, [r3, #4]
 80223d0:	6053      	str	r3, [r2, #4]
 80223d2:	4421      	add	r1, r4
 80223d4:	6011      	str	r1, [r2, #0]
 80223d6:	e7d7      	b.n	8022388 <_free_r+0x28>
 80223d8:	d902      	bls.n	80223e0 <_free_r+0x80>
 80223da:	230c      	movs	r3, #12
 80223dc:	6003      	str	r3, [r0, #0]
 80223de:	e7d3      	b.n	8022388 <_free_r+0x28>
 80223e0:	6825      	ldr	r5, [r4, #0]
 80223e2:	1961      	adds	r1, r4, r5
 80223e4:	428b      	cmp	r3, r1
 80223e6:	bf04      	itt	eq
 80223e8:	6819      	ldreq	r1, [r3, #0]
 80223ea:	685b      	ldreq	r3, [r3, #4]
 80223ec:	6063      	str	r3, [r4, #4]
 80223ee:	bf04      	itt	eq
 80223f0:	1949      	addeq	r1, r1, r5
 80223f2:	6021      	streq	r1, [r4, #0]
 80223f4:	6054      	str	r4, [r2, #4]
 80223f6:	e7c7      	b.n	8022388 <_free_r+0x28>
 80223f8:	b003      	add	sp, #12
 80223fa:	bd30      	pop	{r4, r5, pc}
 80223fc:	24004688 	.word	0x24004688

08022400 <_malloc_r>:
 8022400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022402:	1ccd      	adds	r5, r1, #3
 8022404:	f025 0503 	bic.w	r5, r5, #3
 8022408:	3508      	adds	r5, #8
 802240a:	2d0c      	cmp	r5, #12
 802240c:	bf38      	it	cc
 802240e:	250c      	movcc	r5, #12
 8022410:	2d00      	cmp	r5, #0
 8022412:	4606      	mov	r6, r0
 8022414:	db01      	blt.n	802241a <_malloc_r+0x1a>
 8022416:	42a9      	cmp	r1, r5
 8022418:	d903      	bls.n	8022422 <_malloc_r+0x22>
 802241a:	230c      	movs	r3, #12
 802241c:	6033      	str	r3, [r6, #0]
 802241e:	2000      	movs	r0, #0
 8022420:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8022422:	f000 fd89 	bl	8022f38 <__malloc_lock>
 8022426:	4921      	ldr	r1, [pc, #132]	; (80224ac <_malloc_r+0xac>)
 8022428:	680a      	ldr	r2, [r1, #0]
 802242a:	4614      	mov	r4, r2
 802242c:	b99c      	cbnz	r4, 8022456 <_malloc_r+0x56>
 802242e:	4f20      	ldr	r7, [pc, #128]	; (80224b0 <_malloc_r+0xb0>)
 8022430:	683b      	ldr	r3, [r7, #0]
 8022432:	b923      	cbnz	r3, 802243e <_malloc_r+0x3e>
 8022434:	4621      	mov	r1, r4
 8022436:	4630      	mov	r0, r6
 8022438:	f000 fafa 	bl	8022a30 <_sbrk_r>
 802243c:	6038      	str	r0, [r7, #0]
 802243e:	4629      	mov	r1, r5
 8022440:	4630      	mov	r0, r6
 8022442:	f000 faf5 	bl	8022a30 <_sbrk_r>
 8022446:	1c43      	adds	r3, r0, #1
 8022448:	d123      	bne.n	8022492 <_malloc_r+0x92>
 802244a:	230c      	movs	r3, #12
 802244c:	6033      	str	r3, [r6, #0]
 802244e:	4630      	mov	r0, r6
 8022450:	f000 fd78 	bl	8022f44 <__malloc_unlock>
 8022454:	e7e3      	b.n	802241e <_malloc_r+0x1e>
 8022456:	6823      	ldr	r3, [r4, #0]
 8022458:	1b5b      	subs	r3, r3, r5
 802245a:	d417      	bmi.n	802248c <_malloc_r+0x8c>
 802245c:	2b0b      	cmp	r3, #11
 802245e:	d903      	bls.n	8022468 <_malloc_r+0x68>
 8022460:	6023      	str	r3, [r4, #0]
 8022462:	441c      	add	r4, r3
 8022464:	6025      	str	r5, [r4, #0]
 8022466:	e004      	b.n	8022472 <_malloc_r+0x72>
 8022468:	6863      	ldr	r3, [r4, #4]
 802246a:	42a2      	cmp	r2, r4
 802246c:	bf0c      	ite	eq
 802246e:	600b      	streq	r3, [r1, #0]
 8022470:	6053      	strne	r3, [r2, #4]
 8022472:	4630      	mov	r0, r6
 8022474:	f000 fd66 	bl	8022f44 <__malloc_unlock>
 8022478:	f104 000b 	add.w	r0, r4, #11
 802247c:	1d23      	adds	r3, r4, #4
 802247e:	f020 0007 	bic.w	r0, r0, #7
 8022482:	1ac2      	subs	r2, r0, r3
 8022484:	d0cc      	beq.n	8022420 <_malloc_r+0x20>
 8022486:	1a1b      	subs	r3, r3, r0
 8022488:	50a3      	str	r3, [r4, r2]
 802248a:	e7c9      	b.n	8022420 <_malloc_r+0x20>
 802248c:	4622      	mov	r2, r4
 802248e:	6864      	ldr	r4, [r4, #4]
 8022490:	e7cc      	b.n	802242c <_malloc_r+0x2c>
 8022492:	1cc4      	adds	r4, r0, #3
 8022494:	f024 0403 	bic.w	r4, r4, #3
 8022498:	42a0      	cmp	r0, r4
 802249a:	d0e3      	beq.n	8022464 <_malloc_r+0x64>
 802249c:	1a21      	subs	r1, r4, r0
 802249e:	4630      	mov	r0, r6
 80224a0:	f000 fac6 	bl	8022a30 <_sbrk_r>
 80224a4:	3001      	adds	r0, #1
 80224a6:	d1dd      	bne.n	8022464 <_malloc_r+0x64>
 80224a8:	e7cf      	b.n	802244a <_malloc_r+0x4a>
 80224aa:	bf00      	nop
 80224ac:	24004688 	.word	0x24004688
 80224b0:	2400468c 	.word	0x2400468c

080224b4 <__ssputs_r>:
 80224b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80224b8:	688e      	ldr	r6, [r1, #8]
 80224ba:	429e      	cmp	r6, r3
 80224bc:	4682      	mov	sl, r0
 80224be:	460c      	mov	r4, r1
 80224c0:	4690      	mov	r8, r2
 80224c2:	461f      	mov	r7, r3
 80224c4:	d838      	bhi.n	8022538 <__ssputs_r+0x84>
 80224c6:	898a      	ldrh	r2, [r1, #12]
 80224c8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80224cc:	d032      	beq.n	8022534 <__ssputs_r+0x80>
 80224ce:	6825      	ldr	r5, [r4, #0]
 80224d0:	6909      	ldr	r1, [r1, #16]
 80224d2:	eba5 0901 	sub.w	r9, r5, r1
 80224d6:	6965      	ldr	r5, [r4, #20]
 80224d8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80224dc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80224e0:	3301      	adds	r3, #1
 80224e2:	444b      	add	r3, r9
 80224e4:	106d      	asrs	r5, r5, #1
 80224e6:	429d      	cmp	r5, r3
 80224e8:	bf38      	it	cc
 80224ea:	461d      	movcc	r5, r3
 80224ec:	0553      	lsls	r3, r2, #21
 80224ee:	d531      	bpl.n	8022554 <__ssputs_r+0xa0>
 80224f0:	4629      	mov	r1, r5
 80224f2:	f7ff ff85 	bl	8022400 <_malloc_r>
 80224f6:	4606      	mov	r6, r0
 80224f8:	b950      	cbnz	r0, 8022510 <__ssputs_r+0x5c>
 80224fa:	230c      	movs	r3, #12
 80224fc:	f8ca 3000 	str.w	r3, [sl]
 8022500:	89a3      	ldrh	r3, [r4, #12]
 8022502:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8022506:	81a3      	strh	r3, [r4, #12]
 8022508:	f04f 30ff 	mov.w	r0, #4294967295
 802250c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022510:	6921      	ldr	r1, [r4, #16]
 8022512:	464a      	mov	r2, r9
 8022514:	f7fc fa00 	bl	801e918 <memcpy>
 8022518:	89a3      	ldrh	r3, [r4, #12]
 802251a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 802251e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8022522:	81a3      	strh	r3, [r4, #12]
 8022524:	6126      	str	r6, [r4, #16]
 8022526:	6165      	str	r5, [r4, #20]
 8022528:	444e      	add	r6, r9
 802252a:	eba5 0509 	sub.w	r5, r5, r9
 802252e:	6026      	str	r6, [r4, #0]
 8022530:	60a5      	str	r5, [r4, #8]
 8022532:	463e      	mov	r6, r7
 8022534:	42be      	cmp	r6, r7
 8022536:	d900      	bls.n	802253a <__ssputs_r+0x86>
 8022538:	463e      	mov	r6, r7
 802253a:	4632      	mov	r2, r6
 802253c:	6820      	ldr	r0, [r4, #0]
 802253e:	4641      	mov	r1, r8
 8022540:	f7fc f9f8 	bl	801e934 <memmove>
 8022544:	68a3      	ldr	r3, [r4, #8]
 8022546:	6822      	ldr	r2, [r4, #0]
 8022548:	1b9b      	subs	r3, r3, r6
 802254a:	4432      	add	r2, r6
 802254c:	60a3      	str	r3, [r4, #8]
 802254e:	6022      	str	r2, [r4, #0]
 8022550:	2000      	movs	r0, #0
 8022552:	e7db      	b.n	802250c <__ssputs_r+0x58>
 8022554:	462a      	mov	r2, r5
 8022556:	f000 fcfb 	bl	8022f50 <_realloc_r>
 802255a:	4606      	mov	r6, r0
 802255c:	2800      	cmp	r0, #0
 802255e:	d1e1      	bne.n	8022524 <__ssputs_r+0x70>
 8022560:	6921      	ldr	r1, [r4, #16]
 8022562:	4650      	mov	r0, sl
 8022564:	f7ff fefc 	bl	8022360 <_free_r>
 8022568:	e7c7      	b.n	80224fa <__ssputs_r+0x46>
	...

0802256c <_svfiprintf_r>:
 802256c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022570:	4698      	mov	r8, r3
 8022572:	898b      	ldrh	r3, [r1, #12]
 8022574:	061b      	lsls	r3, r3, #24
 8022576:	b09d      	sub	sp, #116	; 0x74
 8022578:	4607      	mov	r7, r0
 802257a:	460d      	mov	r5, r1
 802257c:	4614      	mov	r4, r2
 802257e:	d50e      	bpl.n	802259e <_svfiprintf_r+0x32>
 8022580:	690b      	ldr	r3, [r1, #16]
 8022582:	b963      	cbnz	r3, 802259e <_svfiprintf_r+0x32>
 8022584:	2140      	movs	r1, #64	; 0x40
 8022586:	f7ff ff3b 	bl	8022400 <_malloc_r>
 802258a:	6028      	str	r0, [r5, #0]
 802258c:	6128      	str	r0, [r5, #16]
 802258e:	b920      	cbnz	r0, 802259a <_svfiprintf_r+0x2e>
 8022590:	230c      	movs	r3, #12
 8022592:	603b      	str	r3, [r7, #0]
 8022594:	f04f 30ff 	mov.w	r0, #4294967295
 8022598:	e0d1      	b.n	802273e <_svfiprintf_r+0x1d2>
 802259a:	2340      	movs	r3, #64	; 0x40
 802259c:	616b      	str	r3, [r5, #20]
 802259e:	2300      	movs	r3, #0
 80225a0:	9309      	str	r3, [sp, #36]	; 0x24
 80225a2:	2320      	movs	r3, #32
 80225a4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80225a8:	f8cd 800c 	str.w	r8, [sp, #12]
 80225ac:	2330      	movs	r3, #48	; 0x30
 80225ae:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8022758 <_svfiprintf_r+0x1ec>
 80225b2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80225b6:	f04f 0901 	mov.w	r9, #1
 80225ba:	4623      	mov	r3, r4
 80225bc:	469a      	mov	sl, r3
 80225be:	f813 2b01 	ldrb.w	r2, [r3], #1
 80225c2:	b10a      	cbz	r2, 80225c8 <_svfiprintf_r+0x5c>
 80225c4:	2a25      	cmp	r2, #37	; 0x25
 80225c6:	d1f9      	bne.n	80225bc <_svfiprintf_r+0x50>
 80225c8:	ebba 0b04 	subs.w	fp, sl, r4
 80225cc:	d00b      	beq.n	80225e6 <_svfiprintf_r+0x7a>
 80225ce:	465b      	mov	r3, fp
 80225d0:	4622      	mov	r2, r4
 80225d2:	4629      	mov	r1, r5
 80225d4:	4638      	mov	r0, r7
 80225d6:	f7ff ff6d 	bl	80224b4 <__ssputs_r>
 80225da:	3001      	adds	r0, #1
 80225dc:	f000 80aa 	beq.w	8022734 <_svfiprintf_r+0x1c8>
 80225e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80225e2:	445a      	add	r2, fp
 80225e4:	9209      	str	r2, [sp, #36]	; 0x24
 80225e6:	f89a 3000 	ldrb.w	r3, [sl]
 80225ea:	2b00      	cmp	r3, #0
 80225ec:	f000 80a2 	beq.w	8022734 <_svfiprintf_r+0x1c8>
 80225f0:	2300      	movs	r3, #0
 80225f2:	f04f 32ff 	mov.w	r2, #4294967295
 80225f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80225fa:	f10a 0a01 	add.w	sl, sl, #1
 80225fe:	9304      	str	r3, [sp, #16]
 8022600:	9307      	str	r3, [sp, #28]
 8022602:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8022606:	931a      	str	r3, [sp, #104]	; 0x68
 8022608:	4654      	mov	r4, sl
 802260a:	2205      	movs	r2, #5
 802260c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022610:	4851      	ldr	r0, [pc, #324]	; (8022758 <_svfiprintf_r+0x1ec>)
 8022612:	f7dd fe7d 	bl	8000310 <memchr>
 8022616:	9a04      	ldr	r2, [sp, #16]
 8022618:	b9d8      	cbnz	r0, 8022652 <_svfiprintf_r+0xe6>
 802261a:	06d0      	lsls	r0, r2, #27
 802261c:	bf44      	itt	mi
 802261e:	2320      	movmi	r3, #32
 8022620:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8022624:	0711      	lsls	r1, r2, #28
 8022626:	bf44      	itt	mi
 8022628:	232b      	movmi	r3, #43	; 0x2b
 802262a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802262e:	f89a 3000 	ldrb.w	r3, [sl]
 8022632:	2b2a      	cmp	r3, #42	; 0x2a
 8022634:	d015      	beq.n	8022662 <_svfiprintf_r+0xf6>
 8022636:	9a07      	ldr	r2, [sp, #28]
 8022638:	4654      	mov	r4, sl
 802263a:	2000      	movs	r0, #0
 802263c:	f04f 0c0a 	mov.w	ip, #10
 8022640:	4621      	mov	r1, r4
 8022642:	f811 3b01 	ldrb.w	r3, [r1], #1
 8022646:	3b30      	subs	r3, #48	; 0x30
 8022648:	2b09      	cmp	r3, #9
 802264a:	d94e      	bls.n	80226ea <_svfiprintf_r+0x17e>
 802264c:	b1b0      	cbz	r0, 802267c <_svfiprintf_r+0x110>
 802264e:	9207      	str	r2, [sp, #28]
 8022650:	e014      	b.n	802267c <_svfiprintf_r+0x110>
 8022652:	eba0 0308 	sub.w	r3, r0, r8
 8022656:	fa09 f303 	lsl.w	r3, r9, r3
 802265a:	4313      	orrs	r3, r2
 802265c:	9304      	str	r3, [sp, #16]
 802265e:	46a2      	mov	sl, r4
 8022660:	e7d2      	b.n	8022608 <_svfiprintf_r+0x9c>
 8022662:	9b03      	ldr	r3, [sp, #12]
 8022664:	1d19      	adds	r1, r3, #4
 8022666:	681b      	ldr	r3, [r3, #0]
 8022668:	9103      	str	r1, [sp, #12]
 802266a:	2b00      	cmp	r3, #0
 802266c:	bfbb      	ittet	lt
 802266e:	425b      	neglt	r3, r3
 8022670:	f042 0202 	orrlt.w	r2, r2, #2
 8022674:	9307      	strge	r3, [sp, #28]
 8022676:	9307      	strlt	r3, [sp, #28]
 8022678:	bfb8      	it	lt
 802267a:	9204      	strlt	r2, [sp, #16]
 802267c:	7823      	ldrb	r3, [r4, #0]
 802267e:	2b2e      	cmp	r3, #46	; 0x2e
 8022680:	d10c      	bne.n	802269c <_svfiprintf_r+0x130>
 8022682:	7863      	ldrb	r3, [r4, #1]
 8022684:	2b2a      	cmp	r3, #42	; 0x2a
 8022686:	d135      	bne.n	80226f4 <_svfiprintf_r+0x188>
 8022688:	9b03      	ldr	r3, [sp, #12]
 802268a:	1d1a      	adds	r2, r3, #4
 802268c:	681b      	ldr	r3, [r3, #0]
 802268e:	9203      	str	r2, [sp, #12]
 8022690:	2b00      	cmp	r3, #0
 8022692:	bfb8      	it	lt
 8022694:	f04f 33ff 	movlt.w	r3, #4294967295
 8022698:	3402      	adds	r4, #2
 802269a:	9305      	str	r3, [sp, #20]
 802269c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8022768 <_svfiprintf_r+0x1fc>
 80226a0:	7821      	ldrb	r1, [r4, #0]
 80226a2:	2203      	movs	r2, #3
 80226a4:	4650      	mov	r0, sl
 80226a6:	f7dd fe33 	bl	8000310 <memchr>
 80226aa:	b140      	cbz	r0, 80226be <_svfiprintf_r+0x152>
 80226ac:	2340      	movs	r3, #64	; 0x40
 80226ae:	eba0 000a 	sub.w	r0, r0, sl
 80226b2:	fa03 f000 	lsl.w	r0, r3, r0
 80226b6:	9b04      	ldr	r3, [sp, #16]
 80226b8:	4303      	orrs	r3, r0
 80226ba:	3401      	adds	r4, #1
 80226bc:	9304      	str	r3, [sp, #16]
 80226be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80226c2:	4826      	ldr	r0, [pc, #152]	; (802275c <_svfiprintf_r+0x1f0>)
 80226c4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80226c8:	2206      	movs	r2, #6
 80226ca:	f7dd fe21 	bl	8000310 <memchr>
 80226ce:	2800      	cmp	r0, #0
 80226d0:	d038      	beq.n	8022744 <_svfiprintf_r+0x1d8>
 80226d2:	4b23      	ldr	r3, [pc, #140]	; (8022760 <_svfiprintf_r+0x1f4>)
 80226d4:	bb1b      	cbnz	r3, 802271e <_svfiprintf_r+0x1b2>
 80226d6:	9b03      	ldr	r3, [sp, #12]
 80226d8:	3307      	adds	r3, #7
 80226da:	f023 0307 	bic.w	r3, r3, #7
 80226de:	3308      	adds	r3, #8
 80226e0:	9303      	str	r3, [sp, #12]
 80226e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80226e4:	4433      	add	r3, r6
 80226e6:	9309      	str	r3, [sp, #36]	; 0x24
 80226e8:	e767      	b.n	80225ba <_svfiprintf_r+0x4e>
 80226ea:	fb0c 3202 	mla	r2, ip, r2, r3
 80226ee:	460c      	mov	r4, r1
 80226f0:	2001      	movs	r0, #1
 80226f2:	e7a5      	b.n	8022640 <_svfiprintf_r+0xd4>
 80226f4:	2300      	movs	r3, #0
 80226f6:	3401      	adds	r4, #1
 80226f8:	9305      	str	r3, [sp, #20]
 80226fa:	4619      	mov	r1, r3
 80226fc:	f04f 0c0a 	mov.w	ip, #10
 8022700:	4620      	mov	r0, r4
 8022702:	f810 2b01 	ldrb.w	r2, [r0], #1
 8022706:	3a30      	subs	r2, #48	; 0x30
 8022708:	2a09      	cmp	r2, #9
 802270a:	d903      	bls.n	8022714 <_svfiprintf_r+0x1a8>
 802270c:	2b00      	cmp	r3, #0
 802270e:	d0c5      	beq.n	802269c <_svfiprintf_r+0x130>
 8022710:	9105      	str	r1, [sp, #20]
 8022712:	e7c3      	b.n	802269c <_svfiprintf_r+0x130>
 8022714:	fb0c 2101 	mla	r1, ip, r1, r2
 8022718:	4604      	mov	r4, r0
 802271a:	2301      	movs	r3, #1
 802271c:	e7f0      	b.n	8022700 <_svfiprintf_r+0x194>
 802271e:	ab03      	add	r3, sp, #12
 8022720:	9300      	str	r3, [sp, #0]
 8022722:	462a      	mov	r2, r5
 8022724:	4b0f      	ldr	r3, [pc, #60]	; (8022764 <_svfiprintf_r+0x1f8>)
 8022726:	a904      	add	r1, sp, #16
 8022728:	4638      	mov	r0, r7
 802272a:	f7fc f9b5 	bl	801ea98 <_printf_float>
 802272e:	1c42      	adds	r2, r0, #1
 8022730:	4606      	mov	r6, r0
 8022732:	d1d6      	bne.n	80226e2 <_svfiprintf_r+0x176>
 8022734:	89ab      	ldrh	r3, [r5, #12]
 8022736:	065b      	lsls	r3, r3, #25
 8022738:	f53f af2c 	bmi.w	8022594 <_svfiprintf_r+0x28>
 802273c:	9809      	ldr	r0, [sp, #36]	; 0x24
 802273e:	b01d      	add	sp, #116	; 0x74
 8022740:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022744:	ab03      	add	r3, sp, #12
 8022746:	9300      	str	r3, [sp, #0]
 8022748:	462a      	mov	r2, r5
 802274a:	4b06      	ldr	r3, [pc, #24]	; (8022764 <_svfiprintf_r+0x1f8>)
 802274c:	a904      	add	r1, sp, #16
 802274e:	4638      	mov	r0, r7
 8022750:	f7fc fc2e 	bl	801efb0 <_printf_i>
 8022754:	e7eb      	b.n	802272e <_svfiprintf_r+0x1c2>
 8022756:	bf00      	nop
 8022758:	080276b4 	.word	0x080276b4
 802275c:	080276be 	.word	0x080276be
 8022760:	0801ea99 	.word	0x0801ea99
 8022764:	080224b5 	.word	0x080224b5
 8022768:	080276ba 	.word	0x080276ba

0802276c <__sfputc_r>:
 802276c:	6893      	ldr	r3, [r2, #8]
 802276e:	3b01      	subs	r3, #1
 8022770:	2b00      	cmp	r3, #0
 8022772:	b410      	push	{r4}
 8022774:	6093      	str	r3, [r2, #8]
 8022776:	da08      	bge.n	802278a <__sfputc_r+0x1e>
 8022778:	6994      	ldr	r4, [r2, #24]
 802277a:	42a3      	cmp	r3, r4
 802277c:	db01      	blt.n	8022782 <__sfputc_r+0x16>
 802277e:	290a      	cmp	r1, #10
 8022780:	d103      	bne.n	802278a <__sfputc_r+0x1e>
 8022782:	f85d 4b04 	ldr.w	r4, [sp], #4
 8022786:	f000 b9a7 	b.w	8022ad8 <__swbuf_r>
 802278a:	6813      	ldr	r3, [r2, #0]
 802278c:	1c58      	adds	r0, r3, #1
 802278e:	6010      	str	r0, [r2, #0]
 8022790:	7019      	strb	r1, [r3, #0]
 8022792:	4608      	mov	r0, r1
 8022794:	f85d 4b04 	ldr.w	r4, [sp], #4
 8022798:	4770      	bx	lr

0802279a <__sfputs_r>:
 802279a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802279c:	4606      	mov	r6, r0
 802279e:	460f      	mov	r7, r1
 80227a0:	4614      	mov	r4, r2
 80227a2:	18d5      	adds	r5, r2, r3
 80227a4:	42ac      	cmp	r4, r5
 80227a6:	d101      	bne.n	80227ac <__sfputs_r+0x12>
 80227a8:	2000      	movs	r0, #0
 80227aa:	e007      	b.n	80227bc <__sfputs_r+0x22>
 80227ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80227b0:	463a      	mov	r2, r7
 80227b2:	4630      	mov	r0, r6
 80227b4:	f7ff ffda 	bl	802276c <__sfputc_r>
 80227b8:	1c43      	adds	r3, r0, #1
 80227ba:	d1f3      	bne.n	80227a4 <__sfputs_r+0xa>
 80227bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080227c0 <_vfiprintf_r>:
 80227c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80227c4:	460d      	mov	r5, r1
 80227c6:	b09d      	sub	sp, #116	; 0x74
 80227c8:	4614      	mov	r4, r2
 80227ca:	4698      	mov	r8, r3
 80227cc:	4606      	mov	r6, r0
 80227ce:	b118      	cbz	r0, 80227d8 <_vfiprintf_r+0x18>
 80227d0:	6983      	ldr	r3, [r0, #24]
 80227d2:	b90b      	cbnz	r3, 80227d8 <_vfiprintf_r+0x18>
 80227d4:	f7fe fcb8 	bl	8021148 <__sinit>
 80227d8:	4b89      	ldr	r3, [pc, #548]	; (8022a00 <_vfiprintf_r+0x240>)
 80227da:	429d      	cmp	r5, r3
 80227dc:	d11b      	bne.n	8022816 <_vfiprintf_r+0x56>
 80227de:	6875      	ldr	r5, [r6, #4]
 80227e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80227e2:	07d9      	lsls	r1, r3, #31
 80227e4:	d405      	bmi.n	80227f2 <_vfiprintf_r+0x32>
 80227e6:	89ab      	ldrh	r3, [r5, #12]
 80227e8:	059a      	lsls	r2, r3, #22
 80227ea:	d402      	bmi.n	80227f2 <_vfiprintf_r+0x32>
 80227ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80227ee:	f7ff f8ce 	bl	802198e <__retarget_lock_acquire_recursive>
 80227f2:	89ab      	ldrh	r3, [r5, #12]
 80227f4:	071b      	lsls	r3, r3, #28
 80227f6:	d501      	bpl.n	80227fc <_vfiprintf_r+0x3c>
 80227f8:	692b      	ldr	r3, [r5, #16]
 80227fa:	b9eb      	cbnz	r3, 8022838 <_vfiprintf_r+0x78>
 80227fc:	4629      	mov	r1, r5
 80227fe:	4630      	mov	r0, r6
 8022800:	f000 f9dc 	bl	8022bbc <__swsetup_r>
 8022804:	b1c0      	cbz	r0, 8022838 <_vfiprintf_r+0x78>
 8022806:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8022808:	07dc      	lsls	r4, r3, #31
 802280a:	d50e      	bpl.n	802282a <_vfiprintf_r+0x6a>
 802280c:	f04f 30ff 	mov.w	r0, #4294967295
 8022810:	b01d      	add	sp, #116	; 0x74
 8022812:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022816:	4b7b      	ldr	r3, [pc, #492]	; (8022a04 <_vfiprintf_r+0x244>)
 8022818:	429d      	cmp	r5, r3
 802281a:	d101      	bne.n	8022820 <_vfiprintf_r+0x60>
 802281c:	68b5      	ldr	r5, [r6, #8]
 802281e:	e7df      	b.n	80227e0 <_vfiprintf_r+0x20>
 8022820:	4b79      	ldr	r3, [pc, #484]	; (8022a08 <_vfiprintf_r+0x248>)
 8022822:	429d      	cmp	r5, r3
 8022824:	bf08      	it	eq
 8022826:	68f5      	ldreq	r5, [r6, #12]
 8022828:	e7da      	b.n	80227e0 <_vfiprintf_r+0x20>
 802282a:	89ab      	ldrh	r3, [r5, #12]
 802282c:	0598      	lsls	r0, r3, #22
 802282e:	d4ed      	bmi.n	802280c <_vfiprintf_r+0x4c>
 8022830:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8022832:	f7ff f8ad 	bl	8021990 <__retarget_lock_release_recursive>
 8022836:	e7e9      	b.n	802280c <_vfiprintf_r+0x4c>
 8022838:	2300      	movs	r3, #0
 802283a:	9309      	str	r3, [sp, #36]	; 0x24
 802283c:	2320      	movs	r3, #32
 802283e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8022842:	f8cd 800c 	str.w	r8, [sp, #12]
 8022846:	2330      	movs	r3, #48	; 0x30
 8022848:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8022a0c <_vfiprintf_r+0x24c>
 802284c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8022850:	f04f 0901 	mov.w	r9, #1
 8022854:	4623      	mov	r3, r4
 8022856:	469a      	mov	sl, r3
 8022858:	f813 2b01 	ldrb.w	r2, [r3], #1
 802285c:	b10a      	cbz	r2, 8022862 <_vfiprintf_r+0xa2>
 802285e:	2a25      	cmp	r2, #37	; 0x25
 8022860:	d1f9      	bne.n	8022856 <_vfiprintf_r+0x96>
 8022862:	ebba 0b04 	subs.w	fp, sl, r4
 8022866:	d00b      	beq.n	8022880 <_vfiprintf_r+0xc0>
 8022868:	465b      	mov	r3, fp
 802286a:	4622      	mov	r2, r4
 802286c:	4629      	mov	r1, r5
 802286e:	4630      	mov	r0, r6
 8022870:	f7ff ff93 	bl	802279a <__sfputs_r>
 8022874:	3001      	adds	r0, #1
 8022876:	f000 80aa 	beq.w	80229ce <_vfiprintf_r+0x20e>
 802287a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802287c:	445a      	add	r2, fp
 802287e:	9209      	str	r2, [sp, #36]	; 0x24
 8022880:	f89a 3000 	ldrb.w	r3, [sl]
 8022884:	2b00      	cmp	r3, #0
 8022886:	f000 80a2 	beq.w	80229ce <_vfiprintf_r+0x20e>
 802288a:	2300      	movs	r3, #0
 802288c:	f04f 32ff 	mov.w	r2, #4294967295
 8022890:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8022894:	f10a 0a01 	add.w	sl, sl, #1
 8022898:	9304      	str	r3, [sp, #16]
 802289a:	9307      	str	r3, [sp, #28]
 802289c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80228a0:	931a      	str	r3, [sp, #104]	; 0x68
 80228a2:	4654      	mov	r4, sl
 80228a4:	2205      	movs	r2, #5
 80228a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80228aa:	4858      	ldr	r0, [pc, #352]	; (8022a0c <_vfiprintf_r+0x24c>)
 80228ac:	f7dd fd30 	bl	8000310 <memchr>
 80228b0:	9a04      	ldr	r2, [sp, #16]
 80228b2:	b9d8      	cbnz	r0, 80228ec <_vfiprintf_r+0x12c>
 80228b4:	06d1      	lsls	r1, r2, #27
 80228b6:	bf44      	itt	mi
 80228b8:	2320      	movmi	r3, #32
 80228ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80228be:	0713      	lsls	r3, r2, #28
 80228c0:	bf44      	itt	mi
 80228c2:	232b      	movmi	r3, #43	; 0x2b
 80228c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80228c8:	f89a 3000 	ldrb.w	r3, [sl]
 80228cc:	2b2a      	cmp	r3, #42	; 0x2a
 80228ce:	d015      	beq.n	80228fc <_vfiprintf_r+0x13c>
 80228d0:	9a07      	ldr	r2, [sp, #28]
 80228d2:	4654      	mov	r4, sl
 80228d4:	2000      	movs	r0, #0
 80228d6:	f04f 0c0a 	mov.w	ip, #10
 80228da:	4621      	mov	r1, r4
 80228dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80228e0:	3b30      	subs	r3, #48	; 0x30
 80228e2:	2b09      	cmp	r3, #9
 80228e4:	d94e      	bls.n	8022984 <_vfiprintf_r+0x1c4>
 80228e6:	b1b0      	cbz	r0, 8022916 <_vfiprintf_r+0x156>
 80228e8:	9207      	str	r2, [sp, #28]
 80228ea:	e014      	b.n	8022916 <_vfiprintf_r+0x156>
 80228ec:	eba0 0308 	sub.w	r3, r0, r8
 80228f0:	fa09 f303 	lsl.w	r3, r9, r3
 80228f4:	4313      	orrs	r3, r2
 80228f6:	9304      	str	r3, [sp, #16]
 80228f8:	46a2      	mov	sl, r4
 80228fa:	e7d2      	b.n	80228a2 <_vfiprintf_r+0xe2>
 80228fc:	9b03      	ldr	r3, [sp, #12]
 80228fe:	1d19      	adds	r1, r3, #4
 8022900:	681b      	ldr	r3, [r3, #0]
 8022902:	9103      	str	r1, [sp, #12]
 8022904:	2b00      	cmp	r3, #0
 8022906:	bfbb      	ittet	lt
 8022908:	425b      	neglt	r3, r3
 802290a:	f042 0202 	orrlt.w	r2, r2, #2
 802290e:	9307      	strge	r3, [sp, #28]
 8022910:	9307      	strlt	r3, [sp, #28]
 8022912:	bfb8      	it	lt
 8022914:	9204      	strlt	r2, [sp, #16]
 8022916:	7823      	ldrb	r3, [r4, #0]
 8022918:	2b2e      	cmp	r3, #46	; 0x2e
 802291a:	d10c      	bne.n	8022936 <_vfiprintf_r+0x176>
 802291c:	7863      	ldrb	r3, [r4, #1]
 802291e:	2b2a      	cmp	r3, #42	; 0x2a
 8022920:	d135      	bne.n	802298e <_vfiprintf_r+0x1ce>
 8022922:	9b03      	ldr	r3, [sp, #12]
 8022924:	1d1a      	adds	r2, r3, #4
 8022926:	681b      	ldr	r3, [r3, #0]
 8022928:	9203      	str	r2, [sp, #12]
 802292a:	2b00      	cmp	r3, #0
 802292c:	bfb8      	it	lt
 802292e:	f04f 33ff 	movlt.w	r3, #4294967295
 8022932:	3402      	adds	r4, #2
 8022934:	9305      	str	r3, [sp, #20]
 8022936:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8022a1c <_vfiprintf_r+0x25c>
 802293a:	7821      	ldrb	r1, [r4, #0]
 802293c:	2203      	movs	r2, #3
 802293e:	4650      	mov	r0, sl
 8022940:	f7dd fce6 	bl	8000310 <memchr>
 8022944:	b140      	cbz	r0, 8022958 <_vfiprintf_r+0x198>
 8022946:	2340      	movs	r3, #64	; 0x40
 8022948:	eba0 000a 	sub.w	r0, r0, sl
 802294c:	fa03 f000 	lsl.w	r0, r3, r0
 8022950:	9b04      	ldr	r3, [sp, #16]
 8022952:	4303      	orrs	r3, r0
 8022954:	3401      	adds	r4, #1
 8022956:	9304      	str	r3, [sp, #16]
 8022958:	f814 1b01 	ldrb.w	r1, [r4], #1
 802295c:	482c      	ldr	r0, [pc, #176]	; (8022a10 <_vfiprintf_r+0x250>)
 802295e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8022962:	2206      	movs	r2, #6
 8022964:	f7dd fcd4 	bl	8000310 <memchr>
 8022968:	2800      	cmp	r0, #0
 802296a:	d03f      	beq.n	80229ec <_vfiprintf_r+0x22c>
 802296c:	4b29      	ldr	r3, [pc, #164]	; (8022a14 <_vfiprintf_r+0x254>)
 802296e:	bb1b      	cbnz	r3, 80229b8 <_vfiprintf_r+0x1f8>
 8022970:	9b03      	ldr	r3, [sp, #12]
 8022972:	3307      	adds	r3, #7
 8022974:	f023 0307 	bic.w	r3, r3, #7
 8022978:	3308      	adds	r3, #8
 802297a:	9303      	str	r3, [sp, #12]
 802297c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802297e:	443b      	add	r3, r7
 8022980:	9309      	str	r3, [sp, #36]	; 0x24
 8022982:	e767      	b.n	8022854 <_vfiprintf_r+0x94>
 8022984:	fb0c 3202 	mla	r2, ip, r2, r3
 8022988:	460c      	mov	r4, r1
 802298a:	2001      	movs	r0, #1
 802298c:	e7a5      	b.n	80228da <_vfiprintf_r+0x11a>
 802298e:	2300      	movs	r3, #0
 8022990:	3401      	adds	r4, #1
 8022992:	9305      	str	r3, [sp, #20]
 8022994:	4619      	mov	r1, r3
 8022996:	f04f 0c0a 	mov.w	ip, #10
 802299a:	4620      	mov	r0, r4
 802299c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80229a0:	3a30      	subs	r2, #48	; 0x30
 80229a2:	2a09      	cmp	r2, #9
 80229a4:	d903      	bls.n	80229ae <_vfiprintf_r+0x1ee>
 80229a6:	2b00      	cmp	r3, #0
 80229a8:	d0c5      	beq.n	8022936 <_vfiprintf_r+0x176>
 80229aa:	9105      	str	r1, [sp, #20]
 80229ac:	e7c3      	b.n	8022936 <_vfiprintf_r+0x176>
 80229ae:	fb0c 2101 	mla	r1, ip, r1, r2
 80229b2:	4604      	mov	r4, r0
 80229b4:	2301      	movs	r3, #1
 80229b6:	e7f0      	b.n	802299a <_vfiprintf_r+0x1da>
 80229b8:	ab03      	add	r3, sp, #12
 80229ba:	9300      	str	r3, [sp, #0]
 80229bc:	462a      	mov	r2, r5
 80229be:	4b16      	ldr	r3, [pc, #88]	; (8022a18 <_vfiprintf_r+0x258>)
 80229c0:	a904      	add	r1, sp, #16
 80229c2:	4630      	mov	r0, r6
 80229c4:	f7fc f868 	bl	801ea98 <_printf_float>
 80229c8:	4607      	mov	r7, r0
 80229ca:	1c78      	adds	r0, r7, #1
 80229cc:	d1d6      	bne.n	802297c <_vfiprintf_r+0x1bc>
 80229ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80229d0:	07d9      	lsls	r1, r3, #31
 80229d2:	d405      	bmi.n	80229e0 <_vfiprintf_r+0x220>
 80229d4:	89ab      	ldrh	r3, [r5, #12]
 80229d6:	059a      	lsls	r2, r3, #22
 80229d8:	d402      	bmi.n	80229e0 <_vfiprintf_r+0x220>
 80229da:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80229dc:	f7fe ffd8 	bl	8021990 <__retarget_lock_release_recursive>
 80229e0:	89ab      	ldrh	r3, [r5, #12]
 80229e2:	065b      	lsls	r3, r3, #25
 80229e4:	f53f af12 	bmi.w	802280c <_vfiprintf_r+0x4c>
 80229e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80229ea:	e711      	b.n	8022810 <_vfiprintf_r+0x50>
 80229ec:	ab03      	add	r3, sp, #12
 80229ee:	9300      	str	r3, [sp, #0]
 80229f0:	462a      	mov	r2, r5
 80229f2:	4b09      	ldr	r3, [pc, #36]	; (8022a18 <_vfiprintf_r+0x258>)
 80229f4:	a904      	add	r1, sp, #16
 80229f6:	4630      	mov	r0, r6
 80229f8:	f7fc fada 	bl	801efb0 <_printf_i>
 80229fc:	e7e4      	b.n	80229c8 <_vfiprintf_r+0x208>
 80229fe:	bf00      	nop
 8022a00:	08027494 	.word	0x08027494
 8022a04:	080274b4 	.word	0x080274b4
 8022a08:	08027474 	.word	0x08027474
 8022a0c:	080276b4 	.word	0x080276b4
 8022a10:	080276be 	.word	0x080276be
 8022a14:	0801ea99 	.word	0x0801ea99
 8022a18:	0802279b 	.word	0x0802279b
 8022a1c:	080276ba 	.word	0x080276ba

08022a20 <nan>:
 8022a20:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8022a28 <nan+0x8>
 8022a24:	4770      	bx	lr
 8022a26:	bf00      	nop
 8022a28:	00000000 	.word	0x00000000
 8022a2c:	7ff80000 	.word	0x7ff80000

08022a30 <_sbrk_r>:
 8022a30:	b538      	push	{r3, r4, r5, lr}
 8022a32:	4d06      	ldr	r5, [pc, #24]	; (8022a4c <_sbrk_r+0x1c>)
 8022a34:	2300      	movs	r3, #0
 8022a36:	4604      	mov	r4, r0
 8022a38:	4608      	mov	r0, r1
 8022a3a:	602b      	str	r3, [r5, #0]
 8022a3c:	f7df fe38 	bl	80026b0 <_sbrk>
 8022a40:	1c43      	adds	r3, r0, #1
 8022a42:	d102      	bne.n	8022a4a <_sbrk_r+0x1a>
 8022a44:	682b      	ldr	r3, [r5, #0]
 8022a46:	b103      	cbz	r3, 8022a4a <_sbrk_r+0x1a>
 8022a48:	6023      	str	r3, [r4, #0]
 8022a4a:	bd38      	pop	{r3, r4, r5, pc}
 8022a4c:	24007f80 	.word	0x24007f80

08022a50 <__sread>:
 8022a50:	b510      	push	{r4, lr}
 8022a52:	460c      	mov	r4, r1
 8022a54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022a58:	f000 faa0 	bl	8022f9c <_read_r>
 8022a5c:	2800      	cmp	r0, #0
 8022a5e:	bfab      	itete	ge
 8022a60:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8022a62:	89a3      	ldrhlt	r3, [r4, #12]
 8022a64:	181b      	addge	r3, r3, r0
 8022a66:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8022a6a:	bfac      	ite	ge
 8022a6c:	6563      	strge	r3, [r4, #84]	; 0x54
 8022a6e:	81a3      	strhlt	r3, [r4, #12]
 8022a70:	bd10      	pop	{r4, pc}

08022a72 <__swrite>:
 8022a72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022a76:	461f      	mov	r7, r3
 8022a78:	898b      	ldrh	r3, [r1, #12]
 8022a7a:	05db      	lsls	r3, r3, #23
 8022a7c:	4605      	mov	r5, r0
 8022a7e:	460c      	mov	r4, r1
 8022a80:	4616      	mov	r6, r2
 8022a82:	d505      	bpl.n	8022a90 <__swrite+0x1e>
 8022a84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022a88:	2302      	movs	r3, #2
 8022a8a:	2200      	movs	r2, #0
 8022a8c:	f000 f9de 	bl	8022e4c <_lseek_r>
 8022a90:	89a3      	ldrh	r3, [r4, #12]
 8022a92:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8022a96:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8022a9a:	81a3      	strh	r3, [r4, #12]
 8022a9c:	4632      	mov	r2, r6
 8022a9e:	463b      	mov	r3, r7
 8022aa0:	4628      	mov	r0, r5
 8022aa2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8022aa6:	f000 b877 	b.w	8022b98 <_write_r>

08022aaa <__sseek>:
 8022aaa:	b510      	push	{r4, lr}
 8022aac:	460c      	mov	r4, r1
 8022aae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022ab2:	f000 f9cb 	bl	8022e4c <_lseek_r>
 8022ab6:	1c43      	adds	r3, r0, #1
 8022ab8:	89a3      	ldrh	r3, [r4, #12]
 8022aba:	bf15      	itete	ne
 8022abc:	6560      	strne	r0, [r4, #84]	; 0x54
 8022abe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8022ac2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8022ac6:	81a3      	strheq	r3, [r4, #12]
 8022ac8:	bf18      	it	ne
 8022aca:	81a3      	strhne	r3, [r4, #12]
 8022acc:	bd10      	pop	{r4, pc}

08022ace <__sclose>:
 8022ace:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022ad2:	f000 b8e9 	b.w	8022ca8 <_close_r>
	...

08022ad8 <__swbuf_r>:
 8022ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022ada:	460e      	mov	r6, r1
 8022adc:	4614      	mov	r4, r2
 8022ade:	4605      	mov	r5, r0
 8022ae0:	b118      	cbz	r0, 8022aea <__swbuf_r+0x12>
 8022ae2:	6983      	ldr	r3, [r0, #24]
 8022ae4:	b90b      	cbnz	r3, 8022aea <__swbuf_r+0x12>
 8022ae6:	f7fe fb2f 	bl	8021148 <__sinit>
 8022aea:	4b21      	ldr	r3, [pc, #132]	; (8022b70 <__swbuf_r+0x98>)
 8022aec:	429c      	cmp	r4, r3
 8022aee:	d12b      	bne.n	8022b48 <__swbuf_r+0x70>
 8022af0:	686c      	ldr	r4, [r5, #4]
 8022af2:	69a3      	ldr	r3, [r4, #24]
 8022af4:	60a3      	str	r3, [r4, #8]
 8022af6:	89a3      	ldrh	r3, [r4, #12]
 8022af8:	071a      	lsls	r2, r3, #28
 8022afa:	d52f      	bpl.n	8022b5c <__swbuf_r+0x84>
 8022afc:	6923      	ldr	r3, [r4, #16]
 8022afe:	b36b      	cbz	r3, 8022b5c <__swbuf_r+0x84>
 8022b00:	6923      	ldr	r3, [r4, #16]
 8022b02:	6820      	ldr	r0, [r4, #0]
 8022b04:	1ac0      	subs	r0, r0, r3
 8022b06:	6963      	ldr	r3, [r4, #20]
 8022b08:	b2f6      	uxtb	r6, r6
 8022b0a:	4283      	cmp	r3, r0
 8022b0c:	4637      	mov	r7, r6
 8022b0e:	dc04      	bgt.n	8022b1a <__swbuf_r+0x42>
 8022b10:	4621      	mov	r1, r4
 8022b12:	4628      	mov	r0, r5
 8022b14:	f000 f95e 	bl	8022dd4 <_fflush_r>
 8022b18:	bb30      	cbnz	r0, 8022b68 <__swbuf_r+0x90>
 8022b1a:	68a3      	ldr	r3, [r4, #8]
 8022b1c:	3b01      	subs	r3, #1
 8022b1e:	60a3      	str	r3, [r4, #8]
 8022b20:	6823      	ldr	r3, [r4, #0]
 8022b22:	1c5a      	adds	r2, r3, #1
 8022b24:	6022      	str	r2, [r4, #0]
 8022b26:	701e      	strb	r6, [r3, #0]
 8022b28:	6963      	ldr	r3, [r4, #20]
 8022b2a:	3001      	adds	r0, #1
 8022b2c:	4283      	cmp	r3, r0
 8022b2e:	d004      	beq.n	8022b3a <__swbuf_r+0x62>
 8022b30:	89a3      	ldrh	r3, [r4, #12]
 8022b32:	07db      	lsls	r3, r3, #31
 8022b34:	d506      	bpl.n	8022b44 <__swbuf_r+0x6c>
 8022b36:	2e0a      	cmp	r6, #10
 8022b38:	d104      	bne.n	8022b44 <__swbuf_r+0x6c>
 8022b3a:	4621      	mov	r1, r4
 8022b3c:	4628      	mov	r0, r5
 8022b3e:	f000 f949 	bl	8022dd4 <_fflush_r>
 8022b42:	b988      	cbnz	r0, 8022b68 <__swbuf_r+0x90>
 8022b44:	4638      	mov	r0, r7
 8022b46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8022b48:	4b0a      	ldr	r3, [pc, #40]	; (8022b74 <__swbuf_r+0x9c>)
 8022b4a:	429c      	cmp	r4, r3
 8022b4c:	d101      	bne.n	8022b52 <__swbuf_r+0x7a>
 8022b4e:	68ac      	ldr	r4, [r5, #8]
 8022b50:	e7cf      	b.n	8022af2 <__swbuf_r+0x1a>
 8022b52:	4b09      	ldr	r3, [pc, #36]	; (8022b78 <__swbuf_r+0xa0>)
 8022b54:	429c      	cmp	r4, r3
 8022b56:	bf08      	it	eq
 8022b58:	68ec      	ldreq	r4, [r5, #12]
 8022b5a:	e7ca      	b.n	8022af2 <__swbuf_r+0x1a>
 8022b5c:	4621      	mov	r1, r4
 8022b5e:	4628      	mov	r0, r5
 8022b60:	f000 f82c 	bl	8022bbc <__swsetup_r>
 8022b64:	2800      	cmp	r0, #0
 8022b66:	d0cb      	beq.n	8022b00 <__swbuf_r+0x28>
 8022b68:	f04f 37ff 	mov.w	r7, #4294967295
 8022b6c:	e7ea      	b.n	8022b44 <__swbuf_r+0x6c>
 8022b6e:	bf00      	nop
 8022b70:	08027494 	.word	0x08027494
 8022b74:	080274b4 	.word	0x080274b4
 8022b78:	08027474 	.word	0x08027474

08022b7c <__ascii_wctomb>:
 8022b7c:	b149      	cbz	r1, 8022b92 <__ascii_wctomb+0x16>
 8022b7e:	2aff      	cmp	r2, #255	; 0xff
 8022b80:	bf85      	ittet	hi
 8022b82:	238a      	movhi	r3, #138	; 0x8a
 8022b84:	6003      	strhi	r3, [r0, #0]
 8022b86:	700a      	strbls	r2, [r1, #0]
 8022b88:	f04f 30ff 	movhi.w	r0, #4294967295
 8022b8c:	bf98      	it	ls
 8022b8e:	2001      	movls	r0, #1
 8022b90:	4770      	bx	lr
 8022b92:	4608      	mov	r0, r1
 8022b94:	4770      	bx	lr
	...

08022b98 <_write_r>:
 8022b98:	b538      	push	{r3, r4, r5, lr}
 8022b9a:	4d07      	ldr	r5, [pc, #28]	; (8022bb8 <_write_r+0x20>)
 8022b9c:	4604      	mov	r4, r0
 8022b9e:	4608      	mov	r0, r1
 8022ba0:	4611      	mov	r1, r2
 8022ba2:	2200      	movs	r2, #0
 8022ba4:	602a      	str	r2, [r5, #0]
 8022ba6:	461a      	mov	r2, r3
 8022ba8:	f7df fd31 	bl	800260e <_write>
 8022bac:	1c43      	adds	r3, r0, #1
 8022bae:	d102      	bne.n	8022bb6 <_write_r+0x1e>
 8022bb0:	682b      	ldr	r3, [r5, #0]
 8022bb2:	b103      	cbz	r3, 8022bb6 <_write_r+0x1e>
 8022bb4:	6023      	str	r3, [r4, #0]
 8022bb6:	bd38      	pop	{r3, r4, r5, pc}
 8022bb8:	24007f80 	.word	0x24007f80

08022bbc <__swsetup_r>:
 8022bbc:	4b32      	ldr	r3, [pc, #200]	; (8022c88 <__swsetup_r+0xcc>)
 8022bbe:	b570      	push	{r4, r5, r6, lr}
 8022bc0:	681d      	ldr	r5, [r3, #0]
 8022bc2:	4606      	mov	r6, r0
 8022bc4:	460c      	mov	r4, r1
 8022bc6:	b125      	cbz	r5, 8022bd2 <__swsetup_r+0x16>
 8022bc8:	69ab      	ldr	r3, [r5, #24]
 8022bca:	b913      	cbnz	r3, 8022bd2 <__swsetup_r+0x16>
 8022bcc:	4628      	mov	r0, r5
 8022bce:	f7fe fabb 	bl	8021148 <__sinit>
 8022bd2:	4b2e      	ldr	r3, [pc, #184]	; (8022c8c <__swsetup_r+0xd0>)
 8022bd4:	429c      	cmp	r4, r3
 8022bd6:	d10f      	bne.n	8022bf8 <__swsetup_r+0x3c>
 8022bd8:	686c      	ldr	r4, [r5, #4]
 8022bda:	89a3      	ldrh	r3, [r4, #12]
 8022bdc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8022be0:	0719      	lsls	r1, r3, #28
 8022be2:	d42c      	bmi.n	8022c3e <__swsetup_r+0x82>
 8022be4:	06dd      	lsls	r5, r3, #27
 8022be6:	d411      	bmi.n	8022c0c <__swsetup_r+0x50>
 8022be8:	2309      	movs	r3, #9
 8022bea:	6033      	str	r3, [r6, #0]
 8022bec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8022bf0:	81a3      	strh	r3, [r4, #12]
 8022bf2:	f04f 30ff 	mov.w	r0, #4294967295
 8022bf6:	e03e      	b.n	8022c76 <__swsetup_r+0xba>
 8022bf8:	4b25      	ldr	r3, [pc, #148]	; (8022c90 <__swsetup_r+0xd4>)
 8022bfa:	429c      	cmp	r4, r3
 8022bfc:	d101      	bne.n	8022c02 <__swsetup_r+0x46>
 8022bfe:	68ac      	ldr	r4, [r5, #8]
 8022c00:	e7eb      	b.n	8022bda <__swsetup_r+0x1e>
 8022c02:	4b24      	ldr	r3, [pc, #144]	; (8022c94 <__swsetup_r+0xd8>)
 8022c04:	429c      	cmp	r4, r3
 8022c06:	bf08      	it	eq
 8022c08:	68ec      	ldreq	r4, [r5, #12]
 8022c0a:	e7e6      	b.n	8022bda <__swsetup_r+0x1e>
 8022c0c:	0758      	lsls	r0, r3, #29
 8022c0e:	d512      	bpl.n	8022c36 <__swsetup_r+0x7a>
 8022c10:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8022c12:	b141      	cbz	r1, 8022c26 <__swsetup_r+0x6a>
 8022c14:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8022c18:	4299      	cmp	r1, r3
 8022c1a:	d002      	beq.n	8022c22 <__swsetup_r+0x66>
 8022c1c:	4630      	mov	r0, r6
 8022c1e:	f7ff fb9f 	bl	8022360 <_free_r>
 8022c22:	2300      	movs	r3, #0
 8022c24:	6363      	str	r3, [r4, #52]	; 0x34
 8022c26:	89a3      	ldrh	r3, [r4, #12]
 8022c28:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8022c2c:	81a3      	strh	r3, [r4, #12]
 8022c2e:	2300      	movs	r3, #0
 8022c30:	6063      	str	r3, [r4, #4]
 8022c32:	6923      	ldr	r3, [r4, #16]
 8022c34:	6023      	str	r3, [r4, #0]
 8022c36:	89a3      	ldrh	r3, [r4, #12]
 8022c38:	f043 0308 	orr.w	r3, r3, #8
 8022c3c:	81a3      	strh	r3, [r4, #12]
 8022c3e:	6923      	ldr	r3, [r4, #16]
 8022c40:	b94b      	cbnz	r3, 8022c56 <__swsetup_r+0x9a>
 8022c42:	89a3      	ldrh	r3, [r4, #12]
 8022c44:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8022c48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8022c4c:	d003      	beq.n	8022c56 <__swsetup_r+0x9a>
 8022c4e:	4621      	mov	r1, r4
 8022c50:	4630      	mov	r0, r6
 8022c52:	f000 f931 	bl	8022eb8 <__smakebuf_r>
 8022c56:	89a0      	ldrh	r0, [r4, #12]
 8022c58:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8022c5c:	f010 0301 	ands.w	r3, r0, #1
 8022c60:	d00a      	beq.n	8022c78 <__swsetup_r+0xbc>
 8022c62:	2300      	movs	r3, #0
 8022c64:	60a3      	str	r3, [r4, #8]
 8022c66:	6963      	ldr	r3, [r4, #20]
 8022c68:	425b      	negs	r3, r3
 8022c6a:	61a3      	str	r3, [r4, #24]
 8022c6c:	6923      	ldr	r3, [r4, #16]
 8022c6e:	b943      	cbnz	r3, 8022c82 <__swsetup_r+0xc6>
 8022c70:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8022c74:	d1ba      	bne.n	8022bec <__swsetup_r+0x30>
 8022c76:	bd70      	pop	{r4, r5, r6, pc}
 8022c78:	0781      	lsls	r1, r0, #30
 8022c7a:	bf58      	it	pl
 8022c7c:	6963      	ldrpl	r3, [r4, #20]
 8022c7e:	60a3      	str	r3, [r4, #8]
 8022c80:	e7f4      	b.n	8022c6c <__swsetup_r+0xb0>
 8022c82:	2000      	movs	r0, #0
 8022c84:	e7f7      	b.n	8022c76 <__swsetup_r+0xba>
 8022c86:	bf00      	nop
 8022c88:	24000304 	.word	0x24000304
 8022c8c:	08027494 	.word	0x08027494
 8022c90:	080274b4 	.word	0x080274b4
 8022c94:	08027474 	.word	0x08027474

08022c98 <abort>:
 8022c98:	b508      	push	{r3, lr}
 8022c9a:	2006      	movs	r0, #6
 8022c9c:	f000 f9b8 	bl	8023010 <raise>
 8022ca0:	2001      	movs	r0, #1
 8022ca2:	f7df fc8d 	bl	80025c0 <_exit>
	...

08022ca8 <_close_r>:
 8022ca8:	b538      	push	{r3, r4, r5, lr}
 8022caa:	4d06      	ldr	r5, [pc, #24]	; (8022cc4 <_close_r+0x1c>)
 8022cac:	2300      	movs	r3, #0
 8022cae:	4604      	mov	r4, r0
 8022cb0:	4608      	mov	r0, r1
 8022cb2:	602b      	str	r3, [r5, #0]
 8022cb4:	f7df fcc7 	bl	8002646 <_close>
 8022cb8:	1c43      	adds	r3, r0, #1
 8022cba:	d102      	bne.n	8022cc2 <_close_r+0x1a>
 8022cbc:	682b      	ldr	r3, [r5, #0]
 8022cbe:	b103      	cbz	r3, 8022cc2 <_close_r+0x1a>
 8022cc0:	6023      	str	r3, [r4, #0]
 8022cc2:	bd38      	pop	{r3, r4, r5, pc}
 8022cc4:	24007f80 	.word	0x24007f80

08022cc8 <__sflush_r>:
 8022cc8:	898a      	ldrh	r2, [r1, #12]
 8022cca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022cce:	4605      	mov	r5, r0
 8022cd0:	0710      	lsls	r0, r2, #28
 8022cd2:	460c      	mov	r4, r1
 8022cd4:	d458      	bmi.n	8022d88 <__sflush_r+0xc0>
 8022cd6:	684b      	ldr	r3, [r1, #4]
 8022cd8:	2b00      	cmp	r3, #0
 8022cda:	dc05      	bgt.n	8022ce8 <__sflush_r+0x20>
 8022cdc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8022cde:	2b00      	cmp	r3, #0
 8022ce0:	dc02      	bgt.n	8022ce8 <__sflush_r+0x20>
 8022ce2:	2000      	movs	r0, #0
 8022ce4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022ce8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8022cea:	2e00      	cmp	r6, #0
 8022cec:	d0f9      	beq.n	8022ce2 <__sflush_r+0x1a>
 8022cee:	2300      	movs	r3, #0
 8022cf0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8022cf4:	682f      	ldr	r7, [r5, #0]
 8022cf6:	602b      	str	r3, [r5, #0]
 8022cf8:	d032      	beq.n	8022d60 <__sflush_r+0x98>
 8022cfa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8022cfc:	89a3      	ldrh	r3, [r4, #12]
 8022cfe:	075a      	lsls	r2, r3, #29
 8022d00:	d505      	bpl.n	8022d0e <__sflush_r+0x46>
 8022d02:	6863      	ldr	r3, [r4, #4]
 8022d04:	1ac0      	subs	r0, r0, r3
 8022d06:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8022d08:	b10b      	cbz	r3, 8022d0e <__sflush_r+0x46>
 8022d0a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8022d0c:	1ac0      	subs	r0, r0, r3
 8022d0e:	2300      	movs	r3, #0
 8022d10:	4602      	mov	r2, r0
 8022d12:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8022d14:	6a21      	ldr	r1, [r4, #32]
 8022d16:	4628      	mov	r0, r5
 8022d18:	47b0      	blx	r6
 8022d1a:	1c43      	adds	r3, r0, #1
 8022d1c:	89a3      	ldrh	r3, [r4, #12]
 8022d1e:	d106      	bne.n	8022d2e <__sflush_r+0x66>
 8022d20:	6829      	ldr	r1, [r5, #0]
 8022d22:	291d      	cmp	r1, #29
 8022d24:	d82c      	bhi.n	8022d80 <__sflush_r+0xb8>
 8022d26:	4a2a      	ldr	r2, [pc, #168]	; (8022dd0 <__sflush_r+0x108>)
 8022d28:	40ca      	lsrs	r2, r1
 8022d2a:	07d6      	lsls	r6, r2, #31
 8022d2c:	d528      	bpl.n	8022d80 <__sflush_r+0xb8>
 8022d2e:	2200      	movs	r2, #0
 8022d30:	6062      	str	r2, [r4, #4]
 8022d32:	04d9      	lsls	r1, r3, #19
 8022d34:	6922      	ldr	r2, [r4, #16]
 8022d36:	6022      	str	r2, [r4, #0]
 8022d38:	d504      	bpl.n	8022d44 <__sflush_r+0x7c>
 8022d3a:	1c42      	adds	r2, r0, #1
 8022d3c:	d101      	bne.n	8022d42 <__sflush_r+0x7a>
 8022d3e:	682b      	ldr	r3, [r5, #0]
 8022d40:	b903      	cbnz	r3, 8022d44 <__sflush_r+0x7c>
 8022d42:	6560      	str	r0, [r4, #84]	; 0x54
 8022d44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8022d46:	602f      	str	r7, [r5, #0]
 8022d48:	2900      	cmp	r1, #0
 8022d4a:	d0ca      	beq.n	8022ce2 <__sflush_r+0x1a>
 8022d4c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8022d50:	4299      	cmp	r1, r3
 8022d52:	d002      	beq.n	8022d5a <__sflush_r+0x92>
 8022d54:	4628      	mov	r0, r5
 8022d56:	f7ff fb03 	bl	8022360 <_free_r>
 8022d5a:	2000      	movs	r0, #0
 8022d5c:	6360      	str	r0, [r4, #52]	; 0x34
 8022d5e:	e7c1      	b.n	8022ce4 <__sflush_r+0x1c>
 8022d60:	6a21      	ldr	r1, [r4, #32]
 8022d62:	2301      	movs	r3, #1
 8022d64:	4628      	mov	r0, r5
 8022d66:	47b0      	blx	r6
 8022d68:	1c41      	adds	r1, r0, #1
 8022d6a:	d1c7      	bne.n	8022cfc <__sflush_r+0x34>
 8022d6c:	682b      	ldr	r3, [r5, #0]
 8022d6e:	2b00      	cmp	r3, #0
 8022d70:	d0c4      	beq.n	8022cfc <__sflush_r+0x34>
 8022d72:	2b1d      	cmp	r3, #29
 8022d74:	d001      	beq.n	8022d7a <__sflush_r+0xb2>
 8022d76:	2b16      	cmp	r3, #22
 8022d78:	d101      	bne.n	8022d7e <__sflush_r+0xb6>
 8022d7a:	602f      	str	r7, [r5, #0]
 8022d7c:	e7b1      	b.n	8022ce2 <__sflush_r+0x1a>
 8022d7e:	89a3      	ldrh	r3, [r4, #12]
 8022d80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8022d84:	81a3      	strh	r3, [r4, #12]
 8022d86:	e7ad      	b.n	8022ce4 <__sflush_r+0x1c>
 8022d88:	690f      	ldr	r7, [r1, #16]
 8022d8a:	2f00      	cmp	r7, #0
 8022d8c:	d0a9      	beq.n	8022ce2 <__sflush_r+0x1a>
 8022d8e:	0793      	lsls	r3, r2, #30
 8022d90:	680e      	ldr	r6, [r1, #0]
 8022d92:	bf08      	it	eq
 8022d94:	694b      	ldreq	r3, [r1, #20]
 8022d96:	600f      	str	r7, [r1, #0]
 8022d98:	bf18      	it	ne
 8022d9a:	2300      	movne	r3, #0
 8022d9c:	eba6 0807 	sub.w	r8, r6, r7
 8022da0:	608b      	str	r3, [r1, #8]
 8022da2:	f1b8 0f00 	cmp.w	r8, #0
 8022da6:	dd9c      	ble.n	8022ce2 <__sflush_r+0x1a>
 8022da8:	6a21      	ldr	r1, [r4, #32]
 8022daa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8022dac:	4643      	mov	r3, r8
 8022dae:	463a      	mov	r2, r7
 8022db0:	4628      	mov	r0, r5
 8022db2:	47b0      	blx	r6
 8022db4:	2800      	cmp	r0, #0
 8022db6:	dc06      	bgt.n	8022dc6 <__sflush_r+0xfe>
 8022db8:	89a3      	ldrh	r3, [r4, #12]
 8022dba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8022dbe:	81a3      	strh	r3, [r4, #12]
 8022dc0:	f04f 30ff 	mov.w	r0, #4294967295
 8022dc4:	e78e      	b.n	8022ce4 <__sflush_r+0x1c>
 8022dc6:	4407      	add	r7, r0
 8022dc8:	eba8 0800 	sub.w	r8, r8, r0
 8022dcc:	e7e9      	b.n	8022da2 <__sflush_r+0xda>
 8022dce:	bf00      	nop
 8022dd0:	20400001 	.word	0x20400001

08022dd4 <_fflush_r>:
 8022dd4:	b538      	push	{r3, r4, r5, lr}
 8022dd6:	690b      	ldr	r3, [r1, #16]
 8022dd8:	4605      	mov	r5, r0
 8022dda:	460c      	mov	r4, r1
 8022ddc:	b913      	cbnz	r3, 8022de4 <_fflush_r+0x10>
 8022dde:	2500      	movs	r5, #0
 8022de0:	4628      	mov	r0, r5
 8022de2:	bd38      	pop	{r3, r4, r5, pc}
 8022de4:	b118      	cbz	r0, 8022dee <_fflush_r+0x1a>
 8022de6:	6983      	ldr	r3, [r0, #24]
 8022de8:	b90b      	cbnz	r3, 8022dee <_fflush_r+0x1a>
 8022dea:	f7fe f9ad 	bl	8021148 <__sinit>
 8022dee:	4b14      	ldr	r3, [pc, #80]	; (8022e40 <_fflush_r+0x6c>)
 8022df0:	429c      	cmp	r4, r3
 8022df2:	d11b      	bne.n	8022e2c <_fflush_r+0x58>
 8022df4:	686c      	ldr	r4, [r5, #4]
 8022df6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8022dfa:	2b00      	cmp	r3, #0
 8022dfc:	d0ef      	beq.n	8022dde <_fflush_r+0xa>
 8022dfe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8022e00:	07d0      	lsls	r0, r2, #31
 8022e02:	d404      	bmi.n	8022e0e <_fflush_r+0x3a>
 8022e04:	0599      	lsls	r1, r3, #22
 8022e06:	d402      	bmi.n	8022e0e <_fflush_r+0x3a>
 8022e08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8022e0a:	f7fe fdc0 	bl	802198e <__retarget_lock_acquire_recursive>
 8022e0e:	4628      	mov	r0, r5
 8022e10:	4621      	mov	r1, r4
 8022e12:	f7ff ff59 	bl	8022cc8 <__sflush_r>
 8022e16:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8022e18:	07da      	lsls	r2, r3, #31
 8022e1a:	4605      	mov	r5, r0
 8022e1c:	d4e0      	bmi.n	8022de0 <_fflush_r+0xc>
 8022e1e:	89a3      	ldrh	r3, [r4, #12]
 8022e20:	059b      	lsls	r3, r3, #22
 8022e22:	d4dd      	bmi.n	8022de0 <_fflush_r+0xc>
 8022e24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8022e26:	f7fe fdb3 	bl	8021990 <__retarget_lock_release_recursive>
 8022e2a:	e7d9      	b.n	8022de0 <_fflush_r+0xc>
 8022e2c:	4b05      	ldr	r3, [pc, #20]	; (8022e44 <_fflush_r+0x70>)
 8022e2e:	429c      	cmp	r4, r3
 8022e30:	d101      	bne.n	8022e36 <_fflush_r+0x62>
 8022e32:	68ac      	ldr	r4, [r5, #8]
 8022e34:	e7df      	b.n	8022df6 <_fflush_r+0x22>
 8022e36:	4b04      	ldr	r3, [pc, #16]	; (8022e48 <_fflush_r+0x74>)
 8022e38:	429c      	cmp	r4, r3
 8022e3a:	bf08      	it	eq
 8022e3c:	68ec      	ldreq	r4, [r5, #12]
 8022e3e:	e7da      	b.n	8022df6 <_fflush_r+0x22>
 8022e40:	08027494 	.word	0x08027494
 8022e44:	080274b4 	.word	0x080274b4
 8022e48:	08027474 	.word	0x08027474

08022e4c <_lseek_r>:
 8022e4c:	b538      	push	{r3, r4, r5, lr}
 8022e4e:	4d07      	ldr	r5, [pc, #28]	; (8022e6c <_lseek_r+0x20>)
 8022e50:	4604      	mov	r4, r0
 8022e52:	4608      	mov	r0, r1
 8022e54:	4611      	mov	r1, r2
 8022e56:	2200      	movs	r2, #0
 8022e58:	602a      	str	r2, [r5, #0]
 8022e5a:	461a      	mov	r2, r3
 8022e5c:	f7df fc1a 	bl	8002694 <_lseek>
 8022e60:	1c43      	adds	r3, r0, #1
 8022e62:	d102      	bne.n	8022e6a <_lseek_r+0x1e>
 8022e64:	682b      	ldr	r3, [r5, #0]
 8022e66:	b103      	cbz	r3, 8022e6a <_lseek_r+0x1e>
 8022e68:	6023      	str	r3, [r4, #0]
 8022e6a:	bd38      	pop	{r3, r4, r5, pc}
 8022e6c:	24007f80 	.word	0x24007f80

08022e70 <__swhatbuf_r>:
 8022e70:	b570      	push	{r4, r5, r6, lr}
 8022e72:	460e      	mov	r6, r1
 8022e74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022e78:	2900      	cmp	r1, #0
 8022e7a:	b096      	sub	sp, #88	; 0x58
 8022e7c:	4614      	mov	r4, r2
 8022e7e:	461d      	mov	r5, r3
 8022e80:	da07      	bge.n	8022e92 <__swhatbuf_r+0x22>
 8022e82:	2300      	movs	r3, #0
 8022e84:	602b      	str	r3, [r5, #0]
 8022e86:	89b3      	ldrh	r3, [r6, #12]
 8022e88:	061a      	lsls	r2, r3, #24
 8022e8a:	d410      	bmi.n	8022eae <__swhatbuf_r+0x3e>
 8022e8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8022e90:	e00e      	b.n	8022eb0 <__swhatbuf_r+0x40>
 8022e92:	466a      	mov	r2, sp
 8022e94:	f000 f8d8 	bl	8023048 <_fstat_r>
 8022e98:	2800      	cmp	r0, #0
 8022e9a:	dbf2      	blt.n	8022e82 <__swhatbuf_r+0x12>
 8022e9c:	9a01      	ldr	r2, [sp, #4]
 8022e9e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8022ea2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8022ea6:	425a      	negs	r2, r3
 8022ea8:	415a      	adcs	r2, r3
 8022eaa:	602a      	str	r2, [r5, #0]
 8022eac:	e7ee      	b.n	8022e8c <__swhatbuf_r+0x1c>
 8022eae:	2340      	movs	r3, #64	; 0x40
 8022eb0:	2000      	movs	r0, #0
 8022eb2:	6023      	str	r3, [r4, #0]
 8022eb4:	b016      	add	sp, #88	; 0x58
 8022eb6:	bd70      	pop	{r4, r5, r6, pc}

08022eb8 <__smakebuf_r>:
 8022eb8:	898b      	ldrh	r3, [r1, #12]
 8022eba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8022ebc:	079d      	lsls	r5, r3, #30
 8022ebe:	4606      	mov	r6, r0
 8022ec0:	460c      	mov	r4, r1
 8022ec2:	d507      	bpl.n	8022ed4 <__smakebuf_r+0x1c>
 8022ec4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8022ec8:	6023      	str	r3, [r4, #0]
 8022eca:	6123      	str	r3, [r4, #16]
 8022ecc:	2301      	movs	r3, #1
 8022ece:	6163      	str	r3, [r4, #20]
 8022ed0:	b002      	add	sp, #8
 8022ed2:	bd70      	pop	{r4, r5, r6, pc}
 8022ed4:	ab01      	add	r3, sp, #4
 8022ed6:	466a      	mov	r2, sp
 8022ed8:	f7ff ffca 	bl	8022e70 <__swhatbuf_r>
 8022edc:	9900      	ldr	r1, [sp, #0]
 8022ede:	4605      	mov	r5, r0
 8022ee0:	4630      	mov	r0, r6
 8022ee2:	f7ff fa8d 	bl	8022400 <_malloc_r>
 8022ee6:	b948      	cbnz	r0, 8022efc <__smakebuf_r+0x44>
 8022ee8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8022eec:	059a      	lsls	r2, r3, #22
 8022eee:	d4ef      	bmi.n	8022ed0 <__smakebuf_r+0x18>
 8022ef0:	f023 0303 	bic.w	r3, r3, #3
 8022ef4:	f043 0302 	orr.w	r3, r3, #2
 8022ef8:	81a3      	strh	r3, [r4, #12]
 8022efa:	e7e3      	b.n	8022ec4 <__smakebuf_r+0xc>
 8022efc:	4b0d      	ldr	r3, [pc, #52]	; (8022f34 <__smakebuf_r+0x7c>)
 8022efe:	62b3      	str	r3, [r6, #40]	; 0x28
 8022f00:	89a3      	ldrh	r3, [r4, #12]
 8022f02:	6020      	str	r0, [r4, #0]
 8022f04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8022f08:	81a3      	strh	r3, [r4, #12]
 8022f0a:	9b00      	ldr	r3, [sp, #0]
 8022f0c:	6163      	str	r3, [r4, #20]
 8022f0e:	9b01      	ldr	r3, [sp, #4]
 8022f10:	6120      	str	r0, [r4, #16]
 8022f12:	b15b      	cbz	r3, 8022f2c <__smakebuf_r+0x74>
 8022f14:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8022f18:	4630      	mov	r0, r6
 8022f1a:	f000 f8a7 	bl	802306c <_isatty_r>
 8022f1e:	b128      	cbz	r0, 8022f2c <__smakebuf_r+0x74>
 8022f20:	89a3      	ldrh	r3, [r4, #12]
 8022f22:	f023 0303 	bic.w	r3, r3, #3
 8022f26:	f043 0301 	orr.w	r3, r3, #1
 8022f2a:	81a3      	strh	r3, [r4, #12]
 8022f2c:	89a0      	ldrh	r0, [r4, #12]
 8022f2e:	4305      	orrs	r5, r0
 8022f30:	81a5      	strh	r5, [r4, #12]
 8022f32:	e7cd      	b.n	8022ed0 <__smakebuf_r+0x18>
 8022f34:	080210e1 	.word	0x080210e1

08022f38 <__malloc_lock>:
 8022f38:	4801      	ldr	r0, [pc, #4]	; (8022f40 <__malloc_lock+0x8>)
 8022f3a:	f7fe bd28 	b.w	802198e <__retarget_lock_acquire_recursive>
 8022f3e:	bf00      	nop
 8022f40:	24007f8c 	.word	0x24007f8c

08022f44 <__malloc_unlock>:
 8022f44:	4801      	ldr	r0, [pc, #4]	; (8022f4c <__malloc_unlock+0x8>)
 8022f46:	f7fe bd23 	b.w	8021990 <__retarget_lock_release_recursive>
 8022f4a:	bf00      	nop
 8022f4c:	24007f8c 	.word	0x24007f8c

08022f50 <_realloc_r>:
 8022f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022f52:	4607      	mov	r7, r0
 8022f54:	4614      	mov	r4, r2
 8022f56:	460e      	mov	r6, r1
 8022f58:	b921      	cbnz	r1, 8022f64 <_realloc_r+0x14>
 8022f5a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8022f5e:	4611      	mov	r1, r2
 8022f60:	f7ff ba4e 	b.w	8022400 <_malloc_r>
 8022f64:	b922      	cbnz	r2, 8022f70 <_realloc_r+0x20>
 8022f66:	f7ff f9fb 	bl	8022360 <_free_r>
 8022f6a:	4625      	mov	r5, r4
 8022f6c:	4628      	mov	r0, r5
 8022f6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8022f70:	f000 f88c 	bl	802308c <_malloc_usable_size_r>
 8022f74:	42a0      	cmp	r0, r4
 8022f76:	d20f      	bcs.n	8022f98 <_realloc_r+0x48>
 8022f78:	4621      	mov	r1, r4
 8022f7a:	4638      	mov	r0, r7
 8022f7c:	f7ff fa40 	bl	8022400 <_malloc_r>
 8022f80:	4605      	mov	r5, r0
 8022f82:	2800      	cmp	r0, #0
 8022f84:	d0f2      	beq.n	8022f6c <_realloc_r+0x1c>
 8022f86:	4631      	mov	r1, r6
 8022f88:	4622      	mov	r2, r4
 8022f8a:	f7fb fcc5 	bl	801e918 <memcpy>
 8022f8e:	4631      	mov	r1, r6
 8022f90:	4638      	mov	r0, r7
 8022f92:	f7ff f9e5 	bl	8022360 <_free_r>
 8022f96:	e7e9      	b.n	8022f6c <_realloc_r+0x1c>
 8022f98:	4635      	mov	r5, r6
 8022f9a:	e7e7      	b.n	8022f6c <_realloc_r+0x1c>

08022f9c <_read_r>:
 8022f9c:	b538      	push	{r3, r4, r5, lr}
 8022f9e:	4d07      	ldr	r5, [pc, #28]	; (8022fbc <_read_r+0x20>)
 8022fa0:	4604      	mov	r4, r0
 8022fa2:	4608      	mov	r0, r1
 8022fa4:	4611      	mov	r1, r2
 8022fa6:	2200      	movs	r2, #0
 8022fa8:	602a      	str	r2, [r5, #0]
 8022faa:	461a      	mov	r2, r3
 8022fac:	f7df fb12 	bl	80025d4 <_read>
 8022fb0:	1c43      	adds	r3, r0, #1
 8022fb2:	d102      	bne.n	8022fba <_read_r+0x1e>
 8022fb4:	682b      	ldr	r3, [r5, #0]
 8022fb6:	b103      	cbz	r3, 8022fba <_read_r+0x1e>
 8022fb8:	6023      	str	r3, [r4, #0]
 8022fba:	bd38      	pop	{r3, r4, r5, pc}
 8022fbc:	24007f80 	.word	0x24007f80

08022fc0 <_raise_r>:
 8022fc0:	291f      	cmp	r1, #31
 8022fc2:	b538      	push	{r3, r4, r5, lr}
 8022fc4:	4604      	mov	r4, r0
 8022fc6:	460d      	mov	r5, r1
 8022fc8:	d904      	bls.n	8022fd4 <_raise_r+0x14>
 8022fca:	2316      	movs	r3, #22
 8022fcc:	6003      	str	r3, [r0, #0]
 8022fce:	f04f 30ff 	mov.w	r0, #4294967295
 8022fd2:	bd38      	pop	{r3, r4, r5, pc}
 8022fd4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8022fd6:	b112      	cbz	r2, 8022fde <_raise_r+0x1e>
 8022fd8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8022fdc:	b94b      	cbnz	r3, 8022ff2 <_raise_r+0x32>
 8022fde:	4620      	mov	r0, r4
 8022fe0:	f000 f830 	bl	8023044 <_getpid_r>
 8022fe4:	462a      	mov	r2, r5
 8022fe6:	4601      	mov	r1, r0
 8022fe8:	4620      	mov	r0, r4
 8022fea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8022fee:	f000 b817 	b.w	8023020 <_kill_r>
 8022ff2:	2b01      	cmp	r3, #1
 8022ff4:	d00a      	beq.n	802300c <_raise_r+0x4c>
 8022ff6:	1c59      	adds	r1, r3, #1
 8022ff8:	d103      	bne.n	8023002 <_raise_r+0x42>
 8022ffa:	2316      	movs	r3, #22
 8022ffc:	6003      	str	r3, [r0, #0]
 8022ffe:	2001      	movs	r0, #1
 8023000:	e7e7      	b.n	8022fd2 <_raise_r+0x12>
 8023002:	2400      	movs	r4, #0
 8023004:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8023008:	4628      	mov	r0, r5
 802300a:	4798      	blx	r3
 802300c:	2000      	movs	r0, #0
 802300e:	e7e0      	b.n	8022fd2 <_raise_r+0x12>

08023010 <raise>:
 8023010:	4b02      	ldr	r3, [pc, #8]	; (802301c <raise+0xc>)
 8023012:	4601      	mov	r1, r0
 8023014:	6818      	ldr	r0, [r3, #0]
 8023016:	f7ff bfd3 	b.w	8022fc0 <_raise_r>
 802301a:	bf00      	nop
 802301c:	24000304 	.word	0x24000304

08023020 <_kill_r>:
 8023020:	b538      	push	{r3, r4, r5, lr}
 8023022:	4d07      	ldr	r5, [pc, #28]	; (8023040 <_kill_r+0x20>)
 8023024:	2300      	movs	r3, #0
 8023026:	4604      	mov	r4, r0
 8023028:	4608      	mov	r0, r1
 802302a:	4611      	mov	r1, r2
 802302c:	602b      	str	r3, [r5, #0]
 802302e:	f7df fab5 	bl	800259c <_kill>
 8023032:	1c43      	adds	r3, r0, #1
 8023034:	d102      	bne.n	802303c <_kill_r+0x1c>
 8023036:	682b      	ldr	r3, [r5, #0]
 8023038:	b103      	cbz	r3, 802303c <_kill_r+0x1c>
 802303a:	6023      	str	r3, [r4, #0]
 802303c:	bd38      	pop	{r3, r4, r5, pc}
 802303e:	bf00      	nop
 8023040:	24007f80 	.word	0x24007f80

08023044 <_getpid_r>:
 8023044:	f7df baa2 	b.w	800258c <_getpid>

08023048 <_fstat_r>:
 8023048:	b538      	push	{r3, r4, r5, lr}
 802304a:	4d07      	ldr	r5, [pc, #28]	; (8023068 <_fstat_r+0x20>)
 802304c:	2300      	movs	r3, #0
 802304e:	4604      	mov	r4, r0
 8023050:	4608      	mov	r0, r1
 8023052:	4611      	mov	r1, r2
 8023054:	602b      	str	r3, [r5, #0]
 8023056:	f7df fb02 	bl	800265e <_fstat>
 802305a:	1c43      	adds	r3, r0, #1
 802305c:	d102      	bne.n	8023064 <_fstat_r+0x1c>
 802305e:	682b      	ldr	r3, [r5, #0]
 8023060:	b103      	cbz	r3, 8023064 <_fstat_r+0x1c>
 8023062:	6023      	str	r3, [r4, #0]
 8023064:	bd38      	pop	{r3, r4, r5, pc}
 8023066:	bf00      	nop
 8023068:	24007f80 	.word	0x24007f80

0802306c <_isatty_r>:
 802306c:	b538      	push	{r3, r4, r5, lr}
 802306e:	4d06      	ldr	r5, [pc, #24]	; (8023088 <_isatty_r+0x1c>)
 8023070:	2300      	movs	r3, #0
 8023072:	4604      	mov	r4, r0
 8023074:	4608      	mov	r0, r1
 8023076:	602b      	str	r3, [r5, #0]
 8023078:	f7df fb01 	bl	800267e <_isatty>
 802307c:	1c43      	adds	r3, r0, #1
 802307e:	d102      	bne.n	8023086 <_isatty_r+0x1a>
 8023080:	682b      	ldr	r3, [r5, #0]
 8023082:	b103      	cbz	r3, 8023086 <_isatty_r+0x1a>
 8023084:	6023      	str	r3, [r4, #0]
 8023086:	bd38      	pop	{r3, r4, r5, pc}
 8023088:	24007f80 	.word	0x24007f80

0802308c <_malloc_usable_size_r>:
 802308c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8023090:	1f18      	subs	r0, r3, #4
 8023092:	2b00      	cmp	r3, #0
 8023094:	bfbc      	itt	lt
 8023096:	580b      	ldrlt	r3, [r1, r0]
 8023098:	18c0      	addlt	r0, r0, r3
 802309a:	4770      	bx	lr

0802309c <round>:
 802309c:	ee10 1a90 	vmov	r1, s1
 80230a0:	f3c1 500a 	ubfx	r0, r1, #20, #11
 80230a4:	f2a0 32ff 	subw	r2, r0, #1023	; 0x3ff
 80230a8:	2a13      	cmp	r2, #19
 80230aa:	b510      	push	{r4, lr}
 80230ac:	ee10 3a10 	vmov	r3, s0
 80230b0:	dc19      	bgt.n	80230e6 <round+0x4a>
 80230b2:	2a00      	cmp	r2, #0
 80230b4:	da09      	bge.n	80230ca <round+0x2e>
 80230b6:	3201      	adds	r2, #1
 80230b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80230bc:	d103      	bne.n	80230c6 <round+0x2a>
 80230be:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 80230c2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80230c6:	2000      	movs	r0, #0
 80230c8:	e027      	b.n	802311a <round+0x7e>
 80230ca:	4816      	ldr	r0, [pc, #88]	; (8023124 <round+0x88>)
 80230cc:	4110      	asrs	r0, r2
 80230ce:	ea01 0400 	and.w	r4, r1, r0
 80230d2:	4323      	orrs	r3, r4
 80230d4:	d00e      	beq.n	80230f4 <round+0x58>
 80230d6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80230da:	fa43 f202 	asr.w	r2, r3, r2
 80230de:	4411      	add	r1, r2
 80230e0:	ea21 0100 	bic.w	r1, r1, r0
 80230e4:	e7ef      	b.n	80230c6 <round+0x2a>
 80230e6:	2a33      	cmp	r2, #51	; 0x33
 80230e8:	dd05      	ble.n	80230f6 <round+0x5a>
 80230ea:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80230ee:	d101      	bne.n	80230f4 <round+0x58>
 80230f0:	ee30 0b00 	vadd.f64	d0, d0, d0
 80230f4:	bd10      	pop	{r4, pc}
 80230f6:	f2a0 4413 	subw	r4, r0, #1043	; 0x413
 80230fa:	f04f 30ff 	mov.w	r0, #4294967295
 80230fe:	fa20 f404 	lsr.w	r4, r0, r4
 8023102:	4223      	tst	r3, r4
 8023104:	d0f6      	beq.n	80230f4 <round+0x58>
 8023106:	2001      	movs	r0, #1
 8023108:	f1c2 0233 	rsb	r2, r2, #51	; 0x33
 802310c:	fa00 f202 	lsl.w	r2, r0, r2
 8023110:	189b      	adds	r3, r3, r2
 8023112:	bf28      	it	cs
 8023114:	1809      	addcs	r1, r1, r0
 8023116:	ea23 0004 	bic.w	r0, r3, r4
 802311a:	460b      	mov	r3, r1
 802311c:	4602      	mov	r2, r0
 802311e:	ec43 2b10 	vmov	d0, r2, r3
 8023122:	e7e7      	b.n	80230f4 <round+0x58>
 8023124:	000fffff 	.word	0x000fffff

08023128 <_init>:
 8023128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802312a:	bf00      	nop
 802312c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802312e:	bc08      	pop	{r3}
 8023130:	469e      	mov	lr, r3
 8023132:	4770      	bx	lr

08023134 <_fini>:
 8023134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023136:	bf00      	nop
 8023138:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802313a:	bc08      	pop	{r3}
 802313c:	469e      	mov	lr, r3
 802313e:	4770      	bx	lr
