
Compensation_Coil.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00022d94  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000044f0  08023038  08023038  00033038  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08027528  08027528  00037528  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08027530  08027530  00037530  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08027534  08027534  00037534  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000004cc  24000000  08027538  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00007bec  240004cc  08027a04  000404cc  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  240080b8  08027a04  000480b8  2**0
                  ALLOC
  9 .lwip_sec     000419d0  30000000  08027a04  00050000  2**2
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  000404cc  2**0
                  CONTENTS, READONLY
 11 .comment      00000043  00000000  00000000  000404fa  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003dc2c  00000000  00000000  0004053d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00008d1d  00000000  00000000  0007e169  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002c58  00000000  00000000  00086e88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00002358  00000000  00000000  00089ae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0004c02f  00000000  00000000  0008be38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000495c7  00000000  00000000  000d7e67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0018d82d  00000000  00000000  0012142e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_frame  0000cbcc  00000000  00000000  002aec5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000055  00000000  00000000  002bb828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240004cc 	.word	0x240004cc
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0802301c 	.word	0x0802301c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240004d0 	.word	0x240004d0
 80002dc:	0802301c 	.word	0x0802301c

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr
	...

08000300 <memchr>:
 8000300:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000304:	2a10      	cmp	r2, #16
 8000306:	db2b      	blt.n	8000360 <memchr+0x60>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	d008      	beq.n	8000320 <memchr+0x20>
 800030e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000312:	3a01      	subs	r2, #1
 8000314:	428b      	cmp	r3, r1
 8000316:	d02d      	beq.n	8000374 <memchr+0x74>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	b342      	cbz	r2, 8000370 <memchr+0x70>
 800031e:	d1f6      	bne.n	800030e <memchr+0xe>
 8000320:	b4f0      	push	{r4, r5, r6, r7}
 8000322:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000326:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800032a:	f022 0407 	bic.w	r4, r2, #7
 800032e:	f07f 0700 	mvns.w	r7, #0
 8000332:	2300      	movs	r3, #0
 8000334:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000338:	3c08      	subs	r4, #8
 800033a:	ea85 0501 	eor.w	r5, r5, r1
 800033e:	ea86 0601 	eor.w	r6, r6, r1
 8000342:	fa85 f547 	uadd8	r5, r5, r7
 8000346:	faa3 f587 	sel	r5, r3, r7
 800034a:	fa86 f647 	uadd8	r6, r6, r7
 800034e:	faa5 f687 	sel	r6, r5, r7
 8000352:	b98e      	cbnz	r6, 8000378 <memchr+0x78>
 8000354:	d1ee      	bne.n	8000334 <memchr+0x34>
 8000356:	bcf0      	pop	{r4, r5, r6, r7}
 8000358:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800035c:	f002 0207 	and.w	r2, r2, #7
 8000360:	b132      	cbz	r2, 8000370 <memchr+0x70>
 8000362:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000366:	3a01      	subs	r2, #1
 8000368:	ea83 0301 	eor.w	r3, r3, r1
 800036c:	b113      	cbz	r3, 8000374 <memchr+0x74>
 800036e:	d1f8      	bne.n	8000362 <memchr+0x62>
 8000370:	2000      	movs	r0, #0
 8000372:	4770      	bx	lr
 8000374:	3801      	subs	r0, #1
 8000376:	4770      	bx	lr
 8000378:	2d00      	cmp	r5, #0
 800037a:	bf06      	itte	eq
 800037c:	4635      	moveq	r5, r6
 800037e:	3803      	subeq	r0, #3
 8000380:	3807      	subne	r0, #7
 8000382:	f015 0f01 	tst.w	r5, #1
 8000386:	d107      	bne.n	8000398 <memchr+0x98>
 8000388:	3001      	adds	r0, #1
 800038a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800038e:	bf02      	ittt	eq
 8000390:	3001      	addeq	r0, #1
 8000392:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000396:	3001      	addeq	r0, #1
 8000398:	bcf0      	pop	{r4, r5, r6, r7}
 800039a:	3801      	subs	r0, #1
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop

080003a0 <strlen>:
 80003a0:	4603      	mov	r3, r0
 80003a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003a6:	2a00      	cmp	r2, #0
 80003a8:	d1fb      	bne.n	80003a2 <strlen+0x2>
 80003aa:	1a18      	subs	r0, r3, r0
 80003ac:	3801      	subs	r0, #1
 80003ae:	4770      	bx	lr

080003b0 <__aeabi_drsub>:
 80003b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003b4:	e002      	b.n	80003bc <__adddf3>
 80003b6:	bf00      	nop

080003b8 <__aeabi_dsub>:
 80003b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003bc <__adddf3>:
 80003bc:	b530      	push	{r4, r5, lr}
 80003be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003c6:	ea94 0f05 	teq	r4, r5
 80003ca:	bf08      	it	eq
 80003cc:	ea90 0f02 	teqeq	r0, r2
 80003d0:	bf1f      	itttt	ne
 80003d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e2:	f000 80e2 	beq.w	80005aa <__adddf3+0x1ee>
 80003e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ee:	bfb8      	it	lt
 80003f0:	426d      	neglt	r5, r5
 80003f2:	dd0c      	ble.n	800040e <__adddf3+0x52>
 80003f4:	442c      	add	r4, r5
 80003f6:	ea80 0202 	eor.w	r2, r0, r2
 80003fa:	ea81 0303 	eor.w	r3, r1, r3
 80003fe:	ea82 0000 	eor.w	r0, r2, r0
 8000402:	ea83 0101 	eor.w	r1, r3, r1
 8000406:	ea80 0202 	eor.w	r2, r0, r2
 800040a:	ea81 0303 	eor.w	r3, r1, r3
 800040e:	2d36      	cmp	r5, #54	; 0x36
 8000410:	bf88      	it	hi
 8000412:	bd30      	pophi	{r4, r5, pc}
 8000414:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000418:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800041c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000420:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000424:	d002      	beq.n	800042c <__adddf3+0x70>
 8000426:	4240      	negs	r0, r0
 8000428:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800042c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000430:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000434:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000438:	d002      	beq.n	8000440 <__adddf3+0x84>
 800043a:	4252      	negs	r2, r2
 800043c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000440:	ea94 0f05 	teq	r4, r5
 8000444:	f000 80a7 	beq.w	8000596 <__adddf3+0x1da>
 8000448:	f1a4 0401 	sub.w	r4, r4, #1
 800044c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000450:	db0d      	blt.n	800046e <__adddf3+0xb2>
 8000452:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000456:	fa22 f205 	lsr.w	r2, r2, r5
 800045a:	1880      	adds	r0, r0, r2
 800045c:	f141 0100 	adc.w	r1, r1, #0
 8000460:	fa03 f20e 	lsl.w	r2, r3, lr
 8000464:	1880      	adds	r0, r0, r2
 8000466:	fa43 f305 	asr.w	r3, r3, r5
 800046a:	4159      	adcs	r1, r3
 800046c:	e00e      	b.n	800048c <__adddf3+0xd0>
 800046e:	f1a5 0520 	sub.w	r5, r5, #32
 8000472:	f10e 0e20 	add.w	lr, lr, #32
 8000476:	2a01      	cmp	r2, #1
 8000478:	fa03 fc0e 	lsl.w	ip, r3, lr
 800047c:	bf28      	it	cs
 800047e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000482:	fa43 f305 	asr.w	r3, r3, r5
 8000486:	18c0      	adds	r0, r0, r3
 8000488:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800048c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000490:	d507      	bpl.n	80004a2 <__adddf3+0xe6>
 8000492:	f04f 0e00 	mov.w	lr, #0
 8000496:	f1dc 0c00 	rsbs	ip, ip, #0
 800049a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800049e:	eb6e 0101 	sbc.w	r1, lr, r1
 80004a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80004a6:	d31b      	bcc.n	80004e0 <__adddf3+0x124>
 80004a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004ac:	d30c      	bcc.n	80004c8 <__adddf3+0x10c>
 80004ae:	0849      	lsrs	r1, r1, #1
 80004b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004b8:	f104 0401 	add.w	r4, r4, #1
 80004bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004c4:	f080 809a 	bcs.w	80005fc <__adddf3+0x240>
 80004c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004cc:	bf08      	it	eq
 80004ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004d2:	f150 0000 	adcs.w	r0, r0, #0
 80004d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004da:	ea41 0105 	orr.w	r1, r1, r5
 80004de:	bd30      	pop	{r4, r5, pc}
 80004e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004e4:	4140      	adcs	r0, r0
 80004e6:	eb41 0101 	adc.w	r1, r1, r1
 80004ea:	3c01      	subs	r4, #1
 80004ec:	bf28      	it	cs
 80004ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004f2:	d2e9      	bcs.n	80004c8 <__adddf3+0x10c>
 80004f4:	f091 0f00 	teq	r1, #0
 80004f8:	bf04      	itt	eq
 80004fa:	4601      	moveq	r1, r0
 80004fc:	2000      	moveq	r0, #0
 80004fe:	fab1 f381 	clz	r3, r1
 8000502:	bf08      	it	eq
 8000504:	3320      	addeq	r3, #32
 8000506:	f1a3 030b 	sub.w	r3, r3, #11
 800050a:	f1b3 0220 	subs.w	r2, r3, #32
 800050e:	da0c      	bge.n	800052a <__adddf3+0x16e>
 8000510:	320c      	adds	r2, #12
 8000512:	dd08      	ble.n	8000526 <__adddf3+0x16a>
 8000514:	f102 0c14 	add.w	ip, r2, #20
 8000518:	f1c2 020c 	rsb	r2, r2, #12
 800051c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000520:	fa21 f102 	lsr.w	r1, r1, r2
 8000524:	e00c      	b.n	8000540 <__adddf3+0x184>
 8000526:	f102 0214 	add.w	r2, r2, #20
 800052a:	bfd8      	it	le
 800052c:	f1c2 0c20 	rsble	ip, r2, #32
 8000530:	fa01 f102 	lsl.w	r1, r1, r2
 8000534:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000538:	bfdc      	itt	le
 800053a:	ea41 010c 	orrle.w	r1, r1, ip
 800053e:	4090      	lslle	r0, r2
 8000540:	1ae4      	subs	r4, r4, r3
 8000542:	bfa2      	ittt	ge
 8000544:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000548:	4329      	orrge	r1, r5
 800054a:	bd30      	popge	{r4, r5, pc}
 800054c:	ea6f 0404 	mvn.w	r4, r4
 8000550:	3c1f      	subs	r4, #31
 8000552:	da1c      	bge.n	800058e <__adddf3+0x1d2>
 8000554:	340c      	adds	r4, #12
 8000556:	dc0e      	bgt.n	8000576 <__adddf3+0x1ba>
 8000558:	f104 0414 	add.w	r4, r4, #20
 800055c:	f1c4 0220 	rsb	r2, r4, #32
 8000560:	fa20 f004 	lsr.w	r0, r0, r4
 8000564:	fa01 f302 	lsl.w	r3, r1, r2
 8000568:	ea40 0003 	orr.w	r0, r0, r3
 800056c:	fa21 f304 	lsr.w	r3, r1, r4
 8000570:	ea45 0103 	orr.w	r1, r5, r3
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f1c4 040c 	rsb	r4, r4, #12
 800057a:	f1c4 0220 	rsb	r2, r4, #32
 800057e:	fa20 f002 	lsr.w	r0, r0, r2
 8000582:	fa01 f304 	lsl.w	r3, r1, r4
 8000586:	ea40 0003 	orr.w	r0, r0, r3
 800058a:	4629      	mov	r1, r5
 800058c:	bd30      	pop	{r4, r5, pc}
 800058e:	fa21 f004 	lsr.w	r0, r1, r4
 8000592:	4629      	mov	r1, r5
 8000594:	bd30      	pop	{r4, r5, pc}
 8000596:	f094 0f00 	teq	r4, #0
 800059a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800059e:	bf06      	itte	eq
 80005a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80005a4:	3401      	addeq	r4, #1
 80005a6:	3d01      	subne	r5, #1
 80005a8:	e74e      	b.n	8000448 <__adddf3+0x8c>
 80005aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ae:	bf18      	it	ne
 80005b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005b4:	d029      	beq.n	800060a <__adddf3+0x24e>
 80005b6:	ea94 0f05 	teq	r4, r5
 80005ba:	bf08      	it	eq
 80005bc:	ea90 0f02 	teqeq	r0, r2
 80005c0:	d005      	beq.n	80005ce <__adddf3+0x212>
 80005c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005c6:	bf04      	itt	eq
 80005c8:	4619      	moveq	r1, r3
 80005ca:	4610      	moveq	r0, r2
 80005cc:	bd30      	pop	{r4, r5, pc}
 80005ce:	ea91 0f03 	teq	r1, r3
 80005d2:	bf1e      	ittt	ne
 80005d4:	2100      	movne	r1, #0
 80005d6:	2000      	movne	r0, #0
 80005d8:	bd30      	popne	{r4, r5, pc}
 80005da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005de:	d105      	bne.n	80005ec <__adddf3+0x230>
 80005e0:	0040      	lsls	r0, r0, #1
 80005e2:	4149      	adcs	r1, r1
 80005e4:	bf28      	it	cs
 80005e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ea:	bd30      	pop	{r4, r5, pc}
 80005ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005f0:	bf3c      	itt	cc
 80005f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005f6:	bd30      	popcc	{r4, r5, pc}
 80005f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000600:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000604:	f04f 0000 	mov.w	r0, #0
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800060e:	bf1a      	itte	ne
 8000610:	4619      	movne	r1, r3
 8000612:	4610      	movne	r0, r2
 8000614:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000618:	bf1c      	itt	ne
 800061a:	460b      	movne	r3, r1
 800061c:	4602      	movne	r2, r0
 800061e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000622:	bf06      	itte	eq
 8000624:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000628:	ea91 0f03 	teqeq	r1, r3
 800062c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	bf00      	nop

08000634 <__aeabi_ui2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000648:	f04f 0500 	mov.w	r5, #0
 800064c:	f04f 0100 	mov.w	r1, #0
 8000650:	e750      	b.n	80004f4 <__adddf3+0x138>
 8000652:	bf00      	nop

08000654 <__aeabi_i2d>:
 8000654:	f090 0f00 	teq	r0, #0
 8000658:	bf04      	itt	eq
 800065a:	2100      	moveq	r1, #0
 800065c:	4770      	bxeq	lr
 800065e:	b530      	push	{r4, r5, lr}
 8000660:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000664:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000668:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800066c:	bf48      	it	mi
 800066e:	4240      	negmi	r0, r0
 8000670:	f04f 0100 	mov.w	r1, #0
 8000674:	e73e      	b.n	80004f4 <__adddf3+0x138>
 8000676:	bf00      	nop

08000678 <__aeabi_f2d>:
 8000678:	0042      	lsls	r2, r0, #1
 800067a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800067e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000682:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000686:	bf1f      	itttt	ne
 8000688:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800068c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000690:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000694:	4770      	bxne	lr
 8000696:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800069a:	bf08      	it	eq
 800069c:	4770      	bxeq	lr
 800069e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80006a2:	bf04      	itt	eq
 80006a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	e71c      	b.n	80004f4 <__adddf3+0x138>
 80006ba:	bf00      	nop

080006bc <__aeabi_ul2d>:
 80006bc:	ea50 0201 	orrs.w	r2, r0, r1
 80006c0:	bf08      	it	eq
 80006c2:	4770      	bxeq	lr
 80006c4:	b530      	push	{r4, r5, lr}
 80006c6:	f04f 0500 	mov.w	r5, #0
 80006ca:	e00a      	b.n	80006e2 <__aeabi_l2d+0x16>

080006cc <__aeabi_l2d>:
 80006cc:	ea50 0201 	orrs.w	r2, r0, r1
 80006d0:	bf08      	it	eq
 80006d2:	4770      	bxeq	lr
 80006d4:	b530      	push	{r4, r5, lr}
 80006d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006da:	d502      	bpl.n	80006e2 <__aeabi_l2d+0x16>
 80006dc:	4240      	negs	r0, r0
 80006de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ee:	f43f aed8 	beq.w	80004a2 <__adddf3+0xe6>
 80006f2:	f04f 0203 	mov.w	r2, #3
 80006f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006fa:	bf18      	it	ne
 80006fc:	3203      	addne	r2, #3
 80006fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000702:	bf18      	it	ne
 8000704:	3203      	addne	r2, #3
 8000706:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800070a:	f1c2 0320 	rsb	r3, r2, #32
 800070e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000712:	fa20 f002 	lsr.w	r0, r0, r2
 8000716:	fa01 fe03 	lsl.w	lr, r1, r3
 800071a:	ea40 000e 	orr.w	r0, r0, lr
 800071e:	fa21 f102 	lsr.w	r1, r1, r2
 8000722:	4414      	add	r4, r2
 8000724:	e6bd      	b.n	80004a2 <__adddf3+0xe6>
 8000726:	bf00      	nop

08000728 <__aeabi_uldivmod>:
 8000728:	b953      	cbnz	r3, 8000740 <__aeabi_uldivmod+0x18>
 800072a:	b94a      	cbnz	r2, 8000740 <__aeabi_uldivmod+0x18>
 800072c:	2900      	cmp	r1, #0
 800072e:	bf08      	it	eq
 8000730:	2800      	cmpeq	r0, #0
 8000732:	bf1c      	itt	ne
 8000734:	f04f 31ff 	movne.w	r1, #4294967295
 8000738:	f04f 30ff 	movne.w	r0, #4294967295
 800073c:	f000 b9a8 	b.w	8000a90 <__aeabi_idiv0>
 8000740:	f1ad 0c08 	sub.w	ip, sp, #8
 8000744:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000748:	f000 f83e 	bl	80007c8 <__udivmoddi4>
 800074c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000750:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000754:	b004      	add	sp, #16
 8000756:	4770      	bx	lr

08000758 <__aeabi_d2lz>:
 8000758:	b508      	push	{r3, lr}
 800075a:	4602      	mov	r2, r0
 800075c:	460b      	mov	r3, r1
 800075e:	ec43 2b17 	vmov	d7, r2, r3
 8000762:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000766:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800076a:	d403      	bmi.n	8000774 <__aeabi_d2lz+0x1c>
 800076c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000770:	f000 b80a 	b.w	8000788 <__aeabi_d2ulz>
 8000774:	eeb1 7b47 	vneg.f64	d7, d7
 8000778:	ec51 0b17 	vmov	r0, r1, d7
 800077c:	f000 f804 	bl	8000788 <__aeabi_d2ulz>
 8000780:	4240      	negs	r0, r0
 8000782:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000786:	bd08      	pop	{r3, pc}

08000788 <__aeabi_d2ulz>:
 8000788:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80007b8 <__aeabi_d2ulz+0x30>
 800078c:	ec41 0b17 	vmov	d7, r0, r1
 8000790:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80007c0 <__aeabi_d2ulz+0x38>
 8000794:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000798:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800079c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80007a0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80007a4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80007a8:	ee16 1a10 	vmov	r1, s12
 80007ac:	ee17 0a90 	vmov	r0, s15
 80007b0:	4770      	bx	lr
 80007b2:	bf00      	nop
 80007b4:	f3af 8000 	nop.w
 80007b8:	00000000 	.word	0x00000000
 80007bc:	3df00000 	.word	0x3df00000
 80007c0:	00000000 	.word	0x00000000
 80007c4:	41f00000 	.word	0x41f00000

080007c8 <__udivmoddi4>:
 80007c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007cc:	9e08      	ldr	r6, [sp, #32]
 80007ce:	460d      	mov	r5, r1
 80007d0:	4604      	mov	r4, r0
 80007d2:	460f      	mov	r7, r1
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d14a      	bne.n	800086e <__udivmoddi4+0xa6>
 80007d8:	428a      	cmp	r2, r1
 80007da:	4694      	mov	ip, r2
 80007dc:	d965      	bls.n	80008aa <__udivmoddi4+0xe2>
 80007de:	fab2 f382 	clz	r3, r2
 80007e2:	b143      	cbz	r3, 80007f6 <__udivmoddi4+0x2e>
 80007e4:	fa02 fc03 	lsl.w	ip, r2, r3
 80007e8:	f1c3 0220 	rsb	r2, r3, #32
 80007ec:	409f      	lsls	r7, r3
 80007ee:	fa20 f202 	lsr.w	r2, r0, r2
 80007f2:	4317      	orrs	r7, r2
 80007f4:	409c      	lsls	r4, r3
 80007f6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80007fa:	fa1f f58c 	uxth.w	r5, ip
 80007fe:	fbb7 f1fe 	udiv	r1, r7, lr
 8000802:	0c22      	lsrs	r2, r4, #16
 8000804:	fb0e 7711 	mls	r7, lr, r1, r7
 8000808:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800080c:	fb01 f005 	mul.w	r0, r1, r5
 8000810:	4290      	cmp	r0, r2
 8000812:	d90a      	bls.n	800082a <__udivmoddi4+0x62>
 8000814:	eb1c 0202 	adds.w	r2, ip, r2
 8000818:	f101 37ff 	add.w	r7, r1, #4294967295
 800081c:	f080 811c 	bcs.w	8000a58 <__udivmoddi4+0x290>
 8000820:	4290      	cmp	r0, r2
 8000822:	f240 8119 	bls.w	8000a58 <__udivmoddi4+0x290>
 8000826:	3902      	subs	r1, #2
 8000828:	4462      	add	r2, ip
 800082a:	1a12      	subs	r2, r2, r0
 800082c:	b2a4      	uxth	r4, r4
 800082e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000832:	fb0e 2210 	mls	r2, lr, r0, r2
 8000836:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800083a:	fb00 f505 	mul.w	r5, r0, r5
 800083e:	42a5      	cmp	r5, r4
 8000840:	d90a      	bls.n	8000858 <__udivmoddi4+0x90>
 8000842:	eb1c 0404 	adds.w	r4, ip, r4
 8000846:	f100 32ff 	add.w	r2, r0, #4294967295
 800084a:	f080 8107 	bcs.w	8000a5c <__udivmoddi4+0x294>
 800084e:	42a5      	cmp	r5, r4
 8000850:	f240 8104 	bls.w	8000a5c <__udivmoddi4+0x294>
 8000854:	4464      	add	r4, ip
 8000856:	3802      	subs	r0, #2
 8000858:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800085c:	1b64      	subs	r4, r4, r5
 800085e:	2100      	movs	r1, #0
 8000860:	b11e      	cbz	r6, 800086a <__udivmoddi4+0xa2>
 8000862:	40dc      	lsrs	r4, r3
 8000864:	2300      	movs	r3, #0
 8000866:	e9c6 4300 	strd	r4, r3, [r6]
 800086a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800086e:	428b      	cmp	r3, r1
 8000870:	d908      	bls.n	8000884 <__udivmoddi4+0xbc>
 8000872:	2e00      	cmp	r6, #0
 8000874:	f000 80ed 	beq.w	8000a52 <__udivmoddi4+0x28a>
 8000878:	2100      	movs	r1, #0
 800087a:	e9c6 0500 	strd	r0, r5, [r6]
 800087e:	4608      	mov	r0, r1
 8000880:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000884:	fab3 f183 	clz	r1, r3
 8000888:	2900      	cmp	r1, #0
 800088a:	d149      	bne.n	8000920 <__udivmoddi4+0x158>
 800088c:	42ab      	cmp	r3, r5
 800088e:	d302      	bcc.n	8000896 <__udivmoddi4+0xce>
 8000890:	4282      	cmp	r2, r0
 8000892:	f200 80f8 	bhi.w	8000a86 <__udivmoddi4+0x2be>
 8000896:	1a84      	subs	r4, r0, r2
 8000898:	eb65 0203 	sbc.w	r2, r5, r3
 800089c:	2001      	movs	r0, #1
 800089e:	4617      	mov	r7, r2
 80008a0:	2e00      	cmp	r6, #0
 80008a2:	d0e2      	beq.n	800086a <__udivmoddi4+0xa2>
 80008a4:	e9c6 4700 	strd	r4, r7, [r6]
 80008a8:	e7df      	b.n	800086a <__udivmoddi4+0xa2>
 80008aa:	b902      	cbnz	r2, 80008ae <__udivmoddi4+0xe6>
 80008ac:	deff      	udf	#255	; 0xff
 80008ae:	fab2 f382 	clz	r3, r2
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	f040 8090 	bne.w	80009d8 <__udivmoddi4+0x210>
 80008b8:	1a8a      	subs	r2, r1, r2
 80008ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008be:	fa1f fe8c 	uxth.w	lr, ip
 80008c2:	2101      	movs	r1, #1
 80008c4:	fbb2 f5f7 	udiv	r5, r2, r7
 80008c8:	fb07 2015 	mls	r0, r7, r5, r2
 80008cc:	0c22      	lsrs	r2, r4, #16
 80008ce:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80008d2:	fb0e f005 	mul.w	r0, lr, r5
 80008d6:	4290      	cmp	r0, r2
 80008d8:	d908      	bls.n	80008ec <__udivmoddi4+0x124>
 80008da:	eb1c 0202 	adds.w	r2, ip, r2
 80008de:	f105 38ff 	add.w	r8, r5, #4294967295
 80008e2:	d202      	bcs.n	80008ea <__udivmoddi4+0x122>
 80008e4:	4290      	cmp	r0, r2
 80008e6:	f200 80cb 	bhi.w	8000a80 <__udivmoddi4+0x2b8>
 80008ea:	4645      	mov	r5, r8
 80008ec:	1a12      	subs	r2, r2, r0
 80008ee:	b2a4      	uxth	r4, r4
 80008f0:	fbb2 f0f7 	udiv	r0, r2, r7
 80008f4:	fb07 2210 	mls	r2, r7, r0, r2
 80008f8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80008fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000900:	45a6      	cmp	lr, r4
 8000902:	d908      	bls.n	8000916 <__udivmoddi4+0x14e>
 8000904:	eb1c 0404 	adds.w	r4, ip, r4
 8000908:	f100 32ff 	add.w	r2, r0, #4294967295
 800090c:	d202      	bcs.n	8000914 <__udivmoddi4+0x14c>
 800090e:	45a6      	cmp	lr, r4
 8000910:	f200 80bb 	bhi.w	8000a8a <__udivmoddi4+0x2c2>
 8000914:	4610      	mov	r0, r2
 8000916:	eba4 040e 	sub.w	r4, r4, lr
 800091a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800091e:	e79f      	b.n	8000860 <__udivmoddi4+0x98>
 8000920:	f1c1 0720 	rsb	r7, r1, #32
 8000924:	408b      	lsls	r3, r1
 8000926:	fa22 fc07 	lsr.w	ip, r2, r7
 800092a:	ea4c 0c03 	orr.w	ip, ip, r3
 800092e:	fa05 f401 	lsl.w	r4, r5, r1
 8000932:	fa20 f307 	lsr.w	r3, r0, r7
 8000936:	40fd      	lsrs	r5, r7
 8000938:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800093c:	4323      	orrs	r3, r4
 800093e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000942:	fa1f fe8c 	uxth.w	lr, ip
 8000946:	fb09 5518 	mls	r5, r9, r8, r5
 800094a:	0c1c      	lsrs	r4, r3, #16
 800094c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000950:	fb08 f50e 	mul.w	r5, r8, lr
 8000954:	42a5      	cmp	r5, r4
 8000956:	fa02 f201 	lsl.w	r2, r2, r1
 800095a:	fa00 f001 	lsl.w	r0, r0, r1
 800095e:	d90b      	bls.n	8000978 <__udivmoddi4+0x1b0>
 8000960:	eb1c 0404 	adds.w	r4, ip, r4
 8000964:	f108 3aff 	add.w	sl, r8, #4294967295
 8000968:	f080 8088 	bcs.w	8000a7c <__udivmoddi4+0x2b4>
 800096c:	42a5      	cmp	r5, r4
 800096e:	f240 8085 	bls.w	8000a7c <__udivmoddi4+0x2b4>
 8000972:	f1a8 0802 	sub.w	r8, r8, #2
 8000976:	4464      	add	r4, ip
 8000978:	1b64      	subs	r4, r4, r5
 800097a:	b29d      	uxth	r5, r3
 800097c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000980:	fb09 4413 	mls	r4, r9, r3, r4
 8000984:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000988:	fb03 fe0e 	mul.w	lr, r3, lr
 800098c:	45a6      	cmp	lr, r4
 800098e:	d908      	bls.n	80009a2 <__udivmoddi4+0x1da>
 8000990:	eb1c 0404 	adds.w	r4, ip, r4
 8000994:	f103 35ff 	add.w	r5, r3, #4294967295
 8000998:	d26c      	bcs.n	8000a74 <__udivmoddi4+0x2ac>
 800099a:	45a6      	cmp	lr, r4
 800099c:	d96a      	bls.n	8000a74 <__udivmoddi4+0x2ac>
 800099e:	3b02      	subs	r3, #2
 80009a0:	4464      	add	r4, ip
 80009a2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80009a6:	fba3 9502 	umull	r9, r5, r3, r2
 80009aa:	eba4 040e 	sub.w	r4, r4, lr
 80009ae:	42ac      	cmp	r4, r5
 80009b0:	46c8      	mov	r8, r9
 80009b2:	46ae      	mov	lr, r5
 80009b4:	d356      	bcc.n	8000a64 <__udivmoddi4+0x29c>
 80009b6:	d053      	beq.n	8000a60 <__udivmoddi4+0x298>
 80009b8:	b156      	cbz	r6, 80009d0 <__udivmoddi4+0x208>
 80009ba:	ebb0 0208 	subs.w	r2, r0, r8
 80009be:	eb64 040e 	sbc.w	r4, r4, lr
 80009c2:	fa04 f707 	lsl.w	r7, r4, r7
 80009c6:	40ca      	lsrs	r2, r1
 80009c8:	40cc      	lsrs	r4, r1
 80009ca:	4317      	orrs	r7, r2
 80009cc:	e9c6 7400 	strd	r7, r4, [r6]
 80009d0:	4618      	mov	r0, r3
 80009d2:	2100      	movs	r1, #0
 80009d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009d8:	f1c3 0120 	rsb	r1, r3, #32
 80009dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80009e0:	fa20 f201 	lsr.w	r2, r0, r1
 80009e4:	fa25 f101 	lsr.w	r1, r5, r1
 80009e8:	409d      	lsls	r5, r3
 80009ea:	432a      	orrs	r2, r5
 80009ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009f0:	fa1f fe8c 	uxth.w	lr, ip
 80009f4:	fbb1 f0f7 	udiv	r0, r1, r7
 80009f8:	fb07 1510 	mls	r5, r7, r0, r1
 80009fc:	0c11      	lsrs	r1, r2, #16
 80009fe:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000a02:	fb00 f50e 	mul.w	r5, r0, lr
 8000a06:	428d      	cmp	r5, r1
 8000a08:	fa04 f403 	lsl.w	r4, r4, r3
 8000a0c:	d908      	bls.n	8000a20 <__udivmoddi4+0x258>
 8000a0e:	eb1c 0101 	adds.w	r1, ip, r1
 8000a12:	f100 38ff 	add.w	r8, r0, #4294967295
 8000a16:	d22f      	bcs.n	8000a78 <__udivmoddi4+0x2b0>
 8000a18:	428d      	cmp	r5, r1
 8000a1a:	d92d      	bls.n	8000a78 <__udivmoddi4+0x2b0>
 8000a1c:	3802      	subs	r0, #2
 8000a1e:	4461      	add	r1, ip
 8000a20:	1b49      	subs	r1, r1, r5
 8000a22:	b292      	uxth	r2, r2
 8000a24:	fbb1 f5f7 	udiv	r5, r1, r7
 8000a28:	fb07 1115 	mls	r1, r7, r5, r1
 8000a2c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000a30:	fb05 f10e 	mul.w	r1, r5, lr
 8000a34:	4291      	cmp	r1, r2
 8000a36:	d908      	bls.n	8000a4a <__udivmoddi4+0x282>
 8000a38:	eb1c 0202 	adds.w	r2, ip, r2
 8000a3c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000a40:	d216      	bcs.n	8000a70 <__udivmoddi4+0x2a8>
 8000a42:	4291      	cmp	r1, r2
 8000a44:	d914      	bls.n	8000a70 <__udivmoddi4+0x2a8>
 8000a46:	3d02      	subs	r5, #2
 8000a48:	4462      	add	r2, ip
 8000a4a:	1a52      	subs	r2, r2, r1
 8000a4c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000a50:	e738      	b.n	80008c4 <__udivmoddi4+0xfc>
 8000a52:	4631      	mov	r1, r6
 8000a54:	4630      	mov	r0, r6
 8000a56:	e708      	b.n	800086a <__udivmoddi4+0xa2>
 8000a58:	4639      	mov	r1, r7
 8000a5a:	e6e6      	b.n	800082a <__udivmoddi4+0x62>
 8000a5c:	4610      	mov	r0, r2
 8000a5e:	e6fb      	b.n	8000858 <__udivmoddi4+0x90>
 8000a60:	4548      	cmp	r0, r9
 8000a62:	d2a9      	bcs.n	80009b8 <__udivmoddi4+0x1f0>
 8000a64:	ebb9 0802 	subs.w	r8, r9, r2
 8000a68:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000a6c:	3b01      	subs	r3, #1
 8000a6e:	e7a3      	b.n	80009b8 <__udivmoddi4+0x1f0>
 8000a70:	4645      	mov	r5, r8
 8000a72:	e7ea      	b.n	8000a4a <__udivmoddi4+0x282>
 8000a74:	462b      	mov	r3, r5
 8000a76:	e794      	b.n	80009a2 <__udivmoddi4+0x1da>
 8000a78:	4640      	mov	r0, r8
 8000a7a:	e7d1      	b.n	8000a20 <__udivmoddi4+0x258>
 8000a7c:	46d0      	mov	r8, sl
 8000a7e:	e77b      	b.n	8000978 <__udivmoddi4+0x1b0>
 8000a80:	3d02      	subs	r5, #2
 8000a82:	4462      	add	r2, ip
 8000a84:	e732      	b.n	80008ec <__udivmoddi4+0x124>
 8000a86:	4608      	mov	r0, r1
 8000a88:	e70a      	b.n	80008a0 <__udivmoddi4+0xd8>
 8000a8a:	4464      	add	r4, ip
 8000a8c:	3802      	subs	r0, #2
 8000a8e:	e742      	b.n	8000916 <__udivmoddi4+0x14e>

08000a90 <__aeabi_idiv0>:
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop

08000a94 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000a94:	b480      	push	{r7}
 8000a96:	b085      	sub	sp, #20
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	60f8      	str	r0, [r7, #12]
 8000a9c:	60b9      	str	r1, [r7, #8]
 8000a9e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	4a07      	ldr	r2, [pc, #28]	; (8000ac0 <vApplicationGetIdleTaskMemory+0x2c>)
 8000aa4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000aa6:	68bb      	ldr	r3, [r7, #8]
 8000aa8:	4a06      	ldr	r2, [pc, #24]	; (8000ac4 <vApplicationGetIdleTaskMemory+0x30>)
 8000aaa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	2280      	movs	r2, #128	; 0x80
 8000ab0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000ab2:	bf00      	nop
 8000ab4:	3714      	adds	r7, #20
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abc:	4770      	bx	lr
 8000abe:	bf00      	nop
 8000ac0:	240004e8 	.word	0x240004e8
 8000ac4:	2400053c 	.word	0x2400053c

08000ac8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ac8:	b5b0      	push	{r4, r5, r7, lr}
 8000aca:	b08a      	sub	sp, #40	; 0x28
 8000acc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000ace:	f001 fb5b 	bl	8002188 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000ad2:	4b52      	ldr	r3, [pc, #328]	; (8000c1c <main+0x154>)
 8000ad4:	695b      	ldr	r3, [r3, #20]
 8000ad6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d11b      	bne.n	8000b16 <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000ade:	f3bf 8f4f 	dsb	sy
}
 8000ae2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000ae4:	f3bf 8f6f 	isb	sy
}
 8000ae8:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000aea:	4b4c      	ldr	r3, [pc, #304]	; (8000c1c <main+0x154>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000af2:	f3bf 8f4f 	dsb	sy
}
 8000af6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000af8:	f3bf 8f6f 	isb	sy
}
 8000afc:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000afe:	4b47      	ldr	r3, [pc, #284]	; (8000c1c <main+0x154>)
 8000b00:	695b      	ldr	r3, [r3, #20]
 8000b02:	4a46      	ldr	r2, [pc, #280]	; (8000c1c <main+0x154>)
 8000b04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b08:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000b0a:	f3bf 8f4f 	dsb	sy
}
 8000b0e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000b10:	f3bf 8f6f 	isb	sy
}
 8000b14:	e000      	b.n	8000b18 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000b16:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000b18:	4b40      	ldr	r3, [pc, #256]	; (8000c1c <main+0x154>)
 8000b1a:	695b      	ldr	r3, [r3, #20]
 8000b1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d138      	bne.n	8000b96 <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000b24:	4b3d      	ldr	r3, [pc, #244]	; (8000c1c <main+0x154>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000b2c:	f3bf 8f4f 	dsb	sy
}
 8000b30:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000b32:	4b3a      	ldr	r3, [pc, #232]	; (8000c1c <main+0x154>)
 8000b34:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000b38:	627b      	str	r3, [r7, #36]	; 0x24

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b3c:	0b5b      	lsrs	r3, r3, #13
 8000b3e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000b42:	623b      	str	r3, [r7, #32]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b46:	08db      	lsrs	r3, r3, #3
 8000b48:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000b4c:	61fb      	str	r3, [r7, #28]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000b4e:	6a3b      	ldr	r3, [r7, #32]
 8000b50:	015a      	lsls	r2, r3, #5
 8000b52:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000b56:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000b58:	69fa      	ldr	r2, [r7, #28]
 8000b5a:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000b5c:	492f      	ldr	r1, [pc, #188]	; (8000c1c <main+0x154>)
 8000b5e:	4313      	orrs	r3, r2
 8000b60:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000b64:	69fb      	ldr	r3, [r7, #28]
 8000b66:	1e5a      	subs	r2, r3, #1
 8000b68:	61fa      	str	r2, [r7, #28]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d1ef      	bne.n	8000b4e <main+0x86>
    } while(sets-- != 0U);
 8000b6e:	6a3b      	ldr	r3, [r7, #32]
 8000b70:	1e5a      	subs	r2, r3, #1
 8000b72:	623a      	str	r2, [r7, #32]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d1e5      	bne.n	8000b44 <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8000b78:	f3bf 8f4f 	dsb	sy
}
 8000b7c:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000b7e:	4b27      	ldr	r3, [pc, #156]	; (8000c1c <main+0x154>)
 8000b80:	695b      	ldr	r3, [r3, #20]
 8000b82:	4a26      	ldr	r2, [pc, #152]	; (8000c1c <main+0x154>)
 8000b84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b88:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000b8a:	f3bf 8f4f 	dsb	sy
}
 8000b8e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000b90:	f3bf 8f6f 	isb	sy
}
 8000b94:	e000      	b.n	8000b98 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000b96:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b98:	f001 ffd0 	bl	8002b3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b9c:	f000 f854 	bl	8000c48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ba0:	f000 f970 	bl	8000e84 <MX_GPIO_Init>
  MX_SPI4_Init();
 8000ba4:	f000 f8cc 	bl	8000d40 <MX_SPI4_Init>
  MX_USART3_UART_Init();
 8000ba8:	f000 f920 	bl	8000dec <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOE, CS1_Pin|CS2_Pin, SET);
 8000bac:	2201      	movs	r2, #1
 8000bae:	2130      	movs	r1, #48	; 0x30
 8000bb0:	481b      	ldr	r0, [pc, #108]	; (8000c20 <main+0x158>)
 8000bb2:	f004 fc6d 	bl	8005490 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(CS3_GPIO_Port, CS3_Pin, SET);
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	2102      	movs	r1, #2
 8000bba:	481a      	ldr	r0, [pc, #104]	; (8000c24 <main+0x15c>)
 8000bbc:	f004 fc68 	bl	8005490 <HAL_GPIO_WritePin>

  // DIR SET means: positive and DIR RESET means: negative
  HAL_GPIO_WritePin(GPIOB, DIR3_Pin|DIR2_Pin, GPIO_PIN_SET);
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000bc6:	4818      	ldr	r0, [pc, #96]	; (8000c28 <main+0x160>)
 8000bc8:	f004 fc62 	bl	8005490 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DIR1_GPIO_Port, DIR1_Pin, GPIO_PIN_SET);
 8000bcc:	2201      	movs	r2, #1
 8000bce:	2180      	movs	r1, #128	; 0x80
 8000bd0:	4816      	ldr	r0, [pc, #88]	; (8000c2c <main+0x164>)
 8000bd2:	f004 fc5d 	bl	8005490 <HAL_GPIO_WritePin>

  // star communication by UART
  uart_buf_len = sprintf(uart_bufT, "Ethernet Communication with DAC\r\n");
 8000bd6:	4916      	ldr	r1, [pc, #88]	; (8000c30 <main+0x168>)
 8000bd8:	4816      	ldr	r0, [pc, #88]	; (8000c34 <main+0x16c>)
 8000bda:	f01f fc4b 	bl	8020474 <siprintf>
 8000bde:	4603      	mov	r3, r0
 8000be0:	4a15      	ldr	r2, [pc, #84]	; (8000c38 <main+0x170>)
 8000be2:	6013      	str	r3, [r2, #0]
  HAL_UART_Transmit(&huart3, (uint8_t*)uart_bufT, uart_buf_len, 100);
 8000be4:	4b14      	ldr	r3, [pc, #80]	; (8000c38 <main+0x170>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	b29a      	uxth	r2, r3
 8000bea:	2364      	movs	r3, #100	; 0x64
 8000bec:	4911      	ldr	r1, [pc, #68]	; (8000c34 <main+0x16c>)
 8000bee:	4813      	ldr	r0, [pc, #76]	; (8000c3c <main+0x174>)
 8000bf0:	f008 f844 	bl	8008c7c <HAL_UART_Transmit>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Start */
  osThreadDef(Start, StartThread, osPriorityNormal, 0, 512);
 8000bf4:	4b12      	ldr	r3, [pc, #72]	; (8000c40 <main+0x178>)
 8000bf6:	463c      	mov	r4, r7
 8000bf8:	461d      	mov	r5, r3
 8000bfa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bfc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bfe:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c02:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  StartHandle = osThreadCreate(osThread(Start), NULL);
 8000c06:	463b      	mov	r3, r7
 8000c08:	2100      	movs	r1, #0
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f009 fddf 	bl	800a7ce <osThreadCreate>
 8000c10:	4603      	mov	r3, r0
 8000c12:	4a0c      	ldr	r2, [pc, #48]	; (8000c44 <main+0x17c>)
 8000c14:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000c16:	f009 fdc3 	bl	800a7a0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c1a:	e7fe      	b.n	8000c1a <main+0x152>
 8000c1c:	e000ed00 	.word	0xe000ed00
 8000c20:	58021000 	.word	0x58021000
 8000c24:	58021400 	.word	0x58021400
 8000c28:	58020400 	.word	0x58020400
 8000c2c:	58020c00 	.word	0x58020c00
 8000c30:	08023038 	.word	0x08023038
 8000c34:	24000874 	.word	0x24000874
 8000c38:	24000c5c 	.word	0x24000c5c
 8000c3c:	240007c4 	.word	0x240007c4
 8000c40:	08023064 	.word	0x08023064
 8000c44:	24000854 	.word	0x24000854

08000c48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b09c      	sub	sp, #112	; 0x70
 8000c4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c52:	224c      	movs	r2, #76	; 0x4c
 8000c54:	2100      	movs	r1, #0
 8000c56:	4618      	mov	r0, r3
 8000c58:	f01f fc99 	bl	802058e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c5c:	1d3b      	adds	r3, r7, #4
 8000c5e:	2220      	movs	r2, #32
 8000c60:	2100      	movs	r1, #0
 8000c62:	4618      	mov	r0, r3
 8000c64:	f01f fc93 	bl	802058e <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000c68:	2002      	movs	r0, #2
 8000c6a:	f004 fc5f 	bl	800552c <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c6e:	2300      	movs	r3, #0
 8000c70:	603b      	str	r3, [r7, #0]
 8000c72:	4b31      	ldr	r3, [pc, #196]	; (8000d38 <SystemClock_Config+0xf0>)
 8000c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c76:	4a30      	ldr	r2, [pc, #192]	; (8000d38 <SystemClock_Config+0xf0>)
 8000c78:	f023 0301 	bic.w	r3, r3, #1
 8000c7c:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000c7e:	4b2e      	ldr	r3, [pc, #184]	; (8000d38 <SystemClock_Config+0xf0>)
 8000c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c82:	f003 0301 	and.w	r3, r3, #1
 8000c86:	603b      	str	r3, [r7, #0]
 8000c88:	4b2c      	ldr	r3, [pc, #176]	; (8000d3c <SystemClock_Config+0xf4>)
 8000c8a:	699b      	ldr	r3, [r3, #24]
 8000c8c:	4a2b      	ldr	r2, [pc, #172]	; (8000d3c <SystemClock_Config+0xf4>)
 8000c8e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000c92:	6193      	str	r3, [r2, #24]
 8000c94:	4b29      	ldr	r3, [pc, #164]	; (8000d3c <SystemClock_Config+0xf4>)
 8000c96:	699b      	ldr	r3, [r3, #24]
 8000c98:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c9c:	603b      	str	r3, [r7, #0]
 8000c9e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000ca0:	bf00      	nop
 8000ca2:	4b26      	ldr	r3, [pc, #152]	; (8000d3c <SystemClock_Config+0xf4>)
 8000ca4:	699b      	ldr	r3, [r3, #24]
 8000ca6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000caa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000cae:	d1f8      	bne.n	8000ca2 <SystemClock_Config+0x5a>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000cb4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000cb8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cba:	2302      	movs	r3, #2
 8000cbc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cbe:	2302      	movs	r3, #2
 8000cc0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000cc2:	2304      	movs	r3, #4
 8000cc4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 400;
 8000cc6:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000cca:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000ccc:	2302      	movs	r3, #2
 8000cce:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000cd0:	2302      	movs	r3, #2
 8000cd2:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000cd4:	2302      	movs	r3, #2
 8000cd6:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8000cd8:	2304      	movs	r3, #4
 8000cda:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ce4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f004 fc59 	bl	80055a0 <HAL_RCC_OscConfig>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d001      	beq.n	8000cf8 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000cf4:	f001 fa9a 	bl	800222c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cf8:	233f      	movs	r3, #63	; 0x3f
 8000cfa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cfc:	2303      	movs	r3, #3
 8000cfe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000d00:	2300      	movs	r3, #0
 8000d02:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000d04:	2308      	movs	r3, #8
 8000d06:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000d08:	2340      	movs	r3, #64	; 0x40
 8000d0a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000d0c:	2340      	movs	r3, #64	; 0x40
 8000d0e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000d10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d14:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000d16:	2340      	movs	r3, #64	; 0x40
 8000d18:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d1a:	1d3b      	adds	r3, r7, #4
 8000d1c:	2102      	movs	r1, #2
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f005 f84c 	bl	8005dbc <HAL_RCC_ClockConfig>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d001      	beq.n	8000d2e <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8000d2a:	f001 fa7f 	bl	800222c <Error_Handler>
  }
}
 8000d2e:	bf00      	nop
 8000d30:	3770      	adds	r7, #112	; 0x70
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	58000400 	.word	0x58000400
 8000d3c:	58024800 	.word	0x58024800

08000d40 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8000d44:	4b27      	ldr	r3, [pc, #156]	; (8000de4 <MX_SPI4_Init+0xa4>)
 8000d46:	4a28      	ldr	r2, [pc, #160]	; (8000de8 <MX_SPI4_Init+0xa8>)
 8000d48:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8000d4a:	4b26      	ldr	r3, [pc, #152]	; (8000de4 <MX_SPI4_Init+0xa4>)
 8000d4c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000d50:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8000d52:	4b24      	ldr	r3, [pc, #144]	; (8000de4 <MX_SPI4_Init+0xa4>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d58:	4b22      	ldr	r3, [pc, #136]	; (8000de4 <MX_SPI4_Init+0xa4>)
 8000d5a:	2207      	movs	r2, #7
 8000d5c:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d5e:	4b21      	ldr	r3, [pc, #132]	; (8000de4 <MX_SPI4_Init+0xa4>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d64:	4b1f      	ldr	r3, [pc, #124]	; (8000de4 <MX_SPI4_Init+0xa4>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8000d6a:	4b1e      	ldr	r3, [pc, #120]	; (8000de4 <MX_SPI4_Init+0xa4>)
 8000d6c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000d70:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000d72:	4b1c      	ldr	r3, [pc, #112]	; (8000de4 <MX_SPI4_Init+0xa4>)
 8000d74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000d78:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d7a:	4b1a      	ldr	r3, [pc, #104]	; (8000de4 <MX_SPI4_Init+0xa4>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d80:	4b18      	ldr	r3, [pc, #96]	; (8000de4 <MX_SPI4_Init+0xa4>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d86:	4b17      	ldr	r3, [pc, #92]	; (8000de4 <MX_SPI4_Init+0xa4>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8000d8c:	4b15      	ldr	r3, [pc, #84]	; (8000de4 <MX_SPI4_Init+0xa4>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000d92:	4b14      	ldr	r3, [pc, #80]	; (8000de4 <MX_SPI4_Init+0xa4>)
 8000d94:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d98:	635a      	str	r2, [r3, #52]	; 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000d9a:	4b12      	ldr	r3, [pc, #72]	; (8000de4 <MX_SPI4_Init+0xa4>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000da0:	4b10      	ldr	r3, [pc, #64]	; (8000de4 <MX_SPI4_Init+0xa4>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000da6:	4b0f      	ldr	r3, [pc, #60]	; (8000de4 <MX_SPI4_Init+0xa4>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000dac:	4b0d      	ldr	r3, [pc, #52]	; (8000de4 <MX_SPI4_Init+0xa4>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000db2:	4b0c      	ldr	r3, [pc, #48]	; (8000de4 <MX_SPI4_Init+0xa4>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	649a      	str	r2, [r3, #72]	; 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000db8:	4b0a      	ldr	r3, [pc, #40]	; (8000de4 <MX_SPI4_Init+0xa4>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000dbe:	4b09      	ldr	r3, [pc, #36]	; (8000de4 <MX_SPI4_Init+0xa4>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	651a      	str	r2, [r3, #80]	; 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000dc4:	4b07      	ldr	r3, [pc, #28]	; (8000de4 <MX_SPI4_Init+0xa4>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000dca:	4b06      	ldr	r3, [pc, #24]	; (8000de4 <MX_SPI4_Init+0xa4>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000dd0:	4804      	ldr	r0, [pc, #16]	; (8000de4 <MX_SPI4_Init+0xa4>)
 8000dd2:	f006 ff29 	bl	8007c28 <HAL_SPI_Init>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d001      	beq.n	8000de0 <MX_SPI4_Init+0xa0>
  {
    Error_Handler();
 8000ddc:	f001 fa26 	bl	800222c <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8000de0:	bf00      	nop
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	2400073c 	.word	0x2400073c
 8000de8:	40013400 	.word	0x40013400

08000dec <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000df0:	4b22      	ldr	r3, [pc, #136]	; (8000e7c <MX_USART3_UART_Init+0x90>)
 8000df2:	4a23      	ldr	r2, [pc, #140]	; (8000e80 <MX_USART3_UART_Init+0x94>)
 8000df4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000df6:	4b21      	ldr	r3, [pc, #132]	; (8000e7c <MX_USART3_UART_Init+0x90>)
 8000df8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000dfc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000dfe:	4b1f      	ldr	r3, [pc, #124]	; (8000e7c <MX_USART3_UART_Init+0x90>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000e04:	4b1d      	ldr	r3, [pc, #116]	; (8000e7c <MX_USART3_UART_Init+0x90>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000e0a:	4b1c      	ldr	r3, [pc, #112]	; (8000e7c <MX_USART3_UART_Init+0x90>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000e10:	4b1a      	ldr	r3, [pc, #104]	; (8000e7c <MX_USART3_UART_Init+0x90>)
 8000e12:	220c      	movs	r2, #12
 8000e14:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e16:	4b19      	ldr	r3, [pc, #100]	; (8000e7c <MX_USART3_UART_Init+0x90>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e1c:	4b17      	ldr	r3, [pc, #92]	; (8000e7c <MX_USART3_UART_Init+0x90>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e22:	4b16      	ldr	r3, [pc, #88]	; (8000e7c <MX_USART3_UART_Init+0x90>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e28:	4b14      	ldr	r3, [pc, #80]	; (8000e7c <MX_USART3_UART_Init+0x90>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e2e:	4b13      	ldr	r3, [pc, #76]	; (8000e7c <MX_USART3_UART_Init+0x90>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000e34:	4811      	ldr	r0, [pc, #68]	; (8000e7c <MX_USART3_UART_Init+0x90>)
 8000e36:	f007 fed1 	bl	8008bdc <HAL_UART_Init>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d001      	beq.n	8000e44 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000e40:	f001 f9f4 	bl	800222c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e44:	2100      	movs	r1, #0
 8000e46:	480d      	ldr	r0, [pc, #52]	; (8000e7c <MX_USART3_UART_Init+0x90>)
 8000e48:	f008 febe 	bl	8009bc8 <HAL_UARTEx_SetTxFifoThreshold>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000e52:	f001 f9eb 	bl	800222c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e56:	2100      	movs	r1, #0
 8000e58:	4808      	ldr	r0, [pc, #32]	; (8000e7c <MX_USART3_UART_Init+0x90>)
 8000e5a:	f008 fef3 	bl	8009c44 <HAL_UARTEx_SetRxFifoThreshold>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d001      	beq.n	8000e68 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000e64:	f001 f9e2 	bl	800222c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000e68:	4804      	ldr	r0, [pc, #16]	; (8000e7c <MX_USART3_UART_Init+0x90>)
 8000e6a:	f008 fe74 	bl	8009b56 <HAL_UARTEx_DisableFifoMode>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d001      	beq.n	8000e78 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000e74:	f001 f9da 	bl	800222c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000e78:	bf00      	nop
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	240007c4 	.word	0x240007c4
 8000e80:	40004800 	.word	0x40004800

08000e84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b08e      	sub	sp, #56	; 0x38
 8000e88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e8e:	2200      	movs	r2, #0
 8000e90:	601a      	str	r2, [r3, #0]
 8000e92:	605a      	str	r2, [r3, #4]
 8000e94:	609a      	str	r2, [r3, #8]
 8000e96:	60da      	str	r2, [r3, #12]
 8000e98:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e9a:	4b85      	ldr	r3, [pc, #532]	; (80010b0 <MX_GPIO_Init+0x22c>)
 8000e9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ea0:	4a83      	ldr	r2, [pc, #524]	; (80010b0 <MX_GPIO_Init+0x22c>)
 8000ea2:	f043 0310 	orr.w	r3, r3, #16
 8000ea6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000eaa:	4b81      	ldr	r3, [pc, #516]	; (80010b0 <MX_GPIO_Init+0x22c>)
 8000eac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eb0:	f003 0310 	and.w	r3, r3, #16
 8000eb4:	623b      	str	r3, [r7, #32]
 8000eb6:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eb8:	4b7d      	ldr	r3, [pc, #500]	; (80010b0 <MX_GPIO_Init+0x22c>)
 8000eba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ebe:	4a7c      	ldr	r2, [pc, #496]	; (80010b0 <MX_GPIO_Init+0x22c>)
 8000ec0:	f043 0304 	orr.w	r3, r3, #4
 8000ec4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ec8:	4b79      	ldr	r3, [pc, #484]	; (80010b0 <MX_GPIO_Init+0x22c>)
 8000eca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ece:	f003 0304 	and.w	r3, r3, #4
 8000ed2:	61fb      	str	r3, [r7, #28]
 8000ed4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ed6:	4b76      	ldr	r3, [pc, #472]	; (80010b0 <MX_GPIO_Init+0x22c>)
 8000ed8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000edc:	4a74      	ldr	r2, [pc, #464]	; (80010b0 <MX_GPIO_Init+0x22c>)
 8000ede:	f043 0320 	orr.w	r3, r3, #32
 8000ee2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ee6:	4b72      	ldr	r3, [pc, #456]	; (80010b0 <MX_GPIO_Init+0x22c>)
 8000ee8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eec:	f003 0320 	and.w	r3, r3, #32
 8000ef0:	61bb      	str	r3, [r7, #24]
 8000ef2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ef4:	4b6e      	ldr	r3, [pc, #440]	; (80010b0 <MX_GPIO_Init+0x22c>)
 8000ef6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000efa:	4a6d      	ldr	r2, [pc, #436]	; (80010b0 <MX_GPIO_Init+0x22c>)
 8000efc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f00:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f04:	4b6a      	ldr	r3, [pc, #424]	; (80010b0 <MX_GPIO_Init+0x22c>)
 8000f06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f0e:	617b      	str	r3, [r7, #20]
 8000f10:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f12:	4b67      	ldr	r3, [pc, #412]	; (80010b0 <MX_GPIO_Init+0x22c>)
 8000f14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f18:	4a65      	ldr	r2, [pc, #404]	; (80010b0 <MX_GPIO_Init+0x22c>)
 8000f1a:	f043 0301 	orr.w	r3, r3, #1
 8000f1e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f22:	4b63      	ldr	r3, [pc, #396]	; (80010b0 <MX_GPIO_Init+0x22c>)
 8000f24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f28:	f003 0301 	and.w	r3, r3, #1
 8000f2c:	613b      	str	r3, [r7, #16]
 8000f2e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f30:	4b5f      	ldr	r3, [pc, #380]	; (80010b0 <MX_GPIO_Init+0x22c>)
 8000f32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f36:	4a5e      	ldr	r2, [pc, #376]	; (80010b0 <MX_GPIO_Init+0x22c>)
 8000f38:	f043 0302 	orr.w	r3, r3, #2
 8000f3c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f40:	4b5b      	ldr	r3, [pc, #364]	; (80010b0 <MX_GPIO_Init+0x22c>)
 8000f42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f46:	f003 0302 	and.w	r3, r3, #2
 8000f4a:	60fb      	str	r3, [r7, #12]
 8000f4c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f4e:	4b58      	ldr	r3, [pc, #352]	; (80010b0 <MX_GPIO_Init+0x22c>)
 8000f50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f54:	4a56      	ldr	r2, [pc, #344]	; (80010b0 <MX_GPIO_Init+0x22c>)
 8000f56:	f043 0308 	orr.w	r3, r3, #8
 8000f5a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f5e:	4b54      	ldr	r3, [pc, #336]	; (80010b0 <MX_GPIO_Init+0x22c>)
 8000f60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f64:	f003 0308 	and.w	r3, r3, #8
 8000f68:	60bb      	str	r3, [r7, #8]
 8000f6a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f6c:	4b50      	ldr	r3, [pc, #320]	; (80010b0 <MX_GPIO_Init+0x22c>)
 8000f6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f72:	4a4f      	ldr	r2, [pc, #316]	; (80010b0 <MX_GPIO_Init+0x22c>)
 8000f74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f78:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f7c:	4b4c      	ldr	r3, [pc, #304]	; (80010b0 <MX_GPIO_Init+0x22c>)
 8000f7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f86:	607b      	str	r3, [r7, #4]
 8000f88:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS1_Pin|CS2_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	2132      	movs	r1, #50	; 0x32
 8000f8e:	4849      	ldr	r0, [pc, #292]	; (80010b4 <MX_GPIO_Init+0x230>)
 8000f90:	f004 fa7e 	bl	8005490 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS3_GPIO_Port, CS3_Pin, GPIO_PIN_RESET);
 8000f94:	2200      	movs	r2, #0
 8000f96:	2102      	movs	r1, #2
 8000f98:	4847      	ldr	r0, [pc, #284]	; (80010b8 <MX_GPIO_Init+0x234>)
 8000f9a:	f004 fa79 	bl	8005490 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|DIR3_Pin|DIR2_Pin, GPIO_PIN_RESET);
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	f244 3101 	movw	r1, #17153	; 0x4301
 8000fa4:	4845      	ldr	r0, [pc, #276]	; (80010bc <MX_GPIO_Init+0x238>)
 8000fa6:	f004 fa73 	bl	8005490 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIR1_GPIO_Port, DIR1_Pin, GPIO_PIN_RESET);
 8000faa:	2200      	movs	r2, #0
 8000fac:	2180      	movs	r1, #128	; 0x80
 8000fae:	4844      	ldr	r0, [pc, #272]	; (80010c0 <MX_GPIO_Init+0x23c>)
 8000fb0:	f004 fa6e 	bl	8005490 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : TTL3_Pin TTL1_Pin */
  GPIO_InitStruct.Pin = TTL3_Pin|TTL1_Pin;
 8000fb4:	2305      	movs	r3, #5
 8000fb6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	483b      	ldr	r0, [pc, #236]	; (80010b4 <MX_GPIO_Init+0x230>)
 8000fc8:	f004 f89a 	bl	8005100 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS1_Pin CS2_Pin LD2_Pin */
  GPIO_InitStruct.Pin = CS1_Pin|CS2_Pin|LD2_Pin;
 8000fcc:	2332      	movs	r3, #50	; 0x32
 8000fce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fd8:	2303      	movs	r3, #3
 8000fda:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fdc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	4834      	ldr	r0, [pc, #208]	; (80010b4 <MX_GPIO_Init+0x230>)
 8000fe4:	f004 f88c 	bl	8005100 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000fe8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fee:	4b35      	ldr	r3, [pc, #212]	; (80010c4 <MX_GPIO_Init+0x240>)
 8000ff0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ff6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	4832      	ldr	r0, [pc, #200]	; (80010c8 <MX_GPIO_Init+0x244>)
 8000ffe:	f004 f87f 	bl	8005100 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS3_Pin */
  GPIO_InitStruct.Pin = CS3_Pin;
 8001002:	2302      	movs	r3, #2
 8001004:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001006:	2301      	movs	r3, #1
 8001008:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100a:	2300      	movs	r3, #0
 800100c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800100e:	2303      	movs	r3, #3
 8001010:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(CS3_GPIO_Port, &GPIO_InitStruct);
 8001012:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001016:	4619      	mov	r1, r3
 8001018:	4827      	ldr	r0, [pc, #156]	; (80010b8 <MX_GPIO_Init+0x234>)
 800101a:	f004 f871 	bl	8005100 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin DIR3_Pin DIR2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|DIR3_Pin|DIR2_Pin;
 800101e:	f244 3301 	movw	r3, #17153	; 0x4301
 8001022:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001024:	2301      	movs	r3, #1
 8001026:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001028:	2300      	movs	r3, #0
 800102a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800102c:	2303      	movs	r3, #3
 800102e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001030:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001034:	4619      	mov	r1, r3
 8001036:	4821      	ldr	r0, [pc, #132]	; (80010bc <MX_GPIO_Init+0x238>)
 8001038:	f004 f862 	bl	8005100 <HAL_GPIO_Init>

  /*Configure GPIO pin : TTL2_Pin */
  GPIO_InitStruct.Pin = TTL2_Pin;
 800103c:	2301      	movs	r3, #1
 800103e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001040:	2300      	movs	r3, #0
 8001042:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001044:	2300      	movs	r3, #0
 8001046:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TTL2_GPIO_Port, &GPIO_InitStruct);
 8001048:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800104c:	4619      	mov	r1, r3
 800104e:	481c      	ldr	r0, [pc, #112]	; (80010c0 <MX_GPIO_Init+0x23c>)
 8001050:	f004 f856 	bl	8005100 <HAL_GPIO_Init>

  /*Configure GPIO pin : TTL4_Pin */
  GPIO_InitStruct.Pin = TTL4_Pin;
 8001054:	2302      	movs	r3, #2
 8001056:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001058:	4b1a      	ldr	r3, [pc, #104]	; (80010c4 <MX_GPIO_Init+0x240>)
 800105a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105c:	2300      	movs	r3, #0
 800105e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TTL4_GPIO_Port, &GPIO_InitStruct);
 8001060:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001064:	4619      	mov	r1, r3
 8001066:	4816      	ldr	r0, [pc, #88]	; (80010c0 <MX_GPIO_Init+0x23c>)
 8001068:	f004 f84a 	bl	8005100 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIR1_Pin */
  GPIO_InitStruct.Pin = DIR1_Pin;
 800106c:	2380      	movs	r3, #128	; 0x80
 800106e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001070:	2301      	movs	r3, #1
 8001072:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001074:	2300      	movs	r3, #0
 8001076:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001078:	2303      	movs	r3, #3
 800107a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(DIR1_GPIO_Port, &GPIO_InitStruct);
 800107c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001080:	4619      	mov	r1, r3
 8001082:	480f      	ldr	r0, [pc, #60]	; (80010c0 <MX_GPIO_Init+0x23c>)
 8001084:	f004 f83c 	bl	8005100 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 7, 0);
 8001088:	2200      	movs	r2, #0
 800108a:	2107      	movs	r1, #7
 800108c:	2007      	movs	r0, #7
 800108e:	f001 fe89 	bl	8002da4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001092:	2007      	movs	r0, #7
 8001094:	f001 fea0 	bl	8002dd8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 7, 0);
 8001098:	2200      	movs	r2, #0
 800109a:	2107      	movs	r1, #7
 800109c:	2028      	movs	r0, #40	; 0x28
 800109e:	f001 fe81 	bl	8002da4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80010a2:	2028      	movs	r0, #40	; 0x28
 80010a4:	f001 fe98 	bl	8002dd8 <HAL_NVIC_EnableIRQ>

}
 80010a8:	bf00      	nop
 80010aa:	3738      	adds	r7, #56	; 0x38
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	58024400 	.word	0x58024400
 80010b4:	58021000 	.word	0x58021000
 80010b8:	58021400 	.word	0x58021400
 80010bc:	58020400 	.word	0x58020400
 80010c0:	58020c00 	.word	0x58020c00
 80010c4:	11110000 	.word	0x11110000
 80010c8:	58020800 	.word	0x58020800

080010cc <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	4603      	mov	r3, r0
 80010d4:	80fb      	strh	r3, [r7, #6]

  HAL_GPIO_TogglePin(GPIOB, LD1_Pin);
 80010d6:	2101      	movs	r1, #1
 80010d8:	4838      	ldr	r0, [pc, #224]	; (80011bc <HAL_GPIO_EXTI_Callback+0xf0>)
 80010da:	f004 f9f2 	bl	80054c2 <HAL_GPIO_TogglePin>
  if(GPIO_Pin==TTL4_Pin)
 80010de:	88fb      	ldrh	r3, [r7, #6]
 80010e0:	2b02      	cmp	r3, #2
 80010e2:	d166      	bne.n	80011b2 <HAL_GPIO_EXTI_Callback+0xe6>
  {
	  if(HAL_GPIO_ReadPin(GPIOE, TTL1_Pin) == GPIO_PIN_RESET &&
 80010e4:	2101      	movs	r1, #1
 80010e6:	4836      	ldr	r0, [pc, #216]	; (80011c0 <HAL_GPIO_EXTI_Callback+0xf4>)
 80010e8:	f004 f9ba 	bl	8005460 <HAL_GPIO_ReadPin>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d115      	bne.n	800111e <HAL_GPIO_EXTI_Callback+0x52>
		 HAL_GPIO_ReadPin(TTL2_GPIO_Port, TTL2_Pin) == GPIO_PIN_RESET &&
 80010f2:	2101      	movs	r1, #1
 80010f4:	4833      	ldr	r0, [pc, #204]	; (80011c4 <HAL_GPIO_EXTI_Callback+0xf8>)
 80010f6:	f004 f9b3 	bl	8005460 <HAL_GPIO_ReadPin>
 80010fa:	4603      	mov	r3, r0
	  if(HAL_GPIO_ReadPin(GPIOE, TTL1_Pin) == GPIO_PIN_RESET &&
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d10e      	bne.n	800111e <HAL_GPIO_EXTI_Callback+0x52>
		 HAL_GPIO_ReadPin(GPIOE, TTL3_Pin) == GPIO_PIN_RESET){
 8001100:	2104      	movs	r1, #4
 8001102:	482f      	ldr	r0, [pc, #188]	; (80011c0 <HAL_GPIO_EXTI_Callback+0xf4>)
 8001104:	f004 f9ac 	bl	8005460 <HAL_GPIO_ReadPin>
 8001108:	4603      	mov	r3, r0
		 HAL_GPIO_ReadPin(TTL2_GPIO_Port, TTL2_Pin) == GPIO_PIN_RESET &&
 800110a:	2b00      	cmp	r3, #0
 800110c:	d107      	bne.n	800111e <HAL_GPIO_EXTI_Callback+0x52>

		  // state 1 row 0 in the DAC's array
		  if(last_r != 0){
 800110e:	4b2e      	ldr	r3, [pc, #184]	; (80011c8 <HAL_GPIO_EXTI_Callback+0xfc>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d04d      	beq.n	80011b2 <HAL_GPIO_EXTI_Callback+0xe6>
			  SendToDAC(0);
 8001116:	2000      	movs	r0, #0
 8001118:	f000 f87e 	bl	8001218 <SendToDAC>
		  if(last_r != 0){
 800111c:	e049      	b.n	80011b2 <HAL_GPIO_EXTI_Callback+0xe6>
		  }
	  }else if(HAL_GPIO_ReadPin(GPIOE, TTL1_Pin) == GPIO_PIN_SET &&
 800111e:	2101      	movs	r1, #1
 8001120:	4827      	ldr	r0, [pc, #156]	; (80011c0 <HAL_GPIO_EXTI_Callback+0xf4>)
 8001122:	f004 f99d 	bl	8005460 <HAL_GPIO_ReadPin>
 8001126:	4603      	mov	r3, r0
 8001128:	2b01      	cmp	r3, #1
 800112a:	d115      	bne.n	8001158 <HAL_GPIO_EXTI_Callback+0x8c>
				 HAL_GPIO_ReadPin(TTL2_GPIO_Port, TTL2_Pin) == GPIO_PIN_RESET &&
 800112c:	2101      	movs	r1, #1
 800112e:	4825      	ldr	r0, [pc, #148]	; (80011c4 <HAL_GPIO_EXTI_Callback+0xf8>)
 8001130:	f004 f996 	bl	8005460 <HAL_GPIO_ReadPin>
 8001134:	4603      	mov	r3, r0
	  }else if(HAL_GPIO_ReadPin(GPIOE, TTL1_Pin) == GPIO_PIN_SET &&
 8001136:	2b00      	cmp	r3, #0
 8001138:	d10e      	bne.n	8001158 <HAL_GPIO_EXTI_Callback+0x8c>
				 HAL_GPIO_ReadPin(GPIOE, TTL3_Pin) == GPIO_PIN_RESET){
 800113a:	2104      	movs	r1, #4
 800113c:	4820      	ldr	r0, [pc, #128]	; (80011c0 <HAL_GPIO_EXTI_Callback+0xf4>)
 800113e:	f004 f98f 	bl	8005460 <HAL_GPIO_ReadPin>
 8001142:	4603      	mov	r3, r0
				 HAL_GPIO_ReadPin(TTL2_GPIO_Port, TTL2_Pin) == GPIO_PIN_RESET &&
 8001144:	2b00      	cmp	r3, #0
 8001146:	d107      	bne.n	8001158 <HAL_GPIO_EXTI_Callback+0x8c>

		  // state 2 row 1 in the DAC's array
		  if(last_r != 1){
 8001148:	4b1f      	ldr	r3, [pc, #124]	; (80011c8 <HAL_GPIO_EXTI_Callback+0xfc>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	2b01      	cmp	r3, #1
 800114e:	d030      	beq.n	80011b2 <HAL_GPIO_EXTI_Callback+0xe6>
			  SendToDAC(1);
 8001150:	2001      	movs	r0, #1
 8001152:	f000 f861 	bl	8001218 <SendToDAC>
		  if(last_r != 1){
 8001156:	e02c      	b.n	80011b2 <HAL_GPIO_EXTI_Callback+0xe6>
		  }
	  }else if(HAL_GPIO_ReadPin(GPIOE, TTL1_Pin) == GPIO_PIN_RESET &&
 8001158:	2101      	movs	r1, #1
 800115a:	4819      	ldr	r0, [pc, #100]	; (80011c0 <HAL_GPIO_EXTI_Callback+0xf4>)
 800115c:	f004 f980 	bl	8005460 <HAL_GPIO_ReadPin>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d115      	bne.n	8001192 <HAL_GPIO_EXTI_Callback+0xc6>
				 HAL_GPIO_ReadPin(TTL2_GPIO_Port, TTL2_Pin) == GPIO_PIN_SET &&
 8001166:	2101      	movs	r1, #1
 8001168:	4816      	ldr	r0, [pc, #88]	; (80011c4 <HAL_GPIO_EXTI_Callback+0xf8>)
 800116a:	f004 f979 	bl	8005460 <HAL_GPIO_ReadPin>
 800116e:	4603      	mov	r3, r0
	  }else if(HAL_GPIO_ReadPin(GPIOE, TTL1_Pin) == GPIO_PIN_RESET &&
 8001170:	2b01      	cmp	r3, #1
 8001172:	d10e      	bne.n	8001192 <HAL_GPIO_EXTI_Callback+0xc6>
				 HAL_GPIO_ReadPin(GPIOE, TTL3_Pin) == GPIO_PIN_RESET){
 8001174:	2104      	movs	r1, #4
 8001176:	4812      	ldr	r0, [pc, #72]	; (80011c0 <HAL_GPIO_EXTI_Callback+0xf4>)
 8001178:	f004 f972 	bl	8005460 <HAL_GPIO_ReadPin>
 800117c:	4603      	mov	r3, r0
				 HAL_GPIO_ReadPin(TTL2_GPIO_Port, TTL2_Pin) == GPIO_PIN_SET &&
 800117e:	2b00      	cmp	r3, #0
 8001180:	d107      	bne.n	8001192 <HAL_GPIO_EXTI_Callback+0xc6>

		  // state 3 row 2 in the DAC's array
		  if(last_r != 2){
 8001182:	4b11      	ldr	r3, [pc, #68]	; (80011c8 <HAL_GPIO_EXTI_Callback+0xfc>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	2b02      	cmp	r3, #2
 8001188:	d013      	beq.n	80011b2 <HAL_GPIO_EXTI_Callback+0xe6>
			  SendToDAC(2);
 800118a:	2002      	movs	r0, #2
 800118c:	f000 f844 	bl	8001218 <SendToDAC>
		  if(last_r != 2){
 8001190:	e00f      	b.n	80011b2 <HAL_GPIO_EXTI_Callback+0xe6>
		  }
	  }else{

		  uart_buf_len = sprintf(uart_bufT, "nothing to send!\r\n");
 8001192:	490e      	ldr	r1, [pc, #56]	; (80011cc <HAL_GPIO_EXTI_Callback+0x100>)
 8001194:	480e      	ldr	r0, [pc, #56]	; (80011d0 <HAL_GPIO_EXTI_Callback+0x104>)
 8001196:	f01f f96d 	bl	8020474 <siprintf>
 800119a:	4603      	mov	r3, r0
 800119c:	4a0d      	ldr	r2, [pc, #52]	; (80011d4 <HAL_GPIO_EXTI_Callback+0x108>)
 800119e:	6013      	str	r3, [r2, #0]
		  HAL_UART_Transmit(&huart3, (uint8_t*)uart_bufT, uart_buf_len, 100);
 80011a0:	4b0c      	ldr	r3, [pc, #48]	; (80011d4 <HAL_GPIO_EXTI_Callback+0x108>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	b29a      	uxth	r2, r3
 80011a6:	2364      	movs	r3, #100	; 0x64
 80011a8:	4909      	ldr	r1, [pc, #36]	; (80011d0 <HAL_GPIO_EXTI_Callback+0x104>)
 80011aa:	480b      	ldr	r0, [pc, #44]	; (80011d8 <HAL_GPIO_EXTI_Callback+0x10c>)
 80011ac:	f007 fd66 	bl	8008c7c <HAL_UART_Transmit>

//		  SendToDAC(0);
	  }
  }
}
 80011b0:	e7ff      	b.n	80011b2 <HAL_GPIO_EXTI_Callback+0xe6>
 80011b2:	bf00      	nop
 80011b4:	3708      	adds	r7, #8
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	58020400 	.word	0x58020400
 80011c0:	58021000 	.word	0x58021000
 80011c4:	58020c00 	.word	0x58020c00
 80011c8:	24000088 	.word	0x24000088
 80011cc:	08023080 	.word	0x08023080
 80011d0:	24000874 	.word	0x24000874
 80011d4:	24000c5c 	.word	0x24000c5c
 80011d8:	240007c4 	.word	0x240007c4

080011dc <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback (SPI_HandleTypeDef * hspi){
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]

	HAL_GPIO_WritePin(GPIOE, CS1_Pin|CS2_Pin, SET);
 80011e4:	2201      	movs	r2, #1
 80011e6:	2130      	movs	r1, #48	; 0x30
 80011e8:	4807      	ldr	r0, [pc, #28]	; (8001208 <HAL_SPI_TxCpltCallback+0x2c>)
 80011ea:	f004 f951 	bl	8005490 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS3_GPIO_Port, CS3_Pin, SET);
 80011ee:	2201      	movs	r2, #1
 80011f0:	2102      	movs	r1, #2
 80011f2:	4806      	ldr	r0, [pc, #24]	; (800120c <HAL_SPI_TxCpltCallback+0x30>)
 80011f4:	f004 f94c 	bl	8005490 <HAL_GPIO_WritePin>
	state = 0;
 80011f8:	4b05      	ldr	r3, [pc, #20]	; (8001210 <HAL_SPI_TxCpltCallback+0x34>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	601a      	str	r2, [r3, #0]
}
 80011fe:	bf00      	nop
 8001200:	3708      	adds	r7, #8
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	58021000 	.word	0x58021000
 800120c:	58021400 	.word	0x58021400
 8001210:	24000c80 	.word	0x24000c80
 8001214:	00000000 	.word	0x00000000

08001218 <SendToDAC>:

void SendToDAC(int r)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b090      	sub	sp, #64	; 0x40
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
	uint32_t t0, t1, t;
	if(DAC[r][3] < 1){
 8001220:	4ab1      	ldr	r2, [pc, #708]	; (80014e8 <SendToDAC+0x2d0>)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	015b      	lsls	r3, r3, #5
 8001226:	4413      	add	r3, r2
 8001228:	3318      	adds	r3, #24
 800122a:	ed93 7b00 	vldr	d7, [r3]
 800122e:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001232:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001236:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800123a:	d50a      	bpl.n	8001252 <SendToDAC+0x3a>
		DAC[r][3] = 1;
 800123c:	4aaa      	ldr	r2, [pc, #680]	; (80014e8 <SendToDAC+0x2d0>)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	015b      	lsls	r3, r3, #5
 8001242:	4413      	add	r3, r2
 8001244:	f103 0118 	add.w	r1, r3, #24
 8001248:	f04f 0200 	mov.w	r2, #0
 800124c:	4ba7      	ldr	r3, [pc, #668]	; (80014ec <SendToDAC+0x2d4>)
 800124e:	e9c1 2300 	strd	r2, r3, [r1]
	}

	int n = round(DAC[r][3]*58);	// 58 to apply values to DAC
 8001252:	4aa5      	ldr	r2, [pc, #660]	; (80014e8 <SendToDAC+0x2d0>)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	015b      	lsls	r3, r3, #5
 8001258:	4413      	add	r3, r2
 800125a:	3318      	adds	r3, #24
 800125c:	ed93 7b00 	vldr	d7, [r3]
 8001260:	ed9f 6b9f 	vldr	d6, [pc, #636]	; 80014e0 <SendToDAC+0x2c8>
 8001264:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001268:	eeb0 0b47 	vmov.f64	d0, d7
 800126c:	f021 fe92 	bl	8022f94 <round>
 8001270:	eeb0 7b40 	vmov.f64	d7, d0
 8001274:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001278:	ee17 3a90 	vmov	r3, s15
 800127c:	63fb      	str	r3, [r7, #60]	; 0x3c
//	int n_delay;
//	double dif_lim = 0.01;
	double dif1, dif2, dif3;// max_dif, t_delay;
	uint16_t cs[2] = {CS1_Pin, CS2_Pin};
 800127e:	4b9c      	ldr	r3, [pc, #624]	; (80014f0 <SendToDAC+0x2d8>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	60bb      	str	r3, [r7, #8]

	// x? this part need for sending correct value in first loop
	state = 1;
 8001284:	4b9b      	ldr	r3, [pc, #620]	; (80014f4 <SendToDAC+0x2dc>)
 8001286:	2201      	movs	r2, #1
 8001288:	601a      	str	r2, [r3, #0]
	d_in = abs(round(((DAC[0][0])/v_ref) * max_dec));
 800128a:	4b97      	ldr	r3, [pc, #604]	; (80014e8 <SendToDAC+0x2d0>)
 800128c:	ed93 7b00 	vldr	d7, [r3]
 8001290:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 8001294:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8001298:	eddf 7a97 	vldr	s15, [pc, #604]	; 80014f8 <SendToDAC+0x2e0>
 800129c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80012a0:	ee26 7b07 	vmul.f64	d7, d6, d7
 80012a4:	eeb0 0b47 	vmov.f64	d0, d7
 80012a8:	f021 fe74 	bl	8022f94 <round>
 80012ac:	eeb0 7b40 	vmov.f64	d7, d0
 80012b0:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80012b4:	ee17 3a90 	vmov	r3, s15
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	bfb8      	it	lt
 80012bc:	425b      	neglt	r3, r3
 80012be:	b29a      	uxth	r2, r3
 80012c0:	4b8e      	ldr	r3, [pc, #568]	; (80014fc <SendToDAC+0x2e4>)
 80012c2:	801a      	strh	r2, [r3, #0]
	spi_buf[0] = 0x00;
 80012c4:	4b8e      	ldr	r3, [pc, #568]	; (8001500 <SendToDAC+0x2e8>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	701a      	strb	r2, [r3, #0]
	spi_buf[1] = ((uint8_t*)&d_in)[1];
 80012ca:	4b8e      	ldr	r3, [pc, #568]	; (8001504 <SendToDAC+0x2ec>)
 80012cc:	781a      	ldrb	r2, [r3, #0]
 80012ce:	4b8c      	ldr	r3, [pc, #560]	; (8001500 <SendToDAC+0x2e8>)
 80012d0:	705a      	strb	r2, [r3, #1]
	spi_buf[2] = ((uint8_t*)&d_in)[0];
 80012d2:	4b8a      	ldr	r3, [pc, #552]	; (80014fc <SendToDAC+0x2e4>)
 80012d4:	781a      	ldrb	r2, [r3, #0]
 80012d6:	4b8a      	ldr	r3, [pc, #552]	; (8001500 <SendToDAC+0x2e8>)
 80012d8:	709a      	strb	r2, [r3, #2]

//	HAL_GPIO_WritePin(CS3_GPIO_Port, CS3_Pin, RESET);
//	HAL_GPIO_WritePin(GPIOE, CS1_Pin, RESET);
	HAL_SPI_Transmit_IT(&hspi4, (uint8_t *)&spi_buf, 3);
 80012da:	2203      	movs	r2, #3
 80012dc:	4988      	ldr	r1, [pc, #544]	; (8001500 <SendToDAC+0x2e8>)
 80012de:	488a      	ldr	r0, [pc, #552]	; (8001508 <SendToDAC+0x2f0>)
 80012e0:	f006 fda4 	bl	8007e2c <HAL_SPI_Transmit_IT>
	while(state){}
 80012e4:	bf00      	nop
 80012e6:	4b83      	ldr	r3, [pc, #524]	; (80014f4 <SendToDAC+0x2dc>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d1fb      	bne.n	80012e6 <SendToDAC+0xce>
	// x? this part need for sending correct value in first loop

	dif1 = fabs(DAC[r][0] - DAC[last_r][0])/n;
 80012ee:	4a7e      	ldr	r2, [pc, #504]	; (80014e8 <SendToDAC+0x2d0>)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	015b      	lsls	r3, r3, #5
 80012f4:	4413      	add	r3, r2
 80012f6:	ed93 6b00 	vldr	d6, [r3]
 80012fa:	4b84      	ldr	r3, [pc, #528]	; (800150c <SendToDAC+0x2f4>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4a7a      	ldr	r2, [pc, #488]	; (80014e8 <SendToDAC+0x2d0>)
 8001300:	015b      	lsls	r3, r3, #5
 8001302:	4413      	add	r3, r2
 8001304:	ed93 7b00 	vldr	d7, [r3]
 8001308:	ee36 7b47 	vsub.f64	d7, d6, d7
 800130c:	eeb0 5bc7 	vabs.f64	d5, d7
 8001310:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001312:	ee07 3a90 	vmov	s15, r3
 8001316:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800131a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800131e:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
	dif2 = fabs(DAC[r][1] - DAC[last_r][1])/n;
 8001322:	4a71      	ldr	r2, [pc, #452]	; (80014e8 <SendToDAC+0x2d0>)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	015b      	lsls	r3, r3, #5
 8001328:	4413      	add	r3, r2
 800132a:	3308      	adds	r3, #8
 800132c:	ed93 6b00 	vldr	d6, [r3]
 8001330:	4b76      	ldr	r3, [pc, #472]	; (800150c <SendToDAC+0x2f4>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a6c      	ldr	r2, [pc, #432]	; (80014e8 <SendToDAC+0x2d0>)
 8001336:	015b      	lsls	r3, r3, #5
 8001338:	4413      	add	r3, r2
 800133a:	3308      	adds	r3, #8
 800133c:	ed93 7b00 	vldr	d7, [r3]
 8001340:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001344:	eeb0 5bc7 	vabs.f64	d5, d7
 8001348:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800134a:	ee07 3a90 	vmov	s15, r3
 800134e:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001352:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001356:	ed87 7b08 	vstr	d7, [r7, #32]
	dif3 = fabs(DAC[r][2] - DAC[last_r][2])/n;
 800135a:	4a63      	ldr	r2, [pc, #396]	; (80014e8 <SendToDAC+0x2d0>)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	015b      	lsls	r3, r3, #5
 8001360:	4413      	add	r3, r2
 8001362:	3310      	adds	r3, #16
 8001364:	ed93 6b00 	vldr	d6, [r3]
 8001368:	4b68      	ldr	r3, [pc, #416]	; (800150c <SendToDAC+0x2f4>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a5e      	ldr	r2, [pc, #376]	; (80014e8 <SendToDAC+0x2d0>)
 800136e:	015b      	lsls	r3, r3, #5
 8001370:	4413      	add	r3, r2
 8001372:	3310      	adds	r3, #16
 8001374:	ed93 7b00 	vldr	d7, [r3]
 8001378:	ee36 7b47 	vsub.f64	d7, d6, d7
 800137c:	eeb0 5bc7 	vabs.f64	d5, d7
 8001380:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001382:	ee07 3a90 	vmov	s15, r3
 8001386:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800138a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800138e:	ed87 7b06 	vstr	d7, [r7, #24]
//
//			n = round(fabs(DAC[r][2] - DAC[last_r][2])/dif3);
//		}
//	}

	DAC[3][0] = DAC[last_r][0];
 8001392:	4b5e      	ldr	r3, [pc, #376]	; (800150c <SendToDAC+0x2f4>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4a54      	ldr	r2, [pc, #336]	; (80014e8 <SendToDAC+0x2d0>)
 8001398:	015b      	lsls	r3, r3, #5
 800139a:	4413      	add	r3, r2
 800139c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013a0:	4951      	ldr	r1, [pc, #324]	; (80014e8 <SendToDAC+0x2d0>)
 80013a2:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	DAC[3][1] = DAC[last_r][1];
 80013a6:	4b59      	ldr	r3, [pc, #356]	; (800150c <SendToDAC+0x2f4>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a4f      	ldr	r2, [pc, #316]	; (80014e8 <SendToDAC+0x2d0>)
 80013ac:	015b      	lsls	r3, r3, #5
 80013ae:	4413      	add	r3, r2
 80013b0:	3308      	adds	r3, #8
 80013b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013b6:	494c      	ldr	r1, [pc, #304]	; (80014e8 <SendToDAC+0x2d0>)
 80013b8:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	DAC[3][2] = DAC[last_r][2];
 80013bc:	4b53      	ldr	r3, [pc, #332]	; (800150c <SendToDAC+0x2f4>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a49      	ldr	r2, [pc, #292]	; (80014e8 <SendToDAC+0x2d0>)
 80013c2:	015b      	lsls	r3, r3, #5
 80013c4:	4413      	add	r3, r2
 80013c6:	3310      	adds	r3, #16
 80013c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013cc:	4946      	ldr	r1, [pc, #280]	; (80014e8 <SendToDAC+0x2d0>)
 80013ce:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
//	t_delay = (DAC[r][3]*1000)/n;	// microsecond [us]
//	t_delay = (1*1000)/n;
//	n_delay = t_delay * 1;		// each 67 step in for equal to 1 us
//	n_delay = 1;

	if(r == 3){
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2b03      	cmp	r3, #3
 80013d6:	d101      	bne.n	80013dc <SendToDAC+0x1c4>
		n = 1;
 80013d8:	2301      	movs	r3, #1
 80013da:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	t0 = HAL_GetTick();
 80013dc:	f001 fbfe 	bl	8002bdc <HAL_GetTick>
 80013e0:	6178      	str	r0, [r7, #20]
	for(int i = 1; i <= n; i++){
 80013e2:	2301      	movs	r3, #1
 80013e4:	63bb      	str	r3, [r7, #56]	; 0x38
 80013e6:	e158      	b.n	800169a <SendToDAC+0x482>

		if(DAC[r][0] > DAC[last_r][0]){
 80013e8:	4a3f      	ldr	r2, [pc, #252]	; (80014e8 <SendToDAC+0x2d0>)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	015b      	lsls	r3, r3, #5
 80013ee:	4413      	add	r3, r2
 80013f0:	ed93 6b00 	vldr	d6, [r3]
 80013f4:	4b45      	ldr	r3, [pc, #276]	; (800150c <SendToDAC+0x2f4>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a3b      	ldr	r2, [pc, #236]	; (80014e8 <SendToDAC+0x2d0>)
 80013fa:	015b      	lsls	r3, r3, #5
 80013fc:	4413      	add	r3, r2
 80013fe:	ed93 7b00 	vldr	d7, [r3]
 8001402:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001406:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800140a:	dd0a      	ble.n	8001422 <SendToDAC+0x20a>
			DAC[3][0] += dif1;
 800140c:	4b36      	ldr	r3, [pc, #216]	; (80014e8 <SendToDAC+0x2d0>)
 800140e:	ed93 6b18 	vldr	d6, [r3, #96]	; 0x60
 8001412:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8001416:	ee36 7b07 	vadd.f64	d7, d6, d7
 800141a:	4b33      	ldr	r3, [pc, #204]	; (80014e8 <SendToDAC+0x2d0>)
 800141c:	ed83 7b18 	vstr	d7, [r3, #96]	; 0x60
 8001420:	e009      	b.n	8001436 <SendToDAC+0x21e>
		}else{
			DAC[3][0] -= dif1;
 8001422:	4b31      	ldr	r3, [pc, #196]	; (80014e8 <SendToDAC+0x2d0>)
 8001424:	ed93 6b18 	vldr	d6, [r3, #96]	; 0x60
 8001428:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 800142c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001430:	4b2d      	ldr	r3, [pc, #180]	; (80014e8 <SendToDAC+0x2d0>)
 8001432:	ed83 7b18 	vstr	d7, [r3, #96]	; 0x60
		}
		if(DAC[r][1] > DAC[last_r][1]){
 8001436:	4a2c      	ldr	r2, [pc, #176]	; (80014e8 <SendToDAC+0x2d0>)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	015b      	lsls	r3, r3, #5
 800143c:	4413      	add	r3, r2
 800143e:	3308      	adds	r3, #8
 8001440:	ed93 6b00 	vldr	d6, [r3]
 8001444:	4b31      	ldr	r3, [pc, #196]	; (800150c <SendToDAC+0x2f4>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a27      	ldr	r2, [pc, #156]	; (80014e8 <SendToDAC+0x2d0>)
 800144a:	015b      	lsls	r3, r3, #5
 800144c:	4413      	add	r3, r2
 800144e:	3308      	adds	r3, #8
 8001450:	ed93 7b00 	vldr	d7, [r3]
 8001454:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001458:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800145c:	dd0a      	ble.n	8001474 <SendToDAC+0x25c>
			DAC[3][1] += dif2;
 800145e:	4b22      	ldr	r3, [pc, #136]	; (80014e8 <SendToDAC+0x2d0>)
 8001460:	ed93 6b1a 	vldr	d6, [r3, #104]	; 0x68
 8001464:	ed97 7b08 	vldr	d7, [r7, #32]
 8001468:	ee36 7b07 	vadd.f64	d7, d6, d7
 800146c:	4b1e      	ldr	r3, [pc, #120]	; (80014e8 <SendToDAC+0x2d0>)
 800146e:	ed83 7b1a 	vstr	d7, [r3, #104]	; 0x68
 8001472:	e009      	b.n	8001488 <SendToDAC+0x270>
		}else{
			DAC[3][1] -= dif2;
 8001474:	4b1c      	ldr	r3, [pc, #112]	; (80014e8 <SendToDAC+0x2d0>)
 8001476:	ed93 6b1a 	vldr	d6, [r3, #104]	; 0x68
 800147a:	ed97 7b08 	vldr	d7, [r7, #32]
 800147e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001482:	4b19      	ldr	r3, [pc, #100]	; (80014e8 <SendToDAC+0x2d0>)
 8001484:	ed83 7b1a 	vstr	d7, [r3, #104]	; 0x68
		}
		if(DAC[r][2] > DAC[last_r][2]){
 8001488:	4a17      	ldr	r2, [pc, #92]	; (80014e8 <SendToDAC+0x2d0>)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	015b      	lsls	r3, r3, #5
 800148e:	4413      	add	r3, r2
 8001490:	3310      	adds	r3, #16
 8001492:	ed93 6b00 	vldr	d6, [r3]
 8001496:	4b1d      	ldr	r3, [pc, #116]	; (800150c <SendToDAC+0x2f4>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4a13      	ldr	r2, [pc, #76]	; (80014e8 <SendToDAC+0x2d0>)
 800149c:	015b      	lsls	r3, r3, #5
 800149e:	4413      	add	r3, r2
 80014a0:	3310      	adds	r3, #16
 80014a2:	ed93 7b00 	vldr	d7, [r3]
 80014a6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80014aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014ae:	dd0a      	ble.n	80014c6 <SendToDAC+0x2ae>
			DAC[3][2] += dif3;
 80014b0:	4b0d      	ldr	r3, [pc, #52]	; (80014e8 <SendToDAC+0x2d0>)
 80014b2:	ed93 6b1c 	vldr	d6, [r3, #112]	; 0x70
 80014b6:	ed97 7b06 	vldr	d7, [r7, #24]
 80014ba:	ee36 7b07 	vadd.f64	d7, d6, d7
 80014be:	4b0a      	ldr	r3, [pc, #40]	; (80014e8 <SendToDAC+0x2d0>)
 80014c0:	ed83 7b1c 	vstr	d7, [r3, #112]	; 0x70
 80014c4:	e009      	b.n	80014da <SendToDAC+0x2c2>
		}else{
			DAC[3][2] -= dif3;
 80014c6:	4b08      	ldr	r3, [pc, #32]	; (80014e8 <SendToDAC+0x2d0>)
 80014c8:	ed93 6b1c 	vldr	d6, [r3, #112]	; 0x70
 80014cc:	ed97 7b06 	vldr	d7, [r7, #24]
 80014d0:	ee36 7b47 	vsub.f64	d7, d6, d7
 80014d4:	4b04      	ldr	r3, [pc, #16]	; (80014e8 <SendToDAC+0x2d0>)
 80014d6:	ed83 7b1c 	vstr	d7, [r3, #112]	; 0x70
		}

		for(int j = 0; j < 3; j++){
 80014da:	2300      	movs	r3, #0
 80014dc:	637b      	str	r3, [r7, #52]	; 0x34
 80014de:	e0d5      	b.n	800168c <SendToDAC+0x474>
 80014e0:	00000000 	.word	0x00000000
 80014e4:	404d0000 	.word	0x404d0000
 80014e8:	24000008 	.word	0x24000008
 80014ec:	3ff00000 	.word	0x3ff00000
 80014f0:	080230c4 	.word	0x080230c4
 80014f4:	24000c80 	.word	0x24000c80
 80014f8:	00010000 	.word	0x00010000
 80014fc:	24000c84 	.word	0x24000c84
 8001500:	24000c60 	.word	0x24000c60
 8001504:	24000c85 	.word	0x24000c85
 8001508:	2400073c 	.word	0x2400073c
 800150c:	24000088 	.word	0x24000088

			  state = 1;
 8001510:	4b74      	ldr	r3, [pc, #464]	; (80016e4 <SendToDAC+0x4cc>)
 8001512:	2201      	movs	r2, #1
 8001514:	601a      	str	r2, [r3, #0]

			  switch(j){
 8001516:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001518:	2b02      	cmp	r3, #2
 800151a:	d03b      	beq.n	8001594 <SendToDAC+0x37c>
 800151c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800151e:	2b02      	cmp	r3, #2
 8001520:	dc52      	bgt.n	80015c8 <SendToDAC+0x3b0>
 8001522:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001524:	2b00      	cmp	r3, #0
 8001526:	d003      	beq.n	8001530 <SendToDAC+0x318>
 8001528:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800152a:	2b01      	cmp	r3, #1
 800152c:	d018      	beq.n	8001560 <SendToDAC+0x348>
 800152e:	e04b      	b.n	80015c8 <SendToDAC+0x3b0>

			  case 0:
				  if(DAC[3][j] >= 0){
 8001530:	4a6d      	ldr	r2, [pc, #436]	; (80016e8 <SendToDAC+0x4d0>)
 8001532:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001534:	330c      	adds	r3, #12
 8001536:	00db      	lsls	r3, r3, #3
 8001538:	4413      	add	r3, r2
 800153a:	ed93 7b00 	vldr	d7, [r3]
 800153e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001542:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001546:	db05      	blt.n	8001554 <SendToDAC+0x33c>
					  HAL_GPIO_WritePin(DIR1_GPIO_Port, DIR1_Pin, GPIO_PIN_SET);
 8001548:	2201      	movs	r2, #1
 800154a:	2180      	movs	r1, #128	; 0x80
 800154c:	4867      	ldr	r0, [pc, #412]	; (80016ec <SendToDAC+0x4d4>)
 800154e:	f003 ff9f 	bl	8005490 <HAL_GPIO_WritePin>
				  }else{
					  HAL_GPIO_WritePin(DIR1_GPIO_Port, DIR1_Pin, GPIO_PIN_RESET);
				  }
				  break;
 8001552:	e039      	b.n	80015c8 <SendToDAC+0x3b0>
					  HAL_GPIO_WritePin(DIR1_GPIO_Port, DIR1_Pin, GPIO_PIN_RESET);
 8001554:	2200      	movs	r2, #0
 8001556:	2180      	movs	r1, #128	; 0x80
 8001558:	4864      	ldr	r0, [pc, #400]	; (80016ec <SendToDAC+0x4d4>)
 800155a:	f003 ff99 	bl	8005490 <HAL_GPIO_WritePin>
				  break;
 800155e:	e033      	b.n	80015c8 <SendToDAC+0x3b0>
			  case 1:
				  if(DAC[3][j] >= 0){
 8001560:	4a61      	ldr	r2, [pc, #388]	; (80016e8 <SendToDAC+0x4d0>)
 8001562:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001564:	330c      	adds	r3, #12
 8001566:	00db      	lsls	r3, r3, #3
 8001568:	4413      	add	r3, r2
 800156a:	ed93 7b00 	vldr	d7, [r3]
 800156e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001572:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001576:	db06      	blt.n	8001586 <SendToDAC+0x36e>
					  HAL_GPIO_WritePin(GPIOB, DIR2_Pin, GPIO_PIN_SET);
 8001578:	2201      	movs	r2, #1
 800157a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800157e:	485c      	ldr	r0, [pc, #368]	; (80016f0 <SendToDAC+0x4d8>)
 8001580:	f003 ff86 	bl	8005490 <HAL_GPIO_WritePin>
				  }else{
					  HAL_GPIO_WritePin(GPIOB, DIR2_Pin, GPIO_PIN_RESET);
				  }
				  break;
 8001584:	e020      	b.n	80015c8 <SendToDAC+0x3b0>
					  HAL_GPIO_WritePin(GPIOB, DIR2_Pin, GPIO_PIN_RESET);
 8001586:	2200      	movs	r2, #0
 8001588:	f44f 7100 	mov.w	r1, #512	; 0x200
 800158c:	4858      	ldr	r0, [pc, #352]	; (80016f0 <SendToDAC+0x4d8>)
 800158e:	f003 ff7f 	bl	8005490 <HAL_GPIO_WritePin>
				  break;
 8001592:	e019      	b.n	80015c8 <SendToDAC+0x3b0>
			  case 2:
				  if(DAC[3][j] >= 0){
 8001594:	4a54      	ldr	r2, [pc, #336]	; (80016e8 <SendToDAC+0x4d0>)
 8001596:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001598:	330c      	adds	r3, #12
 800159a:	00db      	lsls	r3, r3, #3
 800159c:	4413      	add	r3, r2
 800159e:	ed93 7b00 	vldr	d7, [r3]
 80015a2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80015a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015aa:	db06      	blt.n	80015ba <SendToDAC+0x3a2>
					  HAL_GPIO_WritePin(GPIOB, DIR3_Pin, GPIO_PIN_SET);
 80015ac:	2201      	movs	r2, #1
 80015ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015b2:	484f      	ldr	r0, [pc, #316]	; (80016f0 <SendToDAC+0x4d8>)
 80015b4:	f003 ff6c 	bl	8005490 <HAL_GPIO_WritePin>
				  }else{
					  HAL_GPIO_WritePin(GPIOB, DIR3_Pin, GPIO_PIN_RESET);
				  }
				  break;
 80015b8:	e005      	b.n	80015c6 <SendToDAC+0x3ae>
					  HAL_GPIO_WritePin(GPIOB, DIR3_Pin, GPIO_PIN_RESET);
 80015ba:	2200      	movs	r2, #0
 80015bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015c0:	484b      	ldr	r0, [pc, #300]	; (80016f0 <SendToDAC+0x4d8>)
 80015c2:	f003 ff65 	bl	8005490 <HAL_GPIO_WritePin>
				  break;
 80015c6:	bf00      	nop
			  }

			  if(fabs(DAC[3][j]) == v_ref){
 80015c8:	4a47      	ldr	r2, [pc, #284]	; (80016e8 <SendToDAC+0x4d0>)
 80015ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015cc:	330c      	adds	r3, #12
 80015ce:	00db      	lsls	r3, r3, #3
 80015d0:	4413      	add	r3, r2
 80015d2:	ed93 7b00 	vldr	d7, [r3]
 80015d6:	eeb0 7bc7 	vabs.f64	d7, d7
 80015da:	eeb0 6b08 	vmov.f64	d6, #8	; 0x40400000  3.0
 80015de:	eeb4 7b46 	vcmp.f64	d7, d6
 80015e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015e6:	d104      	bne.n	80015f2 <SendToDAC+0x3da>

				  d_in = 0xffff;
 80015e8:	4b42      	ldr	r3, [pc, #264]	; (80016f4 <SendToDAC+0x4dc>)
 80015ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015ee:	801a      	strh	r2, [r3, #0]
 80015f0:	e020      	b.n	8001634 <SendToDAC+0x41c>
			  }else{

				  d_in = abs(round((DAC[3][j]/v_ref) * max_dec));
 80015f2:	4a3d      	ldr	r2, [pc, #244]	; (80016e8 <SendToDAC+0x4d0>)
 80015f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015f6:	330c      	adds	r3, #12
 80015f8:	00db      	lsls	r3, r3, #3
 80015fa:	4413      	add	r3, r2
 80015fc:	ed93 7b00 	vldr	d7, [r3]
 8001600:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 8001604:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8001608:	eddf 7a3b 	vldr	s15, [pc, #236]	; 80016f8 <SendToDAC+0x4e0>
 800160c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001610:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001614:	eeb0 0b47 	vmov.f64	d0, d7
 8001618:	f021 fcbc 	bl	8022f94 <round>
 800161c:	eeb0 7b40 	vmov.f64	d7, d0
 8001620:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001624:	ee17 3a90 	vmov	r3, s15
 8001628:	2b00      	cmp	r3, #0
 800162a:	bfb8      	it	lt
 800162c:	425b      	neglt	r3, r3
 800162e:	b29a      	uxth	r2, r3
 8001630:	4b30      	ldr	r3, [pc, #192]	; (80016f4 <SendToDAC+0x4dc>)
 8001632:	801a      	strh	r2, [r3, #0]
			  }

			  spi_buf[0] = 0x00;
 8001634:	4b31      	ldr	r3, [pc, #196]	; (80016fc <SendToDAC+0x4e4>)
 8001636:	2200      	movs	r2, #0
 8001638:	701a      	strb	r2, [r3, #0]
			  spi_buf[1] = ((uint8_t*)&d_in)[1];
 800163a:	4b31      	ldr	r3, [pc, #196]	; (8001700 <SendToDAC+0x4e8>)
 800163c:	781a      	ldrb	r2, [r3, #0]
 800163e:	4b2f      	ldr	r3, [pc, #188]	; (80016fc <SendToDAC+0x4e4>)
 8001640:	705a      	strb	r2, [r3, #1]
			  spi_buf[2] = ((uint8_t*)&d_in)[0];
 8001642:	4b2c      	ldr	r3, [pc, #176]	; (80016f4 <SendToDAC+0x4dc>)
 8001644:	781a      	ldrb	r2, [r3, #0]
 8001646:	4b2d      	ldr	r3, [pc, #180]	; (80016fc <SendToDAC+0x4e4>)
 8001648:	709a      	strb	r2, [r3, #2]
			  // send value to DAC
			  if(j == 2){
 800164a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800164c:	2b02      	cmp	r3, #2
 800164e:	d105      	bne.n	800165c <SendToDAC+0x444>
				  HAL_GPIO_WritePin(CS3_GPIO_Port, CS3_Pin, RESET);
 8001650:	2200      	movs	r2, #0
 8001652:	2102      	movs	r1, #2
 8001654:	482b      	ldr	r0, [pc, #172]	; (8001704 <SendToDAC+0x4ec>)
 8001656:	f003 ff1b 	bl	8005490 <HAL_GPIO_WritePin>
 800165a:	e00a      	b.n	8001672 <SendToDAC+0x45a>

			  }else{
				  HAL_GPIO_WritePin(GPIOE, cs[j], RESET);
 800165c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800165e:	005b      	lsls	r3, r3, #1
 8001660:	3340      	adds	r3, #64	; 0x40
 8001662:	443b      	add	r3, r7
 8001664:	f833 3c38 	ldrh.w	r3, [r3, #-56]
 8001668:	2200      	movs	r2, #0
 800166a:	4619      	mov	r1, r3
 800166c:	4826      	ldr	r0, [pc, #152]	; (8001708 <SendToDAC+0x4f0>)
 800166e:	f003 ff0f 	bl	8005490 <HAL_GPIO_WritePin>
			  }
			  HAL_SPI_Transmit_IT(&hspi4, (uint8_t *)&spi_buf, 3);
 8001672:	2203      	movs	r2, #3
 8001674:	4921      	ldr	r1, [pc, #132]	; (80016fc <SendToDAC+0x4e4>)
 8001676:	4825      	ldr	r0, [pc, #148]	; (800170c <SendToDAC+0x4f4>)
 8001678:	f006 fbd8 	bl	8007e2c <HAL_SPI_Transmit_IT>

			  while(state){}
 800167c:	bf00      	nop
 800167e:	4b19      	ldr	r3, [pc, #100]	; (80016e4 <SendToDAC+0x4cc>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d1fb      	bne.n	800167e <SendToDAC+0x466>
		for(int j = 0; j < 3; j++){
 8001686:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001688:	3301      	adds	r3, #1
 800168a:	637b      	str	r3, [r7, #52]	; 0x34
 800168c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800168e:	2b02      	cmp	r3, #2
 8001690:	f77f af3e 	ble.w	8001510 <SendToDAC+0x2f8>
	for(int i = 1; i <= n; i++){
 8001694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001696:	3301      	adds	r3, #1
 8001698:	63bb      	str	r3, [r7, #56]	; 0x38
 800169a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800169c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800169e:	429a      	cmp	r2, r3
 80016a0:	f77f aea2 	ble.w	80013e8 <SendToDAC+0x1d0>

		// make delay in us
//		for(int k = 0; k < n_delay; k++){}
	}

	t1 = HAL_GetTick();
 80016a4:	f001 fa9a 	bl	8002bdc <HAL_GetTick>
 80016a8:	6138      	str	r0, [r7, #16]
	t = t1 - t0;
 80016aa:	693a      	ldr	r2, [r7, #16]
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	1ad3      	subs	r3, r2, r3
 80016b0:	60fb      	str	r3, [r7, #12]
	uart_buf_len = sprintf(uart_bufT, "different time is: %lu ms; NO. steps are: %d\r\n", t, n);
 80016b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80016b4:	68fa      	ldr	r2, [r7, #12]
 80016b6:	4916      	ldr	r1, [pc, #88]	; (8001710 <SendToDAC+0x4f8>)
 80016b8:	4816      	ldr	r0, [pc, #88]	; (8001714 <SendToDAC+0x4fc>)
 80016ba:	f01e fedb 	bl	8020474 <siprintf>
 80016be:	4603      	mov	r3, r0
 80016c0:	4a15      	ldr	r2, [pc, #84]	; (8001718 <SendToDAC+0x500>)
 80016c2:	6013      	str	r3, [r2, #0]
	HAL_UART_Transmit(&huart3, (uint8_t*)uart_bufT, uart_buf_len, 100);
 80016c4:	4b14      	ldr	r3, [pc, #80]	; (8001718 <SendToDAC+0x500>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	b29a      	uxth	r2, r3
 80016ca:	2364      	movs	r3, #100	; 0x64
 80016cc:	4911      	ldr	r1, [pc, #68]	; (8001714 <SendToDAC+0x4fc>)
 80016ce:	4813      	ldr	r0, [pc, #76]	; (800171c <SendToDAC+0x504>)
 80016d0:	f007 fad4 	bl	8008c7c <HAL_UART_Transmit>

	last_r = r;
 80016d4:	4a12      	ldr	r2, [pc, #72]	; (8001720 <SendToDAC+0x508>)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6013      	str	r3, [r2, #0]
}
 80016da:	bf00      	nop
 80016dc:	3740      	adds	r7, #64	; 0x40
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	24000c80 	.word	0x24000c80
 80016e8:	24000008 	.word	0x24000008
 80016ec:	58020c00 	.word	0x58020c00
 80016f0:	58020400 	.word	0x58020400
 80016f4:	24000c84 	.word	0x24000c84
 80016f8:	00010000 	.word	0x00010000
 80016fc:	24000c60 	.word	0x24000c60
 8001700:	24000c85 	.word	0x24000c85
 8001704:	58021400 	.word	0x58021400
 8001708:	58021000 	.word	0x58021000
 800170c:	2400073c 	.word	0x2400073c
 8001710:	08023094 	.word	0x08023094
 8001714:	24000874 	.word	0x24000874
 8001718:	24000c5c 	.word	0x24000c5c
 800171c:	240007c4 	.word	0x240007c4
 8001720:	24000088 	.word	0x24000088

08001724 <AcceptanceNewClient>:

void AcceptanceNewClient(int * argument)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b0b8      	sub	sp, #224	; 0xe0
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]

	char msg[200] = {};
 800172c:	2300      	movs	r3, #0
 800172e:	60fb      	str	r3, [r7, #12]
 8001730:	f107 0310 	add.w	r3, r7, #16
 8001734:	22c4      	movs	r2, #196	; 0xc4
 8001736:	2100      	movs	r1, #0
 8001738:	4618      	mov	r0, r3
 800173a:	f01e ff28 	bl	802058e <memset>
	int newVal = 0, state = 1;
 800173e:	2300      	movs	r3, #0
 8001740:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8001744:	2301      	movs	r3, #1
 8001746:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	int conn = *argument;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

	while(1)
	{

		if(newVal == 3){
 8001752:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001756:	2b03      	cmp	r3, #3
 8001758:	d116      	bne.n	8001788 <AcceptanceNewClient+0x64>

			close(conn);
 800175a:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 800175e:	f00e fdcb 	bl	80102f8 <lwip_close>
			uart_buf_len = sprintf(uart_bufT, "finished! \r\n");
 8001762:	4925      	ldr	r1, [pc, #148]	; (80017f8 <AcceptanceNewClient+0xd4>)
 8001764:	4825      	ldr	r0, [pc, #148]	; (80017fc <AcceptanceNewClient+0xd8>)
 8001766:	f01e fe85 	bl	8020474 <siprintf>
 800176a:	4603      	mov	r3, r0
 800176c:	4a24      	ldr	r2, [pc, #144]	; (8001800 <AcceptanceNewClient+0xdc>)
 800176e:	6013      	str	r3, [r2, #0]
			HAL_UART_Transmit(&huart3, (uint8_t*)uart_bufT, uart_buf_len, 100);
 8001770:	4b23      	ldr	r3, [pc, #140]	; (8001800 <AcceptanceNewClient+0xdc>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	b29a      	uxth	r2, r3
 8001776:	2364      	movs	r3, #100	; 0x64
 8001778:	4920      	ldr	r1, [pc, #128]	; (80017fc <AcceptanceNewClient+0xd8>)
 800177a:	4822      	ldr	r0, [pc, #136]	; (8001804 <AcceptanceNewClient+0xe0>)
 800177c:	f007 fa7e 	bl	8008c7c <HAL_UART_Transmit>
			osThreadTerminate(NULL);
 8001780:	2000      	movs	r0, #0
 8001782:	f009 f870 	bl	800a866 <osThreadTerminate>
 8001786:	e033      	b.n	80017f0 <AcceptanceNewClient+0xcc>
//			osThreadSuspend(NULL);
		}else if(newVal == 2){
 8001788:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800178c:	2b02      	cmp	r3, #2
 800178e:	d106      	bne.n	800179e <AcceptanceNewClient+0x7a>

			last_r = 3;
 8001790:	4b1d      	ldr	r3, [pc, #116]	; (8001808 <AcceptanceNewClient+0xe4>)
 8001792:	2203      	movs	r2, #3
 8001794:	601a      	str	r2, [r3, #0]
			newVal = 0;
 8001796:	2300      	movs	r3, #0
 8001798:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800179c:	e028      	b.n	80017f0 <AcceptanceNewClient+0xcc>
		}else{

			memset(msg, 0, sizeof msg);
 800179e:	f107 030c 	add.w	r3, r7, #12
 80017a2:	22c8      	movs	r2, #200	; 0xc8
 80017a4:	2100      	movs	r1, #0
 80017a6:	4618      	mov	r0, r3
 80017a8:	f01e fef1 	bl	802058e <memset>
			state = read(conn, (char*)msg, 200);
 80017ac:	f107 030c 	add.w	r3, r7, #12
 80017b0:	22c8      	movs	r2, #200	; 0xc8
 80017b2:	4619      	mov	r1, r3
 80017b4:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 80017b8:	f00f f95e 	bl	8010a78 <lwip_read>
 80017bc:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
			newVal = ExtractMessage(msg);
 80017c0:	f107 030c 	add.w	r3, r7, #12
 80017c4:	4618      	mov	r0, r3
 80017c6:	f000 f821 	bl	800180c <ExtractMessage>
 80017ca:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
			send(conn, (char*)uart_bufT, strlen(uart_bufT), 0);	// we have to use send instead of write for avoiding of crash
 80017ce:	480b      	ldr	r0, [pc, #44]	; (80017fc <AcceptanceNewClient+0xd8>)
 80017d0:	f7fe fde6 	bl	80003a0 <strlen>
 80017d4:	4602      	mov	r2, r0
 80017d6:	2300      	movs	r3, #0
 80017d8:	4908      	ldr	r1, [pc, #32]	; (80017fc <AcceptanceNewClient+0xd8>)
 80017da:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 80017de:	f00f f961 	bl	8010aa4 <lwip_send>

			if(state <= 0){
 80017e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	dc02      	bgt.n	80017f0 <AcceptanceNewClient+0xcc>

				newVal = 3;
 80017ea:	2303      	movs	r3, #3
 80017ec:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
			}
		}
		osDelay(100);
 80017f0:	2064      	movs	r0, #100	; 0x64
 80017f2:	f009 f844 	bl	800a87e <osDelay>
		if(newVal == 3){
 80017f6:	e7ac      	b.n	8001752 <AcceptanceNewClient+0x2e>
 80017f8:	080230c8 	.word	0x080230c8
 80017fc:	24000874 	.word	0x24000874
 8001800:	24000c5c 	.word	0x24000c5c
 8001804:	240007c4 	.word	0x240007c4
 8001808:	24000088 	.word	0x24000088

0800180c <ExtractMessage>:
	}
}

int ExtractMessage(char* msg){
 800180c:	b580      	push	{r7, lr}
 800180e:	b0be      	sub	sp, #248	; 0xf8
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]

	char temp[100] = {};
 8001814:	2300      	movs	r3, #0
 8001816:	66bb      	str	r3, [r7, #104]	; 0x68
 8001818:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800181c:	2260      	movs	r2, #96	; 0x60
 800181e:	2100      	movs	r1, #0
 8001820:	4618      	mov	r0, r3
 8001822:	f01e feb4 	bl	802058e <memset>
	int j = 0, k = 0, f1 = 1, f2 = 1, f3 = 0;
 8001826:	2300      	movs	r3, #0
 8001828:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800182c:	2300      	movs	r3, #0
 800182e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8001832:	2301      	movs	r3, #1
 8001834:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001838:	2301      	movs	r3, #1
 800183a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800183e:	2300      	movs	r3, #0
 8001840:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
	double temp_dac[3][4];

	for(int a = 0; a < 3; a++){
 8001844:	2300      	movs	r3, #0
 8001846:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800184a:	e028      	b.n	800189e <ExtractMessage+0x92>
		for(int b = 0; b < 4; b++){
 800184c:	2300      	movs	r3, #0
 800184e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001852:	e01b      	b.n	800188c <ExtractMessage+0x80>
			temp_dac[a][b] = DAC[a][b];
 8001854:	49c5      	ldr	r1, [pc, #788]	; (8001b6c <ExtractMessage+0x360>)
 8001856:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800185a:	009a      	lsls	r2, r3, #2
 800185c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001860:	4413      	add	r3, r2
 8001862:	00db      	lsls	r3, r3, #3
 8001864:	440b      	add	r3, r1
 8001866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800186a:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 800186e:	0088      	lsls	r0, r1, #2
 8001870:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 8001874:	4401      	add	r1, r0
 8001876:	00c9      	lsls	r1, r1, #3
 8001878:	31f8      	adds	r1, #248	; 0xf8
 800187a:	4439      	add	r1, r7
 800187c:	39f0      	subs	r1, #240	; 0xf0
 800187e:	e9c1 2300 	strd	r2, r3, [r1]
		for(int b = 0; b < 4; b++){
 8001882:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001886:	3301      	adds	r3, #1
 8001888:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800188c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001890:	2b03      	cmp	r3, #3
 8001892:	dddf      	ble.n	8001854 <ExtractMessage+0x48>
	for(int a = 0; a < 3; a++){
 8001894:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001898:	3301      	adds	r3, #1
 800189a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800189e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80018a2:	2b02      	cmp	r3, #2
 80018a4:	ddd2      	ble.n	800184c <ExtractMessage+0x40>
		}
	}

	for(int i = 0; i < strlen(msg); i++){
 80018a6:	2300      	movs	r3, #0
 80018a8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80018ac:	e39e      	b.n	8001fec <ExtractMessage+0x7e0>

		if(msg[i] == ':'){
 80018ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80018b2:	687a      	ldr	r2, [r7, #4]
 80018b4:	4413      	add	r3, r2
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	2b3a      	cmp	r3, #58	; 0x3a
 80018ba:	f040 8327 	bne.w	8001f0c <ExtractMessage+0x700>

			if(strcmp(temp, "DAC") != 0){
 80018be:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80018c2:	49ab      	ldr	r1, [pc, #684]	; (8001b70 <ExtractMessage+0x364>)
 80018c4:	4618      	mov	r0, r3
 80018c6:	f7fe fd0b 	bl	80002e0 <strcmp>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d013      	beq.n	80018f8 <ExtractMessage+0xec>

				uart_buf_len = sprintf(uart_bufT, "wrong msg: %s\r\n\n%s\r\n", (char*)temp, (char*)help);
 80018d0:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80018d4:	4ba7      	ldr	r3, [pc, #668]	; (8001b74 <ExtractMessage+0x368>)
 80018d6:	49a8      	ldr	r1, [pc, #672]	; (8001b78 <ExtractMessage+0x36c>)
 80018d8:	48a8      	ldr	r0, [pc, #672]	; (8001b7c <ExtractMessage+0x370>)
 80018da:	f01e fdcb 	bl	8020474 <siprintf>
 80018de:	4603      	mov	r3, r0
 80018e0:	4aa7      	ldr	r2, [pc, #668]	; (8001b80 <ExtractMessage+0x374>)
 80018e2:	6013      	str	r3, [r2, #0]
				HAL_UART_Transmit(&huart3, (uint8_t*)uart_bufT, uart_buf_len, 100);
 80018e4:	4ba6      	ldr	r3, [pc, #664]	; (8001b80 <ExtractMessage+0x374>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	b29a      	uxth	r2, r3
 80018ea:	2364      	movs	r3, #100	; 0x64
 80018ec:	49a3      	ldr	r1, [pc, #652]	; (8001b7c <ExtractMessage+0x370>)
 80018ee:	48a5      	ldr	r0, [pc, #660]	; (8001b84 <ExtractMessage+0x378>)
 80018f0:	f007 f9c4 	bl	8008c7c <HAL_UART_Transmit>
				return 0;
 80018f4:	2300      	movs	r3, #0
 80018f6:	e395      	b.n	8002024 <ExtractMessage+0x818>
			}else{

				f1 = 1;
 80018f8:	2301      	movs	r3, #1
 80018fa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
				i++;	// for removing first space after DAC:
 80018fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001902:	3301      	adds	r3, #1
 8001904:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
				j = 0;
 8001908:	2300      	movs	r3, #0
 800190a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
				memset(temp, 0, sizeof temp);
 800190e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001912:	2264      	movs	r2, #100	; 0x64
 8001914:	2100      	movs	r1, #0
 8001916:	4618      	mov	r0, r3
 8001918:	f01e fe39 	bl	802058e <memset>
				while(f1){
 800191c:	e2e0      	b.n	8001ee0 <ExtractMessage+0x6d4>

					i++;
 800191e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001922:	3301      	adds	r3, #1
 8001924:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

					if(msg[i] == ' ' || msg[i] == ':' || msg[i] == ';' || i >= strlen(msg)){
 8001928:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800192c:	687a      	ldr	r2, [r7, #4]
 800192e:	4413      	add	r3, r2
 8001930:	781b      	ldrb	r3, [r3, #0]
 8001932:	2b20      	cmp	r3, #32
 8001934:	d016      	beq.n	8001964 <ExtractMessage+0x158>
 8001936:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800193a:	687a      	ldr	r2, [r7, #4]
 800193c:	4413      	add	r3, r2
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	2b3a      	cmp	r3, #58	; 0x3a
 8001942:	d00f      	beq.n	8001964 <ExtractMessage+0x158>
 8001944:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001948:	687a      	ldr	r2, [r7, #4]
 800194a:	4413      	add	r3, r2
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	2b3b      	cmp	r3, #59	; 0x3b
 8001950:	d008      	beq.n	8001964 <ExtractMessage+0x158>
 8001952:	6878      	ldr	r0, [r7, #4]
 8001954:	f7fe fd24 	bl	80003a0 <strlen>
 8001958:	4602      	mov	r2, r0
 800195a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800195e:	429a      	cmp	r2, r3
 8001960:	f200 8273 	bhi.w	8001e4a <ExtractMessage+0x63e>

						f2 = 1;
 8001964:	2301      	movs	r3, #1
 8001966:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec

						if(strcmp(temp, "000") == 0){
 800196a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800196e:	4986      	ldr	r1, [pc, #536]	; (8001b88 <ExtractMessage+0x37c>)
 8001970:	4618      	mov	r0, r3
 8001972:	f7fe fcb5 	bl	80002e0 <strcmp>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	f040 80b6 	bne.w	8001aea <ExtractMessage+0x2de>

							j = 0;
 800197e:	2300      	movs	r3, #0
 8001980:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
							memset(temp, 0, sizeof temp);
 8001984:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001988:	2264      	movs	r2, #100	; 0x64
 800198a:	2100      	movs	r1, #0
 800198c:	4618      	mov	r0, r3
 800198e:	f01e fdfe 	bl	802058e <memset>

							while(f2){
 8001992:	e0a4      	b.n	8001ade <ExtractMessage+0x2d2>

								i++;
 8001994:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001998:	3301      	adds	r3, #1
 800199a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

								if(msg[i] == ';'){
 800199e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80019a2:	687a      	ldr	r2, [r7, #4]
 80019a4:	4413      	add	r3, r2
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	2b3b      	cmp	r3, #59	; 0x3b
 80019aa:	d11e      	bne.n	80019ea <ExtractMessage+0x1de>

									temp_dac[0][k] = atof(temp);
 80019ac:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80019b0:	4618      	mov	r0, r3
 80019b2:	f01c ffa9 	bl	801e908 <atof>
 80019b6:	eeb0 7b40 	vmov.f64	d7, d0
 80019ba:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80019be:	00db      	lsls	r3, r3, #3
 80019c0:	33f8      	adds	r3, #248	; 0xf8
 80019c2:	443b      	add	r3, r7
 80019c4:	3bf0      	subs	r3, #240	; 0xf0
 80019c6:	ed83 7b00 	vstr	d7, [r3]
									k++;
 80019ca:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80019ce:	3301      	adds	r3, #1
 80019d0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
									j = 0;
 80019d4:	2300      	movs	r3, #0
 80019d6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
									memset(temp, 0, sizeof temp);
 80019da:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80019de:	2264      	movs	r2, #100	; 0x64
 80019e0:	2100      	movs	r1, #0
 80019e2:	4618      	mov	r0, r3
 80019e4:	f01e fdd3 	bl	802058e <memset>
 80019e8:	e050      	b.n	8001a8c <ExtractMessage+0x280>
								}else if(i >= strlen(msg)){
 80019ea:	6878      	ldr	r0, [r7, #4]
 80019ec:	f7fe fcd8 	bl	80003a0 <strlen>
 80019f0:	4602      	mov	r2, r0
 80019f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80019f6:	429a      	cmp	r2, r3
 80019f8:	d836      	bhi.n	8001a68 <ExtractMessage+0x25c>

									if(k == 3){
 80019fa:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80019fe:	2b03      	cmp	r3, #3
 8001a00:	d11e      	bne.n	8001a40 <ExtractMessage+0x234>

										temp_dac[0][k] = atof(temp);
 8001a02:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001a06:	4618      	mov	r0, r3
 8001a08:	f01c ff7e 	bl	801e908 <atof>
 8001a0c:	eeb0 7b40 	vmov.f64	d7, d0
 8001a10:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001a14:	00db      	lsls	r3, r3, #3
 8001a16:	33f8      	adds	r3, #248	; 0xf8
 8001a18:	443b      	add	r3, r7
 8001a1a:	3bf0      	subs	r3, #240	; 0xf0
 8001a1c:	ed83 7b00 	vstr	d7, [r3]
										k++;
 8001a20:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001a24:	3301      	adds	r3, #1
 8001a26:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
										j = 0;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
										memset(temp, 0, sizeof temp);
 8001a30:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001a34:	2264      	movs	r2, #100	; 0x64
 8001a36:	2100      	movs	r1, #0
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f01e fda8 	bl	802058e <memset>
 8001a3e:	e025      	b.n	8001a8c <ExtractMessage+0x280>
									}else{

										uart_buf_len = sprintf(uart_bufT, "the format is wrong: %s\r\n\n%s\r\n", (char*)temp, (char*)help);
 8001a40:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8001a44:	4b4b      	ldr	r3, [pc, #300]	; (8001b74 <ExtractMessage+0x368>)
 8001a46:	4951      	ldr	r1, [pc, #324]	; (8001b8c <ExtractMessage+0x380>)
 8001a48:	484c      	ldr	r0, [pc, #304]	; (8001b7c <ExtractMessage+0x370>)
 8001a4a:	f01e fd13 	bl	8020474 <siprintf>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	4a4b      	ldr	r2, [pc, #300]	; (8001b80 <ExtractMessage+0x374>)
 8001a52:	6013      	str	r3, [r2, #0]
										HAL_UART_Transmit(&huart3, (uint8_t*)uart_bufT, uart_buf_len, 100);
 8001a54:	4b4a      	ldr	r3, [pc, #296]	; (8001b80 <ExtractMessage+0x374>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	b29a      	uxth	r2, r3
 8001a5a:	2364      	movs	r3, #100	; 0x64
 8001a5c:	4947      	ldr	r1, [pc, #284]	; (8001b7c <ExtractMessage+0x370>)
 8001a5e:	4849      	ldr	r0, [pc, #292]	; (8001b84 <ExtractMessage+0x378>)
 8001a60:	f007 f90c 	bl	8008c7c <HAL_UART_Transmit>
										return 0;
 8001a64:	2300      	movs	r3, #0
 8001a66:	e2dd      	b.n	8002024 <ExtractMessage+0x818>
									}
								}else{

									temp[j] = msg[i];
 8001a68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001a6c:	687a      	ldr	r2, [r7, #4]
 8001a6e:	4413      	add	r3, r2
 8001a70:	7819      	ldrb	r1, [r3, #0]
 8001a72:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8001a76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001a7a:	4413      	add	r3, r2
 8001a7c:	460a      	mov	r2, r1
 8001a7e:	701a      	strb	r2, [r3, #0]
									j++;
 8001a80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001a84:	3301      	adds	r3, #1
 8001a86:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
									continue;
 8001a8a:	e028      	b.n	8001ade <ExtractMessage+0x2d2>
								}
								if(k > 3){
 8001a8c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001a90:	2b03      	cmp	r3, #3
 8001a92:	dd24      	ble.n	8001ade <ExtractMessage+0x2d2>

									f2 = 0;
 8001a94:	2300      	movs	r3, #0
 8001a96:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
									f3 = 1;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
									k = 0;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0

									for(int m = 0; m < 4; m++){
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001aac:	e013      	b.n	8001ad6 <ExtractMessage+0x2ca>
										DAC[0][m] = temp_dac[0][m];
 8001aae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001ab2:	00db      	lsls	r3, r3, #3
 8001ab4:	33f8      	adds	r3, #248	; 0xf8
 8001ab6:	443b      	add	r3, r7
 8001ab8:	3bf0      	subs	r3, #240	; 0xf0
 8001aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001abe:	482b      	ldr	r0, [pc, #172]	; (8001b6c <ExtractMessage+0x360>)
 8001ac0:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8001ac4:	00c9      	lsls	r1, r1, #3
 8001ac6:	4401      	add	r1, r0
 8001ac8:	e9c1 2300 	strd	r2, r3, [r1]
									for(int m = 0; m < 4; m++){
 8001acc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001ad0:	3301      	adds	r3, #1
 8001ad2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001ad6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001ada:	2b03      	cmp	r3, #3
 8001adc:	dde7      	ble.n	8001aae <ExtractMessage+0x2a2>
							while(f2){
 8001ade:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	f47f af56 	bne.w	8001994 <ExtractMessage+0x188>
						if(strcmp(temp, "000") == 0){
 8001ae8:	e1c1      	b.n	8001e6e <ExtractMessage+0x662>
									}
								}
							}
						}else if(strcmp(temp, "001") == 0){
 8001aea:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001aee:	4928      	ldr	r1, [pc, #160]	; (8001b90 <ExtractMessage+0x384>)
 8001af0:	4618      	mov	r0, r3
 8001af2:	f7fe fbf5 	bl	80002e0 <strcmp>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	f040 80ce 	bne.w	8001c9a <ExtractMessage+0x48e>

							j = 0;
 8001afe:	2300      	movs	r3, #0
 8001b00:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
							memset(temp, 0, sizeof temp);
 8001b04:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001b08:	2264      	movs	r2, #100	; 0x64
 8001b0a:	2100      	movs	r1, #0
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f01e fd3e 	bl	802058e <memset>

							while(f2){
 8001b12:	e0bc      	b.n	8001c8e <ExtractMessage+0x482>

								i++;
 8001b14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001b18:	3301      	adds	r3, #1
 8001b1a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

								if(msg[i] == ';'){
 8001b1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001b22:	687a      	ldr	r2, [r7, #4]
 8001b24:	4413      	add	r3, r2
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	2b3b      	cmp	r3, #59	; 0x3b
 8001b2a:	d133      	bne.n	8001b94 <ExtractMessage+0x388>

									temp_dac[1][k] = atof(temp);
 8001b2c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001b30:	4618      	mov	r0, r3
 8001b32:	f01c fee9 	bl	801e908 <atof>
 8001b36:	eeb0 7b40 	vmov.f64	d7, d0
 8001b3a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001b3e:	3304      	adds	r3, #4
 8001b40:	00db      	lsls	r3, r3, #3
 8001b42:	33f8      	adds	r3, #248	; 0xf8
 8001b44:	443b      	add	r3, r7
 8001b46:	3bf0      	subs	r3, #240	; 0xf0
 8001b48:	ed83 7b00 	vstr	d7, [r3]
									k++;
 8001b4c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001b50:	3301      	adds	r3, #1
 8001b52:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
									j = 0;
 8001b56:	2300      	movs	r3, #0
 8001b58:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
									memset(temp, 0, sizeof temp);
 8001b5c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001b60:	2264      	movs	r2, #100	; 0x64
 8001b62:	2100      	movs	r1, #0
 8001b64:	4618      	mov	r0, r3
 8001b66:	f01e fd12 	bl	802058e <memset>
 8001b6a:	e065      	b.n	8001c38 <ExtractMessage+0x42c>
 8001b6c:	24000008 	.word	0x24000008
 8001b70:	080230d8 	.word	0x080230d8
 8001b74:	2400008c 	.word	0x2400008c
 8001b78:	080230dc 	.word	0x080230dc
 8001b7c:	24000874 	.word	0x24000874
 8001b80:	24000c5c 	.word	0x24000c5c
 8001b84:	240007c4 	.word	0x240007c4
 8001b88:	080230f4 	.word	0x080230f4
 8001b8c:	080230f8 	.word	0x080230f8
 8001b90:	08023118 	.word	0x08023118
								}else if(i >= strlen(msg)){
 8001b94:	6878      	ldr	r0, [r7, #4]
 8001b96:	f7fe fc03 	bl	80003a0 <strlen>
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	d837      	bhi.n	8001c14 <ExtractMessage+0x408>

									if(k == 3){
 8001ba4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001ba8:	2b03      	cmp	r3, #3
 8001baa:	d11f      	bne.n	8001bec <ExtractMessage+0x3e0>

										temp_dac[1][k] = atof(temp);
 8001bac:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f01c fea9 	bl	801e908 <atof>
 8001bb6:	eeb0 7b40 	vmov.f64	d7, d0
 8001bba:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001bbe:	3304      	adds	r3, #4
 8001bc0:	00db      	lsls	r3, r3, #3
 8001bc2:	33f8      	adds	r3, #248	; 0xf8
 8001bc4:	443b      	add	r3, r7
 8001bc6:	3bf0      	subs	r3, #240	; 0xf0
 8001bc8:	ed83 7b00 	vstr	d7, [r3]
										k++;
 8001bcc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001bd0:	3301      	adds	r3, #1
 8001bd2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
										j = 0;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
										memset(temp, 0, sizeof temp);
 8001bdc:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001be0:	2264      	movs	r2, #100	; 0x64
 8001be2:	2100      	movs	r1, #0
 8001be4:	4618      	mov	r0, r3
 8001be6:	f01e fcd2 	bl	802058e <memset>
 8001bea:	e025      	b.n	8001c38 <ExtractMessage+0x42c>
									}else{

										uart_buf_len = sprintf(uart_bufT, "the format is wrong: %s\r\n\n%s\r\n", (char*)temp, (char*)help);
 8001bec:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8001bf0:	4bbe      	ldr	r3, [pc, #760]	; (8001eec <ExtractMessage+0x6e0>)
 8001bf2:	49bf      	ldr	r1, [pc, #764]	; (8001ef0 <ExtractMessage+0x6e4>)
 8001bf4:	48bf      	ldr	r0, [pc, #764]	; (8001ef4 <ExtractMessage+0x6e8>)
 8001bf6:	f01e fc3d 	bl	8020474 <siprintf>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	4abe      	ldr	r2, [pc, #760]	; (8001ef8 <ExtractMessage+0x6ec>)
 8001bfe:	6013      	str	r3, [r2, #0]
										HAL_UART_Transmit(&huart3, (uint8_t*)uart_bufT, uart_buf_len, 100);
 8001c00:	4bbd      	ldr	r3, [pc, #756]	; (8001ef8 <ExtractMessage+0x6ec>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	b29a      	uxth	r2, r3
 8001c06:	2364      	movs	r3, #100	; 0x64
 8001c08:	49ba      	ldr	r1, [pc, #744]	; (8001ef4 <ExtractMessage+0x6e8>)
 8001c0a:	48bc      	ldr	r0, [pc, #752]	; (8001efc <ExtractMessage+0x6f0>)
 8001c0c:	f007 f836 	bl	8008c7c <HAL_UART_Transmit>
										return 0;
 8001c10:	2300      	movs	r3, #0
 8001c12:	e207      	b.n	8002024 <ExtractMessage+0x818>
									}
								}else{

									temp[j] = msg[i];
 8001c14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001c18:	687a      	ldr	r2, [r7, #4]
 8001c1a:	4413      	add	r3, r2
 8001c1c:	7819      	ldrb	r1, [r3, #0]
 8001c1e:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8001c22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001c26:	4413      	add	r3, r2
 8001c28:	460a      	mov	r2, r1
 8001c2a:	701a      	strb	r2, [r3, #0]
									j++;
 8001c2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001c30:	3301      	adds	r3, #1
 8001c32:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
									continue;
 8001c36:	e02a      	b.n	8001c8e <ExtractMessage+0x482>
								}
								if(k > 3){
 8001c38:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001c3c:	2b03      	cmp	r3, #3
 8001c3e:	dd26      	ble.n	8001c8e <ExtractMessage+0x482>

									f2 = 0;
 8001c40:	2300      	movs	r3, #0
 8001c42:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
									f3 = 1;
 8001c46:	2301      	movs	r3, #1
 8001c48:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
									k = 0;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0

									for(int m = 0; m < 4; m++){
 8001c52:	2300      	movs	r3, #0
 8001c54:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001c58:	e015      	b.n	8001c86 <ExtractMessage+0x47a>
										DAC[1][m] = temp_dac[1][m];
 8001c5a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001c5e:	3304      	adds	r3, #4
 8001c60:	00db      	lsls	r3, r3, #3
 8001c62:	33f8      	adds	r3, #248	; 0xf8
 8001c64:	443b      	add	r3, r7
 8001c66:	3bf0      	subs	r3, #240	; 0xf0
 8001c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c6c:	48a4      	ldr	r0, [pc, #656]	; (8001f00 <ExtractMessage+0x6f4>)
 8001c6e:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 8001c72:	3104      	adds	r1, #4
 8001c74:	00c9      	lsls	r1, r1, #3
 8001c76:	4401      	add	r1, r0
 8001c78:	e9c1 2300 	strd	r2, r3, [r1]
									for(int m = 0; m < 4; m++){
 8001c7c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001c80:	3301      	adds	r3, #1
 8001c82:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001c86:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001c8a:	2b03      	cmp	r3, #3
 8001c8c:	dde5      	ble.n	8001c5a <ExtractMessage+0x44e>
							while(f2){
 8001c8e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	f47f af3e 	bne.w	8001b14 <ExtractMessage+0x308>
						if(strcmp(temp, "000") == 0){
 8001c98:	e0e9      	b.n	8001e6e <ExtractMessage+0x662>
									}
								}
							}
						}else if(strcmp(temp, "010") == 0){
 8001c9a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001c9e:	4999      	ldr	r1, [pc, #612]	; (8001f04 <ExtractMessage+0x6f8>)
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f7fe fb1d 	bl	80002e0 <strcmp>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	f040 80ba 	bne.w	8001e22 <ExtractMessage+0x616>

							j = 0;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
							memset(temp, 0, sizeof temp);
 8001cb4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001cb8:	2264      	movs	r2, #100	; 0x64
 8001cba:	2100      	movs	r1, #0
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f01e fc66 	bl	802058e <memset>

							while(f2){
 8001cc2:	e0a8      	b.n	8001e16 <ExtractMessage+0x60a>

								i++;
 8001cc4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001cc8:	3301      	adds	r3, #1
 8001cca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

								if(msg[i] == ';'){
 8001cce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001cd2:	687a      	ldr	r2, [r7, #4]
 8001cd4:	4413      	add	r3, r2
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	2b3b      	cmp	r3, #59	; 0x3b
 8001cda:	d11f      	bne.n	8001d1c <ExtractMessage+0x510>

									temp_dac[2][k] = atof(temp);
 8001cdc:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f01c fe11 	bl	801e908 <atof>
 8001ce6:	eeb0 7b40 	vmov.f64	d7, d0
 8001cea:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001cee:	3308      	adds	r3, #8
 8001cf0:	00db      	lsls	r3, r3, #3
 8001cf2:	33f8      	adds	r3, #248	; 0xf8
 8001cf4:	443b      	add	r3, r7
 8001cf6:	3bf0      	subs	r3, #240	; 0xf0
 8001cf8:	ed83 7b00 	vstr	d7, [r3]
									k++;
 8001cfc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001d00:	3301      	adds	r3, #1
 8001d02:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
									j = 0;
 8001d06:	2300      	movs	r3, #0
 8001d08:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
									memset(temp, 0, sizeof temp);
 8001d0c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001d10:	2264      	movs	r2, #100	; 0x64
 8001d12:	2100      	movs	r1, #0
 8001d14:	4618      	mov	r0, r3
 8001d16:	f01e fc3a 	bl	802058e <memset>
 8001d1a:	e051      	b.n	8001dc0 <ExtractMessage+0x5b4>
								}else if(i >= strlen(msg)){
 8001d1c:	6878      	ldr	r0, [r7, #4]
 8001d1e:	f7fe fb3f 	bl	80003a0 <strlen>
 8001d22:	4602      	mov	r2, r0
 8001d24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d837      	bhi.n	8001d9c <ExtractMessage+0x590>

									if(k == 3){
 8001d2c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001d30:	2b03      	cmp	r3, #3
 8001d32:	d11f      	bne.n	8001d74 <ExtractMessage+0x568>

										temp_dac[2][k] = atof(temp);
 8001d34:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f01c fde5 	bl	801e908 <atof>
 8001d3e:	eeb0 7b40 	vmov.f64	d7, d0
 8001d42:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001d46:	3308      	adds	r3, #8
 8001d48:	00db      	lsls	r3, r3, #3
 8001d4a:	33f8      	adds	r3, #248	; 0xf8
 8001d4c:	443b      	add	r3, r7
 8001d4e:	3bf0      	subs	r3, #240	; 0xf0
 8001d50:	ed83 7b00 	vstr	d7, [r3]
										k++;
 8001d54:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001d58:	3301      	adds	r3, #1
 8001d5a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
										j = 0;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
										memset(temp, 0, sizeof temp);
 8001d64:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001d68:	2264      	movs	r2, #100	; 0x64
 8001d6a:	2100      	movs	r1, #0
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f01e fc0e 	bl	802058e <memset>
 8001d72:	e025      	b.n	8001dc0 <ExtractMessage+0x5b4>
									}else{

										uart_buf_len = sprintf(uart_bufT, "the format is wrong: %s\r\n\n%s\r\n", (char*)temp, (char*)help);
 8001d74:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8001d78:	4b5c      	ldr	r3, [pc, #368]	; (8001eec <ExtractMessage+0x6e0>)
 8001d7a:	495d      	ldr	r1, [pc, #372]	; (8001ef0 <ExtractMessage+0x6e4>)
 8001d7c:	485d      	ldr	r0, [pc, #372]	; (8001ef4 <ExtractMessage+0x6e8>)
 8001d7e:	f01e fb79 	bl	8020474 <siprintf>
 8001d82:	4603      	mov	r3, r0
 8001d84:	4a5c      	ldr	r2, [pc, #368]	; (8001ef8 <ExtractMessage+0x6ec>)
 8001d86:	6013      	str	r3, [r2, #0]
										HAL_UART_Transmit(&huart3, (uint8_t*)uart_bufT, uart_buf_len, 100);
 8001d88:	4b5b      	ldr	r3, [pc, #364]	; (8001ef8 <ExtractMessage+0x6ec>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	b29a      	uxth	r2, r3
 8001d8e:	2364      	movs	r3, #100	; 0x64
 8001d90:	4958      	ldr	r1, [pc, #352]	; (8001ef4 <ExtractMessage+0x6e8>)
 8001d92:	485a      	ldr	r0, [pc, #360]	; (8001efc <ExtractMessage+0x6f0>)
 8001d94:	f006 ff72 	bl	8008c7c <HAL_UART_Transmit>
										return 0;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	e143      	b.n	8002024 <ExtractMessage+0x818>
									}
								}else{

									temp[j] = msg[i];
 8001d9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001da0:	687a      	ldr	r2, [r7, #4]
 8001da2:	4413      	add	r3, r2
 8001da4:	7819      	ldrb	r1, [r3, #0]
 8001da6:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8001daa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001dae:	4413      	add	r3, r2
 8001db0:	460a      	mov	r2, r1
 8001db2:	701a      	strb	r2, [r3, #0]
									j++;
 8001db4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001db8:	3301      	adds	r3, #1
 8001dba:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
									continue;
 8001dbe:	e02a      	b.n	8001e16 <ExtractMessage+0x60a>
								}
								if(k > 3){
 8001dc0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001dc4:	2b03      	cmp	r3, #3
 8001dc6:	dd26      	ble.n	8001e16 <ExtractMessage+0x60a>

									f2 = 0;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
									f3 = 1;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
									k = 0;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0

									for(int m = 0; m < 4; m++){
 8001dda:	2300      	movs	r3, #0
 8001ddc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001de0:	e015      	b.n	8001e0e <ExtractMessage+0x602>
										DAC[2][m] = temp_dac[2][m];
 8001de2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001de6:	3308      	adds	r3, #8
 8001de8:	00db      	lsls	r3, r3, #3
 8001dea:	33f8      	adds	r3, #248	; 0xf8
 8001dec:	443b      	add	r3, r7
 8001dee:	3bf0      	subs	r3, #240	; 0xf0
 8001df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001df4:	4842      	ldr	r0, [pc, #264]	; (8001f00 <ExtractMessage+0x6f4>)
 8001df6:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8001dfa:	3108      	adds	r1, #8
 8001dfc:	00c9      	lsls	r1, r1, #3
 8001dfe:	4401      	add	r1, r0
 8001e00:	e9c1 2300 	strd	r2, r3, [r1]
									for(int m = 0; m < 4; m++){
 8001e04:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001e08:	3301      	adds	r3, #1
 8001e0a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001e0e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001e12:	2b03      	cmp	r3, #3
 8001e14:	dde5      	ble.n	8001de2 <ExtractMessage+0x5d6>
							while(f2){
 8001e16:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	f47f af52 	bne.w	8001cc4 <ExtractMessage+0x4b8>
						if(strcmp(temp, "000") == 0){
 8001e20:	e025      	b.n	8001e6e <ExtractMessage+0x662>
									}
								}
							}
						}else{

							uart_buf_len = sprintf(uart_bufT, "the format is wrong: %s\r\n\n%s\r\n", (char*)temp, (char*)help);
 8001e22:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8001e26:	4b31      	ldr	r3, [pc, #196]	; (8001eec <ExtractMessage+0x6e0>)
 8001e28:	4931      	ldr	r1, [pc, #196]	; (8001ef0 <ExtractMessage+0x6e4>)
 8001e2a:	4832      	ldr	r0, [pc, #200]	; (8001ef4 <ExtractMessage+0x6e8>)
 8001e2c:	f01e fb22 	bl	8020474 <siprintf>
 8001e30:	4603      	mov	r3, r0
 8001e32:	4a31      	ldr	r2, [pc, #196]	; (8001ef8 <ExtractMessage+0x6ec>)
 8001e34:	6013      	str	r3, [r2, #0]
							HAL_UART_Transmit(&huart3, (uint8_t*)uart_bufT, uart_buf_len, 100);
 8001e36:	4b30      	ldr	r3, [pc, #192]	; (8001ef8 <ExtractMessage+0x6ec>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	b29a      	uxth	r2, r3
 8001e3c:	2364      	movs	r3, #100	; 0x64
 8001e3e:	492d      	ldr	r1, [pc, #180]	; (8001ef4 <ExtractMessage+0x6e8>)
 8001e40:	482e      	ldr	r0, [pc, #184]	; (8001efc <ExtractMessage+0x6f0>)
 8001e42:	f006 ff1b 	bl	8008c7c <HAL_UART_Transmit>
							return 0;
 8001e46:	2300      	movs	r3, #0
 8001e48:	e0ec      	b.n	8002024 <ExtractMessage+0x818>
						}
					}else{

						temp[j] = msg[i];
 8001e4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001e4e:	687a      	ldr	r2, [r7, #4]
 8001e50:	4413      	add	r3, r2
 8001e52:	7819      	ldrb	r1, [r3, #0]
 8001e54:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8001e58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e5c:	4413      	add	r3, r2
 8001e5e:	460a      	mov	r2, r1
 8001e60:	701a      	strb	r2, [r3, #0]
						j++;
 8001e62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e66:	3301      	adds	r3, #1
 8001e68:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
						continue;
 8001e6c:	e038      	b.n	8001ee0 <ExtractMessage+0x6d4>
					}

					while(f3){
 8001e6e:	e033      	b.n	8001ed8 <ExtractMessage+0x6cc>

						i++;
 8001e70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001e74:	3301      	adds	r3, #1
 8001e76:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
						if(msg[i] == '&'){
 8001e7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001e7e:	687a      	ldr	r2, [r7, #4]
 8001e80:	4413      	add	r3, r2
 8001e82:	781b      	ldrb	r3, [r3, #0]
 8001e84:	2b26      	cmp	r3, #38	; 0x26
 8001e86:	d108      	bne.n	8001e9a <ExtractMessage+0x68e>

							f3 = 0;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
							i++;	// for removing first space after $
 8001e8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001e92:	3301      	adds	r3, #1
 8001e94:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8001e98:	e01e      	b.n	8001ed8 <ExtractMessage+0x6cc>
						}else if(i >= strlen(msg)){
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f7fe fa80 	bl	80003a0 <strlen>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001ea6:	429a      	cmp	r2, r3
 8001ea8:	d816      	bhi.n	8001ed8 <ExtractMessage+0x6cc>

							f3 = 0;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
							f1 = 0;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc

//							gcvt(DAC[2][0], 6, v);	// for converting flaot to string
							uart_buf_len = sprintf(uart_bufT, "the message has been registered!\r\n");
 8001eb6:	4914      	ldr	r1, [pc, #80]	; (8001f08 <ExtractMessage+0x6fc>)
 8001eb8:	480e      	ldr	r0, [pc, #56]	; (8001ef4 <ExtractMessage+0x6e8>)
 8001eba:	f01e fadb 	bl	8020474 <siprintf>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	4a0d      	ldr	r2, [pc, #52]	; (8001ef8 <ExtractMessage+0x6ec>)
 8001ec2:	6013      	str	r3, [r2, #0]
//															  "%.5f %.5f %.5f %.0f\r\n"
//															  "%.5f %.5f %.5f %.0f\r\n"
//															  , DAC[0][0], DAC[0][1], DAC[0][2], DAC[0][3]
//															  , DAC[1][0], DAC[1][1], DAC[1][2], DAC[1][3]
//															  , DAC[2][0], DAC[2][1], DAC[2][2], DAC[2][3]);
							HAL_UART_Transmit(&huart3, (uint8_t*)uart_bufT, uart_buf_len, 100);
 8001ec4:	4b0c      	ldr	r3, [pc, #48]	; (8001ef8 <ExtractMessage+0x6ec>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	b29a      	uxth	r2, r3
 8001eca:	2364      	movs	r3, #100	; 0x64
 8001ecc:	4909      	ldr	r1, [pc, #36]	; (8001ef4 <ExtractMessage+0x6e8>)
 8001ece:	480b      	ldr	r0, [pc, #44]	; (8001efc <ExtractMessage+0x6f0>)
 8001ed0:	f006 fed4 	bl	8008c7c <HAL_UART_Transmit>
							return 2;
 8001ed4:	2302      	movs	r3, #2
 8001ed6:	e0a5      	b.n	8002024 <ExtractMessage+0x818>
					while(f3){
 8001ed8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d1c7      	bne.n	8001e70 <ExtractMessage+0x664>
				while(f1){
 8001ee0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	f47f ad1a 	bne.w	800191e <ExtractMessage+0x112>
 8001eea:	e07a      	b.n	8001fe2 <ExtractMessage+0x7d6>
 8001eec:	2400008c 	.word	0x2400008c
 8001ef0:	080230f8 	.word	0x080230f8
 8001ef4:	24000874 	.word	0x24000874
 8001ef8:	24000c5c 	.word	0x24000c5c
 8001efc:	240007c4 	.word	0x240007c4
 8001f00:	24000008 	.word	0x24000008
 8001f04:	0802311c 	.word	0x0802311c
 8001f08:	08023120 	.word	0x08023120
					}
				}
			}
		}else{

			temp[j] = msg[i];
 8001f0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001f10:	687a      	ldr	r2, [r7, #4]
 8001f12:	4413      	add	r3, r2
 8001f14:	7819      	ldrb	r1, [r3, #0]
 8001f16:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8001f1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f1e:	4413      	add	r3, r2
 8001f20:	460a      	mov	r2, r1
 8001f22:	701a      	strb	r2, [r3, #0]

			if(strcmp(temp, "exit") == 0 || strcmp(temp, "Exit") == 0 || strcmp(temp, "EXIT") == 0){
 8001f24:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001f28:	4940      	ldr	r1, [pc, #256]	; (800202c <ExtractMessage+0x820>)
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f7fe f9d8 	bl	80002e0 <strcmp>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d011      	beq.n	8001f5a <ExtractMessage+0x74e>
 8001f36:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001f3a:	493d      	ldr	r1, [pc, #244]	; (8002030 <ExtractMessage+0x824>)
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f7fe f9cf 	bl	80002e0 <strcmp>
 8001f42:	4603      	mov	r3, r0
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d008      	beq.n	8001f5a <ExtractMessage+0x74e>
 8001f48:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001f4c:	4939      	ldr	r1, [pc, #228]	; (8002034 <ExtractMessage+0x828>)
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f7fe f9c6 	bl	80002e0 <strcmp>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d110      	bne.n	8001f7c <ExtractMessage+0x770>

				uart_buf_len = sprintf(uart_bufT, "Exit!\r\n");
 8001f5a:	4937      	ldr	r1, [pc, #220]	; (8002038 <ExtractMessage+0x82c>)
 8001f5c:	4837      	ldr	r0, [pc, #220]	; (800203c <ExtractMessage+0x830>)
 8001f5e:	f01e fa89 	bl	8020474 <siprintf>
 8001f62:	4603      	mov	r3, r0
 8001f64:	4a36      	ldr	r2, [pc, #216]	; (8002040 <ExtractMessage+0x834>)
 8001f66:	6013      	str	r3, [r2, #0]
				HAL_UART_Transmit(&huart3, (uint8_t*)uart_bufT, uart_buf_len, 100);
 8001f68:	4b35      	ldr	r3, [pc, #212]	; (8002040 <ExtractMessage+0x834>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	b29a      	uxth	r2, r3
 8001f6e:	2364      	movs	r3, #100	; 0x64
 8001f70:	4932      	ldr	r1, [pc, #200]	; (800203c <ExtractMessage+0x830>)
 8001f72:	4834      	ldr	r0, [pc, #208]	; (8002044 <ExtractMessage+0x838>)
 8001f74:	f006 fe82 	bl	8008c7c <HAL_UART_Transmit>

				return 3;
 8001f78:	2303      	movs	r3, #3
 8001f7a:	e053      	b.n	8002024 <ExtractMessage+0x818>
			}else if(strcmp(temp, "help") == 0 || strcmp(temp, "Help") == 0 || strcmp(temp, "HELP") == 0){
 8001f7c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001f80:	4931      	ldr	r1, [pc, #196]	; (8002048 <ExtractMessage+0x83c>)
 8001f82:	4618      	mov	r0, r3
 8001f84:	f7fe f9ac 	bl	80002e0 <strcmp>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d011      	beq.n	8001fb2 <ExtractMessage+0x7a6>
 8001f8e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001f92:	492e      	ldr	r1, [pc, #184]	; (800204c <ExtractMessage+0x840>)
 8001f94:	4618      	mov	r0, r3
 8001f96:	f7fe f9a3 	bl	80002e0 <strcmp>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d008      	beq.n	8001fb2 <ExtractMessage+0x7a6>
 8001fa0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001fa4:	492a      	ldr	r1, [pc, #168]	; (8002050 <ExtractMessage+0x844>)
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f7fe f99a 	bl	80002e0 <strcmp>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d111      	bne.n	8001fd6 <ExtractMessage+0x7ca>

				uart_buf_len = sprintf(uart_bufT, "%s\r\n", (char*)help);
 8001fb2:	4a28      	ldr	r2, [pc, #160]	; (8002054 <ExtractMessage+0x848>)
 8001fb4:	4928      	ldr	r1, [pc, #160]	; (8002058 <ExtractMessage+0x84c>)
 8001fb6:	4821      	ldr	r0, [pc, #132]	; (800203c <ExtractMessage+0x830>)
 8001fb8:	f01e fa5c 	bl	8020474 <siprintf>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	4a20      	ldr	r2, [pc, #128]	; (8002040 <ExtractMessage+0x834>)
 8001fc0:	6013      	str	r3, [r2, #0]
				HAL_UART_Transmit(&huart3, (uint8_t*)uart_bufT, uart_buf_len, 100);
 8001fc2:	4b1f      	ldr	r3, [pc, #124]	; (8002040 <ExtractMessage+0x834>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	b29a      	uxth	r2, r3
 8001fc8:	2364      	movs	r3, #100	; 0x64
 8001fca:	491c      	ldr	r1, [pc, #112]	; (800203c <ExtractMessage+0x830>)
 8001fcc:	481d      	ldr	r0, [pc, #116]	; (8002044 <ExtractMessage+0x838>)
 8001fce:	f006 fe55 	bl	8008c7c <HAL_UART_Transmit>

				return 1;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e026      	b.n	8002024 <ExtractMessage+0x818>
			}
			j++;
 8001fd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fda:	3301      	adds	r3, #1
 8001fdc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4

			continue;
 8001fe0:	bf00      	nop
	for(int i = 0; i < strlen(msg); i++){
 8001fe2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001fe6:	3301      	adds	r3, #1
 8001fe8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8001fec:	6878      	ldr	r0, [r7, #4]
 8001fee:	f7fe f9d7 	bl	80003a0 <strlen>
 8001ff2:	4602      	mov	r2, r0
 8001ff4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	f63f ac58 	bhi.w	80018ae <ExtractMessage+0xa2>
		}
	}

	uart_buf_len = sprintf(uart_bufT, "wrong msg: %s\r\n\n%s\r\n", (char*)temp, (char*)help);
 8001ffe:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8002002:	4b14      	ldr	r3, [pc, #80]	; (8002054 <ExtractMessage+0x848>)
 8002004:	4915      	ldr	r1, [pc, #84]	; (800205c <ExtractMessage+0x850>)
 8002006:	480d      	ldr	r0, [pc, #52]	; (800203c <ExtractMessage+0x830>)
 8002008:	f01e fa34 	bl	8020474 <siprintf>
 800200c:	4603      	mov	r3, r0
 800200e:	4a0c      	ldr	r2, [pc, #48]	; (8002040 <ExtractMessage+0x834>)
 8002010:	6013      	str	r3, [r2, #0]
	HAL_UART_Transmit(&huart3, (uint8_t*)uart_bufT, uart_buf_len, 100);
 8002012:	4b0b      	ldr	r3, [pc, #44]	; (8002040 <ExtractMessage+0x834>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	b29a      	uxth	r2, r3
 8002018:	2364      	movs	r3, #100	; 0x64
 800201a:	4908      	ldr	r1, [pc, #32]	; (800203c <ExtractMessage+0x830>)
 800201c:	4809      	ldr	r0, [pc, #36]	; (8002044 <ExtractMessage+0x838>)
 800201e:	f006 fe2d 	bl	8008c7c <HAL_UART_Transmit>
	return 0;
 8002022:	2300      	movs	r3, #0
}
 8002024:	4618      	mov	r0, r3
 8002026:	37f8      	adds	r7, #248	; 0xf8
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}
 800202c:	08023144 	.word	0x08023144
 8002030:	0802314c 	.word	0x0802314c
 8002034:	08023154 	.word	0x08023154
 8002038:	0802315c 	.word	0x0802315c
 800203c:	24000874 	.word	0x24000874
 8002040:	24000c5c 	.word	0x24000c5c
 8002044:	240007c4 	.word	0x240007c4
 8002048:	08023164 	.word	0x08023164
 800204c:	0802316c 	.word	0x0802316c
 8002050:	08023174 	.word	0x08023174
 8002054:	2400008c 	.word	0x2400008c
 8002058:	0802317c 	.word	0x0802317c
 800205c:	080230dc 	.word	0x080230dc

08002060 <StartThread>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartThread */
void StartThread(void const * argument)
{
 8002060:	b5b0      	push	{r4, r5, r7, lr}
 8002062:	b08a      	sub	sp, #40	; 0x28
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8002068:	f007 fe78 	bl	8009d5c <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */

  sock = socket(AF_INET, SOCK_STREAM, 0);
 800206c:	2200      	movs	r2, #0
 800206e:	2101      	movs	r1, #1
 8002070:	2002      	movs	r0, #2
 8002072:	f00e fe27 	bl	8010cc4 <lwip_socket>
 8002076:	4603      	mov	r3, r0
 8002078:	4a37      	ldr	r2, [pc, #220]	; (8002158 <StartThread+0xf8>)
 800207a:	6013      	str	r3, [r2, #0]

  address.sin_family = AF_INET;
 800207c:	4b37      	ldr	r3, [pc, #220]	; (800215c <StartThread+0xfc>)
 800207e:	2202      	movs	r2, #2
 8002080:	705a      	strb	r2, [r3, #1]
  address.sin_port = htons(PORT);
 8002082:	2016      	movs	r0, #22
 8002084:	f00f f9d2 	bl	801142c <lwip_htons>
 8002088:	4603      	mov	r3, r0
 800208a:	461a      	mov	r2, r3
 800208c:	4b33      	ldr	r3, [pc, #204]	; (800215c <StartThread+0xfc>)
 800208e:	805a      	strh	r2, [r3, #2]
  address.sin_addr.s_addr = INADDR_ANY;//inet_addr(SERVER);//INADDR_ANY;//
 8002090:	4b32      	ldr	r3, [pc, #200]	; (800215c <StartThread+0xfc>)
 8002092:	2200      	movs	r2, #0
 8002094:	605a      	str	r2, [r3, #4]

  err = bind(sock, (struct sockaddr *)&address, sizeof (address));
 8002096:	4b30      	ldr	r3, [pc, #192]	; (8002158 <StartThread+0xf8>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	2210      	movs	r2, #16
 800209c:	492f      	ldr	r1, [pc, #188]	; (800215c <StartThread+0xfc>)
 800209e:	4618      	mov	r0, r3
 80020a0:	f00e f8bc 	bl	801021c <lwip_bind>
 80020a4:	4603      	mov	r3, r0
 80020a6:	b25a      	sxtb	r2, r3
 80020a8:	4b2d      	ldr	r3, [pc, #180]	; (8002160 <StartThread+0x100>)
 80020aa:	701a      	strb	r2, [r3, #0]
  err = listen(sock, 0);
 80020ac:	4b2a      	ldr	r3, [pc, #168]	; (8002158 <StartThread+0xf8>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	2100      	movs	r1, #0
 80020b2:	4618      	mov	r0, r3
 80020b4:	f00e f976 	bl	80103a4 <lwip_listen>
 80020b8:	4603      	mov	r3, r0
 80020ba:	b25a      	sxtb	r2, r3
 80020bc:	4b28      	ldr	r3, [pc, #160]	; (8002160 <StartThread+0x100>)
 80020be:	701a      	strb	r2, [r3, #0]

  SendToDAC(3);
 80020c0:	2003      	movs	r0, #3
 80020c2:	f7ff f8a9 	bl	8001218 <SendToDAC>

  // create the acceptance thread
  osThreadDef(Acceptance, AcceptanceNewClient, osPriorityLow, 0, configMINIMAL_STACK_SIZE *2);
 80020c6:	4b27      	ldr	r3, [pc, #156]	; (8002164 <StartThread+0x104>)
 80020c8:	f107 040c 	add.w	r4, r7, #12
 80020cc:	461d      	mov	r5, r3
 80020ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80020d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80020d2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80020d6:	e884 0007 	stmia.w	r4, {r0, r1, r2}

  /* Infinite loop */
  for(;;)
  {
		g =  accept(sock, NULL, NULL);
 80020da:	4b1f      	ldr	r3, [pc, #124]	; (8002158 <StartThread+0xf8>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	2200      	movs	r2, #0
 80020e0:	2100      	movs	r1, #0
 80020e2:	4618      	mov	r0, r3
 80020e4:	f00d ff7c 	bl	800ffe0 <lwip_accept>
 80020e8:	4603      	mov	r3, r0
 80020ea:	4a1f      	ldr	r2, [pc, #124]	; (8002168 <StartThread+0x108>)
 80020ec:	6013      	str	r3, [r2, #0]

		if(g < 0){
 80020ee:	4b1e      	ldr	r3, [pc, #120]	; (8002168 <StartThread+0x108>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	da03      	bge.n	80020fe <StartThread+0x9e>

			osDelay(100);
 80020f6:	2064      	movs	r0, #100	; 0x64
 80020f8:	f008 fbc1 	bl	800a87e <osDelay>
			continue;
 80020fc:	e02a      	b.n	8002154 <StartThread+0xf4>
		}

		ClientHandle = osThreadCreate(osThread(Acceptance), &g);
 80020fe:	f107 030c 	add.w	r3, r7, #12
 8002102:	4919      	ldr	r1, [pc, #100]	; (8002168 <StartThread+0x108>)
 8002104:	4618      	mov	r0, r3
 8002106:	f008 fb62 	bl	800a7ce <osThreadCreate>
 800210a:	4603      	mov	r3, r0
 800210c:	4a17      	ldr	r2, [pc, #92]	; (800216c <StartThread+0x10c>)
 800210e:	6013      	str	r3, [r2, #0]
//		osThreadTerminate(ClientHandle);

		uart_buf_len = sprintf(uart_bufT, "new connection...! \r\n"
 8002110:	4a17      	ldr	r2, [pc, #92]	; (8002170 <StartThread+0x110>)
 8002112:	4918      	ldr	r1, [pc, #96]	; (8002174 <StartThread+0x114>)
 8002114:	4818      	ldr	r0, [pc, #96]	; (8002178 <StartThread+0x118>)
 8002116:	f01e f9ad 	bl	8020474 <siprintf>
 800211a:	4603      	mov	r3, r0
 800211c:	4a17      	ldr	r2, [pc, #92]	; (800217c <StartThread+0x11c>)
 800211e:	6013      	str	r3, [r2, #0]
							              "Connected to Compensation Coils Driver! \r\n\n%s\r\n", (char*)help);
		HAL_UART_Transmit(&huart3, (uint8_t*)uart_bufT, uart_buf_len, 100);
 8002120:	4b16      	ldr	r3, [pc, #88]	; (800217c <StartThread+0x11c>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	b29a      	uxth	r2, r3
 8002126:	2364      	movs	r3, #100	; 0x64
 8002128:	4913      	ldr	r1, [pc, #76]	; (8002178 <StartThread+0x118>)
 800212a:	4815      	ldr	r0, [pc, #84]	; (8002180 <StartThread+0x120>)
 800212c:	f006 fda6 	bl	8008c7c <HAL_UART_Transmit>
		write(g, (char*)uart_bufT, strlen(uart_bufT));
 8002130:	4b0d      	ldr	r3, [pc, #52]	; (8002168 <StartThread+0x108>)
 8002132:	681c      	ldr	r4, [r3, #0]
 8002134:	4810      	ldr	r0, [pc, #64]	; (8002178 <StartThread+0x118>)
 8002136:	f7fe f933 	bl	80003a0 <strlen>
 800213a:	4603      	mov	r3, r0
 800213c:	461a      	mov	r2, r3
 800213e:	490e      	ldr	r1, [pc, #56]	; (8002178 <StartThread+0x118>)
 8002140:	4620      	mov	r0, r4
 8002142:	f00e fe1d 	bl	8010d80 <lwip_write>
		HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8002146:	2101      	movs	r1, #1
 8002148:	480e      	ldr	r0, [pc, #56]	; (8002184 <StartThread+0x124>)
 800214a:	f003 f9ba 	bl	80054c2 <HAL_GPIO_TogglePin>

		osDelay(100);
 800214e:	2064      	movs	r0, #100	; 0x64
 8002150:	f008 fb95 	bl	800a87e <osDelay>
		g =  accept(sock, NULL, NULL);
 8002154:	e7c1      	b.n	80020da <StartThread+0x7a>
 8002156:	bf00      	nop
 8002158:	2400085c 	.word	0x2400085c
 800215c:	24000864 	.word	0x24000864
 8002160:	24000000 	.word	0x24000000
 8002164:	080231d8 	.word	0x080231d8
 8002168:	24000860 	.word	0x24000860
 800216c:	24000858 	.word	0x24000858
 8002170:	2400008c 	.word	0x2400008c
 8002174:	08023184 	.word	0x08023184
 8002178:	24000874 	.word	0x24000874
 800217c:	24000c5c 	.word	0x24000c5c
 8002180:	240007c4 	.word	0x240007c4
 8002184:	58020400 	.word	0x58020400

08002188 <MPU_Config>:
}

/* MPU Configuration */

void MPU_Config(void)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b084      	sub	sp, #16
 800218c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800218e:	463b      	mov	r3, r7
 8002190:	2200      	movs	r2, #0
 8002192:	601a      	str	r2, [r3, #0]
 8002194:	605a      	str	r2, [r3, #4]
 8002196:	609a      	str	r2, [r3, #8]
 8002198:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800219a:	f000 fe2b 	bl	8002df4 <HAL_MPU_Disable>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800219e:	2301      	movs	r3, #1
 80021a0:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80021a2:	2300      	movs	r3, #0
 80021a4:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30040000;
 80021a6:	4b16      	ldr	r3, [pc, #88]	; (8002200 <MPU_Config+0x78>)
 80021a8:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256B;
 80021aa:	2307      	movs	r3, #7
 80021ac:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 80021ae:	2300      	movs	r3, #0
 80021b0:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80021b2:	2300      	movs	r3, #0
 80021b4:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80021b6:	2303      	movs	r3, #3
 80021b8:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 80021ba:	2300      	movs	r3, #0
 80021bc:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 80021be:	2300      	movs	r3, #0
 80021c0:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80021c2:	2300      	movs	r3, #0
 80021c4:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 80021c6:	2301      	movs	r3, #1
 80021c8:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80021ca:	463b      	mov	r3, r7
 80021cc:	4618      	mov	r0, r3
 80021ce:	f000 fe49 	bl	8002e64 <HAL_MPU_ConfigRegion>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 80021d2:	2301      	movs	r3, #1
 80021d4:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30044000;
 80021d6:	4b0b      	ldr	r3, [pc, #44]	; (8002204 <MPU_Config+0x7c>)
 80021d8:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_16KB;
 80021da:	230d      	movs	r3, #13
 80021dc:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 80021de:	2301      	movs	r3, #1
 80021e0:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80021e2:	2301      	movs	r3, #1
 80021e4:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80021e6:	2300      	movs	r3, #0
 80021e8:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80021ea:	463b      	mov	r3, r7
 80021ec:	4618      	mov	r0, r3
 80021ee:	f000 fe39 	bl	8002e64 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80021f2:	2004      	movs	r0, #4
 80021f4:	f000 fe16 	bl	8002e24 <HAL_MPU_Enable>

}
 80021f8:	bf00      	nop
 80021fa:	3710      	adds	r7, #16
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	30040000 	.word	0x30040000
 8002204:	30044000 	.word	0x30044000

08002208 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b082      	sub	sp, #8
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a04      	ldr	r2, [pc, #16]	; (8002228 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d101      	bne.n	800221e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800221a:	f000 fccb 	bl	8002bb4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800221e:	bf00      	nop
 8002220:	3708      	adds	r7, #8
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	40001000 	.word	0x40001000

0800222c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800222c:	b480      	push	{r7}
 800222e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002230:	b672      	cpsid	i
}
 8002232:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002234:	e7fe      	b.n	8002234 <Error_Handler+0x8>
	...

08002238 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b082      	sub	sp, #8
 800223c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800223e:	4b0c      	ldr	r3, [pc, #48]	; (8002270 <HAL_MspInit+0x38>)
 8002240:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002244:	4a0a      	ldr	r2, [pc, #40]	; (8002270 <HAL_MspInit+0x38>)
 8002246:	f043 0302 	orr.w	r3, r3, #2
 800224a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800224e:	4b08      	ldr	r3, [pc, #32]	; (8002270 <HAL_MspInit+0x38>)
 8002250:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002254:	f003 0302 	and.w	r3, r3, #2
 8002258:	607b      	str	r3, [r7, #4]
 800225a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800225c:	2200      	movs	r2, #0
 800225e:	210f      	movs	r1, #15
 8002260:	f06f 0001 	mvn.w	r0, #1
 8002264:	f000 fd9e 	bl	8002da4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002268:	bf00      	nop
 800226a:	3708      	adds	r7, #8
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}
 8002270:	58024400 	.word	0x58024400

08002274 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b0b8      	sub	sp, #224	; 0xe0
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800227c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002280:	2200      	movs	r2, #0
 8002282:	601a      	str	r2, [r3, #0]
 8002284:	605a      	str	r2, [r3, #4]
 8002286:	609a      	str	r2, [r3, #8]
 8002288:	60da      	str	r2, [r3, #12]
 800228a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800228c:	f107 0310 	add.w	r3, r7, #16
 8002290:	22bc      	movs	r2, #188	; 0xbc
 8002292:	2100      	movs	r1, #0
 8002294:	4618      	mov	r0, r3
 8002296:	f01e f97a 	bl	802058e <memset>
  if(hspi->Instance==SPI4)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a29      	ldr	r2, [pc, #164]	; (8002344 <HAL_SPI_MspInit+0xd0>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d14a      	bne.n	800233a <HAL_SPI_MspInit+0xc6>
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 80022a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80022a8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 80022aa:	2300      	movs	r3, #0
 80022ac:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80022ae:	f107 0310 	add.w	r3, r7, #16
 80022b2:	4618      	mov	r0, r3
 80022b4:	f004 f950 	bl	8006558 <HAL_RCCEx_PeriphCLKConfig>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d001      	beq.n	80022c2 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 80022be:	f7ff ffb5 	bl	800222c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 80022c2:	4b21      	ldr	r3, [pc, #132]	; (8002348 <HAL_SPI_MspInit+0xd4>)
 80022c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80022c8:	4a1f      	ldr	r2, [pc, #124]	; (8002348 <HAL_SPI_MspInit+0xd4>)
 80022ca:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80022ce:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80022d2:	4b1d      	ldr	r3, [pc, #116]	; (8002348 <HAL_SPI_MspInit+0xd4>)
 80022d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80022d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80022dc:	60fb      	str	r3, [r7, #12]
 80022de:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80022e0:	4b19      	ldr	r3, [pc, #100]	; (8002348 <HAL_SPI_MspInit+0xd4>)
 80022e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022e6:	4a18      	ldr	r2, [pc, #96]	; (8002348 <HAL_SPI_MspInit+0xd4>)
 80022e8:	f043 0310 	orr.w	r3, r3, #16
 80022ec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80022f0:	4b15      	ldr	r3, [pc, #84]	; (8002348 <HAL_SPI_MspInit+0xd4>)
 80022f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022f6:	f003 0310 	and.w	r3, r3, #16
 80022fa:	60bb      	str	r3, [r7, #8]
 80022fc:	68bb      	ldr	r3, [r7, #8]
    /**SPI4 GPIO Configuration
    PE6     ------> SPI4_MOSI
    PE12     ------> SPI4_SCK
    PE13     ------> SPI4_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_12|GPIO_PIN_13;
 80022fe:	f44f 5341 	mov.w	r3, #12352	; 0x3040
 8002302:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002306:	2302      	movs	r3, #2
 8002308:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800230c:	2300      	movs	r3, #0
 800230e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002312:	2302      	movs	r3, #2
 8002314:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8002318:	2305      	movs	r3, #5
 800231a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800231e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002322:	4619      	mov	r1, r3
 8002324:	4809      	ldr	r0, [pc, #36]	; (800234c <HAL_SPI_MspInit+0xd8>)
 8002326:	f002 feeb 	bl	8005100 <HAL_GPIO_Init>

    /* SPI4 interrupt Init */
    HAL_NVIC_SetPriority(SPI4_IRQn, 5, 0);
 800232a:	2200      	movs	r2, #0
 800232c:	2105      	movs	r1, #5
 800232e:	2054      	movs	r0, #84	; 0x54
 8002330:	f000 fd38 	bl	8002da4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 8002334:	2054      	movs	r0, #84	; 0x54
 8002336:	f000 fd4f 	bl	8002dd8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 800233a:	bf00      	nop
 800233c:	37e0      	adds	r7, #224	; 0xe0
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	40013400 	.word	0x40013400
 8002348:	58024400 	.word	0x58024400
 800234c:	58021000 	.word	0x58021000

08002350 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b0b8      	sub	sp, #224	; 0xe0
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002358:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800235c:	2200      	movs	r2, #0
 800235e:	601a      	str	r2, [r3, #0]
 8002360:	605a      	str	r2, [r3, #4]
 8002362:	609a      	str	r2, [r3, #8]
 8002364:	60da      	str	r2, [r3, #12]
 8002366:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002368:	f107 0310 	add.w	r3, r7, #16
 800236c:	22bc      	movs	r2, #188	; 0xbc
 800236e:	2100      	movs	r1, #0
 8002370:	4618      	mov	r0, r3
 8002372:	f01e f90c 	bl	802058e <memset>
  if(huart->Instance==USART3)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a25      	ldr	r2, [pc, #148]	; (8002410 <HAL_UART_MspInit+0xc0>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d142      	bne.n	8002406 <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002380:	2302      	movs	r3, #2
 8002382:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002384:	2300      	movs	r3, #0
 8002386:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800238a:	f107 0310 	add.w	r3, r7, #16
 800238e:	4618      	mov	r0, r3
 8002390:	f004 f8e2 	bl	8006558 <HAL_RCCEx_PeriphCLKConfig>
 8002394:	4603      	mov	r3, r0
 8002396:	2b00      	cmp	r3, #0
 8002398:	d001      	beq.n	800239e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800239a:	f7ff ff47 	bl	800222c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800239e:	4b1d      	ldr	r3, [pc, #116]	; (8002414 <HAL_UART_MspInit+0xc4>)
 80023a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80023a4:	4a1b      	ldr	r2, [pc, #108]	; (8002414 <HAL_UART_MspInit+0xc4>)
 80023a6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023aa:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80023ae:	4b19      	ldr	r3, [pc, #100]	; (8002414 <HAL_UART_MspInit+0xc4>)
 80023b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80023b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023b8:	60fb      	str	r3, [r7, #12]
 80023ba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80023bc:	4b15      	ldr	r3, [pc, #84]	; (8002414 <HAL_UART_MspInit+0xc4>)
 80023be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023c2:	4a14      	ldr	r2, [pc, #80]	; (8002414 <HAL_UART_MspInit+0xc4>)
 80023c4:	f043 0308 	orr.w	r3, r3, #8
 80023c8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80023cc:	4b11      	ldr	r3, [pc, #68]	; (8002414 <HAL_UART_MspInit+0xc4>)
 80023ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023d2:	f003 0308 	and.w	r3, r3, #8
 80023d6:	60bb      	str	r3, [r7, #8]
 80023d8:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80023da:	f44f 7340 	mov.w	r3, #768	; 0x300
 80023de:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023e2:	2302      	movs	r3, #2
 80023e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e8:	2300      	movs	r3, #0
 80023ea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80023ee:	2302      	movs	r3, #2
 80023f0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80023f4:	2307      	movs	r3, #7
 80023f6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80023fa:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80023fe:	4619      	mov	r1, r3
 8002400:	4805      	ldr	r0, [pc, #20]	; (8002418 <HAL_UART_MspInit+0xc8>)
 8002402:	f002 fe7d 	bl	8005100 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002406:	bf00      	nop
 8002408:	37e0      	adds	r7, #224	; 0xe0
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	40004800 	.word	0x40004800
 8002414:	58024400 	.word	0x58024400
 8002418:	58020c00 	.word	0x58020c00

0800241c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b090      	sub	sp, #64	; 0x40
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2b0f      	cmp	r3, #15
 8002428:	d827      	bhi.n	800247a <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 800242a:	2200      	movs	r2, #0
 800242c:	6879      	ldr	r1, [r7, #4]
 800242e:	2036      	movs	r0, #54	; 0x36
 8002430:	f000 fcb8 	bl	8002da4 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002434:	2036      	movs	r0, #54	; 0x36
 8002436:	f000 fccf 	bl	8002dd8 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 800243a:	4a29      	ldr	r2, [pc, #164]	; (80024e0 <HAL_InitTick+0xc4>)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002440:	4b28      	ldr	r3, [pc, #160]	; (80024e4 <HAL_InitTick+0xc8>)
 8002442:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002446:	4a27      	ldr	r2, [pc, #156]	; (80024e4 <HAL_InitTick+0xc8>)
 8002448:	f043 0310 	orr.w	r3, r3, #16
 800244c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002450:	4b24      	ldr	r3, [pc, #144]	; (80024e4 <HAL_InitTick+0xc8>)
 8002452:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002456:	f003 0310 	and.w	r3, r3, #16
 800245a:	60fb      	str	r3, [r7, #12]
 800245c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800245e:	f107 0210 	add.w	r2, r7, #16
 8002462:	f107 0314 	add.w	r3, r7, #20
 8002466:	4611      	mov	r1, r2
 8002468:	4618      	mov	r0, r3
 800246a:	f004 f833 	bl	80064d4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800246e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002470:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002474:	2b00      	cmp	r3, #0
 8002476:	d106      	bne.n	8002486 <HAL_InitTick+0x6a>
 8002478:	e001      	b.n	800247e <HAL_InitTick+0x62>
    return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e02b      	b.n	80024d6 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800247e:	f003 fffd 	bl	800647c <HAL_RCC_GetPCLK1Freq>
 8002482:	63f8      	str	r0, [r7, #60]	; 0x3c
 8002484:	e004      	b.n	8002490 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002486:	f003 fff9 	bl	800647c <HAL_RCC_GetPCLK1Freq>
 800248a:	4603      	mov	r3, r0
 800248c:	005b      	lsls	r3, r3, #1
 800248e:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002490:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002492:	4a15      	ldr	r2, [pc, #84]	; (80024e8 <HAL_InitTick+0xcc>)
 8002494:	fba2 2303 	umull	r2, r3, r2, r3
 8002498:	0c9b      	lsrs	r3, r3, #18
 800249a:	3b01      	subs	r3, #1
 800249c:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800249e:	4b13      	ldr	r3, [pc, #76]	; (80024ec <HAL_InitTick+0xd0>)
 80024a0:	4a13      	ldr	r2, [pc, #76]	; (80024f0 <HAL_InitTick+0xd4>)
 80024a2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80024a4:	4b11      	ldr	r3, [pc, #68]	; (80024ec <HAL_InitTick+0xd0>)
 80024a6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80024aa:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80024ac:	4a0f      	ldr	r2, [pc, #60]	; (80024ec <HAL_InitTick+0xd0>)
 80024ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024b0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80024b2:	4b0e      	ldr	r3, [pc, #56]	; (80024ec <HAL_InitTick+0xd0>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024b8:	4b0c      	ldr	r3, [pc, #48]	; (80024ec <HAL_InitTick+0xd0>)
 80024ba:	2200      	movs	r2, #0
 80024bc:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80024be:	480b      	ldr	r0, [pc, #44]	; (80024ec <HAL_InitTick+0xd0>)
 80024c0:	f006 f8bb 	bl	800863a <HAL_TIM_Base_Init>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d104      	bne.n	80024d4 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80024ca:	4808      	ldr	r0, [pc, #32]	; (80024ec <HAL_InitTick+0xd0>)
 80024cc:	f006 f916 	bl	80086fc <HAL_TIM_Base_Start_IT>
 80024d0:	4603      	mov	r3, r0
 80024d2:	e000      	b.n	80024d6 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3740      	adds	r7, #64	; 0x40
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	240002d4 	.word	0x240002d4
 80024e4:	58024400 	.word	0x58024400
 80024e8:	431bde83 	.word	0x431bde83
 80024ec:	24000c88 	.word	0x24000c88
 80024f0:	40001000 	.word	0x40001000

080024f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024f4:	b480      	push	{r7}
 80024f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80024f8:	e7fe      	b.n	80024f8 <NMI_Handler+0x4>

080024fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024fa:	b480      	push	{r7}
 80024fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024fe:	e7fe      	b.n	80024fe <HardFault_Handler+0x4>

08002500 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002500:	b480      	push	{r7}
 8002502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002504:	e7fe      	b.n	8002504 <MemManage_Handler+0x4>

08002506 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002506:	b480      	push	{r7}
 8002508:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800250a:	e7fe      	b.n	800250a <BusFault_Handler+0x4>

0800250c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800250c:	b480      	push	{r7}
 800250e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002510:	e7fe      	b.n	8002510 <UsageFault_Handler+0x4>

08002512 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002512:	b480      	push	{r7}
 8002514:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002516:	bf00      	nop
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr

08002520 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8002524:	2002      	movs	r0, #2
 8002526:	f002 ffe6 	bl	80054f6 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800252a:	bf00      	nop
 800252c:	bd80      	pop	{r7, pc}

0800252e <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800252e:	b580      	push	{r7, lr}
 8002530:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002532:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002536:	f002 ffde 	bl	80054f6 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800253a:	bf00      	nop
 800253c:	bd80      	pop	{r7, pc}
	...

08002540 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002544:	4802      	ldr	r0, [pc, #8]	; (8002550 <TIM6_DAC_IRQHandler+0x10>)
 8002546:	f006 f949 	bl	80087dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800254a:	bf00      	nop
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	24000c88 	.word	0x24000c88

08002554 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8002558:	4802      	ldr	r0, [pc, #8]	; (8002564 <ETH_IRQHandler+0x10>)
 800255a:	f001 fbef 	bl	8003d3c <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 800255e:	bf00      	nop
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	24000d24 	.word	0x24000d24

08002568 <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 800256c:	4802      	ldr	r0, [pc, #8]	; (8002578 <SPI4_IRQHandler+0x10>)
 800256e:	f005 fd09 	bl	8007f84 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 8002572:	bf00      	nop
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	2400073c 	.word	0x2400073c

0800257c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800257c:	b480      	push	{r7}
 800257e:	af00      	add	r7, sp, #0
	return 1;
 8002580:	2301      	movs	r3, #1
}
 8002582:	4618      	mov	r0, r3
 8002584:	46bd      	mov	sp, r7
 8002586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258a:	4770      	bx	lr

0800258c <_kill>:

int _kill(int pid, int sig)
{
 800258c:	b480      	push	{r7}
 800258e:	b083      	sub	sp, #12
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
 8002594:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002596:	4b05      	ldr	r3, [pc, #20]	; (80025ac <_kill+0x20>)
 8002598:	2216      	movs	r2, #22
 800259a:	601a      	str	r2, [r3, #0]
	return -1;
 800259c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	370c      	adds	r7, #12
 80025a4:	46bd      	mov	sp, r7
 80025a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025aa:	4770      	bx	lr
 80025ac:	24007f68 	.word	0x24007f68

080025b0 <_exit>:

void _exit (int status)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b082      	sub	sp, #8
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80025b8:	f04f 31ff 	mov.w	r1, #4294967295
 80025bc:	6878      	ldr	r0, [r7, #4]
 80025be:	f7ff ffe5 	bl	800258c <_kill>
	while (1) {}		/* Make sure we hang here */
 80025c2:	e7fe      	b.n	80025c2 <_exit+0x12>

080025c4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b086      	sub	sp, #24
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	60f8      	str	r0, [r7, #12]
 80025cc:	60b9      	str	r1, [r7, #8]
 80025ce:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025d0:	2300      	movs	r3, #0
 80025d2:	617b      	str	r3, [r7, #20]
 80025d4:	e00a      	b.n	80025ec <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80025d6:	f3af 8000 	nop.w
 80025da:	4601      	mov	r1, r0
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	1c5a      	adds	r2, r3, #1
 80025e0:	60ba      	str	r2, [r7, #8]
 80025e2:	b2ca      	uxtb	r2, r1
 80025e4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	3301      	adds	r3, #1
 80025ea:	617b      	str	r3, [r7, #20]
 80025ec:	697a      	ldr	r2, [r7, #20]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	429a      	cmp	r2, r3
 80025f2:	dbf0      	blt.n	80025d6 <_read+0x12>
	}

return len;
 80025f4:	687b      	ldr	r3, [r7, #4]
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3718      	adds	r7, #24
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}

080025fe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80025fe:	b580      	push	{r7, lr}
 8002600:	b086      	sub	sp, #24
 8002602:	af00      	add	r7, sp, #0
 8002604:	60f8      	str	r0, [r7, #12]
 8002606:	60b9      	str	r1, [r7, #8]
 8002608:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800260a:	2300      	movs	r3, #0
 800260c:	617b      	str	r3, [r7, #20]
 800260e:	e009      	b.n	8002624 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	1c5a      	adds	r2, r3, #1
 8002614:	60ba      	str	r2, [r7, #8]
 8002616:	781b      	ldrb	r3, [r3, #0]
 8002618:	4618      	mov	r0, r3
 800261a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	3301      	adds	r3, #1
 8002622:	617b      	str	r3, [r7, #20]
 8002624:	697a      	ldr	r2, [r7, #20]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	429a      	cmp	r2, r3
 800262a:	dbf1      	blt.n	8002610 <_write+0x12>
	}
	return len;
 800262c:	687b      	ldr	r3, [r7, #4]
}
 800262e:	4618      	mov	r0, r3
 8002630:	3718      	adds	r7, #24
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}

08002636 <_close>:

int _close(int file)
{
 8002636:	b480      	push	{r7}
 8002638:	b083      	sub	sp, #12
 800263a:	af00      	add	r7, sp, #0
 800263c:	6078      	str	r0, [r7, #4]
	return -1;
 800263e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002642:	4618      	mov	r0, r3
 8002644:	370c      	adds	r7, #12
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr

0800264e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800264e:	b480      	push	{r7}
 8002650:	b083      	sub	sp, #12
 8002652:	af00      	add	r7, sp, #0
 8002654:	6078      	str	r0, [r7, #4]
 8002656:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800265e:	605a      	str	r2, [r3, #4]
	return 0;
 8002660:	2300      	movs	r3, #0
}
 8002662:	4618      	mov	r0, r3
 8002664:	370c      	adds	r7, #12
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr

0800266e <_isatty>:

int _isatty(int file)
{
 800266e:	b480      	push	{r7}
 8002670:	b083      	sub	sp, #12
 8002672:	af00      	add	r7, sp, #0
 8002674:	6078      	str	r0, [r7, #4]
	return 1;
 8002676:	2301      	movs	r3, #1
}
 8002678:	4618      	mov	r0, r3
 800267a:	370c      	adds	r7, #12
 800267c:	46bd      	mov	sp, r7
 800267e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002682:	4770      	bx	lr

08002684 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002684:	b480      	push	{r7}
 8002686:	b085      	sub	sp, #20
 8002688:	af00      	add	r7, sp, #0
 800268a:	60f8      	str	r0, [r7, #12]
 800268c:	60b9      	str	r1, [r7, #8]
 800268e:	607a      	str	r2, [r7, #4]
	return 0;
 8002690:	2300      	movs	r3, #0
}
 8002692:	4618      	mov	r0, r3
 8002694:	3714      	adds	r7, #20
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr
	...

080026a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b087      	sub	sp, #28
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80026a8:	4a14      	ldr	r2, [pc, #80]	; (80026fc <_sbrk+0x5c>)
 80026aa:	4b15      	ldr	r3, [pc, #84]	; (8002700 <_sbrk+0x60>)
 80026ac:	1ad3      	subs	r3, r2, r3
 80026ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80026b4:	4b13      	ldr	r3, [pc, #76]	; (8002704 <_sbrk+0x64>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d102      	bne.n	80026c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80026bc:	4b11      	ldr	r3, [pc, #68]	; (8002704 <_sbrk+0x64>)
 80026be:	4a12      	ldr	r2, [pc, #72]	; (8002708 <_sbrk+0x68>)
 80026c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80026c2:	4b10      	ldr	r3, [pc, #64]	; (8002704 <_sbrk+0x64>)
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	4413      	add	r3, r2
 80026ca:	693a      	ldr	r2, [r7, #16]
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d205      	bcs.n	80026dc <_sbrk+0x3c>
  {
    errno = ENOMEM;
 80026d0:	4b0e      	ldr	r3, [pc, #56]	; (800270c <_sbrk+0x6c>)
 80026d2:	220c      	movs	r2, #12
 80026d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80026d6:	f04f 33ff 	mov.w	r3, #4294967295
 80026da:	e009      	b.n	80026f0 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 80026dc:	4b09      	ldr	r3, [pc, #36]	; (8002704 <_sbrk+0x64>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80026e2:	4b08      	ldr	r3, [pc, #32]	; (8002704 <_sbrk+0x64>)
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	4413      	add	r3, r2
 80026ea:	4a06      	ldr	r2, [pc, #24]	; (8002704 <_sbrk+0x64>)
 80026ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80026ee:	68fb      	ldr	r3, [r7, #12]
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	371c      	adds	r7, #28
 80026f4:	46bd      	mov	sp, r7
 80026f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fa:	4770      	bx	lr
 80026fc:	24080000 	.word	0x24080000
 8002700:	00000400 	.word	0x00000400
 8002704:	24000cd4 	.word	0x24000cd4
 8002708:	240080b8 	.word	0x240080b8
 800270c:	24007f68 	.word	0x24007f68

08002710 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002710:	b480      	push	{r7}
 8002712:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002714:	4b39      	ldr	r3, [pc, #228]	; (80027fc <SystemInit+0xec>)
 8002716:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800271a:	4a38      	ldr	r2, [pc, #224]	; (80027fc <SystemInit+0xec>)
 800271c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002720:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002724:	4b36      	ldr	r3, [pc, #216]	; (8002800 <SystemInit+0xf0>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 030f 	and.w	r3, r3, #15
 800272c:	2b06      	cmp	r3, #6
 800272e:	d807      	bhi.n	8002740 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002730:	4b33      	ldr	r3, [pc, #204]	; (8002800 <SystemInit+0xf0>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f023 030f 	bic.w	r3, r3, #15
 8002738:	4a31      	ldr	r2, [pc, #196]	; (8002800 <SystemInit+0xf0>)
 800273a:	f043 0307 	orr.w	r3, r3, #7
 800273e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002740:	4b30      	ldr	r3, [pc, #192]	; (8002804 <SystemInit+0xf4>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a2f      	ldr	r2, [pc, #188]	; (8002804 <SystemInit+0xf4>)
 8002746:	f043 0301 	orr.w	r3, r3, #1
 800274a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800274c:	4b2d      	ldr	r3, [pc, #180]	; (8002804 <SystemInit+0xf4>)
 800274e:	2200      	movs	r2, #0
 8002750:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002752:	4b2c      	ldr	r3, [pc, #176]	; (8002804 <SystemInit+0xf4>)
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	492b      	ldr	r1, [pc, #172]	; (8002804 <SystemInit+0xf4>)
 8002758:	4b2b      	ldr	r3, [pc, #172]	; (8002808 <SystemInit+0xf8>)
 800275a:	4013      	ands	r3, r2
 800275c:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800275e:	4b28      	ldr	r3, [pc, #160]	; (8002800 <SystemInit+0xf0>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 0308 	and.w	r3, r3, #8
 8002766:	2b00      	cmp	r3, #0
 8002768:	d007      	beq.n	800277a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800276a:	4b25      	ldr	r3, [pc, #148]	; (8002800 <SystemInit+0xf0>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f023 030f 	bic.w	r3, r3, #15
 8002772:	4a23      	ldr	r2, [pc, #140]	; (8002800 <SystemInit+0xf0>)
 8002774:	f043 0307 	orr.w	r3, r3, #7
 8002778:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800277a:	4b22      	ldr	r3, [pc, #136]	; (8002804 <SystemInit+0xf4>)
 800277c:	2200      	movs	r2, #0
 800277e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002780:	4b20      	ldr	r3, [pc, #128]	; (8002804 <SystemInit+0xf4>)
 8002782:	2200      	movs	r2, #0
 8002784:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002786:	4b1f      	ldr	r3, [pc, #124]	; (8002804 <SystemInit+0xf4>)
 8002788:	2200      	movs	r2, #0
 800278a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800278c:	4b1d      	ldr	r3, [pc, #116]	; (8002804 <SystemInit+0xf4>)
 800278e:	4a1f      	ldr	r2, [pc, #124]	; (800280c <SystemInit+0xfc>)
 8002790:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002792:	4b1c      	ldr	r3, [pc, #112]	; (8002804 <SystemInit+0xf4>)
 8002794:	4a1e      	ldr	r2, [pc, #120]	; (8002810 <SystemInit+0x100>)
 8002796:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002798:	4b1a      	ldr	r3, [pc, #104]	; (8002804 <SystemInit+0xf4>)
 800279a:	4a1e      	ldr	r2, [pc, #120]	; (8002814 <SystemInit+0x104>)
 800279c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800279e:	4b19      	ldr	r3, [pc, #100]	; (8002804 <SystemInit+0xf4>)
 80027a0:	2200      	movs	r2, #0
 80027a2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80027a4:	4b17      	ldr	r3, [pc, #92]	; (8002804 <SystemInit+0xf4>)
 80027a6:	4a1b      	ldr	r2, [pc, #108]	; (8002814 <SystemInit+0x104>)
 80027a8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80027aa:	4b16      	ldr	r3, [pc, #88]	; (8002804 <SystemInit+0xf4>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80027b0:	4b14      	ldr	r3, [pc, #80]	; (8002804 <SystemInit+0xf4>)
 80027b2:	4a18      	ldr	r2, [pc, #96]	; (8002814 <SystemInit+0x104>)
 80027b4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80027b6:	4b13      	ldr	r3, [pc, #76]	; (8002804 <SystemInit+0xf4>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80027bc:	4b11      	ldr	r3, [pc, #68]	; (8002804 <SystemInit+0xf4>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a10      	ldr	r2, [pc, #64]	; (8002804 <SystemInit+0xf4>)
 80027c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027c6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80027c8:	4b0e      	ldr	r3, [pc, #56]	; (8002804 <SystemInit+0xf4>)
 80027ca:	2200      	movs	r2, #0
 80027cc:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80027ce:	4b12      	ldr	r3, [pc, #72]	; (8002818 <SystemInit+0x108>)
 80027d0:	681a      	ldr	r2, [r3, #0]
 80027d2:	4b12      	ldr	r3, [pc, #72]	; (800281c <SystemInit+0x10c>)
 80027d4:	4013      	ands	r3, r2
 80027d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80027da:	d202      	bcs.n	80027e2 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80027dc:	4b10      	ldr	r3, [pc, #64]	; (8002820 <SystemInit+0x110>)
 80027de:	2201      	movs	r2, #1
 80027e0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80027e2:	4b10      	ldr	r3, [pc, #64]	; (8002824 <SystemInit+0x114>)
 80027e4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80027e8:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80027ea:	4b04      	ldr	r3, [pc, #16]	; (80027fc <SystemInit+0xec>)
 80027ec:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80027f0:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80027f2:	bf00      	nop
 80027f4:	46bd      	mov	sp, r7
 80027f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fa:	4770      	bx	lr
 80027fc:	e000ed00 	.word	0xe000ed00
 8002800:	52002000 	.word	0x52002000
 8002804:	58024400 	.word	0x58024400
 8002808:	eaf6ed7f 	.word	0xeaf6ed7f
 800280c:	02020200 	.word	0x02020200
 8002810:	01ff0000 	.word	0x01ff0000
 8002814:	01010280 	.word	0x01010280
 8002818:	5c001000 	.word	0x5c001000
 800281c:	ffff0000 	.word	0xffff0000
 8002820:	51008108 	.word	0x51008108
 8002824:	52004000 	.word	0x52004000

08002828 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002828:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002860 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800282c:	f7ff ff70 	bl	8002710 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002830:	480c      	ldr	r0, [pc, #48]	; (8002864 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002832:	490d      	ldr	r1, [pc, #52]	; (8002868 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002834:	4a0d      	ldr	r2, [pc, #52]	; (800286c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002836:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002838:	e002      	b.n	8002840 <LoopCopyDataInit>

0800283a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800283a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800283c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800283e:	3304      	adds	r3, #4

08002840 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002840:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002842:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002844:	d3f9      	bcc.n	800283a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002846:	4a0a      	ldr	r2, [pc, #40]	; (8002870 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002848:	4c0a      	ldr	r4, [pc, #40]	; (8002874 <LoopFillZerobss+0x22>)
  movs r3, #0
 800284a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800284c:	e001      	b.n	8002852 <LoopFillZerobss>

0800284e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800284e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002850:	3204      	adds	r2, #4

08002852 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002852:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002854:	d3fb      	bcc.n	800284e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002856:	f01d ff05 	bl	8020664 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800285a:	f7fe f935 	bl	8000ac8 <main>
  bx  lr
 800285e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002860:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002864:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002868:	240004cc 	.word	0x240004cc
  ldr r2, =_sidata
 800286c:	08027538 	.word	0x08027538
  ldr r2, =_sbss
 8002870:	240004cc 	.word	0x240004cc
  ldr r4, =_ebss
 8002874:	240080b8 	.word	0x240080b8

08002878 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002878:	e7fe      	b.n	8002878 <ADC3_IRQHandler>

0800287a <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 800287a:	b480      	push	{r7}
 800287c:	b083      	sub	sp, #12
 800287e:	af00      	add	r7, sp, #0
 8002880:	6078      	str	r0, [r7, #4]
 8002882:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d00b      	beq.n	80028a2 <LAN8742_RegisterBusIO+0x28>
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	68db      	ldr	r3, [r3, #12]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d007      	beq.n	80028a2 <LAN8742_RegisterBusIO+0x28>
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d003      	beq.n	80028a2 <LAN8742_RegisterBusIO+0x28>
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	691b      	ldr	r3, [r3, #16]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d102      	bne.n	80028a8 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 80028a2:	f04f 33ff 	mov.w	r3, #4294967295
 80028a6:	e014      	b.n	80028d2 <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	685a      	ldr	r2, [r3, #4]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	68da      	ldr	r2, [r3, #12]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	689a      	ldr	r2, [r3, #8]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	691a      	ldr	r2, [r3, #16]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 80028d0:	2300      	movs	r3, #0
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	370c      	adds	r7, #12
 80028d6:	46bd      	mov	sp, r7
 80028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028dc:	4770      	bx	lr

080028de <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 80028de:	b580      	push	{r7, lr}
 80028e0:	b086      	sub	sp, #24
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 80028e6:	2300      	movs	r3, #0
 80028e8:	60fb      	str	r3, [r7, #12]
 80028ea:	2300      	movs	r3, #0
 80028ec:	60bb      	str	r3, [r7, #8]
 80028ee:	2300      	movs	r3, #0
 80028f0:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 80028f2:	2300      	movs	r3, #0
 80028f4:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d17c      	bne.n	80029f8 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d002      	beq.n	800290c <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2220      	movs	r2, #32
 8002910:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8002912:	2300      	movs	r3, #0
 8002914:	617b      	str	r3, [r7, #20]
 8002916:	e01c      	b.n	8002952 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	695b      	ldr	r3, [r3, #20]
 800291c:	f107 0208 	add.w	r2, r7, #8
 8002920:	2112      	movs	r1, #18
 8002922:	6978      	ldr	r0, [r7, #20]
 8002924:	4798      	blx	r3
 8002926:	4603      	mov	r3, r0
 8002928:	2b00      	cmp	r3, #0
 800292a:	da03      	bge.n	8002934 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 800292c:	f06f 0304 	mvn.w	r3, #4
 8002930:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 8002932:	e00b      	b.n	800294c <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	f003 031f 	and.w	r3, r3, #31
 800293a:	697a      	ldr	r2, [r7, #20]
 800293c:	429a      	cmp	r2, r3
 800293e:	d105      	bne.n	800294c <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	697a      	ldr	r2, [r7, #20]
 8002944:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8002946:	2300      	movs	r3, #0
 8002948:	613b      	str	r3, [r7, #16]
         break;
 800294a:	e005      	b.n	8002958 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	3301      	adds	r3, #1
 8002950:	617b      	str	r3, [r7, #20]
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	2b1f      	cmp	r3, #31
 8002956:	d9df      	bls.n	8002918 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	2b1f      	cmp	r3, #31
 800295e:	d902      	bls.n	8002966 <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8002960:	f06f 0302 	mvn.w	r3, #2
 8002964:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d145      	bne.n	80029f8 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	691b      	ldr	r3, [r3, #16]
 8002970:	687a      	ldr	r2, [r7, #4]
 8002972:	6810      	ldr	r0, [r2, #0]
 8002974:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002978:	2100      	movs	r1, #0
 800297a:	4798      	blx	r3
 800297c:	4603      	mov	r3, r0
 800297e:	2b00      	cmp	r3, #0
 8002980:	db37      	blt.n	80029f2 <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	695b      	ldr	r3, [r3, #20]
 8002986:	687a      	ldr	r2, [r7, #4]
 8002988:	6810      	ldr	r0, [r2, #0]
 800298a:	f107 0208 	add.w	r2, r7, #8
 800298e:	2100      	movs	r1, #0
 8002990:	4798      	blx	r3
 8002992:	4603      	mov	r3, r0
 8002994:	2b00      	cmp	r3, #0
 8002996:	db28      	blt.n	80029ea <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	699b      	ldr	r3, [r3, #24]
 800299c:	4798      	blx	r3
 800299e:	4603      	mov	r3, r0
 80029a0:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 80029a2:	e01c      	b.n	80029de <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	699b      	ldr	r3, [r3, #24]
 80029a8:	4798      	blx	r3
 80029aa:	4603      	mov	r3, r0
 80029ac:	461a      	mov	r2, r3
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	1ad3      	subs	r3, r2, r3
 80029b2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80029b6:	d80e      	bhi.n	80029d6 <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	695b      	ldr	r3, [r3, #20]
 80029bc:	687a      	ldr	r2, [r7, #4]
 80029be:	6810      	ldr	r0, [r2, #0]
 80029c0:	f107 0208 	add.w	r2, r7, #8
 80029c4:	2100      	movs	r1, #0
 80029c6:	4798      	blx	r3
 80029c8:	4603      	mov	r3, r0
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	da07      	bge.n	80029de <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 80029ce:	f06f 0304 	mvn.w	r3, #4
 80029d2:	613b      	str	r3, [r7, #16]
                 break;
 80029d4:	e010      	b.n	80029f8 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 80029d6:	f06f 0301 	mvn.w	r3, #1
 80029da:	613b      	str	r3, [r7, #16]
               break;
 80029dc:	e00c      	b.n	80029f8 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d1dd      	bne.n	80029a4 <LAN8742_Init+0xc6>
 80029e8:	e006      	b.n	80029f8 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 80029ea:	f06f 0304 	mvn.w	r3, #4
 80029ee:	613b      	str	r3, [r7, #16]
 80029f0:	e002      	b.n	80029f8 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 80029f2:	f06f 0303 	mvn.w	r3, #3
 80029f6:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d112      	bne.n	8002a24 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	699b      	ldr	r3, [r3, #24]
 8002a02:	4798      	blx	r3
 8002a04:	4603      	mov	r3, r0
 8002a06:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8002a08:	bf00      	nop
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	699b      	ldr	r3, [r3, #24]
 8002a0e:	4798      	blx	r3
 8002a10:	4603      	mov	r3, r0
 8002a12:	461a      	mov	r2, r3
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	1ad3      	subs	r3, r2, r3
 8002a18:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002a1c:	d9f5      	bls.n	8002a0a <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2201      	movs	r2, #1
 8002a22:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8002a24:	693b      	ldr	r3, [r7, #16]
 }
 8002a26:	4618      	mov	r0, r3
 8002a28:	3718      	adds	r7, #24
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}

08002a2e <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8002a2e:	b580      	push	{r7, lr}
 8002a30:	b084      	sub	sp, #16
 8002a32:	af00      	add	r7, sp, #0
 8002a34:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8002a36:	2300      	movs	r3, #0
 8002a38:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	695b      	ldr	r3, [r3, #20]
 8002a3e:	687a      	ldr	r2, [r7, #4]
 8002a40:	6810      	ldr	r0, [r2, #0]
 8002a42:	f107 020c 	add.w	r2, r7, #12
 8002a46:	2101      	movs	r1, #1
 8002a48:	4798      	blx	r3
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	da02      	bge.n	8002a56 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8002a50:	f06f 0304 	mvn.w	r3, #4
 8002a54:	e06e      	b.n	8002b34 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	695b      	ldr	r3, [r3, #20]
 8002a5a:	687a      	ldr	r2, [r7, #4]
 8002a5c:	6810      	ldr	r0, [r2, #0]
 8002a5e:	f107 020c 	add.w	r2, r7, #12
 8002a62:	2101      	movs	r1, #1
 8002a64:	4798      	blx	r3
 8002a66:	4603      	mov	r3, r0
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	da02      	bge.n	8002a72 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8002a6c:	f06f 0304 	mvn.w	r3, #4
 8002a70:	e060      	b.n	8002b34 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	f003 0304 	and.w	r3, r3, #4
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d101      	bne.n	8002a80 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	e059      	b.n	8002b34 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	695b      	ldr	r3, [r3, #20]
 8002a84:	687a      	ldr	r2, [r7, #4]
 8002a86:	6810      	ldr	r0, [r2, #0]
 8002a88:	f107 020c 	add.w	r2, r7, #12
 8002a8c:	2100      	movs	r1, #0
 8002a8e:	4798      	blx	r3
 8002a90:	4603      	mov	r3, r0
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	da02      	bge.n	8002a9c <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8002a96:	f06f 0304 	mvn.w	r3, #4
 8002a9a:	e04b      	b.n	8002b34 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d11b      	bne.n	8002ade <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d006      	beq.n	8002abe <LAN8742_GetLinkState+0x90>
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d001      	beq.n	8002abe <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8002aba:	2302      	movs	r3, #2
 8002abc:	e03a      	b.n	8002b34 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d001      	beq.n	8002acc <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8002ac8:	2303      	movs	r3, #3
 8002aca:	e033      	b.n	8002b34 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d001      	beq.n	8002ada <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8002ad6:	2304      	movs	r3, #4
 8002ad8:	e02c      	b.n	8002b34 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8002ada:	2305      	movs	r3, #5
 8002adc:	e02a      	b.n	8002b34 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	695b      	ldr	r3, [r3, #20]
 8002ae2:	687a      	ldr	r2, [r7, #4]
 8002ae4:	6810      	ldr	r0, [r2, #0]
 8002ae6:	f107 020c 	add.w	r2, r7, #12
 8002aea:	211f      	movs	r1, #31
 8002aec:	4798      	blx	r3
 8002aee:	4603      	mov	r3, r0
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	da02      	bge.n	8002afa <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8002af4:	f06f 0304 	mvn.w	r3, #4
 8002af8:	e01c      	b.n	8002b34 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d101      	bne.n	8002b08 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8002b04:	2306      	movs	r3, #6
 8002b06:	e015      	b.n	8002b34 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	f003 031c 	and.w	r3, r3, #28
 8002b0e:	2b18      	cmp	r3, #24
 8002b10:	d101      	bne.n	8002b16 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8002b12:	2302      	movs	r3, #2
 8002b14:	e00e      	b.n	8002b34 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	f003 031c 	and.w	r3, r3, #28
 8002b1c:	2b08      	cmp	r3, #8
 8002b1e:	d101      	bne.n	8002b24 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8002b20:	2303      	movs	r3, #3
 8002b22:	e007      	b.n	8002b34 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	f003 031c 	and.w	r3, r3, #28
 8002b2a:	2b14      	cmp	r3, #20
 8002b2c:	d101      	bne.n	8002b32 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8002b2e:	2304      	movs	r3, #4
 8002b30:	e000      	b.n	8002b34 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8002b32:	2305      	movs	r3, #5
    }				
  }
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	3710      	adds	r7, #16
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}

08002b3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b082      	sub	sp, #8
 8002b40:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b42:	2003      	movs	r0, #3
 8002b44:	f000 f923 	bl	8002d8e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002b48:	f003 faee 	bl	8006128 <HAL_RCC_GetSysClockFreq>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	4b15      	ldr	r3, [pc, #84]	; (8002ba4 <HAL_Init+0x68>)
 8002b50:	699b      	ldr	r3, [r3, #24]
 8002b52:	0a1b      	lsrs	r3, r3, #8
 8002b54:	f003 030f 	and.w	r3, r3, #15
 8002b58:	4913      	ldr	r1, [pc, #76]	; (8002ba8 <HAL_Init+0x6c>)
 8002b5a:	5ccb      	ldrb	r3, [r1, r3]
 8002b5c:	f003 031f 	and.w	r3, r3, #31
 8002b60:	fa22 f303 	lsr.w	r3, r2, r3
 8002b64:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002b66:	4b0f      	ldr	r3, [pc, #60]	; (8002ba4 <HAL_Init+0x68>)
 8002b68:	699b      	ldr	r3, [r3, #24]
 8002b6a:	f003 030f 	and.w	r3, r3, #15
 8002b6e:	4a0e      	ldr	r2, [pc, #56]	; (8002ba8 <HAL_Init+0x6c>)
 8002b70:	5cd3      	ldrb	r3, [r2, r3]
 8002b72:	f003 031f 	and.w	r3, r3, #31
 8002b76:	687a      	ldr	r2, [r7, #4]
 8002b78:	fa22 f303 	lsr.w	r3, r2, r3
 8002b7c:	4a0b      	ldr	r2, [pc, #44]	; (8002bac <HAL_Init+0x70>)
 8002b7e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002b80:	4a0b      	ldr	r2, [pc, #44]	; (8002bb0 <HAL_Init+0x74>)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002b86:	2000      	movs	r0, #0
 8002b88:	f7ff fc48 	bl	800241c <HAL_InitTick>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d001      	beq.n	8002b96 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e002      	b.n	8002b9c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002b96:	f7ff fb4f 	bl	8002238 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b9a:	2300      	movs	r3, #0
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	3708      	adds	r7, #8
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}
 8002ba4:	58024400 	.word	0x58024400
 8002ba8:	08026ed8 	.word	0x08026ed8
 8002bac:	240002d0 	.word	0x240002d0
 8002bb0:	240002cc 	.word	0x240002cc

08002bb4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002bb8:	4b06      	ldr	r3, [pc, #24]	; (8002bd4 <HAL_IncTick+0x20>)
 8002bba:	781b      	ldrb	r3, [r3, #0]
 8002bbc:	461a      	mov	r2, r3
 8002bbe:	4b06      	ldr	r3, [pc, #24]	; (8002bd8 <HAL_IncTick+0x24>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4413      	add	r3, r2
 8002bc4:	4a04      	ldr	r2, [pc, #16]	; (8002bd8 <HAL_IncTick+0x24>)
 8002bc6:	6013      	str	r3, [r2, #0]
}
 8002bc8:	bf00      	nop
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd0:	4770      	bx	lr
 8002bd2:	bf00      	nop
 8002bd4:	240002d8 	.word	0x240002d8
 8002bd8:	24000cd8 	.word	0x24000cd8

08002bdc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	af00      	add	r7, sp, #0
  return uwTick;
 8002be0:	4b03      	ldr	r3, [pc, #12]	; (8002bf0 <HAL_GetTick+0x14>)
 8002be2:	681b      	ldr	r3, [r3, #0]
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	46bd      	mov	sp, r7
 8002be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bec:	4770      	bx	lr
 8002bee:	bf00      	nop
 8002bf0:	24000cd8 	.word	0x24000cd8

08002bf4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002bf8:	4b03      	ldr	r3, [pc, #12]	; (8002c08 <HAL_GetREVID+0x14>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	0c1b      	lsrs	r3, r3, #16
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	46bd      	mov	sp, r7
 8002c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c06:	4770      	bx	lr
 8002c08:	5c001000 	.word	0x5c001000

08002c0c <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b083      	sub	sp, #12
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8002c14:	4b06      	ldr	r3, [pc, #24]	; (8002c30 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002c1c:	4904      	ldr	r1, [pc, #16]	; (8002c30 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	4313      	orrs	r3, r2
 8002c22:	604b      	str	r3, [r1, #4]
}
 8002c24:	bf00      	nop
 8002c26:	370c      	adds	r7, #12
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2e:	4770      	bx	lr
 8002c30:	58000400 	.word	0x58000400

08002c34 <__NVIC_SetPriorityGrouping>:
{
 8002c34:	b480      	push	{r7}
 8002c36:	b085      	sub	sp, #20
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	f003 0307 	and.w	r3, r3, #7
 8002c42:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c44:	4b0b      	ldr	r3, [pc, #44]	; (8002c74 <__NVIC_SetPriorityGrouping+0x40>)
 8002c46:	68db      	ldr	r3, [r3, #12]
 8002c48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c4a:	68ba      	ldr	r2, [r7, #8]
 8002c4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c50:	4013      	ands	r3, r2
 8002c52:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002c5c:	4b06      	ldr	r3, [pc, #24]	; (8002c78 <__NVIC_SetPriorityGrouping+0x44>)
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c62:	4a04      	ldr	r2, [pc, #16]	; (8002c74 <__NVIC_SetPriorityGrouping+0x40>)
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	60d3      	str	r3, [r2, #12]
}
 8002c68:	bf00      	nop
 8002c6a:	3714      	adds	r7, #20
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c72:	4770      	bx	lr
 8002c74:	e000ed00 	.word	0xe000ed00
 8002c78:	05fa0000 	.word	0x05fa0000

08002c7c <__NVIC_GetPriorityGrouping>:
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c80:	4b04      	ldr	r3, [pc, #16]	; (8002c94 <__NVIC_GetPriorityGrouping+0x18>)
 8002c82:	68db      	ldr	r3, [r3, #12]
 8002c84:	0a1b      	lsrs	r3, r3, #8
 8002c86:	f003 0307 	and.w	r3, r3, #7
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr
 8002c94:	e000ed00 	.word	0xe000ed00

08002c98 <__NVIC_EnableIRQ>:
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b083      	sub	sp, #12
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002ca2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	db0b      	blt.n	8002cc2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002caa:	88fb      	ldrh	r3, [r7, #6]
 8002cac:	f003 021f 	and.w	r2, r3, #31
 8002cb0:	4907      	ldr	r1, [pc, #28]	; (8002cd0 <__NVIC_EnableIRQ+0x38>)
 8002cb2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002cb6:	095b      	lsrs	r3, r3, #5
 8002cb8:	2001      	movs	r0, #1
 8002cba:	fa00 f202 	lsl.w	r2, r0, r2
 8002cbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002cc2:	bf00      	nop
 8002cc4:	370c      	adds	r7, #12
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr
 8002cce:	bf00      	nop
 8002cd0:	e000e100 	.word	0xe000e100

08002cd4 <__NVIC_SetPriority>:
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b083      	sub	sp, #12
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	4603      	mov	r3, r0
 8002cdc:	6039      	str	r1, [r7, #0]
 8002cde:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002ce0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	db0a      	blt.n	8002cfe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	b2da      	uxtb	r2, r3
 8002cec:	490c      	ldr	r1, [pc, #48]	; (8002d20 <__NVIC_SetPriority+0x4c>)
 8002cee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002cf2:	0112      	lsls	r2, r2, #4
 8002cf4:	b2d2      	uxtb	r2, r2
 8002cf6:	440b      	add	r3, r1
 8002cf8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002cfc:	e00a      	b.n	8002d14 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	b2da      	uxtb	r2, r3
 8002d02:	4908      	ldr	r1, [pc, #32]	; (8002d24 <__NVIC_SetPriority+0x50>)
 8002d04:	88fb      	ldrh	r3, [r7, #6]
 8002d06:	f003 030f 	and.w	r3, r3, #15
 8002d0a:	3b04      	subs	r3, #4
 8002d0c:	0112      	lsls	r2, r2, #4
 8002d0e:	b2d2      	uxtb	r2, r2
 8002d10:	440b      	add	r3, r1
 8002d12:	761a      	strb	r2, [r3, #24]
}
 8002d14:	bf00      	nop
 8002d16:	370c      	adds	r7, #12
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1e:	4770      	bx	lr
 8002d20:	e000e100 	.word	0xe000e100
 8002d24:	e000ed00 	.word	0xe000ed00

08002d28 <NVIC_EncodePriority>:
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b089      	sub	sp, #36	; 0x24
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	60f8      	str	r0, [r7, #12]
 8002d30:	60b9      	str	r1, [r7, #8]
 8002d32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	f003 0307 	and.w	r3, r3, #7
 8002d3a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d3c:	69fb      	ldr	r3, [r7, #28]
 8002d3e:	f1c3 0307 	rsb	r3, r3, #7
 8002d42:	2b04      	cmp	r3, #4
 8002d44:	bf28      	it	cs
 8002d46:	2304      	movcs	r3, #4
 8002d48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d4a:	69fb      	ldr	r3, [r7, #28]
 8002d4c:	3304      	adds	r3, #4
 8002d4e:	2b06      	cmp	r3, #6
 8002d50:	d902      	bls.n	8002d58 <NVIC_EncodePriority+0x30>
 8002d52:	69fb      	ldr	r3, [r7, #28]
 8002d54:	3b03      	subs	r3, #3
 8002d56:	e000      	b.n	8002d5a <NVIC_EncodePriority+0x32>
 8002d58:	2300      	movs	r3, #0
 8002d5a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d5c:	f04f 32ff 	mov.w	r2, #4294967295
 8002d60:	69bb      	ldr	r3, [r7, #24]
 8002d62:	fa02 f303 	lsl.w	r3, r2, r3
 8002d66:	43da      	mvns	r2, r3
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	401a      	ands	r2, r3
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d70:	f04f 31ff 	mov.w	r1, #4294967295
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	fa01 f303 	lsl.w	r3, r1, r3
 8002d7a:	43d9      	mvns	r1, r3
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d80:	4313      	orrs	r3, r2
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	3724      	adds	r7, #36	; 0x24
 8002d86:	46bd      	mov	sp, r7
 8002d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8c:	4770      	bx	lr

08002d8e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d8e:	b580      	push	{r7, lr}
 8002d90:	b082      	sub	sp, #8
 8002d92:	af00      	add	r7, sp, #0
 8002d94:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d96:	6878      	ldr	r0, [r7, #4]
 8002d98:	f7ff ff4c 	bl	8002c34 <__NVIC_SetPriorityGrouping>
}
 8002d9c:	bf00      	nop
 8002d9e:	3708      	adds	r7, #8
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}

08002da4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b086      	sub	sp, #24
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	4603      	mov	r3, r0
 8002dac:	60b9      	str	r1, [r7, #8]
 8002dae:	607a      	str	r2, [r7, #4]
 8002db0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002db2:	f7ff ff63 	bl	8002c7c <__NVIC_GetPriorityGrouping>
 8002db6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002db8:	687a      	ldr	r2, [r7, #4]
 8002dba:	68b9      	ldr	r1, [r7, #8]
 8002dbc:	6978      	ldr	r0, [r7, #20]
 8002dbe:	f7ff ffb3 	bl	8002d28 <NVIC_EncodePriority>
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002dc8:	4611      	mov	r1, r2
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f7ff ff82 	bl	8002cd4 <__NVIC_SetPriority>
}
 8002dd0:	bf00      	nop
 8002dd2:	3718      	adds	r7, #24
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}

08002dd8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b082      	sub	sp, #8
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	4603      	mov	r3, r0
 8002de0:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002de2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002de6:	4618      	mov	r0, r3
 8002de8:	f7ff ff56 	bl	8002c98 <__NVIC_EnableIRQ>
}
 8002dec:	bf00      	nop
 8002dee:	3708      	adds	r7, #8
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}

08002df4 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8002df4:	b480      	push	{r7}
 8002df6:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002df8:	f3bf 8f5f 	dmb	sy
}
 8002dfc:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002dfe:	4b07      	ldr	r3, [pc, #28]	; (8002e1c <HAL_MPU_Disable+0x28>)
 8002e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e02:	4a06      	ldr	r2, [pc, #24]	; (8002e1c <HAL_MPU_Disable+0x28>)
 8002e04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e08:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8002e0a:	4b05      	ldr	r3, [pc, #20]	; (8002e20 <HAL_MPU_Disable+0x2c>)
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	605a      	str	r2, [r3, #4]
}
 8002e10:	bf00      	nop
 8002e12:	46bd      	mov	sp, r7
 8002e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e18:	4770      	bx	lr
 8002e1a:	bf00      	nop
 8002e1c:	e000ed00 	.word	0xe000ed00
 8002e20:	e000ed90 	.word	0xe000ed90

08002e24 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b083      	sub	sp, #12
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002e2c:	4a0b      	ldr	r2, [pc, #44]	; (8002e5c <HAL_MPU_Enable+0x38>)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	f043 0301 	orr.w	r3, r3, #1
 8002e34:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002e36:	4b0a      	ldr	r3, [pc, #40]	; (8002e60 <HAL_MPU_Enable+0x3c>)
 8002e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e3a:	4a09      	ldr	r2, [pc, #36]	; (8002e60 <HAL_MPU_Enable+0x3c>)
 8002e3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e40:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002e42:	f3bf 8f4f 	dsb	sy
}
 8002e46:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002e48:	f3bf 8f6f 	isb	sy
}
 8002e4c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8002e4e:	bf00      	nop
 8002e50:	370c      	adds	r7, #12
 8002e52:	46bd      	mov	sp, r7
 8002e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e58:	4770      	bx	lr
 8002e5a:	bf00      	nop
 8002e5c:	e000ed90 	.word	0xe000ed90
 8002e60:	e000ed00 	.word	0xe000ed00

08002e64 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b083      	sub	sp, #12
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	785a      	ldrb	r2, [r3, #1]
 8002e70:	4b1d      	ldr	r3, [pc, #116]	; (8002ee8 <HAL_MPU_ConfigRegion+0x84>)
 8002e72:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	781b      	ldrb	r3, [r3, #0]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d029      	beq.n	8002ed0 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8002e7c:	4a1a      	ldr	r2, [pc, #104]	; (8002ee8 <HAL_MPU_ConfigRegion+0x84>)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	7b1b      	ldrb	r3, [r3, #12]
 8002e88:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	7adb      	ldrb	r3, [r3, #11]
 8002e8e:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002e90:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	7a9b      	ldrb	r3, [r3, #10]
 8002e96:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002e98:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	7b5b      	ldrb	r3, [r3, #13]
 8002e9e:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002ea0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	7b9b      	ldrb	r3, [r3, #14]
 8002ea6:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002ea8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	7bdb      	ldrb	r3, [r3, #15]
 8002eae:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002eb0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	7a5b      	ldrb	r3, [r3, #9]
 8002eb6:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002eb8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	7a1b      	ldrb	r3, [r3, #8]
 8002ebe:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002ec0:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8002ec2:	687a      	ldr	r2, [r7, #4]
 8002ec4:	7812      	ldrb	r2, [r2, #0]
 8002ec6:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002ec8:	4a07      	ldr	r2, [pc, #28]	; (8002ee8 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002eca:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002ecc:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8002ece:	e005      	b.n	8002edc <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8002ed0:	4b05      	ldr	r3, [pc, #20]	; (8002ee8 <HAL_MPU_ConfigRegion+0x84>)
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8002ed6:	4b04      	ldr	r3, [pc, #16]	; (8002ee8 <HAL_MPU_ConfigRegion+0x84>)
 8002ed8:	2200      	movs	r2, #0
 8002eda:	611a      	str	r2, [r3, #16]
}
 8002edc:	bf00      	nop
 8002ede:	370c      	adds	r7, #12
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee6:	4770      	bx	lr
 8002ee8:	e000ed90 	.word	0xe000ed90

08002eec <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b084      	sub	sp, #16
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d101      	bne.n	8002efe <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	e237      	b.n	800336e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	2b02      	cmp	r3, #2
 8002f08:	d004      	beq.n	8002f14 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2280      	movs	r2, #128	; 0x80
 8002f0e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	e22c      	b.n	800336e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a5c      	ldr	r2, [pc, #368]	; (800308c <HAL_DMA_Abort_IT+0x1a0>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d04a      	beq.n	8002fb4 <HAL_DMA_Abort_IT+0xc8>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a5b      	ldr	r2, [pc, #364]	; (8003090 <HAL_DMA_Abort_IT+0x1a4>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d045      	beq.n	8002fb4 <HAL_DMA_Abort_IT+0xc8>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a59      	ldr	r2, [pc, #356]	; (8003094 <HAL_DMA_Abort_IT+0x1a8>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d040      	beq.n	8002fb4 <HAL_DMA_Abort_IT+0xc8>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a58      	ldr	r2, [pc, #352]	; (8003098 <HAL_DMA_Abort_IT+0x1ac>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d03b      	beq.n	8002fb4 <HAL_DMA_Abort_IT+0xc8>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a56      	ldr	r2, [pc, #344]	; (800309c <HAL_DMA_Abort_IT+0x1b0>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d036      	beq.n	8002fb4 <HAL_DMA_Abort_IT+0xc8>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a55      	ldr	r2, [pc, #340]	; (80030a0 <HAL_DMA_Abort_IT+0x1b4>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d031      	beq.n	8002fb4 <HAL_DMA_Abort_IT+0xc8>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a53      	ldr	r2, [pc, #332]	; (80030a4 <HAL_DMA_Abort_IT+0x1b8>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d02c      	beq.n	8002fb4 <HAL_DMA_Abort_IT+0xc8>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a52      	ldr	r2, [pc, #328]	; (80030a8 <HAL_DMA_Abort_IT+0x1bc>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d027      	beq.n	8002fb4 <HAL_DMA_Abort_IT+0xc8>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a50      	ldr	r2, [pc, #320]	; (80030ac <HAL_DMA_Abort_IT+0x1c0>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d022      	beq.n	8002fb4 <HAL_DMA_Abort_IT+0xc8>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a4f      	ldr	r2, [pc, #316]	; (80030b0 <HAL_DMA_Abort_IT+0x1c4>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d01d      	beq.n	8002fb4 <HAL_DMA_Abort_IT+0xc8>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a4d      	ldr	r2, [pc, #308]	; (80030b4 <HAL_DMA_Abort_IT+0x1c8>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d018      	beq.n	8002fb4 <HAL_DMA_Abort_IT+0xc8>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a4c      	ldr	r2, [pc, #304]	; (80030b8 <HAL_DMA_Abort_IT+0x1cc>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d013      	beq.n	8002fb4 <HAL_DMA_Abort_IT+0xc8>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a4a      	ldr	r2, [pc, #296]	; (80030bc <HAL_DMA_Abort_IT+0x1d0>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d00e      	beq.n	8002fb4 <HAL_DMA_Abort_IT+0xc8>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a49      	ldr	r2, [pc, #292]	; (80030c0 <HAL_DMA_Abort_IT+0x1d4>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d009      	beq.n	8002fb4 <HAL_DMA_Abort_IT+0xc8>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a47      	ldr	r2, [pc, #284]	; (80030c4 <HAL_DMA_Abort_IT+0x1d8>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d004      	beq.n	8002fb4 <HAL_DMA_Abort_IT+0xc8>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a46      	ldr	r2, [pc, #280]	; (80030c8 <HAL_DMA_Abort_IT+0x1dc>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d101      	bne.n	8002fb8 <HAL_DMA_Abort_IT+0xcc>
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e000      	b.n	8002fba <HAL_DMA_Abort_IT+0xce>
 8002fb8:	2300      	movs	r3, #0
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	f000 8086 	beq.w	80030cc <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2204      	movs	r2, #4
 8002fc4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a2f      	ldr	r2, [pc, #188]	; (800308c <HAL_DMA_Abort_IT+0x1a0>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d04a      	beq.n	8003068 <HAL_DMA_Abort_IT+0x17c>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a2e      	ldr	r2, [pc, #184]	; (8003090 <HAL_DMA_Abort_IT+0x1a4>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d045      	beq.n	8003068 <HAL_DMA_Abort_IT+0x17c>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a2c      	ldr	r2, [pc, #176]	; (8003094 <HAL_DMA_Abort_IT+0x1a8>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d040      	beq.n	8003068 <HAL_DMA_Abort_IT+0x17c>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a2b      	ldr	r2, [pc, #172]	; (8003098 <HAL_DMA_Abort_IT+0x1ac>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d03b      	beq.n	8003068 <HAL_DMA_Abort_IT+0x17c>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a29      	ldr	r2, [pc, #164]	; (800309c <HAL_DMA_Abort_IT+0x1b0>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d036      	beq.n	8003068 <HAL_DMA_Abort_IT+0x17c>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a28      	ldr	r2, [pc, #160]	; (80030a0 <HAL_DMA_Abort_IT+0x1b4>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d031      	beq.n	8003068 <HAL_DMA_Abort_IT+0x17c>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a26      	ldr	r2, [pc, #152]	; (80030a4 <HAL_DMA_Abort_IT+0x1b8>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d02c      	beq.n	8003068 <HAL_DMA_Abort_IT+0x17c>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a25      	ldr	r2, [pc, #148]	; (80030a8 <HAL_DMA_Abort_IT+0x1bc>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d027      	beq.n	8003068 <HAL_DMA_Abort_IT+0x17c>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a23      	ldr	r2, [pc, #140]	; (80030ac <HAL_DMA_Abort_IT+0x1c0>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d022      	beq.n	8003068 <HAL_DMA_Abort_IT+0x17c>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a22      	ldr	r2, [pc, #136]	; (80030b0 <HAL_DMA_Abort_IT+0x1c4>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d01d      	beq.n	8003068 <HAL_DMA_Abort_IT+0x17c>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a20      	ldr	r2, [pc, #128]	; (80030b4 <HAL_DMA_Abort_IT+0x1c8>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d018      	beq.n	8003068 <HAL_DMA_Abort_IT+0x17c>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a1f      	ldr	r2, [pc, #124]	; (80030b8 <HAL_DMA_Abort_IT+0x1cc>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d013      	beq.n	8003068 <HAL_DMA_Abort_IT+0x17c>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a1d      	ldr	r2, [pc, #116]	; (80030bc <HAL_DMA_Abort_IT+0x1d0>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d00e      	beq.n	8003068 <HAL_DMA_Abort_IT+0x17c>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a1c      	ldr	r2, [pc, #112]	; (80030c0 <HAL_DMA_Abort_IT+0x1d4>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d009      	beq.n	8003068 <HAL_DMA_Abort_IT+0x17c>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a1a      	ldr	r2, [pc, #104]	; (80030c4 <HAL_DMA_Abort_IT+0x1d8>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d004      	beq.n	8003068 <HAL_DMA_Abort_IT+0x17c>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a19      	ldr	r2, [pc, #100]	; (80030c8 <HAL_DMA_Abort_IT+0x1dc>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d108      	bne.n	800307a <HAL_DMA_Abort_IT+0x18e>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	681a      	ldr	r2, [r3, #0]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f022 0201 	bic.w	r2, r2, #1
 8003076:	601a      	str	r2, [r3, #0]
 8003078:	e178      	b.n	800336c <HAL_DMA_Abort_IT+0x480>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f022 0201 	bic.w	r2, r2, #1
 8003088:	601a      	str	r2, [r3, #0]
 800308a:	e16f      	b.n	800336c <HAL_DMA_Abort_IT+0x480>
 800308c:	40020010 	.word	0x40020010
 8003090:	40020028 	.word	0x40020028
 8003094:	40020040 	.word	0x40020040
 8003098:	40020058 	.word	0x40020058
 800309c:	40020070 	.word	0x40020070
 80030a0:	40020088 	.word	0x40020088
 80030a4:	400200a0 	.word	0x400200a0
 80030a8:	400200b8 	.word	0x400200b8
 80030ac:	40020410 	.word	0x40020410
 80030b0:	40020428 	.word	0x40020428
 80030b4:	40020440 	.word	0x40020440
 80030b8:	40020458 	.word	0x40020458
 80030bc:	40020470 	.word	0x40020470
 80030c0:	40020488 	.word	0x40020488
 80030c4:	400204a0 	.word	0x400204a0
 80030c8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f022 020e 	bic.w	r2, r2, #14
 80030da:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a6c      	ldr	r2, [pc, #432]	; (8003294 <HAL_DMA_Abort_IT+0x3a8>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d04a      	beq.n	800317c <HAL_DMA_Abort_IT+0x290>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a6b      	ldr	r2, [pc, #428]	; (8003298 <HAL_DMA_Abort_IT+0x3ac>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d045      	beq.n	800317c <HAL_DMA_Abort_IT+0x290>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a69      	ldr	r2, [pc, #420]	; (800329c <HAL_DMA_Abort_IT+0x3b0>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d040      	beq.n	800317c <HAL_DMA_Abort_IT+0x290>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a68      	ldr	r2, [pc, #416]	; (80032a0 <HAL_DMA_Abort_IT+0x3b4>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d03b      	beq.n	800317c <HAL_DMA_Abort_IT+0x290>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a66      	ldr	r2, [pc, #408]	; (80032a4 <HAL_DMA_Abort_IT+0x3b8>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d036      	beq.n	800317c <HAL_DMA_Abort_IT+0x290>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a65      	ldr	r2, [pc, #404]	; (80032a8 <HAL_DMA_Abort_IT+0x3bc>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d031      	beq.n	800317c <HAL_DMA_Abort_IT+0x290>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a63      	ldr	r2, [pc, #396]	; (80032ac <HAL_DMA_Abort_IT+0x3c0>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d02c      	beq.n	800317c <HAL_DMA_Abort_IT+0x290>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a62      	ldr	r2, [pc, #392]	; (80032b0 <HAL_DMA_Abort_IT+0x3c4>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d027      	beq.n	800317c <HAL_DMA_Abort_IT+0x290>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a60      	ldr	r2, [pc, #384]	; (80032b4 <HAL_DMA_Abort_IT+0x3c8>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d022      	beq.n	800317c <HAL_DMA_Abort_IT+0x290>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a5f      	ldr	r2, [pc, #380]	; (80032b8 <HAL_DMA_Abort_IT+0x3cc>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d01d      	beq.n	800317c <HAL_DMA_Abort_IT+0x290>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a5d      	ldr	r2, [pc, #372]	; (80032bc <HAL_DMA_Abort_IT+0x3d0>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d018      	beq.n	800317c <HAL_DMA_Abort_IT+0x290>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a5c      	ldr	r2, [pc, #368]	; (80032c0 <HAL_DMA_Abort_IT+0x3d4>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d013      	beq.n	800317c <HAL_DMA_Abort_IT+0x290>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a5a      	ldr	r2, [pc, #360]	; (80032c4 <HAL_DMA_Abort_IT+0x3d8>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d00e      	beq.n	800317c <HAL_DMA_Abort_IT+0x290>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a59      	ldr	r2, [pc, #356]	; (80032c8 <HAL_DMA_Abort_IT+0x3dc>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d009      	beq.n	800317c <HAL_DMA_Abort_IT+0x290>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a57      	ldr	r2, [pc, #348]	; (80032cc <HAL_DMA_Abort_IT+0x3e0>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d004      	beq.n	800317c <HAL_DMA_Abort_IT+0x290>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a56      	ldr	r2, [pc, #344]	; (80032d0 <HAL_DMA_Abort_IT+0x3e4>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d108      	bne.n	800318e <HAL_DMA_Abort_IT+0x2a2>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f022 0201 	bic.w	r2, r2, #1
 800318a:	601a      	str	r2, [r3, #0]
 800318c:	e007      	b.n	800319e <HAL_DMA_Abort_IT+0x2b2>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f022 0201 	bic.w	r2, r2, #1
 800319c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a3c      	ldr	r2, [pc, #240]	; (8003294 <HAL_DMA_Abort_IT+0x3a8>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d072      	beq.n	800328e <HAL_DMA_Abort_IT+0x3a2>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a3a      	ldr	r2, [pc, #232]	; (8003298 <HAL_DMA_Abort_IT+0x3ac>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d06d      	beq.n	800328e <HAL_DMA_Abort_IT+0x3a2>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a39      	ldr	r2, [pc, #228]	; (800329c <HAL_DMA_Abort_IT+0x3b0>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d068      	beq.n	800328e <HAL_DMA_Abort_IT+0x3a2>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a37      	ldr	r2, [pc, #220]	; (80032a0 <HAL_DMA_Abort_IT+0x3b4>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d063      	beq.n	800328e <HAL_DMA_Abort_IT+0x3a2>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a36      	ldr	r2, [pc, #216]	; (80032a4 <HAL_DMA_Abort_IT+0x3b8>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d05e      	beq.n	800328e <HAL_DMA_Abort_IT+0x3a2>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a34      	ldr	r2, [pc, #208]	; (80032a8 <HAL_DMA_Abort_IT+0x3bc>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d059      	beq.n	800328e <HAL_DMA_Abort_IT+0x3a2>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a33      	ldr	r2, [pc, #204]	; (80032ac <HAL_DMA_Abort_IT+0x3c0>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d054      	beq.n	800328e <HAL_DMA_Abort_IT+0x3a2>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a31      	ldr	r2, [pc, #196]	; (80032b0 <HAL_DMA_Abort_IT+0x3c4>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d04f      	beq.n	800328e <HAL_DMA_Abort_IT+0x3a2>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a30      	ldr	r2, [pc, #192]	; (80032b4 <HAL_DMA_Abort_IT+0x3c8>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d04a      	beq.n	800328e <HAL_DMA_Abort_IT+0x3a2>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a2e      	ldr	r2, [pc, #184]	; (80032b8 <HAL_DMA_Abort_IT+0x3cc>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d045      	beq.n	800328e <HAL_DMA_Abort_IT+0x3a2>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a2d      	ldr	r2, [pc, #180]	; (80032bc <HAL_DMA_Abort_IT+0x3d0>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d040      	beq.n	800328e <HAL_DMA_Abort_IT+0x3a2>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a2b      	ldr	r2, [pc, #172]	; (80032c0 <HAL_DMA_Abort_IT+0x3d4>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d03b      	beq.n	800328e <HAL_DMA_Abort_IT+0x3a2>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a2a      	ldr	r2, [pc, #168]	; (80032c4 <HAL_DMA_Abort_IT+0x3d8>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d036      	beq.n	800328e <HAL_DMA_Abort_IT+0x3a2>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a28      	ldr	r2, [pc, #160]	; (80032c8 <HAL_DMA_Abort_IT+0x3dc>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d031      	beq.n	800328e <HAL_DMA_Abort_IT+0x3a2>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a27      	ldr	r2, [pc, #156]	; (80032cc <HAL_DMA_Abort_IT+0x3e0>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d02c      	beq.n	800328e <HAL_DMA_Abort_IT+0x3a2>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a25      	ldr	r2, [pc, #148]	; (80032d0 <HAL_DMA_Abort_IT+0x3e4>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d027      	beq.n	800328e <HAL_DMA_Abort_IT+0x3a2>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a24      	ldr	r2, [pc, #144]	; (80032d4 <HAL_DMA_Abort_IT+0x3e8>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d022      	beq.n	800328e <HAL_DMA_Abort_IT+0x3a2>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a22      	ldr	r2, [pc, #136]	; (80032d8 <HAL_DMA_Abort_IT+0x3ec>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d01d      	beq.n	800328e <HAL_DMA_Abort_IT+0x3a2>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a21      	ldr	r2, [pc, #132]	; (80032dc <HAL_DMA_Abort_IT+0x3f0>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d018      	beq.n	800328e <HAL_DMA_Abort_IT+0x3a2>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a1f      	ldr	r2, [pc, #124]	; (80032e0 <HAL_DMA_Abort_IT+0x3f4>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d013      	beq.n	800328e <HAL_DMA_Abort_IT+0x3a2>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a1e      	ldr	r2, [pc, #120]	; (80032e4 <HAL_DMA_Abort_IT+0x3f8>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d00e      	beq.n	800328e <HAL_DMA_Abort_IT+0x3a2>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a1c      	ldr	r2, [pc, #112]	; (80032e8 <HAL_DMA_Abort_IT+0x3fc>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d009      	beq.n	800328e <HAL_DMA_Abort_IT+0x3a2>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a1b      	ldr	r2, [pc, #108]	; (80032ec <HAL_DMA_Abort_IT+0x400>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d004      	beq.n	800328e <HAL_DMA_Abort_IT+0x3a2>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a19      	ldr	r2, [pc, #100]	; (80032f0 <HAL_DMA_Abort_IT+0x404>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d132      	bne.n	80032f4 <HAL_DMA_Abort_IT+0x408>
 800328e:	2301      	movs	r3, #1
 8003290:	e031      	b.n	80032f6 <HAL_DMA_Abort_IT+0x40a>
 8003292:	bf00      	nop
 8003294:	40020010 	.word	0x40020010
 8003298:	40020028 	.word	0x40020028
 800329c:	40020040 	.word	0x40020040
 80032a0:	40020058 	.word	0x40020058
 80032a4:	40020070 	.word	0x40020070
 80032a8:	40020088 	.word	0x40020088
 80032ac:	400200a0 	.word	0x400200a0
 80032b0:	400200b8 	.word	0x400200b8
 80032b4:	40020410 	.word	0x40020410
 80032b8:	40020428 	.word	0x40020428
 80032bc:	40020440 	.word	0x40020440
 80032c0:	40020458 	.word	0x40020458
 80032c4:	40020470 	.word	0x40020470
 80032c8:	40020488 	.word	0x40020488
 80032cc:	400204a0 	.word	0x400204a0
 80032d0:	400204b8 	.word	0x400204b8
 80032d4:	58025408 	.word	0x58025408
 80032d8:	5802541c 	.word	0x5802541c
 80032dc:	58025430 	.word	0x58025430
 80032e0:	58025444 	.word	0x58025444
 80032e4:	58025458 	.word	0x58025458
 80032e8:	5802546c 	.word	0x5802546c
 80032ec:	58025480 	.word	0x58025480
 80032f0:	58025494 	.word	0x58025494
 80032f4:	2300      	movs	r3, #0
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d028      	beq.n	800334c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003304:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003308:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800330e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003314:	f003 031f 	and.w	r3, r3, #31
 8003318:	2201      	movs	r2, #1
 800331a:	409a      	lsls	r2, r3
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003324:	687a      	ldr	r2, [r7, #4]
 8003326:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003328:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800332e:	2b00      	cmp	r3, #0
 8003330:	d00c      	beq.n	800334c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003336:	681a      	ldr	r2, [r3, #0]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800333c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003340:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003346:	687a      	ldr	r2, [r7, #4]
 8003348:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800334a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2200      	movs	r2, #0
 8003350:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2201      	movs	r2, #1
 8003358:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003360:	2b00      	cmp	r3, #0
 8003362:	d003      	beq.n	800336c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003368:	6878      	ldr	r0, [r7, #4]
 800336a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800336c:	2300      	movs	r3, #0
}
 800336e:	4618      	mov	r0, r3
 8003370:	3710      	adds	r7, #16
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}
 8003376:	bf00      	nop

08003378 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b084      	sub	sp, #16
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d101      	bne.n	800338a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	e0c8      	b.n	800351c <HAL_ETH_Init+0x1a4>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800338e:	2b00      	cmp	r3, #0
 8003390:	d102      	bne.n	8003398 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	f006 fd6e 	bl	8009e74 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2223      	movs	r2, #35	; 0x23
 800339c:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800339e:	4b61      	ldr	r3, [pc, #388]	; (8003524 <HAL_ETH_Init+0x1ac>)
 80033a0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80033a4:	4a5f      	ldr	r2, [pc, #380]	; (8003524 <HAL_ETH_Init+0x1ac>)
 80033a6:	f043 0302 	orr.w	r3, r3, #2
 80033aa:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80033ae:	4b5d      	ldr	r3, [pc, #372]	; (8003524 <HAL_ETH_Init+0x1ac>)
 80033b0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80033b4:	f003 0302 	and.w	r3, r3, #2
 80033b8:	60bb      	str	r3, [r7, #8]
 80033ba:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	7a1b      	ldrb	r3, [r3, #8]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d103      	bne.n	80033cc <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80033c4:	2000      	movs	r0, #0
 80033c6:	f7ff fc21 	bl	8002c0c <HAL_SYSCFG_ETHInterfaceSelect>
 80033ca:	e003      	b.n	80033d4 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80033cc:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80033d0:	f7ff fc1c 	bl	8002c0c <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	687a      	ldr	r2, [r7, #4]
 80033e0:	6812      	ldr	r2, [r2, #0]
 80033e2:	f043 0301 	orr.w	r3, r3, #1
 80033e6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80033ea:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80033ec:	f7ff fbf6 	bl	8002bdc <HAL_GetTick>
 80033f0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80033f2:	e00f      	b.n	8003414 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 80033f4:	f7ff fbf2 	bl	8002bdc <HAL_GetTick>
 80033f8:	4602      	mov	r2, r0
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	1ad3      	subs	r3, r2, r3
 80033fe:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003402:	d907      	bls.n	8003414 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2204      	movs	r2, #4
 8003408:	675a      	str	r2, [r3, #116]	; 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	22e0      	movs	r2, #224	; 0xe0
 800340e:	66da      	str	r2, [r3, #108]	; 0x6c
      /* Return Error */
      return HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	e083      	b.n	800351c <HAL_ETH_Init+0x1a4>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f003 0301 	and.w	r3, r3, #1
 8003422:	2b00      	cmp	r3, #0
 8003424:	d1e6      	bne.n	80033f4 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	f001 faec 	bl	8004a04 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 800342c:	f002 fff6 	bl	800641c <HAL_RCC_GetHCLKFreq>
 8003430:	4603      	mov	r3, r0
 8003432:	4a3d      	ldr	r2, [pc, #244]	; (8003528 <HAL_ETH_Init+0x1b0>)
 8003434:	fba2 2303 	umull	r2, r3, r2, r3
 8003438:	0c9a      	lsrs	r2, r3, #18
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	3a01      	subs	r2, #1
 8003440:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003444:	6878      	ldr	r0, [r7, #4]
 8003446:	f001 fa3f 	bl	80048c8 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003452:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003456:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 800345a:	687a      	ldr	r2, [r7, #4]
 800345c:	6812      	ldr	r2, [r2, #0]
 800345e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003462:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003466:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	695b      	ldr	r3, [r3, #20]
 800346e:	f003 0303 	and.w	r3, r3, #3
 8003472:	2b00      	cmp	r3, #0
 8003474:	d007      	beq.n	8003486 <HAL_ETH_Init+0x10e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2201      	movs	r2, #1
 800347a:	675a      	str	r2, [r3, #116]	; 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	22e0      	movs	r2, #224	; 0xe0
 8003480:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Return Error */
    return HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	e04a      	b.n	800351c <HAL_ETH_Init+0x1a4>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800348e:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8003492:	4b26      	ldr	r3, [pc, #152]	; (800352c <HAL_ETH_Init+0x1b4>)
 8003494:	4013      	ands	r3, r2
 8003496:	687a      	ldr	r2, [r7, #4]
 8003498:	6952      	ldr	r2, [r2, #20]
 800349a:	0051      	lsls	r1, r2, #1
 800349c:	687a      	ldr	r2, [r7, #4]
 800349e:	6812      	ldr	r2, [r2, #0]
 80034a0:	430b      	orrs	r3, r1
 80034a2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80034a6:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f001 fb02 	bl	8004ab4 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80034b0:	6878      	ldr	r0, [r7, #4]
 80034b2:	f001 fb48 	bl	8004b46 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	3305      	adds	r3, #5
 80034bc:	781b      	ldrb	r3, [r3, #0]
 80034be:	021a      	lsls	r2, r3, #8
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	3304      	adds	r3, #4
 80034c6:	781b      	ldrb	r3, [r3, #0]
 80034c8:	4619      	mov	r1, r3
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	430a      	orrs	r2, r1
 80034d0:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	3303      	adds	r3, #3
 80034da:	781b      	ldrb	r3, [r3, #0]
 80034dc:	061a      	lsls	r2, r3, #24
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	3302      	adds	r3, #2
 80034e4:	781b      	ldrb	r3, [r3, #0]
 80034e6:	041b      	lsls	r3, r3, #16
 80034e8:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	3301      	adds	r3, #1
 80034f0:	781b      	ldrb	r3, [r3, #0]
 80034f2:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80034f4:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	781b      	ldrb	r3, [r3, #0]
 80034fc:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8003502:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003504:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2200      	movs	r2, #0
 800350c:	675a      	str	r2, [r3, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2210      	movs	r2, #16
 8003512:	66da      	str	r2, [r3, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2210      	movs	r2, #16
 8003518:	671a      	str	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800351a:	2300      	movs	r3, #0
}
 800351c:	4618      	mov	r0, r3
 800351e:	3710      	adds	r7, #16
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}
 8003524:	58024400 	.word	0x58024400
 8003528:	431bde83 	.word	0x431bde83
 800352c:	ffff8001 	.word	0xffff8001

08003530 <HAL_ETH_DescAssignMemory>:
  * @param  pBuffer1: address of buffer 1
  * @param  pBuffer2: address of buffer 2 if available
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DescAssignMemory(ETH_HandleTypeDef *heth, uint32_t Index, uint8_t *pBuffer1, uint8_t *pBuffer2)
{
 8003530:	b480      	push	{r7}
 8003532:	b087      	sub	sp, #28
 8003534:	af00      	add	r7, sp, #0
 8003536:	60f8      	str	r0, [r7, #12]
 8003538:	60b9      	str	r1, [r7, #8]
 800353a:	607a      	str	r2, [r7, #4]
 800353c:	603b      	str	r3, [r7, #0]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[Index];
 800353e:	68fa      	ldr	r2, [r7, #12]
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	3310      	adds	r3, #16
 8003544:	009b      	lsls	r3, r3, #2
 8003546:	4413      	add	r3, r2
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	617b      	str	r3, [r7, #20]

  if((pBuffer1 == NULL) || (Index >= (uint32_t)ETH_RX_DESC_CNT))
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d002      	beq.n	8003558 <HAL_ETH_DescAssignMemory+0x28>
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	2b03      	cmp	r3, #3
 8003556:	d904      	bls.n	8003562 <HAL_ETH_DescAssignMemory+0x32>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2201      	movs	r2, #1
 800355c:	675a      	str	r2, [r3, #116]	; 0x74
    /* Return Error */
    return HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	e021      	b.n	80035a6 <HAL_ETH_DescAssignMemory+0x76>
  }

  /* write buffer address to RDES0 */
  WRITE_REG(dmarxdesc->DESC0, (uint32_t)pBuffer1);
 8003562:	687a      	ldr	r2, [r7, #4]
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	601a      	str	r2, [r3, #0]
  /* store buffer address */
  WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)pBuffer1);
 8003568:	687a      	ldr	r2, [r7, #4]
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	611a      	str	r2, [r3, #16]
  /* set buffer address valid bit to RDES3 */
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	68db      	ldr	r3, [r3, #12]
 8003572:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	60da      	str	r2, [r3, #12]

  if(pBuffer2 != NULL)
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d00b      	beq.n	8003598 <HAL_ETH_DescAssignMemory+0x68>
  {
    /* write buffer 2 address to RDES1 */
    WRITE_REG(dmarxdesc->DESC2, (uint32_t)pBuffer2);
 8003580:	683a      	ldr	r2, [r7, #0]
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	609a      	str	r2, [r3, #8]
     /* store buffer 2 address */
    WRITE_REG(dmarxdesc->BackupAddr1, (uint32_t)pBuffer2);
 8003586:	683a      	ldr	r2, [r7, #0]
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	615a      	str	r2, [r3, #20]
    /* set buffer 2 address valid bit to RDES3 */
    SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	68db      	ldr	r3, [r3, #12]
 8003590:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	60da      	str	r2, [r3, #12]
  }
  /* set OWN bit to RDES3 */
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	68db      	ldr	r3, [r3, #12]
 800359c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80035a4:	2300      	movs	r3, #0
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	371c      	adds	r7, #28
 80035aa:	46bd      	mov	sp, r7
 80035ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b0:	4770      	bx	lr

080035b2 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 80035b2:	b480      	push	{r7}
 80035b4:	b085      	sub	sp, #20
 80035b6:	af00      	add	r7, sp, #0
 80035b8:	6078      	str	r0, [r7, #4]
  uint32_t descindex;

  ETH_DMADescTypeDef *dmarxdesc;

  if(heth->gState == HAL_ETH_STATE_READY)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035be:	2b10      	cmp	r3, #16
 80035c0:	d176      	bne.n	80036b0 <HAL_ETH_Start_IT+0xfe>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2223      	movs	r2, #35	; 0x23
 80035c6:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Set IOC bit to all Rx descriptors */
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 80035c8:	2300      	movs	r3, #0
 80035ca:	60fb      	str	r3, [r7, #12]
 80035cc:	e00f      	b.n	80035ee <HAL_ETH_Start_IT+0x3c>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 80035ce:	687a      	ldr	r2, [r7, #4]
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	3310      	adds	r3, #16
 80035d4:	009b      	lsls	r3, r3, #2
 80035d6:	4413      	add	r3, r2
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	60bb      	str	r3, [r7, #8]
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	68db      	ldr	r3, [r3, #12]
 80035e0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	60da      	str	r2, [r3, #12]
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	3301      	adds	r3, #1
 80035ec:	60fb      	str	r3, [r7, #12]
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2b03      	cmp	r3, #3
 80035f2:	d9ec      	bls.n	80035ce <HAL_ETH_Start_IT+0x1c>
    }

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2201      	movs	r2, #1
 80035f8:	665a      	str	r2, [r3, #100]	; 0x64

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	681a      	ldr	r2, [r3, #0]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f042 0202 	orr.w	r2, r2, #2
 8003608:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f042 0201 	orr.w	r2, r2, #1
 8003618:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f042 0201 	orr.w	r2, r2, #1
 800362a:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003636:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800363a:	687a      	ldr	r2, [r7, #4]
 800363c:	6812      	ldr	r2, [r2, #0]
 800363e:	f043 0301 	orr.w	r3, r3, #1
 8003642:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003646:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003652:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003656:	687a      	ldr	r2, [r7, #4]
 8003658:	6812      	ldr	r2, [r2, #0]
 800365a:	f043 0301 	orr.w	r3, r3, #1
 800365e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003662:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800366e:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8003672:	687a      	ldr	r2, [r7, #4]
 8003674:	6812      	ldr	r2, [r2, #0]
 8003676:	f443 7381 	orr.w	r3, r3, #258	; 0x102
 800367a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800367e:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800368a:	f8d3 1134 	ldr.w	r1, [r3, #308]	; 0x134
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	f24d 0341 	movw	r3, #53313	; 0xd041
 8003696:	430b      	orrs	r3, r1
 8003698:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800369c:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE));

    heth->gState = HAL_ETH_STATE_READY;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2210      	movs	r2, #16
 80036a4:	66da      	str	r2, [r3, #108]	; 0x6c
    heth->RxState = HAL_ETH_STATE_BUSY_RX;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2222      	movs	r2, #34	; 0x22
 80036aa:	671a      	str	r2, [r3, #112]	; 0x70

    return HAL_OK;
 80036ac:	2300      	movs	r3, #0
 80036ae:	e000      	b.n	80036b2 <HAL_ETH_Start_IT+0x100>
  }
  else
  {
    return HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
  }
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	3714      	adds	r7, #20
 80036b6:	46bd      	mov	sp, r7
 80036b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036bc:	4770      	bx	lr
	...

080036c0 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b085      	sub	sp, #20
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;

  if(heth->gState != HAL_ETH_STATE_RESET)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d067      	beq.n	80037a0 <HAL_ETH_Stop_IT+0xe0>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2223      	movs	r2, #35	; 0x23
 80036d4:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Disable interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036de:	f8d3 1134 	ldr.w	r1, [r3, #308]	; 0x134
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681a      	ldr	r2, [r3, #0]
 80036e6:	4b32      	ldr	r3, [pc, #200]	; (80037b0 <HAL_ETH_Stop_IT+0xf0>)
 80036e8:	400b      	ands	r3, r1
 80036ea:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80036ee:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036fa:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 80036fe:	687a      	ldr	r2, [r7, #4]
 8003700:	6812      	ldr	r2, [r2, #0]
 8003702:	f023 0301 	bic.w	r3, r3, #1
 8003706:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800370a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003716:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800371a:	687a      	ldr	r2, [r7, #4]
 800371c:	6812      	ldr	r2, [r2, #0]
 800371e:	f023 0301 	bic.w	r3, r3, #1
 8003722:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003726:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

    /* Disable the MAC reception */
    CLEAR_BIT( heth->Instance->MACCR, ETH_MACCR_RE);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	681a      	ldr	r2, [r3, #0]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f022 0201 	bic.w	r2, r2, #1
 8003738:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f042 0201 	orr.w	r2, r2, #1
 800374a:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	681a      	ldr	r2, [r3, #0]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f022 0202 	bic.w	r2, r2, #2
 800375c:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 800375e:	2300      	movs	r3, #0
 8003760:	60fb      	str	r3, [r7, #12]
 8003762:	e00f      	b.n	8003784 <HAL_ETH_Stop_IT+0xc4>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8003764:	687a      	ldr	r2, [r7, #4]
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	3310      	adds	r3, #16
 800376a:	009b      	lsls	r3, r3, #2
 800376c:	4413      	add	r3, r2
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	60bb      	str	r3, [r7, #8]
      CLEAR_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	68db      	ldr	r3, [r3, #12]
 8003776:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	60da      	str	r2, [r3, #12]
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	3301      	adds	r3, #1
 8003782:	60fb      	str	r3, [r7, #12]
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	2b03      	cmp	r3, #3
 8003788:	d9ec      	bls.n	8003764 <HAL_ETH_Stop_IT+0xa4>
    }

    heth->RxDescList.ItMode = 0U;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2200      	movs	r2, #0
 800378e:	665a      	str	r2, [r3, #100]	; 0x64

    heth->gState = HAL_ETH_STATE_READY;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2210      	movs	r2, #16
 8003794:	66da      	str	r2, [r3, #108]	; 0x6c
    heth->RxState = HAL_ETH_STATE_READY;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2210      	movs	r2, #16
 800379a:	671a      	str	r2, [r3, #112]	; 0x70

    /* Return function status */
    return HAL_OK;
 800379c:	2300      	movs	r3, #0
 800379e:	e000      	b.n	80037a2 <HAL_ETH_Stop_IT+0xe2>
  }
  else
  {
    return HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
  }
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	3714      	adds	r7, #20
 80037a6:	46bd      	mov	sp, r7
 80037a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ac:	4770      	bx	lr
 80037ae:	bf00      	nop
 80037b0:	ffff2fbe 	.word	0xffff2fbe

080037b4 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b086      	sub	sp, #24
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	60f8      	str	r0, [r7, #12]
 80037bc:	60b9      	str	r1, [r7, #8]
 80037be:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  const ETH_DMADescTypeDef *dmatxdesc;

  if(pTxConfig == NULL)
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d107      	bne.n	80037d6 <HAL_ETH_Transmit+0x22>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037ca:	f043 0201 	orr.w	r2, r3, #1
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	675a      	str	r2, [r3, #116]	; 0x74
    return HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	e076      	b.n	80038c4 <HAL_ETH_Transmit+0x110>
  }

  if(heth->gState == HAL_ETH_STATE_READY)
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037da:	2b10      	cmp	r3, #16
 80037dc:	d171      	bne.n	80038c2 <HAL_ETH_Transmit+0x10e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 80037de:	2200      	movs	r2, #0
 80037e0:	68b9      	ldr	r1, [r7, #8]
 80037e2:	68f8      	ldr	r0, [r7, #12]
 80037e4:	f001 fa0e 	bl	8004c04 <ETH_Prepare_Tx_Descriptors>
 80037e8:	4603      	mov	r3, r0
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d007      	beq.n	80037fe <HAL_ETH_Transmit+0x4a>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037f2:	f043 0202 	orr.w	r2, r3, #2
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	675a      	str	r2, [r3, #116]	; 0x74
      return HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	e062      	b.n	80038c4 <HAL_ETH_Transmit+0x110>
    }

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	3206      	adds	r2, #6
 8003806:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800380a:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003810:	1c5a      	adds	r2, r3, #1
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	629a      	str	r2, [r3, #40]	; 0x28
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800381a:	2b03      	cmp	r3, #3
 800381c:	d904      	bls.n	8003828 <HAL_ETH_Transmit+0x74>
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003822:	1f1a      	subs	r2, r3, #4
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	3106      	adds	r1, #6
 8003834:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003838:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800383c:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120

    tickstart = HAL_GetTick();
 8003840:	f7ff f9cc 	bl	8002bdc <HAL_GetTick>
 8003844:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 8003846:	e036      	b.n	80038b6 <HAL_ETH_Transmit+0x102>
    {
      if((heth->Instance->DMACSR & ETH_DMACSR_FBE) != (uint32_t)RESET)
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003850:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8003854:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003858:	2b00      	cmp	r3, #0
 800385a:	d012      	beq.n	8003882 <HAL_ETH_Transmit+0xce>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003860:	f043 0208 	orr.w	r2, r3, #8
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	675a      	str	r2, [r3, #116]	; 0x74
        heth->DMAErrorCode = heth->Instance->DMACSR;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003870:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	679a      	str	r2, [r3, #120]	; 0x78
        /* Set ETH HAL State to Ready */
        heth->gState = HAL_ETH_STATE_ERROR;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	22e0      	movs	r2, #224	; 0xe0
 800387c:	66da      	str	r2, [r3, #108]	; 0x6c
        /* Return function status */
        return HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	e020      	b.n	80038c4 <HAL_ETH_Transmit+0x110>
      }

      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003888:	d015      	beq.n	80038b6 <HAL_ETH_Transmit+0x102>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout) || (Timeout == 0U))
 800388a:	f7ff f9a7 	bl	8002bdc <HAL_GetTick>
 800388e:	4602      	mov	r2, r0
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	1ad3      	subs	r3, r2, r3
 8003894:	687a      	ldr	r2, [r7, #4]
 8003896:	429a      	cmp	r2, r3
 8003898:	d302      	bcc.n	80038a0 <HAL_ETH_Transmit+0xec>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d10a      	bne.n	80038b6 <HAL_ETH_Transmit+0x102>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038a4:	f043 0204 	orr.w	r2, r3, #4
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	675a      	str	r2, [r3, #116]	; 0x74
          heth->gState = HAL_ETH_STATE_ERROR;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	22e0      	movs	r2, #224	; 0xe0
 80038b0:	66da      	str	r2, [r3, #108]	; 0x6c
          return HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	e006      	b.n	80038c4 <HAL_ETH_Transmit+0x110>
    while((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	68db      	ldr	r3, [r3, #12]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	dbc4      	blt.n	8003848 <HAL_ETH_Transmit+0x94>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 80038be:	2300      	movs	r3, #0
 80038c0:	e000      	b.n	80038c4 <HAL_ETH_Transmit+0x110>
  }
  else
  {
    return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
  }
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	3718      	adds	r7, #24
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd80      	pop	{r7, pc}

080038cc <HAL_ETH_IsRxDataAvailable>:
  *         the configuration information for ETHERNET module
  * @retval  1: A Packet is received
  *          0: no Packet received
  */
uint8_t HAL_ETH_IsRxDataAvailable(ETH_HandleTypeDef *heth)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b089      	sub	sp, #36	; 0x24
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	3344      	adds	r3, #68	; 0x44
 80038d8:	60bb      	str	r3, [r7, #8]
  uint32_t descidx = dmarxdesclist->CurRxDesc;
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	691b      	ldr	r3, [r3, #16]
 80038de:	61fb      	str	r3, [r7, #28]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	69fa      	ldr	r2, [r7, #28]
 80038e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038e8:	61bb      	str	r3, [r7, #24]
  uint32_t descscancnt = 0;
 80038ea:	2300      	movs	r3, #0
 80038ec:	617b      	str	r3, [r7, #20]
  uint32_t appdesccnt = 0, firstappdescidx = 0;
 80038ee:	2300      	movs	r3, #0
 80038f0:	613b      	str	r3, [r7, #16]
 80038f2:	2300      	movs	r3, #0
 80038f4:	60fb      	str	r3, [r7, #12]

  if(dmarxdesclist->AppDescNbr != 0U)
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	699b      	ldr	r3, [r3, #24]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d06b      	beq.n	80039d6 <HAL_ETH_IsRxDataAvailable+0x10a>
  {
    /* data already received by not yet processed*/
    return 0;
 80038fe:	2300      	movs	r3, #0
 8003900:	e0ce      	b.n	8003aa0 <HAL_ETH_IsRxDataAvailable+0x1d4>
  }

  /* Check if descriptor is not owned by DMA */
  while((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (descscancnt < (uint32_t)ETH_RX_DESC_CNT))
  {
    descscancnt++;
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	3301      	adds	r3, #1
 8003906:	617b      	str	r3, [r7, #20]

    /* Check if last descriptor */
    if(READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 8003908:	69bb      	ldr	r3, [r7, #24]
 800390a:	68db      	ldr	r3, [r3, #12]
 800390c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003910:	2b00      	cmp	r3, #0
 8003912:	d036      	beq.n	8003982 <HAL_ETH_IsRxDataAvailable+0xb6>
    {
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt += 1U;
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	3301      	adds	r3, #1
 8003918:	613b      	str	r3, [r7, #16]

      if(appdesccnt == 1U)
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	2b01      	cmp	r3, #1
 800391e:	d101      	bne.n	8003924 <HAL_ETH_IsRxDataAvailable+0x58>
      {
        WRITE_REG(firstappdescidx, descidx);
 8003920:	69fb      	ldr	r3, [r7, #28]
 8003922:	60fb      	str	r3, [r7, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8003924:	69fb      	ldr	r3, [r7, #28]
 8003926:	3301      	adds	r3, #1
 8003928:	61fb      	str	r3, [r7, #28]
 800392a:	69fb      	ldr	r3, [r7, #28]
 800392c:	2b03      	cmp	r3, #3
 800392e:	d902      	bls.n	8003936 <HAL_ETH_IsRxDataAvailable+0x6a>
 8003930:	69fb      	ldr	r3, [r7, #28]
 8003932:	3b04      	subs	r3, #4
 8003934:	61fb      	str	r3, [r7, #28]

      /* Check for Context descriptor */
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8003936:	68bb      	ldr	r3, [r7, #8]
 8003938:	69fa      	ldr	r2, [r7, #28]
 800393a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800393e:	61bb      	str	r3, [r7, #24]

      if(READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_OWN)  == (uint32_t)RESET)
 8003940:	69bb      	ldr	r3, [r7, #24]
 8003942:	68db      	ldr	r3, [r3, #12]
 8003944:	2b00      	cmp	r3, #0
 8003946:	db11      	blt.n	800396c <HAL_ETH_IsRxDataAvailable+0xa0>
      {
        if(READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 8003948:	69bb      	ldr	r3, [r7, #24]
 800394a:	68db      	ldr	r3, [r3, #12]
 800394c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003950:	2b00      	cmp	r3, #0
 8003952:	d00b      	beq.n	800396c <HAL_ETH_IsRxDataAvailable+0xa0>
        {
          /* Increment the number of descriptors to be passed to the application */
          dmarxdesclist->AppContextDesc = 1;
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	2201      	movs	r2, #1
 8003958:	61da      	str	r2, [r3, #28]
          /* Increment current rx descriptor index */
          INCR_RX_DESC_INDEX(descidx, 1U);
 800395a:	69fb      	ldr	r3, [r7, #28]
 800395c:	3301      	adds	r3, #1
 800395e:	61fb      	str	r3, [r7, #28]
 8003960:	69fb      	ldr	r3, [r7, #28]
 8003962:	2b03      	cmp	r3, #3
 8003964:	d902      	bls.n	800396c <HAL_ETH_IsRxDataAvailable+0xa0>
 8003966:	69fb      	ldr	r3, [r7, #28]
 8003968:	3b04      	subs	r3, #4
 800396a:	61fb      	str	r3, [r7, #28]
        }
      }
      /* Fill information to Rx descriptors list */
      dmarxdesclist->CurRxDesc = descidx;
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	69fa      	ldr	r2, [r7, #28]
 8003970:	611a      	str	r2, [r3, #16]
      dmarxdesclist->FirstAppDesc = firstappdescidx;
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	68fa      	ldr	r2, [r7, #12]
 8003976:	615a      	str	r2, [r3, #20]
      dmarxdesclist->AppDescNbr = appdesccnt;
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	693a      	ldr	r2, [r7, #16]
 800397c:	619a      	str	r2, [r3, #24]

      /* Return function status */
      return 1;
 800397e:	2301      	movs	r3, #1
 8003980:	e08e      	b.n	8003aa0 <HAL_ETH_IsRxDataAvailable+0x1d4>
    }
    /* Check if first descriptor */
    else if(READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 8003982:	69bb      	ldr	r3, [r7, #24]
 8003984:	68db      	ldr	r3, [r3, #12]
 8003986:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800398a:	2b00      	cmp	r3, #0
 800398c:	d012      	beq.n	80039b4 <HAL_ETH_IsRxDataAvailable+0xe8>
    {
      WRITE_REG(firstappdescidx, descidx);
 800398e:	69fb      	ldr	r3, [r7, #28]
 8003990:	60fb      	str	r3, [r7, #12]
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt = 1U;
 8003992:	2301      	movs	r3, #1
 8003994:	613b      	str	r3, [r7, #16]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8003996:	69fb      	ldr	r3, [r7, #28]
 8003998:	3301      	adds	r3, #1
 800399a:	61fb      	str	r3, [r7, #28]
 800399c:	69fb      	ldr	r3, [r7, #28]
 800399e:	2b03      	cmp	r3, #3
 80039a0:	d902      	bls.n	80039a8 <HAL_ETH_IsRxDataAvailable+0xdc>
 80039a2:	69fb      	ldr	r3, [r7, #28]
 80039a4:	3b04      	subs	r3, #4
 80039a6:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	69fa      	ldr	r2, [r7, #28]
 80039ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039b0:	61bb      	str	r3, [r7, #24]
 80039b2:	e010      	b.n	80039d6 <HAL_ETH_IsRxDataAvailable+0x10a>
    }
    /* It should be an intermediate descriptor */
    else
    {
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt += 1U;
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	3301      	adds	r3, #1
 80039b8:	613b      	str	r3, [r7, #16]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80039ba:	69fb      	ldr	r3, [r7, #28]
 80039bc:	3301      	adds	r3, #1
 80039be:	61fb      	str	r3, [r7, #28]
 80039c0:	69fb      	ldr	r3, [r7, #28]
 80039c2:	2b03      	cmp	r3, #3
 80039c4:	d902      	bls.n	80039cc <HAL_ETH_IsRxDataAvailable+0x100>
 80039c6:	69fb      	ldr	r3, [r7, #28]
 80039c8:	3b04      	subs	r3, #4
 80039ca:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	69fa      	ldr	r2, [r7, #28]
 80039d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039d4:	61bb      	str	r3, [r7, #24]
  while((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (descscancnt < (uint32_t)ETH_RX_DESC_CNT))
 80039d6:	69bb      	ldr	r3, [r7, #24]
 80039d8:	68db      	ldr	r3, [r3, #12]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	db02      	blt.n	80039e4 <HAL_ETH_IsRxDataAvailable+0x118>
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	2b03      	cmp	r3, #3
 80039e2:	d98e      	bls.n	8003902 <HAL_ETH_IsRxDataAvailable+0x36>
    }
  }

  /* Build Descriptors if an incomplete Packet is received */
  if(appdesccnt > 0U)
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d056      	beq.n	8003a98 <HAL_ETH_IsRxDataAvailable+0x1cc>
  {
    dmarxdesclist->CurRxDesc = descidx;
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	69fa      	ldr	r2, [r7, #28]
 80039ee:	611a      	str	r2, [r3, #16]
    dmarxdesclist->FirstAppDesc = firstappdescidx;
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	68fa      	ldr	r2, [r7, #12]
 80039f4:	615a      	str	r2, [r3, #20]
    descidx = firstappdescidx;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	61fb      	str	r3, [r7, #28]
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	69fa      	ldr	r2, [r7, #28]
 80039fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a02:	61bb      	str	r3, [r7, #24]

    for(descscancnt = 0; descscancnt < appdesccnt; descscancnt++)
 8003a04:	2300      	movs	r3, #0
 8003a06:	617b      	str	r3, [r7, #20]
 8003a08:	e03b      	b.n	8003a82 <HAL_ETH_IsRxDataAvailable+0x1b6>
    {
      WRITE_REG(dmarxdesc->DESC0, dmarxdesc->BackupAddr0);
 8003a0a:	69bb      	ldr	r3, [r7, #24]
 8003a0c:	691a      	ldr	r2, [r3, #16]
 8003a0e:	69bb      	ldr	r3, [r7, #24]
 8003a10:	601a      	str	r2, [r3, #0]
      WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 8003a12:	69bb      	ldr	r3, [r7, #24]
 8003a14:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003a18:	60da      	str	r2, [r3, #12]

      if (READ_REG(dmarxdesc->BackupAddr1) != ((uint32_t)RESET))
 8003a1a:	69bb      	ldr	r3, [r7, #24]
 8003a1c:	695b      	ldr	r3, [r3, #20]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d009      	beq.n	8003a36 <HAL_ETH_IsRxDataAvailable+0x16a>
      {
        WRITE_REG(dmarxdesc->DESC2, dmarxdesc->BackupAddr1);
 8003a22:	69bb      	ldr	r3, [r7, #24]
 8003a24:	695a      	ldr	r2, [r3, #20]
 8003a26:	69bb      	ldr	r3, [r7, #24]
 8003a28:	609a      	str	r2, [r3, #8]
        SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 8003a2a:	69bb      	ldr	r3, [r7, #24]
 8003a2c:	68db      	ldr	r3, [r3, #12]
 8003a2e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003a32:	69bb      	ldr	r3, [r7, #24]
 8003a34:	60da      	str	r2, [r3, #12]
      }

      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 8003a36:	69bb      	ldr	r3, [r7, #24]
 8003a38:	68db      	ldr	r3, [r3, #12]
 8003a3a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003a3e:	69bb      	ldr	r3, [r7, #24]
 8003a40:	60da      	str	r2, [r3, #12]

      if(dmarxdesclist->ItMode != ((uint32_t)RESET))
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	6a1b      	ldr	r3, [r3, #32]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d005      	beq.n	8003a56 <HAL_ETH_IsRxDataAvailable+0x18a>
      {
        SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8003a4a:	69bb      	ldr	r3, [r7, #24]
 8003a4c:	68db      	ldr	r3, [r3, #12]
 8003a4e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003a52:	69bb      	ldr	r3, [r7, #24]
 8003a54:	60da      	str	r2, [r3, #12]
      }
      if(descscancnt < (appdesccnt - 1U))
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	3b01      	subs	r3, #1
 8003a5a:	697a      	ldr	r2, [r7, #20]
 8003a5c:	429a      	cmp	r2, r3
 8003a5e:	d20d      	bcs.n	8003a7c <HAL_ETH_IsRxDataAvailable+0x1b0>
      {
        /* Increment rx descriptor index */
        INCR_RX_DESC_INDEX(descidx, 1U);
 8003a60:	69fb      	ldr	r3, [r7, #28]
 8003a62:	3301      	adds	r3, #1
 8003a64:	61fb      	str	r3, [r7, #28]
 8003a66:	69fb      	ldr	r3, [r7, #28]
 8003a68:	2b03      	cmp	r3, #3
 8003a6a:	d902      	bls.n	8003a72 <HAL_ETH_IsRxDataAvailable+0x1a6>
 8003a6c:	69fb      	ldr	r3, [r7, #28]
 8003a6e:	3b04      	subs	r3, #4
 8003a70:	61fb      	str	r3, [r7, #28]
        /* Get descriptor address */
        dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	69fa      	ldr	r2, [r7, #28]
 8003a76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a7a:	61bb      	str	r3, [r7, #24]
    for(descscancnt = 0; descscancnt < appdesccnt; descscancnt++)
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	3301      	adds	r3, #1
 8003a80:	617b      	str	r3, [r7, #20]
 8003a82:	697a      	ldr	r2, [r7, #20]
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	429a      	cmp	r2, r3
 8003a88:	d3bf      	bcc.n	8003a0a <HAL_ETH_IsRxDataAvailable+0x13e>
      }
    }

    /* Set the Tail pointer address to the last rx descriptor hold by the app */
    WRITE_REG(heth->Instance->DMACRDTPR, (uint32_t)dmarxdesc);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681a      	ldr	r2, [r3, #0]
 8003a8e:	69bb      	ldr	r3, [r7, #24]
 8003a90:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003a94:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128
  }

  /* Fill information to Rx descriptors list: No received Packet */
  dmarxdesclist->AppDescNbr = 0U;
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	619a      	str	r2, [r3, #24]

  return 0;
 8003a9e:	2300      	movs	r3, #0
}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	3724      	adds	r7, #36	; 0x24
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aaa:	4770      	bx	lr

08003aac <HAL_ETH_GetRxDataBuffer>:
  *         the configuration information for ETHERNET module
  * @param  RxBuffer: Pointer to a ETH_BufferTypeDef structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetRxDataBuffer(ETH_HandleTypeDef *heth, ETH_BufferTypeDef *RxBuffer)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b08a      	sub	sp, #40	; 0x28
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
 8003ab4:	6039      	str	r1, [r7, #0]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	3344      	adds	r3, #68	; 0x44
 8003aba:	613b      	str	r3, [r7, #16]
  uint32_t descidx = dmarxdesclist->FirstAppDesc;
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	695b      	ldr	r3, [r3, #20]
 8003ac0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t index, accumulatedlen = 0, lastdesclen;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	61fb      	str	r3, [r7, #28]
  __IO const ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003aca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ace:	61bb      	str	r3, [r7, #24]
  ETH_BufferTypeDef *rxbuff = RxBuffer;
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	617b      	str	r3, [r7, #20]

  if(rxbuff == NULL)
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d104      	bne.n	8003ae4 <HAL_ETH_GetRxDataBuffer+0x38>
  {
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2201      	movs	r2, #1
 8003ade:	675a      	str	r2, [r3, #116]	; 0x74
    return HAL_ERROR;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	e07d      	b.n	8003be0 <HAL_ETH_GetRxDataBuffer+0x134>
  }

  if(dmarxdesclist->AppDescNbr == 0U)
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	699b      	ldr	r3, [r3, #24]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d10f      	bne.n	8003b0c <HAL_ETH_GetRxDataBuffer+0x60>
  {
    if(HAL_ETH_IsRxDataAvailable(heth) == 0U)
 8003aec:	6878      	ldr	r0, [r7, #4]
 8003aee:	f7ff feed 	bl	80038cc <HAL_ETH_IsRxDataAvailable>
 8003af2:	4603      	mov	r3, r0
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d101      	bne.n	8003afc <HAL_ETH_GetRxDataBuffer+0x50>
    {
      /* No data to be transferred to the application */
      return HAL_ERROR;
 8003af8:	2301      	movs	r3, #1
 8003afa:	e071      	b.n	8003be0 <HAL_ETH_GetRxDataBuffer+0x134>
    }
    else
    {
      descidx = dmarxdesclist->FirstAppDesc;
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	695b      	ldr	r3, [r3, #20]
 8003b00:	627b      	str	r3, [r7, #36]	; 0x24
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b0a:	61bb      	str	r3, [r7, #24]
    }
  }

  /* Get intermediate descriptors buffers: in case of the Packet is split into multi descriptors */
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	623b      	str	r3, [r7, #32]
 8003b10:	e031      	b.n	8003b76 <HAL_ETH_GetRxDataBuffer+0xca>
  {
    /* Get Address and length of the first buffer address */
    rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr0;
 8003b12:	69bb      	ldr	r3, [r7, #24]
 8003b14:	691b      	ldr	r3, [r3, #16]
 8003b16:	461a      	mov	r2, r3
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	601a      	str	r2, [r3, #0]
    rxbuff->len =  heth->Init.RxBuffLen;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	695a      	ldr	r2, [r3, #20]
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	605a      	str	r2, [r3, #4]

    /* Check if the second buffer address of this descriptor is valid */
    if(dmarxdesc->BackupAddr1 != 0U)
 8003b24:	69bb      	ldr	r3, [r7, #24]
 8003b26:	695b      	ldr	r3, [r3, #20]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d00b      	beq.n	8003b44 <HAL_ETH_GetRxDataBuffer+0x98>
    {
      /* Point to next buffer */
      rxbuff = rxbuff->next;
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	617b      	str	r3, [r7, #20]
      /* Get Address and length of the second buffer address */
      rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr1;
 8003b32:	69bb      	ldr	r3, [r7, #24]
 8003b34:	695b      	ldr	r3, [r3, #20]
 8003b36:	461a      	mov	r2, r3
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	601a      	str	r2, [r3, #0]
      rxbuff->len =  heth->Init.RxBuffLen;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	695a      	ldr	r2, [r3, #20]
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	605a      	str	r2, [r3, #4]
    {
      /* Nothing to do here */
    }

    /* get total length until this descriptor */
    accumulatedlen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL);
 8003b44:	69bb      	ldr	r3, [r7, #24]
 8003b46:	68db      	ldr	r3, [r3, #12]
 8003b48:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003b4c:	61fb      	str	r3, [r7, #28]

    /* Increment to next descriptor */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8003b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b50:	3301      	adds	r3, #1
 8003b52:	627b      	str	r3, [r7, #36]	; 0x24
 8003b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b56:	2b03      	cmp	r3, #3
 8003b58:	d902      	bls.n	8003b60 <HAL_ETH_GetRxDataBuffer+0xb4>
 8003b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b5c:	3b04      	subs	r3, #4
 8003b5e:	627b      	str	r3, [r7, #36]	; 0x24
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b68:	61bb      	str	r3, [r7, #24]

    /* Point to next buffer */
    rxbuff = rxbuff->next;
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	689b      	ldr	r3, [r3, #8]
 8003b6e:	617b      	str	r3, [r7, #20]
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 8003b70:	6a3b      	ldr	r3, [r7, #32]
 8003b72:	3301      	adds	r3, #1
 8003b74:	623b      	str	r3, [r7, #32]
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	699b      	ldr	r3, [r3, #24]
 8003b7a:	3b01      	subs	r3, #1
 8003b7c:	6a3a      	ldr	r2, [r7, #32]
 8003b7e:	429a      	cmp	r2, r3
 8003b80:	d3c7      	bcc.n	8003b12 <HAL_ETH_GetRxDataBuffer+0x66>
  }

  /* last descriptor data length */
  lastdesclen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - accumulatedlen;
 8003b82:	69bb      	ldr	r3, [r7, #24]
 8003b84:	68db      	ldr	r3, [r3, #12]
 8003b86:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8003b8a:	69fb      	ldr	r3, [r7, #28]
 8003b8c:	1ad3      	subs	r3, r2, r3
 8003b8e:	60fb      	str	r3, [r7, #12]

  /* Get Address of the first buffer address */
  rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr0;
 8003b90:	69bb      	ldr	r3, [r7, #24]
 8003b92:	691b      	ldr	r3, [r3, #16]
 8003b94:	461a      	mov	r2, r3
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	601a      	str	r2, [r3, #0]

  /* data is in only one buffer */
  if(lastdesclen <= heth->Init.RxBuffLen)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	695b      	ldr	r3, [r3, #20]
 8003b9e:	68fa      	ldr	r2, [r7, #12]
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	d803      	bhi.n	8003bac <HAL_ETH_GetRxDataBuffer+0x100>
  {
    rxbuff->len = lastdesclen;
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	68fa      	ldr	r2, [r7, #12]
 8003ba8:	605a      	str	r2, [r3, #4]
 8003baa:	e018      	b.n	8003bde <HAL_ETH_GetRxDataBuffer+0x132>
  }
  /* data is in two buffers */
  else if(dmarxdesc->BackupAddr1 != 0U)
 8003bac:	69bb      	ldr	r3, [r7, #24]
 8003bae:	695b      	ldr	r3, [r3, #20]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d012      	beq.n	8003bda <HAL_ETH_GetRxDataBuffer+0x12e>
  {
    /* Get the Length of the first buffer address */
    rxbuff->len = heth->Init.RxBuffLen;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	695a      	ldr	r2, [r3, #20]
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	605a      	str	r2, [r3, #4]
    /* Point to next buffer */
    rxbuff = rxbuff->next;
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	617b      	str	r3, [r7, #20]
    /* Get the Address the Length of the second buffer address */
    rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr1;
 8003bc2:	69bb      	ldr	r3, [r7, #24]
 8003bc4:	695b      	ldr	r3, [r3, #20]
 8003bc6:	461a      	mov	r2, r3
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	601a      	str	r2, [r3, #0]
    rxbuff->len =  lastdesclen - (heth->Init.RxBuffLen);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	695b      	ldr	r3, [r3, #20]
 8003bd0:	68fa      	ldr	r2, [r7, #12]
 8003bd2:	1ad2      	subs	r2, r2, r3
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	605a      	str	r2, [r3, #4]
 8003bd8:	e001      	b.n	8003bde <HAL_ETH_GetRxDataBuffer+0x132>
  }
  else /* Buffer 2 not valid*/
  {
    return HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	e000      	b.n	8003be0 <HAL_ETH_GetRxDataBuffer+0x134>
  }

  return HAL_OK;
 8003bde:	2300      	movs	r3, #0
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	3728      	adds	r7, #40	; 0x28
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bd80      	pop	{r7, pc}

08003be8 <HAL_ETH_GetRxDataLength>:
  *         the configuration information for ETHERNET module
  * @param  Length: parameter to hold Rx packet length
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetRxDataLength(ETH_HandleTypeDef *heth, uint32_t *Length)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b086      	sub	sp, #24
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
 8003bf0:	6039      	str	r1, [r7, #0]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	3344      	adds	r3, #68	; 0x44
 8003bf6:	613b      	str	r3, [r7, #16]
  uint32_t descidx = dmarxdesclist->FirstAppDesc;
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	695b      	ldr	r3, [r3, #20]
 8003bfc:	617b      	str	r3, [r7, #20]
  __IO const ETH_DMADescTypeDef *dmarxdesc;

  if(dmarxdesclist->AppDescNbr == 0U)
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	699b      	ldr	r3, [r3, #24]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d107      	bne.n	8003c16 <HAL_ETH_GetRxDataLength+0x2e>
  {
    if(HAL_ETH_IsRxDataAvailable(heth) == 0U)
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	f7ff fe60 	bl	80038cc <HAL_ETH_IsRxDataAvailable>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d101      	bne.n	8003c16 <HAL_ETH_GetRxDataLength+0x2e>
    {
      /* No data to be transferred to the application */
      return HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	e017      	b.n	8003c46 <HAL_ETH_GetRxDataLength+0x5e>
    }
  }

  /* Get index of last descriptor */
  INCR_RX_DESC_INDEX(descidx, (dmarxdesclist->AppDescNbr - 1U));
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	699a      	ldr	r2, [r3, #24]
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	4413      	add	r3, r2
 8003c1e:	3b01      	subs	r3, #1
 8003c20:	617b      	str	r3, [r7, #20]
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	2b03      	cmp	r3, #3
 8003c26:	d902      	bls.n	8003c2e <HAL_ETH_GetRxDataLength+0x46>
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	3b04      	subs	r3, #4
 8003c2c:	617b      	str	r3, [r7, #20]
  /* Point to last descriptor */
  dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	697a      	ldr	r2, [r7, #20]
 8003c32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c36:	60fb      	str	r3, [r7, #12]

  *Length = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	68db      	ldr	r3, [r3, #12]
 8003c3c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8003c44:	2300      	movs	r3, #0
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	3718      	adds	r7, #24
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}

08003c4e <HAL_ETH_BuildRxDescriptors>:
* @param  heth: pointer to a ETH_HandleTypeDef structure that contains
*         the configuration information for ETHERNET module
* @retval HAL status.
*/
HAL_StatusTypeDef HAL_ETH_BuildRxDescriptors(ETH_HandleTypeDef *heth)
{
 8003c4e:	b480      	push	{r7}
 8003c50:	b089      	sub	sp, #36	; 0x24
 8003c52:	af00      	add	r7, sp, #0
 8003c54:	6078      	str	r0, [r7, #4]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	3344      	adds	r3, #68	; 0x44
 8003c5a:	60fb      	str	r3, [r7, #12]
  uint32_t descindex = dmarxdesclist->FirstAppDesc;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	695b      	ldr	r3, [r3, #20]
 8003c60:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descindex];
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	69fa      	ldr	r2, [r7, #28]
 8003c66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c6a:	61bb      	str	r3, [r7, #24]
  uint32_t totalappdescnbr = dmarxdesclist->AppDescNbr;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	699b      	ldr	r3, [r3, #24]
 8003c70:	617b      	str	r3, [r7, #20]
  uint32_t descscan;

  if(dmarxdesclist->AppDescNbr == 0U)
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	699b      	ldr	r3, [r3, #24]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d101      	bne.n	8003c7e <HAL_ETH_BuildRxDescriptors+0x30>
  {
    /* No Rx descriptors to build */
    return HAL_ERROR;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	e057      	b.n	8003d2e <HAL_ETH_BuildRxDescriptors+0xe0>
  }

  if(dmarxdesclist->AppContextDesc != 0U)
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	69db      	ldr	r3, [r3, #28]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d002      	beq.n	8003c8c <HAL_ETH_BuildRxDescriptors+0x3e>
  {
    /* A context descriptor is available */
    totalappdescnbr += 1U;
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	3301      	adds	r3, #1
 8003c8a:	617b      	str	r3, [r7, #20]
  }

  for(descscan =0; descscan < totalappdescnbr; descscan++)
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	613b      	str	r3, [r7, #16]
 8003c90:	e03b      	b.n	8003d0a <HAL_ETH_BuildRxDescriptors+0xbc>
  {
    WRITE_REG(dmarxdesc->DESC0, dmarxdesc->BackupAddr0);
 8003c92:	69bb      	ldr	r3, [r7, #24]
 8003c94:	691a      	ldr	r2, [r3, #16]
 8003c96:	69bb      	ldr	r3, [r7, #24]
 8003c98:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 8003c9a:	69bb      	ldr	r3, [r7, #24]
 8003c9c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003ca0:	60da      	str	r2, [r3, #12]

    if (READ_REG(dmarxdesc->BackupAddr1) != 0U)
 8003ca2:	69bb      	ldr	r3, [r7, #24]
 8003ca4:	695b      	ldr	r3, [r3, #20]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d009      	beq.n	8003cbe <HAL_ETH_BuildRxDescriptors+0x70>
    {
      WRITE_REG(dmarxdesc->DESC2, dmarxdesc->BackupAddr1);
 8003caa:	69bb      	ldr	r3, [r7, #24]
 8003cac:	695a      	ldr	r2, [r3, #20]
 8003cae:	69bb      	ldr	r3, [r7, #24]
 8003cb0:	609a      	str	r2, [r3, #8]
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 8003cb2:	69bb      	ldr	r3, [r7, #24]
 8003cb4:	68db      	ldr	r3, [r3, #12]
 8003cb6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003cba:	69bb      	ldr	r3, [r7, #24]
 8003cbc:	60da      	str	r2, [r3, #12]
    }

    SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 8003cbe:	69bb      	ldr	r3, [r7, #24]
 8003cc0:	68db      	ldr	r3, [r3, #12]
 8003cc2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003cc6:	69bb      	ldr	r3, [r7, #24]
 8003cc8:	60da      	str	r2, [r3, #12]

    if(dmarxdesclist->ItMode != 0U)
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	6a1b      	ldr	r3, [r3, #32]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d005      	beq.n	8003cde <HAL_ETH_BuildRxDescriptors+0x90>
    {
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8003cd2:	69bb      	ldr	r3, [r7, #24]
 8003cd4:	68db      	ldr	r3, [r3, #12]
 8003cd6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003cda:	69bb      	ldr	r3, [r7, #24]
 8003cdc:	60da      	str	r2, [r3, #12]
    }

    if(descscan < (totalappdescnbr - 1U))
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	3b01      	subs	r3, #1
 8003ce2:	693a      	ldr	r2, [r7, #16]
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	d20d      	bcs.n	8003d04 <HAL_ETH_BuildRxDescriptors+0xb6>
    {
      /* Increment rx descriptor index */
      INCR_RX_DESC_INDEX(descindex, 1U);
 8003ce8:	69fb      	ldr	r3, [r7, #28]
 8003cea:	3301      	adds	r3, #1
 8003cec:	61fb      	str	r3, [r7, #28]
 8003cee:	69fb      	ldr	r3, [r7, #28]
 8003cf0:	2b03      	cmp	r3, #3
 8003cf2:	d902      	bls.n	8003cfa <HAL_ETH_BuildRxDescriptors+0xac>
 8003cf4:	69fb      	ldr	r3, [r7, #28]
 8003cf6:	3b04      	subs	r3, #4
 8003cf8:	61fb      	str	r3, [r7, #28]
      /* Get descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descindex];
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	69fa      	ldr	r2, [r7, #28]
 8003cfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d02:	61bb      	str	r3, [r7, #24]
  for(descscan =0; descscan < totalappdescnbr; descscan++)
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	3301      	adds	r3, #1
 8003d08:	613b      	str	r3, [r7, #16]
 8003d0a:	693a      	ldr	r2, [r7, #16]
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	429a      	cmp	r2, r3
 8003d10:	d3bf      	bcc.n	8003c92 <HAL_ETH_BuildRxDescriptors+0x44>
    }
  }

  /* Set the Tail pointer address to the last rx descriptor hold by the app */
  WRITE_REG(heth->Instance->DMACRDTPR, (uint32_t)dmarxdesc);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681a      	ldr	r2, [r3, #0]
 8003d16:	69bb      	ldr	r3, [r7, #24]
 8003d18:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003d1c:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128

  /* reset the Application desc number */
  WRITE_REG(dmarxdesclist->AppDescNbr, 0);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	2200      	movs	r2, #0
 8003d24:	619a      	str	r2, [r3, #24]

  /*  reset the application context descriptor */
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	661a      	str	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8003d2c:	2300      	movs	r3, #0
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	3724      	adds	r7, #36	; 0x24
 8003d32:	46bd      	mov	sp, r7
 8003d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d38:	4770      	bx	lr
	...

08003d3c <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b082      	sub	sp, #8
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_RI))
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d4c:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8003d50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d54:	2b40      	cmp	r3, #64	; 0x40
 8003d56:	d115      	bne.n	8003d84 <HAL_ETH_IRQHandler+0x48>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_RIE))
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d60:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8003d64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d68:	2b40      	cmp	r3, #64	; 0x40
 8003d6a:	d10b      	bne.n	8003d84 <HAL_ETH_IRQHandler+0x48>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 8003d6c:	6878      	ldr	r0, [r7, #4]
 8003d6e:	f006 f957 	bl	800a020 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d7a:	461a      	mov	r2, r3
 8003d7c:	f248 0340 	movw	r3, #32832	; 0x8040
 8003d80:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_TI))
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d8c:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8003d90:	f003 0301 	and.w	r3, r3, #1
 8003d94:	2b01      	cmp	r3, #1
 8003d96:	d115      	bne.n	8003dc4 <HAL_ETH_IRQHandler+0x88>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_TIE))
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003da0:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8003da4:	f003 0301 	and.w	r3, r3, #1
 8003da8:	2b01      	cmp	r3, #1
 8003daa:	d10b      	bne.n	8003dc4 <HAL_ETH_IRQHandler+0x88>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
        /*Call registered Transmit complete callback*/
        heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8003dac:	6878      	ldr	r0, [r7, #4]
 8003dae:	f000 f8bf 	bl	8003f30 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003dba:	461a      	mov	r2, r3
 8003dbc:	f248 0301 	movw	r3, #32769	; 0x8001
 8003dc0:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
    }
  }


  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_AIS))
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003dcc:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8003dd0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003dd4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003dd8:	d14e      	bne.n	8003e78 <HAL_ETH_IRQHandler+0x13c>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_AIE))
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003de2:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8003de6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003dea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003dee:	d143      	bne.n	8003e78 <HAL_ETH_IRQHandler+0x13c>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003df4:	f043 0208 	orr.w	r2, r3, #8
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	675a      	str	r2, [r3, #116]	; 0x74

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_FBE))
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e04:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8003e08:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e10:	d11c      	bne.n	8003e4c <HAL_ETH_IRQHandler+0x110>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e1a:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
 8003e1e:	f241 1302 	movw	r3, #4354	; 0x1102
 8003e22:	4013      	ands	r3, r2
 8003e24:	687a      	ldr	r2, [r7, #4]
 8003e26:	6793      	str	r3, [r2, #120]	; 0x78

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e30:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8003e34:	687a      	ldr	r2, [r7, #4]
 8003e36:	6812      	ldr	r2, [r2, #0]
 8003e38:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003e3c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003e40:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	22e0      	movs	r2, #224	; 0xe0
 8003e48:	66da      	str	r2, [r3, #108]	; 0x6c
 8003e4a:	e012      	b.n	8003e72 <HAL_ETH_IRQHandler+0x136>
      }
      else
      {
        /* Get DMA error status  */
       heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e54:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8003e58:	f403 42cd 	and.w	r2, r3, #26240	; 0x6680
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	679a      	str	r2, [r3, #120]	; 0x78
                                                       ETH_DMACSR_RBU | ETH_DMACSR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e68:	461a      	mov	r2, r3
 8003e6a:	f44f 43cd 	mov.w	r3, #26240	; 0x6680
 8003e6e:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered DMA Error callback*/
      heth->DMAErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_DMAErrorCallback(heth);
 8003e72:	6878      	ldr	r0, [r7, #4]
 8003e74:	f000 f866 	bl	8003f44 <HAL_ETH_DMAErrorCallback>

    }
  }

  /* ETH MAC Error IT */
  if(__HAL_ETH_MAC_GET_IT(heth, (ETH_MACIER_RXSTSIE | ETH_MACIER_TXSTSIE)))
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003e80:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8003e84:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003e88:	d10e      	bne.n	8003ea8 <HAL_ETH_IRQHandler+0x16c>
  {
    /* Get MAC Rx Tx status and clear Status register pending bit */
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	67da      	str	r2, [r3, #124]	; 0x7c

    heth->gState = HAL_ETH_STATE_ERROR;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	22e0      	movs	r2, #224	; 0xe0
 8003e9a:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered MAC Error callback*/
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet MAC Error callback */
    HAL_ETH_MACErrorCallback(heth);
 8003e9c:	6878      	ldr	r0, [r7, #4]
 8003e9e:	f000 f85b 	bl	8003f58 <HAL_ETH_MACErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACErrorCode = (uint32_t)(0x0U);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	67da      	str	r2, [r3, #124]	; 0x7c
  }

  /* ETH PMT IT */
  if(__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003eb0:	f003 0310 	and.w	r3, r3, #16
 8003eb4:	2b10      	cmp	r3, #16
 8003eb6:	d10f      	bne.n	8003ed8 <HAL_ETH_IRQHandler+0x19c>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003ec0:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	f000 f84e 	bl	8003f6c <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }

  /* ETH EEE IT */
  if(__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_LPI_IT))
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003ee0:	f003 0320 	and.w	r3, r3, #32
 8003ee4:	2b20      	cmp	r3, #32
 8003ee6:	d10f      	bne.n	8003f08 <HAL_ETH_IRQHandler+0x1cc>
  {
    /* Get MAC LPI interrupt source and clear the status register pending bit */
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACPCSR, 0x0000000FU);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003ef0:	f003 020f 	and.w	r2, r3, #15
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered EEE callback*/
    heth->EEECallback(heth);
#else
    /* Ethernet EEE callback */
    HAL_ETH_EEECallback(heth);
 8003efa:	6878      	ldr	r0, [r7, #4]
 8003efc:	f000 f840 	bl	8003f80 <HAL_ETH_EEECallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACLPIEvent = (uint32_t)(0x0U);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2200      	movs	r2, #0
 8003f04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif
    }
  }
#else
  /* check ETH WAKEUP exti flag */
  if(__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8003f08:	4b08      	ldr	r3, [pc, #32]	; (8003f2c <HAL_ETH_IRQHandler+0x1f0>)
 8003f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f0c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d006      	beq.n	8003f22 <HAL_ETH_IRQHandler+0x1e6>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8003f14:	4b05      	ldr	r3, [pc, #20]	; (8003f2c <HAL_ETH_IRQHandler+0x1f0>)
 8003f16:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8003f1a:	629a      	str	r2, [r3, #40]	; 0x28
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered WakeUp callback*/
      heth->WakeUpCallback(heth);
#else
      /* ETH WAKEUP callback */
      HAL_ETH_WakeUpCallback(heth);
 8003f1c:	6878      	ldr	r0, [r7, #4]
 8003f1e:	f000 f839 	bl	8003f94 <HAL_ETH_WakeUpCallback>
#endif
  }
#endif
}
 8003f22:	bf00      	nop
 8003f24:	3708      	adds	r7, #8
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}
 8003f2a:	bf00      	nop
 8003f2c:	58000080 	.word	0x58000080

08003f30 <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b083      	sub	sp, #12
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 8003f38:	bf00      	nop
 8003f3a:	370c      	adds	r7, #12
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f42:	4770      	bx	lr

08003f44 <HAL_ETH_DMAErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_DMAErrorCallback(ETH_HandleTypeDef *heth)
{
 8003f44:	b480      	push	{r7}
 8003f46:	b083      	sub	sp, #12
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_DMAErrorCallback could be implemented in the user file
  */
}
 8003f4c:	bf00      	nop
 8003f4e:	370c      	adds	r7, #12
 8003f50:	46bd      	mov	sp, r7
 8003f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f56:	4770      	bx	lr

08003f58 <HAL_ETH_MACErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_MACErrorCallback(ETH_HandleTypeDef *heth)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b083      	sub	sp, #12
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_MACErrorCallback could be implemented in the user file
  */
}
 8003f60:	bf00      	nop
 8003f62:	370c      	adds	r7, #12
 8003f64:	46bd      	mov	sp, r7
 8003f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6a:	4770      	bx	lr

08003f6c <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b083      	sub	sp, #12
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8003f74:	bf00      	nop
 8003f76:	370c      	adds	r7, #12
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7e:	4770      	bx	lr

08003f80 <HAL_ETH_EEECallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_EEECallback(ETH_HandleTypeDef *heth)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b083      	sub	sp, #12
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_EEECallback could be implemented in the user file
  */
}
 8003f88:	bf00      	nop
 8003f8a:	370c      	adds	r7, #12
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f92:	4770      	bx	lr

08003f94 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b083      	sub	sp, #12
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8003f9c:	bf00      	nop
 8003f9e:	370c      	adds	r7, #12
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa6:	4770      	bx	lr

08003fa8 <HAL_ETH_ReadPHYRegister>:
  * @param  PHYReg: PHY register address, must be a value from 0 to 31
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg, uint32_t *pRegValue)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b086      	sub	sp, #24
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	60f8      	str	r0, [r7, #12]
 8003fb0:	60b9      	str	r1, [r7, #8]
 8003fb2:	607a      	str	r2, [r7, #4]
 8003fb4:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg, tickstart;

  /* Check for the Busy flag */
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003fbe:	f003 0301 	and.w	r3, r3, #1
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d001      	beq.n	8003fca <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	e03e      	b.n	8004048 <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003fd2:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr <<21));
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	055b      	lsls	r3, r3, #21
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	041b      	lsls	r3, r3, #16
 8003fec:	4313      	orrs	r3, r2
 8003fee:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	f043 030c 	orr.w	r3, r3, #12
 8003ff6:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	f043 0301 	orr.w	r3, r3, #1
 8003ffe:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	697a      	ldr	r2, [r7, #20]
 8004006:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  tickstart = HAL_GetTick();
 800400a:	f7fe fde7 	bl	8002bdc <HAL_GetTick>
 800400e:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8004010:	e009      	b.n	8004026 <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT))
 8004012:	f7fe fde3 	bl	8002bdc <HAL_GetTick>
 8004016:	4602      	mov	r2, r0
 8004018:	693b      	ldr	r3, [r7, #16]
 800401a:	1ad3      	subs	r3, r2, r3
 800401c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004020:	d901      	bls.n	8004026 <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	e010      	b.n	8004048 <HAL_ETH_ReadPHYRegister+0xa0>
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800402e:	f003 0301 	and.w	r3, r3, #1
 8004032:	2b00      	cmp	r3, #0
 8004034:	d1ed      	bne.n	8004012 <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800403e:	b29b      	uxth	r3, r3
 8004040:	461a      	mov	r2, r3
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8004046:	2300      	movs	r3, #0
}
 8004048:	4618      	mov	r0, r3
 800404a:	3718      	adds	r7, #24
 800404c:	46bd      	mov	sp, r7
 800404e:	bd80      	pop	{r7, pc}

08004050 <HAL_ETH_WritePHYRegister>:
  * @param  PHYReg: PHY register address, must be a value from 0 to 31
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg, uint32_t RegValue)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b086      	sub	sp, #24
 8004054:	af00      	add	r7, sp, #0
 8004056:	60f8      	str	r0, [r7, #12]
 8004058:	60b9      	str	r1, [r7, #8]
 800405a:	607a      	str	r2, [r7, #4]
 800405c:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg, tickstart;

  /* Check for the Busy flag */
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004066:	f003 0301 	and.w	r3, r3, #1
 800406a:	2b00      	cmp	r3, #0
 800406c:	d001      	beq.n	8004072 <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 800406e:	2301      	movs	r3, #1
 8004070:	e03c      	b.n	80040ec <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800407a:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr <<21));
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	055b      	lsls	r3, r3, #21
 8004086:	4313      	orrs	r3, r2
 8004088:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	041b      	lsls	r3, r3, #16
 8004094:	4313      	orrs	r3, r2
 8004096:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	f023 030c 	bic.w	r3, r3, #12
 800409e:	f043 0304 	orr.w	r3, r3, #4
 80040a2:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	f043 0301 	orr.w	r3, r3, #1
 80040aa:	617b      	str	r3, [r7, #20]


  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	b29a      	uxth	r2, r3
 80040b0:	4b10      	ldr	r3, [pc, #64]	; (80040f4 <HAL_ETH_WritePHYRegister+0xa4>)
 80040b2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 80040b6:	4a0f      	ldr	r2, [pc, #60]	; (80040f4 <HAL_ETH_WritePHYRegister+0xa4>)
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  tickstart = HAL_GetTick();
 80040be:	f7fe fd8d 	bl	8002bdc <HAL_GetTick>
 80040c2:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80040c4:	e009      	b.n	80040da <HAL_ETH_WritePHYRegister+0x8a>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT))
 80040c6:	f7fe fd89 	bl	8002bdc <HAL_GetTick>
 80040ca:	4602      	mov	r2, r0
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	1ad3      	subs	r3, r2, r3
 80040d0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80040d4:	d901      	bls.n	80040da <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	e008      	b.n	80040ec <HAL_ETH_WritePHYRegister+0x9c>
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80040e2:	f003 0301 	and.w	r3, r3, #1
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d1ed      	bne.n	80040c6 <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 80040ea:	2300      	movs	r3, #0
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	3718      	adds	r7, #24
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}
 80040f4:	40028000 	.word	0x40028000

080040f8 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b083      	sub	sp, #12
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
 8004100:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d101      	bne.n	800410c <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8004108:	2301      	movs	r3, #1
 800410a:	e1c3      	b.n	8004494 <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f003 020c 	and.w	r2, r3, #12
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	62da      	str	r2, [r3, #44]	; 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC)>> 4) > 0U) ? ENABLE : DISABLE;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f003 0310 	and.w	r3, r3, #16
 8004124:	2b00      	cmp	r3, #0
 8004126:	bf14      	ite	ne
 8004128:	2301      	movne	r3, #1
 800412a:	2300      	moveq	r3, #0
 800412c:	b2db      	uxtb	r3, r3
 800412e:	461a      	mov	r2, r3
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800414e:	2b00      	cmp	r3, #0
 8004150:	bf0c      	ite	eq
 8004152:	2301      	moveq	r3, #1
 8004154:	2300      	movne	r3, #0
 8004156:	b2db      	uxtb	r3, r3
 8004158:	461a      	mov	r2, r3
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U) ? ENABLE : DISABLE;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800416a:	2b00      	cmp	r3, #0
 800416c:	bf14      	ite	ne
 800416e:	2301      	movne	r3, #1
 8004170:	2300      	moveq	r3, #0
 8004172:	b2db      	uxtb	r3, r3
 8004174:	461a      	mov	r2, r3
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004184:	2b00      	cmp	r3, #0
 8004186:	bf0c      	ite	eq
 8004188:	2301      	moveq	r3, #1
 800418a:	2300      	movne	r3, #0
 800418c:	b2db      	uxtb	r3, r3
 800418e:	461a      	mov	r2, r3
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800419e:	2b00      	cmp	r3, #0
 80041a0:	bf14      	ite	ne
 80041a2:	2301      	movne	r3, #1
 80041a4:	2300      	moveq	r3, #0
 80041a6:	b2db      	uxtb	r3, r3
 80041a8:	461a      	mov	r2, r3
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	bf14      	ite	ne
 80041bc:	2301      	movne	r3, #1
 80041be:	2300      	moveq	r3, #0
 80041c0:	b2db      	uxtb	r3, r3
 80041c2:	461a      	mov	r2, r3
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	bf14      	ite	ne
 80041f2:	2301      	movne	r3, #1
 80041f4:	2300      	moveq	r3, #0
 80041f6:	b2db      	uxtb	r3, r3
 80041f8:	461a      	mov	r2, r3
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >>17) == 0U) ? ENABLE : DISABLE;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004208:	2b00      	cmp	r3, #0
 800420a:	bf0c      	ite	eq
 800420c:	2301      	moveq	r3, #1
 800420e:	2300      	movne	r3, #0
 8004210:	b2db      	uxtb	r3, r3
 8004212:	461a      	mov	r2, r3
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >>19) == 0U) ? ENABLE : DISABLE;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004222:	2b00      	cmp	r3, #0
 8004224:	bf0c      	ite	eq
 8004226:	2301      	moveq	r3, #1
 8004228:	2300      	movne	r3, #0
 800422a:	b2db      	uxtb	r3, r3
 800422c:	461a      	mov	r2, r3
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800423c:	2b00      	cmp	r3, #0
 800423e:	bf14      	ite	ne
 8004240:	2301      	movne	r3, #1
 8004242:	2300      	moveq	r3, #0
 8004244:	b2db      	uxtb	r3, r3
 8004246:	461a      	mov	r2, r3
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004256:	2b00      	cmp	r3, #0
 8004258:	bf14      	ite	ne
 800425a:	2301      	movne	r3, #1
 800425c:	2300      	moveq	r3, #0
 800425e:	b2db      	uxtb	r3, r3
 8004260:	461a      	mov	r2, r3
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004270:	2b00      	cmp	r3, #0
 8004272:	bf14      	ite	ne
 8004274:	2301      	movne	r3, #1
 8004276:	2300      	moveq	r3, #0
 8004278:	b2db      	uxtb	r3, r3
 800427a:	461a      	mov	r2, r3
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800428a:	2b00      	cmp	r3, #0
 800428c:	bf14      	ite	ne
 800428e:	2301      	movne	r3, #1
 8004290:	2300      	moveq	r3, #0
 8004292:	b2db      	uxtb	r3, r3
 8004294:	461a      	mov	r2, r3
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	bf14      	ite	ne
 80042b6:	2301      	movne	r3, #1
 80042b8:	2300      	moveq	r3, #0
 80042ba:	b2db      	uxtb	r3, r3
 80042bc:	461a      	mov	r2, r3
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	635a      	str	r2, [r3, #52]	; 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	bf0c      	ite	eq
 80042ec:	2301      	moveq	r3, #1
 80042ee:	2300      	movne	r3, #0
 80042f0:	b2db      	uxtb	r3, r3
 80042f2:	461a      	mov	r2, r3
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004304:	2b00      	cmp	r3, #0
 8004306:	bf14      	ite	ne
 8004308:	2301      	movne	r3, #1
 800430a:	2300      	moveq	r3, #0
 800430c:	b2db      	uxtb	r3, r3
 800430e:	461a      	mov	r2, r3
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004320:	2b00      	cmp	r3, #0
 8004322:	bf14      	ite	ne
 8004324:	2301      	movne	r3, #1
 8004326:	2300      	moveq	r3, #0
 8004328:	b2db      	uxtb	r3, r3
 800432a:	461a      	mov	r2, r3
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U) ? ENABLE : DISABLE;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800433c:	2b00      	cmp	r3, #0
 800433e:	bf14      	ite	ne
 8004340:	2301      	movne	r3, #1
 8004342:	2300      	moveq	r3, #0
 8004344:	b2db      	uxtb	r3, r3
 8004346:	461a      	mov	r2, r3
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	0e5b      	lsrs	r3, r3, #25
 8004356:	f003 021f 	and.w	r2, r3, #31
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	63da      	str	r2, [r3, #60]	; 0x3c


  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	68db      	ldr	r3, [r3, #12]
 8004364:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004368:	2b00      	cmp	r3, #0
 800436a:	bf14      	ite	ne
 800436c:	2301      	movne	r3, #1
 800436e:	2300      	moveq	r3, #0
 8004370:	b2db      	uxtb	r3, r3
 8004372:	461a      	mov	r2, r3
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	68db      	ldr	r3, [r3, #12]
 8004380:	f003 020f 	and.w	r2, r3, #15
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	645a      	str	r2, [r3, #68]	; 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800438e:	f003 0302 	and.w	r3, r3, #2
 8004392:	2b00      	cmp	r3, #0
 8004394:	bf14      	ite	ne
 8004396:	2301      	movne	r3, #1
 8004398:	2300      	moveq	r3, #0
 800439a:	b2db      	uxtb	r3, r3
 800439c:	461a      	mov	r2, r3
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	bf0c      	ite	eq
 80043b2:	2301      	moveq	r3, #1
 80043b4:	2300      	movne	r3, #0
 80043b6:	b2db      	uxtb	r3, r3
 80043b8:	461a      	mov	r2, r3
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043c6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043d4:	0c1b      	lsrs	r3, r3, #16
 80043d6:	b29a      	uxth	r2, r3
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	649a      	str	r2, [r3, #72]	; 0x48


  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043e4:	f003 0301 	and.w	r3, r3, #1
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	bf14      	ite	ne
 80043ec:	2301      	movne	r3, #1
 80043ee:	2300      	moveq	r3, #0
 80043f0:	b2db      	uxtb	r3, r3
 80043f2:	461a      	mov	r2, r3
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U) ? ENABLE : DISABLE;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004402:	f003 0302 	and.w	r3, r3, #2
 8004406:	2b00      	cmp	r3, #0
 8004408:	bf14      	ite	ne
 800440a:	2301      	movne	r3, #1
 800440c:	2300      	moveq	r3, #0
 800440e:	b2db      	uxtb	r3, r3
 8004410:	461a      	mov	r2, r3
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8004420:	f003 0272 	and.w	r2, r3, #114	; 0x72
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	659a      	str	r2, [r3, #88]	; 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8004430:	f003 0223 	and.w	r2, r3, #35	; 0x23
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	65da      	str	r2, [r3, #92]	; 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8004440:	f003 0308 	and.w	r3, r3, #8
 8004444:	2b00      	cmp	r3, #0
 8004446:	bf14      	ite	ne
 8004448:	2301      	movne	r3, #1
 800444a:	2300      	moveq	r3, #0
 800444c:	b2db      	uxtb	r3, r3
 800444e:	461a      	mov	r2, r3
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 800445e:	f003 0310 	and.w	r3, r3, #16
 8004462:	2b00      	cmp	r3, #0
 8004464:	bf14      	ite	ne
 8004466:	2301      	movne	r3, #1
 8004468:	2300      	moveq	r3, #0
 800446a:	b2db      	uxtb	r3, r3
 800446c:	461a      	mov	r2, r3
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 800447c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004480:	2b00      	cmp	r3, #0
 8004482:	bf0c      	ite	eq
 8004484:	2301      	moveq	r3, #1
 8004486:	2300      	movne	r3, #0
 8004488:	b2db      	uxtb	r3, r3
 800448a:	461a      	mov	r2, r3
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8004492:	2300      	movs	r3, #0
}
 8004494:	4618      	mov	r0, r3
 8004496:	370c      	adds	r7, #12
 8004498:	46bd      	mov	sp, r7
 800449a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449e:	4770      	bx	lr

080044a0 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b082      	sub	sp, #8
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
 80044a8:	6039      	str	r1, [r7, #0]
  if(macconf == NULL)
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d101      	bne.n	80044b4 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 80044b0:	2301      	movs	r3, #1
 80044b2:	e00a      	b.n	80044ca <HAL_ETH_SetMACConfig+0x2a>
  }

  if(heth->RxState == HAL_ETH_STATE_READY)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044b8:	2b10      	cmp	r3, #16
 80044ba:	d105      	bne.n	80044c8 <HAL_ETH_SetMACConfig+0x28>
  {
    ETH_SetMACConfig(heth, macconf);
 80044bc:	6839      	ldr	r1, [r7, #0]
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	f000 f860 	bl	8004584 <ETH_SetMACConfig>

    return HAL_OK;
 80044c4:	2300      	movs	r3, #0
 80044c6:	e000      	b.n	80044ca <HAL_ETH_SetMACConfig+0x2a>
  }
  else
  {
    return HAL_ERROR;
 80044c8:	2301      	movs	r3, #1
  }
}
 80044ca:	4618      	mov	r0, r3
 80044cc:	3708      	adds	r7, #8
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}
	...

080044d4 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b084      	sub	sp, #16
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80044e4:	60fb      	str	r3, [r7, #12]

	/* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80044ec:	60fb      	str	r3, [r7, #12]

	/* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80044ee:	f001 ff95 	bl	800641c <HAL_RCC_GetHCLKFreq>
 80044f2:	60b8      	str	r0, [r7, #8]

	/* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	4a1e      	ldr	r2, [pc, #120]	; (8004570 <HAL_ETH_SetMDIOClockRange+0x9c>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d908      	bls.n	800450e <HAL_ETH_SetMDIOClockRange+0x3a>
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	4a1d      	ldr	r2, [pc, #116]	; (8004574 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d804      	bhi.n	800450e <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800450a:	60fb      	str	r3, [r7, #12]
 800450c:	e027      	b.n	800455e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	4a18      	ldr	r2, [pc, #96]	; (8004574 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d908      	bls.n	8004528 <HAL_ETH_SetMDIOClockRange+0x54>
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	4a17      	ldr	r2, [pc, #92]	; (8004578 <HAL_ETH_SetMDIOClockRange+0xa4>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d204      	bcs.n	8004528 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8004524:	60fb      	str	r3, [r7, #12]
 8004526:	e01a      	b.n	800455e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	4a13      	ldr	r2, [pc, #76]	; (8004578 <HAL_ETH_SetMDIOClockRange+0xa4>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d303      	bcc.n	8004538 <HAL_ETH_SetMDIOClockRange+0x64>
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	4a12      	ldr	r2, [pc, #72]	; (800457c <HAL_ETH_SetMDIOClockRange+0xa8>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d911      	bls.n	800455c <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	4a10      	ldr	r2, [pc, #64]	; (800457c <HAL_ETH_SetMDIOClockRange+0xa8>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d908      	bls.n	8004552 <HAL_ETH_SetMDIOClockRange+0x7e>
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	4a0f      	ldr	r2, [pc, #60]	; (8004580 <HAL_ETH_SetMDIOClockRange+0xac>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d804      	bhi.n	8004552 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800454e:	60fb      	str	r3, [r7, #12]
 8004550:	e005      	b.n	800455e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004558:	60fb      	str	r3, [r7, #12]
 800455a:	e000      	b.n	800455e <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 800455c:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	68fa      	ldr	r2, [r7, #12]
 8004564:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8004568:	bf00      	nop
 800456a:	3710      	adds	r7, #16
 800456c:	46bd      	mov	sp, r7
 800456e:	bd80      	pop	{r7, pc}
 8004570:	01312cff 	.word	0x01312cff
 8004574:	02160ebf 	.word	0x02160ebf
 8004578:	03938700 	.word	0x03938700
 800457c:	05f5e0ff 	.word	0x05f5e0ff
 8004580:	08f0d17f 	.word	0x08f0d17f

08004584 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8004584:	b480      	push	{r7}
 8004586:	b085      	sub	sp, #20
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
 800458c:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 8004596:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	791b      	ldrb	r3, [r3, #4]
 800459c:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 800459e:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	7b1b      	ldrb	r3, [r3, #12]
 80045a4:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 80045a6:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	7b5b      	ldrb	r3, [r3, #13]
 80045ac:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80045ae:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	7b9b      	ldrb	r3, [r3, #14]
 80045b4:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 80045b6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	7bdb      	ldrb	r3, [r3, #15]
 80045bc:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80045be:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80045c0:	683a      	ldr	r2, [r7, #0]
 80045c2:	7c12      	ldrb	r2, [r2, #16]
 80045c4:	2a00      	cmp	r2, #0
 80045c6:	d102      	bne.n	80045ce <ETH_SetMACConfig+0x4a>
 80045c8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80045cc:	e000      	b.n	80045d0 <ETH_SetMACConfig+0x4c>
 80045ce:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80045d0:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80045d2:	683a      	ldr	r2, [r7, #0]
 80045d4:	7c52      	ldrb	r2, [r2, #17]
 80045d6:	2a00      	cmp	r2, #0
 80045d8:	d102      	bne.n	80045e0 <ETH_SetMACConfig+0x5c>
 80045da:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80045de:	e000      	b.n	80045e2 <ETH_SetMACConfig+0x5e>
 80045e0:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80045e2:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	7c9b      	ldrb	r3, [r3, #18]
 80045e8:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80045ea:	431a      	orrs	r2, r3
                                macconf->Speed |
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 80045f0:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 80045f6:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	7f1b      	ldrb	r3, [r3, #28]
 80045fc:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 80045fe:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	7f5b      	ldrb	r3, [r3, #29]
 8004604:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8004606:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8004608:	683a      	ldr	r2, [r7, #0]
 800460a:	7f92      	ldrb	r2, [r2, #30]
 800460c:	2a00      	cmp	r2, #0
 800460e:	d102      	bne.n	8004616 <ETH_SetMACConfig+0x92>
 8004610:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004614:	e000      	b.n	8004618 <ETH_SetMACConfig+0x94>
 8004616:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8004618:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	7fdb      	ldrb	r3, [r3, #31]
 800461e:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8004620:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8004622:	683a      	ldr	r2, [r7, #0]
 8004624:	f892 2020 	ldrb.w	r2, [r2, #32]
 8004628:	2a00      	cmp	r2, #0
 800462a:	d102      	bne.n	8004632 <ETH_SetMACConfig+0xae>
 800462c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004630:	e000      	b.n	8004634 <ETH_SetMACConfig+0xb0>
 8004632:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8004634:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 800463a:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004642:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8004644:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 800464a:	4313      	orrs	r3, r2
 800464c:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	681a      	ldr	r2, [r3, #0]
 8004654:	4b56      	ldr	r3, [pc, #344]	; (80047b0 <ETH_SetMACConfig+0x22c>)
 8004656:	4013      	ands	r3, r2
 8004658:	687a      	ldr	r2, [r7, #4]
 800465a:	6812      	ldr	r2, [r2, #0]
 800465c:	68f9      	ldr	r1, [r7, #12]
 800465e:	430b      	orrs	r3, r1
 8004660:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004666:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800466e:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8004670:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004678:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 800467a:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004682:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8004684:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 8004686:	683a      	ldr	r2, [r7, #0]
 8004688:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 800468c:	2a00      	cmp	r2, #0
 800468e:	d102      	bne.n	8004696 <ETH_SetMACConfig+0x112>
 8004690:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004694:	e000      	b.n	8004698 <ETH_SetMACConfig+0x114>
 8004696:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8004698:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 800469e:	4313      	orrs	r3, r2
 80046a0:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	685a      	ldr	r2, [r3, #4]
 80046a8:	4b42      	ldr	r3, [pc, #264]	; (80047b4 <ETH_SetMACConfig+0x230>)
 80046aa:	4013      	ands	r3, r2
 80046ac:	687a      	ldr	r2, [r7, #4]
 80046ae:	6812      	ldr	r2, [r2, #0]
 80046b0:	68f9      	ldr	r1, [r7, #12]
 80046b2:	430b      	orrs	r3, r1
 80046b4:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80046bc:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80046c2:	4313      	orrs	r3, r2
 80046c4:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	68da      	ldr	r2, [r3, #12]
 80046cc:	4b3a      	ldr	r3, [pc, #232]	; (80047b8 <ETH_SetMACConfig+0x234>)
 80046ce:	4013      	ands	r3, r2
 80046d0:	687a      	ldr	r2, [r7, #4]
 80046d2:	6812      	ldr	r2, [r2, #0]
 80046d4:	68f9      	ldr	r1, [r7, #12]
 80046d6:	430b      	orrs	r3, r1
 80046d8:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80046e0:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80046e6:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 80046e8:	683a      	ldr	r2, [r7, #0]
 80046ea:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80046ee:	2a00      	cmp	r2, #0
 80046f0:	d101      	bne.n	80046f6 <ETH_SetMACConfig+0x172>
 80046f2:	2280      	movs	r2, #128	; 0x80
 80046f4:	e000      	b.n	80046f8 <ETH_SetMACConfig+0x174>
 80046f6:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80046f8:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046fe:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004700:	4313      	orrs	r3, r2
 8004702:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800470a:	f64f 730d 	movw	r3, #65293	; 0xff0d
 800470e:	4013      	ands	r3, r2
 8004710:	687a      	ldr	r2, [r7, #4]
 8004712:	6812      	ldr	r2, [r2, #0]
 8004714:	68f9      	ldr	r1, [r7, #12]
 8004716:	430b      	orrs	r3, r1
 8004718:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8004720:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8004728:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800472a:	4313      	orrs	r3, r2
 800472c:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004736:	f023 0103 	bic.w	r1, r3, #3
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	68fa      	ldr	r2, [r7, #12]
 8004740:	430a      	orrs	r2, r1
 8004742:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 800474e:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	430a      	orrs	r2, r1
 800475c:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8004764:	683a      	ldr	r2, [r7, #0]
 8004766:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 800476a:	2a00      	cmp	r2, #0
 800476c:	d101      	bne.n	8004772 <ETH_SetMACConfig+0x1ee>
 800476e:	2240      	movs	r2, #64	; 0x40
 8004770:	e000      	b.n	8004774 <ETH_SetMACConfig+0x1f0>
 8004772:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8004774:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800477c:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800477e:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8004786:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8004788:	4313      	orrs	r3, r2
 800478a:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8004794:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	68fa      	ldr	r2, [r7, #12]
 800479e:	430a      	orrs	r2, r1
 80047a0:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 80047a4:	bf00      	nop
 80047a6:	3714      	adds	r7, #20
 80047a8:	46bd      	mov	sp, r7
 80047aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ae:	4770      	bx	lr
 80047b0:	00048083 	.word	0x00048083
 80047b4:	c0f88000 	.word	0xc0f88000
 80047b8:	fffffef0 	.word	0xfffffef0

080047bc <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80047bc:	b480      	push	{r7}
 80047be:	b085      	sub	sp, #20
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
 80047c4:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047ce:	681a      	ldr	r2, [r3, #0]
 80047d0:	4b38      	ldr	r3, [pc, #224]	; (80048b4 <ETH_SetDMAConfig+0xf8>)
 80047d2:	4013      	ands	r3, r2
 80047d4:	683a      	ldr	r2, [r7, #0]
 80047d6:	6811      	ldr	r1, [r2, #0]
 80047d8:	687a      	ldr	r2, [r7, #4]
 80047da:	6812      	ldr	r2, [r2, #0]
 80047dc:	430b      	orrs	r3, r1
 80047de:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80047e2:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	791b      	ldrb	r3, [r3, #4]
 80047e8:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80047ee:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	7b1b      	ldrb	r3, [r3, #12]
 80047f4:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80047f6:	4313      	orrs	r3, r2
 80047f8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004802:	685a      	ldr	r2, [r3, #4]
 8004804:	4b2c      	ldr	r3, [pc, #176]	; (80048b8 <ETH_SetDMAConfig+0xfc>)
 8004806:	4013      	ands	r3, r2
 8004808:	687a      	ldr	r2, [r7, #4]
 800480a:	6812      	ldr	r2, [r2, #0]
 800480c:	68f9      	ldr	r1, [r7, #12]
 800480e:	430b      	orrs	r3, r1
 8004810:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004814:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	7b5b      	ldrb	r3, [r3, #13]
 800481a:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8004820:	4313      	orrs	r3, r2
 8004822:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800482c:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8004830:	4b22      	ldr	r3, [pc, #136]	; (80048bc <ETH_SetDMAConfig+0x100>)
 8004832:	4013      	ands	r3, r2
 8004834:	687a      	ldr	r2, [r7, #4]
 8004836:	6812      	ldr	r2, [r2, #0]
 8004838:	68f9      	ldr	r1, [r7, #12]
 800483a:	430b      	orrs	r3, r1
 800483c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004840:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	7d1b      	ldrb	r3, [r3, #20]
 800484c:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 800484e:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	7f5b      	ldrb	r3, [r3, #29]
 8004854:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8004856:	4313      	orrs	r3, r2
 8004858:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004862:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8004866:	4b16      	ldr	r3, [pc, #88]	; (80048c0 <ETH_SetDMAConfig+0x104>)
 8004868:	4013      	ands	r3, r2
 800486a:	687a      	ldr	r2, [r7, #4]
 800486c:	6812      	ldr	r2, [r2, #0]
 800486e:	68f9      	ldr	r1, [r7, #12]
 8004870:	430b      	orrs	r3, r1
 8004872:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004876:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	7f1b      	ldrb	r3, [r3, #28]
 800487e:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8004884:	4313      	orrs	r3, r2
 8004886:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004890:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8004894:	4b0b      	ldr	r3, [pc, #44]	; (80048c4 <ETH_SetDMAConfig+0x108>)
 8004896:	4013      	ands	r3, r2
 8004898:	687a      	ldr	r2, [r7, #4]
 800489a:	6812      	ldr	r2, [r2, #0]
 800489c:	68f9      	ldr	r1, [r7, #12]
 800489e:	430b      	orrs	r3, r1
 80048a0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80048a4:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 80048a8:	bf00      	nop
 80048aa:	3714      	adds	r7, #20
 80048ac:	46bd      	mov	sp, r7
 80048ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b2:	4770      	bx	lr
 80048b4:	ffff87fd 	.word	0xffff87fd
 80048b8:	ffff2ffe 	.word	0xffff2ffe
 80048bc:	fffec000 	.word	0xfffec000
 80048c0:	ffc0efef 	.word	0xffc0efef
 80048c4:	7fc0ffff 	.word	0x7fc0ffff

080048c8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b0a4      	sub	sp, #144	; 0x90
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80048d0:	2301      	movs	r3, #1
 80048d2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80048d6:	2300      	movs	r3, #0
 80048d8:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80048da:	2300      	movs	r3, #0
 80048dc:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80048e0:	2300      	movs	r3, #0
 80048e2:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 80048e6:	2301      	movs	r3, #1
 80048e8:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80048ec:	2301      	movs	r3, #1
 80048ee:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80048f2:	2301      	movs	r3, #1
 80048f4:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 80048f8:	2300      	movs	r3, #0
 80048fa:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80048fe:	2301      	movs	r3, #1
 8004900:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8004904:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004908:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800490a:	2300      	movs	r3, #0
 800490c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8004910:	2300      	movs	r3, #0
 8004912:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8004914:	2300      	movs	r3, #0
 8004916:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800491a:	2300      	movs	r3, #0
 800491c:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8004920:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8004924:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8004926:	2300      	movs	r3, #0
 8004928:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 800492c:	2300      	movs	r3, #0
 800492e:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8004930:	2301      	movs	r3, #1
 8004932:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8004936:	2300      	movs	r3, #0
 8004938:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 800493c:	2300      	movs	r3, #0
 800493e:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8004942:	2300      	movs	r3, #0
 8004944:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8004946:	2300      	movs	r3, #0
 8004948:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800494a:	2300      	movs	r3, #0
 800494c:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 800494e:	2300      	movs	r3, #0
 8004950:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8004954:	2300      	movs	r3, #0
 8004956:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800495a:	2301      	movs	r3, #1
 800495c:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8004960:	2320      	movs	r3, #32
 8004962:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8004966:	2301      	movs	r3, #1
 8004968:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 800496c:	2300      	movs	r3, #0
 800496e:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8004972:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8004976:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8004978:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800497c:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 800497e:	2300      	movs	r3, #0
 8004980:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8004984:	2302      	movs	r3, #2
 8004986:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 800498a:	2300      	movs	r3, #0
 800498c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8004990:	2300      	movs	r3, #0
 8004992:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8004996:	2300      	movs	r3, #0
 8004998:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 800499c:	2301      	movs	r3, #1
 800499e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80049a2:	2300      	movs	r3, #0
 80049a4:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80049a6:	2301      	movs	r3, #1
 80049a8:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80049ac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80049b0:	4619      	mov	r1, r3
 80049b2:	6878      	ldr	r0, [r7, #4]
 80049b4:	f7ff fde6 	bl	8004584 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80049b8:	2301      	movs	r3, #1
 80049ba:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80049bc:	2301      	movs	r3, #1
 80049be:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80049c0:	2300      	movs	r3, #0
 80049c2:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80049c4:	2300      	movs	r3, #0
 80049c6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 80049ca:	2300      	movs	r3, #0
 80049cc:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80049ce:	2300      	movs	r3, #0
 80049d0:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80049d2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80049d6:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80049d8:	2300      	movs	r3, #0
 80049da:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80049dc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80049e0:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 80049e2:	2300      	movs	r3, #0
 80049e4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 80049e8:	f44f 7306 	mov.w	r3, #536	; 0x218
 80049ec:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80049ee:	f107 0308 	add.w	r3, r7, #8
 80049f2:	4619      	mov	r1, r3
 80049f4:	6878      	ldr	r0, [r7, #4]
 80049f6:	f7ff fee1 	bl	80047bc <ETH_SetDMAConfig>
}
 80049fa:	bf00      	nop
 80049fc:	3790      	adds	r7, #144	; 0x90
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}
	...

08004a04 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b084      	sub	sp, #16
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004a14:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004a1c:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8004a1e:	f001 fcfd 	bl	800641c <HAL_RCC_GetHCLKFreq>
 8004a22:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	4a1e      	ldr	r2, [pc, #120]	; (8004aa0 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d908      	bls.n	8004a3e <ETH_MAC_MDIO_ClkConfig+0x3a>
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	4a1d      	ldr	r2, [pc, #116]	; (8004aa4 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d804      	bhi.n	8004a3e <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004a3a:	60fb      	str	r3, [r7, #12]
 8004a3c:	e027      	b.n	8004a8e <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	4a18      	ldr	r2, [pc, #96]	; (8004aa4 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d908      	bls.n	8004a58 <ETH_MAC_MDIO_ClkConfig+0x54>
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	4a17      	ldr	r2, [pc, #92]	; (8004aa8 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d204      	bcs.n	8004a58 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8004a54:	60fb      	str	r3, [r7, #12]
 8004a56:	e01a      	b.n	8004a8e <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	4a13      	ldr	r2, [pc, #76]	; (8004aa8 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d303      	bcc.n	8004a68 <ETH_MAC_MDIO_ClkConfig+0x64>
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	4a12      	ldr	r2, [pc, #72]	; (8004aac <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d911      	bls.n	8004a8c <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	4a10      	ldr	r2, [pc, #64]	; (8004aac <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d908      	bls.n	8004a82 <ETH_MAC_MDIO_ClkConfig+0x7e>
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	4a0f      	ldr	r2, [pc, #60]	; (8004ab0 <ETH_MAC_MDIO_ClkConfig+0xac>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d804      	bhi.n	8004a82 <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a7e:	60fb      	str	r3, [r7, #12]
 8004a80:	e005      	b.n	8004a8e <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004a88:	60fb      	str	r3, [r7, #12]
 8004a8a:	e000      	b.n	8004a8e <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8004a8c:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	68fa      	ldr	r2, [r7, #12]
 8004a94:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8004a98:	bf00      	nop
 8004a9a:	3710      	adds	r7, #16
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bd80      	pop	{r7, pc}
 8004aa0:	01312cff 	.word	0x01312cff
 8004aa4:	02160ebf 	.word	0x02160ebf
 8004aa8:	03938700 	.word	0x03938700
 8004aac:	05f5e0ff 	.word	0x05f5e0ff
 8004ab0:	08f0d17f 	.word	0x08f0d17f

08004ab4 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b085      	sub	sp, #20
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004abc:	2300      	movs	r3, #0
 8004abe:	60fb      	str	r3, [r7, #12]
 8004ac0:	e01d      	b.n	8004afe <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	68d9      	ldr	r1, [r3, #12]
 8004ac6:	68fa      	ldr	r2, [r7, #12]
 8004ac8:	4613      	mov	r3, r2
 8004aca:	005b      	lsls	r3, r3, #1
 8004acc:	4413      	add	r3, r2
 8004ace:	00db      	lsls	r3, r3, #3
 8004ad0:	440b      	add	r3, r1
 8004ad2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	2200      	movs	r2, #0
 8004ade:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8004aec:	68b9      	ldr	r1, [r7, #8]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	68fa      	ldr	r2, [r7, #12]
 8004af2:	3206      	adds	r2, #6
 8004af4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	3301      	adds	r3, #1
 8004afc:	60fb      	str	r3, [r7, #12]
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	2b03      	cmp	r3, #3
 8004b02:	d9de      	bls.n	8004ac2 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2200      	movs	r2, #0
 8004b08:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b12:	461a      	mov	r2, r3
 8004b14:	2303      	movs	r3, #3
 8004b16:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	68da      	ldr	r2, [r3, #12]
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b26:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	68da      	ldr	r2, [r3, #12]
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b36:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8004b3a:	bf00      	nop
 8004b3c:	3714      	adds	r7, #20
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b44:	4770      	bx	lr

08004b46 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8004b46:	b480      	push	{r7}
 8004b48:	b085      	sub	sp, #20
 8004b4a:	af00      	add	r7, sp, #0
 8004b4c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004b4e:	2300      	movs	r3, #0
 8004b50:	60fb      	str	r3, [r7, #12]
 8004b52:	e024      	b.n	8004b9e <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6919      	ldr	r1, [r3, #16]
 8004b58:	68fa      	ldr	r2, [r7, #12]
 8004b5a:	4613      	mov	r3, r2
 8004b5c:	005b      	lsls	r3, r3, #1
 8004b5e:	4413      	add	r3, r2
 8004b60:	00db      	lsls	r3, r3, #3
 8004b62:	440b      	add	r3, r1
 8004b64:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	2200      	movs	r2, #0
 8004b76:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	2200      	movs	r2, #0
 8004b82:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	2200      	movs	r2, #0
 8004b88:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8004b8a:	68ba      	ldr	r2, [r7, #8]
 8004b8c:	6879      	ldr	r1, [r7, #4]
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	3310      	adds	r3, #16
 8004b92:	009b      	lsls	r3, r3, #2
 8004b94:	440b      	add	r3, r1
 8004b96:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	3301      	adds	r3, #1
 8004b9c:	60fb      	str	r3, [r7, #12]
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	2b03      	cmp	r3, #3
 8004ba2:	d9d7      	bls.n	8004b54 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	655a      	str	r2, [r3, #84]	; 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2200      	movs	r2, #0
 8004bae:	659a      	str	r2, [r3, #88]	; 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	665a      	str	r2, [r3, #100]	; 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004bca:	461a      	mov	r2, r3
 8004bcc:	2303      	movs	r3, #3
 8004bce:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	691a      	ldr	r2, [r3, #16]
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004bde:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	691b      	ldr	r3, [r3, #16]
 8004be6:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004bf2:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8004bf6:	bf00      	nop
 8004bf8:	3714      	adds	r7, #20
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c00:	4770      	bx	lr
	...

08004c04 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8004c04:	b480      	push	{r7}
 8004c06:	b08d      	sub	sp, #52	; 0x34
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	60f8      	str	r0, [r7, #12]
 8004c0c:	60b9      	str	r1, [r7, #8]
 8004c0e:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	3318      	adds	r3, #24
 8004c14:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	691b      	ldr	r3, [r3, #16]
 8004c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	691b      	ldr	r3, [r3, #16]
 8004c20:	613b      	str	r3, [r7, #16]
  uint32_t descnbr = 0, idx;
 8004c22:	2300      	movs	r3, #0
 8004c24:	62bb      	str	r3, [r7, #40]	; 0x28
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c2e:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	689b      	ldr	r3, [r3, #8]
 8004c34:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8004c36:	2300      	movs	r3, #0
 8004c38:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN) || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8004c3a:	6a3b      	ldr	r3, [r7, #32]
 8004c3c:	68db      	ldr	r3, [r3, #12]
 8004c3e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004c42:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c46:	d007      	beq.n	8004c58 <ETH_Prepare_Tx_Descriptors+0x54>
 8004c48:	697a      	ldr	r2, [r7, #20]
 8004c4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c4c:	3304      	adds	r3, #4
 8004c4e:	009b      	lsls	r3, r3, #2
 8004c50:	4413      	add	r3, r2
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d001      	beq.n	8004c5c <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8004c58:	2302      	movs	r3, #2
 8004c5a:	e24a      	b.n	80050f2 <ETH_Prepare_Tx_Descriptors+0x4ee>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f003 0304 	and.w	r3, r3, #4
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d044      	beq.n	8004cf2 <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 8004c68:	6a3b      	ldr	r3, [r7, #32]
 8004c6a:	68da      	ldr	r2, [r3, #12]
 8004c6c:	4b72      	ldr	r3, [pc, #456]	; (8004e38 <ETH_Prepare_Tx_Descriptors+0x234>)
 8004c6e:	4013      	ands	r3, r2
 8004c70:	68ba      	ldr	r2, [r7, #8]
 8004c72:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004c74:	431a      	orrs	r2, r3
 8004c76:	6a3b      	ldr	r3, [r7, #32]
 8004c78:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 8004c7a:	6a3b      	ldr	r3, [r7, #32]
 8004c7c:	68db      	ldr	r3, [r3, #12]
 8004c7e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004c82:	6a3b      	ldr	r3, [r7, #32]
 8004c84:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004c94:	661a      	str	r2, [r3, #96]	; 0x60

    /* if inner VLAN is enabled */
    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != 0U)
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f003 0308 	and.w	r3, r3, #8
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d027      	beq.n	8004cf2 <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 8004ca2:	6a3b      	ldr	r3, [r7, #32]
 8004ca4:	689b      	ldr	r3, [r3, #8]
 8004ca6:	b29a      	uxth	r2, r3
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cac:	041b      	lsls	r3, r3, #16
 8004cae:	431a      	orrs	r2, r3
 8004cb0:	6a3b      	ldr	r3, [r7, #32]
 8004cb2:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 8004cb4:	6a3b      	ldr	r3, [r7, #32]
 8004cb6:	68db      	ldr	r3, [r3, #12]
 8004cb8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004cbc:	6a3b      	ldr	r3, [r7, #32]
 8004cbe:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 8004cc0:	6a3b      	ldr	r3, [r7, #32]
 8004cc2:	68db      	ldr	r3, [r3, #12]
 8004cc4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ccc:	431a      	orrs	r2, r3
 8004cce:	6a3b      	ldr	r3, [r7, #32]
 8004cd0:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004ce0:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8004cf0:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 8004cf2:	68bb      	ldr	r3, [r7, #8]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f003 0310 	and.w	r3, r3, #16
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d00e      	beq.n	8004d1c <ETH_Prepare_Tx_Descriptors+0x118>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 8004cfe:	6a3b      	ldr	r3, [r7, #32]
 8004d00:	689a      	ldr	r2, [r3, #8]
 8004d02:	4b4e      	ldr	r3, [pc, #312]	; (8004e3c <ETH_Prepare_Tx_Descriptors+0x238>)
 8004d04:	4013      	ands	r3, r2
 8004d06:	68ba      	ldr	r2, [r7, #8]
 8004d08:	6992      	ldr	r2, [r2, #24]
 8004d0a:	431a      	orrs	r2, r3
 8004d0c:	6a3b      	ldr	r3, [r7, #32]
 8004d0e:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 8004d10:	6a3b      	ldr	r3, [r7, #32]
 8004d12:	68db      	ldr	r3, [r3, #12]
 8004d14:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8004d18:	6a3b      	ldr	r3, [r7, #32]
 8004d1a:	60da      	str	r2, [r3, #12]
  }

  if((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)|| (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U))
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f003 0304 	and.w	r3, r3, #4
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d105      	bne.n	8004d34 <ETH_Prepare_Tx_Descriptors+0x130>
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f003 0310 	and.w	r3, r3, #16
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d030      	beq.n	8004d96 <ETH_Prepare_Tx_Descriptors+0x192>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 8004d34:	6a3b      	ldr	r3, [r7, #32]
 8004d36:	68db      	ldr	r3, [r3, #12]
 8004d38:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004d3c:	6a3b      	ldr	r3, [r7, #32]
 8004d3e:	60da      	str	r2, [r3, #12]
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8004d40:	6a3b      	ldr	r3, [r7, #32]
 8004d42:	68db      	ldr	r3, [r3, #12]
 8004d44:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004d48:	6a3b      	ldr	r3, [r7, #32]
 8004d4a:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8004d4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d4e:	3301      	adds	r3, #1
 8004d50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d54:	2b03      	cmp	r3, #3
 8004d56:	d902      	bls.n	8004d5e <ETH_Prepare_Tx_Descriptors+0x15a>
 8004d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d5a:	3b04      	subs	r3, #4
 8004d5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d66:	623b      	str	r3, [r7, #32]

    descnbr += 1U;
 8004d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d6a:	3301      	adds	r3, #1
 8004d6c:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if(READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8004d6e:	6a3b      	ldr	r3, [r7, #32]
 8004d70:	68db      	ldr	r3, [r3, #12]
 8004d72:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004d76:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d7a:	d10c      	bne.n	8004d96 <ETH_Prepare_Tx_Descriptors+0x192>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8004d7c:	697b      	ldr	r3, [r7, #20]
 8004d7e:	693a      	ldr	r2, [r7, #16]
 8004d80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d84:	623b      	str	r3, [r7, #32]
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8004d86:	6a3b      	ldr	r3, [r7, #32]
 8004d88:	68db      	ldr	r3, [r3, #12]
 8004d8a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004d8e:	6a3b      	ldr	r3, [r7, #32]
 8004d90:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 8004d92:	2302      	movs	r3, #2
 8004d94:	e1ad      	b.n	80050f2 <ETH_Prepare_Tx_Descriptors+0x4ee>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 8004d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d98:	3301      	adds	r3, #1
 8004d9a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8004d9c:	69fb      	ldr	r3, [r7, #28]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	461a      	mov	r2, r3
 8004da2:	6a3b      	ldr	r3, [r7, #32]
 8004da4:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8004da6:	6a3b      	ldr	r3, [r7, #32]
 8004da8:	689a      	ldr	r2, [r3, #8]
 8004daa:	4b24      	ldr	r3, [pc, #144]	; (8004e3c <ETH_Prepare_Tx_Descriptors+0x238>)
 8004dac:	4013      	ands	r3, r2
 8004dae:	69fa      	ldr	r2, [r7, #28]
 8004db0:	6852      	ldr	r2, [r2, #4]
 8004db2:	431a      	orrs	r2, r3
 8004db4:	6a3b      	ldr	r3, [r7, #32]
 8004db6:	609a      	str	r2, [r3, #8]

  if(txbuffer->next != NULL)
 8004db8:	69fb      	ldr	r3, [r7, #28]
 8004dba:	689b      	ldr	r3, [r3, #8]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d012      	beq.n	8004de6 <ETH_Prepare_Tx_Descriptors+0x1e2>
  {
    txbuffer = txbuffer->next;
 8004dc0:	69fb      	ldr	r3, [r7, #28]
 8004dc2:	689b      	ldr	r3, [r3, #8]
 8004dc4:	61fb      	str	r3, [r7, #28]
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8004dc6:	69fb      	ldr	r3, [r7, #28]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	461a      	mov	r2, r3
 8004dcc:	6a3b      	ldr	r3, [r7, #32]
 8004dce:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8004dd0:	6a3b      	ldr	r3, [r7, #32]
 8004dd2:	689a      	ldr	r2, [r3, #8]
 8004dd4:	4b1a      	ldr	r3, [pc, #104]	; (8004e40 <ETH_Prepare_Tx_Descriptors+0x23c>)
 8004dd6:	4013      	ands	r3, r2
 8004dd8:	69fa      	ldr	r2, [r7, #28]
 8004dda:	6852      	ldr	r2, [r2, #4]
 8004ddc:	0412      	lsls	r2, r2, #16
 8004dde:	431a      	orrs	r2, r3
 8004de0:	6a3b      	ldr	r3, [r7, #32]
 8004de2:	609a      	str	r2, [r3, #8]
 8004de4:	e008      	b.n	8004df8 <ETH_Prepare_Tx_Descriptors+0x1f4>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8004de6:	6a3b      	ldr	r3, [r7, #32]
 8004de8:	2200      	movs	r2, #0
 8004dea:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8004dec:	6a3b      	ldr	r3, [r7, #32]
 8004dee:	689a      	ldr	r2, [r3, #8]
 8004df0:	4b13      	ldr	r3, [pc, #76]	; (8004e40 <ETH_Prepare_Tx_Descriptors+0x23c>)
 8004df2:	4013      	ands	r3, r2
 8004df4:	6a3a      	ldr	r2, [r7, #32]
 8004df6:	6093      	str	r3, [r2, #8]
  }

  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f003 0310 	and.w	r3, r3, #16
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d021      	beq.n	8004e48 <ETH_Prepare_Tx_Descriptors+0x244>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 8004e04:	6a3b      	ldr	r3, [r7, #32]
 8004e06:	68db      	ldr	r3, [r3, #12]
 8004e08:	f423 02f0 	bic.w	r2, r3, #7864320	; 0x780000
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	6a1b      	ldr	r3, [r3, #32]
 8004e10:	04db      	lsls	r3, r3, #19
 8004e12:	431a      	orrs	r2, r3
 8004e14:	6a3b      	ldr	r3, [r7, #32]
 8004e16:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8004e18:	6a3b      	ldr	r3, [r7, #32]
 8004e1a:	68da      	ldr	r2, [r3, #12]
 8004e1c:	4b09      	ldr	r3, [pc, #36]	; (8004e44 <ETH_Prepare_Tx_Descriptors+0x240>)
 8004e1e:	4013      	ands	r3, r2
 8004e20:	68ba      	ldr	r2, [r7, #8]
 8004e22:	69d2      	ldr	r2, [r2, #28]
 8004e24:	431a      	orrs	r2, r3
 8004e26:	6a3b      	ldr	r3, [r7, #32]
 8004e28:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8004e2a:	6a3b      	ldr	r3, [r7, #32]
 8004e2c:	68db      	ldr	r3, [r3, #12]
 8004e2e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004e32:	6a3b      	ldr	r3, [r7, #32]
 8004e34:	60da      	str	r2, [r3, #12]
 8004e36:	e02e      	b.n	8004e96 <ETH_Prepare_Tx_Descriptors+0x292>
 8004e38:	ffff0000 	.word	0xffff0000
 8004e3c:	ffffc000 	.word	0xffffc000
 8004e40:	c000ffff 	.word	0xc000ffff
 8004e44:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8004e48:	6a3b      	ldr	r3, [r7, #32]
 8004e4a:	68da      	ldr	r2, [r3, #12]
 8004e4c:	4b93      	ldr	r3, [pc, #588]	; (800509c <ETH_Prepare_Tx_Descriptors+0x498>)
 8004e4e:	4013      	ands	r3, r2
 8004e50:	68ba      	ldr	r2, [r7, #8]
 8004e52:	6852      	ldr	r2, [r2, #4]
 8004e54:	431a      	orrs	r2, r3
 8004e56:	6a3b      	ldr	r3, [r7, #32]
 8004e58:	60da      	str	r2, [r3, #12]

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f003 0301 	and.w	r3, r3, #1
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d008      	beq.n	8004e78 <ETH_Prepare_Tx_Descriptors+0x274>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8004e66:	6a3b      	ldr	r3, [r7, #32]
 8004e68:	68db      	ldr	r3, [r3, #12]
 8004e6a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	695b      	ldr	r3, [r3, #20]
 8004e72:	431a      	orrs	r2, r3
 8004e74:	6a3b      	ldr	r3, [r7, #32]
 8004e76:	60da      	str	r2, [r3, #12]
    }

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f003 0320 	and.w	r3, r3, #32
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d008      	beq.n	8004e96 <ETH_Prepare_Tx_Descriptors+0x292>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 8004e84:	6a3b      	ldr	r3, [r7, #32]
 8004e86:	68db      	ldr	r3, [r3, #12]
 8004e88:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	691b      	ldr	r3, [r3, #16]
 8004e90:	431a      	orrs	r2, r3
 8004e92:	6a3b      	ldr	r3, [r7, #32]
 8004e94:	60da      	str	r2, [r3, #12]
    }
  }

  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8004e96:	68bb      	ldr	r3, [r7, #8]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f003 0304 	and.w	r3, r3, #4
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d008      	beq.n	8004eb4 <ETH_Prepare_Tx_Descriptors+0x2b0>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 8004ea2:	6a3b      	ldr	r3, [r7, #32]
 8004ea4:	689b      	ldr	r3, [r3, #8]
 8004ea6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eae:	431a      	orrs	r2, r3
 8004eb0:	6a3b      	ldr	r3, [r7, #32]
 8004eb2:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8004eb4:	6a3b      	ldr	r3, [r7, #32]
 8004eb6:	68db      	ldr	r3, [r3, #12]
 8004eb8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004ebc:	6a3b      	ldr	r3, [r7, #32]
 8004ebe:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8004ec0:	6a3b      	ldr	r3, [r7, #32]
 8004ec2:	68db      	ldr	r3, [r3, #12]
 8004ec4:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004ec8:	6a3b      	ldr	r3, [r7, #32]
 8004eca:	60da      	str	r2, [r3, #12]
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8004ecc:	6a3b      	ldr	r3, [r7, #32]
 8004ece:	68db      	ldr	r3, [r3, #12]
 8004ed0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004ed4:	6a3b      	ldr	r3, [r7, #32]
 8004ed6:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != 0U)
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f003 0302 	and.w	r3, r3, #2
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	f000 80cb 	beq.w	800507c <ETH_Prepare_Tx_Descriptors+0x478>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 8004ee6:	6a3b      	ldr	r3, [r7, #32]
 8004ee8:	68db      	ldr	r3, [r3, #12]
 8004eea:	f023 7260 	bic.w	r2, r3, #58720256	; 0x3800000
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	68db      	ldr	r3, [r3, #12]
 8004ef2:	431a      	orrs	r2, r3
 8004ef4:	6a3b      	ldr	r3, [r7, #32]
 8004ef6:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8004ef8:	e0c0      	b.n	800507c <ETH_Prepare_Tx_Descriptors+0x478>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8004efa:	6a3b      	ldr	r3, [r7, #32]
 8004efc:	68db      	ldr	r3, [r3, #12]
 8004efe:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004f02:	6a3b      	ldr	r3, [r7, #32]
 8004f04:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8004f06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f08:	3301      	adds	r3, #1
 8004f0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f0e:	2b03      	cmp	r3, #3
 8004f10:	d902      	bls.n	8004f18 <ETH_Prepare_Tx_Descriptors+0x314>
 8004f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f14:	3b04      	subs	r3, #4
 8004f16:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f20:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8004f22:	6a3b      	ldr	r3, [r7, #32]
 8004f24:	68db      	ldr	r3, [r3, #12]
 8004f26:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004f2a:	6a3b      	ldr	r3, [r7, #32]
 8004f2c:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN) || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8004f2e:	6a3b      	ldr	r3, [r7, #32]
 8004f30:	68db      	ldr	r3, [r3, #12]
 8004f32:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004f36:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f3a:	d007      	beq.n	8004f4c <ETH_Prepare_Tx_Descriptors+0x348>
 8004f3c:	697a      	ldr	r2, [r7, #20]
 8004f3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f40:	3304      	adds	r3, #4
 8004f42:	009b      	lsls	r3, r3, #2
 8004f44:	4413      	add	r3, r2
 8004f46:	685b      	ldr	r3, [r3, #4]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d026      	beq.n	8004f9a <ETH_Prepare_Tx_Descriptors+0x396>
    {
      descidx = firstdescidx;
 8004f4c:	693b      	ldr	r3, [r7, #16]
 8004f4e:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004f50:	697b      	ldr	r3, [r7, #20]
 8004f52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f58:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for(idx = 0; idx < descnbr; idx ++)
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	627b      	str	r3, [r7, #36]	; 0x24
 8004f5e:	e016      	b.n	8004f8e <ETH_Prepare_Tx_Descriptors+0x38a>
      {
        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8004f60:	6a3b      	ldr	r3, [r7, #32]
 8004f62:	68db      	ldr	r3, [r3, #12]
 8004f64:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004f68:	6a3b      	ldr	r3, [r7, #32]
 8004f6a:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8004f6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f6e:	3301      	adds	r3, #1
 8004f70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f74:	2b03      	cmp	r3, #3
 8004f76:	d902      	bls.n	8004f7e <ETH_Prepare_Tx_Descriptors+0x37a>
 8004f78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f7a:	3b04      	subs	r3, #4
 8004f7c:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004f7e:	697b      	ldr	r3, [r7, #20]
 8004f80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f86:	623b      	str	r3, [r7, #32]
      for(idx = 0; idx < descnbr; idx ++)
 8004f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f8a:	3301      	adds	r3, #1
 8004f8c:	627b      	str	r3, [r7, #36]	; 0x24
 8004f8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f92:	429a      	cmp	r2, r3
 8004f94:	d3e4      	bcc.n	8004f60 <ETH_Prepare_Tx_Descriptors+0x35c>
      }

      return HAL_ETH_ERROR_BUSY;
 8004f96:	2302      	movs	r3, #2
 8004f98:	e0ab      	b.n	80050f2 <ETH_Prepare_Tx_Descriptors+0x4ee>
    }

    descnbr += 1U;
 8004f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f9c:	3301      	adds	r3, #1
 8004f9e:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8004fa0:	69fb      	ldr	r3, [r7, #28]
 8004fa2:	689b      	ldr	r3, [r3, #8]
 8004fa4:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8004fa6:	69fb      	ldr	r3, [r7, #28]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	461a      	mov	r2, r3
 8004fac:	6a3b      	ldr	r3, [r7, #32]
 8004fae:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8004fb0:	6a3b      	ldr	r3, [r7, #32]
 8004fb2:	689a      	ldr	r2, [r3, #8]
 8004fb4:	4b3a      	ldr	r3, [pc, #232]	; (80050a0 <ETH_Prepare_Tx_Descriptors+0x49c>)
 8004fb6:	4013      	ands	r3, r2
 8004fb8:	69fa      	ldr	r2, [r7, #28]
 8004fba:	6852      	ldr	r2, [r2, #4]
 8004fbc:	431a      	orrs	r2, r3
 8004fbe:	6a3b      	ldr	r3, [r7, #32]
 8004fc0:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 8004fc2:	69fb      	ldr	r3, [r7, #28]
 8004fc4:	689b      	ldr	r3, [r3, #8]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d012      	beq.n	8004ff0 <ETH_Prepare_Tx_Descriptors+0x3ec>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 8004fca:	69fb      	ldr	r3, [r7, #28]
 8004fcc:	689b      	ldr	r3, [r3, #8]
 8004fce:	61fb      	str	r3, [r7, #28]
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8004fd0:	69fb      	ldr	r3, [r7, #28]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	461a      	mov	r2, r3
 8004fd6:	6a3b      	ldr	r3, [r7, #32]
 8004fd8:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8004fda:	6a3b      	ldr	r3, [r7, #32]
 8004fdc:	689a      	ldr	r2, [r3, #8]
 8004fde:	4b31      	ldr	r3, [pc, #196]	; (80050a4 <ETH_Prepare_Tx_Descriptors+0x4a0>)
 8004fe0:	4013      	ands	r3, r2
 8004fe2:	69fa      	ldr	r2, [r7, #28]
 8004fe4:	6852      	ldr	r2, [r2, #4]
 8004fe6:	0412      	lsls	r2, r2, #16
 8004fe8:	431a      	orrs	r2, r3
 8004fea:	6a3b      	ldr	r3, [r7, #32]
 8004fec:	609a      	str	r2, [r3, #8]
 8004fee:	e008      	b.n	8005002 <ETH_Prepare_Tx_Descriptors+0x3fe>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0);
 8004ff0:	6a3b      	ldr	r3, [r7, #32]
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8004ff6:	6a3b      	ldr	r3, [r7, #32]
 8004ff8:	689a      	ldr	r2, [r3, #8]
 8004ffa:	4b2a      	ldr	r3, [pc, #168]	; (80050a4 <ETH_Prepare_Tx_Descriptors+0x4a0>)
 8004ffc:	4013      	ands	r3, r2
 8004ffe:	6a3a      	ldr	r2, [r7, #32]
 8005000:	6093      	str	r3, [r2, #8]
    }

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f003 0310 	and.w	r3, r3, #16
 800500a:	2b00      	cmp	r3, #0
 800500c:	d00f      	beq.n	800502e <ETH_Prepare_Tx_Descriptors+0x42a>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 800500e:	6a3b      	ldr	r3, [r7, #32]
 8005010:	68da      	ldr	r2, [r3, #12]
 8005012:	4b25      	ldr	r3, [pc, #148]	; (80050a8 <ETH_Prepare_Tx_Descriptors+0x4a4>)
 8005014:	4013      	ands	r3, r2
 8005016:	68ba      	ldr	r2, [r7, #8]
 8005018:	69d2      	ldr	r2, [r2, #28]
 800501a:	431a      	orrs	r2, r3
 800501c:	6a3b      	ldr	r3, [r7, #32]
 800501e:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8005020:	6a3b      	ldr	r3, [r7, #32]
 8005022:	68db      	ldr	r3, [r3, #12]
 8005024:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005028:	6a3b      	ldr	r3, [r7, #32]
 800502a:	60da      	str	r2, [r3, #12]
 800502c:	e017      	b.n	800505e <ETH_Prepare_Tx_Descriptors+0x45a>
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 800502e:	6a3b      	ldr	r3, [r7, #32]
 8005030:	68da      	ldr	r2, [r3, #12]
 8005032:	4b1a      	ldr	r3, [pc, #104]	; (800509c <ETH_Prepare_Tx_Descriptors+0x498>)
 8005034:	4013      	ands	r3, r2
 8005036:	68ba      	ldr	r2, [r7, #8]
 8005038:	6852      	ldr	r2, [r2, #4]
 800503a:	431a      	orrs	r2, r3
 800503c:	6a3b      	ldr	r3, [r7, #32]
 800503e:	60da      	str	r2, [r3, #12]

      if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f003 0301 	and.w	r3, r3, #1
 8005048:	2b00      	cmp	r3, #0
 800504a:	d008      	beq.n	800505e <ETH_Prepare_Tx_Descriptors+0x45a>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 800504c:	6a3b      	ldr	r3, [r7, #32]
 800504e:	68db      	ldr	r3, [r3, #12]
 8005050:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	695b      	ldr	r3, [r3, #20]
 8005058:	431a      	orrs	r2, r3
 800505a:	6a3b      	ldr	r3, [r7, #32]
 800505c:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 800505e:	69bb      	ldr	r3, [r7, #24]
 8005060:	3301      	adds	r3, #1
 8005062:	61bb      	str	r3, [r7, #24]
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8005064:	6a3b      	ldr	r3, [r7, #32]
 8005066:	68db      	ldr	r3, [r3, #12]
 8005068:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800506c:	6a3b      	ldr	r3, [r7, #32]
 800506e:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8005070:	6a3b      	ldr	r3, [r7, #32]
 8005072:	68db      	ldr	r3, [r3, #12]
 8005074:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005078:	6a3b      	ldr	r3, [r7, #32]
 800507a:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 800507c:	69fb      	ldr	r3, [r7, #28]
 800507e:	689b      	ldr	r3, [r3, #8]
 8005080:	2b00      	cmp	r3, #0
 8005082:	f47f af3a 	bne.w	8004efa <ETH_Prepare_Tx_Descriptors+0x2f6>
  }

  if(ItMode != ((uint32_t)RESET))
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d00f      	beq.n	80050ac <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 800508c:	6a3b      	ldr	r3, [r7, #32]
 800508e:	689b      	ldr	r3, [r3, #8]
 8005090:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005094:	6a3b      	ldr	r3, [r7, #32]
 8005096:	609a      	str	r2, [r3, #8]
 8005098:	e00e      	b.n	80050b8 <ETH_Prepare_Tx_Descriptors+0x4b4>
 800509a:	bf00      	nop
 800509c:	ffff8000 	.word	0xffff8000
 80050a0:	ffffc000 	.word	0xffffc000
 80050a4:	c000ffff 	.word	0xc000ffff
 80050a8:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 80050ac:	6a3b      	ldr	r3, [r7, #32]
 80050ae:	689b      	ldr	r3, [r3, #8]
 80050b0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80050b4:	6a3b      	ldr	r3, [r7, #32]
 80050b6:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 80050b8:	6a3b      	ldr	r3, [r7, #32]
 80050ba:	68db      	ldr	r3, [r3, #12]
 80050bc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80050c0:	6a3b      	ldr	r3, [r7, #32]
 80050c2:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80050c8:	6979      	ldr	r1, [r7, #20]
 80050ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050cc:	3304      	adds	r3, #4
 80050ce:	009b      	lsls	r3, r3, #2
 80050d0:	440b      	add	r3, r1
 80050d2:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 80050d4:	697b      	ldr	r3, [r7, #20]
 80050d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80050d8:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80050da:	b672      	cpsid	i
}
 80050dc:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 80050de:	697b      	ldr	r3, [r7, #20]
 80050e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80050e2:	69bb      	ldr	r3, [r7, #24]
 80050e4:	4413      	add	r3, r2
 80050e6:	1c5a      	adds	r2, r3, #1
 80050e8:	697b      	ldr	r3, [r7, #20]
 80050ea:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 80050ec:	b662      	cpsie	i
}
 80050ee:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 80050f0:	2300      	movs	r3, #0
}
 80050f2:	4618      	mov	r0, r3
 80050f4:	3734      	adds	r7, #52	; 0x34
 80050f6:	46bd      	mov	sp, r7
 80050f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fc:	4770      	bx	lr
 80050fe:	bf00      	nop

08005100 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005100:	b480      	push	{r7}
 8005102:	b089      	sub	sp, #36	; 0x24
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
 8005108:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800510a:	2300      	movs	r3, #0
 800510c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800510e:	4b89      	ldr	r3, [pc, #548]	; (8005334 <HAL_GPIO_Init+0x234>)
 8005110:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005112:	e194      	b.n	800543e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	681a      	ldr	r2, [r3, #0]
 8005118:	2101      	movs	r1, #1
 800511a:	69fb      	ldr	r3, [r7, #28]
 800511c:	fa01 f303 	lsl.w	r3, r1, r3
 8005120:	4013      	ands	r3, r2
 8005122:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005124:	693b      	ldr	r3, [r7, #16]
 8005126:	2b00      	cmp	r3, #0
 8005128:	f000 8186 	beq.w	8005438 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	2b01      	cmp	r3, #1
 8005132:	d00b      	beq.n	800514c <HAL_GPIO_Init+0x4c>
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	2b02      	cmp	r3, #2
 800513a:	d007      	beq.n	800514c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005140:	2b11      	cmp	r3, #17
 8005142:	d003      	beq.n	800514c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	2b12      	cmp	r3, #18
 800514a:	d130      	bne.n	80051ae <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	689b      	ldr	r3, [r3, #8]
 8005150:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005152:	69fb      	ldr	r3, [r7, #28]
 8005154:	005b      	lsls	r3, r3, #1
 8005156:	2203      	movs	r2, #3
 8005158:	fa02 f303 	lsl.w	r3, r2, r3
 800515c:	43db      	mvns	r3, r3
 800515e:	69ba      	ldr	r2, [r7, #24]
 8005160:	4013      	ands	r3, r2
 8005162:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	68da      	ldr	r2, [r3, #12]
 8005168:	69fb      	ldr	r3, [r7, #28]
 800516a:	005b      	lsls	r3, r3, #1
 800516c:	fa02 f303 	lsl.w	r3, r2, r3
 8005170:	69ba      	ldr	r2, [r7, #24]
 8005172:	4313      	orrs	r3, r2
 8005174:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	69ba      	ldr	r2, [r7, #24]
 800517a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005182:	2201      	movs	r2, #1
 8005184:	69fb      	ldr	r3, [r7, #28]
 8005186:	fa02 f303 	lsl.w	r3, r2, r3
 800518a:	43db      	mvns	r3, r3
 800518c:	69ba      	ldr	r2, [r7, #24]
 800518e:	4013      	ands	r3, r2
 8005190:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	091b      	lsrs	r3, r3, #4
 8005198:	f003 0201 	and.w	r2, r3, #1
 800519c:	69fb      	ldr	r3, [r7, #28]
 800519e:	fa02 f303 	lsl.w	r3, r2, r3
 80051a2:	69ba      	ldr	r2, [r7, #24]
 80051a4:	4313      	orrs	r3, r2
 80051a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	69ba      	ldr	r2, [r7, #24]
 80051ac:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	68db      	ldr	r3, [r3, #12]
 80051b2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80051b4:	69fb      	ldr	r3, [r7, #28]
 80051b6:	005b      	lsls	r3, r3, #1
 80051b8:	2203      	movs	r2, #3
 80051ba:	fa02 f303 	lsl.w	r3, r2, r3
 80051be:	43db      	mvns	r3, r3
 80051c0:	69ba      	ldr	r2, [r7, #24]
 80051c2:	4013      	ands	r3, r2
 80051c4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	689a      	ldr	r2, [r3, #8]
 80051ca:	69fb      	ldr	r3, [r7, #28]
 80051cc:	005b      	lsls	r3, r3, #1
 80051ce:	fa02 f303 	lsl.w	r3, r2, r3
 80051d2:	69ba      	ldr	r2, [r7, #24]
 80051d4:	4313      	orrs	r3, r2
 80051d6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	69ba      	ldr	r2, [r7, #24]
 80051dc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	685b      	ldr	r3, [r3, #4]
 80051e2:	2b02      	cmp	r3, #2
 80051e4:	d003      	beq.n	80051ee <HAL_GPIO_Init+0xee>
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	685b      	ldr	r3, [r3, #4]
 80051ea:	2b12      	cmp	r3, #18
 80051ec:	d123      	bne.n	8005236 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80051ee:	69fb      	ldr	r3, [r7, #28]
 80051f0:	08da      	lsrs	r2, r3, #3
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	3208      	adds	r2, #8
 80051f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80051fc:	69fb      	ldr	r3, [r7, #28]
 80051fe:	f003 0307 	and.w	r3, r3, #7
 8005202:	009b      	lsls	r3, r3, #2
 8005204:	220f      	movs	r2, #15
 8005206:	fa02 f303 	lsl.w	r3, r2, r3
 800520a:	43db      	mvns	r3, r3
 800520c:	69ba      	ldr	r2, [r7, #24]
 800520e:	4013      	ands	r3, r2
 8005210:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	691a      	ldr	r2, [r3, #16]
 8005216:	69fb      	ldr	r3, [r7, #28]
 8005218:	f003 0307 	and.w	r3, r3, #7
 800521c:	009b      	lsls	r3, r3, #2
 800521e:	fa02 f303 	lsl.w	r3, r2, r3
 8005222:	69ba      	ldr	r2, [r7, #24]
 8005224:	4313      	orrs	r3, r2
 8005226:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005228:	69fb      	ldr	r3, [r7, #28]
 800522a:	08da      	lsrs	r2, r3, #3
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	3208      	adds	r2, #8
 8005230:	69b9      	ldr	r1, [r7, #24]
 8005232:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800523c:	69fb      	ldr	r3, [r7, #28]
 800523e:	005b      	lsls	r3, r3, #1
 8005240:	2203      	movs	r2, #3
 8005242:	fa02 f303 	lsl.w	r3, r2, r3
 8005246:	43db      	mvns	r3, r3
 8005248:	69ba      	ldr	r2, [r7, #24]
 800524a:	4013      	ands	r3, r2
 800524c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	f003 0203 	and.w	r2, r3, #3
 8005256:	69fb      	ldr	r3, [r7, #28]
 8005258:	005b      	lsls	r3, r3, #1
 800525a:	fa02 f303 	lsl.w	r3, r2, r3
 800525e:	69ba      	ldr	r2, [r7, #24]
 8005260:	4313      	orrs	r3, r2
 8005262:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	69ba      	ldr	r2, [r7, #24]
 8005268:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	685b      	ldr	r3, [r3, #4]
 800526e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005272:	2b00      	cmp	r3, #0
 8005274:	f000 80e0 	beq.w	8005438 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005278:	4b2f      	ldr	r3, [pc, #188]	; (8005338 <HAL_GPIO_Init+0x238>)
 800527a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800527e:	4a2e      	ldr	r2, [pc, #184]	; (8005338 <HAL_GPIO_Init+0x238>)
 8005280:	f043 0302 	orr.w	r3, r3, #2
 8005284:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005288:	4b2b      	ldr	r3, [pc, #172]	; (8005338 <HAL_GPIO_Init+0x238>)
 800528a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800528e:	f003 0302 	and.w	r3, r3, #2
 8005292:	60fb      	str	r3, [r7, #12]
 8005294:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005296:	4a29      	ldr	r2, [pc, #164]	; (800533c <HAL_GPIO_Init+0x23c>)
 8005298:	69fb      	ldr	r3, [r7, #28]
 800529a:	089b      	lsrs	r3, r3, #2
 800529c:	3302      	adds	r3, #2
 800529e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80052a4:	69fb      	ldr	r3, [r7, #28]
 80052a6:	f003 0303 	and.w	r3, r3, #3
 80052aa:	009b      	lsls	r3, r3, #2
 80052ac:	220f      	movs	r2, #15
 80052ae:	fa02 f303 	lsl.w	r3, r2, r3
 80052b2:	43db      	mvns	r3, r3
 80052b4:	69ba      	ldr	r2, [r7, #24]
 80052b6:	4013      	ands	r3, r2
 80052b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	4a20      	ldr	r2, [pc, #128]	; (8005340 <HAL_GPIO_Init+0x240>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d052      	beq.n	8005368 <HAL_GPIO_Init+0x268>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	4a1f      	ldr	r2, [pc, #124]	; (8005344 <HAL_GPIO_Init+0x244>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d031      	beq.n	800532e <HAL_GPIO_Init+0x22e>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	4a1e      	ldr	r2, [pc, #120]	; (8005348 <HAL_GPIO_Init+0x248>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d02b      	beq.n	800532a <HAL_GPIO_Init+0x22a>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	4a1d      	ldr	r2, [pc, #116]	; (800534c <HAL_GPIO_Init+0x24c>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d025      	beq.n	8005326 <HAL_GPIO_Init+0x226>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	4a1c      	ldr	r2, [pc, #112]	; (8005350 <HAL_GPIO_Init+0x250>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d01f      	beq.n	8005322 <HAL_GPIO_Init+0x222>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	4a1b      	ldr	r2, [pc, #108]	; (8005354 <HAL_GPIO_Init+0x254>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d019      	beq.n	800531e <HAL_GPIO_Init+0x21e>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	4a1a      	ldr	r2, [pc, #104]	; (8005358 <HAL_GPIO_Init+0x258>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d013      	beq.n	800531a <HAL_GPIO_Init+0x21a>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	4a19      	ldr	r2, [pc, #100]	; (800535c <HAL_GPIO_Init+0x25c>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d00d      	beq.n	8005316 <HAL_GPIO_Init+0x216>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	4a18      	ldr	r2, [pc, #96]	; (8005360 <HAL_GPIO_Init+0x260>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d007      	beq.n	8005312 <HAL_GPIO_Init+0x212>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	4a17      	ldr	r2, [pc, #92]	; (8005364 <HAL_GPIO_Init+0x264>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d101      	bne.n	800530e <HAL_GPIO_Init+0x20e>
 800530a:	2309      	movs	r3, #9
 800530c:	e02d      	b.n	800536a <HAL_GPIO_Init+0x26a>
 800530e:	230a      	movs	r3, #10
 8005310:	e02b      	b.n	800536a <HAL_GPIO_Init+0x26a>
 8005312:	2308      	movs	r3, #8
 8005314:	e029      	b.n	800536a <HAL_GPIO_Init+0x26a>
 8005316:	2307      	movs	r3, #7
 8005318:	e027      	b.n	800536a <HAL_GPIO_Init+0x26a>
 800531a:	2306      	movs	r3, #6
 800531c:	e025      	b.n	800536a <HAL_GPIO_Init+0x26a>
 800531e:	2305      	movs	r3, #5
 8005320:	e023      	b.n	800536a <HAL_GPIO_Init+0x26a>
 8005322:	2304      	movs	r3, #4
 8005324:	e021      	b.n	800536a <HAL_GPIO_Init+0x26a>
 8005326:	2303      	movs	r3, #3
 8005328:	e01f      	b.n	800536a <HAL_GPIO_Init+0x26a>
 800532a:	2302      	movs	r3, #2
 800532c:	e01d      	b.n	800536a <HAL_GPIO_Init+0x26a>
 800532e:	2301      	movs	r3, #1
 8005330:	e01b      	b.n	800536a <HAL_GPIO_Init+0x26a>
 8005332:	bf00      	nop
 8005334:	58000080 	.word	0x58000080
 8005338:	58024400 	.word	0x58024400
 800533c:	58000400 	.word	0x58000400
 8005340:	58020000 	.word	0x58020000
 8005344:	58020400 	.word	0x58020400
 8005348:	58020800 	.word	0x58020800
 800534c:	58020c00 	.word	0x58020c00
 8005350:	58021000 	.word	0x58021000
 8005354:	58021400 	.word	0x58021400
 8005358:	58021800 	.word	0x58021800
 800535c:	58021c00 	.word	0x58021c00
 8005360:	58022000 	.word	0x58022000
 8005364:	58022400 	.word	0x58022400
 8005368:	2300      	movs	r3, #0
 800536a:	69fa      	ldr	r2, [r7, #28]
 800536c:	f002 0203 	and.w	r2, r2, #3
 8005370:	0092      	lsls	r2, r2, #2
 8005372:	4093      	lsls	r3, r2
 8005374:	69ba      	ldr	r2, [r7, #24]
 8005376:	4313      	orrs	r3, r2
 8005378:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800537a:	4938      	ldr	r1, [pc, #224]	; (800545c <HAL_GPIO_Init+0x35c>)
 800537c:	69fb      	ldr	r3, [r7, #28]
 800537e:	089b      	lsrs	r3, r3, #2
 8005380:	3302      	adds	r3, #2
 8005382:	69ba      	ldr	r2, [r7, #24]
 8005384:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005388:	697b      	ldr	r3, [r7, #20]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800538e:	693b      	ldr	r3, [r7, #16]
 8005390:	43db      	mvns	r3, r3
 8005392:	69ba      	ldr	r2, [r7, #24]
 8005394:	4013      	ands	r3, r2
 8005396:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d003      	beq.n	80053ac <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80053a4:	69ba      	ldr	r2, [r7, #24]
 80053a6:	693b      	ldr	r3, [r7, #16]
 80053a8:	4313      	orrs	r3, r2
 80053aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80053ac:	697b      	ldr	r3, [r7, #20]
 80053ae:	69ba      	ldr	r2, [r7, #24]
 80053b0:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80053b8:	693b      	ldr	r3, [r7, #16]
 80053ba:	43db      	mvns	r3, r3
 80053bc:	69ba      	ldr	r2, [r7, #24]
 80053be:	4013      	ands	r3, r2
 80053c0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	685b      	ldr	r3, [r3, #4]
 80053c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d003      	beq.n	80053d6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80053ce:	69ba      	ldr	r2, [r7, #24]
 80053d0:	693b      	ldr	r3, [r7, #16]
 80053d2:	4313      	orrs	r3, r2
 80053d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80053d6:	697b      	ldr	r3, [r7, #20]
 80053d8:	69ba      	ldr	r2, [r7, #24]
 80053da:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80053dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80053e4:	693b      	ldr	r3, [r7, #16]
 80053e6:	43db      	mvns	r3, r3
 80053e8:	69ba      	ldr	r2, [r7, #24]
 80053ea:	4013      	ands	r3, r2
 80053ec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	685b      	ldr	r3, [r3, #4]
 80053f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d003      	beq.n	8005402 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 80053fa:	69ba      	ldr	r2, [r7, #24]
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	4313      	orrs	r3, r2
 8005400:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005402:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005406:	69bb      	ldr	r3, [r7, #24]
 8005408:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800540a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800540e:	685b      	ldr	r3, [r3, #4]
 8005410:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005412:	693b      	ldr	r3, [r7, #16]
 8005414:	43db      	mvns	r3, r3
 8005416:	69ba      	ldr	r2, [r7, #24]
 8005418:	4013      	ands	r3, r2
 800541a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	685b      	ldr	r3, [r3, #4]
 8005420:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005424:	2b00      	cmp	r3, #0
 8005426:	d003      	beq.n	8005430 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8005428:	69ba      	ldr	r2, [r7, #24]
 800542a:	693b      	ldr	r3, [r7, #16]
 800542c:	4313      	orrs	r3, r2
 800542e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005430:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005434:	69bb      	ldr	r3, [r7, #24]
 8005436:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8005438:	69fb      	ldr	r3, [r7, #28]
 800543a:	3301      	adds	r3, #1
 800543c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	681a      	ldr	r2, [r3, #0]
 8005442:	69fb      	ldr	r3, [r7, #28]
 8005444:	fa22 f303 	lsr.w	r3, r2, r3
 8005448:	2b00      	cmp	r3, #0
 800544a:	f47f ae63 	bne.w	8005114 <HAL_GPIO_Init+0x14>
  }
}
 800544e:	bf00      	nop
 8005450:	bf00      	nop
 8005452:	3724      	adds	r7, #36	; 0x24
 8005454:	46bd      	mov	sp, r7
 8005456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545a:	4770      	bx	lr
 800545c:	58000400 	.word	0x58000400

08005460 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005460:	b480      	push	{r7}
 8005462:	b085      	sub	sp, #20
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
 8005468:	460b      	mov	r3, r1
 800546a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	691a      	ldr	r2, [r3, #16]
 8005470:	887b      	ldrh	r3, [r7, #2]
 8005472:	4013      	ands	r3, r2
 8005474:	2b00      	cmp	r3, #0
 8005476:	d002      	beq.n	800547e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005478:	2301      	movs	r3, #1
 800547a:	73fb      	strb	r3, [r7, #15]
 800547c:	e001      	b.n	8005482 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800547e:	2300      	movs	r3, #0
 8005480:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005482:	7bfb      	ldrb	r3, [r7, #15]
}
 8005484:	4618      	mov	r0, r3
 8005486:	3714      	adds	r7, #20
 8005488:	46bd      	mov	sp, r7
 800548a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548e:	4770      	bx	lr

08005490 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005490:	b480      	push	{r7}
 8005492:	b083      	sub	sp, #12
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
 8005498:	460b      	mov	r3, r1
 800549a:	807b      	strh	r3, [r7, #2]
 800549c:	4613      	mov	r3, r2
 800549e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80054a0:	787b      	ldrb	r3, [r7, #1]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d003      	beq.n	80054ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80054a6:	887a      	ldrh	r2, [r7, #2]
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80054ac:	e003      	b.n	80054b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80054ae:	887b      	ldrh	r3, [r7, #2]
 80054b0:	041a      	lsls	r2, r3, #16
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	619a      	str	r2, [r3, #24]
}
 80054b6:	bf00      	nop
 80054b8:	370c      	adds	r7, #12
 80054ba:	46bd      	mov	sp, r7
 80054bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c0:	4770      	bx	lr

080054c2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80054c2:	b480      	push	{r7}
 80054c4:	b085      	sub	sp, #20
 80054c6:	af00      	add	r7, sp, #0
 80054c8:	6078      	str	r0, [r7, #4]
 80054ca:	460b      	mov	r3, r1
 80054cc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	695b      	ldr	r3, [r3, #20]
 80054d2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80054d4:	887a      	ldrh	r2, [r7, #2]
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	4013      	ands	r3, r2
 80054da:	041a      	lsls	r2, r3, #16
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	43d9      	mvns	r1, r3
 80054e0:	887b      	ldrh	r3, [r7, #2]
 80054e2:	400b      	ands	r3, r1
 80054e4:	431a      	orrs	r2, r3
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	619a      	str	r2, [r3, #24]
}
 80054ea:	bf00      	nop
 80054ec:	3714      	adds	r7, #20
 80054ee:	46bd      	mov	sp, r7
 80054f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f4:	4770      	bx	lr

080054f6 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80054f6:	b580      	push	{r7, lr}
 80054f8:	b082      	sub	sp, #8
 80054fa:	af00      	add	r7, sp, #0
 80054fc:	4603      	mov	r3, r0
 80054fe:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8005500:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005504:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005508:	88fb      	ldrh	r3, [r7, #6]
 800550a:	4013      	ands	r3, r2
 800550c:	2b00      	cmp	r3, #0
 800550e:	d008      	beq.n	8005522 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005510:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005514:	88fb      	ldrh	r3, [r7, #6]
 8005516:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800551a:	88fb      	ldrh	r3, [r7, #6]
 800551c:	4618      	mov	r0, r3
 800551e:	f7fb fdd5 	bl	80010cc <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8005522:	bf00      	nop
 8005524:	3708      	adds	r7, #8
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}
	...

0800552c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b084      	sub	sp, #16
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005534:	4b19      	ldr	r3, [pc, #100]	; (800559c <HAL_PWREx_ConfigSupply+0x70>)
 8005536:	68db      	ldr	r3, [r3, #12]
 8005538:	f003 0304 	and.w	r3, r3, #4
 800553c:	2b04      	cmp	r3, #4
 800553e:	d00a      	beq.n	8005556 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005540:	4b16      	ldr	r3, [pc, #88]	; (800559c <HAL_PWREx_ConfigSupply+0x70>)
 8005542:	68db      	ldr	r3, [r3, #12]
 8005544:	f003 0307 	and.w	r3, r3, #7
 8005548:	687a      	ldr	r2, [r7, #4]
 800554a:	429a      	cmp	r2, r3
 800554c:	d001      	beq.n	8005552 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800554e:	2301      	movs	r3, #1
 8005550:	e01f      	b.n	8005592 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005552:	2300      	movs	r3, #0
 8005554:	e01d      	b.n	8005592 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005556:	4b11      	ldr	r3, [pc, #68]	; (800559c <HAL_PWREx_ConfigSupply+0x70>)
 8005558:	68db      	ldr	r3, [r3, #12]
 800555a:	f023 0207 	bic.w	r2, r3, #7
 800555e:	490f      	ldr	r1, [pc, #60]	; (800559c <HAL_PWREx_ConfigSupply+0x70>)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	4313      	orrs	r3, r2
 8005564:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005566:	f7fd fb39 	bl	8002bdc <HAL_GetTick>
 800556a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800556c:	e009      	b.n	8005582 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800556e:	f7fd fb35 	bl	8002bdc <HAL_GetTick>
 8005572:	4602      	mov	r2, r0
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	1ad3      	subs	r3, r2, r3
 8005578:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800557c:	d901      	bls.n	8005582 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800557e:	2301      	movs	r3, #1
 8005580:	e007      	b.n	8005592 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005582:	4b06      	ldr	r3, [pc, #24]	; (800559c <HAL_PWREx_ConfigSupply+0x70>)
 8005584:	685b      	ldr	r3, [r3, #4]
 8005586:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800558a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800558e:	d1ee      	bne.n	800556e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005590:	2300      	movs	r3, #0
}
 8005592:	4618      	mov	r0, r3
 8005594:	3710      	adds	r7, #16
 8005596:	46bd      	mov	sp, r7
 8005598:	bd80      	pop	{r7, pc}
 800559a:	bf00      	nop
 800559c:	58024800 	.word	0x58024800

080055a0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b08c      	sub	sp, #48	; 0x30
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d101      	bne.n	80055b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80055ae:	2301      	movs	r3, #1
 80055b0:	e3fd      	b.n	8005dae <HAL_RCC_OscConfig+0x80e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f003 0301 	and.w	r3, r3, #1
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	f000 8087 	beq.w	80056ce <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80055c0:	4b99      	ldr	r3, [pc, #612]	; (8005828 <HAL_RCC_OscConfig+0x288>)
 80055c2:	691b      	ldr	r3, [r3, #16]
 80055c4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80055c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80055ca:	4b97      	ldr	r3, [pc, #604]	; (8005828 <HAL_RCC_OscConfig+0x288>)
 80055cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055ce:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80055d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055d2:	2b10      	cmp	r3, #16
 80055d4:	d007      	beq.n	80055e6 <HAL_RCC_OscConfig+0x46>
 80055d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055d8:	2b18      	cmp	r3, #24
 80055da:	d110      	bne.n	80055fe <HAL_RCC_OscConfig+0x5e>
 80055dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055de:	f003 0303 	and.w	r3, r3, #3
 80055e2:	2b02      	cmp	r3, #2
 80055e4:	d10b      	bne.n	80055fe <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055e6:	4b90      	ldr	r3, [pc, #576]	; (8005828 <HAL_RCC_OscConfig+0x288>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d06c      	beq.n	80056cc <HAL_RCC_OscConfig+0x12c>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	685b      	ldr	r3, [r3, #4]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d168      	bne.n	80056cc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80055fa:	2301      	movs	r3, #1
 80055fc:	e3d7      	b.n	8005dae <HAL_RCC_OscConfig+0x80e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	685b      	ldr	r3, [r3, #4]
 8005602:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005606:	d106      	bne.n	8005616 <HAL_RCC_OscConfig+0x76>
 8005608:	4b87      	ldr	r3, [pc, #540]	; (8005828 <HAL_RCC_OscConfig+0x288>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4a86      	ldr	r2, [pc, #536]	; (8005828 <HAL_RCC_OscConfig+0x288>)
 800560e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005612:	6013      	str	r3, [r2, #0]
 8005614:	e02e      	b.n	8005674 <HAL_RCC_OscConfig+0xd4>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	685b      	ldr	r3, [r3, #4]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d10c      	bne.n	8005638 <HAL_RCC_OscConfig+0x98>
 800561e:	4b82      	ldr	r3, [pc, #520]	; (8005828 <HAL_RCC_OscConfig+0x288>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4a81      	ldr	r2, [pc, #516]	; (8005828 <HAL_RCC_OscConfig+0x288>)
 8005624:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005628:	6013      	str	r3, [r2, #0]
 800562a:	4b7f      	ldr	r3, [pc, #508]	; (8005828 <HAL_RCC_OscConfig+0x288>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4a7e      	ldr	r2, [pc, #504]	; (8005828 <HAL_RCC_OscConfig+0x288>)
 8005630:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005634:	6013      	str	r3, [r2, #0]
 8005636:	e01d      	b.n	8005674 <HAL_RCC_OscConfig+0xd4>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	685b      	ldr	r3, [r3, #4]
 800563c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005640:	d10c      	bne.n	800565c <HAL_RCC_OscConfig+0xbc>
 8005642:	4b79      	ldr	r3, [pc, #484]	; (8005828 <HAL_RCC_OscConfig+0x288>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	4a78      	ldr	r2, [pc, #480]	; (8005828 <HAL_RCC_OscConfig+0x288>)
 8005648:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800564c:	6013      	str	r3, [r2, #0]
 800564e:	4b76      	ldr	r3, [pc, #472]	; (8005828 <HAL_RCC_OscConfig+0x288>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4a75      	ldr	r2, [pc, #468]	; (8005828 <HAL_RCC_OscConfig+0x288>)
 8005654:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005658:	6013      	str	r3, [r2, #0]
 800565a:	e00b      	b.n	8005674 <HAL_RCC_OscConfig+0xd4>
 800565c:	4b72      	ldr	r3, [pc, #456]	; (8005828 <HAL_RCC_OscConfig+0x288>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4a71      	ldr	r2, [pc, #452]	; (8005828 <HAL_RCC_OscConfig+0x288>)
 8005662:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005666:	6013      	str	r3, [r2, #0]
 8005668:	4b6f      	ldr	r3, [pc, #444]	; (8005828 <HAL_RCC_OscConfig+0x288>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a6e      	ldr	r2, [pc, #440]	; (8005828 <HAL_RCC_OscConfig+0x288>)
 800566e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005672:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d013      	beq.n	80056a4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800567c:	f7fd faae 	bl	8002bdc <HAL_GetTick>
 8005680:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005682:	e008      	b.n	8005696 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005684:	f7fd faaa 	bl	8002bdc <HAL_GetTick>
 8005688:	4602      	mov	r2, r0
 800568a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800568c:	1ad3      	subs	r3, r2, r3
 800568e:	2b64      	cmp	r3, #100	; 0x64
 8005690:	d901      	bls.n	8005696 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005692:	2303      	movs	r3, #3
 8005694:	e38b      	b.n	8005dae <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005696:	4b64      	ldr	r3, [pc, #400]	; (8005828 <HAL_RCC_OscConfig+0x288>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d0f0      	beq.n	8005684 <HAL_RCC_OscConfig+0xe4>
 80056a2:	e014      	b.n	80056ce <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056a4:	f7fd fa9a 	bl	8002bdc <HAL_GetTick>
 80056a8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80056aa:	e008      	b.n	80056be <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80056ac:	f7fd fa96 	bl	8002bdc <HAL_GetTick>
 80056b0:	4602      	mov	r2, r0
 80056b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b4:	1ad3      	subs	r3, r2, r3
 80056b6:	2b64      	cmp	r3, #100	; 0x64
 80056b8:	d901      	bls.n	80056be <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80056ba:	2303      	movs	r3, #3
 80056bc:	e377      	b.n	8005dae <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80056be:	4b5a      	ldr	r3, [pc, #360]	; (8005828 <HAL_RCC_OscConfig+0x288>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d1f0      	bne.n	80056ac <HAL_RCC_OscConfig+0x10c>
 80056ca:	e000      	b.n	80056ce <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f003 0302 	and.w	r3, r3, #2
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	f000 80ae 	beq.w	8005838 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80056dc:	4b52      	ldr	r3, [pc, #328]	; (8005828 <HAL_RCC_OscConfig+0x288>)
 80056de:	691b      	ldr	r3, [r3, #16]
 80056e0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80056e4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80056e6:	4b50      	ldr	r3, [pc, #320]	; (8005828 <HAL_RCC_OscConfig+0x288>)
 80056e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056ea:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80056ec:	6a3b      	ldr	r3, [r7, #32]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d007      	beq.n	8005702 <HAL_RCC_OscConfig+0x162>
 80056f2:	6a3b      	ldr	r3, [r7, #32]
 80056f4:	2b18      	cmp	r3, #24
 80056f6:	d13a      	bne.n	800576e <HAL_RCC_OscConfig+0x1ce>
 80056f8:	69fb      	ldr	r3, [r7, #28]
 80056fa:	f003 0303 	and.w	r3, r3, #3
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d135      	bne.n	800576e <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005702:	4b49      	ldr	r3, [pc, #292]	; (8005828 <HAL_RCC_OscConfig+0x288>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f003 0304 	and.w	r3, r3, #4
 800570a:	2b00      	cmp	r3, #0
 800570c:	d005      	beq.n	800571a <HAL_RCC_OscConfig+0x17a>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	68db      	ldr	r3, [r3, #12]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d101      	bne.n	800571a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005716:	2301      	movs	r3, #1
 8005718:	e349      	b.n	8005dae <HAL_RCC_OscConfig+0x80e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800571a:	f7fd fa6b 	bl	8002bf4 <HAL_GetREVID>
 800571e:	4603      	mov	r3, r0
 8005720:	f241 0203 	movw	r2, #4099	; 0x1003
 8005724:	4293      	cmp	r3, r2
 8005726:	d817      	bhi.n	8005758 <HAL_RCC_OscConfig+0x1b8>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	691b      	ldr	r3, [r3, #16]
 800572c:	2b40      	cmp	r3, #64	; 0x40
 800572e:	d108      	bne.n	8005742 <HAL_RCC_OscConfig+0x1a2>
 8005730:	4b3d      	ldr	r3, [pc, #244]	; (8005828 <HAL_RCC_OscConfig+0x288>)
 8005732:	685b      	ldr	r3, [r3, #4]
 8005734:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005738:	4a3b      	ldr	r2, [pc, #236]	; (8005828 <HAL_RCC_OscConfig+0x288>)
 800573a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800573e:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005740:	e07a      	b.n	8005838 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005742:	4b39      	ldr	r3, [pc, #228]	; (8005828 <HAL_RCC_OscConfig+0x288>)
 8005744:	685b      	ldr	r3, [r3, #4]
 8005746:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	691b      	ldr	r3, [r3, #16]
 800574e:	031b      	lsls	r3, r3, #12
 8005750:	4935      	ldr	r1, [pc, #212]	; (8005828 <HAL_RCC_OscConfig+0x288>)
 8005752:	4313      	orrs	r3, r2
 8005754:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005756:	e06f      	b.n	8005838 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005758:	4b33      	ldr	r3, [pc, #204]	; (8005828 <HAL_RCC_OscConfig+0x288>)
 800575a:	685b      	ldr	r3, [r3, #4]
 800575c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	691b      	ldr	r3, [r3, #16]
 8005764:	061b      	lsls	r3, r3, #24
 8005766:	4930      	ldr	r1, [pc, #192]	; (8005828 <HAL_RCC_OscConfig+0x288>)
 8005768:	4313      	orrs	r3, r2
 800576a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800576c:	e064      	b.n	8005838 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	68db      	ldr	r3, [r3, #12]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d045      	beq.n	8005802 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005776:	4b2c      	ldr	r3, [pc, #176]	; (8005828 <HAL_RCC_OscConfig+0x288>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f023 0219 	bic.w	r2, r3, #25
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	68db      	ldr	r3, [r3, #12]
 8005782:	4929      	ldr	r1, [pc, #164]	; (8005828 <HAL_RCC_OscConfig+0x288>)
 8005784:	4313      	orrs	r3, r2
 8005786:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005788:	f7fd fa28 	bl	8002bdc <HAL_GetTick>
 800578c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800578e:	e008      	b.n	80057a2 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005790:	f7fd fa24 	bl	8002bdc <HAL_GetTick>
 8005794:	4602      	mov	r2, r0
 8005796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005798:	1ad3      	subs	r3, r2, r3
 800579a:	2b02      	cmp	r3, #2
 800579c:	d901      	bls.n	80057a2 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 800579e:	2303      	movs	r3, #3
 80057a0:	e305      	b.n	8005dae <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80057a2:	4b21      	ldr	r3, [pc, #132]	; (8005828 <HAL_RCC_OscConfig+0x288>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f003 0304 	and.w	r3, r3, #4
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d0f0      	beq.n	8005790 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057ae:	f7fd fa21 	bl	8002bf4 <HAL_GetREVID>
 80057b2:	4603      	mov	r3, r0
 80057b4:	f241 0203 	movw	r2, #4099	; 0x1003
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d817      	bhi.n	80057ec <HAL_RCC_OscConfig+0x24c>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	691b      	ldr	r3, [r3, #16]
 80057c0:	2b40      	cmp	r3, #64	; 0x40
 80057c2:	d108      	bne.n	80057d6 <HAL_RCC_OscConfig+0x236>
 80057c4:	4b18      	ldr	r3, [pc, #96]	; (8005828 <HAL_RCC_OscConfig+0x288>)
 80057c6:	685b      	ldr	r3, [r3, #4]
 80057c8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80057cc:	4a16      	ldr	r2, [pc, #88]	; (8005828 <HAL_RCC_OscConfig+0x288>)
 80057ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80057d2:	6053      	str	r3, [r2, #4]
 80057d4:	e030      	b.n	8005838 <HAL_RCC_OscConfig+0x298>
 80057d6:	4b14      	ldr	r3, [pc, #80]	; (8005828 <HAL_RCC_OscConfig+0x288>)
 80057d8:	685b      	ldr	r3, [r3, #4]
 80057da:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	691b      	ldr	r3, [r3, #16]
 80057e2:	031b      	lsls	r3, r3, #12
 80057e4:	4910      	ldr	r1, [pc, #64]	; (8005828 <HAL_RCC_OscConfig+0x288>)
 80057e6:	4313      	orrs	r3, r2
 80057e8:	604b      	str	r3, [r1, #4]
 80057ea:	e025      	b.n	8005838 <HAL_RCC_OscConfig+0x298>
 80057ec:	4b0e      	ldr	r3, [pc, #56]	; (8005828 <HAL_RCC_OscConfig+0x288>)
 80057ee:	685b      	ldr	r3, [r3, #4]
 80057f0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	691b      	ldr	r3, [r3, #16]
 80057f8:	061b      	lsls	r3, r3, #24
 80057fa:	490b      	ldr	r1, [pc, #44]	; (8005828 <HAL_RCC_OscConfig+0x288>)
 80057fc:	4313      	orrs	r3, r2
 80057fe:	604b      	str	r3, [r1, #4]
 8005800:	e01a      	b.n	8005838 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005802:	4b09      	ldr	r3, [pc, #36]	; (8005828 <HAL_RCC_OscConfig+0x288>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4a08      	ldr	r2, [pc, #32]	; (8005828 <HAL_RCC_OscConfig+0x288>)
 8005808:	f023 0301 	bic.w	r3, r3, #1
 800580c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800580e:	f7fd f9e5 	bl	8002bdc <HAL_GetTick>
 8005812:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005814:	e00a      	b.n	800582c <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005816:	f7fd f9e1 	bl	8002bdc <HAL_GetTick>
 800581a:	4602      	mov	r2, r0
 800581c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800581e:	1ad3      	subs	r3, r2, r3
 8005820:	2b02      	cmp	r3, #2
 8005822:	d903      	bls.n	800582c <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8005824:	2303      	movs	r3, #3
 8005826:	e2c2      	b.n	8005dae <HAL_RCC_OscConfig+0x80e>
 8005828:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800582c:	4b94      	ldr	r3, [pc, #592]	; (8005a80 <HAL_RCC_OscConfig+0x4e0>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f003 0304 	and.w	r3, r3, #4
 8005834:	2b00      	cmp	r3, #0
 8005836:	d1ee      	bne.n	8005816 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f003 0310 	and.w	r3, r3, #16
 8005840:	2b00      	cmp	r3, #0
 8005842:	f000 80a9 	beq.w	8005998 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005846:	4b8e      	ldr	r3, [pc, #568]	; (8005a80 <HAL_RCC_OscConfig+0x4e0>)
 8005848:	691b      	ldr	r3, [r3, #16]
 800584a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800584e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005850:	4b8b      	ldr	r3, [pc, #556]	; (8005a80 <HAL_RCC_OscConfig+0x4e0>)
 8005852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005854:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005856:	69bb      	ldr	r3, [r7, #24]
 8005858:	2b08      	cmp	r3, #8
 800585a:	d007      	beq.n	800586c <HAL_RCC_OscConfig+0x2cc>
 800585c:	69bb      	ldr	r3, [r7, #24]
 800585e:	2b18      	cmp	r3, #24
 8005860:	d13a      	bne.n	80058d8 <HAL_RCC_OscConfig+0x338>
 8005862:	697b      	ldr	r3, [r7, #20]
 8005864:	f003 0303 	and.w	r3, r3, #3
 8005868:	2b01      	cmp	r3, #1
 800586a:	d135      	bne.n	80058d8 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800586c:	4b84      	ldr	r3, [pc, #528]	; (8005a80 <HAL_RCC_OscConfig+0x4e0>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005874:	2b00      	cmp	r3, #0
 8005876:	d005      	beq.n	8005884 <HAL_RCC_OscConfig+0x2e4>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	69db      	ldr	r3, [r3, #28]
 800587c:	2b80      	cmp	r3, #128	; 0x80
 800587e:	d001      	beq.n	8005884 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8005880:	2301      	movs	r3, #1
 8005882:	e294      	b.n	8005dae <HAL_RCC_OscConfig+0x80e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005884:	f7fd f9b6 	bl	8002bf4 <HAL_GetREVID>
 8005888:	4603      	mov	r3, r0
 800588a:	f241 0203 	movw	r2, #4099	; 0x1003
 800588e:	4293      	cmp	r3, r2
 8005890:	d817      	bhi.n	80058c2 <HAL_RCC_OscConfig+0x322>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6a1b      	ldr	r3, [r3, #32]
 8005896:	2b20      	cmp	r3, #32
 8005898:	d108      	bne.n	80058ac <HAL_RCC_OscConfig+0x30c>
 800589a:	4b79      	ldr	r3, [pc, #484]	; (8005a80 <HAL_RCC_OscConfig+0x4e0>)
 800589c:	685b      	ldr	r3, [r3, #4]
 800589e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80058a2:	4a77      	ldr	r2, [pc, #476]	; (8005a80 <HAL_RCC_OscConfig+0x4e0>)
 80058a4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80058a8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80058aa:	e075      	b.n	8005998 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80058ac:	4b74      	ldr	r3, [pc, #464]	; (8005a80 <HAL_RCC_OscConfig+0x4e0>)
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6a1b      	ldr	r3, [r3, #32]
 80058b8:	069b      	lsls	r3, r3, #26
 80058ba:	4971      	ldr	r1, [pc, #452]	; (8005a80 <HAL_RCC_OscConfig+0x4e0>)
 80058bc:	4313      	orrs	r3, r2
 80058be:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80058c0:	e06a      	b.n	8005998 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80058c2:	4b6f      	ldr	r3, [pc, #444]	; (8005a80 <HAL_RCC_OscConfig+0x4e0>)
 80058c4:	68db      	ldr	r3, [r3, #12]
 80058c6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6a1b      	ldr	r3, [r3, #32]
 80058ce:	061b      	lsls	r3, r3, #24
 80058d0:	496b      	ldr	r1, [pc, #428]	; (8005a80 <HAL_RCC_OscConfig+0x4e0>)
 80058d2:	4313      	orrs	r3, r2
 80058d4:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80058d6:	e05f      	b.n	8005998 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	69db      	ldr	r3, [r3, #28]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d042      	beq.n	8005966 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80058e0:	4b67      	ldr	r3, [pc, #412]	; (8005a80 <HAL_RCC_OscConfig+0x4e0>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a66      	ldr	r2, [pc, #408]	; (8005a80 <HAL_RCC_OscConfig+0x4e0>)
 80058e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058ec:	f7fd f976 	bl	8002bdc <HAL_GetTick>
 80058f0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80058f2:	e008      	b.n	8005906 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80058f4:	f7fd f972 	bl	8002bdc <HAL_GetTick>
 80058f8:	4602      	mov	r2, r0
 80058fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058fc:	1ad3      	subs	r3, r2, r3
 80058fe:	2b02      	cmp	r3, #2
 8005900:	d901      	bls.n	8005906 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8005902:	2303      	movs	r3, #3
 8005904:	e253      	b.n	8005dae <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005906:	4b5e      	ldr	r3, [pc, #376]	; (8005a80 <HAL_RCC_OscConfig+0x4e0>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800590e:	2b00      	cmp	r3, #0
 8005910:	d0f0      	beq.n	80058f4 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005912:	f7fd f96f 	bl	8002bf4 <HAL_GetREVID>
 8005916:	4603      	mov	r3, r0
 8005918:	f241 0203 	movw	r2, #4099	; 0x1003
 800591c:	4293      	cmp	r3, r2
 800591e:	d817      	bhi.n	8005950 <HAL_RCC_OscConfig+0x3b0>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6a1b      	ldr	r3, [r3, #32]
 8005924:	2b20      	cmp	r3, #32
 8005926:	d108      	bne.n	800593a <HAL_RCC_OscConfig+0x39a>
 8005928:	4b55      	ldr	r3, [pc, #340]	; (8005a80 <HAL_RCC_OscConfig+0x4e0>)
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005930:	4a53      	ldr	r2, [pc, #332]	; (8005a80 <HAL_RCC_OscConfig+0x4e0>)
 8005932:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005936:	6053      	str	r3, [r2, #4]
 8005938:	e02e      	b.n	8005998 <HAL_RCC_OscConfig+0x3f8>
 800593a:	4b51      	ldr	r3, [pc, #324]	; (8005a80 <HAL_RCC_OscConfig+0x4e0>)
 800593c:	685b      	ldr	r3, [r3, #4]
 800593e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6a1b      	ldr	r3, [r3, #32]
 8005946:	069b      	lsls	r3, r3, #26
 8005948:	494d      	ldr	r1, [pc, #308]	; (8005a80 <HAL_RCC_OscConfig+0x4e0>)
 800594a:	4313      	orrs	r3, r2
 800594c:	604b      	str	r3, [r1, #4]
 800594e:	e023      	b.n	8005998 <HAL_RCC_OscConfig+0x3f8>
 8005950:	4b4b      	ldr	r3, [pc, #300]	; (8005a80 <HAL_RCC_OscConfig+0x4e0>)
 8005952:	68db      	ldr	r3, [r3, #12]
 8005954:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6a1b      	ldr	r3, [r3, #32]
 800595c:	061b      	lsls	r3, r3, #24
 800595e:	4948      	ldr	r1, [pc, #288]	; (8005a80 <HAL_RCC_OscConfig+0x4e0>)
 8005960:	4313      	orrs	r3, r2
 8005962:	60cb      	str	r3, [r1, #12]
 8005964:	e018      	b.n	8005998 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005966:	4b46      	ldr	r3, [pc, #280]	; (8005a80 <HAL_RCC_OscConfig+0x4e0>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4a45      	ldr	r2, [pc, #276]	; (8005a80 <HAL_RCC_OscConfig+0x4e0>)
 800596c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005970:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005972:	f7fd f933 	bl	8002bdc <HAL_GetTick>
 8005976:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005978:	e008      	b.n	800598c <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800597a:	f7fd f92f 	bl	8002bdc <HAL_GetTick>
 800597e:	4602      	mov	r2, r0
 8005980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005982:	1ad3      	subs	r3, r2, r3
 8005984:	2b02      	cmp	r3, #2
 8005986:	d901      	bls.n	800598c <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8005988:	2303      	movs	r3, #3
 800598a:	e210      	b.n	8005dae <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800598c:	4b3c      	ldr	r3, [pc, #240]	; (8005a80 <HAL_RCC_OscConfig+0x4e0>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005994:	2b00      	cmp	r3, #0
 8005996:	d1f0      	bne.n	800597a <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f003 0308 	and.w	r3, r3, #8
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d036      	beq.n	8005a12 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	695b      	ldr	r3, [r3, #20]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d019      	beq.n	80059e0 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80059ac:	4b34      	ldr	r3, [pc, #208]	; (8005a80 <HAL_RCC_OscConfig+0x4e0>)
 80059ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059b0:	4a33      	ldr	r2, [pc, #204]	; (8005a80 <HAL_RCC_OscConfig+0x4e0>)
 80059b2:	f043 0301 	orr.w	r3, r3, #1
 80059b6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059b8:	f7fd f910 	bl	8002bdc <HAL_GetTick>
 80059bc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80059be:	e008      	b.n	80059d2 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80059c0:	f7fd f90c 	bl	8002bdc <HAL_GetTick>
 80059c4:	4602      	mov	r2, r0
 80059c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059c8:	1ad3      	subs	r3, r2, r3
 80059ca:	2b02      	cmp	r3, #2
 80059cc:	d901      	bls.n	80059d2 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 80059ce:	2303      	movs	r3, #3
 80059d0:	e1ed      	b.n	8005dae <HAL_RCC_OscConfig+0x80e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80059d2:	4b2b      	ldr	r3, [pc, #172]	; (8005a80 <HAL_RCC_OscConfig+0x4e0>)
 80059d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059d6:	f003 0302 	and.w	r3, r3, #2
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d0f0      	beq.n	80059c0 <HAL_RCC_OscConfig+0x420>
 80059de:	e018      	b.n	8005a12 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80059e0:	4b27      	ldr	r3, [pc, #156]	; (8005a80 <HAL_RCC_OscConfig+0x4e0>)
 80059e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059e4:	4a26      	ldr	r2, [pc, #152]	; (8005a80 <HAL_RCC_OscConfig+0x4e0>)
 80059e6:	f023 0301 	bic.w	r3, r3, #1
 80059ea:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059ec:	f7fd f8f6 	bl	8002bdc <HAL_GetTick>
 80059f0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80059f2:	e008      	b.n	8005a06 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80059f4:	f7fd f8f2 	bl	8002bdc <HAL_GetTick>
 80059f8:	4602      	mov	r2, r0
 80059fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059fc:	1ad3      	subs	r3, r2, r3
 80059fe:	2b02      	cmp	r3, #2
 8005a00:	d901      	bls.n	8005a06 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8005a02:	2303      	movs	r3, #3
 8005a04:	e1d3      	b.n	8005dae <HAL_RCC_OscConfig+0x80e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005a06:	4b1e      	ldr	r3, [pc, #120]	; (8005a80 <HAL_RCC_OscConfig+0x4e0>)
 8005a08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a0a:	f003 0302 	and.w	r3, r3, #2
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d1f0      	bne.n	80059f4 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f003 0320 	and.w	r3, r3, #32
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d038      	beq.n	8005a90 <HAL_RCC_OscConfig+0x4f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	699b      	ldr	r3, [r3, #24]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d019      	beq.n	8005a5a <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005a26:	4b16      	ldr	r3, [pc, #88]	; (8005a80 <HAL_RCC_OscConfig+0x4e0>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4a15      	ldr	r2, [pc, #84]	; (8005a80 <HAL_RCC_OscConfig+0x4e0>)
 8005a2c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005a30:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005a32:	f7fd f8d3 	bl	8002bdc <HAL_GetTick>
 8005a36:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005a38:	e008      	b.n	8005a4c <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005a3a:	f7fd f8cf 	bl	8002bdc <HAL_GetTick>
 8005a3e:	4602      	mov	r2, r0
 8005a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a42:	1ad3      	subs	r3, r2, r3
 8005a44:	2b02      	cmp	r3, #2
 8005a46:	d901      	bls.n	8005a4c <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8005a48:	2303      	movs	r3, #3
 8005a4a:	e1b0      	b.n	8005dae <HAL_RCC_OscConfig+0x80e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005a4c:	4b0c      	ldr	r3, [pc, #48]	; (8005a80 <HAL_RCC_OscConfig+0x4e0>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d0f0      	beq.n	8005a3a <HAL_RCC_OscConfig+0x49a>
 8005a58:	e01a      	b.n	8005a90 <HAL_RCC_OscConfig+0x4f0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005a5a:	4b09      	ldr	r3, [pc, #36]	; (8005a80 <HAL_RCC_OscConfig+0x4e0>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4a08      	ldr	r2, [pc, #32]	; (8005a80 <HAL_RCC_OscConfig+0x4e0>)
 8005a60:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005a64:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005a66:	f7fd f8b9 	bl	8002bdc <HAL_GetTick>
 8005a6a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005a6c:	e00a      	b.n	8005a84 <HAL_RCC_OscConfig+0x4e4>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005a6e:	f7fd f8b5 	bl	8002bdc <HAL_GetTick>
 8005a72:	4602      	mov	r2, r0
 8005a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a76:	1ad3      	subs	r3, r2, r3
 8005a78:	2b02      	cmp	r3, #2
 8005a7a:	d903      	bls.n	8005a84 <HAL_RCC_OscConfig+0x4e4>
        {
          return HAL_TIMEOUT;
 8005a7c:	2303      	movs	r3, #3
 8005a7e:	e196      	b.n	8005dae <HAL_RCC_OscConfig+0x80e>
 8005a80:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005a84:	4b99      	ldr	r3, [pc, #612]	; (8005cec <HAL_RCC_OscConfig+0x74c>)
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d1ee      	bne.n	8005a6e <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f003 0304 	and.w	r3, r3, #4
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	f000 8081 	beq.w	8005ba0 <HAL_RCC_OscConfig+0x600>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005a9e:	4b94      	ldr	r3, [pc, #592]	; (8005cf0 <HAL_RCC_OscConfig+0x750>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	4a93      	ldr	r2, [pc, #588]	; (8005cf0 <HAL_RCC_OscConfig+0x750>)
 8005aa4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005aa8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005aaa:	f7fd f897 	bl	8002bdc <HAL_GetTick>
 8005aae:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005ab0:	e008      	b.n	8005ac4 <HAL_RCC_OscConfig+0x524>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005ab2:	f7fd f893 	bl	8002bdc <HAL_GetTick>
 8005ab6:	4602      	mov	r2, r0
 8005ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aba:	1ad3      	subs	r3, r2, r3
 8005abc:	2b64      	cmp	r3, #100	; 0x64
 8005abe:	d901      	bls.n	8005ac4 <HAL_RCC_OscConfig+0x524>
      {
        return HAL_TIMEOUT;
 8005ac0:	2303      	movs	r3, #3
 8005ac2:	e174      	b.n	8005dae <HAL_RCC_OscConfig+0x80e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005ac4:	4b8a      	ldr	r3, [pc, #552]	; (8005cf0 <HAL_RCC_OscConfig+0x750>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d0f0      	beq.n	8005ab2 <HAL_RCC_OscConfig+0x512>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	689b      	ldr	r3, [r3, #8]
 8005ad4:	2b01      	cmp	r3, #1
 8005ad6:	d106      	bne.n	8005ae6 <HAL_RCC_OscConfig+0x546>
 8005ad8:	4b84      	ldr	r3, [pc, #528]	; (8005cec <HAL_RCC_OscConfig+0x74c>)
 8005ada:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005adc:	4a83      	ldr	r2, [pc, #524]	; (8005cec <HAL_RCC_OscConfig+0x74c>)
 8005ade:	f043 0301 	orr.w	r3, r3, #1
 8005ae2:	6713      	str	r3, [r2, #112]	; 0x70
 8005ae4:	e02d      	b.n	8005b42 <HAL_RCC_OscConfig+0x5a2>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	689b      	ldr	r3, [r3, #8]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d10c      	bne.n	8005b08 <HAL_RCC_OscConfig+0x568>
 8005aee:	4b7f      	ldr	r3, [pc, #508]	; (8005cec <HAL_RCC_OscConfig+0x74c>)
 8005af0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005af2:	4a7e      	ldr	r2, [pc, #504]	; (8005cec <HAL_RCC_OscConfig+0x74c>)
 8005af4:	f023 0301 	bic.w	r3, r3, #1
 8005af8:	6713      	str	r3, [r2, #112]	; 0x70
 8005afa:	4b7c      	ldr	r3, [pc, #496]	; (8005cec <HAL_RCC_OscConfig+0x74c>)
 8005afc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005afe:	4a7b      	ldr	r2, [pc, #492]	; (8005cec <HAL_RCC_OscConfig+0x74c>)
 8005b00:	f023 0304 	bic.w	r3, r3, #4
 8005b04:	6713      	str	r3, [r2, #112]	; 0x70
 8005b06:	e01c      	b.n	8005b42 <HAL_RCC_OscConfig+0x5a2>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	689b      	ldr	r3, [r3, #8]
 8005b0c:	2b05      	cmp	r3, #5
 8005b0e:	d10c      	bne.n	8005b2a <HAL_RCC_OscConfig+0x58a>
 8005b10:	4b76      	ldr	r3, [pc, #472]	; (8005cec <HAL_RCC_OscConfig+0x74c>)
 8005b12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b14:	4a75      	ldr	r2, [pc, #468]	; (8005cec <HAL_RCC_OscConfig+0x74c>)
 8005b16:	f043 0304 	orr.w	r3, r3, #4
 8005b1a:	6713      	str	r3, [r2, #112]	; 0x70
 8005b1c:	4b73      	ldr	r3, [pc, #460]	; (8005cec <HAL_RCC_OscConfig+0x74c>)
 8005b1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b20:	4a72      	ldr	r2, [pc, #456]	; (8005cec <HAL_RCC_OscConfig+0x74c>)
 8005b22:	f043 0301 	orr.w	r3, r3, #1
 8005b26:	6713      	str	r3, [r2, #112]	; 0x70
 8005b28:	e00b      	b.n	8005b42 <HAL_RCC_OscConfig+0x5a2>
 8005b2a:	4b70      	ldr	r3, [pc, #448]	; (8005cec <HAL_RCC_OscConfig+0x74c>)
 8005b2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b2e:	4a6f      	ldr	r2, [pc, #444]	; (8005cec <HAL_RCC_OscConfig+0x74c>)
 8005b30:	f023 0301 	bic.w	r3, r3, #1
 8005b34:	6713      	str	r3, [r2, #112]	; 0x70
 8005b36:	4b6d      	ldr	r3, [pc, #436]	; (8005cec <HAL_RCC_OscConfig+0x74c>)
 8005b38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b3a:	4a6c      	ldr	r2, [pc, #432]	; (8005cec <HAL_RCC_OscConfig+0x74c>)
 8005b3c:	f023 0304 	bic.w	r3, r3, #4
 8005b40:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	689b      	ldr	r3, [r3, #8]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d015      	beq.n	8005b76 <HAL_RCC_OscConfig+0x5d6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b4a:	f7fd f847 	bl	8002bdc <HAL_GetTick>
 8005b4e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005b50:	e00a      	b.n	8005b68 <HAL_RCC_OscConfig+0x5c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b52:	f7fd f843 	bl	8002bdc <HAL_GetTick>
 8005b56:	4602      	mov	r2, r0
 8005b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b5a:	1ad3      	subs	r3, r2, r3
 8005b5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d901      	bls.n	8005b68 <HAL_RCC_OscConfig+0x5c8>
        {
          return HAL_TIMEOUT;
 8005b64:	2303      	movs	r3, #3
 8005b66:	e122      	b.n	8005dae <HAL_RCC_OscConfig+0x80e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005b68:	4b60      	ldr	r3, [pc, #384]	; (8005cec <HAL_RCC_OscConfig+0x74c>)
 8005b6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b6c:	f003 0302 	and.w	r3, r3, #2
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d0ee      	beq.n	8005b52 <HAL_RCC_OscConfig+0x5b2>
 8005b74:	e014      	b.n	8005ba0 <HAL_RCC_OscConfig+0x600>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b76:	f7fd f831 	bl	8002bdc <HAL_GetTick>
 8005b7a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005b7c:	e00a      	b.n	8005b94 <HAL_RCC_OscConfig+0x5f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b7e:	f7fd f82d 	bl	8002bdc <HAL_GetTick>
 8005b82:	4602      	mov	r2, r0
 8005b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b86:	1ad3      	subs	r3, r2, r3
 8005b88:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d901      	bls.n	8005b94 <HAL_RCC_OscConfig+0x5f4>
        {
          return HAL_TIMEOUT;
 8005b90:	2303      	movs	r3, #3
 8005b92:	e10c      	b.n	8005dae <HAL_RCC_OscConfig+0x80e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005b94:	4b55      	ldr	r3, [pc, #340]	; (8005cec <HAL_RCC_OscConfig+0x74c>)
 8005b96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b98:	f003 0302 	and.w	r3, r3, #2
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d1ee      	bne.n	8005b7e <HAL_RCC_OscConfig+0x5de>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	f000 8101 	beq.w	8005dac <HAL_RCC_OscConfig+0x80c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005baa:	4b50      	ldr	r3, [pc, #320]	; (8005cec <HAL_RCC_OscConfig+0x74c>)
 8005bac:	691b      	ldr	r3, [r3, #16]
 8005bae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005bb2:	2b18      	cmp	r3, #24
 8005bb4:	f000 80bc 	beq.w	8005d30 <HAL_RCC_OscConfig+0x790>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bbc:	2b02      	cmp	r3, #2
 8005bbe:	f040 809d 	bne.w	8005cfc <HAL_RCC_OscConfig+0x75c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005bc2:	4b4a      	ldr	r3, [pc, #296]	; (8005cec <HAL_RCC_OscConfig+0x74c>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	4a49      	ldr	r2, [pc, #292]	; (8005cec <HAL_RCC_OscConfig+0x74c>)
 8005bc8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005bcc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bce:	f7fd f805 	bl	8002bdc <HAL_GetTick>
 8005bd2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005bd4:	e008      	b.n	8005be8 <HAL_RCC_OscConfig+0x648>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005bd6:	f7fd f801 	bl	8002bdc <HAL_GetTick>
 8005bda:	4602      	mov	r2, r0
 8005bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bde:	1ad3      	subs	r3, r2, r3
 8005be0:	2b02      	cmp	r3, #2
 8005be2:	d901      	bls.n	8005be8 <HAL_RCC_OscConfig+0x648>
          {
            return HAL_TIMEOUT;
 8005be4:	2303      	movs	r3, #3
 8005be6:	e0e2      	b.n	8005dae <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005be8:	4b40      	ldr	r3, [pc, #256]	; (8005cec <HAL_RCC_OscConfig+0x74c>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d1f0      	bne.n	8005bd6 <HAL_RCC_OscConfig+0x636>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005bf4:	4b3d      	ldr	r3, [pc, #244]	; (8005cec <HAL_RCC_OscConfig+0x74c>)
 8005bf6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005bf8:	4b3e      	ldr	r3, [pc, #248]	; (8005cf4 <HAL_RCC_OscConfig+0x754>)
 8005bfa:	4013      	ands	r3, r2
 8005bfc:	687a      	ldr	r2, [r7, #4]
 8005bfe:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8005c00:	687a      	ldr	r2, [r7, #4]
 8005c02:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005c04:	0112      	lsls	r2, r2, #4
 8005c06:	430a      	orrs	r2, r1
 8005c08:	4938      	ldr	r1, [pc, #224]	; (8005cec <HAL_RCC_OscConfig+0x74c>)
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	628b      	str	r3, [r1, #40]	; 0x28
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c12:	3b01      	subs	r3, #1
 8005c14:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c1c:	3b01      	subs	r3, #1
 8005c1e:	025b      	lsls	r3, r3, #9
 8005c20:	b29b      	uxth	r3, r3
 8005c22:	431a      	orrs	r2, r3
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c28:	3b01      	subs	r3, #1
 8005c2a:	041b      	lsls	r3, r3, #16
 8005c2c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005c30:	431a      	orrs	r2, r3
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c36:	3b01      	subs	r3, #1
 8005c38:	061b      	lsls	r3, r3, #24
 8005c3a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005c3e:	492b      	ldr	r1, [pc, #172]	; (8005cec <HAL_RCC_OscConfig+0x74c>)
 8005c40:	4313      	orrs	r3, r2
 8005c42:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8005c44:	4b29      	ldr	r3, [pc, #164]	; (8005cec <HAL_RCC_OscConfig+0x74c>)
 8005c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c48:	4a28      	ldr	r2, [pc, #160]	; (8005cec <HAL_RCC_OscConfig+0x74c>)
 8005c4a:	f023 0301 	bic.w	r3, r3, #1
 8005c4e:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005c50:	4b26      	ldr	r3, [pc, #152]	; (8005cec <HAL_RCC_OscConfig+0x74c>)
 8005c52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c54:	4b28      	ldr	r3, [pc, #160]	; (8005cf8 <HAL_RCC_OscConfig+0x758>)
 8005c56:	4013      	ands	r3, r2
 8005c58:	687a      	ldr	r2, [r7, #4]
 8005c5a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005c5c:	00d2      	lsls	r2, r2, #3
 8005c5e:	4923      	ldr	r1, [pc, #140]	; (8005cec <HAL_RCC_OscConfig+0x74c>)
 8005c60:	4313      	orrs	r3, r2
 8005c62:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005c64:	4b21      	ldr	r3, [pc, #132]	; (8005cec <HAL_RCC_OscConfig+0x74c>)
 8005c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c68:	f023 020c 	bic.w	r2, r3, #12
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c70:	491e      	ldr	r1, [pc, #120]	; (8005cec <HAL_RCC_OscConfig+0x74c>)
 8005c72:	4313      	orrs	r3, r2
 8005c74:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005c76:	4b1d      	ldr	r3, [pc, #116]	; (8005cec <HAL_RCC_OscConfig+0x74c>)
 8005c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c7a:	f023 0202 	bic.w	r2, r3, #2
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c82:	491a      	ldr	r1, [pc, #104]	; (8005cec <HAL_RCC_OscConfig+0x74c>)
 8005c84:	4313      	orrs	r3, r2
 8005c86:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005c88:	4b18      	ldr	r3, [pc, #96]	; (8005cec <HAL_RCC_OscConfig+0x74c>)
 8005c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c8c:	4a17      	ldr	r2, [pc, #92]	; (8005cec <HAL_RCC_OscConfig+0x74c>)
 8005c8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c92:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c94:	4b15      	ldr	r3, [pc, #84]	; (8005cec <HAL_RCC_OscConfig+0x74c>)
 8005c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c98:	4a14      	ldr	r2, [pc, #80]	; (8005cec <HAL_RCC_OscConfig+0x74c>)
 8005c9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c9e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005ca0:	4b12      	ldr	r3, [pc, #72]	; (8005cec <HAL_RCC_OscConfig+0x74c>)
 8005ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ca4:	4a11      	ldr	r2, [pc, #68]	; (8005cec <HAL_RCC_OscConfig+0x74c>)
 8005ca6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005caa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8005cac:	4b0f      	ldr	r3, [pc, #60]	; (8005cec <HAL_RCC_OscConfig+0x74c>)
 8005cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cb0:	4a0e      	ldr	r2, [pc, #56]	; (8005cec <HAL_RCC_OscConfig+0x74c>)
 8005cb2:	f043 0301 	orr.w	r3, r3, #1
 8005cb6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005cb8:	4b0c      	ldr	r3, [pc, #48]	; (8005cec <HAL_RCC_OscConfig+0x74c>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4a0b      	ldr	r2, [pc, #44]	; (8005cec <HAL_RCC_OscConfig+0x74c>)
 8005cbe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005cc2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cc4:	f7fc ff8a 	bl	8002bdc <HAL_GetTick>
 8005cc8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005cca:	e008      	b.n	8005cde <HAL_RCC_OscConfig+0x73e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ccc:	f7fc ff86 	bl	8002bdc <HAL_GetTick>
 8005cd0:	4602      	mov	r2, r0
 8005cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd4:	1ad3      	subs	r3, r2, r3
 8005cd6:	2b02      	cmp	r3, #2
 8005cd8:	d901      	bls.n	8005cde <HAL_RCC_OscConfig+0x73e>
          {
            return HAL_TIMEOUT;
 8005cda:	2303      	movs	r3, #3
 8005cdc:	e067      	b.n	8005dae <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005cde:	4b03      	ldr	r3, [pc, #12]	; (8005cec <HAL_RCC_OscConfig+0x74c>)
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d0f0      	beq.n	8005ccc <HAL_RCC_OscConfig+0x72c>
 8005cea:	e05f      	b.n	8005dac <HAL_RCC_OscConfig+0x80c>
 8005cec:	58024400 	.word	0x58024400
 8005cf0:	58024800 	.word	0x58024800
 8005cf4:	fffffc0c 	.word	0xfffffc0c
 8005cf8:	ffff0007 	.word	0xffff0007
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005cfc:	4b2e      	ldr	r3, [pc, #184]	; (8005db8 <HAL_RCC_OscConfig+0x818>)
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4a2d      	ldr	r2, [pc, #180]	; (8005db8 <HAL_RCC_OscConfig+0x818>)
 8005d02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005d06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d08:	f7fc ff68 	bl	8002bdc <HAL_GetTick>
 8005d0c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005d0e:	e008      	b.n	8005d22 <HAL_RCC_OscConfig+0x782>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d10:	f7fc ff64 	bl	8002bdc <HAL_GetTick>
 8005d14:	4602      	mov	r2, r0
 8005d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d18:	1ad3      	subs	r3, r2, r3
 8005d1a:	2b02      	cmp	r3, #2
 8005d1c:	d901      	bls.n	8005d22 <HAL_RCC_OscConfig+0x782>
          {
            return HAL_TIMEOUT;
 8005d1e:	2303      	movs	r3, #3
 8005d20:	e045      	b.n	8005dae <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005d22:	4b25      	ldr	r3, [pc, #148]	; (8005db8 <HAL_RCC_OscConfig+0x818>)
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d1f0      	bne.n	8005d10 <HAL_RCC_OscConfig+0x770>
 8005d2e:	e03d      	b.n	8005dac <HAL_RCC_OscConfig+0x80c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005d30:	4b21      	ldr	r3, [pc, #132]	; (8005db8 <HAL_RCC_OscConfig+0x818>)
 8005d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d34:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005d36:	4b20      	ldr	r3, [pc, #128]	; (8005db8 <HAL_RCC_OscConfig+0x818>)
 8005d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d3a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d40:	2b01      	cmp	r3, #1
 8005d42:	d031      	beq.n	8005da8 <HAL_RCC_OscConfig+0x808>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d44:	693b      	ldr	r3, [r7, #16]
 8005d46:	f003 0203 	and.w	r2, r3, #3
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d4e:	429a      	cmp	r2, r3
 8005d50:	d12a      	bne.n	8005da8 <HAL_RCC_OscConfig+0x808>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005d52:	693b      	ldr	r3, [r7, #16]
 8005d54:	091b      	lsrs	r3, r3, #4
 8005d56:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d5e:	429a      	cmp	r2, r3
 8005d60:	d122      	bne.n	8005da8 <HAL_RCC_OscConfig+0x808>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d6c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005d6e:	429a      	cmp	r2, r3
 8005d70:	d11a      	bne.n	8005da8 <HAL_RCC_OscConfig+0x808>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	0a5b      	lsrs	r3, r3, #9
 8005d76:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d7e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005d80:	429a      	cmp	r2, r3
 8005d82:	d111      	bne.n	8005da8 <HAL_RCC_OscConfig+0x808>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	0c1b      	lsrs	r3, r3, #16
 8005d88:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d90:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005d92:	429a      	cmp	r2, r3
 8005d94:	d108      	bne.n	8005da8 <HAL_RCC_OscConfig+0x808>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	0e1b      	lsrs	r3, r3, #24
 8005d9a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005da2:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005da4:	429a      	cmp	r2, r3
 8005da6:	d001      	beq.n	8005dac <HAL_RCC_OscConfig+0x80c>
      {
        return HAL_ERROR;
 8005da8:	2301      	movs	r3, #1
 8005daa:	e000      	b.n	8005dae <HAL_RCC_OscConfig+0x80e>
      }
    }
  }
  return HAL_OK;
 8005dac:	2300      	movs	r3, #0
}
 8005dae:	4618      	mov	r0, r3
 8005db0:	3730      	adds	r7, #48	; 0x30
 8005db2:	46bd      	mov	sp, r7
 8005db4:	bd80      	pop	{r7, pc}
 8005db6:	bf00      	nop
 8005db8:	58024400 	.word	0x58024400

08005dbc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b086      	sub	sp, #24
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
 8005dc4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d101      	bne.n	8005dd0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005dcc:	2301      	movs	r3, #1
 8005dce:	e19c      	b.n	800610a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005dd0:	4b8a      	ldr	r3, [pc, #552]	; (8005ffc <HAL_RCC_ClockConfig+0x240>)
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f003 030f 	and.w	r3, r3, #15
 8005dd8:	683a      	ldr	r2, [r7, #0]
 8005dda:	429a      	cmp	r2, r3
 8005ddc:	d910      	bls.n	8005e00 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005dde:	4b87      	ldr	r3, [pc, #540]	; (8005ffc <HAL_RCC_ClockConfig+0x240>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f023 020f 	bic.w	r2, r3, #15
 8005de6:	4985      	ldr	r1, [pc, #532]	; (8005ffc <HAL_RCC_ClockConfig+0x240>)
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	4313      	orrs	r3, r2
 8005dec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005dee:	4b83      	ldr	r3, [pc, #524]	; (8005ffc <HAL_RCC_ClockConfig+0x240>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f003 030f 	and.w	r3, r3, #15
 8005df6:	683a      	ldr	r2, [r7, #0]
 8005df8:	429a      	cmp	r2, r3
 8005dfa:	d001      	beq.n	8005e00 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	e184      	b.n	800610a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f003 0304 	and.w	r3, r3, #4
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d010      	beq.n	8005e2e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	691a      	ldr	r2, [r3, #16]
 8005e10:	4b7b      	ldr	r3, [pc, #492]	; (8006000 <HAL_RCC_ClockConfig+0x244>)
 8005e12:	699b      	ldr	r3, [r3, #24]
 8005e14:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005e18:	429a      	cmp	r2, r3
 8005e1a:	d908      	bls.n	8005e2e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005e1c:	4b78      	ldr	r3, [pc, #480]	; (8006000 <HAL_RCC_ClockConfig+0x244>)
 8005e1e:	699b      	ldr	r3, [r3, #24]
 8005e20:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	691b      	ldr	r3, [r3, #16]
 8005e28:	4975      	ldr	r1, [pc, #468]	; (8006000 <HAL_RCC_ClockConfig+0x244>)
 8005e2a:	4313      	orrs	r3, r2
 8005e2c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f003 0308 	and.w	r3, r3, #8
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d010      	beq.n	8005e5c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	695a      	ldr	r2, [r3, #20]
 8005e3e:	4b70      	ldr	r3, [pc, #448]	; (8006000 <HAL_RCC_ClockConfig+0x244>)
 8005e40:	69db      	ldr	r3, [r3, #28]
 8005e42:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005e46:	429a      	cmp	r2, r3
 8005e48:	d908      	bls.n	8005e5c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005e4a:	4b6d      	ldr	r3, [pc, #436]	; (8006000 <HAL_RCC_ClockConfig+0x244>)
 8005e4c:	69db      	ldr	r3, [r3, #28]
 8005e4e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	695b      	ldr	r3, [r3, #20]
 8005e56:	496a      	ldr	r1, [pc, #424]	; (8006000 <HAL_RCC_ClockConfig+0x244>)
 8005e58:	4313      	orrs	r3, r2
 8005e5a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f003 0310 	and.w	r3, r3, #16
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d010      	beq.n	8005e8a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	699a      	ldr	r2, [r3, #24]
 8005e6c:	4b64      	ldr	r3, [pc, #400]	; (8006000 <HAL_RCC_ClockConfig+0x244>)
 8005e6e:	69db      	ldr	r3, [r3, #28]
 8005e70:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005e74:	429a      	cmp	r2, r3
 8005e76:	d908      	bls.n	8005e8a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005e78:	4b61      	ldr	r3, [pc, #388]	; (8006000 <HAL_RCC_ClockConfig+0x244>)
 8005e7a:	69db      	ldr	r3, [r3, #28]
 8005e7c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	699b      	ldr	r3, [r3, #24]
 8005e84:	495e      	ldr	r1, [pc, #376]	; (8006000 <HAL_RCC_ClockConfig+0x244>)
 8005e86:	4313      	orrs	r3, r2
 8005e88:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f003 0320 	and.w	r3, r3, #32
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d010      	beq.n	8005eb8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	69da      	ldr	r2, [r3, #28]
 8005e9a:	4b59      	ldr	r3, [pc, #356]	; (8006000 <HAL_RCC_ClockConfig+0x244>)
 8005e9c:	6a1b      	ldr	r3, [r3, #32]
 8005e9e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005ea2:	429a      	cmp	r2, r3
 8005ea4:	d908      	bls.n	8005eb8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005ea6:	4b56      	ldr	r3, [pc, #344]	; (8006000 <HAL_RCC_ClockConfig+0x244>)
 8005ea8:	6a1b      	ldr	r3, [r3, #32]
 8005eaa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	69db      	ldr	r3, [r3, #28]
 8005eb2:	4953      	ldr	r1, [pc, #332]	; (8006000 <HAL_RCC_ClockConfig+0x244>)
 8005eb4:	4313      	orrs	r3, r2
 8005eb6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f003 0302 	and.w	r3, r3, #2
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d010      	beq.n	8005ee6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	68da      	ldr	r2, [r3, #12]
 8005ec8:	4b4d      	ldr	r3, [pc, #308]	; (8006000 <HAL_RCC_ClockConfig+0x244>)
 8005eca:	699b      	ldr	r3, [r3, #24]
 8005ecc:	f003 030f 	and.w	r3, r3, #15
 8005ed0:	429a      	cmp	r2, r3
 8005ed2:	d908      	bls.n	8005ee6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ed4:	4b4a      	ldr	r3, [pc, #296]	; (8006000 <HAL_RCC_ClockConfig+0x244>)
 8005ed6:	699b      	ldr	r3, [r3, #24]
 8005ed8:	f023 020f 	bic.w	r2, r3, #15
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	68db      	ldr	r3, [r3, #12]
 8005ee0:	4947      	ldr	r1, [pc, #284]	; (8006000 <HAL_RCC_ClockConfig+0x244>)
 8005ee2:	4313      	orrs	r3, r2
 8005ee4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f003 0301 	and.w	r3, r3, #1
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d055      	beq.n	8005f9e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005ef2:	4b43      	ldr	r3, [pc, #268]	; (8006000 <HAL_RCC_ClockConfig+0x244>)
 8005ef4:	699b      	ldr	r3, [r3, #24]
 8005ef6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	689b      	ldr	r3, [r3, #8]
 8005efe:	4940      	ldr	r1, [pc, #256]	; (8006000 <HAL_RCC_ClockConfig+0x244>)
 8005f00:	4313      	orrs	r3, r2
 8005f02:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	685b      	ldr	r3, [r3, #4]
 8005f08:	2b02      	cmp	r3, #2
 8005f0a:	d107      	bne.n	8005f1c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005f0c:	4b3c      	ldr	r3, [pc, #240]	; (8006000 <HAL_RCC_ClockConfig+0x244>)
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d121      	bne.n	8005f5c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005f18:	2301      	movs	r3, #1
 8005f1a:	e0f6      	b.n	800610a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	685b      	ldr	r3, [r3, #4]
 8005f20:	2b03      	cmp	r3, #3
 8005f22:	d107      	bne.n	8005f34 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005f24:	4b36      	ldr	r3, [pc, #216]	; (8006000 <HAL_RCC_ClockConfig+0x244>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d115      	bne.n	8005f5c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005f30:	2301      	movs	r3, #1
 8005f32:	e0ea      	b.n	800610a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	685b      	ldr	r3, [r3, #4]
 8005f38:	2b01      	cmp	r3, #1
 8005f3a:	d107      	bne.n	8005f4c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005f3c:	4b30      	ldr	r3, [pc, #192]	; (8006000 <HAL_RCC_ClockConfig+0x244>)
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d109      	bne.n	8005f5c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005f48:	2301      	movs	r3, #1
 8005f4a:	e0de      	b.n	800610a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005f4c:	4b2c      	ldr	r3, [pc, #176]	; (8006000 <HAL_RCC_ClockConfig+0x244>)
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f003 0304 	and.w	r3, r3, #4
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d101      	bne.n	8005f5c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005f58:	2301      	movs	r3, #1
 8005f5a:	e0d6      	b.n	800610a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005f5c:	4b28      	ldr	r3, [pc, #160]	; (8006000 <HAL_RCC_ClockConfig+0x244>)
 8005f5e:	691b      	ldr	r3, [r3, #16]
 8005f60:	f023 0207 	bic.w	r2, r3, #7
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	685b      	ldr	r3, [r3, #4]
 8005f68:	4925      	ldr	r1, [pc, #148]	; (8006000 <HAL_RCC_ClockConfig+0x244>)
 8005f6a:	4313      	orrs	r3, r2
 8005f6c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f6e:	f7fc fe35 	bl	8002bdc <HAL_GetTick>
 8005f72:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f74:	e00a      	b.n	8005f8c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f76:	f7fc fe31 	bl	8002bdc <HAL_GetTick>
 8005f7a:	4602      	mov	r2, r0
 8005f7c:	697b      	ldr	r3, [r7, #20]
 8005f7e:	1ad3      	subs	r3, r2, r3
 8005f80:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d901      	bls.n	8005f8c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8005f88:	2303      	movs	r3, #3
 8005f8a:	e0be      	b.n	800610a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f8c:	4b1c      	ldr	r3, [pc, #112]	; (8006000 <HAL_RCC_ClockConfig+0x244>)
 8005f8e:	691b      	ldr	r3, [r3, #16]
 8005f90:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	685b      	ldr	r3, [r3, #4]
 8005f98:	00db      	lsls	r3, r3, #3
 8005f9a:	429a      	cmp	r2, r3
 8005f9c:	d1eb      	bne.n	8005f76 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f003 0302 	and.w	r3, r3, #2
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d010      	beq.n	8005fcc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	68da      	ldr	r2, [r3, #12]
 8005fae:	4b14      	ldr	r3, [pc, #80]	; (8006000 <HAL_RCC_ClockConfig+0x244>)
 8005fb0:	699b      	ldr	r3, [r3, #24]
 8005fb2:	f003 030f 	and.w	r3, r3, #15
 8005fb6:	429a      	cmp	r2, r3
 8005fb8:	d208      	bcs.n	8005fcc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005fba:	4b11      	ldr	r3, [pc, #68]	; (8006000 <HAL_RCC_ClockConfig+0x244>)
 8005fbc:	699b      	ldr	r3, [r3, #24]
 8005fbe:	f023 020f 	bic.w	r2, r3, #15
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	68db      	ldr	r3, [r3, #12]
 8005fc6:	490e      	ldr	r1, [pc, #56]	; (8006000 <HAL_RCC_ClockConfig+0x244>)
 8005fc8:	4313      	orrs	r3, r2
 8005fca:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005fcc:	4b0b      	ldr	r3, [pc, #44]	; (8005ffc <HAL_RCC_ClockConfig+0x240>)
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f003 030f 	and.w	r3, r3, #15
 8005fd4:	683a      	ldr	r2, [r7, #0]
 8005fd6:	429a      	cmp	r2, r3
 8005fd8:	d214      	bcs.n	8006004 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005fda:	4b08      	ldr	r3, [pc, #32]	; (8005ffc <HAL_RCC_ClockConfig+0x240>)
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f023 020f 	bic.w	r2, r3, #15
 8005fe2:	4906      	ldr	r1, [pc, #24]	; (8005ffc <HAL_RCC_ClockConfig+0x240>)
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	4313      	orrs	r3, r2
 8005fe8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005fea:	4b04      	ldr	r3, [pc, #16]	; (8005ffc <HAL_RCC_ClockConfig+0x240>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f003 030f 	and.w	r3, r3, #15
 8005ff2:	683a      	ldr	r2, [r7, #0]
 8005ff4:	429a      	cmp	r2, r3
 8005ff6:	d005      	beq.n	8006004 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	e086      	b.n	800610a <HAL_RCC_ClockConfig+0x34e>
 8005ffc:	52002000 	.word	0x52002000
 8006000:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f003 0304 	and.w	r3, r3, #4
 800600c:	2b00      	cmp	r3, #0
 800600e:	d010      	beq.n	8006032 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	691a      	ldr	r2, [r3, #16]
 8006014:	4b3f      	ldr	r3, [pc, #252]	; (8006114 <HAL_RCC_ClockConfig+0x358>)
 8006016:	699b      	ldr	r3, [r3, #24]
 8006018:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800601c:	429a      	cmp	r2, r3
 800601e:	d208      	bcs.n	8006032 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006020:	4b3c      	ldr	r3, [pc, #240]	; (8006114 <HAL_RCC_ClockConfig+0x358>)
 8006022:	699b      	ldr	r3, [r3, #24]
 8006024:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	691b      	ldr	r3, [r3, #16]
 800602c:	4939      	ldr	r1, [pc, #228]	; (8006114 <HAL_RCC_ClockConfig+0x358>)
 800602e:	4313      	orrs	r3, r2
 8006030:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f003 0308 	and.w	r3, r3, #8
 800603a:	2b00      	cmp	r3, #0
 800603c:	d010      	beq.n	8006060 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	695a      	ldr	r2, [r3, #20]
 8006042:	4b34      	ldr	r3, [pc, #208]	; (8006114 <HAL_RCC_ClockConfig+0x358>)
 8006044:	69db      	ldr	r3, [r3, #28]
 8006046:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800604a:	429a      	cmp	r2, r3
 800604c:	d208      	bcs.n	8006060 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800604e:	4b31      	ldr	r3, [pc, #196]	; (8006114 <HAL_RCC_ClockConfig+0x358>)
 8006050:	69db      	ldr	r3, [r3, #28]
 8006052:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	695b      	ldr	r3, [r3, #20]
 800605a:	492e      	ldr	r1, [pc, #184]	; (8006114 <HAL_RCC_ClockConfig+0x358>)
 800605c:	4313      	orrs	r3, r2
 800605e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f003 0310 	and.w	r3, r3, #16
 8006068:	2b00      	cmp	r3, #0
 800606a:	d010      	beq.n	800608e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	699a      	ldr	r2, [r3, #24]
 8006070:	4b28      	ldr	r3, [pc, #160]	; (8006114 <HAL_RCC_ClockConfig+0x358>)
 8006072:	69db      	ldr	r3, [r3, #28]
 8006074:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006078:	429a      	cmp	r2, r3
 800607a:	d208      	bcs.n	800608e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800607c:	4b25      	ldr	r3, [pc, #148]	; (8006114 <HAL_RCC_ClockConfig+0x358>)
 800607e:	69db      	ldr	r3, [r3, #28]
 8006080:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	699b      	ldr	r3, [r3, #24]
 8006088:	4922      	ldr	r1, [pc, #136]	; (8006114 <HAL_RCC_ClockConfig+0x358>)
 800608a:	4313      	orrs	r3, r2
 800608c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f003 0320 	and.w	r3, r3, #32
 8006096:	2b00      	cmp	r3, #0
 8006098:	d010      	beq.n	80060bc <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	69da      	ldr	r2, [r3, #28]
 800609e:	4b1d      	ldr	r3, [pc, #116]	; (8006114 <HAL_RCC_ClockConfig+0x358>)
 80060a0:	6a1b      	ldr	r3, [r3, #32]
 80060a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80060a6:	429a      	cmp	r2, r3
 80060a8:	d208      	bcs.n	80060bc <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80060aa:	4b1a      	ldr	r3, [pc, #104]	; (8006114 <HAL_RCC_ClockConfig+0x358>)
 80060ac:	6a1b      	ldr	r3, [r3, #32]
 80060ae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	69db      	ldr	r3, [r3, #28]
 80060b6:	4917      	ldr	r1, [pc, #92]	; (8006114 <HAL_RCC_ClockConfig+0x358>)
 80060b8:	4313      	orrs	r3, r2
 80060ba:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80060bc:	f000 f834 	bl	8006128 <HAL_RCC_GetSysClockFreq>
 80060c0:	4602      	mov	r2, r0
 80060c2:	4b14      	ldr	r3, [pc, #80]	; (8006114 <HAL_RCC_ClockConfig+0x358>)
 80060c4:	699b      	ldr	r3, [r3, #24]
 80060c6:	0a1b      	lsrs	r3, r3, #8
 80060c8:	f003 030f 	and.w	r3, r3, #15
 80060cc:	4912      	ldr	r1, [pc, #72]	; (8006118 <HAL_RCC_ClockConfig+0x35c>)
 80060ce:	5ccb      	ldrb	r3, [r1, r3]
 80060d0:	f003 031f 	and.w	r3, r3, #31
 80060d4:	fa22 f303 	lsr.w	r3, r2, r3
 80060d8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80060da:	4b0e      	ldr	r3, [pc, #56]	; (8006114 <HAL_RCC_ClockConfig+0x358>)
 80060dc:	699b      	ldr	r3, [r3, #24]
 80060de:	f003 030f 	and.w	r3, r3, #15
 80060e2:	4a0d      	ldr	r2, [pc, #52]	; (8006118 <HAL_RCC_ClockConfig+0x35c>)
 80060e4:	5cd3      	ldrb	r3, [r2, r3]
 80060e6:	f003 031f 	and.w	r3, r3, #31
 80060ea:	693a      	ldr	r2, [r7, #16]
 80060ec:	fa22 f303 	lsr.w	r3, r2, r3
 80060f0:	4a0a      	ldr	r2, [pc, #40]	; (800611c <HAL_RCC_ClockConfig+0x360>)
 80060f2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80060f4:	4a0a      	ldr	r2, [pc, #40]	; (8006120 <HAL_RCC_ClockConfig+0x364>)
 80060f6:	693b      	ldr	r3, [r7, #16]
 80060f8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80060fa:	4b0a      	ldr	r3, [pc, #40]	; (8006124 <HAL_RCC_ClockConfig+0x368>)
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4618      	mov	r0, r3
 8006100:	f7fc f98c 	bl	800241c <HAL_InitTick>
 8006104:	4603      	mov	r3, r0
 8006106:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006108:	7bfb      	ldrb	r3, [r7, #15]
}
 800610a:	4618      	mov	r0, r3
 800610c:	3718      	adds	r7, #24
 800610e:	46bd      	mov	sp, r7
 8006110:	bd80      	pop	{r7, pc}
 8006112:	bf00      	nop
 8006114:	58024400 	.word	0x58024400
 8006118:	08026ed8 	.word	0x08026ed8
 800611c:	240002d0 	.word	0x240002d0
 8006120:	240002cc 	.word	0x240002cc
 8006124:	240002d4 	.word	0x240002d4

08006128 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006128:	b480      	push	{r7}
 800612a:	b089      	sub	sp, #36	; 0x24
 800612c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800612e:	4bb3      	ldr	r3, [pc, #716]	; (80063fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006130:	691b      	ldr	r3, [r3, #16]
 8006132:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006136:	2b18      	cmp	r3, #24
 8006138:	f200 8155 	bhi.w	80063e6 <HAL_RCC_GetSysClockFreq+0x2be>
 800613c:	a201      	add	r2, pc, #4	; (adr r2, 8006144 <HAL_RCC_GetSysClockFreq+0x1c>)
 800613e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006142:	bf00      	nop
 8006144:	080061a9 	.word	0x080061a9
 8006148:	080063e7 	.word	0x080063e7
 800614c:	080063e7 	.word	0x080063e7
 8006150:	080063e7 	.word	0x080063e7
 8006154:	080063e7 	.word	0x080063e7
 8006158:	080063e7 	.word	0x080063e7
 800615c:	080063e7 	.word	0x080063e7
 8006160:	080063e7 	.word	0x080063e7
 8006164:	080061cf 	.word	0x080061cf
 8006168:	080063e7 	.word	0x080063e7
 800616c:	080063e7 	.word	0x080063e7
 8006170:	080063e7 	.word	0x080063e7
 8006174:	080063e7 	.word	0x080063e7
 8006178:	080063e7 	.word	0x080063e7
 800617c:	080063e7 	.word	0x080063e7
 8006180:	080063e7 	.word	0x080063e7
 8006184:	080061d5 	.word	0x080061d5
 8006188:	080063e7 	.word	0x080063e7
 800618c:	080063e7 	.word	0x080063e7
 8006190:	080063e7 	.word	0x080063e7
 8006194:	080063e7 	.word	0x080063e7
 8006198:	080063e7 	.word	0x080063e7
 800619c:	080063e7 	.word	0x080063e7
 80061a0:	080063e7 	.word	0x080063e7
 80061a4:	080061db 	.word	0x080061db
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80061a8:	4b94      	ldr	r3, [pc, #592]	; (80063fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f003 0320 	and.w	r3, r3, #32
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d009      	beq.n	80061c8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80061b4:	4b91      	ldr	r3, [pc, #580]	; (80063fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	08db      	lsrs	r3, r3, #3
 80061ba:	f003 0303 	and.w	r3, r3, #3
 80061be:	4a90      	ldr	r2, [pc, #576]	; (8006400 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80061c0:	fa22 f303 	lsr.w	r3, r2, r3
 80061c4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80061c6:	e111      	b.n	80063ec <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80061c8:	4b8d      	ldr	r3, [pc, #564]	; (8006400 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80061ca:	61bb      	str	r3, [r7, #24]
    break;
 80061cc:	e10e      	b.n	80063ec <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80061ce:	4b8d      	ldr	r3, [pc, #564]	; (8006404 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80061d0:	61bb      	str	r3, [r7, #24]
    break;
 80061d2:	e10b      	b.n	80063ec <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80061d4:	4b8c      	ldr	r3, [pc, #560]	; (8006408 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80061d6:	61bb      	str	r3, [r7, #24]
    break;
 80061d8:	e108      	b.n	80063ec <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80061da:	4b88      	ldr	r3, [pc, #544]	; (80063fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80061dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061de:	f003 0303 	and.w	r3, r3, #3
 80061e2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80061e4:	4b85      	ldr	r3, [pc, #532]	; (80063fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80061e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061e8:	091b      	lsrs	r3, r3, #4
 80061ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80061ee:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80061f0:	4b82      	ldr	r3, [pc, #520]	; (80063fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80061f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061f4:	f003 0301 	and.w	r3, r3, #1
 80061f8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80061fa:	4b80      	ldr	r3, [pc, #512]	; (80063fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80061fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061fe:	08db      	lsrs	r3, r3, #3
 8006200:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006204:	68fa      	ldr	r2, [r7, #12]
 8006206:	fb02 f303 	mul.w	r3, r2, r3
 800620a:	ee07 3a90 	vmov	s15, r3
 800620e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006212:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8006216:	693b      	ldr	r3, [r7, #16]
 8006218:	2b00      	cmp	r3, #0
 800621a:	f000 80e1 	beq.w	80063e0 <HAL_RCC_GetSysClockFreq+0x2b8>
 800621e:	697b      	ldr	r3, [r7, #20]
 8006220:	2b02      	cmp	r3, #2
 8006222:	f000 8083 	beq.w	800632c <HAL_RCC_GetSysClockFreq+0x204>
 8006226:	697b      	ldr	r3, [r7, #20]
 8006228:	2b02      	cmp	r3, #2
 800622a:	f200 80a1 	bhi.w	8006370 <HAL_RCC_GetSysClockFreq+0x248>
 800622e:	697b      	ldr	r3, [r7, #20]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d003      	beq.n	800623c <HAL_RCC_GetSysClockFreq+0x114>
 8006234:	697b      	ldr	r3, [r7, #20]
 8006236:	2b01      	cmp	r3, #1
 8006238:	d056      	beq.n	80062e8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800623a:	e099      	b.n	8006370 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800623c:	4b6f      	ldr	r3, [pc, #444]	; (80063fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f003 0320 	and.w	r3, r3, #32
 8006244:	2b00      	cmp	r3, #0
 8006246:	d02d      	beq.n	80062a4 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006248:	4b6c      	ldr	r3, [pc, #432]	; (80063fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	08db      	lsrs	r3, r3, #3
 800624e:	f003 0303 	and.w	r3, r3, #3
 8006252:	4a6b      	ldr	r2, [pc, #428]	; (8006400 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006254:	fa22 f303 	lsr.w	r3, r2, r3
 8006258:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	ee07 3a90 	vmov	s15, r3
 8006260:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006264:	693b      	ldr	r3, [r7, #16]
 8006266:	ee07 3a90 	vmov	s15, r3
 800626a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800626e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006272:	4b62      	ldr	r3, [pc, #392]	; (80063fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006276:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800627a:	ee07 3a90 	vmov	s15, r3
 800627e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006282:	ed97 6a02 	vldr	s12, [r7, #8]
 8006286:	eddf 5a61 	vldr	s11, [pc, #388]	; 800640c <HAL_RCC_GetSysClockFreq+0x2e4>
 800628a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800628e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006292:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006296:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800629a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800629e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80062a2:	e087      	b.n	80063b4 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80062a4:	693b      	ldr	r3, [r7, #16]
 80062a6:	ee07 3a90 	vmov	s15, r3
 80062aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062ae:	eddf 6a58 	vldr	s13, [pc, #352]	; 8006410 <HAL_RCC_GetSysClockFreq+0x2e8>
 80062b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062b6:	4b51      	ldr	r3, [pc, #324]	; (80063fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80062b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062be:	ee07 3a90 	vmov	s15, r3
 80062c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80062ca:	eddf 5a50 	vldr	s11, [pc, #320]	; 800640c <HAL_RCC_GetSysClockFreq+0x2e4>
 80062ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80062d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80062d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80062da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80062de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80062e6:	e065      	b.n	80063b4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80062e8:	693b      	ldr	r3, [r7, #16]
 80062ea:	ee07 3a90 	vmov	s15, r3
 80062ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062f2:	eddf 6a48 	vldr	s13, [pc, #288]	; 8006414 <HAL_RCC_GetSysClockFreq+0x2ec>
 80062f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062fa:	4b40      	ldr	r3, [pc, #256]	; (80063fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80062fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006302:	ee07 3a90 	vmov	s15, r3
 8006306:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800630a:	ed97 6a02 	vldr	s12, [r7, #8]
 800630e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800640c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006312:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006316:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800631a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800631e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006322:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006326:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800632a:	e043      	b.n	80063b4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800632c:	693b      	ldr	r3, [r7, #16]
 800632e:	ee07 3a90 	vmov	s15, r3
 8006332:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006336:	eddf 6a38 	vldr	s13, [pc, #224]	; 8006418 <HAL_RCC_GetSysClockFreq+0x2f0>
 800633a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800633e:	4b2f      	ldr	r3, [pc, #188]	; (80063fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006342:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006346:	ee07 3a90 	vmov	s15, r3
 800634a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800634e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006352:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800640c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006356:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800635a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800635e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006362:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006366:	ee67 7a27 	vmul.f32	s15, s14, s15
 800636a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800636e:	e021      	b.n	80063b4 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006370:	693b      	ldr	r3, [r7, #16]
 8006372:	ee07 3a90 	vmov	s15, r3
 8006376:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800637a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8006414 <HAL_RCC_GetSysClockFreq+0x2ec>
 800637e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006382:	4b1e      	ldr	r3, [pc, #120]	; (80063fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006386:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800638a:	ee07 3a90 	vmov	s15, r3
 800638e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006392:	ed97 6a02 	vldr	s12, [r7, #8]
 8006396:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800640c <HAL_RCC_GetSysClockFreq+0x2e4>
 800639a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800639e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80063a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80063a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80063b2:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80063b4:	4b11      	ldr	r3, [pc, #68]	; (80063fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80063b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063b8:	0a5b      	lsrs	r3, r3, #9
 80063ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80063be:	3301      	adds	r3, #1
 80063c0:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	ee07 3a90 	vmov	s15, r3
 80063c8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80063cc:	edd7 6a07 	vldr	s13, [r7, #28]
 80063d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80063d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80063d8:	ee17 3a90 	vmov	r3, s15
 80063dc:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80063de:	e005      	b.n	80063ec <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80063e0:	2300      	movs	r3, #0
 80063e2:	61bb      	str	r3, [r7, #24]
    break;
 80063e4:	e002      	b.n	80063ec <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80063e6:	4b07      	ldr	r3, [pc, #28]	; (8006404 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80063e8:	61bb      	str	r3, [r7, #24]
    break;
 80063ea:	bf00      	nop
  }

  return sysclockfreq;
 80063ec:	69bb      	ldr	r3, [r7, #24]
}
 80063ee:	4618      	mov	r0, r3
 80063f0:	3724      	adds	r7, #36	; 0x24
 80063f2:	46bd      	mov	sp, r7
 80063f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f8:	4770      	bx	lr
 80063fa:	bf00      	nop
 80063fc:	58024400 	.word	0x58024400
 8006400:	03d09000 	.word	0x03d09000
 8006404:	003d0900 	.word	0x003d0900
 8006408:	007a1200 	.word	0x007a1200
 800640c:	46000000 	.word	0x46000000
 8006410:	4c742400 	.word	0x4c742400
 8006414:	4a742400 	.word	0x4a742400
 8006418:	4af42400 	.word	0x4af42400

0800641c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b082      	sub	sp, #8
 8006420:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006422:	f7ff fe81 	bl	8006128 <HAL_RCC_GetSysClockFreq>
 8006426:	4602      	mov	r2, r0
 8006428:	4b10      	ldr	r3, [pc, #64]	; (800646c <HAL_RCC_GetHCLKFreq+0x50>)
 800642a:	699b      	ldr	r3, [r3, #24]
 800642c:	0a1b      	lsrs	r3, r3, #8
 800642e:	f003 030f 	and.w	r3, r3, #15
 8006432:	490f      	ldr	r1, [pc, #60]	; (8006470 <HAL_RCC_GetHCLKFreq+0x54>)
 8006434:	5ccb      	ldrb	r3, [r1, r3]
 8006436:	f003 031f 	and.w	r3, r3, #31
 800643a:	fa22 f303 	lsr.w	r3, r2, r3
 800643e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006440:	4b0a      	ldr	r3, [pc, #40]	; (800646c <HAL_RCC_GetHCLKFreq+0x50>)
 8006442:	699b      	ldr	r3, [r3, #24]
 8006444:	f003 030f 	and.w	r3, r3, #15
 8006448:	4a09      	ldr	r2, [pc, #36]	; (8006470 <HAL_RCC_GetHCLKFreq+0x54>)
 800644a:	5cd3      	ldrb	r3, [r2, r3]
 800644c:	f003 031f 	and.w	r3, r3, #31
 8006450:	687a      	ldr	r2, [r7, #4]
 8006452:	fa22 f303 	lsr.w	r3, r2, r3
 8006456:	4a07      	ldr	r2, [pc, #28]	; (8006474 <HAL_RCC_GetHCLKFreq+0x58>)
 8006458:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800645a:	4a07      	ldr	r2, [pc, #28]	; (8006478 <HAL_RCC_GetHCLKFreq+0x5c>)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006460:	4b04      	ldr	r3, [pc, #16]	; (8006474 <HAL_RCC_GetHCLKFreq+0x58>)
 8006462:	681b      	ldr	r3, [r3, #0]
}
 8006464:	4618      	mov	r0, r3
 8006466:	3708      	adds	r7, #8
 8006468:	46bd      	mov	sp, r7
 800646a:	bd80      	pop	{r7, pc}
 800646c:	58024400 	.word	0x58024400
 8006470:	08026ed8 	.word	0x08026ed8
 8006474:	240002d0 	.word	0x240002d0
 8006478:	240002cc 	.word	0x240002cc

0800647c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006480:	f7ff ffcc 	bl	800641c <HAL_RCC_GetHCLKFreq>
 8006484:	4602      	mov	r2, r0
 8006486:	4b06      	ldr	r3, [pc, #24]	; (80064a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006488:	69db      	ldr	r3, [r3, #28]
 800648a:	091b      	lsrs	r3, r3, #4
 800648c:	f003 0307 	and.w	r3, r3, #7
 8006490:	4904      	ldr	r1, [pc, #16]	; (80064a4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006492:	5ccb      	ldrb	r3, [r1, r3]
 8006494:	f003 031f 	and.w	r3, r3, #31
 8006498:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800649c:	4618      	mov	r0, r3
 800649e:	bd80      	pop	{r7, pc}
 80064a0:	58024400 	.word	0x58024400
 80064a4:	08026ed8 	.word	0x08026ed8

080064a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80064ac:	f7ff ffb6 	bl	800641c <HAL_RCC_GetHCLKFreq>
 80064b0:	4602      	mov	r2, r0
 80064b2:	4b06      	ldr	r3, [pc, #24]	; (80064cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80064b4:	69db      	ldr	r3, [r3, #28]
 80064b6:	0a1b      	lsrs	r3, r3, #8
 80064b8:	f003 0307 	and.w	r3, r3, #7
 80064bc:	4904      	ldr	r1, [pc, #16]	; (80064d0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80064be:	5ccb      	ldrb	r3, [r1, r3]
 80064c0:	f003 031f 	and.w	r3, r3, #31
 80064c4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80064c8:	4618      	mov	r0, r3
 80064ca:	bd80      	pop	{r7, pc}
 80064cc:	58024400 	.word	0x58024400
 80064d0:	08026ed8 	.word	0x08026ed8

080064d4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80064d4:	b480      	push	{r7}
 80064d6:	b083      	sub	sp, #12
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
 80064dc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	223f      	movs	r2, #63	; 0x3f
 80064e2:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80064e4:	4b1a      	ldr	r3, [pc, #104]	; (8006550 <HAL_RCC_GetClockConfig+0x7c>)
 80064e6:	691b      	ldr	r3, [r3, #16]
 80064e8:	f003 0207 	and.w	r2, r3, #7
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80064f0:	4b17      	ldr	r3, [pc, #92]	; (8006550 <HAL_RCC_GetClockConfig+0x7c>)
 80064f2:	699b      	ldr	r3, [r3, #24]
 80064f4:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80064fc:	4b14      	ldr	r3, [pc, #80]	; (8006550 <HAL_RCC_GetClockConfig+0x7c>)
 80064fe:	699b      	ldr	r3, [r3, #24]
 8006500:	f003 020f 	and.w	r2, r3, #15
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8006508:	4b11      	ldr	r3, [pc, #68]	; (8006550 <HAL_RCC_GetClockConfig+0x7c>)
 800650a:	699b      	ldr	r3, [r3, #24]
 800650c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8006514:	4b0e      	ldr	r3, [pc, #56]	; (8006550 <HAL_RCC_GetClockConfig+0x7c>)
 8006516:	69db      	ldr	r3, [r3, #28]
 8006518:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8006520:	4b0b      	ldr	r3, [pc, #44]	; (8006550 <HAL_RCC_GetClockConfig+0x7c>)
 8006522:	69db      	ldr	r3, [r3, #28]
 8006524:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800652c:	4b08      	ldr	r3, [pc, #32]	; (8006550 <HAL_RCC_GetClockConfig+0x7c>)
 800652e:	6a1b      	ldr	r3, [r3, #32]
 8006530:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006538:	4b06      	ldr	r3, [pc, #24]	; (8006554 <HAL_RCC_GetClockConfig+0x80>)
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f003 020f 	and.w	r2, r3, #15
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	601a      	str	r2, [r3, #0]
}
 8006544:	bf00      	nop
 8006546:	370c      	adds	r7, #12
 8006548:	46bd      	mov	sp, r7
 800654a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654e:	4770      	bx	lr
 8006550:	58024400 	.word	0x58024400
 8006554:	52002000 	.word	0x52002000

08006558 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b086      	sub	sp, #24
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006560:	2300      	movs	r3, #0
 8006562:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006564:	2300      	movs	r3, #0
 8006566:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006570:	2b00      	cmp	r3, #0
 8006572:	d03f      	beq.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006578:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800657c:	d02a      	beq.n	80065d4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800657e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006582:	d824      	bhi.n	80065ce <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006584:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006588:	d018      	beq.n	80065bc <HAL_RCCEx_PeriphCLKConfig+0x64>
 800658a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800658e:	d81e      	bhi.n	80065ce <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006590:	2b00      	cmp	r3, #0
 8006592:	d003      	beq.n	800659c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006594:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006598:	d007      	beq.n	80065aa <HAL_RCCEx_PeriphCLKConfig+0x52>
 800659a:	e018      	b.n	80065ce <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800659c:	4ba3      	ldr	r3, [pc, #652]	; (800682c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800659e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065a0:	4aa2      	ldr	r2, [pc, #648]	; (800682c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80065a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80065a6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80065a8:	e015      	b.n	80065d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	3304      	adds	r3, #4
 80065ae:	2102      	movs	r1, #2
 80065b0:	4618      	mov	r0, r3
 80065b2:	f001 f9d5 	bl	8007960 <RCCEx_PLL2_Config>
 80065b6:	4603      	mov	r3, r0
 80065b8:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80065ba:	e00c      	b.n	80065d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	3324      	adds	r3, #36	; 0x24
 80065c0:	2102      	movs	r1, #2
 80065c2:	4618      	mov	r0, r3
 80065c4:	f001 fa7e 	bl	8007ac4 <RCCEx_PLL3_Config>
 80065c8:	4603      	mov	r3, r0
 80065ca:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80065cc:	e003      	b.n	80065d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80065ce:	2301      	movs	r3, #1
 80065d0:	75fb      	strb	r3, [r7, #23]
      break;
 80065d2:	e000      	b.n	80065d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80065d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80065d6:	7dfb      	ldrb	r3, [r7, #23]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d109      	bne.n	80065f0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80065dc:	4b93      	ldr	r3, [pc, #588]	; (800682c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80065de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065e0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80065e8:	4990      	ldr	r1, [pc, #576]	; (800682c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80065ea:	4313      	orrs	r3, r2
 80065ec:	650b      	str	r3, [r1, #80]	; 0x50
 80065ee:	e001      	b.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065f0:	7dfb      	ldrb	r3, [r7, #23]
 80065f2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d03d      	beq.n	800667c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006604:	2b04      	cmp	r3, #4
 8006606:	d826      	bhi.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8006608:	a201      	add	r2, pc, #4	; (adr r2, 8006610 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800660a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800660e:	bf00      	nop
 8006610:	08006625 	.word	0x08006625
 8006614:	08006633 	.word	0x08006633
 8006618:	08006645 	.word	0x08006645
 800661c:	0800665d 	.word	0x0800665d
 8006620:	0800665d 	.word	0x0800665d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006624:	4b81      	ldr	r3, [pc, #516]	; (800682c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006628:	4a80      	ldr	r2, [pc, #512]	; (800682c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800662a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800662e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006630:	e015      	b.n	800665e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	3304      	adds	r3, #4
 8006636:	2100      	movs	r1, #0
 8006638:	4618      	mov	r0, r3
 800663a:	f001 f991 	bl	8007960 <RCCEx_PLL2_Config>
 800663e:	4603      	mov	r3, r0
 8006640:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006642:	e00c      	b.n	800665e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	3324      	adds	r3, #36	; 0x24
 8006648:	2100      	movs	r1, #0
 800664a:	4618      	mov	r0, r3
 800664c:	f001 fa3a 	bl	8007ac4 <RCCEx_PLL3_Config>
 8006650:	4603      	mov	r3, r0
 8006652:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006654:	e003      	b.n	800665e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006656:	2301      	movs	r3, #1
 8006658:	75fb      	strb	r3, [r7, #23]
      break;
 800665a:	e000      	b.n	800665e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800665c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800665e:	7dfb      	ldrb	r3, [r7, #23]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d109      	bne.n	8006678 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006664:	4b71      	ldr	r3, [pc, #452]	; (800682c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006666:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006668:	f023 0207 	bic.w	r2, r3, #7
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006670:	496e      	ldr	r1, [pc, #440]	; (800682c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006672:	4313      	orrs	r3, r2
 8006674:	650b      	str	r3, [r1, #80]	; 0x50
 8006676:	e001      	b.n	800667c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006678:	7dfb      	ldrb	r3, [r7, #23]
 800667a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006684:	2b00      	cmp	r3, #0
 8006686:	d042      	beq.n	800670e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800668c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006690:	d02b      	beq.n	80066ea <HAL_RCCEx_PeriphCLKConfig+0x192>
 8006692:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006696:	d825      	bhi.n	80066e4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006698:	2bc0      	cmp	r3, #192	; 0xc0
 800669a:	d028      	beq.n	80066ee <HAL_RCCEx_PeriphCLKConfig+0x196>
 800669c:	2bc0      	cmp	r3, #192	; 0xc0
 800669e:	d821      	bhi.n	80066e4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80066a0:	2b80      	cmp	r3, #128	; 0x80
 80066a2:	d016      	beq.n	80066d2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80066a4:	2b80      	cmp	r3, #128	; 0x80
 80066a6:	d81d      	bhi.n	80066e4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d002      	beq.n	80066b2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80066ac:	2b40      	cmp	r3, #64	; 0x40
 80066ae:	d007      	beq.n	80066c0 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80066b0:	e018      	b.n	80066e4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80066b2:	4b5e      	ldr	r3, [pc, #376]	; (800682c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80066b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066b6:	4a5d      	ldr	r2, [pc, #372]	; (800682c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80066b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80066bc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80066be:	e017      	b.n	80066f0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	3304      	adds	r3, #4
 80066c4:	2100      	movs	r1, #0
 80066c6:	4618      	mov	r0, r3
 80066c8:	f001 f94a 	bl	8007960 <RCCEx_PLL2_Config>
 80066cc:	4603      	mov	r3, r0
 80066ce:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80066d0:	e00e      	b.n	80066f0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	3324      	adds	r3, #36	; 0x24
 80066d6:	2100      	movs	r1, #0
 80066d8:	4618      	mov	r0, r3
 80066da:	f001 f9f3 	bl	8007ac4 <RCCEx_PLL3_Config>
 80066de:	4603      	mov	r3, r0
 80066e0:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80066e2:	e005      	b.n	80066f0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80066e4:	2301      	movs	r3, #1
 80066e6:	75fb      	strb	r3, [r7, #23]
      break;
 80066e8:	e002      	b.n	80066f0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80066ea:	bf00      	nop
 80066ec:	e000      	b.n	80066f0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80066ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 80066f0:	7dfb      	ldrb	r3, [r7, #23]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d109      	bne.n	800670a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80066f6:	4b4d      	ldr	r3, [pc, #308]	; (800682c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80066f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066fa:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006702:	494a      	ldr	r1, [pc, #296]	; (800682c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006704:	4313      	orrs	r3, r2
 8006706:	650b      	str	r3, [r1, #80]	; 0x50
 8006708:	e001      	b.n	800670e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800670a:	7dfb      	ldrb	r3, [r7, #23]
 800670c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006716:	2b00      	cmp	r3, #0
 8006718:	d049      	beq.n	80067ae <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006720:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006724:	d030      	beq.n	8006788 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8006726:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800672a:	d82a      	bhi.n	8006782 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800672c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006730:	d02c      	beq.n	800678c <HAL_RCCEx_PeriphCLKConfig+0x234>
 8006732:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006736:	d824      	bhi.n	8006782 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006738:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800673c:	d018      	beq.n	8006770 <HAL_RCCEx_PeriphCLKConfig+0x218>
 800673e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006742:	d81e      	bhi.n	8006782 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006744:	2b00      	cmp	r3, #0
 8006746:	d003      	beq.n	8006750 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8006748:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800674c:	d007      	beq.n	800675e <HAL_RCCEx_PeriphCLKConfig+0x206>
 800674e:	e018      	b.n	8006782 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006750:	4b36      	ldr	r3, [pc, #216]	; (800682c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006754:	4a35      	ldr	r2, [pc, #212]	; (800682c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006756:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800675a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800675c:	e017      	b.n	800678e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	3304      	adds	r3, #4
 8006762:	2100      	movs	r1, #0
 8006764:	4618      	mov	r0, r3
 8006766:	f001 f8fb 	bl	8007960 <RCCEx_PLL2_Config>
 800676a:	4603      	mov	r3, r0
 800676c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800676e:	e00e      	b.n	800678e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	3324      	adds	r3, #36	; 0x24
 8006774:	2100      	movs	r1, #0
 8006776:	4618      	mov	r0, r3
 8006778:	f001 f9a4 	bl	8007ac4 <RCCEx_PLL3_Config>
 800677c:	4603      	mov	r3, r0
 800677e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006780:	e005      	b.n	800678e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8006782:	2301      	movs	r3, #1
 8006784:	75fb      	strb	r3, [r7, #23]
      break;
 8006786:	e002      	b.n	800678e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8006788:	bf00      	nop
 800678a:	e000      	b.n	800678e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800678c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800678e:	7dfb      	ldrb	r3, [r7, #23]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d10a      	bne.n	80067aa <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006794:	4b25      	ldr	r3, [pc, #148]	; (800682c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006796:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006798:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80067a2:	4922      	ldr	r1, [pc, #136]	; (800682c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80067a4:	4313      	orrs	r3, r2
 80067a6:	658b      	str	r3, [r1, #88]	; 0x58
 80067a8:	e001      	b.n	80067ae <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067aa:	7dfb      	ldrb	r3, [r7, #23]
 80067ac:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d04b      	beq.n	8006852 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80067c0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80067c4:	d030      	beq.n	8006828 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80067c6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80067ca:	d82a      	bhi.n	8006822 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80067cc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80067d0:	d02e      	beq.n	8006830 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 80067d2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80067d6:	d824      	bhi.n	8006822 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80067d8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80067dc:	d018      	beq.n	8006810 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80067de:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80067e2:	d81e      	bhi.n	8006822 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d003      	beq.n	80067f0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80067e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80067ec:	d007      	beq.n	80067fe <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80067ee:	e018      	b.n	8006822 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80067f0:	4b0e      	ldr	r3, [pc, #56]	; (800682c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80067f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067f4:	4a0d      	ldr	r2, [pc, #52]	; (800682c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80067f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80067fa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80067fc:	e019      	b.n	8006832 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	3304      	adds	r3, #4
 8006802:	2100      	movs	r1, #0
 8006804:	4618      	mov	r0, r3
 8006806:	f001 f8ab 	bl	8007960 <RCCEx_PLL2_Config>
 800680a:	4603      	mov	r3, r0
 800680c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800680e:	e010      	b.n	8006832 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	3324      	adds	r3, #36	; 0x24
 8006814:	2100      	movs	r1, #0
 8006816:	4618      	mov	r0, r3
 8006818:	f001 f954 	bl	8007ac4 <RCCEx_PLL3_Config>
 800681c:	4603      	mov	r3, r0
 800681e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006820:	e007      	b.n	8006832 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8006822:	2301      	movs	r3, #1
 8006824:	75fb      	strb	r3, [r7, #23]
      break;
 8006826:	e004      	b.n	8006832 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8006828:	bf00      	nop
 800682a:	e002      	b.n	8006832 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800682c:	58024400 	.word	0x58024400
      break;
 8006830:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006832:	7dfb      	ldrb	r3, [r7, #23]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d10a      	bne.n	800684e <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006838:	4b99      	ldr	r3, [pc, #612]	; (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800683a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800683c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006846:	4996      	ldr	r1, [pc, #600]	; (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006848:	4313      	orrs	r3, r2
 800684a:	658b      	str	r3, [r1, #88]	; 0x58
 800684c:	e001      	b.n	8006852 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800684e:	7dfb      	ldrb	r3, [r7, #23]
 8006850:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800685a:	2b00      	cmp	r3, #0
 800685c:	d032      	beq.n	80068c4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006862:	2b30      	cmp	r3, #48	; 0x30
 8006864:	d01c      	beq.n	80068a0 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8006866:	2b30      	cmp	r3, #48	; 0x30
 8006868:	d817      	bhi.n	800689a <HAL_RCCEx_PeriphCLKConfig+0x342>
 800686a:	2b20      	cmp	r3, #32
 800686c:	d00c      	beq.n	8006888 <HAL_RCCEx_PeriphCLKConfig+0x330>
 800686e:	2b20      	cmp	r3, #32
 8006870:	d813      	bhi.n	800689a <HAL_RCCEx_PeriphCLKConfig+0x342>
 8006872:	2b00      	cmp	r3, #0
 8006874:	d016      	beq.n	80068a4 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8006876:	2b10      	cmp	r3, #16
 8006878:	d10f      	bne.n	800689a <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800687a:	4b89      	ldr	r3, [pc, #548]	; (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800687c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800687e:	4a88      	ldr	r2, [pc, #544]	; (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006880:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006884:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8006886:	e00e      	b.n	80068a6 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	3304      	adds	r3, #4
 800688c:	2102      	movs	r1, #2
 800688e:	4618      	mov	r0, r3
 8006890:	f001 f866 	bl	8007960 <RCCEx_PLL2_Config>
 8006894:	4603      	mov	r3, r0
 8006896:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8006898:	e005      	b.n	80068a6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800689a:	2301      	movs	r3, #1
 800689c:	75fb      	strb	r3, [r7, #23]
      break;
 800689e:	e002      	b.n	80068a6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80068a0:	bf00      	nop
 80068a2:	e000      	b.n	80068a6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80068a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80068a6:	7dfb      	ldrb	r3, [r7, #23]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d109      	bne.n	80068c0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80068ac:	4b7c      	ldr	r3, [pc, #496]	; (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80068ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068b0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068b8:	4979      	ldr	r1, [pc, #484]	; (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80068ba:	4313      	orrs	r3, r2
 80068bc:	64cb      	str	r3, [r1, #76]	; 0x4c
 80068be:	e001      	b.n	80068c4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068c0:	7dfb      	ldrb	r3, [r7, #23]
 80068c2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d047      	beq.n	8006960 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80068d8:	d030      	beq.n	800693c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80068da:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80068de:	d82a      	bhi.n	8006936 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80068e0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80068e4:	d02c      	beq.n	8006940 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80068e6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80068ea:	d824      	bhi.n	8006936 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80068ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068f0:	d018      	beq.n	8006924 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 80068f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068f6:	d81e      	bhi.n	8006936 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d003      	beq.n	8006904 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 80068fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006900:	d007      	beq.n	8006912 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8006902:	e018      	b.n	8006936 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006904:	4b66      	ldr	r3, [pc, #408]	; (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006908:	4a65      	ldr	r2, [pc, #404]	; (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800690a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800690e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006910:	e017      	b.n	8006942 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	3304      	adds	r3, #4
 8006916:	2100      	movs	r1, #0
 8006918:	4618      	mov	r0, r3
 800691a:	f001 f821 	bl	8007960 <RCCEx_PLL2_Config>
 800691e:	4603      	mov	r3, r0
 8006920:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006922:	e00e      	b.n	8006942 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	3324      	adds	r3, #36	; 0x24
 8006928:	2100      	movs	r1, #0
 800692a:	4618      	mov	r0, r3
 800692c:	f001 f8ca 	bl	8007ac4 <RCCEx_PLL3_Config>
 8006930:	4603      	mov	r3, r0
 8006932:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006934:	e005      	b.n	8006942 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006936:	2301      	movs	r3, #1
 8006938:	75fb      	strb	r3, [r7, #23]
      break;
 800693a:	e002      	b.n	8006942 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 800693c:	bf00      	nop
 800693e:	e000      	b.n	8006942 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8006940:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006942:	7dfb      	ldrb	r3, [r7, #23]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d109      	bne.n	800695c <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006948:	4b55      	ldr	r3, [pc, #340]	; (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800694a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800694c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006954:	4952      	ldr	r1, [pc, #328]	; (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006956:	4313      	orrs	r3, r2
 8006958:	650b      	str	r3, [r1, #80]	; 0x50
 800695a:	e001      	b.n	8006960 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800695c:	7dfb      	ldrb	r3, [r7, #23]
 800695e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006968:	2b00      	cmp	r3, #0
 800696a:	d049      	beq.n	8006a00 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006970:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006974:	d02e      	beq.n	80069d4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8006976:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800697a:	d828      	bhi.n	80069ce <HAL_RCCEx_PeriphCLKConfig+0x476>
 800697c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006980:	d02a      	beq.n	80069d8 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8006982:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006986:	d822      	bhi.n	80069ce <HAL_RCCEx_PeriphCLKConfig+0x476>
 8006988:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800698c:	d026      	beq.n	80069dc <HAL_RCCEx_PeriphCLKConfig+0x484>
 800698e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006992:	d81c      	bhi.n	80069ce <HAL_RCCEx_PeriphCLKConfig+0x476>
 8006994:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006998:	d010      	beq.n	80069bc <HAL_RCCEx_PeriphCLKConfig+0x464>
 800699a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800699e:	d816      	bhi.n	80069ce <HAL_RCCEx_PeriphCLKConfig+0x476>
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d01d      	beq.n	80069e0 <HAL_RCCEx_PeriphCLKConfig+0x488>
 80069a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069a8:	d111      	bne.n	80069ce <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	3304      	adds	r3, #4
 80069ae:	2101      	movs	r1, #1
 80069b0:	4618      	mov	r0, r3
 80069b2:	f000 ffd5 	bl	8007960 <RCCEx_PLL2_Config>
 80069b6:	4603      	mov	r3, r0
 80069b8:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80069ba:	e012      	b.n	80069e2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	3324      	adds	r3, #36	; 0x24
 80069c0:	2101      	movs	r1, #1
 80069c2:	4618      	mov	r0, r3
 80069c4:	f001 f87e 	bl	8007ac4 <RCCEx_PLL3_Config>
 80069c8:	4603      	mov	r3, r0
 80069ca:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80069cc:	e009      	b.n	80069e2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80069ce:	2301      	movs	r3, #1
 80069d0:	75fb      	strb	r3, [r7, #23]
      break;
 80069d2:	e006      	b.n	80069e2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80069d4:	bf00      	nop
 80069d6:	e004      	b.n	80069e2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80069d8:	bf00      	nop
 80069da:	e002      	b.n	80069e2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80069dc:	bf00      	nop
 80069de:	e000      	b.n	80069e2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80069e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80069e2:	7dfb      	ldrb	r3, [r7, #23]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d109      	bne.n	80069fc <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80069e8:	4b2d      	ldr	r3, [pc, #180]	; (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80069ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069ec:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80069f4:	492a      	ldr	r1, [pc, #168]	; (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80069f6:	4313      	orrs	r3, r2
 80069f8:	650b      	str	r3, [r1, #80]	; 0x50
 80069fa:	e001      	b.n	8006a00 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069fc:	7dfb      	ldrb	r3, [r7, #23]
 80069fe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d04d      	beq.n	8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006a12:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006a16:	d02e      	beq.n	8006a76 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8006a18:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006a1c:	d828      	bhi.n	8006a70 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8006a1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a22:	d02a      	beq.n	8006a7a <HAL_RCCEx_PeriphCLKConfig+0x522>
 8006a24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a28:	d822      	bhi.n	8006a70 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8006a2a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006a2e:	d026      	beq.n	8006a7e <HAL_RCCEx_PeriphCLKConfig+0x526>
 8006a30:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006a34:	d81c      	bhi.n	8006a70 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8006a36:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a3a:	d010      	beq.n	8006a5e <HAL_RCCEx_PeriphCLKConfig+0x506>
 8006a3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a40:	d816      	bhi.n	8006a70 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d01d      	beq.n	8006a82 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8006a46:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006a4a:	d111      	bne.n	8006a70 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	3304      	adds	r3, #4
 8006a50:	2101      	movs	r1, #1
 8006a52:	4618      	mov	r0, r3
 8006a54:	f000 ff84 	bl	8007960 <RCCEx_PLL2_Config>
 8006a58:	4603      	mov	r3, r0
 8006a5a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006a5c:	e012      	b.n	8006a84 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	3324      	adds	r3, #36	; 0x24
 8006a62:	2101      	movs	r1, #1
 8006a64:	4618      	mov	r0, r3
 8006a66:	f001 f82d 	bl	8007ac4 <RCCEx_PLL3_Config>
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006a6e:	e009      	b.n	8006a84 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8006a70:	2301      	movs	r3, #1
 8006a72:	75fb      	strb	r3, [r7, #23]
      break;
 8006a74:	e006      	b.n	8006a84 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8006a76:	bf00      	nop
 8006a78:	e004      	b.n	8006a84 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8006a7a:	bf00      	nop
 8006a7c:	e002      	b.n	8006a84 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8006a7e:	bf00      	nop
 8006a80:	e000      	b.n	8006a84 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8006a82:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006a84:	7dfb      	ldrb	r3, [r7, #23]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d10c      	bne.n	8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006a8a:	4b05      	ldr	r3, [pc, #20]	; (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006a8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a8e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006a98:	4901      	ldr	r1, [pc, #4]	; (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006a9a:	4313      	orrs	r3, r2
 8006a9c:	658b      	str	r3, [r1, #88]	; 0x58
 8006a9e:	e003      	b.n	8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8006aa0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006aa4:	7dfb      	ldrb	r3, [r7, #23]
 8006aa6:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d02f      	beq.n	8006b14 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ab8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006abc:	d00e      	beq.n	8006adc <HAL_RCCEx_PeriphCLKConfig+0x584>
 8006abe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ac2:	d814      	bhi.n	8006aee <HAL_RCCEx_PeriphCLKConfig+0x596>
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d015      	beq.n	8006af4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8006ac8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006acc:	d10f      	bne.n	8006aee <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ace:	4baf      	ldr	r3, [pc, #700]	; (8006d8c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ad2:	4aae      	ldr	r2, [pc, #696]	; (8006d8c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006ad4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ad8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006ada:	e00c      	b.n	8006af6 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	3304      	adds	r3, #4
 8006ae0:	2101      	movs	r1, #1
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	f000 ff3c 	bl	8007960 <RCCEx_PLL2_Config>
 8006ae8:	4603      	mov	r3, r0
 8006aea:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006aec:	e003      	b.n	8006af6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006aee:	2301      	movs	r3, #1
 8006af0:	75fb      	strb	r3, [r7, #23]
      break;
 8006af2:	e000      	b.n	8006af6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8006af4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006af6:	7dfb      	ldrb	r3, [r7, #23]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d109      	bne.n	8006b10 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006afc:	4ba3      	ldr	r3, [pc, #652]	; (8006d8c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006afe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b00:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b08:	49a0      	ldr	r1, [pc, #640]	; (8006d8c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006b0a:	4313      	orrs	r3, r2
 8006b0c:	650b      	str	r3, [r1, #80]	; 0x50
 8006b0e:	e001      	b.n	8006b14 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b10:	7dfb      	ldrb	r3, [r7, #23]
 8006b12:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d032      	beq.n	8006b86 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b24:	2b03      	cmp	r3, #3
 8006b26:	d81b      	bhi.n	8006b60 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8006b28:	a201      	add	r2, pc, #4	; (adr r2, 8006b30 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8006b2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b2e:	bf00      	nop
 8006b30:	08006b67 	.word	0x08006b67
 8006b34:	08006b41 	.word	0x08006b41
 8006b38:	08006b4f 	.word	0x08006b4f
 8006b3c:	08006b67 	.word	0x08006b67
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b40:	4b92      	ldr	r3, [pc, #584]	; (8006d8c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b44:	4a91      	ldr	r2, [pc, #580]	; (8006d8c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006b46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b4a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006b4c:	e00c      	b.n	8006b68 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	3304      	adds	r3, #4
 8006b52:	2102      	movs	r1, #2
 8006b54:	4618      	mov	r0, r3
 8006b56:	f000 ff03 	bl	8007960 <RCCEx_PLL2_Config>
 8006b5a:	4603      	mov	r3, r0
 8006b5c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006b5e:	e003      	b.n	8006b68 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006b60:	2301      	movs	r3, #1
 8006b62:	75fb      	strb	r3, [r7, #23]
      break;
 8006b64:	e000      	b.n	8006b68 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8006b66:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006b68:	7dfb      	ldrb	r3, [r7, #23]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d109      	bne.n	8006b82 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006b6e:	4b87      	ldr	r3, [pc, #540]	; (8006d8c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006b70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b72:	f023 0203 	bic.w	r2, r3, #3
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b7a:	4984      	ldr	r1, [pc, #528]	; (8006d8c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006b7c:	4313      	orrs	r3, r2
 8006b7e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006b80:	e001      	b.n	8006b86 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b82:	7dfb      	ldrb	r3, [r7, #23]
 8006b84:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	f000 8086 	beq.w	8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006b94:	4b7e      	ldr	r3, [pc, #504]	; (8006d90 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	4a7d      	ldr	r2, [pc, #500]	; (8006d90 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8006b9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b9e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006ba0:	f7fc f81c 	bl	8002bdc <HAL_GetTick>
 8006ba4:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006ba6:	e009      	b.n	8006bbc <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ba8:	f7fc f818 	bl	8002bdc <HAL_GetTick>
 8006bac:	4602      	mov	r2, r0
 8006bae:	693b      	ldr	r3, [r7, #16]
 8006bb0:	1ad3      	subs	r3, r2, r3
 8006bb2:	2b64      	cmp	r3, #100	; 0x64
 8006bb4:	d902      	bls.n	8006bbc <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8006bb6:	2303      	movs	r3, #3
 8006bb8:	75fb      	strb	r3, [r7, #23]
        break;
 8006bba:	e005      	b.n	8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006bbc:	4b74      	ldr	r3, [pc, #464]	; (8006d90 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d0ef      	beq.n	8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8006bc8:	7dfb      	ldrb	r3, [r7, #23]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d166      	bne.n	8006c9c <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006bce:	4b6f      	ldr	r3, [pc, #444]	; (8006d8c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006bd0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006bd8:	4053      	eors	r3, r2
 8006bda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d013      	beq.n	8006c0a <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006be2:	4b6a      	ldr	r3, [pc, #424]	; (8006d8c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006be4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006be6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006bea:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006bec:	4b67      	ldr	r3, [pc, #412]	; (8006d8c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006bee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bf0:	4a66      	ldr	r2, [pc, #408]	; (8006d8c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006bf2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006bf6:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006bf8:	4b64      	ldr	r3, [pc, #400]	; (8006d8c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006bfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bfc:	4a63      	ldr	r2, [pc, #396]	; (8006d8c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006bfe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c02:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006c04:	4a61      	ldr	r2, [pc, #388]	; (8006d8c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006c10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c14:	d115      	bne.n	8006c42 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c16:	f7fb ffe1 	bl	8002bdc <HAL_GetTick>
 8006c1a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006c1c:	e00b      	b.n	8006c36 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c1e:	f7fb ffdd 	bl	8002bdc <HAL_GetTick>
 8006c22:	4602      	mov	r2, r0
 8006c24:	693b      	ldr	r3, [r7, #16]
 8006c26:	1ad3      	subs	r3, r2, r3
 8006c28:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c2c:	4293      	cmp	r3, r2
 8006c2e:	d902      	bls.n	8006c36 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8006c30:	2303      	movs	r3, #3
 8006c32:	75fb      	strb	r3, [r7, #23]
            break;
 8006c34:	e005      	b.n	8006c42 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006c36:	4b55      	ldr	r3, [pc, #340]	; (8006d8c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006c38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c3a:	f003 0302 	and.w	r3, r3, #2
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d0ed      	beq.n	8006c1e <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8006c42:	7dfb      	ldrb	r3, [r7, #23]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d126      	bne.n	8006c96 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006c4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c52:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006c56:	d10d      	bne.n	8006c74 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8006c58:	4b4c      	ldr	r3, [pc, #304]	; (8006d8c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006c5a:	691b      	ldr	r3, [r3, #16]
 8006c5c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006c66:	0919      	lsrs	r1, r3, #4
 8006c68:	4b4a      	ldr	r3, [pc, #296]	; (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8006c6a:	400b      	ands	r3, r1
 8006c6c:	4947      	ldr	r1, [pc, #284]	; (8006d8c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006c6e:	4313      	orrs	r3, r2
 8006c70:	610b      	str	r3, [r1, #16]
 8006c72:	e005      	b.n	8006c80 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8006c74:	4b45      	ldr	r3, [pc, #276]	; (8006d8c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006c76:	691b      	ldr	r3, [r3, #16]
 8006c78:	4a44      	ldr	r2, [pc, #272]	; (8006d8c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006c7a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006c7e:	6113      	str	r3, [r2, #16]
 8006c80:	4b42      	ldr	r3, [pc, #264]	; (8006d8c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006c82:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006c8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006c8e:	493f      	ldr	r1, [pc, #252]	; (8006d8c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006c90:	4313      	orrs	r3, r2
 8006c92:	670b      	str	r3, [r1, #112]	; 0x70
 8006c94:	e004      	b.n	8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006c96:	7dfb      	ldrb	r3, [r7, #23]
 8006c98:	75bb      	strb	r3, [r7, #22]
 8006c9a:	e001      	b.n	8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c9c:	7dfb      	ldrb	r3, [r7, #23]
 8006c9e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f003 0301 	and.w	r3, r3, #1
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	f000 8085 	beq.w	8006db8 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006cb2:	2b28      	cmp	r3, #40	; 0x28
 8006cb4:	d866      	bhi.n	8006d84 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8006cb6:	a201      	add	r2, pc, #4	; (adr r2, 8006cbc <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8006cb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cbc:	08006d99 	.word	0x08006d99
 8006cc0:	08006d85 	.word	0x08006d85
 8006cc4:	08006d85 	.word	0x08006d85
 8006cc8:	08006d85 	.word	0x08006d85
 8006ccc:	08006d85 	.word	0x08006d85
 8006cd0:	08006d85 	.word	0x08006d85
 8006cd4:	08006d85 	.word	0x08006d85
 8006cd8:	08006d85 	.word	0x08006d85
 8006cdc:	08006d61 	.word	0x08006d61
 8006ce0:	08006d85 	.word	0x08006d85
 8006ce4:	08006d85 	.word	0x08006d85
 8006ce8:	08006d85 	.word	0x08006d85
 8006cec:	08006d85 	.word	0x08006d85
 8006cf0:	08006d85 	.word	0x08006d85
 8006cf4:	08006d85 	.word	0x08006d85
 8006cf8:	08006d85 	.word	0x08006d85
 8006cfc:	08006d73 	.word	0x08006d73
 8006d00:	08006d85 	.word	0x08006d85
 8006d04:	08006d85 	.word	0x08006d85
 8006d08:	08006d85 	.word	0x08006d85
 8006d0c:	08006d85 	.word	0x08006d85
 8006d10:	08006d85 	.word	0x08006d85
 8006d14:	08006d85 	.word	0x08006d85
 8006d18:	08006d85 	.word	0x08006d85
 8006d1c:	08006d99 	.word	0x08006d99
 8006d20:	08006d85 	.word	0x08006d85
 8006d24:	08006d85 	.word	0x08006d85
 8006d28:	08006d85 	.word	0x08006d85
 8006d2c:	08006d85 	.word	0x08006d85
 8006d30:	08006d85 	.word	0x08006d85
 8006d34:	08006d85 	.word	0x08006d85
 8006d38:	08006d85 	.word	0x08006d85
 8006d3c:	08006d99 	.word	0x08006d99
 8006d40:	08006d85 	.word	0x08006d85
 8006d44:	08006d85 	.word	0x08006d85
 8006d48:	08006d85 	.word	0x08006d85
 8006d4c:	08006d85 	.word	0x08006d85
 8006d50:	08006d85 	.word	0x08006d85
 8006d54:	08006d85 	.word	0x08006d85
 8006d58:	08006d85 	.word	0x08006d85
 8006d5c:	08006d99 	.word	0x08006d99
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	3304      	adds	r3, #4
 8006d64:	2101      	movs	r1, #1
 8006d66:	4618      	mov	r0, r3
 8006d68:	f000 fdfa 	bl	8007960 <RCCEx_PLL2_Config>
 8006d6c:	4603      	mov	r3, r0
 8006d6e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006d70:	e013      	b.n	8006d9a <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	3324      	adds	r3, #36	; 0x24
 8006d76:	2101      	movs	r1, #1
 8006d78:	4618      	mov	r0, r3
 8006d7a:	f000 fea3 	bl	8007ac4 <RCCEx_PLL3_Config>
 8006d7e:	4603      	mov	r3, r0
 8006d80:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006d82:	e00a      	b.n	8006d9a <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006d84:	2301      	movs	r3, #1
 8006d86:	75fb      	strb	r3, [r7, #23]
      break;
 8006d88:	e007      	b.n	8006d9a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8006d8a:	bf00      	nop
 8006d8c:	58024400 	.word	0x58024400
 8006d90:	58024800 	.word	0x58024800
 8006d94:	00ffffcf 	.word	0x00ffffcf
      break;
 8006d98:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d9a:	7dfb      	ldrb	r3, [r7, #23]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d109      	bne.n	8006db4 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006da0:	4b96      	ldr	r3, [pc, #600]	; (8006ffc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006da2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006da4:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006dac:	4993      	ldr	r1, [pc, #588]	; (8006ffc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006dae:	4313      	orrs	r3, r2
 8006db0:	654b      	str	r3, [r1, #84]	; 0x54
 8006db2:	e001      	b.n	8006db8 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006db4:	7dfb      	ldrb	r3, [r7, #23]
 8006db6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f003 0302 	and.w	r3, r3, #2
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d038      	beq.n	8006e36 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006dc8:	2b05      	cmp	r3, #5
 8006dca:	d821      	bhi.n	8006e10 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8006dcc:	a201      	add	r2, pc, #4	; (adr r2, 8006dd4 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8006dce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dd2:	bf00      	nop
 8006dd4:	08006e17 	.word	0x08006e17
 8006dd8:	08006ded 	.word	0x08006ded
 8006ddc:	08006dff 	.word	0x08006dff
 8006de0:	08006e17 	.word	0x08006e17
 8006de4:	08006e17 	.word	0x08006e17
 8006de8:	08006e17 	.word	0x08006e17
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	3304      	adds	r3, #4
 8006df0:	2101      	movs	r1, #1
 8006df2:	4618      	mov	r0, r3
 8006df4:	f000 fdb4 	bl	8007960 <RCCEx_PLL2_Config>
 8006df8:	4603      	mov	r3, r0
 8006dfa:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006dfc:	e00c      	b.n	8006e18 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	3324      	adds	r3, #36	; 0x24
 8006e02:	2101      	movs	r1, #1
 8006e04:	4618      	mov	r0, r3
 8006e06:	f000 fe5d 	bl	8007ac4 <RCCEx_PLL3_Config>
 8006e0a:	4603      	mov	r3, r0
 8006e0c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006e0e:	e003      	b.n	8006e18 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006e10:	2301      	movs	r3, #1
 8006e12:	75fb      	strb	r3, [r7, #23]
      break;
 8006e14:	e000      	b.n	8006e18 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8006e16:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e18:	7dfb      	ldrb	r3, [r7, #23]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d109      	bne.n	8006e32 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006e1e:	4b77      	ldr	r3, [pc, #476]	; (8006ffc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006e20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e22:	f023 0207 	bic.w	r2, r3, #7
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e2a:	4974      	ldr	r1, [pc, #464]	; (8006ffc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006e2c:	4313      	orrs	r3, r2
 8006e2e:	654b      	str	r3, [r1, #84]	; 0x54
 8006e30:	e001      	b.n	8006e36 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e32:	7dfb      	ldrb	r3, [r7, #23]
 8006e34:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f003 0304 	and.w	r3, r3, #4
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d03a      	beq.n	8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e48:	2b05      	cmp	r3, #5
 8006e4a:	d821      	bhi.n	8006e90 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8006e4c:	a201      	add	r2, pc, #4	; (adr r2, 8006e54 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8006e4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e52:	bf00      	nop
 8006e54:	08006e97 	.word	0x08006e97
 8006e58:	08006e6d 	.word	0x08006e6d
 8006e5c:	08006e7f 	.word	0x08006e7f
 8006e60:	08006e97 	.word	0x08006e97
 8006e64:	08006e97 	.word	0x08006e97
 8006e68:	08006e97 	.word	0x08006e97
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	3304      	adds	r3, #4
 8006e70:	2101      	movs	r1, #1
 8006e72:	4618      	mov	r0, r3
 8006e74:	f000 fd74 	bl	8007960 <RCCEx_PLL2_Config>
 8006e78:	4603      	mov	r3, r0
 8006e7a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006e7c:	e00c      	b.n	8006e98 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	3324      	adds	r3, #36	; 0x24
 8006e82:	2101      	movs	r1, #1
 8006e84:	4618      	mov	r0, r3
 8006e86:	f000 fe1d 	bl	8007ac4 <RCCEx_PLL3_Config>
 8006e8a:	4603      	mov	r3, r0
 8006e8c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006e8e:	e003      	b.n	8006e98 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006e90:	2301      	movs	r3, #1
 8006e92:	75fb      	strb	r3, [r7, #23]
      break;
 8006e94:	e000      	b.n	8006e98 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8006e96:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e98:	7dfb      	ldrb	r3, [r7, #23]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d10a      	bne.n	8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006e9e:	4b57      	ldr	r3, [pc, #348]	; (8006ffc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006ea0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ea2:	f023 0207 	bic.w	r2, r3, #7
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006eac:	4953      	ldr	r1, [pc, #332]	; (8006ffc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006eae:	4313      	orrs	r3, r2
 8006eb0:	658b      	str	r3, [r1, #88]	; 0x58
 8006eb2:	e001      	b.n	8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006eb4:	7dfb      	ldrb	r3, [r7, #23]
 8006eb6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f003 0320 	and.w	r3, r3, #32
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d04b      	beq.n	8006f5c <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006eca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006ece:	d02e      	beq.n	8006f2e <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8006ed0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006ed4:	d828      	bhi.n	8006f28 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8006ed6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006eda:	d02a      	beq.n	8006f32 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8006edc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ee0:	d822      	bhi.n	8006f28 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8006ee2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006ee6:	d026      	beq.n	8006f36 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8006ee8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006eec:	d81c      	bhi.n	8006f28 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8006eee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ef2:	d010      	beq.n	8006f16 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8006ef4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ef8:	d816      	bhi.n	8006f28 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d01d      	beq.n	8006f3a <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8006efe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006f02:	d111      	bne.n	8006f28 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	3304      	adds	r3, #4
 8006f08:	2100      	movs	r1, #0
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	f000 fd28 	bl	8007960 <RCCEx_PLL2_Config>
 8006f10:	4603      	mov	r3, r0
 8006f12:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006f14:	e012      	b.n	8006f3c <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	3324      	adds	r3, #36	; 0x24
 8006f1a:	2102      	movs	r1, #2
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	f000 fdd1 	bl	8007ac4 <RCCEx_PLL3_Config>
 8006f22:	4603      	mov	r3, r0
 8006f24:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006f26:	e009      	b.n	8006f3c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006f28:	2301      	movs	r3, #1
 8006f2a:	75fb      	strb	r3, [r7, #23]
      break;
 8006f2c:	e006      	b.n	8006f3c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8006f2e:	bf00      	nop
 8006f30:	e004      	b.n	8006f3c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8006f32:	bf00      	nop
 8006f34:	e002      	b.n	8006f3c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8006f36:	bf00      	nop
 8006f38:	e000      	b.n	8006f3c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8006f3a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f3c:	7dfb      	ldrb	r3, [r7, #23]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d10a      	bne.n	8006f58 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006f42:	4b2e      	ldr	r3, [pc, #184]	; (8006ffc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006f44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f46:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f50:	492a      	ldr	r1, [pc, #168]	; (8006ffc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006f52:	4313      	orrs	r3, r2
 8006f54:	654b      	str	r3, [r1, #84]	; 0x54
 8006f56:	e001      	b.n	8006f5c <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f58:	7dfb      	ldrb	r3, [r7, #23]
 8006f5a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d04d      	beq.n	8007004 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006f6e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006f72:	d02e      	beq.n	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8006f74:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006f78:	d828      	bhi.n	8006fcc <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8006f7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f7e:	d02a      	beq.n	8006fd6 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8006f80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f84:	d822      	bhi.n	8006fcc <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8006f86:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006f8a:	d026      	beq.n	8006fda <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8006f8c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006f90:	d81c      	bhi.n	8006fcc <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8006f92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f96:	d010      	beq.n	8006fba <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8006f98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f9c:	d816      	bhi.n	8006fcc <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d01d      	beq.n	8006fde <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8006fa2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006fa6:	d111      	bne.n	8006fcc <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	3304      	adds	r3, #4
 8006fac:	2100      	movs	r1, #0
 8006fae:	4618      	mov	r0, r3
 8006fb0:	f000 fcd6 	bl	8007960 <RCCEx_PLL2_Config>
 8006fb4:	4603      	mov	r3, r0
 8006fb6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006fb8:	e012      	b.n	8006fe0 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	3324      	adds	r3, #36	; 0x24
 8006fbe:	2102      	movs	r1, #2
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	f000 fd7f 	bl	8007ac4 <RCCEx_PLL3_Config>
 8006fc6:	4603      	mov	r3, r0
 8006fc8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006fca:	e009      	b.n	8006fe0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006fcc:	2301      	movs	r3, #1
 8006fce:	75fb      	strb	r3, [r7, #23]
      break;
 8006fd0:	e006      	b.n	8006fe0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8006fd2:	bf00      	nop
 8006fd4:	e004      	b.n	8006fe0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8006fd6:	bf00      	nop
 8006fd8:	e002      	b.n	8006fe0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8006fda:	bf00      	nop
 8006fdc:	e000      	b.n	8006fe0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8006fde:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006fe0:	7dfb      	ldrb	r3, [r7, #23]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d10c      	bne.n	8007000 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006fe6:	4b05      	ldr	r3, [pc, #20]	; (8006ffc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006fe8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fea:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006ff4:	4901      	ldr	r1, [pc, #4]	; (8006ffc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006ff6:	4313      	orrs	r3, r2
 8006ff8:	658b      	str	r3, [r1, #88]	; 0x58
 8006ffa:	e003      	b.n	8007004 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8006ffc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007000:	7dfb      	ldrb	r3, [r7, #23]
 8007002:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800700c:	2b00      	cmp	r3, #0
 800700e:	d04b      	beq.n	80070a8 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007016:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800701a:	d02e      	beq.n	800707a <HAL_RCCEx_PeriphCLKConfig+0xb22>
 800701c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007020:	d828      	bhi.n	8007074 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8007022:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007026:	d02a      	beq.n	800707e <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8007028:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800702c:	d822      	bhi.n	8007074 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800702e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007032:	d026      	beq.n	8007082 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8007034:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007038:	d81c      	bhi.n	8007074 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800703a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800703e:	d010      	beq.n	8007062 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8007040:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007044:	d816      	bhi.n	8007074 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8007046:	2b00      	cmp	r3, #0
 8007048:	d01d      	beq.n	8007086 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 800704a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800704e:	d111      	bne.n	8007074 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	3304      	adds	r3, #4
 8007054:	2100      	movs	r1, #0
 8007056:	4618      	mov	r0, r3
 8007058:	f000 fc82 	bl	8007960 <RCCEx_PLL2_Config>
 800705c:	4603      	mov	r3, r0
 800705e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007060:	e012      	b.n	8007088 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	3324      	adds	r3, #36	; 0x24
 8007066:	2102      	movs	r1, #2
 8007068:	4618      	mov	r0, r3
 800706a:	f000 fd2b 	bl	8007ac4 <RCCEx_PLL3_Config>
 800706e:	4603      	mov	r3, r0
 8007070:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007072:	e009      	b.n	8007088 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007074:	2301      	movs	r3, #1
 8007076:	75fb      	strb	r3, [r7, #23]
      break;
 8007078:	e006      	b.n	8007088 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800707a:	bf00      	nop
 800707c:	e004      	b.n	8007088 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800707e:	bf00      	nop
 8007080:	e002      	b.n	8007088 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8007082:	bf00      	nop
 8007084:	e000      	b.n	8007088 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8007086:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007088:	7dfb      	ldrb	r3, [r7, #23]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d10a      	bne.n	80070a4 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800708e:	4b9d      	ldr	r3, [pc, #628]	; (8007304 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007090:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007092:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800709c:	4999      	ldr	r1, [pc, #612]	; (8007304 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800709e:	4313      	orrs	r3, r2
 80070a0:	658b      	str	r3, [r1, #88]	; 0x58
 80070a2:	e001      	b.n	80070a8 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070a4:	7dfb      	ldrb	r3, [r7, #23]
 80070a6:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f003 0308 	and.w	r3, r3, #8
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d01a      	beq.n	80070ea <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80070ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070be:	d10a      	bne.n	80070d6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	3324      	adds	r3, #36	; 0x24
 80070c4:	2102      	movs	r1, #2
 80070c6:	4618      	mov	r0, r3
 80070c8:	f000 fcfc 	bl	8007ac4 <RCCEx_PLL3_Config>
 80070cc:	4603      	mov	r3, r0
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d001      	beq.n	80070d6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 80070d2:	2301      	movs	r3, #1
 80070d4:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80070d6:	4b8b      	ldr	r3, [pc, #556]	; (8007304 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80070d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070da:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80070e4:	4987      	ldr	r1, [pc, #540]	; (8007304 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80070e6:	4313      	orrs	r3, r2
 80070e8:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f003 0310 	and.w	r3, r3, #16
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d01a      	beq.n	800712c <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80070fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007100:	d10a      	bne.n	8007118 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	3324      	adds	r3, #36	; 0x24
 8007106:	2102      	movs	r1, #2
 8007108:	4618      	mov	r0, r3
 800710a:	f000 fcdb 	bl	8007ac4 <RCCEx_PLL3_Config>
 800710e:	4603      	mov	r3, r0
 8007110:	2b00      	cmp	r3, #0
 8007112:	d001      	beq.n	8007118 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8007114:	2301      	movs	r3, #1
 8007116:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007118:	4b7a      	ldr	r3, [pc, #488]	; (8007304 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800711a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800711c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007126:	4977      	ldr	r1, [pc, #476]	; (8007304 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007128:	4313      	orrs	r3, r2
 800712a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007134:	2b00      	cmp	r3, #0
 8007136:	d034      	beq.n	80071a2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800713e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007142:	d01d      	beq.n	8007180 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8007144:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007148:	d817      	bhi.n	800717a <HAL_RCCEx_PeriphCLKConfig+0xc22>
 800714a:	2b00      	cmp	r3, #0
 800714c:	d003      	beq.n	8007156 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800714e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007152:	d009      	beq.n	8007168 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8007154:	e011      	b.n	800717a <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	3304      	adds	r3, #4
 800715a:	2100      	movs	r1, #0
 800715c:	4618      	mov	r0, r3
 800715e:	f000 fbff 	bl	8007960 <RCCEx_PLL2_Config>
 8007162:	4603      	mov	r3, r0
 8007164:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007166:	e00c      	b.n	8007182 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	3324      	adds	r3, #36	; 0x24
 800716c:	2102      	movs	r1, #2
 800716e:	4618      	mov	r0, r3
 8007170:	f000 fca8 	bl	8007ac4 <RCCEx_PLL3_Config>
 8007174:	4603      	mov	r3, r0
 8007176:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007178:	e003      	b.n	8007182 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800717a:	2301      	movs	r3, #1
 800717c:	75fb      	strb	r3, [r7, #23]
      break;
 800717e:	e000      	b.n	8007182 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8007180:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007182:	7dfb      	ldrb	r3, [r7, #23]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d10a      	bne.n	800719e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007188:	4b5e      	ldr	r3, [pc, #376]	; (8007304 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800718a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800718c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007196:	495b      	ldr	r1, [pc, #364]	; (8007304 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007198:	4313      	orrs	r3, r2
 800719a:	658b      	str	r3, [r1, #88]	; 0x58
 800719c:	e001      	b.n	80071a2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800719e:	7dfb      	ldrb	r3, [r7, #23]
 80071a0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d033      	beq.n	8007216 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80071b4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80071b8:	d01c      	beq.n	80071f4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 80071ba:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80071be:	d816      	bhi.n	80071ee <HAL_RCCEx_PeriphCLKConfig+0xc96>
 80071c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80071c4:	d003      	beq.n	80071ce <HAL_RCCEx_PeriphCLKConfig+0xc76>
 80071c6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80071ca:	d007      	beq.n	80071dc <HAL_RCCEx_PeriphCLKConfig+0xc84>
 80071cc:	e00f      	b.n	80071ee <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80071ce:	4b4d      	ldr	r3, [pc, #308]	; (8007304 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80071d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071d2:	4a4c      	ldr	r2, [pc, #304]	; (8007304 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80071d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80071d8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80071da:	e00c      	b.n	80071f6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	3324      	adds	r3, #36	; 0x24
 80071e0:	2101      	movs	r1, #1
 80071e2:	4618      	mov	r0, r3
 80071e4:	f000 fc6e 	bl	8007ac4 <RCCEx_PLL3_Config>
 80071e8:	4603      	mov	r3, r0
 80071ea:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80071ec:	e003      	b.n	80071f6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80071ee:	2301      	movs	r3, #1
 80071f0:	75fb      	strb	r3, [r7, #23]
      break;
 80071f2:	e000      	b.n	80071f6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 80071f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80071f6:	7dfb      	ldrb	r3, [r7, #23]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d10a      	bne.n	8007212 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80071fc:	4b41      	ldr	r3, [pc, #260]	; (8007304 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80071fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007200:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800720a:	493e      	ldr	r1, [pc, #248]	; (8007304 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800720c:	4313      	orrs	r3, r2
 800720e:	654b      	str	r3, [r1, #84]	; 0x54
 8007210:	e001      	b.n	8007216 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007212:	7dfb      	ldrb	r3, [r7, #23]
 8007214:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800721e:	2b00      	cmp	r3, #0
 8007220:	d029      	beq.n	8007276 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007226:	2b00      	cmp	r3, #0
 8007228:	d003      	beq.n	8007232 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 800722a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800722e:	d007      	beq.n	8007240 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8007230:	e00f      	b.n	8007252 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007232:	4b34      	ldr	r3, [pc, #208]	; (8007304 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007236:	4a33      	ldr	r2, [pc, #204]	; (8007304 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007238:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800723c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800723e:	e00b      	b.n	8007258 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	3304      	adds	r3, #4
 8007244:	2102      	movs	r1, #2
 8007246:	4618      	mov	r0, r3
 8007248:	f000 fb8a 	bl	8007960 <RCCEx_PLL2_Config>
 800724c:	4603      	mov	r3, r0
 800724e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007250:	e002      	b.n	8007258 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8007252:	2301      	movs	r3, #1
 8007254:	75fb      	strb	r3, [r7, #23]
      break;
 8007256:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007258:	7dfb      	ldrb	r3, [r7, #23]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d109      	bne.n	8007272 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800725e:	4b29      	ldr	r3, [pc, #164]	; (8007304 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007260:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007262:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800726a:	4926      	ldr	r1, [pc, #152]	; (8007304 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800726c:	4313      	orrs	r3, r2
 800726e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007270:	e001      	b.n	8007276 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007272:	7dfb      	ldrb	r3, [r7, #23]
 8007274:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800727e:	2b00      	cmp	r3, #0
 8007280:	d00a      	beq.n	8007298 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	3324      	adds	r3, #36	; 0x24
 8007286:	2102      	movs	r1, #2
 8007288:	4618      	mov	r0, r3
 800728a:	f000 fc1b 	bl	8007ac4 <RCCEx_PLL3_Config>
 800728e:	4603      	mov	r3, r0
 8007290:	2b00      	cmp	r3, #0
 8007292:	d001      	beq.n	8007298 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8007294:	2301      	movs	r3, #1
 8007296:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d033      	beq.n	800730c <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80072a8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80072ac:	d017      	beq.n	80072de <HAL_RCCEx_PeriphCLKConfig+0xd86>
 80072ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80072b2:	d811      	bhi.n	80072d8 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80072b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80072b8:	d013      	beq.n	80072e2 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 80072ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80072be:	d80b      	bhi.n	80072d8 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d010      	beq.n	80072e6 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 80072c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072c8:	d106      	bne.n	80072d8 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80072ca:	4b0e      	ldr	r3, [pc, #56]	; (8007304 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80072cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072ce:	4a0d      	ldr	r2, [pc, #52]	; (8007304 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80072d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80072d4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80072d6:	e007      	b.n	80072e8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80072d8:	2301      	movs	r3, #1
 80072da:	75fb      	strb	r3, [r7, #23]
      break;
 80072dc:	e004      	b.n	80072e8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80072de:	bf00      	nop
 80072e0:	e002      	b.n	80072e8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80072e2:	bf00      	nop
 80072e4:	e000      	b.n	80072e8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80072e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80072e8:	7dfb      	ldrb	r3, [r7, #23]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d10c      	bne.n	8007308 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80072ee:	4b05      	ldr	r3, [pc, #20]	; (8007304 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80072f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072f2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80072fa:	4902      	ldr	r1, [pc, #8]	; (8007304 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80072fc:	4313      	orrs	r3, r2
 80072fe:	654b      	str	r3, [r1, #84]	; 0x54
 8007300:	e004      	b.n	800730c <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8007302:	bf00      	nop
 8007304:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007308:	7dfb      	ldrb	r3, [r7, #23]
 800730a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007314:	2b00      	cmp	r3, #0
 8007316:	d008      	beq.n	800732a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007318:	4b31      	ldr	r3, [pc, #196]	; (80073e0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800731a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800731c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007324:	492e      	ldr	r1, [pc, #184]	; (80073e0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007326:	4313      	orrs	r3, r2
 8007328:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007332:	2b00      	cmp	r3, #0
 8007334:	d009      	beq.n	800734a <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007336:	4b2a      	ldr	r3, [pc, #168]	; (80073e0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007338:	691b      	ldr	r3, [r3, #16]
 800733a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007344:	4926      	ldr	r1, [pc, #152]	; (80073e0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007346:	4313      	orrs	r3, r2
 8007348:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007352:	2b00      	cmp	r3, #0
 8007354:	d008      	beq.n	8007368 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007356:	4b22      	ldr	r3, [pc, #136]	; (80073e0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007358:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800735a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007362:	491f      	ldr	r1, [pc, #124]	; (80073e0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007364:	4313      	orrs	r3, r2
 8007366:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007370:	2b00      	cmp	r3, #0
 8007372:	d00d      	beq.n	8007390 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007374:	4b1a      	ldr	r3, [pc, #104]	; (80073e0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007376:	691b      	ldr	r3, [r3, #16]
 8007378:	4a19      	ldr	r2, [pc, #100]	; (80073e0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800737a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800737e:	6113      	str	r3, [r2, #16]
 8007380:	4b17      	ldr	r3, [pc, #92]	; (80073e0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007382:	691a      	ldr	r2, [r3, #16]
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800738a:	4915      	ldr	r1, [pc, #84]	; (80073e0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800738c:	4313      	orrs	r3, r2
 800738e:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	2b00      	cmp	r3, #0
 8007396:	da08      	bge.n	80073aa <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007398:	4b11      	ldr	r3, [pc, #68]	; (80073e0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800739a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800739c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073a4:	490e      	ldr	r1, [pc, #56]	; (80073e0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80073a6:	4313      	orrs	r3, r2
 80073a8:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d009      	beq.n	80073ca <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80073b6:	4b0a      	ldr	r3, [pc, #40]	; (80073e0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80073b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073ba:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073c4:	4906      	ldr	r1, [pc, #24]	; (80073e0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80073c6:	4313      	orrs	r3, r2
 80073c8:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80073ca:	7dbb      	ldrb	r3, [r7, #22]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d101      	bne.n	80073d4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 80073d0:	2300      	movs	r3, #0
 80073d2:	e000      	b.n	80073d6 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 80073d4:	2301      	movs	r3, #1
}
 80073d6:	4618      	mov	r0, r3
 80073d8:	3718      	adds	r7, #24
 80073da:	46bd      	mov	sp, r7
 80073dc:	bd80      	pop	{r7, pc}
 80073de:	bf00      	nop
 80073e0:	58024400 	.word	0x58024400

080073e4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80073e8:	f7ff f818 	bl	800641c <HAL_RCC_GetHCLKFreq>
 80073ec:	4602      	mov	r2, r0
 80073ee:	4b06      	ldr	r3, [pc, #24]	; (8007408 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80073f0:	6a1b      	ldr	r3, [r3, #32]
 80073f2:	091b      	lsrs	r3, r3, #4
 80073f4:	f003 0307 	and.w	r3, r3, #7
 80073f8:	4904      	ldr	r1, [pc, #16]	; (800740c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80073fa:	5ccb      	ldrb	r3, [r1, r3]
 80073fc:	f003 031f 	and.w	r3, r3, #31
 8007400:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007404:	4618      	mov	r0, r3
 8007406:	bd80      	pop	{r7, pc}
 8007408:	58024400 	.word	0x58024400
 800740c:	08026ed8 	.word	0x08026ed8

08007410 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8007410:	b480      	push	{r7}
 8007412:	b089      	sub	sp, #36	; 0x24
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007418:	4ba1      	ldr	r3, [pc, #644]	; (80076a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800741a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800741c:	f003 0303 	and.w	r3, r3, #3
 8007420:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8007422:	4b9f      	ldr	r3, [pc, #636]	; (80076a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007426:	0b1b      	lsrs	r3, r3, #12
 8007428:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800742c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800742e:	4b9c      	ldr	r3, [pc, #624]	; (80076a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007432:	091b      	lsrs	r3, r3, #4
 8007434:	f003 0301 	and.w	r3, r3, #1
 8007438:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800743a:	4b99      	ldr	r3, [pc, #612]	; (80076a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800743c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800743e:	08db      	lsrs	r3, r3, #3
 8007440:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007444:	693a      	ldr	r2, [r7, #16]
 8007446:	fb02 f303 	mul.w	r3, r2, r3
 800744a:	ee07 3a90 	vmov	s15, r3
 800744e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007452:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007456:	697b      	ldr	r3, [r7, #20]
 8007458:	2b00      	cmp	r3, #0
 800745a:	f000 8111 	beq.w	8007680 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800745e:	69bb      	ldr	r3, [r7, #24]
 8007460:	2b02      	cmp	r3, #2
 8007462:	f000 8083 	beq.w	800756c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007466:	69bb      	ldr	r3, [r7, #24]
 8007468:	2b02      	cmp	r3, #2
 800746a:	f200 80a1 	bhi.w	80075b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800746e:	69bb      	ldr	r3, [r7, #24]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d003      	beq.n	800747c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007474:	69bb      	ldr	r3, [r7, #24]
 8007476:	2b01      	cmp	r3, #1
 8007478:	d056      	beq.n	8007528 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800747a:	e099      	b.n	80075b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800747c:	4b88      	ldr	r3, [pc, #544]	; (80076a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	f003 0320 	and.w	r3, r3, #32
 8007484:	2b00      	cmp	r3, #0
 8007486:	d02d      	beq.n	80074e4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007488:	4b85      	ldr	r3, [pc, #532]	; (80076a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	08db      	lsrs	r3, r3, #3
 800748e:	f003 0303 	and.w	r3, r3, #3
 8007492:	4a84      	ldr	r2, [pc, #528]	; (80076a4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007494:	fa22 f303 	lsr.w	r3, r2, r3
 8007498:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800749a:	68bb      	ldr	r3, [r7, #8]
 800749c:	ee07 3a90 	vmov	s15, r3
 80074a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074a4:	697b      	ldr	r3, [r7, #20]
 80074a6:	ee07 3a90 	vmov	s15, r3
 80074aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074b2:	4b7b      	ldr	r3, [pc, #492]	; (80076a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80074b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074ba:	ee07 3a90 	vmov	s15, r3
 80074be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80074c6:	eddf 5a78 	vldr	s11, [pc, #480]	; 80076a8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80074ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80074d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074de:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80074e2:	e087      	b.n	80075f4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80074e4:	697b      	ldr	r3, [r7, #20]
 80074e6:	ee07 3a90 	vmov	s15, r3
 80074ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074ee:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80076ac <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80074f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074f6:	4b6a      	ldr	r3, [pc, #424]	; (80076a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80074f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074fe:	ee07 3a90 	vmov	s15, r3
 8007502:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007506:	ed97 6a03 	vldr	s12, [r7, #12]
 800750a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80076a8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800750e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007512:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007516:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800751a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800751e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007522:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007526:	e065      	b.n	80075f4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007528:	697b      	ldr	r3, [r7, #20]
 800752a:	ee07 3a90 	vmov	s15, r3
 800752e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007532:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80076b0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007536:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800753a:	4b59      	ldr	r3, [pc, #356]	; (80076a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800753c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800753e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007542:	ee07 3a90 	vmov	s15, r3
 8007546:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800754a:	ed97 6a03 	vldr	s12, [r7, #12]
 800754e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80076a8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007552:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007556:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800755a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800755e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007562:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007566:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800756a:	e043      	b.n	80075f4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800756c:	697b      	ldr	r3, [r7, #20]
 800756e:	ee07 3a90 	vmov	s15, r3
 8007572:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007576:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80076b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800757a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800757e:	4b48      	ldr	r3, [pc, #288]	; (80076a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007580:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007582:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007586:	ee07 3a90 	vmov	s15, r3
 800758a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800758e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007592:	eddf 5a45 	vldr	s11, [pc, #276]	; 80076a8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007596:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800759a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800759e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80075a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075aa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80075ae:	e021      	b.n	80075f4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80075b0:	697b      	ldr	r3, [r7, #20]
 80075b2:	ee07 3a90 	vmov	s15, r3
 80075b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075ba:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80076b0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80075be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075c2:	4b37      	ldr	r3, [pc, #220]	; (80076a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80075c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075ca:	ee07 3a90 	vmov	s15, r3
 80075ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80075d6:	eddf 5a34 	vldr	s11, [pc, #208]	; 80076a8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80075da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80075e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075ee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80075f2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80075f4:	4b2a      	ldr	r3, [pc, #168]	; (80076a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80075f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075f8:	0a5b      	lsrs	r3, r3, #9
 80075fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075fe:	ee07 3a90 	vmov	s15, r3
 8007602:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007606:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800760a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800760e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007612:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007616:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800761a:	ee17 2a90 	vmov	r2, s15
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8007622:	4b1f      	ldr	r3, [pc, #124]	; (80076a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007626:	0c1b      	lsrs	r3, r3, #16
 8007628:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800762c:	ee07 3a90 	vmov	s15, r3
 8007630:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007634:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007638:	ee37 7a87 	vadd.f32	s14, s15, s14
 800763c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007640:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007644:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007648:	ee17 2a90 	vmov	r2, s15
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8007650:	4b13      	ldr	r3, [pc, #76]	; (80076a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007654:	0e1b      	lsrs	r3, r3, #24
 8007656:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800765a:	ee07 3a90 	vmov	s15, r3
 800765e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007662:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007666:	ee37 7a87 	vadd.f32	s14, s15, s14
 800766a:	edd7 6a07 	vldr	s13, [r7, #28]
 800766e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007672:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007676:	ee17 2a90 	vmov	r2, s15
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800767e:	e008      	b.n	8007692 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2200      	movs	r2, #0
 8007684:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	2200      	movs	r2, #0
 800768a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2200      	movs	r2, #0
 8007690:	609a      	str	r2, [r3, #8]
}
 8007692:	bf00      	nop
 8007694:	3724      	adds	r7, #36	; 0x24
 8007696:	46bd      	mov	sp, r7
 8007698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769c:	4770      	bx	lr
 800769e:	bf00      	nop
 80076a0:	58024400 	.word	0x58024400
 80076a4:	03d09000 	.word	0x03d09000
 80076a8:	46000000 	.word	0x46000000
 80076ac:	4c742400 	.word	0x4c742400
 80076b0:	4a742400 	.word	0x4a742400
 80076b4:	4af42400 	.word	0x4af42400

080076b8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80076b8:	b480      	push	{r7}
 80076ba:	b089      	sub	sp, #36	; 0x24
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80076c0:	4ba1      	ldr	r3, [pc, #644]	; (8007948 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80076c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076c4:	f003 0303 	and.w	r3, r3, #3
 80076c8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80076ca:	4b9f      	ldr	r3, [pc, #636]	; (8007948 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80076cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076ce:	0d1b      	lsrs	r3, r3, #20
 80076d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80076d4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80076d6:	4b9c      	ldr	r3, [pc, #624]	; (8007948 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80076d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076da:	0a1b      	lsrs	r3, r3, #8
 80076dc:	f003 0301 	and.w	r3, r3, #1
 80076e0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80076e2:	4b99      	ldr	r3, [pc, #612]	; (8007948 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80076e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076e6:	08db      	lsrs	r3, r3, #3
 80076e8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80076ec:	693a      	ldr	r2, [r7, #16]
 80076ee:	fb02 f303 	mul.w	r3, r2, r3
 80076f2:	ee07 3a90 	vmov	s15, r3
 80076f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076fa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80076fe:	697b      	ldr	r3, [r7, #20]
 8007700:	2b00      	cmp	r3, #0
 8007702:	f000 8111 	beq.w	8007928 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007706:	69bb      	ldr	r3, [r7, #24]
 8007708:	2b02      	cmp	r3, #2
 800770a:	f000 8083 	beq.w	8007814 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800770e:	69bb      	ldr	r3, [r7, #24]
 8007710:	2b02      	cmp	r3, #2
 8007712:	f200 80a1 	bhi.w	8007858 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007716:	69bb      	ldr	r3, [r7, #24]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d003      	beq.n	8007724 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800771c:	69bb      	ldr	r3, [r7, #24]
 800771e:	2b01      	cmp	r3, #1
 8007720:	d056      	beq.n	80077d0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007722:	e099      	b.n	8007858 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007724:	4b88      	ldr	r3, [pc, #544]	; (8007948 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	f003 0320 	and.w	r3, r3, #32
 800772c:	2b00      	cmp	r3, #0
 800772e:	d02d      	beq.n	800778c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007730:	4b85      	ldr	r3, [pc, #532]	; (8007948 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	08db      	lsrs	r3, r3, #3
 8007736:	f003 0303 	and.w	r3, r3, #3
 800773a:	4a84      	ldr	r2, [pc, #528]	; (800794c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800773c:	fa22 f303 	lsr.w	r3, r2, r3
 8007740:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007742:	68bb      	ldr	r3, [r7, #8]
 8007744:	ee07 3a90 	vmov	s15, r3
 8007748:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800774c:	697b      	ldr	r3, [r7, #20]
 800774e:	ee07 3a90 	vmov	s15, r3
 8007752:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007756:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800775a:	4b7b      	ldr	r3, [pc, #492]	; (8007948 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800775c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800775e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007762:	ee07 3a90 	vmov	s15, r3
 8007766:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800776a:	ed97 6a03 	vldr	s12, [r7, #12]
 800776e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007950 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007772:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007776:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800777a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800777e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007782:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007786:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800778a:	e087      	b.n	800789c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800778c:	697b      	ldr	r3, [r7, #20]
 800778e:	ee07 3a90 	vmov	s15, r3
 8007792:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007796:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007954 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800779a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800779e:	4b6a      	ldr	r3, [pc, #424]	; (8007948 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80077a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077a6:	ee07 3a90 	vmov	s15, r3
 80077aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80077b2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007950 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80077b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80077ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80077c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077ca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80077ce:	e065      	b.n	800789c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80077d0:	697b      	ldr	r3, [r7, #20]
 80077d2:	ee07 3a90 	vmov	s15, r3
 80077d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077da:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007958 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80077de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80077e2:	4b59      	ldr	r3, [pc, #356]	; (8007948 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80077e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077ea:	ee07 3a90 	vmov	s15, r3
 80077ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80077f6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007950 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80077fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80077fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007802:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007806:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800780a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800780e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007812:	e043      	b.n	800789c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007814:	697b      	ldr	r3, [r7, #20]
 8007816:	ee07 3a90 	vmov	s15, r3
 800781a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800781e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800795c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007822:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007826:	4b48      	ldr	r3, [pc, #288]	; (8007948 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800782a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800782e:	ee07 3a90 	vmov	s15, r3
 8007832:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007836:	ed97 6a03 	vldr	s12, [r7, #12]
 800783a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007950 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800783e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007842:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007846:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800784a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800784e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007852:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007856:	e021      	b.n	800789c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007858:	697b      	ldr	r3, [r7, #20]
 800785a:	ee07 3a90 	vmov	s15, r3
 800785e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007862:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007958 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007866:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800786a:	4b37      	ldr	r3, [pc, #220]	; (8007948 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800786c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800786e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007872:	ee07 3a90 	vmov	s15, r3
 8007876:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800787a:	ed97 6a03 	vldr	s12, [r7, #12]
 800787e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007950 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007882:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007886:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800788a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800788e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007892:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007896:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800789a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800789c:	4b2a      	ldr	r3, [pc, #168]	; (8007948 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800789e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078a0:	0a5b      	lsrs	r3, r3, #9
 80078a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078a6:	ee07 3a90 	vmov	s15, r3
 80078aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078ae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80078b2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80078b6:	edd7 6a07 	vldr	s13, [r7, #28]
 80078ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80078be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80078c2:	ee17 2a90 	vmov	r2, s15
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80078ca:	4b1f      	ldr	r3, [pc, #124]	; (8007948 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80078cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078ce:	0c1b      	lsrs	r3, r3, #16
 80078d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078d4:	ee07 3a90 	vmov	s15, r3
 80078d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078dc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80078e0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80078e4:	edd7 6a07 	vldr	s13, [r7, #28]
 80078e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80078ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80078f0:	ee17 2a90 	vmov	r2, s15
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80078f8:	4b13      	ldr	r3, [pc, #76]	; (8007948 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80078fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078fc:	0e1b      	lsrs	r3, r3, #24
 80078fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007902:	ee07 3a90 	vmov	s15, r3
 8007906:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800790a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800790e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007912:	edd7 6a07 	vldr	s13, [r7, #28]
 8007916:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800791a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800791e:	ee17 2a90 	vmov	r2, s15
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007926:	e008      	b.n	800793a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2200      	movs	r2, #0
 800792c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2200      	movs	r2, #0
 8007932:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2200      	movs	r2, #0
 8007938:	609a      	str	r2, [r3, #8]
}
 800793a:	bf00      	nop
 800793c:	3724      	adds	r7, #36	; 0x24
 800793e:	46bd      	mov	sp, r7
 8007940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007944:	4770      	bx	lr
 8007946:	bf00      	nop
 8007948:	58024400 	.word	0x58024400
 800794c:	03d09000 	.word	0x03d09000
 8007950:	46000000 	.word	0x46000000
 8007954:	4c742400 	.word	0x4c742400
 8007958:	4a742400 	.word	0x4a742400
 800795c:	4af42400 	.word	0x4af42400

08007960 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b084      	sub	sp, #16
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
 8007968:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800796a:	2300      	movs	r3, #0
 800796c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800796e:	4b53      	ldr	r3, [pc, #332]	; (8007abc <RCCEx_PLL2_Config+0x15c>)
 8007970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007972:	f003 0303 	and.w	r3, r3, #3
 8007976:	2b03      	cmp	r3, #3
 8007978:	d101      	bne.n	800797e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800797a:	2301      	movs	r3, #1
 800797c:	e099      	b.n	8007ab2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800797e:	4b4f      	ldr	r3, [pc, #316]	; (8007abc <RCCEx_PLL2_Config+0x15c>)
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	4a4e      	ldr	r2, [pc, #312]	; (8007abc <RCCEx_PLL2_Config+0x15c>)
 8007984:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007988:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800798a:	f7fb f927 	bl	8002bdc <HAL_GetTick>
 800798e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007990:	e008      	b.n	80079a4 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007992:	f7fb f923 	bl	8002bdc <HAL_GetTick>
 8007996:	4602      	mov	r2, r0
 8007998:	68bb      	ldr	r3, [r7, #8]
 800799a:	1ad3      	subs	r3, r2, r3
 800799c:	2b02      	cmp	r3, #2
 800799e:	d901      	bls.n	80079a4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80079a0:	2303      	movs	r3, #3
 80079a2:	e086      	b.n	8007ab2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80079a4:	4b45      	ldr	r3, [pc, #276]	; (8007abc <RCCEx_PLL2_Config+0x15c>)
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d1f0      	bne.n	8007992 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80079b0:	4b42      	ldr	r3, [pc, #264]	; (8007abc <RCCEx_PLL2_Config+0x15c>)
 80079b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079b4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	031b      	lsls	r3, r3, #12
 80079be:	493f      	ldr	r1, [pc, #252]	; (8007abc <RCCEx_PLL2_Config+0x15c>)
 80079c0:	4313      	orrs	r3, r2
 80079c2:	628b      	str	r3, [r1, #40]	; 0x28
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	685b      	ldr	r3, [r3, #4]
 80079c8:	3b01      	subs	r3, #1
 80079ca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	689b      	ldr	r3, [r3, #8]
 80079d2:	3b01      	subs	r3, #1
 80079d4:	025b      	lsls	r3, r3, #9
 80079d6:	b29b      	uxth	r3, r3
 80079d8:	431a      	orrs	r2, r3
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	68db      	ldr	r3, [r3, #12]
 80079de:	3b01      	subs	r3, #1
 80079e0:	041b      	lsls	r3, r3, #16
 80079e2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80079e6:	431a      	orrs	r2, r3
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	691b      	ldr	r3, [r3, #16]
 80079ec:	3b01      	subs	r3, #1
 80079ee:	061b      	lsls	r3, r3, #24
 80079f0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80079f4:	4931      	ldr	r1, [pc, #196]	; (8007abc <RCCEx_PLL2_Config+0x15c>)
 80079f6:	4313      	orrs	r3, r2
 80079f8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80079fa:	4b30      	ldr	r3, [pc, #192]	; (8007abc <RCCEx_PLL2_Config+0x15c>)
 80079fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079fe:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	695b      	ldr	r3, [r3, #20]
 8007a06:	492d      	ldr	r1, [pc, #180]	; (8007abc <RCCEx_PLL2_Config+0x15c>)
 8007a08:	4313      	orrs	r3, r2
 8007a0a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007a0c:	4b2b      	ldr	r3, [pc, #172]	; (8007abc <RCCEx_PLL2_Config+0x15c>)
 8007a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a10:	f023 0220 	bic.w	r2, r3, #32
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	699b      	ldr	r3, [r3, #24]
 8007a18:	4928      	ldr	r1, [pc, #160]	; (8007abc <RCCEx_PLL2_Config+0x15c>)
 8007a1a:	4313      	orrs	r3, r2
 8007a1c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007a1e:	4b27      	ldr	r3, [pc, #156]	; (8007abc <RCCEx_PLL2_Config+0x15c>)
 8007a20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a22:	4a26      	ldr	r2, [pc, #152]	; (8007abc <RCCEx_PLL2_Config+0x15c>)
 8007a24:	f023 0310 	bic.w	r3, r3, #16
 8007a28:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007a2a:	4b24      	ldr	r3, [pc, #144]	; (8007abc <RCCEx_PLL2_Config+0x15c>)
 8007a2c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007a2e:	4b24      	ldr	r3, [pc, #144]	; (8007ac0 <RCCEx_PLL2_Config+0x160>)
 8007a30:	4013      	ands	r3, r2
 8007a32:	687a      	ldr	r2, [r7, #4]
 8007a34:	69d2      	ldr	r2, [r2, #28]
 8007a36:	00d2      	lsls	r2, r2, #3
 8007a38:	4920      	ldr	r1, [pc, #128]	; (8007abc <RCCEx_PLL2_Config+0x15c>)
 8007a3a:	4313      	orrs	r3, r2
 8007a3c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007a3e:	4b1f      	ldr	r3, [pc, #124]	; (8007abc <RCCEx_PLL2_Config+0x15c>)
 8007a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a42:	4a1e      	ldr	r2, [pc, #120]	; (8007abc <RCCEx_PLL2_Config+0x15c>)
 8007a44:	f043 0310 	orr.w	r3, r3, #16
 8007a48:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007a4a:	683b      	ldr	r3, [r7, #0]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d106      	bne.n	8007a5e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007a50:	4b1a      	ldr	r3, [pc, #104]	; (8007abc <RCCEx_PLL2_Config+0x15c>)
 8007a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a54:	4a19      	ldr	r2, [pc, #100]	; (8007abc <RCCEx_PLL2_Config+0x15c>)
 8007a56:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007a5a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007a5c:	e00f      	b.n	8007a7e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	2b01      	cmp	r3, #1
 8007a62:	d106      	bne.n	8007a72 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007a64:	4b15      	ldr	r3, [pc, #84]	; (8007abc <RCCEx_PLL2_Config+0x15c>)
 8007a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a68:	4a14      	ldr	r2, [pc, #80]	; (8007abc <RCCEx_PLL2_Config+0x15c>)
 8007a6a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007a6e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007a70:	e005      	b.n	8007a7e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007a72:	4b12      	ldr	r3, [pc, #72]	; (8007abc <RCCEx_PLL2_Config+0x15c>)
 8007a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a76:	4a11      	ldr	r2, [pc, #68]	; (8007abc <RCCEx_PLL2_Config+0x15c>)
 8007a78:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007a7c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007a7e:	4b0f      	ldr	r3, [pc, #60]	; (8007abc <RCCEx_PLL2_Config+0x15c>)
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	4a0e      	ldr	r2, [pc, #56]	; (8007abc <RCCEx_PLL2_Config+0x15c>)
 8007a84:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007a88:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007a8a:	f7fb f8a7 	bl	8002bdc <HAL_GetTick>
 8007a8e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007a90:	e008      	b.n	8007aa4 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007a92:	f7fb f8a3 	bl	8002bdc <HAL_GetTick>
 8007a96:	4602      	mov	r2, r0
 8007a98:	68bb      	ldr	r3, [r7, #8]
 8007a9a:	1ad3      	subs	r3, r2, r3
 8007a9c:	2b02      	cmp	r3, #2
 8007a9e:	d901      	bls.n	8007aa4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007aa0:	2303      	movs	r3, #3
 8007aa2:	e006      	b.n	8007ab2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007aa4:	4b05      	ldr	r3, [pc, #20]	; (8007abc <RCCEx_PLL2_Config+0x15c>)
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d0f0      	beq.n	8007a92 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007ab0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	3710      	adds	r7, #16
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	bd80      	pop	{r7, pc}
 8007aba:	bf00      	nop
 8007abc:	58024400 	.word	0x58024400
 8007ac0:	ffff0007 	.word	0xffff0007

08007ac4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b084      	sub	sp, #16
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
 8007acc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007ace:	2300      	movs	r3, #0
 8007ad0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007ad2:	4b53      	ldr	r3, [pc, #332]	; (8007c20 <RCCEx_PLL3_Config+0x15c>)
 8007ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ad6:	f003 0303 	and.w	r3, r3, #3
 8007ada:	2b03      	cmp	r3, #3
 8007adc:	d101      	bne.n	8007ae2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007ade:	2301      	movs	r3, #1
 8007ae0:	e099      	b.n	8007c16 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007ae2:	4b4f      	ldr	r3, [pc, #316]	; (8007c20 <RCCEx_PLL3_Config+0x15c>)
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	4a4e      	ldr	r2, [pc, #312]	; (8007c20 <RCCEx_PLL3_Config+0x15c>)
 8007ae8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007aec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007aee:	f7fb f875 	bl	8002bdc <HAL_GetTick>
 8007af2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007af4:	e008      	b.n	8007b08 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007af6:	f7fb f871 	bl	8002bdc <HAL_GetTick>
 8007afa:	4602      	mov	r2, r0
 8007afc:	68bb      	ldr	r3, [r7, #8]
 8007afe:	1ad3      	subs	r3, r2, r3
 8007b00:	2b02      	cmp	r3, #2
 8007b02:	d901      	bls.n	8007b08 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007b04:	2303      	movs	r3, #3
 8007b06:	e086      	b.n	8007c16 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007b08:	4b45      	ldr	r3, [pc, #276]	; (8007c20 <RCCEx_PLL3_Config+0x15c>)
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d1f0      	bne.n	8007af6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007b14:	4b42      	ldr	r3, [pc, #264]	; (8007c20 <RCCEx_PLL3_Config+0x15c>)
 8007b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b18:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	051b      	lsls	r3, r3, #20
 8007b22:	493f      	ldr	r1, [pc, #252]	; (8007c20 <RCCEx_PLL3_Config+0x15c>)
 8007b24:	4313      	orrs	r3, r2
 8007b26:	628b      	str	r3, [r1, #40]	; 0x28
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	685b      	ldr	r3, [r3, #4]
 8007b2c:	3b01      	subs	r3, #1
 8007b2e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	689b      	ldr	r3, [r3, #8]
 8007b36:	3b01      	subs	r3, #1
 8007b38:	025b      	lsls	r3, r3, #9
 8007b3a:	b29b      	uxth	r3, r3
 8007b3c:	431a      	orrs	r2, r3
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	68db      	ldr	r3, [r3, #12]
 8007b42:	3b01      	subs	r3, #1
 8007b44:	041b      	lsls	r3, r3, #16
 8007b46:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007b4a:	431a      	orrs	r2, r3
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	691b      	ldr	r3, [r3, #16]
 8007b50:	3b01      	subs	r3, #1
 8007b52:	061b      	lsls	r3, r3, #24
 8007b54:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007b58:	4931      	ldr	r1, [pc, #196]	; (8007c20 <RCCEx_PLL3_Config+0x15c>)
 8007b5a:	4313      	orrs	r3, r2
 8007b5c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007b5e:	4b30      	ldr	r3, [pc, #192]	; (8007c20 <RCCEx_PLL3_Config+0x15c>)
 8007b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b62:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	695b      	ldr	r3, [r3, #20]
 8007b6a:	492d      	ldr	r1, [pc, #180]	; (8007c20 <RCCEx_PLL3_Config+0x15c>)
 8007b6c:	4313      	orrs	r3, r2
 8007b6e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007b70:	4b2b      	ldr	r3, [pc, #172]	; (8007c20 <RCCEx_PLL3_Config+0x15c>)
 8007b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b74:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	699b      	ldr	r3, [r3, #24]
 8007b7c:	4928      	ldr	r1, [pc, #160]	; (8007c20 <RCCEx_PLL3_Config+0x15c>)
 8007b7e:	4313      	orrs	r3, r2
 8007b80:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007b82:	4b27      	ldr	r3, [pc, #156]	; (8007c20 <RCCEx_PLL3_Config+0x15c>)
 8007b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b86:	4a26      	ldr	r2, [pc, #152]	; (8007c20 <RCCEx_PLL3_Config+0x15c>)
 8007b88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007b8c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007b8e:	4b24      	ldr	r3, [pc, #144]	; (8007c20 <RCCEx_PLL3_Config+0x15c>)
 8007b90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007b92:	4b24      	ldr	r3, [pc, #144]	; (8007c24 <RCCEx_PLL3_Config+0x160>)
 8007b94:	4013      	ands	r3, r2
 8007b96:	687a      	ldr	r2, [r7, #4]
 8007b98:	69d2      	ldr	r2, [r2, #28]
 8007b9a:	00d2      	lsls	r2, r2, #3
 8007b9c:	4920      	ldr	r1, [pc, #128]	; (8007c20 <RCCEx_PLL3_Config+0x15c>)
 8007b9e:	4313      	orrs	r3, r2
 8007ba0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007ba2:	4b1f      	ldr	r3, [pc, #124]	; (8007c20 <RCCEx_PLL3_Config+0x15c>)
 8007ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ba6:	4a1e      	ldr	r2, [pc, #120]	; (8007c20 <RCCEx_PLL3_Config+0x15c>)
 8007ba8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007bac:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007bae:	683b      	ldr	r3, [r7, #0]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d106      	bne.n	8007bc2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007bb4:	4b1a      	ldr	r3, [pc, #104]	; (8007c20 <RCCEx_PLL3_Config+0x15c>)
 8007bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bb8:	4a19      	ldr	r2, [pc, #100]	; (8007c20 <RCCEx_PLL3_Config+0x15c>)
 8007bba:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007bbe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007bc0:	e00f      	b.n	8007be2 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007bc2:	683b      	ldr	r3, [r7, #0]
 8007bc4:	2b01      	cmp	r3, #1
 8007bc6:	d106      	bne.n	8007bd6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007bc8:	4b15      	ldr	r3, [pc, #84]	; (8007c20 <RCCEx_PLL3_Config+0x15c>)
 8007bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bcc:	4a14      	ldr	r2, [pc, #80]	; (8007c20 <RCCEx_PLL3_Config+0x15c>)
 8007bce:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007bd2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007bd4:	e005      	b.n	8007be2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007bd6:	4b12      	ldr	r3, [pc, #72]	; (8007c20 <RCCEx_PLL3_Config+0x15c>)
 8007bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bda:	4a11      	ldr	r2, [pc, #68]	; (8007c20 <RCCEx_PLL3_Config+0x15c>)
 8007bdc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007be0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007be2:	4b0f      	ldr	r3, [pc, #60]	; (8007c20 <RCCEx_PLL3_Config+0x15c>)
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	4a0e      	ldr	r2, [pc, #56]	; (8007c20 <RCCEx_PLL3_Config+0x15c>)
 8007be8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007bec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007bee:	f7fa fff5 	bl	8002bdc <HAL_GetTick>
 8007bf2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007bf4:	e008      	b.n	8007c08 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007bf6:	f7fa fff1 	bl	8002bdc <HAL_GetTick>
 8007bfa:	4602      	mov	r2, r0
 8007bfc:	68bb      	ldr	r3, [r7, #8]
 8007bfe:	1ad3      	subs	r3, r2, r3
 8007c00:	2b02      	cmp	r3, #2
 8007c02:	d901      	bls.n	8007c08 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007c04:	2303      	movs	r3, #3
 8007c06:	e006      	b.n	8007c16 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007c08:	4b05      	ldr	r3, [pc, #20]	; (8007c20 <RCCEx_PLL3_Config+0x15c>)
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d0f0      	beq.n	8007bf6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007c14:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c16:	4618      	mov	r0, r3
 8007c18:	3710      	adds	r7, #16
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bd80      	pop	{r7, pc}
 8007c1e:	bf00      	nop
 8007c20:	58024400 	.word	0x58024400
 8007c24:	ffff0007 	.word	0xffff0007

08007c28 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b084      	sub	sp, #16
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_length;
#else
  uint32_t crc_length = 0UL;
 8007c30:	2300      	movs	r3, #0
 8007c32:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d101      	bne.n	8007c3e <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 8007c3a:	2301      	movs	r3, #1
 8007c3c:	e0eb      	b.n	8007e16 <HAL_SPI_Init+0x1ee>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2200      	movs	r2, #0
 8007c42:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	4a75      	ldr	r2, [pc, #468]	; (8007e20 <HAL_SPI_Init+0x1f8>)
 8007c4a:	4293      	cmp	r3, r2
 8007c4c:	d00f      	beq.n	8007c6e <HAL_SPI_Init+0x46>
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	4a74      	ldr	r2, [pc, #464]	; (8007e24 <HAL_SPI_Init+0x1fc>)
 8007c54:	4293      	cmp	r3, r2
 8007c56:	d00a      	beq.n	8007c6e <HAL_SPI_Init+0x46>
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	4a72      	ldr	r2, [pc, #456]	; (8007e28 <HAL_SPI_Init+0x200>)
 8007c5e:	4293      	cmp	r3, r2
 8007c60:	d005      	beq.n	8007c6e <HAL_SPI_Init+0x46>
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	68db      	ldr	r3, [r3, #12]
 8007c66:	2b0f      	cmp	r3, #15
 8007c68:	d901      	bls.n	8007c6e <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 8007c6a:	2301      	movs	r3, #1
 8007c6c:	e0d3      	b.n	8007e16 <HAL_SPI_Init+0x1ee>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8007c6e:	6878      	ldr	r0, [r7, #4]
 8007c70:	f000 fcc8 	bl	8008604 <SPI_GetPacketSize>
 8007c74:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	4a69      	ldr	r2, [pc, #420]	; (8007e20 <HAL_SPI_Init+0x1f8>)
 8007c7c:	4293      	cmp	r3, r2
 8007c7e:	d00c      	beq.n	8007c9a <HAL_SPI_Init+0x72>
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	4a67      	ldr	r2, [pc, #412]	; (8007e24 <HAL_SPI_Init+0x1fc>)
 8007c86:	4293      	cmp	r3, r2
 8007c88:	d007      	beq.n	8007c9a <HAL_SPI_Init+0x72>
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	4a66      	ldr	r2, [pc, #408]	; (8007e28 <HAL_SPI_Init+0x200>)
 8007c90:	4293      	cmp	r3, r2
 8007c92:	d002      	beq.n	8007c9a <HAL_SPI_Init+0x72>
 8007c94:	68bb      	ldr	r3, [r7, #8]
 8007c96:	2b08      	cmp	r3, #8
 8007c98:	d811      	bhi.n	8007cbe <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007c9e:	4a60      	ldr	r2, [pc, #384]	; (8007e20 <HAL_SPI_Init+0x1f8>)
 8007ca0:	4293      	cmp	r3, r2
 8007ca2:	d009      	beq.n	8007cb8 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	4a5e      	ldr	r2, [pc, #376]	; (8007e24 <HAL_SPI_Init+0x1fc>)
 8007caa:	4293      	cmp	r3, r2
 8007cac:	d004      	beq.n	8007cb8 <HAL_SPI_Init+0x90>
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	4a5d      	ldr	r2, [pc, #372]	; (8007e28 <HAL_SPI_Init+0x200>)
 8007cb4:	4293      	cmp	r3, r2
 8007cb6:	d104      	bne.n	8007cc2 <HAL_SPI_Init+0x9a>
 8007cb8:	68bb      	ldr	r3, [r7, #8]
 8007cba:	2b10      	cmp	r3, #16
 8007cbc:	d901      	bls.n	8007cc2 <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 8007cbe:	2301      	movs	r3, #1
 8007cc0:	e0a9      	b.n	8007e16 <HAL_SPI_Init+0x1ee>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007cc8:	b2db      	uxtb	r3, r3
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d106      	bne.n	8007cdc <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007cd6:	6878      	ldr	r0, [r7, #4]
 8007cd8:	f7fa facc 	bl	8002274 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2202      	movs	r2, #2
 8007ce0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	681a      	ldr	r2, [r3, #0]
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	f022 0201 	bic.w	r2, r2, #1
 8007cf2:	601a      	str	r2, [r3, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	699b      	ldr	r3, [r3, #24]
 8007cf8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007cfc:	d119      	bne.n	8007d32 <HAL_SPI_Init+0x10a>
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	685b      	ldr	r3, [r3, #4]
 8007d02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007d06:	d103      	bne.n	8007d10 <HAL_SPI_Init+0xe8>
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d008      	beq.n	8007d22 <HAL_SPI_Init+0xfa>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	685b      	ldr	r3, [r3, #4]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d10c      	bne.n	8007d32 <HAL_SPI_Init+0x10a>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d1c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007d20:	d107      	bne.n	8007d32 <HAL_SPI_Init+0x10a>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	681a      	ldr	r2, [r3, #0]
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007d30:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	69da      	ldr	r2, [r3, #28]
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d3a:	431a      	orrs	r2, r3
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	431a      	orrs	r2, r3
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d44:	ea42 0103 	orr.w	r1, r2, r3
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	68da      	ldr	r2, [r3, #12]
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	430a      	orrs	r2, r1
 8007d52:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d5c:	431a      	orrs	r2, r3
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d62:	431a      	orrs	r2, r3
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	699b      	ldr	r3, [r3, #24]
 8007d68:	431a      	orrs	r2, r3
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	691b      	ldr	r3, [r3, #16]
 8007d6e:	431a      	orrs	r2, r3
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	695b      	ldr	r3, [r3, #20]
 8007d74:	431a      	orrs	r2, r3
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	6a1b      	ldr	r3, [r3, #32]
 8007d7a:	431a      	orrs	r2, r3
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	685b      	ldr	r3, [r3, #4]
 8007d80:	431a      	orrs	r2, r3
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d86:	431a      	orrs	r2, r3
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	689b      	ldr	r3, [r3, #8]
 8007d8c:	431a      	orrs	r2, r3
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d92:	ea42 0103 	orr.w	r1, r2, r3
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	430a      	orrs	r2, r1
 8007da0:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	685b      	ldr	r3, [r3, #4]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d113      	bne.n	8007dd2 <HAL_SPI_Init+0x1aa>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	689b      	ldr	r3, [r3, #8]
 8007db0:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007dbc:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	689b      	ldr	r3, [r3, #8]
 8007dc4:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007dd0:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	f022 0201 	bic.w	r2, r2, #1
 8007de0:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	685b      	ldr	r3, [r3, #4]
 8007de6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d00a      	beq.n	8007e04 <HAL_SPI_Init+0x1dc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	68db      	ldr	r3, [r3, #12]
 8007df4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	430a      	orrs	r2, r1
 8007e02:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2200      	movs	r2, #0
 8007e08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2201      	movs	r2, #1
 8007e10:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8007e14:	2300      	movs	r3, #0
}
 8007e16:	4618      	mov	r0, r3
 8007e18:	3710      	adds	r7, #16
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	bd80      	pop	{r7, pc}
 8007e1e:	bf00      	nop
 8007e20:	40013000 	.word	0x40013000
 8007e24:	40003800 	.word	0x40003800
 8007e28:	40003c00 	.word	0x40003c00

08007e2c <HAL_SPI_Transmit_IT>:
  * @param  pData: pointer to data buffer
  * @param  Size : amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8007e2c:	b480      	push	{r7}
 8007e2e:	b087      	sub	sp, #28
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	60f8      	str	r0, [r7, #12]
 8007e34:	60b9      	str	r1, [r7, #8]
 8007e36:	4613      	mov	r3, r2
 8007e38:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007e44:	2b01      	cmp	r3, #1
 8007e46:	d101      	bne.n	8007e4c <HAL_SPI_Transmit_IT+0x20>
 8007e48:	2302      	movs	r3, #2
 8007e4a:	e08d      	b.n	8007f68 <HAL_SPI_Transmit_IT+0x13c>
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	2201      	movs	r2, #1
 8007e50:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  if ((pData == NULL) || (Size == 0UL))
 8007e54:	68bb      	ldr	r3, [r7, #8]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d002      	beq.n	8007e60 <HAL_SPI_Transmit_IT+0x34>
 8007e5a:	88fb      	ldrh	r3, [r7, #6]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d107      	bne.n	8007e70 <HAL_SPI_Transmit_IT+0x44>
  {
    errorcode = HAL_ERROR;
 8007e60:	2301      	movs	r3, #1
 8007e62:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	2200      	movs	r2, #0
 8007e68:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8007e6c:	7dfb      	ldrb	r3, [r7, #23]
 8007e6e:	e07b      	b.n	8007f68 <HAL_SPI_Transmit_IT+0x13c>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007e76:	b2db      	uxtb	r3, r3
 8007e78:	2b01      	cmp	r3, #1
 8007e7a:	d007      	beq.n	8007e8c <HAL_SPI_Transmit_IT+0x60>
  {
    errorcode = HAL_BUSY;
 8007e7c:	2302      	movs	r3, #2
 8007e7e:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	2200      	movs	r2, #0
 8007e84:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8007e88:	7dfb      	ldrb	r3, [r7, #23]
 8007e8a:	e06d      	b.n	8007f68 <HAL_SPI_Transmit_IT+0x13c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	2203      	movs	r2, #3
 8007e90:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	2200      	movs	r2, #0
 8007e98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	68ba      	ldr	r2, [r7, #8]
 8007ea0:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	88fa      	ldrh	r2, [r7, #6]
 8007ea6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	88fa      	ldrh	r2, [r7, #6]
 8007eae:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	2200      	movs	r2, #0
 8007ebc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxISR       = NULL;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	2200      	movs	r2, #0
 8007ecc:	671a      	str	r2, [r3, #112]	; 0x70

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	68db      	ldr	r3, [r3, #12]
 8007ed2:	2b0f      	cmp	r3, #15
 8007ed4:	d903      	bls.n	8007ede <HAL_SPI_Transmit_IT+0xb2>
  {
    hspi->TxISR = SPI_TxISR_32BIT;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	4a26      	ldr	r2, [pc, #152]	; (8007f74 <HAL_SPI_Transmit_IT+0x148>)
 8007eda:	675a      	str	r2, [r3, #116]	; 0x74
 8007edc:	e00a      	b.n	8007ef4 <HAL_SPI_Transmit_IT+0xc8>
  }
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	68db      	ldr	r3, [r3, #12]
 8007ee2:	2b07      	cmp	r3, #7
 8007ee4:	d903      	bls.n	8007eee <HAL_SPI_Transmit_IT+0xc2>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	4a23      	ldr	r2, [pc, #140]	; (8007f78 <HAL_SPI_Transmit_IT+0x14c>)
 8007eea:	675a      	str	r2, [r3, #116]	; 0x74
 8007eec:	e002      	b.n	8007ef4 <HAL_SPI_Transmit_IT+0xc8>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	4a22      	ldr	r2, [pc, #136]	; (8007f7c <HAL_SPI_Transmit_IT+0x150>)
 8007ef2:	675a      	str	r2, [r3, #116]	; 0x74
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	689b      	ldr	r3, [r3, #8]
 8007ef8:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8007efc:	d107      	bne.n	8007f0e <HAL_SPI_Transmit_IT+0xe2>
  {
    SPI_1LINE_TX(hspi);
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	681a      	ldr	r2, [r3, #0]
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007f0c:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	685a      	ldr	r2, [r3, #4]
 8007f14:	4b1a      	ldr	r3, [pc, #104]	; (8007f80 <HAL_SPI_Transmit_IT+0x154>)
 8007f16:	4013      	ands	r3, r2
 8007f18:	88f9      	ldrh	r1, [r7, #6]
 8007f1a:	68fa      	ldr	r2, [r7, #12]
 8007f1c:	6812      	ldr	r2, [r2, #0]
 8007f1e:	430b      	orrs	r3, r1
 8007f20:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	681a      	ldr	r2, [r3, #0]
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	f042 0201 	orr.w	r2, r2, #1
 8007f30:	601a      	str	r2, [r3, #0]

  /* Enable EOT, TXP, FRE, MODF, UDR and TSERF interrupts */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF | SPI_IT_TSERF));
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	6919      	ldr	r1, [r3, #16]
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	681a      	ldr	r2, [r3, #0]
 8007f3c:	f240 732a 	movw	r3, #1834	; 0x72a
 8007f40:	430b      	orrs	r3, r1
 8007f42:	6113      	str	r3, [r2, #16]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	685b      	ldr	r3, [r3, #4]
 8007f48:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007f4c:	d107      	bne.n	8007f5e <HAL_SPI_Transmit_IT+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	681a      	ldr	r2, [r3, #0]
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007f5c:	601a      	str	r2, [r3, #0]
  }

  __HAL_UNLOCK(hspi);
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	2200      	movs	r2, #0
 8007f62:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  return errorcode;
 8007f66:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f68:	4618      	mov	r0, r3
 8007f6a:	371c      	adds	r7, #28
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f72:	4770      	bx	lr
 8007f74:	0800846d 	.word	0x0800846d
 8007f78:	0800840f 	.word	0x0800840f
 8007f7c:	080083b5 	.word	0x080083b5
 8007f80:	ffff0000 	.word	0xffff0000

08007f84 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b08a      	sub	sp, #40	; 0x28
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	691b      	ldr	r3, [r3, #16]
 8007f92:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	695b      	ldr	r3, [r3, #20]
 8007f9a:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8007f9c:	6a3a      	ldr	r2, [r7, #32]
 8007f9e:	69fb      	ldr	r3, [r7, #28]
 8007fa0:	4013      	ands	r3, r2
 8007fa2:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	689b      	ldr	r3, [r3, #8]
 8007faa:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8007fac:	2300      	movs	r3, #0
 8007fae:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007fb6:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	3330      	adds	r3, #48	; 0x30
 8007fbe:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8007fc0:	69bb      	ldr	r3, [r7, #24]
 8007fc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d113      	bne.n	8007ff2 <HAL_SPI_IRQHandler+0x6e>
 8007fca:	69bb      	ldr	r3, [r7, #24]
 8007fcc:	f003 0320 	and.w	r3, r3, #32
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d10e      	bne.n	8007ff2 <HAL_SPI_IRQHandler+0x6e>
 8007fd4:	69bb      	ldr	r3, [r7, #24]
 8007fd6:	f003 0304 	and.w	r3, r3, #4
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d009      	beq.n	8007ff2 <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007fe2:	6878      	ldr	r0, [r7, #4]
 8007fe4:	4798      	blx	r3
    hspi->RxISR(hspi);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fea:	6878      	ldr	r0, [r7, #4]
 8007fec:	4798      	blx	r3
    handled = 1UL;
 8007fee:	2301      	movs	r3, #1
 8007ff0:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8007ff2:	69bb      	ldr	r3, [r7, #24]
 8007ff4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d10f      	bne.n	800801c <HAL_SPI_IRQHandler+0x98>
 8007ffc:	69bb      	ldr	r3, [r7, #24]
 8007ffe:	f003 0301 	and.w	r3, r3, #1
 8008002:	2b00      	cmp	r3, #0
 8008004:	d00a      	beq.n	800801c <HAL_SPI_IRQHandler+0x98>
 8008006:	69bb      	ldr	r3, [r7, #24]
 8008008:	f003 0304 	and.w	r3, r3, #4
 800800c:	2b00      	cmp	r3, #0
 800800e:	d105      	bne.n	800801c <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008014:	6878      	ldr	r0, [r7, #4]
 8008016:	4798      	blx	r3
    handled = 1UL;
 8008018:	2301      	movs	r3, #1
 800801a:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800801c:	69bb      	ldr	r3, [r7, #24]
 800801e:	f003 0320 	and.w	r3, r3, #32
 8008022:	2b00      	cmp	r3, #0
 8008024:	d10f      	bne.n	8008046 <HAL_SPI_IRQHandler+0xc2>
 8008026:	69bb      	ldr	r3, [r7, #24]
 8008028:	f003 0302 	and.w	r3, r3, #2
 800802c:	2b00      	cmp	r3, #0
 800802e:	d00a      	beq.n	8008046 <HAL_SPI_IRQHandler+0xc2>
 8008030:	69bb      	ldr	r3, [r7, #24]
 8008032:	f003 0304 	and.w	r3, r3, #4
 8008036:	2b00      	cmp	r3, #0
 8008038:	d105      	bne.n	8008046 <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800803e:	6878      	ldr	r0, [r7, #4]
 8008040:	4798      	blx	r3
    handled = 1UL;
 8008042:	2301      	movs	r3, #1
 8008044:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_HSPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8008046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008048:	2b00      	cmp	r3, #0
 800804a:	f040 816f 	bne.w	800832c <HAL_SPI_IRQHandler+0x3a8>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800804e:	69bb      	ldr	r3, [r7, #24]
 8008050:	f003 0308 	and.w	r3, r3, #8
 8008054:	2b00      	cmp	r3, #0
 8008056:	f000 80a0 	beq.w	800819a <HAL_SPI_IRQHandler+0x216>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	699a      	ldr	r2, [r3, #24]
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	f042 0208 	orr.w	r2, r2, #8
 8008068:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	699a      	ldr	r2, [r3, #24]
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	f042 0210 	orr.w	r2, r2, #16
 8008078:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	699a      	ldr	r2, [r3, #24]
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008088:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	691a      	ldr	r2, [r3, #16]
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	f022 0208 	bic.w	r2, r2, #8
 8008098:	611a      	str	r2, [r3, #16]

    /* DMA Normal Mode */
    if (HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN) ||                    // IT based transfer is done
 800809a:	697b      	ldr	r3, [r7, #20]
 800809c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d00f      	beq.n	80080c4 <HAL_SPI_IRQHandler+0x140>
 80080a4:	7cfb      	ldrb	r3, [r7, #19]
 80080a6:	2b04      	cmp	r3, #4
 80080a8:	d004      	beq.n	80080b4 <HAL_SPI_IRQHandler+0x130>
      ((State != HAL_SPI_STATE_BUSY_RX) && (hspi->hdmatx->Init.Mode == DMA_NORMAL)) ||  // DMA is used in normal mode
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80080ae:	69db      	ldr	r3, [r3, #28]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d007      	beq.n	80080c4 <HAL_SPI_IRQHandler+0x140>
 80080b4:	7cfb      	ldrb	r3, [r7, #19]
 80080b6:	2b03      	cmp	r3, #3
 80080b8:	d059      	beq.n	800816e <HAL_SPI_IRQHandler+0x1ea>
      ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)))    // DMA is used in normal mode
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80080be:	69db      	ldr	r3, [r3, #28]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d154      	bne.n	800816e <HAL_SPI_IRQHandler+0x1ea>
    {
      /* For the IT based receive extra polling maybe required for last packet */
      if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	689b      	ldr	r3, [r3, #8]
 80080ca:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d13d      	bne.n	800814e <HAL_SPI_IRQHandler+0x1ca>
      {
        /* Pooling remaining data */
        while (hspi->RxXferCount != 0UL)
 80080d2:	e036      	b.n	8008142 <HAL_SPI_IRQHandler+0x1be>
        {
          /* Receive data in 32 Bit mode */
          if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	68db      	ldr	r3, [r3, #12]
 80080d8:	2b0f      	cmp	r3, #15
 80080da:	d90b      	bls.n	80080f4 <HAL_SPI_IRQHandler+0x170>
          {
            *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681a      	ldr	r2, [r3, #0]
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80080e4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80080e6:	601a      	str	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint32_t);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80080ec:	1d1a      	adds	r2, r3, #4
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	665a      	str	r2, [r3, #100]	; 0x64
 80080f2:	e01d      	b.n	8008130 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 16 Bit mode */
          else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	68db      	ldr	r3, [r3, #12]
 80080f8:	2b07      	cmp	r3, #7
 80080fa:	d90b      	bls.n	8008114 <HAL_SPI_IRQHandler+0x190>
          {
#if defined (__GNUC__)
            *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008100:	68fa      	ldr	r2, [r7, #12]
 8008102:	8812      	ldrh	r2, [r2, #0]
 8008104:	b292      	uxth	r2, r2
 8008106:	801a      	strh	r2, [r3, #0]
#else
            *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
            hspi->pRxBuffPtr += sizeof(uint16_t);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800810c:	1c9a      	adds	r2, r3, #2
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	665a      	str	r2, [r3, #100]	; 0x64
 8008112:	e00d      	b.n	8008130 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 8 Bit mode */
          else
          {
            *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008120:	7812      	ldrb	r2, [r2, #0]
 8008122:	b2d2      	uxtb	r2, r2
 8008124:	701a      	strb	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint8_t);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800812a:	1c5a      	adds	r2, r3, #1
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	665a      	str	r2, [r3, #100]	; 0x64
          }

          hspi->RxXferCount--;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008136:	b29b      	uxth	r3, r3
 8008138:	3b01      	subs	r3, #1
 800813a:	b29a      	uxth	r2, r3
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        while (hspi->RxXferCount != 0UL)
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008148:	b29b      	uxth	r3, r3
 800814a:	2b00      	cmp	r3, #0
 800814c:	d1c2      	bne.n	80080d4 <HAL_SPI_IRQHandler+0x150>
        }
      }

      /* Call SPI Standard close procedure */
      SPI_CloseTransfer(hspi);
 800814e:	6878      	ldr	r0, [r7, #4]
 8008150:	f000 f9b8 	bl	80084c4 <SPI_CloseTransfer>

      hspi->State = HAL_SPI_STATE_READY;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2201      	movs	r2, #1
 8008158:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
      if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008162:	2b00      	cmp	r3, #0
 8008164:	d003      	beq.n	800816e <HAL_SPI_IRQHandler+0x1ea>
      {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8008166:	6878      	ldr	r0, [r7, #4]
 8008168:	f000 f900 	bl	800836c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
        return;
 800816c:	e0e3      	b.n	8008336 <HAL_SPI_IRQHandler+0x3b2>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800816e:	7cfb      	ldrb	r3, [r7, #19]
 8008170:	2b05      	cmp	r3, #5
 8008172:	d103      	bne.n	800817c <HAL_SPI_IRQHandler+0x1f8>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8008174:	6878      	ldr	r0, [r7, #4]
 8008176:	f000 f8ef 	bl	8008358 <HAL_SPI_TxRxCpltCallback>
	else
    {
      /* End of the appropriate call */
    }

    return;
 800817a:	e0d9      	b.n	8008330 <HAL_SPI_IRQHandler+0x3ac>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800817c:	7cfb      	ldrb	r3, [r7, #19]
 800817e:	2b04      	cmp	r3, #4
 8008180:	d103      	bne.n	800818a <HAL_SPI_IRQHandler+0x206>
      HAL_SPI_RxCpltCallback(hspi);
 8008182:	6878      	ldr	r0, [r7, #4]
 8008184:	f000 f8de 	bl	8008344 <HAL_SPI_RxCpltCallback>
    return;
 8008188:	e0d2      	b.n	8008330 <HAL_SPI_IRQHandler+0x3ac>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800818a:	7cfb      	ldrb	r3, [r7, #19]
 800818c:	2b03      	cmp	r3, #3
 800818e:	f040 80cf 	bne.w	8008330 <HAL_SPI_IRQHandler+0x3ac>
      HAL_SPI_TxCpltCallback(hspi);
 8008192:	6878      	ldr	r0, [r7, #4]
 8008194:	f7f9 f822 	bl	80011dc <HAL_SPI_TxCpltCallback>
    return;
 8008198:	e0ca      	b.n	8008330 <HAL_SPI_IRQHandler+0x3ac>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800819a:	69fb      	ldr	r3, [r7, #28]
 800819c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d00d      	beq.n	80081c0 <HAL_SPI_IRQHandler+0x23c>
 80081a4:	6a3b      	ldr	r3, [r7, #32]
 80081a6:	f003 0308 	and.w	r3, r3, #8
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d008      	beq.n	80081c0 <HAL_SPI_IRQHandler+0x23c>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	699a      	ldr	r2, [r3, #24]
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80081bc:	619a      	str	r2, [r3, #24]

    return;
 80081be:	e0ba      	b.n	8008336 <HAL_SPI_IRQHandler+0x3b2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 80081c0:	69bb      	ldr	r3, [r7, #24]
 80081c2:	f403 7358 	and.w	r3, r3, #864	; 0x360
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	f000 80b5 	beq.w	8008336 <HAL_SPI_IRQHandler+0x3b2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 80081cc:	69bb      	ldr	r3, [r7, #24]
 80081ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d00f      	beq.n	80081f6 <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80081dc:	f043 0204 	orr.w	r2, r3, #4
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	699a      	ldr	r2, [r3, #24]
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80081f4:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 80081f6:	69bb      	ldr	r3, [r7, #24]
 80081f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d00f      	beq.n	8008220 <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008206:	f043 0201 	orr.w	r2, r3, #1
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	699a      	ldr	r2, [r3, #24]
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800821e:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8008220:	69bb      	ldr	r3, [r7, #24]
 8008222:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008226:	2b00      	cmp	r3, #0
 8008228:	d00f      	beq.n	800824a <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008230:	f043 0208 	orr.w	r2, r3, #8
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	699a      	ldr	r2, [r3, #24]
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008248:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800824a:	69bb      	ldr	r3, [r7, #24]
 800824c:	f003 0320 	and.w	r3, r3, #32
 8008250:	2b00      	cmp	r3, #0
 8008252:	d00f      	beq.n	8008274 <HAL_SPI_IRQHandler+0x2f0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800825a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	699a      	ldr	r2, [r3, #24]
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	f042 0220 	orr.w	r2, r2, #32
 8008272:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800827a:	2b00      	cmp	r3, #0
 800827c:	d05a      	beq.n	8008334 <HAL_SPI_IRQHandler+0x3b0>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	681a      	ldr	r2, [r3, #0]
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	f022 0201 	bic.w	r2, r2, #1
 800828c:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	6919      	ldr	r1, [r3, #16]
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681a      	ldr	r2, [r3, #0]
 8008298:	4b28      	ldr	r3, [pc, #160]	; (800833c <HAL_SPI_IRQHandler+0x3b8>)
 800829a:	400b      	ands	r3, r1
 800829c:	6113      	str	r3, [r2, #16]

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800829e:	697b      	ldr	r3, [r7, #20]
 80082a0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80082a4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80082a8:	d138      	bne.n	800831c <HAL_SPI_IRQHandler+0x398>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	689a      	ldr	r2, [r3, #8]
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80082b8:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d013      	beq.n	80082ea <HAL_SPI_IRQHandler+0x366>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80082c6:	4a1e      	ldr	r2, [pc, #120]	; (8008340 <HAL_SPI_IRQHandler+0x3bc>)
 80082c8:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80082ce:	4618      	mov	r0, r3
 80082d0:	f7fa fe0c 	bl	8002eec <HAL_DMA_Abort_IT>
 80082d4:	4603      	mov	r3, r0
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d007      	beq.n	80082ea <HAL_SPI_IRQHandler+0x366>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80082e0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d020      	beq.n	8008334 <HAL_SPI_IRQHandler+0x3b0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80082f6:	4a12      	ldr	r2, [pc, #72]	; (8008340 <HAL_SPI_IRQHandler+0x3bc>)
 80082f8:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80082fe:	4618      	mov	r0, r3
 8008300:	f7fa fdf4 	bl	8002eec <HAL_DMA_Abort_IT>
 8008304:	4603      	mov	r3, r0
 8008306:	2b00      	cmp	r3, #0
 8008308:	d014      	beq.n	8008334 <HAL_SPI_IRQHandler+0x3b0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008310:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800831a:	e00b      	b.n	8008334 <HAL_SPI_IRQHandler+0x3b0>
        hspi->State = HAL_SPI_STATE_READY;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2201      	movs	r2, #1
 8008320:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 8008324:	6878      	ldr	r0, [r7, #4]
 8008326:	f000 f821 	bl	800836c <HAL_SPI_ErrorCallback>
    return;
 800832a:	e003      	b.n	8008334 <HAL_SPI_IRQHandler+0x3b0>
    return;
 800832c:	bf00      	nop
 800832e:	e002      	b.n	8008336 <HAL_SPI_IRQHandler+0x3b2>
    return;
 8008330:	bf00      	nop
 8008332:	e000      	b.n	8008336 <HAL_SPI_IRQHandler+0x3b2>
    return;
 8008334:	bf00      	nop
  }
}
 8008336:	3728      	adds	r7, #40	; 0x28
 8008338:	46bd      	mov	sp, r7
 800833a:	bd80      	pop	{r7, pc}
 800833c:	fffffc94 	.word	0xfffffc94
 8008340:	08008381 	.word	0x08008381

08008344 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008344:	b480      	push	{r7}
 8008346:	b083      	sub	sp, #12
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800834c:	bf00      	nop
 800834e:	370c      	adds	r7, #12
 8008350:	46bd      	mov	sp, r7
 8008352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008356:	4770      	bx	lr

08008358 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008358:	b480      	push	{r7}
 800835a:	b083      	sub	sp, #12
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8008360:	bf00      	nop
 8008362:	370c      	adds	r7, #12
 8008364:	46bd      	mov	sp, r7
 8008366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836a:	4770      	bx	lr

0800836c <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800836c:	b480      	push	{r7}
 800836e:	b083      	sub	sp, #12
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8008374:	bf00      	nop
 8008376:	370c      	adds	r7, #12
 8008378:	46bd      	mov	sp, r7
 800837a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837e:	4770      	bx	lr

08008380 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008380:	b580      	push	{r7, lr}
 8008382:	b084      	sub	sp, #16
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800838c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	2200      	movs	r2, #0
 8008392:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	2200      	movs	r2, #0
 800839a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	2201      	movs	r2, #1
 80083a2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80083a6:	68f8      	ldr	r0, [r7, #12]
 80083a8:	f7ff ffe0 	bl	800836c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80083ac:	bf00      	nop
 80083ae:	3710      	adds	r7, #16
 80083b0:	46bd      	mov	sp, r7
 80083b2:	bd80      	pop	{r7, pc}

080083b4 <SPI_TxISR_8BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(SPI_HandleTypeDef *hspi)
{
 80083b4:	b480      	push	{r7}
 80083b6:	b083      	sub	sp, #12
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	6078      	str	r0, [r7, #4]
  /* Transmit data in 8 Bit mode */
  *(__IO uint8_t *)&hspi->Instance->TXDR = *((uint8_t *)hspi->pTxBuffPtr);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	3320      	adds	r3, #32
 80083c6:	7812      	ldrb	r2, [r2, #0]
 80083c8:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr += sizeof(uint8_t);
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083ce:	1c5a      	adds	r2, r3, #1
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount--;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80083da:	b29b      	uxth	r3, r3
 80083dc:	3b01      	subs	r3, #1
 80083de:	b29a      	uxth	r2, r3
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Disable IT if no more data excepted */
  if (hspi->TxXferCount == 0UL)
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80083ec:	b29b      	uxth	r3, r3
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d107      	bne.n	8008402 <SPI_TxISR_8BIT+0x4e>
      /* Disable TXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
    }
#else
    /* Disable TXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	691a      	ldr	r2, [r3, #16]
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	f022 0202 	bic.w	r2, r2, #2
 8008400:	611a      	str	r2, [r3, #16]
#endif /* USE_HSPI_RELOAD_TRANSFER */
  }
}
 8008402:	bf00      	nop
 8008404:	370c      	adds	r7, #12
 8008406:	46bd      	mov	sp, r7
 8008408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840c:	4770      	bx	lr

0800840e <SPI_TxISR_16BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(SPI_HandleTypeDef *hspi)
{
 800840e:	b480      	push	{r7}
 8008410:	b085      	sub	sp, #20
 8008412:	af00      	add	r7, sp, #0
 8008414:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	3320      	adds	r3, #32
 800841c:	60fb      	str	r3, [r7, #12]

  *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008422:	881a      	ldrh	r2, [r3, #0]
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	801a      	strh	r2, [r3, #0]
#else
  *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800842c:	1c9a      	adds	r2, r3, #2
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount--;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008438:	b29b      	uxth	r3, r3
 800843a:	3b01      	subs	r3, #1
 800843c:	b29a      	uxth	r2, r3
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Disable IT if no more data excepted */
  if (hspi->TxXferCount == 0UL)
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800844a:	b29b      	uxth	r3, r3
 800844c:	2b00      	cmp	r3, #0
 800844e:	d107      	bne.n	8008460 <SPI_TxISR_16BIT+0x52>
      /* Disable TXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
    }
#else
    /* Disable TXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	691a      	ldr	r2, [r3, #16]
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	f022 0202 	bic.w	r2, r2, #2
 800845e:	611a      	str	r2, [r3, #16]
#endif /* USE_HSPI_RELOAD_TRANSFER */
  }
}
 8008460:	bf00      	nop
 8008462:	3714      	adds	r7, #20
 8008464:	46bd      	mov	sp, r7
 8008466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846a:	4770      	bx	lr

0800846c <SPI_TxISR_32BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_32BIT(SPI_HandleTypeDef *hspi)
{
 800846c:	b480      	push	{r7}
 800846e:	b083      	sub	sp, #12
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]
  /* Transmit data in 32 Bit mode */
  *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	6812      	ldr	r2, [r2, #0]
 800847e:	621a      	str	r2, [r3, #32]
  hspi->pTxBuffPtr += sizeof(uint32_t);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008484:	1d1a      	adds	r2, r3, #4
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount--;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008490:	b29b      	uxth	r3, r3
 8008492:	3b01      	subs	r3, #1
 8008494:	b29a      	uxth	r2, r3
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Disable IT if no more data excepted */
  if (hspi->TxXferCount == 0UL)
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80084a2:	b29b      	uxth	r3, r3
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d107      	bne.n	80084b8 <SPI_TxISR_32BIT+0x4c>
      /* Disable TXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
    }
#else
    /* Disable TXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	691a      	ldr	r2, [r3, #16]
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	f022 0202 	bic.w	r2, r2, #2
 80084b6:	611a      	str	r2, [r3, #16]
#endif /* USE_HSPI_RELOAD_TRANSFER */
  }
}
 80084b8:	bf00      	nop
 80084ba:	370c      	adds	r7, #12
 80084bc:	46bd      	mov	sp, r7
 80084be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c2:	4770      	bx	lr

080084c4 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80084c4:	b480      	push	{r7}
 80084c6:	b085      	sub	sp, #20
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	695b      	ldr	r3, [r3, #20]
 80084d2:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	699a      	ldr	r2, [r3, #24]
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	f042 0208 	orr.w	r2, r2, #8
 80084e2:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	699a      	ldr	r2, [r3, #24]
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	f042 0210 	orr.w	r2, r2, #16
 80084f2:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	681a      	ldr	r2, [r3, #0]
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	f022 0201 	bic.w	r2, r2, #1
 8008502:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	6919      	ldr	r1, [r3, #16]
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681a      	ldr	r2, [r3, #0]
 800850e:	4b3c      	ldr	r3, [pc, #240]	; (8008600 <SPI_CloseTransfer+0x13c>)
 8008510:	400b      	ands	r3, r1
 8008512:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	689a      	ldr	r2, [r3, #8]
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8008522:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800852a:	b2db      	uxtb	r3, r3
 800852c:	2b04      	cmp	r3, #4
 800852e:	d014      	beq.n	800855a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	f003 0320 	and.w	r3, r3, #32
 8008536:	2b00      	cmp	r3, #0
 8008538:	d00f      	beq.n	800855a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008540:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	699a      	ldr	r2, [r3, #24]
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	f042 0220 	orr.w	r2, r2, #32
 8008558:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008560:	b2db      	uxtb	r3, r3
 8008562:	2b03      	cmp	r3, #3
 8008564:	d014      	beq.n	8008590 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800856c:	2b00      	cmp	r3, #0
 800856e:	d00f      	beq.n	8008590 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008576:	f043 0204 	orr.w	r2, r3, #4
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	699a      	ldr	r2, [r3, #24]
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800858e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008596:	2b00      	cmp	r3, #0
 8008598:	d00f      	beq.n	80085ba <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80085a0:	f043 0201 	orr.w	r2, r3, #1
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	699a      	ldr	r2, [r3, #24]
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80085b8:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d00f      	beq.n	80085e4 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80085ca:	f043 0208 	orr.w	r2, r3, #8
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	699a      	ldr	r2, [r3, #24]
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80085e2:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	2200      	movs	r2, #0
 80085e8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	2200      	movs	r2, #0
 80085f0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 80085f4:	bf00      	nop
 80085f6:	3714      	adds	r7, #20
 80085f8:	46bd      	mov	sp, r7
 80085fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fe:	4770      	bx	lr
 8008600:	fffffc90 	.word	0xfffffc90

08008604 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8008604:	b480      	push	{r7}
 8008606:	b085      	sub	sp, #20
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008610:	095b      	lsrs	r3, r3, #5
 8008612:	3301      	adds	r3, #1
 8008614:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	68db      	ldr	r3, [r3, #12]
 800861a:	3301      	adds	r3, #1
 800861c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800861e:	68bb      	ldr	r3, [r7, #8]
 8008620:	3307      	adds	r3, #7
 8008622:	08db      	lsrs	r3, r3, #3
 8008624:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8008626:	68bb      	ldr	r3, [r7, #8]
 8008628:	68fa      	ldr	r2, [r7, #12]
 800862a:	fb02 f303 	mul.w	r3, r2, r3
}
 800862e:	4618      	mov	r0, r3
 8008630:	3714      	adds	r7, #20
 8008632:	46bd      	mov	sp, r7
 8008634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008638:	4770      	bx	lr

0800863a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800863a:	b580      	push	{r7, lr}
 800863c:	b082      	sub	sp, #8
 800863e:	af00      	add	r7, sp, #0
 8008640:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	2b00      	cmp	r3, #0
 8008646:	d101      	bne.n	800864c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008648:	2301      	movs	r3, #1
 800864a:	e049      	b.n	80086e0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008652:	b2db      	uxtb	r3, r3
 8008654:	2b00      	cmp	r3, #0
 8008656:	d106      	bne.n	8008666 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	2200      	movs	r2, #0
 800865c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008660:	6878      	ldr	r0, [r7, #4]
 8008662:	f000 f841 	bl	80086e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	2202      	movs	r2, #2
 800866a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681a      	ldr	r2, [r3, #0]
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	3304      	adds	r3, #4
 8008676:	4619      	mov	r1, r3
 8008678:	4610      	mov	r0, r2
 800867a:	f000 f9f7 	bl	8008a6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	2201      	movs	r2, #1
 8008682:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	2201      	movs	r2, #1
 800868a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	2201      	movs	r2, #1
 8008692:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	2201      	movs	r2, #1
 800869a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	2201      	movs	r2, #1
 80086a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	2201      	movs	r2, #1
 80086aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	2201      	movs	r2, #1
 80086b2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	2201      	movs	r2, #1
 80086ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	2201      	movs	r2, #1
 80086c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	2201      	movs	r2, #1
 80086ca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	2201      	movs	r2, #1
 80086d2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	2201      	movs	r2, #1
 80086da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80086de:	2300      	movs	r3, #0
}
 80086e0:	4618      	mov	r0, r3
 80086e2:	3708      	adds	r7, #8
 80086e4:	46bd      	mov	sp, r7
 80086e6:	bd80      	pop	{r7, pc}

080086e8 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80086e8:	b480      	push	{r7}
 80086ea:	b083      	sub	sp, #12
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80086f0:	bf00      	nop
 80086f2:	370c      	adds	r7, #12
 80086f4:	46bd      	mov	sp, r7
 80086f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fa:	4770      	bx	lr

080086fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80086fc:	b480      	push	{r7}
 80086fe:	b085      	sub	sp, #20
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800870a:	b2db      	uxtb	r3, r3
 800870c:	2b01      	cmp	r3, #1
 800870e:	d001      	beq.n	8008714 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008710:	2301      	movs	r3, #1
 8008712:	e04f      	b.n	80087b4 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	2202      	movs	r2, #2
 8008718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	68da      	ldr	r2, [r3, #12]
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	f042 0201 	orr.w	r2, r2, #1
 800872a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	4a23      	ldr	r2, [pc, #140]	; (80087c0 <HAL_TIM_Base_Start_IT+0xc4>)
 8008732:	4293      	cmp	r3, r2
 8008734:	d01d      	beq.n	8008772 <HAL_TIM_Base_Start_IT+0x76>
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800873e:	d018      	beq.n	8008772 <HAL_TIM_Base_Start_IT+0x76>
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	4a1f      	ldr	r2, [pc, #124]	; (80087c4 <HAL_TIM_Base_Start_IT+0xc8>)
 8008746:	4293      	cmp	r3, r2
 8008748:	d013      	beq.n	8008772 <HAL_TIM_Base_Start_IT+0x76>
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	4a1e      	ldr	r2, [pc, #120]	; (80087c8 <HAL_TIM_Base_Start_IT+0xcc>)
 8008750:	4293      	cmp	r3, r2
 8008752:	d00e      	beq.n	8008772 <HAL_TIM_Base_Start_IT+0x76>
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	4a1c      	ldr	r2, [pc, #112]	; (80087cc <HAL_TIM_Base_Start_IT+0xd0>)
 800875a:	4293      	cmp	r3, r2
 800875c:	d009      	beq.n	8008772 <HAL_TIM_Base_Start_IT+0x76>
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	4a1b      	ldr	r2, [pc, #108]	; (80087d0 <HAL_TIM_Base_Start_IT+0xd4>)
 8008764:	4293      	cmp	r3, r2
 8008766:	d004      	beq.n	8008772 <HAL_TIM_Base_Start_IT+0x76>
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	4a19      	ldr	r2, [pc, #100]	; (80087d4 <HAL_TIM_Base_Start_IT+0xd8>)
 800876e:	4293      	cmp	r3, r2
 8008770:	d115      	bne.n	800879e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	689a      	ldr	r2, [r3, #8]
 8008778:	4b17      	ldr	r3, [pc, #92]	; (80087d8 <HAL_TIM_Base_Start_IT+0xdc>)
 800877a:	4013      	ands	r3, r2
 800877c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	2b06      	cmp	r3, #6
 8008782:	d015      	beq.n	80087b0 <HAL_TIM_Base_Start_IT+0xb4>
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800878a:	d011      	beq.n	80087b0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	681a      	ldr	r2, [r3, #0]
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	f042 0201 	orr.w	r2, r2, #1
 800879a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800879c:	e008      	b.n	80087b0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	681a      	ldr	r2, [r3, #0]
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	f042 0201 	orr.w	r2, r2, #1
 80087ac:	601a      	str	r2, [r3, #0]
 80087ae:	e000      	b.n	80087b2 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80087b0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80087b2:	2300      	movs	r3, #0
}
 80087b4:	4618      	mov	r0, r3
 80087b6:	3714      	adds	r7, #20
 80087b8:	46bd      	mov	sp, r7
 80087ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087be:	4770      	bx	lr
 80087c0:	40010000 	.word	0x40010000
 80087c4:	40000400 	.word	0x40000400
 80087c8:	40000800 	.word	0x40000800
 80087cc:	40000c00 	.word	0x40000c00
 80087d0:	40010400 	.word	0x40010400
 80087d4:	40001800 	.word	0x40001800
 80087d8:	00010007 	.word	0x00010007

080087dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80087dc:	b580      	push	{r7, lr}
 80087de:	b082      	sub	sp, #8
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	691b      	ldr	r3, [r3, #16]
 80087ea:	f003 0302 	and.w	r3, r3, #2
 80087ee:	2b02      	cmp	r3, #2
 80087f0:	d122      	bne.n	8008838 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	68db      	ldr	r3, [r3, #12]
 80087f8:	f003 0302 	and.w	r3, r3, #2
 80087fc:	2b02      	cmp	r3, #2
 80087fe:	d11b      	bne.n	8008838 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	f06f 0202 	mvn.w	r2, #2
 8008808:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	2201      	movs	r2, #1
 800880e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	699b      	ldr	r3, [r3, #24]
 8008816:	f003 0303 	and.w	r3, r3, #3
 800881a:	2b00      	cmp	r3, #0
 800881c:	d003      	beq.n	8008826 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800881e:	6878      	ldr	r0, [r7, #4]
 8008820:	f000 f905 	bl	8008a2e <HAL_TIM_IC_CaptureCallback>
 8008824:	e005      	b.n	8008832 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008826:	6878      	ldr	r0, [r7, #4]
 8008828:	f000 f8f7 	bl	8008a1a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800882c:	6878      	ldr	r0, [r7, #4]
 800882e:	f000 f908 	bl	8008a42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	2200      	movs	r2, #0
 8008836:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	691b      	ldr	r3, [r3, #16]
 800883e:	f003 0304 	and.w	r3, r3, #4
 8008842:	2b04      	cmp	r3, #4
 8008844:	d122      	bne.n	800888c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	68db      	ldr	r3, [r3, #12]
 800884c:	f003 0304 	and.w	r3, r3, #4
 8008850:	2b04      	cmp	r3, #4
 8008852:	d11b      	bne.n	800888c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	f06f 0204 	mvn.w	r2, #4
 800885c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	2202      	movs	r2, #2
 8008862:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	699b      	ldr	r3, [r3, #24]
 800886a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800886e:	2b00      	cmp	r3, #0
 8008870:	d003      	beq.n	800887a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008872:	6878      	ldr	r0, [r7, #4]
 8008874:	f000 f8db 	bl	8008a2e <HAL_TIM_IC_CaptureCallback>
 8008878:	e005      	b.n	8008886 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800887a:	6878      	ldr	r0, [r7, #4]
 800887c:	f000 f8cd 	bl	8008a1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008880:	6878      	ldr	r0, [r7, #4]
 8008882:	f000 f8de 	bl	8008a42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	2200      	movs	r2, #0
 800888a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	691b      	ldr	r3, [r3, #16]
 8008892:	f003 0308 	and.w	r3, r3, #8
 8008896:	2b08      	cmp	r3, #8
 8008898:	d122      	bne.n	80088e0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	68db      	ldr	r3, [r3, #12]
 80088a0:	f003 0308 	and.w	r3, r3, #8
 80088a4:	2b08      	cmp	r3, #8
 80088a6:	d11b      	bne.n	80088e0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	f06f 0208 	mvn.w	r2, #8
 80088b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	2204      	movs	r2, #4
 80088b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	69db      	ldr	r3, [r3, #28]
 80088be:	f003 0303 	and.w	r3, r3, #3
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d003      	beq.n	80088ce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80088c6:	6878      	ldr	r0, [r7, #4]
 80088c8:	f000 f8b1 	bl	8008a2e <HAL_TIM_IC_CaptureCallback>
 80088cc:	e005      	b.n	80088da <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80088ce:	6878      	ldr	r0, [r7, #4]
 80088d0:	f000 f8a3 	bl	8008a1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80088d4:	6878      	ldr	r0, [r7, #4]
 80088d6:	f000 f8b4 	bl	8008a42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	2200      	movs	r2, #0
 80088de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	691b      	ldr	r3, [r3, #16]
 80088e6:	f003 0310 	and.w	r3, r3, #16
 80088ea:	2b10      	cmp	r3, #16
 80088ec:	d122      	bne.n	8008934 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	68db      	ldr	r3, [r3, #12]
 80088f4:	f003 0310 	and.w	r3, r3, #16
 80088f8:	2b10      	cmp	r3, #16
 80088fa:	d11b      	bne.n	8008934 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	f06f 0210 	mvn.w	r2, #16
 8008904:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	2208      	movs	r2, #8
 800890a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	69db      	ldr	r3, [r3, #28]
 8008912:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008916:	2b00      	cmp	r3, #0
 8008918:	d003      	beq.n	8008922 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800891a:	6878      	ldr	r0, [r7, #4]
 800891c:	f000 f887 	bl	8008a2e <HAL_TIM_IC_CaptureCallback>
 8008920:	e005      	b.n	800892e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008922:	6878      	ldr	r0, [r7, #4]
 8008924:	f000 f879 	bl	8008a1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008928:	6878      	ldr	r0, [r7, #4]
 800892a:	f000 f88a 	bl	8008a42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	2200      	movs	r2, #0
 8008932:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	691b      	ldr	r3, [r3, #16]
 800893a:	f003 0301 	and.w	r3, r3, #1
 800893e:	2b01      	cmp	r3, #1
 8008940:	d10e      	bne.n	8008960 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	68db      	ldr	r3, [r3, #12]
 8008948:	f003 0301 	and.w	r3, r3, #1
 800894c:	2b01      	cmp	r3, #1
 800894e:	d107      	bne.n	8008960 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	f06f 0201 	mvn.w	r2, #1
 8008958:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800895a:	6878      	ldr	r0, [r7, #4]
 800895c:	f7f9 fc54 	bl	8002208 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	691b      	ldr	r3, [r3, #16]
 8008966:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800896a:	2b80      	cmp	r3, #128	; 0x80
 800896c:	d10e      	bne.n	800898c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	68db      	ldr	r3, [r3, #12]
 8008974:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008978:	2b80      	cmp	r3, #128	; 0x80
 800897a:	d107      	bne.n	800898c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008984:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008986:	6878      	ldr	r0, [r7, #4]
 8008988:	f000 f914 	bl	8008bb4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	691b      	ldr	r3, [r3, #16]
 8008992:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008996:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800899a:	d10e      	bne.n	80089ba <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	68db      	ldr	r3, [r3, #12]
 80089a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089a6:	2b80      	cmp	r3, #128	; 0x80
 80089a8:	d107      	bne.n	80089ba <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80089b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80089b4:	6878      	ldr	r0, [r7, #4]
 80089b6:	f000 f907 	bl	8008bc8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	691b      	ldr	r3, [r3, #16]
 80089c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089c4:	2b40      	cmp	r3, #64	; 0x40
 80089c6:	d10e      	bne.n	80089e6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	68db      	ldr	r3, [r3, #12]
 80089ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089d2:	2b40      	cmp	r3, #64	; 0x40
 80089d4:	d107      	bne.n	80089e6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80089de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80089e0:	6878      	ldr	r0, [r7, #4]
 80089e2:	f000 f838 	bl	8008a56 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	691b      	ldr	r3, [r3, #16]
 80089ec:	f003 0320 	and.w	r3, r3, #32
 80089f0:	2b20      	cmp	r3, #32
 80089f2:	d10e      	bne.n	8008a12 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	68db      	ldr	r3, [r3, #12]
 80089fa:	f003 0320 	and.w	r3, r3, #32
 80089fe:	2b20      	cmp	r3, #32
 8008a00:	d107      	bne.n	8008a12 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	f06f 0220 	mvn.w	r2, #32
 8008a0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008a0c:	6878      	ldr	r0, [r7, #4]
 8008a0e:	f000 f8c7 	bl	8008ba0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008a12:	bf00      	nop
 8008a14:	3708      	adds	r7, #8
 8008a16:	46bd      	mov	sp, r7
 8008a18:	bd80      	pop	{r7, pc}

08008a1a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008a1a:	b480      	push	{r7}
 8008a1c:	b083      	sub	sp, #12
 8008a1e:	af00      	add	r7, sp, #0
 8008a20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008a22:	bf00      	nop
 8008a24:	370c      	adds	r7, #12
 8008a26:	46bd      	mov	sp, r7
 8008a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2c:	4770      	bx	lr

08008a2e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008a2e:	b480      	push	{r7}
 8008a30:	b083      	sub	sp, #12
 8008a32:	af00      	add	r7, sp, #0
 8008a34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008a36:	bf00      	nop
 8008a38:	370c      	adds	r7, #12
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a40:	4770      	bx	lr

08008a42 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008a42:	b480      	push	{r7}
 8008a44:	b083      	sub	sp, #12
 8008a46:	af00      	add	r7, sp, #0
 8008a48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008a4a:	bf00      	nop
 8008a4c:	370c      	adds	r7, #12
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a54:	4770      	bx	lr

08008a56 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008a56:	b480      	push	{r7}
 8008a58:	b083      	sub	sp, #12
 8008a5a:	af00      	add	r7, sp, #0
 8008a5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008a5e:	bf00      	nop
 8008a60:	370c      	adds	r7, #12
 8008a62:	46bd      	mov	sp, r7
 8008a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a68:	4770      	bx	lr
	...

08008a6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008a6c:	b480      	push	{r7}
 8008a6e:	b085      	sub	sp, #20
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]
 8008a74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	4a40      	ldr	r2, [pc, #256]	; (8008b80 <TIM_Base_SetConfig+0x114>)
 8008a80:	4293      	cmp	r3, r2
 8008a82:	d013      	beq.n	8008aac <TIM_Base_SetConfig+0x40>
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a8a:	d00f      	beq.n	8008aac <TIM_Base_SetConfig+0x40>
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	4a3d      	ldr	r2, [pc, #244]	; (8008b84 <TIM_Base_SetConfig+0x118>)
 8008a90:	4293      	cmp	r3, r2
 8008a92:	d00b      	beq.n	8008aac <TIM_Base_SetConfig+0x40>
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	4a3c      	ldr	r2, [pc, #240]	; (8008b88 <TIM_Base_SetConfig+0x11c>)
 8008a98:	4293      	cmp	r3, r2
 8008a9a:	d007      	beq.n	8008aac <TIM_Base_SetConfig+0x40>
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	4a3b      	ldr	r2, [pc, #236]	; (8008b8c <TIM_Base_SetConfig+0x120>)
 8008aa0:	4293      	cmp	r3, r2
 8008aa2:	d003      	beq.n	8008aac <TIM_Base_SetConfig+0x40>
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	4a3a      	ldr	r2, [pc, #232]	; (8008b90 <TIM_Base_SetConfig+0x124>)
 8008aa8:	4293      	cmp	r3, r2
 8008aaa:	d108      	bne.n	8008abe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ab2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008ab4:	683b      	ldr	r3, [r7, #0]
 8008ab6:	685b      	ldr	r3, [r3, #4]
 8008ab8:	68fa      	ldr	r2, [r7, #12]
 8008aba:	4313      	orrs	r3, r2
 8008abc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	4a2f      	ldr	r2, [pc, #188]	; (8008b80 <TIM_Base_SetConfig+0x114>)
 8008ac2:	4293      	cmp	r3, r2
 8008ac4:	d01f      	beq.n	8008b06 <TIM_Base_SetConfig+0x9a>
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008acc:	d01b      	beq.n	8008b06 <TIM_Base_SetConfig+0x9a>
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	4a2c      	ldr	r2, [pc, #176]	; (8008b84 <TIM_Base_SetConfig+0x118>)
 8008ad2:	4293      	cmp	r3, r2
 8008ad4:	d017      	beq.n	8008b06 <TIM_Base_SetConfig+0x9a>
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	4a2b      	ldr	r2, [pc, #172]	; (8008b88 <TIM_Base_SetConfig+0x11c>)
 8008ada:	4293      	cmp	r3, r2
 8008adc:	d013      	beq.n	8008b06 <TIM_Base_SetConfig+0x9a>
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	4a2a      	ldr	r2, [pc, #168]	; (8008b8c <TIM_Base_SetConfig+0x120>)
 8008ae2:	4293      	cmp	r3, r2
 8008ae4:	d00f      	beq.n	8008b06 <TIM_Base_SetConfig+0x9a>
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	4a29      	ldr	r2, [pc, #164]	; (8008b90 <TIM_Base_SetConfig+0x124>)
 8008aea:	4293      	cmp	r3, r2
 8008aec:	d00b      	beq.n	8008b06 <TIM_Base_SetConfig+0x9a>
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	4a28      	ldr	r2, [pc, #160]	; (8008b94 <TIM_Base_SetConfig+0x128>)
 8008af2:	4293      	cmp	r3, r2
 8008af4:	d007      	beq.n	8008b06 <TIM_Base_SetConfig+0x9a>
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	4a27      	ldr	r2, [pc, #156]	; (8008b98 <TIM_Base_SetConfig+0x12c>)
 8008afa:	4293      	cmp	r3, r2
 8008afc:	d003      	beq.n	8008b06 <TIM_Base_SetConfig+0x9a>
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	4a26      	ldr	r2, [pc, #152]	; (8008b9c <TIM_Base_SetConfig+0x130>)
 8008b02:	4293      	cmp	r3, r2
 8008b04:	d108      	bne.n	8008b18 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008b0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008b0e:	683b      	ldr	r3, [r7, #0]
 8008b10:	68db      	ldr	r3, [r3, #12]
 8008b12:	68fa      	ldr	r2, [r7, #12]
 8008b14:	4313      	orrs	r3, r2
 8008b16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	695b      	ldr	r3, [r3, #20]
 8008b22:	4313      	orrs	r3, r2
 8008b24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	68fa      	ldr	r2, [r7, #12]
 8008b2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008b2c:	683b      	ldr	r3, [r7, #0]
 8008b2e:	689a      	ldr	r2, [r3, #8]
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008b34:	683b      	ldr	r3, [r7, #0]
 8008b36:	681a      	ldr	r2, [r3, #0]
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	4a10      	ldr	r2, [pc, #64]	; (8008b80 <TIM_Base_SetConfig+0x114>)
 8008b40:	4293      	cmp	r3, r2
 8008b42:	d00f      	beq.n	8008b64 <TIM_Base_SetConfig+0xf8>
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	4a12      	ldr	r2, [pc, #72]	; (8008b90 <TIM_Base_SetConfig+0x124>)
 8008b48:	4293      	cmp	r3, r2
 8008b4a:	d00b      	beq.n	8008b64 <TIM_Base_SetConfig+0xf8>
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	4a11      	ldr	r2, [pc, #68]	; (8008b94 <TIM_Base_SetConfig+0x128>)
 8008b50:	4293      	cmp	r3, r2
 8008b52:	d007      	beq.n	8008b64 <TIM_Base_SetConfig+0xf8>
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	4a10      	ldr	r2, [pc, #64]	; (8008b98 <TIM_Base_SetConfig+0x12c>)
 8008b58:	4293      	cmp	r3, r2
 8008b5a:	d003      	beq.n	8008b64 <TIM_Base_SetConfig+0xf8>
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	4a0f      	ldr	r2, [pc, #60]	; (8008b9c <TIM_Base_SetConfig+0x130>)
 8008b60:	4293      	cmp	r3, r2
 8008b62:	d103      	bne.n	8008b6c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008b64:	683b      	ldr	r3, [r7, #0]
 8008b66:	691a      	ldr	r2, [r3, #16]
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	2201      	movs	r2, #1
 8008b70:	615a      	str	r2, [r3, #20]
}
 8008b72:	bf00      	nop
 8008b74:	3714      	adds	r7, #20
 8008b76:	46bd      	mov	sp, r7
 8008b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7c:	4770      	bx	lr
 8008b7e:	bf00      	nop
 8008b80:	40010000 	.word	0x40010000
 8008b84:	40000400 	.word	0x40000400
 8008b88:	40000800 	.word	0x40000800
 8008b8c:	40000c00 	.word	0x40000c00
 8008b90:	40010400 	.word	0x40010400
 8008b94:	40014000 	.word	0x40014000
 8008b98:	40014400 	.word	0x40014400
 8008b9c:	40014800 	.word	0x40014800

08008ba0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008ba0:	b480      	push	{r7}
 8008ba2:	b083      	sub	sp, #12
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008ba8:	bf00      	nop
 8008baa:	370c      	adds	r7, #12
 8008bac:	46bd      	mov	sp, r7
 8008bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb2:	4770      	bx	lr

08008bb4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008bb4:	b480      	push	{r7}
 8008bb6:	b083      	sub	sp, #12
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008bbc:	bf00      	nop
 8008bbe:	370c      	adds	r7, #12
 8008bc0:	46bd      	mov	sp, r7
 8008bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc6:	4770      	bx	lr

08008bc8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008bc8:	b480      	push	{r7}
 8008bca:	b083      	sub	sp, #12
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008bd0:	bf00      	nop
 8008bd2:	370c      	adds	r7, #12
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bda:	4770      	bx	lr

08008bdc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	b082      	sub	sp, #8
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d101      	bne.n	8008bee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008bea:	2301      	movs	r3, #1
 8008bec:	e042      	b.n	8008c74 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d106      	bne.n	8008c06 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	2200      	movs	r2, #0
 8008bfc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008c00:	6878      	ldr	r0, [r7, #4]
 8008c02:	f7f9 fba5 	bl	8002350 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	2224      	movs	r2, #36	; 0x24
 8008c0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	681a      	ldr	r2, [r3, #0]
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	f022 0201 	bic.w	r2, r2, #1
 8008c1c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008c1e:	6878      	ldr	r0, [r7, #4]
 8008c20:	f000 f8c2 	bl	8008da8 <UART_SetConfig>
 8008c24:	4603      	mov	r3, r0
 8008c26:	2b01      	cmp	r3, #1
 8008c28:	d101      	bne.n	8008c2e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008c2a:	2301      	movs	r3, #1
 8008c2c:	e022      	b.n	8008c74 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d002      	beq.n	8008c3c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8008c36:	6878      	ldr	r0, [r7, #4]
 8008c38:	f000 fe20 	bl	800987c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	685a      	ldr	r2, [r3, #4]
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008c4a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	689a      	ldr	r2, [r3, #8]
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008c5a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	681a      	ldr	r2, [r3, #0]
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	f042 0201 	orr.w	r2, r2, #1
 8008c6a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008c6c:	6878      	ldr	r0, [r7, #4]
 8008c6e:	f000 fea7 	bl	80099c0 <UART_CheckIdleState>
 8008c72:	4603      	mov	r3, r0
}
 8008c74:	4618      	mov	r0, r3
 8008c76:	3708      	adds	r7, #8
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	bd80      	pop	{r7, pc}

08008c7c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008c7c:	b580      	push	{r7, lr}
 8008c7e:	b08a      	sub	sp, #40	; 0x28
 8008c80:	af02      	add	r7, sp, #8
 8008c82:	60f8      	str	r0, [r7, #12]
 8008c84:	60b9      	str	r1, [r7, #8]
 8008c86:	603b      	str	r3, [r7, #0]
 8008c88:	4613      	mov	r3, r2
 8008c8a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008c92:	2b20      	cmp	r3, #32
 8008c94:	f040 8083 	bne.w	8008d9e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8008c98:	68bb      	ldr	r3, [r7, #8]
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d002      	beq.n	8008ca4 <HAL_UART_Transmit+0x28>
 8008c9e:	88fb      	ldrh	r3, [r7, #6]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d101      	bne.n	8008ca8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8008ca4:	2301      	movs	r3, #1
 8008ca6:	e07b      	b.n	8008da0 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008cae:	2b01      	cmp	r3, #1
 8008cb0:	d101      	bne.n	8008cb6 <HAL_UART_Transmit+0x3a>
 8008cb2:	2302      	movs	r3, #2
 8008cb4:	e074      	b.n	8008da0 <HAL_UART_Transmit+0x124>
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	2201      	movs	r2, #1
 8008cba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	2221      	movs	r2, #33	; 0x21
 8008cca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008cce:	f7f9 ff85 	bl	8002bdc <HAL_GetTick>
 8008cd2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	88fa      	ldrh	r2, [r7, #6]
 8008cd8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	88fa      	ldrh	r2, [r7, #6]
 8008ce0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	689b      	ldr	r3, [r3, #8]
 8008ce8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008cec:	d108      	bne.n	8008d00 <HAL_UART_Transmit+0x84>
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	691b      	ldr	r3, [r3, #16]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d104      	bne.n	8008d00 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008cfa:	68bb      	ldr	r3, [r7, #8]
 8008cfc:	61bb      	str	r3, [r7, #24]
 8008cfe:	e003      	b.n	8008d08 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8008d00:	68bb      	ldr	r3, [r7, #8]
 8008d02:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008d04:	2300      	movs	r3, #0
 8008d06:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	2200      	movs	r2, #0
 8008d0c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8008d10:	e02c      	b.n	8008d6c <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008d12:	683b      	ldr	r3, [r7, #0]
 8008d14:	9300      	str	r3, [sp, #0]
 8008d16:	697b      	ldr	r3, [r7, #20]
 8008d18:	2200      	movs	r2, #0
 8008d1a:	2180      	movs	r1, #128	; 0x80
 8008d1c:	68f8      	ldr	r0, [r7, #12]
 8008d1e:	f000 fe9a 	bl	8009a56 <UART_WaitOnFlagUntilTimeout>
 8008d22:	4603      	mov	r3, r0
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d001      	beq.n	8008d2c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8008d28:	2303      	movs	r3, #3
 8008d2a:	e039      	b.n	8008da0 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8008d2c:	69fb      	ldr	r3, [r7, #28]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d10b      	bne.n	8008d4a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008d32:	69bb      	ldr	r3, [r7, #24]
 8008d34:	881b      	ldrh	r3, [r3, #0]
 8008d36:	461a      	mov	r2, r3
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008d40:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008d42:	69bb      	ldr	r3, [r7, #24]
 8008d44:	3302      	adds	r3, #2
 8008d46:	61bb      	str	r3, [r7, #24]
 8008d48:	e007      	b.n	8008d5a <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008d4a:	69fb      	ldr	r3, [r7, #28]
 8008d4c:	781a      	ldrb	r2, [r3, #0]
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008d54:	69fb      	ldr	r3, [r7, #28]
 8008d56:	3301      	adds	r3, #1
 8008d58:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008d60:	b29b      	uxth	r3, r3
 8008d62:	3b01      	subs	r3, #1
 8008d64:	b29a      	uxth	r2, r3
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008d72:	b29b      	uxth	r3, r3
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d1cc      	bne.n	8008d12 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008d78:	683b      	ldr	r3, [r7, #0]
 8008d7a:	9300      	str	r3, [sp, #0]
 8008d7c:	697b      	ldr	r3, [r7, #20]
 8008d7e:	2200      	movs	r2, #0
 8008d80:	2140      	movs	r1, #64	; 0x40
 8008d82:	68f8      	ldr	r0, [r7, #12]
 8008d84:	f000 fe67 	bl	8009a56 <UART_WaitOnFlagUntilTimeout>
 8008d88:	4603      	mov	r3, r0
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d001      	beq.n	8008d92 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8008d8e:	2303      	movs	r3, #3
 8008d90:	e006      	b.n	8008da0 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	2220      	movs	r2, #32
 8008d96:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	e000      	b.n	8008da0 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8008d9e:	2302      	movs	r3, #2
  }
}
 8008da0:	4618      	mov	r0, r3
 8008da2:	3720      	adds	r7, #32
 8008da4:	46bd      	mov	sp, r7
 8008da6:	bd80      	pop	{r7, pc}

08008da8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008da8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008dac:	b092      	sub	sp, #72	; 0x48
 8008dae:	af00      	add	r7, sp, #0
 8008db0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008db2:	2300      	movs	r3, #0
 8008db4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008db8:	697b      	ldr	r3, [r7, #20]
 8008dba:	689a      	ldr	r2, [r3, #8]
 8008dbc:	697b      	ldr	r3, [r7, #20]
 8008dbe:	691b      	ldr	r3, [r3, #16]
 8008dc0:	431a      	orrs	r2, r3
 8008dc2:	697b      	ldr	r3, [r7, #20]
 8008dc4:	695b      	ldr	r3, [r3, #20]
 8008dc6:	431a      	orrs	r2, r3
 8008dc8:	697b      	ldr	r3, [r7, #20]
 8008dca:	69db      	ldr	r3, [r3, #28]
 8008dcc:	4313      	orrs	r3, r2
 8008dce:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008dd0:	697b      	ldr	r3, [r7, #20]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	681a      	ldr	r2, [r3, #0]
 8008dd6:	4bbe      	ldr	r3, [pc, #760]	; (80090d0 <UART_SetConfig+0x328>)
 8008dd8:	4013      	ands	r3, r2
 8008dda:	697a      	ldr	r2, [r7, #20]
 8008ddc:	6812      	ldr	r2, [r2, #0]
 8008dde:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008de0:	430b      	orrs	r3, r1
 8008de2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008de4:	697b      	ldr	r3, [r7, #20]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	685b      	ldr	r3, [r3, #4]
 8008dea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008dee:	697b      	ldr	r3, [r7, #20]
 8008df0:	68da      	ldr	r2, [r3, #12]
 8008df2:	697b      	ldr	r3, [r7, #20]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	430a      	orrs	r2, r1
 8008df8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008dfa:	697b      	ldr	r3, [r7, #20]
 8008dfc:	699b      	ldr	r3, [r3, #24]
 8008dfe:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008e00:	697b      	ldr	r3, [r7, #20]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	4ab3      	ldr	r2, [pc, #716]	; (80090d4 <UART_SetConfig+0x32c>)
 8008e06:	4293      	cmp	r3, r2
 8008e08:	d004      	beq.n	8008e14 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008e0a:	697b      	ldr	r3, [r7, #20]
 8008e0c:	6a1b      	ldr	r3, [r3, #32]
 8008e0e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008e10:	4313      	orrs	r3, r2
 8008e12:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008e14:	697b      	ldr	r3, [r7, #20]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	689a      	ldr	r2, [r3, #8]
 8008e1a:	4baf      	ldr	r3, [pc, #700]	; (80090d8 <UART_SetConfig+0x330>)
 8008e1c:	4013      	ands	r3, r2
 8008e1e:	697a      	ldr	r2, [r7, #20]
 8008e20:	6812      	ldr	r2, [r2, #0]
 8008e22:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008e24:	430b      	orrs	r3, r1
 8008e26:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008e28:	697b      	ldr	r3, [r7, #20]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e2e:	f023 010f 	bic.w	r1, r3, #15
 8008e32:	697b      	ldr	r3, [r7, #20]
 8008e34:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008e36:	697b      	ldr	r3, [r7, #20]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	430a      	orrs	r2, r1
 8008e3c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008e3e:	697b      	ldr	r3, [r7, #20]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	4aa6      	ldr	r2, [pc, #664]	; (80090dc <UART_SetConfig+0x334>)
 8008e44:	4293      	cmp	r3, r2
 8008e46:	d177      	bne.n	8008f38 <UART_SetConfig+0x190>
 8008e48:	4ba5      	ldr	r3, [pc, #660]	; (80090e0 <UART_SetConfig+0x338>)
 8008e4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e4c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008e50:	2b28      	cmp	r3, #40	; 0x28
 8008e52:	d86d      	bhi.n	8008f30 <UART_SetConfig+0x188>
 8008e54:	a201      	add	r2, pc, #4	; (adr r2, 8008e5c <UART_SetConfig+0xb4>)
 8008e56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e5a:	bf00      	nop
 8008e5c:	08008f01 	.word	0x08008f01
 8008e60:	08008f31 	.word	0x08008f31
 8008e64:	08008f31 	.word	0x08008f31
 8008e68:	08008f31 	.word	0x08008f31
 8008e6c:	08008f31 	.word	0x08008f31
 8008e70:	08008f31 	.word	0x08008f31
 8008e74:	08008f31 	.word	0x08008f31
 8008e78:	08008f31 	.word	0x08008f31
 8008e7c:	08008f09 	.word	0x08008f09
 8008e80:	08008f31 	.word	0x08008f31
 8008e84:	08008f31 	.word	0x08008f31
 8008e88:	08008f31 	.word	0x08008f31
 8008e8c:	08008f31 	.word	0x08008f31
 8008e90:	08008f31 	.word	0x08008f31
 8008e94:	08008f31 	.word	0x08008f31
 8008e98:	08008f31 	.word	0x08008f31
 8008e9c:	08008f11 	.word	0x08008f11
 8008ea0:	08008f31 	.word	0x08008f31
 8008ea4:	08008f31 	.word	0x08008f31
 8008ea8:	08008f31 	.word	0x08008f31
 8008eac:	08008f31 	.word	0x08008f31
 8008eb0:	08008f31 	.word	0x08008f31
 8008eb4:	08008f31 	.word	0x08008f31
 8008eb8:	08008f31 	.word	0x08008f31
 8008ebc:	08008f19 	.word	0x08008f19
 8008ec0:	08008f31 	.word	0x08008f31
 8008ec4:	08008f31 	.word	0x08008f31
 8008ec8:	08008f31 	.word	0x08008f31
 8008ecc:	08008f31 	.word	0x08008f31
 8008ed0:	08008f31 	.word	0x08008f31
 8008ed4:	08008f31 	.word	0x08008f31
 8008ed8:	08008f31 	.word	0x08008f31
 8008edc:	08008f21 	.word	0x08008f21
 8008ee0:	08008f31 	.word	0x08008f31
 8008ee4:	08008f31 	.word	0x08008f31
 8008ee8:	08008f31 	.word	0x08008f31
 8008eec:	08008f31 	.word	0x08008f31
 8008ef0:	08008f31 	.word	0x08008f31
 8008ef4:	08008f31 	.word	0x08008f31
 8008ef8:	08008f31 	.word	0x08008f31
 8008efc:	08008f29 	.word	0x08008f29
 8008f00:	2301      	movs	r3, #1
 8008f02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f06:	e222      	b.n	800934e <UART_SetConfig+0x5a6>
 8008f08:	2304      	movs	r3, #4
 8008f0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f0e:	e21e      	b.n	800934e <UART_SetConfig+0x5a6>
 8008f10:	2308      	movs	r3, #8
 8008f12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f16:	e21a      	b.n	800934e <UART_SetConfig+0x5a6>
 8008f18:	2310      	movs	r3, #16
 8008f1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f1e:	e216      	b.n	800934e <UART_SetConfig+0x5a6>
 8008f20:	2320      	movs	r3, #32
 8008f22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f26:	e212      	b.n	800934e <UART_SetConfig+0x5a6>
 8008f28:	2340      	movs	r3, #64	; 0x40
 8008f2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f2e:	e20e      	b.n	800934e <UART_SetConfig+0x5a6>
 8008f30:	2380      	movs	r3, #128	; 0x80
 8008f32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f36:	e20a      	b.n	800934e <UART_SetConfig+0x5a6>
 8008f38:	697b      	ldr	r3, [r7, #20]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	4a69      	ldr	r2, [pc, #420]	; (80090e4 <UART_SetConfig+0x33c>)
 8008f3e:	4293      	cmp	r3, r2
 8008f40:	d130      	bne.n	8008fa4 <UART_SetConfig+0x1fc>
 8008f42:	4b67      	ldr	r3, [pc, #412]	; (80090e0 <UART_SetConfig+0x338>)
 8008f44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f46:	f003 0307 	and.w	r3, r3, #7
 8008f4a:	2b05      	cmp	r3, #5
 8008f4c:	d826      	bhi.n	8008f9c <UART_SetConfig+0x1f4>
 8008f4e:	a201      	add	r2, pc, #4	; (adr r2, 8008f54 <UART_SetConfig+0x1ac>)
 8008f50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f54:	08008f6d 	.word	0x08008f6d
 8008f58:	08008f75 	.word	0x08008f75
 8008f5c:	08008f7d 	.word	0x08008f7d
 8008f60:	08008f85 	.word	0x08008f85
 8008f64:	08008f8d 	.word	0x08008f8d
 8008f68:	08008f95 	.word	0x08008f95
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f72:	e1ec      	b.n	800934e <UART_SetConfig+0x5a6>
 8008f74:	2304      	movs	r3, #4
 8008f76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f7a:	e1e8      	b.n	800934e <UART_SetConfig+0x5a6>
 8008f7c:	2308      	movs	r3, #8
 8008f7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f82:	e1e4      	b.n	800934e <UART_SetConfig+0x5a6>
 8008f84:	2310      	movs	r3, #16
 8008f86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f8a:	e1e0      	b.n	800934e <UART_SetConfig+0x5a6>
 8008f8c:	2320      	movs	r3, #32
 8008f8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f92:	e1dc      	b.n	800934e <UART_SetConfig+0x5a6>
 8008f94:	2340      	movs	r3, #64	; 0x40
 8008f96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f9a:	e1d8      	b.n	800934e <UART_SetConfig+0x5a6>
 8008f9c:	2380      	movs	r3, #128	; 0x80
 8008f9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008fa2:	e1d4      	b.n	800934e <UART_SetConfig+0x5a6>
 8008fa4:	697b      	ldr	r3, [r7, #20]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	4a4f      	ldr	r2, [pc, #316]	; (80090e8 <UART_SetConfig+0x340>)
 8008faa:	4293      	cmp	r3, r2
 8008fac:	d130      	bne.n	8009010 <UART_SetConfig+0x268>
 8008fae:	4b4c      	ldr	r3, [pc, #304]	; (80090e0 <UART_SetConfig+0x338>)
 8008fb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008fb2:	f003 0307 	and.w	r3, r3, #7
 8008fb6:	2b05      	cmp	r3, #5
 8008fb8:	d826      	bhi.n	8009008 <UART_SetConfig+0x260>
 8008fba:	a201      	add	r2, pc, #4	; (adr r2, 8008fc0 <UART_SetConfig+0x218>)
 8008fbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fc0:	08008fd9 	.word	0x08008fd9
 8008fc4:	08008fe1 	.word	0x08008fe1
 8008fc8:	08008fe9 	.word	0x08008fe9
 8008fcc:	08008ff1 	.word	0x08008ff1
 8008fd0:	08008ff9 	.word	0x08008ff9
 8008fd4:	08009001 	.word	0x08009001
 8008fd8:	2300      	movs	r3, #0
 8008fda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008fde:	e1b6      	b.n	800934e <UART_SetConfig+0x5a6>
 8008fe0:	2304      	movs	r3, #4
 8008fe2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008fe6:	e1b2      	b.n	800934e <UART_SetConfig+0x5a6>
 8008fe8:	2308      	movs	r3, #8
 8008fea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008fee:	e1ae      	b.n	800934e <UART_SetConfig+0x5a6>
 8008ff0:	2310      	movs	r3, #16
 8008ff2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ff6:	e1aa      	b.n	800934e <UART_SetConfig+0x5a6>
 8008ff8:	2320      	movs	r3, #32
 8008ffa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ffe:	e1a6      	b.n	800934e <UART_SetConfig+0x5a6>
 8009000:	2340      	movs	r3, #64	; 0x40
 8009002:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009006:	e1a2      	b.n	800934e <UART_SetConfig+0x5a6>
 8009008:	2380      	movs	r3, #128	; 0x80
 800900a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800900e:	e19e      	b.n	800934e <UART_SetConfig+0x5a6>
 8009010:	697b      	ldr	r3, [r7, #20]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	4a35      	ldr	r2, [pc, #212]	; (80090ec <UART_SetConfig+0x344>)
 8009016:	4293      	cmp	r3, r2
 8009018:	d130      	bne.n	800907c <UART_SetConfig+0x2d4>
 800901a:	4b31      	ldr	r3, [pc, #196]	; (80090e0 <UART_SetConfig+0x338>)
 800901c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800901e:	f003 0307 	and.w	r3, r3, #7
 8009022:	2b05      	cmp	r3, #5
 8009024:	d826      	bhi.n	8009074 <UART_SetConfig+0x2cc>
 8009026:	a201      	add	r2, pc, #4	; (adr r2, 800902c <UART_SetConfig+0x284>)
 8009028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800902c:	08009045 	.word	0x08009045
 8009030:	0800904d 	.word	0x0800904d
 8009034:	08009055 	.word	0x08009055
 8009038:	0800905d 	.word	0x0800905d
 800903c:	08009065 	.word	0x08009065
 8009040:	0800906d 	.word	0x0800906d
 8009044:	2300      	movs	r3, #0
 8009046:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800904a:	e180      	b.n	800934e <UART_SetConfig+0x5a6>
 800904c:	2304      	movs	r3, #4
 800904e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009052:	e17c      	b.n	800934e <UART_SetConfig+0x5a6>
 8009054:	2308      	movs	r3, #8
 8009056:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800905a:	e178      	b.n	800934e <UART_SetConfig+0x5a6>
 800905c:	2310      	movs	r3, #16
 800905e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009062:	e174      	b.n	800934e <UART_SetConfig+0x5a6>
 8009064:	2320      	movs	r3, #32
 8009066:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800906a:	e170      	b.n	800934e <UART_SetConfig+0x5a6>
 800906c:	2340      	movs	r3, #64	; 0x40
 800906e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009072:	e16c      	b.n	800934e <UART_SetConfig+0x5a6>
 8009074:	2380      	movs	r3, #128	; 0x80
 8009076:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800907a:	e168      	b.n	800934e <UART_SetConfig+0x5a6>
 800907c:	697b      	ldr	r3, [r7, #20]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	4a1b      	ldr	r2, [pc, #108]	; (80090f0 <UART_SetConfig+0x348>)
 8009082:	4293      	cmp	r3, r2
 8009084:	d142      	bne.n	800910c <UART_SetConfig+0x364>
 8009086:	4b16      	ldr	r3, [pc, #88]	; (80090e0 <UART_SetConfig+0x338>)
 8009088:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800908a:	f003 0307 	and.w	r3, r3, #7
 800908e:	2b05      	cmp	r3, #5
 8009090:	d838      	bhi.n	8009104 <UART_SetConfig+0x35c>
 8009092:	a201      	add	r2, pc, #4	; (adr r2, 8009098 <UART_SetConfig+0x2f0>)
 8009094:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009098:	080090b1 	.word	0x080090b1
 800909c:	080090b9 	.word	0x080090b9
 80090a0:	080090c1 	.word	0x080090c1
 80090a4:	080090c9 	.word	0x080090c9
 80090a8:	080090f5 	.word	0x080090f5
 80090ac:	080090fd 	.word	0x080090fd
 80090b0:	2300      	movs	r3, #0
 80090b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80090b6:	e14a      	b.n	800934e <UART_SetConfig+0x5a6>
 80090b8:	2304      	movs	r3, #4
 80090ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80090be:	e146      	b.n	800934e <UART_SetConfig+0x5a6>
 80090c0:	2308      	movs	r3, #8
 80090c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80090c6:	e142      	b.n	800934e <UART_SetConfig+0x5a6>
 80090c8:	2310      	movs	r3, #16
 80090ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80090ce:	e13e      	b.n	800934e <UART_SetConfig+0x5a6>
 80090d0:	cfff69f3 	.word	0xcfff69f3
 80090d4:	58000c00 	.word	0x58000c00
 80090d8:	11fff4ff 	.word	0x11fff4ff
 80090dc:	40011000 	.word	0x40011000
 80090e0:	58024400 	.word	0x58024400
 80090e4:	40004400 	.word	0x40004400
 80090e8:	40004800 	.word	0x40004800
 80090ec:	40004c00 	.word	0x40004c00
 80090f0:	40005000 	.word	0x40005000
 80090f4:	2320      	movs	r3, #32
 80090f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80090fa:	e128      	b.n	800934e <UART_SetConfig+0x5a6>
 80090fc:	2340      	movs	r3, #64	; 0x40
 80090fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009102:	e124      	b.n	800934e <UART_SetConfig+0x5a6>
 8009104:	2380      	movs	r3, #128	; 0x80
 8009106:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800910a:	e120      	b.n	800934e <UART_SetConfig+0x5a6>
 800910c:	697b      	ldr	r3, [r7, #20]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	4acb      	ldr	r2, [pc, #812]	; (8009440 <UART_SetConfig+0x698>)
 8009112:	4293      	cmp	r3, r2
 8009114:	d176      	bne.n	8009204 <UART_SetConfig+0x45c>
 8009116:	4bcb      	ldr	r3, [pc, #812]	; (8009444 <UART_SetConfig+0x69c>)
 8009118:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800911a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800911e:	2b28      	cmp	r3, #40	; 0x28
 8009120:	d86c      	bhi.n	80091fc <UART_SetConfig+0x454>
 8009122:	a201      	add	r2, pc, #4	; (adr r2, 8009128 <UART_SetConfig+0x380>)
 8009124:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009128:	080091cd 	.word	0x080091cd
 800912c:	080091fd 	.word	0x080091fd
 8009130:	080091fd 	.word	0x080091fd
 8009134:	080091fd 	.word	0x080091fd
 8009138:	080091fd 	.word	0x080091fd
 800913c:	080091fd 	.word	0x080091fd
 8009140:	080091fd 	.word	0x080091fd
 8009144:	080091fd 	.word	0x080091fd
 8009148:	080091d5 	.word	0x080091d5
 800914c:	080091fd 	.word	0x080091fd
 8009150:	080091fd 	.word	0x080091fd
 8009154:	080091fd 	.word	0x080091fd
 8009158:	080091fd 	.word	0x080091fd
 800915c:	080091fd 	.word	0x080091fd
 8009160:	080091fd 	.word	0x080091fd
 8009164:	080091fd 	.word	0x080091fd
 8009168:	080091dd 	.word	0x080091dd
 800916c:	080091fd 	.word	0x080091fd
 8009170:	080091fd 	.word	0x080091fd
 8009174:	080091fd 	.word	0x080091fd
 8009178:	080091fd 	.word	0x080091fd
 800917c:	080091fd 	.word	0x080091fd
 8009180:	080091fd 	.word	0x080091fd
 8009184:	080091fd 	.word	0x080091fd
 8009188:	080091e5 	.word	0x080091e5
 800918c:	080091fd 	.word	0x080091fd
 8009190:	080091fd 	.word	0x080091fd
 8009194:	080091fd 	.word	0x080091fd
 8009198:	080091fd 	.word	0x080091fd
 800919c:	080091fd 	.word	0x080091fd
 80091a0:	080091fd 	.word	0x080091fd
 80091a4:	080091fd 	.word	0x080091fd
 80091a8:	080091ed 	.word	0x080091ed
 80091ac:	080091fd 	.word	0x080091fd
 80091b0:	080091fd 	.word	0x080091fd
 80091b4:	080091fd 	.word	0x080091fd
 80091b8:	080091fd 	.word	0x080091fd
 80091bc:	080091fd 	.word	0x080091fd
 80091c0:	080091fd 	.word	0x080091fd
 80091c4:	080091fd 	.word	0x080091fd
 80091c8:	080091f5 	.word	0x080091f5
 80091cc:	2301      	movs	r3, #1
 80091ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80091d2:	e0bc      	b.n	800934e <UART_SetConfig+0x5a6>
 80091d4:	2304      	movs	r3, #4
 80091d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80091da:	e0b8      	b.n	800934e <UART_SetConfig+0x5a6>
 80091dc:	2308      	movs	r3, #8
 80091de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80091e2:	e0b4      	b.n	800934e <UART_SetConfig+0x5a6>
 80091e4:	2310      	movs	r3, #16
 80091e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80091ea:	e0b0      	b.n	800934e <UART_SetConfig+0x5a6>
 80091ec:	2320      	movs	r3, #32
 80091ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80091f2:	e0ac      	b.n	800934e <UART_SetConfig+0x5a6>
 80091f4:	2340      	movs	r3, #64	; 0x40
 80091f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80091fa:	e0a8      	b.n	800934e <UART_SetConfig+0x5a6>
 80091fc:	2380      	movs	r3, #128	; 0x80
 80091fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009202:	e0a4      	b.n	800934e <UART_SetConfig+0x5a6>
 8009204:	697b      	ldr	r3, [r7, #20]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	4a8f      	ldr	r2, [pc, #572]	; (8009448 <UART_SetConfig+0x6a0>)
 800920a:	4293      	cmp	r3, r2
 800920c:	d130      	bne.n	8009270 <UART_SetConfig+0x4c8>
 800920e:	4b8d      	ldr	r3, [pc, #564]	; (8009444 <UART_SetConfig+0x69c>)
 8009210:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009212:	f003 0307 	and.w	r3, r3, #7
 8009216:	2b05      	cmp	r3, #5
 8009218:	d826      	bhi.n	8009268 <UART_SetConfig+0x4c0>
 800921a:	a201      	add	r2, pc, #4	; (adr r2, 8009220 <UART_SetConfig+0x478>)
 800921c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009220:	08009239 	.word	0x08009239
 8009224:	08009241 	.word	0x08009241
 8009228:	08009249 	.word	0x08009249
 800922c:	08009251 	.word	0x08009251
 8009230:	08009259 	.word	0x08009259
 8009234:	08009261 	.word	0x08009261
 8009238:	2300      	movs	r3, #0
 800923a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800923e:	e086      	b.n	800934e <UART_SetConfig+0x5a6>
 8009240:	2304      	movs	r3, #4
 8009242:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009246:	e082      	b.n	800934e <UART_SetConfig+0x5a6>
 8009248:	2308      	movs	r3, #8
 800924a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800924e:	e07e      	b.n	800934e <UART_SetConfig+0x5a6>
 8009250:	2310      	movs	r3, #16
 8009252:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009256:	e07a      	b.n	800934e <UART_SetConfig+0x5a6>
 8009258:	2320      	movs	r3, #32
 800925a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800925e:	e076      	b.n	800934e <UART_SetConfig+0x5a6>
 8009260:	2340      	movs	r3, #64	; 0x40
 8009262:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009266:	e072      	b.n	800934e <UART_SetConfig+0x5a6>
 8009268:	2380      	movs	r3, #128	; 0x80
 800926a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800926e:	e06e      	b.n	800934e <UART_SetConfig+0x5a6>
 8009270:	697b      	ldr	r3, [r7, #20]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	4a75      	ldr	r2, [pc, #468]	; (800944c <UART_SetConfig+0x6a4>)
 8009276:	4293      	cmp	r3, r2
 8009278:	d130      	bne.n	80092dc <UART_SetConfig+0x534>
 800927a:	4b72      	ldr	r3, [pc, #456]	; (8009444 <UART_SetConfig+0x69c>)
 800927c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800927e:	f003 0307 	and.w	r3, r3, #7
 8009282:	2b05      	cmp	r3, #5
 8009284:	d826      	bhi.n	80092d4 <UART_SetConfig+0x52c>
 8009286:	a201      	add	r2, pc, #4	; (adr r2, 800928c <UART_SetConfig+0x4e4>)
 8009288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800928c:	080092a5 	.word	0x080092a5
 8009290:	080092ad 	.word	0x080092ad
 8009294:	080092b5 	.word	0x080092b5
 8009298:	080092bd 	.word	0x080092bd
 800929c:	080092c5 	.word	0x080092c5
 80092a0:	080092cd 	.word	0x080092cd
 80092a4:	2300      	movs	r3, #0
 80092a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80092aa:	e050      	b.n	800934e <UART_SetConfig+0x5a6>
 80092ac:	2304      	movs	r3, #4
 80092ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80092b2:	e04c      	b.n	800934e <UART_SetConfig+0x5a6>
 80092b4:	2308      	movs	r3, #8
 80092b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80092ba:	e048      	b.n	800934e <UART_SetConfig+0x5a6>
 80092bc:	2310      	movs	r3, #16
 80092be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80092c2:	e044      	b.n	800934e <UART_SetConfig+0x5a6>
 80092c4:	2320      	movs	r3, #32
 80092c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80092ca:	e040      	b.n	800934e <UART_SetConfig+0x5a6>
 80092cc:	2340      	movs	r3, #64	; 0x40
 80092ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80092d2:	e03c      	b.n	800934e <UART_SetConfig+0x5a6>
 80092d4:	2380      	movs	r3, #128	; 0x80
 80092d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80092da:	e038      	b.n	800934e <UART_SetConfig+0x5a6>
 80092dc:	697b      	ldr	r3, [r7, #20]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	4a5b      	ldr	r2, [pc, #364]	; (8009450 <UART_SetConfig+0x6a8>)
 80092e2:	4293      	cmp	r3, r2
 80092e4:	d130      	bne.n	8009348 <UART_SetConfig+0x5a0>
 80092e6:	4b57      	ldr	r3, [pc, #348]	; (8009444 <UART_SetConfig+0x69c>)
 80092e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092ea:	f003 0307 	and.w	r3, r3, #7
 80092ee:	2b05      	cmp	r3, #5
 80092f0:	d826      	bhi.n	8009340 <UART_SetConfig+0x598>
 80092f2:	a201      	add	r2, pc, #4	; (adr r2, 80092f8 <UART_SetConfig+0x550>)
 80092f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092f8:	08009311 	.word	0x08009311
 80092fc:	08009319 	.word	0x08009319
 8009300:	08009321 	.word	0x08009321
 8009304:	08009329 	.word	0x08009329
 8009308:	08009331 	.word	0x08009331
 800930c:	08009339 	.word	0x08009339
 8009310:	2302      	movs	r3, #2
 8009312:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009316:	e01a      	b.n	800934e <UART_SetConfig+0x5a6>
 8009318:	2304      	movs	r3, #4
 800931a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800931e:	e016      	b.n	800934e <UART_SetConfig+0x5a6>
 8009320:	2308      	movs	r3, #8
 8009322:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009326:	e012      	b.n	800934e <UART_SetConfig+0x5a6>
 8009328:	2310      	movs	r3, #16
 800932a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800932e:	e00e      	b.n	800934e <UART_SetConfig+0x5a6>
 8009330:	2320      	movs	r3, #32
 8009332:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009336:	e00a      	b.n	800934e <UART_SetConfig+0x5a6>
 8009338:	2340      	movs	r3, #64	; 0x40
 800933a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800933e:	e006      	b.n	800934e <UART_SetConfig+0x5a6>
 8009340:	2380      	movs	r3, #128	; 0x80
 8009342:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009346:	e002      	b.n	800934e <UART_SetConfig+0x5a6>
 8009348:	2380      	movs	r3, #128	; 0x80
 800934a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800934e:	697b      	ldr	r3, [r7, #20]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	4a3f      	ldr	r2, [pc, #252]	; (8009450 <UART_SetConfig+0x6a8>)
 8009354:	4293      	cmp	r3, r2
 8009356:	f040 80f8 	bne.w	800954a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800935a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800935e:	2b20      	cmp	r3, #32
 8009360:	dc46      	bgt.n	80093f0 <UART_SetConfig+0x648>
 8009362:	2b02      	cmp	r3, #2
 8009364:	f2c0 8082 	blt.w	800946c <UART_SetConfig+0x6c4>
 8009368:	3b02      	subs	r3, #2
 800936a:	2b1e      	cmp	r3, #30
 800936c:	d87e      	bhi.n	800946c <UART_SetConfig+0x6c4>
 800936e:	a201      	add	r2, pc, #4	; (adr r2, 8009374 <UART_SetConfig+0x5cc>)
 8009370:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009374:	080093f7 	.word	0x080093f7
 8009378:	0800946d 	.word	0x0800946d
 800937c:	080093ff 	.word	0x080093ff
 8009380:	0800946d 	.word	0x0800946d
 8009384:	0800946d 	.word	0x0800946d
 8009388:	0800946d 	.word	0x0800946d
 800938c:	0800940f 	.word	0x0800940f
 8009390:	0800946d 	.word	0x0800946d
 8009394:	0800946d 	.word	0x0800946d
 8009398:	0800946d 	.word	0x0800946d
 800939c:	0800946d 	.word	0x0800946d
 80093a0:	0800946d 	.word	0x0800946d
 80093a4:	0800946d 	.word	0x0800946d
 80093a8:	0800946d 	.word	0x0800946d
 80093ac:	0800941f 	.word	0x0800941f
 80093b0:	0800946d 	.word	0x0800946d
 80093b4:	0800946d 	.word	0x0800946d
 80093b8:	0800946d 	.word	0x0800946d
 80093bc:	0800946d 	.word	0x0800946d
 80093c0:	0800946d 	.word	0x0800946d
 80093c4:	0800946d 	.word	0x0800946d
 80093c8:	0800946d 	.word	0x0800946d
 80093cc:	0800946d 	.word	0x0800946d
 80093d0:	0800946d 	.word	0x0800946d
 80093d4:	0800946d 	.word	0x0800946d
 80093d8:	0800946d 	.word	0x0800946d
 80093dc:	0800946d 	.word	0x0800946d
 80093e0:	0800946d 	.word	0x0800946d
 80093e4:	0800946d 	.word	0x0800946d
 80093e8:	0800946d 	.word	0x0800946d
 80093ec:	0800945f 	.word	0x0800945f
 80093f0:	2b40      	cmp	r3, #64	; 0x40
 80093f2:	d037      	beq.n	8009464 <UART_SetConfig+0x6bc>
 80093f4:	e03a      	b.n	800946c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80093f6:	f7fd fff5 	bl	80073e4 <HAL_RCCEx_GetD3PCLK1Freq>
 80093fa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80093fc:	e03c      	b.n	8009478 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80093fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009402:	4618      	mov	r0, r3
 8009404:	f7fe f804 	bl	8007410 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800940a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800940c:	e034      	b.n	8009478 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800940e:	f107 0318 	add.w	r3, r7, #24
 8009412:	4618      	mov	r0, r3
 8009414:	f7fe f950 	bl	80076b8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009418:	69fb      	ldr	r3, [r7, #28]
 800941a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800941c:	e02c      	b.n	8009478 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800941e:	4b09      	ldr	r3, [pc, #36]	; (8009444 <UART_SetConfig+0x69c>)
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	f003 0320 	and.w	r3, r3, #32
 8009426:	2b00      	cmp	r3, #0
 8009428:	d016      	beq.n	8009458 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800942a:	4b06      	ldr	r3, [pc, #24]	; (8009444 <UART_SetConfig+0x69c>)
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	08db      	lsrs	r3, r3, #3
 8009430:	f003 0303 	and.w	r3, r3, #3
 8009434:	4a07      	ldr	r2, [pc, #28]	; (8009454 <UART_SetConfig+0x6ac>)
 8009436:	fa22 f303 	lsr.w	r3, r2, r3
 800943a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800943c:	e01c      	b.n	8009478 <UART_SetConfig+0x6d0>
 800943e:	bf00      	nop
 8009440:	40011400 	.word	0x40011400
 8009444:	58024400 	.word	0x58024400
 8009448:	40007800 	.word	0x40007800
 800944c:	40007c00 	.word	0x40007c00
 8009450:	58000c00 	.word	0x58000c00
 8009454:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8009458:	4b9e      	ldr	r3, [pc, #632]	; (80096d4 <UART_SetConfig+0x92c>)
 800945a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800945c:	e00c      	b.n	8009478 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800945e:	4b9e      	ldr	r3, [pc, #632]	; (80096d8 <UART_SetConfig+0x930>)
 8009460:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009462:	e009      	b.n	8009478 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009464:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009468:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800946a:	e005      	b.n	8009478 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800946c:	2300      	movs	r3, #0
 800946e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8009470:	2301      	movs	r3, #1
 8009472:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8009476:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009478:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800947a:	2b00      	cmp	r3, #0
 800947c:	f000 81e0 	beq.w	8009840 <UART_SetConfig+0xa98>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009480:	697b      	ldr	r3, [r7, #20]
 8009482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009484:	4a95      	ldr	r2, [pc, #596]	; (80096dc <UART_SetConfig+0x934>)
 8009486:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800948a:	461a      	mov	r2, r3
 800948c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800948e:	fbb3 f3f2 	udiv	r3, r3, r2
 8009492:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009494:	697b      	ldr	r3, [r7, #20]
 8009496:	685a      	ldr	r2, [r3, #4]
 8009498:	4613      	mov	r3, r2
 800949a:	005b      	lsls	r3, r3, #1
 800949c:	4413      	add	r3, r2
 800949e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80094a0:	429a      	cmp	r2, r3
 80094a2:	d305      	bcc.n	80094b0 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80094a4:	697b      	ldr	r3, [r7, #20]
 80094a6:	685b      	ldr	r3, [r3, #4]
 80094a8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80094aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80094ac:	429a      	cmp	r2, r3
 80094ae:	d903      	bls.n	80094b8 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80094b0:	2301      	movs	r3, #1
 80094b2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80094b6:	e1c3      	b.n	8009840 <UART_SetConfig+0xa98>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80094b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094ba:	2200      	movs	r2, #0
 80094bc:	60bb      	str	r3, [r7, #8]
 80094be:	60fa      	str	r2, [r7, #12]
 80094c0:	697b      	ldr	r3, [r7, #20]
 80094c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094c4:	4a85      	ldr	r2, [pc, #532]	; (80096dc <UART_SetConfig+0x934>)
 80094c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80094ca:	b29b      	uxth	r3, r3
 80094cc:	2200      	movs	r2, #0
 80094ce:	603b      	str	r3, [r7, #0]
 80094d0:	607a      	str	r2, [r7, #4]
 80094d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80094d6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80094da:	f7f7 f925 	bl	8000728 <__aeabi_uldivmod>
 80094de:	4602      	mov	r2, r0
 80094e0:	460b      	mov	r3, r1
 80094e2:	4610      	mov	r0, r2
 80094e4:	4619      	mov	r1, r3
 80094e6:	f04f 0200 	mov.w	r2, #0
 80094ea:	f04f 0300 	mov.w	r3, #0
 80094ee:	020b      	lsls	r3, r1, #8
 80094f0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80094f4:	0202      	lsls	r2, r0, #8
 80094f6:	6979      	ldr	r1, [r7, #20]
 80094f8:	6849      	ldr	r1, [r1, #4]
 80094fa:	0849      	lsrs	r1, r1, #1
 80094fc:	2000      	movs	r0, #0
 80094fe:	460c      	mov	r4, r1
 8009500:	4605      	mov	r5, r0
 8009502:	eb12 0804 	adds.w	r8, r2, r4
 8009506:	eb43 0905 	adc.w	r9, r3, r5
 800950a:	697b      	ldr	r3, [r7, #20]
 800950c:	685b      	ldr	r3, [r3, #4]
 800950e:	2200      	movs	r2, #0
 8009510:	469a      	mov	sl, r3
 8009512:	4693      	mov	fp, r2
 8009514:	4652      	mov	r2, sl
 8009516:	465b      	mov	r3, fp
 8009518:	4640      	mov	r0, r8
 800951a:	4649      	mov	r1, r9
 800951c:	f7f7 f904 	bl	8000728 <__aeabi_uldivmod>
 8009520:	4602      	mov	r2, r0
 8009522:	460b      	mov	r3, r1
 8009524:	4613      	mov	r3, r2
 8009526:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800952a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800952e:	d308      	bcc.n	8009542 <UART_SetConfig+0x79a>
 8009530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009532:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009536:	d204      	bcs.n	8009542 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8009538:	697b      	ldr	r3, [r7, #20]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800953e:	60da      	str	r2, [r3, #12]
 8009540:	e17e      	b.n	8009840 <UART_SetConfig+0xa98>
        }
        else
        {
          ret = HAL_ERROR;
 8009542:	2301      	movs	r3, #1
 8009544:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8009548:	e17a      	b.n	8009840 <UART_SetConfig+0xa98>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800954a:	697b      	ldr	r3, [r7, #20]
 800954c:	69db      	ldr	r3, [r3, #28]
 800954e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009552:	f040 80c7 	bne.w	80096e4 <UART_SetConfig+0x93c>
  {
    switch (clocksource)
 8009556:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800955a:	2b20      	cmp	r3, #32
 800955c:	dc48      	bgt.n	80095f0 <UART_SetConfig+0x848>
 800955e:	2b00      	cmp	r3, #0
 8009560:	db7b      	blt.n	800965a <UART_SetConfig+0x8b2>
 8009562:	2b20      	cmp	r3, #32
 8009564:	d879      	bhi.n	800965a <UART_SetConfig+0x8b2>
 8009566:	a201      	add	r2, pc, #4	; (adr r2, 800956c <UART_SetConfig+0x7c4>)
 8009568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800956c:	080095f7 	.word	0x080095f7
 8009570:	080095ff 	.word	0x080095ff
 8009574:	0800965b 	.word	0x0800965b
 8009578:	0800965b 	.word	0x0800965b
 800957c:	08009607 	.word	0x08009607
 8009580:	0800965b 	.word	0x0800965b
 8009584:	0800965b 	.word	0x0800965b
 8009588:	0800965b 	.word	0x0800965b
 800958c:	08009617 	.word	0x08009617
 8009590:	0800965b 	.word	0x0800965b
 8009594:	0800965b 	.word	0x0800965b
 8009598:	0800965b 	.word	0x0800965b
 800959c:	0800965b 	.word	0x0800965b
 80095a0:	0800965b 	.word	0x0800965b
 80095a4:	0800965b 	.word	0x0800965b
 80095a8:	0800965b 	.word	0x0800965b
 80095ac:	08009627 	.word	0x08009627
 80095b0:	0800965b 	.word	0x0800965b
 80095b4:	0800965b 	.word	0x0800965b
 80095b8:	0800965b 	.word	0x0800965b
 80095bc:	0800965b 	.word	0x0800965b
 80095c0:	0800965b 	.word	0x0800965b
 80095c4:	0800965b 	.word	0x0800965b
 80095c8:	0800965b 	.word	0x0800965b
 80095cc:	0800965b 	.word	0x0800965b
 80095d0:	0800965b 	.word	0x0800965b
 80095d4:	0800965b 	.word	0x0800965b
 80095d8:	0800965b 	.word	0x0800965b
 80095dc:	0800965b 	.word	0x0800965b
 80095e0:	0800965b 	.word	0x0800965b
 80095e4:	0800965b 	.word	0x0800965b
 80095e8:	0800965b 	.word	0x0800965b
 80095ec:	0800964d 	.word	0x0800964d
 80095f0:	2b40      	cmp	r3, #64	; 0x40
 80095f2:	d02e      	beq.n	8009652 <UART_SetConfig+0x8aa>
 80095f4:	e031      	b.n	800965a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80095f6:	f7fc ff41 	bl	800647c <HAL_RCC_GetPCLK1Freq>
 80095fa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80095fc:	e033      	b.n	8009666 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80095fe:	f7fc ff53 	bl	80064a8 <HAL_RCC_GetPCLK2Freq>
 8009602:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009604:	e02f      	b.n	8009666 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009606:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800960a:	4618      	mov	r0, r3
 800960c:	f7fd ff00 	bl	8007410 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009612:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009614:	e027      	b.n	8009666 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009616:	f107 0318 	add.w	r3, r7, #24
 800961a:	4618      	mov	r0, r3
 800961c:	f7fe f84c 	bl	80076b8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009620:	69fb      	ldr	r3, [r7, #28]
 8009622:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009624:	e01f      	b.n	8009666 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009626:	4b2e      	ldr	r3, [pc, #184]	; (80096e0 <UART_SetConfig+0x938>)
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	f003 0320 	and.w	r3, r3, #32
 800962e:	2b00      	cmp	r3, #0
 8009630:	d009      	beq.n	8009646 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009632:	4b2b      	ldr	r3, [pc, #172]	; (80096e0 <UART_SetConfig+0x938>)
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	08db      	lsrs	r3, r3, #3
 8009638:	f003 0303 	and.w	r3, r3, #3
 800963c:	4a25      	ldr	r2, [pc, #148]	; (80096d4 <UART_SetConfig+0x92c>)
 800963e:	fa22 f303 	lsr.w	r3, r2, r3
 8009642:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009644:	e00f      	b.n	8009666 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8009646:	4b23      	ldr	r3, [pc, #140]	; (80096d4 <UART_SetConfig+0x92c>)
 8009648:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800964a:	e00c      	b.n	8009666 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800964c:	4b22      	ldr	r3, [pc, #136]	; (80096d8 <UART_SetConfig+0x930>)
 800964e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009650:	e009      	b.n	8009666 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009652:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009656:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009658:	e005      	b.n	8009666 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800965a:	2300      	movs	r3, #0
 800965c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800965e:	2301      	movs	r3, #1
 8009660:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8009664:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009666:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009668:	2b00      	cmp	r3, #0
 800966a:	f000 80e9 	beq.w	8009840 <UART_SetConfig+0xa98>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800966e:	697b      	ldr	r3, [r7, #20]
 8009670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009672:	4a1a      	ldr	r2, [pc, #104]	; (80096dc <UART_SetConfig+0x934>)
 8009674:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009678:	461a      	mov	r2, r3
 800967a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800967c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009680:	005a      	lsls	r2, r3, #1
 8009682:	697b      	ldr	r3, [r7, #20]
 8009684:	685b      	ldr	r3, [r3, #4]
 8009686:	085b      	lsrs	r3, r3, #1
 8009688:	441a      	add	r2, r3
 800968a:	697b      	ldr	r3, [r7, #20]
 800968c:	685b      	ldr	r3, [r3, #4]
 800968e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009692:	b29b      	uxth	r3, r3
 8009694:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009698:	2b0f      	cmp	r3, #15
 800969a:	d916      	bls.n	80096ca <UART_SetConfig+0x922>
 800969c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800969e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80096a2:	d212      	bcs.n	80096ca <UART_SetConfig+0x922>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80096a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096a6:	b29b      	uxth	r3, r3
 80096a8:	f023 030f 	bic.w	r3, r3, #15
 80096ac:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80096ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096b0:	085b      	lsrs	r3, r3, #1
 80096b2:	b29b      	uxth	r3, r3
 80096b4:	f003 0307 	and.w	r3, r3, #7
 80096b8:	b29a      	uxth	r2, r3
 80096ba:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80096bc:	4313      	orrs	r3, r2
 80096be:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80096c0:	697b      	ldr	r3, [r7, #20]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80096c6:	60da      	str	r2, [r3, #12]
 80096c8:	e0ba      	b.n	8009840 <UART_SetConfig+0xa98>
      }
      else
      {
        ret = HAL_ERROR;
 80096ca:	2301      	movs	r3, #1
 80096cc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80096d0:	e0b6      	b.n	8009840 <UART_SetConfig+0xa98>
 80096d2:	bf00      	nop
 80096d4:	03d09000 	.word	0x03d09000
 80096d8:	003d0900 	.word	0x003d0900
 80096dc:	08026ee8 	.word	0x08026ee8
 80096e0:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80096e4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80096e8:	2b20      	cmp	r3, #32
 80096ea:	dc49      	bgt.n	8009780 <UART_SetConfig+0x9d8>
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	db7c      	blt.n	80097ea <UART_SetConfig+0xa42>
 80096f0:	2b20      	cmp	r3, #32
 80096f2:	d87a      	bhi.n	80097ea <UART_SetConfig+0xa42>
 80096f4:	a201      	add	r2, pc, #4	; (adr r2, 80096fc <UART_SetConfig+0x954>)
 80096f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096fa:	bf00      	nop
 80096fc:	08009787 	.word	0x08009787
 8009700:	0800978f 	.word	0x0800978f
 8009704:	080097eb 	.word	0x080097eb
 8009708:	080097eb 	.word	0x080097eb
 800970c:	08009797 	.word	0x08009797
 8009710:	080097eb 	.word	0x080097eb
 8009714:	080097eb 	.word	0x080097eb
 8009718:	080097eb 	.word	0x080097eb
 800971c:	080097a7 	.word	0x080097a7
 8009720:	080097eb 	.word	0x080097eb
 8009724:	080097eb 	.word	0x080097eb
 8009728:	080097eb 	.word	0x080097eb
 800972c:	080097eb 	.word	0x080097eb
 8009730:	080097eb 	.word	0x080097eb
 8009734:	080097eb 	.word	0x080097eb
 8009738:	080097eb 	.word	0x080097eb
 800973c:	080097b7 	.word	0x080097b7
 8009740:	080097eb 	.word	0x080097eb
 8009744:	080097eb 	.word	0x080097eb
 8009748:	080097eb 	.word	0x080097eb
 800974c:	080097eb 	.word	0x080097eb
 8009750:	080097eb 	.word	0x080097eb
 8009754:	080097eb 	.word	0x080097eb
 8009758:	080097eb 	.word	0x080097eb
 800975c:	080097eb 	.word	0x080097eb
 8009760:	080097eb 	.word	0x080097eb
 8009764:	080097eb 	.word	0x080097eb
 8009768:	080097eb 	.word	0x080097eb
 800976c:	080097eb 	.word	0x080097eb
 8009770:	080097eb 	.word	0x080097eb
 8009774:	080097eb 	.word	0x080097eb
 8009778:	080097eb 	.word	0x080097eb
 800977c:	080097dd 	.word	0x080097dd
 8009780:	2b40      	cmp	r3, #64	; 0x40
 8009782:	d02e      	beq.n	80097e2 <UART_SetConfig+0xa3a>
 8009784:	e031      	b.n	80097ea <UART_SetConfig+0xa42>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009786:	f7fc fe79 	bl	800647c <HAL_RCC_GetPCLK1Freq>
 800978a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800978c:	e033      	b.n	80097f6 <UART_SetConfig+0xa4e>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800978e:	f7fc fe8b 	bl	80064a8 <HAL_RCC_GetPCLK2Freq>
 8009792:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009794:	e02f      	b.n	80097f6 <UART_SetConfig+0xa4e>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009796:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800979a:	4618      	mov	r0, r3
 800979c:	f7fd fe38 	bl	8007410 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80097a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80097a4:	e027      	b.n	80097f6 <UART_SetConfig+0xa4e>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80097a6:	f107 0318 	add.w	r3, r7, #24
 80097aa:	4618      	mov	r0, r3
 80097ac:	f7fd ff84 	bl	80076b8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80097b0:	69fb      	ldr	r3, [r7, #28]
 80097b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80097b4:	e01f      	b.n	80097f6 <UART_SetConfig+0xa4e>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80097b6:	4b2d      	ldr	r3, [pc, #180]	; (800986c <UART_SetConfig+0xac4>)
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	f003 0320 	and.w	r3, r3, #32
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d009      	beq.n	80097d6 <UART_SetConfig+0xa2e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80097c2:	4b2a      	ldr	r3, [pc, #168]	; (800986c <UART_SetConfig+0xac4>)
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	08db      	lsrs	r3, r3, #3
 80097c8:	f003 0303 	and.w	r3, r3, #3
 80097cc:	4a28      	ldr	r2, [pc, #160]	; (8009870 <UART_SetConfig+0xac8>)
 80097ce:	fa22 f303 	lsr.w	r3, r2, r3
 80097d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80097d4:	e00f      	b.n	80097f6 <UART_SetConfig+0xa4e>
          pclk = (uint32_t) HSI_VALUE;
 80097d6:	4b26      	ldr	r3, [pc, #152]	; (8009870 <UART_SetConfig+0xac8>)
 80097d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80097da:	e00c      	b.n	80097f6 <UART_SetConfig+0xa4e>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80097dc:	4b25      	ldr	r3, [pc, #148]	; (8009874 <UART_SetConfig+0xacc>)
 80097de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80097e0:	e009      	b.n	80097f6 <UART_SetConfig+0xa4e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80097e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80097e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80097e8:	e005      	b.n	80097f6 <UART_SetConfig+0xa4e>
      default:
        pclk = 0U;
 80097ea:	2300      	movs	r3, #0
 80097ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80097ee:	2301      	movs	r3, #1
 80097f0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80097f4:	bf00      	nop
    }

    if (pclk != 0U)
 80097f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d021      	beq.n	8009840 <UART_SetConfig+0xa98>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80097fc:	697b      	ldr	r3, [r7, #20]
 80097fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009800:	4a1d      	ldr	r2, [pc, #116]	; (8009878 <UART_SetConfig+0xad0>)
 8009802:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009806:	461a      	mov	r2, r3
 8009808:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800980a:	fbb3 f2f2 	udiv	r2, r3, r2
 800980e:	697b      	ldr	r3, [r7, #20]
 8009810:	685b      	ldr	r3, [r3, #4]
 8009812:	085b      	lsrs	r3, r3, #1
 8009814:	441a      	add	r2, r3
 8009816:	697b      	ldr	r3, [r7, #20]
 8009818:	685b      	ldr	r3, [r3, #4]
 800981a:	fbb2 f3f3 	udiv	r3, r2, r3
 800981e:	b29b      	uxth	r3, r3
 8009820:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009824:	2b0f      	cmp	r3, #15
 8009826:	d908      	bls.n	800983a <UART_SetConfig+0xa92>
 8009828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800982a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800982e:	d204      	bcs.n	800983a <UART_SetConfig+0xa92>
      {
        huart->Instance->BRR = usartdiv;
 8009830:	697b      	ldr	r3, [r7, #20]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009836:	60da      	str	r2, [r3, #12]
 8009838:	e002      	b.n	8009840 <UART_SetConfig+0xa98>
      }
      else
      {
        ret = HAL_ERROR;
 800983a:	2301      	movs	r3, #1
 800983c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009840:	697b      	ldr	r3, [r7, #20]
 8009842:	2201      	movs	r2, #1
 8009844:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009848:	697b      	ldr	r3, [r7, #20]
 800984a:	2201      	movs	r2, #1
 800984c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009850:	697b      	ldr	r3, [r7, #20]
 8009852:	2200      	movs	r2, #0
 8009854:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8009856:	697b      	ldr	r3, [r7, #20]
 8009858:	2200      	movs	r2, #0
 800985a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800985c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8009860:	4618      	mov	r0, r3
 8009862:	3748      	adds	r7, #72	; 0x48
 8009864:	46bd      	mov	sp, r7
 8009866:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800986a:	bf00      	nop
 800986c:	58024400 	.word	0x58024400
 8009870:	03d09000 	.word	0x03d09000
 8009874:	003d0900 	.word	0x003d0900
 8009878:	08026ee8 	.word	0x08026ee8

0800987c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800987c:	b480      	push	{r7}
 800987e:	b083      	sub	sp, #12
 8009880:	af00      	add	r7, sp, #0
 8009882:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009888:	f003 0301 	and.w	r3, r3, #1
 800988c:	2b00      	cmp	r3, #0
 800988e:	d00a      	beq.n	80098a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	685b      	ldr	r3, [r3, #4]
 8009896:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	430a      	orrs	r2, r1
 80098a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098aa:	f003 0302 	and.w	r3, r3, #2
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d00a      	beq.n	80098c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	685b      	ldr	r3, [r3, #4]
 80098b8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	430a      	orrs	r2, r1
 80098c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098cc:	f003 0304 	and.w	r3, r3, #4
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d00a      	beq.n	80098ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	685b      	ldr	r3, [r3, #4]
 80098da:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	430a      	orrs	r2, r1
 80098e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098ee:	f003 0308 	and.w	r3, r3, #8
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d00a      	beq.n	800990c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	685b      	ldr	r3, [r3, #4]
 80098fc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	430a      	orrs	r2, r1
 800990a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009910:	f003 0310 	and.w	r3, r3, #16
 8009914:	2b00      	cmp	r3, #0
 8009916:	d00a      	beq.n	800992e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	689b      	ldr	r3, [r3, #8]
 800991e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	430a      	orrs	r2, r1
 800992c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009932:	f003 0320 	and.w	r3, r3, #32
 8009936:	2b00      	cmp	r3, #0
 8009938:	d00a      	beq.n	8009950 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	689b      	ldr	r3, [r3, #8]
 8009940:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	430a      	orrs	r2, r1
 800994e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009954:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009958:	2b00      	cmp	r3, #0
 800995a:	d01a      	beq.n	8009992 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	685b      	ldr	r3, [r3, #4]
 8009962:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	430a      	orrs	r2, r1
 8009970:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009976:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800997a:	d10a      	bne.n	8009992 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	685b      	ldr	r3, [r3, #4]
 8009982:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	430a      	orrs	r2, r1
 8009990:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009996:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800999a:	2b00      	cmp	r3, #0
 800999c:	d00a      	beq.n	80099b4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	685b      	ldr	r3, [r3, #4]
 80099a4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	430a      	orrs	r2, r1
 80099b2:	605a      	str	r2, [r3, #4]
  }
}
 80099b4:	bf00      	nop
 80099b6:	370c      	adds	r7, #12
 80099b8:	46bd      	mov	sp, r7
 80099ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099be:	4770      	bx	lr

080099c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80099c0:	b580      	push	{r7, lr}
 80099c2:	b086      	sub	sp, #24
 80099c4:	af02      	add	r7, sp, #8
 80099c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	2200      	movs	r2, #0
 80099cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80099d0:	f7f9 f904 	bl	8002bdc <HAL_GetTick>
 80099d4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	f003 0308 	and.w	r3, r3, #8
 80099e0:	2b08      	cmp	r3, #8
 80099e2:	d10e      	bne.n	8009a02 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80099e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80099e8:	9300      	str	r3, [sp, #0]
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	2200      	movs	r2, #0
 80099ee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80099f2:	6878      	ldr	r0, [r7, #4]
 80099f4:	f000 f82f 	bl	8009a56 <UART_WaitOnFlagUntilTimeout>
 80099f8:	4603      	mov	r3, r0
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d001      	beq.n	8009a02 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80099fe:	2303      	movs	r3, #3
 8009a00:	e025      	b.n	8009a4e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	f003 0304 	and.w	r3, r3, #4
 8009a0c:	2b04      	cmp	r3, #4
 8009a0e:	d10e      	bne.n	8009a2e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009a10:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009a14:	9300      	str	r3, [sp, #0]
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	2200      	movs	r2, #0
 8009a1a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009a1e:	6878      	ldr	r0, [r7, #4]
 8009a20:	f000 f819 	bl	8009a56 <UART_WaitOnFlagUntilTimeout>
 8009a24:	4603      	mov	r3, r0
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d001      	beq.n	8009a2e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009a2a:	2303      	movs	r3, #3
 8009a2c:	e00f      	b.n	8009a4e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	2220      	movs	r2, #32
 8009a32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	2220      	movs	r2, #32
 8009a3a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	2200      	movs	r2, #0
 8009a42:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	2200      	movs	r2, #0
 8009a48:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009a4c:	2300      	movs	r3, #0
}
 8009a4e:	4618      	mov	r0, r3
 8009a50:	3710      	adds	r7, #16
 8009a52:	46bd      	mov	sp, r7
 8009a54:	bd80      	pop	{r7, pc}

08009a56 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009a56:	b580      	push	{r7, lr}
 8009a58:	b084      	sub	sp, #16
 8009a5a:	af00      	add	r7, sp, #0
 8009a5c:	60f8      	str	r0, [r7, #12]
 8009a5e:	60b9      	str	r1, [r7, #8]
 8009a60:	603b      	str	r3, [r7, #0]
 8009a62:	4613      	mov	r3, r2
 8009a64:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009a66:	e062      	b.n	8009b2e <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009a68:	69bb      	ldr	r3, [r7, #24]
 8009a6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a6e:	d05e      	beq.n	8009b2e <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009a70:	f7f9 f8b4 	bl	8002bdc <HAL_GetTick>
 8009a74:	4602      	mov	r2, r0
 8009a76:	683b      	ldr	r3, [r7, #0]
 8009a78:	1ad3      	subs	r3, r2, r3
 8009a7a:	69ba      	ldr	r2, [r7, #24]
 8009a7c:	429a      	cmp	r2, r3
 8009a7e:	d302      	bcc.n	8009a86 <UART_WaitOnFlagUntilTimeout+0x30>
 8009a80:	69bb      	ldr	r3, [r7, #24]
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d11d      	bne.n	8009ac2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	681a      	ldr	r2, [r3, #0]
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009a94:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	689a      	ldr	r2, [r3, #8]
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	f022 0201 	bic.w	r2, r2, #1
 8009aa4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	2220      	movs	r2, #32
 8009aaa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	2220      	movs	r2, #32
 8009ab2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	2200      	movs	r2, #0
 8009aba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8009abe:	2303      	movs	r3, #3
 8009ac0:	e045      	b.n	8009b4e <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	f003 0304 	and.w	r3, r3, #4
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d02e      	beq.n	8009b2e <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	69db      	ldr	r3, [r3, #28]
 8009ad6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009ada:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009ade:	d126      	bne.n	8009b2e <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009ae8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	681a      	ldr	r2, [r3, #0]
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009af8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	689a      	ldr	r2, [r3, #8]
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	f022 0201 	bic.w	r2, r2, #1
 8009b08:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	2220      	movs	r2, #32
 8009b0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	2220      	movs	r2, #32
 8009b16:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	2220      	movs	r2, #32
 8009b1e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	2200      	movs	r2, #0
 8009b26:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8009b2a:	2303      	movs	r3, #3
 8009b2c:	e00f      	b.n	8009b4e <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	69da      	ldr	r2, [r3, #28]
 8009b34:	68bb      	ldr	r3, [r7, #8]
 8009b36:	4013      	ands	r3, r2
 8009b38:	68ba      	ldr	r2, [r7, #8]
 8009b3a:	429a      	cmp	r2, r3
 8009b3c:	bf0c      	ite	eq
 8009b3e:	2301      	moveq	r3, #1
 8009b40:	2300      	movne	r3, #0
 8009b42:	b2db      	uxtb	r3, r3
 8009b44:	461a      	mov	r2, r3
 8009b46:	79fb      	ldrb	r3, [r7, #7]
 8009b48:	429a      	cmp	r2, r3
 8009b4a:	d08d      	beq.n	8009a68 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009b4c:	2300      	movs	r3, #0
}
 8009b4e:	4618      	mov	r0, r3
 8009b50:	3710      	adds	r7, #16
 8009b52:	46bd      	mov	sp, r7
 8009b54:	bd80      	pop	{r7, pc}

08009b56 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009b56:	b480      	push	{r7}
 8009b58:	b085      	sub	sp, #20
 8009b5a:	af00      	add	r7, sp, #0
 8009b5c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009b64:	2b01      	cmp	r3, #1
 8009b66:	d101      	bne.n	8009b6c <HAL_UARTEx_DisableFifoMode+0x16>
 8009b68:	2302      	movs	r3, #2
 8009b6a:	e027      	b.n	8009bbc <HAL_UARTEx_DisableFifoMode+0x66>
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	2201      	movs	r2, #1
 8009b70:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	2224      	movs	r2, #36	; 0x24
 8009b78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	681a      	ldr	r2, [r3, #0]
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	f022 0201 	bic.w	r2, r2, #1
 8009b92:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009b9a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	2200      	movs	r2, #0
 8009ba0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	68fa      	ldr	r2, [r7, #12]
 8009ba8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	2220      	movs	r2, #32
 8009bae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	2200      	movs	r2, #0
 8009bb6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009bba:	2300      	movs	r3, #0
}
 8009bbc:	4618      	mov	r0, r3
 8009bbe:	3714      	adds	r7, #20
 8009bc0:	46bd      	mov	sp, r7
 8009bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc6:	4770      	bx	lr

08009bc8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009bc8:	b580      	push	{r7, lr}
 8009bca:	b084      	sub	sp, #16
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	6078      	str	r0, [r7, #4]
 8009bd0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009bd8:	2b01      	cmp	r3, #1
 8009bda:	d101      	bne.n	8009be0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009bdc:	2302      	movs	r3, #2
 8009bde:	e02d      	b.n	8009c3c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	2201      	movs	r2, #1
 8009be4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	2224      	movs	r2, #36	; 0x24
 8009bec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	681a      	ldr	r2, [r3, #0]
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	f022 0201 	bic.w	r2, r2, #1
 8009c06:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	689b      	ldr	r3, [r3, #8]
 8009c0e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	683a      	ldr	r2, [r7, #0]
 8009c18:	430a      	orrs	r2, r1
 8009c1a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009c1c:	6878      	ldr	r0, [r7, #4]
 8009c1e:	f000 f84f 	bl	8009cc0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	68fa      	ldr	r2, [r7, #12]
 8009c28:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	2220      	movs	r2, #32
 8009c2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	2200      	movs	r2, #0
 8009c36:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009c3a:	2300      	movs	r3, #0
}
 8009c3c:	4618      	mov	r0, r3
 8009c3e:	3710      	adds	r7, #16
 8009c40:	46bd      	mov	sp, r7
 8009c42:	bd80      	pop	{r7, pc}

08009c44 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009c44:	b580      	push	{r7, lr}
 8009c46:	b084      	sub	sp, #16
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	6078      	str	r0, [r7, #4]
 8009c4c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009c54:	2b01      	cmp	r3, #1
 8009c56:	d101      	bne.n	8009c5c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009c58:	2302      	movs	r3, #2
 8009c5a:	e02d      	b.n	8009cb8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	2201      	movs	r2, #1
 8009c60:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	2224      	movs	r2, #36	; 0x24
 8009c68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	681a      	ldr	r2, [r3, #0]
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	f022 0201 	bic.w	r2, r2, #1
 8009c82:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	689b      	ldr	r3, [r3, #8]
 8009c8a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	683a      	ldr	r2, [r7, #0]
 8009c94:	430a      	orrs	r2, r1
 8009c96:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009c98:	6878      	ldr	r0, [r7, #4]
 8009c9a:	f000 f811 	bl	8009cc0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	68fa      	ldr	r2, [r7, #12]
 8009ca4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	2220      	movs	r2, #32
 8009caa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	2200      	movs	r2, #0
 8009cb2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009cb6:	2300      	movs	r3, #0
}
 8009cb8:	4618      	mov	r0, r3
 8009cba:	3710      	adds	r7, #16
 8009cbc:	46bd      	mov	sp, r7
 8009cbe:	bd80      	pop	{r7, pc}

08009cc0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009cc0:	b480      	push	{r7}
 8009cc2:	b085      	sub	sp, #20
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d108      	bne.n	8009ce2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	2201      	movs	r2, #1
 8009cd4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	2201      	movs	r2, #1
 8009cdc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009ce0:	e031      	b.n	8009d46 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009ce2:	2310      	movs	r3, #16
 8009ce4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009ce6:	2310      	movs	r3, #16
 8009ce8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	689b      	ldr	r3, [r3, #8]
 8009cf0:	0e5b      	lsrs	r3, r3, #25
 8009cf2:	b2db      	uxtb	r3, r3
 8009cf4:	f003 0307 	and.w	r3, r3, #7
 8009cf8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	689b      	ldr	r3, [r3, #8]
 8009d00:	0f5b      	lsrs	r3, r3, #29
 8009d02:	b2db      	uxtb	r3, r3
 8009d04:	f003 0307 	and.w	r3, r3, #7
 8009d08:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009d0a:	7bbb      	ldrb	r3, [r7, #14]
 8009d0c:	7b3a      	ldrb	r2, [r7, #12]
 8009d0e:	4911      	ldr	r1, [pc, #68]	; (8009d54 <UARTEx_SetNbDataToProcess+0x94>)
 8009d10:	5c8a      	ldrb	r2, [r1, r2]
 8009d12:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009d16:	7b3a      	ldrb	r2, [r7, #12]
 8009d18:	490f      	ldr	r1, [pc, #60]	; (8009d58 <UARTEx_SetNbDataToProcess+0x98>)
 8009d1a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009d1c:	fb93 f3f2 	sdiv	r3, r3, r2
 8009d20:	b29a      	uxth	r2, r3
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009d28:	7bfb      	ldrb	r3, [r7, #15]
 8009d2a:	7b7a      	ldrb	r2, [r7, #13]
 8009d2c:	4909      	ldr	r1, [pc, #36]	; (8009d54 <UARTEx_SetNbDataToProcess+0x94>)
 8009d2e:	5c8a      	ldrb	r2, [r1, r2]
 8009d30:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009d34:	7b7a      	ldrb	r2, [r7, #13]
 8009d36:	4908      	ldr	r1, [pc, #32]	; (8009d58 <UARTEx_SetNbDataToProcess+0x98>)
 8009d38:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009d3a:	fb93 f3f2 	sdiv	r3, r3, r2
 8009d3e:	b29a      	uxth	r2, r3
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009d46:	bf00      	nop
 8009d48:	3714      	adds	r7, #20
 8009d4a:	46bd      	mov	sp, r7
 8009d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d50:	4770      	bx	lr
 8009d52:	bf00      	nop
 8009d54:	08026f00 	.word	0x08026f00
 8009d58:	08026f08 	.word	0x08026f08

08009d5c <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8009d5c:	b5b0      	push	{r4, r5, r7, lr}
 8009d5e:	b08c      	sub	sp, #48	; 0x30
 8009d60:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8009d62:	2100      	movs	r1, #0
 8009d64:	2000      	movs	r0, #0
 8009d66:	f007 fb17 	bl	8011398 <tcpip_init>
//  ipaddr.addr = 0;
//  netmask.addr = 0;
//  gw.addr = 0;
  /* IP addresses initialization with DHCP (IPv4) */
#if LWIP_DHCP
  ipaddr.addr = 0;
 8009d6a:	4b22      	ldr	r3, [pc, #136]	; (8009df4 <MX_LWIP_Init+0x98>)
 8009d6c:	2200      	movs	r2, #0
 8009d6e:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 8009d70:	4b21      	ldr	r3, [pc, #132]	; (8009df8 <MX_LWIP_Init+0x9c>)
 8009d72:	2200      	movs	r2, #0
 8009d74:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 8009d76:	4b21      	ldr	r3, [pc, #132]	; (8009dfc <MX_LWIP_Init+0xa0>)
 8009d78:	2200      	movs	r2, #0
 8009d7a:	601a      	str	r2, [r3, #0]
  IP_ADDR4(&netmask,NETMASK_ADDR0,NETMASK_ADDR1,NETMASK_ADDR2,NETMASK_ADDR3);
  IP_ADDR4(&gw,GW_ADDR0,GW_ADDR1,GW_ADDR2,GW_ADDR3);
#endif

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8009d7c:	4b20      	ldr	r3, [pc, #128]	; (8009e00 <MX_LWIP_Init+0xa4>)
 8009d7e:	9302      	str	r3, [sp, #8]
 8009d80:	4b20      	ldr	r3, [pc, #128]	; (8009e04 <MX_LWIP_Init+0xa8>)
 8009d82:	9301      	str	r3, [sp, #4]
 8009d84:	2300      	movs	r3, #0
 8009d86:	9300      	str	r3, [sp, #0]
 8009d88:	4b1c      	ldr	r3, [pc, #112]	; (8009dfc <MX_LWIP_Init+0xa0>)
 8009d8a:	4a1b      	ldr	r2, [pc, #108]	; (8009df8 <MX_LWIP_Init+0x9c>)
 8009d8c:	4919      	ldr	r1, [pc, #100]	; (8009df4 <MX_LWIP_Init+0x98>)
 8009d8e:	481e      	ldr	r0, [pc, #120]	; (8009e08 <MX_LWIP_Init+0xac>)
 8009d90:	f008 f984 	bl	801209c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8009d94:	481c      	ldr	r0, [pc, #112]	; (8009e08 <MX_LWIP_Init+0xac>)
 8009d96:	f008 fb3b 	bl	8012410 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8009d9a:	4b1b      	ldr	r3, [pc, #108]	; (8009e08 <MX_LWIP_Init+0xac>)
 8009d9c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8009da0:	089b      	lsrs	r3, r3, #2
 8009da2:	f003 0301 	and.w	r3, r3, #1
 8009da6:	b2db      	uxtb	r3, r3
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d003      	beq.n	8009db4 <MX_LWIP_Init+0x58>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8009dac:	4816      	ldr	r0, [pc, #88]	; (8009e08 <MX_LWIP_Init+0xac>)
 8009dae:	f008 fb3f 	bl	8012430 <netif_set_up>
 8009db2:	e002      	b.n	8009dba <MX_LWIP_Init+0x5e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8009db4:	4814      	ldr	r0, [pc, #80]	; (8009e08 <MX_LWIP_Init+0xac>)
 8009db6:	f008 fba7 	bl	8012508 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8009dba:	4914      	ldr	r1, [pc, #80]	; (8009e0c <MX_LWIP_Init+0xb0>)
 8009dbc:	4812      	ldr	r0, [pc, #72]	; (8009e08 <MX_LWIP_Init+0xac>)
 8009dbe:	f008 fc3d 	bl	801263c <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthLink, ethernet_link_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE *2);
 8009dc2:	4b13      	ldr	r3, [pc, #76]	; (8009e10 <MX_LWIP_Init+0xb4>)
 8009dc4:	1d3c      	adds	r4, r7, #4
 8009dc6:	461d      	mov	r5, r3
 8009dc8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009dca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009dcc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8009dd0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthLink), &gnetif);
 8009dd4:	1d3b      	adds	r3, r7, #4
 8009dd6:	490c      	ldr	r1, [pc, #48]	; (8009e08 <MX_LWIP_Init+0xac>)
 8009dd8:	4618      	mov	r0, r3
 8009dda:	f000 fcf8 	bl	800a7ce <osThreadCreate>
/* USER CODE END H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

  /* Start DHCP negotiation for a network interface (IPv4) */
//  dhcp_start(&gnetif);
#if LWIP_DHCP
  dhcp_start(&gnetif);
 8009dde:	480a      	ldr	r0, [pc, #40]	; (8009e08 <MX_LWIP_Init+0xac>)
 8009de0:	f010 fd8c 	bl	801a8fc <dhcp_start>
#endif

/* USER CODE BEGIN 3 */
  ethernet_link_status_updated(&gnetif);
 8009de4:	4808      	ldr	r0, [pc, #32]	; (8009e08 <MX_LWIP_Init+0xac>)
 8009de6:	f000 f815 	bl	8009e14 <ethernet_link_status_updated>
/* USER CODE END 3 */
}
 8009dea:	bf00      	nop
 8009dec:	3720      	adds	r7, #32
 8009dee:	46bd      	mov	sp, r7
 8009df0:	bdb0      	pop	{r4, r5, r7, pc}
 8009df2:	bf00      	nop
 8009df4:	24000d14 	.word	0x24000d14
 8009df8:	24000d18 	.word	0x24000d18
 8009dfc:	24000d1c 	.word	0x24000d1c
 8009e00:	080112a9 	.word	0x080112a9
 8009e04:	0800a519 	.word	0x0800a519
 8009e08:	24000cdc 	.word	0x24000cdc
 8009e0c:	08009e15 	.word	0x08009e15
 8009e10:	080231fc 	.word	0x080231fc

08009e14 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8009e14:	b580      	push	{r7, lr}
 8009e16:	b082      	sub	sp, #8
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	6078      	str	r0, [r7, #4]
  if (netif_is_up(netif))
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8009e22:	f003 0301 	and.w	r3, r3, #1
 8009e26:	b2db      	uxtb	r3, r3
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d00b      	beq.n	8009e44 <ethernet_link_status_updated+0x30>
  {
/* USER CODE BEGIN 5 */
	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8009e2c:	2201      	movs	r2, #1
 8009e2e:	2102      	movs	r1, #2
 8009e30:	480e      	ldr	r0, [pc, #56]	; (8009e6c <ethernet_link_status_updated+0x58>)
 8009e32:	f7fb fb2d 	bl	8005490 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8009e36:	2200      	movs	r2, #0
 8009e38:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8009e3c:	480c      	ldr	r0, [pc, #48]	; (8009e70 <ethernet_link_status_updated+0x5c>)
 8009e3e:	f7fb fb27 	bl	8005490 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
	  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
/* USER CODE END 6 */
  }
}
 8009e42:	e00f      	b.n	8009e64 <ethernet_link_status_updated+0x50>
	  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8009e44:	2200      	movs	r2, #0
 8009e46:	2101      	movs	r1, #1
 8009e48:	4809      	ldr	r0, [pc, #36]	; (8009e70 <ethernet_link_status_updated+0x5c>)
 8009e4a:	f7fb fb21 	bl	8005490 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8009e4e:	2200      	movs	r2, #0
 8009e50:	2102      	movs	r1, #2
 8009e52:	4806      	ldr	r0, [pc, #24]	; (8009e6c <ethernet_link_status_updated+0x58>)
 8009e54:	f7fb fb1c 	bl	8005490 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8009e58:	2201      	movs	r2, #1
 8009e5a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8009e5e:	4804      	ldr	r0, [pc, #16]	; (8009e70 <ethernet_link_status_updated+0x5c>)
 8009e60:	f7fb fb16 	bl	8005490 <HAL_GPIO_WritePin>
}
 8009e64:	bf00      	nop
 8009e66:	3708      	adds	r7, #8
 8009e68:	46bd      	mov	sp, r7
 8009e6a:	bd80      	pop	{r7, pc}
 8009e6c:	58021000 	.word	0x58021000
 8009e70:	58020400 	.word	0x58020400

08009e74 <HAL_ETH_MspInit>:
/* Private functions ---------------------------------------------------------*/
void pbuf_free_custom(struct pbuf *p);
void Error_Handler(void);

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8009e74:	b580      	push	{r7, lr}
 8009e76:	b08e      	sub	sp, #56	; 0x38
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009e7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009e80:	2200      	movs	r2, #0
 8009e82:	601a      	str	r2, [r3, #0]
 8009e84:	605a      	str	r2, [r3, #4]
 8009e86:	609a      	str	r2, [r3, #8]
 8009e88:	60da      	str	r2, [r3, #12]
 8009e8a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	4a5d      	ldr	r2, [pc, #372]	; (800a008 <HAL_ETH_MspInit+0x194>)
 8009e92:	4293      	cmp	r3, r2
 8009e94:	f040 80b3 	bne.w	8009ffe <HAL_ETH_MspInit+0x18a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8009e98:	4b5c      	ldr	r3, [pc, #368]	; (800a00c <HAL_ETH_MspInit+0x198>)
 8009e9a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8009e9e:	4a5b      	ldr	r2, [pc, #364]	; (800a00c <HAL_ETH_MspInit+0x198>)
 8009ea0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009ea4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8009ea8:	4b58      	ldr	r3, [pc, #352]	; (800a00c <HAL_ETH_MspInit+0x198>)
 8009eaa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8009eae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009eb2:	623b      	str	r3, [r7, #32]
 8009eb4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8009eb6:	4b55      	ldr	r3, [pc, #340]	; (800a00c <HAL_ETH_MspInit+0x198>)
 8009eb8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8009ebc:	4a53      	ldr	r2, [pc, #332]	; (800a00c <HAL_ETH_MspInit+0x198>)
 8009ebe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009ec2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8009ec6:	4b51      	ldr	r3, [pc, #324]	; (800a00c <HAL_ETH_MspInit+0x198>)
 8009ec8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8009ecc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009ed0:	61fb      	str	r3, [r7, #28]
 8009ed2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8009ed4:	4b4d      	ldr	r3, [pc, #308]	; (800a00c <HAL_ETH_MspInit+0x198>)
 8009ed6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8009eda:	4a4c      	ldr	r2, [pc, #304]	; (800a00c <HAL_ETH_MspInit+0x198>)
 8009edc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009ee0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8009ee4:	4b49      	ldr	r3, [pc, #292]	; (800a00c <HAL_ETH_MspInit+0x198>)
 8009ee6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8009eea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009eee:	61bb      	str	r3, [r7, #24]
 8009ef0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009ef2:	4b46      	ldr	r3, [pc, #280]	; (800a00c <HAL_ETH_MspInit+0x198>)
 8009ef4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009ef8:	4a44      	ldr	r2, [pc, #272]	; (800a00c <HAL_ETH_MspInit+0x198>)
 8009efa:	f043 0304 	orr.w	r3, r3, #4
 8009efe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8009f02:	4b42      	ldr	r3, [pc, #264]	; (800a00c <HAL_ETH_MspInit+0x198>)
 8009f04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009f08:	f003 0304 	and.w	r3, r3, #4
 8009f0c:	617b      	str	r3, [r7, #20]
 8009f0e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009f10:	4b3e      	ldr	r3, [pc, #248]	; (800a00c <HAL_ETH_MspInit+0x198>)
 8009f12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009f16:	4a3d      	ldr	r2, [pc, #244]	; (800a00c <HAL_ETH_MspInit+0x198>)
 8009f18:	f043 0301 	orr.w	r3, r3, #1
 8009f1c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8009f20:	4b3a      	ldr	r3, [pc, #232]	; (800a00c <HAL_ETH_MspInit+0x198>)
 8009f22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009f26:	f003 0301 	and.w	r3, r3, #1
 8009f2a:	613b      	str	r3, [r7, #16]
 8009f2c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009f2e:	4b37      	ldr	r3, [pc, #220]	; (800a00c <HAL_ETH_MspInit+0x198>)
 8009f30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009f34:	4a35      	ldr	r2, [pc, #212]	; (800a00c <HAL_ETH_MspInit+0x198>)
 8009f36:	f043 0302 	orr.w	r3, r3, #2
 8009f3a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8009f3e:	4b33      	ldr	r3, [pc, #204]	; (800a00c <HAL_ETH_MspInit+0x198>)
 8009f40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009f44:	f003 0302 	and.w	r3, r3, #2
 8009f48:	60fb      	str	r3, [r7, #12]
 8009f4a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8009f4c:	4b2f      	ldr	r3, [pc, #188]	; (800a00c <HAL_ETH_MspInit+0x198>)
 8009f4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009f52:	4a2e      	ldr	r2, [pc, #184]	; (800a00c <HAL_ETH_MspInit+0x198>)
 8009f54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f58:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8009f5c:	4b2b      	ldr	r3, [pc, #172]	; (800a00c <HAL_ETH_MspInit+0x198>)
 8009f5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009f62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f66:	60bb      	str	r3, [r7, #8]
 8009f68:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8009f6a:	2332      	movs	r3, #50	; 0x32
 8009f6c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009f6e:	2302      	movs	r3, #2
 8009f70:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009f72:	2300      	movs	r3, #0
 8009f74:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8009f76:	2302      	movs	r3, #2
 8009f78:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009f7a:	230b      	movs	r3, #11
 8009f7c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009f7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009f82:	4619      	mov	r1, r3
 8009f84:	4822      	ldr	r0, [pc, #136]	; (800a010 <HAL_ETH_MspInit+0x19c>)
 8009f86:	f7fb f8bb 	bl	8005100 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8009f8a:	2386      	movs	r3, #134	; 0x86
 8009f8c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009f8e:	2302      	movs	r3, #2
 8009f90:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009f92:	2300      	movs	r3, #0
 8009f94:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8009f96:	2302      	movs	r3, #2
 8009f98:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009f9a:	230b      	movs	r3, #11
 8009f9c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009f9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009fa2:	4619      	mov	r1, r3
 8009fa4:	481b      	ldr	r0, [pc, #108]	; (800a014 <HAL_ETH_MspInit+0x1a0>)
 8009fa6:	f7fb f8ab 	bl	8005100 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8009faa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009fae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009fb0:	2302      	movs	r3, #2
 8009fb2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009fb4:	2300      	movs	r3, #0
 8009fb6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8009fb8:	2302      	movs	r3, #2
 8009fba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009fbc:	230b      	movs	r3, #11
 8009fbe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009fc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009fc4:	4619      	mov	r1, r3
 8009fc6:	4814      	ldr	r0, [pc, #80]	; (800a018 <HAL_ETH_MspInit+0x1a4>)
 8009fc8:	f7fb f89a 	bl	8005100 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8009fcc:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8009fd0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009fd2:	2302      	movs	r3, #2
 8009fd4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009fd6:	2300      	movs	r3, #0
 8009fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8009fda:	2302      	movs	r3, #2
 8009fdc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009fde:	230b      	movs	r3, #11
 8009fe0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8009fe2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009fe6:	4619      	mov	r1, r3
 8009fe8:	480c      	ldr	r0, [pc, #48]	; (800a01c <HAL_ETH_MspInit+0x1a8>)
 8009fea:	f7fb f889 	bl	8005100 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8009fee:	2200      	movs	r2, #0
 8009ff0:	2105      	movs	r1, #5
 8009ff2:	203d      	movs	r0, #61	; 0x3d
 8009ff4:	f7f8 fed6 	bl	8002da4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8009ff8:	203d      	movs	r0, #61	; 0x3d
 8009ffa:	f7f8 feed 	bl	8002dd8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8009ffe:	bf00      	nop
 800a000:	3738      	adds	r7, #56	; 0x38
 800a002:	46bd      	mov	sp, r7
 800a004:	bd80      	pop	{r7, pc}
 800a006:	bf00      	nop
 800a008:	40028000 	.word	0x40028000
 800a00c:	58024400 	.word	0x58024400
 800a010:	58020800 	.word	0x58020800
 800a014:	58020000 	.word	0x58020000
 800a018:	58020400 	.word	0x58020400
 800a01c:	58021800 	.word	0x58021800

0800a020 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 800a020:	b580      	push	{r7, lr}
 800a022:	b082      	sub	sp, #8
 800a024:	af00      	add	r7, sp, #0
 800a026:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 800a028:	4b04      	ldr	r3, [pc, #16]	; (800a03c <HAL_ETH_RxCpltCallback+0x1c>)
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	4618      	mov	r0, r3
 800a02e:	f000 fd57 	bl	800aae0 <osSemaphoreRelease>
}
 800a032:	bf00      	nop
 800a034:	3708      	adds	r7, #8
 800a036:	46bd      	mov	sp, r7
 800a038:	bd80      	pop	{r7, pc}
 800a03a:	bf00      	nop
 800a03c:	24000d20 	.word	0x24000d20

0800a040 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800a040:	b5b0      	push	{r4, r5, r7, lr}
 800a042:	b0ac      	sub	sp, #176	; 0xb0
 800a044:	af00      	add	r7, sp, #0
 800a046:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 800a048:	2300      	movs	r3, #0
 800a04a:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
  uint32_t idx = 0;
 800a04e:	2300      	movs	r3, #0
 800a050:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  ETH_MACConfigTypeDef MACConf;
  int32_t PHYLinkState;
  uint32_t duplex, speed = 0;
 800a054:	2300      	movs	r3, #0
 800a056:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800a05a:	4b91      	ldr	r3, [pc, #580]	; (800a2a0 <low_level_init+0x260>)
 800a05c:	4a91      	ldr	r2, [pc, #580]	; (800a2a4 <low_level_init+0x264>)
 800a05e:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x02;
 800a060:	2302      	movs	r3, #2
 800a062:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  MACAddr[1] = 0x00;
 800a066:	2300      	movs	r3, #0
 800a068:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  MACAddr[2] = 0x00;
 800a06c:	2300      	movs	r3, #0
 800a06e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  MACAddr[3] = 0x00;
 800a072:	2300      	movs	r3, #0
 800a074:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  MACAddr[4] = 0x00;
 800a078:	2300      	movs	r3, #0
 800a07a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  MACAddr[5] = 0x00;
 800a07e:	2300      	movs	r3, #0
 800a080:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  heth.Init.MACAddr = &MACAddr[0];
 800a084:	4a86      	ldr	r2, [pc, #536]	; (800a2a0 <low_level_init+0x260>)
 800a086:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a08a:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800a08c:	4b84      	ldr	r3, [pc, #528]	; (800a2a0 <low_level_init+0x260>)
 800a08e:	2201      	movs	r2, #1
 800a090:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800a092:	4b83      	ldr	r3, [pc, #524]	; (800a2a0 <low_level_init+0x260>)
 800a094:	4a84      	ldr	r2, [pc, #528]	; (800a2a8 <low_level_init+0x268>)
 800a096:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800a098:	4b81      	ldr	r3, [pc, #516]	; (800a2a0 <low_level_init+0x260>)
 800a09a:	4a84      	ldr	r2, [pc, #528]	; (800a2ac <low_level_init+0x26c>)
 800a09c:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800a09e:	4b80      	ldr	r3, [pc, #512]	; (800a2a0 <low_level_init+0x260>)
 800a0a0:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800a0a4:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800a0a6:	487e      	ldr	r0, [pc, #504]	; (800a2a0 <low_level_init+0x260>)
 800a0a8:	f7f9 f966 	bl	8003378 <HAL_ETH_Init>
 800a0ac:	4603      	mov	r3, r0
 800a0ae:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800a0b2:	2234      	movs	r2, #52	; 0x34
 800a0b4:	2100      	movs	r1, #0
 800a0b6:	487e      	ldr	r0, [pc, #504]	; (800a2b0 <low_level_init+0x270>)
 800a0b8:	f016 fa69 	bl	802058e <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800a0bc:	4b7c      	ldr	r3, [pc, #496]	; (800a2b0 <low_level_init+0x270>)
 800a0be:	2221      	movs	r2, #33	; 0x21
 800a0c0:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800a0c2:	4b7b      	ldr	r3, [pc, #492]	; (800a2b0 <low_level_init+0x270>)
 800a0c4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800a0c8:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800a0ca:	4b79      	ldr	r3, [pc, #484]	; (800a2b0 <low_level_init+0x270>)
 800a0cc:	2200      	movs	r2, #0
 800a0ce:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800a0d0:	4878      	ldr	r0, [pc, #480]	; (800a2b4 <low_level_init+0x274>)
 800a0d2:	f007 fe9d 	bl	8011e10 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	2206      	movs	r2, #6
 800a0da:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800a0de:	4b70      	ldr	r3, [pc, #448]	; (800a2a0 <low_level_init+0x260>)
 800a0e0:	685b      	ldr	r3, [r3, #4]
 800a0e2:	781a      	ldrb	r2, [r3, #0]
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800a0ea:	4b6d      	ldr	r3, [pc, #436]	; (800a2a0 <low_level_init+0x260>)
 800a0ec:	685b      	ldr	r3, [r3, #4]
 800a0ee:	785a      	ldrb	r2, [r3, #1]
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800a0f6:	4b6a      	ldr	r3, [pc, #424]	; (800a2a0 <low_level_init+0x260>)
 800a0f8:	685b      	ldr	r3, [r3, #4]
 800a0fa:	789a      	ldrb	r2, [r3, #2]
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800a102:	4b67      	ldr	r3, [pc, #412]	; (800a2a0 <low_level_init+0x260>)
 800a104:	685b      	ldr	r3, [r3, #4]
 800a106:	78da      	ldrb	r2, [r3, #3]
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800a10e:	4b64      	ldr	r3, [pc, #400]	; (800a2a0 <low_level_init+0x260>)
 800a110:	685b      	ldr	r3, [r3, #4]
 800a112:	791a      	ldrb	r2, [r3, #4]
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800a11a:	4b61      	ldr	r3, [pc, #388]	; (800a2a0 <low_level_init+0x260>)
 800a11c:	685b      	ldr	r3, [r3, #4]
 800a11e:	795a      	ldrb	r2, [r3, #5]
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800a12c:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a134:	f043 030a 	orr.w	r3, r3, #10
 800a138:	b2da      	uxtb	r2, r3
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  for(idx = 0; idx < ETH_RX_DESC_CNT; idx ++)
 800a140:	2300      	movs	r3, #0
 800a142:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a146:	e012      	b.n	800a16e <low_level_init+0x12e>
  {
    HAL_ETH_DescAssignMemory(&heth, idx, Rx_Buff[idx], NULL);
 800a148:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a14c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800a150:	fb02 f303 	mul.w	r3, r2, r3
 800a154:	4a58      	ldr	r2, [pc, #352]	; (800a2b8 <low_level_init+0x278>)
 800a156:	441a      	add	r2, r3
 800a158:	2300      	movs	r3, #0
 800a15a:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 800a15e:	4850      	ldr	r0, [pc, #320]	; (800a2a0 <low_level_init+0x260>)
 800a160:	f7f9 f9e6 	bl	8003530 <HAL_ETH_DescAssignMemory>
  for(idx = 0; idx < ETH_RX_DESC_CNT; idx ++)
 800a164:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a168:	3301      	adds	r3, #1
 800a16a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a16e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a172:	2b03      	cmp	r3, #3
 800a174:	d9e8      	bls.n	800a148 <low_level_init+0x108>
  }

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
 800a176:	2300      	movs	r3, #0
 800a178:	62bb      	str	r3, [r7, #40]	; 0x28
 800a17a:	2300      	movs	r3, #0
 800a17c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RxPktSemaphore = osSemaphoreCreate(osSemaphore(SEM) , 1 );
 800a17e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a182:	2101      	movs	r1, #1
 800a184:	4618      	mov	r0, r3
 800a186:	f000 fc2b 	bl	800a9e0 <osSemaphoreCreate>
 800a18a:	4603      	mov	r3, r0
 800a18c:	4a4b      	ldr	r2, [pc, #300]	; (800a2bc <low_level_init+0x27c>)
 800a18e:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 800a190:	4b4b      	ldr	r3, [pc, #300]	; (800a2c0 <low_level_init+0x280>)
 800a192:	f107 040c 	add.w	r4, r7, #12
 800a196:	461d      	mov	r5, r3
 800a198:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a19a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a19c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a1a0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 800a1a4:	f107 030c 	add.w	r3, r7, #12
 800a1a8:	6879      	ldr	r1, [r7, #4]
 800a1aa:	4618      	mov	r0, r3
 800a1ac:	f000 fb0f 	bl	800a7ce <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800a1b0:	4944      	ldr	r1, [pc, #272]	; (800a2c4 <low_level_init+0x284>)
 800a1b2:	4845      	ldr	r0, [pc, #276]	; (800a2c8 <low_level_init+0x288>)
 800a1b4:	f7f8 fb61 	bl	800287a <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 800a1b8:	4843      	ldr	r0, [pc, #268]	; (800a2c8 <low_level_init+0x288>)
 800a1ba:	f7f8 fb90 	bl	80028de <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 800a1be:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d165      	bne.n	800a292 <low_level_init+0x252>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800a1c6:	4840      	ldr	r0, [pc, #256]	; (800a2c8 <low_level_init+0x288>)
 800a1c8:	f7f8 fc31 	bl	8002a2e <LAN8742_GetLinkState>
 800a1cc:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 800a1d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a1d4:	2b01      	cmp	r3, #1
 800a1d6:	dc06      	bgt.n	800a1e6 <low_level_init+0x1a6>
    {
      netif_set_link_down(netif);
 800a1d8:	6878      	ldr	r0, [r7, #4]
 800a1da:	f008 f9ff 	bl	80125dc <netif_set_link_down>
      netif_set_down(netif);
 800a1de:	6878      	ldr	r0, [r7, #4]
 800a1e0:	f008 f992 	bl	8012508 <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800a1e4:	e057      	b.n	800a296 <low_level_init+0x256>
      switch (PHYLinkState)
 800a1e6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a1ea:	3b02      	subs	r3, #2
 800a1ec:	2b03      	cmp	r3, #3
 800a1ee:	d82b      	bhi.n	800a248 <low_level_init+0x208>
 800a1f0:	a201      	add	r2, pc, #4	; (adr r2, 800a1f8 <low_level_init+0x1b8>)
 800a1f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1f6:	bf00      	nop
 800a1f8:	0800a209 	.word	0x0800a209
 800a1fc:	0800a21b 	.word	0x0800a21b
 800a200:	0800a22b 	.word	0x0800a22b
 800a204:	0800a23b 	.word	0x0800a23b
        duplex = ETH_FULLDUPLEX_MODE;
 800a208:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a20c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_100M;
 800a210:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a214:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 800a218:	e01f      	b.n	800a25a <low_level_init+0x21a>
        duplex = ETH_HALFDUPLEX_MODE;
 800a21a:	2300      	movs	r3, #0
 800a21c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_100M;
 800a220:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a224:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 800a228:	e017      	b.n	800a25a <low_level_init+0x21a>
        duplex = ETH_FULLDUPLEX_MODE;
 800a22a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a22e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_10M;
 800a232:	2300      	movs	r3, #0
 800a234:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 800a238:	e00f      	b.n	800a25a <low_level_init+0x21a>
        duplex = ETH_HALFDUPLEX_MODE;
 800a23a:	2300      	movs	r3, #0
 800a23c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_10M;
 800a240:	2300      	movs	r3, #0
 800a242:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 800a246:	e008      	b.n	800a25a <low_level_init+0x21a>
        duplex = ETH_FULLDUPLEX_MODE;
 800a248:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a24c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_100M;
 800a250:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a254:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 800a258:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 800a25a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a25e:	4619      	mov	r1, r3
 800a260:	480f      	ldr	r0, [pc, #60]	; (800a2a0 <low_level_init+0x260>)
 800a262:	f7f9 ff49 	bl	80040f8 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 800a266:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a26a:	653b      	str	r3, [r7, #80]	; 0x50
    MACConf.Speed = speed;
 800a26c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a270:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 800a272:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a276:	4619      	mov	r1, r3
 800a278:	4809      	ldr	r0, [pc, #36]	; (800a2a0 <low_level_init+0x260>)
 800a27a:	f7fa f911 	bl	80044a0 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 800a27e:	4808      	ldr	r0, [pc, #32]	; (800a2a0 <low_level_init+0x260>)
 800a280:	f7f9 f997 	bl	80035b2 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 800a284:	6878      	ldr	r0, [r7, #4]
 800a286:	f008 f8d3 	bl	8012430 <netif_set_up>
    netif_set_link_up(netif);
 800a28a:	6878      	ldr	r0, [r7, #4]
 800a28c:	f008 f96e 	bl	801256c <netif_set_link_up>
}
 800a290:	e001      	b.n	800a296 <low_level_init+0x256>
    Error_Handler();
 800a292:	f7f7 ffcb 	bl	800222c <Error_Handler>
}
 800a296:	bf00      	nop
 800a298:	37b0      	adds	r7, #176	; 0xb0
 800a29a:	46bd      	mov	sp, r7
 800a29c:	bdb0      	pop	{r4, r5, r7, pc}
 800a29e:	bf00      	nop
 800a2a0:	24000d24 	.word	0x24000d24
 800a2a4:	40028000 	.word	0x40028000
 800a2a8:	30040060 	.word	0x30040060
 800a2ac:	30040000 	.word	0x30040000
 800a2b0:	24000dac 	.word	0x24000dac
 800a2b4:	08026f10 	.word	0x08026f10
 800a2b8:	30040200 	.word	0x30040200
 800a2bc:	24000d20 	.word	0x24000d20
 800a2c0:	08023220 	.word	0x08023220
 800a2c4:	240002dc 	.word	0x240002dc
 800a2c8:	24000eb0 	.word	0x24000eb0

0800a2cc <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800a2cc:	b580      	push	{r7, lr}
 800a2ce:	b092      	sub	sp, #72	; 0x48
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	6078      	str	r0, [r7, #4]
 800a2d4:	6039      	str	r1, [r7, #0]
  uint32_t i=0;
 800a2d6:	2300      	movs	r3, #0
 800a2d8:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q;
  err_t errval = ERR_OK;
 800a2da:	2300      	movs	r3, #0
 800a2dc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT];

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800a2e0:	f107 030c 	add.w	r3, r7, #12
 800a2e4:	2230      	movs	r2, #48	; 0x30
 800a2e6:	2100      	movs	r1, #0
 800a2e8:	4618      	mov	r0, r3
 800a2ea:	f016 f950 	bl	802058e <memset>

  for(q = p; q != NULL; q = q->next)
 800a2ee:	683b      	ldr	r3, [r7, #0]
 800a2f0:	643b      	str	r3, [r7, #64]	; 0x40
 800a2f2:	e045      	b.n	800a380 <low_level_output+0xb4>
  {
    if(i >= ETH_TX_DESC_CNT)
 800a2f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a2f6:	2b03      	cmp	r3, #3
 800a2f8:	d902      	bls.n	800a300 <low_level_output+0x34>
      return ERR_IF;
 800a2fa:	f06f 030b 	mvn.w	r3, #11
 800a2fe:	e052      	b.n	800a3a6 <low_level_output+0xda>

    Txbuffer[i].buffer = q->payload;
 800a300:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a302:	6859      	ldr	r1, [r3, #4]
 800a304:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a306:	4613      	mov	r3, r2
 800a308:	005b      	lsls	r3, r3, #1
 800a30a:	4413      	add	r3, r2
 800a30c:	009b      	lsls	r3, r3, #2
 800a30e:	3348      	adds	r3, #72	; 0x48
 800a310:	443b      	add	r3, r7
 800a312:	3b3c      	subs	r3, #60	; 0x3c
 800a314:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800a316:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a318:	895b      	ldrh	r3, [r3, #10]
 800a31a:	4619      	mov	r1, r3
 800a31c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a31e:	4613      	mov	r3, r2
 800a320:	005b      	lsls	r3, r3, #1
 800a322:	4413      	add	r3, r2
 800a324:	009b      	lsls	r3, r3, #2
 800a326:	3348      	adds	r3, #72	; 0x48
 800a328:	443b      	add	r3, r7
 800a32a:	3b38      	subs	r3, #56	; 0x38
 800a32c:	6019      	str	r1, [r3, #0]

    if(i>0)
 800a32e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a330:	2b00      	cmp	r3, #0
 800a332:	d011      	beq.n	800a358 <low_level_output+0x8c>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800a334:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a336:	1e5a      	subs	r2, r3, #1
 800a338:	f107 000c 	add.w	r0, r7, #12
 800a33c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a33e:	460b      	mov	r3, r1
 800a340:	005b      	lsls	r3, r3, #1
 800a342:	440b      	add	r3, r1
 800a344:	009b      	lsls	r3, r3, #2
 800a346:	18c1      	adds	r1, r0, r3
 800a348:	4613      	mov	r3, r2
 800a34a:	005b      	lsls	r3, r3, #1
 800a34c:	4413      	add	r3, r2
 800a34e:	009b      	lsls	r3, r3, #2
 800a350:	3348      	adds	r3, #72	; 0x48
 800a352:	443b      	add	r3, r7
 800a354:	3b34      	subs	r3, #52	; 0x34
 800a356:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800a358:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d109      	bne.n	800a374 <low_level_output+0xa8>
    {
      Txbuffer[i].next = NULL;
 800a360:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a362:	4613      	mov	r3, r2
 800a364:	005b      	lsls	r3, r3, #1
 800a366:	4413      	add	r3, r2
 800a368:	009b      	lsls	r3, r3, #2
 800a36a:	3348      	adds	r3, #72	; 0x48
 800a36c:	443b      	add	r3, r7
 800a36e:	3b34      	subs	r3, #52	; 0x34
 800a370:	2200      	movs	r2, #0
 800a372:	601a      	str	r2, [r3, #0]
    }

    i++;
 800a374:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a376:	3301      	adds	r3, #1
 800a378:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 800a37a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	643b      	str	r3, [r7, #64]	; 0x40
 800a380:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a382:	2b00      	cmp	r3, #0
 800a384:	d1b6      	bne.n	800a2f4 <low_level_output+0x28>
  }

  TxConfig.Length =  p->tot_len;
 800a386:	683b      	ldr	r3, [r7, #0]
 800a388:	891b      	ldrh	r3, [r3, #8]
 800a38a:	461a      	mov	r2, r3
 800a38c:	4b08      	ldr	r3, [pc, #32]	; (800a3b0 <low_level_output+0xe4>)
 800a38e:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800a390:	4a07      	ldr	r2, [pc, #28]	; (800a3b0 <low_level_output+0xe4>)
 800a392:	f107 030c 	add.w	r3, r7, #12
 800a396:	6093      	str	r3, [r2, #8]

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 800a398:	2214      	movs	r2, #20
 800a39a:	4905      	ldr	r1, [pc, #20]	; (800a3b0 <low_level_output+0xe4>)
 800a39c:	4805      	ldr	r0, [pc, #20]	; (800a3b4 <low_level_output+0xe8>)
 800a39e:	f7f9 fa09 	bl	80037b4 <HAL_ETH_Transmit>

  return errval;
 800a3a2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800a3a6:	4618      	mov	r0, r3
 800a3a8:	3748      	adds	r7, #72	; 0x48
 800a3aa:	46bd      	mov	sp, r7
 800a3ac:	bd80      	pop	{r7, pc}
 800a3ae:	bf00      	nop
 800a3b0:	24000dac 	.word	0x24000dac
 800a3b4:	24000d24 	.word	0x24000d24

0800a3b8 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800a3b8:	b580      	push	{r7, lr}
 800a3ba:	b098      	sub	sp, #96	; 0x60
 800a3bc:	af02      	add	r7, sp, #8
 800a3be:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800a3c0:	2300      	movs	r3, #0
 800a3c2:	657b      	str	r3, [r7, #84]	; 0x54
  ETH_BufferTypeDef RxBuff[ETH_RX_DESC_CNT];
  uint32_t framelength = 0, i = 0;
 800a3c4:	2300      	movs	r3, #0
 800a3c6:	60bb      	str	r3, [r7, #8]
 800a3c8:	2300      	movs	r3, #0
 800a3ca:	653b      	str	r3, [r7, #80]	; 0x50
  struct pbuf_custom* custom_pbuf;

  memset(RxBuff, 0 , ETH_RX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800a3cc:	f107 030c 	add.w	r3, r7, #12
 800a3d0:	2230      	movs	r2, #48	; 0x30
 800a3d2:	2100      	movs	r1, #0
 800a3d4:	4618      	mov	r0, r3
 800a3d6:	f016 f8da 	bl	802058e <memset>

  for(i = 0; i < ETH_RX_DESC_CNT -1; i++)
 800a3da:	2300      	movs	r3, #0
 800a3dc:	653b      	str	r3, [r7, #80]	; 0x50
 800a3de:	e014      	b.n	800a40a <low_level_input+0x52>
  {
    RxBuff[i].next=&RxBuff[i+1];
 800a3e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a3e2:	1c5a      	adds	r2, r3, #1
 800a3e4:	f107 010c 	add.w	r1, r7, #12
 800a3e8:	4613      	mov	r3, r2
 800a3ea:	005b      	lsls	r3, r3, #1
 800a3ec:	4413      	add	r3, r2
 800a3ee:	009b      	lsls	r3, r3, #2
 800a3f0:	4419      	add	r1, r3
 800a3f2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a3f4:	4613      	mov	r3, r2
 800a3f6:	005b      	lsls	r3, r3, #1
 800a3f8:	4413      	add	r3, r2
 800a3fa:	009b      	lsls	r3, r3, #2
 800a3fc:	3358      	adds	r3, #88	; 0x58
 800a3fe:	443b      	add	r3, r7
 800a400:	3b44      	subs	r3, #68	; 0x44
 800a402:	6019      	str	r1, [r3, #0]
  for(i = 0; i < ETH_RX_DESC_CNT -1; i++)
 800a404:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a406:	3301      	adds	r3, #1
 800a408:	653b      	str	r3, [r7, #80]	; 0x50
 800a40a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a40c:	2b02      	cmp	r3, #2
 800a40e:	d9e7      	bls.n	800a3e0 <low_level_input+0x28>
  }

  if (HAL_ETH_GetRxDataBuffer(&heth, RxBuff) == HAL_OK)
 800a410:	f107 030c 	add.w	r3, r7, #12
 800a414:	4619      	mov	r1, r3
 800a416:	4828      	ldr	r0, [pc, #160]	; (800a4b8 <low_level_input+0x100>)
 800a418:	f7f9 fb48 	bl	8003aac <HAL_ETH_GetRxDataBuffer>
 800a41c:	4603      	mov	r3, r0
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d145      	bne.n	800a4ae <low_level_input+0xf6>
  {
    HAL_ETH_GetRxDataLength(&heth, &framelength);
 800a422:	f107 0308 	add.w	r3, r7, #8
 800a426:	4619      	mov	r1, r3
 800a428:	4823      	ldr	r0, [pc, #140]	; (800a4b8 <low_level_input+0x100>)
 800a42a:	f7f9 fbdd 	bl	8003be8 <HAL_ETH_GetRxDataLength>

    /* Build Rx descriptor to be ready for next data reception */
    HAL_ETH_BuildRxDescriptors(&heth);
 800a42e:	4822      	ldr	r0, [pc, #136]	; (800a4b8 <low_level_input+0x100>)
 800a430:	f7f9 fc0d 	bl	8003c4e <HAL_ETH_BuildRxDescriptors>

#if !defined(DUAL_CORE) || defined(CORE_CM7)
    /* Invalidate data cache for ETH Rx Buffers */
    SCB_InvalidateDCache_by_Addr((uint32_t *)RxBuff->buffer, framelength);
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	68ba      	ldr	r2, [r7, #8]
 800a438:	64bb      	str	r3, [r7, #72]	; 0x48
 800a43a:	647a      	str	r2, [r7, #68]	; 0x44
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 800a43c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a43e:	2b00      	cmp	r3, #0
 800a440:	dd1d      	ble.n	800a47e <low_level_input+0xc6>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 800a442:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a444:	f003 021f 	and.w	r2, r3, #31
 800a448:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a44a:	4413      	add	r3, r2
 800a44c:	643b      	str	r3, [r7, #64]	; 0x40
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 800a44e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a450:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("dsb 0xF":::"memory");
 800a452:	f3bf 8f4f 	dsb	sy
}
 800a456:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 800a458:	4a18      	ldr	r2, [pc, #96]	; (800a4bc <low_level_input+0x104>)
 800a45a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a45c:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 800a460:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a462:	3320      	adds	r3, #32
 800a464:	63fb      	str	r3, [r7, #60]	; 0x3c
        op_size -= __SCB_DCACHE_LINE_SIZE;
 800a466:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a468:	3b20      	subs	r3, #32
 800a46a:	643b      	str	r3, [r7, #64]	; 0x40
      } while ( op_size > 0 );
 800a46c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a46e:	2b00      	cmp	r3, #0
 800a470:	dcf2      	bgt.n	800a458 <low_level_input+0xa0>
  __ASM volatile ("dsb 0xF":::"memory");
 800a472:	f3bf 8f4f 	dsb	sy
}
 800a476:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800a478:	f3bf 8f6f 	isb	sy
}
 800a47c:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 800a47e:	bf00      	nop
#endif

    custom_pbuf  = (struct pbuf_custom*)LWIP_MEMPOOL_ALLOC(RX_POOL);
 800a480:	480f      	ldr	r0, [pc, #60]	; (800a4c0 <low_level_input+0x108>)
 800a482:	f007 fd41 	bl	8011f08 <memp_malloc_pool>
 800a486:	64f8      	str	r0, [r7, #76]	; 0x4c
    if(custom_pbuf != NULL)
 800a488:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d00f      	beq.n	800a4ae <low_level_input+0xf6>
    {
      custom_pbuf->custom_free_function = pbuf_free_custom;
 800a48e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a490:	4a0c      	ldr	r2, [pc, #48]	; (800a4c4 <low_level_input+0x10c>)
 800a492:	611a      	str	r2, [r3, #16]
      p = pbuf_alloced_custom(PBUF_RAW, framelength, PBUF_REF, custom_pbuf, RxBuff->buffer, framelength);
 800a494:	68bb      	ldr	r3, [r7, #8]
 800a496:	b299      	uxth	r1, r3
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	68ba      	ldr	r2, [r7, #8]
 800a49c:	b292      	uxth	r2, r2
 800a49e:	9201      	str	r2, [sp, #4]
 800a4a0:	9300      	str	r3, [sp, #0]
 800a4a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a4a4:	2241      	movs	r2, #65	; 0x41
 800a4a6:	2000      	movs	r0, #0
 800a4a8:	f008 fabc 	bl	8012a24 <pbuf_alloced_custom>
 800a4ac:	6578      	str	r0, [r7, #84]	; 0x54
    }
  }

  return p;
 800a4ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
}
 800a4b0:	4618      	mov	r0, r3
 800a4b2:	3758      	adds	r7, #88	; 0x58
 800a4b4:	46bd      	mov	sp, r7
 800a4b6:	bd80      	pop	{r7, pc}
 800a4b8:	24000d24 	.word	0x24000d24
 800a4bc:	e000ed00 	.word	0xe000ed00
 800a4c0:	08026f10 	.word	0x08026f10
 800a4c4:	0800a575 	.word	0x0800a575

0800a4c8 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 800a4c8:	b580      	push	{r7, lr}
 800a4ca:	b084      	sub	sp, #16
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800a4d4:	4b0f      	ldr	r3, [pc, #60]	; (800a514 <ethernetif_input+0x4c>)
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	f04f 31ff 	mov.w	r1, #4294967295
 800a4dc:	4618      	mov	r0, r3
 800a4de:	f000 fab1 	bl	800aa44 <osSemaphoreWait>
 800a4e2:	4603      	mov	r3, r0
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d1f5      	bne.n	800a4d4 <ethernetif_input+0xc>
    {
      do
      {
        p = low_level_input( netif );
 800a4e8:	68f8      	ldr	r0, [r7, #12]
 800a4ea:	f7ff ff65 	bl	800a3b8 <low_level_input>
 800a4ee:	60b8      	str	r0, [r7, #8]
        if (p != NULL)
 800a4f0:	68bb      	ldr	r3, [r7, #8]
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d00a      	beq.n	800a50c <ethernetif_input+0x44>
        {
          if (netif->input( p, netif) != ERR_OK )
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	691b      	ldr	r3, [r3, #16]
 800a4fa:	68f9      	ldr	r1, [r7, #12]
 800a4fc:	68b8      	ldr	r0, [r7, #8]
 800a4fe:	4798      	blx	r3
 800a500:	4603      	mov	r3, r0
 800a502:	2b00      	cmp	r3, #0
 800a504:	d002      	beq.n	800a50c <ethernetif_input+0x44>
          {
            pbuf_free(p);
 800a506:	68b8      	ldr	r0, [r7, #8]
 800a508:	f008 fc78 	bl	8012dfc <pbuf_free>
          }
        }
      } while(p!=NULL);
 800a50c:	68bb      	ldr	r3, [r7, #8]
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d1ea      	bne.n	800a4e8 <ethernetif_input+0x20>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800a512:	e7df      	b.n	800a4d4 <ethernetif_input+0xc>
 800a514:	24000d20 	.word	0x24000d20

0800a518 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800a518:	b580      	push	{r7, lr}
 800a51a:	b082      	sub	sp, #8
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	2b00      	cmp	r3, #0
 800a524:	d106      	bne.n	800a534 <ethernetif_init+0x1c>
 800a526:	4b0e      	ldr	r3, [pc, #56]	; (800a560 <ethernetif_init+0x48>)
 800a528:	f44f 7212 	mov.w	r2, #584	; 0x248
 800a52c:	490d      	ldr	r1, [pc, #52]	; (800a564 <ethernetif_init+0x4c>)
 800a52e:	480e      	ldr	r0, [pc, #56]	; (800a568 <ethernetif_init+0x50>)
 800a530:	f015 ff8e 	bl	8020450 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	2273      	movs	r2, #115	; 0x73
 800a538:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	2274      	movs	r2, #116	; 0x74
 800a540:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	4a09      	ldr	r2, [pc, #36]	; (800a56c <ethernetif_init+0x54>)
 800a548:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	4a08      	ldr	r2, [pc, #32]	; (800a570 <ethernetif_init+0x58>)
 800a54e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800a550:	6878      	ldr	r0, [r7, #4]
 800a552:	f7ff fd75 	bl	800a040 <low_level_init>

  return ERR_OK;
 800a556:	2300      	movs	r3, #0
}
 800a558:	4618      	mov	r0, r3
 800a55a:	3708      	adds	r7, #8
 800a55c:	46bd      	mov	sp, r7
 800a55e:	bd80      	pop	{r7, pc}
 800a560:	0802323c 	.word	0x0802323c
 800a564:	08023258 	.word	0x08023258
 800a568:	08023268 	.word	0x08023268
 800a56c:	0801c7c9 	.word	0x0801c7c9
 800a570:	0800a2cd 	.word	0x0800a2cd

0800a574 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800a574:	b580      	push	{r7, lr}
 800a576:	b084      	sub	sp, #16
 800a578:	af00      	add	r7, sp, #0
 800a57a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	60fb      	str	r3, [r7, #12]

  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800a580:	68f9      	ldr	r1, [r7, #12]
 800a582:	4803      	ldr	r0, [pc, #12]	; (800a590 <pbuf_free_custom+0x1c>)
 800a584:	f007 fd34 	bl	8011ff0 <memp_free_pool>
}
 800a588:	bf00      	nop
 800a58a:	3710      	adds	r7, #16
 800a58c:	46bd      	mov	sp, r7
 800a58e:	bd80      	pop	{r7, pc}
 800a590:	08026f10 	.word	0x08026f10

0800a594 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800a594:	b580      	push	{r7, lr}
 800a596:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800a598:	f7f8 fb20 	bl	8002bdc <HAL_GetTick>
 800a59c:	4603      	mov	r3, r0
}
 800a59e:	4618      	mov	r0, r3
 800a5a0:	bd80      	pop	{r7, pc}
	...

0800a5a4 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800a5a4:	b580      	push	{r7, lr}
 800a5a6:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800a5a8:	4802      	ldr	r0, [pc, #8]	; (800a5b4 <ETH_PHY_IO_Init+0x10>)
 800a5aa:	f7f9 ff93 	bl	80044d4 <HAL_ETH_SetMDIOClockRange>

  return 0;
 800a5ae:	2300      	movs	r3, #0
}
 800a5b0:	4618      	mov	r0, r3
 800a5b2:	bd80      	pop	{r7, pc}
 800a5b4:	24000d24 	.word	0x24000d24

0800a5b8 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800a5b8:	b480      	push	{r7}
 800a5ba:	af00      	add	r7, sp, #0
  return 0;
 800a5bc:	2300      	movs	r3, #0
}
 800a5be:	4618      	mov	r0, r3
 800a5c0:	46bd      	mov	sp, r7
 800a5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c6:	4770      	bx	lr

0800a5c8 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800a5c8:	b580      	push	{r7, lr}
 800a5ca:	b084      	sub	sp, #16
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	60f8      	str	r0, [r7, #12]
 800a5d0:	60b9      	str	r1, [r7, #8]
 800a5d2:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	68ba      	ldr	r2, [r7, #8]
 800a5d8:	68f9      	ldr	r1, [r7, #12]
 800a5da:	4807      	ldr	r0, [pc, #28]	; (800a5f8 <ETH_PHY_IO_ReadReg+0x30>)
 800a5dc:	f7f9 fce4 	bl	8003fa8 <HAL_ETH_ReadPHYRegister>
 800a5e0:	4603      	mov	r3, r0
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d002      	beq.n	800a5ec <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800a5e6:	f04f 33ff 	mov.w	r3, #4294967295
 800a5ea:	e000      	b.n	800a5ee <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800a5ec:	2300      	movs	r3, #0
}
 800a5ee:	4618      	mov	r0, r3
 800a5f0:	3710      	adds	r7, #16
 800a5f2:	46bd      	mov	sp, r7
 800a5f4:	bd80      	pop	{r7, pc}
 800a5f6:	bf00      	nop
 800a5f8:	24000d24 	.word	0x24000d24

0800a5fc <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800a5fc:	b580      	push	{r7, lr}
 800a5fe:	b084      	sub	sp, #16
 800a600:	af00      	add	r7, sp, #0
 800a602:	60f8      	str	r0, [r7, #12]
 800a604:	60b9      	str	r1, [r7, #8]
 800a606:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	68ba      	ldr	r2, [r7, #8]
 800a60c:	68f9      	ldr	r1, [r7, #12]
 800a60e:	4807      	ldr	r0, [pc, #28]	; (800a62c <ETH_PHY_IO_WriteReg+0x30>)
 800a610:	f7f9 fd1e 	bl	8004050 <HAL_ETH_WritePHYRegister>
 800a614:	4603      	mov	r3, r0
 800a616:	2b00      	cmp	r3, #0
 800a618:	d002      	beq.n	800a620 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800a61a:	f04f 33ff 	mov.w	r3, #4294967295
 800a61e:	e000      	b.n	800a622 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 800a620:	2300      	movs	r3, #0
}
 800a622:	4618      	mov	r0, r3
 800a624:	3710      	adds	r7, #16
 800a626:	46bd      	mov	sp, r7
 800a628:	bd80      	pop	{r7, pc}
 800a62a:	bf00      	nop
 800a62c:	24000d24 	.word	0x24000d24

0800a630 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800a630:	b580      	push	{r7, lr}
 800a632:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800a634:	f7f8 fad2 	bl	8002bdc <HAL_GetTick>
 800a638:	4603      	mov	r3, r0
}
 800a63a:	4618      	mov	r0, r3
 800a63c:	bd80      	pop	{r7, pc}
	...

0800a640 <ethernet_link_thread>:
  * @param  argument: netif
  * @retval None
  */

void ethernet_link_thread(void const * argument)
{
 800a640:	b580      	push	{r7, lr}
 800a642:	b0a0      	sub	sp, #128	; 0x80
 800a644:	af00      	add	r7, sp, #0
 800a646:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf;
  int32_t PHYLinkState;
  uint32_t linkchanged = 0, speed = 0, duplex =0;
 800a648:	2300      	movs	r3, #0
 800a64a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a64c:	2300      	movs	r3, #0
 800a64e:	67bb      	str	r3, [r7, #120]	; 0x78
 800a650:	2300      	movs	r3, #0
 800a652:	677b      	str	r3, [r7, #116]	; 0x74

  struct netif *netif = (struct netif *) argument;
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	673b      	str	r3, [r7, #112]	; 0x70

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800a658:	483a      	ldr	r0, [pc, #232]	; (800a744 <ethernet_link_thread+0x104>)
 800a65a:	f7f8 f9e8 	bl	8002a2e <LAN8742_GetLinkState>
 800a65e:	66f8      	str	r0, [r7, #108]	; 0x6c

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800a660:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a662:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a666:	089b      	lsrs	r3, r3, #2
 800a668:	f003 0301 	and.w	r3, r3, #1
 800a66c:	b2db      	uxtb	r3, r3
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d00c      	beq.n	800a68c <ethernet_link_thread+0x4c>
 800a672:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a674:	2b01      	cmp	r3, #1
 800a676:	dc09      	bgt.n	800a68c <ethernet_link_thread+0x4c>
  {
    HAL_ETH_Stop_IT(&heth);
 800a678:	4833      	ldr	r0, [pc, #204]	; (800a748 <ethernet_link_thread+0x108>)
 800a67a:	f7f9 f821 	bl	80036c0 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 800a67e:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800a680:	f007 ff42 	bl	8012508 <netif_set_down>
    netif_set_link_down(netif);
 800a684:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800a686:	f007 ffa9 	bl	80125dc <netif_set_link_down>
 800a68a:	e056      	b.n	800a73a <ethernet_link_thread+0xfa>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800a68c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a68e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a692:	f003 0304 	and.w	r3, r3, #4
 800a696:	2b00      	cmp	r3, #0
 800a698:	d14f      	bne.n	800a73a <ethernet_link_thread+0xfa>
 800a69a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a69c:	2b01      	cmp	r3, #1
 800a69e:	dd4c      	ble.n	800a73a <ethernet_link_thread+0xfa>
  {
    switch (PHYLinkState)
 800a6a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a6a2:	3b02      	subs	r3, #2
 800a6a4:	2b03      	cmp	r3, #3
 800a6a6:	d82b      	bhi.n	800a700 <ethernet_link_thread+0xc0>
 800a6a8:	a201      	add	r2, pc, #4	; (adr r2, 800a6b0 <ethernet_link_thread+0x70>)
 800a6aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6ae:	bf00      	nop
 800a6b0:	0800a6c1 	.word	0x0800a6c1
 800a6b4:	0800a6d3 	.word	0x0800a6d3
 800a6b8:	0800a6e3 	.word	0x0800a6e3
 800a6bc:	0800a6f3 	.word	0x0800a6f3
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800a6c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a6c4:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800a6c6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a6ca:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800a6cc:	2301      	movs	r3, #1
 800a6ce:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800a6d0:	e017      	b.n	800a702 <ethernet_link_thread+0xc2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800a6d2:	2300      	movs	r3, #0
 800a6d4:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800a6d6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a6da:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800a6dc:	2301      	movs	r3, #1
 800a6de:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800a6e0:	e00f      	b.n	800a702 <ethernet_link_thread+0xc2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800a6e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a6e6:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800a6e8:	2300      	movs	r3, #0
 800a6ea:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800a6ec:	2301      	movs	r3, #1
 800a6ee:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800a6f0:	e007      	b.n	800a702 <ethernet_link_thread+0xc2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800a6f2:	2300      	movs	r3, #0
 800a6f4:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800a6f6:	2300      	movs	r3, #0
 800a6f8:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800a6fa:	2301      	movs	r3, #1
 800a6fc:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800a6fe:	e000      	b.n	800a702 <ethernet_link_thread+0xc2>
    default:
      break;
 800a700:	bf00      	nop
    }

    if(linkchanged)
 800a702:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a704:	2b00      	cmp	r3, #0
 800a706:	d018      	beq.n	800a73a <ethernet_link_thread+0xfa>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800a708:	f107 0308 	add.w	r3, r7, #8
 800a70c:	4619      	mov	r1, r3
 800a70e:	480e      	ldr	r0, [pc, #56]	; (800a748 <ethernet_link_thread+0x108>)
 800a710:	f7f9 fcf2 	bl	80040f8 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800a714:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a716:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 800a718:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a71a:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800a71c:	f107 0308 	add.w	r3, r7, #8
 800a720:	4619      	mov	r1, r3
 800a722:	4809      	ldr	r0, [pc, #36]	; (800a748 <ethernet_link_thread+0x108>)
 800a724:	f7f9 febc 	bl	80044a0 <HAL_ETH_SetMACConfig>

      HAL_ETH_Start_IT(&heth);
 800a728:	4807      	ldr	r0, [pc, #28]	; (800a748 <ethernet_link_thread+0x108>)
 800a72a:	f7f8 ff42 	bl	80035b2 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 800a72e:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800a730:	f007 fe7e 	bl	8012430 <netif_set_up>
      netif_set_link_up(netif);
 800a734:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800a736:	f007 ff19 	bl	801256c <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 800a73a:	2064      	movs	r0, #100	; 0x64
 800a73c:	f000 f89f 	bl	800a87e <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800a740:	e78a      	b.n	800a658 <ethernet_link_thread+0x18>
 800a742:	bf00      	nop
 800a744:	24000eb0 	.word	0x24000eb0
 800a748:	24000d24 	.word	0x24000d24

0800a74c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800a74c:	b480      	push	{r7}
 800a74e:	b085      	sub	sp, #20
 800a750:	af00      	add	r7, sp, #0
 800a752:	4603      	mov	r3, r0
 800a754:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800a756:	2300      	movs	r3, #0
 800a758:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800a75a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a75e:	2b84      	cmp	r3, #132	; 0x84
 800a760:	d005      	beq.n	800a76e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800a762:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	4413      	add	r3, r2
 800a76a:	3303      	adds	r3, #3
 800a76c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800a76e:	68fb      	ldr	r3, [r7, #12]
}
 800a770:	4618      	mov	r0, r3
 800a772:	3714      	adds	r7, #20
 800a774:	46bd      	mov	sp, r7
 800a776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a77a:	4770      	bx	lr

0800a77c <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800a77c:	b480      	push	{r7}
 800a77e:	b083      	sub	sp, #12
 800a780:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a782:	f3ef 8305 	mrs	r3, IPSR
 800a786:	607b      	str	r3, [r7, #4]
  return(result);
 800a788:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	bf14      	ite	ne
 800a78e:	2301      	movne	r3, #1
 800a790:	2300      	moveq	r3, #0
 800a792:	b2db      	uxtb	r3, r3
}
 800a794:	4618      	mov	r0, r3
 800a796:	370c      	adds	r7, #12
 800a798:	46bd      	mov	sp, r7
 800a79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a79e:	4770      	bx	lr

0800a7a0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800a7a0:	b580      	push	{r7, lr}
 800a7a2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800a7a4:	f001 fdc2 	bl	800c32c <vTaskStartScheduler>
  
  return osOK;
 800a7a8:	2300      	movs	r3, #0
}
 800a7aa:	4618      	mov	r0, r3
 800a7ac:	bd80      	pop	{r7, pc}

0800a7ae <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800a7ae:	b580      	push	{r7, lr}
 800a7b0:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800a7b2:	f7ff ffe3 	bl	800a77c <inHandlerMode>
 800a7b6:	4603      	mov	r3, r0
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d003      	beq.n	800a7c4 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800a7bc:	f001 fed0 	bl	800c560 <xTaskGetTickCountFromISR>
 800a7c0:	4603      	mov	r3, r0
 800a7c2:	e002      	b.n	800a7ca <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800a7c4:	f001 febc 	bl	800c540 <xTaskGetTickCount>
 800a7c8:	4603      	mov	r3, r0
  }
}
 800a7ca:	4618      	mov	r0, r3
 800a7cc:	bd80      	pop	{r7, pc}

0800a7ce <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800a7ce:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a7d0:	b089      	sub	sp, #36	; 0x24
 800a7d2:	af04      	add	r7, sp, #16
 800a7d4:	6078      	str	r0, [r7, #4]
 800a7d6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	695b      	ldr	r3, [r3, #20]
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d020      	beq.n	800a822 <osThreadCreate+0x54>
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	699b      	ldr	r3, [r3, #24]
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d01c      	beq.n	800a822 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	685c      	ldr	r4, [r3, #4]
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	691e      	ldr	r6, [r3, #16]
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a7fa:	4618      	mov	r0, r3
 800a7fc:	f7ff ffa6 	bl	800a74c <makeFreeRtosPriority>
 800a800:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	695b      	ldr	r3, [r3, #20]
 800a806:	687a      	ldr	r2, [r7, #4]
 800a808:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a80a:	9202      	str	r2, [sp, #8]
 800a80c:	9301      	str	r3, [sp, #4]
 800a80e:	9100      	str	r1, [sp, #0]
 800a810:	683b      	ldr	r3, [r7, #0]
 800a812:	4632      	mov	r2, r6
 800a814:	4629      	mov	r1, r5
 800a816:	4620      	mov	r0, r4
 800a818:	f001 fb30 	bl	800be7c <xTaskCreateStatic>
 800a81c:	4603      	mov	r3, r0
 800a81e:	60fb      	str	r3, [r7, #12]
 800a820:	e01c      	b.n	800a85c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	685c      	ldr	r4, [r3, #4]
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a82e:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a836:	4618      	mov	r0, r3
 800a838:	f7ff ff88 	bl	800a74c <makeFreeRtosPriority>
 800a83c:	4602      	mov	r2, r0
 800a83e:	f107 030c 	add.w	r3, r7, #12
 800a842:	9301      	str	r3, [sp, #4]
 800a844:	9200      	str	r2, [sp, #0]
 800a846:	683b      	ldr	r3, [r7, #0]
 800a848:	4632      	mov	r2, r6
 800a84a:	4629      	mov	r1, r5
 800a84c:	4620      	mov	r0, r4
 800a84e:	f001 fb72 	bl	800bf36 <xTaskCreate>
 800a852:	4603      	mov	r3, r0
 800a854:	2b01      	cmp	r3, #1
 800a856:	d001      	beq.n	800a85c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800a858:	2300      	movs	r3, #0
 800a85a:	e000      	b.n	800a85e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800a85c:	68fb      	ldr	r3, [r7, #12]
}
 800a85e:	4618      	mov	r0, r3
 800a860:	3714      	adds	r7, #20
 800a862:	46bd      	mov	sp, r7
 800a864:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a866 <osThreadTerminate>:
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadTerminate shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadTerminate (osThreadId thread_id)
{
 800a866:	b580      	push	{r7, lr}
 800a868:	b082      	sub	sp, #8
 800a86a:	af00      	add	r7, sp, #0
 800a86c:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskDelete == 1)
  vTaskDelete(thread_id);
 800a86e:	6878      	ldr	r0, [r7, #4]
 800a870:	f001 fc98 	bl	800c1a4 <vTaskDelete>
  return osOK;
 800a874:	2300      	movs	r3, #0
#else
  return osErrorOS;
#endif
}
 800a876:	4618      	mov	r0, r3
 800a878:	3708      	adds	r7, #8
 800a87a:	46bd      	mov	sp, r7
 800a87c:	bd80      	pop	{r7, pc}

0800a87e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800a87e:	b580      	push	{r7, lr}
 800a880:	b084      	sub	sp, #16
 800a882:	af00      	add	r7, sp, #0
 800a884:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d001      	beq.n	800a894 <osDelay+0x16>
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	e000      	b.n	800a896 <osDelay+0x18>
 800a894:	2301      	movs	r3, #1
 800a896:	4618      	mov	r0, r3
 800a898:	f001 fd14 	bl	800c2c4 <vTaskDelay>
  
  return osOK;
 800a89c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800a89e:	4618      	mov	r0, r3
 800a8a0:	3710      	adds	r7, #16
 800a8a2:	46bd      	mov	sp, r7
 800a8a4:	bd80      	pop	{r7, pc}

0800a8a6 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800a8a6:	b580      	push	{r7, lr}
 800a8a8:	b082      	sub	sp, #8
 800a8aa:	af00      	add	r7, sp, #0
 800a8ac:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	685b      	ldr	r3, [r3, #4]
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d007      	beq.n	800a8c6 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	685b      	ldr	r3, [r3, #4]
 800a8ba:	4619      	mov	r1, r3
 800a8bc:	2001      	movs	r0, #1
 800a8be:	f000 fc7e 	bl	800b1be <xQueueCreateMutexStatic>
 800a8c2:	4603      	mov	r3, r0
 800a8c4:	e003      	b.n	800a8ce <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800a8c6:	2001      	movs	r0, #1
 800a8c8:	f000 fc61 	bl	800b18e <xQueueCreateMutex>
 800a8cc:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800a8ce:	4618      	mov	r0, r3
 800a8d0:	3708      	adds	r7, #8
 800a8d2:	46bd      	mov	sp, r7
 800a8d4:	bd80      	pop	{r7, pc}
	...

0800a8d8 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800a8d8:	b580      	push	{r7, lr}
 800a8da:	b084      	sub	sp, #16
 800a8dc:	af00      	add	r7, sp, #0
 800a8de:	6078      	str	r0, [r7, #4]
 800a8e0:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800a8e2:	2300      	movs	r3, #0
 800a8e4:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d101      	bne.n	800a8f0 <osMutexWait+0x18>
    return osErrorParameter;
 800a8ec:	2380      	movs	r3, #128	; 0x80
 800a8ee:	e03a      	b.n	800a966 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 800a8f0:	2300      	movs	r3, #0
 800a8f2:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800a8f4:	683b      	ldr	r3, [r7, #0]
 800a8f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8fa:	d103      	bne.n	800a904 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 800a8fc:	f04f 33ff 	mov.w	r3, #4294967295
 800a900:	60fb      	str	r3, [r7, #12]
 800a902:	e009      	b.n	800a918 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 800a904:	683b      	ldr	r3, [r7, #0]
 800a906:	2b00      	cmp	r3, #0
 800a908:	d006      	beq.n	800a918 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800a90a:	683b      	ldr	r3, [r7, #0]
 800a90c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	2b00      	cmp	r3, #0
 800a912:	d101      	bne.n	800a918 <osMutexWait+0x40>
      ticks = 1;
 800a914:	2301      	movs	r3, #1
 800a916:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800a918:	f7ff ff30 	bl	800a77c <inHandlerMode>
 800a91c:	4603      	mov	r3, r0
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d017      	beq.n	800a952 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800a922:	f107 0308 	add.w	r3, r7, #8
 800a926:	461a      	mov	r2, r3
 800a928:	2100      	movs	r1, #0
 800a92a:	6878      	ldr	r0, [r7, #4]
 800a92c:	f001 f874 	bl	800ba18 <xQueueReceiveFromISR>
 800a930:	4603      	mov	r3, r0
 800a932:	2b01      	cmp	r3, #1
 800a934:	d001      	beq.n	800a93a <osMutexWait+0x62>
      return osErrorOS;
 800a936:	23ff      	movs	r3, #255	; 0xff
 800a938:	e015      	b.n	800a966 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800a93a:	68bb      	ldr	r3, [r7, #8]
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d011      	beq.n	800a964 <osMutexWait+0x8c>
 800a940:	4b0b      	ldr	r3, [pc, #44]	; (800a970 <osMutexWait+0x98>)
 800a942:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a946:	601a      	str	r2, [r3, #0]
 800a948:	f3bf 8f4f 	dsb	sy
 800a94c:	f3bf 8f6f 	isb	sy
 800a950:	e008      	b.n	800a964 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800a952:	68f9      	ldr	r1, [r7, #12]
 800a954:	6878      	ldr	r0, [r7, #4]
 800a956:	f000 ff53 	bl	800b800 <xQueueSemaphoreTake>
 800a95a:	4603      	mov	r3, r0
 800a95c:	2b01      	cmp	r3, #1
 800a95e:	d001      	beq.n	800a964 <osMutexWait+0x8c>
    return osErrorOS;
 800a960:	23ff      	movs	r3, #255	; 0xff
 800a962:	e000      	b.n	800a966 <osMutexWait+0x8e>
  }
  
  return osOK;
 800a964:	2300      	movs	r3, #0
}
 800a966:	4618      	mov	r0, r3
 800a968:	3710      	adds	r7, #16
 800a96a:	46bd      	mov	sp, r7
 800a96c:	bd80      	pop	{r7, pc}
 800a96e:	bf00      	nop
 800a970:	e000ed04 	.word	0xe000ed04

0800a974 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800a974:	b580      	push	{r7, lr}
 800a976:	b084      	sub	sp, #16
 800a978:	af00      	add	r7, sp, #0
 800a97a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800a97c:	2300      	movs	r3, #0
 800a97e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800a980:	2300      	movs	r3, #0
 800a982:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 800a984:	f7ff fefa 	bl	800a77c <inHandlerMode>
 800a988:	4603      	mov	r3, r0
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d016      	beq.n	800a9bc <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800a98e:	f107 0308 	add.w	r3, r7, #8
 800a992:	4619      	mov	r1, r3
 800a994:	6878      	ldr	r0, [r7, #4]
 800a996:	f000 fdc6 	bl	800b526 <xQueueGiveFromISR>
 800a99a:	4603      	mov	r3, r0
 800a99c:	2b01      	cmp	r3, #1
 800a99e:	d001      	beq.n	800a9a4 <osMutexRelease+0x30>
      return osErrorOS;
 800a9a0:	23ff      	movs	r3, #255	; 0xff
 800a9a2:	e017      	b.n	800a9d4 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800a9a4:	68bb      	ldr	r3, [r7, #8]
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d013      	beq.n	800a9d2 <osMutexRelease+0x5e>
 800a9aa:	4b0c      	ldr	r3, [pc, #48]	; (800a9dc <osMutexRelease+0x68>)
 800a9ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a9b0:	601a      	str	r2, [r3, #0]
 800a9b2:	f3bf 8f4f 	dsb	sy
 800a9b6:	f3bf 8f6f 	isb	sy
 800a9ba:	e00a      	b.n	800a9d2 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800a9bc:	2300      	movs	r3, #0
 800a9be:	2200      	movs	r2, #0
 800a9c0:	2100      	movs	r1, #0
 800a9c2:	6878      	ldr	r0, [r7, #4]
 800a9c4:	f000 fc16 	bl	800b1f4 <xQueueGenericSend>
 800a9c8:	4603      	mov	r3, r0
 800a9ca:	2b01      	cmp	r3, #1
 800a9cc:	d001      	beq.n	800a9d2 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800a9ce:	23ff      	movs	r3, #255	; 0xff
 800a9d0:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800a9d2:	68fb      	ldr	r3, [r7, #12]
}
 800a9d4:	4618      	mov	r0, r3
 800a9d6:	3710      	adds	r7, #16
 800a9d8:	46bd      	mov	sp, r7
 800a9da:	bd80      	pop	{r7, pc}
 800a9dc:	e000ed04 	.word	0xe000ed04

0800a9e0 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800a9e0:	b580      	push	{r7, lr}
 800a9e2:	b086      	sub	sp, #24
 800a9e4:	af02      	add	r7, sp, #8
 800a9e6:	6078      	str	r0, [r7, #4]
 800a9e8:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	685b      	ldr	r3, [r3, #4]
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d00f      	beq.n	800aa12 <osSemaphoreCreate+0x32>
    if (count == 1) {
 800a9f2:	683b      	ldr	r3, [r7, #0]
 800a9f4:	2b01      	cmp	r3, #1
 800a9f6:	d10a      	bne.n	800aa0e <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	685b      	ldr	r3, [r3, #4]
 800a9fc:	2203      	movs	r2, #3
 800a9fe:	9200      	str	r2, [sp, #0]
 800aa00:	2200      	movs	r2, #0
 800aa02:	2100      	movs	r1, #0
 800aa04:	2001      	movs	r0, #1
 800aa06:	f000 fad7 	bl	800afb8 <xQueueGenericCreateStatic>
 800aa0a:	4603      	mov	r3, r0
 800aa0c:	e016      	b.n	800aa3c <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800aa0e:	2300      	movs	r3, #0
 800aa10:	e014      	b.n	800aa3c <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800aa12:	683b      	ldr	r3, [r7, #0]
 800aa14:	2b01      	cmp	r3, #1
 800aa16:	d110      	bne.n	800aa3a <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800aa18:	2203      	movs	r2, #3
 800aa1a:	2100      	movs	r1, #0
 800aa1c:	2001      	movs	r0, #1
 800aa1e:	f000 fb43 	bl	800b0a8 <xQueueGenericCreate>
 800aa22:	60f8      	str	r0, [r7, #12]
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d005      	beq.n	800aa36 <osSemaphoreCreate+0x56>
 800aa2a:	2300      	movs	r3, #0
 800aa2c:	2200      	movs	r2, #0
 800aa2e:	2100      	movs	r1, #0
 800aa30:	68f8      	ldr	r0, [r7, #12]
 800aa32:	f000 fbdf 	bl	800b1f4 <xQueueGenericSend>
      return sema;
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	e000      	b.n	800aa3c <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800aa3a:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800aa3c:	4618      	mov	r0, r3
 800aa3e:	3710      	adds	r7, #16
 800aa40:	46bd      	mov	sp, r7
 800aa42:	bd80      	pop	{r7, pc}

0800aa44 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800aa44:	b580      	push	{r7, lr}
 800aa46:	b084      	sub	sp, #16
 800aa48:	af00      	add	r7, sp, #0
 800aa4a:	6078      	str	r0, [r7, #4]
 800aa4c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800aa4e:	2300      	movs	r3, #0
 800aa50:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d101      	bne.n	800aa5c <osSemaphoreWait+0x18>
    return osErrorParameter;
 800aa58:	2380      	movs	r3, #128	; 0x80
 800aa5a:	e03a      	b.n	800aad2 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800aa5c:	2300      	movs	r3, #0
 800aa5e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800aa60:	683b      	ldr	r3, [r7, #0]
 800aa62:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa66:	d103      	bne.n	800aa70 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800aa68:	f04f 33ff 	mov.w	r3, #4294967295
 800aa6c:	60fb      	str	r3, [r7, #12]
 800aa6e:	e009      	b.n	800aa84 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800aa70:	683b      	ldr	r3, [r7, #0]
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d006      	beq.n	800aa84 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800aa76:	683b      	ldr	r3, [r7, #0]
 800aa78:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d101      	bne.n	800aa84 <osSemaphoreWait+0x40>
      ticks = 1;
 800aa80:	2301      	movs	r3, #1
 800aa82:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800aa84:	f7ff fe7a 	bl	800a77c <inHandlerMode>
 800aa88:	4603      	mov	r3, r0
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d017      	beq.n	800aabe <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800aa8e:	f107 0308 	add.w	r3, r7, #8
 800aa92:	461a      	mov	r2, r3
 800aa94:	2100      	movs	r1, #0
 800aa96:	6878      	ldr	r0, [r7, #4]
 800aa98:	f000 ffbe 	bl	800ba18 <xQueueReceiveFromISR>
 800aa9c:	4603      	mov	r3, r0
 800aa9e:	2b01      	cmp	r3, #1
 800aaa0:	d001      	beq.n	800aaa6 <osSemaphoreWait+0x62>
      return osErrorOS;
 800aaa2:	23ff      	movs	r3, #255	; 0xff
 800aaa4:	e015      	b.n	800aad2 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800aaa6:	68bb      	ldr	r3, [r7, #8]
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d011      	beq.n	800aad0 <osSemaphoreWait+0x8c>
 800aaac:	4b0b      	ldr	r3, [pc, #44]	; (800aadc <osSemaphoreWait+0x98>)
 800aaae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aab2:	601a      	str	r2, [r3, #0]
 800aab4:	f3bf 8f4f 	dsb	sy
 800aab8:	f3bf 8f6f 	isb	sy
 800aabc:	e008      	b.n	800aad0 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800aabe:	68f9      	ldr	r1, [r7, #12]
 800aac0:	6878      	ldr	r0, [r7, #4]
 800aac2:	f000 fe9d 	bl	800b800 <xQueueSemaphoreTake>
 800aac6:	4603      	mov	r3, r0
 800aac8:	2b01      	cmp	r3, #1
 800aaca:	d001      	beq.n	800aad0 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800aacc:	23ff      	movs	r3, #255	; 0xff
 800aace:	e000      	b.n	800aad2 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800aad0:	2300      	movs	r3, #0
}
 800aad2:	4618      	mov	r0, r3
 800aad4:	3710      	adds	r7, #16
 800aad6:	46bd      	mov	sp, r7
 800aad8:	bd80      	pop	{r7, pc}
 800aada:	bf00      	nop
 800aadc:	e000ed04 	.word	0xe000ed04

0800aae0 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800aae0:	b580      	push	{r7, lr}
 800aae2:	b084      	sub	sp, #16
 800aae4:	af00      	add	r7, sp, #0
 800aae6:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800aae8:	2300      	movs	r3, #0
 800aaea:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800aaec:	2300      	movs	r3, #0
 800aaee:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800aaf0:	f7ff fe44 	bl	800a77c <inHandlerMode>
 800aaf4:	4603      	mov	r3, r0
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d016      	beq.n	800ab28 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800aafa:	f107 0308 	add.w	r3, r7, #8
 800aafe:	4619      	mov	r1, r3
 800ab00:	6878      	ldr	r0, [r7, #4]
 800ab02:	f000 fd10 	bl	800b526 <xQueueGiveFromISR>
 800ab06:	4603      	mov	r3, r0
 800ab08:	2b01      	cmp	r3, #1
 800ab0a:	d001      	beq.n	800ab10 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800ab0c:	23ff      	movs	r3, #255	; 0xff
 800ab0e:	e017      	b.n	800ab40 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800ab10:	68bb      	ldr	r3, [r7, #8]
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d013      	beq.n	800ab3e <osSemaphoreRelease+0x5e>
 800ab16:	4b0c      	ldr	r3, [pc, #48]	; (800ab48 <osSemaphoreRelease+0x68>)
 800ab18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab1c:	601a      	str	r2, [r3, #0]
 800ab1e:	f3bf 8f4f 	dsb	sy
 800ab22:	f3bf 8f6f 	isb	sy
 800ab26:	e00a      	b.n	800ab3e <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800ab28:	2300      	movs	r3, #0
 800ab2a:	2200      	movs	r2, #0
 800ab2c:	2100      	movs	r1, #0
 800ab2e:	6878      	ldr	r0, [r7, #4]
 800ab30:	f000 fb60 	bl	800b1f4 <xQueueGenericSend>
 800ab34:	4603      	mov	r3, r0
 800ab36:	2b01      	cmp	r3, #1
 800ab38:	d001      	beq.n	800ab3e <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800ab3a:	23ff      	movs	r3, #255	; 0xff
 800ab3c:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800ab3e:	68fb      	ldr	r3, [r7, #12]
}
 800ab40:	4618      	mov	r0, r3
 800ab42:	3710      	adds	r7, #16
 800ab44:	46bd      	mov	sp, r7
 800ab46:	bd80      	pop	{r7, pc}
 800ab48:	e000ed04 	.word	0xe000ed04

0800ab4c <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 800ab4c:	b580      	push	{r7, lr}
 800ab4e:	b082      	sub	sp, #8
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800ab54:	f7ff fe12 	bl	800a77c <inHandlerMode>
 800ab58:	4603      	mov	r3, r0
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d001      	beq.n	800ab62 <osSemaphoreDelete+0x16>
    return osErrorISR;
 800ab5e:	2382      	movs	r3, #130	; 0x82
 800ab60:	e003      	b.n	800ab6a <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 800ab62:	6878      	ldr	r0, [r7, #4]
 800ab64:	f001 f814 	bl	800bb90 <vQueueDelete>

  return osOK; 
 800ab68:	2300      	movs	r3, #0
}
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	3708      	adds	r7, #8
 800ab6e:	46bd      	mov	sp, r7
 800ab70:	bd80      	pop	{r7, pc}

0800ab72 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800ab72:	b590      	push	{r4, r7, lr}
 800ab74:	b085      	sub	sp, #20
 800ab76:	af02      	add	r7, sp, #8
 800ab78:	6078      	str	r0, [r7, #4]
 800ab7a:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	689b      	ldr	r3, [r3, #8]
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d011      	beq.n	800aba8 <osMessageCreate+0x36>
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	68db      	ldr	r3, [r3, #12]
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d00d      	beq.n	800aba8 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	6818      	ldr	r0, [r3, #0]
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	6859      	ldr	r1, [r3, #4]
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	689a      	ldr	r2, [r3, #8]
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	68db      	ldr	r3, [r3, #12]
 800ab9c:	2400      	movs	r4, #0
 800ab9e:	9400      	str	r4, [sp, #0]
 800aba0:	f000 fa0a 	bl	800afb8 <xQueueGenericCreateStatic>
 800aba4:	4603      	mov	r3, r0
 800aba6:	e008      	b.n	800abba <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	6818      	ldr	r0, [r3, #0]
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	685b      	ldr	r3, [r3, #4]
 800abb0:	2200      	movs	r2, #0
 800abb2:	4619      	mov	r1, r3
 800abb4:	f000 fa78 	bl	800b0a8 <xQueueGenericCreate>
 800abb8:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800abba:	4618      	mov	r0, r3
 800abbc:	370c      	adds	r7, #12
 800abbe:	46bd      	mov	sp, r7
 800abc0:	bd90      	pop	{r4, r7, pc}
	...

0800abc4 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800abc4:	b580      	push	{r7, lr}
 800abc6:	b086      	sub	sp, #24
 800abc8:	af00      	add	r7, sp, #0
 800abca:	60f8      	str	r0, [r7, #12]
 800abcc:	60b9      	str	r1, [r7, #8]
 800abce:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800abd0:	2300      	movs	r3, #0
 800abd2:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800abd8:	697b      	ldr	r3, [r7, #20]
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d101      	bne.n	800abe2 <osMessagePut+0x1e>
    ticks = 1;
 800abde:	2301      	movs	r3, #1
 800abe0:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800abe2:	f7ff fdcb 	bl	800a77c <inHandlerMode>
 800abe6:	4603      	mov	r3, r0
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d018      	beq.n	800ac1e <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800abec:	f107 0210 	add.w	r2, r7, #16
 800abf0:	f107 0108 	add.w	r1, r7, #8
 800abf4:	2300      	movs	r3, #0
 800abf6:	68f8      	ldr	r0, [r7, #12]
 800abf8:	f000 fbfa 	bl	800b3f0 <xQueueGenericSendFromISR>
 800abfc:	4603      	mov	r3, r0
 800abfe:	2b01      	cmp	r3, #1
 800ac00:	d001      	beq.n	800ac06 <osMessagePut+0x42>
      return osErrorOS;
 800ac02:	23ff      	movs	r3, #255	; 0xff
 800ac04:	e018      	b.n	800ac38 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800ac06:	693b      	ldr	r3, [r7, #16]
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d014      	beq.n	800ac36 <osMessagePut+0x72>
 800ac0c:	4b0c      	ldr	r3, [pc, #48]	; (800ac40 <osMessagePut+0x7c>)
 800ac0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac12:	601a      	str	r2, [r3, #0]
 800ac14:	f3bf 8f4f 	dsb	sy
 800ac18:	f3bf 8f6f 	isb	sy
 800ac1c:	e00b      	b.n	800ac36 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800ac1e:	f107 0108 	add.w	r1, r7, #8
 800ac22:	2300      	movs	r3, #0
 800ac24:	697a      	ldr	r2, [r7, #20]
 800ac26:	68f8      	ldr	r0, [r7, #12]
 800ac28:	f000 fae4 	bl	800b1f4 <xQueueGenericSend>
 800ac2c:	4603      	mov	r3, r0
 800ac2e:	2b01      	cmp	r3, #1
 800ac30:	d001      	beq.n	800ac36 <osMessagePut+0x72>
      return osErrorOS;
 800ac32:	23ff      	movs	r3, #255	; 0xff
 800ac34:	e000      	b.n	800ac38 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800ac36:	2300      	movs	r3, #0
}
 800ac38:	4618      	mov	r0, r3
 800ac3a:	3718      	adds	r7, #24
 800ac3c:	46bd      	mov	sp, r7
 800ac3e:	bd80      	pop	{r7, pc}
 800ac40:	e000ed04 	.word	0xe000ed04

0800ac44 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800ac44:	b590      	push	{r4, r7, lr}
 800ac46:	b08b      	sub	sp, #44	; 0x2c
 800ac48:	af00      	add	r7, sp, #0
 800ac4a:	60f8      	str	r0, [r7, #12]
 800ac4c:	60b9      	str	r1, [r7, #8]
 800ac4e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800ac50:	68bb      	ldr	r3, [r7, #8]
 800ac52:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800ac54:	2300      	movs	r3, #0
 800ac56:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800ac58:	68bb      	ldr	r3, [r7, #8]
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d10a      	bne.n	800ac74 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800ac5e:	2380      	movs	r3, #128	; 0x80
 800ac60:	617b      	str	r3, [r7, #20]
    return event;
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	461c      	mov	r4, r3
 800ac66:	f107 0314 	add.w	r3, r7, #20
 800ac6a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ac6e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800ac72:	e054      	b.n	800ad1e <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800ac74:	2300      	movs	r3, #0
 800ac76:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800ac78:	2300      	movs	r3, #0
 800ac7a:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac82:	d103      	bne.n	800ac8c <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800ac84:	f04f 33ff 	mov.w	r3, #4294967295
 800ac88:	627b      	str	r3, [r7, #36]	; 0x24
 800ac8a:	e009      	b.n	800aca0 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d006      	beq.n	800aca0 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800ac96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d101      	bne.n	800aca0 <osMessageGet+0x5c>
      ticks = 1;
 800ac9c:	2301      	movs	r3, #1
 800ac9e:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800aca0:	f7ff fd6c 	bl	800a77c <inHandlerMode>
 800aca4:	4603      	mov	r3, r0
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d01c      	beq.n	800ace4 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800acaa:	f107 0220 	add.w	r2, r7, #32
 800acae:	f107 0314 	add.w	r3, r7, #20
 800acb2:	3304      	adds	r3, #4
 800acb4:	4619      	mov	r1, r3
 800acb6:	68b8      	ldr	r0, [r7, #8]
 800acb8:	f000 feae 	bl	800ba18 <xQueueReceiveFromISR>
 800acbc:	4603      	mov	r3, r0
 800acbe:	2b01      	cmp	r3, #1
 800acc0:	d102      	bne.n	800acc8 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800acc2:	2310      	movs	r3, #16
 800acc4:	617b      	str	r3, [r7, #20]
 800acc6:	e001      	b.n	800accc <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800acc8:	2300      	movs	r3, #0
 800acca:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800accc:	6a3b      	ldr	r3, [r7, #32]
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d01d      	beq.n	800ad0e <osMessageGet+0xca>
 800acd2:	4b15      	ldr	r3, [pc, #84]	; (800ad28 <osMessageGet+0xe4>)
 800acd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800acd8:	601a      	str	r2, [r3, #0]
 800acda:	f3bf 8f4f 	dsb	sy
 800acde:	f3bf 8f6f 	isb	sy
 800ace2:	e014      	b.n	800ad0e <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800ace4:	f107 0314 	add.w	r3, r7, #20
 800ace8:	3304      	adds	r3, #4
 800acea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800acec:	4619      	mov	r1, r3
 800acee:	68b8      	ldr	r0, [r7, #8]
 800acf0:	f000 fca6 	bl	800b640 <xQueueReceive>
 800acf4:	4603      	mov	r3, r0
 800acf6:	2b01      	cmp	r3, #1
 800acf8:	d102      	bne.n	800ad00 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800acfa:	2310      	movs	r3, #16
 800acfc:	617b      	str	r3, [r7, #20]
 800acfe:	e006      	b.n	800ad0e <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800ad00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d101      	bne.n	800ad0a <osMessageGet+0xc6>
 800ad06:	2300      	movs	r3, #0
 800ad08:	e000      	b.n	800ad0c <osMessageGet+0xc8>
 800ad0a:	2340      	movs	r3, #64	; 0x40
 800ad0c:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	461c      	mov	r4, r3
 800ad12:	f107 0314 	add.w	r3, r7, #20
 800ad16:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ad1a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800ad1e:	68f8      	ldr	r0, [r7, #12]
 800ad20:	372c      	adds	r7, #44	; 0x2c
 800ad22:	46bd      	mov	sp, r7
 800ad24:	bd90      	pop	{r4, r7, pc}
 800ad26:	bf00      	nop
 800ad28:	e000ed04 	.word	0xe000ed04

0800ad2c <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 800ad2c:	b580      	push	{r7, lr}
 800ad2e:	b082      	sub	sp, #8
 800ad30:	af00      	add	r7, sp, #0
 800ad32:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800ad34:	f7ff fd22 	bl	800a77c <inHandlerMode>
 800ad38:	4603      	mov	r3, r0
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d004      	beq.n	800ad48 <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 800ad3e:	6878      	ldr	r0, [r7, #4]
 800ad40:	f000 ff08 	bl	800bb54 <uxQueueMessagesWaitingFromISR>
 800ad44:	4603      	mov	r3, r0
 800ad46:	e003      	b.n	800ad50 <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 800ad48:	6878      	ldr	r0, [r7, #4]
 800ad4a:	f000 fee5 	bl	800bb18 <uxQueueMessagesWaiting>
 800ad4e:	4603      	mov	r3, r0
  }
}
 800ad50:	4618      	mov	r0, r3
 800ad52:	3708      	adds	r7, #8
 800ad54:	46bd      	mov	sp, r7
 800ad56:	bd80      	pop	{r7, pc}

0800ad58 <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 800ad58:	b580      	push	{r7, lr}
 800ad5a:	b082      	sub	sp, #8
 800ad5c:	af00      	add	r7, sp, #0
 800ad5e:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800ad60:	f7ff fd0c 	bl	800a77c <inHandlerMode>
 800ad64:	4603      	mov	r3, r0
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d001      	beq.n	800ad6e <osMessageDelete+0x16>
    return osErrorISR;
 800ad6a:	2382      	movs	r3, #130	; 0x82
 800ad6c:	e003      	b.n	800ad76 <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 800ad6e:	6878      	ldr	r0, [r7, #4]
 800ad70:	f000 ff0e 	bl	800bb90 <vQueueDelete>

  return osOK; 
 800ad74:	2300      	movs	r3, #0
}
 800ad76:	4618      	mov	r0, r3
 800ad78:	3708      	adds	r7, #8
 800ad7a:	46bd      	mov	sp, r7
 800ad7c:	bd80      	pop	{r7, pc}

0800ad7e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800ad7e:	b480      	push	{r7}
 800ad80:	b083      	sub	sp, #12
 800ad82:	af00      	add	r7, sp, #0
 800ad84:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	f103 0208 	add.w	r2, r3, #8
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	f04f 32ff 	mov.w	r2, #4294967295
 800ad96:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	f103 0208 	add.w	r2, r3, #8
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	f103 0208 	add.w	r2, r3, #8
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	2200      	movs	r2, #0
 800adb0:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800adb2:	bf00      	nop
 800adb4:	370c      	adds	r7, #12
 800adb6:	46bd      	mov	sp, r7
 800adb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adbc:	4770      	bx	lr

0800adbe <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800adbe:	b480      	push	{r7}
 800adc0:	b083      	sub	sp, #12
 800adc2:	af00      	add	r7, sp, #0
 800adc4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	2200      	movs	r2, #0
 800adca:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800adcc:	bf00      	nop
 800adce:	370c      	adds	r7, #12
 800add0:	46bd      	mov	sp, r7
 800add2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add6:	4770      	bx	lr

0800add8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800add8:	b480      	push	{r7}
 800adda:	b085      	sub	sp, #20
 800addc:	af00      	add	r7, sp, #0
 800adde:	6078      	str	r0, [r7, #4]
 800ade0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	685b      	ldr	r3, [r3, #4]
 800ade6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ade8:	683b      	ldr	r3, [r7, #0]
 800adea:	68fa      	ldr	r2, [r7, #12]
 800adec:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	689a      	ldr	r2, [r3, #8]
 800adf2:	683b      	ldr	r3, [r7, #0]
 800adf4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	689b      	ldr	r3, [r3, #8]
 800adfa:	683a      	ldr	r2, [r7, #0]
 800adfc:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	683a      	ldr	r2, [r7, #0]
 800ae02:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800ae04:	683b      	ldr	r3, [r7, #0]
 800ae06:	687a      	ldr	r2, [r7, #4]
 800ae08:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	1c5a      	adds	r2, r3, #1
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	601a      	str	r2, [r3, #0]
}
 800ae14:	bf00      	nop
 800ae16:	3714      	adds	r7, #20
 800ae18:	46bd      	mov	sp, r7
 800ae1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae1e:	4770      	bx	lr

0800ae20 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ae20:	b480      	push	{r7}
 800ae22:	b085      	sub	sp, #20
 800ae24:	af00      	add	r7, sp, #0
 800ae26:	6078      	str	r0, [r7, #4]
 800ae28:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ae2a:	683b      	ldr	r3, [r7, #0]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ae30:	68bb      	ldr	r3, [r7, #8]
 800ae32:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae36:	d103      	bne.n	800ae40 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	691b      	ldr	r3, [r3, #16]
 800ae3c:	60fb      	str	r3, [r7, #12]
 800ae3e:	e00c      	b.n	800ae5a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	3308      	adds	r3, #8
 800ae44:	60fb      	str	r3, [r7, #12]
 800ae46:	e002      	b.n	800ae4e <vListInsert+0x2e>
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	685b      	ldr	r3, [r3, #4]
 800ae4c:	60fb      	str	r3, [r7, #12]
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	685b      	ldr	r3, [r3, #4]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	68ba      	ldr	r2, [r7, #8]
 800ae56:	429a      	cmp	r2, r3
 800ae58:	d2f6      	bcs.n	800ae48 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	685a      	ldr	r2, [r3, #4]
 800ae5e:	683b      	ldr	r3, [r7, #0]
 800ae60:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ae62:	683b      	ldr	r3, [r7, #0]
 800ae64:	685b      	ldr	r3, [r3, #4]
 800ae66:	683a      	ldr	r2, [r7, #0]
 800ae68:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ae6a:	683b      	ldr	r3, [r7, #0]
 800ae6c:	68fa      	ldr	r2, [r7, #12]
 800ae6e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	683a      	ldr	r2, [r7, #0]
 800ae74:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800ae76:	683b      	ldr	r3, [r7, #0]
 800ae78:	687a      	ldr	r2, [r7, #4]
 800ae7a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	1c5a      	adds	r2, r3, #1
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	601a      	str	r2, [r3, #0]
}
 800ae86:	bf00      	nop
 800ae88:	3714      	adds	r7, #20
 800ae8a:	46bd      	mov	sp, r7
 800ae8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae90:	4770      	bx	lr

0800ae92 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ae92:	b480      	push	{r7}
 800ae94:	b085      	sub	sp, #20
 800ae96:	af00      	add	r7, sp, #0
 800ae98:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	691b      	ldr	r3, [r3, #16]
 800ae9e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	685b      	ldr	r3, [r3, #4]
 800aea4:	687a      	ldr	r2, [r7, #4]
 800aea6:	6892      	ldr	r2, [r2, #8]
 800aea8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	689b      	ldr	r3, [r3, #8]
 800aeae:	687a      	ldr	r2, [r7, #4]
 800aeb0:	6852      	ldr	r2, [r2, #4]
 800aeb2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	685b      	ldr	r3, [r3, #4]
 800aeb8:	687a      	ldr	r2, [r7, #4]
 800aeba:	429a      	cmp	r2, r3
 800aebc:	d103      	bne.n	800aec6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	689a      	ldr	r2, [r3, #8]
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	2200      	movs	r2, #0
 800aeca:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	1e5a      	subs	r2, r3, #1
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	681b      	ldr	r3, [r3, #0]
}
 800aeda:	4618      	mov	r0, r3
 800aedc:	3714      	adds	r7, #20
 800aede:	46bd      	mov	sp, r7
 800aee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee4:	4770      	bx	lr
	...

0800aee8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800aee8:	b580      	push	{r7, lr}
 800aeea:	b084      	sub	sp, #16
 800aeec:	af00      	add	r7, sp, #0
 800aeee:	6078      	str	r0, [r7, #4]
 800aef0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d10a      	bne.n	800af12 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800aefc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af00:	f383 8811 	msr	BASEPRI, r3
 800af04:	f3bf 8f6f 	isb	sy
 800af08:	f3bf 8f4f 	dsb	sy
 800af0c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800af0e:	bf00      	nop
 800af10:	e7fe      	b.n	800af10 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800af12:	f002 f977 	bl	800d204 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	681a      	ldr	r2, [r3, #0]
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af1e:	68f9      	ldr	r1, [r7, #12]
 800af20:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800af22:	fb01 f303 	mul.w	r3, r1, r3
 800af26:	441a      	add	r2, r3
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	2200      	movs	r2, #0
 800af30:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	681a      	ldr	r2, [r3, #0]
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	681a      	ldr	r2, [r3, #0]
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af42:	3b01      	subs	r3, #1
 800af44:	68f9      	ldr	r1, [r7, #12]
 800af46:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800af48:	fb01 f303 	mul.w	r3, r1, r3
 800af4c:	441a      	add	r2, r3
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	22ff      	movs	r2, #255	; 0xff
 800af56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	22ff      	movs	r2, #255	; 0xff
 800af5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800af62:	683b      	ldr	r3, [r7, #0]
 800af64:	2b00      	cmp	r3, #0
 800af66:	d114      	bne.n	800af92 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	691b      	ldr	r3, [r3, #16]
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d01a      	beq.n	800afa6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	3310      	adds	r3, #16
 800af74:	4618      	mov	r0, r3
 800af76:	f001 fc3d 	bl	800c7f4 <xTaskRemoveFromEventList>
 800af7a:	4603      	mov	r3, r0
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d012      	beq.n	800afa6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800af80:	4b0c      	ldr	r3, [pc, #48]	; (800afb4 <xQueueGenericReset+0xcc>)
 800af82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af86:	601a      	str	r2, [r3, #0]
 800af88:	f3bf 8f4f 	dsb	sy
 800af8c:	f3bf 8f6f 	isb	sy
 800af90:	e009      	b.n	800afa6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	3310      	adds	r3, #16
 800af96:	4618      	mov	r0, r3
 800af98:	f7ff fef1 	bl	800ad7e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	3324      	adds	r3, #36	; 0x24
 800afa0:	4618      	mov	r0, r3
 800afa2:	f7ff feec 	bl	800ad7e <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800afa6:	f002 f95d 	bl	800d264 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800afaa:	2301      	movs	r3, #1
}
 800afac:	4618      	mov	r0, r3
 800afae:	3710      	adds	r7, #16
 800afb0:	46bd      	mov	sp, r7
 800afb2:	bd80      	pop	{r7, pc}
 800afb4:	e000ed04 	.word	0xe000ed04

0800afb8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800afb8:	b580      	push	{r7, lr}
 800afba:	b08e      	sub	sp, #56	; 0x38
 800afbc:	af02      	add	r7, sp, #8
 800afbe:	60f8      	str	r0, [r7, #12]
 800afc0:	60b9      	str	r1, [r7, #8]
 800afc2:	607a      	str	r2, [r7, #4]
 800afc4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d10a      	bne.n	800afe2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800afcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afd0:	f383 8811 	msr	BASEPRI, r3
 800afd4:	f3bf 8f6f 	isb	sy
 800afd8:	f3bf 8f4f 	dsb	sy
 800afdc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800afde:	bf00      	nop
 800afe0:	e7fe      	b.n	800afe0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800afe2:	683b      	ldr	r3, [r7, #0]
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d10a      	bne.n	800affe <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800afe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afec:	f383 8811 	msr	BASEPRI, r3
 800aff0:	f3bf 8f6f 	isb	sy
 800aff4:	f3bf 8f4f 	dsb	sy
 800aff8:	627b      	str	r3, [r7, #36]	; 0x24
}
 800affa:	bf00      	nop
 800affc:	e7fe      	b.n	800affc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	2b00      	cmp	r3, #0
 800b002:	d002      	beq.n	800b00a <xQueueGenericCreateStatic+0x52>
 800b004:	68bb      	ldr	r3, [r7, #8]
 800b006:	2b00      	cmp	r3, #0
 800b008:	d001      	beq.n	800b00e <xQueueGenericCreateStatic+0x56>
 800b00a:	2301      	movs	r3, #1
 800b00c:	e000      	b.n	800b010 <xQueueGenericCreateStatic+0x58>
 800b00e:	2300      	movs	r3, #0
 800b010:	2b00      	cmp	r3, #0
 800b012:	d10a      	bne.n	800b02a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800b014:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b018:	f383 8811 	msr	BASEPRI, r3
 800b01c:	f3bf 8f6f 	isb	sy
 800b020:	f3bf 8f4f 	dsb	sy
 800b024:	623b      	str	r3, [r7, #32]
}
 800b026:	bf00      	nop
 800b028:	e7fe      	b.n	800b028 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d102      	bne.n	800b036 <xQueueGenericCreateStatic+0x7e>
 800b030:	68bb      	ldr	r3, [r7, #8]
 800b032:	2b00      	cmp	r3, #0
 800b034:	d101      	bne.n	800b03a <xQueueGenericCreateStatic+0x82>
 800b036:	2301      	movs	r3, #1
 800b038:	e000      	b.n	800b03c <xQueueGenericCreateStatic+0x84>
 800b03a:	2300      	movs	r3, #0
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d10a      	bne.n	800b056 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800b040:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b044:	f383 8811 	msr	BASEPRI, r3
 800b048:	f3bf 8f6f 	isb	sy
 800b04c:	f3bf 8f4f 	dsb	sy
 800b050:	61fb      	str	r3, [r7, #28]
}
 800b052:	bf00      	nop
 800b054:	e7fe      	b.n	800b054 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b056:	2348      	movs	r3, #72	; 0x48
 800b058:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b05a:	697b      	ldr	r3, [r7, #20]
 800b05c:	2b48      	cmp	r3, #72	; 0x48
 800b05e:	d00a      	beq.n	800b076 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800b060:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b064:	f383 8811 	msr	BASEPRI, r3
 800b068:	f3bf 8f6f 	isb	sy
 800b06c:	f3bf 8f4f 	dsb	sy
 800b070:	61bb      	str	r3, [r7, #24]
}
 800b072:	bf00      	nop
 800b074:	e7fe      	b.n	800b074 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b076:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b078:	683b      	ldr	r3, [r7, #0]
 800b07a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800b07c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d00d      	beq.n	800b09e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b084:	2201      	movs	r2, #1
 800b086:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b08a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800b08e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b090:	9300      	str	r3, [sp, #0]
 800b092:	4613      	mov	r3, r2
 800b094:	687a      	ldr	r2, [r7, #4]
 800b096:	68b9      	ldr	r1, [r7, #8]
 800b098:	68f8      	ldr	r0, [r7, #12]
 800b09a:	f000 f83f 	bl	800b11c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b09e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800b0a0:	4618      	mov	r0, r3
 800b0a2:	3730      	adds	r7, #48	; 0x30
 800b0a4:	46bd      	mov	sp, r7
 800b0a6:	bd80      	pop	{r7, pc}

0800b0a8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b0a8:	b580      	push	{r7, lr}
 800b0aa:	b08a      	sub	sp, #40	; 0x28
 800b0ac:	af02      	add	r7, sp, #8
 800b0ae:	60f8      	str	r0, [r7, #12]
 800b0b0:	60b9      	str	r1, [r7, #8]
 800b0b2:	4613      	mov	r3, r2
 800b0b4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d10a      	bne.n	800b0d2 <xQueueGenericCreate+0x2a>
	__asm volatile
 800b0bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0c0:	f383 8811 	msr	BASEPRI, r3
 800b0c4:	f3bf 8f6f 	isb	sy
 800b0c8:	f3bf 8f4f 	dsb	sy
 800b0cc:	613b      	str	r3, [r7, #16]
}
 800b0ce:	bf00      	nop
 800b0d0:	e7fe      	b.n	800b0d0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	68ba      	ldr	r2, [r7, #8]
 800b0d6:	fb02 f303 	mul.w	r3, r2, r3
 800b0da:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b0dc:	69fb      	ldr	r3, [r7, #28]
 800b0de:	3348      	adds	r3, #72	; 0x48
 800b0e0:	4618      	mov	r0, r3
 800b0e2:	f002 f9b1 	bl	800d448 <pvPortMalloc>
 800b0e6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800b0e8:	69bb      	ldr	r3, [r7, #24]
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d011      	beq.n	800b112 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800b0ee:	69bb      	ldr	r3, [r7, #24]
 800b0f0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b0f2:	697b      	ldr	r3, [r7, #20]
 800b0f4:	3348      	adds	r3, #72	; 0x48
 800b0f6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b0f8:	69bb      	ldr	r3, [r7, #24]
 800b0fa:	2200      	movs	r2, #0
 800b0fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b100:	79fa      	ldrb	r2, [r7, #7]
 800b102:	69bb      	ldr	r3, [r7, #24]
 800b104:	9300      	str	r3, [sp, #0]
 800b106:	4613      	mov	r3, r2
 800b108:	697a      	ldr	r2, [r7, #20]
 800b10a:	68b9      	ldr	r1, [r7, #8]
 800b10c:	68f8      	ldr	r0, [r7, #12]
 800b10e:	f000 f805 	bl	800b11c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b112:	69bb      	ldr	r3, [r7, #24]
	}
 800b114:	4618      	mov	r0, r3
 800b116:	3720      	adds	r7, #32
 800b118:	46bd      	mov	sp, r7
 800b11a:	bd80      	pop	{r7, pc}

0800b11c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b11c:	b580      	push	{r7, lr}
 800b11e:	b084      	sub	sp, #16
 800b120:	af00      	add	r7, sp, #0
 800b122:	60f8      	str	r0, [r7, #12]
 800b124:	60b9      	str	r1, [r7, #8]
 800b126:	607a      	str	r2, [r7, #4]
 800b128:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b12a:	68bb      	ldr	r3, [r7, #8]
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d103      	bne.n	800b138 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b130:	69bb      	ldr	r3, [r7, #24]
 800b132:	69ba      	ldr	r2, [r7, #24]
 800b134:	601a      	str	r2, [r3, #0]
 800b136:	e002      	b.n	800b13e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b138:	69bb      	ldr	r3, [r7, #24]
 800b13a:	687a      	ldr	r2, [r7, #4]
 800b13c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b13e:	69bb      	ldr	r3, [r7, #24]
 800b140:	68fa      	ldr	r2, [r7, #12]
 800b142:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b144:	69bb      	ldr	r3, [r7, #24]
 800b146:	68ba      	ldr	r2, [r7, #8]
 800b148:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b14a:	2101      	movs	r1, #1
 800b14c:	69b8      	ldr	r0, [r7, #24]
 800b14e:	f7ff fecb 	bl	800aee8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b152:	bf00      	nop
 800b154:	3710      	adds	r7, #16
 800b156:	46bd      	mov	sp, r7
 800b158:	bd80      	pop	{r7, pc}

0800b15a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800b15a:	b580      	push	{r7, lr}
 800b15c:	b082      	sub	sp, #8
 800b15e:	af00      	add	r7, sp, #0
 800b160:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	2b00      	cmp	r3, #0
 800b166:	d00e      	beq.n	800b186 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	2200      	movs	r2, #0
 800b16c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	2200      	movs	r2, #0
 800b172:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	2200      	movs	r2, #0
 800b178:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800b17a:	2300      	movs	r3, #0
 800b17c:	2200      	movs	r2, #0
 800b17e:	2100      	movs	r1, #0
 800b180:	6878      	ldr	r0, [r7, #4]
 800b182:	f000 f837 	bl	800b1f4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800b186:	bf00      	nop
 800b188:	3708      	adds	r7, #8
 800b18a:	46bd      	mov	sp, r7
 800b18c:	bd80      	pop	{r7, pc}

0800b18e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800b18e:	b580      	push	{r7, lr}
 800b190:	b086      	sub	sp, #24
 800b192:	af00      	add	r7, sp, #0
 800b194:	4603      	mov	r3, r0
 800b196:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800b198:	2301      	movs	r3, #1
 800b19a:	617b      	str	r3, [r7, #20]
 800b19c:	2300      	movs	r3, #0
 800b19e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800b1a0:	79fb      	ldrb	r3, [r7, #7]
 800b1a2:	461a      	mov	r2, r3
 800b1a4:	6939      	ldr	r1, [r7, #16]
 800b1a6:	6978      	ldr	r0, [r7, #20]
 800b1a8:	f7ff ff7e 	bl	800b0a8 <xQueueGenericCreate>
 800b1ac:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800b1ae:	68f8      	ldr	r0, [r7, #12]
 800b1b0:	f7ff ffd3 	bl	800b15a <prvInitialiseMutex>

		return xNewQueue;
 800b1b4:	68fb      	ldr	r3, [r7, #12]
	}
 800b1b6:	4618      	mov	r0, r3
 800b1b8:	3718      	adds	r7, #24
 800b1ba:	46bd      	mov	sp, r7
 800b1bc:	bd80      	pop	{r7, pc}

0800b1be <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800b1be:	b580      	push	{r7, lr}
 800b1c0:	b088      	sub	sp, #32
 800b1c2:	af02      	add	r7, sp, #8
 800b1c4:	4603      	mov	r3, r0
 800b1c6:	6039      	str	r1, [r7, #0]
 800b1c8:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800b1ca:	2301      	movs	r3, #1
 800b1cc:	617b      	str	r3, [r7, #20]
 800b1ce:	2300      	movs	r3, #0
 800b1d0:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800b1d2:	79fb      	ldrb	r3, [r7, #7]
 800b1d4:	9300      	str	r3, [sp, #0]
 800b1d6:	683b      	ldr	r3, [r7, #0]
 800b1d8:	2200      	movs	r2, #0
 800b1da:	6939      	ldr	r1, [r7, #16]
 800b1dc:	6978      	ldr	r0, [r7, #20]
 800b1de:	f7ff feeb 	bl	800afb8 <xQueueGenericCreateStatic>
 800b1e2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800b1e4:	68f8      	ldr	r0, [r7, #12]
 800b1e6:	f7ff ffb8 	bl	800b15a <prvInitialiseMutex>

		return xNewQueue;
 800b1ea:	68fb      	ldr	r3, [r7, #12]
	}
 800b1ec:	4618      	mov	r0, r3
 800b1ee:	3718      	adds	r7, #24
 800b1f0:	46bd      	mov	sp, r7
 800b1f2:	bd80      	pop	{r7, pc}

0800b1f4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b1f4:	b580      	push	{r7, lr}
 800b1f6:	b08e      	sub	sp, #56	; 0x38
 800b1f8:	af00      	add	r7, sp, #0
 800b1fa:	60f8      	str	r0, [r7, #12]
 800b1fc:	60b9      	str	r1, [r7, #8]
 800b1fe:	607a      	str	r2, [r7, #4]
 800b200:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b202:	2300      	movs	r3, #0
 800b204:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b20a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d10a      	bne.n	800b226 <xQueueGenericSend+0x32>
	__asm volatile
 800b210:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b214:	f383 8811 	msr	BASEPRI, r3
 800b218:	f3bf 8f6f 	isb	sy
 800b21c:	f3bf 8f4f 	dsb	sy
 800b220:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b222:	bf00      	nop
 800b224:	e7fe      	b.n	800b224 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b226:	68bb      	ldr	r3, [r7, #8]
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d103      	bne.n	800b234 <xQueueGenericSend+0x40>
 800b22c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b22e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b230:	2b00      	cmp	r3, #0
 800b232:	d101      	bne.n	800b238 <xQueueGenericSend+0x44>
 800b234:	2301      	movs	r3, #1
 800b236:	e000      	b.n	800b23a <xQueueGenericSend+0x46>
 800b238:	2300      	movs	r3, #0
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d10a      	bne.n	800b254 <xQueueGenericSend+0x60>
	__asm volatile
 800b23e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b242:	f383 8811 	msr	BASEPRI, r3
 800b246:	f3bf 8f6f 	isb	sy
 800b24a:	f3bf 8f4f 	dsb	sy
 800b24e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b250:	bf00      	nop
 800b252:	e7fe      	b.n	800b252 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b254:	683b      	ldr	r3, [r7, #0]
 800b256:	2b02      	cmp	r3, #2
 800b258:	d103      	bne.n	800b262 <xQueueGenericSend+0x6e>
 800b25a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b25c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b25e:	2b01      	cmp	r3, #1
 800b260:	d101      	bne.n	800b266 <xQueueGenericSend+0x72>
 800b262:	2301      	movs	r3, #1
 800b264:	e000      	b.n	800b268 <xQueueGenericSend+0x74>
 800b266:	2300      	movs	r3, #0
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d10a      	bne.n	800b282 <xQueueGenericSend+0x8e>
	__asm volatile
 800b26c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b270:	f383 8811 	msr	BASEPRI, r3
 800b274:	f3bf 8f6f 	isb	sy
 800b278:	f3bf 8f4f 	dsb	sy
 800b27c:	623b      	str	r3, [r7, #32]
}
 800b27e:	bf00      	nop
 800b280:	e7fe      	b.n	800b280 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b282:	f001 fc73 	bl	800cb6c <xTaskGetSchedulerState>
 800b286:	4603      	mov	r3, r0
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d102      	bne.n	800b292 <xQueueGenericSend+0x9e>
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d101      	bne.n	800b296 <xQueueGenericSend+0xa2>
 800b292:	2301      	movs	r3, #1
 800b294:	e000      	b.n	800b298 <xQueueGenericSend+0xa4>
 800b296:	2300      	movs	r3, #0
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d10a      	bne.n	800b2b2 <xQueueGenericSend+0xbe>
	__asm volatile
 800b29c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2a0:	f383 8811 	msr	BASEPRI, r3
 800b2a4:	f3bf 8f6f 	isb	sy
 800b2a8:	f3bf 8f4f 	dsb	sy
 800b2ac:	61fb      	str	r3, [r7, #28]
}
 800b2ae:	bf00      	nop
 800b2b0:	e7fe      	b.n	800b2b0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b2b2:	f001 ffa7 	bl	800d204 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b2b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b2ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b2be:	429a      	cmp	r2, r3
 800b2c0:	d302      	bcc.n	800b2c8 <xQueueGenericSend+0xd4>
 800b2c2:	683b      	ldr	r3, [r7, #0]
 800b2c4:	2b02      	cmp	r3, #2
 800b2c6:	d129      	bne.n	800b31c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b2c8:	683a      	ldr	r2, [r7, #0]
 800b2ca:	68b9      	ldr	r1, [r7, #8]
 800b2cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b2ce:	f000 fc9a 	bl	800bc06 <prvCopyDataToQueue>
 800b2d2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b2d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d010      	beq.n	800b2fe <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b2dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2de:	3324      	adds	r3, #36	; 0x24
 800b2e0:	4618      	mov	r0, r3
 800b2e2:	f001 fa87 	bl	800c7f4 <xTaskRemoveFromEventList>
 800b2e6:	4603      	mov	r3, r0
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d013      	beq.n	800b314 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b2ec:	4b3f      	ldr	r3, [pc, #252]	; (800b3ec <xQueueGenericSend+0x1f8>)
 800b2ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b2f2:	601a      	str	r2, [r3, #0]
 800b2f4:	f3bf 8f4f 	dsb	sy
 800b2f8:	f3bf 8f6f 	isb	sy
 800b2fc:	e00a      	b.n	800b314 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b2fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b300:	2b00      	cmp	r3, #0
 800b302:	d007      	beq.n	800b314 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b304:	4b39      	ldr	r3, [pc, #228]	; (800b3ec <xQueueGenericSend+0x1f8>)
 800b306:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b30a:	601a      	str	r2, [r3, #0]
 800b30c:	f3bf 8f4f 	dsb	sy
 800b310:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b314:	f001 ffa6 	bl	800d264 <vPortExitCritical>
				return pdPASS;
 800b318:	2301      	movs	r3, #1
 800b31a:	e063      	b.n	800b3e4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d103      	bne.n	800b32a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b322:	f001 ff9f 	bl	800d264 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b326:	2300      	movs	r3, #0
 800b328:	e05c      	b.n	800b3e4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b32a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d106      	bne.n	800b33e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b330:	f107 0314 	add.w	r3, r7, #20
 800b334:	4618      	mov	r0, r3
 800b336:	f001 fabf 	bl	800c8b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b33a:	2301      	movs	r3, #1
 800b33c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b33e:	f001 ff91 	bl	800d264 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b342:	f001 f853 	bl	800c3ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b346:	f001 ff5d 	bl	800d204 <vPortEnterCritical>
 800b34a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b34c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b350:	b25b      	sxtb	r3, r3
 800b352:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b356:	d103      	bne.n	800b360 <xQueueGenericSend+0x16c>
 800b358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b35a:	2200      	movs	r2, #0
 800b35c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b362:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b366:	b25b      	sxtb	r3, r3
 800b368:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b36c:	d103      	bne.n	800b376 <xQueueGenericSend+0x182>
 800b36e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b370:	2200      	movs	r2, #0
 800b372:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b376:	f001 ff75 	bl	800d264 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b37a:	1d3a      	adds	r2, r7, #4
 800b37c:	f107 0314 	add.w	r3, r7, #20
 800b380:	4611      	mov	r1, r2
 800b382:	4618      	mov	r0, r3
 800b384:	f001 faae 	bl	800c8e4 <xTaskCheckForTimeOut>
 800b388:	4603      	mov	r3, r0
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d124      	bne.n	800b3d8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b38e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b390:	f000 fd31 	bl	800bdf6 <prvIsQueueFull>
 800b394:	4603      	mov	r3, r0
 800b396:	2b00      	cmp	r3, #0
 800b398:	d018      	beq.n	800b3cc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b39a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b39c:	3310      	adds	r3, #16
 800b39e:	687a      	ldr	r2, [r7, #4]
 800b3a0:	4611      	mov	r1, r2
 800b3a2:	4618      	mov	r0, r3
 800b3a4:	f001 fa02 	bl	800c7ac <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b3a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b3aa:	f000 fcbc 	bl	800bd26 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b3ae:	f001 f82b 	bl	800c408 <xTaskResumeAll>
 800b3b2:	4603      	mov	r3, r0
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	f47f af7c 	bne.w	800b2b2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800b3ba:	4b0c      	ldr	r3, [pc, #48]	; (800b3ec <xQueueGenericSend+0x1f8>)
 800b3bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b3c0:	601a      	str	r2, [r3, #0]
 800b3c2:	f3bf 8f4f 	dsb	sy
 800b3c6:	f3bf 8f6f 	isb	sy
 800b3ca:	e772      	b.n	800b2b2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b3cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b3ce:	f000 fcaa 	bl	800bd26 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b3d2:	f001 f819 	bl	800c408 <xTaskResumeAll>
 800b3d6:	e76c      	b.n	800b2b2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b3d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b3da:	f000 fca4 	bl	800bd26 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b3de:	f001 f813 	bl	800c408 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b3e2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b3e4:	4618      	mov	r0, r3
 800b3e6:	3738      	adds	r7, #56	; 0x38
 800b3e8:	46bd      	mov	sp, r7
 800b3ea:	bd80      	pop	{r7, pc}
 800b3ec:	e000ed04 	.word	0xe000ed04

0800b3f0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b3f0:	b580      	push	{r7, lr}
 800b3f2:	b090      	sub	sp, #64	; 0x40
 800b3f4:	af00      	add	r7, sp, #0
 800b3f6:	60f8      	str	r0, [r7, #12]
 800b3f8:	60b9      	str	r1, [r7, #8]
 800b3fa:	607a      	str	r2, [r7, #4]
 800b3fc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800b402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b404:	2b00      	cmp	r3, #0
 800b406:	d10a      	bne.n	800b41e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800b408:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b40c:	f383 8811 	msr	BASEPRI, r3
 800b410:	f3bf 8f6f 	isb	sy
 800b414:	f3bf 8f4f 	dsb	sy
 800b418:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b41a:	bf00      	nop
 800b41c:	e7fe      	b.n	800b41c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b41e:	68bb      	ldr	r3, [r7, #8]
 800b420:	2b00      	cmp	r3, #0
 800b422:	d103      	bne.n	800b42c <xQueueGenericSendFromISR+0x3c>
 800b424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d101      	bne.n	800b430 <xQueueGenericSendFromISR+0x40>
 800b42c:	2301      	movs	r3, #1
 800b42e:	e000      	b.n	800b432 <xQueueGenericSendFromISR+0x42>
 800b430:	2300      	movs	r3, #0
 800b432:	2b00      	cmp	r3, #0
 800b434:	d10a      	bne.n	800b44c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800b436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b43a:	f383 8811 	msr	BASEPRI, r3
 800b43e:	f3bf 8f6f 	isb	sy
 800b442:	f3bf 8f4f 	dsb	sy
 800b446:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b448:	bf00      	nop
 800b44a:	e7fe      	b.n	800b44a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b44c:	683b      	ldr	r3, [r7, #0]
 800b44e:	2b02      	cmp	r3, #2
 800b450:	d103      	bne.n	800b45a <xQueueGenericSendFromISR+0x6a>
 800b452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b454:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b456:	2b01      	cmp	r3, #1
 800b458:	d101      	bne.n	800b45e <xQueueGenericSendFromISR+0x6e>
 800b45a:	2301      	movs	r3, #1
 800b45c:	e000      	b.n	800b460 <xQueueGenericSendFromISR+0x70>
 800b45e:	2300      	movs	r3, #0
 800b460:	2b00      	cmp	r3, #0
 800b462:	d10a      	bne.n	800b47a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800b464:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b468:	f383 8811 	msr	BASEPRI, r3
 800b46c:	f3bf 8f6f 	isb	sy
 800b470:	f3bf 8f4f 	dsb	sy
 800b474:	623b      	str	r3, [r7, #32]
}
 800b476:	bf00      	nop
 800b478:	e7fe      	b.n	800b478 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b47a:	f001 ffa5 	bl	800d3c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b47e:	f3ef 8211 	mrs	r2, BASEPRI
 800b482:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b486:	f383 8811 	msr	BASEPRI, r3
 800b48a:	f3bf 8f6f 	isb	sy
 800b48e:	f3bf 8f4f 	dsb	sy
 800b492:	61fa      	str	r2, [r7, #28]
 800b494:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b496:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b498:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b49a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b49c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b49e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b4a2:	429a      	cmp	r2, r3
 800b4a4:	d302      	bcc.n	800b4ac <xQueueGenericSendFromISR+0xbc>
 800b4a6:	683b      	ldr	r3, [r7, #0]
 800b4a8:	2b02      	cmp	r3, #2
 800b4aa:	d12f      	bne.n	800b50c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b4ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b4b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b4b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4ba:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b4bc:	683a      	ldr	r2, [r7, #0]
 800b4be:	68b9      	ldr	r1, [r7, #8]
 800b4c0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b4c2:	f000 fba0 	bl	800bc06 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b4c6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800b4ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4ce:	d112      	bne.n	800b4f6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b4d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d016      	beq.n	800b506 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b4d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4da:	3324      	adds	r3, #36	; 0x24
 800b4dc:	4618      	mov	r0, r3
 800b4de:	f001 f989 	bl	800c7f4 <xTaskRemoveFromEventList>
 800b4e2:	4603      	mov	r3, r0
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d00e      	beq.n	800b506 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d00b      	beq.n	800b506 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	2201      	movs	r2, #1
 800b4f2:	601a      	str	r2, [r3, #0]
 800b4f4:	e007      	b.n	800b506 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b4f6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b4fa:	3301      	adds	r3, #1
 800b4fc:	b2db      	uxtb	r3, r3
 800b4fe:	b25a      	sxtb	r2, r3
 800b500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b502:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b506:	2301      	movs	r3, #1
 800b508:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800b50a:	e001      	b.n	800b510 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b50c:	2300      	movs	r3, #0
 800b50e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b510:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b512:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b514:	697b      	ldr	r3, [r7, #20]
 800b516:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b51a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b51c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800b51e:	4618      	mov	r0, r3
 800b520:	3740      	adds	r7, #64	; 0x40
 800b522:	46bd      	mov	sp, r7
 800b524:	bd80      	pop	{r7, pc}

0800b526 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b526:	b580      	push	{r7, lr}
 800b528:	b08e      	sub	sp, #56	; 0x38
 800b52a:	af00      	add	r7, sp, #0
 800b52c:	6078      	str	r0, [r7, #4]
 800b52e:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800b534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b536:	2b00      	cmp	r3, #0
 800b538:	d10a      	bne.n	800b550 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800b53a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b53e:	f383 8811 	msr	BASEPRI, r3
 800b542:	f3bf 8f6f 	isb	sy
 800b546:	f3bf 8f4f 	dsb	sy
 800b54a:	623b      	str	r3, [r7, #32]
}
 800b54c:	bf00      	nop
 800b54e:	e7fe      	b.n	800b54e <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800b550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b554:	2b00      	cmp	r3, #0
 800b556:	d00a      	beq.n	800b56e <xQueueGiveFromISR+0x48>
	__asm volatile
 800b558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b55c:	f383 8811 	msr	BASEPRI, r3
 800b560:	f3bf 8f6f 	isb	sy
 800b564:	f3bf 8f4f 	dsb	sy
 800b568:	61fb      	str	r3, [r7, #28]
}
 800b56a:	bf00      	nop
 800b56c:	e7fe      	b.n	800b56c <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800b56e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	2b00      	cmp	r3, #0
 800b574:	d103      	bne.n	800b57e <xQueueGiveFromISR+0x58>
 800b576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b578:	689b      	ldr	r3, [r3, #8]
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d101      	bne.n	800b582 <xQueueGiveFromISR+0x5c>
 800b57e:	2301      	movs	r3, #1
 800b580:	e000      	b.n	800b584 <xQueueGiveFromISR+0x5e>
 800b582:	2300      	movs	r3, #0
 800b584:	2b00      	cmp	r3, #0
 800b586:	d10a      	bne.n	800b59e <xQueueGiveFromISR+0x78>
	__asm volatile
 800b588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b58c:	f383 8811 	msr	BASEPRI, r3
 800b590:	f3bf 8f6f 	isb	sy
 800b594:	f3bf 8f4f 	dsb	sy
 800b598:	61bb      	str	r3, [r7, #24]
}
 800b59a:	bf00      	nop
 800b59c:	e7fe      	b.n	800b59c <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b59e:	f001 ff13 	bl	800d3c8 <vPortValidateInterruptPriority>
	__asm volatile
 800b5a2:	f3ef 8211 	mrs	r2, BASEPRI
 800b5a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5aa:	f383 8811 	msr	BASEPRI, r3
 800b5ae:	f3bf 8f6f 	isb	sy
 800b5b2:	f3bf 8f4f 	dsb	sy
 800b5b6:	617a      	str	r2, [r7, #20]
 800b5b8:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800b5ba:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b5bc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b5be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5c2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800b5c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b5c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b5ca:	429a      	cmp	r2, r3
 800b5cc:	d22b      	bcs.n	800b626 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b5ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b5d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b5d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5da:	1c5a      	adds	r2, r3, #1
 800b5dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5de:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b5e0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b5e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5e8:	d112      	bne.n	800b610 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b5ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d016      	beq.n	800b620 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b5f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5f4:	3324      	adds	r3, #36	; 0x24
 800b5f6:	4618      	mov	r0, r3
 800b5f8:	f001 f8fc 	bl	800c7f4 <xTaskRemoveFromEventList>
 800b5fc:	4603      	mov	r3, r0
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d00e      	beq.n	800b620 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b602:	683b      	ldr	r3, [r7, #0]
 800b604:	2b00      	cmp	r3, #0
 800b606:	d00b      	beq.n	800b620 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b608:	683b      	ldr	r3, [r7, #0]
 800b60a:	2201      	movs	r2, #1
 800b60c:	601a      	str	r2, [r3, #0]
 800b60e:	e007      	b.n	800b620 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b610:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b614:	3301      	adds	r3, #1
 800b616:	b2db      	uxtb	r3, r3
 800b618:	b25a      	sxtb	r2, r3
 800b61a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b61c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b620:	2301      	movs	r3, #1
 800b622:	637b      	str	r3, [r7, #52]	; 0x34
 800b624:	e001      	b.n	800b62a <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b626:	2300      	movs	r3, #0
 800b628:	637b      	str	r3, [r7, #52]	; 0x34
 800b62a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b62c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	f383 8811 	msr	BASEPRI, r3
}
 800b634:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b636:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b638:	4618      	mov	r0, r3
 800b63a:	3738      	adds	r7, #56	; 0x38
 800b63c:	46bd      	mov	sp, r7
 800b63e:	bd80      	pop	{r7, pc}

0800b640 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b640:	b580      	push	{r7, lr}
 800b642:	b08c      	sub	sp, #48	; 0x30
 800b644:	af00      	add	r7, sp, #0
 800b646:	60f8      	str	r0, [r7, #12]
 800b648:	60b9      	str	r1, [r7, #8]
 800b64a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b64c:	2300      	movs	r3, #0
 800b64e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b656:	2b00      	cmp	r3, #0
 800b658:	d10a      	bne.n	800b670 <xQueueReceive+0x30>
	__asm volatile
 800b65a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b65e:	f383 8811 	msr	BASEPRI, r3
 800b662:	f3bf 8f6f 	isb	sy
 800b666:	f3bf 8f4f 	dsb	sy
 800b66a:	623b      	str	r3, [r7, #32]
}
 800b66c:	bf00      	nop
 800b66e:	e7fe      	b.n	800b66e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b670:	68bb      	ldr	r3, [r7, #8]
 800b672:	2b00      	cmp	r3, #0
 800b674:	d103      	bne.n	800b67e <xQueueReceive+0x3e>
 800b676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d101      	bne.n	800b682 <xQueueReceive+0x42>
 800b67e:	2301      	movs	r3, #1
 800b680:	e000      	b.n	800b684 <xQueueReceive+0x44>
 800b682:	2300      	movs	r3, #0
 800b684:	2b00      	cmp	r3, #0
 800b686:	d10a      	bne.n	800b69e <xQueueReceive+0x5e>
	__asm volatile
 800b688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b68c:	f383 8811 	msr	BASEPRI, r3
 800b690:	f3bf 8f6f 	isb	sy
 800b694:	f3bf 8f4f 	dsb	sy
 800b698:	61fb      	str	r3, [r7, #28]
}
 800b69a:	bf00      	nop
 800b69c:	e7fe      	b.n	800b69c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b69e:	f001 fa65 	bl	800cb6c <xTaskGetSchedulerState>
 800b6a2:	4603      	mov	r3, r0
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d102      	bne.n	800b6ae <xQueueReceive+0x6e>
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d101      	bne.n	800b6b2 <xQueueReceive+0x72>
 800b6ae:	2301      	movs	r3, #1
 800b6b0:	e000      	b.n	800b6b4 <xQueueReceive+0x74>
 800b6b2:	2300      	movs	r3, #0
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d10a      	bne.n	800b6ce <xQueueReceive+0x8e>
	__asm volatile
 800b6b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6bc:	f383 8811 	msr	BASEPRI, r3
 800b6c0:	f3bf 8f6f 	isb	sy
 800b6c4:	f3bf 8f4f 	dsb	sy
 800b6c8:	61bb      	str	r3, [r7, #24]
}
 800b6ca:	bf00      	nop
 800b6cc:	e7fe      	b.n	800b6cc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b6ce:	f001 fd99 	bl	800d204 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b6d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6d6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b6d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d01f      	beq.n	800b71e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b6de:	68b9      	ldr	r1, [r7, #8]
 800b6e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b6e2:	f000 fafa 	bl	800bcda <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b6e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6e8:	1e5a      	subs	r2, r3, #1
 800b6ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6ec:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b6ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6f0:	691b      	ldr	r3, [r3, #16]
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d00f      	beq.n	800b716 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b6f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6f8:	3310      	adds	r3, #16
 800b6fa:	4618      	mov	r0, r3
 800b6fc:	f001 f87a 	bl	800c7f4 <xTaskRemoveFromEventList>
 800b700:	4603      	mov	r3, r0
 800b702:	2b00      	cmp	r3, #0
 800b704:	d007      	beq.n	800b716 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b706:	4b3d      	ldr	r3, [pc, #244]	; (800b7fc <xQueueReceive+0x1bc>)
 800b708:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b70c:	601a      	str	r2, [r3, #0]
 800b70e:	f3bf 8f4f 	dsb	sy
 800b712:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b716:	f001 fda5 	bl	800d264 <vPortExitCritical>
				return pdPASS;
 800b71a:	2301      	movs	r3, #1
 800b71c:	e069      	b.n	800b7f2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	2b00      	cmp	r3, #0
 800b722:	d103      	bne.n	800b72c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b724:	f001 fd9e 	bl	800d264 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b728:	2300      	movs	r3, #0
 800b72a:	e062      	b.n	800b7f2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b72c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d106      	bne.n	800b740 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b732:	f107 0310 	add.w	r3, r7, #16
 800b736:	4618      	mov	r0, r3
 800b738:	f001 f8be 	bl	800c8b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b73c:	2301      	movs	r3, #1
 800b73e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b740:	f001 fd90 	bl	800d264 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b744:	f000 fe52 	bl	800c3ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b748:	f001 fd5c 	bl	800d204 <vPortEnterCritical>
 800b74c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b74e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b752:	b25b      	sxtb	r3, r3
 800b754:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b758:	d103      	bne.n	800b762 <xQueueReceive+0x122>
 800b75a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b75c:	2200      	movs	r2, #0
 800b75e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b764:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b768:	b25b      	sxtb	r3, r3
 800b76a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b76e:	d103      	bne.n	800b778 <xQueueReceive+0x138>
 800b770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b772:	2200      	movs	r2, #0
 800b774:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b778:	f001 fd74 	bl	800d264 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b77c:	1d3a      	adds	r2, r7, #4
 800b77e:	f107 0310 	add.w	r3, r7, #16
 800b782:	4611      	mov	r1, r2
 800b784:	4618      	mov	r0, r3
 800b786:	f001 f8ad 	bl	800c8e4 <xTaskCheckForTimeOut>
 800b78a:	4603      	mov	r3, r0
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d123      	bne.n	800b7d8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b790:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b792:	f000 fb1a 	bl	800bdca <prvIsQueueEmpty>
 800b796:	4603      	mov	r3, r0
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d017      	beq.n	800b7cc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b79c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b79e:	3324      	adds	r3, #36	; 0x24
 800b7a0:	687a      	ldr	r2, [r7, #4]
 800b7a2:	4611      	mov	r1, r2
 800b7a4:	4618      	mov	r0, r3
 800b7a6:	f001 f801 	bl	800c7ac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b7aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b7ac:	f000 fabb 	bl	800bd26 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b7b0:	f000 fe2a 	bl	800c408 <xTaskResumeAll>
 800b7b4:	4603      	mov	r3, r0
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d189      	bne.n	800b6ce <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800b7ba:	4b10      	ldr	r3, [pc, #64]	; (800b7fc <xQueueReceive+0x1bc>)
 800b7bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b7c0:	601a      	str	r2, [r3, #0]
 800b7c2:	f3bf 8f4f 	dsb	sy
 800b7c6:	f3bf 8f6f 	isb	sy
 800b7ca:	e780      	b.n	800b6ce <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b7cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b7ce:	f000 faaa 	bl	800bd26 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b7d2:	f000 fe19 	bl	800c408 <xTaskResumeAll>
 800b7d6:	e77a      	b.n	800b6ce <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b7d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b7da:	f000 faa4 	bl	800bd26 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b7de:	f000 fe13 	bl	800c408 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b7e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b7e4:	f000 faf1 	bl	800bdca <prvIsQueueEmpty>
 800b7e8:	4603      	mov	r3, r0
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	f43f af6f 	beq.w	800b6ce <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b7f0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b7f2:	4618      	mov	r0, r3
 800b7f4:	3730      	adds	r7, #48	; 0x30
 800b7f6:	46bd      	mov	sp, r7
 800b7f8:	bd80      	pop	{r7, pc}
 800b7fa:	bf00      	nop
 800b7fc:	e000ed04 	.word	0xe000ed04

0800b800 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800b800:	b580      	push	{r7, lr}
 800b802:	b08e      	sub	sp, #56	; 0x38
 800b804:	af00      	add	r7, sp, #0
 800b806:	6078      	str	r0, [r7, #4]
 800b808:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800b80a:	2300      	movs	r3, #0
 800b80c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800b812:	2300      	movs	r3, #0
 800b814:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d10a      	bne.n	800b832 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800b81c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b820:	f383 8811 	msr	BASEPRI, r3
 800b824:	f3bf 8f6f 	isb	sy
 800b828:	f3bf 8f4f 	dsb	sy
 800b82c:	623b      	str	r3, [r7, #32]
}
 800b82e:	bf00      	nop
 800b830:	e7fe      	b.n	800b830 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800b832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b836:	2b00      	cmp	r3, #0
 800b838:	d00a      	beq.n	800b850 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800b83a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b83e:	f383 8811 	msr	BASEPRI, r3
 800b842:	f3bf 8f6f 	isb	sy
 800b846:	f3bf 8f4f 	dsb	sy
 800b84a:	61fb      	str	r3, [r7, #28]
}
 800b84c:	bf00      	nop
 800b84e:	e7fe      	b.n	800b84e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b850:	f001 f98c 	bl	800cb6c <xTaskGetSchedulerState>
 800b854:	4603      	mov	r3, r0
 800b856:	2b00      	cmp	r3, #0
 800b858:	d102      	bne.n	800b860 <xQueueSemaphoreTake+0x60>
 800b85a:	683b      	ldr	r3, [r7, #0]
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d101      	bne.n	800b864 <xQueueSemaphoreTake+0x64>
 800b860:	2301      	movs	r3, #1
 800b862:	e000      	b.n	800b866 <xQueueSemaphoreTake+0x66>
 800b864:	2300      	movs	r3, #0
 800b866:	2b00      	cmp	r3, #0
 800b868:	d10a      	bne.n	800b880 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800b86a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b86e:	f383 8811 	msr	BASEPRI, r3
 800b872:	f3bf 8f6f 	isb	sy
 800b876:	f3bf 8f4f 	dsb	sy
 800b87a:	61bb      	str	r3, [r7, #24]
}
 800b87c:	bf00      	nop
 800b87e:	e7fe      	b.n	800b87e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b880:	f001 fcc0 	bl	800d204 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800b884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b888:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800b88a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d024      	beq.n	800b8da <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800b890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b892:	1e5a      	subs	r2, r3, #1
 800b894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b896:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d104      	bne.n	800b8aa <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800b8a0:	f001 fb0c 	bl	800cebc <pvTaskIncrementMutexHeldCount>
 800b8a4:	4602      	mov	r2, r0
 800b8a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8a8:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b8aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8ac:	691b      	ldr	r3, [r3, #16]
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d00f      	beq.n	800b8d2 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b8b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8b4:	3310      	adds	r3, #16
 800b8b6:	4618      	mov	r0, r3
 800b8b8:	f000 ff9c 	bl	800c7f4 <xTaskRemoveFromEventList>
 800b8bc:	4603      	mov	r3, r0
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d007      	beq.n	800b8d2 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b8c2:	4b54      	ldr	r3, [pc, #336]	; (800ba14 <xQueueSemaphoreTake+0x214>)
 800b8c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b8c8:	601a      	str	r2, [r3, #0]
 800b8ca:	f3bf 8f4f 	dsb	sy
 800b8ce:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b8d2:	f001 fcc7 	bl	800d264 <vPortExitCritical>
				return pdPASS;
 800b8d6:	2301      	movs	r3, #1
 800b8d8:	e097      	b.n	800ba0a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b8da:	683b      	ldr	r3, [r7, #0]
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d111      	bne.n	800b904 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800b8e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d00a      	beq.n	800b8fc <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800b8e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8ea:	f383 8811 	msr	BASEPRI, r3
 800b8ee:	f3bf 8f6f 	isb	sy
 800b8f2:	f3bf 8f4f 	dsb	sy
 800b8f6:	617b      	str	r3, [r7, #20]
}
 800b8f8:	bf00      	nop
 800b8fa:	e7fe      	b.n	800b8fa <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800b8fc:	f001 fcb2 	bl	800d264 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b900:	2300      	movs	r3, #0
 800b902:	e082      	b.n	800ba0a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b904:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b906:	2b00      	cmp	r3, #0
 800b908:	d106      	bne.n	800b918 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b90a:	f107 030c 	add.w	r3, r7, #12
 800b90e:	4618      	mov	r0, r3
 800b910:	f000 ffd2 	bl	800c8b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b914:	2301      	movs	r3, #1
 800b916:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b918:	f001 fca4 	bl	800d264 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b91c:	f000 fd66 	bl	800c3ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b920:	f001 fc70 	bl	800d204 <vPortEnterCritical>
 800b924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b926:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b92a:	b25b      	sxtb	r3, r3
 800b92c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b930:	d103      	bne.n	800b93a <xQueueSemaphoreTake+0x13a>
 800b932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b934:	2200      	movs	r2, #0
 800b936:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b93a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b93c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b940:	b25b      	sxtb	r3, r3
 800b942:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b946:	d103      	bne.n	800b950 <xQueueSemaphoreTake+0x150>
 800b948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b94a:	2200      	movs	r2, #0
 800b94c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b950:	f001 fc88 	bl	800d264 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b954:	463a      	mov	r2, r7
 800b956:	f107 030c 	add.w	r3, r7, #12
 800b95a:	4611      	mov	r1, r2
 800b95c:	4618      	mov	r0, r3
 800b95e:	f000 ffc1 	bl	800c8e4 <xTaskCheckForTimeOut>
 800b962:	4603      	mov	r3, r0
 800b964:	2b00      	cmp	r3, #0
 800b966:	d132      	bne.n	800b9ce <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b968:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b96a:	f000 fa2e 	bl	800bdca <prvIsQueueEmpty>
 800b96e:	4603      	mov	r3, r0
 800b970:	2b00      	cmp	r3, #0
 800b972:	d026      	beq.n	800b9c2 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d109      	bne.n	800b990 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800b97c:	f001 fc42 	bl	800d204 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b982:	689b      	ldr	r3, [r3, #8]
 800b984:	4618      	mov	r0, r3
 800b986:	f001 f90f 	bl	800cba8 <xTaskPriorityInherit>
 800b98a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800b98c:	f001 fc6a 	bl	800d264 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b992:	3324      	adds	r3, #36	; 0x24
 800b994:	683a      	ldr	r2, [r7, #0]
 800b996:	4611      	mov	r1, r2
 800b998:	4618      	mov	r0, r3
 800b99a:	f000 ff07 	bl	800c7ac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b99e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b9a0:	f000 f9c1 	bl	800bd26 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b9a4:	f000 fd30 	bl	800c408 <xTaskResumeAll>
 800b9a8:	4603      	mov	r3, r0
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	f47f af68 	bne.w	800b880 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800b9b0:	4b18      	ldr	r3, [pc, #96]	; (800ba14 <xQueueSemaphoreTake+0x214>)
 800b9b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b9b6:	601a      	str	r2, [r3, #0]
 800b9b8:	f3bf 8f4f 	dsb	sy
 800b9bc:	f3bf 8f6f 	isb	sy
 800b9c0:	e75e      	b.n	800b880 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800b9c2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b9c4:	f000 f9af 	bl	800bd26 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b9c8:	f000 fd1e 	bl	800c408 <xTaskResumeAll>
 800b9cc:	e758      	b.n	800b880 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800b9ce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b9d0:	f000 f9a9 	bl	800bd26 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b9d4:	f000 fd18 	bl	800c408 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b9d8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b9da:	f000 f9f6 	bl	800bdca <prvIsQueueEmpty>
 800b9de:	4603      	mov	r3, r0
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	f43f af4d 	beq.w	800b880 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800b9e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d00d      	beq.n	800ba08 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800b9ec:	f001 fc0a 	bl	800d204 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800b9f0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b9f2:	f000 f8f0 	bl	800bbd6 <prvGetDisinheritPriorityAfterTimeout>
 800b9f6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800b9f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9fa:	689b      	ldr	r3, [r3, #8]
 800b9fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b9fe:	4618      	mov	r0, r3
 800ba00:	f001 f9ce 	bl	800cda0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800ba04:	f001 fc2e 	bl	800d264 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ba08:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ba0a:	4618      	mov	r0, r3
 800ba0c:	3738      	adds	r7, #56	; 0x38
 800ba0e:	46bd      	mov	sp, r7
 800ba10:	bd80      	pop	{r7, pc}
 800ba12:	bf00      	nop
 800ba14:	e000ed04 	.word	0xe000ed04

0800ba18 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800ba18:	b580      	push	{r7, lr}
 800ba1a:	b08e      	sub	sp, #56	; 0x38
 800ba1c:	af00      	add	r7, sp, #0
 800ba1e:	60f8      	str	r0, [r7, #12]
 800ba20:	60b9      	str	r1, [r7, #8]
 800ba22:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ba28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d10a      	bne.n	800ba44 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800ba2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba32:	f383 8811 	msr	BASEPRI, r3
 800ba36:	f3bf 8f6f 	isb	sy
 800ba3a:	f3bf 8f4f 	dsb	sy
 800ba3e:	623b      	str	r3, [r7, #32]
}
 800ba40:	bf00      	nop
 800ba42:	e7fe      	b.n	800ba42 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ba44:	68bb      	ldr	r3, [r7, #8]
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d103      	bne.n	800ba52 <xQueueReceiveFromISR+0x3a>
 800ba4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d101      	bne.n	800ba56 <xQueueReceiveFromISR+0x3e>
 800ba52:	2301      	movs	r3, #1
 800ba54:	e000      	b.n	800ba58 <xQueueReceiveFromISR+0x40>
 800ba56:	2300      	movs	r3, #0
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d10a      	bne.n	800ba72 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800ba5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba60:	f383 8811 	msr	BASEPRI, r3
 800ba64:	f3bf 8f6f 	isb	sy
 800ba68:	f3bf 8f4f 	dsb	sy
 800ba6c:	61fb      	str	r3, [r7, #28]
}
 800ba6e:	bf00      	nop
 800ba70:	e7fe      	b.n	800ba70 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ba72:	f001 fca9 	bl	800d3c8 <vPortValidateInterruptPriority>
	__asm volatile
 800ba76:	f3ef 8211 	mrs	r2, BASEPRI
 800ba7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba7e:	f383 8811 	msr	BASEPRI, r3
 800ba82:	f3bf 8f6f 	isb	sy
 800ba86:	f3bf 8f4f 	dsb	sy
 800ba8a:	61ba      	str	r2, [r7, #24]
 800ba8c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800ba8e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ba90:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ba92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba96:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ba98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d02f      	beq.n	800bafe <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800ba9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baa0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800baa4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800baa8:	68b9      	ldr	r1, [r7, #8]
 800baaa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800baac:	f000 f915 	bl	800bcda <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800bab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bab2:	1e5a      	subs	r2, r3, #1
 800bab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bab6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800bab8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800babc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bac0:	d112      	bne.n	800bae8 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bac4:	691b      	ldr	r3, [r3, #16]
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d016      	beq.n	800baf8 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800baca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bacc:	3310      	adds	r3, #16
 800bace:	4618      	mov	r0, r3
 800bad0:	f000 fe90 	bl	800c7f4 <xTaskRemoveFromEventList>
 800bad4:	4603      	mov	r3, r0
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d00e      	beq.n	800baf8 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	2b00      	cmp	r3, #0
 800bade:	d00b      	beq.n	800baf8 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	2201      	movs	r2, #1
 800bae4:	601a      	str	r2, [r3, #0]
 800bae6:	e007      	b.n	800baf8 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800bae8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800baec:	3301      	adds	r3, #1
 800baee:	b2db      	uxtb	r3, r3
 800baf0:	b25a      	sxtb	r2, r3
 800baf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baf4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800baf8:	2301      	movs	r3, #1
 800bafa:	637b      	str	r3, [r7, #52]	; 0x34
 800bafc:	e001      	b.n	800bb02 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800bafe:	2300      	movs	r3, #0
 800bb00:	637b      	str	r3, [r7, #52]	; 0x34
 800bb02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb04:	613b      	str	r3, [r7, #16]
	__asm volatile
 800bb06:	693b      	ldr	r3, [r7, #16]
 800bb08:	f383 8811 	msr	BASEPRI, r3
}
 800bb0c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bb0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800bb10:	4618      	mov	r0, r3
 800bb12:	3738      	adds	r7, #56	; 0x38
 800bb14:	46bd      	mov	sp, r7
 800bb16:	bd80      	pop	{r7, pc}

0800bb18 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800bb18:	b580      	push	{r7, lr}
 800bb1a:	b084      	sub	sp, #16
 800bb1c:	af00      	add	r7, sp, #0
 800bb1e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d10a      	bne.n	800bb3c <uxQueueMessagesWaiting+0x24>
	__asm volatile
 800bb26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb2a:	f383 8811 	msr	BASEPRI, r3
 800bb2e:	f3bf 8f6f 	isb	sy
 800bb32:	f3bf 8f4f 	dsb	sy
 800bb36:	60bb      	str	r3, [r7, #8]
}
 800bb38:	bf00      	nop
 800bb3a:	e7fe      	b.n	800bb3a <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 800bb3c:	f001 fb62 	bl	800d204 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb44:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800bb46:	f001 fb8d 	bl	800d264 <vPortExitCritical>

	return uxReturn;
 800bb4a:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800bb4c:	4618      	mov	r0, r3
 800bb4e:	3710      	adds	r7, #16
 800bb50:	46bd      	mov	sp, r7
 800bb52:	bd80      	pop	{r7, pc}

0800bb54 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800bb54:	b480      	push	{r7}
 800bb56:	b087      	sub	sp, #28
 800bb58:	af00      	add	r7, sp, #0
 800bb5a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800bb60:	697b      	ldr	r3, [r7, #20]
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d10a      	bne.n	800bb7c <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 800bb66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb6a:	f383 8811 	msr	BASEPRI, r3
 800bb6e:	f3bf 8f6f 	isb	sy
 800bb72:	f3bf 8f4f 	dsb	sy
 800bb76:	60fb      	str	r3, [r7, #12]
}
 800bb78:	bf00      	nop
 800bb7a:	e7fe      	b.n	800bb7a <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 800bb7c:	697b      	ldr	r3, [r7, #20]
 800bb7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb80:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800bb82:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800bb84:	4618      	mov	r0, r3
 800bb86:	371c      	adds	r7, #28
 800bb88:	46bd      	mov	sp, r7
 800bb8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb8e:	4770      	bx	lr

0800bb90 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800bb90:	b580      	push	{r7, lr}
 800bb92:	b084      	sub	sp, #16
 800bb94:	af00      	add	r7, sp, #0
 800bb96:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d10a      	bne.n	800bbb8 <vQueueDelete+0x28>
	__asm volatile
 800bba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bba6:	f383 8811 	msr	BASEPRI, r3
 800bbaa:	f3bf 8f6f 	isb	sy
 800bbae:	f3bf 8f4f 	dsb	sy
 800bbb2:	60bb      	str	r3, [r7, #8]
}
 800bbb4:	bf00      	nop
 800bbb6:	e7fe      	b.n	800bbb6 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800bbb8:	68f8      	ldr	r0, [r7, #12]
 800bbba:	f000 f935 	bl	800be28 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d102      	bne.n	800bbce <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800bbc8:	68f8      	ldr	r0, [r7, #12]
 800bbca:	f001 fd09 	bl	800d5e0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800bbce:	bf00      	nop
 800bbd0:	3710      	adds	r7, #16
 800bbd2:	46bd      	mov	sp, r7
 800bbd4:	bd80      	pop	{r7, pc}

0800bbd6 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800bbd6:	b480      	push	{r7}
 800bbd8:	b085      	sub	sp, #20
 800bbda:	af00      	add	r7, sp, #0
 800bbdc:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d006      	beq.n	800bbf4 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	f1c3 0307 	rsb	r3, r3, #7
 800bbf0:	60fb      	str	r3, [r7, #12]
 800bbf2:	e001      	b.n	800bbf8 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800bbf4:	2300      	movs	r3, #0
 800bbf6:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800bbf8:	68fb      	ldr	r3, [r7, #12]
	}
 800bbfa:	4618      	mov	r0, r3
 800bbfc:	3714      	adds	r7, #20
 800bbfe:	46bd      	mov	sp, r7
 800bc00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc04:	4770      	bx	lr

0800bc06 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800bc06:	b580      	push	{r7, lr}
 800bc08:	b086      	sub	sp, #24
 800bc0a:	af00      	add	r7, sp, #0
 800bc0c:	60f8      	str	r0, [r7, #12]
 800bc0e:	60b9      	str	r1, [r7, #8]
 800bc10:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800bc12:	2300      	movs	r3, #0
 800bc14:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc1a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d10d      	bne.n	800bc40 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d14d      	bne.n	800bcc8 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	689b      	ldr	r3, [r3, #8]
 800bc30:	4618      	mov	r0, r3
 800bc32:	f001 f82f 	bl	800cc94 <xTaskPriorityDisinherit>
 800bc36:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	2200      	movs	r2, #0
 800bc3c:	609a      	str	r2, [r3, #8]
 800bc3e:	e043      	b.n	800bcc8 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d119      	bne.n	800bc7a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	6858      	ldr	r0, [r3, #4]
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc4e:	461a      	mov	r2, r3
 800bc50:	68b9      	ldr	r1, [r7, #8]
 800bc52:	f014 fd2e 	bl	80206b2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	685a      	ldr	r2, [r3, #4]
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc5e:	441a      	add	r2, r3
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	685a      	ldr	r2, [r3, #4]
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	689b      	ldr	r3, [r3, #8]
 800bc6c:	429a      	cmp	r2, r3
 800bc6e:	d32b      	bcc.n	800bcc8 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	681a      	ldr	r2, [r3, #0]
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	605a      	str	r2, [r3, #4]
 800bc78:	e026      	b.n	800bcc8 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	68d8      	ldr	r0, [r3, #12]
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc82:	461a      	mov	r2, r3
 800bc84:	68b9      	ldr	r1, [r7, #8]
 800bc86:	f014 fd14 	bl	80206b2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	68da      	ldr	r2, [r3, #12]
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc92:	425b      	negs	r3, r3
 800bc94:	441a      	add	r2, r3
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	68da      	ldr	r2, [r3, #12]
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	429a      	cmp	r2, r3
 800bca4:	d207      	bcs.n	800bcb6 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	689a      	ldr	r2, [r3, #8]
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcae:	425b      	negs	r3, r3
 800bcb0:	441a      	add	r2, r3
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	2b02      	cmp	r3, #2
 800bcba:	d105      	bne.n	800bcc8 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bcbc:	693b      	ldr	r3, [r7, #16]
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d002      	beq.n	800bcc8 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800bcc2:	693b      	ldr	r3, [r7, #16]
 800bcc4:	3b01      	subs	r3, #1
 800bcc6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800bcc8:	693b      	ldr	r3, [r7, #16]
 800bcca:	1c5a      	adds	r2, r3, #1
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800bcd0:	697b      	ldr	r3, [r7, #20]
}
 800bcd2:	4618      	mov	r0, r3
 800bcd4:	3718      	adds	r7, #24
 800bcd6:	46bd      	mov	sp, r7
 800bcd8:	bd80      	pop	{r7, pc}

0800bcda <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800bcda:	b580      	push	{r7, lr}
 800bcdc:	b082      	sub	sp, #8
 800bcde:	af00      	add	r7, sp, #0
 800bce0:	6078      	str	r0, [r7, #4]
 800bce2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d018      	beq.n	800bd1e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	68da      	ldr	r2, [r3, #12]
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcf4:	441a      	add	r2, r3
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	68da      	ldr	r2, [r3, #12]
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	689b      	ldr	r3, [r3, #8]
 800bd02:	429a      	cmp	r2, r3
 800bd04:	d303      	bcc.n	800bd0e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	681a      	ldr	r2, [r3, #0]
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	68d9      	ldr	r1, [r3, #12]
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd16:	461a      	mov	r2, r3
 800bd18:	6838      	ldr	r0, [r7, #0]
 800bd1a:	f014 fcca 	bl	80206b2 <memcpy>
	}
}
 800bd1e:	bf00      	nop
 800bd20:	3708      	adds	r7, #8
 800bd22:	46bd      	mov	sp, r7
 800bd24:	bd80      	pop	{r7, pc}

0800bd26 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800bd26:	b580      	push	{r7, lr}
 800bd28:	b084      	sub	sp, #16
 800bd2a:	af00      	add	r7, sp, #0
 800bd2c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800bd2e:	f001 fa69 	bl	800d204 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bd38:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bd3a:	e011      	b.n	800bd60 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d012      	beq.n	800bd6a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	3324      	adds	r3, #36	; 0x24
 800bd48:	4618      	mov	r0, r3
 800bd4a:	f000 fd53 	bl	800c7f4 <xTaskRemoveFromEventList>
 800bd4e:	4603      	mov	r3, r0
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d001      	beq.n	800bd58 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800bd54:	f000 fe28 	bl	800c9a8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800bd58:	7bfb      	ldrb	r3, [r7, #15]
 800bd5a:	3b01      	subs	r3, #1
 800bd5c:	b2db      	uxtb	r3, r3
 800bd5e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bd60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	dce9      	bgt.n	800bd3c <prvUnlockQueue+0x16>
 800bd68:	e000      	b.n	800bd6c <prvUnlockQueue+0x46>
					break;
 800bd6a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	22ff      	movs	r2, #255	; 0xff
 800bd70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800bd74:	f001 fa76 	bl	800d264 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800bd78:	f001 fa44 	bl	800d204 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bd82:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bd84:	e011      	b.n	800bdaa <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	691b      	ldr	r3, [r3, #16]
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d012      	beq.n	800bdb4 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	3310      	adds	r3, #16
 800bd92:	4618      	mov	r0, r3
 800bd94:	f000 fd2e 	bl	800c7f4 <xTaskRemoveFromEventList>
 800bd98:	4603      	mov	r3, r0
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d001      	beq.n	800bda2 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800bd9e:	f000 fe03 	bl	800c9a8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800bda2:	7bbb      	ldrb	r3, [r7, #14]
 800bda4:	3b01      	subs	r3, #1
 800bda6:	b2db      	uxtb	r3, r3
 800bda8:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bdaa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	dce9      	bgt.n	800bd86 <prvUnlockQueue+0x60>
 800bdb2:	e000      	b.n	800bdb6 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800bdb4:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	22ff      	movs	r2, #255	; 0xff
 800bdba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800bdbe:	f001 fa51 	bl	800d264 <vPortExitCritical>
}
 800bdc2:	bf00      	nop
 800bdc4:	3710      	adds	r7, #16
 800bdc6:	46bd      	mov	sp, r7
 800bdc8:	bd80      	pop	{r7, pc}

0800bdca <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800bdca:	b580      	push	{r7, lr}
 800bdcc:	b084      	sub	sp, #16
 800bdce:	af00      	add	r7, sp, #0
 800bdd0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bdd2:	f001 fa17 	bl	800d204 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d102      	bne.n	800bde4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800bdde:	2301      	movs	r3, #1
 800bde0:	60fb      	str	r3, [r7, #12]
 800bde2:	e001      	b.n	800bde8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800bde4:	2300      	movs	r3, #0
 800bde6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bde8:	f001 fa3c 	bl	800d264 <vPortExitCritical>

	return xReturn;
 800bdec:	68fb      	ldr	r3, [r7, #12]
}
 800bdee:	4618      	mov	r0, r3
 800bdf0:	3710      	adds	r7, #16
 800bdf2:	46bd      	mov	sp, r7
 800bdf4:	bd80      	pop	{r7, pc}

0800bdf6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800bdf6:	b580      	push	{r7, lr}
 800bdf8:	b084      	sub	sp, #16
 800bdfa:	af00      	add	r7, sp, #0
 800bdfc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bdfe:	f001 fa01 	bl	800d204 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be0a:	429a      	cmp	r2, r3
 800be0c:	d102      	bne.n	800be14 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800be0e:	2301      	movs	r3, #1
 800be10:	60fb      	str	r3, [r7, #12]
 800be12:	e001      	b.n	800be18 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800be14:	2300      	movs	r3, #0
 800be16:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800be18:	f001 fa24 	bl	800d264 <vPortExitCritical>

	return xReturn;
 800be1c:	68fb      	ldr	r3, [r7, #12]
}
 800be1e:	4618      	mov	r0, r3
 800be20:	3710      	adds	r7, #16
 800be22:	46bd      	mov	sp, r7
 800be24:	bd80      	pop	{r7, pc}
	...

0800be28 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800be28:	b480      	push	{r7}
 800be2a:	b085      	sub	sp, #20
 800be2c:	af00      	add	r7, sp, #0
 800be2e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800be30:	2300      	movs	r3, #0
 800be32:	60fb      	str	r3, [r7, #12]
 800be34:	e016      	b.n	800be64 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800be36:	4a10      	ldr	r2, [pc, #64]	; (800be78 <vQueueUnregisterQueue+0x50>)
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	00db      	lsls	r3, r3, #3
 800be3c:	4413      	add	r3, r2
 800be3e:	685b      	ldr	r3, [r3, #4]
 800be40:	687a      	ldr	r2, [r7, #4]
 800be42:	429a      	cmp	r2, r3
 800be44:	d10b      	bne.n	800be5e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800be46:	4a0c      	ldr	r2, [pc, #48]	; (800be78 <vQueueUnregisterQueue+0x50>)
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	2100      	movs	r1, #0
 800be4c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800be50:	4a09      	ldr	r2, [pc, #36]	; (800be78 <vQueueUnregisterQueue+0x50>)
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	00db      	lsls	r3, r3, #3
 800be56:	4413      	add	r3, r2
 800be58:	2200      	movs	r2, #0
 800be5a:	605a      	str	r2, [r3, #4]
				break;
 800be5c:	e006      	b.n	800be6c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	3301      	adds	r3, #1
 800be62:	60fb      	str	r3, [r7, #12]
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	2b07      	cmp	r3, #7
 800be68:	d9e5      	bls.n	800be36 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800be6a:	bf00      	nop
 800be6c:	bf00      	nop
 800be6e:	3714      	adds	r7, #20
 800be70:	46bd      	mov	sp, r7
 800be72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be76:	4770      	bx	lr
 800be78:	24000ed0 	.word	0x24000ed0

0800be7c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800be7c:	b580      	push	{r7, lr}
 800be7e:	b08e      	sub	sp, #56	; 0x38
 800be80:	af04      	add	r7, sp, #16
 800be82:	60f8      	str	r0, [r7, #12]
 800be84:	60b9      	str	r1, [r7, #8]
 800be86:	607a      	str	r2, [r7, #4]
 800be88:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800be8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d10a      	bne.n	800bea6 <xTaskCreateStatic+0x2a>
	__asm volatile
 800be90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be94:	f383 8811 	msr	BASEPRI, r3
 800be98:	f3bf 8f6f 	isb	sy
 800be9c:	f3bf 8f4f 	dsb	sy
 800bea0:	623b      	str	r3, [r7, #32]
}
 800bea2:	bf00      	nop
 800bea4:	e7fe      	b.n	800bea4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800bea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d10a      	bne.n	800bec2 <xTaskCreateStatic+0x46>
	__asm volatile
 800beac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800beb0:	f383 8811 	msr	BASEPRI, r3
 800beb4:	f3bf 8f6f 	isb	sy
 800beb8:	f3bf 8f4f 	dsb	sy
 800bebc:	61fb      	str	r3, [r7, #28]
}
 800bebe:	bf00      	nop
 800bec0:	e7fe      	b.n	800bec0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800bec2:	2354      	movs	r3, #84	; 0x54
 800bec4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800bec6:	693b      	ldr	r3, [r7, #16]
 800bec8:	2b54      	cmp	r3, #84	; 0x54
 800beca:	d00a      	beq.n	800bee2 <xTaskCreateStatic+0x66>
	__asm volatile
 800becc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bed0:	f383 8811 	msr	BASEPRI, r3
 800bed4:	f3bf 8f6f 	isb	sy
 800bed8:	f3bf 8f4f 	dsb	sy
 800bedc:	61bb      	str	r3, [r7, #24]
}
 800bede:	bf00      	nop
 800bee0:	e7fe      	b.n	800bee0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800bee2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800bee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d01e      	beq.n	800bf28 <xTaskCreateStatic+0xac>
 800beea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800beec:	2b00      	cmp	r3, #0
 800beee:	d01b      	beq.n	800bf28 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bef2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800bef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bef6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bef8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800befa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800befc:	2202      	movs	r2, #2
 800befe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800bf02:	2300      	movs	r3, #0
 800bf04:	9303      	str	r3, [sp, #12]
 800bf06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf08:	9302      	str	r3, [sp, #8]
 800bf0a:	f107 0314 	add.w	r3, r7, #20
 800bf0e:	9301      	str	r3, [sp, #4]
 800bf10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf12:	9300      	str	r3, [sp, #0]
 800bf14:	683b      	ldr	r3, [r7, #0]
 800bf16:	687a      	ldr	r2, [r7, #4]
 800bf18:	68b9      	ldr	r1, [r7, #8]
 800bf1a:	68f8      	ldr	r0, [r7, #12]
 800bf1c:	f000 f850 	bl	800bfc0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bf20:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bf22:	f000 f8d5 	bl	800c0d0 <prvAddNewTaskToReadyList>
 800bf26:	e001      	b.n	800bf2c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800bf28:	2300      	movs	r3, #0
 800bf2a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800bf2c:	697b      	ldr	r3, [r7, #20]
	}
 800bf2e:	4618      	mov	r0, r3
 800bf30:	3728      	adds	r7, #40	; 0x28
 800bf32:	46bd      	mov	sp, r7
 800bf34:	bd80      	pop	{r7, pc}

0800bf36 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800bf36:	b580      	push	{r7, lr}
 800bf38:	b08c      	sub	sp, #48	; 0x30
 800bf3a:	af04      	add	r7, sp, #16
 800bf3c:	60f8      	str	r0, [r7, #12]
 800bf3e:	60b9      	str	r1, [r7, #8]
 800bf40:	603b      	str	r3, [r7, #0]
 800bf42:	4613      	mov	r3, r2
 800bf44:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800bf46:	88fb      	ldrh	r3, [r7, #6]
 800bf48:	009b      	lsls	r3, r3, #2
 800bf4a:	4618      	mov	r0, r3
 800bf4c:	f001 fa7c 	bl	800d448 <pvPortMalloc>
 800bf50:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800bf52:	697b      	ldr	r3, [r7, #20]
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d00e      	beq.n	800bf76 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800bf58:	2054      	movs	r0, #84	; 0x54
 800bf5a:	f001 fa75 	bl	800d448 <pvPortMalloc>
 800bf5e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800bf60:	69fb      	ldr	r3, [r7, #28]
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d003      	beq.n	800bf6e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800bf66:	69fb      	ldr	r3, [r7, #28]
 800bf68:	697a      	ldr	r2, [r7, #20]
 800bf6a:	631a      	str	r2, [r3, #48]	; 0x30
 800bf6c:	e005      	b.n	800bf7a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800bf6e:	6978      	ldr	r0, [r7, #20]
 800bf70:	f001 fb36 	bl	800d5e0 <vPortFree>
 800bf74:	e001      	b.n	800bf7a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800bf76:	2300      	movs	r3, #0
 800bf78:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800bf7a:	69fb      	ldr	r3, [r7, #28]
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d017      	beq.n	800bfb0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800bf80:	69fb      	ldr	r3, [r7, #28]
 800bf82:	2200      	movs	r2, #0
 800bf84:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800bf88:	88fa      	ldrh	r2, [r7, #6]
 800bf8a:	2300      	movs	r3, #0
 800bf8c:	9303      	str	r3, [sp, #12]
 800bf8e:	69fb      	ldr	r3, [r7, #28]
 800bf90:	9302      	str	r3, [sp, #8]
 800bf92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf94:	9301      	str	r3, [sp, #4]
 800bf96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf98:	9300      	str	r3, [sp, #0]
 800bf9a:	683b      	ldr	r3, [r7, #0]
 800bf9c:	68b9      	ldr	r1, [r7, #8]
 800bf9e:	68f8      	ldr	r0, [r7, #12]
 800bfa0:	f000 f80e 	bl	800bfc0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bfa4:	69f8      	ldr	r0, [r7, #28]
 800bfa6:	f000 f893 	bl	800c0d0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800bfaa:	2301      	movs	r3, #1
 800bfac:	61bb      	str	r3, [r7, #24]
 800bfae:	e002      	b.n	800bfb6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800bfb0:	f04f 33ff 	mov.w	r3, #4294967295
 800bfb4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800bfb6:	69bb      	ldr	r3, [r7, #24]
	}
 800bfb8:	4618      	mov	r0, r3
 800bfba:	3720      	adds	r7, #32
 800bfbc:	46bd      	mov	sp, r7
 800bfbe:	bd80      	pop	{r7, pc}

0800bfc0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800bfc0:	b580      	push	{r7, lr}
 800bfc2:	b088      	sub	sp, #32
 800bfc4:	af00      	add	r7, sp, #0
 800bfc6:	60f8      	str	r0, [r7, #12]
 800bfc8:	60b9      	str	r1, [r7, #8]
 800bfca:	607a      	str	r2, [r7, #4]
 800bfcc:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800bfce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bfd2:	6879      	ldr	r1, [r7, #4]
 800bfd4:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800bfd8:	440b      	add	r3, r1
 800bfda:	009b      	lsls	r3, r3, #2
 800bfdc:	4413      	add	r3, r2
 800bfde:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800bfe0:	69bb      	ldr	r3, [r7, #24]
 800bfe2:	f023 0307 	bic.w	r3, r3, #7
 800bfe6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800bfe8:	69bb      	ldr	r3, [r7, #24]
 800bfea:	f003 0307 	and.w	r3, r3, #7
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d00a      	beq.n	800c008 <prvInitialiseNewTask+0x48>
	__asm volatile
 800bff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bff6:	f383 8811 	msr	BASEPRI, r3
 800bffa:	f3bf 8f6f 	isb	sy
 800bffe:	f3bf 8f4f 	dsb	sy
 800c002:	617b      	str	r3, [r7, #20]
}
 800c004:	bf00      	nop
 800c006:	e7fe      	b.n	800c006 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c008:	68bb      	ldr	r3, [r7, #8]
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d01f      	beq.n	800c04e <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c00e:	2300      	movs	r3, #0
 800c010:	61fb      	str	r3, [r7, #28]
 800c012:	e012      	b.n	800c03a <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c014:	68ba      	ldr	r2, [r7, #8]
 800c016:	69fb      	ldr	r3, [r7, #28]
 800c018:	4413      	add	r3, r2
 800c01a:	7819      	ldrb	r1, [r3, #0]
 800c01c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c01e:	69fb      	ldr	r3, [r7, #28]
 800c020:	4413      	add	r3, r2
 800c022:	3334      	adds	r3, #52	; 0x34
 800c024:	460a      	mov	r2, r1
 800c026:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c028:	68ba      	ldr	r2, [r7, #8]
 800c02a:	69fb      	ldr	r3, [r7, #28]
 800c02c:	4413      	add	r3, r2
 800c02e:	781b      	ldrb	r3, [r3, #0]
 800c030:	2b00      	cmp	r3, #0
 800c032:	d006      	beq.n	800c042 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c034:	69fb      	ldr	r3, [r7, #28]
 800c036:	3301      	adds	r3, #1
 800c038:	61fb      	str	r3, [r7, #28]
 800c03a:	69fb      	ldr	r3, [r7, #28]
 800c03c:	2b0f      	cmp	r3, #15
 800c03e:	d9e9      	bls.n	800c014 <prvInitialiseNewTask+0x54>
 800c040:	e000      	b.n	800c044 <prvInitialiseNewTask+0x84>
			{
				break;
 800c042:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c046:	2200      	movs	r2, #0
 800c048:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c04c:	e003      	b.n	800c056 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c04e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c050:	2200      	movs	r2, #0
 800c052:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c058:	2b06      	cmp	r3, #6
 800c05a:	d901      	bls.n	800c060 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c05c:	2306      	movs	r3, #6
 800c05e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c062:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c064:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c068:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c06a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800c06c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c06e:	2200      	movs	r2, #0
 800c070:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c074:	3304      	adds	r3, #4
 800c076:	4618      	mov	r0, r3
 800c078:	f7fe fea1 	bl	800adbe <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c07c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c07e:	3318      	adds	r3, #24
 800c080:	4618      	mov	r0, r3
 800c082:	f7fe fe9c 	bl	800adbe <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c088:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c08a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c08c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c08e:	f1c3 0207 	rsb	r2, r3, #7
 800c092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c094:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c098:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c09a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c09c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c09e:	2200      	movs	r2, #0
 800c0a0:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c0a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0a4:	2200      	movs	r2, #0
 800c0a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c0aa:	683a      	ldr	r2, [r7, #0]
 800c0ac:	68f9      	ldr	r1, [r7, #12]
 800c0ae:	69b8      	ldr	r0, [r7, #24]
 800c0b0:	f000 ff7e 	bl	800cfb0 <pxPortInitialiseStack>
 800c0b4:	4602      	mov	r2, r0
 800c0b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0b8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c0ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d002      	beq.n	800c0c6 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c0c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c0c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c0c6:	bf00      	nop
 800c0c8:	3720      	adds	r7, #32
 800c0ca:	46bd      	mov	sp, r7
 800c0cc:	bd80      	pop	{r7, pc}
	...

0800c0d0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c0d0:	b580      	push	{r7, lr}
 800c0d2:	b082      	sub	sp, #8
 800c0d4:	af00      	add	r7, sp, #0
 800c0d6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c0d8:	f001 f894 	bl	800d204 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c0dc:	4b2a      	ldr	r3, [pc, #168]	; (800c188 <prvAddNewTaskToReadyList+0xb8>)
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	3301      	adds	r3, #1
 800c0e2:	4a29      	ldr	r2, [pc, #164]	; (800c188 <prvAddNewTaskToReadyList+0xb8>)
 800c0e4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c0e6:	4b29      	ldr	r3, [pc, #164]	; (800c18c <prvAddNewTaskToReadyList+0xbc>)
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d109      	bne.n	800c102 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c0ee:	4a27      	ldr	r2, [pc, #156]	; (800c18c <prvAddNewTaskToReadyList+0xbc>)
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c0f4:	4b24      	ldr	r3, [pc, #144]	; (800c188 <prvAddNewTaskToReadyList+0xb8>)
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	2b01      	cmp	r3, #1
 800c0fa:	d110      	bne.n	800c11e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c0fc:	f000 fc78 	bl	800c9f0 <prvInitialiseTaskLists>
 800c100:	e00d      	b.n	800c11e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c102:	4b23      	ldr	r3, [pc, #140]	; (800c190 <prvAddNewTaskToReadyList+0xc0>)
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	2b00      	cmp	r3, #0
 800c108:	d109      	bne.n	800c11e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c10a:	4b20      	ldr	r3, [pc, #128]	; (800c18c <prvAddNewTaskToReadyList+0xbc>)
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c114:	429a      	cmp	r2, r3
 800c116:	d802      	bhi.n	800c11e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c118:	4a1c      	ldr	r2, [pc, #112]	; (800c18c <prvAddNewTaskToReadyList+0xbc>)
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c11e:	4b1d      	ldr	r3, [pc, #116]	; (800c194 <prvAddNewTaskToReadyList+0xc4>)
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	3301      	adds	r3, #1
 800c124:	4a1b      	ldr	r2, [pc, #108]	; (800c194 <prvAddNewTaskToReadyList+0xc4>)
 800c126:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c12c:	2201      	movs	r2, #1
 800c12e:	409a      	lsls	r2, r3
 800c130:	4b19      	ldr	r3, [pc, #100]	; (800c198 <prvAddNewTaskToReadyList+0xc8>)
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	4313      	orrs	r3, r2
 800c136:	4a18      	ldr	r2, [pc, #96]	; (800c198 <prvAddNewTaskToReadyList+0xc8>)
 800c138:	6013      	str	r3, [r2, #0]
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c13e:	4613      	mov	r3, r2
 800c140:	009b      	lsls	r3, r3, #2
 800c142:	4413      	add	r3, r2
 800c144:	009b      	lsls	r3, r3, #2
 800c146:	4a15      	ldr	r2, [pc, #84]	; (800c19c <prvAddNewTaskToReadyList+0xcc>)
 800c148:	441a      	add	r2, r3
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	3304      	adds	r3, #4
 800c14e:	4619      	mov	r1, r3
 800c150:	4610      	mov	r0, r2
 800c152:	f7fe fe41 	bl	800add8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c156:	f001 f885 	bl	800d264 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c15a:	4b0d      	ldr	r3, [pc, #52]	; (800c190 <prvAddNewTaskToReadyList+0xc0>)
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d00e      	beq.n	800c180 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c162:	4b0a      	ldr	r3, [pc, #40]	; (800c18c <prvAddNewTaskToReadyList+0xbc>)
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c16c:	429a      	cmp	r2, r3
 800c16e:	d207      	bcs.n	800c180 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c170:	4b0b      	ldr	r3, [pc, #44]	; (800c1a0 <prvAddNewTaskToReadyList+0xd0>)
 800c172:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c176:	601a      	str	r2, [r3, #0]
 800c178:	f3bf 8f4f 	dsb	sy
 800c17c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c180:	bf00      	nop
 800c182:	3708      	adds	r7, #8
 800c184:	46bd      	mov	sp, r7
 800c186:	bd80      	pop	{r7, pc}
 800c188:	24001010 	.word	0x24001010
 800c18c:	24000f10 	.word	0x24000f10
 800c190:	2400101c 	.word	0x2400101c
 800c194:	2400102c 	.word	0x2400102c
 800c198:	24001018 	.word	0x24001018
 800c19c:	24000f14 	.word	0x24000f14
 800c1a0:	e000ed04 	.word	0xe000ed04

0800c1a4 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800c1a4:	b580      	push	{r7, lr}
 800c1a6:	b084      	sub	sp, #16
 800c1a8:	af00      	add	r7, sp, #0
 800c1aa:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800c1ac:	f001 f82a 	bl	800d204 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d102      	bne.n	800c1bc <vTaskDelete+0x18>
 800c1b6:	4b39      	ldr	r3, [pc, #228]	; (800c29c <vTaskDelete+0xf8>)
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	e000      	b.n	800c1be <vTaskDelete+0x1a>
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	3304      	adds	r3, #4
 800c1c4:	4618      	mov	r0, r3
 800c1c6:	f7fe fe64 	bl	800ae92 <uxListRemove>
 800c1ca:	4603      	mov	r3, r0
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d115      	bne.n	800c1fc <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1d4:	4932      	ldr	r1, [pc, #200]	; (800c2a0 <vTaskDelete+0xfc>)
 800c1d6:	4613      	mov	r3, r2
 800c1d8:	009b      	lsls	r3, r3, #2
 800c1da:	4413      	add	r3, r2
 800c1dc:	009b      	lsls	r3, r3, #2
 800c1de:	440b      	add	r3, r1
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d10a      	bne.n	800c1fc <vTaskDelete+0x58>
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1ea:	2201      	movs	r2, #1
 800c1ec:	fa02 f303 	lsl.w	r3, r2, r3
 800c1f0:	43da      	mvns	r2, r3
 800c1f2:	4b2c      	ldr	r3, [pc, #176]	; (800c2a4 <vTaskDelete+0x100>)
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	4013      	ands	r3, r2
 800c1f8:	4a2a      	ldr	r2, [pc, #168]	; (800c2a4 <vTaskDelete+0x100>)
 800c1fa:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c200:	2b00      	cmp	r3, #0
 800c202:	d004      	beq.n	800c20e <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	3318      	adds	r3, #24
 800c208:	4618      	mov	r0, r3
 800c20a:	f7fe fe42 	bl	800ae92 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800c20e:	4b26      	ldr	r3, [pc, #152]	; (800c2a8 <vTaskDelete+0x104>)
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	3301      	adds	r3, #1
 800c214:	4a24      	ldr	r2, [pc, #144]	; (800c2a8 <vTaskDelete+0x104>)
 800c216:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800c218:	4b20      	ldr	r3, [pc, #128]	; (800c29c <vTaskDelete+0xf8>)
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	68fa      	ldr	r2, [r7, #12]
 800c21e:	429a      	cmp	r2, r3
 800c220:	d10b      	bne.n	800c23a <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	3304      	adds	r3, #4
 800c226:	4619      	mov	r1, r3
 800c228:	4820      	ldr	r0, [pc, #128]	; (800c2ac <vTaskDelete+0x108>)
 800c22a:	f7fe fdd5 	bl	800add8 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800c22e:	4b20      	ldr	r3, [pc, #128]	; (800c2b0 <vTaskDelete+0x10c>)
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	3301      	adds	r3, #1
 800c234:	4a1e      	ldr	r2, [pc, #120]	; (800c2b0 <vTaskDelete+0x10c>)
 800c236:	6013      	str	r3, [r2, #0]
 800c238:	e009      	b.n	800c24e <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800c23a:	4b1e      	ldr	r3, [pc, #120]	; (800c2b4 <vTaskDelete+0x110>)
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	3b01      	subs	r3, #1
 800c240:	4a1c      	ldr	r2, [pc, #112]	; (800c2b4 <vTaskDelete+0x110>)
 800c242:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 800c244:	68f8      	ldr	r0, [r7, #12]
 800c246:	f000 fc41 	bl	800cacc <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800c24a:	f000 fc6f 	bl	800cb2c <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 800c24e:	f001 f809 	bl	800d264 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800c252:	4b19      	ldr	r3, [pc, #100]	; (800c2b8 <vTaskDelete+0x114>)
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	2b00      	cmp	r3, #0
 800c258:	d01b      	beq.n	800c292 <vTaskDelete+0xee>
		{
			if( pxTCB == pxCurrentTCB )
 800c25a:	4b10      	ldr	r3, [pc, #64]	; (800c29c <vTaskDelete+0xf8>)
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	68fa      	ldr	r2, [r7, #12]
 800c260:	429a      	cmp	r2, r3
 800c262:	d116      	bne.n	800c292 <vTaskDelete+0xee>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800c264:	4b15      	ldr	r3, [pc, #84]	; (800c2bc <vTaskDelete+0x118>)
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d00a      	beq.n	800c282 <vTaskDelete+0xde>
	__asm volatile
 800c26c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c270:	f383 8811 	msr	BASEPRI, r3
 800c274:	f3bf 8f6f 	isb	sy
 800c278:	f3bf 8f4f 	dsb	sy
 800c27c:	60bb      	str	r3, [r7, #8]
}
 800c27e:	bf00      	nop
 800c280:	e7fe      	b.n	800c280 <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 800c282:	4b0f      	ldr	r3, [pc, #60]	; (800c2c0 <vTaskDelete+0x11c>)
 800c284:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c288:	601a      	str	r2, [r3, #0]
 800c28a:	f3bf 8f4f 	dsb	sy
 800c28e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c292:	bf00      	nop
 800c294:	3710      	adds	r7, #16
 800c296:	46bd      	mov	sp, r7
 800c298:	bd80      	pop	{r7, pc}
 800c29a:	bf00      	nop
 800c29c:	24000f10 	.word	0x24000f10
 800c2a0:	24000f14 	.word	0x24000f14
 800c2a4:	24001018 	.word	0x24001018
 800c2a8:	2400102c 	.word	0x2400102c
 800c2ac:	24000fe4 	.word	0x24000fe4
 800c2b0:	24000ff8 	.word	0x24000ff8
 800c2b4:	24001010 	.word	0x24001010
 800c2b8:	2400101c 	.word	0x2400101c
 800c2bc:	24001038 	.word	0x24001038
 800c2c0:	e000ed04 	.word	0xe000ed04

0800c2c4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c2c4:	b580      	push	{r7, lr}
 800c2c6:	b084      	sub	sp, #16
 800c2c8:	af00      	add	r7, sp, #0
 800c2ca:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c2cc:	2300      	movs	r3, #0
 800c2ce:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d017      	beq.n	800c306 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c2d6:	4b13      	ldr	r3, [pc, #76]	; (800c324 <vTaskDelay+0x60>)
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d00a      	beq.n	800c2f4 <vTaskDelay+0x30>
	__asm volatile
 800c2de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2e2:	f383 8811 	msr	BASEPRI, r3
 800c2e6:	f3bf 8f6f 	isb	sy
 800c2ea:	f3bf 8f4f 	dsb	sy
 800c2ee:	60bb      	str	r3, [r7, #8]
}
 800c2f0:	bf00      	nop
 800c2f2:	e7fe      	b.n	800c2f2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800c2f4:	f000 f87a 	bl	800c3ec <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c2f8:	2100      	movs	r1, #0
 800c2fa:	6878      	ldr	r0, [r7, #4]
 800c2fc:	f000 fdf2 	bl	800cee4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c300:	f000 f882 	bl	800c408 <xTaskResumeAll>
 800c304:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d107      	bne.n	800c31c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800c30c:	4b06      	ldr	r3, [pc, #24]	; (800c328 <vTaskDelay+0x64>)
 800c30e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c312:	601a      	str	r2, [r3, #0]
 800c314:	f3bf 8f4f 	dsb	sy
 800c318:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c31c:	bf00      	nop
 800c31e:	3710      	adds	r7, #16
 800c320:	46bd      	mov	sp, r7
 800c322:	bd80      	pop	{r7, pc}
 800c324:	24001038 	.word	0x24001038
 800c328:	e000ed04 	.word	0xe000ed04

0800c32c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c32c:	b580      	push	{r7, lr}
 800c32e:	b08a      	sub	sp, #40	; 0x28
 800c330:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c332:	2300      	movs	r3, #0
 800c334:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c336:	2300      	movs	r3, #0
 800c338:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c33a:	463a      	mov	r2, r7
 800c33c:	1d39      	adds	r1, r7, #4
 800c33e:	f107 0308 	add.w	r3, r7, #8
 800c342:	4618      	mov	r0, r3
 800c344:	f7f4 fba6 	bl	8000a94 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c348:	6839      	ldr	r1, [r7, #0]
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	68ba      	ldr	r2, [r7, #8]
 800c34e:	9202      	str	r2, [sp, #8]
 800c350:	9301      	str	r3, [sp, #4]
 800c352:	2300      	movs	r3, #0
 800c354:	9300      	str	r3, [sp, #0]
 800c356:	2300      	movs	r3, #0
 800c358:	460a      	mov	r2, r1
 800c35a:	491e      	ldr	r1, [pc, #120]	; (800c3d4 <vTaskStartScheduler+0xa8>)
 800c35c:	481e      	ldr	r0, [pc, #120]	; (800c3d8 <vTaskStartScheduler+0xac>)
 800c35e:	f7ff fd8d 	bl	800be7c <xTaskCreateStatic>
 800c362:	4603      	mov	r3, r0
 800c364:	4a1d      	ldr	r2, [pc, #116]	; (800c3dc <vTaskStartScheduler+0xb0>)
 800c366:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c368:	4b1c      	ldr	r3, [pc, #112]	; (800c3dc <vTaskStartScheduler+0xb0>)
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d002      	beq.n	800c376 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c370:	2301      	movs	r3, #1
 800c372:	617b      	str	r3, [r7, #20]
 800c374:	e001      	b.n	800c37a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c376:	2300      	movs	r3, #0
 800c378:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c37a:	697b      	ldr	r3, [r7, #20]
 800c37c:	2b01      	cmp	r3, #1
 800c37e:	d116      	bne.n	800c3ae <vTaskStartScheduler+0x82>
	__asm volatile
 800c380:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c384:	f383 8811 	msr	BASEPRI, r3
 800c388:	f3bf 8f6f 	isb	sy
 800c38c:	f3bf 8f4f 	dsb	sy
 800c390:	613b      	str	r3, [r7, #16]
}
 800c392:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c394:	4b12      	ldr	r3, [pc, #72]	; (800c3e0 <vTaskStartScheduler+0xb4>)
 800c396:	f04f 32ff 	mov.w	r2, #4294967295
 800c39a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c39c:	4b11      	ldr	r3, [pc, #68]	; (800c3e4 <vTaskStartScheduler+0xb8>)
 800c39e:	2201      	movs	r2, #1
 800c3a0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c3a2:	4b11      	ldr	r3, [pc, #68]	; (800c3e8 <vTaskStartScheduler+0xbc>)
 800c3a4:	2200      	movs	r2, #0
 800c3a6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c3a8:	f000 fe8a 	bl	800d0c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c3ac:	e00e      	b.n	800c3cc <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c3ae:	697b      	ldr	r3, [r7, #20]
 800c3b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c3b4:	d10a      	bne.n	800c3cc <vTaskStartScheduler+0xa0>
	__asm volatile
 800c3b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3ba:	f383 8811 	msr	BASEPRI, r3
 800c3be:	f3bf 8f6f 	isb	sy
 800c3c2:	f3bf 8f4f 	dsb	sy
 800c3c6:	60fb      	str	r3, [r7, #12]
}
 800c3c8:	bf00      	nop
 800c3ca:	e7fe      	b.n	800c3ca <vTaskStartScheduler+0x9e>
}
 800c3cc:	bf00      	nop
 800c3ce:	3718      	adds	r7, #24
 800c3d0:	46bd      	mov	sp, r7
 800c3d2:	bd80      	pop	{r7, pc}
 800c3d4:	08023290 	.word	0x08023290
 800c3d8:	0800c9c1 	.word	0x0800c9c1
 800c3dc:	24001034 	.word	0x24001034
 800c3e0:	24001030 	.word	0x24001030
 800c3e4:	2400101c 	.word	0x2400101c
 800c3e8:	24001014 	.word	0x24001014

0800c3ec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c3ec:	b480      	push	{r7}
 800c3ee:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800c3f0:	4b04      	ldr	r3, [pc, #16]	; (800c404 <vTaskSuspendAll+0x18>)
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	3301      	adds	r3, #1
 800c3f6:	4a03      	ldr	r2, [pc, #12]	; (800c404 <vTaskSuspendAll+0x18>)
 800c3f8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800c3fa:	bf00      	nop
 800c3fc:	46bd      	mov	sp, r7
 800c3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c402:	4770      	bx	lr
 800c404:	24001038 	.word	0x24001038

0800c408 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c408:	b580      	push	{r7, lr}
 800c40a:	b084      	sub	sp, #16
 800c40c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c40e:	2300      	movs	r3, #0
 800c410:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c412:	2300      	movs	r3, #0
 800c414:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c416:	4b41      	ldr	r3, [pc, #260]	; (800c51c <xTaskResumeAll+0x114>)
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d10a      	bne.n	800c434 <xTaskResumeAll+0x2c>
	__asm volatile
 800c41e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c422:	f383 8811 	msr	BASEPRI, r3
 800c426:	f3bf 8f6f 	isb	sy
 800c42a:	f3bf 8f4f 	dsb	sy
 800c42e:	603b      	str	r3, [r7, #0]
}
 800c430:	bf00      	nop
 800c432:	e7fe      	b.n	800c432 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c434:	f000 fee6 	bl	800d204 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c438:	4b38      	ldr	r3, [pc, #224]	; (800c51c <xTaskResumeAll+0x114>)
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	3b01      	subs	r3, #1
 800c43e:	4a37      	ldr	r2, [pc, #220]	; (800c51c <xTaskResumeAll+0x114>)
 800c440:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c442:	4b36      	ldr	r3, [pc, #216]	; (800c51c <xTaskResumeAll+0x114>)
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	2b00      	cmp	r3, #0
 800c448:	d161      	bne.n	800c50e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c44a:	4b35      	ldr	r3, [pc, #212]	; (800c520 <xTaskResumeAll+0x118>)
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d05d      	beq.n	800c50e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c452:	e02e      	b.n	800c4b2 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c454:	4b33      	ldr	r3, [pc, #204]	; (800c524 <xTaskResumeAll+0x11c>)
 800c456:	68db      	ldr	r3, [r3, #12]
 800c458:	68db      	ldr	r3, [r3, #12]
 800c45a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	3318      	adds	r3, #24
 800c460:	4618      	mov	r0, r3
 800c462:	f7fe fd16 	bl	800ae92 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	3304      	adds	r3, #4
 800c46a:	4618      	mov	r0, r3
 800c46c:	f7fe fd11 	bl	800ae92 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c474:	2201      	movs	r2, #1
 800c476:	409a      	lsls	r2, r3
 800c478:	4b2b      	ldr	r3, [pc, #172]	; (800c528 <xTaskResumeAll+0x120>)
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	4313      	orrs	r3, r2
 800c47e:	4a2a      	ldr	r2, [pc, #168]	; (800c528 <xTaskResumeAll+0x120>)
 800c480:	6013      	str	r3, [r2, #0]
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c486:	4613      	mov	r3, r2
 800c488:	009b      	lsls	r3, r3, #2
 800c48a:	4413      	add	r3, r2
 800c48c:	009b      	lsls	r3, r3, #2
 800c48e:	4a27      	ldr	r2, [pc, #156]	; (800c52c <xTaskResumeAll+0x124>)
 800c490:	441a      	add	r2, r3
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	3304      	adds	r3, #4
 800c496:	4619      	mov	r1, r3
 800c498:	4610      	mov	r0, r2
 800c49a:	f7fe fc9d 	bl	800add8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4a2:	4b23      	ldr	r3, [pc, #140]	; (800c530 <xTaskResumeAll+0x128>)
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4a8:	429a      	cmp	r2, r3
 800c4aa:	d302      	bcc.n	800c4b2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800c4ac:	4b21      	ldr	r3, [pc, #132]	; (800c534 <xTaskResumeAll+0x12c>)
 800c4ae:	2201      	movs	r2, #1
 800c4b0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c4b2:	4b1c      	ldr	r3, [pc, #112]	; (800c524 <xTaskResumeAll+0x11c>)
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d1cc      	bne.n	800c454 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d001      	beq.n	800c4c4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c4c0:	f000 fb34 	bl	800cb2c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800c4c4:	4b1c      	ldr	r3, [pc, #112]	; (800c538 <xTaskResumeAll+0x130>)
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d010      	beq.n	800c4f2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c4d0:	f000 f858 	bl	800c584 <xTaskIncrementTick>
 800c4d4:	4603      	mov	r3, r0
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d002      	beq.n	800c4e0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800c4da:	4b16      	ldr	r3, [pc, #88]	; (800c534 <xTaskResumeAll+0x12c>)
 800c4dc:	2201      	movs	r2, #1
 800c4de:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	3b01      	subs	r3, #1
 800c4e4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d1f1      	bne.n	800c4d0 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800c4ec:	4b12      	ldr	r3, [pc, #72]	; (800c538 <xTaskResumeAll+0x130>)
 800c4ee:	2200      	movs	r2, #0
 800c4f0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c4f2:	4b10      	ldr	r3, [pc, #64]	; (800c534 <xTaskResumeAll+0x12c>)
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d009      	beq.n	800c50e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c4fa:	2301      	movs	r3, #1
 800c4fc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c4fe:	4b0f      	ldr	r3, [pc, #60]	; (800c53c <xTaskResumeAll+0x134>)
 800c500:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c504:	601a      	str	r2, [r3, #0]
 800c506:	f3bf 8f4f 	dsb	sy
 800c50a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c50e:	f000 fea9 	bl	800d264 <vPortExitCritical>

	return xAlreadyYielded;
 800c512:	68bb      	ldr	r3, [r7, #8]
}
 800c514:	4618      	mov	r0, r3
 800c516:	3710      	adds	r7, #16
 800c518:	46bd      	mov	sp, r7
 800c51a:	bd80      	pop	{r7, pc}
 800c51c:	24001038 	.word	0x24001038
 800c520:	24001010 	.word	0x24001010
 800c524:	24000fd0 	.word	0x24000fd0
 800c528:	24001018 	.word	0x24001018
 800c52c:	24000f14 	.word	0x24000f14
 800c530:	24000f10 	.word	0x24000f10
 800c534:	24001024 	.word	0x24001024
 800c538:	24001020 	.word	0x24001020
 800c53c:	e000ed04 	.word	0xe000ed04

0800c540 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c540:	b480      	push	{r7}
 800c542:	b083      	sub	sp, #12
 800c544:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c546:	4b05      	ldr	r3, [pc, #20]	; (800c55c <xTaskGetTickCount+0x1c>)
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c54c:	687b      	ldr	r3, [r7, #4]
}
 800c54e:	4618      	mov	r0, r3
 800c550:	370c      	adds	r7, #12
 800c552:	46bd      	mov	sp, r7
 800c554:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c558:	4770      	bx	lr
 800c55a:	bf00      	nop
 800c55c:	24001014 	.word	0x24001014

0800c560 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800c560:	b580      	push	{r7, lr}
 800c562:	b082      	sub	sp, #8
 800c564:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c566:	f000 ff2f 	bl	800d3c8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800c56a:	2300      	movs	r3, #0
 800c56c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800c56e:	4b04      	ldr	r3, [pc, #16]	; (800c580 <xTaskGetTickCountFromISR+0x20>)
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c574:	683b      	ldr	r3, [r7, #0]
}
 800c576:	4618      	mov	r0, r3
 800c578:	3708      	adds	r7, #8
 800c57a:	46bd      	mov	sp, r7
 800c57c:	bd80      	pop	{r7, pc}
 800c57e:	bf00      	nop
 800c580:	24001014 	.word	0x24001014

0800c584 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c584:	b580      	push	{r7, lr}
 800c586:	b086      	sub	sp, #24
 800c588:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c58a:	2300      	movs	r3, #0
 800c58c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c58e:	4b4e      	ldr	r3, [pc, #312]	; (800c6c8 <xTaskIncrementTick+0x144>)
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	2b00      	cmp	r3, #0
 800c594:	f040 808e 	bne.w	800c6b4 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c598:	4b4c      	ldr	r3, [pc, #304]	; (800c6cc <xTaskIncrementTick+0x148>)
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	3301      	adds	r3, #1
 800c59e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c5a0:	4a4a      	ldr	r2, [pc, #296]	; (800c6cc <xTaskIncrementTick+0x148>)
 800c5a2:	693b      	ldr	r3, [r7, #16]
 800c5a4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c5a6:	693b      	ldr	r3, [r7, #16]
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d120      	bne.n	800c5ee <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800c5ac:	4b48      	ldr	r3, [pc, #288]	; (800c6d0 <xTaskIncrementTick+0x14c>)
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d00a      	beq.n	800c5cc <xTaskIncrementTick+0x48>
	__asm volatile
 800c5b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5ba:	f383 8811 	msr	BASEPRI, r3
 800c5be:	f3bf 8f6f 	isb	sy
 800c5c2:	f3bf 8f4f 	dsb	sy
 800c5c6:	603b      	str	r3, [r7, #0]
}
 800c5c8:	bf00      	nop
 800c5ca:	e7fe      	b.n	800c5ca <xTaskIncrementTick+0x46>
 800c5cc:	4b40      	ldr	r3, [pc, #256]	; (800c6d0 <xTaskIncrementTick+0x14c>)
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	60fb      	str	r3, [r7, #12]
 800c5d2:	4b40      	ldr	r3, [pc, #256]	; (800c6d4 <xTaskIncrementTick+0x150>)
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	4a3e      	ldr	r2, [pc, #248]	; (800c6d0 <xTaskIncrementTick+0x14c>)
 800c5d8:	6013      	str	r3, [r2, #0]
 800c5da:	4a3e      	ldr	r2, [pc, #248]	; (800c6d4 <xTaskIncrementTick+0x150>)
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	6013      	str	r3, [r2, #0]
 800c5e0:	4b3d      	ldr	r3, [pc, #244]	; (800c6d8 <xTaskIncrementTick+0x154>)
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	3301      	adds	r3, #1
 800c5e6:	4a3c      	ldr	r2, [pc, #240]	; (800c6d8 <xTaskIncrementTick+0x154>)
 800c5e8:	6013      	str	r3, [r2, #0]
 800c5ea:	f000 fa9f 	bl	800cb2c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c5ee:	4b3b      	ldr	r3, [pc, #236]	; (800c6dc <xTaskIncrementTick+0x158>)
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	693a      	ldr	r2, [r7, #16]
 800c5f4:	429a      	cmp	r2, r3
 800c5f6:	d348      	bcc.n	800c68a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c5f8:	4b35      	ldr	r3, [pc, #212]	; (800c6d0 <xTaskIncrementTick+0x14c>)
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d104      	bne.n	800c60c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c602:	4b36      	ldr	r3, [pc, #216]	; (800c6dc <xTaskIncrementTick+0x158>)
 800c604:	f04f 32ff 	mov.w	r2, #4294967295
 800c608:	601a      	str	r2, [r3, #0]
					break;
 800c60a:	e03e      	b.n	800c68a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c60c:	4b30      	ldr	r3, [pc, #192]	; (800c6d0 <xTaskIncrementTick+0x14c>)
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	68db      	ldr	r3, [r3, #12]
 800c612:	68db      	ldr	r3, [r3, #12]
 800c614:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c616:	68bb      	ldr	r3, [r7, #8]
 800c618:	685b      	ldr	r3, [r3, #4]
 800c61a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c61c:	693a      	ldr	r2, [r7, #16]
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	429a      	cmp	r2, r3
 800c622:	d203      	bcs.n	800c62c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c624:	4a2d      	ldr	r2, [pc, #180]	; (800c6dc <xTaskIncrementTick+0x158>)
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c62a:	e02e      	b.n	800c68a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c62c:	68bb      	ldr	r3, [r7, #8]
 800c62e:	3304      	adds	r3, #4
 800c630:	4618      	mov	r0, r3
 800c632:	f7fe fc2e 	bl	800ae92 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c636:	68bb      	ldr	r3, [r7, #8]
 800c638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d004      	beq.n	800c648 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c63e:	68bb      	ldr	r3, [r7, #8]
 800c640:	3318      	adds	r3, #24
 800c642:	4618      	mov	r0, r3
 800c644:	f7fe fc25 	bl	800ae92 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c648:	68bb      	ldr	r3, [r7, #8]
 800c64a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c64c:	2201      	movs	r2, #1
 800c64e:	409a      	lsls	r2, r3
 800c650:	4b23      	ldr	r3, [pc, #140]	; (800c6e0 <xTaskIncrementTick+0x15c>)
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	4313      	orrs	r3, r2
 800c656:	4a22      	ldr	r2, [pc, #136]	; (800c6e0 <xTaskIncrementTick+0x15c>)
 800c658:	6013      	str	r3, [r2, #0]
 800c65a:	68bb      	ldr	r3, [r7, #8]
 800c65c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c65e:	4613      	mov	r3, r2
 800c660:	009b      	lsls	r3, r3, #2
 800c662:	4413      	add	r3, r2
 800c664:	009b      	lsls	r3, r3, #2
 800c666:	4a1f      	ldr	r2, [pc, #124]	; (800c6e4 <xTaskIncrementTick+0x160>)
 800c668:	441a      	add	r2, r3
 800c66a:	68bb      	ldr	r3, [r7, #8]
 800c66c:	3304      	adds	r3, #4
 800c66e:	4619      	mov	r1, r3
 800c670:	4610      	mov	r0, r2
 800c672:	f7fe fbb1 	bl	800add8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c676:	68bb      	ldr	r3, [r7, #8]
 800c678:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c67a:	4b1b      	ldr	r3, [pc, #108]	; (800c6e8 <xTaskIncrementTick+0x164>)
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c680:	429a      	cmp	r2, r3
 800c682:	d3b9      	bcc.n	800c5f8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800c684:	2301      	movs	r3, #1
 800c686:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c688:	e7b6      	b.n	800c5f8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c68a:	4b17      	ldr	r3, [pc, #92]	; (800c6e8 <xTaskIncrementTick+0x164>)
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c690:	4914      	ldr	r1, [pc, #80]	; (800c6e4 <xTaskIncrementTick+0x160>)
 800c692:	4613      	mov	r3, r2
 800c694:	009b      	lsls	r3, r3, #2
 800c696:	4413      	add	r3, r2
 800c698:	009b      	lsls	r3, r3, #2
 800c69a:	440b      	add	r3, r1
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	2b01      	cmp	r3, #1
 800c6a0:	d901      	bls.n	800c6a6 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800c6a2:	2301      	movs	r3, #1
 800c6a4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800c6a6:	4b11      	ldr	r3, [pc, #68]	; (800c6ec <xTaskIncrementTick+0x168>)
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d007      	beq.n	800c6be <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800c6ae:	2301      	movs	r3, #1
 800c6b0:	617b      	str	r3, [r7, #20]
 800c6b2:	e004      	b.n	800c6be <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800c6b4:	4b0e      	ldr	r3, [pc, #56]	; (800c6f0 <xTaskIncrementTick+0x16c>)
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	3301      	adds	r3, #1
 800c6ba:	4a0d      	ldr	r2, [pc, #52]	; (800c6f0 <xTaskIncrementTick+0x16c>)
 800c6bc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800c6be:	697b      	ldr	r3, [r7, #20]
}
 800c6c0:	4618      	mov	r0, r3
 800c6c2:	3718      	adds	r7, #24
 800c6c4:	46bd      	mov	sp, r7
 800c6c6:	bd80      	pop	{r7, pc}
 800c6c8:	24001038 	.word	0x24001038
 800c6cc:	24001014 	.word	0x24001014
 800c6d0:	24000fc8 	.word	0x24000fc8
 800c6d4:	24000fcc 	.word	0x24000fcc
 800c6d8:	24001028 	.word	0x24001028
 800c6dc:	24001030 	.word	0x24001030
 800c6e0:	24001018 	.word	0x24001018
 800c6e4:	24000f14 	.word	0x24000f14
 800c6e8:	24000f10 	.word	0x24000f10
 800c6ec:	24001024 	.word	0x24001024
 800c6f0:	24001020 	.word	0x24001020

0800c6f4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c6f4:	b480      	push	{r7}
 800c6f6:	b087      	sub	sp, #28
 800c6f8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c6fa:	4b27      	ldr	r3, [pc, #156]	; (800c798 <vTaskSwitchContext+0xa4>)
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d003      	beq.n	800c70a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c702:	4b26      	ldr	r3, [pc, #152]	; (800c79c <vTaskSwitchContext+0xa8>)
 800c704:	2201      	movs	r2, #1
 800c706:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c708:	e03f      	b.n	800c78a <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800c70a:	4b24      	ldr	r3, [pc, #144]	; (800c79c <vTaskSwitchContext+0xa8>)
 800c70c:	2200      	movs	r2, #0
 800c70e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c710:	4b23      	ldr	r3, [pc, #140]	; (800c7a0 <vTaskSwitchContext+0xac>)
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	fab3 f383 	clz	r3, r3
 800c71c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800c71e:	7afb      	ldrb	r3, [r7, #11]
 800c720:	f1c3 031f 	rsb	r3, r3, #31
 800c724:	617b      	str	r3, [r7, #20]
 800c726:	491f      	ldr	r1, [pc, #124]	; (800c7a4 <vTaskSwitchContext+0xb0>)
 800c728:	697a      	ldr	r2, [r7, #20]
 800c72a:	4613      	mov	r3, r2
 800c72c:	009b      	lsls	r3, r3, #2
 800c72e:	4413      	add	r3, r2
 800c730:	009b      	lsls	r3, r3, #2
 800c732:	440b      	add	r3, r1
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	2b00      	cmp	r3, #0
 800c738:	d10a      	bne.n	800c750 <vTaskSwitchContext+0x5c>
	__asm volatile
 800c73a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c73e:	f383 8811 	msr	BASEPRI, r3
 800c742:	f3bf 8f6f 	isb	sy
 800c746:	f3bf 8f4f 	dsb	sy
 800c74a:	607b      	str	r3, [r7, #4]
}
 800c74c:	bf00      	nop
 800c74e:	e7fe      	b.n	800c74e <vTaskSwitchContext+0x5a>
 800c750:	697a      	ldr	r2, [r7, #20]
 800c752:	4613      	mov	r3, r2
 800c754:	009b      	lsls	r3, r3, #2
 800c756:	4413      	add	r3, r2
 800c758:	009b      	lsls	r3, r3, #2
 800c75a:	4a12      	ldr	r2, [pc, #72]	; (800c7a4 <vTaskSwitchContext+0xb0>)
 800c75c:	4413      	add	r3, r2
 800c75e:	613b      	str	r3, [r7, #16]
 800c760:	693b      	ldr	r3, [r7, #16]
 800c762:	685b      	ldr	r3, [r3, #4]
 800c764:	685a      	ldr	r2, [r3, #4]
 800c766:	693b      	ldr	r3, [r7, #16]
 800c768:	605a      	str	r2, [r3, #4]
 800c76a:	693b      	ldr	r3, [r7, #16]
 800c76c:	685a      	ldr	r2, [r3, #4]
 800c76e:	693b      	ldr	r3, [r7, #16]
 800c770:	3308      	adds	r3, #8
 800c772:	429a      	cmp	r2, r3
 800c774:	d104      	bne.n	800c780 <vTaskSwitchContext+0x8c>
 800c776:	693b      	ldr	r3, [r7, #16]
 800c778:	685b      	ldr	r3, [r3, #4]
 800c77a:	685a      	ldr	r2, [r3, #4]
 800c77c:	693b      	ldr	r3, [r7, #16]
 800c77e:	605a      	str	r2, [r3, #4]
 800c780:	693b      	ldr	r3, [r7, #16]
 800c782:	685b      	ldr	r3, [r3, #4]
 800c784:	68db      	ldr	r3, [r3, #12]
 800c786:	4a08      	ldr	r2, [pc, #32]	; (800c7a8 <vTaskSwitchContext+0xb4>)
 800c788:	6013      	str	r3, [r2, #0]
}
 800c78a:	bf00      	nop
 800c78c:	371c      	adds	r7, #28
 800c78e:	46bd      	mov	sp, r7
 800c790:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c794:	4770      	bx	lr
 800c796:	bf00      	nop
 800c798:	24001038 	.word	0x24001038
 800c79c:	24001024 	.word	0x24001024
 800c7a0:	24001018 	.word	0x24001018
 800c7a4:	24000f14 	.word	0x24000f14
 800c7a8:	24000f10 	.word	0x24000f10

0800c7ac <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c7ac:	b580      	push	{r7, lr}
 800c7ae:	b084      	sub	sp, #16
 800c7b0:	af00      	add	r7, sp, #0
 800c7b2:	6078      	str	r0, [r7, #4]
 800c7b4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d10a      	bne.n	800c7d2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800c7bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7c0:	f383 8811 	msr	BASEPRI, r3
 800c7c4:	f3bf 8f6f 	isb	sy
 800c7c8:	f3bf 8f4f 	dsb	sy
 800c7cc:	60fb      	str	r3, [r7, #12]
}
 800c7ce:	bf00      	nop
 800c7d0:	e7fe      	b.n	800c7d0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c7d2:	4b07      	ldr	r3, [pc, #28]	; (800c7f0 <vTaskPlaceOnEventList+0x44>)
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	3318      	adds	r3, #24
 800c7d8:	4619      	mov	r1, r3
 800c7da:	6878      	ldr	r0, [r7, #4]
 800c7dc:	f7fe fb20 	bl	800ae20 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c7e0:	2101      	movs	r1, #1
 800c7e2:	6838      	ldr	r0, [r7, #0]
 800c7e4:	f000 fb7e 	bl	800cee4 <prvAddCurrentTaskToDelayedList>
}
 800c7e8:	bf00      	nop
 800c7ea:	3710      	adds	r7, #16
 800c7ec:	46bd      	mov	sp, r7
 800c7ee:	bd80      	pop	{r7, pc}
 800c7f0:	24000f10 	.word	0x24000f10

0800c7f4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c7f4:	b580      	push	{r7, lr}
 800c7f6:	b086      	sub	sp, #24
 800c7f8:	af00      	add	r7, sp, #0
 800c7fa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	68db      	ldr	r3, [r3, #12]
 800c800:	68db      	ldr	r3, [r3, #12]
 800c802:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c804:	693b      	ldr	r3, [r7, #16]
 800c806:	2b00      	cmp	r3, #0
 800c808:	d10a      	bne.n	800c820 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800c80a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c80e:	f383 8811 	msr	BASEPRI, r3
 800c812:	f3bf 8f6f 	isb	sy
 800c816:	f3bf 8f4f 	dsb	sy
 800c81a:	60fb      	str	r3, [r7, #12]
}
 800c81c:	bf00      	nop
 800c81e:	e7fe      	b.n	800c81e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c820:	693b      	ldr	r3, [r7, #16]
 800c822:	3318      	adds	r3, #24
 800c824:	4618      	mov	r0, r3
 800c826:	f7fe fb34 	bl	800ae92 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c82a:	4b1d      	ldr	r3, [pc, #116]	; (800c8a0 <xTaskRemoveFromEventList+0xac>)
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	2b00      	cmp	r3, #0
 800c830:	d11c      	bne.n	800c86c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c832:	693b      	ldr	r3, [r7, #16]
 800c834:	3304      	adds	r3, #4
 800c836:	4618      	mov	r0, r3
 800c838:	f7fe fb2b 	bl	800ae92 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c83c:	693b      	ldr	r3, [r7, #16]
 800c83e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c840:	2201      	movs	r2, #1
 800c842:	409a      	lsls	r2, r3
 800c844:	4b17      	ldr	r3, [pc, #92]	; (800c8a4 <xTaskRemoveFromEventList+0xb0>)
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	4313      	orrs	r3, r2
 800c84a:	4a16      	ldr	r2, [pc, #88]	; (800c8a4 <xTaskRemoveFromEventList+0xb0>)
 800c84c:	6013      	str	r3, [r2, #0]
 800c84e:	693b      	ldr	r3, [r7, #16]
 800c850:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c852:	4613      	mov	r3, r2
 800c854:	009b      	lsls	r3, r3, #2
 800c856:	4413      	add	r3, r2
 800c858:	009b      	lsls	r3, r3, #2
 800c85a:	4a13      	ldr	r2, [pc, #76]	; (800c8a8 <xTaskRemoveFromEventList+0xb4>)
 800c85c:	441a      	add	r2, r3
 800c85e:	693b      	ldr	r3, [r7, #16]
 800c860:	3304      	adds	r3, #4
 800c862:	4619      	mov	r1, r3
 800c864:	4610      	mov	r0, r2
 800c866:	f7fe fab7 	bl	800add8 <vListInsertEnd>
 800c86a:	e005      	b.n	800c878 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c86c:	693b      	ldr	r3, [r7, #16]
 800c86e:	3318      	adds	r3, #24
 800c870:	4619      	mov	r1, r3
 800c872:	480e      	ldr	r0, [pc, #56]	; (800c8ac <xTaskRemoveFromEventList+0xb8>)
 800c874:	f7fe fab0 	bl	800add8 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c878:	693b      	ldr	r3, [r7, #16]
 800c87a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c87c:	4b0c      	ldr	r3, [pc, #48]	; (800c8b0 <xTaskRemoveFromEventList+0xbc>)
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c882:	429a      	cmp	r2, r3
 800c884:	d905      	bls.n	800c892 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c886:	2301      	movs	r3, #1
 800c888:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c88a:	4b0a      	ldr	r3, [pc, #40]	; (800c8b4 <xTaskRemoveFromEventList+0xc0>)
 800c88c:	2201      	movs	r2, #1
 800c88e:	601a      	str	r2, [r3, #0]
 800c890:	e001      	b.n	800c896 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800c892:	2300      	movs	r3, #0
 800c894:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c896:	697b      	ldr	r3, [r7, #20]
}
 800c898:	4618      	mov	r0, r3
 800c89a:	3718      	adds	r7, #24
 800c89c:	46bd      	mov	sp, r7
 800c89e:	bd80      	pop	{r7, pc}
 800c8a0:	24001038 	.word	0x24001038
 800c8a4:	24001018 	.word	0x24001018
 800c8a8:	24000f14 	.word	0x24000f14
 800c8ac:	24000fd0 	.word	0x24000fd0
 800c8b0:	24000f10 	.word	0x24000f10
 800c8b4:	24001024 	.word	0x24001024

0800c8b8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c8b8:	b480      	push	{r7}
 800c8ba:	b083      	sub	sp, #12
 800c8bc:	af00      	add	r7, sp, #0
 800c8be:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c8c0:	4b06      	ldr	r3, [pc, #24]	; (800c8dc <vTaskInternalSetTimeOutState+0x24>)
 800c8c2:	681a      	ldr	r2, [r3, #0]
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c8c8:	4b05      	ldr	r3, [pc, #20]	; (800c8e0 <vTaskInternalSetTimeOutState+0x28>)
 800c8ca:	681a      	ldr	r2, [r3, #0]
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	605a      	str	r2, [r3, #4]
}
 800c8d0:	bf00      	nop
 800c8d2:	370c      	adds	r7, #12
 800c8d4:	46bd      	mov	sp, r7
 800c8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8da:	4770      	bx	lr
 800c8dc:	24001028 	.word	0x24001028
 800c8e0:	24001014 	.word	0x24001014

0800c8e4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c8e4:	b580      	push	{r7, lr}
 800c8e6:	b088      	sub	sp, #32
 800c8e8:	af00      	add	r7, sp, #0
 800c8ea:	6078      	str	r0, [r7, #4]
 800c8ec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d10a      	bne.n	800c90a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800c8f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8f8:	f383 8811 	msr	BASEPRI, r3
 800c8fc:	f3bf 8f6f 	isb	sy
 800c900:	f3bf 8f4f 	dsb	sy
 800c904:	613b      	str	r3, [r7, #16]
}
 800c906:	bf00      	nop
 800c908:	e7fe      	b.n	800c908 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c90a:	683b      	ldr	r3, [r7, #0]
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d10a      	bne.n	800c926 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800c910:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c914:	f383 8811 	msr	BASEPRI, r3
 800c918:	f3bf 8f6f 	isb	sy
 800c91c:	f3bf 8f4f 	dsb	sy
 800c920:	60fb      	str	r3, [r7, #12]
}
 800c922:	bf00      	nop
 800c924:	e7fe      	b.n	800c924 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800c926:	f000 fc6d 	bl	800d204 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c92a:	4b1d      	ldr	r3, [pc, #116]	; (800c9a0 <xTaskCheckForTimeOut+0xbc>)
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	685b      	ldr	r3, [r3, #4]
 800c934:	69ba      	ldr	r2, [r7, #24]
 800c936:	1ad3      	subs	r3, r2, r3
 800c938:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c93a:	683b      	ldr	r3, [r7, #0]
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c942:	d102      	bne.n	800c94a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c944:	2300      	movs	r3, #0
 800c946:	61fb      	str	r3, [r7, #28]
 800c948:	e023      	b.n	800c992 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	681a      	ldr	r2, [r3, #0]
 800c94e:	4b15      	ldr	r3, [pc, #84]	; (800c9a4 <xTaskCheckForTimeOut+0xc0>)
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	429a      	cmp	r2, r3
 800c954:	d007      	beq.n	800c966 <xTaskCheckForTimeOut+0x82>
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	685b      	ldr	r3, [r3, #4]
 800c95a:	69ba      	ldr	r2, [r7, #24]
 800c95c:	429a      	cmp	r2, r3
 800c95e:	d302      	bcc.n	800c966 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c960:	2301      	movs	r3, #1
 800c962:	61fb      	str	r3, [r7, #28]
 800c964:	e015      	b.n	800c992 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c966:	683b      	ldr	r3, [r7, #0]
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	697a      	ldr	r2, [r7, #20]
 800c96c:	429a      	cmp	r2, r3
 800c96e:	d20b      	bcs.n	800c988 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c970:	683b      	ldr	r3, [r7, #0]
 800c972:	681a      	ldr	r2, [r3, #0]
 800c974:	697b      	ldr	r3, [r7, #20]
 800c976:	1ad2      	subs	r2, r2, r3
 800c978:	683b      	ldr	r3, [r7, #0]
 800c97a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c97c:	6878      	ldr	r0, [r7, #4]
 800c97e:	f7ff ff9b 	bl	800c8b8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c982:	2300      	movs	r3, #0
 800c984:	61fb      	str	r3, [r7, #28]
 800c986:	e004      	b.n	800c992 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800c988:	683b      	ldr	r3, [r7, #0]
 800c98a:	2200      	movs	r2, #0
 800c98c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c98e:	2301      	movs	r3, #1
 800c990:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c992:	f000 fc67 	bl	800d264 <vPortExitCritical>

	return xReturn;
 800c996:	69fb      	ldr	r3, [r7, #28]
}
 800c998:	4618      	mov	r0, r3
 800c99a:	3720      	adds	r7, #32
 800c99c:	46bd      	mov	sp, r7
 800c99e:	bd80      	pop	{r7, pc}
 800c9a0:	24001014 	.word	0x24001014
 800c9a4:	24001028 	.word	0x24001028

0800c9a8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c9a8:	b480      	push	{r7}
 800c9aa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c9ac:	4b03      	ldr	r3, [pc, #12]	; (800c9bc <vTaskMissedYield+0x14>)
 800c9ae:	2201      	movs	r2, #1
 800c9b0:	601a      	str	r2, [r3, #0]
}
 800c9b2:	bf00      	nop
 800c9b4:	46bd      	mov	sp, r7
 800c9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ba:	4770      	bx	lr
 800c9bc:	24001024 	.word	0x24001024

0800c9c0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c9c0:	b580      	push	{r7, lr}
 800c9c2:	b082      	sub	sp, #8
 800c9c4:	af00      	add	r7, sp, #0
 800c9c6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c9c8:	f000 f852 	bl	800ca70 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c9cc:	4b06      	ldr	r3, [pc, #24]	; (800c9e8 <prvIdleTask+0x28>)
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	2b01      	cmp	r3, #1
 800c9d2:	d9f9      	bls.n	800c9c8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800c9d4:	4b05      	ldr	r3, [pc, #20]	; (800c9ec <prvIdleTask+0x2c>)
 800c9d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c9da:	601a      	str	r2, [r3, #0]
 800c9dc:	f3bf 8f4f 	dsb	sy
 800c9e0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c9e4:	e7f0      	b.n	800c9c8 <prvIdleTask+0x8>
 800c9e6:	bf00      	nop
 800c9e8:	24000f14 	.word	0x24000f14
 800c9ec:	e000ed04 	.word	0xe000ed04

0800c9f0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c9f0:	b580      	push	{r7, lr}
 800c9f2:	b082      	sub	sp, #8
 800c9f4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c9f6:	2300      	movs	r3, #0
 800c9f8:	607b      	str	r3, [r7, #4]
 800c9fa:	e00c      	b.n	800ca16 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c9fc:	687a      	ldr	r2, [r7, #4]
 800c9fe:	4613      	mov	r3, r2
 800ca00:	009b      	lsls	r3, r3, #2
 800ca02:	4413      	add	r3, r2
 800ca04:	009b      	lsls	r3, r3, #2
 800ca06:	4a12      	ldr	r2, [pc, #72]	; (800ca50 <prvInitialiseTaskLists+0x60>)
 800ca08:	4413      	add	r3, r2
 800ca0a:	4618      	mov	r0, r3
 800ca0c:	f7fe f9b7 	bl	800ad7e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	3301      	adds	r3, #1
 800ca14:	607b      	str	r3, [r7, #4]
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	2b06      	cmp	r3, #6
 800ca1a:	d9ef      	bls.n	800c9fc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ca1c:	480d      	ldr	r0, [pc, #52]	; (800ca54 <prvInitialiseTaskLists+0x64>)
 800ca1e:	f7fe f9ae 	bl	800ad7e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ca22:	480d      	ldr	r0, [pc, #52]	; (800ca58 <prvInitialiseTaskLists+0x68>)
 800ca24:	f7fe f9ab 	bl	800ad7e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ca28:	480c      	ldr	r0, [pc, #48]	; (800ca5c <prvInitialiseTaskLists+0x6c>)
 800ca2a:	f7fe f9a8 	bl	800ad7e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ca2e:	480c      	ldr	r0, [pc, #48]	; (800ca60 <prvInitialiseTaskLists+0x70>)
 800ca30:	f7fe f9a5 	bl	800ad7e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ca34:	480b      	ldr	r0, [pc, #44]	; (800ca64 <prvInitialiseTaskLists+0x74>)
 800ca36:	f7fe f9a2 	bl	800ad7e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ca3a:	4b0b      	ldr	r3, [pc, #44]	; (800ca68 <prvInitialiseTaskLists+0x78>)
 800ca3c:	4a05      	ldr	r2, [pc, #20]	; (800ca54 <prvInitialiseTaskLists+0x64>)
 800ca3e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ca40:	4b0a      	ldr	r3, [pc, #40]	; (800ca6c <prvInitialiseTaskLists+0x7c>)
 800ca42:	4a05      	ldr	r2, [pc, #20]	; (800ca58 <prvInitialiseTaskLists+0x68>)
 800ca44:	601a      	str	r2, [r3, #0]
}
 800ca46:	bf00      	nop
 800ca48:	3708      	adds	r7, #8
 800ca4a:	46bd      	mov	sp, r7
 800ca4c:	bd80      	pop	{r7, pc}
 800ca4e:	bf00      	nop
 800ca50:	24000f14 	.word	0x24000f14
 800ca54:	24000fa0 	.word	0x24000fa0
 800ca58:	24000fb4 	.word	0x24000fb4
 800ca5c:	24000fd0 	.word	0x24000fd0
 800ca60:	24000fe4 	.word	0x24000fe4
 800ca64:	24000ffc 	.word	0x24000ffc
 800ca68:	24000fc8 	.word	0x24000fc8
 800ca6c:	24000fcc 	.word	0x24000fcc

0800ca70 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ca70:	b580      	push	{r7, lr}
 800ca72:	b082      	sub	sp, #8
 800ca74:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ca76:	e019      	b.n	800caac <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ca78:	f000 fbc4 	bl	800d204 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ca7c:	4b10      	ldr	r3, [pc, #64]	; (800cac0 <prvCheckTasksWaitingTermination+0x50>)
 800ca7e:	68db      	ldr	r3, [r3, #12]
 800ca80:	68db      	ldr	r3, [r3, #12]
 800ca82:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	3304      	adds	r3, #4
 800ca88:	4618      	mov	r0, r3
 800ca8a:	f7fe fa02 	bl	800ae92 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ca8e:	4b0d      	ldr	r3, [pc, #52]	; (800cac4 <prvCheckTasksWaitingTermination+0x54>)
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	3b01      	subs	r3, #1
 800ca94:	4a0b      	ldr	r2, [pc, #44]	; (800cac4 <prvCheckTasksWaitingTermination+0x54>)
 800ca96:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ca98:	4b0b      	ldr	r3, [pc, #44]	; (800cac8 <prvCheckTasksWaitingTermination+0x58>)
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	3b01      	subs	r3, #1
 800ca9e:	4a0a      	ldr	r2, [pc, #40]	; (800cac8 <prvCheckTasksWaitingTermination+0x58>)
 800caa0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800caa2:	f000 fbdf 	bl	800d264 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800caa6:	6878      	ldr	r0, [r7, #4]
 800caa8:	f000 f810 	bl	800cacc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800caac:	4b06      	ldr	r3, [pc, #24]	; (800cac8 <prvCheckTasksWaitingTermination+0x58>)
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d1e1      	bne.n	800ca78 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800cab4:	bf00      	nop
 800cab6:	bf00      	nop
 800cab8:	3708      	adds	r7, #8
 800caba:	46bd      	mov	sp, r7
 800cabc:	bd80      	pop	{r7, pc}
 800cabe:	bf00      	nop
 800cac0:	24000fe4 	.word	0x24000fe4
 800cac4:	24001010 	.word	0x24001010
 800cac8:	24000ff8 	.word	0x24000ff8

0800cacc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800cacc:	b580      	push	{r7, lr}
 800cace:	b084      	sub	sp, #16
 800cad0:	af00      	add	r7, sp, #0
 800cad2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d108      	bne.n	800caf0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cae2:	4618      	mov	r0, r3
 800cae4:	f000 fd7c 	bl	800d5e0 <vPortFree>
				vPortFree( pxTCB );
 800cae8:	6878      	ldr	r0, [r7, #4]
 800caea:	f000 fd79 	bl	800d5e0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800caee:	e018      	b.n	800cb22 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800caf6:	2b01      	cmp	r3, #1
 800caf8:	d103      	bne.n	800cb02 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800cafa:	6878      	ldr	r0, [r7, #4]
 800cafc:	f000 fd70 	bl	800d5e0 <vPortFree>
	}
 800cb00:	e00f      	b.n	800cb22 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800cb08:	2b02      	cmp	r3, #2
 800cb0a:	d00a      	beq.n	800cb22 <prvDeleteTCB+0x56>
	__asm volatile
 800cb0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb10:	f383 8811 	msr	BASEPRI, r3
 800cb14:	f3bf 8f6f 	isb	sy
 800cb18:	f3bf 8f4f 	dsb	sy
 800cb1c:	60fb      	str	r3, [r7, #12]
}
 800cb1e:	bf00      	nop
 800cb20:	e7fe      	b.n	800cb20 <prvDeleteTCB+0x54>
	}
 800cb22:	bf00      	nop
 800cb24:	3710      	adds	r7, #16
 800cb26:	46bd      	mov	sp, r7
 800cb28:	bd80      	pop	{r7, pc}
	...

0800cb2c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800cb2c:	b480      	push	{r7}
 800cb2e:	b083      	sub	sp, #12
 800cb30:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cb32:	4b0c      	ldr	r3, [pc, #48]	; (800cb64 <prvResetNextTaskUnblockTime+0x38>)
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d104      	bne.n	800cb46 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800cb3c:	4b0a      	ldr	r3, [pc, #40]	; (800cb68 <prvResetNextTaskUnblockTime+0x3c>)
 800cb3e:	f04f 32ff 	mov.w	r2, #4294967295
 800cb42:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800cb44:	e008      	b.n	800cb58 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cb46:	4b07      	ldr	r3, [pc, #28]	; (800cb64 <prvResetNextTaskUnblockTime+0x38>)
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	68db      	ldr	r3, [r3, #12]
 800cb4c:	68db      	ldr	r3, [r3, #12]
 800cb4e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	685b      	ldr	r3, [r3, #4]
 800cb54:	4a04      	ldr	r2, [pc, #16]	; (800cb68 <prvResetNextTaskUnblockTime+0x3c>)
 800cb56:	6013      	str	r3, [r2, #0]
}
 800cb58:	bf00      	nop
 800cb5a:	370c      	adds	r7, #12
 800cb5c:	46bd      	mov	sp, r7
 800cb5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb62:	4770      	bx	lr
 800cb64:	24000fc8 	.word	0x24000fc8
 800cb68:	24001030 	.word	0x24001030

0800cb6c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800cb6c:	b480      	push	{r7}
 800cb6e:	b083      	sub	sp, #12
 800cb70:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800cb72:	4b0b      	ldr	r3, [pc, #44]	; (800cba0 <xTaskGetSchedulerState+0x34>)
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d102      	bne.n	800cb80 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800cb7a:	2301      	movs	r3, #1
 800cb7c:	607b      	str	r3, [r7, #4]
 800cb7e:	e008      	b.n	800cb92 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cb80:	4b08      	ldr	r3, [pc, #32]	; (800cba4 <xTaskGetSchedulerState+0x38>)
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d102      	bne.n	800cb8e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800cb88:	2302      	movs	r3, #2
 800cb8a:	607b      	str	r3, [r7, #4]
 800cb8c:	e001      	b.n	800cb92 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800cb8e:	2300      	movs	r3, #0
 800cb90:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800cb92:	687b      	ldr	r3, [r7, #4]
	}
 800cb94:	4618      	mov	r0, r3
 800cb96:	370c      	adds	r7, #12
 800cb98:	46bd      	mov	sp, r7
 800cb9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb9e:	4770      	bx	lr
 800cba0:	2400101c 	.word	0x2400101c
 800cba4:	24001038 	.word	0x24001038

0800cba8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800cba8:	b580      	push	{r7, lr}
 800cbaa:	b084      	sub	sp, #16
 800cbac:	af00      	add	r7, sp, #0
 800cbae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800cbb4:	2300      	movs	r3, #0
 800cbb6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d05e      	beq.n	800cc7c <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800cbbe:	68bb      	ldr	r3, [r7, #8]
 800cbc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cbc2:	4b31      	ldr	r3, [pc, #196]	; (800cc88 <xTaskPriorityInherit+0xe0>)
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbc8:	429a      	cmp	r2, r3
 800cbca:	d24e      	bcs.n	800cc6a <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800cbcc:	68bb      	ldr	r3, [r7, #8]
 800cbce:	699b      	ldr	r3, [r3, #24]
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	db06      	blt.n	800cbe2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cbd4:	4b2c      	ldr	r3, [pc, #176]	; (800cc88 <xTaskPriorityInherit+0xe0>)
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbda:	f1c3 0207 	rsb	r2, r3, #7
 800cbde:	68bb      	ldr	r3, [r7, #8]
 800cbe0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800cbe2:	68bb      	ldr	r3, [r7, #8]
 800cbe4:	6959      	ldr	r1, [r3, #20]
 800cbe6:	68bb      	ldr	r3, [r7, #8]
 800cbe8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cbea:	4613      	mov	r3, r2
 800cbec:	009b      	lsls	r3, r3, #2
 800cbee:	4413      	add	r3, r2
 800cbf0:	009b      	lsls	r3, r3, #2
 800cbf2:	4a26      	ldr	r2, [pc, #152]	; (800cc8c <xTaskPriorityInherit+0xe4>)
 800cbf4:	4413      	add	r3, r2
 800cbf6:	4299      	cmp	r1, r3
 800cbf8:	d12f      	bne.n	800cc5a <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cbfa:	68bb      	ldr	r3, [r7, #8]
 800cbfc:	3304      	adds	r3, #4
 800cbfe:	4618      	mov	r0, r3
 800cc00:	f7fe f947 	bl	800ae92 <uxListRemove>
 800cc04:	4603      	mov	r3, r0
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d10a      	bne.n	800cc20 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800cc0a:	68bb      	ldr	r3, [r7, #8]
 800cc0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc0e:	2201      	movs	r2, #1
 800cc10:	fa02 f303 	lsl.w	r3, r2, r3
 800cc14:	43da      	mvns	r2, r3
 800cc16:	4b1e      	ldr	r3, [pc, #120]	; (800cc90 <xTaskPriorityInherit+0xe8>)
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	4013      	ands	r3, r2
 800cc1c:	4a1c      	ldr	r2, [pc, #112]	; (800cc90 <xTaskPriorityInherit+0xe8>)
 800cc1e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800cc20:	4b19      	ldr	r3, [pc, #100]	; (800cc88 <xTaskPriorityInherit+0xe0>)
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc26:	68bb      	ldr	r3, [r7, #8]
 800cc28:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800cc2a:	68bb      	ldr	r3, [r7, #8]
 800cc2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc2e:	2201      	movs	r2, #1
 800cc30:	409a      	lsls	r2, r3
 800cc32:	4b17      	ldr	r3, [pc, #92]	; (800cc90 <xTaskPriorityInherit+0xe8>)
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	4313      	orrs	r3, r2
 800cc38:	4a15      	ldr	r2, [pc, #84]	; (800cc90 <xTaskPriorityInherit+0xe8>)
 800cc3a:	6013      	str	r3, [r2, #0]
 800cc3c:	68bb      	ldr	r3, [r7, #8]
 800cc3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc40:	4613      	mov	r3, r2
 800cc42:	009b      	lsls	r3, r3, #2
 800cc44:	4413      	add	r3, r2
 800cc46:	009b      	lsls	r3, r3, #2
 800cc48:	4a10      	ldr	r2, [pc, #64]	; (800cc8c <xTaskPriorityInherit+0xe4>)
 800cc4a:	441a      	add	r2, r3
 800cc4c:	68bb      	ldr	r3, [r7, #8]
 800cc4e:	3304      	adds	r3, #4
 800cc50:	4619      	mov	r1, r3
 800cc52:	4610      	mov	r0, r2
 800cc54:	f7fe f8c0 	bl	800add8 <vListInsertEnd>
 800cc58:	e004      	b.n	800cc64 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800cc5a:	4b0b      	ldr	r3, [pc, #44]	; (800cc88 <xTaskPriorityInherit+0xe0>)
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc60:	68bb      	ldr	r3, [r7, #8]
 800cc62:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800cc64:	2301      	movs	r3, #1
 800cc66:	60fb      	str	r3, [r7, #12]
 800cc68:	e008      	b.n	800cc7c <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800cc6a:	68bb      	ldr	r3, [r7, #8]
 800cc6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cc6e:	4b06      	ldr	r3, [pc, #24]	; (800cc88 <xTaskPriorityInherit+0xe0>)
 800cc70:	681b      	ldr	r3, [r3, #0]
 800cc72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc74:	429a      	cmp	r2, r3
 800cc76:	d201      	bcs.n	800cc7c <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800cc78:	2301      	movs	r3, #1
 800cc7a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800cc7c:	68fb      	ldr	r3, [r7, #12]
	}
 800cc7e:	4618      	mov	r0, r3
 800cc80:	3710      	adds	r7, #16
 800cc82:	46bd      	mov	sp, r7
 800cc84:	bd80      	pop	{r7, pc}
 800cc86:	bf00      	nop
 800cc88:	24000f10 	.word	0x24000f10
 800cc8c:	24000f14 	.word	0x24000f14
 800cc90:	24001018 	.word	0x24001018

0800cc94 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800cc94:	b580      	push	{r7, lr}
 800cc96:	b086      	sub	sp, #24
 800cc98:	af00      	add	r7, sp, #0
 800cc9a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800cca0:	2300      	movs	r3, #0
 800cca2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d06e      	beq.n	800cd88 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ccaa:	4b3a      	ldr	r3, [pc, #232]	; (800cd94 <xTaskPriorityDisinherit+0x100>)
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	693a      	ldr	r2, [r7, #16]
 800ccb0:	429a      	cmp	r2, r3
 800ccb2:	d00a      	beq.n	800ccca <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800ccb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccb8:	f383 8811 	msr	BASEPRI, r3
 800ccbc:	f3bf 8f6f 	isb	sy
 800ccc0:	f3bf 8f4f 	dsb	sy
 800ccc4:	60fb      	str	r3, [r7, #12]
}
 800ccc6:	bf00      	nop
 800ccc8:	e7fe      	b.n	800ccc8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800ccca:	693b      	ldr	r3, [r7, #16]
 800cccc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d10a      	bne.n	800cce8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800ccd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccd6:	f383 8811 	msr	BASEPRI, r3
 800ccda:	f3bf 8f6f 	isb	sy
 800ccde:	f3bf 8f4f 	dsb	sy
 800cce2:	60bb      	str	r3, [r7, #8]
}
 800cce4:	bf00      	nop
 800cce6:	e7fe      	b.n	800cce6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800cce8:	693b      	ldr	r3, [r7, #16]
 800ccea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ccec:	1e5a      	subs	r2, r3, #1
 800ccee:	693b      	ldr	r3, [r7, #16]
 800ccf0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ccf2:	693b      	ldr	r3, [r7, #16]
 800ccf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ccf6:	693b      	ldr	r3, [r7, #16]
 800ccf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ccfa:	429a      	cmp	r2, r3
 800ccfc:	d044      	beq.n	800cd88 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ccfe:	693b      	ldr	r3, [r7, #16]
 800cd00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d140      	bne.n	800cd88 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cd06:	693b      	ldr	r3, [r7, #16]
 800cd08:	3304      	adds	r3, #4
 800cd0a:	4618      	mov	r0, r3
 800cd0c:	f7fe f8c1 	bl	800ae92 <uxListRemove>
 800cd10:	4603      	mov	r3, r0
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d115      	bne.n	800cd42 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800cd16:	693b      	ldr	r3, [r7, #16]
 800cd18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd1a:	491f      	ldr	r1, [pc, #124]	; (800cd98 <xTaskPriorityDisinherit+0x104>)
 800cd1c:	4613      	mov	r3, r2
 800cd1e:	009b      	lsls	r3, r3, #2
 800cd20:	4413      	add	r3, r2
 800cd22:	009b      	lsls	r3, r3, #2
 800cd24:	440b      	add	r3, r1
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	d10a      	bne.n	800cd42 <xTaskPriorityDisinherit+0xae>
 800cd2c:	693b      	ldr	r3, [r7, #16]
 800cd2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd30:	2201      	movs	r2, #1
 800cd32:	fa02 f303 	lsl.w	r3, r2, r3
 800cd36:	43da      	mvns	r2, r3
 800cd38:	4b18      	ldr	r3, [pc, #96]	; (800cd9c <xTaskPriorityDisinherit+0x108>)
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	4013      	ands	r3, r2
 800cd3e:	4a17      	ldr	r2, [pc, #92]	; (800cd9c <xTaskPriorityDisinherit+0x108>)
 800cd40:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800cd42:	693b      	ldr	r3, [r7, #16]
 800cd44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cd46:	693b      	ldr	r3, [r7, #16]
 800cd48:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cd4a:	693b      	ldr	r3, [r7, #16]
 800cd4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd4e:	f1c3 0207 	rsb	r2, r3, #7
 800cd52:	693b      	ldr	r3, [r7, #16]
 800cd54:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800cd56:	693b      	ldr	r3, [r7, #16]
 800cd58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd5a:	2201      	movs	r2, #1
 800cd5c:	409a      	lsls	r2, r3
 800cd5e:	4b0f      	ldr	r3, [pc, #60]	; (800cd9c <xTaskPriorityDisinherit+0x108>)
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	4313      	orrs	r3, r2
 800cd64:	4a0d      	ldr	r2, [pc, #52]	; (800cd9c <xTaskPriorityDisinherit+0x108>)
 800cd66:	6013      	str	r3, [r2, #0]
 800cd68:	693b      	ldr	r3, [r7, #16]
 800cd6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd6c:	4613      	mov	r3, r2
 800cd6e:	009b      	lsls	r3, r3, #2
 800cd70:	4413      	add	r3, r2
 800cd72:	009b      	lsls	r3, r3, #2
 800cd74:	4a08      	ldr	r2, [pc, #32]	; (800cd98 <xTaskPriorityDisinherit+0x104>)
 800cd76:	441a      	add	r2, r3
 800cd78:	693b      	ldr	r3, [r7, #16]
 800cd7a:	3304      	adds	r3, #4
 800cd7c:	4619      	mov	r1, r3
 800cd7e:	4610      	mov	r0, r2
 800cd80:	f7fe f82a 	bl	800add8 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800cd84:	2301      	movs	r3, #1
 800cd86:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800cd88:	697b      	ldr	r3, [r7, #20]
	}
 800cd8a:	4618      	mov	r0, r3
 800cd8c:	3718      	adds	r7, #24
 800cd8e:	46bd      	mov	sp, r7
 800cd90:	bd80      	pop	{r7, pc}
 800cd92:	bf00      	nop
 800cd94:	24000f10 	.word	0x24000f10
 800cd98:	24000f14 	.word	0x24000f14
 800cd9c:	24001018 	.word	0x24001018

0800cda0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800cda0:	b580      	push	{r7, lr}
 800cda2:	b088      	sub	sp, #32
 800cda4:	af00      	add	r7, sp, #0
 800cda6:	6078      	str	r0, [r7, #4]
 800cda8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800cdae:	2301      	movs	r3, #1
 800cdb0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d077      	beq.n	800cea8 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800cdb8:	69bb      	ldr	r3, [r7, #24]
 800cdba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d10a      	bne.n	800cdd6 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800cdc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdc4:	f383 8811 	msr	BASEPRI, r3
 800cdc8:	f3bf 8f6f 	isb	sy
 800cdcc:	f3bf 8f4f 	dsb	sy
 800cdd0:	60fb      	str	r3, [r7, #12]
}
 800cdd2:	bf00      	nop
 800cdd4:	e7fe      	b.n	800cdd4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800cdd6:	69bb      	ldr	r3, [r7, #24]
 800cdd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cdda:	683a      	ldr	r2, [r7, #0]
 800cddc:	429a      	cmp	r2, r3
 800cdde:	d902      	bls.n	800cde6 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800cde0:	683b      	ldr	r3, [r7, #0]
 800cde2:	61fb      	str	r3, [r7, #28]
 800cde4:	e002      	b.n	800cdec <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800cde6:	69bb      	ldr	r3, [r7, #24]
 800cde8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cdea:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800cdec:	69bb      	ldr	r3, [r7, #24]
 800cdee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdf0:	69fa      	ldr	r2, [r7, #28]
 800cdf2:	429a      	cmp	r2, r3
 800cdf4:	d058      	beq.n	800cea8 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800cdf6:	69bb      	ldr	r3, [r7, #24]
 800cdf8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cdfa:	697a      	ldr	r2, [r7, #20]
 800cdfc:	429a      	cmp	r2, r3
 800cdfe:	d153      	bne.n	800cea8 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800ce00:	4b2b      	ldr	r3, [pc, #172]	; (800ceb0 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	69ba      	ldr	r2, [r7, #24]
 800ce06:	429a      	cmp	r2, r3
 800ce08:	d10a      	bne.n	800ce20 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800ce0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce0e:	f383 8811 	msr	BASEPRI, r3
 800ce12:	f3bf 8f6f 	isb	sy
 800ce16:	f3bf 8f4f 	dsb	sy
 800ce1a:	60bb      	str	r3, [r7, #8]
}
 800ce1c:	bf00      	nop
 800ce1e:	e7fe      	b.n	800ce1e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800ce20:	69bb      	ldr	r3, [r7, #24]
 800ce22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce24:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800ce26:	69bb      	ldr	r3, [r7, #24]
 800ce28:	69fa      	ldr	r2, [r7, #28]
 800ce2a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ce2c:	69bb      	ldr	r3, [r7, #24]
 800ce2e:	699b      	ldr	r3, [r3, #24]
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	db04      	blt.n	800ce3e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ce34:	69fb      	ldr	r3, [r7, #28]
 800ce36:	f1c3 0207 	rsb	r2, r3, #7
 800ce3a:	69bb      	ldr	r3, [r7, #24]
 800ce3c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ce3e:	69bb      	ldr	r3, [r7, #24]
 800ce40:	6959      	ldr	r1, [r3, #20]
 800ce42:	693a      	ldr	r2, [r7, #16]
 800ce44:	4613      	mov	r3, r2
 800ce46:	009b      	lsls	r3, r3, #2
 800ce48:	4413      	add	r3, r2
 800ce4a:	009b      	lsls	r3, r3, #2
 800ce4c:	4a19      	ldr	r2, [pc, #100]	; (800ceb4 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800ce4e:	4413      	add	r3, r2
 800ce50:	4299      	cmp	r1, r3
 800ce52:	d129      	bne.n	800cea8 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ce54:	69bb      	ldr	r3, [r7, #24]
 800ce56:	3304      	adds	r3, #4
 800ce58:	4618      	mov	r0, r3
 800ce5a:	f7fe f81a 	bl	800ae92 <uxListRemove>
 800ce5e:	4603      	mov	r3, r0
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d10a      	bne.n	800ce7a <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800ce64:	69bb      	ldr	r3, [r7, #24]
 800ce66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce68:	2201      	movs	r2, #1
 800ce6a:	fa02 f303 	lsl.w	r3, r2, r3
 800ce6e:	43da      	mvns	r2, r3
 800ce70:	4b11      	ldr	r3, [pc, #68]	; (800ceb8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	4013      	ands	r3, r2
 800ce76:	4a10      	ldr	r2, [pc, #64]	; (800ceb8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800ce78:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800ce7a:	69bb      	ldr	r3, [r7, #24]
 800ce7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce7e:	2201      	movs	r2, #1
 800ce80:	409a      	lsls	r2, r3
 800ce82:	4b0d      	ldr	r3, [pc, #52]	; (800ceb8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	4313      	orrs	r3, r2
 800ce88:	4a0b      	ldr	r2, [pc, #44]	; (800ceb8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800ce8a:	6013      	str	r3, [r2, #0]
 800ce8c:	69bb      	ldr	r3, [r7, #24]
 800ce8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce90:	4613      	mov	r3, r2
 800ce92:	009b      	lsls	r3, r3, #2
 800ce94:	4413      	add	r3, r2
 800ce96:	009b      	lsls	r3, r3, #2
 800ce98:	4a06      	ldr	r2, [pc, #24]	; (800ceb4 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800ce9a:	441a      	add	r2, r3
 800ce9c:	69bb      	ldr	r3, [r7, #24]
 800ce9e:	3304      	adds	r3, #4
 800cea0:	4619      	mov	r1, r3
 800cea2:	4610      	mov	r0, r2
 800cea4:	f7fd ff98 	bl	800add8 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800cea8:	bf00      	nop
 800ceaa:	3720      	adds	r7, #32
 800ceac:	46bd      	mov	sp, r7
 800ceae:	bd80      	pop	{r7, pc}
 800ceb0:	24000f10 	.word	0x24000f10
 800ceb4:	24000f14 	.word	0x24000f14
 800ceb8:	24001018 	.word	0x24001018

0800cebc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800cebc:	b480      	push	{r7}
 800cebe:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800cec0:	4b07      	ldr	r3, [pc, #28]	; (800cee0 <pvTaskIncrementMutexHeldCount+0x24>)
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d004      	beq.n	800ced2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800cec8:	4b05      	ldr	r3, [pc, #20]	; (800cee0 <pvTaskIncrementMutexHeldCount+0x24>)
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800cece:	3201      	adds	r2, #1
 800ced0:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800ced2:	4b03      	ldr	r3, [pc, #12]	; (800cee0 <pvTaskIncrementMutexHeldCount+0x24>)
 800ced4:	681b      	ldr	r3, [r3, #0]
	}
 800ced6:	4618      	mov	r0, r3
 800ced8:	46bd      	mov	sp, r7
 800ceda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cede:	4770      	bx	lr
 800cee0:	24000f10 	.word	0x24000f10

0800cee4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800cee4:	b580      	push	{r7, lr}
 800cee6:	b084      	sub	sp, #16
 800cee8:	af00      	add	r7, sp, #0
 800ceea:	6078      	str	r0, [r7, #4]
 800ceec:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ceee:	4b29      	ldr	r3, [pc, #164]	; (800cf94 <prvAddCurrentTaskToDelayedList+0xb0>)
 800cef0:	681b      	ldr	r3, [r3, #0]
 800cef2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cef4:	4b28      	ldr	r3, [pc, #160]	; (800cf98 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	3304      	adds	r3, #4
 800cefa:	4618      	mov	r0, r3
 800cefc:	f7fd ffc9 	bl	800ae92 <uxListRemove>
 800cf00:	4603      	mov	r3, r0
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d10b      	bne.n	800cf1e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800cf06:	4b24      	ldr	r3, [pc, #144]	; (800cf98 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf0c:	2201      	movs	r2, #1
 800cf0e:	fa02 f303 	lsl.w	r3, r2, r3
 800cf12:	43da      	mvns	r2, r3
 800cf14:	4b21      	ldr	r3, [pc, #132]	; (800cf9c <prvAddCurrentTaskToDelayedList+0xb8>)
 800cf16:	681b      	ldr	r3, [r3, #0]
 800cf18:	4013      	ands	r3, r2
 800cf1a:	4a20      	ldr	r2, [pc, #128]	; (800cf9c <prvAddCurrentTaskToDelayedList+0xb8>)
 800cf1c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf24:	d10a      	bne.n	800cf3c <prvAddCurrentTaskToDelayedList+0x58>
 800cf26:	683b      	ldr	r3, [r7, #0]
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d007      	beq.n	800cf3c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cf2c:	4b1a      	ldr	r3, [pc, #104]	; (800cf98 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	3304      	adds	r3, #4
 800cf32:	4619      	mov	r1, r3
 800cf34:	481a      	ldr	r0, [pc, #104]	; (800cfa0 <prvAddCurrentTaskToDelayedList+0xbc>)
 800cf36:	f7fd ff4f 	bl	800add8 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800cf3a:	e026      	b.n	800cf8a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800cf3c:	68fa      	ldr	r2, [r7, #12]
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	4413      	add	r3, r2
 800cf42:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800cf44:	4b14      	ldr	r3, [pc, #80]	; (800cf98 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	68ba      	ldr	r2, [r7, #8]
 800cf4a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800cf4c:	68ba      	ldr	r2, [r7, #8]
 800cf4e:	68fb      	ldr	r3, [r7, #12]
 800cf50:	429a      	cmp	r2, r3
 800cf52:	d209      	bcs.n	800cf68 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cf54:	4b13      	ldr	r3, [pc, #76]	; (800cfa4 <prvAddCurrentTaskToDelayedList+0xc0>)
 800cf56:	681a      	ldr	r2, [r3, #0]
 800cf58:	4b0f      	ldr	r3, [pc, #60]	; (800cf98 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cf5a:	681b      	ldr	r3, [r3, #0]
 800cf5c:	3304      	adds	r3, #4
 800cf5e:	4619      	mov	r1, r3
 800cf60:	4610      	mov	r0, r2
 800cf62:	f7fd ff5d 	bl	800ae20 <vListInsert>
}
 800cf66:	e010      	b.n	800cf8a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cf68:	4b0f      	ldr	r3, [pc, #60]	; (800cfa8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800cf6a:	681a      	ldr	r2, [r3, #0]
 800cf6c:	4b0a      	ldr	r3, [pc, #40]	; (800cf98 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	3304      	adds	r3, #4
 800cf72:	4619      	mov	r1, r3
 800cf74:	4610      	mov	r0, r2
 800cf76:	f7fd ff53 	bl	800ae20 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800cf7a:	4b0c      	ldr	r3, [pc, #48]	; (800cfac <prvAddCurrentTaskToDelayedList+0xc8>)
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	68ba      	ldr	r2, [r7, #8]
 800cf80:	429a      	cmp	r2, r3
 800cf82:	d202      	bcs.n	800cf8a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800cf84:	4a09      	ldr	r2, [pc, #36]	; (800cfac <prvAddCurrentTaskToDelayedList+0xc8>)
 800cf86:	68bb      	ldr	r3, [r7, #8]
 800cf88:	6013      	str	r3, [r2, #0]
}
 800cf8a:	bf00      	nop
 800cf8c:	3710      	adds	r7, #16
 800cf8e:	46bd      	mov	sp, r7
 800cf90:	bd80      	pop	{r7, pc}
 800cf92:	bf00      	nop
 800cf94:	24001014 	.word	0x24001014
 800cf98:	24000f10 	.word	0x24000f10
 800cf9c:	24001018 	.word	0x24001018
 800cfa0:	24000ffc 	.word	0x24000ffc
 800cfa4:	24000fcc 	.word	0x24000fcc
 800cfa8:	24000fc8 	.word	0x24000fc8
 800cfac:	24001030 	.word	0x24001030

0800cfb0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800cfb0:	b480      	push	{r7}
 800cfb2:	b085      	sub	sp, #20
 800cfb4:	af00      	add	r7, sp, #0
 800cfb6:	60f8      	str	r0, [r7, #12]
 800cfb8:	60b9      	str	r1, [r7, #8]
 800cfba:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800cfbc:	68fb      	ldr	r3, [r7, #12]
 800cfbe:	3b04      	subs	r3, #4
 800cfc0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800cfc2:	68fb      	ldr	r3, [r7, #12]
 800cfc4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800cfc8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cfca:	68fb      	ldr	r3, [r7, #12]
 800cfcc:	3b04      	subs	r3, #4
 800cfce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800cfd0:	68bb      	ldr	r3, [r7, #8]
 800cfd2:	f023 0201 	bic.w	r2, r3, #1
 800cfd6:	68fb      	ldr	r3, [r7, #12]
 800cfd8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cfda:	68fb      	ldr	r3, [r7, #12]
 800cfdc:	3b04      	subs	r3, #4
 800cfde:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800cfe0:	4a0c      	ldr	r2, [pc, #48]	; (800d014 <pxPortInitialiseStack+0x64>)
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	3b14      	subs	r3, #20
 800cfea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800cfec:	687a      	ldr	r2, [r7, #4]
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800cff2:	68fb      	ldr	r3, [r7, #12]
 800cff4:	3b04      	subs	r3, #4
 800cff6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	f06f 0202 	mvn.w	r2, #2
 800cffe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d000:	68fb      	ldr	r3, [r7, #12]
 800d002:	3b20      	subs	r3, #32
 800d004:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d006:	68fb      	ldr	r3, [r7, #12]
}
 800d008:	4618      	mov	r0, r3
 800d00a:	3714      	adds	r7, #20
 800d00c:	46bd      	mov	sp, r7
 800d00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d012:	4770      	bx	lr
 800d014:	0800d019 	.word	0x0800d019

0800d018 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d018:	b480      	push	{r7}
 800d01a:	b085      	sub	sp, #20
 800d01c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d01e:	2300      	movs	r3, #0
 800d020:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d022:	4b12      	ldr	r3, [pc, #72]	; (800d06c <prvTaskExitError+0x54>)
 800d024:	681b      	ldr	r3, [r3, #0]
 800d026:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d02a:	d00a      	beq.n	800d042 <prvTaskExitError+0x2a>
	__asm volatile
 800d02c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d030:	f383 8811 	msr	BASEPRI, r3
 800d034:	f3bf 8f6f 	isb	sy
 800d038:	f3bf 8f4f 	dsb	sy
 800d03c:	60fb      	str	r3, [r7, #12]
}
 800d03e:	bf00      	nop
 800d040:	e7fe      	b.n	800d040 <prvTaskExitError+0x28>
	__asm volatile
 800d042:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d046:	f383 8811 	msr	BASEPRI, r3
 800d04a:	f3bf 8f6f 	isb	sy
 800d04e:	f3bf 8f4f 	dsb	sy
 800d052:	60bb      	str	r3, [r7, #8]
}
 800d054:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d056:	bf00      	nop
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d0fc      	beq.n	800d058 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d05e:	bf00      	nop
 800d060:	bf00      	nop
 800d062:	3714      	adds	r7, #20
 800d064:	46bd      	mov	sp, r7
 800d066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d06a:	4770      	bx	lr
 800d06c:	240002f0 	.word	0x240002f0

0800d070 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d070:	4b07      	ldr	r3, [pc, #28]	; (800d090 <pxCurrentTCBConst2>)
 800d072:	6819      	ldr	r1, [r3, #0]
 800d074:	6808      	ldr	r0, [r1, #0]
 800d076:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d07a:	f380 8809 	msr	PSP, r0
 800d07e:	f3bf 8f6f 	isb	sy
 800d082:	f04f 0000 	mov.w	r0, #0
 800d086:	f380 8811 	msr	BASEPRI, r0
 800d08a:	4770      	bx	lr
 800d08c:	f3af 8000 	nop.w

0800d090 <pxCurrentTCBConst2>:
 800d090:	24000f10 	.word	0x24000f10
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d094:	bf00      	nop
 800d096:	bf00      	nop

0800d098 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d098:	4808      	ldr	r0, [pc, #32]	; (800d0bc <prvPortStartFirstTask+0x24>)
 800d09a:	6800      	ldr	r0, [r0, #0]
 800d09c:	6800      	ldr	r0, [r0, #0]
 800d09e:	f380 8808 	msr	MSP, r0
 800d0a2:	f04f 0000 	mov.w	r0, #0
 800d0a6:	f380 8814 	msr	CONTROL, r0
 800d0aa:	b662      	cpsie	i
 800d0ac:	b661      	cpsie	f
 800d0ae:	f3bf 8f4f 	dsb	sy
 800d0b2:	f3bf 8f6f 	isb	sy
 800d0b6:	df00      	svc	0
 800d0b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d0ba:	bf00      	nop
 800d0bc:	e000ed08 	.word	0xe000ed08

0800d0c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d0c0:	b580      	push	{r7, lr}
 800d0c2:	b086      	sub	sp, #24
 800d0c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d0c6:	4b46      	ldr	r3, [pc, #280]	; (800d1e0 <xPortStartScheduler+0x120>)
 800d0c8:	681b      	ldr	r3, [r3, #0]
 800d0ca:	4a46      	ldr	r2, [pc, #280]	; (800d1e4 <xPortStartScheduler+0x124>)
 800d0cc:	4293      	cmp	r3, r2
 800d0ce:	d10a      	bne.n	800d0e6 <xPortStartScheduler+0x26>
	__asm volatile
 800d0d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0d4:	f383 8811 	msr	BASEPRI, r3
 800d0d8:	f3bf 8f6f 	isb	sy
 800d0dc:	f3bf 8f4f 	dsb	sy
 800d0e0:	613b      	str	r3, [r7, #16]
}
 800d0e2:	bf00      	nop
 800d0e4:	e7fe      	b.n	800d0e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d0e6:	4b3e      	ldr	r3, [pc, #248]	; (800d1e0 <xPortStartScheduler+0x120>)
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	4a3f      	ldr	r2, [pc, #252]	; (800d1e8 <xPortStartScheduler+0x128>)
 800d0ec:	4293      	cmp	r3, r2
 800d0ee:	d10a      	bne.n	800d106 <xPortStartScheduler+0x46>
	__asm volatile
 800d0f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0f4:	f383 8811 	msr	BASEPRI, r3
 800d0f8:	f3bf 8f6f 	isb	sy
 800d0fc:	f3bf 8f4f 	dsb	sy
 800d100:	60fb      	str	r3, [r7, #12]
}
 800d102:	bf00      	nop
 800d104:	e7fe      	b.n	800d104 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d106:	4b39      	ldr	r3, [pc, #228]	; (800d1ec <xPortStartScheduler+0x12c>)
 800d108:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d10a:	697b      	ldr	r3, [r7, #20]
 800d10c:	781b      	ldrb	r3, [r3, #0]
 800d10e:	b2db      	uxtb	r3, r3
 800d110:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d112:	697b      	ldr	r3, [r7, #20]
 800d114:	22ff      	movs	r2, #255	; 0xff
 800d116:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d118:	697b      	ldr	r3, [r7, #20]
 800d11a:	781b      	ldrb	r3, [r3, #0]
 800d11c:	b2db      	uxtb	r3, r3
 800d11e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d120:	78fb      	ldrb	r3, [r7, #3]
 800d122:	b2db      	uxtb	r3, r3
 800d124:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800d128:	b2da      	uxtb	r2, r3
 800d12a:	4b31      	ldr	r3, [pc, #196]	; (800d1f0 <xPortStartScheduler+0x130>)
 800d12c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d12e:	4b31      	ldr	r3, [pc, #196]	; (800d1f4 <xPortStartScheduler+0x134>)
 800d130:	2207      	movs	r2, #7
 800d132:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d134:	e009      	b.n	800d14a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800d136:	4b2f      	ldr	r3, [pc, #188]	; (800d1f4 <xPortStartScheduler+0x134>)
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	3b01      	subs	r3, #1
 800d13c:	4a2d      	ldr	r2, [pc, #180]	; (800d1f4 <xPortStartScheduler+0x134>)
 800d13e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d140:	78fb      	ldrb	r3, [r7, #3]
 800d142:	b2db      	uxtb	r3, r3
 800d144:	005b      	lsls	r3, r3, #1
 800d146:	b2db      	uxtb	r3, r3
 800d148:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d14a:	78fb      	ldrb	r3, [r7, #3]
 800d14c:	b2db      	uxtb	r3, r3
 800d14e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d152:	2b80      	cmp	r3, #128	; 0x80
 800d154:	d0ef      	beq.n	800d136 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d156:	4b27      	ldr	r3, [pc, #156]	; (800d1f4 <xPortStartScheduler+0x134>)
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	f1c3 0307 	rsb	r3, r3, #7
 800d15e:	2b04      	cmp	r3, #4
 800d160:	d00a      	beq.n	800d178 <xPortStartScheduler+0xb8>
	__asm volatile
 800d162:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d166:	f383 8811 	msr	BASEPRI, r3
 800d16a:	f3bf 8f6f 	isb	sy
 800d16e:	f3bf 8f4f 	dsb	sy
 800d172:	60bb      	str	r3, [r7, #8]
}
 800d174:	bf00      	nop
 800d176:	e7fe      	b.n	800d176 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d178:	4b1e      	ldr	r3, [pc, #120]	; (800d1f4 <xPortStartScheduler+0x134>)
 800d17a:	681b      	ldr	r3, [r3, #0]
 800d17c:	021b      	lsls	r3, r3, #8
 800d17e:	4a1d      	ldr	r2, [pc, #116]	; (800d1f4 <xPortStartScheduler+0x134>)
 800d180:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d182:	4b1c      	ldr	r3, [pc, #112]	; (800d1f4 <xPortStartScheduler+0x134>)
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d18a:	4a1a      	ldr	r2, [pc, #104]	; (800d1f4 <xPortStartScheduler+0x134>)
 800d18c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	b2da      	uxtb	r2, r3
 800d192:	697b      	ldr	r3, [r7, #20]
 800d194:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d196:	4b18      	ldr	r3, [pc, #96]	; (800d1f8 <xPortStartScheduler+0x138>)
 800d198:	681b      	ldr	r3, [r3, #0]
 800d19a:	4a17      	ldr	r2, [pc, #92]	; (800d1f8 <xPortStartScheduler+0x138>)
 800d19c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d1a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d1a2:	4b15      	ldr	r3, [pc, #84]	; (800d1f8 <xPortStartScheduler+0x138>)
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	4a14      	ldr	r2, [pc, #80]	; (800d1f8 <xPortStartScheduler+0x138>)
 800d1a8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800d1ac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d1ae:	f000 f8dd 	bl	800d36c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d1b2:	4b12      	ldr	r3, [pc, #72]	; (800d1fc <xPortStartScheduler+0x13c>)
 800d1b4:	2200      	movs	r2, #0
 800d1b6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d1b8:	f000 f8fc 	bl	800d3b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d1bc:	4b10      	ldr	r3, [pc, #64]	; (800d200 <xPortStartScheduler+0x140>)
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	4a0f      	ldr	r2, [pc, #60]	; (800d200 <xPortStartScheduler+0x140>)
 800d1c2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800d1c6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d1c8:	f7ff ff66 	bl	800d098 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d1cc:	f7ff fa92 	bl	800c6f4 <vTaskSwitchContext>
	prvTaskExitError();
 800d1d0:	f7ff ff22 	bl	800d018 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d1d4:	2300      	movs	r3, #0
}
 800d1d6:	4618      	mov	r0, r3
 800d1d8:	3718      	adds	r7, #24
 800d1da:	46bd      	mov	sp, r7
 800d1dc:	bd80      	pop	{r7, pc}
 800d1de:	bf00      	nop
 800d1e0:	e000ed00 	.word	0xe000ed00
 800d1e4:	410fc271 	.word	0x410fc271
 800d1e8:	410fc270 	.word	0x410fc270
 800d1ec:	e000e400 	.word	0xe000e400
 800d1f0:	2400103c 	.word	0x2400103c
 800d1f4:	24001040 	.word	0x24001040
 800d1f8:	e000ed20 	.word	0xe000ed20
 800d1fc:	240002f0 	.word	0x240002f0
 800d200:	e000ef34 	.word	0xe000ef34

0800d204 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d204:	b480      	push	{r7}
 800d206:	b083      	sub	sp, #12
 800d208:	af00      	add	r7, sp, #0
	__asm volatile
 800d20a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d20e:	f383 8811 	msr	BASEPRI, r3
 800d212:	f3bf 8f6f 	isb	sy
 800d216:	f3bf 8f4f 	dsb	sy
 800d21a:	607b      	str	r3, [r7, #4]
}
 800d21c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d21e:	4b0f      	ldr	r3, [pc, #60]	; (800d25c <vPortEnterCritical+0x58>)
 800d220:	681b      	ldr	r3, [r3, #0]
 800d222:	3301      	adds	r3, #1
 800d224:	4a0d      	ldr	r2, [pc, #52]	; (800d25c <vPortEnterCritical+0x58>)
 800d226:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d228:	4b0c      	ldr	r3, [pc, #48]	; (800d25c <vPortEnterCritical+0x58>)
 800d22a:	681b      	ldr	r3, [r3, #0]
 800d22c:	2b01      	cmp	r3, #1
 800d22e:	d10f      	bne.n	800d250 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d230:	4b0b      	ldr	r3, [pc, #44]	; (800d260 <vPortEnterCritical+0x5c>)
 800d232:	681b      	ldr	r3, [r3, #0]
 800d234:	b2db      	uxtb	r3, r3
 800d236:	2b00      	cmp	r3, #0
 800d238:	d00a      	beq.n	800d250 <vPortEnterCritical+0x4c>
	__asm volatile
 800d23a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d23e:	f383 8811 	msr	BASEPRI, r3
 800d242:	f3bf 8f6f 	isb	sy
 800d246:	f3bf 8f4f 	dsb	sy
 800d24a:	603b      	str	r3, [r7, #0]
}
 800d24c:	bf00      	nop
 800d24e:	e7fe      	b.n	800d24e <vPortEnterCritical+0x4a>
	}
}
 800d250:	bf00      	nop
 800d252:	370c      	adds	r7, #12
 800d254:	46bd      	mov	sp, r7
 800d256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d25a:	4770      	bx	lr
 800d25c:	240002f0 	.word	0x240002f0
 800d260:	e000ed04 	.word	0xe000ed04

0800d264 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d264:	b480      	push	{r7}
 800d266:	b083      	sub	sp, #12
 800d268:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d26a:	4b12      	ldr	r3, [pc, #72]	; (800d2b4 <vPortExitCritical+0x50>)
 800d26c:	681b      	ldr	r3, [r3, #0]
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d10a      	bne.n	800d288 <vPortExitCritical+0x24>
	__asm volatile
 800d272:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d276:	f383 8811 	msr	BASEPRI, r3
 800d27a:	f3bf 8f6f 	isb	sy
 800d27e:	f3bf 8f4f 	dsb	sy
 800d282:	607b      	str	r3, [r7, #4]
}
 800d284:	bf00      	nop
 800d286:	e7fe      	b.n	800d286 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d288:	4b0a      	ldr	r3, [pc, #40]	; (800d2b4 <vPortExitCritical+0x50>)
 800d28a:	681b      	ldr	r3, [r3, #0]
 800d28c:	3b01      	subs	r3, #1
 800d28e:	4a09      	ldr	r2, [pc, #36]	; (800d2b4 <vPortExitCritical+0x50>)
 800d290:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d292:	4b08      	ldr	r3, [pc, #32]	; (800d2b4 <vPortExitCritical+0x50>)
 800d294:	681b      	ldr	r3, [r3, #0]
 800d296:	2b00      	cmp	r3, #0
 800d298:	d105      	bne.n	800d2a6 <vPortExitCritical+0x42>
 800d29a:	2300      	movs	r3, #0
 800d29c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d29e:	683b      	ldr	r3, [r7, #0]
 800d2a0:	f383 8811 	msr	BASEPRI, r3
}
 800d2a4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d2a6:	bf00      	nop
 800d2a8:	370c      	adds	r7, #12
 800d2aa:	46bd      	mov	sp, r7
 800d2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2b0:	4770      	bx	lr
 800d2b2:	bf00      	nop
 800d2b4:	240002f0 	.word	0x240002f0
	...

0800d2c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d2c0:	f3ef 8009 	mrs	r0, PSP
 800d2c4:	f3bf 8f6f 	isb	sy
 800d2c8:	4b15      	ldr	r3, [pc, #84]	; (800d320 <pxCurrentTCBConst>)
 800d2ca:	681a      	ldr	r2, [r3, #0]
 800d2cc:	f01e 0f10 	tst.w	lr, #16
 800d2d0:	bf08      	it	eq
 800d2d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d2d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2da:	6010      	str	r0, [r2, #0]
 800d2dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d2e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d2e4:	f380 8811 	msr	BASEPRI, r0
 800d2e8:	f3bf 8f4f 	dsb	sy
 800d2ec:	f3bf 8f6f 	isb	sy
 800d2f0:	f7ff fa00 	bl	800c6f4 <vTaskSwitchContext>
 800d2f4:	f04f 0000 	mov.w	r0, #0
 800d2f8:	f380 8811 	msr	BASEPRI, r0
 800d2fc:	bc09      	pop	{r0, r3}
 800d2fe:	6819      	ldr	r1, [r3, #0]
 800d300:	6808      	ldr	r0, [r1, #0]
 800d302:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d306:	f01e 0f10 	tst.w	lr, #16
 800d30a:	bf08      	it	eq
 800d30c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d310:	f380 8809 	msr	PSP, r0
 800d314:	f3bf 8f6f 	isb	sy
 800d318:	4770      	bx	lr
 800d31a:	bf00      	nop
 800d31c:	f3af 8000 	nop.w

0800d320 <pxCurrentTCBConst>:
 800d320:	24000f10 	.word	0x24000f10
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d324:	bf00      	nop
 800d326:	bf00      	nop

0800d328 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d328:	b580      	push	{r7, lr}
 800d32a:	b082      	sub	sp, #8
 800d32c:	af00      	add	r7, sp, #0
	__asm volatile
 800d32e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d332:	f383 8811 	msr	BASEPRI, r3
 800d336:	f3bf 8f6f 	isb	sy
 800d33a:	f3bf 8f4f 	dsb	sy
 800d33e:	607b      	str	r3, [r7, #4]
}
 800d340:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d342:	f7ff f91f 	bl	800c584 <xTaskIncrementTick>
 800d346:	4603      	mov	r3, r0
 800d348:	2b00      	cmp	r3, #0
 800d34a:	d003      	beq.n	800d354 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d34c:	4b06      	ldr	r3, [pc, #24]	; (800d368 <SysTick_Handler+0x40>)
 800d34e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d352:	601a      	str	r2, [r3, #0]
 800d354:	2300      	movs	r3, #0
 800d356:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d358:	683b      	ldr	r3, [r7, #0]
 800d35a:	f383 8811 	msr	BASEPRI, r3
}
 800d35e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d360:	bf00      	nop
 800d362:	3708      	adds	r7, #8
 800d364:	46bd      	mov	sp, r7
 800d366:	bd80      	pop	{r7, pc}
 800d368:	e000ed04 	.word	0xe000ed04

0800d36c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d36c:	b480      	push	{r7}
 800d36e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d370:	4b0b      	ldr	r3, [pc, #44]	; (800d3a0 <vPortSetupTimerInterrupt+0x34>)
 800d372:	2200      	movs	r2, #0
 800d374:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d376:	4b0b      	ldr	r3, [pc, #44]	; (800d3a4 <vPortSetupTimerInterrupt+0x38>)
 800d378:	2200      	movs	r2, #0
 800d37a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d37c:	4b0a      	ldr	r3, [pc, #40]	; (800d3a8 <vPortSetupTimerInterrupt+0x3c>)
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	4a0a      	ldr	r2, [pc, #40]	; (800d3ac <vPortSetupTimerInterrupt+0x40>)
 800d382:	fba2 2303 	umull	r2, r3, r2, r3
 800d386:	099b      	lsrs	r3, r3, #6
 800d388:	4a09      	ldr	r2, [pc, #36]	; (800d3b0 <vPortSetupTimerInterrupt+0x44>)
 800d38a:	3b01      	subs	r3, #1
 800d38c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d38e:	4b04      	ldr	r3, [pc, #16]	; (800d3a0 <vPortSetupTimerInterrupt+0x34>)
 800d390:	2207      	movs	r2, #7
 800d392:	601a      	str	r2, [r3, #0]
}
 800d394:	bf00      	nop
 800d396:	46bd      	mov	sp, r7
 800d398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d39c:	4770      	bx	lr
 800d39e:	bf00      	nop
 800d3a0:	e000e010 	.word	0xe000e010
 800d3a4:	e000e018 	.word	0xe000e018
 800d3a8:	240002cc 	.word	0x240002cc
 800d3ac:	10624dd3 	.word	0x10624dd3
 800d3b0:	e000e014 	.word	0xe000e014

0800d3b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d3b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800d3c4 <vPortEnableVFP+0x10>
 800d3b8:	6801      	ldr	r1, [r0, #0]
 800d3ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800d3be:	6001      	str	r1, [r0, #0]
 800d3c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d3c2:	bf00      	nop
 800d3c4:	e000ed88 	.word	0xe000ed88

0800d3c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d3c8:	b480      	push	{r7}
 800d3ca:	b085      	sub	sp, #20
 800d3cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d3ce:	f3ef 8305 	mrs	r3, IPSR
 800d3d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	2b0f      	cmp	r3, #15
 800d3d8:	d914      	bls.n	800d404 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d3da:	4a17      	ldr	r2, [pc, #92]	; (800d438 <vPortValidateInterruptPriority+0x70>)
 800d3dc:	68fb      	ldr	r3, [r7, #12]
 800d3de:	4413      	add	r3, r2
 800d3e0:	781b      	ldrb	r3, [r3, #0]
 800d3e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d3e4:	4b15      	ldr	r3, [pc, #84]	; (800d43c <vPortValidateInterruptPriority+0x74>)
 800d3e6:	781b      	ldrb	r3, [r3, #0]
 800d3e8:	7afa      	ldrb	r2, [r7, #11]
 800d3ea:	429a      	cmp	r2, r3
 800d3ec:	d20a      	bcs.n	800d404 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800d3ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3f2:	f383 8811 	msr	BASEPRI, r3
 800d3f6:	f3bf 8f6f 	isb	sy
 800d3fa:	f3bf 8f4f 	dsb	sy
 800d3fe:	607b      	str	r3, [r7, #4]
}
 800d400:	bf00      	nop
 800d402:	e7fe      	b.n	800d402 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d404:	4b0e      	ldr	r3, [pc, #56]	; (800d440 <vPortValidateInterruptPriority+0x78>)
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d40c:	4b0d      	ldr	r3, [pc, #52]	; (800d444 <vPortValidateInterruptPriority+0x7c>)
 800d40e:	681b      	ldr	r3, [r3, #0]
 800d410:	429a      	cmp	r2, r3
 800d412:	d90a      	bls.n	800d42a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800d414:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d418:	f383 8811 	msr	BASEPRI, r3
 800d41c:	f3bf 8f6f 	isb	sy
 800d420:	f3bf 8f4f 	dsb	sy
 800d424:	603b      	str	r3, [r7, #0]
}
 800d426:	bf00      	nop
 800d428:	e7fe      	b.n	800d428 <vPortValidateInterruptPriority+0x60>
	}
 800d42a:	bf00      	nop
 800d42c:	3714      	adds	r7, #20
 800d42e:	46bd      	mov	sp, r7
 800d430:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d434:	4770      	bx	lr
 800d436:	bf00      	nop
 800d438:	e000e3f0 	.word	0xe000e3f0
 800d43c:	2400103c 	.word	0x2400103c
 800d440:	e000ed0c 	.word	0xe000ed0c
 800d444:	24001040 	.word	0x24001040

0800d448 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d448:	b580      	push	{r7, lr}
 800d44a:	b08a      	sub	sp, #40	; 0x28
 800d44c:	af00      	add	r7, sp, #0
 800d44e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d450:	2300      	movs	r3, #0
 800d452:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d454:	f7fe ffca 	bl	800c3ec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d458:	4b5b      	ldr	r3, [pc, #364]	; (800d5c8 <pvPortMalloc+0x180>)
 800d45a:	681b      	ldr	r3, [r3, #0]
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	d101      	bne.n	800d464 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d460:	f000 f920 	bl	800d6a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d464:	4b59      	ldr	r3, [pc, #356]	; (800d5cc <pvPortMalloc+0x184>)
 800d466:	681a      	ldr	r2, [r3, #0]
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	4013      	ands	r3, r2
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	f040 8093 	bne.w	800d598 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	2b00      	cmp	r3, #0
 800d476:	d01d      	beq.n	800d4b4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800d478:	2208      	movs	r2, #8
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	4413      	add	r3, r2
 800d47e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	f003 0307 	and.w	r3, r3, #7
 800d486:	2b00      	cmp	r3, #0
 800d488:	d014      	beq.n	800d4b4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	f023 0307 	bic.w	r3, r3, #7
 800d490:	3308      	adds	r3, #8
 800d492:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	f003 0307 	and.w	r3, r3, #7
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d00a      	beq.n	800d4b4 <pvPortMalloc+0x6c>
	__asm volatile
 800d49e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4a2:	f383 8811 	msr	BASEPRI, r3
 800d4a6:	f3bf 8f6f 	isb	sy
 800d4aa:	f3bf 8f4f 	dsb	sy
 800d4ae:	617b      	str	r3, [r7, #20]
}
 800d4b0:	bf00      	nop
 800d4b2:	e7fe      	b.n	800d4b2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d06e      	beq.n	800d598 <pvPortMalloc+0x150>
 800d4ba:	4b45      	ldr	r3, [pc, #276]	; (800d5d0 <pvPortMalloc+0x188>)
 800d4bc:	681b      	ldr	r3, [r3, #0]
 800d4be:	687a      	ldr	r2, [r7, #4]
 800d4c0:	429a      	cmp	r2, r3
 800d4c2:	d869      	bhi.n	800d598 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d4c4:	4b43      	ldr	r3, [pc, #268]	; (800d5d4 <pvPortMalloc+0x18c>)
 800d4c6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d4c8:	4b42      	ldr	r3, [pc, #264]	; (800d5d4 <pvPortMalloc+0x18c>)
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d4ce:	e004      	b.n	800d4da <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800d4d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4d2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d4d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4d6:	681b      	ldr	r3, [r3, #0]
 800d4d8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d4da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4dc:	685b      	ldr	r3, [r3, #4]
 800d4de:	687a      	ldr	r2, [r7, #4]
 800d4e0:	429a      	cmp	r2, r3
 800d4e2:	d903      	bls.n	800d4ec <pvPortMalloc+0xa4>
 800d4e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4e6:	681b      	ldr	r3, [r3, #0]
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d1f1      	bne.n	800d4d0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d4ec:	4b36      	ldr	r3, [pc, #216]	; (800d5c8 <pvPortMalloc+0x180>)
 800d4ee:	681b      	ldr	r3, [r3, #0]
 800d4f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d4f2:	429a      	cmp	r2, r3
 800d4f4:	d050      	beq.n	800d598 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d4f6:	6a3b      	ldr	r3, [r7, #32]
 800d4f8:	681b      	ldr	r3, [r3, #0]
 800d4fa:	2208      	movs	r2, #8
 800d4fc:	4413      	add	r3, r2
 800d4fe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d502:	681a      	ldr	r2, [r3, #0]
 800d504:	6a3b      	ldr	r3, [r7, #32]
 800d506:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d50a:	685a      	ldr	r2, [r3, #4]
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	1ad2      	subs	r2, r2, r3
 800d510:	2308      	movs	r3, #8
 800d512:	005b      	lsls	r3, r3, #1
 800d514:	429a      	cmp	r2, r3
 800d516:	d91f      	bls.n	800d558 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d518:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	4413      	add	r3, r2
 800d51e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d520:	69bb      	ldr	r3, [r7, #24]
 800d522:	f003 0307 	and.w	r3, r3, #7
 800d526:	2b00      	cmp	r3, #0
 800d528:	d00a      	beq.n	800d540 <pvPortMalloc+0xf8>
	__asm volatile
 800d52a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d52e:	f383 8811 	msr	BASEPRI, r3
 800d532:	f3bf 8f6f 	isb	sy
 800d536:	f3bf 8f4f 	dsb	sy
 800d53a:	613b      	str	r3, [r7, #16]
}
 800d53c:	bf00      	nop
 800d53e:	e7fe      	b.n	800d53e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d542:	685a      	ldr	r2, [r3, #4]
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	1ad2      	subs	r2, r2, r3
 800d548:	69bb      	ldr	r3, [r7, #24]
 800d54a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d54c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d54e:	687a      	ldr	r2, [r7, #4]
 800d550:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d552:	69b8      	ldr	r0, [r7, #24]
 800d554:	f000 f908 	bl	800d768 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d558:	4b1d      	ldr	r3, [pc, #116]	; (800d5d0 <pvPortMalloc+0x188>)
 800d55a:	681a      	ldr	r2, [r3, #0]
 800d55c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d55e:	685b      	ldr	r3, [r3, #4]
 800d560:	1ad3      	subs	r3, r2, r3
 800d562:	4a1b      	ldr	r2, [pc, #108]	; (800d5d0 <pvPortMalloc+0x188>)
 800d564:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d566:	4b1a      	ldr	r3, [pc, #104]	; (800d5d0 <pvPortMalloc+0x188>)
 800d568:	681a      	ldr	r2, [r3, #0]
 800d56a:	4b1b      	ldr	r3, [pc, #108]	; (800d5d8 <pvPortMalloc+0x190>)
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	429a      	cmp	r2, r3
 800d570:	d203      	bcs.n	800d57a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d572:	4b17      	ldr	r3, [pc, #92]	; (800d5d0 <pvPortMalloc+0x188>)
 800d574:	681b      	ldr	r3, [r3, #0]
 800d576:	4a18      	ldr	r2, [pc, #96]	; (800d5d8 <pvPortMalloc+0x190>)
 800d578:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d57a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d57c:	685a      	ldr	r2, [r3, #4]
 800d57e:	4b13      	ldr	r3, [pc, #76]	; (800d5cc <pvPortMalloc+0x184>)
 800d580:	681b      	ldr	r3, [r3, #0]
 800d582:	431a      	orrs	r2, r3
 800d584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d586:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d58a:	2200      	movs	r2, #0
 800d58c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d58e:	4b13      	ldr	r3, [pc, #76]	; (800d5dc <pvPortMalloc+0x194>)
 800d590:	681b      	ldr	r3, [r3, #0]
 800d592:	3301      	adds	r3, #1
 800d594:	4a11      	ldr	r2, [pc, #68]	; (800d5dc <pvPortMalloc+0x194>)
 800d596:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d598:	f7fe ff36 	bl	800c408 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d59c:	69fb      	ldr	r3, [r7, #28]
 800d59e:	f003 0307 	and.w	r3, r3, #7
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d00a      	beq.n	800d5bc <pvPortMalloc+0x174>
	__asm volatile
 800d5a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5aa:	f383 8811 	msr	BASEPRI, r3
 800d5ae:	f3bf 8f6f 	isb	sy
 800d5b2:	f3bf 8f4f 	dsb	sy
 800d5b6:	60fb      	str	r3, [r7, #12]
}
 800d5b8:	bf00      	nop
 800d5ba:	e7fe      	b.n	800d5ba <pvPortMalloc+0x172>
	return pvReturn;
 800d5bc:	69fb      	ldr	r3, [r7, #28]
}
 800d5be:	4618      	mov	r0, r3
 800d5c0:	3728      	adds	r7, #40	; 0x28
 800d5c2:	46bd      	mov	sp, r7
 800d5c4:	bd80      	pop	{r7, pc}
 800d5c6:	bf00      	nop
 800d5c8:	24004c4c 	.word	0x24004c4c
 800d5cc:	24004c60 	.word	0x24004c60
 800d5d0:	24004c50 	.word	0x24004c50
 800d5d4:	24004c44 	.word	0x24004c44
 800d5d8:	24004c54 	.word	0x24004c54
 800d5dc:	24004c58 	.word	0x24004c58

0800d5e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d5e0:	b580      	push	{r7, lr}
 800d5e2:	b086      	sub	sp, #24
 800d5e4:	af00      	add	r7, sp, #0
 800d5e6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	d04d      	beq.n	800d68e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d5f2:	2308      	movs	r3, #8
 800d5f4:	425b      	negs	r3, r3
 800d5f6:	697a      	ldr	r2, [r7, #20]
 800d5f8:	4413      	add	r3, r2
 800d5fa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d5fc:	697b      	ldr	r3, [r7, #20]
 800d5fe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d600:	693b      	ldr	r3, [r7, #16]
 800d602:	685a      	ldr	r2, [r3, #4]
 800d604:	4b24      	ldr	r3, [pc, #144]	; (800d698 <vPortFree+0xb8>)
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	4013      	ands	r3, r2
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d10a      	bne.n	800d624 <vPortFree+0x44>
	__asm volatile
 800d60e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d612:	f383 8811 	msr	BASEPRI, r3
 800d616:	f3bf 8f6f 	isb	sy
 800d61a:	f3bf 8f4f 	dsb	sy
 800d61e:	60fb      	str	r3, [r7, #12]
}
 800d620:	bf00      	nop
 800d622:	e7fe      	b.n	800d622 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d624:	693b      	ldr	r3, [r7, #16]
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	2b00      	cmp	r3, #0
 800d62a:	d00a      	beq.n	800d642 <vPortFree+0x62>
	__asm volatile
 800d62c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d630:	f383 8811 	msr	BASEPRI, r3
 800d634:	f3bf 8f6f 	isb	sy
 800d638:	f3bf 8f4f 	dsb	sy
 800d63c:	60bb      	str	r3, [r7, #8]
}
 800d63e:	bf00      	nop
 800d640:	e7fe      	b.n	800d640 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d642:	693b      	ldr	r3, [r7, #16]
 800d644:	685a      	ldr	r2, [r3, #4]
 800d646:	4b14      	ldr	r3, [pc, #80]	; (800d698 <vPortFree+0xb8>)
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	4013      	ands	r3, r2
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	d01e      	beq.n	800d68e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d650:	693b      	ldr	r3, [r7, #16]
 800d652:	681b      	ldr	r3, [r3, #0]
 800d654:	2b00      	cmp	r3, #0
 800d656:	d11a      	bne.n	800d68e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d658:	693b      	ldr	r3, [r7, #16]
 800d65a:	685a      	ldr	r2, [r3, #4]
 800d65c:	4b0e      	ldr	r3, [pc, #56]	; (800d698 <vPortFree+0xb8>)
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	43db      	mvns	r3, r3
 800d662:	401a      	ands	r2, r3
 800d664:	693b      	ldr	r3, [r7, #16]
 800d666:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d668:	f7fe fec0 	bl	800c3ec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d66c:	693b      	ldr	r3, [r7, #16]
 800d66e:	685a      	ldr	r2, [r3, #4]
 800d670:	4b0a      	ldr	r3, [pc, #40]	; (800d69c <vPortFree+0xbc>)
 800d672:	681b      	ldr	r3, [r3, #0]
 800d674:	4413      	add	r3, r2
 800d676:	4a09      	ldr	r2, [pc, #36]	; (800d69c <vPortFree+0xbc>)
 800d678:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d67a:	6938      	ldr	r0, [r7, #16]
 800d67c:	f000 f874 	bl	800d768 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d680:	4b07      	ldr	r3, [pc, #28]	; (800d6a0 <vPortFree+0xc0>)
 800d682:	681b      	ldr	r3, [r3, #0]
 800d684:	3301      	adds	r3, #1
 800d686:	4a06      	ldr	r2, [pc, #24]	; (800d6a0 <vPortFree+0xc0>)
 800d688:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d68a:	f7fe febd 	bl	800c408 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d68e:	bf00      	nop
 800d690:	3718      	adds	r7, #24
 800d692:	46bd      	mov	sp, r7
 800d694:	bd80      	pop	{r7, pc}
 800d696:	bf00      	nop
 800d698:	24004c60 	.word	0x24004c60
 800d69c:	24004c50 	.word	0x24004c50
 800d6a0:	24004c5c 	.word	0x24004c5c

0800d6a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d6a4:	b480      	push	{r7}
 800d6a6:	b085      	sub	sp, #20
 800d6a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d6aa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800d6ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d6b0:	4b27      	ldr	r3, [pc, #156]	; (800d750 <prvHeapInit+0xac>)
 800d6b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d6b4:	68fb      	ldr	r3, [r7, #12]
 800d6b6:	f003 0307 	and.w	r3, r3, #7
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d00c      	beq.n	800d6d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d6be:	68fb      	ldr	r3, [r7, #12]
 800d6c0:	3307      	adds	r3, #7
 800d6c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d6c4:	68fb      	ldr	r3, [r7, #12]
 800d6c6:	f023 0307 	bic.w	r3, r3, #7
 800d6ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d6cc:	68ba      	ldr	r2, [r7, #8]
 800d6ce:	68fb      	ldr	r3, [r7, #12]
 800d6d0:	1ad3      	subs	r3, r2, r3
 800d6d2:	4a1f      	ldr	r2, [pc, #124]	; (800d750 <prvHeapInit+0xac>)
 800d6d4:	4413      	add	r3, r2
 800d6d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d6dc:	4a1d      	ldr	r2, [pc, #116]	; (800d754 <prvHeapInit+0xb0>)
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d6e2:	4b1c      	ldr	r3, [pc, #112]	; (800d754 <prvHeapInit+0xb0>)
 800d6e4:	2200      	movs	r2, #0
 800d6e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	68ba      	ldr	r2, [r7, #8]
 800d6ec:	4413      	add	r3, r2
 800d6ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d6f0:	2208      	movs	r2, #8
 800d6f2:	68fb      	ldr	r3, [r7, #12]
 800d6f4:	1a9b      	subs	r3, r3, r2
 800d6f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d6f8:	68fb      	ldr	r3, [r7, #12]
 800d6fa:	f023 0307 	bic.w	r3, r3, #7
 800d6fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d700:	68fb      	ldr	r3, [r7, #12]
 800d702:	4a15      	ldr	r2, [pc, #84]	; (800d758 <prvHeapInit+0xb4>)
 800d704:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d706:	4b14      	ldr	r3, [pc, #80]	; (800d758 <prvHeapInit+0xb4>)
 800d708:	681b      	ldr	r3, [r3, #0]
 800d70a:	2200      	movs	r2, #0
 800d70c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d70e:	4b12      	ldr	r3, [pc, #72]	; (800d758 <prvHeapInit+0xb4>)
 800d710:	681b      	ldr	r3, [r3, #0]
 800d712:	2200      	movs	r2, #0
 800d714:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d71a:	683b      	ldr	r3, [r7, #0]
 800d71c:	68fa      	ldr	r2, [r7, #12]
 800d71e:	1ad2      	subs	r2, r2, r3
 800d720:	683b      	ldr	r3, [r7, #0]
 800d722:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d724:	4b0c      	ldr	r3, [pc, #48]	; (800d758 <prvHeapInit+0xb4>)
 800d726:	681a      	ldr	r2, [r3, #0]
 800d728:	683b      	ldr	r3, [r7, #0]
 800d72a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d72c:	683b      	ldr	r3, [r7, #0]
 800d72e:	685b      	ldr	r3, [r3, #4]
 800d730:	4a0a      	ldr	r2, [pc, #40]	; (800d75c <prvHeapInit+0xb8>)
 800d732:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d734:	683b      	ldr	r3, [r7, #0]
 800d736:	685b      	ldr	r3, [r3, #4]
 800d738:	4a09      	ldr	r2, [pc, #36]	; (800d760 <prvHeapInit+0xbc>)
 800d73a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d73c:	4b09      	ldr	r3, [pc, #36]	; (800d764 <prvHeapInit+0xc0>)
 800d73e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d742:	601a      	str	r2, [r3, #0]
}
 800d744:	bf00      	nop
 800d746:	3714      	adds	r7, #20
 800d748:	46bd      	mov	sp, r7
 800d74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d74e:	4770      	bx	lr
 800d750:	24001044 	.word	0x24001044
 800d754:	24004c44 	.word	0x24004c44
 800d758:	24004c4c 	.word	0x24004c4c
 800d75c:	24004c54 	.word	0x24004c54
 800d760:	24004c50 	.word	0x24004c50
 800d764:	24004c60 	.word	0x24004c60

0800d768 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d768:	b480      	push	{r7}
 800d76a:	b085      	sub	sp, #20
 800d76c:	af00      	add	r7, sp, #0
 800d76e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d770:	4b28      	ldr	r3, [pc, #160]	; (800d814 <prvInsertBlockIntoFreeList+0xac>)
 800d772:	60fb      	str	r3, [r7, #12]
 800d774:	e002      	b.n	800d77c <prvInsertBlockIntoFreeList+0x14>
 800d776:	68fb      	ldr	r3, [r7, #12]
 800d778:	681b      	ldr	r3, [r3, #0]
 800d77a:	60fb      	str	r3, [r7, #12]
 800d77c:	68fb      	ldr	r3, [r7, #12]
 800d77e:	681b      	ldr	r3, [r3, #0]
 800d780:	687a      	ldr	r2, [r7, #4]
 800d782:	429a      	cmp	r2, r3
 800d784:	d8f7      	bhi.n	800d776 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d786:	68fb      	ldr	r3, [r7, #12]
 800d788:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d78a:	68fb      	ldr	r3, [r7, #12]
 800d78c:	685b      	ldr	r3, [r3, #4]
 800d78e:	68ba      	ldr	r2, [r7, #8]
 800d790:	4413      	add	r3, r2
 800d792:	687a      	ldr	r2, [r7, #4]
 800d794:	429a      	cmp	r2, r3
 800d796:	d108      	bne.n	800d7aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d798:	68fb      	ldr	r3, [r7, #12]
 800d79a:	685a      	ldr	r2, [r3, #4]
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	685b      	ldr	r3, [r3, #4]
 800d7a0:	441a      	add	r2, r3
 800d7a2:	68fb      	ldr	r3, [r7, #12]
 800d7a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d7a6:	68fb      	ldr	r3, [r7, #12]
 800d7a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	685b      	ldr	r3, [r3, #4]
 800d7b2:	68ba      	ldr	r2, [r7, #8]
 800d7b4:	441a      	add	r2, r3
 800d7b6:	68fb      	ldr	r3, [r7, #12]
 800d7b8:	681b      	ldr	r3, [r3, #0]
 800d7ba:	429a      	cmp	r2, r3
 800d7bc:	d118      	bne.n	800d7f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d7be:	68fb      	ldr	r3, [r7, #12]
 800d7c0:	681a      	ldr	r2, [r3, #0]
 800d7c2:	4b15      	ldr	r3, [pc, #84]	; (800d818 <prvInsertBlockIntoFreeList+0xb0>)
 800d7c4:	681b      	ldr	r3, [r3, #0]
 800d7c6:	429a      	cmp	r2, r3
 800d7c8:	d00d      	beq.n	800d7e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	685a      	ldr	r2, [r3, #4]
 800d7ce:	68fb      	ldr	r3, [r7, #12]
 800d7d0:	681b      	ldr	r3, [r3, #0]
 800d7d2:	685b      	ldr	r3, [r3, #4]
 800d7d4:	441a      	add	r2, r3
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d7da:	68fb      	ldr	r3, [r7, #12]
 800d7dc:	681b      	ldr	r3, [r3, #0]
 800d7de:	681a      	ldr	r2, [r3, #0]
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	601a      	str	r2, [r3, #0]
 800d7e4:	e008      	b.n	800d7f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d7e6:	4b0c      	ldr	r3, [pc, #48]	; (800d818 <prvInsertBlockIntoFreeList+0xb0>)
 800d7e8:	681a      	ldr	r2, [r3, #0]
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	601a      	str	r2, [r3, #0]
 800d7ee:	e003      	b.n	800d7f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d7f0:	68fb      	ldr	r3, [r7, #12]
 800d7f2:	681a      	ldr	r2, [r3, #0]
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d7f8:	68fa      	ldr	r2, [r7, #12]
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	429a      	cmp	r2, r3
 800d7fe:	d002      	beq.n	800d806 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d800:	68fb      	ldr	r3, [r7, #12]
 800d802:	687a      	ldr	r2, [r7, #4]
 800d804:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d806:	bf00      	nop
 800d808:	3714      	adds	r7, #20
 800d80a:	46bd      	mov	sp, r7
 800d80c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d810:	4770      	bx	lr
 800d812:	bf00      	nop
 800d814:	24004c44 	.word	0x24004c44
 800d818:	24004c4c 	.word	0x24004c4c

0800d81c <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 800d81c:	b580      	push	{r7, lr}
 800d81e:	b084      	sub	sp, #16
 800d820:	af00      	add	r7, sp, #0
 800d822:	6078      	str	r0, [r7, #4]
 800d824:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800d826:	683b      	ldr	r3, [r7, #0]
 800d828:	681b      	ldr	r3, [r3, #0]
 800d82a:	330c      	adds	r3, #12
 800d82c:	461a      	mov	r2, r3
 800d82e:	6839      	ldr	r1, [r7, #0]
 800d830:	6878      	ldr	r0, [r7, #4]
 800d832:	f003 fd9b 	bl	801136c <tcpip_send_msg_wait_sem>
 800d836:	4603      	mov	r3, r0
 800d838:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800d83a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d83e:	2b00      	cmp	r3, #0
 800d840:	d103      	bne.n	800d84a <netconn_apimsg+0x2e>
    return apimsg->err;
 800d842:	683b      	ldr	r3, [r7, #0]
 800d844:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800d848:	e001      	b.n	800d84e <netconn_apimsg+0x32>
  }
  return err;
 800d84a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d84e:	4618      	mov	r0, r3
 800d850:	3710      	adds	r7, #16
 800d852:	46bd      	mov	sp, r7
 800d854:	bd80      	pop	{r7, pc}
	...

0800d858 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 800d858:	b580      	push	{r7, lr}
 800d85a:	b08c      	sub	sp, #48	; 0x30
 800d85c:	af00      	add	r7, sp, #0
 800d85e:	4603      	mov	r3, r0
 800d860:	603a      	str	r2, [r7, #0]
 800d862:	71fb      	strb	r3, [r7, #7]
 800d864:	460b      	mov	r3, r1
 800d866:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 800d868:	79fb      	ldrb	r3, [r7, #7]
 800d86a:	6839      	ldr	r1, [r7, #0]
 800d86c:	4618      	mov	r0, r3
 800d86e:	f001 f9a3 	bl	800ebb8 <netconn_alloc>
 800d872:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 800d874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d876:	2b00      	cmp	r3, #0
 800d878:	d054      	beq.n	800d924 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 800d87a:	79bb      	ldrb	r3, [r7, #6]
 800d87c:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 800d87e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d880:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 800d882:	f107 0308 	add.w	r3, r7, #8
 800d886:	4619      	mov	r1, r3
 800d888:	4829      	ldr	r0, [pc, #164]	; (800d930 <netconn_new_with_proto_and_callback+0xd8>)
 800d88a:	f7ff ffc7 	bl	800d81c <netconn_apimsg>
 800d88e:	4603      	mov	r3, r0
 800d890:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 800d894:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800d898:	2b00      	cmp	r3, #0
 800d89a:	d043      	beq.n	800d924 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 800d89c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d89e:	685b      	ldr	r3, [r3, #4]
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d005      	beq.n	800d8b0 <netconn_new_with_proto_and_callback+0x58>
 800d8a4:	4b23      	ldr	r3, [pc, #140]	; (800d934 <netconn_new_with_proto_and_callback+0xdc>)
 800d8a6:	22a3      	movs	r2, #163	; 0xa3
 800d8a8:	4923      	ldr	r1, [pc, #140]	; (800d938 <netconn_new_with_proto_and_callback+0xe0>)
 800d8aa:	4824      	ldr	r0, [pc, #144]	; (800d93c <netconn_new_with_proto_and_callback+0xe4>)
 800d8ac:	f012 fdd0 	bl	8020450 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 800d8b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8b2:	3310      	adds	r3, #16
 800d8b4:	4618      	mov	r0, r3
 800d8b6:	f010 feee 	bl	801e696 <sys_mbox_valid>
 800d8ba:	4603      	mov	r3, r0
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d105      	bne.n	800d8cc <netconn_new_with_proto_and_callback+0x74>
 800d8c0:	4b1c      	ldr	r3, [pc, #112]	; (800d934 <netconn_new_with_proto_and_callback+0xdc>)
 800d8c2:	22a4      	movs	r2, #164	; 0xa4
 800d8c4:	491e      	ldr	r1, [pc, #120]	; (800d940 <netconn_new_with_proto_and_callback+0xe8>)
 800d8c6:	481d      	ldr	r0, [pc, #116]	; (800d93c <netconn_new_with_proto_and_callback+0xe4>)
 800d8c8:	f012 fdc2 	bl	8020450 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 800d8cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8ce:	3314      	adds	r3, #20
 800d8d0:	4618      	mov	r0, r3
 800d8d2:	f010 fee0 	bl	801e696 <sys_mbox_valid>
 800d8d6:	4603      	mov	r3, r0
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d005      	beq.n	800d8e8 <netconn_new_with_proto_and_callback+0x90>
 800d8dc:	4b15      	ldr	r3, [pc, #84]	; (800d934 <netconn_new_with_proto_and_callback+0xdc>)
 800d8de:	22a6      	movs	r2, #166	; 0xa6
 800d8e0:	4918      	ldr	r1, [pc, #96]	; (800d944 <netconn_new_with_proto_and_callback+0xec>)
 800d8e2:	4816      	ldr	r0, [pc, #88]	; (800d93c <netconn_new_with_proto_and_callback+0xe4>)
 800d8e4:	f012 fdb4 	bl	8020450 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 800d8e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8ea:	330c      	adds	r3, #12
 800d8ec:	4618      	mov	r0, r3
 800d8ee:	f010 ff63 	bl	801e7b8 <sys_sem_valid>
 800d8f2:	4603      	mov	r3, r0
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d105      	bne.n	800d904 <netconn_new_with_proto_and_callback+0xac>
 800d8f8:	4b0e      	ldr	r3, [pc, #56]	; (800d934 <netconn_new_with_proto_and_callback+0xdc>)
 800d8fa:	22a9      	movs	r2, #169	; 0xa9
 800d8fc:	4912      	ldr	r1, [pc, #72]	; (800d948 <netconn_new_with_proto_and_callback+0xf0>)
 800d8fe:	480f      	ldr	r0, [pc, #60]	; (800d93c <netconn_new_with_proto_and_callback+0xe4>)
 800d900:	f012 fda6 	bl	8020450 <iprintf>
      sys_sem_free(&conn->op_completed);
 800d904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d906:	330c      	adds	r3, #12
 800d908:	4618      	mov	r0, r3
 800d90a:	f010 ff48 	bl	801e79e <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 800d90e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d910:	3310      	adds	r3, #16
 800d912:	4618      	mov	r0, r3
 800d914:	f010 fe38 	bl	801e588 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 800d918:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d91a:	2007      	movs	r0, #7
 800d91c:	f004 fb8c 	bl	8012038 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 800d920:	2300      	movs	r3, #0
 800d922:	e000      	b.n	800d926 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 800d924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800d926:	4618      	mov	r0, r3
 800d928:	3730      	adds	r7, #48	; 0x30
 800d92a:	46bd      	mov	sp, r7
 800d92c:	bd80      	pop	{r7, pc}
 800d92e:	bf00      	nop
 800d930:	0800eb8d 	.word	0x0800eb8d
 800d934:	08023298 	.word	0x08023298
 800d938:	080232cc 	.word	0x080232cc
 800d93c:	080232f0 	.word	0x080232f0
 800d940:	08023318 	.word	0x08023318
 800d944:	08023330 	.word	0x08023330
 800d948:	08023354 	.word	0x08023354

0800d94c <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 800d94c:	b580      	push	{r7, lr}
 800d94e:	b08c      	sub	sp, #48	; 0x30
 800d950:	af00      	add	r7, sp, #0
 800d952:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	2b00      	cmp	r3, #0
 800d958:	d101      	bne.n	800d95e <netconn_prepare_delete+0x12>
    return ERR_OK;
 800d95a:	2300      	movs	r3, #0
 800d95c:	e014      	b.n	800d988 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800d962:	2329      	movs	r3, #41	; 0x29
 800d964:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 800d966:	f107 030c 	add.w	r3, r7, #12
 800d96a:	4619      	mov	r1, r3
 800d96c:	4808      	ldr	r0, [pc, #32]	; (800d990 <netconn_prepare_delete+0x44>)
 800d96e:	f7ff ff55 	bl	800d81c <netconn_apimsg>
 800d972:	4603      	mov	r3, r0
 800d974:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 800d978:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800d97c:	2b00      	cmp	r3, #0
 800d97e:	d002      	beq.n	800d986 <netconn_prepare_delete+0x3a>
    return err;
 800d980:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800d984:	e000      	b.n	800d988 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 800d986:	2300      	movs	r3, #0
}
 800d988:	4618      	mov	r0, r3
 800d98a:	3730      	adds	r7, #48	; 0x30
 800d98c:	46bd      	mov	sp, r7
 800d98e:	bd80      	pop	{r7, pc}
 800d990:	0800f0f9 	.word	0x0800f0f9

0800d994 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 800d994:	b580      	push	{r7, lr}
 800d996:	b084      	sub	sp, #16
 800d998:	af00      	add	r7, sp, #0
 800d99a:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	d101      	bne.n	800d9a6 <netconn_delete+0x12>
    return ERR_OK;
 800d9a2:	2300      	movs	r3, #0
 800d9a4:	e00d      	b.n	800d9c2 <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 800d9a6:	6878      	ldr	r0, [r7, #4]
 800d9a8:	f7ff ffd0 	bl	800d94c <netconn_prepare_delete>
 800d9ac:	4603      	mov	r3, r0
 800d9ae:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 800d9b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d102      	bne.n	800d9be <netconn_delete+0x2a>
    netconn_free(conn);
 800d9b8:	6878      	ldr	r0, [r7, #4]
 800d9ba:	f001 f96b 	bl	800ec94 <netconn_free>
  }
  return err;
 800d9be:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d9c2:	4618      	mov	r0, r3
 800d9c4:	3710      	adds	r7, #16
 800d9c6:	46bd      	mov	sp, r7
 800d9c8:	bd80      	pop	{r7, pc}
	...

0800d9cc <netconn_getaddr>:
 * @return ERR_CONN for invalid connections
 *         ERR_OK if the information was retrieved
 */
err_t
netconn_getaddr(struct netconn *conn, ip_addr_t *addr, u16_t *port, u8_t local)
{
 800d9cc:	b580      	push	{r7, lr}
 800d9ce:	b08e      	sub	sp, #56	; 0x38
 800d9d0:	af00      	add	r7, sp, #0
 800d9d2:	60f8      	str	r0, [r7, #12]
 800d9d4:	60b9      	str	r1, [r7, #8]
 800d9d6:	607a      	str	r2, [r7, #4]
 800d9d8:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_getaddr: invalid conn", (conn != NULL), return ERR_ARG;);
 800d9da:	68fb      	ldr	r3, [r7, #12]
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	d109      	bne.n	800d9f4 <netconn_getaddr+0x28>
 800d9e0:	4b1d      	ldr	r3, [pc, #116]	; (800da58 <netconn_getaddr+0x8c>)
 800d9e2:	f44f 7289 	mov.w	r2, #274	; 0x112
 800d9e6:	491d      	ldr	r1, [pc, #116]	; (800da5c <netconn_getaddr+0x90>)
 800d9e8:	481d      	ldr	r0, [pc, #116]	; (800da60 <netconn_getaddr+0x94>)
 800d9ea:	f012 fd31 	bl	8020450 <iprintf>
 800d9ee:	f06f 030f 	mvn.w	r3, #15
 800d9f2:	e02d      	b.n	800da50 <netconn_getaddr+0x84>
  LWIP_ERROR("netconn_getaddr: invalid addr", (addr != NULL), return ERR_ARG;);
 800d9f4:	68bb      	ldr	r3, [r7, #8]
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	d109      	bne.n	800da0e <netconn_getaddr+0x42>
 800d9fa:	4b17      	ldr	r3, [pc, #92]	; (800da58 <netconn_getaddr+0x8c>)
 800d9fc:	f240 1213 	movw	r2, #275	; 0x113
 800da00:	4918      	ldr	r1, [pc, #96]	; (800da64 <netconn_getaddr+0x98>)
 800da02:	4817      	ldr	r0, [pc, #92]	; (800da60 <netconn_getaddr+0x94>)
 800da04:	f012 fd24 	bl	8020450 <iprintf>
 800da08:	f06f 030f 	mvn.w	r3, #15
 800da0c:	e020      	b.n	800da50 <netconn_getaddr+0x84>
  LWIP_ERROR("netconn_getaddr: invalid port", (port != NULL), return ERR_ARG;);
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	2b00      	cmp	r3, #0
 800da12:	d109      	bne.n	800da28 <netconn_getaddr+0x5c>
 800da14:	4b10      	ldr	r3, [pc, #64]	; (800da58 <netconn_getaddr+0x8c>)
 800da16:	f44f 728a 	mov.w	r2, #276	; 0x114
 800da1a:	4913      	ldr	r1, [pc, #76]	; (800da68 <netconn_getaddr+0x9c>)
 800da1c:	4810      	ldr	r0, [pc, #64]	; (800da60 <netconn_getaddr+0x94>)
 800da1e:	f012 fd17 	bl	8020450 <iprintf>
 800da22:	f06f 030f 	mvn.w	r3, #15
 800da26:	e013      	b.n	800da50 <netconn_getaddr+0x84>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800da28:	68fb      	ldr	r3, [r7, #12]
 800da2a:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.ad.local = local;
 800da2c:	78fb      	ldrb	r3, [r7, #3]
 800da2e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
#if LWIP_MPU_COMPATIBLE
  err = netconn_apimsg(lwip_netconn_do_getaddr, &API_MSG_VAR_REF(msg));
  *addr = msg->msg.ad.ipaddr;
  *port = msg->msg.ad.port;
#else /* LWIP_MPU_COMPATIBLE */
  msg.msg.ad.ipaddr = addr;
 800da32:	68bb      	ldr	r3, [r7, #8]
 800da34:	61fb      	str	r3, [r7, #28]
  msg.msg.ad.port = port;
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	623b      	str	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_getaddr, &msg);
 800da3a:	f107 0314 	add.w	r3, r7, #20
 800da3e:	4619      	mov	r1, r3
 800da40:	480a      	ldr	r0, [pc, #40]	; (800da6c <netconn_getaddr+0xa0>)
 800da42:	f7ff feeb 	bl	800d81c <netconn_apimsg>
 800da46:	4603      	mov	r3, r0
 800da48:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
#endif /* LWIP_MPU_COMPATIBLE */
  API_MSG_VAR_FREE(msg);

  return err;
 800da4c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800da50:	4618      	mov	r0, r3
 800da52:	3738      	adds	r7, #56	; 0x38
 800da54:	46bd      	mov	sp, r7
 800da56:	bd80      	pop	{r7, pc}
 800da58:	08023298 	.word	0x08023298
 800da5c:	08023370 	.word	0x08023370
 800da60:	080232f0 	.word	0x080232f0
 800da64:	08023390 	.word	0x08023390
 800da68:	080233b0 	.word	0x080233b0
 800da6c:	0800fa19 	.word	0x0800fa19

0800da70 <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 800da70:	b580      	push	{r7, lr}
 800da72:	b08e      	sub	sp, #56	; 0x38
 800da74:	af00      	add	r7, sp, #0
 800da76:	60f8      	str	r0, [r7, #12]
 800da78:	60b9      	str	r1, [r7, #8]
 800da7a:	4613      	mov	r3, r2
 800da7c:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 800da7e:	68fb      	ldr	r3, [r7, #12]
 800da80:	2b00      	cmp	r3, #0
 800da82:	d109      	bne.n	800da98 <netconn_bind+0x28>
 800da84:	4b11      	ldr	r3, [pc, #68]	; (800dacc <netconn_bind+0x5c>)
 800da86:	f44f 729c 	mov.w	r2, #312	; 0x138
 800da8a:	4911      	ldr	r1, [pc, #68]	; (800dad0 <netconn_bind+0x60>)
 800da8c:	4811      	ldr	r0, [pc, #68]	; (800dad4 <netconn_bind+0x64>)
 800da8e:	f012 fcdf 	bl	8020450 <iprintf>
 800da92:	f06f 030f 	mvn.w	r3, #15
 800da96:	e015      	b.n	800dac4 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 800da98:	68bb      	ldr	r3, [r7, #8]
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	d101      	bne.n	800daa2 <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 800da9e:	4b0e      	ldr	r3, [pc, #56]	; (800dad8 <netconn_bind+0x68>)
 800daa0:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800daa2:	68fb      	ldr	r3, [r7, #12]
 800daa4:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 800daa6:	68bb      	ldr	r3, [r7, #8]
 800daa8:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 800daaa:	88fb      	ldrh	r3, [r7, #6]
 800daac:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 800daae:	f107 0314 	add.w	r3, r7, #20
 800dab2:	4619      	mov	r1, r3
 800dab4:	4809      	ldr	r0, [pc, #36]	; (800dadc <netconn_bind+0x6c>)
 800dab6:	f7ff feb1 	bl	800d81c <netconn_apimsg>
 800daba:	4603      	mov	r3, r0
 800dabc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 800dac0:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800dac4:	4618      	mov	r0, r3
 800dac6:	3738      	adds	r7, #56	; 0x38
 800dac8:	46bd      	mov	sp, r7
 800daca:	bd80      	pop	{r7, pc}
 800dacc:	08023298 	.word	0x08023298
 800dad0:	080233d0 	.word	0x080233d0
 800dad4:	080232f0 	.word	0x080232f0
 800dad8:	08027084 	.word	0x08027084
 800dadc:	0800f2c1 	.word	0x0800f2c1

0800dae0 <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 800dae0:	b580      	push	{r7, lr}
 800dae2:	b08c      	sub	sp, #48	; 0x30
 800dae4:	af00      	add	r7, sp, #0
 800dae6:	6078      	str	r0, [r7, #4]
 800dae8:	460b      	mov	r3, r1
 800daea:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	2b00      	cmp	r3, #0
 800daf0:	d109      	bne.n	800db06 <netconn_listen_with_backlog+0x26>
 800daf2:	4b0d      	ldr	r3, [pc, #52]	; (800db28 <netconn_listen_with_backlog+0x48>)
 800daf4:	f240 12bb 	movw	r2, #443	; 0x1bb
 800daf8:	490c      	ldr	r1, [pc, #48]	; (800db2c <netconn_listen_with_backlog+0x4c>)
 800dafa:	480d      	ldr	r0, [pc, #52]	; (800db30 <netconn_listen_with_backlog+0x50>)
 800dafc:	f012 fca8 	bl	8020450 <iprintf>
 800db00:	f06f 030f 	mvn.w	r3, #15
 800db04:	e00c      	b.n	800db20 <netconn_listen_with_backlog+0x40>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	60fb      	str	r3, [r7, #12]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 800db0a:	f107 030c 	add.w	r3, r7, #12
 800db0e:	4619      	mov	r1, r3
 800db10:	4808      	ldr	r0, [pc, #32]	; (800db34 <netconn_listen_with_backlog+0x54>)
 800db12:	f7ff fe83 	bl	800d81c <netconn_apimsg>
 800db16:	4603      	mov	r3, r0
 800db18:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800db1c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 800db20:	4618      	mov	r0, r3
 800db22:	3730      	adds	r7, #48	; 0x30
 800db24:	46bd      	mov	sp, r7
 800db26:	bd80      	pop	{r7, pc}
 800db28:	08023298 	.word	0x08023298
 800db2c:	08023450 	.word	0x08023450
 800db30:	080232f0 	.word	0x080232f0
 800db34:	0800f335 	.word	0x0800f335

0800db38 <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 800db38:	b580      	push	{r7, lr}
 800db3a:	b086      	sub	sp, #24
 800db3c:	af00      	add	r7, sp, #0
 800db3e:	6078      	str	r0, [r7, #4]
 800db40:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 800db42:	683b      	ldr	r3, [r7, #0]
 800db44:	2b00      	cmp	r3, #0
 800db46:	d109      	bne.n	800db5c <netconn_accept+0x24>
 800db48:	4b3d      	ldr	r3, [pc, #244]	; (800dc40 <netconn_accept+0x108>)
 800db4a:	f240 12e1 	movw	r2, #481	; 0x1e1
 800db4e:	493d      	ldr	r1, [pc, #244]	; (800dc44 <netconn_accept+0x10c>)
 800db50:	483d      	ldr	r0, [pc, #244]	; (800dc48 <netconn_accept+0x110>)
 800db52:	f012 fc7d 	bl	8020450 <iprintf>
 800db56:	f06f 030f 	mvn.w	r3, #15
 800db5a:	e06c      	b.n	800dc36 <netconn_accept+0xfe>
  *new_conn = NULL;
 800db5c:	683b      	ldr	r3, [r7, #0]
 800db5e:	2200      	movs	r2, #0
 800db60:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	2b00      	cmp	r3, #0
 800db66:	d109      	bne.n	800db7c <netconn_accept+0x44>
 800db68:	4b35      	ldr	r3, [pc, #212]	; (800dc40 <netconn_accept+0x108>)
 800db6a:	f240 12e3 	movw	r2, #483	; 0x1e3
 800db6e:	4937      	ldr	r1, [pc, #220]	; (800dc4c <netconn_accept+0x114>)
 800db70:	4835      	ldr	r0, [pc, #212]	; (800dc48 <netconn_accept+0x110>)
 800db72:	f012 fc6d 	bl	8020450 <iprintf>
 800db76:	f06f 030f 	mvn.w	r3, #15
 800db7a:	e05c      	b.n	800dc36 <netconn_accept+0xfe>

  /* NOTE: Although the opengroup spec says a pending error shall be returned to
           send/recv/getsockopt(SO_ERROR) only, we return it for listening
           connections also, to handle embedded-system errors */
  err = netconn_err(conn);
 800db7c:	6878      	ldr	r0, [r7, #4]
 800db7e:	f000 fb99 	bl	800e2b4 <netconn_err>
 800db82:	4603      	mov	r3, r0
 800db84:	74fb      	strb	r3, [r7, #19]
  if (err != ERR_OK) {
 800db86:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d002      	beq.n	800db94 <netconn_accept+0x5c>
    /* return pending error */
    return err;
 800db8e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800db92:	e050      	b.n	800dc36 <netconn_accept+0xfe>
  }
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	3314      	adds	r3, #20
 800db98:	4618      	mov	r0, r3
 800db9a:	f010 fd7c 	bl	801e696 <sys_mbox_valid>
 800db9e:	4603      	mov	r3, r0
 800dba0:	2b00      	cmp	r3, #0
 800dba2:	d005      	beq.n	800dbb0 <netconn_accept+0x78>
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	7f1b      	ldrb	r3, [r3, #28]
 800dba8:	f003 0301 	and.w	r3, r3, #1
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	d002      	beq.n	800dbb6 <netconn_accept+0x7e>
    /* don't accept if closed: this might block the application task
       waiting on acceptmbox forever! */
    return ERR_CLSD;
 800dbb0:	f06f 030e 	mvn.w	r3, #14
 800dbb4:	e03f      	b.n	800dc36 <netconn_accept+0xfe>
  }

  API_MSG_VAR_ALLOC_ACCEPT(msg);

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn)) {
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	7f1b      	ldrb	r3, [r3, #28]
 800dbba:	f003 0302 	and.w	r3, r3, #2
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	d00e      	beq.n	800dbe0 <netconn_accept+0xa8>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	3314      	adds	r3, #20
 800dbc6:	f107 020c 	add.w	r2, r7, #12
 800dbca:	4611      	mov	r1, r2
 800dbcc:	4618      	mov	r0, r3
 800dbce:	f010 fd46 	bl	801e65e <sys_arch_mbox_tryfetch>
 800dbd2:	4603      	mov	r3, r0
 800dbd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dbd8:	d10a      	bne.n	800dbf0 <netconn_accept+0xb8>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_WOULDBLOCK;
 800dbda:	f06f 0306 	mvn.w	r3, #6
 800dbde:	e02a      	b.n	800dc36 <netconn_accept+0xfe>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	3314      	adds	r3, #20
 800dbe4:	f107 010c 	add.w	r1, r7, #12
 800dbe8:	2200      	movs	r2, #0
 800dbea:	4618      	mov	r0, r3
 800dbec:	f010 fcf8 	bl	801e5e0 <sys_arch_mbox_fetch>
    }
  }
#endif

  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	d005      	beq.n	800dc04 <netconn_accept+0xcc>
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbfc:	2200      	movs	r2, #0
 800dbfe:	2101      	movs	r1, #1
 800dc00:	6878      	ldr	r0, [r7, #4]
 800dc02:	4798      	blx	r3

  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 800dc04:	68fb      	ldr	r3, [r7, #12]
 800dc06:	f107 0213 	add.w	r2, r7, #19
 800dc0a:	4611      	mov	r1, r2
 800dc0c:	4618      	mov	r0, r3
 800dc0e:	f000 fba3 	bl	800e358 <lwip_netconn_is_err_msg>
 800dc12:	4603      	mov	r3, r0
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	d002      	beq.n	800dc1e <netconn_accept+0xe6>
    /* a connection has been aborted: e.g. out of pcbs or out of netconns during accept */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return err;
 800dc18:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800dc1c:	e00b      	b.n	800dc36 <netconn_accept+0xfe>
  }
  if (accept_ptr == NULL) {
 800dc1e:	68fb      	ldr	r3, [r7, #12]
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	d102      	bne.n	800dc2a <netconn_accept+0xf2>
    /* connection has been aborted */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return ERR_CLSD;
 800dc24:	f06f 030e 	mvn.w	r3, #14
 800dc28:	e005      	b.n	800dc36 <netconn_accept+0xfe>
  }
  newconn = (struct netconn *)accept_ptr;
 800dc2a:	68fb      	ldr	r3, [r7, #12]
 800dc2c:	617b      	str	r3, [r7, #20]
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 800dc2e:	683b      	ldr	r3, [r7, #0]
 800dc30:	697a      	ldr	r2, [r7, #20]
 800dc32:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800dc34:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 800dc36:	4618      	mov	r0, r3
 800dc38:	3718      	adds	r7, #24
 800dc3a:	46bd      	mov	sp, r7
 800dc3c:	bd80      	pop	{r7, pc}
 800dc3e:	bf00      	nop
 800dc40:	08023298 	.word	0x08023298
 800dc44:	08023470 	.word	0x08023470
 800dc48:	080232f0 	.word	0x080232f0
 800dc4c:	08023490 	.word	0x08023490

0800dc50 <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 800dc50:	b580      	push	{r7, lr}
 800dc52:	b088      	sub	sp, #32
 800dc54:	af00      	add	r7, sp, #0
 800dc56:	60f8      	str	r0, [r7, #12]
 800dc58:	60b9      	str	r1, [r7, #8]
 800dc5a:	4613      	mov	r3, r2
 800dc5c:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 800dc5e:	2300      	movs	r3, #0
 800dc60:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800dc62:	68bb      	ldr	r3, [r7, #8]
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	d109      	bne.n	800dc7c <netconn_recv_data+0x2c>
 800dc68:	4b58      	ldr	r3, [pc, #352]	; (800ddcc <netconn_recv_data+0x17c>)
 800dc6a:	f44f 7212 	mov.w	r2, #584	; 0x248
 800dc6e:	4958      	ldr	r1, [pc, #352]	; (800ddd0 <netconn_recv_data+0x180>)
 800dc70:	4858      	ldr	r0, [pc, #352]	; (800ddd4 <netconn_recv_data+0x184>)
 800dc72:	f012 fbed 	bl	8020450 <iprintf>
 800dc76:	f06f 030f 	mvn.w	r3, #15
 800dc7a:	e0a2      	b.n	800ddc2 <netconn_recv_data+0x172>
  *new_buf = NULL;
 800dc7c:	68bb      	ldr	r3, [r7, #8]
 800dc7e:	2200      	movs	r2, #0
 800dc80:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800dc82:	68fb      	ldr	r3, [r7, #12]
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d109      	bne.n	800dc9c <netconn_recv_data+0x4c>
 800dc88:	4b50      	ldr	r3, [pc, #320]	; (800ddcc <netconn_recv_data+0x17c>)
 800dc8a:	f240 224a 	movw	r2, #586	; 0x24a
 800dc8e:	4952      	ldr	r1, [pc, #328]	; (800ddd8 <netconn_recv_data+0x188>)
 800dc90:	4850      	ldr	r0, [pc, #320]	; (800ddd4 <netconn_recv_data+0x184>)
 800dc92:	f012 fbdd 	bl	8020450 <iprintf>
 800dc96:	f06f 030f 	mvn.w	r3, #15
 800dc9a:	e092      	b.n	800ddc2 <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800dc9c:	68fb      	ldr	r3, [r7, #12]
 800dc9e:	3310      	adds	r3, #16
 800dca0:	4618      	mov	r0, r3
 800dca2:	f010 fcf8 	bl	801e696 <sys_mbox_valid>
 800dca6:	4603      	mov	r3, r0
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d10e      	bne.n	800dcca <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 800dcac:	68f8      	ldr	r0, [r7, #12]
 800dcae:	f000 fb01 	bl	800e2b4 <netconn_err>
 800dcb2:	4603      	mov	r3, r0
 800dcb4:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 800dcb6:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	d002      	beq.n	800dcc4 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 800dcbe:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800dcc2:	e07e      	b.n	800ddc2 <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 800dcc4:	f06f 030a 	mvn.w	r3, #10
 800dcc8:	e07b      	b.n	800ddc2 <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800dcca:	68fb      	ldr	r3, [r7, #12]
 800dccc:	7f1b      	ldrb	r3, [r3, #28]
 800dcce:	f003 0302 	and.w	r3, r3, #2
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	d10f      	bne.n	800dcf6 <netconn_recv_data+0xa6>
 800dcd6:	79fb      	ldrb	r3, [r7, #7]
 800dcd8:	f003 0304 	and.w	r3, r3, #4
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	d10a      	bne.n	800dcf6 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800dce0:	68fb      	ldr	r3, [r7, #12]
 800dce2:	7f1b      	ldrb	r3, [r3, #28]
 800dce4:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	d104      	bne.n	800dcf6 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800dcec:	68fb      	ldr	r3, [r7, #12]
 800dcee:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	d023      	beq.n	800dd3e <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 800dcf6:	68fb      	ldr	r3, [r7, #12]
 800dcf8:	3310      	adds	r3, #16
 800dcfa:	f107 0218 	add.w	r2, r7, #24
 800dcfe:	4611      	mov	r1, r2
 800dd00:	4618      	mov	r0, r3
 800dd02:	f010 fcac 	bl	801e65e <sys_arch_mbox_tryfetch>
 800dd06:	4603      	mov	r3, r0
 800dd08:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd0c:	d11f      	bne.n	800dd4e <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 800dd0e:	68f8      	ldr	r0, [r7, #12]
 800dd10:	f000 fad0 	bl	800e2b4 <netconn_err>
 800dd14:	4603      	mov	r3, r0
 800dd16:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 800dd18:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	d002      	beq.n	800dd26 <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 800dd20:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800dd24:	e04d      	b.n	800ddc2 <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 800dd26:	68fb      	ldr	r3, [r7, #12]
 800dd28:	7f1b      	ldrb	r3, [r3, #28]
 800dd2a:	f003 0301 	and.w	r3, r3, #1
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d002      	beq.n	800dd38 <netconn_recv_data+0xe8>
        return ERR_CONN;
 800dd32:	f06f 030a 	mvn.w	r3, #10
 800dd36:	e044      	b.n	800ddc2 <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 800dd38:	f06f 0306 	mvn.w	r3, #6
 800dd3c:	e041      	b.n	800ddc2 <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 800dd3e:	68fb      	ldr	r3, [r7, #12]
 800dd40:	3310      	adds	r3, #16
 800dd42:	f107 0118 	add.w	r1, r7, #24
 800dd46:	2200      	movs	r2, #0
 800dd48:	4618      	mov	r0, r3
 800dd4a:	f010 fc49 	bl	801e5e0 <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800dd4e:	68fb      	ldr	r3, [r7, #12]
 800dd50:	781b      	ldrb	r3, [r3, #0]
 800dd52:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800dd56:	2b10      	cmp	r3, #16
 800dd58:	d117      	bne.n	800dd8a <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 800dd5a:	69bb      	ldr	r3, [r7, #24]
 800dd5c:	f107 0217 	add.w	r2, r7, #23
 800dd60:	4611      	mov	r1, r2
 800dd62:	4618      	mov	r0, r3
 800dd64:	f000 faf8 	bl	800e358 <lwip_netconn_is_err_msg>
 800dd68:	4603      	mov	r3, r0
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	d009      	beq.n	800dd82 <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 800dd6e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800dd72:	f113 0f0f 	cmn.w	r3, #15
 800dd76:	d101      	bne.n	800dd7c <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 800dd78:	2300      	movs	r3, #0
 800dd7a:	e022      	b.n	800ddc2 <netconn_recv_data+0x172>
      }
      return err;
 800dd7c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800dd80:	e01f      	b.n	800ddc2 <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 800dd82:	69bb      	ldr	r3, [r7, #24]
 800dd84:	891b      	ldrh	r3, [r3, #8]
 800dd86:	83fb      	strh	r3, [r7, #30]
 800dd88:	e00d      	b.n	800dda6 <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 800dd8a:	69bb      	ldr	r3, [r7, #24]
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	d106      	bne.n	800dd9e <netconn_recv_data+0x14e>
 800dd90:	4b0e      	ldr	r3, [pc, #56]	; (800ddcc <netconn_recv_data+0x17c>)
 800dd92:	f240 2291 	movw	r2, #657	; 0x291
 800dd96:	4911      	ldr	r1, [pc, #68]	; (800dddc <netconn_recv_data+0x18c>)
 800dd98:	480e      	ldr	r0, [pc, #56]	; (800ddd4 <netconn_recv_data+0x184>)
 800dd9a:	f012 fb59 	bl	8020450 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 800dd9e:	69bb      	ldr	r3, [r7, #24]
 800dda0:	681b      	ldr	r3, [r3, #0]
 800dda2:	891b      	ldrh	r3, [r3, #8]
 800dda4:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 800dda6:	68fb      	ldr	r3, [r7, #12]
 800dda8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	d005      	beq.n	800ddba <netconn_recv_data+0x16a>
 800ddae:	68fb      	ldr	r3, [r7, #12]
 800ddb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ddb2:	8bfa      	ldrh	r2, [r7, #30]
 800ddb4:	2101      	movs	r1, #1
 800ddb6:	68f8      	ldr	r0, [r7, #12]
 800ddb8:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 800ddba:	69ba      	ldr	r2, [r7, #24]
 800ddbc:	68bb      	ldr	r3, [r7, #8]
 800ddbe:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800ddc0:	2300      	movs	r3, #0
}
 800ddc2:	4618      	mov	r0, r3
 800ddc4:	3720      	adds	r7, #32
 800ddc6:	46bd      	mov	sp, r7
 800ddc8:	bd80      	pop	{r7, pc}
 800ddca:	bf00      	nop
 800ddcc:	08023298 	.word	0x08023298
 800ddd0:	080234b0 	.word	0x080234b0
 800ddd4:	080232f0 	.word	0x080232f0
 800ddd8:	080234d0 	.word	0x080234d0
 800dddc:	080234ec 	.word	0x080234ec

0800dde0 <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 800dde0:	b580      	push	{r7, lr}
 800dde2:	b084      	sub	sp, #16
 800dde4:	af00      	add	r7, sp, #0
 800dde6:	60f8      	str	r0, [r7, #12]
 800dde8:	60b9      	str	r1, [r7, #8]
 800ddea:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800ddec:	68fb      	ldr	r3, [r7, #12]
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	d005      	beq.n	800ddfe <netconn_tcp_recvd_msg+0x1e>
 800ddf2:	68fb      	ldr	r3, [r7, #12]
 800ddf4:	781b      	ldrb	r3, [r3, #0]
 800ddf6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ddfa:	2b10      	cmp	r3, #16
 800ddfc:	d009      	beq.n	800de12 <netconn_tcp_recvd_msg+0x32>
 800ddfe:	4b0c      	ldr	r3, [pc, #48]	; (800de30 <netconn_tcp_recvd_msg+0x50>)
 800de00:	f240 22a7 	movw	r2, #679	; 0x2a7
 800de04:	490b      	ldr	r1, [pc, #44]	; (800de34 <netconn_tcp_recvd_msg+0x54>)
 800de06:	480c      	ldr	r0, [pc, #48]	; (800de38 <netconn_tcp_recvd_msg+0x58>)
 800de08:	f012 fb22 	bl	8020450 <iprintf>
 800de0c:	f06f 030f 	mvn.w	r3, #15
 800de10:	e00a      	b.n	800de28 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	68fa      	ldr	r2, [r7, #12]
 800de16:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	68ba      	ldr	r2, [r7, #8]
 800de1c:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 800de1e:	6879      	ldr	r1, [r7, #4]
 800de20:	4806      	ldr	r0, [pc, #24]	; (800de3c <netconn_tcp_recvd_msg+0x5c>)
 800de22:	f7ff fcfb 	bl	800d81c <netconn_apimsg>
 800de26:	4603      	mov	r3, r0
}
 800de28:	4618      	mov	r0, r3
 800de2a:	3710      	adds	r7, #16
 800de2c:	46bd      	mov	sp, r7
 800de2e:	bd80      	pop	{r7, pc}
 800de30:	08023298 	.word	0x08023298
 800de34:	080234f8 	.word	0x080234f8
 800de38:	080232f0 	.word	0x080232f0
 800de3c:	0800f4ff 	.word	0x0800f4ff

0800de40 <netconn_tcp_recvd>:

err_t
netconn_tcp_recvd(struct netconn *conn, size_t len)
{
 800de40:	b580      	push	{r7, lr}
 800de42:	b08c      	sub	sp, #48	; 0x30
 800de44:	af00      	add	r7, sp, #0
 800de46:	6078      	str	r0, [r7, #4]
 800de48:	6039      	str	r1, [r7, #0]
  err_t err;
  API_MSG_VAR_DECLARE(msg);
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d005      	beq.n	800de5c <netconn_tcp_recvd+0x1c>
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	781b      	ldrb	r3, [r3, #0]
 800de54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800de58:	2b10      	cmp	r3, #16
 800de5a:	d009      	beq.n	800de70 <netconn_tcp_recvd+0x30>
 800de5c:	4b0c      	ldr	r3, [pc, #48]	; (800de90 <netconn_tcp_recvd+0x50>)
 800de5e:	f240 22b5 	movw	r2, #693	; 0x2b5
 800de62:	490c      	ldr	r1, [pc, #48]	; (800de94 <netconn_tcp_recvd+0x54>)
 800de64:	480c      	ldr	r0, [pc, #48]	; (800de98 <netconn_tcp_recvd+0x58>)
 800de66:	f012 faf3 	bl	8020450 <iprintf>
 800de6a:	f06f 030f 	mvn.w	r3, #15
 800de6e:	e00b      	b.n	800de88 <netconn_tcp_recvd+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  API_MSG_VAR_ALLOC(msg);
  err = netconn_tcp_recvd_msg(conn, len, &API_VAR_REF(msg));
 800de70:	f107 030c 	add.w	r3, r7, #12
 800de74:	461a      	mov	r2, r3
 800de76:	6839      	ldr	r1, [r7, #0]
 800de78:	6878      	ldr	r0, [r7, #4]
 800de7a:	f7ff ffb1 	bl	800dde0 <netconn_tcp_recvd_msg>
 800de7e:	4603      	mov	r3, r0
 800de80:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);
  return err;
 800de84:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800de88:	4618      	mov	r0, r3
 800de8a:	3730      	adds	r7, #48	; 0x30
 800de8c:	46bd      	mov	sp, r7
 800de8e:	bd80      	pop	{r7, pc}
 800de90:	08023298 	.word	0x08023298
 800de94:	080234f8 	.word	0x080234f8
 800de98:	080232f0 	.word	0x080232f0

0800de9c <netconn_recv_data_tcp>:

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 800de9c:	b580      	push	{r7, lr}
 800de9e:	b090      	sub	sp, #64	; 0x40
 800dea0:	af00      	add	r7, sp, #0
 800dea2:	60f8      	str	r0, [r7, #12]
 800dea4:	60b9      	str	r1, [r7, #8]
 800dea6:	4613      	mov	r3, r2
 800dea8:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800deaa:	68fb      	ldr	r3, [r7, #12]
 800deac:	3310      	adds	r3, #16
 800deae:	4618      	mov	r0, r3
 800deb0:	f010 fbf1 	bl	801e696 <sys_mbox_valid>
 800deb4:	4603      	mov	r3, r0
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	d102      	bne.n	800dec0 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 800deba:	f06f 030a 	mvn.w	r3, #10
 800debe:	e06d      	b.n	800df9c <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 800dec0:	68fb      	ldr	r3, [r7, #12]
 800dec2:	7f1b      	ldrb	r3, [r3, #28]
 800dec4:	b25b      	sxtb	r3, r3
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	da07      	bge.n	800deda <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 800deca:	68fb      	ldr	r3, [r7, #12]
 800decc:	7f1b      	ldrb	r3, [r3, #28]
 800dece:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ded2:	b2da      	uxtb	r2, r3
 800ded4:	68fb      	ldr	r3, [r7, #12]
 800ded6:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 800ded8:	e039      	b.n	800df4e <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 800deda:	79fb      	ldrb	r3, [r7, #7]
 800dedc:	461a      	mov	r2, r3
 800dede:	68b9      	ldr	r1, [r7, #8]
 800dee0:	68f8      	ldr	r0, [r7, #12]
 800dee2:	f7ff feb5 	bl	800dc50 <netconn_recv_data>
 800dee6:	4603      	mov	r3, r0
 800dee8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 800deec:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800def0:	2b00      	cmp	r3, #0
 800def2:	d002      	beq.n	800defa <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 800def4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800def8:	e050      	b.n	800df9c <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 800defa:	68bb      	ldr	r3, [r7, #8]
 800defc:	681b      	ldr	r3, [r3, #0]
 800defe:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 800df00:	79fb      	ldrb	r3, [r7, #7]
 800df02:	f003 0308 	and.w	r3, r3, #8
 800df06:	2b00      	cmp	r3, #0
 800df08:	d10e      	bne.n	800df28 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 800df0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	d002      	beq.n	800df16 <netconn_recv_data_tcp+0x7a>
 800df10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df12:	891b      	ldrh	r3, [r3, #8]
 800df14:	e000      	b.n	800df18 <netconn_recv_data_tcp+0x7c>
 800df16:	2301      	movs	r3, #1
 800df18:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 800df1a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800df1c:	f107 0214 	add.w	r2, r7, #20
 800df20:	4619      	mov	r1, r3
 800df22:	68f8      	ldr	r0, [r7, #12]
 800df24:	f7ff ff5c 	bl	800dde0 <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 800df28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	d134      	bne.n	800df98 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 800df2e:	79fb      	ldrb	r3, [r7, #7]
 800df30:	f003 0310 	and.w	r3, r3, #16
 800df34:	2b00      	cmp	r3, #0
 800df36:	d009      	beq.n	800df4c <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 800df38:	68fb      	ldr	r3, [r7, #12]
 800df3a:	7f1b      	ldrb	r3, [r3, #28]
 800df3c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800df40:	b2da      	uxtb	r2, r3
 800df42:	68fb      	ldr	r3, [r7, #12]
 800df44:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 800df46:	f06f 0306 	mvn.w	r3, #6
 800df4a:	e027      	b.n	800df9c <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 800df4c:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800df4e:	68fb      	ldr	r3, [r7, #12]
 800df50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df52:	2b00      	cmp	r3, #0
 800df54:	d005      	beq.n	800df62 <netconn_recv_data_tcp+0xc6>
 800df56:	68fb      	ldr	r3, [r7, #12]
 800df58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df5a:	2200      	movs	r2, #0
 800df5c:	2101      	movs	r1, #1
 800df5e:	68f8      	ldr	r0, [r7, #12]
 800df60:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 800df62:	68fb      	ldr	r3, [r7, #12]
 800df64:	685b      	ldr	r3, [r3, #4]
 800df66:	2b00      	cmp	r3, #0
 800df68:	d10f      	bne.n	800df8a <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 800df6a:	68f8      	ldr	r0, [r7, #12]
 800df6c:	f000 f9a2 	bl	800e2b4 <netconn_err>
 800df70:	4603      	mov	r3, r0
 800df72:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 800df76:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	d002      	beq.n	800df84 <netconn_recv_data_tcp+0xe8>
          return err;
 800df7e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800df82:	e00b      	b.n	800df9c <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 800df84:	f06f 030d 	mvn.w	r3, #13
 800df88:	e008      	b.n	800df9c <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 800df8a:	2101      	movs	r1, #1
 800df8c:	68f8      	ldr	r0, [r7, #12]
 800df8e:	f000 f961 	bl	800e254 <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 800df92:	f06f 030e 	mvn.w	r3, #14
 800df96:	e001      	b.n	800df9c <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 800df98:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800df9c:	4618      	mov	r0, r3
 800df9e:	3740      	adds	r7, #64	; 0x40
 800dfa0:	46bd      	mov	sp, r7
 800dfa2:	bd80      	pop	{r7, pc}

0800dfa4 <netconn_recv_tcp_pbuf_flags>:
 *                memory error or another error, @see netconn_recv_data)
 *         ERR_ARG if conn is not a TCP netconn
 */
err_t
netconn_recv_tcp_pbuf_flags(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 800dfa4:	b580      	push	{r7, lr}
 800dfa6:	b084      	sub	sp, #16
 800dfa8:	af00      	add	r7, sp, #0
 800dfaa:	60f8      	str	r0, [r7, #12]
 800dfac:	60b9      	str	r1, [r7, #8]
 800dfae:	4613      	mov	r3, r2
 800dfb0:	71fb      	strb	r3, [r7, #7]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800dfb2:	68fb      	ldr	r3, [r7, #12]
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	d005      	beq.n	800dfc4 <netconn_recv_tcp_pbuf_flags+0x20>
 800dfb8:	68fb      	ldr	r3, [r7, #12]
 800dfba:	781b      	ldrb	r3, [r3, #0]
 800dfbc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800dfc0:	2b10      	cmp	r3, #16
 800dfc2:	d009      	beq.n	800dfd8 <netconn_recv_tcp_pbuf_flags+0x34>
 800dfc4:	4b0a      	ldr	r3, [pc, #40]	; (800dff0 <netconn_recv_tcp_pbuf_flags+0x4c>)
 800dfc6:	f240 3225 	movw	r2, #805	; 0x325
 800dfca:	490a      	ldr	r1, [pc, #40]	; (800dff4 <netconn_recv_tcp_pbuf_flags+0x50>)
 800dfcc:	480a      	ldr	r0, [pc, #40]	; (800dff8 <netconn_recv_tcp_pbuf_flags+0x54>)
 800dfce:	f012 fa3f 	bl	8020450 <iprintf>
 800dfd2:	f06f 030f 	mvn.w	r3, #15
 800dfd6:	e006      	b.n	800dfe6 <netconn_recv_tcp_pbuf_flags+0x42>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  return netconn_recv_data_tcp(conn, new_buf, apiflags);
 800dfd8:	79fb      	ldrb	r3, [r7, #7]
 800dfda:	461a      	mov	r2, r3
 800dfdc:	68b9      	ldr	r1, [r7, #8]
 800dfde:	68f8      	ldr	r0, [r7, #12]
 800dfe0:	f7ff ff5c 	bl	800de9c <netconn_recv_data_tcp>
 800dfe4:	4603      	mov	r3, r0
}
 800dfe6:	4618      	mov	r0, r3
 800dfe8:	3710      	adds	r7, #16
 800dfea:	46bd      	mov	sp, r7
 800dfec:	bd80      	pop	{r7, pc}
 800dfee:	bf00      	nop
 800dff0:	08023298 	.word	0x08023298
 800dff4:	080234f8 	.word	0x080234f8
 800dff8:	080232f0 	.word	0x080232f0

0800dffc <netconn_recv_udp_raw_netbuf_flags>:
 *                memory error or another error)
 *         ERR_ARG if conn is not a UDP/RAW netconn
 */
err_t
netconn_recv_udp_raw_netbuf_flags(struct netconn *conn, struct netbuf **new_buf, u8_t apiflags)
{
 800dffc:	b580      	push	{r7, lr}
 800dffe:	b084      	sub	sp, #16
 800e000:	af00      	add	r7, sp, #0
 800e002:	60f8      	str	r0, [r7, #12]
 800e004:	60b9      	str	r1, [r7, #8]
 800e006:	4613      	mov	r3, r2
 800e008:	71fb      	strb	r3, [r7, #7]
  LWIP_ERROR("netconn_recv_udp_raw_netbuf: invalid conn", (conn != NULL) &&
 800e00a:	68fb      	ldr	r3, [r7, #12]
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	d005      	beq.n	800e01c <netconn_recv_udp_raw_netbuf_flags+0x20>
 800e010:	68fb      	ldr	r3, [r7, #12]
 800e012:	781b      	ldrb	r3, [r3, #0]
 800e014:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e018:	2b10      	cmp	r3, #16
 800e01a:	d109      	bne.n	800e030 <netconn_recv_udp_raw_netbuf_flags+0x34>
 800e01c:	4b0a      	ldr	r3, [pc, #40]	; (800e048 <netconn_recv_udp_raw_netbuf_flags+0x4c>)
 800e01e:	f44f 7253 	mov.w	r2, #844	; 0x34c
 800e022:	490a      	ldr	r1, [pc, #40]	; (800e04c <netconn_recv_udp_raw_netbuf_flags+0x50>)
 800e024:	480a      	ldr	r0, [pc, #40]	; (800e050 <netconn_recv_udp_raw_netbuf_flags+0x54>)
 800e026:	f012 fa13 	bl	8020450 <iprintf>
 800e02a:	f06f 030f 	mvn.w	r3, #15
 800e02e:	e006      	b.n	800e03e <netconn_recv_udp_raw_netbuf_flags+0x42>
             NETCONNTYPE_GROUP(netconn_type(conn)) != NETCONN_TCP, return ERR_ARG;);

  return netconn_recv_data(conn, (void **)new_buf, apiflags);
 800e030:	79fb      	ldrb	r3, [r7, #7]
 800e032:	461a      	mov	r2, r3
 800e034:	68b9      	ldr	r1, [r7, #8]
 800e036:	68f8      	ldr	r0, [r7, #12]
 800e038:	f7ff fe0a 	bl	800dc50 <netconn_recv_data>
 800e03c:	4603      	mov	r3, r0
}
 800e03e:	4618      	mov	r0, r3
 800e040:	3710      	adds	r7, #16
 800e042:	46bd      	mov	sp, r7
 800e044:	bd80      	pop	{r7, pc}
 800e046:	bf00      	nop
 800e048:	08023298 	.word	0x08023298
 800e04c:	0802351c 	.word	0x0802351c
 800e050:	080232f0 	.word	0x080232f0

0800e054 <netconn_send>:
 * @param buf a netbuf containing the data to send
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_send(struct netconn *conn, struct netbuf *buf)
{
 800e054:	b580      	push	{r7, lr}
 800e056:	b08c      	sub	sp, #48	; 0x30
 800e058:	af00      	add	r7, sp, #0
 800e05a:	6078      	str	r0, [r7, #4]
 800e05c:	6039      	str	r1, [r7, #0]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	2b00      	cmp	r3, #0
 800e062:	d109      	bne.n	800e078 <netconn_send+0x24>
 800e064:	4b0e      	ldr	r3, [pc, #56]	; (800e0a0 <netconn_send+0x4c>)
 800e066:	f240 32b2 	movw	r2, #946	; 0x3b2
 800e06a:	490e      	ldr	r1, [pc, #56]	; (800e0a4 <netconn_send+0x50>)
 800e06c:	480e      	ldr	r0, [pc, #56]	; (800e0a8 <netconn_send+0x54>)
 800e06e:	f012 f9ef 	bl	8020450 <iprintf>
 800e072:	f06f 030f 	mvn.w	r3, #15
 800e076:	e00e      	b.n	800e096 <netconn_send+0x42>

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_send: sending %"U16_F" bytes\n", buf->p->tot_len));

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	60fb      	str	r3, [r7, #12]
  API_MSG_VAR_REF(msg).msg.b = buf;
 800e07c:	683b      	ldr	r3, [r7, #0]
 800e07e:	617b      	str	r3, [r7, #20]
  err = netconn_apimsg(lwip_netconn_do_send, &API_MSG_VAR_REF(msg));
 800e080:	f107 030c 	add.w	r3, r7, #12
 800e084:	4619      	mov	r1, r3
 800e086:	4809      	ldr	r0, [pc, #36]	; (800e0ac <netconn_send+0x58>)
 800e088:	f7ff fbc8 	bl	800d81c <netconn_apimsg>
 800e08c:	4603      	mov	r3, r0
 800e08e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800e092:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800e096:	4618      	mov	r0, r3
 800e098:	3730      	adds	r7, #48	; 0x30
 800e09a:	46bd      	mov	sp, r7
 800e09c:	bd80      	pop	{r7, pc}
 800e09e:	bf00      	nop
 800e0a0:	08023298 	.word	0x08023298
 800e0a4:	08023554 	.word	0x08023554
 800e0a8:	080232f0 	.word	0x080232f0
 800e0ac:	0800f465 	.word	0x0800f465

0800e0b0 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 800e0b0:	b580      	push	{r7, lr}
 800e0b2:	b088      	sub	sp, #32
 800e0b4:	af02      	add	r7, sp, #8
 800e0b6:	60f8      	str	r0, [r7, #12]
 800e0b8:	60b9      	str	r1, [r7, #8]
 800e0ba:	607a      	str	r2, [r7, #4]
 800e0bc:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 800e0be:	68bb      	ldr	r3, [r7, #8]
 800e0c0:	613b      	str	r3, [r7, #16]
  vector.len = size;
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 800e0c6:	78fa      	ldrb	r2, [r7, #3]
 800e0c8:	f107 0110 	add.w	r1, r7, #16
 800e0cc:	6a3b      	ldr	r3, [r7, #32]
 800e0ce:	9300      	str	r3, [sp, #0]
 800e0d0:	4613      	mov	r3, r2
 800e0d2:	2201      	movs	r2, #1
 800e0d4:	68f8      	ldr	r0, [r7, #12]
 800e0d6:	f000 f805 	bl	800e0e4 <netconn_write_vectors_partly>
 800e0da:	4603      	mov	r3, r0
}
 800e0dc:	4618      	mov	r0, r3
 800e0de:	3718      	adds	r7, #24
 800e0e0:	46bd      	mov	sp, r7
 800e0e2:	bd80      	pop	{r7, pc}

0800e0e4 <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 800e0e4:	b580      	push	{r7, lr}
 800e0e6:	b092      	sub	sp, #72	; 0x48
 800e0e8:	af00      	add	r7, sp, #0
 800e0ea:	60f8      	str	r0, [r7, #12]
 800e0ec:	60b9      	str	r1, [r7, #8]
 800e0ee:	4611      	mov	r1, r2
 800e0f0:	461a      	mov	r2, r3
 800e0f2:	460b      	mov	r3, r1
 800e0f4:	80fb      	strh	r3, [r7, #6]
 800e0f6:	4613      	mov	r3, r2
 800e0f8:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 800e0fa:	68fb      	ldr	r3, [r7, #12]
 800e0fc:	2b00      	cmp	r3, #0
 800e0fe:	d109      	bne.n	800e114 <netconn_write_vectors_partly+0x30>
 800e100:	4b4e      	ldr	r3, [pc, #312]	; (800e23c <netconn_write_vectors_partly+0x158>)
 800e102:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800e106:	494e      	ldr	r1, [pc, #312]	; (800e240 <netconn_write_vectors_partly+0x15c>)
 800e108:	484e      	ldr	r0, [pc, #312]	; (800e244 <netconn_write_vectors_partly+0x160>)
 800e10a:	f012 f9a1 	bl	8020450 <iprintf>
 800e10e:	f06f 030f 	mvn.w	r3, #15
 800e112:	e08e      	b.n	800e232 <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 800e114:	68fb      	ldr	r3, [r7, #12]
 800e116:	781b      	ldrb	r3, [r3, #0]
 800e118:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e11c:	2b10      	cmp	r3, #16
 800e11e:	d009      	beq.n	800e134 <netconn_write_vectors_partly+0x50>
 800e120:	4b46      	ldr	r3, [pc, #280]	; (800e23c <netconn_write_vectors_partly+0x158>)
 800e122:	f240 32ef 	movw	r2, #1007	; 0x3ef
 800e126:	4948      	ldr	r1, [pc, #288]	; (800e248 <netconn_write_vectors_partly+0x164>)
 800e128:	4846      	ldr	r0, [pc, #280]	; (800e244 <netconn_write_vectors_partly+0x160>)
 800e12a:	f012 f991 	bl	8020450 <iprintf>
 800e12e:	f06f 0305 	mvn.w	r3, #5
 800e132:	e07e      	b.n	800e232 <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800e134:	68fb      	ldr	r3, [r7, #12]
 800e136:	7f1b      	ldrb	r3, [r3, #28]
 800e138:	f003 0302 	and.w	r3, r3, #2
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	d104      	bne.n	800e14a <netconn_write_vectors_partly+0x66>
 800e140:	797b      	ldrb	r3, [r7, #5]
 800e142:	f003 0304 	and.w	r3, r3, #4
 800e146:	2b00      	cmp	r3, #0
 800e148:	d001      	beq.n	800e14e <netconn_write_vectors_partly+0x6a>
 800e14a:	2301      	movs	r3, #1
 800e14c:	e000      	b.n	800e150 <netconn_write_vectors_partly+0x6c>
 800e14e:	2300      	movs	r3, #0
 800e150:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 800e154:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800e158:	2b00      	cmp	r3, #0
 800e15a:	d005      	beq.n	800e168 <netconn_write_vectors_partly+0x84>
 800e15c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e15e:	2b00      	cmp	r3, #0
 800e160:	d102      	bne.n	800e168 <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 800e162:	f06f 0305 	mvn.w	r3, #5
 800e166:	e064      	b.n	800e232 <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 800e168:	2300      	movs	r3, #0
 800e16a:	647b      	str	r3, [r7, #68]	; 0x44
  for (i = 0; i < vectorcnt; i++) {
 800e16c:	2300      	movs	r3, #0
 800e16e:	643b      	str	r3, [r7, #64]	; 0x40
 800e170:	e015      	b.n	800e19e <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 800e172:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e174:	00db      	lsls	r3, r3, #3
 800e176:	68ba      	ldr	r2, [r7, #8]
 800e178:	4413      	add	r3, r2
 800e17a:	685b      	ldr	r3, [r3, #4]
 800e17c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e17e:	4413      	add	r3, r2
 800e180:	647b      	str	r3, [r7, #68]	; 0x44
    if (size < vectors[i].len) {
 800e182:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e184:	00db      	lsls	r3, r3, #3
 800e186:	68ba      	ldr	r2, [r7, #8]
 800e188:	4413      	add	r3, r2
 800e18a:	685b      	ldr	r3, [r3, #4]
 800e18c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e18e:	429a      	cmp	r2, r3
 800e190:	d202      	bcs.n	800e198 <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 800e192:	f06f 0305 	mvn.w	r3, #5
 800e196:	e04c      	b.n	800e232 <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 800e198:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e19a:	3301      	adds	r3, #1
 800e19c:	643b      	str	r3, [r7, #64]	; 0x40
 800e19e:	88fb      	ldrh	r3, [r7, #6]
 800e1a0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e1a2:	429a      	cmp	r2, r3
 800e1a4:	dbe5      	blt.n	800e172 <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 800e1a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	d101      	bne.n	800e1b0 <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 800e1ac:	2300      	movs	r3, #0
 800e1ae:	e040      	b.n	800e232 <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 800e1b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e1b2:	2b00      	cmp	r3, #0
 800e1b4:	da0a      	bge.n	800e1cc <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 800e1b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	d102      	bne.n	800e1c2 <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 800e1bc:	f06f 0305 	mvn.w	r3, #5
 800e1c0:	e037      	b.n	800e232 <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 800e1c2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800e1c6:	63bb      	str	r3, [r7, #56]	; 0x38
    size = (size_t)limited;
 800e1c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1ca:	647b      	str	r3, [r7, #68]	; 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 800e1cc:	68fb      	ldr	r3, [r7, #12]
 800e1ce:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 800e1d0:	68bb      	ldr	r3, [r7, #8]
 800e1d2:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 800e1d4:	88fb      	ldrh	r3, [r7, #6]
 800e1d6:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 800e1d8:	2300      	movs	r3, #0
 800e1da:	627b      	str	r3, [r7, #36]	; 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 800e1dc:	797b      	ldrb	r3, [r7, #5]
 800e1de:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 800e1e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e1e4:	62bb      	str	r3, [r7, #40]	; 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 800e1e6:	2300      	movs	r3, #0
 800e1e8:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 800e1ea:	f107 0314 	add.w	r3, r7, #20
 800e1ee:	4619      	mov	r1, r3
 800e1f0:	4816      	ldr	r0, [pc, #88]	; (800e24c <netconn_write_vectors_partly+0x168>)
 800e1f2:	f7ff fb13 	bl	800d81c <netconn_apimsg>
 800e1f6:	4603      	mov	r3, r0
 800e1f8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (err == ERR_OK) {
 800e1fc:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800e200:	2b00      	cmp	r3, #0
 800e202:	d114      	bne.n	800e22e <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 800e204:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e206:	2b00      	cmp	r3, #0
 800e208:	d002      	beq.n	800e210 <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 800e20a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e20c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e20e:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 800e210:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800e214:	2b00      	cmp	r3, #0
 800e216:	d10a      	bne.n	800e22e <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 800e218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e21a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e21c:	429a      	cmp	r2, r3
 800e21e:	d006      	beq.n	800e22e <netconn_write_vectors_partly+0x14a>
 800e220:	4b06      	ldr	r3, [pc, #24]	; (800e23c <netconn_write_vectors_partly+0x158>)
 800e222:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800e226:	490a      	ldr	r1, [pc, #40]	; (800e250 <netconn_write_vectors_partly+0x16c>)
 800e228:	4806      	ldr	r0, [pc, #24]	; (800e244 <netconn_write_vectors_partly+0x160>)
 800e22a:	f012 f911 	bl	8020450 <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 800e22e:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800e232:	4618      	mov	r0, r3
 800e234:	3748      	adds	r7, #72	; 0x48
 800e236:	46bd      	mov	sp, r7
 800e238:	bd80      	pop	{r7, pc}
 800e23a:	bf00      	nop
 800e23c:	08023298 	.word	0x08023298
 800e240:	08023570 	.word	0x08023570
 800e244:	080232f0 	.word	0x080232f0
 800e248:	0802358c 	.word	0x0802358c
 800e24c:	0800f901 	.word	0x0800f901
 800e250:	080235b0 	.word	0x080235b0

0800e254 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 800e254:	b580      	push	{r7, lr}
 800e256:	b08c      	sub	sp, #48	; 0x30
 800e258:	af00      	add	r7, sp, #0
 800e25a:	6078      	str	r0, [r7, #4]
 800e25c:	460b      	mov	r3, r1
 800e25e:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	2b00      	cmp	r3, #0
 800e264:	d109      	bne.n	800e27a <netconn_close_shutdown+0x26>
 800e266:	4b0f      	ldr	r3, [pc, #60]	; (800e2a4 <netconn_close_shutdown+0x50>)
 800e268:	f240 4247 	movw	r2, #1095	; 0x447
 800e26c:	490e      	ldr	r1, [pc, #56]	; (800e2a8 <netconn_close_shutdown+0x54>)
 800e26e:	480f      	ldr	r0, [pc, #60]	; (800e2ac <netconn_close_shutdown+0x58>)
 800e270:	f012 f8ee 	bl	8020450 <iprintf>
 800e274:	f06f 030f 	mvn.w	r3, #15
 800e278:	e010      	b.n	800e29c <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 800e27e:	78fb      	ldrb	r3, [r7, #3]
 800e280:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800e282:	2329      	movs	r3, #41	; 0x29
 800e284:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 800e286:	f107 030c 	add.w	r3, r7, #12
 800e28a:	4619      	mov	r1, r3
 800e28c:	4808      	ldr	r0, [pc, #32]	; (800e2b0 <netconn_close_shutdown+0x5c>)
 800e28e:	f7ff fac5 	bl	800d81c <netconn_apimsg>
 800e292:	4603      	mov	r3, r0
 800e294:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800e298:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800e29c:	4618      	mov	r0, r3
 800e29e:	3730      	adds	r7, #48	; 0x30
 800e2a0:	46bd      	mov	sp, r7
 800e2a2:	bd80      	pop	{r7, pc}
 800e2a4:	08023298 	.word	0x08023298
 800e2a8:	080235d4 	.word	0x080235d4
 800e2ac:	080232f0 	.word	0x080232f0
 800e2b0:	0800fb25 	.word	0x0800fb25

0800e2b4 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 800e2b4:	b580      	push	{r7, lr}
 800e2b6:	b084      	sub	sp, #16
 800e2b8:	af00      	add	r7, sp, #0
 800e2ba:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	2b00      	cmp	r3, #0
 800e2c0:	d101      	bne.n	800e2c6 <netconn_err+0x12>
    return ERR_OK;
 800e2c2:	2300      	movs	r3, #0
 800e2c4:	e00d      	b.n	800e2e2 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 800e2c6:	f010 fb01 	bl	801e8cc <sys_arch_protect>
 800e2ca:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	7a1b      	ldrb	r3, [r3, #8]
 800e2d0:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	2200      	movs	r2, #0
 800e2d6:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 800e2d8:	68f8      	ldr	r0, [r7, #12]
 800e2da:	f010 fb05 	bl	801e8e8 <sys_arch_unprotect>
  return err;
 800e2de:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800e2e2:	4618      	mov	r0, r3
 800e2e4:	3710      	adds	r7, #16
 800e2e6:	46bd      	mov	sp, r7
 800e2e8:	bd80      	pop	{r7, pc}
	...

0800e2ec <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 800e2ec:	b580      	push	{r7, lr}
 800e2ee:	b082      	sub	sp, #8
 800e2f0:	af00      	add	r7, sp, #0
 800e2f2:	4603      	mov	r3, r0
 800e2f4:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 800e2f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e2fa:	f113 0f0d 	cmn.w	r3, #13
 800e2fe:	d009      	beq.n	800e314 <lwip_netconn_err_to_msg+0x28>
 800e300:	f113 0f0d 	cmn.w	r3, #13
 800e304:	dc0c      	bgt.n	800e320 <lwip_netconn_err_to_msg+0x34>
 800e306:	f113 0f0f 	cmn.w	r3, #15
 800e30a:	d007      	beq.n	800e31c <lwip_netconn_err_to_msg+0x30>
 800e30c:	f113 0f0e 	cmn.w	r3, #14
 800e310:	d002      	beq.n	800e318 <lwip_netconn_err_to_msg+0x2c>
 800e312:	e005      	b.n	800e320 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 800e314:	4b0a      	ldr	r3, [pc, #40]	; (800e340 <lwip_netconn_err_to_msg+0x54>)
 800e316:	e00e      	b.n	800e336 <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 800e318:	4b0a      	ldr	r3, [pc, #40]	; (800e344 <lwip_netconn_err_to_msg+0x58>)
 800e31a:	e00c      	b.n	800e336 <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 800e31c:	4b0a      	ldr	r3, [pc, #40]	; (800e348 <lwip_netconn_err_to_msg+0x5c>)
 800e31e:	e00a      	b.n	800e336 <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 800e320:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e324:	2b00      	cmp	r3, #0
 800e326:	d005      	beq.n	800e334 <lwip_netconn_err_to_msg+0x48>
 800e328:	4b08      	ldr	r3, [pc, #32]	; (800e34c <lwip_netconn_err_to_msg+0x60>)
 800e32a:	227d      	movs	r2, #125	; 0x7d
 800e32c:	4908      	ldr	r1, [pc, #32]	; (800e350 <lwip_netconn_err_to_msg+0x64>)
 800e32e:	4809      	ldr	r0, [pc, #36]	; (800e354 <lwip_netconn_err_to_msg+0x68>)
 800e330:	f012 f88e 	bl	8020450 <iprintf>
      return NULL;
 800e334:	2300      	movs	r3, #0
  }
}
 800e336:	4618      	mov	r0, r3
 800e338:	3708      	adds	r7, #8
 800e33a:	46bd      	mov	sp, r7
 800e33c:	bd80      	pop	{r7, pc}
 800e33e:	bf00      	nop
 800e340:	08026f1c 	.word	0x08026f1c
 800e344:	08026f1d 	.word	0x08026f1d
 800e348:	08026f1e 	.word	0x08026f1e
 800e34c:	080235f0 	.word	0x080235f0
 800e350:	08023624 	.word	0x08023624
 800e354:	08023634 	.word	0x08023634

0800e358 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 800e358:	b580      	push	{r7, lr}
 800e35a:	b082      	sub	sp, #8
 800e35c:	af00      	add	r7, sp, #0
 800e35e:	6078      	str	r0, [r7, #4]
 800e360:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 800e362:	683b      	ldr	r3, [r7, #0]
 800e364:	2b00      	cmp	r3, #0
 800e366:	d105      	bne.n	800e374 <lwip_netconn_is_err_msg+0x1c>
 800e368:	4b12      	ldr	r3, [pc, #72]	; (800e3b4 <lwip_netconn_is_err_msg+0x5c>)
 800e36a:	2285      	movs	r2, #133	; 0x85
 800e36c:	4912      	ldr	r1, [pc, #72]	; (800e3b8 <lwip_netconn_is_err_msg+0x60>)
 800e36e:	4813      	ldr	r0, [pc, #76]	; (800e3bc <lwip_netconn_is_err_msg+0x64>)
 800e370:	f012 f86e 	bl	8020450 <iprintf>

  if (msg == &netconn_aborted) {
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	4a12      	ldr	r2, [pc, #72]	; (800e3c0 <lwip_netconn_is_err_msg+0x68>)
 800e378:	4293      	cmp	r3, r2
 800e37a:	d104      	bne.n	800e386 <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 800e37c:	683b      	ldr	r3, [r7, #0]
 800e37e:	22f3      	movs	r2, #243	; 0xf3
 800e380:	701a      	strb	r2, [r3, #0]
    return 1;
 800e382:	2301      	movs	r3, #1
 800e384:	e012      	b.n	800e3ac <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	4a0e      	ldr	r2, [pc, #56]	; (800e3c4 <lwip_netconn_is_err_msg+0x6c>)
 800e38a:	4293      	cmp	r3, r2
 800e38c:	d104      	bne.n	800e398 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 800e38e:	683b      	ldr	r3, [r7, #0]
 800e390:	22f2      	movs	r2, #242	; 0xf2
 800e392:	701a      	strb	r2, [r3, #0]
    return 1;
 800e394:	2301      	movs	r3, #1
 800e396:	e009      	b.n	800e3ac <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	4a0b      	ldr	r2, [pc, #44]	; (800e3c8 <lwip_netconn_is_err_msg+0x70>)
 800e39c:	4293      	cmp	r3, r2
 800e39e:	d104      	bne.n	800e3aa <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 800e3a0:	683b      	ldr	r3, [r7, #0]
 800e3a2:	22f1      	movs	r2, #241	; 0xf1
 800e3a4:	701a      	strb	r2, [r3, #0]
    return 1;
 800e3a6:	2301      	movs	r3, #1
 800e3a8:	e000      	b.n	800e3ac <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 800e3aa:	2300      	movs	r3, #0
}
 800e3ac:	4618      	mov	r0, r3
 800e3ae:	3708      	adds	r7, #8
 800e3b0:	46bd      	mov	sp, r7
 800e3b2:	bd80      	pop	{r7, pc}
 800e3b4:	080235f0 	.word	0x080235f0
 800e3b8:	0802365c 	.word	0x0802365c
 800e3bc:	08023634 	.word	0x08023634
 800e3c0:	08026f1c 	.word	0x08026f1c
 800e3c4:	08026f1d 	.word	0x08026f1d
 800e3c8:	08026f1e 	.word	0x08026f1e

0800e3cc <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 800e3cc:	b580      	push	{r7, lr}
 800e3ce:	b088      	sub	sp, #32
 800e3d0:	af00      	add	r7, sp, #0
 800e3d2:	60f8      	str	r0, [r7, #12]
 800e3d4:	60b9      	str	r1, [r7, #8]
 800e3d6:	607a      	str	r2, [r7, #4]
 800e3d8:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 800e3da:	68bb      	ldr	r3, [r7, #8]
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	d105      	bne.n	800e3ec <recv_udp+0x20>
 800e3e0:	4b34      	ldr	r3, [pc, #208]	; (800e4b4 <recv_udp+0xe8>)
 800e3e2:	22e5      	movs	r2, #229	; 0xe5
 800e3e4:	4934      	ldr	r1, [pc, #208]	; (800e4b8 <recv_udp+0xec>)
 800e3e6:	4835      	ldr	r0, [pc, #212]	; (800e4bc <recv_udp+0xf0>)
 800e3e8:	f012 f832 	bl	8020450 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 800e3ec:	68fb      	ldr	r3, [r7, #12]
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	d105      	bne.n	800e3fe <recv_udp+0x32>
 800e3f2:	4b30      	ldr	r3, [pc, #192]	; (800e4b4 <recv_udp+0xe8>)
 800e3f4:	22e6      	movs	r2, #230	; 0xe6
 800e3f6:	4932      	ldr	r1, [pc, #200]	; (800e4c0 <recv_udp+0xf4>)
 800e3f8:	4830      	ldr	r0, [pc, #192]	; (800e4bc <recv_udp+0xf0>)
 800e3fa:	f012 f829 	bl	8020450 <iprintf>
  conn = (struct netconn *)arg;
 800e3fe:	68fb      	ldr	r3, [r7, #12]
 800e400:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800e402:	69fb      	ldr	r3, [r7, #28]
 800e404:	2b00      	cmp	r3, #0
 800e406:	d103      	bne.n	800e410 <recv_udp+0x44>
    pbuf_free(p);
 800e408:	6878      	ldr	r0, [r7, #4]
 800e40a:	f004 fcf7 	bl	8012dfc <pbuf_free>
    return;
 800e40e:	e04d      	b.n	800e4ac <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 800e410:	69fb      	ldr	r3, [r7, #28]
 800e412:	685b      	ldr	r3, [r3, #4]
 800e414:	68ba      	ldr	r2, [r7, #8]
 800e416:	429a      	cmp	r2, r3
 800e418:	d005      	beq.n	800e426 <recv_udp+0x5a>
 800e41a:	4b26      	ldr	r3, [pc, #152]	; (800e4b4 <recv_udp+0xe8>)
 800e41c:	22ee      	movs	r2, #238	; 0xee
 800e41e:	4929      	ldr	r1, [pc, #164]	; (800e4c4 <recv_udp+0xf8>)
 800e420:	4826      	ldr	r0, [pc, #152]	; (800e4bc <recv_udp+0xf0>)
 800e422:	f012 f815 	bl	8020450 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800e426:	69fb      	ldr	r3, [r7, #28]
 800e428:	3310      	adds	r3, #16
 800e42a:	4618      	mov	r0, r3
 800e42c:	f010 f933 	bl	801e696 <sys_mbox_valid>
 800e430:	4603      	mov	r3, r0
 800e432:	2b00      	cmp	r3, #0
 800e434:	d103      	bne.n	800e43e <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 800e436:	6878      	ldr	r0, [r7, #4]
 800e438:	f004 fce0 	bl	8012dfc <pbuf_free>
    return;
 800e43c:	e036      	b.n	800e4ac <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800e43e:	2006      	movs	r0, #6
 800e440:	f003 fd84 	bl	8011f4c <memp_malloc>
 800e444:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 800e446:	69bb      	ldr	r3, [r7, #24]
 800e448:	2b00      	cmp	r3, #0
 800e44a:	d103      	bne.n	800e454 <recv_udp+0x88>
    pbuf_free(p);
 800e44c:	6878      	ldr	r0, [r7, #4]
 800e44e:	f004 fcd5 	bl	8012dfc <pbuf_free>
    return;
 800e452:	e02b      	b.n	800e4ac <recv_udp+0xe0>
  } else {
    buf->p = p;
 800e454:	69bb      	ldr	r3, [r7, #24]
 800e456:	687a      	ldr	r2, [r7, #4]
 800e458:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800e45a:	69bb      	ldr	r3, [r7, #24]
 800e45c:	687a      	ldr	r2, [r7, #4]
 800e45e:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 800e460:	683b      	ldr	r3, [r7, #0]
 800e462:	2b00      	cmp	r3, #0
 800e464:	d002      	beq.n	800e46c <recv_udp+0xa0>
 800e466:	683b      	ldr	r3, [r7, #0]
 800e468:	681b      	ldr	r3, [r3, #0]
 800e46a:	e000      	b.n	800e46e <recv_udp+0xa2>
 800e46c:	2300      	movs	r3, #0
 800e46e:	69ba      	ldr	r2, [r7, #24]
 800e470:	6093      	str	r3, [r2, #8]
    buf->port = port;
 800e472:	69bb      	ldr	r3, [r7, #24]
 800e474:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800e476:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	891b      	ldrh	r3, [r3, #8]
 800e47c:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 800e47e:	69fb      	ldr	r3, [r7, #28]
 800e480:	3310      	adds	r3, #16
 800e482:	69b9      	ldr	r1, [r7, #24]
 800e484:	4618      	mov	r0, r3
 800e486:	f010 f891 	bl	801e5ac <sys_mbox_trypost>
 800e48a:	4603      	mov	r3, r0
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	d003      	beq.n	800e498 <recv_udp+0xcc>
    netbuf_delete(buf);
 800e490:	69b8      	ldr	r0, [r7, #24]
 800e492:	f001 fbf1 	bl	800fc78 <netbuf_delete>
    return;
 800e496:	e009      	b.n	800e4ac <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800e498:	69fb      	ldr	r3, [r7, #28]
 800e49a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	d005      	beq.n	800e4ac <recv_udp+0xe0>
 800e4a0:	69fb      	ldr	r3, [r7, #28]
 800e4a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4a4:	8afa      	ldrh	r2, [r7, #22]
 800e4a6:	2100      	movs	r1, #0
 800e4a8:	69f8      	ldr	r0, [r7, #28]
 800e4aa:	4798      	blx	r3
  }
}
 800e4ac:	3720      	adds	r7, #32
 800e4ae:	46bd      	mov	sp, r7
 800e4b0:	bd80      	pop	{r7, pc}
 800e4b2:	bf00      	nop
 800e4b4:	080235f0 	.word	0x080235f0
 800e4b8:	08023668 	.word	0x08023668
 800e4bc:	08023634 	.word	0x08023634
 800e4c0:	0802368c 	.word	0x0802368c
 800e4c4:	080236ac 	.word	0x080236ac

0800e4c8 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800e4c8:	b580      	push	{r7, lr}
 800e4ca:	b088      	sub	sp, #32
 800e4cc:	af00      	add	r7, sp, #0
 800e4ce:	60f8      	str	r0, [r7, #12]
 800e4d0:	60b9      	str	r1, [r7, #8]
 800e4d2:	607a      	str	r2, [r7, #4]
 800e4d4:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 800e4d6:	68bb      	ldr	r3, [r7, #8]
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	d106      	bne.n	800e4ea <recv_tcp+0x22>
 800e4dc:	4b36      	ldr	r3, [pc, #216]	; (800e5b8 <recv_tcp+0xf0>)
 800e4de:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800e4e2:	4936      	ldr	r1, [pc, #216]	; (800e5bc <recv_tcp+0xf4>)
 800e4e4:	4836      	ldr	r0, [pc, #216]	; (800e5c0 <recv_tcp+0xf8>)
 800e4e6:	f011 ffb3 	bl	8020450 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 800e4ea:	68fb      	ldr	r3, [r7, #12]
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	d106      	bne.n	800e4fe <recv_tcp+0x36>
 800e4f0:	4b31      	ldr	r3, [pc, #196]	; (800e5b8 <recv_tcp+0xf0>)
 800e4f2:	f240 122d 	movw	r2, #301	; 0x12d
 800e4f6:	4933      	ldr	r1, [pc, #204]	; (800e5c4 <recv_tcp+0xfc>)
 800e4f8:	4831      	ldr	r0, [pc, #196]	; (800e5c0 <recv_tcp+0xf8>)
 800e4fa:	f011 ffa9 	bl	8020450 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 800e4fe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e502:	2b00      	cmp	r3, #0
 800e504:	d006      	beq.n	800e514 <recv_tcp+0x4c>
 800e506:	4b2c      	ldr	r3, [pc, #176]	; (800e5b8 <recv_tcp+0xf0>)
 800e508:	f44f 7297 	mov.w	r2, #302	; 0x12e
 800e50c:	492e      	ldr	r1, [pc, #184]	; (800e5c8 <recv_tcp+0x100>)
 800e50e:	482c      	ldr	r0, [pc, #176]	; (800e5c0 <recv_tcp+0xf8>)
 800e510:	f011 ff9e 	bl	8020450 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 800e514:	68fb      	ldr	r3, [r7, #12]
 800e516:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 800e518:	697b      	ldr	r3, [r7, #20]
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	d102      	bne.n	800e524 <recv_tcp+0x5c>
    return ERR_VAL;
 800e51e:	f06f 0305 	mvn.w	r3, #5
 800e522:	e045      	b.n	800e5b0 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 800e524:	697b      	ldr	r3, [r7, #20]
 800e526:	685b      	ldr	r3, [r3, #4]
 800e528:	68ba      	ldr	r2, [r7, #8]
 800e52a:	429a      	cmp	r2, r3
 800e52c:	d006      	beq.n	800e53c <recv_tcp+0x74>
 800e52e:	4b22      	ldr	r3, [pc, #136]	; (800e5b8 <recv_tcp+0xf0>)
 800e530:	f240 1235 	movw	r2, #309	; 0x135
 800e534:	4925      	ldr	r1, [pc, #148]	; (800e5cc <recv_tcp+0x104>)
 800e536:	4822      	ldr	r0, [pc, #136]	; (800e5c0 <recv_tcp+0xf8>)
 800e538:	f011 ff8a 	bl	8020450 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800e53c:	697b      	ldr	r3, [r7, #20]
 800e53e:	3310      	adds	r3, #16
 800e540:	4618      	mov	r0, r3
 800e542:	f010 f8a8 	bl	801e696 <sys_mbox_valid>
 800e546:	4603      	mov	r3, r0
 800e548:	2b00      	cmp	r3, #0
 800e54a:	d10d      	bne.n	800e568 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	2b00      	cmp	r3, #0
 800e550:	d008      	beq.n	800e564 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	891b      	ldrh	r3, [r3, #8]
 800e556:	4619      	mov	r1, r3
 800e558:	68b8      	ldr	r0, [r7, #8]
 800e55a:	f005 fc17 	bl	8013d8c <tcp_recved>
      pbuf_free(p);
 800e55e:	6878      	ldr	r0, [r7, #4]
 800e560:	f004 fc4c 	bl	8012dfc <pbuf_free>
    }
    return ERR_OK;
 800e564:	2300      	movs	r3, #0
 800e566:	e023      	b.n	800e5b0 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	d005      	beq.n	800e57a <recv_tcp+0xb2>
    msg = p;
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	891b      	ldrh	r3, [r3, #8]
 800e576:	83fb      	strh	r3, [r7, #30]
 800e578:	e003      	b.n	800e582 <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 800e57a:	4b15      	ldr	r3, [pc, #84]	; (800e5d0 <recv_tcp+0x108>)
 800e57c:	61bb      	str	r3, [r7, #24]
    len = 0;
 800e57e:	2300      	movs	r3, #0
 800e580:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 800e582:	697b      	ldr	r3, [r7, #20]
 800e584:	3310      	adds	r3, #16
 800e586:	69b9      	ldr	r1, [r7, #24]
 800e588:	4618      	mov	r0, r3
 800e58a:	f010 f80f 	bl	801e5ac <sys_mbox_trypost>
 800e58e:	4603      	mov	r3, r0
 800e590:	2b00      	cmp	r3, #0
 800e592:	d002      	beq.n	800e59a <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 800e594:	f04f 33ff 	mov.w	r3, #4294967295
 800e598:	e00a      	b.n	800e5b0 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800e59a:	697b      	ldr	r3, [r7, #20]
 800e59c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e59e:	2b00      	cmp	r3, #0
 800e5a0:	d005      	beq.n	800e5ae <recv_tcp+0xe6>
 800e5a2:	697b      	ldr	r3, [r7, #20]
 800e5a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5a6:	8bfa      	ldrh	r2, [r7, #30]
 800e5a8:	2100      	movs	r1, #0
 800e5aa:	6978      	ldr	r0, [r7, #20]
 800e5ac:	4798      	blx	r3
  }

  return ERR_OK;
 800e5ae:	2300      	movs	r3, #0
}
 800e5b0:	4618      	mov	r0, r3
 800e5b2:	3720      	adds	r7, #32
 800e5b4:	46bd      	mov	sp, r7
 800e5b6:	bd80      	pop	{r7, pc}
 800e5b8:	080235f0 	.word	0x080235f0
 800e5bc:	080236cc 	.word	0x080236cc
 800e5c0:	08023634 	.word	0x08023634
 800e5c4:	080236f0 	.word	0x080236f0
 800e5c8:	08023710 	.word	0x08023710
 800e5cc:	08023728 	.word	0x08023728
 800e5d0:	08026f1e 	.word	0x08026f1e

0800e5d4 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 800e5d4:	b580      	push	{r7, lr}
 800e5d6:	b084      	sub	sp, #16
 800e5d8:	af00      	add	r7, sp, #0
 800e5da:	6078      	str	r0, [r7, #4]
 800e5dc:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800e5e2:	68fb      	ldr	r3, [r7, #12]
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	d106      	bne.n	800e5f6 <poll_tcp+0x22>
 800e5e8:	4b29      	ldr	r3, [pc, #164]	; (800e690 <poll_tcp+0xbc>)
 800e5ea:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 800e5ee:	4929      	ldr	r1, [pc, #164]	; (800e694 <poll_tcp+0xc0>)
 800e5f0:	4829      	ldr	r0, [pc, #164]	; (800e698 <poll_tcp+0xc4>)
 800e5f2:	f011 ff2d 	bl	8020450 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 800e5f6:	68fb      	ldr	r3, [r7, #12]
 800e5f8:	785b      	ldrb	r3, [r3, #1]
 800e5fa:	2b01      	cmp	r3, #1
 800e5fc:	d104      	bne.n	800e608 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800e5fe:	2101      	movs	r1, #1
 800e600:	68f8      	ldr	r0, [r7, #12]
 800e602:	f000 ffb1 	bl	800f568 <lwip_netconn_do_writemore>
 800e606:	e016      	b.n	800e636 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 800e608:	68fb      	ldr	r3, [r7, #12]
 800e60a:	785b      	ldrb	r3, [r3, #1]
 800e60c:	2b04      	cmp	r3, #4
 800e60e:	d112      	bne.n	800e636 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 800e610:	68fb      	ldr	r3, [r7, #12]
 800e612:	6a1b      	ldr	r3, [r3, #32]
 800e614:	2b00      	cmp	r3, #0
 800e616:	d00a      	beq.n	800e62e <poll_tcp+0x5a>
 800e618:	68fb      	ldr	r3, [r7, #12]
 800e61a:	6a1b      	ldr	r3, [r3, #32]
 800e61c:	7a5b      	ldrb	r3, [r3, #9]
 800e61e:	2b00      	cmp	r3, #0
 800e620:	d005      	beq.n	800e62e <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 800e622:	68fb      	ldr	r3, [r7, #12]
 800e624:	6a1b      	ldr	r3, [r3, #32]
 800e626:	7a5a      	ldrb	r2, [r3, #9]
 800e628:	3a01      	subs	r2, #1
 800e62a:	b2d2      	uxtb	r2, r2
 800e62c:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800e62e:	2101      	movs	r1, #1
 800e630:	68f8      	ldr	r0, [r7, #12]
 800e632:	f000 fbf7 	bl	800ee24 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 800e636:	68fb      	ldr	r3, [r7, #12]
 800e638:	7f1b      	ldrb	r3, [r3, #28]
 800e63a:	f003 0310 	and.w	r3, r3, #16
 800e63e:	2b00      	cmp	r3, #0
 800e640:	d021      	beq.n	800e686 <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800e642:	68fb      	ldr	r3, [r7, #12]
 800e644:	685b      	ldr	r3, [r3, #4]
 800e646:	2b00      	cmp	r3, #0
 800e648:	d01d      	beq.n	800e686 <poll_tcp+0xb2>
 800e64a:	68fb      	ldr	r3, [r7, #12]
 800e64c:	685b      	ldr	r3, [r3, #4]
 800e64e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800e652:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800e656:	d316      	bcc.n	800e686 <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800e658:	68fb      	ldr	r3, [r7, #12]
 800e65a:	685b      	ldr	r3, [r3, #4]
 800e65c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800e660:	2b04      	cmp	r3, #4
 800e662:	d810      	bhi.n	800e686 <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800e664:	68fb      	ldr	r3, [r7, #12]
 800e666:	7f1b      	ldrb	r3, [r3, #28]
 800e668:	f023 0310 	bic.w	r3, r3, #16
 800e66c:	b2da      	uxtb	r2, r3
 800e66e:	68fb      	ldr	r3, [r7, #12]
 800e670:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800e672:	68fb      	ldr	r3, [r7, #12]
 800e674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e676:	2b00      	cmp	r3, #0
 800e678:	d005      	beq.n	800e686 <poll_tcp+0xb2>
 800e67a:	68fb      	ldr	r3, [r7, #12]
 800e67c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e67e:	2200      	movs	r2, #0
 800e680:	2102      	movs	r1, #2
 800e682:	68f8      	ldr	r0, [r7, #12]
 800e684:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800e686:	2300      	movs	r3, #0
}
 800e688:	4618      	mov	r0, r3
 800e68a:	3710      	adds	r7, #16
 800e68c:	46bd      	mov	sp, r7
 800e68e:	bd80      	pop	{r7, pc}
 800e690:	080235f0 	.word	0x080235f0
 800e694:	08023748 	.word	0x08023748
 800e698:	08023634 	.word	0x08023634

0800e69c <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 800e69c:	b580      	push	{r7, lr}
 800e69e:	b086      	sub	sp, #24
 800e6a0:	af00      	add	r7, sp, #0
 800e6a2:	60f8      	str	r0, [r7, #12]
 800e6a4:	60b9      	str	r1, [r7, #8]
 800e6a6:	4613      	mov	r3, r2
 800e6a8:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 800e6aa:	68fb      	ldr	r3, [r7, #12]
 800e6ac:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800e6ae:	697b      	ldr	r3, [r7, #20]
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	d106      	bne.n	800e6c2 <sent_tcp+0x26>
 800e6b4:	4b20      	ldr	r3, [pc, #128]	; (800e738 <sent_tcp+0x9c>)
 800e6b6:	f240 1293 	movw	r2, #403	; 0x193
 800e6ba:	4920      	ldr	r1, [pc, #128]	; (800e73c <sent_tcp+0xa0>)
 800e6bc:	4820      	ldr	r0, [pc, #128]	; (800e740 <sent_tcp+0xa4>)
 800e6be:	f011 fec7 	bl	8020450 <iprintf>

  if (conn) {
 800e6c2:	697b      	ldr	r3, [r7, #20]
 800e6c4:	2b00      	cmp	r3, #0
 800e6c6:	d032      	beq.n	800e72e <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 800e6c8:	697b      	ldr	r3, [r7, #20]
 800e6ca:	785b      	ldrb	r3, [r3, #1]
 800e6cc:	2b01      	cmp	r3, #1
 800e6ce:	d104      	bne.n	800e6da <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800e6d0:	2101      	movs	r1, #1
 800e6d2:	6978      	ldr	r0, [r7, #20]
 800e6d4:	f000 ff48 	bl	800f568 <lwip_netconn_do_writemore>
 800e6d8:	e007      	b.n	800e6ea <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 800e6da:	697b      	ldr	r3, [r7, #20]
 800e6dc:	785b      	ldrb	r3, [r3, #1]
 800e6de:	2b04      	cmp	r3, #4
 800e6e0:	d103      	bne.n	800e6ea <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800e6e2:	2101      	movs	r1, #1
 800e6e4:	6978      	ldr	r0, [r7, #20]
 800e6e6:	f000 fb9d 	bl	800ee24 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800e6ea:	697b      	ldr	r3, [r7, #20]
 800e6ec:	685b      	ldr	r3, [r3, #4]
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	d01d      	beq.n	800e72e <sent_tcp+0x92>
 800e6f2:	697b      	ldr	r3, [r7, #20]
 800e6f4:	685b      	ldr	r3, [r3, #4]
 800e6f6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800e6fa:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800e6fe:	d316      	bcc.n	800e72e <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800e700:	697b      	ldr	r3, [r7, #20]
 800e702:	685b      	ldr	r3, [r3, #4]
 800e704:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800e708:	2b04      	cmp	r3, #4
 800e70a:	d810      	bhi.n	800e72e <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800e70c:	697b      	ldr	r3, [r7, #20]
 800e70e:	7f1b      	ldrb	r3, [r3, #28]
 800e710:	f023 0310 	bic.w	r3, r3, #16
 800e714:	b2da      	uxtb	r2, r3
 800e716:	697b      	ldr	r3, [r7, #20]
 800e718:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 800e71a:	697b      	ldr	r3, [r7, #20]
 800e71c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e71e:	2b00      	cmp	r3, #0
 800e720:	d005      	beq.n	800e72e <sent_tcp+0x92>
 800e722:	697b      	ldr	r3, [r7, #20]
 800e724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e726:	88fa      	ldrh	r2, [r7, #6]
 800e728:	2102      	movs	r1, #2
 800e72a:	6978      	ldr	r0, [r7, #20]
 800e72c:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800e72e:	2300      	movs	r3, #0
}
 800e730:	4618      	mov	r0, r3
 800e732:	3718      	adds	r7, #24
 800e734:	46bd      	mov	sp, r7
 800e736:	bd80      	pop	{r7, pc}
 800e738:	080235f0 	.word	0x080235f0
 800e73c:	08023748 	.word	0x08023748
 800e740:	08023634 	.word	0x08023634

0800e744 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 800e744:	b580      	push	{r7, lr}
 800e746:	b088      	sub	sp, #32
 800e748:	af00      	add	r7, sp, #0
 800e74a:	6078      	str	r0, [r7, #4]
 800e74c:	460b      	mov	r3, r1
 800e74e:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800e754:	69fb      	ldr	r3, [r7, #28]
 800e756:	2b00      	cmp	r3, #0
 800e758:	d106      	bne.n	800e768 <err_tcp+0x24>
 800e75a:	4b5f      	ldr	r3, [pc, #380]	; (800e8d8 <err_tcp+0x194>)
 800e75c:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 800e760:	495e      	ldr	r1, [pc, #376]	; (800e8dc <err_tcp+0x198>)
 800e762:	485f      	ldr	r0, [pc, #380]	; (800e8e0 <err_tcp+0x19c>)
 800e764:	f011 fe74 	bl	8020450 <iprintf>

  SYS_ARCH_PROTECT(lev);
 800e768:	f010 f8b0 	bl	801e8cc <sys_arch_protect>
 800e76c:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 800e76e:	69fb      	ldr	r3, [r7, #28]
 800e770:	2200      	movs	r2, #0
 800e772:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 800e774:	69fb      	ldr	r3, [r7, #28]
 800e776:	78fa      	ldrb	r2, [r7, #3]
 800e778:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 800e77a:	69fb      	ldr	r3, [r7, #28]
 800e77c:	7f1b      	ldrb	r3, [r3, #28]
 800e77e:	f043 0301 	orr.w	r3, r3, #1
 800e782:	b2da      	uxtb	r2, r3
 800e784:	69fb      	ldr	r3, [r7, #28]
 800e786:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 800e788:	69fb      	ldr	r3, [r7, #28]
 800e78a:	785b      	ldrb	r3, [r3, #1]
 800e78c:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 800e78e:	69fb      	ldr	r3, [r7, #28]
 800e790:	2200      	movs	r2, #0
 800e792:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 800e794:	69b8      	ldr	r0, [r7, #24]
 800e796:	f010 f8a7 	bl	801e8e8 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800e79a:	69fb      	ldr	r3, [r7, #28]
 800e79c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e79e:	2b00      	cmp	r3, #0
 800e7a0:	d005      	beq.n	800e7ae <err_tcp+0x6a>
 800e7a2:	69fb      	ldr	r3, [r7, #28]
 800e7a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7a6:	2200      	movs	r2, #0
 800e7a8:	2104      	movs	r1, #4
 800e7aa:	69f8      	ldr	r0, [r7, #28]
 800e7ac:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800e7ae:	69fb      	ldr	r3, [r7, #28]
 800e7b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7b2:	2b00      	cmp	r3, #0
 800e7b4:	d005      	beq.n	800e7c2 <err_tcp+0x7e>
 800e7b6:	69fb      	ldr	r3, [r7, #28]
 800e7b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7ba:	2200      	movs	r2, #0
 800e7bc:	2100      	movs	r1, #0
 800e7be:	69f8      	ldr	r0, [r7, #28]
 800e7c0:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800e7c2:	69fb      	ldr	r3, [r7, #28]
 800e7c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	d005      	beq.n	800e7d6 <err_tcp+0x92>
 800e7ca:	69fb      	ldr	r3, [r7, #28]
 800e7cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7ce:	2200      	movs	r2, #0
 800e7d0:	2102      	movs	r1, #2
 800e7d2:	69f8      	ldr	r0, [r7, #28]
 800e7d4:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 800e7d6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e7da:	4618      	mov	r0, r3
 800e7dc:	f7ff fd86 	bl	800e2ec <lwip_netconn_err_to_msg>
 800e7e0:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800e7e2:	69fb      	ldr	r3, [r7, #28]
 800e7e4:	3310      	adds	r3, #16
 800e7e6:	4618      	mov	r0, r3
 800e7e8:	f00f ff55 	bl	801e696 <sys_mbox_valid>
 800e7ec:	4603      	mov	r3, r0
 800e7ee:	2b00      	cmp	r3, #0
 800e7f0:	d005      	beq.n	800e7fe <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 800e7f2:	69fb      	ldr	r3, [r7, #28]
 800e7f4:	3310      	adds	r3, #16
 800e7f6:	6939      	ldr	r1, [r7, #16]
 800e7f8:	4618      	mov	r0, r3
 800e7fa:	f00f fed7 	bl	801e5ac <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800e7fe:	69fb      	ldr	r3, [r7, #28]
 800e800:	3314      	adds	r3, #20
 800e802:	4618      	mov	r0, r3
 800e804:	f00f ff47 	bl	801e696 <sys_mbox_valid>
 800e808:	4603      	mov	r3, r0
 800e80a:	2b00      	cmp	r3, #0
 800e80c:	d005      	beq.n	800e81a <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 800e80e:	69fb      	ldr	r3, [r7, #28]
 800e810:	3314      	adds	r3, #20
 800e812:	6939      	ldr	r1, [r7, #16]
 800e814:	4618      	mov	r0, r3
 800e816:	f00f fec9 	bl	801e5ac <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 800e81a:	7dfb      	ldrb	r3, [r7, #23]
 800e81c:	2b01      	cmp	r3, #1
 800e81e:	d005      	beq.n	800e82c <err_tcp+0xe8>
 800e820:	7dfb      	ldrb	r3, [r7, #23]
 800e822:	2b04      	cmp	r3, #4
 800e824:	d002      	beq.n	800e82c <err_tcp+0xe8>
 800e826:	7dfb      	ldrb	r3, [r7, #23]
 800e828:	2b03      	cmp	r3, #3
 800e82a:	d143      	bne.n	800e8b4 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 800e82c:	69fb      	ldr	r3, [r7, #28]
 800e82e:	7f1b      	ldrb	r3, [r3, #28]
 800e830:	f003 0304 	and.w	r3, r3, #4
 800e834:	2b00      	cmp	r3, #0
 800e836:	bf14      	ite	ne
 800e838:	2301      	movne	r3, #1
 800e83a:	2300      	moveq	r3, #0
 800e83c:	b2db      	uxtb	r3, r3
 800e83e:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 800e840:	69fb      	ldr	r3, [r7, #28]
 800e842:	7f1b      	ldrb	r3, [r3, #28]
 800e844:	f023 0304 	bic.w	r3, r3, #4
 800e848:	b2da      	uxtb	r2, r3
 800e84a:	69fb      	ldr	r3, [r7, #28]
 800e84c:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 800e84e:	68fb      	ldr	r3, [r7, #12]
 800e850:	2b00      	cmp	r3, #0
 800e852:	d13b      	bne.n	800e8cc <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800e854:	69fb      	ldr	r3, [r7, #28]
 800e856:	6a1b      	ldr	r3, [r3, #32]
 800e858:	2b00      	cmp	r3, #0
 800e85a:	d106      	bne.n	800e86a <err_tcp+0x126>
 800e85c:	4b1e      	ldr	r3, [pc, #120]	; (800e8d8 <err_tcp+0x194>)
 800e85e:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800e862:	4920      	ldr	r1, [pc, #128]	; (800e8e4 <err_tcp+0x1a0>)
 800e864:	481e      	ldr	r0, [pc, #120]	; (800e8e0 <err_tcp+0x19c>)
 800e866:	f011 fdf3 	bl	8020450 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 800e86a:	7dfb      	ldrb	r3, [r7, #23]
 800e86c:	2b04      	cmp	r3, #4
 800e86e:	d104      	bne.n	800e87a <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 800e870:	69fb      	ldr	r3, [r7, #28]
 800e872:	6a1b      	ldr	r3, [r3, #32]
 800e874:	2200      	movs	r2, #0
 800e876:	711a      	strb	r2, [r3, #4]
 800e878:	e003      	b.n	800e882 <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 800e87a:	69fb      	ldr	r3, [r7, #28]
 800e87c:	6a1b      	ldr	r3, [r3, #32]
 800e87e:	78fa      	ldrb	r2, [r7, #3]
 800e880:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800e882:	69fb      	ldr	r3, [r7, #28]
 800e884:	6a1b      	ldr	r3, [r3, #32]
 800e886:	681b      	ldr	r3, [r3, #0]
 800e888:	330c      	adds	r3, #12
 800e88a:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800e88c:	68b8      	ldr	r0, [r7, #8]
 800e88e:	f00f ff93 	bl	801e7b8 <sys_sem_valid>
 800e892:	4603      	mov	r3, r0
 800e894:	2b00      	cmp	r3, #0
 800e896:	d106      	bne.n	800e8a6 <err_tcp+0x162>
 800e898:	4b0f      	ldr	r3, [pc, #60]	; (800e8d8 <err_tcp+0x194>)
 800e89a:	f240 12ef 	movw	r2, #495	; 0x1ef
 800e89e:	4912      	ldr	r1, [pc, #72]	; (800e8e8 <err_tcp+0x1a4>)
 800e8a0:	480f      	ldr	r0, [pc, #60]	; (800e8e0 <err_tcp+0x19c>)
 800e8a2:	f011 fdd5 	bl	8020450 <iprintf>
      conn->current_msg = NULL;
 800e8a6:	69fb      	ldr	r3, [r7, #28]
 800e8a8:	2200      	movs	r2, #0
 800e8aa:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 800e8ac:	68b8      	ldr	r0, [r7, #8]
 800e8ae:	f00f ff69 	bl	801e784 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 800e8b2:	e00b      	b.n	800e8cc <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 800e8b4:	69fb      	ldr	r3, [r7, #28]
 800e8b6:	6a1b      	ldr	r3, [r3, #32]
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	d008      	beq.n	800e8ce <err_tcp+0x18a>
 800e8bc:	4b06      	ldr	r3, [pc, #24]	; (800e8d8 <err_tcp+0x194>)
 800e8be:	f240 12f7 	movw	r2, #503	; 0x1f7
 800e8c2:	490a      	ldr	r1, [pc, #40]	; (800e8ec <err_tcp+0x1a8>)
 800e8c4:	4806      	ldr	r0, [pc, #24]	; (800e8e0 <err_tcp+0x19c>)
 800e8c6:	f011 fdc3 	bl	8020450 <iprintf>
  }
}
 800e8ca:	e000      	b.n	800e8ce <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 800e8cc:	bf00      	nop
}
 800e8ce:	bf00      	nop
 800e8d0:	3720      	adds	r7, #32
 800e8d2:	46bd      	mov	sp, r7
 800e8d4:	bd80      	pop	{r7, pc}
 800e8d6:	bf00      	nop
 800e8d8:	080235f0 	.word	0x080235f0
 800e8dc:	08023748 	.word	0x08023748
 800e8e0:	08023634 	.word	0x08023634
 800e8e4:	08023758 	.word	0x08023758
 800e8e8:	08023774 	.word	0x08023774
 800e8ec:	08023790 	.word	0x08023790

0800e8f0 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 800e8f0:	b580      	push	{r7, lr}
 800e8f2:	b084      	sub	sp, #16
 800e8f4:	af00      	add	r7, sp, #0
 800e8f6:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	685b      	ldr	r3, [r3, #4]
 800e8fc:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 800e8fe:	6879      	ldr	r1, [r7, #4]
 800e900:	68f8      	ldr	r0, [r7, #12]
 800e902:	f006 f909 	bl	8014b18 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 800e906:	490a      	ldr	r1, [pc, #40]	; (800e930 <setup_tcp+0x40>)
 800e908:	68f8      	ldr	r0, [r7, #12]
 800e90a:	f006 f917 	bl	8014b3c <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 800e90e:	4909      	ldr	r1, [pc, #36]	; (800e934 <setup_tcp+0x44>)
 800e910:	68f8      	ldr	r0, [r7, #12]
 800e912:	f006 f935 	bl	8014b80 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 800e916:	2202      	movs	r2, #2
 800e918:	4907      	ldr	r1, [pc, #28]	; (800e938 <setup_tcp+0x48>)
 800e91a:	68f8      	ldr	r0, [r7, #12]
 800e91c:	f006 f98c 	bl	8014c38 <tcp_poll>
  tcp_err(pcb, err_tcp);
 800e920:	4906      	ldr	r1, [pc, #24]	; (800e93c <setup_tcp+0x4c>)
 800e922:	68f8      	ldr	r0, [r7, #12]
 800e924:	f006 f94e 	bl	8014bc4 <tcp_err>
}
 800e928:	bf00      	nop
 800e92a:	3710      	adds	r7, #16
 800e92c:	46bd      	mov	sp, r7
 800e92e:	bd80      	pop	{r7, pc}
 800e930:	0800e4c9 	.word	0x0800e4c9
 800e934:	0800e69d 	.word	0x0800e69d
 800e938:	0800e5d5 	.word	0x0800e5d5
 800e93c:	0800e745 	.word	0x0800e745

0800e940 <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 800e940:	b590      	push	{r4, r7, lr}
 800e942:	b089      	sub	sp, #36	; 0x24
 800e944:	af00      	add	r7, sp, #0
 800e946:	60f8      	str	r0, [r7, #12]
 800e948:	60b9      	str	r1, [r7, #8]
 800e94a:	4613      	mov	r3, r2
 800e94c:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 800e94e:	68fb      	ldr	r3, [r7, #12]
 800e950:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800e952:	69fb      	ldr	r3, [r7, #28]
 800e954:	2b00      	cmp	r3, #0
 800e956:	d102      	bne.n	800e95e <accept_function+0x1e>
    return ERR_VAL;
 800e958:	f06f 0305 	mvn.w	r3, #5
 800e95c:	e0a1      	b.n	800eaa2 <accept_function+0x162>
  }
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800e95e:	69fb      	ldr	r3, [r7, #28]
 800e960:	3314      	adds	r3, #20
 800e962:	4618      	mov	r0, r3
 800e964:	f00f fe97 	bl	801e696 <sys_mbox_valid>
 800e968:	4603      	mov	r3, r0
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	d102      	bne.n	800e974 <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 800e96e:	f06f 0305 	mvn.w	r3, #5
 800e972:	e096      	b.n	800eaa2 <accept_function+0x162>
  }

  if (newpcb == NULL) {
 800e974:	68bb      	ldr	r3, [r7, #8]
 800e976:	2b00      	cmp	r3, #0
 800e978:	d11b      	bne.n	800e9b2 <accept_function+0x72>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 800e97a:	69fb      	ldr	r3, [r7, #28]
 800e97c:	f103 0414 	add.w	r4, r3, #20
 800e980:	f06f 000c 	mvn.w	r0, #12
 800e984:	f7ff fcb2 	bl	800e2ec <lwip_netconn_err_to_msg>
 800e988:	4603      	mov	r3, r0
 800e98a:	4619      	mov	r1, r3
 800e98c:	4620      	mov	r0, r4
 800e98e:	f00f fe0d 	bl	801e5ac <sys_mbox_trypost>
 800e992:	4603      	mov	r3, r0
 800e994:	2b00      	cmp	r3, #0
 800e996:	d109      	bne.n	800e9ac <accept_function+0x6c>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800e998:	69fb      	ldr	r3, [r7, #28]
 800e99a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e99c:	2b00      	cmp	r3, #0
 800e99e:	d005      	beq.n	800e9ac <accept_function+0x6c>
 800e9a0:	69fb      	ldr	r3, [r7, #28]
 800e9a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9a4:	2200      	movs	r2, #0
 800e9a6:	2100      	movs	r1, #0
 800e9a8:	69f8      	ldr	r0, [r7, #28]
 800e9aa:	4798      	blx	r3
    }
    return ERR_VAL;
 800e9ac:	f06f 0305 	mvn.w	r3, #5
 800e9b0:	e077      	b.n	800eaa2 <accept_function+0x162>
  }
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 800e9b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e9b6:	2b00      	cmp	r3, #0
 800e9b8:	d006      	beq.n	800e9c8 <accept_function+0x88>
 800e9ba:	4b3c      	ldr	r3, [pc, #240]	; (800eaac <accept_function+0x16c>)
 800e9bc:	f240 222a 	movw	r2, #554	; 0x22a
 800e9c0:	493b      	ldr	r1, [pc, #236]	; (800eab0 <accept_function+0x170>)
 800e9c2:	483c      	ldr	r0, [pc, #240]	; (800eab4 <accept_function+0x174>)
 800e9c4:	f011 fd44 	bl	8020450 <iprintf>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->state: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 800e9c8:	69fb      	ldr	r3, [r7, #28]
 800e9ca:	781a      	ldrb	r2, [r3, #0]
 800e9cc:	69fb      	ldr	r3, [r7, #28]
 800e9ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9d0:	4619      	mov	r1, r3
 800e9d2:	4610      	mov	r0, r2
 800e9d4:	f000 f8f0 	bl	800ebb8 <netconn_alloc>
 800e9d8:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 800e9da:	69bb      	ldr	r3, [r7, #24]
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	d11b      	bne.n	800ea18 <accept_function+0xd8>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 800e9e0:	69fb      	ldr	r3, [r7, #28]
 800e9e2:	f103 0414 	add.w	r4, r3, #20
 800e9e6:	f06f 000c 	mvn.w	r0, #12
 800e9ea:	f7ff fc7f 	bl	800e2ec <lwip_netconn_err_to_msg>
 800e9ee:	4603      	mov	r3, r0
 800e9f0:	4619      	mov	r1, r3
 800e9f2:	4620      	mov	r0, r4
 800e9f4:	f00f fdda 	bl	801e5ac <sys_mbox_trypost>
 800e9f8:	4603      	mov	r3, r0
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	d109      	bne.n	800ea12 <accept_function+0xd2>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800e9fe:	69fb      	ldr	r3, [r7, #28]
 800ea00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea02:	2b00      	cmp	r3, #0
 800ea04:	d005      	beq.n	800ea12 <accept_function+0xd2>
 800ea06:	69fb      	ldr	r3, [r7, #28]
 800ea08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea0a:	2200      	movs	r2, #0
 800ea0c:	2100      	movs	r1, #0
 800ea0e:	69f8      	ldr	r0, [r7, #28]
 800ea10:	4798      	blx	r3
    }
    return ERR_MEM;
 800ea12:	f04f 33ff 	mov.w	r3, #4294967295
 800ea16:	e044      	b.n	800eaa2 <accept_function+0x162>
  }
  newconn->pcb.tcp = newpcb;
 800ea18:	69bb      	ldr	r3, [r7, #24]
 800ea1a:	68ba      	ldr	r2, [r7, #8]
 800ea1c:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 800ea1e:	69b8      	ldr	r0, [r7, #24]
 800ea20:	f7ff ff66 	bl	800e8f0 <setup_tcp>

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 800ea24:	69fb      	ldr	r3, [r7, #28]
 800ea26:	3314      	adds	r3, #20
 800ea28:	69b9      	ldr	r1, [r7, #24]
 800ea2a:	4618      	mov	r0, r3
 800ea2c:	f00f fdbe 	bl	801e5ac <sys_mbox_trypost>
 800ea30:	4603      	mov	r3, r0
 800ea32:	2b00      	cmp	r3, #0
 800ea34:	d02a      	beq.n	800ea8c <accept_function+0x14c>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 800ea36:	69bb      	ldr	r3, [r7, #24]
 800ea38:	685b      	ldr	r3, [r3, #4]
 800ea3a:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 800ea3c:	2100      	movs	r1, #0
 800ea3e:	6978      	ldr	r0, [r7, #20]
 800ea40:	f006 f86a 	bl	8014b18 <tcp_arg>
    tcp_recv(pcb, NULL);
 800ea44:	2100      	movs	r1, #0
 800ea46:	6978      	ldr	r0, [r7, #20]
 800ea48:	f006 f878 	bl	8014b3c <tcp_recv>
    tcp_sent(pcb, NULL);
 800ea4c:	2100      	movs	r1, #0
 800ea4e:	6978      	ldr	r0, [r7, #20]
 800ea50:	f006 f896 	bl	8014b80 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 800ea54:	2200      	movs	r2, #0
 800ea56:	2100      	movs	r1, #0
 800ea58:	6978      	ldr	r0, [r7, #20]
 800ea5a:	f006 f8ed 	bl	8014c38 <tcp_poll>
    tcp_err(pcb, NULL);
 800ea5e:	2100      	movs	r1, #0
 800ea60:	6978      	ldr	r0, [r7, #20]
 800ea62:	f006 f8af 	bl	8014bc4 <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 800ea66:	69bb      	ldr	r3, [r7, #24]
 800ea68:	2200      	movs	r2, #0
 800ea6a:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 800ea6c:	69bb      	ldr	r3, [r7, #24]
 800ea6e:	3310      	adds	r3, #16
 800ea70:	4618      	mov	r0, r3
 800ea72:	f00f fd89 	bl	801e588 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 800ea76:	69bb      	ldr	r3, [r7, #24]
 800ea78:	3310      	adds	r3, #16
 800ea7a:	4618      	mov	r0, r3
 800ea7c:	f00f fe1c 	bl	801e6b8 <sys_mbox_set_invalid>
    netconn_free(newconn);
 800ea80:	69b8      	ldr	r0, [r7, #24]
 800ea82:	f000 f907 	bl	800ec94 <netconn_free>
    return ERR_MEM;
 800ea86:	f04f 33ff 	mov.w	r3, #4294967295
 800ea8a:	e00a      	b.n	800eaa2 <accept_function+0x162>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800ea8c:	69fb      	ldr	r3, [r7, #28]
 800ea8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea90:	2b00      	cmp	r3, #0
 800ea92:	d005      	beq.n	800eaa0 <accept_function+0x160>
 800ea94:	69fb      	ldr	r3, [r7, #28]
 800ea96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea98:	2200      	movs	r2, #0
 800ea9a:	2100      	movs	r1, #0
 800ea9c:	69f8      	ldr	r0, [r7, #28]
 800ea9e:	4798      	blx	r3
  }

  return ERR_OK;
 800eaa0:	2300      	movs	r3, #0
}
 800eaa2:	4618      	mov	r0, r3
 800eaa4:	3724      	adds	r7, #36	; 0x24
 800eaa6:	46bd      	mov	sp, r7
 800eaa8:	bd90      	pop	{r4, r7, pc}
 800eaaa:	bf00      	nop
 800eaac:	080235f0 	.word	0x080235f0
 800eab0:	080237ac 	.word	0x080237ac
 800eab4:	08023634 	.word	0x08023634

0800eab8 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 800eab8:	b590      	push	{r4, r7, lr}
 800eaba:	b085      	sub	sp, #20
 800eabc:	af00      	add	r7, sp, #0
 800eabe:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 800eac0:	2300      	movs	r3, #0
 800eac2:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	681b      	ldr	r3, [r3, #0]
 800eac8:	685b      	ldr	r3, [r3, #4]
 800eaca:	2b00      	cmp	r3, #0
 800eacc:	d006      	beq.n	800eadc <pcb_new+0x24>
 800eace:	4b2b      	ldr	r3, [pc, #172]	; (800eb7c <pcb_new+0xc4>)
 800ead0:	f240 2265 	movw	r2, #613	; 0x265
 800ead4:	492a      	ldr	r1, [pc, #168]	; (800eb80 <pcb_new+0xc8>)
 800ead6:	482b      	ldr	r0, [pc, #172]	; (800eb84 <pcb_new+0xcc>)
 800ead8:	f011 fcba 	bl	8020450 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	681b      	ldr	r3, [r3, #0]
 800eae0:	781b      	ldrb	r3, [r3, #0]
 800eae2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800eae6:	2b10      	cmp	r3, #16
 800eae8:	d022      	beq.n	800eb30 <pcb_new+0x78>
 800eaea:	2b20      	cmp	r3, #32
 800eaec:	d133      	bne.n	800eb56 <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	681c      	ldr	r4, [r3, #0]
 800eaf2:	7bfb      	ldrb	r3, [r7, #15]
 800eaf4:	4618      	mov	r0, r3
 800eaf6:	f00b fb46 	bl	801a186 <udp_new_ip_type>
 800eafa:	4603      	mov	r3, r0
 800eafc:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	681b      	ldr	r3, [r3, #0]
 800eb02:	685b      	ldr	r3, [r3, #4]
 800eb04:	2b00      	cmp	r3, #0
 800eb06:	d02a      	beq.n	800eb5e <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	681b      	ldr	r3, [r3, #0]
 800eb0c:	781b      	ldrb	r3, [r3, #0]
 800eb0e:	2b22      	cmp	r3, #34	; 0x22
 800eb10:	d104      	bne.n	800eb1c <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	681b      	ldr	r3, [r3, #0]
 800eb16:	685b      	ldr	r3, [r3, #4]
 800eb18:	2201      	movs	r2, #1
 800eb1a:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	681b      	ldr	r3, [r3, #0]
 800eb20:	6858      	ldr	r0, [r3, #4]
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	681b      	ldr	r3, [r3, #0]
 800eb26:	461a      	mov	r2, r3
 800eb28:	4917      	ldr	r1, [pc, #92]	; (800eb88 <pcb_new+0xd0>)
 800eb2a:	f00b fab3 	bl	801a094 <udp_recv>
      }
      break;
 800eb2e:	e016      	b.n	800eb5e <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	681c      	ldr	r4, [r3, #0]
 800eb34:	7bfb      	ldrb	r3, [r7, #15]
 800eb36:	4618      	mov	r0, r3
 800eb38:	f005 ffe0 	bl	8014afc <tcp_new_ip_type>
 800eb3c:	4603      	mov	r3, r0
 800eb3e:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	681b      	ldr	r3, [r3, #0]
 800eb44:	685b      	ldr	r3, [r3, #4]
 800eb46:	2b00      	cmp	r3, #0
 800eb48:	d00b      	beq.n	800eb62 <pcb_new+0xaa>
        setup_tcp(msg->conn);
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	681b      	ldr	r3, [r3, #0]
 800eb4e:	4618      	mov	r0, r3
 800eb50:	f7ff fece 	bl	800e8f0 <setup_tcp>
      }
      break;
 800eb54:	e005      	b.n	800eb62 <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	22fa      	movs	r2, #250	; 0xfa
 800eb5a:	711a      	strb	r2, [r3, #4]
      return;
 800eb5c:	e00a      	b.n	800eb74 <pcb_new+0xbc>
      break;
 800eb5e:	bf00      	nop
 800eb60:	e000      	b.n	800eb64 <pcb_new+0xac>
      break;
 800eb62:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	681b      	ldr	r3, [r3, #0]
 800eb68:	685b      	ldr	r3, [r3, #4]
 800eb6a:	2b00      	cmp	r3, #0
 800eb6c:	d102      	bne.n	800eb74 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	22ff      	movs	r2, #255	; 0xff
 800eb72:	711a      	strb	r2, [r3, #4]
  }
}
 800eb74:	3714      	adds	r7, #20
 800eb76:	46bd      	mov	sp, r7
 800eb78:	bd90      	pop	{r4, r7, pc}
 800eb7a:	bf00      	nop
 800eb7c:	080235f0 	.word	0x080235f0
 800eb80:	080237d4 	.word	0x080237d4
 800eb84:	08023634 	.word	0x08023634
 800eb88:	0800e3cd 	.word	0x0800e3cd

0800eb8c <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 800eb8c:	b580      	push	{r7, lr}
 800eb8e:	b084      	sub	sp, #16
 800eb90:	af00      	add	r7, sp, #0
 800eb92:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 800eb98:	68fb      	ldr	r3, [r7, #12]
 800eb9a:	2200      	movs	r2, #0
 800eb9c:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 800eb9e:	68fb      	ldr	r3, [r7, #12]
 800eba0:	681b      	ldr	r3, [r3, #0]
 800eba2:	685b      	ldr	r3, [r3, #4]
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	d102      	bne.n	800ebae <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 800eba8:	68f8      	ldr	r0, [r7, #12]
 800ebaa:	f7ff ff85 	bl	800eab8 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 800ebae:	bf00      	nop
 800ebb0:	3710      	adds	r7, #16
 800ebb2:	46bd      	mov	sp, r7
 800ebb4:	bd80      	pop	{r7, pc}
	...

0800ebb8 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 800ebb8:	b580      	push	{r7, lr}
 800ebba:	b086      	sub	sp, #24
 800ebbc:	af00      	add	r7, sp, #0
 800ebbe:	4603      	mov	r3, r0
 800ebc0:	6039      	str	r1, [r7, #0]
 800ebc2:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 800ebc4:	2300      	movs	r3, #0
 800ebc6:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 800ebc8:	2007      	movs	r0, #7
 800ebca:	f003 f9bf 	bl	8011f4c <memp_malloc>
 800ebce:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 800ebd0:	68fb      	ldr	r3, [r7, #12]
 800ebd2:	2b00      	cmp	r3, #0
 800ebd4:	d101      	bne.n	800ebda <netconn_alloc+0x22>
    return NULL;
 800ebd6:	2300      	movs	r3, #0
 800ebd8:	e052      	b.n	800ec80 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 800ebda:	68fb      	ldr	r3, [r7, #12]
 800ebdc:	2200      	movs	r2, #0
 800ebde:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 800ebe0:	68fb      	ldr	r3, [r7, #12]
 800ebe2:	79fa      	ldrb	r2, [r7, #7]
 800ebe4:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 800ebe6:	68fb      	ldr	r3, [r7, #12]
 800ebe8:	2200      	movs	r2, #0
 800ebea:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 800ebec:	79fb      	ldrb	r3, [r7, #7]
 800ebee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ebf2:	2b10      	cmp	r3, #16
 800ebf4:	d004      	beq.n	800ec00 <netconn_alloc+0x48>
 800ebf6:	2b20      	cmp	r3, #32
 800ebf8:	d105      	bne.n	800ec06 <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 800ebfa:	2306      	movs	r3, #6
 800ebfc:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800ebfe:	e00a      	b.n	800ec16 <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 800ec00:	2306      	movs	r3, #6
 800ec02:	617b      	str	r3, [r7, #20]
      break;
 800ec04:	e007      	b.n	800ec16 <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 800ec06:	4b20      	ldr	r3, [pc, #128]	; (800ec88 <netconn_alloc+0xd0>)
 800ec08:	f240 22e5 	movw	r2, #741	; 0x2e5
 800ec0c:	491f      	ldr	r1, [pc, #124]	; (800ec8c <netconn_alloc+0xd4>)
 800ec0e:	4820      	ldr	r0, [pc, #128]	; (800ec90 <netconn_alloc+0xd8>)
 800ec10:	f011 fc1e 	bl	8020450 <iprintf>
      goto free_and_return;
 800ec14:	e02f      	b.n	800ec76 <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 800ec16:	68fb      	ldr	r3, [r7, #12]
 800ec18:	3310      	adds	r3, #16
 800ec1a:	6979      	ldr	r1, [r7, #20]
 800ec1c:	4618      	mov	r0, r3
 800ec1e:	f00f fc91 	bl	801e544 <sys_mbox_new>
 800ec22:	4603      	mov	r3, r0
 800ec24:	2b00      	cmp	r3, #0
 800ec26:	d125      	bne.n	800ec74 <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 800ec28:	68fb      	ldr	r3, [r7, #12]
 800ec2a:	330c      	adds	r3, #12
 800ec2c:	2100      	movs	r1, #0
 800ec2e:	4618      	mov	r0, r3
 800ec30:	f00f fd4f 	bl	801e6d2 <sys_sem_new>
 800ec34:	4603      	mov	r3, r0
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	d005      	beq.n	800ec46 <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 800ec3a:	68fb      	ldr	r3, [r7, #12]
 800ec3c:	3310      	adds	r3, #16
 800ec3e:	4618      	mov	r0, r3
 800ec40:	f00f fca2 	bl	801e588 <sys_mbox_free>
    goto free_and_return;
 800ec44:	e017      	b.n	800ec76 <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 800ec46:	68fb      	ldr	r3, [r7, #12]
 800ec48:	3314      	adds	r3, #20
 800ec4a:	4618      	mov	r0, r3
 800ec4c:	f00f fd34 	bl	801e6b8 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 800ec50:	68fb      	ldr	r3, [r7, #12]
 800ec52:	2200      	movs	r2, #0
 800ec54:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 800ec56:	68fb      	ldr	r3, [r7, #12]
 800ec58:	f04f 32ff 	mov.w	r2, #4294967295
 800ec5c:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 800ec5e:	68fb      	ldr	r3, [r7, #12]
 800ec60:	683a      	ldr	r2, [r7, #0]
 800ec62:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 800ec64:	68fb      	ldr	r3, [r7, #12]
 800ec66:	2200      	movs	r2, #0
 800ec68:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 800ec6a:	68fb      	ldr	r3, [r7, #12]
 800ec6c:	7cfa      	ldrb	r2, [r7, #19]
 800ec6e:	771a      	strb	r2, [r3, #28]
  return conn;
 800ec70:	68fb      	ldr	r3, [r7, #12]
 800ec72:	e005      	b.n	800ec80 <netconn_alloc+0xc8>
    goto free_and_return;
 800ec74:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 800ec76:	68f9      	ldr	r1, [r7, #12]
 800ec78:	2007      	movs	r0, #7
 800ec7a:	f003 f9dd 	bl	8012038 <memp_free>
  return NULL;
 800ec7e:	2300      	movs	r3, #0
}
 800ec80:	4618      	mov	r0, r3
 800ec82:	3718      	adds	r7, #24
 800ec84:	46bd      	mov	sp, r7
 800ec86:	bd80      	pop	{r7, pc}
 800ec88:	080235f0 	.word	0x080235f0
 800ec8c:	080237f4 	.word	0x080237f4
 800ec90:	08023634 	.word	0x08023634

0800ec94 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 800ec94:	b580      	push	{r7, lr}
 800ec96:	b082      	sub	sp, #8
 800ec98:	af00      	add	r7, sp, #0
 800ec9a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	685b      	ldr	r3, [r3, #4]
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	d006      	beq.n	800ecb2 <netconn_free+0x1e>
 800eca4:	4b1b      	ldr	r3, [pc, #108]	; (800ed14 <netconn_free+0x80>)
 800eca6:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800ecaa:	491b      	ldr	r1, [pc, #108]	; (800ed18 <netconn_free+0x84>)
 800ecac:	481b      	ldr	r0, [pc, #108]	; (800ed1c <netconn_free+0x88>)
 800ecae:	f011 fbcf 	bl	8020450 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	3310      	adds	r3, #16
 800ecb6:	4618      	mov	r0, r3
 800ecb8:	f00f fced 	bl	801e696 <sys_mbox_valid>
 800ecbc:	4603      	mov	r3, r0
 800ecbe:	2b00      	cmp	r3, #0
 800ecc0:	d006      	beq.n	800ecd0 <netconn_free+0x3c>
 800ecc2:	4b14      	ldr	r3, [pc, #80]	; (800ed14 <netconn_free+0x80>)
 800ecc4:	f240 3223 	movw	r2, #803	; 0x323
 800ecc8:	4915      	ldr	r1, [pc, #84]	; (800ed20 <netconn_free+0x8c>)
 800ecca:	4814      	ldr	r0, [pc, #80]	; (800ed1c <netconn_free+0x88>)
 800eccc:	f011 fbc0 	bl	8020450 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	3314      	adds	r3, #20
 800ecd4:	4618      	mov	r0, r3
 800ecd6:	f00f fcde 	bl	801e696 <sys_mbox_valid>
 800ecda:	4603      	mov	r3, r0
 800ecdc:	2b00      	cmp	r3, #0
 800ecde:	d006      	beq.n	800ecee <netconn_free+0x5a>
 800ece0:	4b0c      	ldr	r3, [pc, #48]	; (800ed14 <netconn_free+0x80>)
 800ece2:	f240 3226 	movw	r2, #806	; 0x326
 800ece6:	490f      	ldr	r1, [pc, #60]	; (800ed24 <netconn_free+0x90>)
 800ece8:	480c      	ldr	r0, [pc, #48]	; (800ed1c <netconn_free+0x88>)
 800ecea:	f011 fbb1 	bl	8020450 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	330c      	adds	r3, #12
 800ecf2:	4618      	mov	r0, r3
 800ecf4:	f00f fd53 	bl	801e79e <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	330c      	adds	r3, #12
 800ecfc:	4618      	mov	r0, r3
 800ecfe:	f00f fd6c 	bl	801e7da <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 800ed02:	6879      	ldr	r1, [r7, #4]
 800ed04:	2007      	movs	r0, #7
 800ed06:	f003 f997 	bl	8012038 <memp_free>
}
 800ed0a:	bf00      	nop
 800ed0c:	3708      	adds	r7, #8
 800ed0e:	46bd      	mov	sp, r7
 800ed10:	bd80      	pop	{r7, pc}
 800ed12:	bf00      	nop
 800ed14:	080235f0 	.word	0x080235f0
 800ed18:	0802381c 	.word	0x0802381c
 800ed1c:	08023634 	.word	0x08023634
 800ed20:	0802384c 	.word	0x0802384c
 800ed24:	08023888 	.word	0x08023888

0800ed28 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 800ed28:	b580      	push	{r7, lr}
 800ed2a:	b086      	sub	sp, #24
 800ed2c:	af00      	add	r7, sp, #0
 800ed2e:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	3310      	adds	r3, #16
 800ed34:	4618      	mov	r0, r3
 800ed36:	f00f fcae 	bl	801e696 <sys_mbox_valid>
 800ed3a:	4603      	mov	r3, r0
 800ed3c:	2b00      	cmp	r3, #0
 800ed3e:	d02f      	beq.n	800eda0 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800ed40:	e018      	b.n	800ed74 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	781b      	ldrb	r3, [r3, #0]
 800ed46:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ed4a:	2b10      	cmp	r3, #16
 800ed4c:	d10e      	bne.n	800ed6c <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 800ed4e:	693b      	ldr	r3, [r7, #16]
 800ed50:	f107 020f 	add.w	r2, r7, #15
 800ed54:	4611      	mov	r1, r2
 800ed56:	4618      	mov	r0, r3
 800ed58:	f7ff fafe 	bl	800e358 <lwip_netconn_is_err_msg>
 800ed5c:	4603      	mov	r3, r0
 800ed5e:	2b00      	cmp	r3, #0
 800ed60:	d108      	bne.n	800ed74 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 800ed62:	693b      	ldr	r3, [r7, #16]
 800ed64:	4618      	mov	r0, r3
 800ed66:	f004 f849 	bl	8012dfc <pbuf_free>
 800ed6a:	e003      	b.n	800ed74 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 800ed6c:	693b      	ldr	r3, [r7, #16]
 800ed6e:	4618      	mov	r0, r3
 800ed70:	f000 ff82 	bl	800fc78 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	3310      	adds	r3, #16
 800ed78:	f107 0210 	add.w	r2, r7, #16
 800ed7c:	4611      	mov	r1, r2
 800ed7e:	4618      	mov	r0, r3
 800ed80:	f00f fc6d 	bl	801e65e <sys_arch_mbox_tryfetch>
 800ed84:	4603      	mov	r3, r0
 800ed86:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed8a:	d1da      	bne.n	800ed42 <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	3310      	adds	r3, #16
 800ed90:	4618      	mov	r0, r3
 800ed92:	f00f fbf9 	bl	801e588 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	3310      	adds	r3, #16
 800ed9a:	4618      	mov	r0, r3
 800ed9c:	f00f fc8c 	bl	801e6b8 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	3314      	adds	r3, #20
 800eda4:	4618      	mov	r0, r3
 800eda6:	f00f fc76 	bl	801e696 <sys_mbox_valid>
 800edaa:	4603      	mov	r3, r0
 800edac:	2b00      	cmp	r3, #0
 800edae:	d034      	beq.n	800ee1a <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800edb0:	e01d      	b.n	800edee <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 800edb2:	693b      	ldr	r3, [r7, #16]
 800edb4:	f107 020e 	add.w	r2, r7, #14
 800edb8:	4611      	mov	r1, r2
 800edba:	4618      	mov	r0, r3
 800edbc:	f7ff facc 	bl	800e358 <lwip_netconn_is_err_msg>
 800edc0:	4603      	mov	r3, r0
 800edc2:	2b00      	cmp	r3, #0
 800edc4:	d113      	bne.n	800edee <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 800edc6:	693b      	ldr	r3, [r7, #16]
 800edc8:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 800edca:	6978      	ldr	r0, [r7, #20]
 800edcc:	f7ff ffac 	bl	800ed28 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 800edd0:	697b      	ldr	r3, [r7, #20]
 800edd2:	685b      	ldr	r3, [r3, #4]
 800edd4:	2b00      	cmp	r3, #0
 800edd6:	d007      	beq.n	800ede8 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 800edd8:	697b      	ldr	r3, [r7, #20]
 800edda:	685b      	ldr	r3, [r3, #4]
 800eddc:	4618      	mov	r0, r3
 800edde:	f004 fe0d 	bl	80139fc <tcp_abort>
            newconn->pcb.tcp = NULL;
 800ede2:	697b      	ldr	r3, [r7, #20]
 800ede4:	2200      	movs	r2, #0
 800ede6:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 800ede8:	6978      	ldr	r0, [r7, #20]
 800edea:	f7ff ff53 	bl	800ec94 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	3314      	adds	r3, #20
 800edf2:	f107 0210 	add.w	r2, r7, #16
 800edf6:	4611      	mov	r1, r2
 800edf8:	4618      	mov	r0, r3
 800edfa:	f00f fc30 	bl	801e65e <sys_arch_mbox_tryfetch>
 800edfe:	4603      	mov	r3, r0
 800ee00:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee04:	d1d5      	bne.n	800edb2 <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	3314      	adds	r3, #20
 800ee0a:	4618      	mov	r0, r3
 800ee0c:	f00f fbbc 	bl	801e588 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	3314      	adds	r3, #20
 800ee14:	4618      	mov	r0, r3
 800ee16:	f00f fc4f 	bl	801e6b8 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 800ee1a:	bf00      	nop
 800ee1c:	3718      	adds	r7, #24
 800ee1e:	46bd      	mov	sp, r7
 800ee20:	bd80      	pop	{r7, pc}
	...

0800ee24 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800ee24:	b580      	push	{r7, lr}
 800ee26:	b086      	sub	sp, #24
 800ee28:	af00      	add	r7, sp, #0
 800ee2a:	6078      	str	r0, [r7, #4]
 800ee2c:	460b      	mov	r3, r1
 800ee2e:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 800ee30:	2300      	movs	r3, #0
 800ee32:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	2b00      	cmp	r3, #0
 800ee38:	d106      	bne.n	800ee48 <lwip_netconn_do_close_internal+0x24>
 800ee3a:	4b87      	ldr	r3, [pc, #540]	; (800f058 <lwip_netconn_do_close_internal+0x234>)
 800ee3c:	f240 32a2 	movw	r2, #930	; 0x3a2
 800ee40:	4986      	ldr	r1, [pc, #536]	; (800f05c <lwip_netconn_do_close_internal+0x238>)
 800ee42:	4887      	ldr	r0, [pc, #540]	; (800f060 <lwip_netconn_do_close_internal+0x23c>)
 800ee44:	f011 fb04 	bl	8020450 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	781b      	ldrb	r3, [r3, #0]
 800ee4c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ee50:	2b10      	cmp	r3, #16
 800ee52:	d006      	beq.n	800ee62 <lwip_netconn_do_close_internal+0x3e>
 800ee54:	4b80      	ldr	r3, [pc, #512]	; (800f058 <lwip_netconn_do_close_internal+0x234>)
 800ee56:	f240 32a3 	movw	r2, #931	; 0x3a3
 800ee5a:	4982      	ldr	r1, [pc, #520]	; (800f064 <lwip_netconn_do_close_internal+0x240>)
 800ee5c:	4880      	ldr	r0, [pc, #512]	; (800f060 <lwip_netconn_do_close_internal+0x23c>)
 800ee5e:	f011 faf7 	bl	8020450 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	785b      	ldrb	r3, [r3, #1]
 800ee66:	2b04      	cmp	r3, #4
 800ee68:	d006      	beq.n	800ee78 <lwip_netconn_do_close_internal+0x54>
 800ee6a:	4b7b      	ldr	r3, [pc, #492]	; (800f058 <lwip_netconn_do_close_internal+0x234>)
 800ee6c:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 800ee70:	497d      	ldr	r1, [pc, #500]	; (800f068 <lwip_netconn_do_close_internal+0x244>)
 800ee72:	487b      	ldr	r0, [pc, #492]	; (800f060 <lwip_netconn_do_close_internal+0x23c>)
 800ee74:	f011 faec 	bl	8020450 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	685b      	ldr	r3, [r3, #4]
 800ee7c:	2b00      	cmp	r3, #0
 800ee7e:	d106      	bne.n	800ee8e <lwip_netconn_do_close_internal+0x6a>
 800ee80:	4b75      	ldr	r3, [pc, #468]	; (800f058 <lwip_netconn_do_close_internal+0x234>)
 800ee82:	f240 32a5 	movw	r2, #933	; 0x3a5
 800ee86:	4979      	ldr	r1, [pc, #484]	; (800f06c <lwip_netconn_do_close_internal+0x248>)
 800ee88:	4875      	ldr	r0, [pc, #468]	; (800f060 <lwip_netconn_do_close_internal+0x23c>)
 800ee8a:	f011 fae1 	bl	8020450 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	6a1b      	ldr	r3, [r3, #32]
 800ee92:	2b00      	cmp	r3, #0
 800ee94:	d106      	bne.n	800eea4 <lwip_netconn_do_close_internal+0x80>
 800ee96:	4b70      	ldr	r3, [pc, #448]	; (800f058 <lwip_netconn_do_close_internal+0x234>)
 800ee98:	f240 32a6 	movw	r2, #934	; 0x3a6
 800ee9c:	4974      	ldr	r1, [pc, #464]	; (800f070 <lwip_netconn_do_close_internal+0x24c>)
 800ee9e:	4870      	ldr	r0, [pc, #448]	; (800f060 <lwip_netconn_do_close_internal+0x23c>)
 800eea0:	f011 fad6 	bl	8020450 <iprintf>

  tpcb = conn->pcb.tcp;
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	685b      	ldr	r3, [r3, #4]
 800eea8:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	6a1b      	ldr	r3, [r3, #32]
 800eeae:	7a1b      	ldrb	r3, [r3, #8]
 800eeb0:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 800eeb2:	7bfb      	ldrb	r3, [r7, #15]
 800eeb4:	f003 0301 	and.w	r3, r3, #1
 800eeb8:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 800eeba:	7bfb      	ldrb	r3, [r7, #15]
 800eebc:	f003 0302 	and.w	r3, r3, #2
 800eec0:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 800eec2:	7bfb      	ldrb	r3, [r7, #15]
 800eec4:	2b03      	cmp	r3, #3
 800eec6:	d102      	bne.n	800eece <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 800eec8:	2301      	movs	r3, #1
 800eeca:	75bb      	strb	r3, [r7, #22]
 800eecc:	e01f      	b.n	800ef0e <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 800eece:	7bbb      	ldrb	r3, [r7, #14]
 800eed0:	2b00      	cmp	r3, #0
 800eed2:	d00e      	beq.n	800eef2 <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 800eed4:	693b      	ldr	r3, [r7, #16]
 800eed6:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 800eed8:	2b05      	cmp	r3, #5
 800eeda:	d007      	beq.n	800eeec <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 800eedc:	693b      	ldr	r3, [r7, #16]
 800eede:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 800eee0:	2b06      	cmp	r3, #6
 800eee2:	d003      	beq.n	800eeec <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 800eee4:	693b      	ldr	r3, [r7, #16]
 800eee6:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 800eee8:	2b08      	cmp	r3, #8
 800eeea:	d102      	bne.n	800eef2 <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 800eeec:	2301      	movs	r3, #1
 800eeee:	75bb      	strb	r3, [r7, #22]
 800eef0:	e00d      	b.n	800ef0e <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 800eef2:	7b7b      	ldrb	r3, [r7, #13]
 800eef4:	2b00      	cmp	r3, #0
 800eef6:	d008      	beq.n	800ef0a <lwip_netconn_do_close_internal+0xe6>
 800eef8:	693b      	ldr	r3, [r7, #16]
 800eefa:	8b5b      	ldrh	r3, [r3, #26]
 800eefc:	f003 0310 	and.w	r3, r3, #16
 800ef00:	2b00      	cmp	r3, #0
 800ef02:	d002      	beq.n	800ef0a <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 800ef04:	2301      	movs	r3, #1
 800ef06:	75bb      	strb	r3, [r7, #22]
 800ef08:	e001      	b.n	800ef0e <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 800ef0a:	2300      	movs	r3, #0
 800ef0c:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 800ef0e:	7dbb      	ldrb	r3, [r7, #22]
 800ef10:	2b00      	cmp	r3, #0
 800ef12:	d003      	beq.n	800ef1c <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 800ef14:	2100      	movs	r1, #0
 800ef16:	6938      	ldr	r0, [r7, #16]
 800ef18:	f005 fdfe 	bl	8014b18 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 800ef1c:	693b      	ldr	r3, [r7, #16]
 800ef1e:	7d1b      	ldrb	r3, [r3, #20]
 800ef20:	2b01      	cmp	r3, #1
 800ef22:	d104      	bne.n	800ef2e <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 800ef24:	2100      	movs	r1, #0
 800ef26:	6938      	ldr	r0, [r7, #16]
 800ef28:	f005 fe6e 	bl	8014c08 <tcp_accept>
 800ef2c:	e01d      	b.n	800ef6a <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 800ef2e:	7bbb      	ldrb	r3, [r7, #14]
 800ef30:	2b00      	cmp	r3, #0
 800ef32:	d007      	beq.n	800ef44 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 800ef34:	2100      	movs	r1, #0
 800ef36:	6938      	ldr	r0, [r7, #16]
 800ef38:	f005 fe00 	bl	8014b3c <tcp_recv>
      tcp_accept(tpcb, NULL);
 800ef3c:	2100      	movs	r1, #0
 800ef3e:	6938      	ldr	r0, [r7, #16]
 800ef40:	f005 fe62 	bl	8014c08 <tcp_accept>
    }
    if (shut_tx) {
 800ef44:	7b7b      	ldrb	r3, [r7, #13]
 800ef46:	2b00      	cmp	r3, #0
 800ef48:	d003      	beq.n	800ef52 <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 800ef4a:	2100      	movs	r1, #0
 800ef4c:	6938      	ldr	r0, [r7, #16]
 800ef4e:	f005 fe17 	bl	8014b80 <tcp_sent>
    }
    if (shut_close) {
 800ef52:	7dbb      	ldrb	r3, [r7, #22]
 800ef54:	2b00      	cmp	r3, #0
 800ef56:	d008      	beq.n	800ef6a <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 800ef58:	2200      	movs	r2, #0
 800ef5a:	2100      	movs	r1, #0
 800ef5c:	6938      	ldr	r0, [r7, #16]
 800ef5e:	f005 fe6b 	bl	8014c38 <tcp_poll>
      tcp_err(tpcb, NULL);
 800ef62:	2100      	movs	r1, #0
 800ef64:	6938      	ldr	r0, [r7, #16]
 800ef66:	f005 fe2d 	bl	8014bc4 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 800ef6a:	7dbb      	ldrb	r3, [r7, #22]
 800ef6c:	2b00      	cmp	r3, #0
 800ef6e:	d005      	beq.n	800ef7c <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 800ef70:	6938      	ldr	r0, [r7, #16]
 800ef72:	f004 fbfd 	bl	8013770 <tcp_close>
 800ef76:	4603      	mov	r3, r0
 800ef78:	75fb      	strb	r3, [r7, #23]
 800ef7a:	e007      	b.n	800ef8c <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800ef7c:	7bbb      	ldrb	r3, [r7, #14]
 800ef7e:	7b7a      	ldrb	r2, [r7, #13]
 800ef80:	4619      	mov	r1, r3
 800ef82:	6938      	ldr	r0, [r7, #16]
 800ef84:	f004 fc20 	bl	80137c8 <tcp_shutdown>
 800ef88:	4603      	mov	r3, r0
 800ef8a:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 800ef8c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ef90:	2b00      	cmp	r3, #0
 800ef92:	d102      	bne.n	800ef9a <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 800ef94:	2301      	movs	r3, #1
 800ef96:	757b      	strb	r3, [r7, #21]
 800ef98:	e016      	b.n	800efc8 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 800ef9a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ef9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800efa2:	d10f      	bne.n	800efc4 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	6a1b      	ldr	r3, [r3, #32]
 800efa8:	7a5b      	ldrb	r3, [r3, #9]
 800efaa:	2b00      	cmp	r3, #0
 800efac:	d10c      	bne.n	800efc8 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 800efae:	2301      	movs	r3, #1
 800efb0:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 800efb2:	7dbb      	ldrb	r3, [r7, #22]
 800efb4:	2b00      	cmp	r3, #0
 800efb6:	d007      	beq.n	800efc8 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 800efb8:	6938      	ldr	r0, [r7, #16]
 800efba:	f004 fd1f 	bl	80139fc <tcp_abort>
          err = ERR_OK;
 800efbe:	2300      	movs	r3, #0
 800efc0:	75fb      	strb	r3, [r7, #23]
 800efc2:	e001      	b.n	800efc8 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 800efc4:	2301      	movs	r3, #1
 800efc6:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 800efc8:	7d7b      	ldrb	r3, [r7, #21]
 800efca:	2b00      	cmp	r3, #0
 800efcc:	d052      	beq.n	800f074 <lwip_netconn_do_close_internal+0x250>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	6a1b      	ldr	r3, [r3, #32]
 800efd2:	681b      	ldr	r3, [r3, #0]
 800efd4:	330c      	adds	r3, #12
 800efd6:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	6a1b      	ldr	r3, [r3, #32]
 800efdc:	7dfa      	ldrb	r2, [r7, #23]
 800efde:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	2200      	movs	r2, #0
 800efe4:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	2200      	movs	r2, #0
 800efea:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 800efec:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800eff0:	2b00      	cmp	r3, #0
 800eff2:	d129      	bne.n	800f048 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 800eff4:	7dbb      	ldrb	r3, [r7, #22]
 800eff6:	2b00      	cmp	r3, #0
 800eff8:	d00c      	beq.n	800f014 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	2200      	movs	r2, #0
 800effe:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f004:	2b00      	cmp	r3, #0
 800f006:	d005      	beq.n	800f014 <lwip_netconn_do_close_internal+0x1f0>
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f00c:	2200      	movs	r2, #0
 800f00e:	2104      	movs	r1, #4
 800f010:	6878      	ldr	r0, [r7, #4]
 800f012:	4798      	blx	r3
      }
      if (shut_rx) {
 800f014:	7bbb      	ldrb	r3, [r7, #14]
 800f016:	2b00      	cmp	r3, #0
 800f018:	d009      	beq.n	800f02e <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f01e:	2b00      	cmp	r3, #0
 800f020:	d005      	beq.n	800f02e <lwip_netconn_do_close_internal+0x20a>
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f026:	2200      	movs	r2, #0
 800f028:	2100      	movs	r1, #0
 800f02a:	6878      	ldr	r0, [r7, #4]
 800f02c:	4798      	blx	r3
      }
      if (shut_tx) {
 800f02e:	7b7b      	ldrb	r3, [r7, #13]
 800f030:	2b00      	cmp	r3, #0
 800f032:	d009      	beq.n	800f048 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f038:	2b00      	cmp	r3, #0
 800f03a:	d005      	beq.n	800f048 <lwip_netconn_do_close_internal+0x224>
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f040:	2200      	movs	r2, #0
 800f042:	2102      	movs	r1, #2
 800f044:	6878      	ldr	r0, [r7, #4]
 800f046:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800f048:	78fb      	ldrb	r3, [r7, #3]
 800f04a:	2b00      	cmp	r3, #0
 800f04c:	d002      	beq.n	800f054 <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 800f04e:	68b8      	ldr	r0, [r7, #8]
 800f050:	f00f fb98 	bl	801e784 <sys_sem_signal>
    }
    return ERR_OK;
 800f054:	2300      	movs	r3, #0
 800f056:	e03c      	b.n	800f0d2 <lwip_netconn_do_close_internal+0x2ae>
 800f058:	080235f0 	.word	0x080235f0
 800f05c:	080238c4 	.word	0x080238c4
 800f060:	08023634 	.word	0x08023634
 800f064:	080238d4 	.word	0x080238d4
 800f068:	080238f4 	.word	0x080238f4
 800f06c:	08023918 	.word	0x08023918
 800f070:	08023758 	.word	0x08023758
  }
  if (!close_finished) {
 800f074:	7d7b      	ldrb	r3, [r7, #21]
 800f076:	2b00      	cmp	r3, #0
 800f078:	d11e      	bne.n	800f0b8 <lwip_netconn_do_close_internal+0x294>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800f07a:	693b      	ldr	r3, [r7, #16]
 800f07c:	7d1b      	ldrb	r3, [r3, #20]
 800f07e:	2b01      	cmp	r3, #1
 800f080:	d106      	bne.n	800f090 <lwip_netconn_do_close_internal+0x26c>
 800f082:	4b16      	ldr	r3, [pc, #88]	; (800f0dc <lwip_netconn_do_close_internal+0x2b8>)
 800f084:	f240 4241 	movw	r2, #1089	; 0x441
 800f088:	4915      	ldr	r1, [pc, #84]	; (800f0e0 <lwip_netconn_do_close_internal+0x2bc>)
 800f08a:	4816      	ldr	r0, [pc, #88]	; (800f0e4 <lwip_netconn_do_close_internal+0x2c0>)
 800f08c:	f011 f9e0 	bl	8020450 <iprintf>
    if (shut_tx) {
 800f090:	7b7b      	ldrb	r3, [r7, #13]
 800f092:	2b00      	cmp	r3, #0
 800f094:	d003      	beq.n	800f09e <lwip_netconn_do_close_internal+0x27a>
      tcp_sent(tpcb, sent_tcp);
 800f096:	4914      	ldr	r1, [pc, #80]	; (800f0e8 <lwip_netconn_do_close_internal+0x2c4>)
 800f098:	6938      	ldr	r0, [r7, #16]
 800f09a:	f005 fd71 	bl	8014b80 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 800f09e:	2201      	movs	r2, #1
 800f0a0:	4912      	ldr	r1, [pc, #72]	; (800f0ec <lwip_netconn_do_close_internal+0x2c8>)
 800f0a2:	6938      	ldr	r0, [r7, #16]
 800f0a4:	f005 fdc8 	bl	8014c38 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 800f0a8:	4911      	ldr	r1, [pc, #68]	; (800f0f0 <lwip_netconn_do_close_internal+0x2cc>)
 800f0aa:	6938      	ldr	r0, [r7, #16]
 800f0ac:	f005 fd8a 	bl	8014bc4 <tcp_err>
    tcp_arg(tpcb, conn);
 800f0b0:	6879      	ldr	r1, [r7, #4]
 800f0b2:	6938      	ldr	r0, [r7, #16]
 800f0b4:	f005 fd30 	bl	8014b18 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 800f0b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	d106      	bne.n	800f0ce <lwip_netconn_do_close_internal+0x2aa>
 800f0c0:	4b06      	ldr	r3, [pc, #24]	; (800f0dc <lwip_netconn_do_close_internal+0x2b8>)
 800f0c2:	f240 424d 	movw	r2, #1101	; 0x44d
 800f0c6:	490b      	ldr	r1, [pc, #44]	; (800f0f4 <lwip_netconn_do_close_internal+0x2d0>)
 800f0c8:	4806      	ldr	r0, [pc, #24]	; (800f0e4 <lwip_netconn_do_close_internal+0x2c0>)
 800f0ca:	f011 f9c1 	bl	8020450 <iprintf>
  return err;
 800f0ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f0d2:	4618      	mov	r0, r3
 800f0d4:	3718      	adds	r7, #24
 800f0d6:	46bd      	mov	sp, r7
 800f0d8:	bd80      	pop	{r7, pc}
 800f0da:	bf00      	nop
 800f0dc:	080235f0 	.word	0x080235f0
 800f0e0:	0802392c 	.word	0x0802392c
 800f0e4:	08023634 	.word	0x08023634
 800f0e8:	0800e69d 	.word	0x0800e69d
 800f0ec:	0800e5d5 	.word	0x0800e5d5
 800f0f0:	0800e745 	.word	0x0800e745
 800f0f4:	08023950 	.word	0x08023950

0800f0f8 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 800f0f8:	b580      	push	{r7, lr}
 800f0fa:	b084      	sub	sp, #16
 800f0fc:	af00      	add	r7, sp, #0
 800f0fe:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 800f104:	68fb      	ldr	r3, [r7, #12]
 800f106:	681b      	ldr	r3, [r3, #0]
 800f108:	785b      	ldrb	r3, [r3, #1]
 800f10a:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 800f10c:	7afb      	ldrb	r3, [r7, #11]
 800f10e:	2b00      	cmp	r3, #0
 800f110:	d00d      	beq.n	800f12e <lwip_netconn_do_delconn+0x36>
 800f112:	68fb      	ldr	r3, [r7, #12]
 800f114:	681b      	ldr	r3, [r3, #0]
 800f116:	781b      	ldrb	r3, [r3, #0]
 800f118:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f11c:	2b10      	cmp	r3, #16
 800f11e:	d006      	beq.n	800f12e <lwip_netconn_do_delconn+0x36>
 800f120:	4b60      	ldr	r3, [pc, #384]	; (800f2a4 <lwip_netconn_do_delconn+0x1ac>)
 800f122:	f240 425e 	movw	r2, #1118	; 0x45e
 800f126:	4960      	ldr	r1, [pc, #384]	; (800f2a8 <lwip_netconn_do_delconn+0x1b0>)
 800f128:	4860      	ldr	r0, [pc, #384]	; (800f2ac <lwip_netconn_do_delconn+0x1b4>)
 800f12a:	f011 f991 	bl	8020450 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 800f12e:	7afb      	ldrb	r3, [r7, #11]
 800f130:	2b00      	cmp	r3, #0
 800f132:	d005      	beq.n	800f140 <lwip_netconn_do_delconn+0x48>
 800f134:	7afb      	ldrb	r3, [r7, #11]
 800f136:	2b02      	cmp	r3, #2
 800f138:	d002      	beq.n	800f140 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 800f13a:	7afb      	ldrb	r3, [r7, #11]
 800f13c:	2b03      	cmp	r3, #3
 800f13e:	d109      	bne.n	800f154 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 800f140:	7afb      	ldrb	r3, [r7, #11]
 800f142:	2b03      	cmp	r3, #3
 800f144:	d10a      	bne.n	800f15c <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 800f146:	68fb      	ldr	r3, [r7, #12]
 800f148:	681b      	ldr	r3, [r3, #0]
 800f14a:	7f1b      	ldrb	r3, [r3, #28]
 800f14c:	f003 0304 	and.w	r3, r3, #4
 800f150:	2b00      	cmp	r3, #0
 800f152:	d103      	bne.n	800f15c <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 800f154:	68fb      	ldr	r3, [r7, #12]
 800f156:	22fb      	movs	r2, #251	; 0xfb
 800f158:	711a      	strb	r2, [r3, #4]
 800f15a:	e097      	b.n	800f28c <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 800f15c:	7afb      	ldrb	r3, [r7, #11]
 800f15e:	2b03      	cmp	r3, #3
 800f160:	d10d      	bne.n	800f17e <lwip_netconn_do_delconn+0x86>
 800f162:	68fb      	ldr	r3, [r7, #12]
 800f164:	681b      	ldr	r3, [r3, #0]
 800f166:	7f1b      	ldrb	r3, [r3, #28]
 800f168:	f003 0304 	and.w	r3, r3, #4
 800f16c:	2b00      	cmp	r3, #0
 800f16e:	d106      	bne.n	800f17e <lwip_netconn_do_delconn+0x86>
 800f170:	4b4c      	ldr	r3, [pc, #304]	; (800f2a4 <lwip_netconn_do_delconn+0x1ac>)
 800f172:	f240 427a 	movw	r2, #1146	; 0x47a
 800f176:	494e      	ldr	r1, [pc, #312]	; (800f2b0 <lwip_netconn_do_delconn+0x1b8>)
 800f178:	484c      	ldr	r0, [pc, #304]	; (800f2ac <lwip_netconn_do_delconn+0x1b4>)
 800f17a:	f011 f969 	bl	8020450 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 800f17e:	68fb      	ldr	r3, [r7, #12]
 800f180:	2200      	movs	r2, #0
 800f182:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 800f184:	68fb      	ldr	r3, [r7, #12]
 800f186:	681b      	ldr	r3, [r3, #0]
 800f188:	4618      	mov	r0, r3
 800f18a:	f7ff fdcd 	bl	800ed28 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 800f18e:	68fb      	ldr	r3, [r7, #12]
 800f190:	681b      	ldr	r3, [r3, #0]
 800f192:	685b      	ldr	r3, [r3, #4]
 800f194:	2b00      	cmp	r3, #0
 800f196:	d05f      	beq.n	800f258 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800f198:	68fb      	ldr	r3, [r7, #12]
 800f19a:	681b      	ldr	r3, [r3, #0]
 800f19c:	781b      	ldrb	r3, [r3, #0]
 800f19e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f1a2:	2b10      	cmp	r3, #16
 800f1a4:	d00d      	beq.n	800f1c2 <lwip_netconn_do_delconn+0xca>
 800f1a6:	2b20      	cmp	r3, #32
 800f1a8:	d151      	bne.n	800f24e <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 800f1aa:	68fb      	ldr	r3, [r7, #12]
 800f1ac:	681b      	ldr	r3, [r3, #0]
 800f1ae:	685b      	ldr	r3, [r3, #4]
 800f1b0:	2200      	movs	r2, #0
 800f1b2:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 800f1b4:	68fb      	ldr	r3, [r7, #12]
 800f1b6:	681b      	ldr	r3, [r3, #0]
 800f1b8:	685b      	ldr	r3, [r3, #4]
 800f1ba:	4618      	mov	r0, r3
 800f1bc:	f00a ff8a 	bl	801a0d4 <udp_remove>
          break;
 800f1c0:	e046      	b.n	800f250 <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800f1c2:	68fb      	ldr	r3, [r7, #12]
 800f1c4:	681b      	ldr	r3, [r3, #0]
 800f1c6:	6a1b      	ldr	r3, [r3, #32]
 800f1c8:	2b00      	cmp	r3, #0
 800f1ca:	d006      	beq.n	800f1da <lwip_netconn_do_delconn+0xe2>
 800f1cc:	4b35      	ldr	r3, [pc, #212]	; (800f2a4 <lwip_netconn_do_delconn+0x1ac>)
 800f1ce:	f240 4294 	movw	r2, #1172	; 0x494
 800f1d2:	4938      	ldr	r1, [pc, #224]	; (800f2b4 <lwip_netconn_do_delconn+0x1bc>)
 800f1d4:	4835      	ldr	r0, [pc, #212]	; (800f2ac <lwip_netconn_do_delconn+0x1b4>)
 800f1d6:	f011 f93b 	bl	8020450 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 800f1da:	68fb      	ldr	r3, [r7, #12]
 800f1dc:	681b      	ldr	r3, [r3, #0]
 800f1de:	2204      	movs	r2, #4
 800f1e0:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 800f1e2:	68fb      	ldr	r3, [r7, #12]
 800f1e4:	2203      	movs	r2, #3
 800f1e6:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 800f1e8:	68fb      	ldr	r3, [r7, #12]
 800f1ea:	681b      	ldr	r3, [r3, #0]
 800f1ec:	68fa      	ldr	r2, [r7, #12]
 800f1ee:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800f1f0:	68fb      	ldr	r3, [r7, #12]
 800f1f2:	681b      	ldr	r3, [r3, #0]
 800f1f4:	2100      	movs	r1, #0
 800f1f6:	4618      	mov	r0, r3
 800f1f8:	f7ff fe14 	bl	800ee24 <lwip_netconn_do_close_internal>
 800f1fc:	4603      	mov	r3, r0
 800f1fe:	2b00      	cmp	r3, #0
 800f200:	d04b      	beq.n	800f29a <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800f202:	68fb      	ldr	r3, [r7, #12]
 800f204:	681b      	ldr	r3, [r3, #0]
 800f206:	785b      	ldrb	r3, [r3, #1]
 800f208:	2b04      	cmp	r3, #4
 800f20a:	d006      	beq.n	800f21a <lwip_netconn_do_delconn+0x122>
 800f20c:	4b25      	ldr	r3, [pc, #148]	; (800f2a4 <lwip_netconn_do_delconn+0x1ac>)
 800f20e:	f240 429a 	movw	r2, #1178	; 0x49a
 800f212:	4929      	ldr	r1, [pc, #164]	; (800f2b8 <lwip_netconn_do_delconn+0x1c0>)
 800f214:	4825      	ldr	r0, [pc, #148]	; (800f2ac <lwip_netconn_do_delconn+0x1b4>)
 800f216:	f011 f91b 	bl	8020450 <iprintf>
            UNLOCK_TCPIP_CORE();
 800f21a:	4828      	ldr	r0, [pc, #160]	; (800f2bc <lwip_netconn_do_delconn+0x1c4>)
 800f21c:	f00f fb23 	bl	801e866 <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800f220:	68fb      	ldr	r3, [r7, #12]
 800f222:	681b      	ldr	r3, [r3, #0]
 800f224:	330c      	adds	r3, #12
 800f226:	2100      	movs	r1, #0
 800f228:	4618      	mov	r0, r3
 800f22a:	f00f fa7a 	bl	801e722 <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 800f22e:	4823      	ldr	r0, [pc, #140]	; (800f2bc <lwip_netconn_do_delconn+0x1c4>)
 800f230:	f00f fb0a 	bl	801e848 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800f234:	68fb      	ldr	r3, [r7, #12]
 800f236:	681b      	ldr	r3, [r3, #0]
 800f238:	785b      	ldrb	r3, [r3, #1]
 800f23a:	2b00      	cmp	r3, #0
 800f23c:	d02d      	beq.n	800f29a <lwip_netconn_do_delconn+0x1a2>
 800f23e:	4b19      	ldr	r3, [pc, #100]	; (800f2a4 <lwip_netconn_do_delconn+0x1ac>)
 800f240:	f240 429e 	movw	r2, #1182	; 0x49e
 800f244:	491c      	ldr	r1, [pc, #112]	; (800f2b8 <lwip_netconn_do_delconn+0x1c0>)
 800f246:	4819      	ldr	r0, [pc, #100]	; (800f2ac <lwip_netconn_do_delconn+0x1b4>)
 800f248:	f011 f902 	bl	8020450 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 800f24c:	e025      	b.n	800f29a <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 800f24e:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 800f250:	68fb      	ldr	r3, [r7, #12]
 800f252:	681b      	ldr	r3, [r3, #0]
 800f254:	2200      	movs	r2, #0
 800f256:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 800f258:	68fb      	ldr	r3, [r7, #12]
 800f25a:	681b      	ldr	r3, [r3, #0]
 800f25c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f25e:	2b00      	cmp	r3, #0
 800f260:	d007      	beq.n	800f272 <lwip_netconn_do_delconn+0x17a>
 800f262:	68fb      	ldr	r3, [r7, #12]
 800f264:	681b      	ldr	r3, [r3, #0]
 800f266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f268:	68fa      	ldr	r2, [r7, #12]
 800f26a:	6810      	ldr	r0, [r2, #0]
 800f26c:	2200      	movs	r2, #0
 800f26e:	2100      	movs	r1, #0
 800f270:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 800f272:	68fb      	ldr	r3, [r7, #12]
 800f274:	681b      	ldr	r3, [r3, #0]
 800f276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f278:	2b00      	cmp	r3, #0
 800f27a:	d007      	beq.n	800f28c <lwip_netconn_do_delconn+0x194>
 800f27c:	68fb      	ldr	r3, [r7, #12]
 800f27e:	681b      	ldr	r3, [r3, #0]
 800f280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f282:	68fa      	ldr	r2, [r7, #12]
 800f284:	6810      	ldr	r0, [r2, #0]
 800f286:	2200      	movs	r2, #0
 800f288:	2102      	movs	r1, #2
 800f28a:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800f28c:	68fb      	ldr	r3, [r7, #12]
 800f28e:	681b      	ldr	r3, [r3, #0]
 800f290:	330c      	adds	r3, #12
 800f292:	4618      	mov	r0, r3
 800f294:	f00f fa90 	bl	801e7b8 <sys_sem_valid>
 800f298:	e000      	b.n	800f29c <lwip_netconn_do_delconn+0x1a4>
          return;
 800f29a:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 800f29c:	3710      	adds	r7, #16
 800f29e:	46bd      	mov	sp, r7
 800f2a0:	bd80      	pop	{r7, pc}
 800f2a2:	bf00      	nop
 800f2a4:	080235f0 	.word	0x080235f0
 800f2a8:	08023960 	.word	0x08023960
 800f2ac:	08023634 	.word	0x08023634
 800f2b0:	08023974 	.word	0x08023974
 800f2b4:	08023994 	.word	0x08023994
 800f2b8:	080239b0 	.word	0x080239b0
 800f2bc:	24004cb4 	.word	0x24004cb4

0800f2c0 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 800f2c0:	b580      	push	{r7, lr}
 800f2c2:	b084      	sub	sp, #16
 800f2c4:	af00      	add	r7, sp, #0
 800f2c6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800f2cc:	68bb      	ldr	r3, [r7, #8]
 800f2ce:	681b      	ldr	r3, [r3, #0]
 800f2d0:	685b      	ldr	r3, [r3, #4]
 800f2d2:	2b00      	cmp	r3, #0
 800f2d4:	d025      	beq.n	800f322 <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800f2d6:	68bb      	ldr	r3, [r7, #8]
 800f2d8:	681b      	ldr	r3, [r3, #0]
 800f2da:	781b      	ldrb	r3, [r3, #0]
 800f2dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f2e0:	2b10      	cmp	r3, #16
 800f2e2:	d00e      	beq.n	800f302 <lwip_netconn_do_bind+0x42>
 800f2e4:	2b20      	cmp	r3, #32
 800f2e6:	d119      	bne.n	800f31c <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800f2e8:	68bb      	ldr	r3, [r7, #8]
 800f2ea:	681b      	ldr	r3, [r3, #0]
 800f2ec:	6858      	ldr	r0, [r3, #4]
 800f2ee:	68bb      	ldr	r3, [r7, #8]
 800f2f0:	6899      	ldr	r1, [r3, #8]
 800f2f2:	68bb      	ldr	r3, [r7, #8]
 800f2f4:	899b      	ldrh	r3, [r3, #12]
 800f2f6:	461a      	mov	r2, r3
 800f2f8:	f00a fdd6 	bl	8019ea8 <udp_bind>
 800f2fc:	4603      	mov	r3, r0
 800f2fe:	73fb      	strb	r3, [r7, #15]
        break;
 800f300:	e011      	b.n	800f326 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800f302:	68bb      	ldr	r3, [r7, #8]
 800f304:	681b      	ldr	r3, [r3, #0]
 800f306:	6858      	ldr	r0, [r3, #4]
 800f308:	68bb      	ldr	r3, [r7, #8]
 800f30a:	6899      	ldr	r1, [r3, #8]
 800f30c:	68bb      	ldr	r3, [r7, #8]
 800f30e:	899b      	ldrh	r3, [r3, #12]
 800f310:	461a      	mov	r2, r3
 800f312:	f004 fb7f 	bl	8013a14 <tcp_bind>
 800f316:	4603      	mov	r3, r0
 800f318:	73fb      	strb	r3, [r7, #15]
        break;
 800f31a:	e004      	b.n	800f326 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 800f31c:	23fa      	movs	r3, #250	; 0xfa
 800f31e:	73fb      	strb	r3, [r7, #15]
        break;
 800f320:	e001      	b.n	800f326 <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 800f322:	23fa      	movs	r3, #250	; 0xfa
 800f324:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 800f326:	68bb      	ldr	r3, [r7, #8]
 800f328:	7bfa      	ldrb	r2, [r7, #15]
 800f32a:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800f32c:	bf00      	nop
 800f32e:	3710      	adds	r7, #16
 800f330:	46bd      	mov	sp, r7
 800f332:	bd80      	pop	{r7, pc}

0800f334 <lwip_netconn_do_listen>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 800f334:	b580      	push	{r7, lr}
 800f336:	b086      	sub	sp, #24
 800f338:	af00      	add	r7, sp, #0
 800f33a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	617b      	str	r3, [r7, #20]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800f340:	697b      	ldr	r3, [r7, #20]
 800f342:	681b      	ldr	r3, [r3, #0]
 800f344:	685b      	ldr	r3, [r3, #4]
 800f346:	2b00      	cmp	r3, #0
 800f348:	d07f      	beq.n	800f44a <lwip_netconn_do_listen+0x116>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800f34a:	697b      	ldr	r3, [r7, #20]
 800f34c:	681b      	ldr	r3, [r3, #0]
 800f34e:	781b      	ldrb	r3, [r3, #0]
 800f350:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f354:	2b10      	cmp	r3, #16
 800f356:	d175      	bne.n	800f444 <lwip_netconn_do_listen+0x110>
      if (msg->conn->state == NETCONN_NONE) {
 800f358:	697b      	ldr	r3, [r7, #20]
 800f35a:	681b      	ldr	r3, [r3, #0]
 800f35c:	785b      	ldrb	r3, [r3, #1]
 800f35e:	2b00      	cmp	r3, #0
 800f360:	d165      	bne.n	800f42e <lwip_netconn_do_listen+0xfa>
        struct tcp_pcb *lpcb;
        if (msg->conn->pcb.tcp->state != CLOSED) {
 800f362:	697b      	ldr	r3, [r7, #20]
 800f364:	681b      	ldr	r3, [r3, #0]
 800f366:	685b      	ldr	r3, [r3, #4]
 800f368:	7d1b      	ldrb	r3, [r3, #20]
 800f36a:	2b00      	cmp	r3, #0
 800f36c:	d002      	beq.n	800f374 <lwip_netconn_do_listen+0x40>
          /* connection is not closed, cannot listen */
          err = ERR_VAL;
 800f36e:	23fa      	movs	r3, #250	; 0xfa
 800f370:	72fb      	strb	r3, [r7, #11]
 800f372:	e06c      	b.n	800f44e <lwip_netconn_do_listen+0x11a>
        } else {
          u8_t backlog;
#if TCP_LISTEN_BACKLOG
          backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
          backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 800f374:	23ff      	movs	r3, #255	; 0xff
 800f376:	74fb      	strb	r3, [r7, #19]
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 800f378:	697b      	ldr	r3, [r7, #20]
 800f37a:	681b      	ldr	r3, [r3, #0]
 800f37c:	685b      	ldr	r3, [r3, #4]
 800f37e:	f107 020b 	add.w	r2, r7, #11
 800f382:	7cf9      	ldrb	r1, [r7, #19]
 800f384:	4618      	mov	r0, r3
 800f386:	f004 fbfd 	bl	8013b84 <tcp_listen_with_backlog_and_err>
 800f38a:	60f8      	str	r0, [r7, #12]

          if (lpcb == NULL) {
 800f38c:	68fb      	ldr	r3, [r7, #12]
 800f38e:	2b00      	cmp	r3, #0
 800f390:	d05d      	beq.n	800f44e <lwip_netconn_do_listen+0x11a>
            /* in this case, the old pcb is still allocated */
          } else {
            /* delete the recvmbox and allocate the acceptmbox */
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 800f392:	697b      	ldr	r3, [r7, #20]
 800f394:	681b      	ldr	r3, [r3, #0]
 800f396:	3310      	adds	r3, #16
 800f398:	4618      	mov	r0, r3
 800f39a:	f00f f97c 	bl	801e696 <sys_mbox_valid>
 800f39e:	4603      	mov	r3, r0
 800f3a0:	2b00      	cmp	r3, #0
 800f3a2:	d00b      	beq.n	800f3bc <lwip_netconn_do_listen+0x88>
              /** @todo: should we drain the recvmbox here? */
              sys_mbox_free(&msg->conn->recvmbox);
 800f3a4:	697b      	ldr	r3, [r7, #20]
 800f3a6:	681b      	ldr	r3, [r3, #0]
 800f3a8:	3310      	adds	r3, #16
 800f3aa:	4618      	mov	r0, r3
 800f3ac:	f00f f8ec 	bl	801e588 <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 800f3b0:	697b      	ldr	r3, [r7, #20]
 800f3b2:	681b      	ldr	r3, [r3, #0]
 800f3b4:	3310      	adds	r3, #16
 800f3b6:	4618      	mov	r0, r3
 800f3b8:	f00f f97e 	bl	801e6b8 <sys_mbox_set_invalid>
            }
            err = ERR_OK;
 800f3bc:	2300      	movs	r3, #0
 800f3be:	72fb      	strb	r3, [r7, #11]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 800f3c0:	697b      	ldr	r3, [r7, #20]
 800f3c2:	681b      	ldr	r3, [r3, #0]
 800f3c4:	3314      	adds	r3, #20
 800f3c6:	4618      	mov	r0, r3
 800f3c8:	f00f f965 	bl	801e696 <sys_mbox_valid>
 800f3cc:	4603      	mov	r3, r0
 800f3ce:	2b00      	cmp	r3, #0
 800f3d0:	d108      	bne.n	800f3e4 <lwip_netconn_do_listen+0xb0>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 800f3d2:	697b      	ldr	r3, [r7, #20]
 800f3d4:	681b      	ldr	r3, [r3, #0]
 800f3d6:	3314      	adds	r3, #20
 800f3d8:	2106      	movs	r1, #6
 800f3da:	4618      	mov	r0, r3
 800f3dc:	f00f f8b2 	bl	801e544 <sys_mbox_new>
 800f3e0:	4603      	mov	r3, r0
 800f3e2:	72fb      	strb	r3, [r7, #11]
            }
            if (err == ERR_OK) {
 800f3e4:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800f3e8:	2b00      	cmp	r3, #0
 800f3ea:	d118      	bne.n	800f41e <lwip_netconn_do_listen+0xea>
              msg->conn->state = NETCONN_LISTEN;
 800f3ec:	697b      	ldr	r3, [r7, #20]
 800f3ee:	681b      	ldr	r3, [r3, #0]
 800f3f0:	2202      	movs	r2, #2
 800f3f2:	705a      	strb	r2, [r3, #1]
              msg->conn->pcb.tcp = lpcb;
 800f3f4:	697b      	ldr	r3, [r7, #20]
 800f3f6:	681b      	ldr	r3, [r3, #0]
 800f3f8:	68fa      	ldr	r2, [r7, #12]
 800f3fa:	605a      	str	r2, [r3, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 800f3fc:	697b      	ldr	r3, [r7, #20]
 800f3fe:	681b      	ldr	r3, [r3, #0]
 800f400:	685a      	ldr	r2, [r3, #4]
 800f402:	697b      	ldr	r3, [r7, #20]
 800f404:	681b      	ldr	r3, [r3, #0]
 800f406:	4619      	mov	r1, r3
 800f408:	4610      	mov	r0, r2
 800f40a:	f005 fb85 	bl	8014b18 <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 800f40e:	697b      	ldr	r3, [r7, #20]
 800f410:	681b      	ldr	r3, [r3, #0]
 800f412:	685b      	ldr	r3, [r3, #4]
 800f414:	4912      	ldr	r1, [pc, #72]	; (800f460 <lwip_netconn_do_listen+0x12c>)
 800f416:	4618      	mov	r0, r3
 800f418:	f005 fbf6 	bl	8014c08 <tcp_accept>
 800f41c:	e017      	b.n	800f44e <lwip_netconn_do_listen+0x11a>
            } else {
              /* since the old pcb is already deallocated, free lpcb now */
              tcp_close(lpcb);
 800f41e:	68f8      	ldr	r0, [r7, #12]
 800f420:	f004 f9a6 	bl	8013770 <tcp_close>
              msg->conn->pcb.tcp = NULL;
 800f424:	697b      	ldr	r3, [r7, #20]
 800f426:	681b      	ldr	r3, [r3, #0]
 800f428:	2200      	movs	r2, #0
 800f42a:	605a      	str	r2, [r3, #4]
 800f42c:	e00f      	b.n	800f44e <lwip_netconn_do_listen+0x11a>
            }
          }
        }
      } else if (msg->conn->state == NETCONN_LISTEN) {
 800f42e:	697b      	ldr	r3, [r7, #20]
 800f430:	681b      	ldr	r3, [r3, #0]
 800f432:	785b      	ldrb	r3, [r3, #1]
 800f434:	2b02      	cmp	r3, #2
 800f436:	d102      	bne.n	800f43e <lwip_netconn_do_listen+0x10a>
        /* already listening, allow updating of the backlog */
        err = ERR_OK;
 800f438:	2300      	movs	r3, #0
 800f43a:	72fb      	strb	r3, [r7, #11]
 800f43c:	e007      	b.n	800f44e <lwip_netconn_do_listen+0x11a>
        tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
      } else {
        err = ERR_CONN;
 800f43e:	23f5      	movs	r3, #245	; 0xf5
 800f440:	72fb      	strb	r3, [r7, #11]
 800f442:	e004      	b.n	800f44e <lwip_netconn_do_listen+0x11a>
      }
    } else {
      err = ERR_ARG;
 800f444:	23f0      	movs	r3, #240	; 0xf0
 800f446:	72fb      	strb	r3, [r7, #11]
 800f448:	e001      	b.n	800f44e <lwip_netconn_do_listen+0x11a>
    }
  } else {
    err = ERR_CONN;
 800f44a:	23f5      	movs	r3, #245	; 0xf5
 800f44c:	72fb      	strb	r3, [r7, #11]
  }
  msg->err = err;
 800f44e:	f997 200b 	ldrsb.w	r2, [r7, #11]
 800f452:	697b      	ldr	r3, [r7, #20]
 800f454:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800f456:	bf00      	nop
 800f458:	3718      	adds	r7, #24
 800f45a:	46bd      	mov	sp, r7
 800f45c:	bd80      	pop	{r7, pc}
 800f45e:	bf00      	nop
 800f460:	0800e941 	.word	0x0800e941

0800f464 <lwip_netconn_do_send>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_send(void *m)
{
 800f464:	b580      	push	{r7, lr}
 800f466:	b084      	sub	sp, #16
 800f468:	af00      	add	r7, sp, #0
 800f46a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800f470:	68bb      	ldr	r3, [r7, #8]
 800f472:	681b      	ldr	r3, [r3, #0]
 800f474:	4618      	mov	r0, r3
 800f476:	f7fe ff1d 	bl	800e2b4 <netconn_err>
 800f47a:	4603      	mov	r3, r0
 800f47c:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800f47e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f482:	2b00      	cmp	r3, #0
 800f484:	d134      	bne.n	800f4f0 <lwip_netconn_do_send+0x8c>
    if (msg->conn->pcb.tcp != NULL) {
 800f486:	68bb      	ldr	r3, [r7, #8]
 800f488:	681b      	ldr	r3, [r3, #0]
 800f48a:	685b      	ldr	r3, [r3, #4]
 800f48c:	2b00      	cmp	r3, #0
 800f48e:	d02d      	beq.n	800f4ec <lwip_netconn_do_send+0x88>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800f490:	68bb      	ldr	r3, [r7, #8]
 800f492:	681b      	ldr	r3, [r3, #0]
 800f494:	781b      	ldrb	r3, [r3, #0]
 800f496:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f49a:	2b20      	cmp	r3, #32
 800f49c:	d123      	bne.n	800f4e6 <lwip_netconn_do_send+0x82>
            err = udp_sendto_chksum(msg->conn->pcb.udp, msg->msg.b->p,
                                    &msg->msg.b->addr, msg->msg.b->port,
                                    msg->msg.b->flags & NETBUF_FLAG_CHKSUM, msg->msg.b->toport_chksum);
          }
#else /* LWIP_CHECKSUM_ON_COPY */
          if (ip_addr_isany_val(msg->msg.b->addr) || IP_IS_ANY_TYPE_VAL(msg->msg.b->addr)) {
 800f49e:	68bb      	ldr	r3, [r7, #8]
 800f4a0:	689b      	ldr	r3, [r3, #8]
 800f4a2:	689b      	ldr	r3, [r3, #8]
 800f4a4:	2b00      	cmp	r3, #0
 800f4a6:	d10c      	bne.n	800f4c2 <lwip_netconn_do_send+0x5e>
            err = udp_send(msg->conn->pcb.udp, msg->msg.b->p);
 800f4a8:	68bb      	ldr	r3, [r7, #8]
 800f4aa:	681b      	ldr	r3, [r3, #0]
 800f4ac:	685a      	ldr	r2, [r3, #4]
 800f4ae:	68bb      	ldr	r3, [r7, #8]
 800f4b0:	689b      	ldr	r3, [r3, #8]
 800f4b2:	681b      	ldr	r3, [r3, #0]
 800f4b4:	4619      	mov	r1, r3
 800f4b6:	4610      	mov	r0, r2
 800f4b8:	f00a fb0c 	bl	8019ad4 <udp_send>
 800f4bc:	4603      	mov	r3, r0
 800f4be:	73fb      	strb	r3, [r7, #15]
          } else {
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
          }
#endif /* LWIP_CHECKSUM_ON_COPY */
          break;
 800f4c0:	e016      	b.n	800f4f0 <lwip_netconn_do_send+0x8c>
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
 800f4c2:	68bb      	ldr	r3, [r7, #8]
 800f4c4:	681b      	ldr	r3, [r3, #0]
 800f4c6:	6858      	ldr	r0, [r3, #4]
 800f4c8:	68bb      	ldr	r3, [r7, #8]
 800f4ca:	689b      	ldr	r3, [r3, #8]
 800f4cc:	6819      	ldr	r1, [r3, #0]
 800f4ce:	68bb      	ldr	r3, [r7, #8]
 800f4d0:	689b      	ldr	r3, [r3, #8]
 800f4d2:	f103 0208 	add.w	r2, r3, #8
 800f4d6:	68bb      	ldr	r3, [r7, #8]
 800f4d8:	689b      	ldr	r3, [r3, #8]
 800f4da:	899b      	ldrh	r3, [r3, #12]
 800f4dc:	f00a fb2e 	bl	8019b3c <udp_sendto>
 800f4e0:	4603      	mov	r3, r0
 800f4e2:	73fb      	strb	r3, [r7, #15]
          break;
 800f4e4:	e004      	b.n	800f4f0 <lwip_netconn_do_send+0x8c>
#endif /* LWIP_UDP */
        default:
          err = ERR_CONN;
 800f4e6:	23f5      	movs	r3, #245	; 0xf5
 800f4e8:	73fb      	strb	r3, [r7, #15]
          break;
 800f4ea:	e001      	b.n	800f4f0 <lwip_netconn_do_send+0x8c>
      }
    } else {
      err = ERR_CONN;
 800f4ec:	23f5      	movs	r3, #245	; 0xf5
 800f4ee:	73fb      	strb	r3, [r7, #15]
    }
  }
  msg->err = err;
 800f4f0:	68bb      	ldr	r3, [r7, #8]
 800f4f2:	7bfa      	ldrb	r2, [r7, #15]
 800f4f4:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800f4f6:	bf00      	nop
 800f4f8:	3710      	adds	r7, #16
 800f4fa:	46bd      	mov	sp, r7
 800f4fc:	bd80      	pop	{r7, pc}

0800f4fe <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 800f4fe:	b580      	push	{r7, lr}
 800f500:	b086      	sub	sp, #24
 800f502:	af00      	add	r7, sp, #0
 800f504:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 800f50a:	693b      	ldr	r3, [r7, #16]
 800f50c:	2200      	movs	r2, #0
 800f50e:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 800f510:	693b      	ldr	r3, [r7, #16]
 800f512:	681b      	ldr	r3, [r3, #0]
 800f514:	685b      	ldr	r3, [r3, #4]
 800f516:	2b00      	cmp	r3, #0
 800f518:	d022      	beq.n	800f560 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800f51a:	693b      	ldr	r3, [r7, #16]
 800f51c:	681b      	ldr	r3, [r3, #0]
 800f51e:	781b      	ldrb	r3, [r3, #0]
 800f520:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f524:	2b10      	cmp	r3, #16
 800f526:	d11b      	bne.n	800f560 <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 800f528:	693b      	ldr	r3, [r7, #16]
 800f52a:	689b      	ldr	r3, [r3, #8]
 800f52c:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 800f52e:	697b      	ldr	r3, [r7, #20]
 800f530:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f534:	d202      	bcs.n	800f53c <lwip_netconn_do_recv+0x3e>
 800f536:	697b      	ldr	r3, [r7, #20]
 800f538:	b29b      	uxth	r3, r3
 800f53a:	e001      	b.n	800f540 <lwip_netconn_do_recv+0x42>
 800f53c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f540:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 800f542:	693b      	ldr	r3, [r7, #16]
 800f544:	681b      	ldr	r3, [r3, #0]
 800f546:	685b      	ldr	r3, [r3, #4]
 800f548:	89fa      	ldrh	r2, [r7, #14]
 800f54a:	4611      	mov	r1, r2
 800f54c:	4618      	mov	r0, r3
 800f54e:	f004 fc1d 	bl	8013d8c <tcp_recved>
        remaining -= recved;
 800f552:	89fb      	ldrh	r3, [r7, #14]
 800f554:	697a      	ldr	r2, [r7, #20]
 800f556:	1ad3      	subs	r3, r2, r3
 800f558:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 800f55a:	697b      	ldr	r3, [r7, #20]
 800f55c:	2b00      	cmp	r3, #0
 800f55e:	d1e6      	bne.n	800f52e <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 800f560:	bf00      	nop
 800f562:	3718      	adds	r7, #24
 800f564:	46bd      	mov	sp, r7
 800f566:	bd80      	pop	{r7, pc}

0800f568 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800f568:	b580      	push	{r7, lr}
 800f56a:	b088      	sub	sp, #32
 800f56c:	af00      	add	r7, sp, #0
 800f56e:	6078      	str	r0, [r7, #4]
 800f570:	460b      	mov	r3, r1
 800f572:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 800f574:	2300      	movs	r3, #0
 800f576:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	2b00      	cmp	r3, #0
 800f57c:	d106      	bne.n	800f58c <lwip_netconn_do_writemore+0x24>
 800f57e:	4b96      	ldr	r3, [pc, #600]	; (800f7d8 <lwip_netconn_do_writemore+0x270>)
 800f580:	f240 6273 	movw	r2, #1651	; 0x673
 800f584:	4995      	ldr	r1, [pc, #596]	; (800f7dc <lwip_netconn_do_writemore+0x274>)
 800f586:	4896      	ldr	r0, [pc, #600]	; (800f7e0 <lwip_netconn_do_writemore+0x278>)
 800f588:	f010 ff62 	bl	8020450 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	785b      	ldrb	r3, [r3, #1]
 800f590:	2b01      	cmp	r3, #1
 800f592:	d006      	beq.n	800f5a2 <lwip_netconn_do_writemore+0x3a>
 800f594:	4b90      	ldr	r3, [pc, #576]	; (800f7d8 <lwip_netconn_do_writemore+0x270>)
 800f596:	f240 6274 	movw	r2, #1652	; 0x674
 800f59a:	4992      	ldr	r1, [pc, #584]	; (800f7e4 <lwip_netconn_do_writemore+0x27c>)
 800f59c:	4890      	ldr	r0, [pc, #576]	; (800f7e0 <lwip_netconn_do_writemore+0x278>)
 800f59e:	f010 ff57 	bl	8020450 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	6a1b      	ldr	r3, [r3, #32]
 800f5a6:	2b00      	cmp	r3, #0
 800f5a8:	d106      	bne.n	800f5b8 <lwip_netconn_do_writemore+0x50>
 800f5aa:	4b8b      	ldr	r3, [pc, #556]	; (800f7d8 <lwip_netconn_do_writemore+0x270>)
 800f5ac:	f240 6275 	movw	r2, #1653	; 0x675
 800f5b0:	498d      	ldr	r1, [pc, #564]	; (800f7e8 <lwip_netconn_do_writemore+0x280>)
 800f5b2:	488b      	ldr	r0, [pc, #556]	; (800f7e0 <lwip_netconn_do_writemore+0x278>)
 800f5b4:	f010 ff4c 	bl	8020450 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	685b      	ldr	r3, [r3, #4]
 800f5bc:	2b00      	cmp	r3, #0
 800f5be:	d106      	bne.n	800f5ce <lwip_netconn_do_writemore+0x66>
 800f5c0:	4b85      	ldr	r3, [pc, #532]	; (800f7d8 <lwip_netconn_do_writemore+0x270>)
 800f5c2:	f240 6276 	movw	r2, #1654	; 0x676
 800f5c6:	4989      	ldr	r1, [pc, #548]	; (800f7ec <lwip_netconn_do_writemore+0x284>)
 800f5c8:	4885      	ldr	r0, [pc, #532]	; (800f7e0 <lwip_netconn_do_writemore+0x278>)
 800f5ca:	f010 ff41 	bl	8020450 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	6a1b      	ldr	r3, [r3, #32]
 800f5d2:	699a      	ldr	r2, [r3, #24]
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	6a1b      	ldr	r3, [r3, #32]
 800f5d8:	695b      	ldr	r3, [r3, #20]
 800f5da:	429a      	cmp	r2, r3
 800f5dc:	d306      	bcc.n	800f5ec <lwip_netconn_do_writemore+0x84>
 800f5de:	4b7e      	ldr	r3, [pc, #504]	; (800f7d8 <lwip_netconn_do_writemore+0x270>)
 800f5e0:	f240 6277 	movw	r2, #1655	; 0x677
 800f5e4:	4982      	ldr	r1, [pc, #520]	; (800f7f0 <lwip_netconn_do_writemore+0x288>)
 800f5e6:	487e      	ldr	r0, [pc, #504]	; (800f7e0 <lwip_netconn_do_writemore+0x278>)
 800f5e8:	f010 ff32 	bl	8020450 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	6a1b      	ldr	r3, [r3, #32]
 800f5f0:	899b      	ldrh	r3, [r3, #12]
 800f5f2:	2b00      	cmp	r3, #0
 800f5f4:	d106      	bne.n	800f604 <lwip_netconn_do_writemore+0x9c>
 800f5f6:	4b78      	ldr	r3, [pc, #480]	; (800f7d8 <lwip_netconn_do_writemore+0x270>)
 800f5f8:	f240 6279 	movw	r2, #1657	; 0x679
 800f5fc:	497d      	ldr	r1, [pc, #500]	; (800f7f4 <lwip_netconn_do_writemore+0x28c>)
 800f5fe:	4878      	ldr	r0, [pc, #480]	; (800f7e0 <lwip_netconn_do_writemore+0x278>)
 800f600:	f010 ff26 	bl	8020450 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	6a1b      	ldr	r3, [r3, #32]
 800f608:	7f1b      	ldrb	r3, [r3, #28]
 800f60a:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	7f1b      	ldrb	r3, [r3, #28]
 800f610:	f003 0302 	and.w	r3, r3, #2
 800f614:	2b00      	cmp	r3, #0
 800f616:	d104      	bne.n	800f622 <lwip_netconn_do_writemore+0xba>
 800f618:	7ebb      	ldrb	r3, [r7, #26]
 800f61a:	f003 0304 	and.w	r3, r3, #4
 800f61e:	2b00      	cmp	r3, #0
 800f620:	d001      	beq.n	800f626 <lwip_netconn_do_writemore+0xbe>
 800f622:	2301      	movs	r3, #1
 800f624:	e000      	b.n	800f628 <lwip_netconn_do_writemore+0xc0>
 800f626:	2300      	movs	r3, #0
 800f628:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	6a1b      	ldr	r3, [r3, #32]
 800f62e:	689b      	ldr	r3, [r3, #8]
 800f630:	681a      	ldr	r2, [r3, #0]
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	6a1b      	ldr	r3, [r3, #32]
 800f636:	691b      	ldr	r3, [r3, #16]
 800f638:	4413      	add	r3, r2
 800f63a:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	6a1b      	ldr	r3, [r3, #32]
 800f640:	689b      	ldr	r3, [r3, #8]
 800f642:	685a      	ldr	r2, [r3, #4]
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	6a1b      	ldr	r3, [r3, #32]
 800f648:	691b      	ldr	r3, [r3, #16]
 800f64a:	1ad3      	subs	r3, r2, r3
 800f64c:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 800f64e:	693b      	ldr	r3, [r7, #16]
 800f650:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f654:	d307      	bcc.n	800f666 <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 800f656:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f65a:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800f65c:	7ebb      	ldrb	r3, [r7, #26]
 800f65e:	f043 0302 	orr.w	r3, r3, #2
 800f662:	76bb      	strb	r3, [r7, #26]
 800f664:	e001      	b.n	800f66a <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 800f666:	693b      	ldr	r3, [r7, #16]
 800f668:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	685b      	ldr	r3, [r3, #4]
 800f66e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800f672:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 800f674:	89fa      	ldrh	r2, [r7, #14]
 800f676:	8bbb      	ldrh	r3, [r7, #28]
 800f678:	429a      	cmp	r2, r3
 800f67a:	d216      	bcs.n	800f6aa <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 800f67c:	89fb      	ldrh	r3, [r7, #14]
 800f67e:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 800f680:	7e3b      	ldrb	r3, [r7, #24]
 800f682:	2b00      	cmp	r3, #0
 800f684:	d00d      	beq.n	800f6a2 <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 800f686:	8bbb      	ldrh	r3, [r7, #28]
 800f688:	2b00      	cmp	r3, #0
 800f68a:	d10e      	bne.n	800f6aa <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	6a1b      	ldr	r3, [r3, #32]
 800f690:	699b      	ldr	r3, [r3, #24]
 800f692:	2b00      	cmp	r3, #0
 800f694:	d102      	bne.n	800f69c <lwip_netconn_do_writemore+0x134>
 800f696:	f06f 0306 	mvn.w	r3, #6
 800f69a:	e000      	b.n	800f69e <lwip_netconn_do_writemore+0x136>
 800f69c:	2300      	movs	r3, #0
 800f69e:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 800f6a0:	e07d      	b.n	800f79e <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 800f6a2:	7ebb      	ldrb	r3, [r7, #26]
 800f6a4:	f043 0302 	orr.w	r3, r3, #2
 800f6a8:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	6a1b      	ldr	r3, [r3, #32]
 800f6ae:	691a      	ldr	r2, [r3, #16]
 800f6b0:	8bbb      	ldrh	r3, [r7, #28]
 800f6b2:	441a      	add	r2, r3
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	6a1b      	ldr	r3, [r3, #32]
 800f6b8:	689b      	ldr	r3, [r3, #8]
 800f6ba:	685b      	ldr	r3, [r3, #4]
 800f6bc:	429a      	cmp	r2, r3
 800f6be:	d906      	bls.n	800f6ce <lwip_netconn_do_writemore+0x166>
 800f6c0:	4b45      	ldr	r3, [pc, #276]	; (800f7d8 <lwip_netconn_do_writemore+0x270>)
 800f6c2:	f240 62a3 	movw	r2, #1699	; 0x6a3
 800f6c6:	494c      	ldr	r1, [pc, #304]	; (800f7f8 <lwip_netconn_do_writemore+0x290>)
 800f6c8:	4845      	ldr	r0, [pc, #276]	; (800f7e0 <lwip_netconn_do_writemore+0x278>)
 800f6ca:	f010 fec1 	bl	8020450 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 800f6ce:	8bbb      	ldrh	r3, [r7, #28]
 800f6d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f6d4:	4293      	cmp	r3, r2
 800f6d6:	d103      	bne.n	800f6e0 <lwip_netconn_do_writemore+0x178>
 800f6d8:	693b      	ldr	r3, [r7, #16]
 800f6da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f6de:	d209      	bcs.n	800f6f4 <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800f6e0:	693b      	ldr	r3, [r7, #16]
 800f6e2:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 800f6e4:	8bba      	ldrh	r2, [r7, #28]
 800f6e6:	429a      	cmp	r2, r3
 800f6e8:	d10b      	bne.n	800f702 <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	6a1b      	ldr	r3, [r3, #32]
 800f6ee:	899b      	ldrh	r3, [r3, #12]
 800f6f0:	2b01      	cmp	r3, #1
 800f6f2:	d906      	bls.n	800f702 <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 800f6f4:	2301      	movs	r3, #1
 800f6f6:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800f6f8:	7ebb      	ldrb	r3, [r7, #26]
 800f6fa:	f043 0302 	orr.w	r3, r3, #2
 800f6fe:	76bb      	strb	r3, [r7, #26]
 800f700:	e001      	b.n	800f706 <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 800f702:	2300      	movs	r3, #0
 800f704:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	6858      	ldr	r0, [r3, #4]
 800f70a:	7ebb      	ldrb	r3, [r7, #26]
 800f70c:	8bba      	ldrh	r2, [r7, #28]
 800f70e:	6979      	ldr	r1, [r7, #20]
 800f710:	f008 f944 	bl	801799c <tcp_write>
 800f714:	4603      	mov	r3, r0
 800f716:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 800f718:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800f71c:	2b00      	cmp	r3, #0
 800f71e:	d12c      	bne.n	800f77a <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	6a1b      	ldr	r3, [r3, #32]
 800f724:	6999      	ldr	r1, [r3, #24]
 800f726:	8bba      	ldrh	r2, [r7, #28]
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	6a1b      	ldr	r3, [r3, #32]
 800f72c:	440a      	add	r2, r1
 800f72e:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	6a1b      	ldr	r3, [r3, #32]
 800f734:	6919      	ldr	r1, [r3, #16]
 800f736:	8bba      	ldrh	r2, [r7, #28]
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	6a1b      	ldr	r3, [r3, #32]
 800f73c:	440a      	add	r2, r1
 800f73e:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	6a1b      	ldr	r3, [r3, #32]
 800f744:	691a      	ldr	r2, [r3, #16]
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	6a1b      	ldr	r3, [r3, #32]
 800f74a:	689b      	ldr	r3, [r3, #8]
 800f74c:	685b      	ldr	r3, [r3, #4]
 800f74e:	429a      	cmp	r2, r3
 800f750:	d113      	bne.n	800f77a <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	6a1b      	ldr	r3, [r3, #32]
 800f756:	899a      	ldrh	r2, [r3, #12]
 800f758:	3a01      	subs	r2, #1
 800f75a:	b292      	uxth	r2, r2
 800f75c:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	6a1b      	ldr	r3, [r3, #32]
 800f762:	899b      	ldrh	r3, [r3, #12]
 800f764:	2b00      	cmp	r3, #0
 800f766:	d008      	beq.n	800f77a <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	6a1b      	ldr	r3, [r3, #32]
 800f76c:	689a      	ldr	r2, [r3, #8]
 800f76e:	3208      	adds	r2, #8
 800f770:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	6a1b      	ldr	r3, [r3, #32]
 800f776:	2200      	movs	r2, #0
 800f778:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 800f77a:	7e7b      	ldrb	r3, [r7, #25]
 800f77c:	2b00      	cmp	r3, #0
 800f77e:	d004      	beq.n	800f78a <lwip_netconn_do_writemore+0x222>
 800f780:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800f784:	2b00      	cmp	r3, #0
 800f786:	f43f af50 	beq.w	800f62a <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800f78a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800f78e:	2b00      	cmp	r3, #0
 800f790:	d004      	beq.n	800f79c <lwip_netconn_do_writemore+0x234>
 800f792:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800f796:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f79a:	d146      	bne.n	800f82a <lwip_netconn_do_writemore+0x2c2>
err_mem:
 800f79c:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800f79e:	7e3b      	ldrb	r3, [r7, #24]
 800f7a0:	2b00      	cmp	r3, #0
 800f7a2:	d02b      	beq.n	800f7fc <lwip_netconn_do_writemore+0x294>
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	6a1b      	ldr	r3, [r3, #32]
 800f7a8:	699a      	ldr	r2, [r3, #24]
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	6a1b      	ldr	r3, [r3, #32]
 800f7ae:	695b      	ldr	r3, [r3, #20]
 800f7b0:	429a      	cmp	r2, r3
 800f7b2:	d223      	bcs.n	800f7fc <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7b8:	2b00      	cmp	r3, #0
 800f7ba:	d005      	beq.n	800f7c8 <lwip_netconn_do_writemore+0x260>
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7c0:	2200      	movs	r2, #0
 800f7c2:	2103      	movs	r1, #3
 800f7c4:	6878      	ldr	r0, [r7, #4]
 800f7c6:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	7f1b      	ldrb	r3, [r3, #28]
 800f7cc:	f043 0310 	orr.w	r3, r3, #16
 800f7d0:	b2da      	uxtb	r2, r3
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	771a      	strb	r2, [r3, #28]
 800f7d6:	e028      	b.n	800f82a <lwip_netconn_do_writemore+0x2c2>
 800f7d8:	080235f0 	.word	0x080235f0
 800f7dc:	08023748 	.word	0x08023748
 800f7e0:	08023634 	.word	0x08023634
 800f7e4:	08023a50 	.word	0x08023a50
 800f7e8:	08023758 	.word	0x08023758
 800f7ec:	08023a70 	.word	0x08023a70
 800f7f0:	08023a88 	.word	0x08023a88
 800f7f4:	08023ac8 	.word	0x08023ac8
 800f7f8:	08023af0 	.word	0x08023af0
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	685b      	ldr	r3, [r3, #4]
 800f800:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800f804:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800f808:	d305      	bcc.n	800f816 <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 800f80a:	687b      	ldr	r3, [r7, #4]
 800f80c:	685b      	ldr	r3, [r3, #4]
 800f80e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800f812:	2b04      	cmp	r3, #4
 800f814:	d909      	bls.n	800f82a <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f81a:	2b00      	cmp	r3, #0
 800f81c:	d005      	beq.n	800f82a <lwip_netconn_do_writemore+0x2c2>
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f822:	2200      	movs	r2, #0
 800f824:	2103      	movs	r1, #3
 800f826:	6878      	ldr	r0, [r7, #4]
 800f828:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 800f82a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800f82e:	2b00      	cmp	r3, #0
 800f830:	d11d      	bne.n	800f86e <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	6a1b      	ldr	r3, [r3, #32]
 800f836:	699a      	ldr	r2, [r3, #24]
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	6a1b      	ldr	r3, [r3, #32]
 800f83c:	695b      	ldr	r3, [r3, #20]
 800f83e:	429a      	cmp	r2, r3
 800f840:	d002      	beq.n	800f848 <lwip_netconn_do_writemore+0x2e0>
 800f842:	7e3b      	ldrb	r3, [r7, #24]
 800f844:	2b00      	cmp	r3, #0
 800f846:	d001      	beq.n	800f84c <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 800f848:	2301      	movs	r3, #1
 800f84a:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	685b      	ldr	r3, [r3, #4]
 800f850:	4618      	mov	r0, r3
 800f852:	f008 fe8d 	bl	8018570 <tcp_output>
 800f856:	4603      	mov	r3, r0
 800f858:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 800f85a:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800f85e:	f113 0f04 	cmn.w	r3, #4
 800f862:	d12c      	bne.n	800f8be <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800f864:	7b3b      	ldrb	r3, [r7, #12]
 800f866:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800f868:	2301      	movs	r3, #1
 800f86a:	76fb      	strb	r3, [r7, #27]
 800f86c:	e027      	b.n	800f8be <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 800f86e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800f872:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f876:	d120      	bne.n	800f8ba <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	685b      	ldr	r3, [r3, #4]
 800f87c:	4618      	mov	r0, r3
 800f87e:	f008 fe77 	bl	8018570 <tcp_output>
 800f882:	4603      	mov	r3, r0
 800f884:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 800f886:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800f88a:	f113 0f04 	cmn.w	r3, #4
 800f88e:	d104      	bne.n	800f89a <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800f890:	7b7b      	ldrb	r3, [r7, #13]
 800f892:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800f894:	2301      	movs	r3, #1
 800f896:	76fb      	strb	r3, [r7, #27]
 800f898:	e011      	b.n	800f8be <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 800f89a:	7e3b      	ldrb	r3, [r7, #24]
 800f89c:	2b00      	cmp	r3, #0
 800f89e:	d00e      	beq.n	800f8be <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	6a1b      	ldr	r3, [r3, #32]
 800f8a4:	699b      	ldr	r3, [r3, #24]
 800f8a6:	2b00      	cmp	r3, #0
 800f8a8:	d102      	bne.n	800f8b0 <lwip_netconn_do_writemore+0x348>
 800f8aa:	f06f 0306 	mvn.w	r3, #6
 800f8ae:	e000      	b.n	800f8b2 <lwip_netconn_do_writemore+0x34a>
 800f8b0:	2300      	movs	r3, #0
 800f8b2:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800f8b4:	2301      	movs	r3, #1
 800f8b6:	76fb      	strb	r3, [r7, #27]
 800f8b8:	e001      	b.n	800f8be <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 800f8ba:	2301      	movs	r3, #1
 800f8bc:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 800f8be:	7efb      	ldrb	r3, [r7, #27]
 800f8c0:	2b00      	cmp	r3, #0
 800f8c2:	d015      	beq.n	800f8f0 <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	6a1b      	ldr	r3, [r3, #32]
 800f8c8:	681b      	ldr	r3, [r3, #0]
 800f8ca:	330c      	adds	r3, #12
 800f8cc:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	6a1b      	ldr	r3, [r3, #32]
 800f8d2:	7ffa      	ldrb	r2, [r7, #31]
 800f8d4:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	2200      	movs	r2, #0
 800f8da:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	2200      	movs	r2, #0
 800f8e0:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800f8e2:	78fb      	ldrb	r3, [r7, #3]
 800f8e4:	2b00      	cmp	r3, #0
 800f8e6:	d006      	beq.n	800f8f6 <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 800f8e8:	68b8      	ldr	r0, [r7, #8]
 800f8ea:	f00e ff4b 	bl	801e784 <sys_sem_signal>
 800f8ee:	e002      	b.n	800f8f6 <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 800f8f0:	f04f 33ff 	mov.w	r3, #4294967295
 800f8f4:	e000      	b.n	800f8f8 <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 800f8f6:	2300      	movs	r3, #0
}
 800f8f8:	4618      	mov	r0, r3
 800f8fa:	3720      	adds	r7, #32
 800f8fc:	46bd      	mov	sp, r7
 800f8fe:	bd80      	pop	{r7, pc}

0800f900 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 800f900:	b580      	push	{r7, lr}
 800f902:	b084      	sub	sp, #16
 800f904:	af00      	add	r7, sp, #0
 800f906:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800f90c:	68bb      	ldr	r3, [r7, #8]
 800f90e:	681b      	ldr	r3, [r3, #0]
 800f910:	4618      	mov	r0, r3
 800f912:	f7fe fccf 	bl	800e2b4 <netconn_err>
 800f916:	4603      	mov	r3, r0
 800f918:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800f91a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f91e:	2b00      	cmp	r3, #0
 800f920:	d166      	bne.n	800f9f0 <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800f922:	68bb      	ldr	r3, [r7, #8]
 800f924:	681b      	ldr	r3, [r3, #0]
 800f926:	781b      	ldrb	r3, [r3, #0]
 800f928:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f92c:	2b10      	cmp	r3, #16
 800f92e:	d15d      	bne.n	800f9ec <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 800f930:	68bb      	ldr	r3, [r7, #8]
 800f932:	681b      	ldr	r3, [r3, #0]
 800f934:	785b      	ldrb	r3, [r3, #1]
 800f936:	2b00      	cmp	r3, #0
 800f938:	d002      	beq.n	800f940 <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 800f93a:	23fb      	movs	r3, #251	; 0xfb
 800f93c:	73fb      	strb	r3, [r7, #15]
 800f93e:	e057      	b.n	800f9f0 <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 800f940:	68bb      	ldr	r3, [r7, #8]
 800f942:	681b      	ldr	r3, [r3, #0]
 800f944:	685b      	ldr	r3, [r3, #4]
 800f946:	2b00      	cmp	r3, #0
 800f948:	d04d      	beq.n	800f9e6 <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 800f94a:	68bb      	ldr	r3, [r7, #8]
 800f94c:	681b      	ldr	r3, [r3, #0]
 800f94e:	2201      	movs	r2, #1
 800f950:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800f952:	68bb      	ldr	r3, [r7, #8]
 800f954:	681b      	ldr	r3, [r3, #0]
 800f956:	6a1b      	ldr	r3, [r3, #32]
 800f958:	2b00      	cmp	r3, #0
 800f95a:	d006      	beq.n	800f96a <lwip_netconn_do_write+0x6a>
 800f95c:	4b28      	ldr	r3, [pc, #160]	; (800fa00 <lwip_netconn_do_write+0x100>)
 800f95e:	f240 7223 	movw	r2, #1827	; 0x723
 800f962:	4928      	ldr	r1, [pc, #160]	; (800fa04 <lwip_netconn_do_write+0x104>)
 800f964:	4828      	ldr	r0, [pc, #160]	; (800fa08 <lwip_netconn_do_write+0x108>)
 800f966:	f010 fd73 	bl	8020450 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 800f96a:	68bb      	ldr	r3, [r7, #8]
 800f96c:	695b      	ldr	r3, [r3, #20]
 800f96e:	2b00      	cmp	r3, #0
 800f970:	d106      	bne.n	800f980 <lwip_netconn_do_write+0x80>
 800f972:	4b23      	ldr	r3, [pc, #140]	; (800fa00 <lwip_netconn_do_write+0x100>)
 800f974:	f240 7224 	movw	r2, #1828	; 0x724
 800f978:	4924      	ldr	r1, [pc, #144]	; (800fa0c <lwip_netconn_do_write+0x10c>)
 800f97a:	4823      	ldr	r0, [pc, #140]	; (800fa08 <lwip_netconn_do_write+0x108>)
 800f97c:	f010 fd68 	bl	8020450 <iprintf>
        msg->conn->current_msg = msg;
 800f980:	68bb      	ldr	r3, [r7, #8]
 800f982:	681b      	ldr	r3, [r3, #0]
 800f984:	68ba      	ldr	r2, [r7, #8]
 800f986:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 800f988:	68bb      	ldr	r3, [r7, #8]
 800f98a:	681b      	ldr	r3, [r3, #0]
 800f98c:	2100      	movs	r1, #0
 800f98e:	4618      	mov	r0, r3
 800f990:	f7ff fdea 	bl	800f568 <lwip_netconn_do_writemore>
 800f994:	4603      	mov	r3, r0
 800f996:	2b00      	cmp	r3, #0
 800f998:	d02e      	beq.n	800f9f8 <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 800f99a:	68bb      	ldr	r3, [r7, #8]
 800f99c:	681b      	ldr	r3, [r3, #0]
 800f99e:	785b      	ldrb	r3, [r3, #1]
 800f9a0:	2b01      	cmp	r3, #1
 800f9a2:	d006      	beq.n	800f9b2 <lwip_netconn_do_write+0xb2>
 800f9a4:	4b16      	ldr	r3, [pc, #88]	; (800fa00 <lwip_netconn_do_write+0x100>)
 800f9a6:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 800f9aa:	4919      	ldr	r1, [pc, #100]	; (800fa10 <lwip_netconn_do_write+0x110>)
 800f9ac:	4816      	ldr	r0, [pc, #88]	; (800fa08 <lwip_netconn_do_write+0x108>)
 800f9ae:	f010 fd4f 	bl	8020450 <iprintf>
          UNLOCK_TCPIP_CORE();
 800f9b2:	4818      	ldr	r0, [pc, #96]	; (800fa14 <lwip_netconn_do_write+0x114>)
 800f9b4:	f00e ff57 	bl	801e866 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800f9b8:	68bb      	ldr	r3, [r7, #8]
 800f9ba:	681b      	ldr	r3, [r3, #0]
 800f9bc:	330c      	adds	r3, #12
 800f9be:	2100      	movs	r1, #0
 800f9c0:	4618      	mov	r0, r3
 800f9c2:	f00e feae 	bl	801e722 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 800f9c6:	4813      	ldr	r0, [pc, #76]	; (800fa14 <lwip_netconn_do_write+0x114>)
 800f9c8:	f00e ff3e 	bl	801e848 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 800f9cc:	68bb      	ldr	r3, [r7, #8]
 800f9ce:	681b      	ldr	r3, [r3, #0]
 800f9d0:	785b      	ldrb	r3, [r3, #1]
 800f9d2:	2b01      	cmp	r3, #1
 800f9d4:	d110      	bne.n	800f9f8 <lwip_netconn_do_write+0xf8>
 800f9d6:	4b0a      	ldr	r3, [pc, #40]	; (800fa00 <lwip_netconn_do_write+0x100>)
 800f9d8:	f240 722c 	movw	r2, #1836	; 0x72c
 800f9dc:	490c      	ldr	r1, [pc, #48]	; (800fa10 <lwip_netconn_do_write+0x110>)
 800f9de:	480a      	ldr	r0, [pc, #40]	; (800fa08 <lwip_netconn_do_write+0x108>)
 800f9e0:	f010 fd36 	bl	8020450 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 800f9e4:	e008      	b.n	800f9f8 <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 800f9e6:	23f5      	movs	r3, #245	; 0xf5
 800f9e8:	73fb      	strb	r3, [r7, #15]
 800f9ea:	e001      	b.n	800f9f0 <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 800f9ec:	23fa      	movs	r3, #250	; 0xfa
 800f9ee:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 800f9f0:	68bb      	ldr	r3, [r7, #8]
 800f9f2:	7bfa      	ldrb	r2, [r7, #15]
 800f9f4:	711a      	strb	r2, [r3, #4]
 800f9f6:	e000      	b.n	800f9fa <lwip_netconn_do_write+0xfa>
        return;
 800f9f8:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 800f9fa:	3710      	adds	r7, #16
 800f9fc:	46bd      	mov	sp, r7
 800f9fe:	bd80      	pop	{r7, pc}
 800fa00:	080235f0 	.word	0x080235f0
 800fa04:	08023994 	.word	0x08023994
 800fa08:	08023634 	.word	0x08023634
 800fa0c:	08023b1c 	.word	0x08023b1c
 800fa10:	080239b0 	.word	0x080239b0
 800fa14:	24004cb4 	.word	0x24004cb4

0800fa18 <lwip_netconn_do_getaddr>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_getaddr(void *m)
{
 800fa18:	b580      	push	{r7, lr}
 800fa1a:	b084      	sub	sp, #16
 800fa1c:	af00      	add	r7, sp, #0
 800fa1e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	60fb      	str	r3, [r7, #12]

  if (msg->conn->pcb.ip != NULL) {
 800fa24:	68fb      	ldr	r3, [r7, #12]
 800fa26:	681b      	ldr	r3, [r3, #0]
 800fa28:	685b      	ldr	r3, [r3, #4]
 800fa2a:	2b00      	cmp	r3, #0
 800fa2c:	d06b      	beq.n	800fb06 <lwip_netconn_do_getaddr+0xee>
    if (msg->msg.ad.local) {
 800fa2e:	68fb      	ldr	r3, [r7, #12]
 800fa30:	7c1b      	ldrb	r3, [r3, #16]
 800fa32:	2b00      	cmp	r3, #0
 800fa34:	d007      	beq.n	800fa46 <lwip_netconn_do_getaddr+0x2e>
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
 800fa36:	68fb      	ldr	r3, [r7, #12]
 800fa38:	681b      	ldr	r3, [r3, #0]
 800fa3a:	685a      	ldr	r2, [r3, #4]
 800fa3c:	68fb      	ldr	r3, [r7, #12]
 800fa3e:	689b      	ldr	r3, [r3, #8]
 800fa40:	6812      	ldr	r2, [r2, #0]
 800fa42:	601a      	str	r2, [r3, #0]
 800fa44:	e006      	b.n	800fa54 <lwip_netconn_do_getaddr+0x3c>
                   msg->conn->pcb.ip->local_ip);
    } else {
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
 800fa46:	68fb      	ldr	r3, [r7, #12]
 800fa48:	681b      	ldr	r3, [r3, #0]
 800fa4a:	685a      	ldr	r2, [r3, #4]
 800fa4c:	68fb      	ldr	r3, [r7, #12]
 800fa4e:	689b      	ldr	r3, [r3, #8]
 800fa50:	6852      	ldr	r2, [r2, #4]
 800fa52:	601a      	str	r2, [r3, #0]
                   msg->conn->pcb.ip->remote_ip);
    }

    msg->err = ERR_OK;
 800fa54:	68fb      	ldr	r3, [r7, #12]
 800fa56:	2200      	movs	r2, #0
 800fa58:	711a      	strb	r2, [r3, #4]
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800fa5a:	68fb      	ldr	r3, [r7, #12]
 800fa5c:	681b      	ldr	r3, [r3, #0]
 800fa5e:	781b      	ldrb	r3, [r3, #0]
 800fa60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800fa64:	2b10      	cmp	r3, #16
 800fa66:	d021      	beq.n	800faac <lwip_netconn_do_getaddr+0x94>
 800fa68:	2b20      	cmp	r3, #32
 800fa6a:	d144      	bne.n	800faf6 <lwip_netconn_do_getaddr+0xde>
        }
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        if (msg->msg.ad.local) {
 800fa6c:	68fb      	ldr	r3, [r7, #12]
 800fa6e:	7c1b      	ldrb	r3, [r3, #16]
 800fa70:	2b00      	cmp	r3, #0
 800fa72:	d007      	beq.n	800fa84 <lwip_netconn_do_getaddr+0x6c>
          API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->local_port;
 800fa74:	68fb      	ldr	r3, [r7, #12]
 800fa76:	681b      	ldr	r3, [r3, #0]
 800fa78:	685a      	ldr	r2, [r3, #4]
 800fa7a:	68fb      	ldr	r3, [r7, #12]
 800fa7c:	68db      	ldr	r3, [r3, #12]
 800fa7e:	8a52      	ldrh	r2, [r2, #18]
 800fa80:	801a      	strh	r2, [r3, #0]
            msg->err = ERR_CONN;
          } else {
            API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->remote_port;
          }
        }
        break;
 800fa82:	e044      	b.n	800fb0e <lwip_netconn_do_getaddr+0xf6>
          if ((msg->conn->pcb.udp->flags & UDP_FLAGS_CONNECTED) == 0) {
 800fa84:	68fb      	ldr	r3, [r7, #12]
 800fa86:	681b      	ldr	r3, [r3, #0]
 800fa88:	685b      	ldr	r3, [r3, #4]
 800fa8a:	7c1b      	ldrb	r3, [r3, #16]
 800fa8c:	f003 0304 	and.w	r3, r3, #4
 800fa90:	2b00      	cmp	r3, #0
 800fa92:	d103      	bne.n	800fa9c <lwip_netconn_do_getaddr+0x84>
            msg->err = ERR_CONN;
 800fa94:	68fb      	ldr	r3, [r7, #12]
 800fa96:	22f5      	movs	r2, #245	; 0xf5
 800fa98:	711a      	strb	r2, [r3, #4]
        break;
 800fa9a:	e038      	b.n	800fb0e <lwip_netconn_do_getaddr+0xf6>
            API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->remote_port;
 800fa9c:	68fb      	ldr	r3, [r7, #12]
 800fa9e:	681b      	ldr	r3, [r3, #0]
 800faa0:	685a      	ldr	r2, [r3, #4]
 800faa2:	68fb      	ldr	r3, [r7, #12]
 800faa4:	68db      	ldr	r3, [r3, #12]
 800faa6:	8a92      	ldrh	r2, [r2, #20]
 800faa8:	801a      	strh	r2, [r3, #0]
        break;
 800faaa:	e030      	b.n	800fb0e <lwip_netconn_do_getaddr+0xf6>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        if ((msg->msg.ad.local == 0) &&
 800faac:	68fb      	ldr	r3, [r7, #12]
 800faae:	7c1b      	ldrb	r3, [r3, #16]
 800fab0:	2b00      	cmp	r3, #0
 800fab2:	d10f      	bne.n	800fad4 <lwip_netconn_do_getaddr+0xbc>
            ((msg->conn->pcb.tcp->state == CLOSED) || (msg->conn->pcb.tcp->state == LISTEN))) {
 800fab4:	68fb      	ldr	r3, [r7, #12]
 800fab6:	681b      	ldr	r3, [r3, #0]
 800fab8:	685b      	ldr	r3, [r3, #4]
 800faba:	7d1b      	ldrb	r3, [r3, #20]
        if ((msg->msg.ad.local == 0) &&
 800fabc:	2b00      	cmp	r3, #0
 800fabe:	d005      	beq.n	800facc <lwip_netconn_do_getaddr+0xb4>
            ((msg->conn->pcb.tcp->state == CLOSED) || (msg->conn->pcb.tcp->state == LISTEN))) {
 800fac0:	68fb      	ldr	r3, [r7, #12]
 800fac2:	681b      	ldr	r3, [r3, #0]
 800fac4:	685b      	ldr	r3, [r3, #4]
 800fac6:	7d1b      	ldrb	r3, [r3, #20]
 800fac8:	2b01      	cmp	r3, #1
 800faca:	d103      	bne.n	800fad4 <lwip_netconn_do_getaddr+0xbc>
          /* pcb is not connected and remote name is requested */
          msg->err = ERR_CONN;
 800facc:	68fb      	ldr	r3, [r7, #12]
 800face:	22f5      	movs	r2, #245	; 0xf5
 800fad0:	711a      	strb	r2, [r3, #4]
        } else {
          API_EXPR_DEREF(msg->msg.ad.port) = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
        }
        break;
 800fad2:	e01c      	b.n	800fb0e <lwip_netconn_do_getaddr+0xf6>
          API_EXPR_DEREF(msg->msg.ad.port) = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
 800fad4:	68fb      	ldr	r3, [r7, #12]
 800fad6:	7c1b      	ldrb	r3, [r3, #16]
 800fad8:	2b00      	cmp	r3, #0
 800fada:	d004      	beq.n	800fae6 <lwip_netconn_do_getaddr+0xce>
 800fadc:	68fb      	ldr	r3, [r7, #12]
 800fade:	681b      	ldr	r3, [r3, #0]
 800fae0:	685b      	ldr	r3, [r3, #4]
 800fae2:	8adb      	ldrh	r3, [r3, #22]
 800fae4:	e003      	b.n	800faee <lwip_netconn_do_getaddr+0xd6>
 800fae6:	68fb      	ldr	r3, [r7, #12]
 800fae8:	681b      	ldr	r3, [r3, #0]
 800faea:	685b      	ldr	r3, [r3, #4]
 800faec:	8b1b      	ldrh	r3, [r3, #24]
 800faee:	68fa      	ldr	r2, [r7, #12]
 800faf0:	68d2      	ldr	r2, [r2, #12]
 800faf2:	8013      	strh	r3, [r2, #0]
        break;
 800faf4:	e00b      	b.n	800fb0e <lwip_netconn_do_getaddr+0xf6>
#endif /* LWIP_TCP */
      default:
        LWIP_ASSERT("invalid netconn_type", 0);
 800faf6:	4b08      	ldr	r3, [pc, #32]	; (800fb18 <lwip_netconn_do_getaddr+0x100>)
 800faf8:	f240 727d 	movw	r2, #1917	; 0x77d
 800fafc:	4907      	ldr	r1, [pc, #28]	; (800fb1c <lwip_netconn_do_getaddr+0x104>)
 800fafe:	4808      	ldr	r0, [pc, #32]	; (800fb20 <lwip_netconn_do_getaddr+0x108>)
 800fb00:	f010 fca6 	bl	8020450 <iprintf>
        break;
 800fb04:	e003      	b.n	800fb0e <lwip_netconn_do_getaddr+0xf6>
    }
  } else {
    msg->err = ERR_CONN;
 800fb06:	68fb      	ldr	r3, [r7, #12]
 800fb08:	22f5      	movs	r2, #245	; 0xf5
 800fb0a:	711a      	strb	r2, [r3, #4]
  }
  TCPIP_APIMSG_ACK(msg);
}
 800fb0c:	bf00      	nop
 800fb0e:	bf00      	nop
 800fb10:	3710      	adds	r7, #16
 800fb12:	46bd      	mov	sp, r7
 800fb14:	bd80      	pop	{r7, pc}
 800fb16:	bf00      	nop
 800fb18:	080235f0 	.word	0x080235f0
 800fb1c:	08023b30 	.word	0x08023b30
 800fb20:	08023634 	.word	0x08023634

0800fb24 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 800fb24:	b580      	push	{r7, lr}
 800fb26:	b084      	sub	sp, #16
 800fb28:	af00      	add	r7, sp, #0
 800fb2a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 800fb30:	68fb      	ldr	r3, [r7, #12]
 800fb32:	681b      	ldr	r3, [r3, #0]
 800fb34:	785b      	ldrb	r3, [r3, #1]
 800fb36:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 800fb38:	68fb      	ldr	r3, [r7, #12]
 800fb3a:	681b      	ldr	r3, [r3, #0]
 800fb3c:	685b      	ldr	r3, [r3, #4]
 800fb3e:	2b00      	cmp	r3, #0
 800fb40:	d069      	beq.n	800fc16 <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800fb42:	68fb      	ldr	r3, [r7, #12]
 800fb44:	681b      	ldr	r3, [r3, #0]
 800fb46:	781b      	ldrb	r3, [r3, #0]
 800fb48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 800fb4c:	2b10      	cmp	r3, #16
 800fb4e:	d162      	bne.n	800fc16 <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800fb50:	68fb      	ldr	r3, [r7, #12]
 800fb52:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800fb54:	2b03      	cmp	r3, #3
 800fb56:	d002      	beq.n	800fb5e <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800fb58:	7afb      	ldrb	r3, [r7, #11]
 800fb5a:	2b02      	cmp	r3, #2
 800fb5c:	d05b      	beq.n	800fc16 <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 800fb5e:	7afb      	ldrb	r3, [r7, #11]
 800fb60:	2b03      	cmp	r3, #3
 800fb62:	d103      	bne.n	800fb6c <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 800fb64:	68fb      	ldr	r3, [r7, #12]
 800fb66:	22f5      	movs	r2, #245	; 0xf5
 800fb68:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800fb6a:	e059      	b.n	800fc20 <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 800fb6c:	7afb      	ldrb	r3, [r7, #11]
 800fb6e:	2b01      	cmp	r3, #1
 800fb70:	d103      	bne.n	800fb7a <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 800fb72:	68fb      	ldr	r3, [r7, #12]
 800fb74:	22fb      	movs	r2, #251	; 0xfb
 800fb76:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800fb78:	e052      	b.n	800fc20 <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 800fb7a:	68fb      	ldr	r3, [r7, #12]
 800fb7c:	7a1b      	ldrb	r3, [r3, #8]
 800fb7e:	f003 0301 	and.w	r3, r3, #1
 800fb82:	2b00      	cmp	r3, #0
 800fb84:	d004      	beq.n	800fb90 <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 800fb86:	68fb      	ldr	r3, [r7, #12]
 800fb88:	681b      	ldr	r3, [r3, #0]
 800fb8a:	4618      	mov	r0, r3
 800fb8c:	f7ff f8cc 	bl	800ed28 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800fb90:	68fb      	ldr	r3, [r7, #12]
 800fb92:	681b      	ldr	r3, [r3, #0]
 800fb94:	6a1b      	ldr	r3, [r3, #32]
 800fb96:	2b00      	cmp	r3, #0
 800fb98:	d006      	beq.n	800fba8 <lwip_netconn_do_close+0x84>
 800fb9a:	4b23      	ldr	r3, [pc, #140]	; (800fc28 <lwip_netconn_do_close+0x104>)
 800fb9c:	f240 72bd 	movw	r2, #1981	; 0x7bd
 800fba0:	4922      	ldr	r1, [pc, #136]	; (800fc2c <lwip_netconn_do_close+0x108>)
 800fba2:	4823      	ldr	r0, [pc, #140]	; (800fc30 <lwip_netconn_do_close+0x10c>)
 800fba4:	f010 fc54 	bl	8020450 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 800fba8:	68fb      	ldr	r3, [r7, #12]
 800fbaa:	681b      	ldr	r3, [r3, #0]
 800fbac:	2204      	movs	r2, #4
 800fbae:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 800fbb0:	68fb      	ldr	r3, [r7, #12]
 800fbb2:	681b      	ldr	r3, [r3, #0]
 800fbb4:	68fa      	ldr	r2, [r7, #12]
 800fbb6:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800fbb8:	68fb      	ldr	r3, [r7, #12]
 800fbba:	681b      	ldr	r3, [r3, #0]
 800fbbc:	2100      	movs	r1, #0
 800fbbe:	4618      	mov	r0, r3
 800fbc0:	f7ff f930 	bl	800ee24 <lwip_netconn_do_close_internal>
 800fbc4:	4603      	mov	r3, r0
 800fbc6:	2b00      	cmp	r3, #0
 800fbc8:	d029      	beq.n	800fc1e <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800fbca:	68fb      	ldr	r3, [r7, #12]
 800fbcc:	681b      	ldr	r3, [r3, #0]
 800fbce:	785b      	ldrb	r3, [r3, #1]
 800fbd0:	2b04      	cmp	r3, #4
 800fbd2:	d006      	beq.n	800fbe2 <lwip_netconn_do_close+0xbe>
 800fbd4:	4b14      	ldr	r3, [pc, #80]	; (800fc28 <lwip_netconn_do_close+0x104>)
 800fbd6:	f240 72c2 	movw	r2, #1986	; 0x7c2
 800fbda:	4916      	ldr	r1, [pc, #88]	; (800fc34 <lwip_netconn_do_close+0x110>)
 800fbdc:	4814      	ldr	r0, [pc, #80]	; (800fc30 <lwip_netconn_do_close+0x10c>)
 800fbde:	f010 fc37 	bl	8020450 <iprintf>
        UNLOCK_TCPIP_CORE();
 800fbe2:	4815      	ldr	r0, [pc, #84]	; (800fc38 <lwip_netconn_do_close+0x114>)
 800fbe4:	f00e fe3f 	bl	801e866 <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800fbe8:	68fb      	ldr	r3, [r7, #12]
 800fbea:	681b      	ldr	r3, [r3, #0]
 800fbec:	330c      	adds	r3, #12
 800fbee:	2100      	movs	r1, #0
 800fbf0:	4618      	mov	r0, r3
 800fbf2:	f00e fd96 	bl	801e722 <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 800fbf6:	4810      	ldr	r0, [pc, #64]	; (800fc38 <lwip_netconn_do_close+0x114>)
 800fbf8:	f00e fe26 	bl	801e848 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800fbfc:	68fb      	ldr	r3, [r7, #12]
 800fbfe:	681b      	ldr	r3, [r3, #0]
 800fc00:	785b      	ldrb	r3, [r3, #1]
 800fc02:	2b00      	cmp	r3, #0
 800fc04:	d00b      	beq.n	800fc1e <lwip_netconn_do_close+0xfa>
 800fc06:	4b08      	ldr	r3, [pc, #32]	; (800fc28 <lwip_netconn_do_close+0x104>)
 800fc08:	f240 72c6 	movw	r2, #1990	; 0x7c6
 800fc0c:	4909      	ldr	r1, [pc, #36]	; (800fc34 <lwip_netconn_do_close+0x110>)
 800fc0e:	4808      	ldr	r0, [pc, #32]	; (800fc30 <lwip_netconn_do_close+0x10c>)
 800fc10:	f010 fc1e 	bl	8020450 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 800fc14:	e003      	b.n	800fc1e <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 800fc16:	68fb      	ldr	r3, [r7, #12]
 800fc18:	22f5      	movs	r2, #245	; 0xf5
 800fc1a:	711a      	strb	r2, [r3, #4]
 800fc1c:	e000      	b.n	800fc20 <lwip_netconn_do_close+0xfc>
      return;
 800fc1e:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 800fc20:	3710      	adds	r7, #16
 800fc22:	46bd      	mov	sp, r7
 800fc24:	bd80      	pop	{r7, pc}
 800fc26:	bf00      	nop
 800fc28:	080235f0 	.word	0x080235f0
 800fc2c:	08023994 	.word	0x08023994
 800fc30:	08023634 	.word	0x08023634
 800fc34:	080239b0 	.word	0x080239b0
 800fc38:	24004cb4 	.word	0x24004cb4

0800fc3c <err_to_errno>:
  EIO            /* ERR_ARG        -16     Illegal argument.        */
};

int
err_to_errno(err_t err)
{
 800fc3c:	b480      	push	{r7}
 800fc3e:	b083      	sub	sp, #12
 800fc40:	af00      	add	r7, sp, #0
 800fc42:	4603      	mov	r3, r0
 800fc44:	71fb      	strb	r3, [r7, #7]
  if ((err > 0) || (-err >= (err_t)LWIP_ARRAYSIZE(err_to_errno_table))) {
 800fc46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fc4a:	2b00      	cmp	r3, #0
 800fc4c:	dc04      	bgt.n	800fc58 <err_to_errno+0x1c>
 800fc4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fc52:	f113 0f10 	cmn.w	r3, #16
 800fc56:	da01      	bge.n	800fc5c <err_to_errno+0x20>
    return EIO;
 800fc58:	2305      	movs	r3, #5
 800fc5a:	e005      	b.n	800fc68 <err_to_errno+0x2c>
  }
  return err_to_errno_table[-err];
 800fc5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fc60:	425b      	negs	r3, r3
 800fc62:	4a04      	ldr	r2, [pc, #16]	; (800fc74 <err_to_errno+0x38>)
 800fc64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 800fc68:	4618      	mov	r0, r3
 800fc6a:	370c      	adds	r7, #12
 800fc6c:	46bd      	mov	sp, r7
 800fc6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc72:	4770      	bx	lr
 800fc74:	08026f20 	.word	0x08026f20

0800fc78 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 800fc78:	b580      	push	{r7, lr}
 800fc7a:	b082      	sub	sp, #8
 800fc7c:	af00      	add	r7, sp, #0
 800fc7e:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	2b00      	cmp	r3, #0
 800fc84:	d013      	beq.n	800fcae <netbuf_delete+0x36>
    if (buf->p != NULL) {
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	681b      	ldr	r3, [r3, #0]
 800fc8a:	2b00      	cmp	r3, #0
 800fc8c:	d00b      	beq.n	800fca6 <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	681b      	ldr	r3, [r3, #0]
 800fc92:	4618      	mov	r0, r3
 800fc94:	f003 f8b2 	bl	8012dfc <pbuf_free>
      buf->p = buf->ptr = NULL;
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	2200      	movs	r2, #0
 800fc9c:	605a      	str	r2, [r3, #4]
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	685a      	ldr	r2, [r3, #4]
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 800fca6:	6879      	ldr	r1, [r7, #4]
 800fca8:	2006      	movs	r0, #6
 800fcaa:	f002 f9c5 	bl	8012038 <memp_free>
  }
}
 800fcae:	bf00      	nop
 800fcb0:	3708      	adds	r7, #8
 800fcb2:	46bd      	mov	sp, r7
 800fcb4:	bd80      	pop	{r7, pc}
	...

0800fcb8 <netbuf_free>:
 *
 * @param buf pointer to the netbuf which contains the packet buffer to free
 */
void
netbuf_free(struct netbuf *buf)
{
 800fcb8:	b580      	push	{r7, lr}
 800fcba:	b082      	sub	sp, #8
 800fcbc:	af00      	add	r7, sp, #0
 800fcbe:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_free: invalid buf", (buf != NULL), return;);
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	2b00      	cmp	r3, #0
 800fcc4:	d106      	bne.n	800fcd4 <netbuf_free+0x1c>
 800fcc6:	4b0d      	ldr	r3, [pc, #52]	; (800fcfc <netbuf_free+0x44>)
 800fcc8:	2281      	movs	r2, #129	; 0x81
 800fcca:	490d      	ldr	r1, [pc, #52]	; (800fd00 <netbuf_free+0x48>)
 800fccc:	480d      	ldr	r0, [pc, #52]	; (800fd04 <netbuf_free+0x4c>)
 800fcce:	f010 fbbf 	bl	8020450 <iprintf>
 800fcd2:	e00f      	b.n	800fcf4 <netbuf_free+0x3c>
  if (buf->p != NULL) {
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	681b      	ldr	r3, [r3, #0]
 800fcd8:	2b00      	cmp	r3, #0
 800fcda:	d004      	beq.n	800fce6 <netbuf_free+0x2e>
    pbuf_free(buf->p);
 800fcdc:	687b      	ldr	r3, [r7, #4]
 800fcde:	681b      	ldr	r3, [r3, #0]
 800fce0:	4618      	mov	r0, r3
 800fce2:	f003 f88b 	bl	8012dfc <pbuf_free>
  }
  buf->p = buf->ptr = NULL;
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	2200      	movs	r2, #0
 800fcea:	605a      	str	r2, [r3, #4]
 800fcec:	687b      	ldr	r3, [r7, #4]
 800fcee:	685a      	ldr	r2, [r3, #4]
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	601a      	str	r2, [r3, #0]
#if LWIP_CHECKSUM_ON_COPY
  buf->flags = 0;
  buf->toport_chksum = 0;
#endif /* LWIP_CHECKSUM_ON_COPY */
}
 800fcf4:	3708      	adds	r7, #8
 800fcf6:	46bd      	mov	sp, r7
 800fcf8:	bd80      	pop	{r7, pc}
 800fcfa:	bf00      	nop
 800fcfc:	08023b48 	.word	0x08023b48
 800fd00:	08023be4 	.word	0x08023be4
 800fd04:	08023b98 	.word	0x08023b98

0800fd08 <netbuf_ref>:
 * @return ERR_OK if data is referenced
 *         ERR_MEM if data couldn't be referenced due to lack of memory
 */
err_t
netbuf_ref(struct netbuf *buf, const void *dataptr, u16_t size)
{
 800fd08:	b580      	push	{r7, lr}
 800fd0a:	b084      	sub	sp, #16
 800fd0c:	af00      	add	r7, sp, #0
 800fd0e:	60f8      	str	r0, [r7, #12]
 800fd10:	60b9      	str	r1, [r7, #8]
 800fd12:	4613      	mov	r3, r2
 800fd14:	80fb      	strh	r3, [r7, #6]
  LWIP_ERROR("netbuf_ref: invalid buf", (buf != NULL), return ERR_ARG;);
 800fd16:	68fb      	ldr	r3, [r7, #12]
 800fd18:	2b00      	cmp	r3, #0
 800fd1a:	d108      	bne.n	800fd2e <netbuf_ref+0x26>
 800fd1c:	4b1c      	ldr	r3, [pc, #112]	; (800fd90 <netbuf_ref+0x88>)
 800fd1e:	2299      	movs	r2, #153	; 0x99
 800fd20:	491c      	ldr	r1, [pc, #112]	; (800fd94 <netbuf_ref+0x8c>)
 800fd22:	481d      	ldr	r0, [pc, #116]	; (800fd98 <netbuf_ref+0x90>)
 800fd24:	f010 fb94 	bl	8020450 <iprintf>
 800fd28:	f06f 030f 	mvn.w	r3, #15
 800fd2c:	e02b      	b.n	800fd86 <netbuf_ref+0x7e>
  if (buf->p != NULL) {
 800fd2e:	68fb      	ldr	r3, [r7, #12]
 800fd30:	681b      	ldr	r3, [r3, #0]
 800fd32:	2b00      	cmp	r3, #0
 800fd34:	d004      	beq.n	800fd40 <netbuf_ref+0x38>
    pbuf_free(buf->p);
 800fd36:	68fb      	ldr	r3, [r7, #12]
 800fd38:	681b      	ldr	r3, [r3, #0]
 800fd3a:	4618      	mov	r0, r3
 800fd3c:	f003 f85e 	bl	8012dfc <pbuf_free>
  }
  buf->p = pbuf_alloc(PBUF_TRANSPORT, 0, PBUF_REF);
 800fd40:	2241      	movs	r2, #65	; 0x41
 800fd42:	2100      	movs	r1, #0
 800fd44:	2036      	movs	r0, #54	; 0x36
 800fd46:	f002 fd43 	bl	80127d0 <pbuf_alloc>
 800fd4a:	4602      	mov	r2, r0
 800fd4c:	68fb      	ldr	r3, [r7, #12]
 800fd4e:	601a      	str	r2, [r3, #0]
  if (buf->p == NULL) {
 800fd50:	68fb      	ldr	r3, [r7, #12]
 800fd52:	681b      	ldr	r3, [r3, #0]
 800fd54:	2b00      	cmp	r3, #0
 800fd56:	d105      	bne.n	800fd64 <netbuf_ref+0x5c>
    buf->ptr = NULL;
 800fd58:	68fb      	ldr	r3, [r7, #12]
 800fd5a:	2200      	movs	r2, #0
 800fd5c:	605a      	str	r2, [r3, #4]
    return ERR_MEM;
 800fd5e:	f04f 33ff 	mov.w	r3, #4294967295
 800fd62:	e010      	b.n	800fd86 <netbuf_ref+0x7e>
  }
  ((struct pbuf_rom *)buf->p)->payload = dataptr;
 800fd64:	68fb      	ldr	r3, [r7, #12]
 800fd66:	681b      	ldr	r3, [r3, #0]
 800fd68:	68ba      	ldr	r2, [r7, #8]
 800fd6a:	605a      	str	r2, [r3, #4]
  buf->p->len = buf->p->tot_len = size;
 800fd6c:	68fb      	ldr	r3, [r7, #12]
 800fd6e:	681b      	ldr	r3, [r3, #0]
 800fd70:	88fa      	ldrh	r2, [r7, #6]
 800fd72:	811a      	strh	r2, [r3, #8]
 800fd74:	68fa      	ldr	r2, [r7, #12]
 800fd76:	6812      	ldr	r2, [r2, #0]
 800fd78:	891b      	ldrh	r3, [r3, #8]
 800fd7a:	8153      	strh	r3, [r2, #10]
  buf->ptr = buf->p;
 800fd7c:	68fb      	ldr	r3, [r7, #12]
 800fd7e:	681a      	ldr	r2, [r3, #0]
 800fd80:	68fb      	ldr	r3, [r7, #12]
 800fd82:	605a      	str	r2, [r3, #4]
  return ERR_OK;
 800fd84:	2300      	movs	r3, #0
}
 800fd86:	4618      	mov	r0, r3
 800fd88:	3710      	adds	r7, #16
 800fd8a:	46bd      	mov	sp, r7
 800fd8c:	bd80      	pop	{r7, pc}
 800fd8e:	bf00      	nop
 800fd90:	08023b48 	.word	0x08023b48
 800fd94:	08023c00 	.word	0x08023c00
 800fd98:	08023b98 	.word	0x08023b98

0800fd9c <tryget_socket_unconn_nouse>:
#endif /* LWIP_NETCONN_FULLDUPLEX */

/* Translate a socket 'int' into a pointer (only fails if the index is invalid) */
static struct lwip_sock *
tryget_socket_unconn_nouse(int fd)
{
 800fd9c:	b480      	push	{r7}
 800fd9e:	b085      	sub	sp, #20
 800fda0:	af00      	add	r7, sp, #0
 800fda2:	6078      	str	r0, [r7, #4]
  int s = fd - LWIP_SOCKET_OFFSET;
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	60fb      	str	r3, [r7, #12]
  if ((s < 0) || (s >= NUM_SOCKETS)) {
 800fda8:	68fb      	ldr	r3, [r7, #12]
 800fdaa:	2b00      	cmp	r3, #0
 800fdac:	db02      	blt.n	800fdb4 <tryget_socket_unconn_nouse+0x18>
 800fdae:	68fb      	ldr	r3, [r7, #12]
 800fdb0:	2b03      	cmp	r3, #3
 800fdb2:	dd01      	ble.n	800fdb8 <tryget_socket_unconn_nouse+0x1c>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("tryget_socket_unconn(%d): invalid\n", fd));
    return NULL;
 800fdb4:	2300      	movs	r3, #0
 800fdb6:	e003      	b.n	800fdc0 <tryget_socket_unconn_nouse+0x24>
  }
  return &sockets[s];
 800fdb8:	68fb      	ldr	r3, [r7, #12]
 800fdba:	011b      	lsls	r3, r3, #4
 800fdbc:	4a03      	ldr	r2, [pc, #12]	; (800fdcc <tryget_socket_unconn_nouse+0x30>)
 800fdbe:	4413      	add	r3, r2
}
 800fdc0:	4618      	mov	r0, r3
 800fdc2:	3714      	adds	r7, #20
 800fdc4:	46bd      	mov	sp, r7
 800fdc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdca:	4770      	bx	lr
 800fdcc:	24004c64 	.word	0x24004c64

0800fdd0 <tryget_socket_unconn>:
}

/* Translate a socket 'int' into a pointer (only fails if the index is invalid) */
static struct lwip_sock *
tryget_socket_unconn(int fd)
{
 800fdd0:	b580      	push	{r7, lr}
 800fdd2:	b084      	sub	sp, #16
 800fdd4:	af00      	add	r7, sp, #0
 800fdd6:	6078      	str	r0, [r7, #4]
  struct lwip_sock *ret = tryget_socket_unconn_nouse(fd);
 800fdd8:	6878      	ldr	r0, [r7, #4]
 800fdda:	f7ff ffdf 	bl	800fd9c <tryget_socket_unconn_nouse>
 800fdde:	60f8      	str	r0, [r7, #12]
  if (ret != NULL) {
    if (!sock_inc_used(ret)) {
      return NULL;
    }
  }
  return ret;
 800fde0:	68fb      	ldr	r3, [r7, #12]
}
 800fde2:	4618      	mov	r0, r3
 800fde4:	3710      	adds	r7, #16
 800fde6:	46bd      	mov	sp, r7
 800fde8:	bd80      	pop	{r7, pc}

0800fdea <tryget_socket>:
 * @param fd externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
tryget_socket(int fd)
{
 800fdea:	b580      	push	{r7, lr}
 800fdec:	b084      	sub	sp, #16
 800fdee:	af00      	add	r7, sp, #0
 800fdf0:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock = tryget_socket_unconn(fd);
 800fdf2:	6878      	ldr	r0, [r7, #4]
 800fdf4:	f7ff ffec 	bl	800fdd0 <tryget_socket_unconn>
 800fdf8:	60f8      	str	r0, [r7, #12]
  if (sock != NULL) {
 800fdfa:	68fb      	ldr	r3, [r7, #12]
 800fdfc:	2b00      	cmp	r3, #0
 800fdfe:	d005      	beq.n	800fe0c <tryget_socket+0x22>
    if (sock->conn) {
 800fe00:	68fb      	ldr	r3, [r7, #12]
 800fe02:	681b      	ldr	r3, [r3, #0]
 800fe04:	2b00      	cmp	r3, #0
 800fe06:	d001      	beq.n	800fe0c <tryget_socket+0x22>
      return sock;
 800fe08:	68fb      	ldr	r3, [r7, #12]
 800fe0a:	e000      	b.n	800fe0e <tryget_socket+0x24>
    }
    done_socket(sock);
  }
  return NULL;
 800fe0c:	2300      	movs	r3, #0
}
 800fe0e:	4618      	mov	r0, r3
 800fe10:	3710      	adds	r7, #16
 800fe12:	46bd      	mov	sp, r7
 800fe14:	bd80      	pop	{r7, pc}
	...

0800fe18 <get_socket>:
 * @param fd externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
get_socket(int fd)
{
 800fe18:	b580      	push	{r7, lr}
 800fe1a:	b084      	sub	sp, #16
 800fe1c:	af00      	add	r7, sp, #0
 800fe1e:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock = tryget_socket(fd);
 800fe20:	6878      	ldr	r0, [r7, #4]
 800fe22:	f7ff ffe2 	bl	800fdea <tryget_socket>
 800fe26:	60f8      	str	r0, [r7, #12]
  if (!sock) {
 800fe28:	68fb      	ldr	r3, [r7, #12]
 800fe2a:	2b00      	cmp	r3, #0
 800fe2c:	d104      	bne.n	800fe38 <get_socket+0x20>
    if ((fd < LWIP_SOCKET_OFFSET) || (fd >= (LWIP_SOCKET_OFFSET + NUM_SOCKETS))) {
      LWIP_DEBUGF(SOCKETS_DEBUG, ("get_socket(%d): invalid\n", fd));
    }
    set_errno(EBADF);
 800fe2e:	4b05      	ldr	r3, [pc, #20]	; (800fe44 <get_socket+0x2c>)
 800fe30:	2209      	movs	r2, #9
 800fe32:	601a      	str	r2, [r3, #0]
    return NULL;
 800fe34:	2300      	movs	r3, #0
 800fe36:	e000      	b.n	800fe3a <get_socket+0x22>
  }
  return sock;
 800fe38:	68fb      	ldr	r3, [r7, #12]
}
 800fe3a:	4618      	mov	r0, r3
 800fe3c:	3710      	adds	r7, #16
 800fe3e:	46bd      	mov	sp, r7
 800fe40:	bd80      	pop	{r7, pc}
 800fe42:	bf00      	nop
 800fe44:	24007f68 	.word	0x24007f68

0800fe48 <alloc_socket>:
 *                 0 if socket has been created by socket()
 * @return the index of the new socket; -1 on error
 */
static int
alloc_socket(struct netconn *newconn, int accepted)
{
 800fe48:	b580      	push	{r7, lr}
 800fe4a:	b084      	sub	sp, #16
 800fe4c:	af00      	add	r7, sp, #0
 800fe4e:	6078      	str	r0, [r7, #4]
 800fe50:	6039      	str	r1, [r7, #0]
  int i;
  SYS_ARCH_DECL_PROTECT(lev);
  LWIP_UNUSED_ARG(accepted);

  /* allocate a new socket identifier */
  for (i = 0; i < NUM_SOCKETS; ++i) {
 800fe52:	2300      	movs	r3, #0
 800fe54:	60fb      	str	r3, [r7, #12]
 800fe56:	e052      	b.n	800fefe <alloc_socket+0xb6>
    /* Protect socket array */
    SYS_ARCH_PROTECT(lev);
 800fe58:	f00e fd38 	bl	801e8cc <sys_arch_protect>
 800fe5c:	60b8      	str	r0, [r7, #8]
    if (!sockets[i].conn) {
 800fe5e:	4a2c      	ldr	r2, [pc, #176]	; (800ff10 <alloc_socket+0xc8>)
 800fe60:	68fb      	ldr	r3, [r7, #12]
 800fe62:	011b      	lsls	r3, r3, #4
 800fe64:	4413      	add	r3, r2
 800fe66:	681b      	ldr	r3, [r3, #0]
 800fe68:	2b00      	cmp	r3, #0
 800fe6a:	d142      	bne.n	800fef2 <alloc_socket+0xaa>
        continue;
      }
      sockets[i].fd_used    = 1;
      sockets[i].fd_free_pending = 0;
#endif
      sockets[i].conn       = newconn;
 800fe6c:	4a28      	ldr	r2, [pc, #160]	; (800ff10 <alloc_socket+0xc8>)
 800fe6e:	68fb      	ldr	r3, [r7, #12]
 800fe70:	011b      	lsls	r3, r3, #4
 800fe72:	4413      	add	r3, r2
 800fe74:	687a      	ldr	r2, [r7, #4]
 800fe76:	601a      	str	r2, [r3, #0]
      /* The socket is not yet known to anyone, so no need to protect
         after having marked it as used. */
      SYS_ARCH_UNPROTECT(lev);
 800fe78:	68b8      	ldr	r0, [r7, #8]
 800fe7a:	f00e fd35 	bl	801e8e8 <sys_arch_unprotect>
      sockets[i].lastdata.pbuf = NULL;
 800fe7e:	4a24      	ldr	r2, [pc, #144]	; (800ff10 <alloc_socket+0xc8>)
 800fe80:	68fb      	ldr	r3, [r7, #12]
 800fe82:	011b      	lsls	r3, r3, #4
 800fe84:	4413      	add	r3, r2
 800fe86:	3304      	adds	r3, #4
 800fe88:	2200      	movs	r2, #0
 800fe8a:	601a      	str	r2, [r3, #0]
#if LWIP_SOCKET_SELECT || LWIP_SOCKET_POLL
      LWIP_ASSERT("sockets[i].select_waiting == 0", sockets[i].select_waiting == 0);
 800fe8c:	4a20      	ldr	r2, [pc, #128]	; (800ff10 <alloc_socket+0xc8>)
 800fe8e:	68fb      	ldr	r3, [r7, #12]
 800fe90:	011b      	lsls	r3, r3, #4
 800fe92:	4413      	add	r3, r2
 800fe94:	330e      	adds	r3, #14
 800fe96:	781b      	ldrb	r3, [r3, #0]
 800fe98:	2b00      	cmp	r3, #0
 800fe9a:	d006      	beq.n	800feaa <alloc_socket+0x62>
 800fe9c:	4b1d      	ldr	r3, [pc, #116]	; (800ff14 <alloc_socket+0xcc>)
 800fe9e:	f240 220e 	movw	r2, #526	; 0x20e
 800fea2:	491d      	ldr	r1, [pc, #116]	; (800ff18 <alloc_socket+0xd0>)
 800fea4:	481d      	ldr	r0, [pc, #116]	; (800ff1c <alloc_socket+0xd4>)
 800fea6:	f010 fad3 	bl	8020450 <iprintf>
      sockets[i].rcvevent   = 0;
 800feaa:	4a19      	ldr	r2, [pc, #100]	; (800ff10 <alloc_socket+0xc8>)
 800feac:	68fb      	ldr	r3, [r7, #12]
 800feae:	011b      	lsls	r3, r3, #4
 800feb0:	4413      	add	r3, r2
 800feb2:	3308      	adds	r3, #8
 800feb4:	2200      	movs	r2, #0
 800feb6:	801a      	strh	r2, [r3, #0]
      /* TCP sendbuf is empty, but the socket is not yet writable until connected
       * (unless it has been created by accept()). */
      sockets[i].sendevent  = (NETCONNTYPE_GROUP(newconn->type) == NETCONN_TCP ? (accepted != 0) : 1);
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	781b      	ldrb	r3, [r3, #0]
 800febc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800fec0:	2b10      	cmp	r3, #16
 800fec2:	d102      	bne.n	800feca <alloc_socket+0x82>
 800fec4:	683b      	ldr	r3, [r7, #0]
 800fec6:	2b00      	cmp	r3, #0
 800fec8:	d001      	beq.n	800fece <alloc_socket+0x86>
 800feca:	2301      	movs	r3, #1
 800fecc:	e000      	b.n	800fed0 <alloc_socket+0x88>
 800fece:	2300      	movs	r3, #0
 800fed0:	b299      	uxth	r1, r3
 800fed2:	4a0f      	ldr	r2, [pc, #60]	; (800ff10 <alloc_socket+0xc8>)
 800fed4:	68fb      	ldr	r3, [r7, #12]
 800fed6:	011b      	lsls	r3, r3, #4
 800fed8:	4413      	add	r3, r2
 800feda:	330a      	adds	r3, #10
 800fedc:	460a      	mov	r2, r1
 800fede:	801a      	strh	r2, [r3, #0]
      sockets[i].errevent   = 0;
 800fee0:	4a0b      	ldr	r2, [pc, #44]	; (800ff10 <alloc_socket+0xc8>)
 800fee2:	68fb      	ldr	r3, [r7, #12]
 800fee4:	011b      	lsls	r3, r3, #4
 800fee6:	4413      	add	r3, r2
 800fee8:	330c      	adds	r3, #12
 800feea:	2200      	movs	r2, #0
 800feec:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_SOCKET_SELECT || LWIP_SOCKET_POLL */
      return i + LWIP_SOCKET_OFFSET;
 800feee:	68fb      	ldr	r3, [r7, #12]
 800fef0:	e00a      	b.n	800ff08 <alloc_socket+0xc0>
    }
    SYS_ARCH_UNPROTECT(lev);
 800fef2:	68b8      	ldr	r0, [r7, #8]
 800fef4:	f00e fcf8 	bl	801e8e8 <sys_arch_unprotect>
  for (i = 0; i < NUM_SOCKETS; ++i) {
 800fef8:	68fb      	ldr	r3, [r7, #12]
 800fefa:	3301      	adds	r3, #1
 800fefc:	60fb      	str	r3, [r7, #12]
 800fefe:	68fb      	ldr	r3, [r7, #12]
 800ff00:	2b03      	cmp	r3, #3
 800ff02:	dda9      	ble.n	800fe58 <alloc_socket+0x10>
  }
  return -1;
 800ff04:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ff08:	4618      	mov	r0, r3
 800ff0a:	3710      	adds	r7, #16
 800ff0c:	46bd      	mov	sp, r7
 800ff0e:	bd80      	pop	{r7, pc}
 800ff10:	24004c64 	.word	0x24004c64
 800ff14:	08023ce0 	.word	0x08023ce0
 800ff18:	08023d14 	.word	0x08023d14
 800ff1c:	08023d34 	.word	0x08023d34

0800ff20 <free_socket_locked>:
 * @param lastdata lastdata is stored here, must be freed externally
 */
static int
free_socket_locked(struct lwip_sock *sock, int is_tcp, struct netconn **conn,
                   union lwip_sock_lastdata *lastdata)
{
 800ff20:	b480      	push	{r7}
 800ff22:	b085      	sub	sp, #20
 800ff24:	af00      	add	r7, sp, #0
 800ff26:	60f8      	str	r0, [r7, #12]
 800ff28:	60b9      	str	r1, [r7, #8]
 800ff2a:	607a      	str	r2, [r7, #4]
 800ff2c:	603b      	str	r3, [r7, #0]
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  LWIP_UNUSED_ARG(is_tcp);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  *lastdata = sock->lastdata;
 800ff2e:	683b      	ldr	r3, [r7, #0]
 800ff30:	68fa      	ldr	r2, [r7, #12]
 800ff32:	6852      	ldr	r2, [r2, #4]
 800ff34:	601a      	str	r2, [r3, #0]
  sock->lastdata.pbuf = NULL;
 800ff36:	68fb      	ldr	r3, [r7, #12]
 800ff38:	2200      	movs	r2, #0
 800ff3a:	605a      	str	r2, [r3, #4]
  *conn = sock->conn;
 800ff3c:	68fb      	ldr	r3, [r7, #12]
 800ff3e:	681a      	ldr	r2, [r3, #0]
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	601a      	str	r2, [r3, #0]
  sock->conn = NULL;
 800ff44:	68fb      	ldr	r3, [r7, #12]
 800ff46:	2200      	movs	r2, #0
 800ff48:	601a      	str	r2, [r3, #0]
  return 1;
 800ff4a:	2301      	movs	r3, #1
}
 800ff4c:	4618      	mov	r0, r3
 800ff4e:	3714      	adds	r7, #20
 800ff50:	46bd      	mov	sp, r7
 800ff52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff56:	4770      	bx	lr

0800ff58 <free_socket_free_elements>:

/** Free a socket's leftover members.
 */
static void
free_socket_free_elements(int is_tcp, struct netconn *conn, union lwip_sock_lastdata *lastdata)
{
 800ff58:	b580      	push	{r7, lr}
 800ff5a:	b084      	sub	sp, #16
 800ff5c:	af00      	add	r7, sp, #0
 800ff5e:	60f8      	str	r0, [r7, #12]
 800ff60:	60b9      	str	r1, [r7, #8]
 800ff62:	607a      	str	r2, [r7, #4]
  if (lastdata->pbuf != NULL) {
 800ff64:	687b      	ldr	r3, [r7, #4]
 800ff66:	681b      	ldr	r3, [r3, #0]
 800ff68:	2b00      	cmp	r3, #0
 800ff6a:	d00d      	beq.n	800ff88 <free_socket_free_elements+0x30>
    if (is_tcp) {
 800ff6c:	68fb      	ldr	r3, [r7, #12]
 800ff6e:	2b00      	cmp	r3, #0
 800ff70:	d005      	beq.n	800ff7e <free_socket_free_elements+0x26>
      pbuf_free(lastdata->pbuf);
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	681b      	ldr	r3, [r3, #0]
 800ff76:	4618      	mov	r0, r3
 800ff78:	f002 ff40 	bl	8012dfc <pbuf_free>
 800ff7c:	e004      	b.n	800ff88 <free_socket_free_elements+0x30>
    } else {
      netbuf_delete(lastdata->netbuf);
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	681b      	ldr	r3, [r3, #0]
 800ff82:	4618      	mov	r0, r3
 800ff84:	f7ff fe78 	bl	800fc78 <netbuf_delete>
    }
  }
  if (conn != NULL) {
 800ff88:	68bb      	ldr	r3, [r7, #8]
 800ff8a:	2b00      	cmp	r3, #0
 800ff8c:	d002      	beq.n	800ff94 <free_socket_free_elements+0x3c>
    /* netconn_prepare_delete() has already been called, here we only free the conn */
    netconn_delete(conn);
 800ff8e:	68b8      	ldr	r0, [r7, #8]
 800ff90:	f7fd fd00 	bl	800d994 <netconn_delete>
  }
}
 800ff94:	bf00      	nop
 800ff96:	3710      	adds	r7, #16
 800ff98:	46bd      	mov	sp, r7
 800ff9a:	bd80      	pop	{r7, pc}

0800ff9c <free_socket>:
 * @param sock the socket to free
 * @param is_tcp != 0 for TCP sockets, used to free lastdata
 */
static void
free_socket(struct lwip_sock *sock, int is_tcp)
{
 800ff9c:	b580      	push	{r7, lr}
 800ff9e:	b086      	sub	sp, #24
 800ffa0:	af00      	add	r7, sp, #0
 800ffa2:	6078      	str	r0, [r7, #4]
 800ffa4:	6039      	str	r1, [r7, #0]
  struct netconn *conn;
  union lwip_sock_lastdata lastdata;
  SYS_ARCH_DECL_PROTECT(lev);

  /* Protect socket array */
  SYS_ARCH_PROTECT(lev);
 800ffa6:	f00e fc91 	bl	801e8cc <sys_arch_protect>
 800ffaa:	6178      	str	r0, [r7, #20]

  freed = free_socket_locked(sock, is_tcp, &conn, &lastdata);
 800ffac:	f107 0308 	add.w	r3, r7, #8
 800ffb0:	f107 020c 	add.w	r2, r7, #12
 800ffb4:	6839      	ldr	r1, [r7, #0]
 800ffb6:	6878      	ldr	r0, [r7, #4]
 800ffb8:	f7ff ffb2 	bl	800ff20 <free_socket_locked>
 800ffbc:	6138      	str	r0, [r7, #16]
  SYS_ARCH_UNPROTECT(lev);
 800ffbe:	6978      	ldr	r0, [r7, #20]
 800ffc0:	f00e fc92 	bl	801e8e8 <sys_arch_unprotect>
  /* don't use 'sock' after this line, as another task might have allocated it */

  if (freed) {
 800ffc4:	693b      	ldr	r3, [r7, #16]
 800ffc6:	2b00      	cmp	r3, #0
 800ffc8:	d006      	beq.n	800ffd8 <free_socket+0x3c>
    free_socket_free_elements(is_tcp, conn, &lastdata);
 800ffca:	68fb      	ldr	r3, [r7, #12]
 800ffcc:	f107 0208 	add.w	r2, r7, #8
 800ffd0:	4619      	mov	r1, r3
 800ffd2:	6838      	ldr	r0, [r7, #0]
 800ffd4:	f7ff ffc0 	bl	800ff58 <free_socket_free_elements>
  }
}
 800ffd8:	bf00      	nop
 800ffda:	3718      	adds	r7, #24
 800ffdc:	46bd      	mov	sp, r7
 800ffde:	bd80      	pop	{r7, pc}

0800ffe0 <lwip_accept>:
 * Exceptions are documented!
 */

int
lwip_accept(int s, struct sockaddr *addr, socklen_t *addrlen)
{
 800ffe0:	b590      	push	{r4, r7, lr}
 800ffe2:	b099      	sub	sp, #100	; 0x64
 800ffe4:	af00      	add	r7, sp, #0
 800ffe6:	60f8      	str	r0, [r7, #12]
 800ffe8:	60b9      	str	r1, [r7, #8]
 800ffea:	607a      	str	r2, [r7, #4]
  struct lwip_sock *sock, *nsock;
  struct netconn *newconn;
  ip_addr_t naddr;
  u16_t port = 0;
 800ffec:	2300      	movs	r3, #0
 800ffee:	84fb      	strh	r3, [r7, #38]	; 0x26
  err_t err;
  int recvevent;
  SYS_ARCH_DECL_PROTECT(lev);

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d)...\n", s));
  sock = get_socket(s);
 800fff0:	68f8      	ldr	r0, [r7, #12]
 800fff2:	f7ff ff11 	bl	800fe18 <get_socket>
 800fff6:	65b8      	str	r0, [r7, #88]	; 0x58
  if (!sock) {
 800fff8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fffa:	2b00      	cmp	r3, #0
 800fffc:	d102      	bne.n	8010004 <lwip_accept+0x24>
    return -1;
 800fffe:	f04f 33ff 	mov.w	r3, #4294967295
 8010002:	e0f8      	b.n	80101f6 <lwip_accept+0x216>
  }

  /* wait for a new connection */
  err = netconn_accept(sock->conn, &newconn);
 8010004:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010006:	681b      	ldr	r3, [r3, #0]
 8010008:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 801000c:	4611      	mov	r1, r2
 801000e:	4618      	mov	r0, r3
 8010010:	f7fd fd92 	bl	800db38 <netconn_accept>
 8010014:	4603      	mov	r3, r0
 8010016:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  if (err != ERR_OK) {
 801001a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 801001e:	2b00      	cmp	r3, #0
 8010020:	d02c      	beq.n	801007c <lwip_accept+0x9c>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d): netconn_acept failed, err=%d\n", s, err));
    if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
 8010022:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010024:	681b      	ldr	r3, [r3, #0]
 8010026:	781b      	ldrb	r3, [r3, #0]
 8010028:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801002c:	2b10      	cmp	r3, #16
 801002e:	d008      	beq.n	8010042 <lwip_accept+0x62>
      sock_set_errno(sock, EOPNOTSUPP);
 8010030:	235f      	movs	r3, #95	; 0x5f
 8010032:	633b      	str	r3, [r7, #48]	; 0x30
 8010034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010036:	2b00      	cmp	r3, #0
 8010038:	d01d      	beq.n	8010076 <lwip_accept+0x96>
 801003a:	4a71      	ldr	r2, [pc, #452]	; (8010200 <lwip_accept+0x220>)
 801003c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801003e:	6013      	str	r3, [r2, #0]
 8010040:	e019      	b.n	8010076 <lwip_accept+0x96>
    } else if (err == ERR_CLSD) {
 8010042:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8010046:	f113 0f0f 	cmn.w	r3, #15
 801004a:	d108      	bne.n	801005e <lwip_accept+0x7e>
      sock_set_errno(sock, EINVAL);
 801004c:	2316      	movs	r3, #22
 801004e:	637b      	str	r3, [r7, #52]	; 0x34
 8010050:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010052:	2b00      	cmp	r3, #0
 8010054:	d00f      	beq.n	8010076 <lwip_accept+0x96>
 8010056:	4a6a      	ldr	r2, [pc, #424]	; (8010200 <lwip_accept+0x220>)
 8010058:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801005a:	6013      	str	r3, [r2, #0]
 801005c:	e00b      	b.n	8010076 <lwip_accept+0x96>
    } else {
      sock_set_errno(sock, err_to_errno(err));
 801005e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8010062:	4618      	mov	r0, r3
 8010064:	f7ff fdea 	bl	800fc3c <err_to_errno>
 8010068:	63b8      	str	r0, [r7, #56]	; 0x38
 801006a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801006c:	2b00      	cmp	r3, #0
 801006e:	d002      	beq.n	8010076 <lwip_accept+0x96>
 8010070:	4a63      	ldr	r2, [pc, #396]	; (8010200 <lwip_accept+0x220>)
 8010072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010074:	6013      	str	r3, [r2, #0]
    }
    done_socket(sock);
    return -1;
 8010076:	f04f 33ff 	mov.w	r3, #4294967295
 801007a:	e0bc      	b.n	80101f6 <lwip_accept+0x216>
  }
  LWIP_ASSERT("newconn != NULL", newconn != NULL);
 801007c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801007e:	2b00      	cmp	r3, #0
 8010080:	d106      	bne.n	8010090 <lwip_accept+0xb0>
 8010082:	4b60      	ldr	r3, [pc, #384]	; (8010204 <lwip_accept+0x224>)
 8010084:	f240 228b 	movw	r2, #651	; 0x28b
 8010088:	495f      	ldr	r1, [pc, #380]	; (8010208 <lwip_accept+0x228>)
 801008a:	4860      	ldr	r0, [pc, #384]	; (801020c <lwip_accept+0x22c>)
 801008c:	f010 f9e0 	bl	8020450 <iprintf>

  newsock = alloc_socket(newconn, 1);
 8010090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010092:	2101      	movs	r1, #1
 8010094:	4618      	mov	r0, r3
 8010096:	f7ff fed7 	bl	800fe48 <alloc_socket>
 801009a:	6538      	str	r0, [r7, #80]	; 0x50
  if (newsock == -1) {
 801009c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801009e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80100a2:	d10e      	bne.n	80100c2 <lwip_accept+0xe2>
    netconn_delete(newconn);
 80100a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100a6:	4618      	mov	r0, r3
 80100a8:	f7fd fc74 	bl	800d994 <netconn_delete>
    sock_set_errno(sock, ENFILE);
 80100ac:	2317      	movs	r3, #23
 80100ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80100b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80100b2:	2b00      	cmp	r3, #0
 80100b4:	d002      	beq.n	80100bc <lwip_accept+0xdc>
 80100b6:	4a52      	ldr	r2, [pc, #328]	; (8010200 <lwip_accept+0x220>)
 80100b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80100ba:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 80100bc:	f04f 33ff 	mov.w	r3, #4294967295
 80100c0:	e099      	b.n	80101f6 <lwip_accept+0x216>
  }
  LWIP_ASSERT("invalid socket index", (newsock >= LWIP_SOCKET_OFFSET) && (newsock < NUM_SOCKETS + LWIP_SOCKET_OFFSET));
 80100c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80100c4:	2b00      	cmp	r3, #0
 80100c6:	db02      	blt.n	80100ce <lwip_accept+0xee>
 80100c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80100ca:	2b03      	cmp	r3, #3
 80100cc:	dd06      	ble.n	80100dc <lwip_accept+0xfc>
 80100ce:	4b4d      	ldr	r3, [pc, #308]	; (8010204 <lwip_accept+0x224>)
 80100d0:	f44f 7225 	mov.w	r2, #660	; 0x294
 80100d4:	494e      	ldr	r1, [pc, #312]	; (8010210 <lwip_accept+0x230>)
 80100d6:	484d      	ldr	r0, [pc, #308]	; (801020c <lwip_accept+0x22c>)
 80100d8:	f010 f9ba 	bl	8020450 <iprintf>
  nsock = &sockets[newsock - LWIP_SOCKET_OFFSET];
 80100dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80100de:	011b      	lsls	r3, r3, #4
 80100e0:	4a4c      	ldr	r2, [pc, #304]	; (8010214 <lwip_accept+0x234>)
 80100e2:	4413      	add	r3, r2
 80100e4:	64fb      	str	r3, [r7, #76]	; 0x4c
  /* See event_callback: If data comes in right away after an accept, even
   * though the server task might not have created a new socket yet.
   * In that case, newconn->socket is counted down (newconn->socket--),
   * so nsock->rcvevent is >= 1 here!
   */
  SYS_ARCH_PROTECT(lev);
 80100e6:	f00e fbf1 	bl	801e8cc <sys_arch_protect>
 80100ea:	64b8      	str	r0, [r7, #72]	; 0x48
  recvevent = (s16_t)(-1 - newconn->socket);
 80100ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100ee:	699b      	ldr	r3, [r3, #24]
 80100f0:	b21b      	sxth	r3, r3
 80100f2:	43db      	mvns	r3, r3
 80100f4:	b21b      	sxth	r3, r3
 80100f6:	65fb      	str	r3, [r7, #92]	; 0x5c
  newconn->socket = newsock;
 80100f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100fa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80100fc:	619a      	str	r2, [r3, #24]
  SYS_ARCH_UNPROTECT(lev);
 80100fe:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8010100:	f00e fbf2 	bl	801e8e8 <sys_arch_unprotect>

  if (newconn->callback) {
 8010104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010108:	2b00      	cmp	r3, #0
 801010a:	d012      	beq.n	8010132 <lwip_accept+0x152>
    LOCK_TCPIP_CORE();
 801010c:	4842      	ldr	r0, [pc, #264]	; (8010218 <lwip_accept+0x238>)
 801010e:	f00e fb9b 	bl	801e848 <sys_mutex_lock>
    while (recvevent > 0) {
 8010112:	e008      	b.n	8010126 <lwip_accept+0x146>
      recvevent--;
 8010114:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010116:	3b01      	subs	r3, #1
 8010118:	65fb      	str	r3, [r7, #92]	; 0x5c
      newconn->callback(newconn, NETCONN_EVT_RCVPLUS, 0);
 801011a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801011c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801011e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010120:	2200      	movs	r2, #0
 8010122:	2100      	movs	r1, #0
 8010124:	4798      	blx	r3
    while (recvevent > 0) {
 8010126:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010128:	2b00      	cmp	r3, #0
 801012a:	dcf3      	bgt.n	8010114 <lwip_accept+0x134>
    }
    UNLOCK_TCPIP_CORE();
 801012c:	483a      	ldr	r0, [pc, #232]	; (8010218 <lwip_accept+0x238>)
 801012e:	f00e fb9a 	bl	801e866 <sys_mutex_unlock>
  }

  /* Note that POSIX only requires us to check addr is non-NULL. addrlen must
   * not be NULL if addr is valid.
   */
  if ((addr != NULL) && (addrlen != NULL)) {
 8010132:	68bb      	ldr	r3, [r7, #8]
 8010134:	2b00      	cmp	r3, #0
 8010136:	d055      	beq.n	80101e4 <lwip_accept+0x204>
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	2b00      	cmp	r3, #0
 801013c:	d052      	beq.n	80101e4 <lwip_accept+0x204>
    union sockaddr_aligned tempaddr;
    /* get the IP address and port of the remote host */
    err = netconn_peer(newconn, &naddr, &port);
 801013e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010140:	f107 0226 	add.w	r2, r7, #38	; 0x26
 8010144:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8010148:	2300      	movs	r3, #0
 801014a:	f7fd fc3f 	bl	800d9cc <netconn_getaddr>
 801014e:	4603      	mov	r3, r0
 8010150:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    if (err != ERR_OK) {
 8010154:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8010158:	2b00      	cmp	r3, #0
 801015a:	d016      	beq.n	801018a <lwip_accept+0x1aa>
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d): netconn_peer failed, err=%d\n", s, err));
      netconn_delete(newconn);
 801015c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801015e:	4618      	mov	r0, r3
 8010160:	f7fd fc18 	bl	800d994 <netconn_delete>
      free_socket(nsock, 1);
 8010164:	2101      	movs	r1, #1
 8010166:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8010168:	f7ff ff18 	bl	800ff9c <free_socket>
      sock_set_errno(sock, err_to_errno(err));
 801016c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8010170:	4618      	mov	r0, r3
 8010172:	f7ff fd63 	bl	800fc3c <err_to_errno>
 8010176:	6478      	str	r0, [r7, #68]	; 0x44
 8010178:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801017a:	2b00      	cmp	r3, #0
 801017c:	d002      	beq.n	8010184 <lwip_accept+0x1a4>
 801017e:	4a20      	ldr	r2, [pc, #128]	; (8010200 <lwip_accept+0x220>)
 8010180:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010182:	6013      	str	r3, [r2, #0]
      done_socket(sock);
      return -1;
 8010184:	f04f 33ff 	mov.w	r3, #4294967295
 8010188:	e035      	b.n	80101f6 <lwip_accept+0x216>
    }

    IPADDR_PORT_TO_SOCKADDR(&tempaddr, &naddr, port);
 801018a:	f107 0314 	add.w	r3, r7, #20
 801018e:	2210      	movs	r2, #16
 8010190:	701a      	strb	r2, [r3, #0]
 8010192:	f107 0314 	add.w	r3, r7, #20
 8010196:	2202      	movs	r2, #2
 8010198:	705a      	strb	r2, [r3, #1]
 801019a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801019c:	f107 0414 	add.w	r4, r7, #20
 80101a0:	4618      	mov	r0, r3
 80101a2:	f001 f943 	bl	801142c <lwip_htons>
 80101a6:	4603      	mov	r3, r0
 80101a8:	8063      	strh	r3, [r4, #2]
 80101aa:	f107 0314 	add.w	r3, r7, #20
 80101ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80101b0:	605a      	str	r2, [r3, #4]
 80101b2:	f107 0314 	add.w	r3, r7, #20
 80101b6:	3308      	adds	r3, #8
 80101b8:	2208      	movs	r2, #8
 80101ba:	2100      	movs	r1, #0
 80101bc:	4618      	mov	r0, r3
 80101be:	f010 f9e6 	bl	802058e <memset>
    if (*addrlen > tempaddr.sa.sa_len) {
 80101c2:	687b      	ldr	r3, [r7, #4]
 80101c4:	681b      	ldr	r3, [r3, #0]
 80101c6:	7d3a      	ldrb	r2, [r7, #20]
 80101c8:	4293      	cmp	r3, r2
 80101ca:	d903      	bls.n	80101d4 <lwip_accept+0x1f4>
      *addrlen = tempaddr.sa.sa_len;
 80101cc:	7d3b      	ldrb	r3, [r7, #20]
 80101ce:	461a      	mov	r2, r3
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	601a      	str	r2, [r3, #0]
    }
    MEMCPY(addr, &tempaddr, *addrlen);
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	681a      	ldr	r2, [r3, #0]
 80101d8:	f107 0314 	add.w	r3, r7, #20
 80101dc:	4619      	mov	r1, r3
 80101de:	68b8      	ldr	r0, [r7, #8]
 80101e0:	f010 fa67 	bl	80206b2 <memcpy>
    LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F"\n", port));
  } else {
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d) returning new sock=%d", s, newsock));
  }

  sock_set_errno(sock, 0);
 80101e4:	2300      	movs	r3, #0
 80101e6:	643b      	str	r3, [r7, #64]	; 0x40
 80101e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80101ea:	2b00      	cmp	r3, #0
 80101ec:	d002      	beq.n	80101f4 <lwip_accept+0x214>
 80101ee:	4a04      	ldr	r2, [pc, #16]	; (8010200 <lwip_accept+0x220>)
 80101f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80101f2:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  done_socket(nsock);
  return newsock;
 80101f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 80101f6:	4618      	mov	r0, r3
 80101f8:	3764      	adds	r7, #100	; 0x64
 80101fa:	46bd      	mov	sp, r7
 80101fc:	bd90      	pop	{r4, r7, pc}
 80101fe:	bf00      	nop
 8010200:	24007f68 	.word	0x24007f68
 8010204:	08023ce0 	.word	0x08023ce0
 8010208:	08023d5c 	.word	0x08023d5c
 801020c:	08023d34 	.word	0x08023d34
 8010210:	08023d6c 	.word	0x08023d6c
 8010214:	24004c64 	.word	0x24004c64
 8010218:	24004cb4 	.word	0x24004cb4

0801021c <lwip_bind>:

int
lwip_bind(int s, const struct sockaddr *name, socklen_t namelen)
{
 801021c:	b580      	push	{r7, lr}
 801021e:	b08a      	sub	sp, #40	; 0x28
 8010220:	af00      	add	r7, sp, #0
 8010222:	60f8      	str	r0, [r7, #12]
 8010224:	60b9      	str	r1, [r7, #8]
 8010226:	607a      	str	r2, [r7, #4]
  struct lwip_sock *sock;
  ip_addr_t local_addr;
  u16_t local_port;
  err_t err;

  sock = get_socket(s);
 8010228:	68f8      	ldr	r0, [r7, #12]
 801022a:	f7ff fdf5 	bl	800fe18 <get_socket>
 801022e:	6278      	str	r0, [r7, #36]	; 0x24
  if (!sock) {
 8010230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010232:	2b00      	cmp	r3, #0
 8010234:	d102      	bne.n	801023c <lwip_bind+0x20>
    return -1;
 8010236:	f04f 33ff 	mov.w	r3, #4294967295
 801023a:	e051      	b.n	80102e0 <lwip_bind+0xc4>
    done_socket(sock);
    return -1;
  }

  /* check size, family and alignment of 'name' */
  LWIP_ERROR("lwip_bind: invalid address", (IS_SOCK_ADDR_LEN_VALID(namelen) &&
 801023c:	687b      	ldr	r3, [r7, #4]
 801023e:	2b10      	cmp	r3, #16
 8010240:	d108      	bne.n	8010254 <lwip_bind+0x38>
 8010242:	68bb      	ldr	r3, [r7, #8]
 8010244:	785b      	ldrb	r3, [r3, #1]
 8010246:	2b02      	cmp	r3, #2
 8010248:	d104      	bne.n	8010254 <lwip_bind+0x38>
 801024a:	68bb      	ldr	r3, [r7, #8]
 801024c:	f003 0303 	and.w	r3, r3, #3
 8010250:	2b00      	cmp	r3, #0
 8010252:	d014      	beq.n	801027e <lwip_bind+0x62>
 8010254:	4b24      	ldr	r3, [pc, #144]	; (80102e8 <lwip_bind+0xcc>)
 8010256:	f240 22e2 	movw	r2, #738	; 0x2e2
 801025a:	4924      	ldr	r1, [pc, #144]	; (80102ec <lwip_bind+0xd0>)
 801025c:	4824      	ldr	r0, [pc, #144]	; (80102f0 <lwip_bind+0xd4>)
 801025e:	f010 f8f7 	bl	8020450 <iprintf>
 8010262:	f06f 000f 	mvn.w	r0, #15
 8010266:	f7ff fce9 	bl	800fc3c <err_to_errno>
 801026a:	6178      	str	r0, [r7, #20]
 801026c:	697b      	ldr	r3, [r7, #20]
 801026e:	2b00      	cmp	r3, #0
 8010270:	d002      	beq.n	8010278 <lwip_bind+0x5c>
 8010272:	4a20      	ldr	r2, [pc, #128]	; (80102f4 <lwip_bind+0xd8>)
 8010274:	697b      	ldr	r3, [r7, #20]
 8010276:	6013      	str	r3, [r2, #0]
 8010278:	f04f 33ff 	mov.w	r3, #4294967295
 801027c:	e030      	b.n	80102e0 <lwip_bind+0xc4>
             IS_SOCK_ADDR_TYPE_VALID(name) && IS_SOCK_ADDR_ALIGNED(name)),
             sock_set_errno(sock, err_to_errno(ERR_ARG)); done_socket(sock); return -1;);
  LWIP_UNUSED_ARG(namelen);

  SOCKADDR_TO_IPADDR_PORT(name, &local_addr, local_port);
 801027e:	68bb      	ldr	r3, [r7, #8]
 8010280:	685b      	ldr	r3, [r3, #4]
 8010282:	613b      	str	r3, [r7, #16]
 8010284:	68bb      	ldr	r3, [r7, #8]
 8010286:	885b      	ldrh	r3, [r3, #2]
 8010288:	4618      	mov	r0, r3
 801028a:	f001 f8cf 	bl	801142c <lwip_htons>
 801028e:	4603      	mov	r3, r0
 8010290:	847b      	strh	r3, [r7, #34]	; 0x22
    unmap_ipv4_mapped_ipv6(ip_2_ip4(&local_addr), ip_2_ip6(&local_addr));
    IP_SET_TYPE_VAL(local_addr, IPADDR_TYPE_V4);
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  err = netconn_bind(sock->conn, &local_addr, local_port);
 8010292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010294:	681b      	ldr	r3, [r3, #0]
 8010296:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8010298:	f107 0110 	add.w	r1, r7, #16
 801029c:	4618      	mov	r0, r3
 801029e:	f7fd fbe7 	bl	800da70 <netconn_bind>
 80102a2:	4603      	mov	r3, r0
 80102a4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

  if (err != ERR_OK) {
 80102a8:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 80102ac:	2b00      	cmp	r3, #0
 80102ae:	d00e      	beq.n	80102ce <lwip_bind+0xb2>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_bind(%d) failed, err=%d\n", s, err));
    sock_set_errno(sock, err_to_errno(err));
 80102b0:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 80102b4:	4618      	mov	r0, r3
 80102b6:	f7ff fcc1 	bl	800fc3c <err_to_errno>
 80102ba:	61b8      	str	r0, [r7, #24]
 80102bc:	69bb      	ldr	r3, [r7, #24]
 80102be:	2b00      	cmp	r3, #0
 80102c0:	d002      	beq.n	80102c8 <lwip_bind+0xac>
 80102c2:	4a0c      	ldr	r2, [pc, #48]	; (80102f4 <lwip_bind+0xd8>)
 80102c4:	69bb      	ldr	r3, [r7, #24]
 80102c6:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 80102c8:	f04f 33ff 	mov.w	r3, #4294967295
 80102cc:	e008      	b.n	80102e0 <lwip_bind+0xc4>
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_bind(%d) succeeded\n", s));
  sock_set_errno(sock, 0);
 80102ce:	2300      	movs	r3, #0
 80102d0:	61fb      	str	r3, [r7, #28]
 80102d2:	69fb      	ldr	r3, [r7, #28]
 80102d4:	2b00      	cmp	r3, #0
 80102d6:	d002      	beq.n	80102de <lwip_bind+0xc2>
 80102d8:	4a06      	ldr	r2, [pc, #24]	; (80102f4 <lwip_bind+0xd8>)
 80102da:	69fb      	ldr	r3, [r7, #28]
 80102dc:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return 0;
 80102de:	2300      	movs	r3, #0
}
 80102e0:	4618      	mov	r0, r3
 80102e2:	3728      	adds	r7, #40	; 0x28
 80102e4:	46bd      	mov	sp, r7
 80102e6:	bd80      	pop	{r7, pc}
 80102e8:	08023ce0 	.word	0x08023ce0
 80102ec:	08023d84 	.word	0x08023d84
 80102f0:	08023d34 	.word	0x08023d34
 80102f4:	24007f68 	.word	0x24007f68

080102f8 <lwip_close>:

int
lwip_close(int s)
{
 80102f8:	b580      	push	{r7, lr}
 80102fa:	b086      	sub	sp, #24
 80102fc:	af00      	add	r7, sp, #0
 80102fe:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock;
  int is_tcp = 0;
 8010300:	2300      	movs	r3, #0
 8010302:	617b      	str	r3, [r7, #20]
  err_t err;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_close(%d)\n", s));

  sock = get_socket(s);
 8010304:	6878      	ldr	r0, [r7, #4]
 8010306:	f7ff fd87 	bl	800fe18 <get_socket>
 801030a:	6138      	str	r0, [r7, #16]
  if (!sock) {
 801030c:	693b      	ldr	r3, [r7, #16]
 801030e:	2b00      	cmp	r3, #0
 8010310:	d102      	bne.n	8010318 <lwip_close+0x20>
    return -1;
 8010312:	f04f 33ff 	mov.w	r3, #4294967295
 8010316:	e039      	b.n	801038c <lwip_close+0x94>
  }

  if (sock->conn != NULL) {
 8010318:	693b      	ldr	r3, [r7, #16]
 801031a:	681b      	ldr	r3, [r3, #0]
 801031c:	2b00      	cmp	r3, #0
 801031e:	d00b      	beq.n	8010338 <lwip_close+0x40>
    is_tcp = NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP;
 8010320:	693b      	ldr	r3, [r7, #16]
 8010322:	681b      	ldr	r3, [r3, #0]
 8010324:	781b      	ldrb	r3, [r3, #0]
 8010326:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801032a:	2b10      	cmp	r3, #16
 801032c:	bf0c      	ite	eq
 801032e:	2301      	moveq	r3, #1
 8010330:	2300      	movne	r3, #0
 8010332:	b2db      	uxtb	r3, r3
 8010334:	617b      	str	r3, [r7, #20]
 8010336:	e00a      	b.n	801034e <lwip_close+0x56>
  } else {
    LWIP_ASSERT("sock->lastdata == NULL", sock->lastdata.pbuf == NULL);
 8010338:	693b      	ldr	r3, [r7, #16]
 801033a:	685b      	ldr	r3, [r3, #4]
 801033c:	2b00      	cmp	r3, #0
 801033e:	d006      	beq.n	801034e <lwip_close+0x56>
 8010340:	4b14      	ldr	r3, [pc, #80]	; (8010394 <lwip_close+0x9c>)
 8010342:	f44f 7245 	mov.w	r2, #788	; 0x314
 8010346:	4914      	ldr	r1, [pc, #80]	; (8010398 <lwip_close+0xa0>)
 8010348:	4814      	ldr	r0, [pc, #80]	; (801039c <lwip_close+0xa4>)
 801034a:	f010 f881 	bl	8020450 <iprintf>
#if LWIP_IPV6_MLD
  /* drop all possibly joined MLD6 memberships */
  lwip_socket_drop_registered_mld6_memberships(s);
#endif /* LWIP_IPV6_MLD */

  err = netconn_prepare_delete(sock->conn);
 801034e:	693b      	ldr	r3, [r7, #16]
 8010350:	681b      	ldr	r3, [r3, #0]
 8010352:	4618      	mov	r0, r3
 8010354:	f7fd fafa 	bl	800d94c <netconn_prepare_delete>
 8010358:	4603      	mov	r3, r0
 801035a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 801035c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010360:	2b00      	cmp	r3, #0
 8010362:	d00e      	beq.n	8010382 <lwip_close+0x8a>
    sock_set_errno(sock, err_to_errno(err));
 8010364:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010368:	4618      	mov	r0, r3
 801036a:	f7ff fc67 	bl	800fc3c <err_to_errno>
 801036e:	60b8      	str	r0, [r7, #8]
 8010370:	68bb      	ldr	r3, [r7, #8]
 8010372:	2b00      	cmp	r3, #0
 8010374:	d002      	beq.n	801037c <lwip_close+0x84>
 8010376:	4a0a      	ldr	r2, [pc, #40]	; (80103a0 <lwip_close+0xa8>)
 8010378:	68bb      	ldr	r3, [r7, #8]
 801037a:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 801037c:	f04f 33ff 	mov.w	r3, #4294967295
 8010380:	e004      	b.n	801038c <lwip_close+0x94>
  }

  free_socket(sock, is_tcp);
 8010382:	6979      	ldr	r1, [r7, #20]
 8010384:	6938      	ldr	r0, [r7, #16]
 8010386:	f7ff fe09 	bl	800ff9c <free_socket>
  set_errno(0);
  return 0;
 801038a:	2300      	movs	r3, #0
}
 801038c:	4618      	mov	r0, r3
 801038e:	3718      	adds	r7, #24
 8010390:	46bd      	mov	sp, r7
 8010392:	bd80      	pop	{r7, pc}
 8010394:	08023ce0 	.word	0x08023ce0
 8010398:	08023da0 	.word	0x08023da0
 801039c:	08023d34 	.word	0x08023d34
 80103a0:	24007f68 	.word	0x24007f68

080103a4 <lwip_listen>:
 * @param backlog (ATTENTION: needs TCP_LISTEN_BACKLOG=1)
 * @return 0 on success, non-zero on failure
 */
int
lwip_listen(int s, int backlog)
{
 80103a4:	b580      	push	{r7, lr}
 80103a6:	b088      	sub	sp, #32
 80103a8:	af00      	add	r7, sp, #0
 80103aa:	6078      	str	r0, [r7, #4]
 80103ac:	6039      	str	r1, [r7, #0]
  struct lwip_sock *sock;
  err_t err;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_listen(%d, backlog=%d)\n", s, backlog));

  sock = get_socket(s);
 80103ae:	6878      	ldr	r0, [r7, #4]
 80103b0:	f7ff fd32 	bl	800fe18 <get_socket>
 80103b4:	61f8      	str	r0, [r7, #28]
  if (!sock) {
 80103b6:	69fb      	ldr	r3, [r7, #28]
 80103b8:	2b00      	cmp	r3, #0
 80103ba:	d102      	bne.n	80103c2 <lwip_listen+0x1e>
    return -1;
 80103bc:	f04f 33ff 	mov.w	r3, #4294967295
 80103c0:	e03e      	b.n	8010440 <lwip_listen+0x9c>
  }

  /* limit the "backlog" parameter to fit in an u8_t */
  backlog = LWIP_MIN(LWIP_MAX(backlog, 0), 0xff);
 80103c2:	683b      	ldr	r3, [r7, #0]
 80103c4:	2bfe      	cmp	r3, #254	; 0xfe
 80103c6:	dc03      	bgt.n	80103d0 <lwip_listen+0x2c>
 80103c8:	683b      	ldr	r3, [r7, #0]
 80103ca:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80103ce:	e000      	b.n	80103d2 <lwip_listen+0x2e>
 80103d0:	23ff      	movs	r3, #255	; 0xff
 80103d2:	603b      	str	r3, [r7, #0]

  err = netconn_listen_with_backlog(sock->conn, (u8_t)backlog);
 80103d4:	69fb      	ldr	r3, [r7, #28]
 80103d6:	681b      	ldr	r3, [r3, #0]
 80103d8:	683a      	ldr	r2, [r7, #0]
 80103da:	b2d2      	uxtb	r2, r2
 80103dc:	4611      	mov	r1, r2
 80103de:	4618      	mov	r0, r3
 80103e0:	f7fd fb7e 	bl	800dae0 <netconn_listen_with_backlog>
 80103e4:	4603      	mov	r3, r0
 80103e6:	76fb      	strb	r3, [r7, #27]

  if (err != ERR_OK) {
 80103e8:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80103ec:	2b00      	cmp	r3, #0
 80103ee:	d01e      	beq.n	801042e <lwip_listen+0x8a>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_listen(%d) failed, err=%d\n", s, err));
    if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
 80103f0:	69fb      	ldr	r3, [r7, #28]
 80103f2:	681b      	ldr	r3, [r3, #0]
 80103f4:	781b      	ldrb	r3, [r3, #0]
 80103f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80103fa:	2b10      	cmp	r3, #16
 80103fc:	d008      	beq.n	8010410 <lwip_listen+0x6c>
      sock_set_errno(sock, EOPNOTSUPP);
 80103fe:	235f      	movs	r3, #95	; 0x5f
 8010400:	60fb      	str	r3, [r7, #12]
 8010402:	68fb      	ldr	r3, [r7, #12]
 8010404:	2b00      	cmp	r3, #0
 8010406:	d00f      	beq.n	8010428 <lwip_listen+0x84>
 8010408:	4a0f      	ldr	r2, [pc, #60]	; (8010448 <lwip_listen+0xa4>)
 801040a:	68fb      	ldr	r3, [r7, #12]
 801040c:	6013      	str	r3, [r2, #0]
 801040e:	e00b      	b.n	8010428 <lwip_listen+0x84>
    } else {
      sock_set_errno(sock, err_to_errno(err));
 8010410:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8010414:	4618      	mov	r0, r3
 8010416:	f7ff fc11 	bl	800fc3c <err_to_errno>
 801041a:	6138      	str	r0, [r7, #16]
 801041c:	693b      	ldr	r3, [r7, #16]
 801041e:	2b00      	cmp	r3, #0
 8010420:	d002      	beq.n	8010428 <lwip_listen+0x84>
 8010422:	4a09      	ldr	r2, [pc, #36]	; (8010448 <lwip_listen+0xa4>)
 8010424:	693b      	ldr	r3, [r7, #16]
 8010426:	6013      	str	r3, [r2, #0]
    }
    done_socket(sock);
    return -1;
 8010428:	f04f 33ff 	mov.w	r3, #4294967295
 801042c:	e008      	b.n	8010440 <lwip_listen+0x9c>
  }

  sock_set_errno(sock, 0);
 801042e:	2300      	movs	r3, #0
 8010430:	617b      	str	r3, [r7, #20]
 8010432:	697b      	ldr	r3, [r7, #20]
 8010434:	2b00      	cmp	r3, #0
 8010436:	d002      	beq.n	801043e <lwip_listen+0x9a>
 8010438:	4a03      	ldr	r2, [pc, #12]	; (8010448 <lwip_listen+0xa4>)
 801043a:	697b      	ldr	r3, [r7, #20]
 801043c:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return 0;
 801043e:	2300      	movs	r3, #0
}
 8010440:	4618      	mov	r0, r3
 8010442:	3720      	adds	r7, #32
 8010444:	46bd      	mov	sp, r7
 8010446:	bd80      	pop	{r7, pc}
 8010448:	24007f68 	.word	0x24007f68

0801044c <lwip_recv_tcp>:
 * until "len" bytes are received or we're otherwise done.
 * Keeps sock->lastdata for peeking or partly copying.
 */
static ssize_t
lwip_recv_tcp(struct lwip_sock *sock, void *mem, size_t len, int flags)
{
 801044c:	b580      	push	{r7, lr}
 801044e:	b08c      	sub	sp, #48	; 0x30
 8010450:	af00      	add	r7, sp, #0
 8010452:	60f8      	str	r0, [r7, #12]
 8010454:	60b9      	str	r1, [r7, #8]
 8010456:	607a      	str	r2, [r7, #4]
 8010458:	603b      	str	r3, [r7, #0]
  u8_t apiflags = NETCONN_NOAUTORCVD;
 801045a:	2308      	movs	r3, #8
 801045c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  ssize_t recvd = 0;
 8010460:	2300      	movs	r3, #0
 8010462:	62bb      	str	r3, [r7, #40]	; 0x28
  ssize_t recv_left = (len <= SSIZE_MAX) ? (ssize_t)len : SSIZE_MAX;
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	2b00      	cmp	r3, #0
 8010468:	db01      	blt.n	801046e <lwip_recv_tcp+0x22>
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	e001      	b.n	8010472 <lwip_recv_tcp+0x26>
 801046e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8010472:	627b      	str	r3, [r7, #36]	; 0x24

  LWIP_ASSERT("no socket given", sock != NULL);
 8010474:	68fb      	ldr	r3, [r7, #12]
 8010476:	2b00      	cmp	r3, #0
 8010478:	d106      	bne.n	8010488 <lwip_recv_tcp+0x3c>
 801047a:	4b74      	ldr	r3, [pc, #464]	; (801064c <lwip_recv_tcp+0x200>)
 801047c:	f240 329e 	movw	r2, #926	; 0x39e
 8010480:	4973      	ldr	r1, [pc, #460]	; (8010650 <lwip_recv_tcp+0x204>)
 8010482:	4874      	ldr	r0, [pc, #464]	; (8010654 <lwip_recv_tcp+0x208>)
 8010484:	f00f ffe4 	bl	8020450 <iprintf>
  LWIP_ASSERT("this should be checked internally", NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP);
 8010488:	68fb      	ldr	r3, [r7, #12]
 801048a:	681b      	ldr	r3, [r3, #0]
 801048c:	781b      	ldrb	r3, [r3, #0]
 801048e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010492:	2b10      	cmp	r3, #16
 8010494:	d006      	beq.n	80104a4 <lwip_recv_tcp+0x58>
 8010496:	4b6d      	ldr	r3, [pc, #436]	; (801064c <lwip_recv_tcp+0x200>)
 8010498:	f240 329f 	movw	r2, #927	; 0x39f
 801049c:	496e      	ldr	r1, [pc, #440]	; (8010658 <lwip_recv_tcp+0x20c>)
 801049e:	486d      	ldr	r0, [pc, #436]	; (8010654 <lwip_recv_tcp+0x208>)
 80104a0:	f00f ffd6 	bl	8020450 <iprintf>

  if (flags & MSG_DONTWAIT) {
 80104a4:	683b      	ldr	r3, [r7, #0]
 80104a6:	f003 0308 	and.w	r3, r3, #8
 80104aa:	2b00      	cmp	r3, #0
 80104ac:	d005      	beq.n	80104ba <lwip_recv_tcp+0x6e>
    apiflags |= NETCONN_DONTBLOCK;
 80104ae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80104b2:	f043 0304 	orr.w	r3, r3, #4
 80104b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    err_t err;
    u16_t copylen;

    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: top while sock->lastdata=%p\n", (void *)sock->lastdata.pbuf));
    /* Check if there is data left from the last recv operation. */
    if (sock->lastdata.pbuf) {
 80104ba:	68fb      	ldr	r3, [r7, #12]
 80104bc:	685b      	ldr	r3, [r3, #4]
 80104be:	2b00      	cmp	r3, #0
 80104c0:	d003      	beq.n	80104ca <lwip_recv_tcp+0x7e>
      p = sock->lastdata.pbuf;
 80104c2:	68fb      	ldr	r3, [r7, #12]
 80104c4:	685b      	ldr	r3, [r3, #4]
 80104c6:	617b      	str	r3, [r7, #20]
 80104c8:	e036      	b.n	8010538 <lwip_recv_tcp+0xec>
    } else {
      /* No data was left from the previous operation, so we try to get
         some from the network. */
      err = netconn_recv_tcp_pbuf_flags(sock->conn, &p, apiflags);
 80104ca:	68fb      	ldr	r3, [r7, #12]
 80104cc:	681b      	ldr	r3, [r3, #0]
 80104ce:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80104d2:	f107 0114 	add.w	r1, r7, #20
 80104d6:	4618      	mov	r0, r3
 80104d8:	f7fd fd64 	bl	800dfa4 <netconn_recv_tcp_pbuf_flags>
 80104dc:	4603      	mov	r3, r0
 80104de:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: netconn_recv err=%d, pbuf=%p\n",
                                  err, (void *)p));

      if (err != ERR_OK) {
 80104e2:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 80104e6:	2b00      	cmp	r3, #0
 80104e8:	d019      	beq.n	801051e <lwip_recv_tcp+0xd2>
        if (recvd > 0) {
 80104ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104ec:	2b00      	cmp	r3, #0
 80104ee:	f300 808d 	bgt.w	801060c <lwip_recv_tcp+0x1c0>
          goto lwip_recv_tcp_done;
        }
        /* We should really do some error checking here. */
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: p == NULL, error is \"%s\"!\n",
                                    lwip_strerr(err)));
        sock_set_errno(sock, err_to_errno(err));
 80104f2:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 80104f6:	4618      	mov	r0, r3
 80104f8:	f7ff fba0 	bl	800fc3c <err_to_errno>
 80104fc:	61f8      	str	r0, [r7, #28]
 80104fe:	69fb      	ldr	r3, [r7, #28]
 8010500:	2b00      	cmp	r3, #0
 8010502:	d002      	beq.n	801050a <lwip_recv_tcp+0xbe>
 8010504:	4a55      	ldr	r2, [pc, #340]	; (801065c <lwip_recv_tcp+0x210>)
 8010506:	69fb      	ldr	r3, [r7, #28]
 8010508:	6013      	str	r3, [r2, #0]
        if (err == ERR_CLSD) {
 801050a:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 801050e:	f113 0f0f 	cmn.w	r3, #15
 8010512:	d101      	bne.n	8010518 <lwip_recv_tcp+0xcc>
          return 0;
 8010514:	2300      	movs	r3, #0
 8010516:	e094      	b.n	8010642 <lwip_recv_tcp+0x1f6>
        } else {
          return -1;
 8010518:	f04f 33ff 	mov.w	r3, #4294967295
 801051c:	e091      	b.n	8010642 <lwip_recv_tcp+0x1f6>
        }
      }
      LWIP_ASSERT("p != NULL", p != NULL);
 801051e:	697b      	ldr	r3, [r7, #20]
 8010520:	2b00      	cmp	r3, #0
 8010522:	d106      	bne.n	8010532 <lwip_recv_tcp+0xe6>
 8010524:	4b49      	ldr	r3, [pc, #292]	; (801064c <lwip_recv_tcp+0x200>)
 8010526:	f240 32c5 	movw	r2, #965	; 0x3c5
 801052a:	494d      	ldr	r1, [pc, #308]	; (8010660 <lwip_recv_tcp+0x214>)
 801052c:	4849      	ldr	r0, [pc, #292]	; (8010654 <lwip_recv_tcp+0x208>)
 801052e:	f00f ff8f 	bl	8020450 <iprintf>
      sock->lastdata.pbuf = p;
 8010532:	697a      	ldr	r2, [r7, #20]
 8010534:	68fb      	ldr	r3, [r7, #12]
 8010536:	605a      	str	r2, [r3, #4]
    }

    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: buflen=%"U16_F" recv_left=%d off=%d\n",
                                p->tot_len, (int)recv_left, (int)recvd));

    if (recv_left > p->tot_len) {
 8010538:	697b      	ldr	r3, [r7, #20]
 801053a:	891b      	ldrh	r3, [r3, #8]
 801053c:	461a      	mov	r2, r3
 801053e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010540:	4293      	cmp	r3, r2
 8010542:	dd03      	ble.n	801054c <lwip_recv_tcp+0x100>
      copylen = p->tot_len;
 8010544:	697b      	ldr	r3, [r7, #20]
 8010546:	891b      	ldrh	r3, [r3, #8]
 8010548:	847b      	strh	r3, [r7, #34]	; 0x22
 801054a:	e001      	b.n	8010550 <lwip_recv_tcp+0x104>
    } else {
      copylen = (u16_t)recv_left;
 801054c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801054e:	847b      	strh	r3, [r7, #34]	; 0x22
    }
    if (recvd + copylen < recvd) {
 8010550:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8010552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010554:	4413      	add	r3, r2
 8010556:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010558:	429a      	cmp	r2, r3
 801055a:	dd03      	ble.n	8010564 <lwip_recv_tcp+0x118>
      /* overflow */
      copylen = (u16_t)(SSIZE_MAX - recvd);
 801055c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801055e:	b29b      	uxth	r3, r3
 8010560:	43db      	mvns	r3, r3
 8010562:	847b      	strh	r3, [r7, #34]	; 0x22
    }

    /* copy the contents of the received buffer into
    the supplied memory pointer mem */
    pbuf_copy_partial(p, (u8_t *)mem + recvd, copylen, 0);
 8010564:	6978      	ldr	r0, [r7, #20]
 8010566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010568:	68ba      	ldr	r2, [r7, #8]
 801056a:	18d1      	adds	r1, r2, r3
 801056c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801056e:	2300      	movs	r3, #0
 8010570:	f002 fe4a 	bl	8013208 <pbuf_copy_partial>

    recvd += copylen;
 8010574:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010576:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010578:	4413      	add	r3, r2
 801057a:	62bb      	str	r3, [r7, #40]	; 0x28

    /* TCP combines multiple pbufs for one recv */
    LWIP_ASSERT("invalid copylen, len would underflow", recv_left >= copylen);
 801057c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801057e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010580:	429a      	cmp	r2, r3
 8010582:	da06      	bge.n	8010592 <lwip_recv_tcp+0x146>
 8010584:	4b31      	ldr	r3, [pc, #196]	; (801064c <lwip_recv_tcp+0x200>)
 8010586:	f240 32dd 	movw	r2, #989	; 0x3dd
 801058a:	4936      	ldr	r1, [pc, #216]	; (8010664 <lwip_recv_tcp+0x218>)
 801058c:	4831      	ldr	r0, [pc, #196]	; (8010654 <lwip_recv_tcp+0x208>)
 801058e:	f00f ff5f 	bl	8020450 <iprintf>
    recv_left -= copylen;
 8010592:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010594:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010596:	1ad3      	subs	r3, r2, r3
 8010598:	627b      	str	r3, [r7, #36]	; 0x24

    /* Unless we peek the incoming message... */
    if ((flags & MSG_PEEK) == 0) {
 801059a:	683b      	ldr	r3, [r7, #0]
 801059c:	f003 0301 	and.w	r3, r3, #1
 80105a0:	2b00      	cmp	r3, #0
 80105a2:	d123      	bne.n	80105ec <lwip_recv_tcp+0x1a0>
      /* ... check if there is data left in the pbuf */
      LWIP_ASSERT("invalid copylen", p->tot_len >= copylen);
 80105a4:	697b      	ldr	r3, [r7, #20]
 80105a6:	891b      	ldrh	r3, [r3, #8]
 80105a8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80105aa:	429a      	cmp	r2, r3
 80105ac:	d906      	bls.n	80105bc <lwip_recv_tcp+0x170>
 80105ae:	4b27      	ldr	r3, [pc, #156]	; (801064c <lwip_recv_tcp+0x200>)
 80105b0:	f240 32e3 	movw	r2, #995	; 0x3e3
 80105b4:	492c      	ldr	r1, [pc, #176]	; (8010668 <lwip_recv_tcp+0x21c>)
 80105b6:	4827      	ldr	r0, [pc, #156]	; (8010654 <lwip_recv_tcp+0x208>)
 80105b8:	f00f ff4a 	bl	8020450 <iprintf>
      if (p->tot_len - copylen > 0) {
 80105bc:	697b      	ldr	r3, [r7, #20]
 80105be:	891b      	ldrh	r3, [r3, #8]
 80105c0:	461a      	mov	r2, r3
 80105c2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80105c4:	1ad3      	subs	r3, r2, r3
 80105c6:	2b00      	cmp	r3, #0
 80105c8:	dd09      	ble.n	80105de <lwip_recv_tcp+0x192>
        /* If so, it should be saved in the sock structure for the next recv call.
           We store the pbuf but hide/free the consumed data: */
        sock->lastdata.pbuf = pbuf_free_header(p, copylen);
 80105ca:	697b      	ldr	r3, [r7, #20]
 80105cc:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80105ce:	4611      	mov	r1, r2
 80105d0:	4618      	mov	r0, r3
 80105d2:	f002 fbe0 	bl	8012d96 <pbuf_free_header>
 80105d6:	4602      	mov	r2, r0
 80105d8:	68fb      	ldr	r3, [r7, #12]
 80105da:	605a      	str	r2, [r3, #4]
 80105dc:	e006      	b.n	80105ec <lwip_recv_tcp+0x1a0>
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: lastdata now pbuf=%p\n", (void *)sock->lastdata.pbuf));
      } else {
        sock->lastdata.pbuf = NULL;
 80105de:	68fb      	ldr	r3, [r7, #12]
 80105e0:	2200      	movs	r2, #0
 80105e2:	605a      	str	r2, [r3, #4]
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: deleting pbuf=%p\n", (void *)p));
        pbuf_free(p);
 80105e4:	697b      	ldr	r3, [r7, #20]
 80105e6:	4618      	mov	r0, r3
 80105e8:	f002 fc08 	bl	8012dfc <pbuf_free>
      }
    }
    /* once we have some data to return, only add more if we don't need to wait */
    apiflags |= NETCONN_DONTBLOCK | NETCONN_NOFIN;
 80105ec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80105f0:	f043 0314 	orr.w	r3, r3, #20
 80105f4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    /* @todo: do we need to support peeking more than one pbuf? */
  } while ((recv_left > 0) && !(flags & MSG_PEEK));
 80105f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105fa:	2b00      	cmp	r3, #0
 80105fc:	dd08      	ble.n	8010610 <lwip_recv_tcp+0x1c4>
 80105fe:	683b      	ldr	r3, [r7, #0]
 8010600:	f003 0301 	and.w	r3, r3, #1
 8010604:	2b00      	cmp	r3, #0
 8010606:	f43f af58 	beq.w	80104ba <lwip_recv_tcp+0x6e>
lwip_recv_tcp_done:
 801060a:	e001      	b.n	8010610 <lwip_recv_tcp+0x1c4>
          goto lwip_recv_tcp_done;
 801060c:	bf00      	nop
 801060e:	e000      	b.n	8010612 <lwip_recv_tcp+0x1c6>
lwip_recv_tcp_done:
 8010610:	bf00      	nop
  if ((recvd > 0) && !(flags & MSG_PEEK)) {
 8010612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010614:	2b00      	cmp	r3, #0
 8010616:	dd0b      	ble.n	8010630 <lwip_recv_tcp+0x1e4>
 8010618:	683b      	ldr	r3, [r7, #0]
 801061a:	f003 0301 	and.w	r3, r3, #1
 801061e:	2b00      	cmp	r3, #0
 8010620:	d106      	bne.n	8010630 <lwip_recv_tcp+0x1e4>
    /* ensure window update after copying all data */
    netconn_tcp_recvd(sock->conn, (size_t)recvd);
 8010622:	68fb      	ldr	r3, [r7, #12]
 8010624:	681b      	ldr	r3, [r3, #0]
 8010626:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010628:	4611      	mov	r1, r2
 801062a:	4618      	mov	r0, r3
 801062c:	f7fd fc08 	bl	800de40 <netconn_tcp_recvd>
  }
  sock_set_errno(sock, 0);
 8010630:	2300      	movs	r3, #0
 8010632:	61bb      	str	r3, [r7, #24]
 8010634:	69bb      	ldr	r3, [r7, #24]
 8010636:	2b00      	cmp	r3, #0
 8010638:	d002      	beq.n	8010640 <lwip_recv_tcp+0x1f4>
 801063a:	4a08      	ldr	r2, [pc, #32]	; (801065c <lwip_recv_tcp+0x210>)
 801063c:	69bb      	ldr	r3, [r7, #24]
 801063e:	6013      	str	r3, [r2, #0]
  return recvd;
 8010640:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8010642:	4618      	mov	r0, r3
 8010644:	3730      	adds	r7, #48	; 0x30
 8010646:	46bd      	mov	sp, r7
 8010648:	bd80      	pop	{r7, pc}
 801064a:	bf00      	nop
 801064c:	08023ce0 	.word	0x08023ce0
 8010650:	08023dd8 	.word	0x08023dd8
 8010654:	08023d34 	.word	0x08023d34
 8010658:	08023de8 	.word	0x08023de8
 801065c:	24007f68 	.word	0x24007f68
 8010660:	08023e0c 	.word	0x08023e0c
 8010664:	08023e18 	.word	0x08023e18
 8010668:	08023e40 	.word	0x08023e40

0801066c <lwip_sock_make_addr>:

/* Convert a netbuf's address data to struct sockaddr */
static int
lwip_sock_make_addr(struct netconn *conn, ip_addr_t *fromaddr, u16_t port,
                    struct sockaddr *from, socklen_t *fromlen)
{
 801066c:	b590      	push	{r4, r7, lr}
 801066e:	b08b      	sub	sp, #44	; 0x2c
 8010670:	af00      	add	r7, sp, #0
 8010672:	60f8      	str	r0, [r7, #12]
 8010674:	60b9      	str	r1, [r7, #8]
 8010676:	603b      	str	r3, [r7, #0]
 8010678:	4613      	mov	r3, r2
 801067a:	80fb      	strh	r3, [r7, #6]
  int truncated = 0;
 801067c:	2300      	movs	r3, #0
 801067e:	627b      	str	r3, [r7, #36]	; 0x24
  union sockaddr_aligned saddr;

  LWIP_UNUSED_ARG(conn);

  LWIP_ASSERT("fromaddr != NULL", fromaddr != NULL);
 8010680:	68bb      	ldr	r3, [r7, #8]
 8010682:	2b00      	cmp	r3, #0
 8010684:	d106      	bne.n	8010694 <lwip_sock_make_addr+0x28>
 8010686:	4b2b      	ldr	r3, [pc, #172]	; (8010734 <lwip_sock_make_addr+0xc8>)
 8010688:	f240 4207 	movw	r2, #1031	; 0x407
 801068c:	492a      	ldr	r1, [pc, #168]	; (8010738 <lwip_sock_make_addr+0xcc>)
 801068e:	482b      	ldr	r0, [pc, #172]	; (801073c <lwip_sock_make_addr+0xd0>)
 8010690:	f00f fede 	bl	8020450 <iprintf>
  LWIP_ASSERT("from != NULL", from != NULL);
 8010694:	683b      	ldr	r3, [r7, #0]
 8010696:	2b00      	cmp	r3, #0
 8010698:	d106      	bne.n	80106a8 <lwip_sock_make_addr+0x3c>
 801069a:	4b26      	ldr	r3, [pc, #152]	; (8010734 <lwip_sock_make_addr+0xc8>)
 801069c:	f44f 6281 	mov.w	r2, #1032	; 0x408
 80106a0:	4927      	ldr	r1, [pc, #156]	; (8010740 <lwip_sock_make_addr+0xd4>)
 80106a2:	4826      	ldr	r0, [pc, #152]	; (801073c <lwip_sock_make_addr+0xd0>)
 80106a4:	f00f fed4 	bl	8020450 <iprintf>
  LWIP_ASSERT("fromlen != NULL", fromlen != NULL);
 80106a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106aa:	2b00      	cmp	r3, #0
 80106ac:	d106      	bne.n	80106bc <lwip_sock_make_addr+0x50>
 80106ae:	4b21      	ldr	r3, [pc, #132]	; (8010734 <lwip_sock_make_addr+0xc8>)
 80106b0:	f240 4209 	movw	r2, #1033	; 0x409
 80106b4:	4923      	ldr	r1, [pc, #140]	; (8010744 <lwip_sock_make_addr+0xd8>)
 80106b6:	4821      	ldr	r0, [pc, #132]	; (801073c <lwip_sock_make_addr+0xd0>)
 80106b8:	f00f feca 	bl	8020450 <iprintf>
    ip4_2_ipv4_mapped_ipv6(ip_2_ip6(fromaddr), ip_2_ip4(fromaddr));
    IP_SET_TYPE(fromaddr, IPADDR_TYPE_V6);
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  IPADDR_PORT_TO_SOCKADDR(&saddr, fromaddr, port);
 80106bc:	f107 0314 	add.w	r3, r7, #20
 80106c0:	2210      	movs	r2, #16
 80106c2:	701a      	strb	r2, [r3, #0]
 80106c4:	f107 0314 	add.w	r3, r7, #20
 80106c8:	2202      	movs	r2, #2
 80106ca:	705a      	strb	r2, [r3, #1]
 80106cc:	f107 0414 	add.w	r4, r7, #20
 80106d0:	88fb      	ldrh	r3, [r7, #6]
 80106d2:	4618      	mov	r0, r3
 80106d4:	f000 feaa 	bl	801142c <lwip_htons>
 80106d8:	4603      	mov	r3, r0
 80106da:	8063      	strh	r3, [r4, #2]
 80106dc:	f107 0314 	add.w	r3, r7, #20
 80106e0:	68ba      	ldr	r2, [r7, #8]
 80106e2:	6812      	ldr	r2, [r2, #0]
 80106e4:	605a      	str	r2, [r3, #4]
 80106e6:	f107 0314 	add.w	r3, r7, #20
 80106ea:	3308      	adds	r3, #8
 80106ec:	2208      	movs	r2, #8
 80106ee:	2100      	movs	r1, #0
 80106f0:	4618      	mov	r0, r3
 80106f2:	f00f ff4c 	bl	802058e <memset>
  if (*fromlen < saddr.sa.sa_len) {
 80106f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106f8:	681b      	ldr	r3, [r3, #0]
 80106fa:	7d3a      	ldrb	r2, [r7, #20]
 80106fc:	4293      	cmp	r3, r2
 80106fe:	d202      	bcs.n	8010706 <lwip_sock_make_addr+0x9a>
    truncated = 1;
 8010700:	2301      	movs	r3, #1
 8010702:	627b      	str	r3, [r7, #36]	; 0x24
 8010704:	e008      	b.n	8010718 <lwip_sock_make_addr+0xac>
  } else if (*fromlen > saddr.sa.sa_len) {
 8010706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010708:	681b      	ldr	r3, [r3, #0]
 801070a:	7d3a      	ldrb	r2, [r7, #20]
 801070c:	4293      	cmp	r3, r2
 801070e:	d903      	bls.n	8010718 <lwip_sock_make_addr+0xac>
    *fromlen = saddr.sa.sa_len;
 8010710:	7d3b      	ldrb	r3, [r7, #20]
 8010712:	461a      	mov	r2, r3
 8010714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010716:	601a      	str	r2, [r3, #0]
  }
  MEMCPY(from, &saddr, *fromlen);
 8010718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801071a:	681a      	ldr	r2, [r3, #0]
 801071c:	f107 0314 	add.w	r3, r7, #20
 8010720:	4619      	mov	r1, r3
 8010722:	6838      	ldr	r0, [r7, #0]
 8010724:	f00f ffc5 	bl	80206b2 <memcpy>
  return truncated;
 8010728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801072a:	4618      	mov	r0, r3
 801072c:	372c      	adds	r7, #44	; 0x2c
 801072e:	46bd      	mov	sp, r7
 8010730:	bd90      	pop	{r4, r7, pc}
 8010732:	bf00      	nop
 8010734:	08023ce0 	.word	0x08023ce0
 8010738:	08023e50 	.word	0x08023e50
 801073c:	08023d34 	.word	0x08023d34
 8010740:	08023e64 	.word	0x08023e64
 8010744:	08023e74 	.word	0x08023e74

08010748 <lwip_recv_tcp_from>:

#if LWIP_TCP
/* Helper function to get a tcp socket's remote address info */
static int
lwip_recv_tcp_from(struct lwip_sock *sock, struct sockaddr *from, socklen_t *fromlen, const char *dbg_fn, int dbg_s, ssize_t dbg_ret)
{
 8010748:	b580      	push	{r7, lr}
 801074a:	b088      	sub	sp, #32
 801074c:	af02      	add	r7, sp, #8
 801074e:	60f8      	str	r0, [r7, #12]
 8010750:	60b9      	str	r1, [r7, #8]
 8010752:	607a      	str	r2, [r7, #4]
 8010754:	603b      	str	r3, [r7, #0]
  if (sock == NULL) {
 8010756:	68fb      	ldr	r3, [r7, #12]
 8010758:	2b00      	cmp	r3, #0
 801075a:	d101      	bne.n	8010760 <lwip_recv_tcp_from+0x18>
    return 0;
 801075c:	2300      	movs	r3, #0
 801075e:	e021      	b.n	80107a4 <lwip_recv_tcp_from+0x5c>
  LWIP_UNUSED_ARG(dbg_fn);
  LWIP_UNUSED_ARG(dbg_s);
  LWIP_UNUSED_ARG(dbg_ret);

#if !SOCKETS_DEBUG
  if (from && fromlen)
 8010760:	68bb      	ldr	r3, [r7, #8]
 8010762:	2b00      	cmp	r3, #0
 8010764:	d01d      	beq.n	80107a2 <lwip_recv_tcp_from+0x5a>
 8010766:	687b      	ldr	r3, [r7, #4]
 8010768:	2b00      	cmp	r3, #0
 801076a:	d01a      	beq.n	80107a2 <lwip_recv_tcp_from+0x5a>
#endif /* !SOCKETS_DEBUG */
  {
    /* get remote addr/port from tcp_pcb */
    u16_t port;
    ip_addr_t tmpaddr;
    netconn_getaddr(sock->conn, &tmpaddr, &port, 0);
 801076c:	68fb      	ldr	r3, [r7, #12]
 801076e:	6818      	ldr	r0, [r3, #0]
 8010770:	f107 0216 	add.w	r2, r7, #22
 8010774:	f107 0110 	add.w	r1, r7, #16
 8010778:	2300      	movs	r3, #0
 801077a:	f7fd f927 	bl	800d9cc <netconn_getaddr>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("%s(%d):  addr=", dbg_fn, dbg_s));
    ip_addr_debug_print_val(SOCKETS_DEBUG, tmpaddr);
    LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F" len=%d\n", port, (int)dbg_ret));
    if (from && fromlen) {
 801077e:	68bb      	ldr	r3, [r7, #8]
 8010780:	2b00      	cmp	r3, #0
 8010782:	d00e      	beq.n	80107a2 <lwip_recv_tcp_from+0x5a>
 8010784:	687b      	ldr	r3, [r7, #4]
 8010786:	2b00      	cmp	r3, #0
 8010788:	d00b      	beq.n	80107a2 <lwip_recv_tcp_from+0x5a>
      return lwip_sock_make_addr(sock->conn, &tmpaddr, port, from, fromlen);
 801078a:	68fb      	ldr	r3, [r7, #12]
 801078c:	6818      	ldr	r0, [r3, #0]
 801078e:	8afa      	ldrh	r2, [r7, #22]
 8010790:	f107 0110 	add.w	r1, r7, #16
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	9300      	str	r3, [sp, #0]
 8010798:	68bb      	ldr	r3, [r7, #8]
 801079a:	f7ff ff67 	bl	801066c <lwip_sock_make_addr>
 801079e:	4603      	mov	r3, r0
 80107a0:	e000      	b.n	80107a4 <lwip_recv_tcp_from+0x5c>
    }
  }
  return 0;
 80107a2:	2300      	movs	r3, #0
}
 80107a4:	4618      	mov	r0, r3
 80107a6:	3718      	adds	r7, #24
 80107a8:	46bd      	mov	sp, r7
 80107aa:	bd80      	pop	{r7, pc}

080107ac <lwip_recvfrom_udp_raw>:
/* Helper function to receive a netbuf from a udp or raw netconn.
 * Keeps sock->lastdata for peeking.
 */
static err_t
lwip_recvfrom_udp_raw(struct lwip_sock *sock, int flags, struct msghdr *msg, u16_t *datagram_len, int dbg_s)
{
 80107ac:	b590      	push	{r4, r7, lr}
 80107ae:	b08d      	sub	sp, #52	; 0x34
 80107b0:	af02      	add	r7, sp, #8
 80107b2:	60f8      	str	r0, [r7, #12]
 80107b4:	60b9      	str	r1, [r7, #8]
 80107b6:	607a      	str	r2, [r7, #4]
 80107b8:	603b      	str	r3, [r7, #0]
  err_t err;
  u16_t buflen, copylen, copied;
  int i;

  LWIP_UNUSED_ARG(dbg_s);
  LWIP_ERROR("lwip_recvfrom_udp_raw: invalid arguments", (msg->msg_iov != NULL) || (msg->msg_iovlen <= 0), return ERR_ARG;);
 80107ba:	687b      	ldr	r3, [r7, #4]
 80107bc:	689b      	ldr	r3, [r3, #8]
 80107be:	2b00      	cmp	r3, #0
 80107c0:	d10d      	bne.n	80107de <lwip_recvfrom_udp_raw+0x32>
 80107c2:	687b      	ldr	r3, [r7, #4]
 80107c4:	68db      	ldr	r3, [r3, #12]
 80107c6:	2b00      	cmp	r3, #0
 80107c8:	dd09      	ble.n	80107de <lwip_recvfrom_udp_raw+0x32>
 80107ca:	4b5e      	ldr	r3, [pc, #376]	; (8010944 <lwip_recvfrom_udp_raw+0x198>)
 80107cc:	f240 4249 	movw	r2, #1097	; 0x449
 80107d0:	495d      	ldr	r1, [pc, #372]	; (8010948 <lwip_recvfrom_udp_raw+0x19c>)
 80107d2:	485e      	ldr	r0, [pc, #376]	; (801094c <lwip_recvfrom_udp_raw+0x1a0>)
 80107d4:	f00f fe3c 	bl	8020450 <iprintf>
 80107d8:	f06f 030f 	mvn.w	r3, #15
 80107dc:	e0ad      	b.n	801093a <lwip_recvfrom_udp_raw+0x18e>

  if (flags & MSG_DONTWAIT) {
 80107de:	68bb      	ldr	r3, [r7, #8]
 80107e0:	f003 0308 	and.w	r3, r3, #8
 80107e4:	2b00      	cmp	r3, #0
 80107e6:	d003      	beq.n	80107f0 <lwip_recvfrom_udp_raw+0x44>
    apiflags = NETCONN_DONTBLOCK;
 80107e8:	2304      	movs	r3, #4
 80107ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80107ee:	e002      	b.n	80107f6 <lwip_recvfrom_udp_raw+0x4a>
  } else {
    apiflags = 0;
 80107f0:	2300      	movs	r3, #0
 80107f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw[UDP/RAW]: top sock->lastdata=%p\n", (void *)sock->lastdata.netbuf));
  /* Check if there is data left from the last recv operation. */
  buf = sock->lastdata.netbuf;
 80107f6:	68fb      	ldr	r3, [r7, #12]
 80107f8:	685b      	ldr	r3, [r3, #4]
 80107fa:	613b      	str	r3, [r7, #16]
  if (buf == NULL) {
 80107fc:	693b      	ldr	r3, [r7, #16]
 80107fe:	2b00      	cmp	r3, #0
 8010800:	d11e      	bne.n	8010840 <lwip_recvfrom_udp_raw+0x94>
    /* No data was left from the previous operation, so we try to get
        some from the network. */
    err = netconn_recv_udp_raw_netbuf_flags(sock->conn, &buf, apiflags);
 8010802:	68fb      	ldr	r3, [r7, #12]
 8010804:	681b      	ldr	r3, [r3, #0]
 8010806:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801080a:	f107 0110 	add.w	r1, r7, #16
 801080e:	4618      	mov	r0, r3
 8010810:	f7fd fbf4 	bl	800dffc <netconn_recv_udp_raw_netbuf_flags>
 8010814:	4603      	mov	r3, r0
 8010816:	76fb      	strb	r3, [r7, #27]
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw[UDP/RAW]: netconn_recv err=%d, netbuf=%p\n",
                                err, (void *)buf));

    if (err != ERR_OK) {
 8010818:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801081c:	2b00      	cmp	r3, #0
 801081e:	d002      	beq.n	8010826 <lwip_recvfrom_udp_raw+0x7a>
      return err;
 8010820:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8010824:	e089      	b.n	801093a <lwip_recvfrom_udp_raw+0x18e>
    }
    LWIP_ASSERT("buf != NULL", buf != NULL);
 8010826:	693b      	ldr	r3, [r7, #16]
 8010828:	2b00      	cmp	r3, #0
 801082a:	d106      	bne.n	801083a <lwip_recvfrom_udp_raw+0x8e>
 801082c:	4b45      	ldr	r3, [pc, #276]	; (8010944 <lwip_recvfrom_udp_raw+0x198>)
 801082e:	f240 425e 	movw	r2, #1118	; 0x45e
 8010832:	4947      	ldr	r1, [pc, #284]	; (8010950 <lwip_recvfrom_udp_raw+0x1a4>)
 8010834:	4845      	ldr	r0, [pc, #276]	; (801094c <lwip_recvfrom_udp_raw+0x1a0>)
 8010836:	f00f fe0b 	bl	8020450 <iprintf>
    sock->lastdata.netbuf = buf;
 801083a:	693a      	ldr	r2, [r7, #16]
 801083c:	68fb      	ldr	r3, [r7, #12]
 801083e:	605a      	str	r2, [r3, #4]
  }
  buflen = buf->p->tot_len;
 8010840:	693b      	ldr	r3, [r7, #16]
 8010842:	681b      	ldr	r3, [r3, #0]
 8010844:	891b      	ldrh	r3, [r3, #8]
 8010846:	833b      	strh	r3, [r7, #24]
  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw: buflen=%"U16_F"\n", buflen));

  copied = 0;
 8010848:	2300      	movs	r3, #0
 801084a:	847b      	strh	r3, [r7, #34]	; 0x22
  /* copy the pbuf payload into the iovs */
  for (i = 0; (i < msg->msg_iovlen) && (copied < buflen); i++) {
 801084c:	2300      	movs	r3, #0
 801084e:	61fb      	str	r3, [r7, #28]
 8010850:	e029      	b.n	80108a6 <lwip_recvfrom_udp_raw+0xfa>
    u16_t len_left = (u16_t)(buflen - copied);
 8010852:	8b3a      	ldrh	r2, [r7, #24]
 8010854:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010856:	1ad3      	subs	r3, r2, r3
 8010858:	82fb      	strh	r3, [r7, #22]
    if (msg->msg_iov[i].iov_len > len_left) {
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	689a      	ldr	r2, [r3, #8]
 801085e:	69fb      	ldr	r3, [r7, #28]
 8010860:	00db      	lsls	r3, r3, #3
 8010862:	4413      	add	r3, r2
 8010864:	685a      	ldr	r2, [r3, #4]
 8010866:	8afb      	ldrh	r3, [r7, #22]
 8010868:	429a      	cmp	r2, r3
 801086a:	d902      	bls.n	8010872 <lwip_recvfrom_udp_raw+0xc6>
      copylen = len_left;
 801086c:	8afb      	ldrh	r3, [r7, #22]
 801086e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8010870:	e006      	b.n	8010880 <lwip_recvfrom_udp_raw+0xd4>
    } else {
      copylen = (u16_t)msg->msg_iov[i].iov_len;
 8010872:	687b      	ldr	r3, [r7, #4]
 8010874:	689a      	ldr	r2, [r3, #8]
 8010876:	69fb      	ldr	r3, [r7, #28]
 8010878:	00db      	lsls	r3, r3, #3
 801087a:	4413      	add	r3, r2
 801087c:	685b      	ldr	r3, [r3, #4]
 801087e:	84bb      	strh	r3, [r7, #36]	; 0x24
    }

    /* copy the contents of the received buffer into
        the supplied memory buffer */
    pbuf_copy_partial(buf->p, (u8_t *)msg->msg_iov[i].iov_base, copylen, copied);
 8010880:	693b      	ldr	r3, [r7, #16]
 8010882:	6818      	ldr	r0, [r3, #0]
 8010884:	687b      	ldr	r3, [r7, #4]
 8010886:	689a      	ldr	r2, [r3, #8]
 8010888:	69fb      	ldr	r3, [r7, #28]
 801088a:	00db      	lsls	r3, r3, #3
 801088c:	4413      	add	r3, r2
 801088e:	6819      	ldr	r1, [r3, #0]
 8010890:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010892:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8010894:	f002 fcb8 	bl	8013208 <pbuf_copy_partial>
    copied = (u16_t)(copied + copylen);
 8010898:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801089a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801089c:	4413      	add	r3, r2
 801089e:	847b      	strh	r3, [r7, #34]	; 0x22
  for (i = 0; (i < msg->msg_iovlen) && (copied < buflen); i++) {
 80108a0:	69fb      	ldr	r3, [r7, #28]
 80108a2:	3301      	adds	r3, #1
 80108a4:	61fb      	str	r3, [r7, #28]
 80108a6:	687b      	ldr	r3, [r7, #4]
 80108a8:	68db      	ldr	r3, [r3, #12]
 80108aa:	69fa      	ldr	r2, [r7, #28]
 80108ac:	429a      	cmp	r2, r3
 80108ae:	da03      	bge.n	80108b8 <lwip_recvfrom_udp_raw+0x10c>
 80108b0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80108b2:	8b3b      	ldrh	r3, [r7, #24]
 80108b4:	429a      	cmp	r2, r3
 80108b6:	d3cc      	bcc.n	8010852 <lwip_recvfrom_udp_raw+0xa6>
  }

  /* Check to see from where the data was.*/
#if !SOCKETS_DEBUG
  if (msg->msg_name && msg->msg_namelen)
 80108b8:	687b      	ldr	r3, [r7, #4]
 80108ba:	681b      	ldr	r3, [r3, #0]
 80108bc:	2b00      	cmp	r3, #0
 80108be:	d01a      	beq.n	80108f6 <lwip_recvfrom_udp_raw+0x14a>
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	685b      	ldr	r3, [r3, #4]
 80108c4:	2b00      	cmp	r3, #0
 80108c6:	d016      	beq.n	80108f6 <lwip_recvfrom_udp_raw+0x14a>
#endif /* !SOCKETS_DEBUG */
  {
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw(%d):  addr=", dbg_s));
    ip_addr_debug_print_val(SOCKETS_DEBUG, *netbuf_fromaddr(buf));
    LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F" len=%d\n", netbuf_fromport(buf), copied));
    if (msg->msg_name && msg->msg_namelen) {
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	681b      	ldr	r3, [r3, #0]
 80108cc:	2b00      	cmp	r3, #0
 80108ce:	d012      	beq.n	80108f6 <lwip_recvfrom_udp_raw+0x14a>
 80108d0:	687b      	ldr	r3, [r7, #4]
 80108d2:	685b      	ldr	r3, [r3, #4]
 80108d4:	2b00      	cmp	r3, #0
 80108d6:	d00e      	beq.n	80108f6 <lwip_recvfrom_udp_raw+0x14a>
      lwip_sock_make_addr(sock->conn, netbuf_fromaddr(buf), netbuf_fromport(buf),
 80108d8:	68fb      	ldr	r3, [r7, #12]
 80108da:	6818      	ldr	r0, [r3, #0]
 80108dc:	693b      	ldr	r3, [r7, #16]
 80108de:	f103 0108 	add.w	r1, r3, #8
 80108e2:	693b      	ldr	r3, [r7, #16]
 80108e4:	899a      	ldrh	r2, [r3, #12]
                          (struct sockaddr *)msg->msg_name, &msg->msg_namelen);
 80108e6:	687b      	ldr	r3, [r7, #4]
 80108e8:	681c      	ldr	r4, [r3, #0]
      lwip_sock_make_addr(sock->conn, netbuf_fromaddr(buf), netbuf_fromport(buf),
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	3304      	adds	r3, #4
 80108ee:	9300      	str	r3, [sp, #0]
 80108f0:	4623      	mov	r3, r4
 80108f2:	f7ff febb 	bl	801066c <lwip_sock_make_addr>
    }
  }

  /* Initialize flag output */
  msg->msg_flags = 0;
 80108f6:	687b      	ldr	r3, [r7, #4]
 80108f8:	2200      	movs	r2, #0
 80108fa:	619a      	str	r2, [r3, #24]

  if (msg->msg_control) {
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	691b      	ldr	r3, [r3, #16]
 8010900:	2b00      	cmp	r3, #0
 8010902:	d007      	beq.n	8010914 <lwip_recvfrom_udp_raw+0x168>
    u8_t wrote_msg = 0;
 8010904:	2300      	movs	r3, #0
 8010906:	757b      	strb	r3, [r7, #21]
#endif /* LWIP_IPV4 */
      }
    }
#endif /* LWIP_NETBUF_RECVINFO */

    if (!wrote_msg) {
 8010908:	7d7b      	ldrb	r3, [r7, #21]
 801090a:	2b00      	cmp	r3, #0
 801090c:	d102      	bne.n	8010914 <lwip_recvfrom_udp_raw+0x168>
      msg->msg_controllen = 0;
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	2200      	movs	r2, #0
 8010912:	615a      	str	r2, [r3, #20]
    }
  }

  /* If we don't peek the incoming message: zero lastdata pointer and free the netbuf */
  if ((flags & MSG_PEEK) == 0) {
 8010914:	68bb      	ldr	r3, [r7, #8]
 8010916:	f003 0301 	and.w	r3, r3, #1
 801091a:	2b00      	cmp	r3, #0
 801091c:	d106      	bne.n	801092c <lwip_recvfrom_udp_raw+0x180>
    sock->lastdata.netbuf = NULL;
 801091e:	68fb      	ldr	r3, [r7, #12]
 8010920:	2200      	movs	r2, #0
 8010922:	605a      	str	r2, [r3, #4]
    netbuf_delete(buf);
 8010924:	693b      	ldr	r3, [r7, #16]
 8010926:	4618      	mov	r0, r3
 8010928:	f7ff f9a6 	bl	800fc78 <netbuf_delete>
  }
  if (datagram_len) {
 801092c:	683b      	ldr	r3, [r7, #0]
 801092e:	2b00      	cmp	r3, #0
 8010930:	d002      	beq.n	8010938 <lwip_recvfrom_udp_raw+0x18c>
    *datagram_len = buflen;
 8010932:	683b      	ldr	r3, [r7, #0]
 8010934:	8b3a      	ldrh	r2, [r7, #24]
 8010936:	801a      	strh	r2, [r3, #0]
  }
  return ERR_OK;
 8010938:	2300      	movs	r3, #0
}
 801093a:	4618      	mov	r0, r3
 801093c:	372c      	adds	r7, #44	; 0x2c
 801093e:	46bd      	mov	sp, r7
 8010940:	bd90      	pop	{r4, r7, pc}
 8010942:	bf00      	nop
 8010944:	08023ce0 	.word	0x08023ce0
 8010948:	08023e84 	.word	0x08023e84
 801094c:	08023d34 	.word	0x08023d34
 8010950:	08023eb0 	.word	0x08023eb0

08010954 <lwip_recvfrom>:

ssize_t
lwip_recvfrom(int s, void *mem, size_t len, int flags,
              struct sockaddr *from, socklen_t *fromlen)
{
 8010954:	b580      	push	{r7, lr}
 8010956:	b096      	sub	sp, #88	; 0x58
 8010958:	af02      	add	r7, sp, #8
 801095a:	60f8      	str	r0, [r7, #12]
 801095c:	60b9      	str	r1, [r7, #8]
 801095e:	607a      	str	r2, [r7, #4]
 8010960:	603b      	str	r3, [r7, #0]
  struct lwip_sock *sock;
  ssize_t ret;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom(%d, %p, %"SZT_F", 0x%x, ..)\n", s, mem, len, flags));
  sock = get_socket(s);
 8010962:	68f8      	ldr	r0, [r7, #12]
 8010964:	f7ff fa58 	bl	800fe18 <get_socket>
 8010968:	64f8      	str	r0, [r7, #76]	; 0x4c
  if (!sock) {
 801096a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801096c:	2b00      	cmp	r3, #0
 801096e:	d102      	bne.n	8010976 <lwip_recvfrom+0x22>
    return -1;
 8010970:	f04f 33ff 	mov.w	r3, #4294967295
 8010974:	e078      	b.n	8010a68 <lwip_recvfrom+0x114>
  }
#if LWIP_TCP
  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 8010976:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010978:	681b      	ldr	r3, [r3, #0]
 801097a:	781b      	ldrb	r3, [r3, #0]
 801097c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010980:	2b10      	cmp	r3, #16
 8010982:	d112      	bne.n	80109aa <lwip_recvfrom+0x56>
    ret = lwip_recv_tcp(sock, mem, len, flags);
 8010984:	683b      	ldr	r3, [r7, #0]
 8010986:	687a      	ldr	r2, [r7, #4]
 8010988:	68b9      	ldr	r1, [r7, #8]
 801098a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801098c:	f7ff fd5e 	bl	801044c <lwip_recv_tcp>
 8010990:	6478      	str	r0, [r7, #68]	; 0x44
    lwip_recv_tcp_from(sock, from, fromlen, "lwip_recvfrom", s, ret);
 8010992:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010994:	9301      	str	r3, [sp, #4]
 8010996:	68fb      	ldr	r3, [r7, #12]
 8010998:	9300      	str	r3, [sp, #0]
 801099a:	4b35      	ldr	r3, [pc, #212]	; (8010a70 <lwip_recvfrom+0x11c>)
 801099c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801099e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80109a0:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80109a2:	f7ff fed1 	bl	8010748 <lwip_recv_tcp_from>
    done_socket(sock);
    return ret;
 80109a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80109a8:	e05e      	b.n	8010a68 <lwip_recvfrom+0x114>
  } else
#endif
  {
    u16_t datagram_len = 0;
 80109aa:	2300      	movs	r3, #0
 80109ac:	877b      	strh	r3, [r7, #58]	; 0x3a
    struct iovec vec;
    struct msghdr msg;
    err_t err;
    vec.iov_base = mem;
 80109ae:	68bb      	ldr	r3, [r7, #8]
 80109b0:	633b      	str	r3, [r7, #48]	; 0x30
    vec.iov_len = len;
 80109b2:	687b      	ldr	r3, [r7, #4]
 80109b4:	637b      	str	r3, [r7, #52]	; 0x34
    msg.msg_control = NULL;
 80109b6:	2300      	movs	r3, #0
 80109b8:	627b      	str	r3, [r7, #36]	; 0x24
    msg.msg_controllen = 0;
 80109ba:	2300      	movs	r3, #0
 80109bc:	62bb      	str	r3, [r7, #40]	; 0x28
    msg.msg_flags = 0;
 80109be:	2300      	movs	r3, #0
 80109c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    msg.msg_iov = &vec;
 80109c2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80109c6:	61fb      	str	r3, [r7, #28]
    msg.msg_iovlen = 1;
 80109c8:	2301      	movs	r3, #1
 80109ca:	623b      	str	r3, [r7, #32]
    msg.msg_name = from;
 80109cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80109ce:	617b      	str	r3, [r7, #20]
    msg.msg_namelen = (fromlen ? *fromlen : 0);
 80109d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80109d2:	2b00      	cmp	r3, #0
 80109d4:	d002      	beq.n	80109dc <lwip_recvfrom+0x88>
 80109d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80109d8:	681b      	ldr	r3, [r3, #0]
 80109da:	e000      	b.n	80109de <lwip_recvfrom+0x8a>
 80109dc:	2300      	movs	r3, #0
 80109de:	61bb      	str	r3, [r7, #24]
    err = lwip_recvfrom_udp_raw(sock, flags, &msg, &datagram_len, s);
 80109e0:	f107 013a 	add.w	r1, r7, #58	; 0x3a
 80109e4:	f107 0214 	add.w	r2, r7, #20
 80109e8:	68fb      	ldr	r3, [r7, #12]
 80109ea:	9300      	str	r3, [sp, #0]
 80109ec:	460b      	mov	r3, r1
 80109ee:	6839      	ldr	r1, [r7, #0]
 80109f0:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80109f2:	f7ff fedb 	bl	80107ac <lwip_recvfrom_udp_raw>
 80109f6:	4603      	mov	r3, r0
 80109f8:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
    if (err != ERR_OK) {
 80109fc:	f997 304b 	ldrsb.w	r3, [r7, #75]	; 0x4b
 8010a00:	2b00      	cmp	r3, #0
 8010a02:	d00e      	beq.n	8010a22 <lwip_recvfrom+0xce>
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom[UDP/RAW](%d): buf == NULL, error is \"%s\"!\n",
                                  s, lwip_strerr(err)));
      sock_set_errno(sock, err_to_errno(err));
 8010a04:	f997 304b 	ldrsb.w	r3, [r7, #75]	; 0x4b
 8010a08:	4618      	mov	r0, r3
 8010a0a:	f7ff f917 	bl	800fc3c <err_to_errno>
 8010a0e:	63f8      	str	r0, [r7, #60]	; 0x3c
 8010a10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010a12:	2b00      	cmp	r3, #0
 8010a14:	d002      	beq.n	8010a1c <lwip_recvfrom+0xc8>
 8010a16:	4a17      	ldr	r2, [pc, #92]	; (8010a74 <lwip_recvfrom+0x120>)
 8010a18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010a1a:	6013      	str	r3, [r2, #0]
      done_socket(sock);
      return -1;
 8010a1c:	f04f 33ff 	mov.w	r3, #4294967295
 8010a20:	e022      	b.n	8010a68 <lwip_recvfrom+0x114>
    }
    ret = (ssize_t)LWIP_MIN(LWIP_MIN(len, datagram_len), SSIZE_MAX);
 8010a22:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010a24:	461a      	mov	r2, r3
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	4293      	cmp	r3, r2
 8010a2a:	bf28      	it	cs
 8010a2c:	4613      	movcs	r3, r2
 8010a2e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8010a32:	4293      	cmp	r3, r2
 8010a34:	d206      	bcs.n	8010a44 <lwip_recvfrom+0xf0>
 8010a36:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010a38:	461a      	mov	r2, r3
 8010a3a:	687b      	ldr	r3, [r7, #4]
 8010a3c:	4293      	cmp	r3, r2
 8010a3e:	bf28      	it	cs
 8010a40:	4613      	movcs	r3, r2
 8010a42:	e001      	b.n	8010a48 <lwip_recvfrom+0xf4>
 8010a44:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8010a48:	647b      	str	r3, [r7, #68]	; 0x44
    if (fromlen) {
 8010a4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010a4c:	2b00      	cmp	r3, #0
 8010a4e:	d002      	beq.n	8010a56 <lwip_recvfrom+0x102>
      *fromlen = msg.msg_namelen;
 8010a50:	69ba      	ldr	r2, [r7, #24]
 8010a52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010a54:	601a      	str	r2, [r3, #0]
    }
  }

  sock_set_errno(sock, 0);
 8010a56:	2300      	movs	r3, #0
 8010a58:	643b      	str	r3, [r7, #64]	; 0x40
 8010a5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010a5c:	2b00      	cmp	r3, #0
 8010a5e:	d002      	beq.n	8010a66 <lwip_recvfrom+0x112>
 8010a60:	4a04      	ldr	r2, [pc, #16]	; (8010a74 <lwip_recvfrom+0x120>)
 8010a62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010a64:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return ret;
 8010a66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8010a68:	4618      	mov	r0, r3
 8010a6a:	3750      	adds	r7, #80	; 0x50
 8010a6c:	46bd      	mov	sp, r7
 8010a6e:	bd80      	pop	{r7, pc}
 8010a70:	08023ebc 	.word	0x08023ebc
 8010a74:	24007f68 	.word	0x24007f68

08010a78 <lwip_read>:

ssize_t
lwip_read(int s, void *mem, size_t len)
{
 8010a78:	b580      	push	{r7, lr}
 8010a7a:	b086      	sub	sp, #24
 8010a7c:	af02      	add	r7, sp, #8
 8010a7e:	60f8      	str	r0, [r7, #12]
 8010a80:	60b9      	str	r1, [r7, #8]
 8010a82:	607a      	str	r2, [r7, #4]
  return lwip_recvfrom(s, mem, len, 0, NULL, NULL);
 8010a84:	2300      	movs	r3, #0
 8010a86:	9301      	str	r3, [sp, #4]
 8010a88:	2300      	movs	r3, #0
 8010a8a:	9300      	str	r3, [sp, #0]
 8010a8c:	2300      	movs	r3, #0
 8010a8e:	687a      	ldr	r2, [r7, #4]
 8010a90:	68b9      	ldr	r1, [r7, #8]
 8010a92:	68f8      	ldr	r0, [r7, #12]
 8010a94:	f7ff ff5e 	bl	8010954 <lwip_recvfrom>
 8010a98:	4603      	mov	r3, r0
}
 8010a9a:	4618      	mov	r0, r3
 8010a9c:	3710      	adds	r7, #16
 8010a9e:	46bd      	mov	sp, r7
 8010aa0:	bd80      	pop	{r7, pc}
	...

08010aa4 <lwip_send>:
#endif /* LWIP_UDP || LWIP_RAW */
}

ssize_t
lwip_send(int s, const void *data, size_t size, int flags)
{
 8010aa4:	b580      	push	{r7, lr}
 8010aa6:	b08a      	sub	sp, #40	; 0x28
 8010aa8:	af02      	add	r7, sp, #8
 8010aaa:	60f8      	str	r0, [r7, #12]
 8010aac:	60b9      	str	r1, [r7, #8]
 8010aae:	607a      	str	r2, [r7, #4]
 8010ab0:	603b      	str	r3, [r7, #0]
  size_t written;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d, data=%p, size=%"SZT_F", flags=0x%x)\n",
                              s, data, size, flags));

  sock = get_socket(s);
 8010ab2:	68f8      	ldr	r0, [r7, #12]
 8010ab4:	f7ff f9b0 	bl	800fe18 <get_socket>
 8010ab8:	61f8      	str	r0, [r7, #28]
  if (!sock) {
 8010aba:	69fb      	ldr	r3, [r7, #28]
 8010abc:	2b00      	cmp	r3, #0
 8010abe:	d102      	bne.n	8010ac6 <lwip_send+0x22>
    return -1;
 8010ac0:	f04f 33ff 	mov.w	r3, #4294967295
 8010ac4:	e046      	b.n	8010b54 <lwip_send+0xb0>
  }

  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
 8010ac6:	69fb      	ldr	r3, [r7, #28]
 8010ac8:	681b      	ldr	r3, [r3, #0]
 8010aca:	781b      	ldrb	r3, [r3, #0]
 8010acc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010ad0:	2b10      	cmp	r3, #16
 8010ad2:	d00b      	beq.n	8010aec <lwip_send+0x48>
#if (LWIP_UDP || LWIP_RAW)
    done_socket(sock);
    return lwip_sendto(s, data, size, flags, NULL, 0);
 8010ad4:	2300      	movs	r3, #0
 8010ad6:	9301      	str	r3, [sp, #4]
 8010ad8:	2300      	movs	r3, #0
 8010ada:	9300      	str	r3, [sp, #0]
 8010adc:	683b      	ldr	r3, [r7, #0]
 8010ade:	687a      	ldr	r2, [r7, #4]
 8010ae0:	68b9      	ldr	r1, [r7, #8]
 8010ae2:	68f8      	ldr	r0, [r7, #12]
 8010ae4:	f000 f83c 	bl	8010b60 <lwip_sendto>
 8010ae8:	4603      	mov	r3, r0
 8010aea:	e033      	b.n	8010b54 <lwip_send+0xb0>
    return -1;
#endif /* (LWIP_UDP || LWIP_RAW) */
  }

  write_flags = (u8_t)(NETCONN_COPY |
                       ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
 8010aec:	683b      	ldr	r3, [r7, #0]
 8010aee:	f003 0310 	and.w	r3, r3, #16
  write_flags = (u8_t)(NETCONN_COPY |
 8010af2:	2b00      	cmp	r3, #0
 8010af4:	d001      	beq.n	8010afa <lwip_send+0x56>
 8010af6:	2203      	movs	r2, #3
 8010af8:	e000      	b.n	8010afc <lwip_send+0x58>
 8010afa:	2201      	movs	r2, #1
                       ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
 8010afc:	683b      	ldr	r3, [r7, #0]
 8010afe:	105b      	asrs	r3, r3, #1
 8010b00:	b25b      	sxtb	r3, r3
 8010b02:	f003 0304 	and.w	r3, r3, #4
 8010b06:	b25b      	sxtb	r3, r3
 8010b08:	4313      	orrs	r3, r2
 8010b0a:	b25b      	sxtb	r3, r3
  write_flags = (u8_t)(NETCONN_COPY |
 8010b0c:	76fb      	strb	r3, [r7, #27]
                       ((flags & MSG_DONTWAIT) ? NETCONN_DONTBLOCK : 0));
  written = 0;
 8010b0e:	2300      	movs	r3, #0
 8010b10:	613b      	str	r3, [r7, #16]
  err = netconn_write_partly(sock->conn, data, size, write_flags, &written);
 8010b12:	69fb      	ldr	r3, [r7, #28]
 8010b14:	6818      	ldr	r0, [r3, #0]
 8010b16:	7efa      	ldrb	r2, [r7, #27]
 8010b18:	f107 0310 	add.w	r3, r7, #16
 8010b1c:	9300      	str	r3, [sp, #0]
 8010b1e:	4613      	mov	r3, r2
 8010b20:	687a      	ldr	r2, [r7, #4]
 8010b22:	68b9      	ldr	r1, [r7, #8]
 8010b24:	f7fd fac4 	bl	800e0b0 <netconn_write_partly>
 8010b28:	4603      	mov	r3, r0
 8010b2a:	76bb      	strb	r3, [r7, #26]

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d) err=%d written=%"SZT_F"\n", s, err, written));
  sock_set_errno(sock, err_to_errno(err));
 8010b2c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8010b30:	4618      	mov	r0, r3
 8010b32:	f7ff f883 	bl	800fc3c <err_to_errno>
 8010b36:	6178      	str	r0, [r7, #20]
 8010b38:	697b      	ldr	r3, [r7, #20]
 8010b3a:	2b00      	cmp	r3, #0
 8010b3c:	d002      	beq.n	8010b44 <lwip_send+0xa0>
 8010b3e:	4a07      	ldr	r2, [pc, #28]	; (8010b5c <lwip_send+0xb8>)
 8010b40:	697b      	ldr	r3, [r7, #20]
 8010b42:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  /* casting 'written' to ssize_t is OK here since the netconn API limits it to SSIZE_MAX */
  return (err == ERR_OK ? (ssize_t)written : -1);
 8010b44:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8010b48:	2b00      	cmp	r3, #0
 8010b4a:	d101      	bne.n	8010b50 <lwip_send+0xac>
 8010b4c:	693b      	ldr	r3, [r7, #16]
 8010b4e:	e001      	b.n	8010b54 <lwip_send+0xb0>
 8010b50:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010b54:	4618      	mov	r0, r3
 8010b56:	3720      	adds	r7, #32
 8010b58:	46bd      	mov	sp, r7
 8010b5a:	bd80      	pop	{r7, pc}
 8010b5c:	24007f68 	.word	0x24007f68

08010b60 <lwip_sendto>:
}

ssize_t
lwip_sendto(int s, const void *data, size_t size, int flags,
            const struct sockaddr *to, socklen_t tolen)
{
 8010b60:	b580      	push	{r7, lr}
 8010b62:	b08e      	sub	sp, #56	; 0x38
 8010b64:	af00      	add	r7, sp, #0
 8010b66:	60f8      	str	r0, [r7, #12]
 8010b68:	60b9      	str	r1, [r7, #8]
 8010b6a:	607a      	str	r2, [r7, #4]
 8010b6c:	603b      	str	r3, [r7, #0]
  err_t err;
  u16_t short_size;
  u16_t remote_port;
  struct netbuf buf;

  sock = get_socket(s);
 8010b6e:	68f8      	ldr	r0, [r7, #12]
 8010b70:	f7ff f952 	bl	800fe18 <get_socket>
 8010b74:	6338      	str	r0, [r7, #48]	; 0x30
  if (!sock) {
 8010b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b78:	2b00      	cmp	r3, #0
 8010b7a:	d102      	bne.n	8010b82 <lwip_sendto+0x22>
    return -1;
 8010b7c:	f04f 33ff 	mov.w	r3, #4294967295
 8010b80:	e093      	b.n	8010caa <lwip_sendto+0x14a>
  }

  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 8010b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b84:	681b      	ldr	r3, [r3, #0]
 8010b86:	781b      	ldrb	r3, [r3, #0]
 8010b88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010b8c:	2b10      	cmp	r3, #16
 8010b8e:	d107      	bne.n	8010ba0 <lwip_sendto+0x40>
#if LWIP_TCP
    done_socket(sock);
    return lwip_send(s, data, size, flags);
 8010b90:	683b      	ldr	r3, [r7, #0]
 8010b92:	687a      	ldr	r2, [r7, #4]
 8010b94:	68b9      	ldr	r1, [r7, #8]
 8010b96:	68f8      	ldr	r0, [r7, #12]
 8010b98:	f7ff ff84 	bl	8010aa4 <lwip_send>
 8010b9c:	4603      	mov	r3, r0
 8010b9e:	e084      	b.n	8010caa <lwip_sendto+0x14a>
    done_socket(sock);
    return -1;
#endif /* LWIP_TCP */
  }

  if (size > LWIP_MIN(0xFFFF, SSIZE_MAX)) {
 8010ba0:	687b      	ldr	r3, [r7, #4]
 8010ba2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010ba6:	d30a      	bcc.n	8010bbe <lwip_sendto+0x5e>
    /* cannot fit into one datagram (at least for us) */
    sock_set_errno(sock, EMSGSIZE);
 8010ba8:	235a      	movs	r3, #90	; 0x5a
 8010baa:	623b      	str	r3, [r7, #32]
 8010bac:	6a3b      	ldr	r3, [r7, #32]
 8010bae:	2b00      	cmp	r3, #0
 8010bb0:	d002      	beq.n	8010bb8 <lwip_sendto+0x58>
 8010bb2:	4a40      	ldr	r2, [pc, #256]	; (8010cb4 <lwip_sendto+0x154>)
 8010bb4:	6a3b      	ldr	r3, [r7, #32]
 8010bb6:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 8010bb8:	f04f 33ff 	mov.w	r3, #4294967295
 8010bbc:	e075      	b.n	8010caa <lwip_sendto+0x14a>
  }
  short_size = (u16_t)size;
 8010bbe:	687b      	ldr	r3, [r7, #4]
 8010bc0:	85fb      	strh	r3, [r7, #46]	; 0x2e
  LWIP_ERROR("lwip_sendto: invalid address", (((to == NULL) && (tolen == 0)) ||
 8010bc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010bc4:	2b00      	cmp	r3, #0
 8010bc6:	d102      	bne.n	8010bce <lwip_sendto+0x6e>
 8010bc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010bca:	2b00      	cmp	r3, #0
 8010bcc:	d023      	beq.n	8010c16 <lwip_sendto+0xb6>
 8010bce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010bd0:	2b10      	cmp	r3, #16
 8010bd2:	d10b      	bne.n	8010bec <lwip_sendto+0x8c>
 8010bd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010bd6:	2b00      	cmp	r3, #0
 8010bd8:	d008      	beq.n	8010bec <lwip_sendto+0x8c>
 8010bda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010bdc:	785b      	ldrb	r3, [r3, #1]
 8010bde:	2b02      	cmp	r3, #2
 8010be0:	d104      	bne.n	8010bec <lwip_sendto+0x8c>
 8010be2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010be4:	f003 0303 	and.w	r3, r3, #3
 8010be8:	2b00      	cmp	r3, #0
 8010bea:	d014      	beq.n	8010c16 <lwip_sendto+0xb6>
 8010bec:	4b32      	ldr	r3, [pc, #200]	; (8010cb8 <lwip_sendto+0x158>)
 8010bee:	f240 6252 	movw	r2, #1618	; 0x652
 8010bf2:	4932      	ldr	r1, [pc, #200]	; (8010cbc <lwip_sendto+0x15c>)
 8010bf4:	4832      	ldr	r0, [pc, #200]	; (8010cc0 <lwip_sendto+0x160>)
 8010bf6:	f00f fc2b 	bl	8020450 <iprintf>
 8010bfa:	f06f 000f 	mvn.w	r0, #15
 8010bfe:	f7ff f81d 	bl	800fc3c <err_to_errno>
 8010c02:	62b8      	str	r0, [r7, #40]	; 0x28
 8010c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c06:	2b00      	cmp	r3, #0
 8010c08:	d002      	beq.n	8010c10 <lwip_sendto+0xb0>
 8010c0a:	4a2a      	ldr	r2, [pc, #168]	; (8010cb4 <lwip_sendto+0x154>)
 8010c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c0e:	6013      	str	r3, [r2, #0]
 8010c10:	f04f 33ff 	mov.w	r3, #4294967295
 8010c14:	e049      	b.n	8010caa <lwip_sendto+0x14a>
              ((to != NULL) && (IS_SOCK_ADDR_TYPE_VALID(to) && IS_SOCK_ADDR_ALIGNED(to))))),
             sock_set_errno(sock, err_to_errno(ERR_ARG)); done_socket(sock); return -1;);
  LWIP_UNUSED_ARG(tolen);

  /* initialize a buffer */
  buf.p = buf.ptr = NULL;
 8010c16:	2300      	movs	r3, #0
 8010c18:	617b      	str	r3, [r7, #20]
 8010c1a:	697b      	ldr	r3, [r7, #20]
 8010c1c:	613b      	str	r3, [r7, #16]
#if LWIP_CHECKSUM_ON_COPY
  buf.flags = 0;
#endif /* LWIP_CHECKSUM_ON_COPY */
  if (to) {
 8010c1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010c20:	2b00      	cmp	r3, #0
 8010c22:	d00a      	beq.n	8010c3a <lwip_sendto+0xda>
    SOCKADDR_TO_IPADDR_PORT(to, &buf.addr, remote_port);
 8010c24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010c26:	685b      	ldr	r3, [r3, #4]
 8010c28:	61bb      	str	r3, [r7, #24]
 8010c2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010c2c:	885b      	ldrh	r3, [r3, #2]
 8010c2e:	4618      	mov	r0, r3
 8010c30:	f000 fbfc 	bl	801142c <lwip_htons>
 8010c34:	4603      	mov	r3, r0
 8010c36:	86bb      	strh	r3, [r7, #52]	; 0x34
 8010c38:	e003      	b.n	8010c42 <lwip_sendto+0xe2>
  } else {
    remote_port = 0;
 8010c3a:	2300      	movs	r3, #0
 8010c3c:	86bb      	strh	r3, [r7, #52]	; 0x34
    ip_addr_set_any(NETCONNTYPE_ISIPV6(netconn_type(sock->conn)), &buf.addr);
 8010c3e:	2300      	movs	r3, #0
 8010c40:	61bb      	str	r3, [r7, #24]
  }
  netbuf_fromport(&buf) = remote_port;
 8010c42:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8010c44:	83bb      	strh	r3, [r7, #28]
      MEMCPY(buf.p->payload, data, short_size);
    }
    err = ERR_OK;
  }
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  err = netbuf_ref(&buf, data, short_size);
 8010c46:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8010c48:	f107 0310 	add.w	r3, r7, #16
 8010c4c:	68b9      	ldr	r1, [r7, #8]
 8010c4e:	4618      	mov	r0, r3
 8010c50:	f7ff f85a 	bl	800fd08 <netbuf_ref>
 8010c54:	4603      	mov	r3, r0
 8010c56:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (err == ERR_OK) {
 8010c5a:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8010c5e:	2b00      	cmp	r3, #0
 8010c60:	d10a      	bne.n	8010c78 <lwip_sendto+0x118>
      IP_SET_TYPE_VAL(buf.addr, IPADDR_TYPE_V4);
    }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

    /* send the data */
    err = netconn_send(sock->conn, &buf);
 8010c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c64:	681b      	ldr	r3, [r3, #0]
 8010c66:	f107 0210 	add.w	r2, r7, #16
 8010c6a:	4611      	mov	r1, r2
 8010c6c:	4618      	mov	r0, r3
 8010c6e:	f7fd f9f1 	bl	800e054 <netconn_send>
 8010c72:	4603      	mov	r3, r0
 8010c74:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }

  /* deallocated the buffer */
  netbuf_free(&buf);
 8010c78:	f107 0310 	add.w	r3, r7, #16
 8010c7c:	4618      	mov	r0, r3
 8010c7e:	f7ff f81b 	bl	800fcb8 <netbuf_free>

  sock_set_errno(sock, err_to_errno(err));
 8010c82:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8010c86:	4618      	mov	r0, r3
 8010c88:	f7fe ffd8 	bl	800fc3c <err_to_errno>
 8010c8c:	6278      	str	r0, [r7, #36]	; 0x24
 8010c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c90:	2b00      	cmp	r3, #0
 8010c92:	d002      	beq.n	8010c9a <lwip_sendto+0x13a>
 8010c94:	4a07      	ldr	r2, [pc, #28]	; (8010cb4 <lwip_sendto+0x154>)
 8010c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c98:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return (err == ERR_OK ? short_size : -1);
 8010c9a:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8010c9e:	2b00      	cmp	r3, #0
 8010ca0:	d101      	bne.n	8010ca6 <lwip_sendto+0x146>
 8010ca2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010ca4:	e001      	b.n	8010caa <lwip_sendto+0x14a>
 8010ca6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010caa:	4618      	mov	r0, r3
 8010cac:	3738      	adds	r7, #56	; 0x38
 8010cae:	46bd      	mov	sp, r7
 8010cb0:	bd80      	pop	{r7, pc}
 8010cb2:	bf00      	nop
 8010cb4:	24007f68 	.word	0x24007f68
 8010cb8:	08023ce0 	.word	0x08023ce0
 8010cbc:	08023fc0 	.word	0x08023fc0
 8010cc0:	08023d34 	.word	0x08023d34

08010cc4 <lwip_socket>:

int
lwip_socket(int domain, int type, int protocol)
{
 8010cc4:	b580      	push	{r7, lr}
 8010cc6:	b086      	sub	sp, #24
 8010cc8:	af00      	add	r7, sp, #0
 8010cca:	60f8      	str	r0, [r7, #12]
 8010ccc:	60b9      	str	r1, [r7, #8]
 8010cce:	607a      	str	r2, [r7, #4]
  int i;

  LWIP_UNUSED_ARG(domain); /* @todo: check this */

  /* create a netconn */
  switch (type) {
 8010cd0:	68bb      	ldr	r3, [r7, #8]
 8010cd2:	2b03      	cmp	r3, #3
 8010cd4:	d009      	beq.n	8010cea <lwip_socket+0x26>
 8010cd6:	68bb      	ldr	r3, [r7, #8]
 8010cd8:	2b03      	cmp	r3, #3
 8010cda:	dc23      	bgt.n	8010d24 <lwip_socket+0x60>
 8010cdc:	68bb      	ldr	r3, [r7, #8]
 8010cde:	2b01      	cmp	r3, #1
 8010ce0:	d019      	beq.n	8010d16 <lwip_socket+0x52>
 8010ce2:	68bb      	ldr	r3, [r7, #8]
 8010ce4:	2b02      	cmp	r3, #2
 8010ce6:	d009      	beq.n	8010cfc <lwip_socket+0x38>
 8010ce8:	e01c      	b.n	8010d24 <lwip_socket+0x60>
    case SOCK_RAW:
      conn = netconn_new_with_proto_and_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_RAW),
 8010cea:	687b      	ldr	r3, [r7, #4]
 8010cec:	b2db      	uxtb	r3, r3
 8010cee:	4a22      	ldr	r2, [pc, #136]	; (8010d78 <lwip_socket+0xb4>)
 8010cf0:	4619      	mov	r1, r3
 8010cf2:	2040      	movs	r0, #64	; 0x40
 8010cf4:	f7fc fdb0 	bl	800d858 <netconn_new_with_proto_and_callback>
 8010cf8:	6178      	str	r0, [r7, #20]
             (u8_t)protocol, DEFAULT_SOCKET_EVENTCB);
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_RAW, %d) = ",
                                  domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
      break;
 8010cfa:	e019      	b.n	8010d30 <lwip_socket+0x6c>
    case SOCK_DGRAM:
      conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain,
 8010cfc:	687b      	ldr	r3, [r7, #4]
 8010cfe:	2b88      	cmp	r3, #136	; 0x88
 8010d00:	d101      	bne.n	8010d06 <lwip_socket+0x42>
 8010d02:	2321      	movs	r3, #33	; 0x21
 8010d04:	e000      	b.n	8010d08 <lwip_socket+0x44>
 8010d06:	2320      	movs	r3, #32
 8010d08:	4a1b      	ldr	r2, [pc, #108]	; (8010d78 <lwip_socket+0xb4>)
 8010d0a:	2100      	movs	r1, #0
 8010d0c:	4618      	mov	r0, r3
 8010d0e:	f7fc fda3 	bl	800d858 <netconn_new_with_proto_and_callback>
 8010d12:	6178      	str	r0, [r7, #20]
      if (conn) {
        /* netconn layer enables pktinfo by default, sockets default to off */
        conn->flags &= ~NETCONN_FLAG_PKTINFO;
      }
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 8010d14:	e00c      	b.n	8010d30 <lwip_socket+0x6c>
    case SOCK_STREAM:
      conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_TCP), DEFAULT_SOCKET_EVENTCB);
 8010d16:	4a18      	ldr	r2, [pc, #96]	; (8010d78 <lwip_socket+0xb4>)
 8010d18:	2100      	movs	r1, #0
 8010d1a:	2010      	movs	r0, #16
 8010d1c:	f7fc fd9c 	bl	800d858 <netconn_new_with_proto_and_callback>
 8010d20:	6178      	str	r0, [r7, #20]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_STREAM, %d) = ",
                                  domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
      break;
 8010d22:	e005      	b.n	8010d30 <lwip_socket+0x6c>
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%d, %d/UNKNOWN, %d) = -1\n",
                                  domain, type, protocol));
      set_errno(EINVAL);
 8010d24:	4b15      	ldr	r3, [pc, #84]	; (8010d7c <lwip_socket+0xb8>)
 8010d26:	2216      	movs	r2, #22
 8010d28:	601a      	str	r2, [r3, #0]
      return -1;
 8010d2a:	f04f 33ff 	mov.w	r3, #4294967295
 8010d2e:	e01e      	b.n	8010d6e <lwip_socket+0xaa>
  }

  if (!conn) {
 8010d30:	697b      	ldr	r3, [r7, #20]
 8010d32:	2b00      	cmp	r3, #0
 8010d34:	d105      	bne.n	8010d42 <lwip_socket+0x7e>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("-1 / ENOBUFS (could not create netconn)\n"));
    set_errno(ENOBUFS);
 8010d36:	4b11      	ldr	r3, [pc, #68]	; (8010d7c <lwip_socket+0xb8>)
 8010d38:	2269      	movs	r2, #105	; 0x69
 8010d3a:	601a      	str	r2, [r3, #0]
    return -1;
 8010d3c:	f04f 33ff 	mov.w	r3, #4294967295
 8010d40:	e015      	b.n	8010d6e <lwip_socket+0xaa>
  }

  i = alloc_socket(conn, 0);
 8010d42:	2100      	movs	r1, #0
 8010d44:	6978      	ldr	r0, [r7, #20]
 8010d46:	f7ff f87f 	bl	800fe48 <alloc_socket>
 8010d4a:	6138      	str	r0, [r7, #16]

  if (i == -1) {
 8010d4c:	693b      	ldr	r3, [r7, #16]
 8010d4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010d52:	d108      	bne.n	8010d66 <lwip_socket+0xa2>
    netconn_delete(conn);
 8010d54:	6978      	ldr	r0, [r7, #20]
 8010d56:	f7fc fe1d 	bl	800d994 <netconn_delete>
    set_errno(ENFILE);
 8010d5a:	4b08      	ldr	r3, [pc, #32]	; (8010d7c <lwip_socket+0xb8>)
 8010d5c:	2217      	movs	r2, #23
 8010d5e:	601a      	str	r2, [r3, #0]
    return -1;
 8010d60:	f04f 33ff 	mov.w	r3, #4294967295
 8010d64:	e003      	b.n	8010d6e <lwip_socket+0xaa>
  }
  conn->socket = i;
 8010d66:	697b      	ldr	r3, [r7, #20]
 8010d68:	693a      	ldr	r2, [r7, #16]
 8010d6a:	619a      	str	r2, [r3, #24]
  done_socket(&sockets[i - LWIP_SOCKET_OFFSET]);
  LWIP_DEBUGF(SOCKETS_DEBUG, ("%d\n", i));
  set_errno(0);
  return i;
 8010d6c:	693b      	ldr	r3, [r7, #16]
}
 8010d6e:	4618      	mov	r0, r3
 8010d70:	3718      	adds	r7, #24
 8010d72:	46bd      	mov	sp, r7
 8010d74:	bd80      	pop	{r7, pc}
 8010d76:	bf00      	nop
 8010d78:	08010e29 	.word	0x08010e29
 8010d7c:	24007f68 	.word	0x24007f68

08010d80 <lwip_write>:

ssize_t
lwip_write(int s, const void *data, size_t size)
{
 8010d80:	b580      	push	{r7, lr}
 8010d82:	b084      	sub	sp, #16
 8010d84:	af00      	add	r7, sp, #0
 8010d86:	60f8      	str	r0, [r7, #12]
 8010d88:	60b9      	str	r1, [r7, #8]
 8010d8a:	607a      	str	r2, [r7, #4]
  return lwip_send(s, data, size, 0);
 8010d8c:	2300      	movs	r3, #0
 8010d8e:	687a      	ldr	r2, [r7, #4]
 8010d90:	68b9      	ldr	r1, [r7, #8]
 8010d92:	68f8      	ldr	r0, [r7, #12]
 8010d94:	f7ff fe86 	bl	8010aa4 <lwip_send>
 8010d98:	4603      	mov	r3, r0
}
 8010d9a:	4618      	mov	r0, r3
 8010d9c:	3710      	adds	r7, #16
 8010d9e:	46bd      	mov	sp, r7
 8010da0:	bd80      	pop	{r7, pc}

08010da2 <lwip_poll_should_wake>:
 * Check whether event_callback should wake up a thread waiting in
 * lwip_poll.
 */
static int
lwip_poll_should_wake(const struct lwip_select_cb *scb, int fd, int has_recvevent, int has_sendevent, int has_errevent)
{
 8010da2:	b480      	push	{r7}
 8010da4:	b087      	sub	sp, #28
 8010da6:	af00      	add	r7, sp, #0
 8010da8:	60f8      	str	r0, [r7, #12]
 8010daa:	60b9      	str	r1, [r7, #8]
 8010dac:	607a      	str	r2, [r7, #4]
 8010dae:	603b      	str	r3, [r7, #0]
  nfds_t fdi;
  for (fdi = 0; fdi < scb->poll_nfds; fdi++) {
 8010db0:	2300      	movs	r3, #0
 8010db2:	617b      	str	r3, [r7, #20]
 8010db4:	e02c      	b.n	8010e10 <lwip_poll_should_wake+0x6e>
    const struct pollfd *pollfd = &scb->poll_fds[fdi];
 8010db6:	68fb      	ldr	r3, [r7, #12]
 8010db8:	695a      	ldr	r2, [r3, #20]
 8010dba:	697b      	ldr	r3, [r7, #20]
 8010dbc:	00db      	lsls	r3, r3, #3
 8010dbe:	4413      	add	r3, r2
 8010dc0:	613b      	str	r3, [r7, #16]
    if (pollfd->fd == fd) {
 8010dc2:	693b      	ldr	r3, [r7, #16]
 8010dc4:	681b      	ldr	r3, [r3, #0]
 8010dc6:	68ba      	ldr	r2, [r7, #8]
 8010dc8:	429a      	cmp	r2, r3
 8010dca:	d11e      	bne.n	8010e0a <lwip_poll_should_wake+0x68>
      /* Do not update pollfd->revents right here;
         that would be a data race because lwip_pollscan
         accesses revents without protecting. */
      if (has_recvevent && (pollfd->events & POLLIN) != 0) {
 8010dcc:	687b      	ldr	r3, [r7, #4]
 8010dce:	2b00      	cmp	r3, #0
 8010dd0:	d009      	beq.n	8010de6 <lwip_poll_should_wake+0x44>
 8010dd2:	693b      	ldr	r3, [r7, #16]
 8010dd4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8010dd8:	b29b      	uxth	r3, r3
 8010dda:	f003 0301 	and.w	r3, r3, #1
 8010dde:	2b00      	cmp	r3, #0
 8010de0:	d001      	beq.n	8010de6 <lwip_poll_should_wake+0x44>
        return 1;
 8010de2:	2301      	movs	r3, #1
 8010de4:	e01a      	b.n	8010e1c <lwip_poll_should_wake+0x7a>
      }
      if (has_sendevent && (pollfd->events & POLLOUT) != 0) {
 8010de6:	683b      	ldr	r3, [r7, #0]
 8010de8:	2b00      	cmp	r3, #0
 8010dea:	d009      	beq.n	8010e00 <lwip_poll_should_wake+0x5e>
 8010dec:	693b      	ldr	r3, [r7, #16]
 8010dee:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8010df2:	b29b      	uxth	r3, r3
 8010df4:	f003 0302 	and.w	r3, r3, #2
 8010df8:	2b00      	cmp	r3, #0
 8010dfa:	d001      	beq.n	8010e00 <lwip_poll_should_wake+0x5e>
        return 1;
 8010dfc:	2301      	movs	r3, #1
 8010dfe:	e00d      	b.n	8010e1c <lwip_poll_should_wake+0x7a>
      }
      if (has_errevent) {
 8010e00:	6a3b      	ldr	r3, [r7, #32]
 8010e02:	2b00      	cmp	r3, #0
 8010e04:	d001      	beq.n	8010e0a <lwip_poll_should_wake+0x68>
        /* POLLERR is output only. */
        return 1;
 8010e06:	2301      	movs	r3, #1
 8010e08:	e008      	b.n	8010e1c <lwip_poll_should_wake+0x7a>
  for (fdi = 0; fdi < scb->poll_nfds; fdi++) {
 8010e0a:	697b      	ldr	r3, [r7, #20]
 8010e0c:	3301      	adds	r3, #1
 8010e0e:	617b      	str	r3, [r7, #20]
 8010e10:	68fb      	ldr	r3, [r7, #12]
 8010e12:	699b      	ldr	r3, [r3, #24]
 8010e14:	697a      	ldr	r2, [r7, #20]
 8010e16:	429a      	cmp	r2, r3
 8010e18:	d3cd      	bcc.n	8010db6 <lwip_poll_should_wake+0x14>
      }
    }
  }
  return 0;
 8010e1a:	2300      	movs	r3, #0
}
 8010e1c:	4618      	mov	r0, r3
 8010e1e:	371c      	adds	r7, #28
 8010e20:	46bd      	mov	sp, r7
 8010e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e26:	4770      	bx	lr

08010e28 <event_callback>:
 *   NETCONN_EVT_ERROR
 * This requirement will be asserted in select_check_waiters()
 */
static void
event_callback(struct netconn *conn, enum netconn_evt evt, u16_t len)
{
 8010e28:	b580      	push	{r7, lr}
 8010e2a:	b08a      	sub	sp, #40	; 0x28
 8010e2c:	af00      	add	r7, sp, #0
 8010e2e:	6078      	str	r0, [r7, #4]
 8010e30:	460b      	mov	r3, r1
 8010e32:	70fb      	strb	r3, [r7, #3]
 8010e34:	4613      	mov	r3, r2
 8010e36:	803b      	strh	r3, [r7, #0]
  SYS_ARCH_DECL_PROTECT(lev);

  LWIP_UNUSED_ARG(len);

  /* Get socket */
  if (conn) {
 8010e38:	687b      	ldr	r3, [r7, #4]
 8010e3a:	2b00      	cmp	r3, #0
 8010e3c:	f000 80a4 	beq.w	8010f88 <event_callback+0x160>
    s = conn->socket;
 8010e40:	687b      	ldr	r3, [r7, #4]
 8010e42:	699b      	ldr	r3, [r3, #24]
 8010e44:	627b      	str	r3, [r7, #36]	; 0x24
    if (s < 0) {
 8010e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e48:	2b00      	cmp	r3, #0
 8010e4a:	da18      	bge.n	8010e7e <event_callback+0x56>
      /* Data comes in right away after an accept, even though
       * the server task might not have created a new socket yet.
       * Just count down (or up) if that's the case and we
       * will use the data later. Note that only receive events
       * can happen before the new socket is set up. */
      SYS_ARCH_PROTECT(lev);
 8010e4c:	f00d fd3e 	bl	801e8cc <sys_arch_protect>
 8010e50:	61f8      	str	r0, [r7, #28]
      if (conn->socket < 0) {
 8010e52:	687b      	ldr	r3, [r7, #4]
 8010e54:	699b      	ldr	r3, [r3, #24]
 8010e56:	2b00      	cmp	r3, #0
 8010e58:	da0b      	bge.n	8010e72 <event_callback+0x4a>
        if (evt == NETCONN_EVT_RCVPLUS) {
 8010e5a:	78fb      	ldrb	r3, [r7, #3]
 8010e5c:	2b00      	cmp	r3, #0
 8010e5e:	d104      	bne.n	8010e6a <event_callback+0x42>
          /* conn->socket is -1 on initialization
             lwip_accept adjusts sock->recvevent if conn->socket < -1 */
          conn->socket--;
 8010e60:	687b      	ldr	r3, [r7, #4]
 8010e62:	699b      	ldr	r3, [r3, #24]
 8010e64:	1e5a      	subs	r2, r3, #1
 8010e66:	687b      	ldr	r3, [r7, #4]
 8010e68:	619a      	str	r2, [r3, #24]
        }
        SYS_ARCH_UNPROTECT(lev);
 8010e6a:	69f8      	ldr	r0, [r7, #28]
 8010e6c:	f00d fd3c 	bl	801e8e8 <sys_arch_unprotect>
        return;
 8010e70:	e08d      	b.n	8010f8e <event_callback+0x166>
      }
      s = conn->socket;
 8010e72:	687b      	ldr	r3, [r7, #4]
 8010e74:	699b      	ldr	r3, [r3, #24]
 8010e76:	627b      	str	r3, [r7, #36]	; 0x24
      SYS_ARCH_UNPROTECT(lev);
 8010e78:	69f8      	ldr	r0, [r7, #28]
 8010e7a:	f00d fd35 	bl	801e8e8 <sys_arch_unprotect>
    }

    sock = get_socket(s);
 8010e7e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010e80:	f7fe ffca 	bl	800fe18 <get_socket>
 8010e84:	61b8      	str	r0, [r7, #24]
    if (!sock) {
 8010e86:	69bb      	ldr	r3, [r7, #24]
 8010e88:	2b00      	cmp	r3, #0
 8010e8a:	d07f      	beq.n	8010f8c <event_callback+0x164>
    }
  } else {
    return;
  }

  check_waiters = 1;
 8010e8c:	2301      	movs	r3, #1
 8010e8e:	623b      	str	r3, [r7, #32]
  SYS_ARCH_PROTECT(lev);
 8010e90:	f00d fd1c 	bl	801e8cc <sys_arch_protect>
 8010e94:	61f8      	str	r0, [r7, #28]
  /* Set event as required */
  switch (evt) {
 8010e96:	78fb      	ldrb	r3, [r7, #3]
 8010e98:	2b04      	cmp	r3, #4
 8010e9a:	d83e      	bhi.n	8010f1a <event_callback+0xf2>
 8010e9c:	a201      	add	r2, pc, #4	; (adr r2, 8010ea4 <event_callback+0x7c>)
 8010e9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ea2:	bf00      	nop
 8010ea4:	08010eb9 	.word	0x08010eb9
 8010ea8:	08010edb 	.word	0x08010edb
 8010eac:	08010ef3 	.word	0x08010ef3
 8010eb0:	08010f07 	.word	0x08010f07
 8010eb4:	08010f13 	.word	0x08010f13
    case NETCONN_EVT_RCVPLUS:
      sock->rcvevent++;
 8010eb8:	69bb      	ldr	r3, [r7, #24]
 8010eba:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8010ebe:	b29b      	uxth	r3, r3
 8010ec0:	3301      	adds	r3, #1
 8010ec2:	b29b      	uxth	r3, r3
 8010ec4:	b21a      	sxth	r2, r3
 8010ec6:	69bb      	ldr	r3, [r7, #24]
 8010ec8:	811a      	strh	r2, [r3, #8]
      if (sock->rcvevent > 1) {
 8010eca:	69bb      	ldr	r3, [r7, #24]
 8010ecc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8010ed0:	2b01      	cmp	r3, #1
 8010ed2:	dd2a      	ble.n	8010f2a <event_callback+0x102>
        check_waiters = 0;
 8010ed4:	2300      	movs	r3, #0
 8010ed6:	623b      	str	r3, [r7, #32]
      }
      break;
 8010ed8:	e027      	b.n	8010f2a <event_callback+0x102>
    case NETCONN_EVT_RCVMINUS:
      sock->rcvevent--;
 8010eda:	69bb      	ldr	r3, [r7, #24]
 8010edc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8010ee0:	b29b      	uxth	r3, r3
 8010ee2:	3b01      	subs	r3, #1
 8010ee4:	b29b      	uxth	r3, r3
 8010ee6:	b21a      	sxth	r2, r3
 8010ee8:	69bb      	ldr	r3, [r7, #24]
 8010eea:	811a      	strh	r2, [r3, #8]
      check_waiters = 0;
 8010eec:	2300      	movs	r3, #0
 8010eee:	623b      	str	r3, [r7, #32]
      break;
 8010ef0:	e01c      	b.n	8010f2c <event_callback+0x104>
    case NETCONN_EVT_SENDPLUS:
      if (sock->sendevent) {
 8010ef2:	69bb      	ldr	r3, [r7, #24]
 8010ef4:	895b      	ldrh	r3, [r3, #10]
 8010ef6:	2b00      	cmp	r3, #0
 8010ef8:	d001      	beq.n	8010efe <event_callback+0xd6>
        check_waiters = 0;
 8010efa:	2300      	movs	r3, #0
 8010efc:	623b      	str	r3, [r7, #32]
      }
      sock->sendevent = 1;
 8010efe:	69bb      	ldr	r3, [r7, #24]
 8010f00:	2201      	movs	r2, #1
 8010f02:	815a      	strh	r2, [r3, #10]
      break;
 8010f04:	e012      	b.n	8010f2c <event_callback+0x104>
    case NETCONN_EVT_SENDMINUS:
      sock->sendevent = 0;
 8010f06:	69bb      	ldr	r3, [r7, #24]
 8010f08:	2200      	movs	r2, #0
 8010f0a:	815a      	strh	r2, [r3, #10]
      check_waiters = 0;
 8010f0c:	2300      	movs	r3, #0
 8010f0e:	623b      	str	r3, [r7, #32]
      break;
 8010f10:	e00c      	b.n	8010f2c <event_callback+0x104>
    case NETCONN_EVT_ERROR:
      sock->errevent = 1;
 8010f12:	69bb      	ldr	r3, [r7, #24]
 8010f14:	2201      	movs	r2, #1
 8010f16:	819a      	strh	r2, [r3, #12]
      break;
 8010f18:	e008      	b.n	8010f2c <event_callback+0x104>
    default:
      LWIP_ASSERT("unknown event", 0);
 8010f1a:	4b1e      	ldr	r3, [pc, #120]	; (8010f94 <event_callback+0x16c>)
 8010f1c:	f44f 621f 	mov.w	r2, #2544	; 0x9f0
 8010f20:	491d      	ldr	r1, [pc, #116]	; (8010f98 <event_callback+0x170>)
 8010f22:	481e      	ldr	r0, [pc, #120]	; (8010f9c <event_callback+0x174>)
 8010f24:	f00f fa94 	bl	8020450 <iprintf>
      break;
 8010f28:	e000      	b.n	8010f2c <event_callback+0x104>
      break;
 8010f2a:	bf00      	nop
  }

  if (sock->select_waiting && check_waiters) {
 8010f2c:	69bb      	ldr	r3, [r7, #24]
 8010f2e:	7b9b      	ldrb	r3, [r3, #14]
 8010f30:	2b00      	cmp	r3, #0
 8010f32:	d025      	beq.n	8010f80 <event_callback+0x158>
 8010f34:	6a3b      	ldr	r3, [r7, #32]
 8010f36:	2b00      	cmp	r3, #0
 8010f38:	d022      	beq.n	8010f80 <event_callback+0x158>
    /* Save which events are active */
    int has_recvevent, has_sendevent, has_errevent;
    has_recvevent = sock->rcvevent > 0;
 8010f3a:	69bb      	ldr	r3, [r7, #24]
 8010f3c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8010f40:	2b00      	cmp	r3, #0
 8010f42:	bfcc      	ite	gt
 8010f44:	2301      	movgt	r3, #1
 8010f46:	2300      	movle	r3, #0
 8010f48:	b2db      	uxtb	r3, r3
 8010f4a:	617b      	str	r3, [r7, #20]
    has_sendevent = sock->sendevent != 0;
 8010f4c:	69bb      	ldr	r3, [r7, #24]
 8010f4e:	895b      	ldrh	r3, [r3, #10]
 8010f50:	2b00      	cmp	r3, #0
 8010f52:	bf14      	ite	ne
 8010f54:	2301      	movne	r3, #1
 8010f56:	2300      	moveq	r3, #0
 8010f58:	b2db      	uxtb	r3, r3
 8010f5a:	613b      	str	r3, [r7, #16]
    has_errevent = sock->errevent != 0;
 8010f5c:	69bb      	ldr	r3, [r7, #24]
 8010f5e:	899b      	ldrh	r3, [r3, #12]
 8010f60:	2b00      	cmp	r3, #0
 8010f62:	bf14      	ite	ne
 8010f64:	2301      	movne	r3, #1
 8010f66:	2300      	moveq	r3, #0
 8010f68:	b2db      	uxtb	r3, r3
 8010f6a:	60fb      	str	r3, [r7, #12]
    SYS_ARCH_UNPROTECT(lev);
 8010f6c:	69f8      	ldr	r0, [r7, #28]
 8010f6e:	f00d fcbb 	bl	801e8e8 <sys_arch_unprotect>
    /* Check any select calls waiting on this socket */
    select_check_waiters(s, has_recvevent, has_sendevent, has_errevent);
 8010f72:	68fb      	ldr	r3, [r7, #12]
 8010f74:	693a      	ldr	r2, [r7, #16]
 8010f76:	6979      	ldr	r1, [r7, #20]
 8010f78:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010f7a:	f000 f811 	bl	8010fa0 <select_check_waiters>
  if (sock->select_waiting && check_waiters) {
 8010f7e:	e006      	b.n	8010f8e <event_callback+0x166>
  } else {
    SYS_ARCH_UNPROTECT(lev);
 8010f80:	69f8      	ldr	r0, [r7, #28]
 8010f82:	f00d fcb1 	bl	801e8e8 <sys_arch_unprotect>
 8010f86:	e002      	b.n	8010f8e <event_callback+0x166>
    return;
 8010f88:	bf00      	nop
 8010f8a:	e000      	b.n	8010f8e <event_callback+0x166>
      return;
 8010f8c:	bf00      	nop
  }
  done_socket(sock);
}
 8010f8e:	3728      	adds	r7, #40	; 0x28
 8010f90:	46bd      	mov	sp, r7
 8010f92:	bd80      	pop	{r7, pc}
 8010f94:	08023ce0 	.word	0x08023ce0
 8010f98:	0802405c 	.word	0x0802405c
 8010f9c:	08023d34 	.word	0x08023d34

08010fa0 <select_check_waiters>:
 * of the loop, thus creating a possibility where a thread could modify the
 * select_cb_list during our UNPROTECT/PROTECT. We use a generational counter to
 * detect this change and restart the list walk. The list is expected to be small
 */
static void select_check_waiters(int s, int has_recvevent, int has_sendevent, int has_errevent)
{
 8010fa0:	b580      	push	{r7, lr}
 8010fa2:	b088      	sub	sp, #32
 8010fa4:	af02      	add	r7, sp, #8
 8010fa6:	60f8      	str	r0, [r7, #12]
 8010fa8:	60b9      	str	r1, [r7, #8]
 8010faa:	607a      	str	r2, [r7, #4]
 8010fac:	603b      	str	r3, [r7, #0]
  SYS_ARCH_PROTECT(lev);
again:
  /* remember the state of select_cb_list to detect changes */
  last_select_cb_ctr = select_cb_ctr;
#endif /* !LWIP_TCPIP_CORE_LOCKING */
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 8010fae:	4b42      	ldr	r3, [pc, #264]	; (80110b8 <select_check_waiters+0x118>)
 8010fb0:	681b      	ldr	r3, [r3, #0]
 8010fb2:	617b      	str	r3, [r7, #20]
 8010fb4:	e078      	b.n	80110a8 <select_check_waiters+0x108>
    if (scb->sem_signalled == 0) {
 8010fb6:	697b      	ldr	r3, [r7, #20]
 8010fb8:	69db      	ldr	r3, [r3, #28]
 8010fba:	2b00      	cmp	r3, #0
 8010fbc:	d171      	bne.n	80110a2 <select_check_waiters+0x102>
      /* semaphore not signalled yet */
      int do_signal = 0;
 8010fbe:	2300      	movs	r3, #0
 8010fc0:	613b      	str	r3, [r7, #16]
#if LWIP_SOCKET_POLL
      if (scb->poll_fds != NULL) {
 8010fc2:	697b      	ldr	r3, [r7, #20]
 8010fc4:	695b      	ldr	r3, [r3, #20]
 8010fc6:	2b00      	cmp	r3, #0
 8010fc8:	d009      	beq.n	8010fde <select_check_waiters+0x3e>
        do_signal = lwip_poll_should_wake(scb, s, has_recvevent, has_sendevent, has_errevent);
 8010fca:	683b      	ldr	r3, [r7, #0]
 8010fcc:	9300      	str	r3, [sp, #0]
 8010fce:	687b      	ldr	r3, [r7, #4]
 8010fd0:	68ba      	ldr	r2, [r7, #8]
 8010fd2:	68f9      	ldr	r1, [r7, #12]
 8010fd4:	6978      	ldr	r0, [r7, #20]
 8010fd6:	f7ff fee4 	bl	8010da2 <lwip_poll_should_wake>
 8010fda:	6138      	str	r0, [r7, #16]
 8010fdc:	e056      	b.n	801108c <select_check_waiters+0xec>
      else
#endif /* LWIP_SOCKET_SELECT && LWIP_SOCKET_POLL */
#if LWIP_SOCKET_SELECT
      {
        /* Test this select call for our socket */
        if (has_recvevent) {
 8010fde:	68bb      	ldr	r3, [r7, #8]
 8010fe0:	2b00      	cmp	r3, #0
 8010fe2:	d017      	beq.n	8011014 <select_check_waiters+0x74>
          if (scb->readset && FD_ISSET(s, scb->readset)) {
 8010fe4:	697b      	ldr	r3, [r7, #20]
 8010fe6:	689b      	ldr	r3, [r3, #8]
 8010fe8:	2b00      	cmp	r3, #0
 8010fea:	d013      	beq.n	8011014 <select_check_waiters+0x74>
 8010fec:	697b      	ldr	r3, [r7, #20]
 8010fee:	689a      	ldr	r2, [r3, #8]
 8010ff0:	68fb      	ldr	r3, [r7, #12]
 8010ff2:	2b00      	cmp	r3, #0
 8010ff4:	da00      	bge.n	8010ff8 <select_check_waiters+0x58>
 8010ff6:	331f      	adds	r3, #31
 8010ff8:	115b      	asrs	r3, r3, #5
 8010ffa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8010ffe:	68fb      	ldr	r3, [r7, #12]
 8011000:	f003 031f 	and.w	r3, r3, #31
 8011004:	fa22 f303 	lsr.w	r3, r2, r3
 8011008:	f003 0301 	and.w	r3, r3, #1
 801100c:	2b00      	cmp	r3, #0
 801100e:	d001      	beq.n	8011014 <select_check_waiters+0x74>
            do_signal = 1;
 8011010:	2301      	movs	r3, #1
 8011012:	613b      	str	r3, [r7, #16]
          }
        }
        if (has_sendevent) {
 8011014:	687b      	ldr	r3, [r7, #4]
 8011016:	2b00      	cmp	r3, #0
 8011018:	d01a      	beq.n	8011050 <select_check_waiters+0xb0>
          if (!do_signal && scb->writeset && FD_ISSET(s, scb->writeset)) {
 801101a:	693b      	ldr	r3, [r7, #16]
 801101c:	2b00      	cmp	r3, #0
 801101e:	d117      	bne.n	8011050 <select_check_waiters+0xb0>
 8011020:	697b      	ldr	r3, [r7, #20]
 8011022:	68db      	ldr	r3, [r3, #12]
 8011024:	2b00      	cmp	r3, #0
 8011026:	d013      	beq.n	8011050 <select_check_waiters+0xb0>
 8011028:	697b      	ldr	r3, [r7, #20]
 801102a:	68da      	ldr	r2, [r3, #12]
 801102c:	68fb      	ldr	r3, [r7, #12]
 801102e:	2b00      	cmp	r3, #0
 8011030:	da00      	bge.n	8011034 <select_check_waiters+0x94>
 8011032:	331f      	adds	r3, #31
 8011034:	115b      	asrs	r3, r3, #5
 8011036:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 801103a:	68fb      	ldr	r3, [r7, #12]
 801103c:	f003 031f 	and.w	r3, r3, #31
 8011040:	fa22 f303 	lsr.w	r3, r2, r3
 8011044:	f003 0301 	and.w	r3, r3, #1
 8011048:	2b00      	cmp	r3, #0
 801104a:	d001      	beq.n	8011050 <select_check_waiters+0xb0>
            do_signal = 1;
 801104c:	2301      	movs	r3, #1
 801104e:	613b      	str	r3, [r7, #16]
          }
        }
        if (has_errevent) {
 8011050:	683b      	ldr	r3, [r7, #0]
 8011052:	2b00      	cmp	r3, #0
 8011054:	d01a      	beq.n	801108c <select_check_waiters+0xec>
          if (!do_signal && scb->exceptset && FD_ISSET(s, scb->exceptset)) {
 8011056:	693b      	ldr	r3, [r7, #16]
 8011058:	2b00      	cmp	r3, #0
 801105a:	d117      	bne.n	801108c <select_check_waiters+0xec>
 801105c:	697b      	ldr	r3, [r7, #20]
 801105e:	691b      	ldr	r3, [r3, #16]
 8011060:	2b00      	cmp	r3, #0
 8011062:	d013      	beq.n	801108c <select_check_waiters+0xec>
 8011064:	697b      	ldr	r3, [r7, #20]
 8011066:	691a      	ldr	r2, [r3, #16]
 8011068:	68fb      	ldr	r3, [r7, #12]
 801106a:	2b00      	cmp	r3, #0
 801106c:	da00      	bge.n	8011070 <select_check_waiters+0xd0>
 801106e:	331f      	adds	r3, #31
 8011070:	115b      	asrs	r3, r3, #5
 8011072:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8011076:	68fb      	ldr	r3, [r7, #12]
 8011078:	f003 031f 	and.w	r3, r3, #31
 801107c:	fa22 f303 	lsr.w	r3, r2, r3
 8011080:	f003 0301 	and.w	r3, r3, #1
 8011084:	2b00      	cmp	r3, #0
 8011086:	d001      	beq.n	801108c <select_check_waiters+0xec>
            do_signal = 1;
 8011088:	2301      	movs	r3, #1
 801108a:	613b      	str	r3, [r7, #16]
          }
        }
      }
#endif /* LWIP_SOCKET_SELECT */
      if (do_signal) {
 801108c:	693b      	ldr	r3, [r7, #16]
 801108e:	2b00      	cmp	r3, #0
 8011090:	d007      	beq.n	80110a2 <select_check_waiters+0x102>
        scb->sem_signalled = 1;
 8011092:	697b      	ldr	r3, [r7, #20]
 8011094:	2201      	movs	r2, #1
 8011096:	61da      	str	r2, [r3, #28]
        /* For !LWIP_TCPIP_CORE_LOCKING, we don't call SYS_ARCH_UNPROTECT() before signaling
           the semaphore, as this might lead to the select thread taking itself off the list,
           invalidating the semaphore. */
        sys_sem_signal(SELECT_SEM_PTR(scb->sem));
 8011098:	697b      	ldr	r3, [r7, #20]
 801109a:	3320      	adds	r3, #32
 801109c:	4618      	mov	r0, r3
 801109e:	f00d fb71 	bl	801e784 <sys_sem_signal>
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 80110a2:	697b      	ldr	r3, [r7, #20]
 80110a4:	681b      	ldr	r3, [r3, #0]
 80110a6:	617b      	str	r3, [r7, #20]
 80110a8:	697b      	ldr	r3, [r7, #20]
 80110aa:	2b00      	cmp	r3, #0
 80110ac:	d183      	bne.n	8010fb6 <select_check_waiters+0x16>
    /* remember the state of select_cb_list to detect changes */
    last_select_cb_ctr = select_cb_ctr;
  }
  SYS_ARCH_UNPROTECT(lev);
#endif
}
 80110ae:	bf00      	nop
 80110b0:	bf00      	nop
 80110b2:	3718      	adds	r7, #24
 80110b4:	46bd      	mov	sp, r7
 80110b6:	bd80      	pop	{r7, pc}
 80110b8:	24004ca4 	.word	0x24004ca4

080110bc <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 80110bc:	b580      	push	{r7, lr}
 80110be:	b084      	sub	sp, #16
 80110c0:	af00      	add	r7, sp, #0
 80110c2:	6078      	str	r0, [r7, #4]
 80110c4:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 80110c6:	f008 fb0b 	bl	80196e0 <sys_timeouts_sleeptime>
 80110ca:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 80110cc:	68fb      	ldr	r3, [r7, #12]
 80110ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80110d2:	d10b      	bne.n	80110ec <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 80110d4:	4813      	ldr	r0, [pc, #76]	; (8011124 <tcpip_timeouts_mbox_fetch+0x68>)
 80110d6:	f00d fbc6 	bl	801e866 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 80110da:	2200      	movs	r2, #0
 80110dc:	6839      	ldr	r1, [r7, #0]
 80110de:	6878      	ldr	r0, [r7, #4]
 80110e0:	f00d fa7e 	bl	801e5e0 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 80110e4:	480f      	ldr	r0, [pc, #60]	; (8011124 <tcpip_timeouts_mbox_fetch+0x68>)
 80110e6:	f00d fbaf 	bl	801e848 <sys_mutex_lock>
    return;
 80110ea:	e018      	b.n	801111e <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 80110ec:	68fb      	ldr	r3, [r7, #12]
 80110ee:	2b00      	cmp	r3, #0
 80110f0:	d102      	bne.n	80110f8 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 80110f2:	f008 fabb 	bl	801966c <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 80110f6:	e7e6      	b.n	80110c6 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 80110f8:	480a      	ldr	r0, [pc, #40]	; (8011124 <tcpip_timeouts_mbox_fetch+0x68>)
 80110fa:	f00d fbb4 	bl	801e866 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 80110fe:	68fa      	ldr	r2, [r7, #12]
 8011100:	6839      	ldr	r1, [r7, #0]
 8011102:	6878      	ldr	r0, [r7, #4]
 8011104:	f00d fa6c 	bl	801e5e0 <sys_arch_mbox_fetch>
 8011108:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 801110a:	4806      	ldr	r0, [pc, #24]	; (8011124 <tcpip_timeouts_mbox_fetch+0x68>)
 801110c:	f00d fb9c 	bl	801e848 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8011110:	68bb      	ldr	r3, [r7, #8]
 8011112:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011116:	d102      	bne.n	801111e <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8011118:	f008 faa8 	bl	801966c <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 801111c:	e7d3      	b.n	80110c6 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 801111e:	3710      	adds	r7, #16
 8011120:	46bd      	mov	sp, r7
 8011122:	bd80      	pop	{r7, pc}
 8011124:	24004cb4 	.word	0x24004cb4

08011128 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8011128:	b580      	push	{r7, lr}
 801112a:	b084      	sub	sp, #16
 801112c:	af00      	add	r7, sp, #0
 801112e:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8011130:	4810      	ldr	r0, [pc, #64]	; (8011174 <tcpip_thread+0x4c>)
 8011132:	f00d fb89 	bl	801e848 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 8011136:	4b10      	ldr	r3, [pc, #64]	; (8011178 <tcpip_thread+0x50>)
 8011138:	681b      	ldr	r3, [r3, #0]
 801113a:	2b00      	cmp	r3, #0
 801113c:	d005      	beq.n	801114a <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 801113e:	4b0e      	ldr	r3, [pc, #56]	; (8011178 <tcpip_thread+0x50>)
 8011140:	681b      	ldr	r3, [r3, #0]
 8011142:	4a0e      	ldr	r2, [pc, #56]	; (801117c <tcpip_thread+0x54>)
 8011144:	6812      	ldr	r2, [r2, #0]
 8011146:	4610      	mov	r0, r2
 8011148:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 801114a:	f107 030c 	add.w	r3, r7, #12
 801114e:	4619      	mov	r1, r3
 8011150:	480b      	ldr	r0, [pc, #44]	; (8011180 <tcpip_thread+0x58>)
 8011152:	f7ff ffb3 	bl	80110bc <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 8011156:	68fb      	ldr	r3, [r7, #12]
 8011158:	2b00      	cmp	r3, #0
 801115a:	d106      	bne.n	801116a <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 801115c:	4b09      	ldr	r3, [pc, #36]	; (8011184 <tcpip_thread+0x5c>)
 801115e:	2291      	movs	r2, #145	; 0x91
 8011160:	4909      	ldr	r1, [pc, #36]	; (8011188 <tcpip_thread+0x60>)
 8011162:	480a      	ldr	r0, [pc, #40]	; (801118c <tcpip_thread+0x64>)
 8011164:	f00f f974 	bl	8020450 <iprintf>
      continue;
 8011168:	e003      	b.n	8011172 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 801116a:	68fb      	ldr	r3, [r7, #12]
 801116c:	4618      	mov	r0, r3
 801116e:	f000 f80f 	bl	8011190 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8011172:	e7ea      	b.n	801114a <tcpip_thread+0x22>
 8011174:	24004cb4 	.word	0x24004cb4
 8011178:	24004ca8 	.word	0x24004ca8
 801117c:	24004cac 	.word	0x24004cac
 8011180:	24004cb0 	.word	0x24004cb0
 8011184:	080240b0 	.word	0x080240b0
 8011188:	080240e0 	.word	0x080240e0
 801118c:	08024100 	.word	0x08024100

08011190 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8011190:	b580      	push	{r7, lr}
 8011192:	b082      	sub	sp, #8
 8011194:	af00      	add	r7, sp, #0
 8011196:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8011198:	687b      	ldr	r3, [r7, #4]
 801119a:	781b      	ldrb	r3, [r3, #0]
 801119c:	2b02      	cmp	r3, #2
 801119e:	d026      	beq.n	80111ee <tcpip_thread_handle_msg+0x5e>
 80111a0:	2b02      	cmp	r3, #2
 80111a2:	dc2b      	bgt.n	80111fc <tcpip_thread_handle_msg+0x6c>
 80111a4:	2b00      	cmp	r3, #0
 80111a6:	d002      	beq.n	80111ae <tcpip_thread_handle_msg+0x1e>
 80111a8:	2b01      	cmp	r3, #1
 80111aa:	d015      	beq.n	80111d8 <tcpip_thread_handle_msg+0x48>
 80111ac:	e026      	b.n	80111fc <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 80111ae:	687b      	ldr	r3, [r7, #4]
 80111b0:	68db      	ldr	r3, [r3, #12]
 80111b2:	687a      	ldr	r2, [r7, #4]
 80111b4:	6850      	ldr	r0, [r2, #4]
 80111b6:	687a      	ldr	r2, [r7, #4]
 80111b8:	6892      	ldr	r2, [r2, #8]
 80111ba:	4611      	mov	r1, r2
 80111bc:	4798      	blx	r3
 80111be:	4603      	mov	r3, r0
 80111c0:	2b00      	cmp	r3, #0
 80111c2:	d004      	beq.n	80111ce <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 80111c4:	687b      	ldr	r3, [r7, #4]
 80111c6:	685b      	ldr	r3, [r3, #4]
 80111c8:	4618      	mov	r0, r3
 80111ca:	f001 fe17 	bl	8012dfc <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 80111ce:	6879      	ldr	r1, [r7, #4]
 80111d0:	2009      	movs	r0, #9
 80111d2:	f000 ff31 	bl	8012038 <memp_free>
      break;
 80111d6:	e018      	b.n	801120a <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 80111d8:	687b      	ldr	r3, [r7, #4]
 80111da:	685b      	ldr	r3, [r3, #4]
 80111dc:	687a      	ldr	r2, [r7, #4]
 80111de:	6892      	ldr	r2, [r2, #8]
 80111e0:	4610      	mov	r0, r2
 80111e2:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 80111e4:	6879      	ldr	r1, [r7, #4]
 80111e6:	2008      	movs	r0, #8
 80111e8:	f000 ff26 	bl	8012038 <memp_free>
      break;
 80111ec:	e00d      	b.n	801120a <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 80111ee:	687b      	ldr	r3, [r7, #4]
 80111f0:	685b      	ldr	r3, [r3, #4]
 80111f2:	687a      	ldr	r2, [r7, #4]
 80111f4:	6892      	ldr	r2, [r2, #8]
 80111f6:	4610      	mov	r0, r2
 80111f8:	4798      	blx	r3
      break;
 80111fa:	e006      	b.n	801120a <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80111fc:	4b05      	ldr	r3, [pc, #20]	; (8011214 <tcpip_thread_handle_msg+0x84>)
 80111fe:	22cf      	movs	r2, #207	; 0xcf
 8011200:	4905      	ldr	r1, [pc, #20]	; (8011218 <tcpip_thread_handle_msg+0x88>)
 8011202:	4806      	ldr	r0, [pc, #24]	; (801121c <tcpip_thread_handle_msg+0x8c>)
 8011204:	f00f f924 	bl	8020450 <iprintf>
      break;
 8011208:	bf00      	nop
  }
}
 801120a:	bf00      	nop
 801120c:	3708      	adds	r7, #8
 801120e:	46bd      	mov	sp, r7
 8011210:	bd80      	pop	{r7, pc}
 8011212:	bf00      	nop
 8011214:	080240b0 	.word	0x080240b0
 8011218:	080240e0 	.word	0x080240e0
 801121c:	08024100 	.word	0x08024100

08011220 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8011220:	b580      	push	{r7, lr}
 8011222:	b086      	sub	sp, #24
 8011224:	af00      	add	r7, sp, #0
 8011226:	60f8      	str	r0, [r7, #12]
 8011228:	60b9      	str	r1, [r7, #8]
 801122a:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 801122c:	481a      	ldr	r0, [pc, #104]	; (8011298 <tcpip_inpkt+0x78>)
 801122e:	f00d fa32 	bl	801e696 <sys_mbox_valid>
 8011232:	4603      	mov	r3, r0
 8011234:	2b00      	cmp	r3, #0
 8011236:	d105      	bne.n	8011244 <tcpip_inpkt+0x24>
 8011238:	4b18      	ldr	r3, [pc, #96]	; (801129c <tcpip_inpkt+0x7c>)
 801123a:	22fc      	movs	r2, #252	; 0xfc
 801123c:	4918      	ldr	r1, [pc, #96]	; (80112a0 <tcpip_inpkt+0x80>)
 801123e:	4819      	ldr	r0, [pc, #100]	; (80112a4 <tcpip_inpkt+0x84>)
 8011240:	f00f f906 	bl	8020450 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8011244:	2009      	movs	r0, #9
 8011246:	f000 fe81 	bl	8011f4c <memp_malloc>
 801124a:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 801124c:	697b      	ldr	r3, [r7, #20]
 801124e:	2b00      	cmp	r3, #0
 8011250:	d102      	bne.n	8011258 <tcpip_inpkt+0x38>
    return ERR_MEM;
 8011252:	f04f 33ff 	mov.w	r3, #4294967295
 8011256:	e01a      	b.n	801128e <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8011258:	697b      	ldr	r3, [r7, #20]
 801125a:	2200      	movs	r2, #0
 801125c:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 801125e:	697b      	ldr	r3, [r7, #20]
 8011260:	68fa      	ldr	r2, [r7, #12]
 8011262:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8011264:	697b      	ldr	r3, [r7, #20]
 8011266:	68ba      	ldr	r2, [r7, #8]
 8011268:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 801126a:	697b      	ldr	r3, [r7, #20]
 801126c:	687a      	ldr	r2, [r7, #4]
 801126e:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8011270:	6979      	ldr	r1, [r7, #20]
 8011272:	4809      	ldr	r0, [pc, #36]	; (8011298 <tcpip_inpkt+0x78>)
 8011274:	f00d f99a 	bl	801e5ac <sys_mbox_trypost>
 8011278:	4603      	mov	r3, r0
 801127a:	2b00      	cmp	r3, #0
 801127c:	d006      	beq.n	801128c <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 801127e:	6979      	ldr	r1, [r7, #20]
 8011280:	2009      	movs	r0, #9
 8011282:	f000 fed9 	bl	8012038 <memp_free>
    return ERR_MEM;
 8011286:	f04f 33ff 	mov.w	r3, #4294967295
 801128a:	e000      	b.n	801128e <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 801128c:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 801128e:	4618      	mov	r0, r3
 8011290:	3718      	adds	r7, #24
 8011292:	46bd      	mov	sp, r7
 8011294:	bd80      	pop	{r7, pc}
 8011296:	bf00      	nop
 8011298:	24004cb0 	.word	0x24004cb0
 801129c:	080240b0 	.word	0x080240b0
 80112a0:	08024128 	.word	0x08024128
 80112a4:	08024100 	.word	0x08024100

080112a8 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 80112a8:	b580      	push	{r7, lr}
 80112aa:	b082      	sub	sp, #8
 80112ac:	af00      	add	r7, sp, #0
 80112ae:	6078      	str	r0, [r7, #4]
 80112b0:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 80112b2:	683b      	ldr	r3, [r7, #0]
 80112b4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80112b8:	f003 0318 	and.w	r3, r3, #24
 80112bc:	2b00      	cmp	r3, #0
 80112be:	d006      	beq.n	80112ce <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 80112c0:	4a08      	ldr	r2, [pc, #32]	; (80112e4 <tcpip_input+0x3c>)
 80112c2:	6839      	ldr	r1, [r7, #0]
 80112c4:	6878      	ldr	r0, [r7, #4]
 80112c6:	f7ff ffab 	bl	8011220 <tcpip_inpkt>
 80112ca:	4603      	mov	r3, r0
 80112cc:	e005      	b.n	80112da <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 80112ce:	4a06      	ldr	r2, [pc, #24]	; (80112e8 <tcpip_input+0x40>)
 80112d0:	6839      	ldr	r1, [r7, #0]
 80112d2:	6878      	ldr	r0, [r7, #4]
 80112d4:	f7ff ffa4 	bl	8011220 <tcpip_inpkt>
 80112d8:	4603      	mov	r3, r0
}
 80112da:	4618      	mov	r0, r3
 80112dc:	3708      	adds	r7, #8
 80112de:	46bd      	mov	sp, r7
 80112e0:	bd80      	pop	{r7, pc}
 80112e2:	bf00      	nop
 80112e4:	0801e399 	.word	0x0801e399
 80112e8:	0801d265 	.word	0x0801d265

080112ec <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 80112ec:	b580      	push	{r7, lr}
 80112ee:	b084      	sub	sp, #16
 80112f0:	af00      	add	r7, sp, #0
 80112f2:	6078      	str	r0, [r7, #4]
 80112f4:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 80112f6:	4819      	ldr	r0, [pc, #100]	; (801135c <tcpip_try_callback+0x70>)
 80112f8:	f00d f9cd 	bl	801e696 <sys_mbox_valid>
 80112fc:	4603      	mov	r3, r0
 80112fe:	2b00      	cmp	r3, #0
 8011300:	d106      	bne.n	8011310 <tcpip_try_callback+0x24>
 8011302:	4b17      	ldr	r3, [pc, #92]	; (8011360 <tcpip_try_callback+0x74>)
 8011304:	f240 125d 	movw	r2, #349	; 0x15d
 8011308:	4916      	ldr	r1, [pc, #88]	; (8011364 <tcpip_try_callback+0x78>)
 801130a:	4817      	ldr	r0, [pc, #92]	; (8011368 <tcpip_try_callback+0x7c>)
 801130c:	f00f f8a0 	bl	8020450 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8011310:	2008      	movs	r0, #8
 8011312:	f000 fe1b 	bl	8011f4c <memp_malloc>
 8011316:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 8011318:	68fb      	ldr	r3, [r7, #12]
 801131a:	2b00      	cmp	r3, #0
 801131c:	d102      	bne.n	8011324 <tcpip_try_callback+0x38>
    return ERR_MEM;
 801131e:	f04f 33ff 	mov.w	r3, #4294967295
 8011322:	e017      	b.n	8011354 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8011324:	68fb      	ldr	r3, [r7, #12]
 8011326:	2201      	movs	r2, #1
 8011328:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 801132a:	68fb      	ldr	r3, [r7, #12]
 801132c:	687a      	ldr	r2, [r7, #4]
 801132e:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8011330:	68fb      	ldr	r3, [r7, #12]
 8011332:	683a      	ldr	r2, [r7, #0]
 8011334:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8011336:	68f9      	ldr	r1, [r7, #12]
 8011338:	4808      	ldr	r0, [pc, #32]	; (801135c <tcpip_try_callback+0x70>)
 801133a:	f00d f937 	bl	801e5ac <sys_mbox_trypost>
 801133e:	4603      	mov	r3, r0
 8011340:	2b00      	cmp	r3, #0
 8011342:	d006      	beq.n	8011352 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8011344:	68f9      	ldr	r1, [r7, #12]
 8011346:	2008      	movs	r0, #8
 8011348:	f000 fe76 	bl	8012038 <memp_free>
    return ERR_MEM;
 801134c:	f04f 33ff 	mov.w	r3, #4294967295
 8011350:	e000      	b.n	8011354 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 8011352:	2300      	movs	r3, #0
}
 8011354:	4618      	mov	r0, r3
 8011356:	3710      	adds	r7, #16
 8011358:	46bd      	mov	sp, r7
 801135a:	bd80      	pop	{r7, pc}
 801135c:	24004cb0 	.word	0x24004cb0
 8011360:	080240b0 	.word	0x080240b0
 8011364:	08024128 	.word	0x08024128
 8011368:	08024100 	.word	0x08024100

0801136c <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 801136c:	b580      	push	{r7, lr}
 801136e:	b084      	sub	sp, #16
 8011370:	af00      	add	r7, sp, #0
 8011372:	60f8      	str	r0, [r7, #12]
 8011374:	60b9      	str	r1, [r7, #8]
 8011376:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 8011378:	4806      	ldr	r0, [pc, #24]	; (8011394 <tcpip_send_msg_wait_sem+0x28>)
 801137a:	f00d fa65 	bl	801e848 <sys_mutex_lock>
  fn(apimsg);
 801137e:	68fb      	ldr	r3, [r7, #12]
 8011380:	68b8      	ldr	r0, [r7, #8]
 8011382:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 8011384:	4803      	ldr	r0, [pc, #12]	; (8011394 <tcpip_send_msg_wait_sem+0x28>)
 8011386:	f00d fa6e 	bl	801e866 <sys_mutex_unlock>
  return ERR_OK;
 801138a:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 801138c:	4618      	mov	r0, r3
 801138e:	3710      	adds	r7, #16
 8011390:	46bd      	mov	sp, r7
 8011392:	bd80      	pop	{r7, pc}
 8011394:	24004cb4 	.word	0x24004cb4

08011398 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8011398:	b580      	push	{r7, lr}
 801139a:	b084      	sub	sp, #16
 801139c:	af02      	add	r7, sp, #8
 801139e:	6078      	str	r0, [r7, #4]
 80113a0:	6039      	str	r1, [r7, #0]
  lwip_init();
 80113a2:	f000 f92d 	bl	8011600 <lwip_init>

  tcpip_init_done = initfunc;
 80113a6:	4a17      	ldr	r2, [pc, #92]	; (8011404 <tcpip_init+0x6c>)
 80113a8:	687b      	ldr	r3, [r7, #4]
 80113aa:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 80113ac:	4a16      	ldr	r2, [pc, #88]	; (8011408 <tcpip_init+0x70>)
 80113ae:	683b      	ldr	r3, [r7, #0]
 80113b0:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 80113b2:	2106      	movs	r1, #6
 80113b4:	4815      	ldr	r0, [pc, #84]	; (801140c <tcpip_init+0x74>)
 80113b6:	f00d f8c5 	bl	801e544 <sys_mbox_new>
 80113ba:	4603      	mov	r3, r0
 80113bc:	2b00      	cmp	r3, #0
 80113be:	d006      	beq.n	80113ce <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 80113c0:	4b13      	ldr	r3, [pc, #76]	; (8011410 <tcpip_init+0x78>)
 80113c2:	f240 2261 	movw	r2, #609	; 0x261
 80113c6:	4913      	ldr	r1, [pc, #76]	; (8011414 <tcpip_init+0x7c>)
 80113c8:	4813      	ldr	r0, [pc, #76]	; (8011418 <tcpip_init+0x80>)
 80113ca:	f00f f841 	bl	8020450 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 80113ce:	4813      	ldr	r0, [pc, #76]	; (801141c <tcpip_init+0x84>)
 80113d0:	f00d fa1e 	bl	801e810 <sys_mutex_new>
 80113d4:	4603      	mov	r3, r0
 80113d6:	2b00      	cmp	r3, #0
 80113d8:	d006      	beq.n	80113e8 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 80113da:	4b0d      	ldr	r3, [pc, #52]	; (8011410 <tcpip_init+0x78>)
 80113dc:	f240 2265 	movw	r2, #613	; 0x265
 80113e0:	490f      	ldr	r1, [pc, #60]	; (8011420 <tcpip_init+0x88>)
 80113e2:	480d      	ldr	r0, [pc, #52]	; (8011418 <tcpip_init+0x80>)
 80113e4:	f00f f834 	bl	8020450 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 80113e8:	2300      	movs	r3, #0
 80113ea:	9300      	str	r3, [sp, #0]
 80113ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80113f0:	2200      	movs	r2, #0
 80113f2:	490c      	ldr	r1, [pc, #48]	; (8011424 <tcpip_init+0x8c>)
 80113f4:	480c      	ldr	r0, [pc, #48]	; (8011428 <tcpip_init+0x90>)
 80113f6:	f00d fa43 	bl	801e880 <sys_thread_new>
}
 80113fa:	bf00      	nop
 80113fc:	3708      	adds	r7, #8
 80113fe:	46bd      	mov	sp, r7
 8011400:	bd80      	pop	{r7, pc}
 8011402:	bf00      	nop
 8011404:	24004ca8 	.word	0x24004ca8
 8011408:	24004cac 	.word	0x24004cac
 801140c:	24004cb0 	.word	0x24004cb0
 8011410:	080240b0 	.word	0x080240b0
 8011414:	08024138 	.word	0x08024138
 8011418:	08024100 	.word	0x08024100
 801141c:	24004cb4 	.word	0x24004cb4
 8011420:	0802415c 	.word	0x0802415c
 8011424:	08011129 	.word	0x08011129
 8011428:	08024180 	.word	0x08024180

0801142c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 801142c:	b480      	push	{r7}
 801142e:	b083      	sub	sp, #12
 8011430:	af00      	add	r7, sp, #0
 8011432:	4603      	mov	r3, r0
 8011434:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8011436:	88fb      	ldrh	r3, [r7, #6]
 8011438:	021b      	lsls	r3, r3, #8
 801143a:	b21a      	sxth	r2, r3
 801143c:	88fb      	ldrh	r3, [r7, #6]
 801143e:	0a1b      	lsrs	r3, r3, #8
 8011440:	b29b      	uxth	r3, r3
 8011442:	b21b      	sxth	r3, r3
 8011444:	4313      	orrs	r3, r2
 8011446:	b21b      	sxth	r3, r3
 8011448:	b29b      	uxth	r3, r3
}
 801144a:	4618      	mov	r0, r3
 801144c:	370c      	adds	r7, #12
 801144e:	46bd      	mov	sp, r7
 8011450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011454:	4770      	bx	lr

08011456 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8011456:	b480      	push	{r7}
 8011458:	b083      	sub	sp, #12
 801145a:	af00      	add	r7, sp, #0
 801145c:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 801145e:	687b      	ldr	r3, [r7, #4]
 8011460:	061a      	lsls	r2, r3, #24
 8011462:	687b      	ldr	r3, [r7, #4]
 8011464:	021b      	lsls	r3, r3, #8
 8011466:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 801146a:	431a      	orrs	r2, r3
 801146c:	687b      	ldr	r3, [r7, #4]
 801146e:	0a1b      	lsrs	r3, r3, #8
 8011470:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8011474:	431a      	orrs	r2, r3
 8011476:	687b      	ldr	r3, [r7, #4]
 8011478:	0e1b      	lsrs	r3, r3, #24
 801147a:	4313      	orrs	r3, r2
}
 801147c:	4618      	mov	r0, r3
 801147e:	370c      	adds	r7, #12
 8011480:	46bd      	mov	sp, r7
 8011482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011486:	4770      	bx	lr

08011488 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 8011488:	b480      	push	{r7}
 801148a:	b089      	sub	sp, #36	; 0x24
 801148c:	af00      	add	r7, sp, #0
 801148e:	6078      	str	r0, [r7, #4]
 8011490:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 8011492:	687b      	ldr	r3, [r7, #4]
 8011494:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 8011496:	2300      	movs	r3, #0
 8011498:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 801149a:	2300      	movs	r3, #0
 801149c:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 801149e:	69fb      	ldr	r3, [r7, #28]
 80114a0:	f003 0301 	and.w	r3, r3, #1
 80114a4:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 80114a6:	693b      	ldr	r3, [r7, #16]
 80114a8:	2b00      	cmp	r3, #0
 80114aa:	d00d      	beq.n	80114c8 <lwip_standard_chksum+0x40>
 80114ac:	683b      	ldr	r3, [r7, #0]
 80114ae:	2b00      	cmp	r3, #0
 80114b0:	dd0a      	ble.n	80114c8 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 80114b2:	69fa      	ldr	r2, [r7, #28]
 80114b4:	1c53      	adds	r3, r2, #1
 80114b6:	61fb      	str	r3, [r7, #28]
 80114b8:	f107 030e 	add.w	r3, r7, #14
 80114bc:	3301      	adds	r3, #1
 80114be:	7812      	ldrb	r2, [r2, #0]
 80114c0:	701a      	strb	r2, [r3, #0]
    len--;
 80114c2:	683b      	ldr	r3, [r7, #0]
 80114c4:	3b01      	subs	r3, #1
 80114c6:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 80114c8:	69fb      	ldr	r3, [r7, #28]
 80114ca:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 80114cc:	e00a      	b.n	80114e4 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 80114ce:	69bb      	ldr	r3, [r7, #24]
 80114d0:	1c9a      	adds	r2, r3, #2
 80114d2:	61ba      	str	r2, [r7, #24]
 80114d4:	881b      	ldrh	r3, [r3, #0]
 80114d6:	461a      	mov	r2, r3
 80114d8:	697b      	ldr	r3, [r7, #20]
 80114da:	4413      	add	r3, r2
 80114dc:	617b      	str	r3, [r7, #20]
    len -= 2;
 80114de:	683b      	ldr	r3, [r7, #0]
 80114e0:	3b02      	subs	r3, #2
 80114e2:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 80114e4:	683b      	ldr	r3, [r7, #0]
 80114e6:	2b01      	cmp	r3, #1
 80114e8:	dcf1      	bgt.n	80114ce <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 80114ea:	683b      	ldr	r3, [r7, #0]
 80114ec:	2b00      	cmp	r3, #0
 80114ee:	dd04      	ble.n	80114fa <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 80114f0:	f107 030e 	add.w	r3, r7, #14
 80114f4:	69ba      	ldr	r2, [r7, #24]
 80114f6:	7812      	ldrb	r2, [r2, #0]
 80114f8:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 80114fa:	89fb      	ldrh	r3, [r7, #14]
 80114fc:	461a      	mov	r2, r3
 80114fe:	697b      	ldr	r3, [r7, #20]
 8011500:	4413      	add	r3, r2
 8011502:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 8011504:	697b      	ldr	r3, [r7, #20]
 8011506:	0c1a      	lsrs	r2, r3, #16
 8011508:	697b      	ldr	r3, [r7, #20]
 801150a:	b29b      	uxth	r3, r3
 801150c:	4413      	add	r3, r2
 801150e:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 8011510:	697b      	ldr	r3, [r7, #20]
 8011512:	0c1a      	lsrs	r2, r3, #16
 8011514:	697b      	ldr	r3, [r7, #20]
 8011516:	b29b      	uxth	r3, r3
 8011518:	4413      	add	r3, r2
 801151a:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 801151c:	693b      	ldr	r3, [r7, #16]
 801151e:	2b00      	cmp	r3, #0
 8011520:	d007      	beq.n	8011532 <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 8011522:	697b      	ldr	r3, [r7, #20]
 8011524:	021b      	lsls	r3, r3, #8
 8011526:	b29a      	uxth	r2, r3
 8011528:	697b      	ldr	r3, [r7, #20]
 801152a:	0a1b      	lsrs	r3, r3, #8
 801152c:	b2db      	uxtb	r3, r3
 801152e:	4313      	orrs	r3, r2
 8011530:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 8011532:	697b      	ldr	r3, [r7, #20]
 8011534:	b29b      	uxth	r3, r3
}
 8011536:	4618      	mov	r0, r3
 8011538:	3724      	adds	r7, #36	; 0x24
 801153a:	46bd      	mov	sp, r7
 801153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011540:	4770      	bx	lr

08011542 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 8011542:	b580      	push	{r7, lr}
 8011544:	b082      	sub	sp, #8
 8011546:	af00      	add	r7, sp, #0
 8011548:	6078      	str	r0, [r7, #4]
 801154a:	460b      	mov	r3, r1
 801154c:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 801154e:	887b      	ldrh	r3, [r7, #2]
 8011550:	4619      	mov	r1, r3
 8011552:	6878      	ldr	r0, [r7, #4]
 8011554:	f7ff ff98 	bl	8011488 <lwip_standard_chksum>
 8011558:	4603      	mov	r3, r0
 801155a:	43db      	mvns	r3, r3
 801155c:	b29b      	uxth	r3, r3
}
 801155e:	4618      	mov	r0, r3
 8011560:	3708      	adds	r7, #8
 8011562:	46bd      	mov	sp, r7
 8011564:	bd80      	pop	{r7, pc}

08011566 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 8011566:	b580      	push	{r7, lr}
 8011568:	b086      	sub	sp, #24
 801156a:	af00      	add	r7, sp, #0
 801156c:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 801156e:	2300      	movs	r3, #0
 8011570:	60fb      	str	r3, [r7, #12]

  acc = 0;
 8011572:	2300      	movs	r3, #0
 8011574:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 8011576:	687b      	ldr	r3, [r7, #4]
 8011578:	613b      	str	r3, [r7, #16]
 801157a:	e02b      	b.n	80115d4 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 801157c:	693b      	ldr	r3, [r7, #16]
 801157e:	685a      	ldr	r2, [r3, #4]
 8011580:	693b      	ldr	r3, [r7, #16]
 8011582:	895b      	ldrh	r3, [r3, #10]
 8011584:	4619      	mov	r1, r3
 8011586:	4610      	mov	r0, r2
 8011588:	f7ff ff7e 	bl	8011488 <lwip_standard_chksum>
 801158c:	4603      	mov	r3, r0
 801158e:	461a      	mov	r2, r3
 8011590:	697b      	ldr	r3, [r7, #20]
 8011592:	4413      	add	r3, r2
 8011594:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 8011596:	697b      	ldr	r3, [r7, #20]
 8011598:	0c1a      	lsrs	r2, r3, #16
 801159a:	697b      	ldr	r3, [r7, #20]
 801159c:	b29b      	uxth	r3, r3
 801159e:	4413      	add	r3, r2
 80115a0:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 80115a2:	693b      	ldr	r3, [r7, #16]
 80115a4:	895b      	ldrh	r3, [r3, #10]
 80115a6:	f003 0301 	and.w	r3, r3, #1
 80115aa:	b29b      	uxth	r3, r3
 80115ac:	2b00      	cmp	r3, #0
 80115ae:	d00e      	beq.n	80115ce <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 80115b0:	68fb      	ldr	r3, [r7, #12]
 80115b2:	2b00      	cmp	r3, #0
 80115b4:	bf0c      	ite	eq
 80115b6:	2301      	moveq	r3, #1
 80115b8:	2300      	movne	r3, #0
 80115ba:	b2db      	uxtb	r3, r3
 80115bc:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 80115be:	697b      	ldr	r3, [r7, #20]
 80115c0:	021b      	lsls	r3, r3, #8
 80115c2:	b29a      	uxth	r2, r3
 80115c4:	697b      	ldr	r3, [r7, #20]
 80115c6:	0a1b      	lsrs	r3, r3, #8
 80115c8:	b2db      	uxtb	r3, r3
 80115ca:	4313      	orrs	r3, r2
 80115cc:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 80115ce:	693b      	ldr	r3, [r7, #16]
 80115d0:	681b      	ldr	r3, [r3, #0]
 80115d2:	613b      	str	r3, [r7, #16]
 80115d4:	693b      	ldr	r3, [r7, #16]
 80115d6:	2b00      	cmp	r3, #0
 80115d8:	d1d0      	bne.n	801157c <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 80115da:	68fb      	ldr	r3, [r7, #12]
 80115dc:	2b00      	cmp	r3, #0
 80115de:	d007      	beq.n	80115f0 <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 80115e0:	697b      	ldr	r3, [r7, #20]
 80115e2:	021b      	lsls	r3, r3, #8
 80115e4:	b29a      	uxth	r2, r3
 80115e6:	697b      	ldr	r3, [r7, #20]
 80115e8:	0a1b      	lsrs	r3, r3, #8
 80115ea:	b2db      	uxtb	r3, r3
 80115ec:	4313      	orrs	r3, r2
 80115ee:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 80115f0:	697b      	ldr	r3, [r7, #20]
 80115f2:	b29b      	uxth	r3, r3
 80115f4:	43db      	mvns	r3, r3
 80115f6:	b29b      	uxth	r3, r3
}
 80115f8:	4618      	mov	r0, r3
 80115fa:	3718      	adds	r7, #24
 80115fc:	46bd      	mov	sp, r7
 80115fe:	bd80      	pop	{r7, pc}

08011600 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8011600:	b580      	push	{r7, lr}
 8011602:	b082      	sub	sp, #8
 8011604:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8011606:	2300      	movs	r3, #0
 8011608:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 801160a:	f00d f8f3 	bl	801e7f4 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 801160e:	f000 f8d5 	bl	80117bc <mem_init>
  memp_init();
 8011612:	f000 fc2d 	bl	8011e70 <memp_init>
  pbuf_init();
  netif_init();
 8011616:	f000 fd39 	bl	801208c <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 801161a:	f008 f899 	bl	8019750 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 801161e:	f001 fe97 	bl	8013350 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8011622:	f007 ffdb 	bl	80195dc <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8011626:	bf00      	nop
 8011628:	3708      	adds	r7, #8
 801162a:	46bd      	mov	sp, r7
 801162c:	bd80      	pop	{r7, pc}
	...

08011630 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8011630:	b480      	push	{r7}
 8011632:	b083      	sub	sp, #12
 8011634:	af00      	add	r7, sp, #0
 8011636:	4603      	mov	r3, r0
 8011638:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 801163a:	4b05      	ldr	r3, [pc, #20]	; (8011650 <ptr_to_mem+0x20>)
 801163c:	681a      	ldr	r2, [r3, #0]
 801163e:	88fb      	ldrh	r3, [r7, #6]
 8011640:	4413      	add	r3, r2
}
 8011642:	4618      	mov	r0, r3
 8011644:	370c      	adds	r7, #12
 8011646:	46bd      	mov	sp, r7
 8011648:	f85d 7b04 	ldr.w	r7, [sp], #4
 801164c:	4770      	bx	lr
 801164e:	bf00      	nop
 8011650:	24004cd0 	.word	0x24004cd0

08011654 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8011654:	b480      	push	{r7}
 8011656:	b083      	sub	sp, #12
 8011658:	af00      	add	r7, sp, #0
 801165a:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 801165c:	4b05      	ldr	r3, [pc, #20]	; (8011674 <mem_to_ptr+0x20>)
 801165e:	681b      	ldr	r3, [r3, #0]
 8011660:	687a      	ldr	r2, [r7, #4]
 8011662:	1ad3      	subs	r3, r2, r3
 8011664:	b29b      	uxth	r3, r3
}
 8011666:	4618      	mov	r0, r3
 8011668:	370c      	adds	r7, #12
 801166a:	46bd      	mov	sp, r7
 801166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011670:	4770      	bx	lr
 8011672:	bf00      	nop
 8011674:	24004cd0 	.word	0x24004cd0

08011678 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8011678:	b590      	push	{r4, r7, lr}
 801167a:	b085      	sub	sp, #20
 801167c:	af00      	add	r7, sp, #0
 801167e:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8011680:	4b45      	ldr	r3, [pc, #276]	; (8011798 <plug_holes+0x120>)
 8011682:	681b      	ldr	r3, [r3, #0]
 8011684:	687a      	ldr	r2, [r7, #4]
 8011686:	429a      	cmp	r2, r3
 8011688:	d206      	bcs.n	8011698 <plug_holes+0x20>
 801168a:	4b44      	ldr	r3, [pc, #272]	; (801179c <plug_holes+0x124>)
 801168c:	f240 12df 	movw	r2, #479	; 0x1df
 8011690:	4943      	ldr	r1, [pc, #268]	; (80117a0 <plug_holes+0x128>)
 8011692:	4844      	ldr	r0, [pc, #272]	; (80117a4 <plug_holes+0x12c>)
 8011694:	f00e fedc 	bl	8020450 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8011698:	4b43      	ldr	r3, [pc, #268]	; (80117a8 <plug_holes+0x130>)
 801169a:	681b      	ldr	r3, [r3, #0]
 801169c:	687a      	ldr	r2, [r7, #4]
 801169e:	429a      	cmp	r2, r3
 80116a0:	d306      	bcc.n	80116b0 <plug_holes+0x38>
 80116a2:	4b3e      	ldr	r3, [pc, #248]	; (801179c <plug_holes+0x124>)
 80116a4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80116a8:	4940      	ldr	r1, [pc, #256]	; (80117ac <plug_holes+0x134>)
 80116aa:	483e      	ldr	r0, [pc, #248]	; (80117a4 <plug_holes+0x12c>)
 80116ac:	f00e fed0 	bl	8020450 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 80116b0:	687b      	ldr	r3, [r7, #4]
 80116b2:	791b      	ldrb	r3, [r3, #4]
 80116b4:	2b00      	cmp	r3, #0
 80116b6:	d006      	beq.n	80116c6 <plug_holes+0x4e>
 80116b8:	4b38      	ldr	r3, [pc, #224]	; (801179c <plug_holes+0x124>)
 80116ba:	f240 12e1 	movw	r2, #481	; 0x1e1
 80116be:	493c      	ldr	r1, [pc, #240]	; (80117b0 <plug_holes+0x138>)
 80116c0:	4838      	ldr	r0, [pc, #224]	; (80117a4 <plug_holes+0x12c>)
 80116c2:	f00e fec5 	bl	8020450 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 80116c6:	687b      	ldr	r3, [r7, #4]
 80116c8:	881b      	ldrh	r3, [r3, #0]
 80116ca:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80116ce:	d906      	bls.n	80116de <plug_holes+0x66>
 80116d0:	4b32      	ldr	r3, [pc, #200]	; (801179c <plug_holes+0x124>)
 80116d2:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 80116d6:	4937      	ldr	r1, [pc, #220]	; (80117b4 <plug_holes+0x13c>)
 80116d8:	4832      	ldr	r0, [pc, #200]	; (80117a4 <plug_holes+0x12c>)
 80116da:	f00e feb9 	bl	8020450 <iprintf>

  nmem = ptr_to_mem(mem->next);
 80116de:	687b      	ldr	r3, [r7, #4]
 80116e0:	881b      	ldrh	r3, [r3, #0]
 80116e2:	4618      	mov	r0, r3
 80116e4:	f7ff ffa4 	bl	8011630 <ptr_to_mem>
 80116e8:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 80116ea:	687a      	ldr	r2, [r7, #4]
 80116ec:	68fb      	ldr	r3, [r7, #12]
 80116ee:	429a      	cmp	r2, r3
 80116f0:	d024      	beq.n	801173c <plug_holes+0xc4>
 80116f2:	68fb      	ldr	r3, [r7, #12]
 80116f4:	791b      	ldrb	r3, [r3, #4]
 80116f6:	2b00      	cmp	r3, #0
 80116f8:	d120      	bne.n	801173c <plug_holes+0xc4>
 80116fa:	4b2b      	ldr	r3, [pc, #172]	; (80117a8 <plug_holes+0x130>)
 80116fc:	681b      	ldr	r3, [r3, #0]
 80116fe:	68fa      	ldr	r2, [r7, #12]
 8011700:	429a      	cmp	r2, r3
 8011702:	d01b      	beq.n	801173c <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8011704:	4b2c      	ldr	r3, [pc, #176]	; (80117b8 <plug_holes+0x140>)
 8011706:	681b      	ldr	r3, [r3, #0]
 8011708:	68fa      	ldr	r2, [r7, #12]
 801170a:	429a      	cmp	r2, r3
 801170c:	d102      	bne.n	8011714 <plug_holes+0x9c>
      lfree = mem;
 801170e:	4a2a      	ldr	r2, [pc, #168]	; (80117b8 <plug_holes+0x140>)
 8011710:	687b      	ldr	r3, [r7, #4]
 8011712:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8011714:	68fb      	ldr	r3, [r7, #12]
 8011716:	881a      	ldrh	r2, [r3, #0]
 8011718:	687b      	ldr	r3, [r7, #4]
 801171a:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 801171c:	68fb      	ldr	r3, [r7, #12]
 801171e:	881b      	ldrh	r3, [r3, #0]
 8011720:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8011724:	d00a      	beq.n	801173c <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8011726:	68fb      	ldr	r3, [r7, #12]
 8011728:	881b      	ldrh	r3, [r3, #0]
 801172a:	4618      	mov	r0, r3
 801172c:	f7ff ff80 	bl	8011630 <ptr_to_mem>
 8011730:	4604      	mov	r4, r0
 8011732:	6878      	ldr	r0, [r7, #4]
 8011734:	f7ff ff8e 	bl	8011654 <mem_to_ptr>
 8011738:	4603      	mov	r3, r0
 801173a:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 801173c:	687b      	ldr	r3, [r7, #4]
 801173e:	885b      	ldrh	r3, [r3, #2]
 8011740:	4618      	mov	r0, r3
 8011742:	f7ff ff75 	bl	8011630 <ptr_to_mem>
 8011746:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8011748:	68ba      	ldr	r2, [r7, #8]
 801174a:	687b      	ldr	r3, [r7, #4]
 801174c:	429a      	cmp	r2, r3
 801174e:	d01f      	beq.n	8011790 <plug_holes+0x118>
 8011750:	68bb      	ldr	r3, [r7, #8]
 8011752:	791b      	ldrb	r3, [r3, #4]
 8011754:	2b00      	cmp	r3, #0
 8011756:	d11b      	bne.n	8011790 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8011758:	4b17      	ldr	r3, [pc, #92]	; (80117b8 <plug_holes+0x140>)
 801175a:	681b      	ldr	r3, [r3, #0]
 801175c:	687a      	ldr	r2, [r7, #4]
 801175e:	429a      	cmp	r2, r3
 8011760:	d102      	bne.n	8011768 <plug_holes+0xf0>
      lfree = pmem;
 8011762:	4a15      	ldr	r2, [pc, #84]	; (80117b8 <plug_holes+0x140>)
 8011764:	68bb      	ldr	r3, [r7, #8]
 8011766:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8011768:	687b      	ldr	r3, [r7, #4]
 801176a:	881a      	ldrh	r2, [r3, #0]
 801176c:	68bb      	ldr	r3, [r7, #8]
 801176e:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8011770:	687b      	ldr	r3, [r7, #4]
 8011772:	881b      	ldrh	r3, [r3, #0]
 8011774:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8011778:	d00a      	beq.n	8011790 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 801177a:	687b      	ldr	r3, [r7, #4]
 801177c:	881b      	ldrh	r3, [r3, #0]
 801177e:	4618      	mov	r0, r3
 8011780:	f7ff ff56 	bl	8011630 <ptr_to_mem>
 8011784:	4604      	mov	r4, r0
 8011786:	68b8      	ldr	r0, [r7, #8]
 8011788:	f7ff ff64 	bl	8011654 <mem_to_ptr>
 801178c:	4603      	mov	r3, r0
 801178e:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8011790:	bf00      	nop
 8011792:	3714      	adds	r7, #20
 8011794:	46bd      	mov	sp, r7
 8011796:	bd90      	pop	{r4, r7, pc}
 8011798:	24004cd0 	.word	0x24004cd0
 801179c:	08024190 	.word	0x08024190
 80117a0:	080241c0 	.word	0x080241c0
 80117a4:	080241d8 	.word	0x080241d8
 80117a8:	24004cd4 	.word	0x24004cd4
 80117ac:	08024200 	.word	0x08024200
 80117b0:	0802421c 	.word	0x0802421c
 80117b4:	08024238 	.word	0x08024238
 80117b8:	24004cdc 	.word	0x24004cdc

080117bc <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 80117bc:	b580      	push	{r7, lr}
 80117be:	b082      	sub	sp, #8
 80117c0:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80117c2:	4b1d      	ldr	r3, [pc, #116]	; (8011838 <mem_init+0x7c>)
 80117c4:	4a1d      	ldr	r2, [pc, #116]	; (801183c <mem_init+0x80>)
 80117c6:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 80117c8:	4b1b      	ldr	r3, [pc, #108]	; (8011838 <mem_init+0x7c>)
 80117ca:	681b      	ldr	r3, [r3, #0]
 80117cc:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 80117ce:	687b      	ldr	r3, [r7, #4]
 80117d0:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80117d4:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 80117d6:	687b      	ldr	r3, [r7, #4]
 80117d8:	2200      	movs	r2, #0
 80117da:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 80117dc:	687b      	ldr	r3, [r7, #4]
 80117de:	2200      	movs	r2, #0
 80117e0:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 80117e2:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 80117e6:	f7ff ff23 	bl	8011630 <ptr_to_mem>
 80117ea:	4603      	mov	r3, r0
 80117ec:	4a14      	ldr	r2, [pc, #80]	; (8011840 <mem_init+0x84>)
 80117ee:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 80117f0:	4b13      	ldr	r3, [pc, #76]	; (8011840 <mem_init+0x84>)
 80117f2:	681b      	ldr	r3, [r3, #0]
 80117f4:	2201      	movs	r2, #1
 80117f6:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 80117f8:	4b11      	ldr	r3, [pc, #68]	; (8011840 <mem_init+0x84>)
 80117fa:	681b      	ldr	r3, [r3, #0]
 80117fc:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8011800:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8011802:	4b0f      	ldr	r3, [pc, #60]	; (8011840 <mem_init+0x84>)
 8011804:	681b      	ldr	r3, [r3, #0]
 8011806:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 801180a:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 801180c:	4b0a      	ldr	r3, [pc, #40]	; (8011838 <mem_init+0x7c>)
 801180e:	681b      	ldr	r3, [r3, #0]
 8011810:	4a0c      	ldr	r2, [pc, #48]	; (8011844 <mem_init+0x88>)
 8011812:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8011814:	480c      	ldr	r0, [pc, #48]	; (8011848 <mem_init+0x8c>)
 8011816:	f00c fffb 	bl	801e810 <sys_mutex_new>
 801181a:	4603      	mov	r3, r0
 801181c:	2b00      	cmp	r3, #0
 801181e:	d006      	beq.n	801182e <mem_init+0x72>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8011820:	4b0a      	ldr	r3, [pc, #40]	; (801184c <mem_init+0x90>)
 8011822:	f240 221f 	movw	r2, #543	; 0x21f
 8011826:	490a      	ldr	r1, [pc, #40]	; (8011850 <mem_init+0x94>)
 8011828:	480a      	ldr	r0, [pc, #40]	; (8011854 <mem_init+0x98>)
 801182a:	f00e fe11 	bl	8020450 <iprintf>
  }
}
 801182e:	bf00      	nop
 8011830:	3708      	adds	r7, #8
 8011832:	46bd      	mov	sp, r7
 8011834:	bd80      	pop	{r7, pc}
 8011836:	bf00      	nop
 8011838:	24004cd0 	.word	0x24004cd0
 801183c:	30044000 	.word	0x30044000
 8011840:	24004cd4 	.word	0x24004cd4
 8011844:	24004cdc 	.word	0x24004cdc
 8011848:	24004cd8 	.word	0x24004cd8
 801184c:	08024190 	.word	0x08024190
 8011850:	08024264 	.word	0x08024264
 8011854:	080241d8 	.word	0x080241d8

08011858 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8011858:	b580      	push	{r7, lr}
 801185a:	b086      	sub	sp, #24
 801185c:	af00      	add	r7, sp, #0
 801185e:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8011860:	6878      	ldr	r0, [r7, #4]
 8011862:	f7ff fef7 	bl	8011654 <mem_to_ptr>
 8011866:	4603      	mov	r3, r0
 8011868:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 801186a:	687b      	ldr	r3, [r7, #4]
 801186c:	881b      	ldrh	r3, [r3, #0]
 801186e:	4618      	mov	r0, r3
 8011870:	f7ff fede 	bl	8011630 <ptr_to_mem>
 8011874:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8011876:	687b      	ldr	r3, [r7, #4]
 8011878:	885b      	ldrh	r3, [r3, #2]
 801187a:	4618      	mov	r0, r3
 801187c:	f7ff fed8 	bl	8011630 <ptr_to_mem>
 8011880:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8011882:	687b      	ldr	r3, [r7, #4]
 8011884:	881b      	ldrh	r3, [r3, #0]
 8011886:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801188a:	d818      	bhi.n	80118be <mem_link_valid+0x66>
 801188c:	687b      	ldr	r3, [r7, #4]
 801188e:	885b      	ldrh	r3, [r3, #2]
 8011890:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8011894:	d813      	bhi.n	80118be <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8011896:	687b      	ldr	r3, [r7, #4]
 8011898:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 801189a:	8afa      	ldrh	r2, [r7, #22]
 801189c:	429a      	cmp	r2, r3
 801189e:	d004      	beq.n	80118aa <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80118a0:	68fb      	ldr	r3, [r7, #12]
 80118a2:	881b      	ldrh	r3, [r3, #0]
 80118a4:	8afa      	ldrh	r2, [r7, #22]
 80118a6:	429a      	cmp	r2, r3
 80118a8:	d109      	bne.n	80118be <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80118aa:	4b08      	ldr	r3, [pc, #32]	; (80118cc <mem_link_valid+0x74>)
 80118ac:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80118ae:	693a      	ldr	r2, [r7, #16]
 80118b0:	429a      	cmp	r2, r3
 80118b2:	d006      	beq.n	80118c2 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80118b4:	693b      	ldr	r3, [r7, #16]
 80118b6:	885b      	ldrh	r3, [r3, #2]
 80118b8:	8afa      	ldrh	r2, [r7, #22]
 80118ba:	429a      	cmp	r2, r3
 80118bc:	d001      	beq.n	80118c2 <mem_link_valid+0x6a>
    return 0;
 80118be:	2300      	movs	r3, #0
 80118c0:	e000      	b.n	80118c4 <mem_link_valid+0x6c>
  }
  return 1;
 80118c2:	2301      	movs	r3, #1
}
 80118c4:	4618      	mov	r0, r3
 80118c6:	3718      	adds	r7, #24
 80118c8:	46bd      	mov	sp, r7
 80118ca:	bd80      	pop	{r7, pc}
 80118cc:	24004cd4 	.word	0x24004cd4

080118d0 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 80118d0:	b580      	push	{r7, lr}
 80118d2:	b088      	sub	sp, #32
 80118d4:	af00      	add	r7, sp, #0
 80118d6:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 80118d8:	687b      	ldr	r3, [r7, #4]
 80118da:	2b00      	cmp	r3, #0
 80118dc:	d070      	beq.n	80119c0 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 80118de:	687b      	ldr	r3, [r7, #4]
 80118e0:	f003 0303 	and.w	r3, r3, #3
 80118e4:	2b00      	cmp	r3, #0
 80118e6:	d00d      	beq.n	8011904 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 80118e8:	4b37      	ldr	r3, [pc, #220]	; (80119c8 <mem_free+0xf8>)
 80118ea:	f240 2273 	movw	r2, #627	; 0x273
 80118ee:	4937      	ldr	r1, [pc, #220]	; (80119cc <mem_free+0xfc>)
 80118f0:	4837      	ldr	r0, [pc, #220]	; (80119d0 <mem_free+0x100>)
 80118f2:	f00e fdad 	bl	8020450 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80118f6:	f00c ffe9 	bl	801e8cc <sys_arch_protect>
 80118fa:	60f8      	str	r0, [r7, #12]
 80118fc:	68f8      	ldr	r0, [r7, #12]
 80118fe:	f00c fff3 	bl	801e8e8 <sys_arch_unprotect>
    return;
 8011902:	e05e      	b.n	80119c2 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8011904:	687b      	ldr	r3, [r7, #4]
 8011906:	3b08      	subs	r3, #8
 8011908:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 801190a:	4b32      	ldr	r3, [pc, #200]	; (80119d4 <mem_free+0x104>)
 801190c:	681b      	ldr	r3, [r3, #0]
 801190e:	69fa      	ldr	r2, [r7, #28]
 8011910:	429a      	cmp	r2, r3
 8011912:	d306      	bcc.n	8011922 <mem_free+0x52>
 8011914:	687b      	ldr	r3, [r7, #4]
 8011916:	f103 020c 	add.w	r2, r3, #12
 801191a:	4b2f      	ldr	r3, [pc, #188]	; (80119d8 <mem_free+0x108>)
 801191c:	681b      	ldr	r3, [r3, #0]
 801191e:	429a      	cmp	r2, r3
 8011920:	d90d      	bls.n	801193e <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8011922:	4b29      	ldr	r3, [pc, #164]	; (80119c8 <mem_free+0xf8>)
 8011924:	f240 227f 	movw	r2, #639	; 0x27f
 8011928:	492c      	ldr	r1, [pc, #176]	; (80119dc <mem_free+0x10c>)
 801192a:	4829      	ldr	r0, [pc, #164]	; (80119d0 <mem_free+0x100>)
 801192c:	f00e fd90 	bl	8020450 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8011930:	f00c ffcc 	bl	801e8cc <sys_arch_protect>
 8011934:	6138      	str	r0, [r7, #16]
 8011936:	6938      	ldr	r0, [r7, #16]
 8011938:	f00c ffd6 	bl	801e8e8 <sys_arch_unprotect>
    return;
 801193c:	e041      	b.n	80119c2 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 801193e:	4828      	ldr	r0, [pc, #160]	; (80119e0 <mem_free+0x110>)
 8011940:	f00c ff82 	bl	801e848 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 8011944:	69fb      	ldr	r3, [r7, #28]
 8011946:	791b      	ldrb	r3, [r3, #4]
 8011948:	2b00      	cmp	r3, #0
 801194a:	d110      	bne.n	801196e <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 801194c:	4b1e      	ldr	r3, [pc, #120]	; (80119c8 <mem_free+0xf8>)
 801194e:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8011952:	4924      	ldr	r1, [pc, #144]	; (80119e4 <mem_free+0x114>)
 8011954:	481e      	ldr	r0, [pc, #120]	; (80119d0 <mem_free+0x100>)
 8011956:	f00e fd7b 	bl	8020450 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 801195a:	4821      	ldr	r0, [pc, #132]	; (80119e0 <mem_free+0x110>)
 801195c:	f00c ff83 	bl	801e866 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8011960:	f00c ffb4 	bl	801e8cc <sys_arch_protect>
 8011964:	6178      	str	r0, [r7, #20]
 8011966:	6978      	ldr	r0, [r7, #20]
 8011968:	f00c ffbe 	bl	801e8e8 <sys_arch_unprotect>
    return;
 801196c:	e029      	b.n	80119c2 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 801196e:	69f8      	ldr	r0, [r7, #28]
 8011970:	f7ff ff72 	bl	8011858 <mem_link_valid>
 8011974:	4603      	mov	r3, r0
 8011976:	2b00      	cmp	r3, #0
 8011978:	d110      	bne.n	801199c <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 801197a:	4b13      	ldr	r3, [pc, #76]	; (80119c8 <mem_free+0xf8>)
 801197c:	f240 2295 	movw	r2, #661	; 0x295
 8011980:	4919      	ldr	r1, [pc, #100]	; (80119e8 <mem_free+0x118>)
 8011982:	4813      	ldr	r0, [pc, #76]	; (80119d0 <mem_free+0x100>)
 8011984:	f00e fd64 	bl	8020450 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8011988:	4815      	ldr	r0, [pc, #84]	; (80119e0 <mem_free+0x110>)
 801198a:	f00c ff6c 	bl	801e866 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 801198e:	f00c ff9d 	bl	801e8cc <sys_arch_protect>
 8011992:	61b8      	str	r0, [r7, #24]
 8011994:	69b8      	ldr	r0, [r7, #24]
 8011996:	f00c ffa7 	bl	801e8e8 <sys_arch_unprotect>
    return;
 801199a:	e012      	b.n	80119c2 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 801199c:	69fb      	ldr	r3, [r7, #28]
 801199e:	2200      	movs	r2, #0
 80119a0:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 80119a2:	4b12      	ldr	r3, [pc, #72]	; (80119ec <mem_free+0x11c>)
 80119a4:	681b      	ldr	r3, [r3, #0]
 80119a6:	69fa      	ldr	r2, [r7, #28]
 80119a8:	429a      	cmp	r2, r3
 80119aa:	d202      	bcs.n	80119b2 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 80119ac:	4a0f      	ldr	r2, [pc, #60]	; (80119ec <mem_free+0x11c>)
 80119ae:	69fb      	ldr	r3, [r7, #28]
 80119b0:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 80119b2:	69f8      	ldr	r0, [r7, #28]
 80119b4:	f7ff fe60 	bl	8011678 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 80119b8:	4809      	ldr	r0, [pc, #36]	; (80119e0 <mem_free+0x110>)
 80119ba:	f00c ff54 	bl	801e866 <sys_mutex_unlock>
 80119be:	e000      	b.n	80119c2 <mem_free+0xf2>
    return;
 80119c0:	bf00      	nop
}
 80119c2:	3720      	adds	r7, #32
 80119c4:	46bd      	mov	sp, r7
 80119c6:	bd80      	pop	{r7, pc}
 80119c8:	08024190 	.word	0x08024190
 80119cc:	08024280 	.word	0x08024280
 80119d0:	080241d8 	.word	0x080241d8
 80119d4:	24004cd0 	.word	0x24004cd0
 80119d8:	24004cd4 	.word	0x24004cd4
 80119dc:	080242a4 	.word	0x080242a4
 80119e0:	24004cd8 	.word	0x24004cd8
 80119e4:	080242c0 	.word	0x080242c0
 80119e8:	080242e8 	.word	0x080242e8
 80119ec:	24004cdc 	.word	0x24004cdc

080119f0 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 80119f0:	b580      	push	{r7, lr}
 80119f2:	b088      	sub	sp, #32
 80119f4:	af00      	add	r7, sp, #0
 80119f6:	6078      	str	r0, [r7, #4]
 80119f8:	460b      	mov	r3, r1
 80119fa:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 80119fc:	887b      	ldrh	r3, [r7, #2]
 80119fe:	3303      	adds	r3, #3
 8011a00:	b29b      	uxth	r3, r3
 8011a02:	f023 0303 	bic.w	r3, r3, #3
 8011a06:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8011a08:	8bfb      	ldrh	r3, [r7, #30]
 8011a0a:	2b0b      	cmp	r3, #11
 8011a0c:	d801      	bhi.n	8011a12 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8011a0e:	230c      	movs	r3, #12
 8011a10:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8011a12:	8bfb      	ldrh	r3, [r7, #30]
 8011a14:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8011a18:	d803      	bhi.n	8011a22 <mem_trim+0x32>
 8011a1a:	8bfa      	ldrh	r2, [r7, #30]
 8011a1c:	887b      	ldrh	r3, [r7, #2]
 8011a1e:	429a      	cmp	r2, r3
 8011a20:	d201      	bcs.n	8011a26 <mem_trim+0x36>
    return NULL;
 8011a22:	2300      	movs	r3, #0
 8011a24:	e0d8      	b.n	8011bd8 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8011a26:	4b6e      	ldr	r3, [pc, #440]	; (8011be0 <mem_trim+0x1f0>)
 8011a28:	681b      	ldr	r3, [r3, #0]
 8011a2a:	687a      	ldr	r2, [r7, #4]
 8011a2c:	429a      	cmp	r2, r3
 8011a2e:	d304      	bcc.n	8011a3a <mem_trim+0x4a>
 8011a30:	4b6c      	ldr	r3, [pc, #432]	; (8011be4 <mem_trim+0x1f4>)
 8011a32:	681b      	ldr	r3, [r3, #0]
 8011a34:	687a      	ldr	r2, [r7, #4]
 8011a36:	429a      	cmp	r2, r3
 8011a38:	d306      	bcc.n	8011a48 <mem_trim+0x58>
 8011a3a:	4b6b      	ldr	r3, [pc, #428]	; (8011be8 <mem_trim+0x1f8>)
 8011a3c:	f240 22d1 	movw	r2, #721	; 0x2d1
 8011a40:	496a      	ldr	r1, [pc, #424]	; (8011bec <mem_trim+0x1fc>)
 8011a42:	486b      	ldr	r0, [pc, #428]	; (8011bf0 <mem_trim+0x200>)
 8011a44:	f00e fd04 	bl	8020450 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8011a48:	4b65      	ldr	r3, [pc, #404]	; (8011be0 <mem_trim+0x1f0>)
 8011a4a:	681b      	ldr	r3, [r3, #0]
 8011a4c:	687a      	ldr	r2, [r7, #4]
 8011a4e:	429a      	cmp	r2, r3
 8011a50:	d304      	bcc.n	8011a5c <mem_trim+0x6c>
 8011a52:	4b64      	ldr	r3, [pc, #400]	; (8011be4 <mem_trim+0x1f4>)
 8011a54:	681b      	ldr	r3, [r3, #0]
 8011a56:	687a      	ldr	r2, [r7, #4]
 8011a58:	429a      	cmp	r2, r3
 8011a5a:	d307      	bcc.n	8011a6c <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8011a5c:	f00c ff36 	bl	801e8cc <sys_arch_protect>
 8011a60:	60b8      	str	r0, [r7, #8]
 8011a62:	68b8      	ldr	r0, [r7, #8]
 8011a64:	f00c ff40 	bl	801e8e8 <sys_arch_unprotect>
    return rmem;
 8011a68:	687b      	ldr	r3, [r7, #4]
 8011a6a:	e0b5      	b.n	8011bd8 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8011a6c:	687b      	ldr	r3, [r7, #4]
 8011a6e:	3b08      	subs	r3, #8
 8011a70:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8011a72:	69b8      	ldr	r0, [r7, #24]
 8011a74:	f7ff fdee 	bl	8011654 <mem_to_ptr>
 8011a78:	4603      	mov	r3, r0
 8011a7a:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8011a7c:	69bb      	ldr	r3, [r7, #24]
 8011a7e:	881a      	ldrh	r2, [r3, #0]
 8011a80:	8afb      	ldrh	r3, [r7, #22]
 8011a82:	1ad3      	subs	r3, r2, r3
 8011a84:	b29b      	uxth	r3, r3
 8011a86:	3b08      	subs	r3, #8
 8011a88:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8011a8a:	8bfa      	ldrh	r2, [r7, #30]
 8011a8c:	8abb      	ldrh	r3, [r7, #20]
 8011a8e:	429a      	cmp	r2, r3
 8011a90:	d906      	bls.n	8011aa0 <mem_trim+0xb0>
 8011a92:	4b55      	ldr	r3, [pc, #340]	; (8011be8 <mem_trim+0x1f8>)
 8011a94:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8011a98:	4956      	ldr	r1, [pc, #344]	; (8011bf4 <mem_trim+0x204>)
 8011a9a:	4855      	ldr	r0, [pc, #340]	; (8011bf0 <mem_trim+0x200>)
 8011a9c:	f00e fcd8 	bl	8020450 <iprintf>
  if (newsize > size) {
 8011aa0:	8bfa      	ldrh	r2, [r7, #30]
 8011aa2:	8abb      	ldrh	r3, [r7, #20]
 8011aa4:	429a      	cmp	r2, r3
 8011aa6:	d901      	bls.n	8011aac <mem_trim+0xbc>
    /* not supported */
    return NULL;
 8011aa8:	2300      	movs	r3, #0
 8011aaa:	e095      	b.n	8011bd8 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 8011aac:	8bfa      	ldrh	r2, [r7, #30]
 8011aae:	8abb      	ldrh	r3, [r7, #20]
 8011ab0:	429a      	cmp	r2, r3
 8011ab2:	d101      	bne.n	8011ab8 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 8011ab4:	687b      	ldr	r3, [r7, #4]
 8011ab6:	e08f      	b.n	8011bd8 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8011ab8:	484f      	ldr	r0, [pc, #316]	; (8011bf8 <mem_trim+0x208>)
 8011aba:	f00c fec5 	bl	801e848 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 8011abe:	69bb      	ldr	r3, [r7, #24]
 8011ac0:	881b      	ldrh	r3, [r3, #0]
 8011ac2:	4618      	mov	r0, r3
 8011ac4:	f7ff fdb4 	bl	8011630 <ptr_to_mem>
 8011ac8:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8011aca:	693b      	ldr	r3, [r7, #16]
 8011acc:	791b      	ldrb	r3, [r3, #4]
 8011ace:	2b00      	cmp	r3, #0
 8011ad0:	d13f      	bne.n	8011b52 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8011ad2:	69bb      	ldr	r3, [r7, #24]
 8011ad4:	881b      	ldrh	r3, [r3, #0]
 8011ad6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8011ada:	d106      	bne.n	8011aea <mem_trim+0xfa>
 8011adc:	4b42      	ldr	r3, [pc, #264]	; (8011be8 <mem_trim+0x1f8>)
 8011ade:	f240 22f5 	movw	r2, #757	; 0x2f5
 8011ae2:	4946      	ldr	r1, [pc, #280]	; (8011bfc <mem_trim+0x20c>)
 8011ae4:	4842      	ldr	r0, [pc, #264]	; (8011bf0 <mem_trim+0x200>)
 8011ae6:	f00e fcb3 	bl	8020450 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8011aea:	693b      	ldr	r3, [r7, #16]
 8011aec:	881b      	ldrh	r3, [r3, #0]
 8011aee:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8011af0:	8afa      	ldrh	r2, [r7, #22]
 8011af2:	8bfb      	ldrh	r3, [r7, #30]
 8011af4:	4413      	add	r3, r2
 8011af6:	b29b      	uxth	r3, r3
 8011af8:	3308      	adds	r3, #8
 8011afa:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8011afc:	4b40      	ldr	r3, [pc, #256]	; (8011c00 <mem_trim+0x210>)
 8011afe:	681b      	ldr	r3, [r3, #0]
 8011b00:	693a      	ldr	r2, [r7, #16]
 8011b02:	429a      	cmp	r2, r3
 8011b04:	d106      	bne.n	8011b14 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 8011b06:	89fb      	ldrh	r3, [r7, #14]
 8011b08:	4618      	mov	r0, r3
 8011b0a:	f7ff fd91 	bl	8011630 <ptr_to_mem>
 8011b0e:	4603      	mov	r3, r0
 8011b10:	4a3b      	ldr	r2, [pc, #236]	; (8011c00 <mem_trim+0x210>)
 8011b12:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8011b14:	89fb      	ldrh	r3, [r7, #14]
 8011b16:	4618      	mov	r0, r3
 8011b18:	f7ff fd8a 	bl	8011630 <ptr_to_mem>
 8011b1c:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8011b1e:	693b      	ldr	r3, [r7, #16]
 8011b20:	2200      	movs	r2, #0
 8011b22:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8011b24:	693b      	ldr	r3, [r7, #16]
 8011b26:	89ba      	ldrh	r2, [r7, #12]
 8011b28:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8011b2a:	693b      	ldr	r3, [r7, #16]
 8011b2c:	8afa      	ldrh	r2, [r7, #22]
 8011b2e:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8011b30:	69bb      	ldr	r3, [r7, #24]
 8011b32:	89fa      	ldrh	r2, [r7, #14]
 8011b34:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8011b36:	693b      	ldr	r3, [r7, #16]
 8011b38:	881b      	ldrh	r3, [r3, #0]
 8011b3a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8011b3e:	d047      	beq.n	8011bd0 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8011b40:	693b      	ldr	r3, [r7, #16]
 8011b42:	881b      	ldrh	r3, [r3, #0]
 8011b44:	4618      	mov	r0, r3
 8011b46:	f7ff fd73 	bl	8011630 <ptr_to_mem>
 8011b4a:	4602      	mov	r2, r0
 8011b4c:	89fb      	ldrh	r3, [r7, #14]
 8011b4e:	8053      	strh	r3, [r2, #2]
 8011b50:	e03e      	b.n	8011bd0 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8011b52:	8bfb      	ldrh	r3, [r7, #30]
 8011b54:	f103 0214 	add.w	r2, r3, #20
 8011b58:	8abb      	ldrh	r3, [r7, #20]
 8011b5a:	429a      	cmp	r2, r3
 8011b5c:	d838      	bhi.n	8011bd0 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8011b5e:	8afa      	ldrh	r2, [r7, #22]
 8011b60:	8bfb      	ldrh	r3, [r7, #30]
 8011b62:	4413      	add	r3, r2
 8011b64:	b29b      	uxth	r3, r3
 8011b66:	3308      	adds	r3, #8
 8011b68:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8011b6a:	69bb      	ldr	r3, [r7, #24]
 8011b6c:	881b      	ldrh	r3, [r3, #0]
 8011b6e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8011b72:	d106      	bne.n	8011b82 <mem_trim+0x192>
 8011b74:	4b1c      	ldr	r3, [pc, #112]	; (8011be8 <mem_trim+0x1f8>)
 8011b76:	f240 3216 	movw	r2, #790	; 0x316
 8011b7a:	4920      	ldr	r1, [pc, #128]	; (8011bfc <mem_trim+0x20c>)
 8011b7c:	481c      	ldr	r0, [pc, #112]	; (8011bf0 <mem_trim+0x200>)
 8011b7e:	f00e fc67 	bl	8020450 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8011b82:	89fb      	ldrh	r3, [r7, #14]
 8011b84:	4618      	mov	r0, r3
 8011b86:	f7ff fd53 	bl	8011630 <ptr_to_mem>
 8011b8a:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8011b8c:	4b1c      	ldr	r3, [pc, #112]	; (8011c00 <mem_trim+0x210>)
 8011b8e:	681b      	ldr	r3, [r3, #0]
 8011b90:	693a      	ldr	r2, [r7, #16]
 8011b92:	429a      	cmp	r2, r3
 8011b94:	d202      	bcs.n	8011b9c <mem_trim+0x1ac>
      lfree = mem2;
 8011b96:	4a1a      	ldr	r2, [pc, #104]	; (8011c00 <mem_trim+0x210>)
 8011b98:	693b      	ldr	r3, [r7, #16]
 8011b9a:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8011b9c:	693b      	ldr	r3, [r7, #16]
 8011b9e:	2200      	movs	r2, #0
 8011ba0:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8011ba2:	69bb      	ldr	r3, [r7, #24]
 8011ba4:	881a      	ldrh	r2, [r3, #0]
 8011ba6:	693b      	ldr	r3, [r7, #16]
 8011ba8:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8011baa:	693b      	ldr	r3, [r7, #16]
 8011bac:	8afa      	ldrh	r2, [r7, #22]
 8011bae:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8011bb0:	69bb      	ldr	r3, [r7, #24]
 8011bb2:	89fa      	ldrh	r2, [r7, #14]
 8011bb4:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8011bb6:	693b      	ldr	r3, [r7, #16]
 8011bb8:	881b      	ldrh	r3, [r3, #0]
 8011bba:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8011bbe:	d007      	beq.n	8011bd0 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8011bc0:	693b      	ldr	r3, [r7, #16]
 8011bc2:	881b      	ldrh	r3, [r3, #0]
 8011bc4:	4618      	mov	r0, r3
 8011bc6:	f7ff fd33 	bl	8011630 <ptr_to_mem>
 8011bca:	4602      	mov	r2, r0
 8011bcc:	89fb      	ldrh	r3, [r7, #14]
 8011bce:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8011bd0:	4809      	ldr	r0, [pc, #36]	; (8011bf8 <mem_trim+0x208>)
 8011bd2:	f00c fe48 	bl	801e866 <sys_mutex_unlock>
  return rmem;
 8011bd6:	687b      	ldr	r3, [r7, #4]
}
 8011bd8:	4618      	mov	r0, r3
 8011bda:	3720      	adds	r7, #32
 8011bdc:	46bd      	mov	sp, r7
 8011bde:	bd80      	pop	{r7, pc}
 8011be0:	24004cd0 	.word	0x24004cd0
 8011be4:	24004cd4 	.word	0x24004cd4
 8011be8:	08024190 	.word	0x08024190
 8011bec:	0802431c 	.word	0x0802431c
 8011bf0:	080241d8 	.word	0x080241d8
 8011bf4:	08024334 	.word	0x08024334
 8011bf8:	24004cd8 	.word	0x24004cd8
 8011bfc:	08024354 	.word	0x08024354
 8011c00:	24004cdc 	.word	0x24004cdc

08011c04 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8011c04:	b580      	push	{r7, lr}
 8011c06:	b088      	sub	sp, #32
 8011c08:	af00      	add	r7, sp, #0
 8011c0a:	4603      	mov	r3, r0
 8011c0c:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8011c0e:	88fb      	ldrh	r3, [r7, #6]
 8011c10:	2b00      	cmp	r3, #0
 8011c12:	d101      	bne.n	8011c18 <mem_malloc+0x14>
    return NULL;
 8011c14:	2300      	movs	r3, #0
 8011c16:	e0e2      	b.n	8011dde <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8011c18:	88fb      	ldrh	r3, [r7, #6]
 8011c1a:	3303      	adds	r3, #3
 8011c1c:	b29b      	uxth	r3, r3
 8011c1e:	f023 0303 	bic.w	r3, r3, #3
 8011c22:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8011c24:	8bbb      	ldrh	r3, [r7, #28]
 8011c26:	2b0b      	cmp	r3, #11
 8011c28:	d801      	bhi.n	8011c2e <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8011c2a:	230c      	movs	r3, #12
 8011c2c:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8011c2e:	8bbb      	ldrh	r3, [r7, #28]
 8011c30:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8011c34:	d803      	bhi.n	8011c3e <mem_malloc+0x3a>
 8011c36:	8bba      	ldrh	r2, [r7, #28]
 8011c38:	88fb      	ldrh	r3, [r7, #6]
 8011c3a:	429a      	cmp	r2, r3
 8011c3c:	d201      	bcs.n	8011c42 <mem_malloc+0x3e>
    return NULL;
 8011c3e:	2300      	movs	r3, #0
 8011c40:	e0cd      	b.n	8011dde <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8011c42:	4869      	ldr	r0, [pc, #420]	; (8011de8 <mem_malloc+0x1e4>)
 8011c44:	f00c fe00 	bl	801e848 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8011c48:	4b68      	ldr	r3, [pc, #416]	; (8011dec <mem_malloc+0x1e8>)
 8011c4a:	681b      	ldr	r3, [r3, #0]
 8011c4c:	4618      	mov	r0, r3
 8011c4e:	f7ff fd01 	bl	8011654 <mem_to_ptr>
 8011c52:	4603      	mov	r3, r0
 8011c54:	83fb      	strh	r3, [r7, #30]
 8011c56:	e0b7      	b.n	8011dc8 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8011c58:	8bfb      	ldrh	r3, [r7, #30]
 8011c5a:	4618      	mov	r0, r3
 8011c5c:	f7ff fce8 	bl	8011630 <ptr_to_mem>
 8011c60:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8011c62:	697b      	ldr	r3, [r7, #20]
 8011c64:	791b      	ldrb	r3, [r3, #4]
 8011c66:	2b00      	cmp	r3, #0
 8011c68:	f040 80a7 	bne.w	8011dba <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8011c6c:	697b      	ldr	r3, [r7, #20]
 8011c6e:	881b      	ldrh	r3, [r3, #0]
 8011c70:	461a      	mov	r2, r3
 8011c72:	8bfb      	ldrh	r3, [r7, #30]
 8011c74:	1ad3      	subs	r3, r2, r3
 8011c76:	f1a3 0208 	sub.w	r2, r3, #8
 8011c7a:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8011c7c:	429a      	cmp	r2, r3
 8011c7e:	f0c0 809c 	bcc.w	8011dba <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8011c82:	697b      	ldr	r3, [r7, #20]
 8011c84:	881b      	ldrh	r3, [r3, #0]
 8011c86:	461a      	mov	r2, r3
 8011c88:	8bfb      	ldrh	r3, [r7, #30]
 8011c8a:	1ad3      	subs	r3, r2, r3
 8011c8c:	f1a3 0208 	sub.w	r2, r3, #8
 8011c90:	8bbb      	ldrh	r3, [r7, #28]
 8011c92:	3314      	adds	r3, #20
 8011c94:	429a      	cmp	r2, r3
 8011c96:	d333      	bcc.n	8011d00 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8011c98:	8bfa      	ldrh	r2, [r7, #30]
 8011c9a:	8bbb      	ldrh	r3, [r7, #28]
 8011c9c:	4413      	add	r3, r2
 8011c9e:	b29b      	uxth	r3, r3
 8011ca0:	3308      	adds	r3, #8
 8011ca2:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8011ca4:	8a7b      	ldrh	r3, [r7, #18]
 8011ca6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8011caa:	d106      	bne.n	8011cba <mem_malloc+0xb6>
 8011cac:	4b50      	ldr	r3, [pc, #320]	; (8011df0 <mem_malloc+0x1ec>)
 8011cae:	f240 3287 	movw	r2, #903	; 0x387
 8011cb2:	4950      	ldr	r1, [pc, #320]	; (8011df4 <mem_malloc+0x1f0>)
 8011cb4:	4850      	ldr	r0, [pc, #320]	; (8011df8 <mem_malloc+0x1f4>)
 8011cb6:	f00e fbcb 	bl	8020450 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8011cba:	8a7b      	ldrh	r3, [r7, #18]
 8011cbc:	4618      	mov	r0, r3
 8011cbe:	f7ff fcb7 	bl	8011630 <ptr_to_mem>
 8011cc2:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8011cc4:	68fb      	ldr	r3, [r7, #12]
 8011cc6:	2200      	movs	r2, #0
 8011cc8:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8011cca:	697b      	ldr	r3, [r7, #20]
 8011ccc:	881a      	ldrh	r2, [r3, #0]
 8011cce:	68fb      	ldr	r3, [r7, #12]
 8011cd0:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8011cd2:	68fb      	ldr	r3, [r7, #12]
 8011cd4:	8bfa      	ldrh	r2, [r7, #30]
 8011cd6:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8011cd8:	697b      	ldr	r3, [r7, #20]
 8011cda:	8a7a      	ldrh	r2, [r7, #18]
 8011cdc:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8011cde:	697b      	ldr	r3, [r7, #20]
 8011ce0:	2201      	movs	r2, #1
 8011ce2:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8011ce4:	68fb      	ldr	r3, [r7, #12]
 8011ce6:	881b      	ldrh	r3, [r3, #0]
 8011ce8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8011cec:	d00b      	beq.n	8011d06 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8011cee:	68fb      	ldr	r3, [r7, #12]
 8011cf0:	881b      	ldrh	r3, [r3, #0]
 8011cf2:	4618      	mov	r0, r3
 8011cf4:	f7ff fc9c 	bl	8011630 <ptr_to_mem>
 8011cf8:	4602      	mov	r2, r0
 8011cfa:	8a7b      	ldrh	r3, [r7, #18]
 8011cfc:	8053      	strh	r3, [r2, #2]
 8011cfe:	e002      	b.n	8011d06 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8011d00:	697b      	ldr	r3, [r7, #20]
 8011d02:	2201      	movs	r2, #1
 8011d04:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8011d06:	4b39      	ldr	r3, [pc, #228]	; (8011dec <mem_malloc+0x1e8>)
 8011d08:	681b      	ldr	r3, [r3, #0]
 8011d0a:	697a      	ldr	r2, [r7, #20]
 8011d0c:	429a      	cmp	r2, r3
 8011d0e:	d127      	bne.n	8011d60 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 8011d10:	4b36      	ldr	r3, [pc, #216]	; (8011dec <mem_malloc+0x1e8>)
 8011d12:	681b      	ldr	r3, [r3, #0]
 8011d14:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8011d16:	e005      	b.n	8011d24 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8011d18:	69bb      	ldr	r3, [r7, #24]
 8011d1a:	881b      	ldrh	r3, [r3, #0]
 8011d1c:	4618      	mov	r0, r3
 8011d1e:	f7ff fc87 	bl	8011630 <ptr_to_mem>
 8011d22:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8011d24:	69bb      	ldr	r3, [r7, #24]
 8011d26:	791b      	ldrb	r3, [r3, #4]
 8011d28:	2b00      	cmp	r3, #0
 8011d2a:	d004      	beq.n	8011d36 <mem_malloc+0x132>
 8011d2c:	4b33      	ldr	r3, [pc, #204]	; (8011dfc <mem_malloc+0x1f8>)
 8011d2e:	681b      	ldr	r3, [r3, #0]
 8011d30:	69ba      	ldr	r2, [r7, #24]
 8011d32:	429a      	cmp	r2, r3
 8011d34:	d1f0      	bne.n	8011d18 <mem_malloc+0x114>
          }
          lfree = cur;
 8011d36:	4a2d      	ldr	r2, [pc, #180]	; (8011dec <mem_malloc+0x1e8>)
 8011d38:	69bb      	ldr	r3, [r7, #24]
 8011d3a:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8011d3c:	4b2b      	ldr	r3, [pc, #172]	; (8011dec <mem_malloc+0x1e8>)
 8011d3e:	681a      	ldr	r2, [r3, #0]
 8011d40:	4b2e      	ldr	r3, [pc, #184]	; (8011dfc <mem_malloc+0x1f8>)
 8011d42:	681b      	ldr	r3, [r3, #0]
 8011d44:	429a      	cmp	r2, r3
 8011d46:	d00b      	beq.n	8011d60 <mem_malloc+0x15c>
 8011d48:	4b28      	ldr	r3, [pc, #160]	; (8011dec <mem_malloc+0x1e8>)
 8011d4a:	681b      	ldr	r3, [r3, #0]
 8011d4c:	791b      	ldrb	r3, [r3, #4]
 8011d4e:	2b00      	cmp	r3, #0
 8011d50:	d006      	beq.n	8011d60 <mem_malloc+0x15c>
 8011d52:	4b27      	ldr	r3, [pc, #156]	; (8011df0 <mem_malloc+0x1ec>)
 8011d54:	f240 32b5 	movw	r2, #949	; 0x3b5
 8011d58:	4929      	ldr	r1, [pc, #164]	; (8011e00 <mem_malloc+0x1fc>)
 8011d5a:	4827      	ldr	r0, [pc, #156]	; (8011df8 <mem_malloc+0x1f4>)
 8011d5c:	f00e fb78 	bl	8020450 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8011d60:	4821      	ldr	r0, [pc, #132]	; (8011de8 <mem_malloc+0x1e4>)
 8011d62:	f00c fd80 	bl	801e866 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8011d66:	8bba      	ldrh	r2, [r7, #28]
 8011d68:	697b      	ldr	r3, [r7, #20]
 8011d6a:	4413      	add	r3, r2
 8011d6c:	3308      	adds	r3, #8
 8011d6e:	4a23      	ldr	r2, [pc, #140]	; (8011dfc <mem_malloc+0x1f8>)
 8011d70:	6812      	ldr	r2, [r2, #0]
 8011d72:	4293      	cmp	r3, r2
 8011d74:	d906      	bls.n	8011d84 <mem_malloc+0x180>
 8011d76:	4b1e      	ldr	r3, [pc, #120]	; (8011df0 <mem_malloc+0x1ec>)
 8011d78:	f240 32b9 	movw	r2, #953	; 0x3b9
 8011d7c:	4921      	ldr	r1, [pc, #132]	; (8011e04 <mem_malloc+0x200>)
 8011d7e:	481e      	ldr	r0, [pc, #120]	; (8011df8 <mem_malloc+0x1f4>)
 8011d80:	f00e fb66 	bl	8020450 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8011d84:	697b      	ldr	r3, [r7, #20]
 8011d86:	f003 0303 	and.w	r3, r3, #3
 8011d8a:	2b00      	cmp	r3, #0
 8011d8c:	d006      	beq.n	8011d9c <mem_malloc+0x198>
 8011d8e:	4b18      	ldr	r3, [pc, #96]	; (8011df0 <mem_malloc+0x1ec>)
 8011d90:	f240 32bb 	movw	r2, #955	; 0x3bb
 8011d94:	491c      	ldr	r1, [pc, #112]	; (8011e08 <mem_malloc+0x204>)
 8011d96:	4818      	ldr	r0, [pc, #96]	; (8011df8 <mem_malloc+0x1f4>)
 8011d98:	f00e fb5a 	bl	8020450 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8011d9c:	697b      	ldr	r3, [r7, #20]
 8011d9e:	f003 0303 	and.w	r3, r3, #3
 8011da2:	2b00      	cmp	r3, #0
 8011da4:	d006      	beq.n	8011db4 <mem_malloc+0x1b0>
 8011da6:	4b12      	ldr	r3, [pc, #72]	; (8011df0 <mem_malloc+0x1ec>)
 8011da8:	f240 32bd 	movw	r2, #957	; 0x3bd
 8011dac:	4917      	ldr	r1, [pc, #92]	; (8011e0c <mem_malloc+0x208>)
 8011dae:	4812      	ldr	r0, [pc, #72]	; (8011df8 <mem_malloc+0x1f4>)
 8011db0:	f00e fb4e 	bl	8020450 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8011db4:	697b      	ldr	r3, [r7, #20]
 8011db6:	3308      	adds	r3, #8
 8011db8:	e011      	b.n	8011dde <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 8011dba:	8bfb      	ldrh	r3, [r7, #30]
 8011dbc:	4618      	mov	r0, r3
 8011dbe:	f7ff fc37 	bl	8011630 <ptr_to_mem>
 8011dc2:	4603      	mov	r3, r0
 8011dc4:	881b      	ldrh	r3, [r3, #0]
 8011dc6:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8011dc8:	8bfa      	ldrh	r2, [r7, #30]
 8011dca:	8bbb      	ldrh	r3, [r7, #28]
 8011dcc:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8011dd0:	429a      	cmp	r2, r3
 8011dd2:	f4ff af41 	bcc.w	8011c58 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8011dd6:	4804      	ldr	r0, [pc, #16]	; (8011de8 <mem_malloc+0x1e4>)
 8011dd8:	f00c fd45 	bl	801e866 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8011ddc:	2300      	movs	r3, #0
}
 8011dde:	4618      	mov	r0, r3
 8011de0:	3720      	adds	r7, #32
 8011de2:	46bd      	mov	sp, r7
 8011de4:	bd80      	pop	{r7, pc}
 8011de6:	bf00      	nop
 8011de8:	24004cd8 	.word	0x24004cd8
 8011dec:	24004cdc 	.word	0x24004cdc
 8011df0:	08024190 	.word	0x08024190
 8011df4:	08024354 	.word	0x08024354
 8011df8:	080241d8 	.word	0x080241d8
 8011dfc:	24004cd4 	.word	0x24004cd4
 8011e00:	08024368 	.word	0x08024368
 8011e04:	08024384 	.word	0x08024384
 8011e08:	080243b4 	.word	0x080243b4
 8011e0c:	080243e4 	.word	0x080243e4

08011e10 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8011e10:	b480      	push	{r7}
 8011e12:	b085      	sub	sp, #20
 8011e14:	af00      	add	r7, sp, #0
 8011e16:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8011e18:	687b      	ldr	r3, [r7, #4]
 8011e1a:	689b      	ldr	r3, [r3, #8]
 8011e1c:	2200      	movs	r2, #0
 8011e1e:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8011e20:	687b      	ldr	r3, [r7, #4]
 8011e22:	685b      	ldr	r3, [r3, #4]
 8011e24:	3303      	adds	r3, #3
 8011e26:	f023 0303 	bic.w	r3, r3, #3
 8011e2a:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8011e2c:	2300      	movs	r3, #0
 8011e2e:	60fb      	str	r3, [r7, #12]
 8011e30:	e011      	b.n	8011e56 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8011e32:	687b      	ldr	r3, [r7, #4]
 8011e34:	689b      	ldr	r3, [r3, #8]
 8011e36:	681a      	ldr	r2, [r3, #0]
 8011e38:	68bb      	ldr	r3, [r7, #8]
 8011e3a:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8011e3c:	687b      	ldr	r3, [r7, #4]
 8011e3e:	689b      	ldr	r3, [r3, #8]
 8011e40:	68ba      	ldr	r2, [r7, #8]
 8011e42:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8011e44:	687b      	ldr	r3, [r7, #4]
 8011e46:	881b      	ldrh	r3, [r3, #0]
 8011e48:	461a      	mov	r2, r3
 8011e4a:	68bb      	ldr	r3, [r7, #8]
 8011e4c:	4413      	add	r3, r2
 8011e4e:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8011e50:	68fb      	ldr	r3, [r7, #12]
 8011e52:	3301      	adds	r3, #1
 8011e54:	60fb      	str	r3, [r7, #12]
 8011e56:	687b      	ldr	r3, [r7, #4]
 8011e58:	885b      	ldrh	r3, [r3, #2]
 8011e5a:	461a      	mov	r2, r3
 8011e5c:	68fb      	ldr	r3, [r7, #12]
 8011e5e:	4293      	cmp	r3, r2
 8011e60:	dbe7      	blt.n	8011e32 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8011e62:	bf00      	nop
 8011e64:	bf00      	nop
 8011e66:	3714      	adds	r7, #20
 8011e68:	46bd      	mov	sp, r7
 8011e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e6e:	4770      	bx	lr

08011e70 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8011e70:	b580      	push	{r7, lr}
 8011e72:	b082      	sub	sp, #8
 8011e74:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8011e76:	2300      	movs	r3, #0
 8011e78:	80fb      	strh	r3, [r7, #6]
 8011e7a:	e009      	b.n	8011e90 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8011e7c:	88fb      	ldrh	r3, [r7, #6]
 8011e7e:	4a08      	ldr	r2, [pc, #32]	; (8011ea0 <memp_init+0x30>)
 8011e80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011e84:	4618      	mov	r0, r3
 8011e86:	f7ff ffc3 	bl	8011e10 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8011e8a:	88fb      	ldrh	r3, [r7, #6]
 8011e8c:	3301      	adds	r3, #1
 8011e8e:	80fb      	strh	r3, [r7, #6]
 8011e90:	88fb      	ldrh	r3, [r7, #6]
 8011e92:	2b0c      	cmp	r3, #12
 8011e94:	d9f2      	bls.n	8011e7c <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8011e96:	bf00      	nop
 8011e98:	bf00      	nop
 8011e9a:	3708      	adds	r7, #8
 8011e9c:	46bd      	mov	sp, r7
 8011e9e:	bd80      	pop	{r7, pc}
 8011ea0:	08027000 	.word	0x08027000

08011ea4 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8011ea4:	b580      	push	{r7, lr}
 8011ea6:	b084      	sub	sp, #16
 8011ea8:	af00      	add	r7, sp, #0
 8011eaa:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8011eac:	f00c fd0e 	bl	801e8cc <sys_arch_protect>
 8011eb0:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 8011eb2:	687b      	ldr	r3, [r7, #4]
 8011eb4:	689b      	ldr	r3, [r3, #8]
 8011eb6:	681b      	ldr	r3, [r3, #0]
 8011eb8:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8011eba:	68bb      	ldr	r3, [r7, #8]
 8011ebc:	2b00      	cmp	r3, #0
 8011ebe:	d015      	beq.n	8011eec <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8011ec0:	687b      	ldr	r3, [r7, #4]
 8011ec2:	689b      	ldr	r3, [r3, #8]
 8011ec4:	68ba      	ldr	r2, [r7, #8]
 8011ec6:	6812      	ldr	r2, [r2, #0]
 8011ec8:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8011eca:	68bb      	ldr	r3, [r7, #8]
 8011ecc:	f003 0303 	and.w	r3, r3, #3
 8011ed0:	2b00      	cmp	r3, #0
 8011ed2:	d006      	beq.n	8011ee2 <do_memp_malloc_pool+0x3e>
 8011ed4:	4b09      	ldr	r3, [pc, #36]	; (8011efc <do_memp_malloc_pool+0x58>)
 8011ed6:	f44f 728c 	mov.w	r2, #280	; 0x118
 8011eda:	4909      	ldr	r1, [pc, #36]	; (8011f00 <do_memp_malloc_pool+0x5c>)
 8011edc:	4809      	ldr	r0, [pc, #36]	; (8011f04 <do_memp_malloc_pool+0x60>)
 8011ede:	f00e fab7 	bl	8020450 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8011ee2:	68f8      	ldr	r0, [r7, #12]
 8011ee4:	f00c fd00 	bl	801e8e8 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8011ee8:	68bb      	ldr	r3, [r7, #8]
 8011eea:	e003      	b.n	8011ef4 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8011eec:	68f8      	ldr	r0, [r7, #12]
 8011eee:	f00c fcfb 	bl	801e8e8 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8011ef2:	2300      	movs	r3, #0
}
 8011ef4:	4618      	mov	r0, r3
 8011ef6:	3710      	adds	r7, #16
 8011ef8:	46bd      	mov	sp, r7
 8011efa:	bd80      	pop	{r7, pc}
 8011efc:	08024408 	.word	0x08024408
 8011f00:	08024438 	.word	0x08024438
 8011f04:	0802445c 	.word	0x0802445c

08011f08 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8011f08:	b580      	push	{r7, lr}
 8011f0a:	b082      	sub	sp, #8
 8011f0c:	af00      	add	r7, sp, #0
 8011f0e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8011f10:	687b      	ldr	r3, [r7, #4]
 8011f12:	2b00      	cmp	r3, #0
 8011f14:	d106      	bne.n	8011f24 <memp_malloc_pool+0x1c>
 8011f16:	4b0a      	ldr	r3, [pc, #40]	; (8011f40 <memp_malloc_pool+0x38>)
 8011f18:	f44f 729e 	mov.w	r2, #316	; 0x13c
 8011f1c:	4909      	ldr	r1, [pc, #36]	; (8011f44 <memp_malloc_pool+0x3c>)
 8011f1e:	480a      	ldr	r0, [pc, #40]	; (8011f48 <memp_malloc_pool+0x40>)
 8011f20:	f00e fa96 	bl	8020450 <iprintf>
  if (desc == NULL) {
 8011f24:	687b      	ldr	r3, [r7, #4]
 8011f26:	2b00      	cmp	r3, #0
 8011f28:	d101      	bne.n	8011f2e <memp_malloc_pool+0x26>
    return NULL;
 8011f2a:	2300      	movs	r3, #0
 8011f2c:	e003      	b.n	8011f36 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8011f2e:	6878      	ldr	r0, [r7, #4]
 8011f30:	f7ff ffb8 	bl	8011ea4 <do_memp_malloc_pool>
 8011f34:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8011f36:	4618      	mov	r0, r3
 8011f38:	3708      	adds	r7, #8
 8011f3a:	46bd      	mov	sp, r7
 8011f3c:	bd80      	pop	{r7, pc}
 8011f3e:	bf00      	nop
 8011f40:	08024408 	.word	0x08024408
 8011f44:	08024484 	.word	0x08024484
 8011f48:	0802445c 	.word	0x0802445c

08011f4c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8011f4c:	b580      	push	{r7, lr}
 8011f4e:	b084      	sub	sp, #16
 8011f50:	af00      	add	r7, sp, #0
 8011f52:	4603      	mov	r3, r0
 8011f54:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8011f56:	79fb      	ldrb	r3, [r7, #7]
 8011f58:	2b0c      	cmp	r3, #12
 8011f5a:	d908      	bls.n	8011f6e <memp_malloc+0x22>
 8011f5c:	4b0a      	ldr	r3, [pc, #40]	; (8011f88 <memp_malloc+0x3c>)
 8011f5e:	f240 1257 	movw	r2, #343	; 0x157
 8011f62:	490a      	ldr	r1, [pc, #40]	; (8011f8c <memp_malloc+0x40>)
 8011f64:	480a      	ldr	r0, [pc, #40]	; (8011f90 <memp_malloc+0x44>)
 8011f66:	f00e fa73 	bl	8020450 <iprintf>
 8011f6a:	2300      	movs	r3, #0
 8011f6c:	e008      	b.n	8011f80 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8011f6e:	79fb      	ldrb	r3, [r7, #7]
 8011f70:	4a08      	ldr	r2, [pc, #32]	; (8011f94 <memp_malloc+0x48>)
 8011f72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011f76:	4618      	mov	r0, r3
 8011f78:	f7ff ff94 	bl	8011ea4 <do_memp_malloc_pool>
 8011f7c:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8011f7e:	68fb      	ldr	r3, [r7, #12]
}
 8011f80:	4618      	mov	r0, r3
 8011f82:	3710      	adds	r7, #16
 8011f84:	46bd      	mov	sp, r7
 8011f86:	bd80      	pop	{r7, pc}
 8011f88:	08024408 	.word	0x08024408
 8011f8c:	08024498 	.word	0x08024498
 8011f90:	0802445c 	.word	0x0802445c
 8011f94:	08027000 	.word	0x08027000

08011f98 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8011f98:	b580      	push	{r7, lr}
 8011f9a:	b084      	sub	sp, #16
 8011f9c:	af00      	add	r7, sp, #0
 8011f9e:	6078      	str	r0, [r7, #4]
 8011fa0:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8011fa2:	683b      	ldr	r3, [r7, #0]
 8011fa4:	f003 0303 	and.w	r3, r3, #3
 8011fa8:	2b00      	cmp	r3, #0
 8011faa:	d006      	beq.n	8011fba <do_memp_free_pool+0x22>
 8011fac:	4b0d      	ldr	r3, [pc, #52]	; (8011fe4 <do_memp_free_pool+0x4c>)
 8011fae:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8011fb2:	490d      	ldr	r1, [pc, #52]	; (8011fe8 <do_memp_free_pool+0x50>)
 8011fb4:	480d      	ldr	r0, [pc, #52]	; (8011fec <do_memp_free_pool+0x54>)
 8011fb6:	f00e fa4b 	bl	8020450 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8011fba:	683b      	ldr	r3, [r7, #0]
 8011fbc:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 8011fbe:	f00c fc85 	bl	801e8cc <sys_arch_protect>
 8011fc2:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8011fc4:	687b      	ldr	r3, [r7, #4]
 8011fc6:	689b      	ldr	r3, [r3, #8]
 8011fc8:	681a      	ldr	r2, [r3, #0]
 8011fca:	68fb      	ldr	r3, [r7, #12]
 8011fcc:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8011fce:	687b      	ldr	r3, [r7, #4]
 8011fd0:	689b      	ldr	r3, [r3, #8]
 8011fd2:	68fa      	ldr	r2, [r7, #12]
 8011fd4:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 8011fd6:	68b8      	ldr	r0, [r7, #8]
 8011fd8:	f00c fc86 	bl	801e8e8 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 8011fdc:	bf00      	nop
 8011fde:	3710      	adds	r7, #16
 8011fe0:	46bd      	mov	sp, r7
 8011fe2:	bd80      	pop	{r7, pc}
 8011fe4:	08024408 	.word	0x08024408
 8011fe8:	080244b8 	.word	0x080244b8
 8011fec:	0802445c 	.word	0x0802445c

08011ff0 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8011ff0:	b580      	push	{r7, lr}
 8011ff2:	b082      	sub	sp, #8
 8011ff4:	af00      	add	r7, sp, #0
 8011ff6:	6078      	str	r0, [r7, #4]
 8011ff8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8011ffa:	687b      	ldr	r3, [r7, #4]
 8011ffc:	2b00      	cmp	r3, #0
 8011ffe:	d106      	bne.n	801200e <memp_free_pool+0x1e>
 8012000:	4b0a      	ldr	r3, [pc, #40]	; (801202c <memp_free_pool+0x3c>)
 8012002:	f240 1295 	movw	r2, #405	; 0x195
 8012006:	490a      	ldr	r1, [pc, #40]	; (8012030 <memp_free_pool+0x40>)
 8012008:	480a      	ldr	r0, [pc, #40]	; (8012034 <memp_free_pool+0x44>)
 801200a:	f00e fa21 	bl	8020450 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 801200e:	687b      	ldr	r3, [r7, #4]
 8012010:	2b00      	cmp	r3, #0
 8012012:	d007      	beq.n	8012024 <memp_free_pool+0x34>
 8012014:	683b      	ldr	r3, [r7, #0]
 8012016:	2b00      	cmp	r3, #0
 8012018:	d004      	beq.n	8012024 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 801201a:	6839      	ldr	r1, [r7, #0]
 801201c:	6878      	ldr	r0, [r7, #4]
 801201e:	f7ff ffbb 	bl	8011f98 <do_memp_free_pool>
 8012022:	e000      	b.n	8012026 <memp_free_pool+0x36>
    return;
 8012024:	bf00      	nop
}
 8012026:	3708      	adds	r7, #8
 8012028:	46bd      	mov	sp, r7
 801202a:	bd80      	pop	{r7, pc}
 801202c:	08024408 	.word	0x08024408
 8012030:	08024484 	.word	0x08024484
 8012034:	0802445c 	.word	0x0802445c

08012038 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8012038:	b580      	push	{r7, lr}
 801203a:	b082      	sub	sp, #8
 801203c:	af00      	add	r7, sp, #0
 801203e:	4603      	mov	r3, r0
 8012040:	6039      	str	r1, [r7, #0]
 8012042:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8012044:	79fb      	ldrb	r3, [r7, #7]
 8012046:	2b0c      	cmp	r3, #12
 8012048:	d907      	bls.n	801205a <memp_free+0x22>
 801204a:	4b0c      	ldr	r3, [pc, #48]	; (801207c <memp_free+0x44>)
 801204c:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8012050:	490b      	ldr	r1, [pc, #44]	; (8012080 <memp_free+0x48>)
 8012052:	480c      	ldr	r0, [pc, #48]	; (8012084 <memp_free+0x4c>)
 8012054:	f00e f9fc 	bl	8020450 <iprintf>
 8012058:	e00c      	b.n	8012074 <memp_free+0x3c>

  if (mem == NULL) {
 801205a:	683b      	ldr	r3, [r7, #0]
 801205c:	2b00      	cmp	r3, #0
 801205e:	d008      	beq.n	8012072 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8012060:	79fb      	ldrb	r3, [r7, #7]
 8012062:	4a09      	ldr	r2, [pc, #36]	; (8012088 <memp_free+0x50>)
 8012064:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012068:	6839      	ldr	r1, [r7, #0]
 801206a:	4618      	mov	r0, r3
 801206c:	f7ff ff94 	bl	8011f98 <do_memp_free_pool>
 8012070:	e000      	b.n	8012074 <memp_free+0x3c>
    return;
 8012072:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8012074:	3708      	adds	r7, #8
 8012076:	46bd      	mov	sp, r7
 8012078:	bd80      	pop	{r7, pc}
 801207a:	bf00      	nop
 801207c:	08024408 	.word	0x08024408
 8012080:	080244d8 	.word	0x080244d8
 8012084:	0802445c 	.word	0x0802445c
 8012088:	08027000 	.word	0x08027000

0801208c <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 801208c:	b480      	push	{r7}
 801208e:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8012090:	bf00      	nop
 8012092:	46bd      	mov	sp, r7
 8012094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012098:	4770      	bx	lr
	...

0801209c <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 801209c:	b580      	push	{r7, lr}
 801209e:	b086      	sub	sp, #24
 80120a0:	af00      	add	r7, sp, #0
 80120a2:	60f8      	str	r0, [r7, #12]
 80120a4:	60b9      	str	r1, [r7, #8]
 80120a6:	607a      	str	r2, [r7, #4]
 80120a8:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 80120aa:	68fb      	ldr	r3, [r7, #12]
 80120ac:	2b00      	cmp	r3, #0
 80120ae:	d108      	bne.n	80120c2 <netif_add+0x26>
 80120b0:	4b5b      	ldr	r3, [pc, #364]	; (8012220 <netif_add+0x184>)
 80120b2:	f240 1227 	movw	r2, #295	; 0x127
 80120b6:	495b      	ldr	r1, [pc, #364]	; (8012224 <netif_add+0x188>)
 80120b8:	485b      	ldr	r0, [pc, #364]	; (8012228 <netif_add+0x18c>)
 80120ba:	f00e f9c9 	bl	8020450 <iprintf>
 80120be:	2300      	movs	r3, #0
 80120c0:	e0a9      	b.n	8012216 <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 80120c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120c4:	2b00      	cmp	r3, #0
 80120c6:	d108      	bne.n	80120da <netif_add+0x3e>
 80120c8:	4b55      	ldr	r3, [pc, #340]	; (8012220 <netif_add+0x184>)
 80120ca:	f44f 7294 	mov.w	r2, #296	; 0x128
 80120ce:	4957      	ldr	r1, [pc, #348]	; (801222c <netif_add+0x190>)
 80120d0:	4855      	ldr	r0, [pc, #340]	; (8012228 <netif_add+0x18c>)
 80120d2:	f00e f9bd 	bl	8020450 <iprintf>
 80120d6:	2300      	movs	r3, #0
 80120d8:	e09d      	b.n	8012216 <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 80120da:	68bb      	ldr	r3, [r7, #8]
 80120dc:	2b00      	cmp	r3, #0
 80120de:	d101      	bne.n	80120e4 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 80120e0:	4b53      	ldr	r3, [pc, #332]	; (8012230 <netif_add+0x194>)
 80120e2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80120e4:	687b      	ldr	r3, [r7, #4]
 80120e6:	2b00      	cmp	r3, #0
 80120e8:	d101      	bne.n	80120ee <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 80120ea:	4b51      	ldr	r3, [pc, #324]	; (8012230 <netif_add+0x194>)
 80120ec:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80120ee:	683b      	ldr	r3, [r7, #0]
 80120f0:	2b00      	cmp	r3, #0
 80120f2:	d101      	bne.n	80120f8 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 80120f4:	4b4e      	ldr	r3, [pc, #312]	; (8012230 <netif_add+0x194>)
 80120f6:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 80120f8:	68fb      	ldr	r3, [r7, #12]
 80120fa:	2200      	movs	r2, #0
 80120fc:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 80120fe:	68fb      	ldr	r3, [r7, #12]
 8012100:	2200      	movs	r2, #0
 8012102:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8012104:	68fb      	ldr	r3, [r7, #12]
 8012106:	2200      	movs	r2, #0
 8012108:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 801210a:	68fb      	ldr	r3, [r7, #12]
 801210c:	4a49      	ldr	r2, [pc, #292]	; (8012234 <netif_add+0x198>)
 801210e:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8012110:	68fb      	ldr	r3, [r7, #12]
 8012112:	2200      	movs	r2, #0
 8012114:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 8012116:	68fb      	ldr	r3, [r7, #12]
 8012118:	2200      	movs	r2, #0
 801211a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 801211e:	68fb      	ldr	r3, [r7, #12]
 8012120:	3324      	adds	r3, #36	; 0x24
 8012122:	2204      	movs	r2, #4
 8012124:	2100      	movs	r1, #0
 8012126:	4618      	mov	r0, r3
 8012128:	f00e fa31 	bl	802058e <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 801212c:	68fb      	ldr	r3, [r7, #12]
 801212e:	2200      	movs	r2, #0
 8012130:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8012132:	68fb      	ldr	r3, [r7, #12]
 8012134:	6a3a      	ldr	r2, [r7, #32]
 8012136:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8012138:	4b3f      	ldr	r3, [pc, #252]	; (8012238 <netif_add+0x19c>)
 801213a:	781a      	ldrb	r2, [r3, #0]
 801213c:	68fb      	ldr	r3, [r7, #12]
 801213e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 8012142:	68fb      	ldr	r3, [r7, #12]
 8012144:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012146:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8012148:	683b      	ldr	r3, [r7, #0]
 801214a:	687a      	ldr	r2, [r7, #4]
 801214c:	68b9      	ldr	r1, [r7, #8]
 801214e:	68f8      	ldr	r0, [r7, #12]
 8012150:	f000 f914 	bl	801237c <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8012154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012156:	68f8      	ldr	r0, [r7, #12]
 8012158:	4798      	blx	r3
 801215a:	4603      	mov	r3, r0
 801215c:	2b00      	cmp	r3, #0
 801215e:	d001      	beq.n	8012164 <netif_add+0xc8>
    return NULL;
 8012160:	2300      	movs	r3, #0
 8012162:	e058      	b.n	8012216 <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8012164:	68fb      	ldr	r3, [r7, #12]
 8012166:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801216a:	2bff      	cmp	r3, #255	; 0xff
 801216c:	d103      	bne.n	8012176 <netif_add+0xda>
        netif->num = 0;
 801216e:	68fb      	ldr	r3, [r7, #12]
 8012170:	2200      	movs	r2, #0
 8012172:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 8012176:	2300      	movs	r3, #0
 8012178:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 801217a:	4b30      	ldr	r3, [pc, #192]	; (801223c <netif_add+0x1a0>)
 801217c:	681b      	ldr	r3, [r3, #0]
 801217e:	617b      	str	r3, [r7, #20]
 8012180:	e02b      	b.n	80121da <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8012182:	697a      	ldr	r2, [r7, #20]
 8012184:	68fb      	ldr	r3, [r7, #12]
 8012186:	429a      	cmp	r2, r3
 8012188:	d106      	bne.n	8012198 <netif_add+0xfc>
 801218a:	4b25      	ldr	r3, [pc, #148]	; (8012220 <netif_add+0x184>)
 801218c:	f240 128b 	movw	r2, #395	; 0x18b
 8012190:	492b      	ldr	r1, [pc, #172]	; (8012240 <netif_add+0x1a4>)
 8012192:	4825      	ldr	r0, [pc, #148]	; (8012228 <netif_add+0x18c>)
 8012194:	f00e f95c 	bl	8020450 <iprintf>
        num_netifs++;
 8012198:	693b      	ldr	r3, [r7, #16]
 801219a:	3301      	adds	r3, #1
 801219c:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 801219e:	693b      	ldr	r3, [r7, #16]
 80121a0:	2bff      	cmp	r3, #255	; 0xff
 80121a2:	dd06      	ble.n	80121b2 <netif_add+0x116>
 80121a4:	4b1e      	ldr	r3, [pc, #120]	; (8012220 <netif_add+0x184>)
 80121a6:	f240 128d 	movw	r2, #397	; 0x18d
 80121aa:	4926      	ldr	r1, [pc, #152]	; (8012244 <netif_add+0x1a8>)
 80121ac:	481e      	ldr	r0, [pc, #120]	; (8012228 <netif_add+0x18c>)
 80121ae:	f00e f94f 	bl	8020450 <iprintf>
        if (netif2->num == netif->num) {
 80121b2:	697b      	ldr	r3, [r7, #20]
 80121b4:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 80121b8:	68fb      	ldr	r3, [r7, #12]
 80121ba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80121be:	429a      	cmp	r2, r3
 80121c0:	d108      	bne.n	80121d4 <netif_add+0x138>
          netif->num++;
 80121c2:	68fb      	ldr	r3, [r7, #12]
 80121c4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80121c8:	3301      	adds	r3, #1
 80121ca:	b2da      	uxtb	r2, r3
 80121cc:	68fb      	ldr	r3, [r7, #12]
 80121ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 80121d2:	e005      	b.n	80121e0 <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80121d4:	697b      	ldr	r3, [r7, #20]
 80121d6:	681b      	ldr	r3, [r3, #0]
 80121d8:	617b      	str	r3, [r7, #20]
 80121da:	697b      	ldr	r3, [r7, #20]
 80121dc:	2b00      	cmp	r3, #0
 80121de:	d1d0      	bne.n	8012182 <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 80121e0:	697b      	ldr	r3, [r7, #20]
 80121e2:	2b00      	cmp	r3, #0
 80121e4:	d1be      	bne.n	8012164 <netif_add+0xc8>
  }
  if (netif->num == 254) {
 80121e6:	68fb      	ldr	r3, [r7, #12]
 80121e8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80121ec:	2bfe      	cmp	r3, #254	; 0xfe
 80121ee:	d103      	bne.n	80121f8 <netif_add+0x15c>
    netif_num = 0;
 80121f0:	4b11      	ldr	r3, [pc, #68]	; (8012238 <netif_add+0x19c>)
 80121f2:	2200      	movs	r2, #0
 80121f4:	701a      	strb	r2, [r3, #0]
 80121f6:	e006      	b.n	8012206 <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 80121f8:	68fb      	ldr	r3, [r7, #12]
 80121fa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80121fe:	3301      	adds	r3, #1
 8012200:	b2da      	uxtb	r2, r3
 8012202:	4b0d      	ldr	r3, [pc, #52]	; (8012238 <netif_add+0x19c>)
 8012204:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8012206:	4b0d      	ldr	r3, [pc, #52]	; (801223c <netif_add+0x1a0>)
 8012208:	681a      	ldr	r2, [r3, #0]
 801220a:	68fb      	ldr	r3, [r7, #12]
 801220c:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 801220e:	4a0b      	ldr	r2, [pc, #44]	; (801223c <netif_add+0x1a0>)
 8012210:	68fb      	ldr	r3, [r7, #12]
 8012212:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8012214:	68fb      	ldr	r3, [r7, #12]
}
 8012216:	4618      	mov	r0, r3
 8012218:	3718      	adds	r7, #24
 801221a:	46bd      	mov	sp, r7
 801221c:	bd80      	pop	{r7, pc}
 801221e:	bf00      	nop
 8012220:	080244f4 	.word	0x080244f4
 8012224:	08024588 	.word	0x08024588
 8012228:	08024544 	.word	0x08024544
 801222c:	080245a4 	.word	0x080245a4
 8012230:	08027084 	.word	0x08027084
 8012234:	0801265f 	.word	0x0801265f
 8012238:	24007dd4 	.word	0x24007dd4
 801223c:	24007dcc 	.word	0x24007dcc
 8012240:	080245c8 	.word	0x080245c8
 8012244:	080245dc 	.word	0x080245dc

08012248 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8012248:	b580      	push	{r7, lr}
 801224a:	b082      	sub	sp, #8
 801224c:	af00      	add	r7, sp, #0
 801224e:	6078      	str	r0, [r7, #4]
 8012250:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8012252:	6839      	ldr	r1, [r7, #0]
 8012254:	6878      	ldr	r0, [r7, #4]
 8012256:	f002 fe95 	bl	8014f84 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 801225a:	6839      	ldr	r1, [r7, #0]
 801225c:	6878      	ldr	r0, [r7, #4]
 801225e:	f007 ff9f 	bl	801a1a0 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8012262:	bf00      	nop
 8012264:	3708      	adds	r7, #8
 8012266:	46bd      	mov	sp, r7
 8012268:	bd80      	pop	{r7, pc}
	...

0801226c <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 801226c:	b580      	push	{r7, lr}
 801226e:	b086      	sub	sp, #24
 8012270:	af00      	add	r7, sp, #0
 8012272:	60f8      	str	r0, [r7, #12]
 8012274:	60b9      	str	r1, [r7, #8]
 8012276:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8012278:	68bb      	ldr	r3, [r7, #8]
 801227a:	2b00      	cmp	r3, #0
 801227c:	d106      	bne.n	801228c <netif_do_set_ipaddr+0x20>
 801227e:	4b1d      	ldr	r3, [pc, #116]	; (80122f4 <netif_do_set_ipaddr+0x88>)
 8012280:	f240 12cb 	movw	r2, #459	; 0x1cb
 8012284:	491c      	ldr	r1, [pc, #112]	; (80122f8 <netif_do_set_ipaddr+0x8c>)
 8012286:	481d      	ldr	r0, [pc, #116]	; (80122fc <netif_do_set_ipaddr+0x90>)
 8012288:	f00e f8e2 	bl	8020450 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 801228c:	687b      	ldr	r3, [r7, #4]
 801228e:	2b00      	cmp	r3, #0
 8012290:	d106      	bne.n	80122a0 <netif_do_set_ipaddr+0x34>
 8012292:	4b18      	ldr	r3, [pc, #96]	; (80122f4 <netif_do_set_ipaddr+0x88>)
 8012294:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8012298:	4917      	ldr	r1, [pc, #92]	; (80122f8 <netif_do_set_ipaddr+0x8c>)
 801229a:	4818      	ldr	r0, [pc, #96]	; (80122fc <netif_do_set_ipaddr+0x90>)
 801229c:	f00e f8d8 	bl	8020450 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 80122a0:	68bb      	ldr	r3, [r7, #8]
 80122a2:	681a      	ldr	r2, [r3, #0]
 80122a4:	68fb      	ldr	r3, [r7, #12]
 80122a6:	3304      	adds	r3, #4
 80122a8:	681b      	ldr	r3, [r3, #0]
 80122aa:	429a      	cmp	r2, r3
 80122ac:	d01c      	beq.n	80122e8 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 80122ae:	68bb      	ldr	r3, [r7, #8]
 80122b0:	681b      	ldr	r3, [r3, #0]
 80122b2:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 80122b4:	68fb      	ldr	r3, [r7, #12]
 80122b6:	3304      	adds	r3, #4
 80122b8:	681a      	ldr	r2, [r3, #0]
 80122ba:	687b      	ldr	r3, [r7, #4]
 80122bc:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 80122be:	f107 0314 	add.w	r3, r7, #20
 80122c2:	4619      	mov	r1, r3
 80122c4:	6878      	ldr	r0, [r7, #4]
 80122c6:	f7ff ffbf 	bl	8012248 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80122ca:	68bb      	ldr	r3, [r7, #8]
 80122cc:	2b00      	cmp	r3, #0
 80122ce:	d002      	beq.n	80122d6 <netif_do_set_ipaddr+0x6a>
 80122d0:	68bb      	ldr	r3, [r7, #8]
 80122d2:	681b      	ldr	r3, [r3, #0]
 80122d4:	e000      	b.n	80122d8 <netif_do_set_ipaddr+0x6c>
 80122d6:	2300      	movs	r3, #0
 80122d8:	68fa      	ldr	r2, [r7, #12]
 80122da:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80122dc:	2101      	movs	r1, #1
 80122de:	68f8      	ldr	r0, [r7, #12]
 80122e0:	f000 f8d2 	bl	8012488 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 80122e4:	2301      	movs	r3, #1
 80122e6:	e000      	b.n	80122ea <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 80122e8:	2300      	movs	r3, #0
}
 80122ea:	4618      	mov	r0, r3
 80122ec:	3718      	adds	r7, #24
 80122ee:	46bd      	mov	sp, r7
 80122f0:	bd80      	pop	{r7, pc}
 80122f2:	bf00      	nop
 80122f4:	080244f4 	.word	0x080244f4
 80122f8:	0802460c 	.word	0x0802460c
 80122fc:	08024544 	.word	0x08024544

08012300 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8012300:	b480      	push	{r7}
 8012302:	b085      	sub	sp, #20
 8012304:	af00      	add	r7, sp, #0
 8012306:	60f8      	str	r0, [r7, #12]
 8012308:	60b9      	str	r1, [r7, #8]
 801230a:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 801230c:	68bb      	ldr	r3, [r7, #8]
 801230e:	681a      	ldr	r2, [r3, #0]
 8012310:	68fb      	ldr	r3, [r7, #12]
 8012312:	3308      	adds	r3, #8
 8012314:	681b      	ldr	r3, [r3, #0]
 8012316:	429a      	cmp	r2, r3
 8012318:	d00a      	beq.n	8012330 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 801231a:	68bb      	ldr	r3, [r7, #8]
 801231c:	2b00      	cmp	r3, #0
 801231e:	d002      	beq.n	8012326 <netif_do_set_netmask+0x26>
 8012320:	68bb      	ldr	r3, [r7, #8]
 8012322:	681b      	ldr	r3, [r3, #0]
 8012324:	e000      	b.n	8012328 <netif_do_set_netmask+0x28>
 8012326:	2300      	movs	r3, #0
 8012328:	68fa      	ldr	r2, [r7, #12]
 801232a:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 801232c:	2301      	movs	r3, #1
 801232e:	e000      	b.n	8012332 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8012330:	2300      	movs	r3, #0
}
 8012332:	4618      	mov	r0, r3
 8012334:	3714      	adds	r7, #20
 8012336:	46bd      	mov	sp, r7
 8012338:	f85d 7b04 	ldr.w	r7, [sp], #4
 801233c:	4770      	bx	lr

0801233e <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 801233e:	b480      	push	{r7}
 8012340:	b085      	sub	sp, #20
 8012342:	af00      	add	r7, sp, #0
 8012344:	60f8      	str	r0, [r7, #12]
 8012346:	60b9      	str	r1, [r7, #8]
 8012348:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 801234a:	68bb      	ldr	r3, [r7, #8]
 801234c:	681a      	ldr	r2, [r3, #0]
 801234e:	68fb      	ldr	r3, [r7, #12]
 8012350:	330c      	adds	r3, #12
 8012352:	681b      	ldr	r3, [r3, #0]
 8012354:	429a      	cmp	r2, r3
 8012356:	d00a      	beq.n	801236e <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8012358:	68bb      	ldr	r3, [r7, #8]
 801235a:	2b00      	cmp	r3, #0
 801235c:	d002      	beq.n	8012364 <netif_do_set_gw+0x26>
 801235e:	68bb      	ldr	r3, [r7, #8]
 8012360:	681b      	ldr	r3, [r3, #0]
 8012362:	e000      	b.n	8012366 <netif_do_set_gw+0x28>
 8012364:	2300      	movs	r3, #0
 8012366:	68fa      	ldr	r2, [r7, #12]
 8012368:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 801236a:	2301      	movs	r3, #1
 801236c:	e000      	b.n	8012370 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 801236e:	2300      	movs	r3, #0
}
 8012370:	4618      	mov	r0, r3
 8012372:	3714      	adds	r7, #20
 8012374:	46bd      	mov	sp, r7
 8012376:	f85d 7b04 	ldr.w	r7, [sp], #4
 801237a:	4770      	bx	lr

0801237c <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 801237c:	b580      	push	{r7, lr}
 801237e:	b088      	sub	sp, #32
 8012380:	af00      	add	r7, sp, #0
 8012382:	60f8      	str	r0, [r7, #12]
 8012384:	60b9      	str	r1, [r7, #8]
 8012386:	607a      	str	r2, [r7, #4]
 8012388:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 801238a:	2300      	movs	r3, #0
 801238c:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 801238e:	2300      	movs	r3, #0
 8012390:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8012392:	68bb      	ldr	r3, [r7, #8]
 8012394:	2b00      	cmp	r3, #0
 8012396:	d101      	bne.n	801239c <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8012398:	4b1c      	ldr	r3, [pc, #112]	; (801240c <netif_set_addr+0x90>)
 801239a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 801239c:	687b      	ldr	r3, [r7, #4]
 801239e:	2b00      	cmp	r3, #0
 80123a0:	d101      	bne.n	80123a6 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 80123a2:	4b1a      	ldr	r3, [pc, #104]	; (801240c <netif_set_addr+0x90>)
 80123a4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80123a6:	683b      	ldr	r3, [r7, #0]
 80123a8:	2b00      	cmp	r3, #0
 80123aa:	d101      	bne.n	80123b0 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 80123ac:	4b17      	ldr	r3, [pc, #92]	; (801240c <netif_set_addr+0x90>)
 80123ae:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 80123b0:	68bb      	ldr	r3, [r7, #8]
 80123b2:	2b00      	cmp	r3, #0
 80123b4:	d003      	beq.n	80123be <netif_set_addr+0x42>
 80123b6:	68bb      	ldr	r3, [r7, #8]
 80123b8:	681b      	ldr	r3, [r3, #0]
 80123ba:	2b00      	cmp	r3, #0
 80123bc:	d101      	bne.n	80123c2 <netif_set_addr+0x46>
 80123be:	2301      	movs	r3, #1
 80123c0:	e000      	b.n	80123c4 <netif_set_addr+0x48>
 80123c2:	2300      	movs	r3, #0
 80123c4:	617b      	str	r3, [r7, #20]
  if (remove) {
 80123c6:	697b      	ldr	r3, [r7, #20]
 80123c8:	2b00      	cmp	r3, #0
 80123ca:	d006      	beq.n	80123da <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80123cc:	f107 0310 	add.w	r3, r7, #16
 80123d0:	461a      	mov	r2, r3
 80123d2:	68b9      	ldr	r1, [r7, #8]
 80123d4:	68f8      	ldr	r0, [r7, #12]
 80123d6:	f7ff ff49 	bl	801226c <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 80123da:	69fa      	ldr	r2, [r7, #28]
 80123dc:	6879      	ldr	r1, [r7, #4]
 80123de:	68f8      	ldr	r0, [r7, #12]
 80123e0:	f7ff ff8e 	bl	8012300 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 80123e4:	69ba      	ldr	r2, [r7, #24]
 80123e6:	6839      	ldr	r1, [r7, #0]
 80123e8:	68f8      	ldr	r0, [r7, #12]
 80123ea:	f7ff ffa8 	bl	801233e <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 80123ee:	697b      	ldr	r3, [r7, #20]
 80123f0:	2b00      	cmp	r3, #0
 80123f2:	d106      	bne.n	8012402 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80123f4:	f107 0310 	add.w	r3, r7, #16
 80123f8:	461a      	mov	r2, r3
 80123fa:	68b9      	ldr	r1, [r7, #8]
 80123fc:	68f8      	ldr	r0, [r7, #12]
 80123fe:	f7ff ff35 	bl	801226c <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8012402:	bf00      	nop
 8012404:	3720      	adds	r7, #32
 8012406:	46bd      	mov	sp, r7
 8012408:	bd80      	pop	{r7, pc}
 801240a:	bf00      	nop
 801240c:	08027084 	.word	0x08027084

08012410 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8012410:	b480      	push	{r7}
 8012412:	b083      	sub	sp, #12
 8012414:	af00      	add	r7, sp, #0
 8012416:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8012418:	4a04      	ldr	r2, [pc, #16]	; (801242c <netif_set_default+0x1c>)
 801241a:	687b      	ldr	r3, [r7, #4]
 801241c:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 801241e:	bf00      	nop
 8012420:	370c      	adds	r7, #12
 8012422:	46bd      	mov	sp, r7
 8012424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012428:	4770      	bx	lr
 801242a:	bf00      	nop
 801242c:	24007dd0 	.word	0x24007dd0

08012430 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8012430:	b580      	push	{r7, lr}
 8012432:	b082      	sub	sp, #8
 8012434:	af00      	add	r7, sp, #0
 8012436:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8012438:	687b      	ldr	r3, [r7, #4]
 801243a:	2b00      	cmp	r3, #0
 801243c:	d107      	bne.n	801244e <netif_set_up+0x1e>
 801243e:	4b0f      	ldr	r3, [pc, #60]	; (801247c <netif_set_up+0x4c>)
 8012440:	f44f 7254 	mov.w	r2, #848	; 0x350
 8012444:	490e      	ldr	r1, [pc, #56]	; (8012480 <netif_set_up+0x50>)
 8012446:	480f      	ldr	r0, [pc, #60]	; (8012484 <netif_set_up+0x54>)
 8012448:	f00e f802 	bl	8020450 <iprintf>
 801244c:	e013      	b.n	8012476 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 801244e:	687b      	ldr	r3, [r7, #4]
 8012450:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012454:	f003 0301 	and.w	r3, r3, #1
 8012458:	2b00      	cmp	r3, #0
 801245a:	d10c      	bne.n	8012476 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 801245c:	687b      	ldr	r3, [r7, #4]
 801245e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012462:	f043 0301 	orr.w	r3, r3, #1
 8012466:	b2da      	uxtb	r2, r3
 8012468:	687b      	ldr	r3, [r7, #4]
 801246a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 801246e:	2103      	movs	r1, #3
 8012470:	6878      	ldr	r0, [r7, #4]
 8012472:	f000 f809 	bl	8012488 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8012476:	3708      	adds	r7, #8
 8012478:	46bd      	mov	sp, r7
 801247a:	bd80      	pop	{r7, pc}
 801247c:	080244f4 	.word	0x080244f4
 8012480:	0802467c 	.word	0x0802467c
 8012484:	08024544 	.word	0x08024544

08012488 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8012488:	b580      	push	{r7, lr}
 801248a:	b082      	sub	sp, #8
 801248c:	af00      	add	r7, sp, #0
 801248e:	6078      	str	r0, [r7, #4]
 8012490:	460b      	mov	r3, r1
 8012492:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8012494:	687b      	ldr	r3, [r7, #4]
 8012496:	2b00      	cmp	r3, #0
 8012498:	d106      	bne.n	80124a8 <netif_issue_reports+0x20>
 801249a:	4b18      	ldr	r3, [pc, #96]	; (80124fc <netif_issue_reports+0x74>)
 801249c:	f240 326d 	movw	r2, #877	; 0x36d
 80124a0:	4917      	ldr	r1, [pc, #92]	; (8012500 <netif_issue_reports+0x78>)
 80124a2:	4818      	ldr	r0, [pc, #96]	; (8012504 <netif_issue_reports+0x7c>)
 80124a4:	f00d ffd4 	bl	8020450 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80124a8:	687b      	ldr	r3, [r7, #4]
 80124aa:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80124ae:	f003 0304 	and.w	r3, r3, #4
 80124b2:	2b00      	cmp	r3, #0
 80124b4:	d01e      	beq.n	80124f4 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 80124b6:	687b      	ldr	r3, [r7, #4]
 80124b8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80124bc:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80124c0:	2b00      	cmp	r3, #0
 80124c2:	d017      	beq.n	80124f4 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80124c4:	78fb      	ldrb	r3, [r7, #3]
 80124c6:	f003 0301 	and.w	r3, r3, #1
 80124ca:	2b00      	cmp	r3, #0
 80124cc:	d013      	beq.n	80124f6 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80124ce:	687b      	ldr	r3, [r7, #4]
 80124d0:	3304      	adds	r3, #4
 80124d2:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80124d4:	2b00      	cmp	r3, #0
 80124d6:	d00e      	beq.n	80124f6 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 80124d8:	687b      	ldr	r3, [r7, #4]
 80124da:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80124de:	f003 0308 	and.w	r3, r3, #8
 80124e2:	2b00      	cmp	r3, #0
 80124e4:	d007      	beq.n	80124f6 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 80124e6:	687b      	ldr	r3, [r7, #4]
 80124e8:	3304      	adds	r3, #4
 80124ea:	4619      	mov	r1, r3
 80124ec:	6878      	ldr	r0, [r7, #4]
 80124ee:	f00a fc59 	bl	801cda4 <etharp_request>
 80124f2:	e000      	b.n	80124f6 <netif_issue_reports+0x6e>
    return;
 80124f4:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 80124f6:	3708      	adds	r7, #8
 80124f8:	46bd      	mov	sp, r7
 80124fa:	bd80      	pop	{r7, pc}
 80124fc:	080244f4 	.word	0x080244f4
 8012500:	08024698 	.word	0x08024698
 8012504:	08024544 	.word	0x08024544

08012508 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8012508:	b580      	push	{r7, lr}
 801250a:	b082      	sub	sp, #8
 801250c:	af00      	add	r7, sp, #0
 801250e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8012510:	687b      	ldr	r3, [r7, #4]
 8012512:	2b00      	cmp	r3, #0
 8012514:	d107      	bne.n	8012526 <netif_set_down+0x1e>
 8012516:	4b12      	ldr	r3, [pc, #72]	; (8012560 <netif_set_down+0x58>)
 8012518:	f240 329b 	movw	r2, #923	; 0x39b
 801251c:	4911      	ldr	r1, [pc, #68]	; (8012564 <netif_set_down+0x5c>)
 801251e:	4812      	ldr	r0, [pc, #72]	; (8012568 <netif_set_down+0x60>)
 8012520:	f00d ff96 	bl	8020450 <iprintf>
 8012524:	e019      	b.n	801255a <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8012526:	687b      	ldr	r3, [r7, #4]
 8012528:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801252c:	f003 0301 	and.w	r3, r3, #1
 8012530:	2b00      	cmp	r3, #0
 8012532:	d012      	beq.n	801255a <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8012534:	687b      	ldr	r3, [r7, #4]
 8012536:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801253a:	f023 0301 	bic.w	r3, r3, #1
 801253e:	b2da      	uxtb	r2, r3
 8012540:	687b      	ldr	r3, [r7, #4]
 8012542:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8012546:	687b      	ldr	r3, [r7, #4]
 8012548:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801254c:	f003 0308 	and.w	r3, r3, #8
 8012550:	2b00      	cmp	r3, #0
 8012552:	d002      	beq.n	801255a <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8012554:	6878      	ldr	r0, [r7, #4]
 8012556:	f009 ffdf 	bl	801c518 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 801255a:	3708      	adds	r7, #8
 801255c:	46bd      	mov	sp, r7
 801255e:	bd80      	pop	{r7, pc}
 8012560:	080244f4 	.word	0x080244f4
 8012564:	080246bc 	.word	0x080246bc
 8012568:	08024544 	.word	0x08024544

0801256c <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 801256c:	b580      	push	{r7, lr}
 801256e:	b082      	sub	sp, #8
 8012570:	af00      	add	r7, sp, #0
 8012572:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8012574:	687b      	ldr	r3, [r7, #4]
 8012576:	2b00      	cmp	r3, #0
 8012578:	d107      	bne.n	801258a <netif_set_link_up+0x1e>
 801257a:	4b15      	ldr	r3, [pc, #84]	; (80125d0 <netif_set_link_up+0x64>)
 801257c:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8012580:	4914      	ldr	r1, [pc, #80]	; (80125d4 <netif_set_link_up+0x68>)
 8012582:	4815      	ldr	r0, [pc, #84]	; (80125d8 <netif_set_link_up+0x6c>)
 8012584:	f00d ff64 	bl	8020450 <iprintf>
 8012588:	e01e      	b.n	80125c8 <netif_set_link_up+0x5c>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 801258a:	687b      	ldr	r3, [r7, #4]
 801258c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012590:	f003 0304 	and.w	r3, r3, #4
 8012594:	2b00      	cmp	r3, #0
 8012596:	d117      	bne.n	80125c8 <netif_set_link_up+0x5c>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8012598:	687b      	ldr	r3, [r7, #4]
 801259a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801259e:	f043 0304 	orr.w	r3, r3, #4
 80125a2:	b2da      	uxtb	r2, r3
 80125a4:	687b      	ldr	r3, [r7, #4]
 80125a6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if LWIP_DHCP
    dhcp_network_changed(netif);
 80125aa:	6878      	ldr	r0, [r7, #4]
 80125ac:	f008 fa24 	bl	801a9f8 <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80125b0:	2103      	movs	r1, #3
 80125b2:	6878      	ldr	r0, [r7, #4]
 80125b4:	f7ff ff68 	bl	8012488 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 80125b8:	687b      	ldr	r3, [r7, #4]
 80125ba:	69db      	ldr	r3, [r3, #28]
 80125bc:	2b00      	cmp	r3, #0
 80125be:	d003      	beq.n	80125c8 <netif_set_link_up+0x5c>
 80125c0:	687b      	ldr	r3, [r7, #4]
 80125c2:	69db      	ldr	r3, [r3, #28]
 80125c4:	6878      	ldr	r0, [r7, #4]
 80125c6:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80125c8:	3708      	adds	r7, #8
 80125ca:	46bd      	mov	sp, r7
 80125cc:	bd80      	pop	{r7, pc}
 80125ce:	bf00      	nop
 80125d0:	080244f4 	.word	0x080244f4
 80125d4:	080246dc 	.word	0x080246dc
 80125d8:	08024544 	.word	0x08024544

080125dc <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 80125dc:	b580      	push	{r7, lr}
 80125de:	b082      	sub	sp, #8
 80125e0:	af00      	add	r7, sp, #0
 80125e2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 80125e4:	687b      	ldr	r3, [r7, #4]
 80125e6:	2b00      	cmp	r3, #0
 80125e8:	d107      	bne.n	80125fa <netif_set_link_down+0x1e>
 80125ea:	4b11      	ldr	r3, [pc, #68]	; (8012630 <netif_set_link_down+0x54>)
 80125ec:	f240 4206 	movw	r2, #1030	; 0x406
 80125f0:	4910      	ldr	r1, [pc, #64]	; (8012634 <netif_set_link_down+0x58>)
 80125f2:	4811      	ldr	r0, [pc, #68]	; (8012638 <netif_set_link_down+0x5c>)
 80125f4:	f00d ff2c 	bl	8020450 <iprintf>
 80125f8:	e017      	b.n	801262a <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 80125fa:	687b      	ldr	r3, [r7, #4]
 80125fc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012600:	f003 0304 	and.w	r3, r3, #4
 8012604:	2b00      	cmp	r3, #0
 8012606:	d010      	beq.n	801262a <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8012608:	687b      	ldr	r3, [r7, #4]
 801260a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801260e:	f023 0304 	bic.w	r3, r3, #4
 8012612:	b2da      	uxtb	r2, r3
 8012614:	687b      	ldr	r3, [r7, #4]
 8012616:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    NETIF_LINK_CALLBACK(netif);
 801261a:	687b      	ldr	r3, [r7, #4]
 801261c:	69db      	ldr	r3, [r3, #28]
 801261e:	2b00      	cmp	r3, #0
 8012620:	d003      	beq.n	801262a <netif_set_link_down+0x4e>
 8012622:	687b      	ldr	r3, [r7, #4]
 8012624:	69db      	ldr	r3, [r3, #28]
 8012626:	6878      	ldr	r0, [r7, #4]
 8012628:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 801262a:	3708      	adds	r7, #8
 801262c:	46bd      	mov	sp, r7
 801262e:	bd80      	pop	{r7, pc}
 8012630:	080244f4 	.word	0x080244f4
 8012634:	08024700 	.word	0x08024700
 8012638:	08024544 	.word	0x08024544

0801263c <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 801263c:	b480      	push	{r7}
 801263e:	b083      	sub	sp, #12
 8012640:	af00      	add	r7, sp, #0
 8012642:	6078      	str	r0, [r7, #4]
 8012644:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8012646:	687b      	ldr	r3, [r7, #4]
 8012648:	2b00      	cmp	r3, #0
 801264a:	d002      	beq.n	8012652 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 801264c:	687b      	ldr	r3, [r7, #4]
 801264e:	683a      	ldr	r2, [r7, #0]
 8012650:	61da      	str	r2, [r3, #28]
  }
}
 8012652:	bf00      	nop
 8012654:	370c      	adds	r7, #12
 8012656:	46bd      	mov	sp, r7
 8012658:	f85d 7b04 	ldr.w	r7, [sp], #4
 801265c:	4770      	bx	lr

0801265e <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 801265e:	b480      	push	{r7}
 8012660:	b085      	sub	sp, #20
 8012662:	af00      	add	r7, sp, #0
 8012664:	60f8      	str	r0, [r7, #12]
 8012666:	60b9      	str	r1, [r7, #8]
 8012668:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 801266a:	f06f 030b 	mvn.w	r3, #11
}
 801266e:	4618      	mov	r0, r3
 8012670:	3714      	adds	r7, #20
 8012672:	46bd      	mov	sp, r7
 8012674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012678:	4770      	bx	lr
	...

0801267c <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 801267c:	b480      	push	{r7}
 801267e:	b085      	sub	sp, #20
 8012680:	af00      	add	r7, sp, #0
 8012682:	4603      	mov	r3, r0
 8012684:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8012686:	79fb      	ldrb	r3, [r7, #7]
 8012688:	2b00      	cmp	r3, #0
 801268a:	d013      	beq.n	80126b4 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 801268c:	4b0d      	ldr	r3, [pc, #52]	; (80126c4 <netif_get_by_index+0x48>)
 801268e:	681b      	ldr	r3, [r3, #0]
 8012690:	60fb      	str	r3, [r7, #12]
 8012692:	e00c      	b.n	80126ae <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8012694:	68fb      	ldr	r3, [r7, #12]
 8012696:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801269a:	3301      	adds	r3, #1
 801269c:	b2db      	uxtb	r3, r3
 801269e:	79fa      	ldrb	r2, [r7, #7]
 80126a0:	429a      	cmp	r2, r3
 80126a2:	d101      	bne.n	80126a8 <netif_get_by_index+0x2c>
        return netif; /* found! */
 80126a4:	68fb      	ldr	r3, [r7, #12]
 80126a6:	e006      	b.n	80126b6 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 80126a8:	68fb      	ldr	r3, [r7, #12]
 80126aa:	681b      	ldr	r3, [r3, #0]
 80126ac:	60fb      	str	r3, [r7, #12]
 80126ae:	68fb      	ldr	r3, [r7, #12]
 80126b0:	2b00      	cmp	r3, #0
 80126b2:	d1ef      	bne.n	8012694 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 80126b4:	2300      	movs	r3, #0
}
 80126b6:	4618      	mov	r0, r3
 80126b8:	3714      	adds	r7, #20
 80126ba:	46bd      	mov	sp, r7
 80126bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126c0:	4770      	bx	lr
 80126c2:	bf00      	nop
 80126c4:	24007dcc 	.word	0x24007dcc

080126c8 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 80126c8:	b580      	push	{r7, lr}
 80126ca:	b082      	sub	sp, #8
 80126cc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 80126ce:	f00c f8fd 	bl	801e8cc <sys_arch_protect>
 80126d2:	6038      	str	r0, [r7, #0]
 80126d4:	4b0d      	ldr	r3, [pc, #52]	; (801270c <pbuf_free_ooseq+0x44>)
 80126d6:	2200      	movs	r2, #0
 80126d8:	701a      	strb	r2, [r3, #0]
 80126da:	6838      	ldr	r0, [r7, #0]
 80126dc:	f00c f904 	bl	801e8e8 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80126e0:	4b0b      	ldr	r3, [pc, #44]	; (8012710 <pbuf_free_ooseq+0x48>)
 80126e2:	681b      	ldr	r3, [r3, #0]
 80126e4:	607b      	str	r3, [r7, #4]
 80126e6:	e00a      	b.n	80126fe <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 80126e8:	687b      	ldr	r3, [r7, #4]
 80126ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80126ec:	2b00      	cmp	r3, #0
 80126ee:	d003      	beq.n	80126f8 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 80126f0:	6878      	ldr	r0, [r7, #4]
 80126f2:	f002 fc85 	bl	8015000 <tcp_free_ooseq>
      return;
 80126f6:	e005      	b.n	8012704 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80126f8:	687b      	ldr	r3, [r7, #4]
 80126fa:	68db      	ldr	r3, [r3, #12]
 80126fc:	607b      	str	r3, [r7, #4]
 80126fe:	687b      	ldr	r3, [r7, #4]
 8012700:	2b00      	cmp	r3, #0
 8012702:	d1f1      	bne.n	80126e8 <pbuf_free_ooseq+0x20>
    }
  }
}
 8012704:	3708      	adds	r7, #8
 8012706:	46bd      	mov	sp, r7
 8012708:	bd80      	pop	{r7, pc}
 801270a:	bf00      	nop
 801270c:	24007dd5 	.word	0x24007dd5
 8012710:	24007de4 	.word	0x24007de4

08012714 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8012714:	b580      	push	{r7, lr}
 8012716:	b082      	sub	sp, #8
 8012718:	af00      	add	r7, sp, #0
 801271a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 801271c:	f7ff ffd4 	bl	80126c8 <pbuf_free_ooseq>
}
 8012720:	bf00      	nop
 8012722:	3708      	adds	r7, #8
 8012724:	46bd      	mov	sp, r7
 8012726:	bd80      	pop	{r7, pc}

08012728 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8012728:	b580      	push	{r7, lr}
 801272a:	b082      	sub	sp, #8
 801272c:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 801272e:	f00c f8cd 	bl	801e8cc <sys_arch_protect>
 8012732:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8012734:	4b0f      	ldr	r3, [pc, #60]	; (8012774 <pbuf_pool_is_empty+0x4c>)
 8012736:	781b      	ldrb	r3, [r3, #0]
 8012738:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 801273a:	4b0e      	ldr	r3, [pc, #56]	; (8012774 <pbuf_pool_is_empty+0x4c>)
 801273c:	2201      	movs	r2, #1
 801273e:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8012740:	6878      	ldr	r0, [r7, #4]
 8012742:	f00c f8d1 	bl	801e8e8 <sys_arch_unprotect>

  if (!queued) {
 8012746:	78fb      	ldrb	r3, [r7, #3]
 8012748:	2b00      	cmp	r3, #0
 801274a:	d10f      	bne.n	801276c <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 801274c:	2100      	movs	r1, #0
 801274e:	480a      	ldr	r0, [pc, #40]	; (8012778 <pbuf_pool_is_empty+0x50>)
 8012750:	f7fe fdcc 	bl	80112ec <tcpip_try_callback>
 8012754:	4603      	mov	r3, r0
 8012756:	2b00      	cmp	r3, #0
 8012758:	d008      	beq.n	801276c <pbuf_pool_is_empty+0x44>
 801275a:	f00c f8b7 	bl	801e8cc <sys_arch_protect>
 801275e:	6078      	str	r0, [r7, #4]
 8012760:	4b04      	ldr	r3, [pc, #16]	; (8012774 <pbuf_pool_is_empty+0x4c>)
 8012762:	2200      	movs	r2, #0
 8012764:	701a      	strb	r2, [r3, #0]
 8012766:	6878      	ldr	r0, [r7, #4]
 8012768:	f00c f8be 	bl	801e8e8 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 801276c:	bf00      	nop
 801276e:	3708      	adds	r7, #8
 8012770:	46bd      	mov	sp, r7
 8012772:	bd80      	pop	{r7, pc}
 8012774:	24007dd5 	.word	0x24007dd5
 8012778:	08012715 	.word	0x08012715

0801277c <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 801277c:	b480      	push	{r7}
 801277e:	b085      	sub	sp, #20
 8012780:	af00      	add	r7, sp, #0
 8012782:	60f8      	str	r0, [r7, #12]
 8012784:	60b9      	str	r1, [r7, #8]
 8012786:	4611      	mov	r1, r2
 8012788:	461a      	mov	r2, r3
 801278a:	460b      	mov	r3, r1
 801278c:	80fb      	strh	r3, [r7, #6]
 801278e:	4613      	mov	r3, r2
 8012790:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8012792:	68fb      	ldr	r3, [r7, #12]
 8012794:	2200      	movs	r2, #0
 8012796:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8012798:	68fb      	ldr	r3, [r7, #12]
 801279a:	68ba      	ldr	r2, [r7, #8]
 801279c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 801279e:	68fb      	ldr	r3, [r7, #12]
 80127a0:	88fa      	ldrh	r2, [r7, #6]
 80127a2:	811a      	strh	r2, [r3, #8]
  p->len = len;
 80127a4:	68fb      	ldr	r3, [r7, #12]
 80127a6:	88ba      	ldrh	r2, [r7, #4]
 80127a8:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 80127aa:	8b3b      	ldrh	r3, [r7, #24]
 80127ac:	b2da      	uxtb	r2, r3
 80127ae:	68fb      	ldr	r3, [r7, #12]
 80127b0:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 80127b2:	68fb      	ldr	r3, [r7, #12]
 80127b4:	7f3a      	ldrb	r2, [r7, #28]
 80127b6:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 80127b8:	68fb      	ldr	r3, [r7, #12]
 80127ba:	2201      	movs	r2, #1
 80127bc:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 80127be:	68fb      	ldr	r3, [r7, #12]
 80127c0:	2200      	movs	r2, #0
 80127c2:	73da      	strb	r2, [r3, #15]
}
 80127c4:	bf00      	nop
 80127c6:	3714      	adds	r7, #20
 80127c8:	46bd      	mov	sp, r7
 80127ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127ce:	4770      	bx	lr

080127d0 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 80127d0:	b580      	push	{r7, lr}
 80127d2:	b08c      	sub	sp, #48	; 0x30
 80127d4:	af02      	add	r7, sp, #8
 80127d6:	4603      	mov	r3, r0
 80127d8:	71fb      	strb	r3, [r7, #7]
 80127da:	460b      	mov	r3, r1
 80127dc:	80bb      	strh	r3, [r7, #4]
 80127de:	4613      	mov	r3, r2
 80127e0:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 80127e2:	79fb      	ldrb	r3, [r7, #7]
 80127e4:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 80127e6:	887b      	ldrh	r3, [r7, #2]
 80127e8:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80127ec:	d07f      	beq.n	80128ee <pbuf_alloc+0x11e>
 80127ee:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80127f2:	f300 80c8 	bgt.w	8012986 <pbuf_alloc+0x1b6>
 80127f6:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 80127fa:	d010      	beq.n	801281e <pbuf_alloc+0x4e>
 80127fc:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8012800:	f300 80c1 	bgt.w	8012986 <pbuf_alloc+0x1b6>
 8012804:	2b01      	cmp	r3, #1
 8012806:	d002      	beq.n	801280e <pbuf_alloc+0x3e>
 8012808:	2b41      	cmp	r3, #65	; 0x41
 801280a:	f040 80bc 	bne.w	8012986 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 801280e:	887a      	ldrh	r2, [r7, #2]
 8012810:	88bb      	ldrh	r3, [r7, #4]
 8012812:	4619      	mov	r1, r3
 8012814:	2000      	movs	r0, #0
 8012816:	f000 f8d1 	bl	80129bc <pbuf_alloc_reference>
 801281a:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 801281c:	e0bd      	b.n	801299a <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 801281e:	2300      	movs	r3, #0
 8012820:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8012822:	2300      	movs	r3, #0
 8012824:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8012826:	88bb      	ldrh	r3, [r7, #4]
 8012828:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 801282a:	200c      	movs	r0, #12
 801282c:	f7ff fb8e 	bl	8011f4c <memp_malloc>
 8012830:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8012832:	693b      	ldr	r3, [r7, #16]
 8012834:	2b00      	cmp	r3, #0
 8012836:	d109      	bne.n	801284c <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8012838:	f7ff ff76 	bl	8012728 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 801283c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801283e:	2b00      	cmp	r3, #0
 8012840:	d002      	beq.n	8012848 <pbuf_alloc+0x78>
            pbuf_free(p);
 8012842:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012844:	f000 fada 	bl	8012dfc <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8012848:	2300      	movs	r3, #0
 801284a:	e0a7      	b.n	801299c <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 801284c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801284e:	3303      	adds	r3, #3
 8012850:	b29b      	uxth	r3, r3
 8012852:	f023 0303 	bic.w	r3, r3, #3
 8012856:	b29b      	uxth	r3, r3
 8012858:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 801285c:	b29b      	uxth	r3, r3
 801285e:	8b7a      	ldrh	r2, [r7, #26]
 8012860:	4293      	cmp	r3, r2
 8012862:	bf28      	it	cs
 8012864:	4613      	movcs	r3, r2
 8012866:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8012868:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801286a:	3310      	adds	r3, #16
 801286c:	693a      	ldr	r2, [r7, #16]
 801286e:	4413      	add	r3, r2
 8012870:	3303      	adds	r3, #3
 8012872:	f023 0303 	bic.w	r3, r3, #3
 8012876:	4618      	mov	r0, r3
 8012878:	89f9      	ldrh	r1, [r7, #14]
 801287a:	8b7a      	ldrh	r2, [r7, #26]
 801287c:	2300      	movs	r3, #0
 801287e:	9301      	str	r3, [sp, #4]
 8012880:	887b      	ldrh	r3, [r7, #2]
 8012882:	9300      	str	r3, [sp, #0]
 8012884:	460b      	mov	r3, r1
 8012886:	4601      	mov	r1, r0
 8012888:	6938      	ldr	r0, [r7, #16]
 801288a:	f7ff ff77 	bl	801277c <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 801288e:	693b      	ldr	r3, [r7, #16]
 8012890:	685b      	ldr	r3, [r3, #4]
 8012892:	f003 0303 	and.w	r3, r3, #3
 8012896:	2b00      	cmp	r3, #0
 8012898:	d006      	beq.n	80128a8 <pbuf_alloc+0xd8>
 801289a:	4b42      	ldr	r3, [pc, #264]	; (80129a4 <pbuf_alloc+0x1d4>)
 801289c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80128a0:	4941      	ldr	r1, [pc, #260]	; (80129a8 <pbuf_alloc+0x1d8>)
 80128a2:	4842      	ldr	r0, [pc, #264]	; (80129ac <pbuf_alloc+0x1dc>)
 80128a4:	f00d fdd4 	bl	8020450 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 80128a8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80128aa:	3303      	adds	r3, #3
 80128ac:	f023 0303 	bic.w	r3, r3, #3
 80128b0:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 80128b4:	d106      	bne.n	80128c4 <pbuf_alloc+0xf4>
 80128b6:	4b3b      	ldr	r3, [pc, #236]	; (80129a4 <pbuf_alloc+0x1d4>)
 80128b8:	f44f 7281 	mov.w	r2, #258	; 0x102
 80128bc:	493c      	ldr	r1, [pc, #240]	; (80129b0 <pbuf_alloc+0x1e0>)
 80128be:	483b      	ldr	r0, [pc, #236]	; (80129ac <pbuf_alloc+0x1dc>)
 80128c0:	f00d fdc6 	bl	8020450 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 80128c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128c6:	2b00      	cmp	r3, #0
 80128c8:	d102      	bne.n	80128d0 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 80128ca:	693b      	ldr	r3, [r7, #16]
 80128cc:	627b      	str	r3, [r7, #36]	; 0x24
 80128ce:	e002      	b.n	80128d6 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 80128d0:	69fb      	ldr	r3, [r7, #28]
 80128d2:	693a      	ldr	r2, [r7, #16]
 80128d4:	601a      	str	r2, [r3, #0]
        }
        last = q;
 80128d6:	693b      	ldr	r3, [r7, #16]
 80128d8:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 80128da:	8b7a      	ldrh	r2, [r7, #26]
 80128dc:	89fb      	ldrh	r3, [r7, #14]
 80128de:	1ad3      	subs	r3, r2, r3
 80128e0:	837b      	strh	r3, [r7, #26]
        offset = 0;
 80128e2:	2300      	movs	r3, #0
 80128e4:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 80128e6:	8b7b      	ldrh	r3, [r7, #26]
 80128e8:	2b00      	cmp	r3, #0
 80128ea:	d19e      	bne.n	801282a <pbuf_alloc+0x5a>
      break;
 80128ec:	e055      	b.n	801299a <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 80128ee:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80128f0:	3303      	adds	r3, #3
 80128f2:	b29b      	uxth	r3, r3
 80128f4:	f023 0303 	bic.w	r3, r3, #3
 80128f8:	b29a      	uxth	r2, r3
 80128fa:	88bb      	ldrh	r3, [r7, #4]
 80128fc:	3303      	adds	r3, #3
 80128fe:	b29b      	uxth	r3, r3
 8012900:	f023 0303 	bic.w	r3, r3, #3
 8012904:	b29b      	uxth	r3, r3
 8012906:	4413      	add	r3, r2
 8012908:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 801290a:	8b3b      	ldrh	r3, [r7, #24]
 801290c:	3310      	adds	r3, #16
 801290e:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8012910:	8b3a      	ldrh	r2, [r7, #24]
 8012912:	88bb      	ldrh	r3, [r7, #4]
 8012914:	3303      	adds	r3, #3
 8012916:	f023 0303 	bic.w	r3, r3, #3
 801291a:	429a      	cmp	r2, r3
 801291c:	d306      	bcc.n	801292c <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 801291e:	8afa      	ldrh	r2, [r7, #22]
 8012920:	88bb      	ldrh	r3, [r7, #4]
 8012922:	3303      	adds	r3, #3
 8012924:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8012928:	429a      	cmp	r2, r3
 801292a:	d201      	bcs.n	8012930 <pbuf_alloc+0x160>
        return NULL;
 801292c:	2300      	movs	r3, #0
 801292e:	e035      	b.n	801299c <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8012930:	8afb      	ldrh	r3, [r7, #22]
 8012932:	4618      	mov	r0, r3
 8012934:	f7ff f966 	bl	8011c04 <mem_malloc>
 8012938:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 801293a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801293c:	2b00      	cmp	r3, #0
 801293e:	d101      	bne.n	8012944 <pbuf_alloc+0x174>
        return NULL;
 8012940:	2300      	movs	r3, #0
 8012942:	e02b      	b.n	801299c <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8012944:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012946:	3310      	adds	r3, #16
 8012948:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801294a:	4413      	add	r3, r2
 801294c:	3303      	adds	r3, #3
 801294e:	f023 0303 	bic.w	r3, r3, #3
 8012952:	4618      	mov	r0, r3
 8012954:	88b9      	ldrh	r1, [r7, #4]
 8012956:	88ba      	ldrh	r2, [r7, #4]
 8012958:	2300      	movs	r3, #0
 801295a:	9301      	str	r3, [sp, #4]
 801295c:	887b      	ldrh	r3, [r7, #2]
 801295e:	9300      	str	r3, [sp, #0]
 8012960:	460b      	mov	r3, r1
 8012962:	4601      	mov	r1, r0
 8012964:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012966:	f7ff ff09 	bl	801277c <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 801296a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801296c:	685b      	ldr	r3, [r3, #4]
 801296e:	f003 0303 	and.w	r3, r3, #3
 8012972:	2b00      	cmp	r3, #0
 8012974:	d010      	beq.n	8012998 <pbuf_alloc+0x1c8>
 8012976:	4b0b      	ldr	r3, [pc, #44]	; (80129a4 <pbuf_alloc+0x1d4>)
 8012978:	f44f 7291 	mov.w	r2, #290	; 0x122
 801297c:	490d      	ldr	r1, [pc, #52]	; (80129b4 <pbuf_alloc+0x1e4>)
 801297e:	480b      	ldr	r0, [pc, #44]	; (80129ac <pbuf_alloc+0x1dc>)
 8012980:	f00d fd66 	bl	8020450 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8012984:	e008      	b.n	8012998 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8012986:	4b07      	ldr	r3, [pc, #28]	; (80129a4 <pbuf_alloc+0x1d4>)
 8012988:	f240 1227 	movw	r2, #295	; 0x127
 801298c:	490a      	ldr	r1, [pc, #40]	; (80129b8 <pbuf_alloc+0x1e8>)
 801298e:	4807      	ldr	r0, [pc, #28]	; (80129ac <pbuf_alloc+0x1dc>)
 8012990:	f00d fd5e 	bl	8020450 <iprintf>
      return NULL;
 8012994:	2300      	movs	r3, #0
 8012996:	e001      	b.n	801299c <pbuf_alloc+0x1cc>
      break;
 8012998:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 801299a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801299c:	4618      	mov	r0, r3
 801299e:	3728      	adds	r7, #40	; 0x28
 80129a0:	46bd      	mov	sp, r7
 80129a2:	bd80      	pop	{r7, pc}
 80129a4:	08024724 	.word	0x08024724
 80129a8:	08024754 	.word	0x08024754
 80129ac:	08024784 	.word	0x08024784
 80129b0:	080247ac 	.word	0x080247ac
 80129b4:	080247e0 	.word	0x080247e0
 80129b8:	0802480c 	.word	0x0802480c

080129bc <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 80129bc:	b580      	push	{r7, lr}
 80129be:	b086      	sub	sp, #24
 80129c0:	af02      	add	r7, sp, #8
 80129c2:	6078      	str	r0, [r7, #4]
 80129c4:	460b      	mov	r3, r1
 80129c6:	807b      	strh	r3, [r7, #2]
 80129c8:	4613      	mov	r3, r2
 80129ca:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 80129cc:	883b      	ldrh	r3, [r7, #0]
 80129ce:	2b41      	cmp	r3, #65	; 0x41
 80129d0:	d009      	beq.n	80129e6 <pbuf_alloc_reference+0x2a>
 80129d2:	883b      	ldrh	r3, [r7, #0]
 80129d4:	2b01      	cmp	r3, #1
 80129d6:	d006      	beq.n	80129e6 <pbuf_alloc_reference+0x2a>
 80129d8:	4b0f      	ldr	r3, [pc, #60]	; (8012a18 <pbuf_alloc_reference+0x5c>)
 80129da:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 80129de:	490f      	ldr	r1, [pc, #60]	; (8012a1c <pbuf_alloc_reference+0x60>)
 80129e0:	480f      	ldr	r0, [pc, #60]	; (8012a20 <pbuf_alloc_reference+0x64>)
 80129e2:	f00d fd35 	bl	8020450 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 80129e6:	200b      	movs	r0, #11
 80129e8:	f7ff fab0 	bl	8011f4c <memp_malloc>
 80129ec:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 80129ee:	68fb      	ldr	r3, [r7, #12]
 80129f0:	2b00      	cmp	r3, #0
 80129f2:	d101      	bne.n	80129f8 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 80129f4:	2300      	movs	r3, #0
 80129f6:	e00b      	b.n	8012a10 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 80129f8:	8879      	ldrh	r1, [r7, #2]
 80129fa:	887a      	ldrh	r2, [r7, #2]
 80129fc:	2300      	movs	r3, #0
 80129fe:	9301      	str	r3, [sp, #4]
 8012a00:	883b      	ldrh	r3, [r7, #0]
 8012a02:	9300      	str	r3, [sp, #0]
 8012a04:	460b      	mov	r3, r1
 8012a06:	6879      	ldr	r1, [r7, #4]
 8012a08:	68f8      	ldr	r0, [r7, #12]
 8012a0a:	f7ff feb7 	bl	801277c <pbuf_init_alloced_pbuf>
  return p;
 8012a0e:	68fb      	ldr	r3, [r7, #12]
}
 8012a10:	4618      	mov	r0, r3
 8012a12:	3710      	adds	r7, #16
 8012a14:	46bd      	mov	sp, r7
 8012a16:	bd80      	pop	{r7, pc}
 8012a18:	08024724 	.word	0x08024724
 8012a1c:	08024828 	.word	0x08024828
 8012a20:	08024784 	.word	0x08024784

08012a24 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8012a24:	b580      	push	{r7, lr}
 8012a26:	b088      	sub	sp, #32
 8012a28:	af02      	add	r7, sp, #8
 8012a2a:	607b      	str	r3, [r7, #4]
 8012a2c:	4603      	mov	r3, r0
 8012a2e:	73fb      	strb	r3, [r7, #15]
 8012a30:	460b      	mov	r3, r1
 8012a32:	81bb      	strh	r3, [r7, #12]
 8012a34:	4613      	mov	r3, r2
 8012a36:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8012a38:	7bfb      	ldrb	r3, [r7, #15]
 8012a3a:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8012a3c:	8a7b      	ldrh	r3, [r7, #18]
 8012a3e:	3303      	adds	r3, #3
 8012a40:	f023 0203 	bic.w	r2, r3, #3
 8012a44:	89bb      	ldrh	r3, [r7, #12]
 8012a46:	441a      	add	r2, r3
 8012a48:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012a4a:	429a      	cmp	r2, r3
 8012a4c:	d901      	bls.n	8012a52 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8012a4e:	2300      	movs	r3, #0
 8012a50:	e018      	b.n	8012a84 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8012a52:	6a3b      	ldr	r3, [r7, #32]
 8012a54:	2b00      	cmp	r3, #0
 8012a56:	d007      	beq.n	8012a68 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8012a58:	8a7b      	ldrh	r3, [r7, #18]
 8012a5a:	3303      	adds	r3, #3
 8012a5c:	f023 0303 	bic.w	r3, r3, #3
 8012a60:	6a3a      	ldr	r2, [r7, #32]
 8012a62:	4413      	add	r3, r2
 8012a64:	617b      	str	r3, [r7, #20]
 8012a66:	e001      	b.n	8012a6c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8012a68:	2300      	movs	r3, #0
 8012a6a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8012a6c:	6878      	ldr	r0, [r7, #4]
 8012a6e:	89b9      	ldrh	r1, [r7, #12]
 8012a70:	89ba      	ldrh	r2, [r7, #12]
 8012a72:	2302      	movs	r3, #2
 8012a74:	9301      	str	r3, [sp, #4]
 8012a76:	897b      	ldrh	r3, [r7, #10]
 8012a78:	9300      	str	r3, [sp, #0]
 8012a7a:	460b      	mov	r3, r1
 8012a7c:	6979      	ldr	r1, [r7, #20]
 8012a7e:	f7ff fe7d 	bl	801277c <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8012a82:	687b      	ldr	r3, [r7, #4]
}
 8012a84:	4618      	mov	r0, r3
 8012a86:	3718      	adds	r7, #24
 8012a88:	46bd      	mov	sp, r7
 8012a8a:	bd80      	pop	{r7, pc}

08012a8c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8012a8c:	b580      	push	{r7, lr}
 8012a8e:	b084      	sub	sp, #16
 8012a90:	af00      	add	r7, sp, #0
 8012a92:	6078      	str	r0, [r7, #4]
 8012a94:	460b      	mov	r3, r1
 8012a96:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8012a98:	687b      	ldr	r3, [r7, #4]
 8012a9a:	2b00      	cmp	r3, #0
 8012a9c:	d106      	bne.n	8012aac <pbuf_realloc+0x20>
 8012a9e:	4b3a      	ldr	r3, [pc, #232]	; (8012b88 <pbuf_realloc+0xfc>)
 8012aa0:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8012aa4:	4939      	ldr	r1, [pc, #228]	; (8012b8c <pbuf_realloc+0x100>)
 8012aa6:	483a      	ldr	r0, [pc, #232]	; (8012b90 <pbuf_realloc+0x104>)
 8012aa8:	f00d fcd2 	bl	8020450 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8012aac:	687b      	ldr	r3, [r7, #4]
 8012aae:	891b      	ldrh	r3, [r3, #8]
 8012ab0:	887a      	ldrh	r2, [r7, #2]
 8012ab2:	429a      	cmp	r2, r3
 8012ab4:	d263      	bcs.n	8012b7e <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8012ab6:	687b      	ldr	r3, [r7, #4]
 8012ab8:	891a      	ldrh	r2, [r3, #8]
 8012aba:	887b      	ldrh	r3, [r7, #2]
 8012abc:	1ad3      	subs	r3, r2, r3
 8012abe:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8012ac0:	887b      	ldrh	r3, [r7, #2]
 8012ac2:	817b      	strh	r3, [r7, #10]
  q = p;
 8012ac4:	687b      	ldr	r3, [r7, #4]
 8012ac6:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8012ac8:	e018      	b.n	8012afc <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8012aca:	68fb      	ldr	r3, [r7, #12]
 8012acc:	895b      	ldrh	r3, [r3, #10]
 8012ace:	897a      	ldrh	r2, [r7, #10]
 8012ad0:	1ad3      	subs	r3, r2, r3
 8012ad2:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8012ad4:	68fb      	ldr	r3, [r7, #12]
 8012ad6:	891a      	ldrh	r2, [r3, #8]
 8012ad8:	893b      	ldrh	r3, [r7, #8]
 8012ada:	1ad3      	subs	r3, r2, r3
 8012adc:	b29a      	uxth	r2, r3
 8012ade:	68fb      	ldr	r3, [r7, #12]
 8012ae0:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8012ae2:	68fb      	ldr	r3, [r7, #12]
 8012ae4:	681b      	ldr	r3, [r3, #0]
 8012ae6:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8012ae8:	68fb      	ldr	r3, [r7, #12]
 8012aea:	2b00      	cmp	r3, #0
 8012aec:	d106      	bne.n	8012afc <pbuf_realloc+0x70>
 8012aee:	4b26      	ldr	r3, [pc, #152]	; (8012b88 <pbuf_realloc+0xfc>)
 8012af0:	f240 12af 	movw	r2, #431	; 0x1af
 8012af4:	4927      	ldr	r1, [pc, #156]	; (8012b94 <pbuf_realloc+0x108>)
 8012af6:	4826      	ldr	r0, [pc, #152]	; (8012b90 <pbuf_realloc+0x104>)
 8012af8:	f00d fcaa 	bl	8020450 <iprintf>
  while (rem_len > q->len) {
 8012afc:	68fb      	ldr	r3, [r7, #12]
 8012afe:	895b      	ldrh	r3, [r3, #10]
 8012b00:	897a      	ldrh	r2, [r7, #10]
 8012b02:	429a      	cmp	r2, r3
 8012b04:	d8e1      	bhi.n	8012aca <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8012b06:	68fb      	ldr	r3, [r7, #12]
 8012b08:	7b1b      	ldrb	r3, [r3, #12]
 8012b0a:	f003 030f 	and.w	r3, r3, #15
 8012b0e:	2b00      	cmp	r3, #0
 8012b10:	d121      	bne.n	8012b56 <pbuf_realloc+0xca>
 8012b12:	68fb      	ldr	r3, [r7, #12]
 8012b14:	895b      	ldrh	r3, [r3, #10]
 8012b16:	897a      	ldrh	r2, [r7, #10]
 8012b18:	429a      	cmp	r2, r3
 8012b1a:	d01c      	beq.n	8012b56 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8012b1c:	68fb      	ldr	r3, [r7, #12]
 8012b1e:	7b5b      	ldrb	r3, [r3, #13]
 8012b20:	f003 0302 	and.w	r3, r3, #2
 8012b24:	2b00      	cmp	r3, #0
 8012b26:	d116      	bne.n	8012b56 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8012b28:	68fb      	ldr	r3, [r7, #12]
 8012b2a:	685a      	ldr	r2, [r3, #4]
 8012b2c:	68fb      	ldr	r3, [r7, #12]
 8012b2e:	1ad3      	subs	r3, r2, r3
 8012b30:	b29a      	uxth	r2, r3
 8012b32:	897b      	ldrh	r3, [r7, #10]
 8012b34:	4413      	add	r3, r2
 8012b36:	b29b      	uxth	r3, r3
 8012b38:	4619      	mov	r1, r3
 8012b3a:	68f8      	ldr	r0, [r7, #12]
 8012b3c:	f7fe ff58 	bl	80119f0 <mem_trim>
 8012b40:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8012b42:	68fb      	ldr	r3, [r7, #12]
 8012b44:	2b00      	cmp	r3, #0
 8012b46:	d106      	bne.n	8012b56 <pbuf_realloc+0xca>
 8012b48:	4b0f      	ldr	r3, [pc, #60]	; (8012b88 <pbuf_realloc+0xfc>)
 8012b4a:	f240 12bd 	movw	r2, #445	; 0x1bd
 8012b4e:	4912      	ldr	r1, [pc, #72]	; (8012b98 <pbuf_realloc+0x10c>)
 8012b50:	480f      	ldr	r0, [pc, #60]	; (8012b90 <pbuf_realloc+0x104>)
 8012b52:	f00d fc7d 	bl	8020450 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8012b56:	68fb      	ldr	r3, [r7, #12]
 8012b58:	897a      	ldrh	r2, [r7, #10]
 8012b5a:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8012b5c:	68fb      	ldr	r3, [r7, #12]
 8012b5e:	895a      	ldrh	r2, [r3, #10]
 8012b60:	68fb      	ldr	r3, [r7, #12]
 8012b62:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8012b64:	68fb      	ldr	r3, [r7, #12]
 8012b66:	681b      	ldr	r3, [r3, #0]
 8012b68:	2b00      	cmp	r3, #0
 8012b6a:	d004      	beq.n	8012b76 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8012b6c:	68fb      	ldr	r3, [r7, #12]
 8012b6e:	681b      	ldr	r3, [r3, #0]
 8012b70:	4618      	mov	r0, r3
 8012b72:	f000 f943 	bl	8012dfc <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8012b76:	68fb      	ldr	r3, [r7, #12]
 8012b78:	2200      	movs	r2, #0
 8012b7a:	601a      	str	r2, [r3, #0]
 8012b7c:	e000      	b.n	8012b80 <pbuf_realloc+0xf4>
    return;
 8012b7e:	bf00      	nop

}
 8012b80:	3710      	adds	r7, #16
 8012b82:	46bd      	mov	sp, r7
 8012b84:	bd80      	pop	{r7, pc}
 8012b86:	bf00      	nop
 8012b88:	08024724 	.word	0x08024724
 8012b8c:	0802483c 	.word	0x0802483c
 8012b90:	08024784 	.word	0x08024784
 8012b94:	08024854 	.word	0x08024854
 8012b98:	0802486c 	.word	0x0802486c

08012b9c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8012b9c:	b580      	push	{r7, lr}
 8012b9e:	b086      	sub	sp, #24
 8012ba0:	af00      	add	r7, sp, #0
 8012ba2:	60f8      	str	r0, [r7, #12]
 8012ba4:	60b9      	str	r1, [r7, #8]
 8012ba6:	4613      	mov	r3, r2
 8012ba8:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8012baa:	68fb      	ldr	r3, [r7, #12]
 8012bac:	2b00      	cmp	r3, #0
 8012bae:	d106      	bne.n	8012bbe <pbuf_add_header_impl+0x22>
 8012bb0:	4b2b      	ldr	r3, [pc, #172]	; (8012c60 <pbuf_add_header_impl+0xc4>)
 8012bb2:	f240 12df 	movw	r2, #479	; 0x1df
 8012bb6:	492b      	ldr	r1, [pc, #172]	; (8012c64 <pbuf_add_header_impl+0xc8>)
 8012bb8:	482b      	ldr	r0, [pc, #172]	; (8012c68 <pbuf_add_header_impl+0xcc>)
 8012bba:	f00d fc49 	bl	8020450 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8012bbe:	68fb      	ldr	r3, [r7, #12]
 8012bc0:	2b00      	cmp	r3, #0
 8012bc2:	d003      	beq.n	8012bcc <pbuf_add_header_impl+0x30>
 8012bc4:	68bb      	ldr	r3, [r7, #8]
 8012bc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012bca:	d301      	bcc.n	8012bd0 <pbuf_add_header_impl+0x34>
    return 1;
 8012bcc:	2301      	movs	r3, #1
 8012bce:	e043      	b.n	8012c58 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8012bd0:	68bb      	ldr	r3, [r7, #8]
 8012bd2:	2b00      	cmp	r3, #0
 8012bd4:	d101      	bne.n	8012bda <pbuf_add_header_impl+0x3e>
    return 0;
 8012bd6:	2300      	movs	r3, #0
 8012bd8:	e03e      	b.n	8012c58 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8012bda:	68bb      	ldr	r3, [r7, #8]
 8012bdc:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8012bde:	68fb      	ldr	r3, [r7, #12]
 8012be0:	891a      	ldrh	r2, [r3, #8]
 8012be2:	8a7b      	ldrh	r3, [r7, #18]
 8012be4:	4413      	add	r3, r2
 8012be6:	b29b      	uxth	r3, r3
 8012be8:	8a7a      	ldrh	r2, [r7, #18]
 8012bea:	429a      	cmp	r2, r3
 8012bec:	d901      	bls.n	8012bf2 <pbuf_add_header_impl+0x56>
    return 1;
 8012bee:	2301      	movs	r3, #1
 8012bf0:	e032      	b.n	8012c58 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8012bf2:	68fb      	ldr	r3, [r7, #12]
 8012bf4:	7b1b      	ldrb	r3, [r3, #12]
 8012bf6:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8012bf8:	8a3b      	ldrh	r3, [r7, #16]
 8012bfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012bfe:	2b00      	cmp	r3, #0
 8012c00:	d00c      	beq.n	8012c1c <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8012c02:	68fb      	ldr	r3, [r7, #12]
 8012c04:	685a      	ldr	r2, [r3, #4]
 8012c06:	68bb      	ldr	r3, [r7, #8]
 8012c08:	425b      	negs	r3, r3
 8012c0a:	4413      	add	r3, r2
 8012c0c:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8012c0e:	68fb      	ldr	r3, [r7, #12]
 8012c10:	3310      	adds	r3, #16
 8012c12:	697a      	ldr	r2, [r7, #20]
 8012c14:	429a      	cmp	r2, r3
 8012c16:	d20d      	bcs.n	8012c34 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8012c18:	2301      	movs	r3, #1
 8012c1a:	e01d      	b.n	8012c58 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8012c1c:	79fb      	ldrb	r3, [r7, #7]
 8012c1e:	2b00      	cmp	r3, #0
 8012c20:	d006      	beq.n	8012c30 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8012c22:	68fb      	ldr	r3, [r7, #12]
 8012c24:	685a      	ldr	r2, [r3, #4]
 8012c26:	68bb      	ldr	r3, [r7, #8]
 8012c28:	425b      	negs	r3, r3
 8012c2a:	4413      	add	r3, r2
 8012c2c:	617b      	str	r3, [r7, #20]
 8012c2e:	e001      	b.n	8012c34 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8012c30:	2301      	movs	r3, #1
 8012c32:	e011      	b.n	8012c58 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8012c34:	68fb      	ldr	r3, [r7, #12]
 8012c36:	697a      	ldr	r2, [r7, #20]
 8012c38:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8012c3a:	68fb      	ldr	r3, [r7, #12]
 8012c3c:	895a      	ldrh	r2, [r3, #10]
 8012c3e:	8a7b      	ldrh	r3, [r7, #18]
 8012c40:	4413      	add	r3, r2
 8012c42:	b29a      	uxth	r2, r3
 8012c44:	68fb      	ldr	r3, [r7, #12]
 8012c46:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8012c48:	68fb      	ldr	r3, [r7, #12]
 8012c4a:	891a      	ldrh	r2, [r3, #8]
 8012c4c:	8a7b      	ldrh	r3, [r7, #18]
 8012c4e:	4413      	add	r3, r2
 8012c50:	b29a      	uxth	r2, r3
 8012c52:	68fb      	ldr	r3, [r7, #12]
 8012c54:	811a      	strh	r2, [r3, #8]


  return 0;
 8012c56:	2300      	movs	r3, #0
}
 8012c58:	4618      	mov	r0, r3
 8012c5a:	3718      	adds	r7, #24
 8012c5c:	46bd      	mov	sp, r7
 8012c5e:	bd80      	pop	{r7, pc}
 8012c60:	08024724 	.word	0x08024724
 8012c64:	08024888 	.word	0x08024888
 8012c68:	08024784 	.word	0x08024784

08012c6c <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8012c6c:	b580      	push	{r7, lr}
 8012c6e:	b082      	sub	sp, #8
 8012c70:	af00      	add	r7, sp, #0
 8012c72:	6078      	str	r0, [r7, #4]
 8012c74:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8012c76:	2200      	movs	r2, #0
 8012c78:	6839      	ldr	r1, [r7, #0]
 8012c7a:	6878      	ldr	r0, [r7, #4]
 8012c7c:	f7ff ff8e 	bl	8012b9c <pbuf_add_header_impl>
 8012c80:	4603      	mov	r3, r0
}
 8012c82:	4618      	mov	r0, r3
 8012c84:	3708      	adds	r7, #8
 8012c86:	46bd      	mov	sp, r7
 8012c88:	bd80      	pop	{r7, pc}
	...

08012c8c <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8012c8c:	b580      	push	{r7, lr}
 8012c8e:	b084      	sub	sp, #16
 8012c90:	af00      	add	r7, sp, #0
 8012c92:	6078      	str	r0, [r7, #4]
 8012c94:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8012c96:	687b      	ldr	r3, [r7, #4]
 8012c98:	2b00      	cmp	r3, #0
 8012c9a:	d106      	bne.n	8012caa <pbuf_remove_header+0x1e>
 8012c9c:	4b20      	ldr	r3, [pc, #128]	; (8012d20 <pbuf_remove_header+0x94>)
 8012c9e:	f240 224b 	movw	r2, #587	; 0x24b
 8012ca2:	4920      	ldr	r1, [pc, #128]	; (8012d24 <pbuf_remove_header+0x98>)
 8012ca4:	4820      	ldr	r0, [pc, #128]	; (8012d28 <pbuf_remove_header+0x9c>)
 8012ca6:	f00d fbd3 	bl	8020450 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8012caa:	687b      	ldr	r3, [r7, #4]
 8012cac:	2b00      	cmp	r3, #0
 8012cae:	d003      	beq.n	8012cb8 <pbuf_remove_header+0x2c>
 8012cb0:	683b      	ldr	r3, [r7, #0]
 8012cb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012cb6:	d301      	bcc.n	8012cbc <pbuf_remove_header+0x30>
    return 1;
 8012cb8:	2301      	movs	r3, #1
 8012cba:	e02c      	b.n	8012d16 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8012cbc:	683b      	ldr	r3, [r7, #0]
 8012cbe:	2b00      	cmp	r3, #0
 8012cc0:	d101      	bne.n	8012cc6 <pbuf_remove_header+0x3a>
    return 0;
 8012cc2:	2300      	movs	r3, #0
 8012cc4:	e027      	b.n	8012d16 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8012cc6:	683b      	ldr	r3, [r7, #0]
 8012cc8:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8012cca:	687b      	ldr	r3, [r7, #4]
 8012ccc:	895b      	ldrh	r3, [r3, #10]
 8012cce:	89fa      	ldrh	r2, [r7, #14]
 8012cd0:	429a      	cmp	r2, r3
 8012cd2:	d908      	bls.n	8012ce6 <pbuf_remove_header+0x5a>
 8012cd4:	4b12      	ldr	r3, [pc, #72]	; (8012d20 <pbuf_remove_header+0x94>)
 8012cd6:	f240 2255 	movw	r2, #597	; 0x255
 8012cda:	4914      	ldr	r1, [pc, #80]	; (8012d2c <pbuf_remove_header+0xa0>)
 8012cdc:	4812      	ldr	r0, [pc, #72]	; (8012d28 <pbuf_remove_header+0x9c>)
 8012cde:	f00d fbb7 	bl	8020450 <iprintf>
 8012ce2:	2301      	movs	r3, #1
 8012ce4:	e017      	b.n	8012d16 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8012ce6:	687b      	ldr	r3, [r7, #4]
 8012ce8:	685b      	ldr	r3, [r3, #4]
 8012cea:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8012cec:	687b      	ldr	r3, [r7, #4]
 8012cee:	685a      	ldr	r2, [r3, #4]
 8012cf0:	683b      	ldr	r3, [r7, #0]
 8012cf2:	441a      	add	r2, r3
 8012cf4:	687b      	ldr	r3, [r7, #4]
 8012cf6:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8012cf8:	687b      	ldr	r3, [r7, #4]
 8012cfa:	895a      	ldrh	r2, [r3, #10]
 8012cfc:	89fb      	ldrh	r3, [r7, #14]
 8012cfe:	1ad3      	subs	r3, r2, r3
 8012d00:	b29a      	uxth	r2, r3
 8012d02:	687b      	ldr	r3, [r7, #4]
 8012d04:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8012d06:	687b      	ldr	r3, [r7, #4]
 8012d08:	891a      	ldrh	r2, [r3, #8]
 8012d0a:	89fb      	ldrh	r3, [r7, #14]
 8012d0c:	1ad3      	subs	r3, r2, r3
 8012d0e:	b29a      	uxth	r2, r3
 8012d10:	687b      	ldr	r3, [r7, #4]
 8012d12:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8012d14:	2300      	movs	r3, #0
}
 8012d16:	4618      	mov	r0, r3
 8012d18:	3710      	adds	r7, #16
 8012d1a:	46bd      	mov	sp, r7
 8012d1c:	bd80      	pop	{r7, pc}
 8012d1e:	bf00      	nop
 8012d20:	08024724 	.word	0x08024724
 8012d24:	08024888 	.word	0x08024888
 8012d28:	08024784 	.word	0x08024784
 8012d2c:	08024894 	.word	0x08024894

08012d30 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8012d30:	b580      	push	{r7, lr}
 8012d32:	b082      	sub	sp, #8
 8012d34:	af00      	add	r7, sp, #0
 8012d36:	6078      	str	r0, [r7, #4]
 8012d38:	460b      	mov	r3, r1
 8012d3a:	807b      	strh	r3, [r7, #2]
 8012d3c:	4613      	mov	r3, r2
 8012d3e:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8012d40:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8012d44:	2b00      	cmp	r3, #0
 8012d46:	da08      	bge.n	8012d5a <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8012d48:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8012d4c:	425b      	negs	r3, r3
 8012d4e:	4619      	mov	r1, r3
 8012d50:	6878      	ldr	r0, [r7, #4]
 8012d52:	f7ff ff9b 	bl	8012c8c <pbuf_remove_header>
 8012d56:	4603      	mov	r3, r0
 8012d58:	e007      	b.n	8012d6a <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8012d5a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8012d5e:	787a      	ldrb	r2, [r7, #1]
 8012d60:	4619      	mov	r1, r3
 8012d62:	6878      	ldr	r0, [r7, #4]
 8012d64:	f7ff ff1a 	bl	8012b9c <pbuf_add_header_impl>
 8012d68:	4603      	mov	r3, r0
  }
}
 8012d6a:	4618      	mov	r0, r3
 8012d6c:	3708      	adds	r7, #8
 8012d6e:	46bd      	mov	sp, r7
 8012d70:	bd80      	pop	{r7, pc}

08012d72 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8012d72:	b580      	push	{r7, lr}
 8012d74:	b082      	sub	sp, #8
 8012d76:	af00      	add	r7, sp, #0
 8012d78:	6078      	str	r0, [r7, #4]
 8012d7a:	460b      	mov	r3, r1
 8012d7c:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8012d7e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8012d82:	2201      	movs	r2, #1
 8012d84:	4619      	mov	r1, r3
 8012d86:	6878      	ldr	r0, [r7, #4]
 8012d88:	f7ff ffd2 	bl	8012d30 <pbuf_header_impl>
 8012d8c:	4603      	mov	r3, r0
}
 8012d8e:	4618      	mov	r0, r3
 8012d90:	3708      	adds	r7, #8
 8012d92:	46bd      	mov	sp, r7
 8012d94:	bd80      	pop	{r7, pc}

08012d96 <pbuf_free_header>:
 *                   takes an u16_t not s16_t!
 * @return the new head pbuf
 */
struct pbuf *
pbuf_free_header(struct pbuf *q, u16_t size)
{
 8012d96:	b580      	push	{r7, lr}
 8012d98:	b086      	sub	sp, #24
 8012d9a:	af00      	add	r7, sp, #0
 8012d9c:	6078      	str	r0, [r7, #4]
 8012d9e:	460b      	mov	r3, r1
 8012da0:	807b      	strh	r3, [r7, #2]
  struct pbuf *p = q;
 8012da2:	687b      	ldr	r3, [r7, #4]
 8012da4:	617b      	str	r3, [r7, #20]
  u16_t free_left = size;
 8012da6:	887b      	ldrh	r3, [r7, #2]
 8012da8:	827b      	strh	r3, [r7, #18]
  while (free_left && p) {
 8012daa:	e01c      	b.n	8012de6 <pbuf_free_header+0x50>
    if (free_left >= p->len) {
 8012dac:	697b      	ldr	r3, [r7, #20]
 8012dae:	895b      	ldrh	r3, [r3, #10]
 8012db0:	8a7a      	ldrh	r2, [r7, #18]
 8012db2:	429a      	cmp	r2, r3
 8012db4:	d310      	bcc.n	8012dd8 <pbuf_free_header+0x42>
      struct pbuf *f = p;
 8012db6:	697b      	ldr	r3, [r7, #20]
 8012db8:	60fb      	str	r3, [r7, #12]
      free_left = (u16_t)(free_left - p->len);
 8012dba:	697b      	ldr	r3, [r7, #20]
 8012dbc:	895b      	ldrh	r3, [r3, #10]
 8012dbe:	8a7a      	ldrh	r2, [r7, #18]
 8012dc0:	1ad3      	subs	r3, r2, r3
 8012dc2:	827b      	strh	r3, [r7, #18]
      p = p->next;
 8012dc4:	697b      	ldr	r3, [r7, #20]
 8012dc6:	681b      	ldr	r3, [r3, #0]
 8012dc8:	617b      	str	r3, [r7, #20]
      f->next = 0;
 8012dca:	68fb      	ldr	r3, [r7, #12]
 8012dcc:	2200      	movs	r2, #0
 8012dce:	601a      	str	r2, [r3, #0]
      pbuf_free(f);
 8012dd0:	68f8      	ldr	r0, [r7, #12]
 8012dd2:	f000 f813 	bl	8012dfc <pbuf_free>
 8012dd6:	e006      	b.n	8012de6 <pbuf_free_header+0x50>
    } else {
      pbuf_remove_header(p, free_left);
 8012dd8:	8a7b      	ldrh	r3, [r7, #18]
 8012dda:	4619      	mov	r1, r3
 8012ddc:	6978      	ldr	r0, [r7, #20]
 8012dde:	f7ff ff55 	bl	8012c8c <pbuf_remove_header>
      free_left = 0;
 8012de2:	2300      	movs	r3, #0
 8012de4:	827b      	strh	r3, [r7, #18]
  while (free_left && p) {
 8012de6:	8a7b      	ldrh	r3, [r7, #18]
 8012de8:	2b00      	cmp	r3, #0
 8012dea:	d002      	beq.n	8012df2 <pbuf_free_header+0x5c>
 8012dec:	697b      	ldr	r3, [r7, #20]
 8012dee:	2b00      	cmp	r3, #0
 8012df0:	d1dc      	bne.n	8012dac <pbuf_free_header+0x16>
    }
  }
  return p;
 8012df2:	697b      	ldr	r3, [r7, #20]
}
 8012df4:	4618      	mov	r0, r3
 8012df6:	3718      	adds	r7, #24
 8012df8:	46bd      	mov	sp, r7
 8012dfa:	bd80      	pop	{r7, pc}

08012dfc <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8012dfc:	b580      	push	{r7, lr}
 8012dfe:	b088      	sub	sp, #32
 8012e00:	af00      	add	r7, sp, #0
 8012e02:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8012e04:	687b      	ldr	r3, [r7, #4]
 8012e06:	2b00      	cmp	r3, #0
 8012e08:	d10b      	bne.n	8012e22 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8012e0a:	687b      	ldr	r3, [r7, #4]
 8012e0c:	2b00      	cmp	r3, #0
 8012e0e:	d106      	bne.n	8012e1e <pbuf_free+0x22>
 8012e10:	4b3b      	ldr	r3, [pc, #236]	; (8012f00 <pbuf_free+0x104>)
 8012e12:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8012e16:	493b      	ldr	r1, [pc, #236]	; (8012f04 <pbuf_free+0x108>)
 8012e18:	483b      	ldr	r0, [pc, #236]	; (8012f08 <pbuf_free+0x10c>)
 8012e1a:	f00d fb19 	bl	8020450 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8012e1e:	2300      	movs	r3, #0
 8012e20:	e069      	b.n	8012ef6 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8012e22:	2300      	movs	r3, #0
 8012e24:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8012e26:	e062      	b.n	8012eee <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 8012e28:	f00b fd50 	bl	801e8cc <sys_arch_protect>
 8012e2c:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8012e2e:	687b      	ldr	r3, [r7, #4]
 8012e30:	7b9b      	ldrb	r3, [r3, #14]
 8012e32:	2b00      	cmp	r3, #0
 8012e34:	d106      	bne.n	8012e44 <pbuf_free+0x48>
 8012e36:	4b32      	ldr	r3, [pc, #200]	; (8012f00 <pbuf_free+0x104>)
 8012e38:	f240 22f1 	movw	r2, #753	; 0x2f1
 8012e3c:	4933      	ldr	r1, [pc, #204]	; (8012f0c <pbuf_free+0x110>)
 8012e3e:	4832      	ldr	r0, [pc, #200]	; (8012f08 <pbuf_free+0x10c>)
 8012e40:	f00d fb06 	bl	8020450 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8012e44:	687b      	ldr	r3, [r7, #4]
 8012e46:	7b9b      	ldrb	r3, [r3, #14]
 8012e48:	3b01      	subs	r3, #1
 8012e4a:	b2da      	uxtb	r2, r3
 8012e4c:	687b      	ldr	r3, [r7, #4]
 8012e4e:	739a      	strb	r2, [r3, #14]
 8012e50:	687b      	ldr	r3, [r7, #4]
 8012e52:	7b9b      	ldrb	r3, [r3, #14]
 8012e54:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 8012e56:	69b8      	ldr	r0, [r7, #24]
 8012e58:	f00b fd46 	bl	801e8e8 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8012e5c:	7dfb      	ldrb	r3, [r7, #23]
 8012e5e:	2b00      	cmp	r3, #0
 8012e60:	d143      	bne.n	8012eea <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8012e62:	687b      	ldr	r3, [r7, #4]
 8012e64:	681b      	ldr	r3, [r3, #0]
 8012e66:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8012e68:	687b      	ldr	r3, [r7, #4]
 8012e6a:	7b1b      	ldrb	r3, [r3, #12]
 8012e6c:	f003 030f 	and.w	r3, r3, #15
 8012e70:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8012e72:	687b      	ldr	r3, [r7, #4]
 8012e74:	7b5b      	ldrb	r3, [r3, #13]
 8012e76:	f003 0302 	and.w	r3, r3, #2
 8012e7a:	2b00      	cmp	r3, #0
 8012e7c:	d011      	beq.n	8012ea2 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8012e7e:	687b      	ldr	r3, [r7, #4]
 8012e80:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8012e82:	68bb      	ldr	r3, [r7, #8]
 8012e84:	691b      	ldr	r3, [r3, #16]
 8012e86:	2b00      	cmp	r3, #0
 8012e88:	d106      	bne.n	8012e98 <pbuf_free+0x9c>
 8012e8a:	4b1d      	ldr	r3, [pc, #116]	; (8012f00 <pbuf_free+0x104>)
 8012e8c:	f240 22ff 	movw	r2, #767	; 0x2ff
 8012e90:	491f      	ldr	r1, [pc, #124]	; (8012f10 <pbuf_free+0x114>)
 8012e92:	481d      	ldr	r0, [pc, #116]	; (8012f08 <pbuf_free+0x10c>)
 8012e94:	f00d fadc 	bl	8020450 <iprintf>
        pc->custom_free_function(p);
 8012e98:	68bb      	ldr	r3, [r7, #8]
 8012e9a:	691b      	ldr	r3, [r3, #16]
 8012e9c:	6878      	ldr	r0, [r7, #4]
 8012e9e:	4798      	blx	r3
 8012ea0:	e01d      	b.n	8012ede <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8012ea2:	7bfb      	ldrb	r3, [r7, #15]
 8012ea4:	2b02      	cmp	r3, #2
 8012ea6:	d104      	bne.n	8012eb2 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 8012ea8:	6879      	ldr	r1, [r7, #4]
 8012eaa:	200c      	movs	r0, #12
 8012eac:	f7ff f8c4 	bl	8012038 <memp_free>
 8012eb0:	e015      	b.n	8012ede <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8012eb2:	7bfb      	ldrb	r3, [r7, #15]
 8012eb4:	2b01      	cmp	r3, #1
 8012eb6:	d104      	bne.n	8012ec2 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 8012eb8:	6879      	ldr	r1, [r7, #4]
 8012eba:	200b      	movs	r0, #11
 8012ebc:	f7ff f8bc 	bl	8012038 <memp_free>
 8012ec0:	e00d      	b.n	8012ede <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8012ec2:	7bfb      	ldrb	r3, [r7, #15]
 8012ec4:	2b00      	cmp	r3, #0
 8012ec6:	d103      	bne.n	8012ed0 <pbuf_free+0xd4>
          mem_free(p);
 8012ec8:	6878      	ldr	r0, [r7, #4]
 8012eca:	f7fe fd01 	bl	80118d0 <mem_free>
 8012ece:	e006      	b.n	8012ede <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8012ed0:	4b0b      	ldr	r3, [pc, #44]	; (8012f00 <pbuf_free+0x104>)
 8012ed2:	f240 320f 	movw	r2, #783	; 0x30f
 8012ed6:	490f      	ldr	r1, [pc, #60]	; (8012f14 <pbuf_free+0x118>)
 8012ed8:	480b      	ldr	r0, [pc, #44]	; (8012f08 <pbuf_free+0x10c>)
 8012eda:	f00d fab9 	bl	8020450 <iprintf>
        }
      }
      count++;
 8012ede:	7ffb      	ldrb	r3, [r7, #31]
 8012ee0:	3301      	adds	r3, #1
 8012ee2:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 8012ee4:	693b      	ldr	r3, [r7, #16]
 8012ee6:	607b      	str	r3, [r7, #4]
 8012ee8:	e001      	b.n	8012eee <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8012eea:	2300      	movs	r3, #0
 8012eec:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8012eee:	687b      	ldr	r3, [r7, #4]
 8012ef0:	2b00      	cmp	r3, #0
 8012ef2:	d199      	bne.n	8012e28 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8012ef4:	7ffb      	ldrb	r3, [r7, #31]
}
 8012ef6:	4618      	mov	r0, r3
 8012ef8:	3720      	adds	r7, #32
 8012efa:	46bd      	mov	sp, r7
 8012efc:	bd80      	pop	{r7, pc}
 8012efe:	bf00      	nop
 8012f00:	08024724 	.word	0x08024724
 8012f04:	08024888 	.word	0x08024888
 8012f08:	08024784 	.word	0x08024784
 8012f0c:	080248b4 	.word	0x080248b4
 8012f10:	080248cc 	.word	0x080248cc
 8012f14:	080248f0 	.word	0x080248f0

08012f18 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8012f18:	b480      	push	{r7}
 8012f1a:	b085      	sub	sp, #20
 8012f1c:	af00      	add	r7, sp, #0
 8012f1e:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8012f20:	2300      	movs	r3, #0
 8012f22:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8012f24:	e005      	b.n	8012f32 <pbuf_clen+0x1a>
    ++len;
 8012f26:	89fb      	ldrh	r3, [r7, #14]
 8012f28:	3301      	adds	r3, #1
 8012f2a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8012f2c:	687b      	ldr	r3, [r7, #4]
 8012f2e:	681b      	ldr	r3, [r3, #0]
 8012f30:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8012f32:	687b      	ldr	r3, [r7, #4]
 8012f34:	2b00      	cmp	r3, #0
 8012f36:	d1f6      	bne.n	8012f26 <pbuf_clen+0xe>
  }
  return len;
 8012f38:	89fb      	ldrh	r3, [r7, #14]
}
 8012f3a:	4618      	mov	r0, r3
 8012f3c:	3714      	adds	r7, #20
 8012f3e:	46bd      	mov	sp, r7
 8012f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f44:	4770      	bx	lr
	...

08012f48 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8012f48:	b580      	push	{r7, lr}
 8012f4a:	b084      	sub	sp, #16
 8012f4c:	af00      	add	r7, sp, #0
 8012f4e:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8012f50:	687b      	ldr	r3, [r7, #4]
 8012f52:	2b00      	cmp	r3, #0
 8012f54:	d016      	beq.n	8012f84 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8012f56:	f00b fcb9 	bl	801e8cc <sys_arch_protect>
 8012f5a:	60f8      	str	r0, [r7, #12]
 8012f5c:	687b      	ldr	r3, [r7, #4]
 8012f5e:	7b9b      	ldrb	r3, [r3, #14]
 8012f60:	3301      	adds	r3, #1
 8012f62:	b2da      	uxtb	r2, r3
 8012f64:	687b      	ldr	r3, [r7, #4]
 8012f66:	739a      	strb	r2, [r3, #14]
 8012f68:	68f8      	ldr	r0, [r7, #12]
 8012f6a:	f00b fcbd 	bl	801e8e8 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8012f6e:	687b      	ldr	r3, [r7, #4]
 8012f70:	7b9b      	ldrb	r3, [r3, #14]
 8012f72:	2b00      	cmp	r3, #0
 8012f74:	d106      	bne.n	8012f84 <pbuf_ref+0x3c>
 8012f76:	4b05      	ldr	r3, [pc, #20]	; (8012f8c <pbuf_ref+0x44>)
 8012f78:	f240 3242 	movw	r2, #834	; 0x342
 8012f7c:	4904      	ldr	r1, [pc, #16]	; (8012f90 <pbuf_ref+0x48>)
 8012f7e:	4805      	ldr	r0, [pc, #20]	; (8012f94 <pbuf_ref+0x4c>)
 8012f80:	f00d fa66 	bl	8020450 <iprintf>
  }
}
 8012f84:	bf00      	nop
 8012f86:	3710      	adds	r7, #16
 8012f88:	46bd      	mov	sp, r7
 8012f8a:	bd80      	pop	{r7, pc}
 8012f8c:	08024724 	.word	0x08024724
 8012f90:	08024904 	.word	0x08024904
 8012f94:	08024784 	.word	0x08024784

08012f98 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8012f98:	b580      	push	{r7, lr}
 8012f9a:	b084      	sub	sp, #16
 8012f9c:	af00      	add	r7, sp, #0
 8012f9e:	6078      	str	r0, [r7, #4]
 8012fa0:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8012fa2:	687b      	ldr	r3, [r7, #4]
 8012fa4:	2b00      	cmp	r3, #0
 8012fa6:	d002      	beq.n	8012fae <pbuf_cat+0x16>
 8012fa8:	683b      	ldr	r3, [r7, #0]
 8012faa:	2b00      	cmp	r3, #0
 8012fac:	d107      	bne.n	8012fbe <pbuf_cat+0x26>
 8012fae:	4b20      	ldr	r3, [pc, #128]	; (8013030 <pbuf_cat+0x98>)
 8012fb0:	f240 3259 	movw	r2, #857	; 0x359
 8012fb4:	491f      	ldr	r1, [pc, #124]	; (8013034 <pbuf_cat+0x9c>)
 8012fb6:	4820      	ldr	r0, [pc, #128]	; (8013038 <pbuf_cat+0xa0>)
 8012fb8:	f00d fa4a 	bl	8020450 <iprintf>
 8012fbc:	e034      	b.n	8013028 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8012fbe:	687b      	ldr	r3, [r7, #4]
 8012fc0:	60fb      	str	r3, [r7, #12]
 8012fc2:	e00a      	b.n	8012fda <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8012fc4:	68fb      	ldr	r3, [r7, #12]
 8012fc6:	891a      	ldrh	r2, [r3, #8]
 8012fc8:	683b      	ldr	r3, [r7, #0]
 8012fca:	891b      	ldrh	r3, [r3, #8]
 8012fcc:	4413      	add	r3, r2
 8012fce:	b29a      	uxth	r2, r3
 8012fd0:	68fb      	ldr	r3, [r7, #12]
 8012fd2:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8012fd4:	68fb      	ldr	r3, [r7, #12]
 8012fd6:	681b      	ldr	r3, [r3, #0]
 8012fd8:	60fb      	str	r3, [r7, #12]
 8012fda:	68fb      	ldr	r3, [r7, #12]
 8012fdc:	681b      	ldr	r3, [r3, #0]
 8012fde:	2b00      	cmp	r3, #0
 8012fe0:	d1f0      	bne.n	8012fc4 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8012fe2:	68fb      	ldr	r3, [r7, #12]
 8012fe4:	891a      	ldrh	r2, [r3, #8]
 8012fe6:	68fb      	ldr	r3, [r7, #12]
 8012fe8:	895b      	ldrh	r3, [r3, #10]
 8012fea:	429a      	cmp	r2, r3
 8012fec:	d006      	beq.n	8012ffc <pbuf_cat+0x64>
 8012fee:	4b10      	ldr	r3, [pc, #64]	; (8013030 <pbuf_cat+0x98>)
 8012ff0:	f240 3262 	movw	r2, #866	; 0x362
 8012ff4:	4911      	ldr	r1, [pc, #68]	; (801303c <pbuf_cat+0xa4>)
 8012ff6:	4810      	ldr	r0, [pc, #64]	; (8013038 <pbuf_cat+0xa0>)
 8012ff8:	f00d fa2a 	bl	8020450 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8012ffc:	68fb      	ldr	r3, [r7, #12]
 8012ffe:	681b      	ldr	r3, [r3, #0]
 8013000:	2b00      	cmp	r3, #0
 8013002:	d006      	beq.n	8013012 <pbuf_cat+0x7a>
 8013004:	4b0a      	ldr	r3, [pc, #40]	; (8013030 <pbuf_cat+0x98>)
 8013006:	f240 3263 	movw	r2, #867	; 0x363
 801300a:	490d      	ldr	r1, [pc, #52]	; (8013040 <pbuf_cat+0xa8>)
 801300c:	480a      	ldr	r0, [pc, #40]	; (8013038 <pbuf_cat+0xa0>)
 801300e:	f00d fa1f 	bl	8020450 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8013012:	68fb      	ldr	r3, [r7, #12]
 8013014:	891a      	ldrh	r2, [r3, #8]
 8013016:	683b      	ldr	r3, [r7, #0]
 8013018:	891b      	ldrh	r3, [r3, #8]
 801301a:	4413      	add	r3, r2
 801301c:	b29a      	uxth	r2, r3
 801301e:	68fb      	ldr	r3, [r7, #12]
 8013020:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8013022:	68fb      	ldr	r3, [r7, #12]
 8013024:	683a      	ldr	r2, [r7, #0]
 8013026:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8013028:	3710      	adds	r7, #16
 801302a:	46bd      	mov	sp, r7
 801302c:	bd80      	pop	{r7, pc}
 801302e:	bf00      	nop
 8013030:	08024724 	.word	0x08024724
 8013034:	08024918 	.word	0x08024918
 8013038:	08024784 	.word	0x08024784
 801303c:	08024950 	.word	0x08024950
 8013040:	08024980 	.word	0x08024980

08013044 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8013044:	b580      	push	{r7, lr}
 8013046:	b082      	sub	sp, #8
 8013048:	af00      	add	r7, sp, #0
 801304a:	6078      	str	r0, [r7, #4]
 801304c:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 801304e:	6839      	ldr	r1, [r7, #0]
 8013050:	6878      	ldr	r0, [r7, #4]
 8013052:	f7ff ffa1 	bl	8012f98 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8013056:	6838      	ldr	r0, [r7, #0]
 8013058:	f7ff ff76 	bl	8012f48 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 801305c:	bf00      	nop
 801305e:	3708      	adds	r7, #8
 8013060:	46bd      	mov	sp, r7
 8013062:	bd80      	pop	{r7, pc}

08013064 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8013064:	b580      	push	{r7, lr}
 8013066:	b086      	sub	sp, #24
 8013068:	af00      	add	r7, sp, #0
 801306a:	6078      	str	r0, [r7, #4]
 801306c:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 801306e:	2300      	movs	r3, #0
 8013070:	617b      	str	r3, [r7, #20]
 8013072:	2300      	movs	r3, #0
 8013074:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8013076:	687b      	ldr	r3, [r7, #4]
 8013078:	2b00      	cmp	r3, #0
 801307a:	d008      	beq.n	801308e <pbuf_copy+0x2a>
 801307c:	683b      	ldr	r3, [r7, #0]
 801307e:	2b00      	cmp	r3, #0
 8013080:	d005      	beq.n	801308e <pbuf_copy+0x2a>
 8013082:	687b      	ldr	r3, [r7, #4]
 8013084:	891a      	ldrh	r2, [r3, #8]
 8013086:	683b      	ldr	r3, [r7, #0]
 8013088:	891b      	ldrh	r3, [r3, #8]
 801308a:	429a      	cmp	r2, r3
 801308c:	d209      	bcs.n	80130a2 <pbuf_copy+0x3e>
 801308e:	4b57      	ldr	r3, [pc, #348]	; (80131ec <pbuf_copy+0x188>)
 8013090:	f240 32c9 	movw	r2, #969	; 0x3c9
 8013094:	4956      	ldr	r1, [pc, #344]	; (80131f0 <pbuf_copy+0x18c>)
 8013096:	4857      	ldr	r0, [pc, #348]	; (80131f4 <pbuf_copy+0x190>)
 8013098:	f00d f9da 	bl	8020450 <iprintf>
 801309c:	f06f 030f 	mvn.w	r3, #15
 80130a0:	e09f      	b.n	80131e2 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80130a2:	687b      	ldr	r3, [r7, #4]
 80130a4:	895b      	ldrh	r3, [r3, #10]
 80130a6:	461a      	mov	r2, r3
 80130a8:	697b      	ldr	r3, [r7, #20]
 80130aa:	1ad2      	subs	r2, r2, r3
 80130ac:	683b      	ldr	r3, [r7, #0]
 80130ae:	895b      	ldrh	r3, [r3, #10]
 80130b0:	4619      	mov	r1, r3
 80130b2:	693b      	ldr	r3, [r7, #16]
 80130b4:	1acb      	subs	r3, r1, r3
 80130b6:	429a      	cmp	r2, r3
 80130b8:	d306      	bcc.n	80130c8 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 80130ba:	683b      	ldr	r3, [r7, #0]
 80130bc:	895b      	ldrh	r3, [r3, #10]
 80130be:	461a      	mov	r2, r3
 80130c0:	693b      	ldr	r3, [r7, #16]
 80130c2:	1ad3      	subs	r3, r2, r3
 80130c4:	60fb      	str	r3, [r7, #12]
 80130c6:	e005      	b.n	80130d4 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 80130c8:	687b      	ldr	r3, [r7, #4]
 80130ca:	895b      	ldrh	r3, [r3, #10]
 80130cc:	461a      	mov	r2, r3
 80130ce:	697b      	ldr	r3, [r7, #20]
 80130d0:	1ad3      	subs	r3, r2, r3
 80130d2:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 80130d4:	687b      	ldr	r3, [r7, #4]
 80130d6:	685a      	ldr	r2, [r3, #4]
 80130d8:	697b      	ldr	r3, [r7, #20]
 80130da:	18d0      	adds	r0, r2, r3
 80130dc:	683b      	ldr	r3, [r7, #0]
 80130de:	685a      	ldr	r2, [r3, #4]
 80130e0:	693b      	ldr	r3, [r7, #16]
 80130e2:	4413      	add	r3, r2
 80130e4:	68fa      	ldr	r2, [r7, #12]
 80130e6:	4619      	mov	r1, r3
 80130e8:	f00d fae3 	bl	80206b2 <memcpy>
    offset_to += len;
 80130ec:	697a      	ldr	r2, [r7, #20]
 80130ee:	68fb      	ldr	r3, [r7, #12]
 80130f0:	4413      	add	r3, r2
 80130f2:	617b      	str	r3, [r7, #20]
    offset_from += len;
 80130f4:	693a      	ldr	r2, [r7, #16]
 80130f6:	68fb      	ldr	r3, [r7, #12]
 80130f8:	4413      	add	r3, r2
 80130fa:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80130fc:	687b      	ldr	r3, [r7, #4]
 80130fe:	895b      	ldrh	r3, [r3, #10]
 8013100:	461a      	mov	r2, r3
 8013102:	697b      	ldr	r3, [r7, #20]
 8013104:	4293      	cmp	r3, r2
 8013106:	d906      	bls.n	8013116 <pbuf_copy+0xb2>
 8013108:	4b38      	ldr	r3, [pc, #224]	; (80131ec <pbuf_copy+0x188>)
 801310a:	f240 32d9 	movw	r2, #985	; 0x3d9
 801310e:	493a      	ldr	r1, [pc, #232]	; (80131f8 <pbuf_copy+0x194>)
 8013110:	4838      	ldr	r0, [pc, #224]	; (80131f4 <pbuf_copy+0x190>)
 8013112:	f00d f99d 	bl	8020450 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8013116:	683b      	ldr	r3, [r7, #0]
 8013118:	895b      	ldrh	r3, [r3, #10]
 801311a:	461a      	mov	r2, r3
 801311c:	693b      	ldr	r3, [r7, #16]
 801311e:	4293      	cmp	r3, r2
 8013120:	d906      	bls.n	8013130 <pbuf_copy+0xcc>
 8013122:	4b32      	ldr	r3, [pc, #200]	; (80131ec <pbuf_copy+0x188>)
 8013124:	f240 32da 	movw	r2, #986	; 0x3da
 8013128:	4934      	ldr	r1, [pc, #208]	; (80131fc <pbuf_copy+0x198>)
 801312a:	4832      	ldr	r0, [pc, #200]	; (80131f4 <pbuf_copy+0x190>)
 801312c:	f00d f990 	bl	8020450 <iprintf>
    if (offset_from >= p_from->len) {
 8013130:	683b      	ldr	r3, [r7, #0]
 8013132:	895b      	ldrh	r3, [r3, #10]
 8013134:	461a      	mov	r2, r3
 8013136:	693b      	ldr	r3, [r7, #16]
 8013138:	4293      	cmp	r3, r2
 801313a:	d304      	bcc.n	8013146 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 801313c:	2300      	movs	r3, #0
 801313e:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8013140:	683b      	ldr	r3, [r7, #0]
 8013142:	681b      	ldr	r3, [r3, #0]
 8013144:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8013146:	687b      	ldr	r3, [r7, #4]
 8013148:	895b      	ldrh	r3, [r3, #10]
 801314a:	461a      	mov	r2, r3
 801314c:	697b      	ldr	r3, [r7, #20]
 801314e:	4293      	cmp	r3, r2
 8013150:	d114      	bne.n	801317c <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8013152:	2300      	movs	r3, #0
 8013154:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8013156:	687b      	ldr	r3, [r7, #4]
 8013158:	681b      	ldr	r3, [r3, #0]
 801315a:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 801315c:	687b      	ldr	r3, [r7, #4]
 801315e:	2b00      	cmp	r3, #0
 8013160:	d10c      	bne.n	801317c <pbuf_copy+0x118>
 8013162:	683b      	ldr	r3, [r7, #0]
 8013164:	2b00      	cmp	r3, #0
 8013166:	d009      	beq.n	801317c <pbuf_copy+0x118>
 8013168:	4b20      	ldr	r3, [pc, #128]	; (80131ec <pbuf_copy+0x188>)
 801316a:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 801316e:	4924      	ldr	r1, [pc, #144]	; (8013200 <pbuf_copy+0x19c>)
 8013170:	4820      	ldr	r0, [pc, #128]	; (80131f4 <pbuf_copy+0x190>)
 8013172:	f00d f96d 	bl	8020450 <iprintf>
 8013176:	f06f 030f 	mvn.w	r3, #15
 801317a:	e032      	b.n	80131e2 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 801317c:	683b      	ldr	r3, [r7, #0]
 801317e:	2b00      	cmp	r3, #0
 8013180:	d013      	beq.n	80131aa <pbuf_copy+0x146>
 8013182:	683b      	ldr	r3, [r7, #0]
 8013184:	895a      	ldrh	r2, [r3, #10]
 8013186:	683b      	ldr	r3, [r7, #0]
 8013188:	891b      	ldrh	r3, [r3, #8]
 801318a:	429a      	cmp	r2, r3
 801318c:	d10d      	bne.n	80131aa <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 801318e:	683b      	ldr	r3, [r7, #0]
 8013190:	681b      	ldr	r3, [r3, #0]
 8013192:	2b00      	cmp	r3, #0
 8013194:	d009      	beq.n	80131aa <pbuf_copy+0x146>
 8013196:	4b15      	ldr	r3, [pc, #84]	; (80131ec <pbuf_copy+0x188>)
 8013198:	f240 32e9 	movw	r2, #1001	; 0x3e9
 801319c:	4919      	ldr	r1, [pc, #100]	; (8013204 <pbuf_copy+0x1a0>)
 801319e:	4815      	ldr	r0, [pc, #84]	; (80131f4 <pbuf_copy+0x190>)
 80131a0:	f00d f956 	bl	8020450 <iprintf>
 80131a4:	f06f 0305 	mvn.w	r3, #5
 80131a8:	e01b      	b.n	80131e2 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80131aa:	687b      	ldr	r3, [r7, #4]
 80131ac:	2b00      	cmp	r3, #0
 80131ae:	d013      	beq.n	80131d8 <pbuf_copy+0x174>
 80131b0:	687b      	ldr	r3, [r7, #4]
 80131b2:	895a      	ldrh	r2, [r3, #10]
 80131b4:	687b      	ldr	r3, [r7, #4]
 80131b6:	891b      	ldrh	r3, [r3, #8]
 80131b8:	429a      	cmp	r2, r3
 80131ba:	d10d      	bne.n	80131d8 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80131bc:	687b      	ldr	r3, [r7, #4]
 80131be:	681b      	ldr	r3, [r3, #0]
 80131c0:	2b00      	cmp	r3, #0
 80131c2:	d009      	beq.n	80131d8 <pbuf_copy+0x174>
 80131c4:	4b09      	ldr	r3, [pc, #36]	; (80131ec <pbuf_copy+0x188>)
 80131c6:	f240 32ee 	movw	r2, #1006	; 0x3ee
 80131ca:	490e      	ldr	r1, [pc, #56]	; (8013204 <pbuf_copy+0x1a0>)
 80131cc:	4809      	ldr	r0, [pc, #36]	; (80131f4 <pbuf_copy+0x190>)
 80131ce:	f00d f93f 	bl	8020450 <iprintf>
 80131d2:	f06f 0305 	mvn.w	r3, #5
 80131d6:	e004      	b.n	80131e2 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 80131d8:	683b      	ldr	r3, [r7, #0]
 80131da:	2b00      	cmp	r3, #0
 80131dc:	f47f af61 	bne.w	80130a2 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 80131e0:	2300      	movs	r3, #0
}
 80131e2:	4618      	mov	r0, r3
 80131e4:	3718      	adds	r7, #24
 80131e6:	46bd      	mov	sp, r7
 80131e8:	bd80      	pop	{r7, pc}
 80131ea:	bf00      	nop
 80131ec:	08024724 	.word	0x08024724
 80131f0:	080249cc 	.word	0x080249cc
 80131f4:	08024784 	.word	0x08024784
 80131f8:	080249fc 	.word	0x080249fc
 80131fc:	08024a14 	.word	0x08024a14
 8013200:	08024a30 	.word	0x08024a30
 8013204:	08024a40 	.word	0x08024a40

08013208 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8013208:	b580      	push	{r7, lr}
 801320a:	b088      	sub	sp, #32
 801320c:	af00      	add	r7, sp, #0
 801320e:	60f8      	str	r0, [r7, #12]
 8013210:	60b9      	str	r1, [r7, #8]
 8013212:	4611      	mov	r1, r2
 8013214:	461a      	mov	r2, r3
 8013216:	460b      	mov	r3, r1
 8013218:	80fb      	strh	r3, [r7, #6]
 801321a:	4613      	mov	r3, r2
 801321c:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 801321e:	2300      	movs	r3, #0
 8013220:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8013222:	2300      	movs	r3, #0
 8013224:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8013226:	68fb      	ldr	r3, [r7, #12]
 8013228:	2b00      	cmp	r3, #0
 801322a:	d108      	bne.n	801323e <pbuf_copy_partial+0x36>
 801322c:	4b2b      	ldr	r3, [pc, #172]	; (80132dc <pbuf_copy_partial+0xd4>)
 801322e:	f240 420a 	movw	r2, #1034	; 0x40a
 8013232:	492b      	ldr	r1, [pc, #172]	; (80132e0 <pbuf_copy_partial+0xd8>)
 8013234:	482b      	ldr	r0, [pc, #172]	; (80132e4 <pbuf_copy_partial+0xdc>)
 8013236:	f00d f90b 	bl	8020450 <iprintf>
 801323a:	2300      	movs	r3, #0
 801323c:	e04a      	b.n	80132d4 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 801323e:	68bb      	ldr	r3, [r7, #8]
 8013240:	2b00      	cmp	r3, #0
 8013242:	d108      	bne.n	8013256 <pbuf_copy_partial+0x4e>
 8013244:	4b25      	ldr	r3, [pc, #148]	; (80132dc <pbuf_copy_partial+0xd4>)
 8013246:	f240 420b 	movw	r2, #1035	; 0x40b
 801324a:	4927      	ldr	r1, [pc, #156]	; (80132e8 <pbuf_copy_partial+0xe0>)
 801324c:	4825      	ldr	r0, [pc, #148]	; (80132e4 <pbuf_copy_partial+0xdc>)
 801324e:	f00d f8ff 	bl	8020450 <iprintf>
 8013252:	2300      	movs	r3, #0
 8013254:	e03e      	b.n	80132d4 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8013256:	68fb      	ldr	r3, [r7, #12]
 8013258:	61fb      	str	r3, [r7, #28]
 801325a:	e034      	b.n	80132c6 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 801325c:	88bb      	ldrh	r3, [r7, #4]
 801325e:	2b00      	cmp	r3, #0
 8013260:	d00a      	beq.n	8013278 <pbuf_copy_partial+0x70>
 8013262:	69fb      	ldr	r3, [r7, #28]
 8013264:	895b      	ldrh	r3, [r3, #10]
 8013266:	88ba      	ldrh	r2, [r7, #4]
 8013268:	429a      	cmp	r2, r3
 801326a:	d305      	bcc.n	8013278 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 801326c:	69fb      	ldr	r3, [r7, #28]
 801326e:	895b      	ldrh	r3, [r3, #10]
 8013270:	88ba      	ldrh	r2, [r7, #4]
 8013272:	1ad3      	subs	r3, r2, r3
 8013274:	80bb      	strh	r3, [r7, #4]
 8013276:	e023      	b.n	80132c0 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8013278:	69fb      	ldr	r3, [r7, #28]
 801327a:	895a      	ldrh	r2, [r3, #10]
 801327c:	88bb      	ldrh	r3, [r7, #4]
 801327e:	1ad3      	subs	r3, r2, r3
 8013280:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8013282:	8b3a      	ldrh	r2, [r7, #24]
 8013284:	88fb      	ldrh	r3, [r7, #6]
 8013286:	429a      	cmp	r2, r3
 8013288:	d901      	bls.n	801328e <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 801328a:	88fb      	ldrh	r3, [r7, #6]
 801328c:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 801328e:	8b7b      	ldrh	r3, [r7, #26]
 8013290:	68ba      	ldr	r2, [r7, #8]
 8013292:	18d0      	adds	r0, r2, r3
 8013294:	69fb      	ldr	r3, [r7, #28]
 8013296:	685a      	ldr	r2, [r3, #4]
 8013298:	88bb      	ldrh	r3, [r7, #4]
 801329a:	4413      	add	r3, r2
 801329c:	8b3a      	ldrh	r2, [r7, #24]
 801329e:	4619      	mov	r1, r3
 80132a0:	f00d fa07 	bl	80206b2 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 80132a4:	8afa      	ldrh	r2, [r7, #22]
 80132a6:	8b3b      	ldrh	r3, [r7, #24]
 80132a8:	4413      	add	r3, r2
 80132aa:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 80132ac:	8b7a      	ldrh	r2, [r7, #26]
 80132ae:	8b3b      	ldrh	r3, [r7, #24]
 80132b0:	4413      	add	r3, r2
 80132b2:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 80132b4:	88fa      	ldrh	r2, [r7, #6]
 80132b6:	8b3b      	ldrh	r3, [r7, #24]
 80132b8:	1ad3      	subs	r3, r2, r3
 80132ba:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 80132bc:	2300      	movs	r3, #0
 80132be:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80132c0:	69fb      	ldr	r3, [r7, #28]
 80132c2:	681b      	ldr	r3, [r3, #0]
 80132c4:	61fb      	str	r3, [r7, #28]
 80132c6:	88fb      	ldrh	r3, [r7, #6]
 80132c8:	2b00      	cmp	r3, #0
 80132ca:	d002      	beq.n	80132d2 <pbuf_copy_partial+0xca>
 80132cc:	69fb      	ldr	r3, [r7, #28]
 80132ce:	2b00      	cmp	r3, #0
 80132d0:	d1c4      	bne.n	801325c <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 80132d2:	8afb      	ldrh	r3, [r7, #22]
}
 80132d4:	4618      	mov	r0, r3
 80132d6:	3720      	adds	r7, #32
 80132d8:	46bd      	mov	sp, r7
 80132da:	bd80      	pop	{r7, pc}
 80132dc:	08024724 	.word	0x08024724
 80132e0:	08024a6c 	.word	0x08024a6c
 80132e4:	08024784 	.word	0x08024784
 80132e8:	08024a8c 	.word	0x08024a8c

080132ec <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 80132ec:	b580      	push	{r7, lr}
 80132ee:	b084      	sub	sp, #16
 80132f0:	af00      	add	r7, sp, #0
 80132f2:	4603      	mov	r3, r0
 80132f4:	603a      	str	r2, [r7, #0]
 80132f6:	71fb      	strb	r3, [r7, #7]
 80132f8:	460b      	mov	r3, r1
 80132fa:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 80132fc:	683b      	ldr	r3, [r7, #0]
 80132fe:	8919      	ldrh	r1, [r3, #8]
 8013300:	88ba      	ldrh	r2, [r7, #4]
 8013302:	79fb      	ldrb	r3, [r7, #7]
 8013304:	4618      	mov	r0, r3
 8013306:	f7ff fa63 	bl	80127d0 <pbuf_alloc>
 801330a:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 801330c:	68fb      	ldr	r3, [r7, #12]
 801330e:	2b00      	cmp	r3, #0
 8013310:	d101      	bne.n	8013316 <pbuf_clone+0x2a>
    return NULL;
 8013312:	2300      	movs	r3, #0
 8013314:	e011      	b.n	801333a <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8013316:	6839      	ldr	r1, [r7, #0]
 8013318:	68f8      	ldr	r0, [r7, #12]
 801331a:	f7ff fea3 	bl	8013064 <pbuf_copy>
 801331e:	4603      	mov	r3, r0
 8013320:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8013322:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8013326:	2b00      	cmp	r3, #0
 8013328:	d006      	beq.n	8013338 <pbuf_clone+0x4c>
 801332a:	4b06      	ldr	r3, [pc, #24]	; (8013344 <pbuf_clone+0x58>)
 801332c:	f240 5224 	movw	r2, #1316	; 0x524
 8013330:	4905      	ldr	r1, [pc, #20]	; (8013348 <pbuf_clone+0x5c>)
 8013332:	4806      	ldr	r0, [pc, #24]	; (801334c <pbuf_clone+0x60>)
 8013334:	f00d f88c 	bl	8020450 <iprintf>
  return q;
 8013338:	68fb      	ldr	r3, [r7, #12]
}
 801333a:	4618      	mov	r0, r3
 801333c:	3710      	adds	r7, #16
 801333e:	46bd      	mov	sp, r7
 8013340:	bd80      	pop	{r7, pc}
 8013342:	bf00      	nop
 8013344:	08024724 	.word	0x08024724
 8013348:	08024b98 	.word	0x08024b98
 801334c:	08024784 	.word	0x08024784

08013350 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8013350:	b580      	push	{r7, lr}
 8013352:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8013354:	f00b fadc 	bl	801e910 <rand>
 8013358:	4603      	mov	r3, r0
 801335a:	b29b      	uxth	r3, r3
 801335c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8013360:	b29b      	uxth	r3, r3
 8013362:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8013366:	b29a      	uxth	r2, r3
 8013368:	4b01      	ldr	r3, [pc, #4]	; (8013370 <tcp_init+0x20>)
 801336a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801336c:	bf00      	nop
 801336e:	bd80      	pop	{r7, pc}
 8013370:	240002f4 	.word	0x240002f4

08013374 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8013374:	b580      	push	{r7, lr}
 8013376:	b082      	sub	sp, #8
 8013378:	af00      	add	r7, sp, #0
 801337a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801337c:	687b      	ldr	r3, [r7, #4]
 801337e:	7d1b      	ldrb	r3, [r3, #20]
 8013380:	2b01      	cmp	r3, #1
 8013382:	d105      	bne.n	8013390 <tcp_free+0x1c>
 8013384:	4b06      	ldr	r3, [pc, #24]	; (80133a0 <tcp_free+0x2c>)
 8013386:	22d4      	movs	r2, #212	; 0xd4
 8013388:	4906      	ldr	r1, [pc, #24]	; (80133a4 <tcp_free+0x30>)
 801338a:	4807      	ldr	r0, [pc, #28]	; (80133a8 <tcp_free+0x34>)
 801338c:	f00d f860 	bl	8020450 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8013390:	6879      	ldr	r1, [r7, #4]
 8013392:	2001      	movs	r0, #1
 8013394:	f7fe fe50 	bl	8012038 <memp_free>
}
 8013398:	bf00      	nop
 801339a:	3708      	adds	r7, #8
 801339c:	46bd      	mov	sp, r7
 801339e:	bd80      	pop	{r7, pc}
 80133a0:	08024c24 	.word	0x08024c24
 80133a4:	08024c54 	.word	0x08024c54
 80133a8:	08024c68 	.word	0x08024c68

080133ac <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 80133ac:	b580      	push	{r7, lr}
 80133ae:	b082      	sub	sp, #8
 80133b0:	af00      	add	r7, sp, #0
 80133b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 80133b4:	687b      	ldr	r3, [r7, #4]
 80133b6:	7d1b      	ldrb	r3, [r3, #20]
 80133b8:	2b01      	cmp	r3, #1
 80133ba:	d105      	bne.n	80133c8 <tcp_free_listen+0x1c>
 80133bc:	4b06      	ldr	r3, [pc, #24]	; (80133d8 <tcp_free_listen+0x2c>)
 80133be:	22df      	movs	r2, #223	; 0xdf
 80133c0:	4906      	ldr	r1, [pc, #24]	; (80133dc <tcp_free_listen+0x30>)
 80133c2:	4807      	ldr	r0, [pc, #28]	; (80133e0 <tcp_free_listen+0x34>)
 80133c4:	f00d f844 	bl	8020450 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 80133c8:	6879      	ldr	r1, [r7, #4]
 80133ca:	2002      	movs	r0, #2
 80133cc:	f7fe fe34 	bl	8012038 <memp_free>
}
 80133d0:	bf00      	nop
 80133d2:	3708      	adds	r7, #8
 80133d4:	46bd      	mov	sp, r7
 80133d6:	bd80      	pop	{r7, pc}
 80133d8:	08024c24 	.word	0x08024c24
 80133dc:	08024c90 	.word	0x08024c90
 80133e0:	08024c68 	.word	0x08024c68

080133e4 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 80133e4:	b580      	push	{r7, lr}
 80133e6:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 80133e8:	f001 f8a6 	bl	8014538 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 80133ec:	4b07      	ldr	r3, [pc, #28]	; (801340c <tcp_tmr+0x28>)
 80133ee:	781b      	ldrb	r3, [r3, #0]
 80133f0:	3301      	adds	r3, #1
 80133f2:	b2da      	uxtb	r2, r3
 80133f4:	4b05      	ldr	r3, [pc, #20]	; (801340c <tcp_tmr+0x28>)
 80133f6:	701a      	strb	r2, [r3, #0]
 80133f8:	4b04      	ldr	r3, [pc, #16]	; (801340c <tcp_tmr+0x28>)
 80133fa:	781b      	ldrb	r3, [r3, #0]
 80133fc:	f003 0301 	and.w	r3, r3, #1
 8013400:	2b00      	cmp	r3, #0
 8013402:	d001      	beq.n	8013408 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8013404:	f000 fd58 	bl	8013eb8 <tcp_slowtmr>
  }
}
 8013408:	bf00      	nop
 801340a:	bd80      	pop	{r7, pc}
 801340c:	24007ded 	.word	0x24007ded

08013410 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8013410:	b580      	push	{r7, lr}
 8013412:	b084      	sub	sp, #16
 8013414:	af00      	add	r7, sp, #0
 8013416:	6078      	str	r0, [r7, #4]
 8013418:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 801341a:	683b      	ldr	r3, [r7, #0]
 801341c:	2b00      	cmp	r3, #0
 801341e:	d105      	bne.n	801342c <tcp_remove_listener+0x1c>
 8013420:	4b0d      	ldr	r3, [pc, #52]	; (8013458 <tcp_remove_listener+0x48>)
 8013422:	22ff      	movs	r2, #255	; 0xff
 8013424:	490d      	ldr	r1, [pc, #52]	; (801345c <tcp_remove_listener+0x4c>)
 8013426:	480e      	ldr	r0, [pc, #56]	; (8013460 <tcp_remove_listener+0x50>)
 8013428:	f00d f812 	bl	8020450 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 801342c:	687b      	ldr	r3, [r7, #4]
 801342e:	60fb      	str	r3, [r7, #12]
 8013430:	e00a      	b.n	8013448 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8013432:	68fb      	ldr	r3, [r7, #12]
 8013434:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013436:	683a      	ldr	r2, [r7, #0]
 8013438:	429a      	cmp	r2, r3
 801343a:	d102      	bne.n	8013442 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 801343c:	68fb      	ldr	r3, [r7, #12]
 801343e:	2200      	movs	r2, #0
 8013440:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8013442:	68fb      	ldr	r3, [r7, #12]
 8013444:	68db      	ldr	r3, [r3, #12]
 8013446:	60fb      	str	r3, [r7, #12]
 8013448:	68fb      	ldr	r3, [r7, #12]
 801344a:	2b00      	cmp	r3, #0
 801344c:	d1f1      	bne.n	8013432 <tcp_remove_listener+0x22>
    }
  }
}
 801344e:	bf00      	nop
 8013450:	bf00      	nop
 8013452:	3710      	adds	r7, #16
 8013454:	46bd      	mov	sp, r7
 8013456:	bd80      	pop	{r7, pc}
 8013458:	08024c24 	.word	0x08024c24
 801345c:	08024cac 	.word	0x08024cac
 8013460:	08024c68 	.word	0x08024c68

08013464 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8013464:	b580      	push	{r7, lr}
 8013466:	b084      	sub	sp, #16
 8013468:	af00      	add	r7, sp, #0
 801346a:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 801346c:	687b      	ldr	r3, [r7, #4]
 801346e:	2b00      	cmp	r3, #0
 8013470:	d106      	bne.n	8013480 <tcp_listen_closed+0x1c>
 8013472:	4b14      	ldr	r3, [pc, #80]	; (80134c4 <tcp_listen_closed+0x60>)
 8013474:	f240 1211 	movw	r2, #273	; 0x111
 8013478:	4913      	ldr	r1, [pc, #76]	; (80134c8 <tcp_listen_closed+0x64>)
 801347a:	4814      	ldr	r0, [pc, #80]	; (80134cc <tcp_listen_closed+0x68>)
 801347c:	f00c ffe8 	bl	8020450 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8013480:	687b      	ldr	r3, [r7, #4]
 8013482:	7d1b      	ldrb	r3, [r3, #20]
 8013484:	2b01      	cmp	r3, #1
 8013486:	d006      	beq.n	8013496 <tcp_listen_closed+0x32>
 8013488:	4b0e      	ldr	r3, [pc, #56]	; (80134c4 <tcp_listen_closed+0x60>)
 801348a:	f44f 7289 	mov.w	r2, #274	; 0x112
 801348e:	4910      	ldr	r1, [pc, #64]	; (80134d0 <tcp_listen_closed+0x6c>)
 8013490:	480e      	ldr	r0, [pc, #56]	; (80134cc <tcp_listen_closed+0x68>)
 8013492:	f00c ffdd 	bl	8020450 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8013496:	2301      	movs	r3, #1
 8013498:	60fb      	str	r3, [r7, #12]
 801349a:	e00b      	b.n	80134b4 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 801349c:	4a0d      	ldr	r2, [pc, #52]	; (80134d4 <tcp_listen_closed+0x70>)
 801349e:	68fb      	ldr	r3, [r7, #12]
 80134a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80134a4:	681b      	ldr	r3, [r3, #0]
 80134a6:	6879      	ldr	r1, [r7, #4]
 80134a8:	4618      	mov	r0, r3
 80134aa:	f7ff ffb1 	bl	8013410 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80134ae:	68fb      	ldr	r3, [r7, #12]
 80134b0:	3301      	adds	r3, #1
 80134b2:	60fb      	str	r3, [r7, #12]
 80134b4:	68fb      	ldr	r3, [r7, #12]
 80134b6:	2b03      	cmp	r3, #3
 80134b8:	d9f0      	bls.n	801349c <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 80134ba:	bf00      	nop
 80134bc:	bf00      	nop
 80134be:	3710      	adds	r7, #16
 80134c0:	46bd      	mov	sp, r7
 80134c2:	bd80      	pop	{r7, pc}
 80134c4:	08024c24 	.word	0x08024c24
 80134c8:	08024cd4 	.word	0x08024cd4
 80134cc:	08024c68 	.word	0x08024c68
 80134d0:	08024ce0 	.word	0x08024ce0
 80134d4:	0802704c 	.word	0x0802704c

080134d8 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 80134d8:	b5b0      	push	{r4, r5, r7, lr}
 80134da:	b088      	sub	sp, #32
 80134dc:	af04      	add	r7, sp, #16
 80134de:	6078      	str	r0, [r7, #4]
 80134e0:	460b      	mov	r3, r1
 80134e2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 80134e4:	687b      	ldr	r3, [r7, #4]
 80134e6:	2b00      	cmp	r3, #0
 80134e8:	d106      	bne.n	80134f8 <tcp_close_shutdown+0x20>
 80134ea:	4b63      	ldr	r3, [pc, #396]	; (8013678 <tcp_close_shutdown+0x1a0>)
 80134ec:	f44f 72af 	mov.w	r2, #350	; 0x15e
 80134f0:	4962      	ldr	r1, [pc, #392]	; (801367c <tcp_close_shutdown+0x1a4>)
 80134f2:	4863      	ldr	r0, [pc, #396]	; (8013680 <tcp_close_shutdown+0x1a8>)
 80134f4:	f00c ffac 	bl	8020450 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 80134f8:	78fb      	ldrb	r3, [r7, #3]
 80134fa:	2b00      	cmp	r3, #0
 80134fc:	d066      	beq.n	80135cc <tcp_close_shutdown+0xf4>
 80134fe:	687b      	ldr	r3, [r7, #4]
 8013500:	7d1b      	ldrb	r3, [r3, #20]
 8013502:	2b04      	cmp	r3, #4
 8013504:	d003      	beq.n	801350e <tcp_close_shutdown+0x36>
 8013506:	687b      	ldr	r3, [r7, #4]
 8013508:	7d1b      	ldrb	r3, [r3, #20]
 801350a:	2b07      	cmp	r3, #7
 801350c:	d15e      	bne.n	80135cc <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 801350e:	687b      	ldr	r3, [r7, #4]
 8013510:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013512:	2b00      	cmp	r3, #0
 8013514:	d104      	bne.n	8013520 <tcp_close_shutdown+0x48>
 8013516:	687b      	ldr	r3, [r7, #4]
 8013518:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801351a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801351e:	d055      	beq.n	80135cc <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8013520:	687b      	ldr	r3, [r7, #4]
 8013522:	8b5b      	ldrh	r3, [r3, #26]
 8013524:	f003 0310 	and.w	r3, r3, #16
 8013528:	2b00      	cmp	r3, #0
 801352a:	d106      	bne.n	801353a <tcp_close_shutdown+0x62>
 801352c:	4b52      	ldr	r3, [pc, #328]	; (8013678 <tcp_close_shutdown+0x1a0>)
 801352e:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8013532:	4954      	ldr	r1, [pc, #336]	; (8013684 <tcp_close_shutdown+0x1ac>)
 8013534:	4852      	ldr	r0, [pc, #328]	; (8013680 <tcp_close_shutdown+0x1a8>)
 8013536:	f00c ff8b 	bl	8020450 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 801353a:	687b      	ldr	r3, [r7, #4]
 801353c:	6d18      	ldr	r0, [r3, #80]	; 0x50
 801353e:	687b      	ldr	r3, [r7, #4]
 8013540:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8013542:	687d      	ldr	r5, [r7, #4]
 8013544:	687b      	ldr	r3, [r7, #4]
 8013546:	3304      	adds	r3, #4
 8013548:	687a      	ldr	r2, [r7, #4]
 801354a:	8ad2      	ldrh	r2, [r2, #22]
 801354c:	6879      	ldr	r1, [r7, #4]
 801354e:	8b09      	ldrh	r1, [r1, #24]
 8013550:	9102      	str	r1, [sp, #8]
 8013552:	9201      	str	r2, [sp, #4]
 8013554:	9300      	str	r3, [sp, #0]
 8013556:	462b      	mov	r3, r5
 8013558:	4622      	mov	r2, r4
 801355a:	4601      	mov	r1, r0
 801355c:	6878      	ldr	r0, [r7, #4]
 801355e:	f005 fdbb 	bl	80190d8 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8013562:	6878      	ldr	r0, [r7, #4]
 8013564:	f001 fb98 	bl	8014c98 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8013568:	4b47      	ldr	r3, [pc, #284]	; (8013688 <tcp_close_shutdown+0x1b0>)
 801356a:	681b      	ldr	r3, [r3, #0]
 801356c:	687a      	ldr	r2, [r7, #4]
 801356e:	429a      	cmp	r2, r3
 8013570:	d105      	bne.n	801357e <tcp_close_shutdown+0xa6>
 8013572:	4b45      	ldr	r3, [pc, #276]	; (8013688 <tcp_close_shutdown+0x1b0>)
 8013574:	681b      	ldr	r3, [r3, #0]
 8013576:	68db      	ldr	r3, [r3, #12]
 8013578:	4a43      	ldr	r2, [pc, #268]	; (8013688 <tcp_close_shutdown+0x1b0>)
 801357a:	6013      	str	r3, [r2, #0]
 801357c:	e013      	b.n	80135a6 <tcp_close_shutdown+0xce>
 801357e:	4b42      	ldr	r3, [pc, #264]	; (8013688 <tcp_close_shutdown+0x1b0>)
 8013580:	681b      	ldr	r3, [r3, #0]
 8013582:	60fb      	str	r3, [r7, #12]
 8013584:	e00c      	b.n	80135a0 <tcp_close_shutdown+0xc8>
 8013586:	68fb      	ldr	r3, [r7, #12]
 8013588:	68db      	ldr	r3, [r3, #12]
 801358a:	687a      	ldr	r2, [r7, #4]
 801358c:	429a      	cmp	r2, r3
 801358e:	d104      	bne.n	801359a <tcp_close_shutdown+0xc2>
 8013590:	687b      	ldr	r3, [r7, #4]
 8013592:	68da      	ldr	r2, [r3, #12]
 8013594:	68fb      	ldr	r3, [r7, #12]
 8013596:	60da      	str	r2, [r3, #12]
 8013598:	e005      	b.n	80135a6 <tcp_close_shutdown+0xce>
 801359a:	68fb      	ldr	r3, [r7, #12]
 801359c:	68db      	ldr	r3, [r3, #12]
 801359e:	60fb      	str	r3, [r7, #12]
 80135a0:	68fb      	ldr	r3, [r7, #12]
 80135a2:	2b00      	cmp	r3, #0
 80135a4:	d1ef      	bne.n	8013586 <tcp_close_shutdown+0xae>
 80135a6:	687b      	ldr	r3, [r7, #4]
 80135a8:	2200      	movs	r2, #0
 80135aa:	60da      	str	r2, [r3, #12]
 80135ac:	4b37      	ldr	r3, [pc, #220]	; (801368c <tcp_close_shutdown+0x1b4>)
 80135ae:	2201      	movs	r2, #1
 80135b0:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 80135b2:	4b37      	ldr	r3, [pc, #220]	; (8013690 <tcp_close_shutdown+0x1b8>)
 80135b4:	681b      	ldr	r3, [r3, #0]
 80135b6:	687a      	ldr	r2, [r7, #4]
 80135b8:	429a      	cmp	r2, r3
 80135ba:	d102      	bne.n	80135c2 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 80135bc:	f004 f830 	bl	8017620 <tcp_trigger_input_pcb_close>
 80135c0:	e002      	b.n	80135c8 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 80135c2:	6878      	ldr	r0, [r7, #4]
 80135c4:	f7ff fed6 	bl	8013374 <tcp_free>
      }
      return ERR_OK;
 80135c8:	2300      	movs	r3, #0
 80135ca:	e050      	b.n	801366e <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 80135cc:	687b      	ldr	r3, [r7, #4]
 80135ce:	7d1b      	ldrb	r3, [r3, #20]
 80135d0:	2b02      	cmp	r3, #2
 80135d2:	d03b      	beq.n	801364c <tcp_close_shutdown+0x174>
 80135d4:	2b02      	cmp	r3, #2
 80135d6:	dc44      	bgt.n	8013662 <tcp_close_shutdown+0x18a>
 80135d8:	2b00      	cmp	r3, #0
 80135da:	d002      	beq.n	80135e2 <tcp_close_shutdown+0x10a>
 80135dc:	2b01      	cmp	r3, #1
 80135de:	d02a      	beq.n	8013636 <tcp_close_shutdown+0x15e>
 80135e0:	e03f      	b.n	8013662 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 80135e2:	687b      	ldr	r3, [r7, #4]
 80135e4:	8adb      	ldrh	r3, [r3, #22]
 80135e6:	2b00      	cmp	r3, #0
 80135e8:	d021      	beq.n	801362e <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80135ea:	4b2a      	ldr	r3, [pc, #168]	; (8013694 <tcp_close_shutdown+0x1bc>)
 80135ec:	681b      	ldr	r3, [r3, #0]
 80135ee:	687a      	ldr	r2, [r7, #4]
 80135f0:	429a      	cmp	r2, r3
 80135f2:	d105      	bne.n	8013600 <tcp_close_shutdown+0x128>
 80135f4:	4b27      	ldr	r3, [pc, #156]	; (8013694 <tcp_close_shutdown+0x1bc>)
 80135f6:	681b      	ldr	r3, [r3, #0]
 80135f8:	68db      	ldr	r3, [r3, #12]
 80135fa:	4a26      	ldr	r2, [pc, #152]	; (8013694 <tcp_close_shutdown+0x1bc>)
 80135fc:	6013      	str	r3, [r2, #0]
 80135fe:	e013      	b.n	8013628 <tcp_close_shutdown+0x150>
 8013600:	4b24      	ldr	r3, [pc, #144]	; (8013694 <tcp_close_shutdown+0x1bc>)
 8013602:	681b      	ldr	r3, [r3, #0]
 8013604:	60bb      	str	r3, [r7, #8]
 8013606:	e00c      	b.n	8013622 <tcp_close_shutdown+0x14a>
 8013608:	68bb      	ldr	r3, [r7, #8]
 801360a:	68db      	ldr	r3, [r3, #12]
 801360c:	687a      	ldr	r2, [r7, #4]
 801360e:	429a      	cmp	r2, r3
 8013610:	d104      	bne.n	801361c <tcp_close_shutdown+0x144>
 8013612:	687b      	ldr	r3, [r7, #4]
 8013614:	68da      	ldr	r2, [r3, #12]
 8013616:	68bb      	ldr	r3, [r7, #8]
 8013618:	60da      	str	r2, [r3, #12]
 801361a:	e005      	b.n	8013628 <tcp_close_shutdown+0x150>
 801361c:	68bb      	ldr	r3, [r7, #8]
 801361e:	68db      	ldr	r3, [r3, #12]
 8013620:	60bb      	str	r3, [r7, #8]
 8013622:	68bb      	ldr	r3, [r7, #8]
 8013624:	2b00      	cmp	r3, #0
 8013626:	d1ef      	bne.n	8013608 <tcp_close_shutdown+0x130>
 8013628:	687b      	ldr	r3, [r7, #4]
 801362a:	2200      	movs	r2, #0
 801362c:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 801362e:	6878      	ldr	r0, [r7, #4]
 8013630:	f7ff fea0 	bl	8013374 <tcp_free>
      break;
 8013634:	e01a      	b.n	801366c <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8013636:	6878      	ldr	r0, [r7, #4]
 8013638:	f7ff ff14 	bl	8013464 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 801363c:	6879      	ldr	r1, [r7, #4]
 801363e:	4816      	ldr	r0, [pc, #88]	; (8013698 <tcp_close_shutdown+0x1c0>)
 8013640:	f001 fb7a 	bl	8014d38 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8013644:	6878      	ldr	r0, [r7, #4]
 8013646:	f7ff feb1 	bl	80133ac <tcp_free_listen>
      break;
 801364a:	e00f      	b.n	801366c <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 801364c:	6879      	ldr	r1, [r7, #4]
 801364e:	480e      	ldr	r0, [pc, #56]	; (8013688 <tcp_close_shutdown+0x1b0>)
 8013650:	f001 fb72 	bl	8014d38 <tcp_pcb_remove>
 8013654:	4b0d      	ldr	r3, [pc, #52]	; (801368c <tcp_close_shutdown+0x1b4>)
 8013656:	2201      	movs	r2, #1
 8013658:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 801365a:	6878      	ldr	r0, [r7, #4]
 801365c:	f7ff fe8a 	bl	8013374 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8013660:	e004      	b.n	801366c <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8013662:	6878      	ldr	r0, [r7, #4]
 8013664:	f000 f81a 	bl	801369c <tcp_close_shutdown_fin>
 8013668:	4603      	mov	r3, r0
 801366a:	e000      	b.n	801366e <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 801366c:	2300      	movs	r3, #0
}
 801366e:	4618      	mov	r0, r3
 8013670:	3710      	adds	r7, #16
 8013672:	46bd      	mov	sp, r7
 8013674:	bdb0      	pop	{r4, r5, r7, pc}
 8013676:	bf00      	nop
 8013678:	08024c24 	.word	0x08024c24
 801367c:	08024cf8 	.word	0x08024cf8
 8013680:	08024c68 	.word	0x08024c68
 8013684:	08024d18 	.word	0x08024d18
 8013688:	24007de4 	.word	0x24007de4
 801368c:	24007dec 	.word	0x24007dec
 8013690:	24007e24 	.word	0x24007e24
 8013694:	24007ddc 	.word	0x24007ddc
 8013698:	24007de0 	.word	0x24007de0

0801369c <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 801369c:	b580      	push	{r7, lr}
 801369e:	b084      	sub	sp, #16
 80136a0:	af00      	add	r7, sp, #0
 80136a2:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80136a4:	687b      	ldr	r3, [r7, #4]
 80136a6:	2b00      	cmp	r3, #0
 80136a8:	d106      	bne.n	80136b8 <tcp_close_shutdown_fin+0x1c>
 80136aa:	4b2e      	ldr	r3, [pc, #184]	; (8013764 <tcp_close_shutdown_fin+0xc8>)
 80136ac:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 80136b0:	492d      	ldr	r1, [pc, #180]	; (8013768 <tcp_close_shutdown_fin+0xcc>)
 80136b2:	482e      	ldr	r0, [pc, #184]	; (801376c <tcp_close_shutdown_fin+0xd0>)
 80136b4:	f00c fecc 	bl	8020450 <iprintf>

  switch (pcb->state) {
 80136b8:	687b      	ldr	r3, [r7, #4]
 80136ba:	7d1b      	ldrb	r3, [r3, #20]
 80136bc:	2b07      	cmp	r3, #7
 80136be:	d020      	beq.n	8013702 <tcp_close_shutdown_fin+0x66>
 80136c0:	2b07      	cmp	r3, #7
 80136c2:	dc2b      	bgt.n	801371c <tcp_close_shutdown_fin+0x80>
 80136c4:	2b03      	cmp	r3, #3
 80136c6:	d002      	beq.n	80136ce <tcp_close_shutdown_fin+0x32>
 80136c8:	2b04      	cmp	r3, #4
 80136ca:	d00d      	beq.n	80136e8 <tcp_close_shutdown_fin+0x4c>
 80136cc:	e026      	b.n	801371c <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 80136ce:	6878      	ldr	r0, [r7, #4]
 80136d0:	f004 fe10 	bl	80182f4 <tcp_send_fin>
 80136d4:	4603      	mov	r3, r0
 80136d6:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80136d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80136dc:	2b00      	cmp	r3, #0
 80136de:	d11f      	bne.n	8013720 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 80136e0:	687b      	ldr	r3, [r7, #4]
 80136e2:	2205      	movs	r2, #5
 80136e4:	751a      	strb	r2, [r3, #20]
      }
      break;
 80136e6:	e01b      	b.n	8013720 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 80136e8:	6878      	ldr	r0, [r7, #4]
 80136ea:	f004 fe03 	bl	80182f4 <tcp_send_fin>
 80136ee:	4603      	mov	r3, r0
 80136f0:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80136f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80136f6:	2b00      	cmp	r3, #0
 80136f8:	d114      	bne.n	8013724 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 80136fa:	687b      	ldr	r3, [r7, #4]
 80136fc:	2205      	movs	r2, #5
 80136fe:	751a      	strb	r2, [r3, #20]
      }
      break;
 8013700:	e010      	b.n	8013724 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8013702:	6878      	ldr	r0, [r7, #4]
 8013704:	f004 fdf6 	bl	80182f4 <tcp_send_fin>
 8013708:	4603      	mov	r3, r0
 801370a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 801370c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013710:	2b00      	cmp	r3, #0
 8013712:	d109      	bne.n	8013728 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8013714:	687b      	ldr	r3, [r7, #4]
 8013716:	2209      	movs	r2, #9
 8013718:	751a      	strb	r2, [r3, #20]
      }
      break;
 801371a:	e005      	b.n	8013728 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 801371c:	2300      	movs	r3, #0
 801371e:	e01c      	b.n	801375a <tcp_close_shutdown_fin+0xbe>
      break;
 8013720:	bf00      	nop
 8013722:	e002      	b.n	801372a <tcp_close_shutdown_fin+0x8e>
      break;
 8013724:	bf00      	nop
 8013726:	e000      	b.n	801372a <tcp_close_shutdown_fin+0x8e>
      break;
 8013728:	bf00      	nop
  }

  if (err == ERR_OK) {
 801372a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801372e:	2b00      	cmp	r3, #0
 8013730:	d103      	bne.n	801373a <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8013732:	6878      	ldr	r0, [r7, #4]
 8013734:	f004 ff1c 	bl	8018570 <tcp_output>
 8013738:	e00d      	b.n	8013756 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 801373a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801373e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013742:	d108      	bne.n	8013756 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8013744:	687b      	ldr	r3, [r7, #4]
 8013746:	8b5b      	ldrh	r3, [r3, #26]
 8013748:	f043 0308 	orr.w	r3, r3, #8
 801374c:	b29a      	uxth	r2, r3
 801374e:	687b      	ldr	r3, [r7, #4]
 8013750:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8013752:	2300      	movs	r3, #0
 8013754:	e001      	b.n	801375a <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8013756:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801375a:	4618      	mov	r0, r3
 801375c:	3710      	adds	r7, #16
 801375e:	46bd      	mov	sp, r7
 8013760:	bd80      	pop	{r7, pc}
 8013762:	bf00      	nop
 8013764:	08024c24 	.word	0x08024c24
 8013768:	08024cd4 	.word	0x08024cd4
 801376c:	08024c68 	.word	0x08024c68

08013770 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8013770:	b580      	push	{r7, lr}
 8013772:	b082      	sub	sp, #8
 8013774:	af00      	add	r7, sp, #0
 8013776:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8013778:	687b      	ldr	r3, [r7, #4]
 801377a:	2b00      	cmp	r3, #0
 801377c:	d109      	bne.n	8013792 <tcp_close+0x22>
 801377e:	4b0f      	ldr	r3, [pc, #60]	; (80137bc <tcp_close+0x4c>)
 8013780:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8013784:	490e      	ldr	r1, [pc, #56]	; (80137c0 <tcp_close+0x50>)
 8013786:	480f      	ldr	r0, [pc, #60]	; (80137c4 <tcp_close+0x54>)
 8013788:	f00c fe62 	bl	8020450 <iprintf>
 801378c:	f06f 030f 	mvn.w	r3, #15
 8013790:	e00f      	b.n	80137b2 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8013792:	687b      	ldr	r3, [r7, #4]
 8013794:	7d1b      	ldrb	r3, [r3, #20]
 8013796:	2b01      	cmp	r3, #1
 8013798:	d006      	beq.n	80137a8 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 801379a:	687b      	ldr	r3, [r7, #4]
 801379c:	8b5b      	ldrh	r3, [r3, #26]
 801379e:	f043 0310 	orr.w	r3, r3, #16
 80137a2:	b29a      	uxth	r2, r3
 80137a4:	687b      	ldr	r3, [r7, #4]
 80137a6:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 80137a8:	2101      	movs	r1, #1
 80137aa:	6878      	ldr	r0, [r7, #4]
 80137ac:	f7ff fe94 	bl	80134d8 <tcp_close_shutdown>
 80137b0:	4603      	mov	r3, r0
}
 80137b2:	4618      	mov	r0, r3
 80137b4:	3708      	adds	r7, #8
 80137b6:	46bd      	mov	sp, r7
 80137b8:	bd80      	pop	{r7, pc}
 80137ba:	bf00      	nop
 80137bc:	08024c24 	.word	0x08024c24
 80137c0:	08024d34 	.word	0x08024d34
 80137c4:	08024c68 	.word	0x08024c68

080137c8 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 80137c8:	b580      	push	{r7, lr}
 80137ca:	b084      	sub	sp, #16
 80137cc:	af00      	add	r7, sp, #0
 80137ce:	60f8      	str	r0, [r7, #12]
 80137d0:	60b9      	str	r1, [r7, #8]
 80137d2:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 80137d4:	68fb      	ldr	r3, [r7, #12]
 80137d6:	2b00      	cmp	r3, #0
 80137d8:	d109      	bne.n	80137ee <tcp_shutdown+0x26>
 80137da:	4b26      	ldr	r3, [pc, #152]	; (8013874 <tcp_shutdown+0xac>)
 80137dc:	f240 2207 	movw	r2, #519	; 0x207
 80137e0:	4925      	ldr	r1, [pc, #148]	; (8013878 <tcp_shutdown+0xb0>)
 80137e2:	4826      	ldr	r0, [pc, #152]	; (801387c <tcp_shutdown+0xb4>)
 80137e4:	f00c fe34 	bl	8020450 <iprintf>
 80137e8:	f06f 030f 	mvn.w	r3, #15
 80137ec:	e03d      	b.n	801386a <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 80137ee:	68fb      	ldr	r3, [r7, #12]
 80137f0:	7d1b      	ldrb	r3, [r3, #20]
 80137f2:	2b01      	cmp	r3, #1
 80137f4:	d102      	bne.n	80137fc <tcp_shutdown+0x34>
    return ERR_CONN;
 80137f6:	f06f 030a 	mvn.w	r3, #10
 80137fa:	e036      	b.n	801386a <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 80137fc:	68bb      	ldr	r3, [r7, #8]
 80137fe:	2b00      	cmp	r3, #0
 8013800:	d01b      	beq.n	801383a <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8013802:	68fb      	ldr	r3, [r7, #12]
 8013804:	8b5b      	ldrh	r3, [r3, #26]
 8013806:	f043 0310 	orr.w	r3, r3, #16
 801380a:	b29a      	uxth	r2, r3
 801380c:	68fb      	ldr	r3, [r7, #12]
 801380e:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 8013810:	687b      	ldr	r3, [r7, #4]
 8013812:	2b00      	cmp	r3, #0
 8013814:	d005      	beq.n	8013822 <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 8013816:	2101      	movs	r1, #1
 8013818:	68f8      	ldr	r0, [r7, #12]
 801381a:	f7ff fe5d 	bl	80134d8 <tcp_close_shutdown>
 801381e:	4603      	mov	r3, r0
 8013820:	e023      	b.n	801386a <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 8013822:	68fb      	ldr	r3, [r7, #12]
 8013824:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013826:	2b00      	cmp	r3, #0
 8013828:	d007      	beq.n	801383a <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 801382a:	68fb      	ldr	r3, [r7, #12]
 801382c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801382e:	4618      	mov	r0, r3
 8013830:	f7ff fae4 	bl	8012dfc <pbuf_free>
      pcb->refused_data = NULL;
 8013834:	68fb      	ldr	r3, [r7, #12]
 8013836:	2200      	movs	r2, #0
 8013838:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 801383a:	687b      	ldr	r3, [r7, #4]
 801383c:	2b00      	cmp	r3, #0
 801383e:	d013      	beq.n	8013868 <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 8013840:	68fb      	ldr	r3, [r7, #12]
 8013842:	7d1b      	ldrb	r3, [r3, #20]
 8013844:	2b04      	cmp	r3, #4
 8013846:	dc02      	bgt.n	801384e <tcp_shutdown+0x86>
 8013848:	2b03      	cmp	r3, #3
 801384a:	da02      	bge.n	8013852 <tcp_shutdown+0x8a>
 801384c:	e009      	b.n	8013862 <tcp_shutdown+0x9a>
 801384e:	2b07      	cmp	r3, #7
 8013850:	d107      	bne.n	8013862 <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 8013852:	68bb      	ldr	r3, [r7, #8]
 8013854:	b2db      	uxtb	r3, r3
 8013856:	4619      	mov	r1, r3
 8013858:	68f8      	ldr	r0, [r7, #12]
 801385a:	f7ff fe3d 	bl	80134d8 <tcp_close_shutdown>
 801385e:	4603      	mov	r3, r0
 8013860:	e003      	b.n	801386a <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 8013862:	f06f 030a 	mvn.w	r3, #10
 8013866:	e000      	b.n	801386a <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 8013868:	2300      	movs	r3, #0
}
 801386a:	4618      	mov	r0, r3
 801386c:	3710      	adds	r7, #16
 801386e:	46bd      	mov	sp, r7
 8013870:	bd80      	pop	{r7, pc}
 8013872:	bf00      	nop
 8013874:	08024c24 	.word	0x08024c24
 8013878:	08024d4c 	.word	0x08024d4c
 801387c:	08024c68 	.word	0x08024c68

08013880 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8013880:	b580      	push	{r7, lr}
 8013882:	b08e      	sub	sp, #56	; 0x38
 8013884:	af04      	add	r7, sp, #16
 8013886:	6078      	str	r0, [r7, #4]
 8013888:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 801388a:	687b      	ldr	r3, [r7, #4]
 801388c:	2b00      	cmp	r3, #0
 801388e:	d107      	bne.n	80138a0 <tcp_abandon+0x20>
 8013890:	4b52      	ldr	r3, [pc, #328]	; (80139dc <tcp_abandon+0x15c>)
 8013892:	f240 223d 	movw	r2, #573	; 0x23d
 8013896:	4952      	ldr	r1, [pc, #328]	; (80139e0 <tcp_abandon+0x160>)
 8013898:	4852      	ldr	r0, [pc, #328]	; (80139e4 <tcp_abandon+0x164>)
 801389a:	f00c fdd9 	bl	8020450 <iprintf>
 801389e:	e099      	b.n	80139d4 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80138a0:	687b      	ldr	r3, [r7, #4]
 80138a2:	7d1b      	ldrb	r3, [r3, #20]
 80138a4:	2b01      	cmp	r3, #1
 80138a6:	d106      	bne.n	80138b6 <tcp_abandon+0x36>
 80138a8:	4b4c      	ldr	r3, [pc, #304]	; (80139dc <tcp_abandon+0x15c>)
 80138aa:	f44f 7210 	mov.w	r2, #576	; 0x240
 80138ae:	494e      	ldr	r1, [pc, #312]	; (80139e8 <tcp_abandon+0x168>)
 80138b0:	484c      	ldr	r0, [pc, #304]	; (80139e4 <tcp_abandon+0x164>)
 80138b2:	f00c fdcd 	bl	8020450 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 80138b6:	687b      	ldr	r3, [r7, #4]
 80138b8:	7d1b      	ldrb	r3, [r3, #20]
 80138ba:	2b0a      	cmp	r3, #10
 80138bc:	d107      	bne.n	80138ce <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 80138be:	6879      	ldr	r1, [r7, #4]
 80138c0:	484a      	ldr	r0, [pc, #296]	; (80139ec <tcp_abandon+0x16c>)
 80138c2:	f001 fa39 	bl	8014d38 <tcp_pcb_remove>
    tcp_free(pcb);
 80138c6:	6878      	ldr	r0, [r7, #4]
 80138c8:	f7ff fd54 	bl	8013374 <tcp_free>
 80138cc:	e082      	b.n	80139d4 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 80138ce:	2300      	movs	r3, #0
 80138d0:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 80138d2:	2300      	movs	r3, #0
 80138d4:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 80138d6:	687b      	ldr	r3, [r7, #4]
 80138d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80138da:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 80138dc:	687b      	ldr	r3, [r7, #4]
 80138de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80138e0:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 80138e2:	687b      	ldr	r3, [r7, #4]
 80138e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80138e8:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 80138ea:	687b      	ldr	r3, [r7, #4]
 80138ec:	691b      	ldr	r3, [r3, #16]
 80138ee:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 80138f0:	687b      	ldr	r3, [r7, #4]
 80138f2:	7d1b      	ldrb	r3, [r3, #20]
 80138f4:	2b00      	cmp	r3, #0
 80138f6:	d126      	bne.n	8013946 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 80138f8:	687b      	ldr	r3, [r7, #4]
 80138fa:	8adb      	ldrh	r3, [r3, #22]
 80138fc:	2b00      	cmp	r3, #0
 80138fe:	d02e      	beq.n	801395e <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8013900:	4b3b      	ldr	r3, [pc, #236]	; (80139f0 <tcp_abandon+0x170>)
 8013902:	681b      	ldr	r3, [r3, #0]
 8013904:	687a      	ldr	r2, [r7, #4]
 8013906:	429a      	cmp	r2, r3
 8013908:	d105      	bne.n	8013916 <tcp_abandon+0x96>
 801390a:	4b39      	ldr	r3, [pc, #228]	; (80139f0 <tcp_abandon+0x170>)
 801390c:	681b      	ldr	r3, [r3, #0]
 801390e:	68db      	ldr	r3, [r3, #12]
 8013910:	4a37      	ldr	r2, [pc, #220]	; (80139f0 <tcp_abandon+0x170>)
 8013912:	6013      	str	r3, [r2, #0]
 8013914:	e013      	b.n	801393e <tcp_abandon+0xbe>
 8013916:	4b36      	ldr	r3, [pc, #216]	; (80139f0 <tcp_abandon+0x170>)
 8013918:	681b      	ldr	r3, [r3, #0]
 801391a:	61fb      	str	r3, [r7, #28]
 801391c:	e00c      	b.n	8013938 <tcp_abandon+0xb8>
 801391e:	69fb      	ldr	r3, [r7, #28]
 8013920:	68db      	ldr	r3, [r3, #12]
 8013922:	687a      	ldr	r2, [r7, #4]
 8013924:	429a      	cmp	r2, r3
 8013926:	d104      	bne.n	8013932 <tcp_abandon+0xb2>
 8013928:	687b      	ldr	r3, [r7, #4]
 801392a:	68da      	ldr	r2, [r3, #12]
 801392c:	69fb      	ldr	r3, [r7, #28]
 801392e:	60da      	str	r2, [r3, #12]
 8013930:	e005      	b.n	801393e <tcp_abandon+0xbe>
 8013932:	69fb      	ldr	r3, [r7, #28]
 8013934:	68db      	ldr	r3, [r3, #12]
 8013936:	61fb      	str	r3, [r7, #28]
 8013938:	69fb      	ldr	r3, [r7, #28]
 801393a:	2b00      	cmp	r3, #0
 801393c:	d1ef      	bne.n	801391e <tcp_abandon+0x9e>
 801393e:	687b      	ldr	r3, [r7, #4]
 8013940:	2200      	movs	r2, #0
 8013942:	60da      	str	r2, [r3, #12]
 8013944:	e00b      	b.n	801395e <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8013946:	683b      	ldr	r3, [r7, #0]
 8013948:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 801394a:	687b      	ldr	r3, [r7, #4]
 801394c:	8adb      	ldrh	r3, [r3, #22]
 801394e:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8013950:	6879      	ldr	r1, [r7, #4]
 8013952:	4828      	ldr	r0, [pc, #160]	; (80139f4 <tcp_abandon+0x174>)
 8013954:	f001 f9f0 	bl	8014d38 <tcp_pcb_remove>
 8013958:	4b27      	ldr	r3, [pc, #156]	; (80139f8 <tcp_abandon+0x178>)
 801395a:	2201      	movs	r2, #1
 801395c:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 801395e:	687b      	ldr	r3, [r7, #4]
 8013960:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013962:	2b00      	cmp	r3, #0
 8013964:	d004      	beq.n	8013970 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8013966:	687b      	ldr	r3, [r7, #4]
 8013968:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801396a:	4618      	mov	r0, r3
 801396c:	f000 fec4 	bl	80146f8 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8013970:	687b      	ldr	r3, [r7, #4]
 8013972:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013974:	2b00      	cmp	r3, #0
 8013976:	d004      	beq.n	8013982 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8013978:	687b      	ldr	r3, [r7, #4]
 801397a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801397c:	4618      	mov	r0, r3
 801397e:	f000 febb 	bl	80146f8 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8013982:	687b      	ldr	r3, [r7, #4]
 8013984:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013986:	2b00      	cmp	r3, #0
 8013988:	d004      	beq.n	8013994 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 801398a:	687b      	ldr	r3, [r7, #4]
 801398c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801398e:	4618      	mov	r0, r3
 8013990:	f000 feb2 	bl	80146f8 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8013994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013996:	2b00      	cmp	r3, #0
 8013998:	d00e      	beq.n	80139b8 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 801399a:	6879      	ldr	r1, [r7, #4]
 801399c:	687b      	ldr	r3, [r7, #4]
 801399e:	3304      	adds	r3, #4
 80139a0:	687a      	ldr	r2, [r7, #4]
 80139a2:	8b12      	ldrh	r2, [r2, #24]
 80139a4:	9202      	str	r2, [sp, #8]
 80139a6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80139a8:	9201      	str	r2, [sp, #4]
 80139aa:	9300      	str	r3, [sp, #0]
 80139ac:	460b      	mov	r3, r1
 80139ae:	697a      	ldr	r2, [r7, #20]
 80139b0:	69b9      	ldr	r1, [r7, #24]
 80139b2:	6878      	ldr	r0, [r7, #4]
 80139b4:	f005 fb90 	bl	80190d8 <tcp_rst>
    }
    last_state = pcb->state;
 80139b8:	687b      	ldr	r3, [r7, #4]
 80139ba:	7d1b      	ldrb	r3, [r3, #20]
 80139bc:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 80139be:	6878      	ldr	r0, [r7, #4]
 80139c0:	f7ff fcd8 	bl	8013374 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 80139c4:	693b      	ldr	r3, [r7, #16]
 80139c6:	2b00      	cmp	r3, #0
 80139c8:	d004      	beq.n	80139d4 <tcp_abandon+0x154>
 80139ca:	693b      	ldr	r3, [r7, #16]
 80139cc:	f06f 010c 	mvn.w	r1, #12
 80139d0:	68f8      	ldr	r0, [r7, #12]
 80139d2:	4798      	blx	r3
  }
}
 80139d4:	3728      	adds	r7, #40	; 0x28
 80139d6:	46bd      	mov	sp, r7
 80139d8:	bd80      	pop	{r7, pc}
 80139da:	bf00      	nop
 80139dc:	08024c24 	.word	0x08024c24
 80139e0:	08024d68 	.word	0x08024d68
 80139e4:	08024c68 	.word	0x08024c68
 80139e8:	08024d84 	.word	0x08024d84
 80139ec:	24007de8 	.word	0x24007de8
 80139f0:	24007ddc 	.word	0x24007ddc
 80139f4:	24007de4 	.word	0x24007de4
 80139f8:	24007dec 	.word	0x24007dec

080139fc <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 80139fc:	b580      	push	{r7, lr}
 80139fe:	b082      	sub	sp, #8
 8013a00:	af00      	add	r7, sp, #0
 8013a02:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8013a04:	2101      	movs	r1, #1
 8013a06:	6878      	ldr	r0, [r7, #4]
 8013a08:	f7ff ff3a 	bl	8013880 <tcp_abandon>
}
 8013a0c:	bf00      	nop
 8013a0e:	3708      	adds	r7, #8
 8013a10:	46bd      	mov	sp, r7
 8013a12:	bd80      	pop	{r7, pc}

08013a14 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8013a14:	b580      	push	{r7, lr}
 8013a16:	b088      	sub	sp, #32
 8013a18:	af00      	add	r7, sp, #0
 8013a1a:	60f8      	str	r0, [r7, #12]
 8013a1c:	60b9      	str	r1, [r7, #8]
 8013a1e:	4613      	mov	r3, r2
 8013a20:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 8013a22:	2304      	movs	r3, #4
 8013a24:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8013a26:	68bb      	ldr	r3, [r7, #8]
 8013a28:	2b00      	cmp	r3, #0
 8013a2a:	d101      	bne.n	8013a30 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8013a2c:	4b3e      	ldr	r3, [pc, #248]	; (8013b28 <tcp_bind+0x114>)
 8013a2e:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8013a30:	68fb      	ldr	r3, [r7, #12]
 8013a32:	2b00      	cmp	r3, #0
 8013a34:	d109      	bne.n	8013a4a <tcp_bind+0x36>
 8013a36:	4b3d      	ldr	r3, [pc, #244]	; (8013b2c <tcp_bind+0x118>)
 8013a38:	f240 22a9 	movw	r2, #681	; 0x2a9
 8013a3c:	493c      	ldr	r1, [pc, #240]	; (8013b30 <tcp_bind+0x11c>)
 8013a3e:	483d      	ldr	r0, [pc, #244]	; (8013b34 <tcp_bind+0x120>)
 8013a40:	f00c fd06 	bl	8020450 <iprintf>
 8013a44:	f06f 030f 	mvn.w	r3, #15
 8013a48:	e06a      	b.n	8013b20 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8013a4a:	68fb      	ldr	r3, [r7, #12]
 8013a4c:	7d1b      	ldrb	r3, [r3, #20]
 8013a4e:	2b00      	cmp	r3, #0
 8013a50:	d009      	beq.n	8013a66 <tcp_bind+0x52>
 8013a52:	4b36      	ldr	r3, [pc, #216]	; (8013b2c <tcp_bind+0x118>)
 8013a54:	f240 22ab 	movw	r2, #683	; 0x2ab
 8013a58:	4937      	ldr	r1, [pc, #220]	; (8013b38 <tcp_bind+0x124>)
 8013a5a:	4836      	ldr	r0, [pc, #216]	; (8013b34 <tcp_bind+0x120>)
 8013a5c:	f00c fcf8 	bl	8020450 <iprintf>
 8013a60:	f06f 0305 	mvn.w	r3, #5
 8013a64:	e05c      	b.n	8013b20 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 8013a66:	88fb      	ldrh	r3, [r7, #6]
 8013a68:	2b00      	cmp	r3, #0
 8013a6a:	d109      	bne.n	8013a80 <tcp_bind+0x6c>
    port = tcp_new_port();
 8013a6c:	f000 f9de 	bl	8013e2c <tcp_new_port>
 8013a70:	4603      	mov	r3, r0
 8013a72:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8013a74:	88fb      	ldrh	r3, [r7, #6]
 8013a76:	2b00      	cmp	r3, #0
 8013a78:	d135      	bne.n	8013ae6 <tcp_bind+0xd2>
      return ERR_BUF;
 8013a7a:	f06f 0301 	mvn.w	r3, #1
 8013a7e:	e04f      	b.n	8013b20 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 8013a80:	2300      	movs	r3, #0
 8013a82:	61fb      	str	r3, [r7, #28]
 8013a84:	e02b      	b.n	8013ade <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8013a86:	4a2d      	ldr	r2, [pc, #180]	; (8013b3c <tcp_bind+0x128>)
 8013a88:	69fb      	ldr	r3, [r7, #28]
 8013a8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013a8e:	681b      	ldr	r3, [r3, #0]
 8013a90:	61bb      	str	r3, [r7, #24]
 8013a92:	e01e      	b.n	8013ad2 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 8013a94:	69bb      	ldr	r3, [r7, #24]
 8013a96:	8adb      	ldrh	r3, [r3, #22]
 8013a98:	88fa      	ldrh	r2, [r7, #6]
 8013a9a:	429a      	cmp	r2, r3
 8013a9c:	d116      	bne.n	8013acc <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 8013a9e:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8013aa0:	2b00      	cmp	r3, #0
 8013aa2:	d010      	beq.n	8013ac6 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 8013aa4:	69bb      	ldr	r3, [r7, #24]
 8013aa6:	681b      	ldr	r3, [r3, #0]
 8013aa8:	2b00      	cmp	r3, #0
 8013aaa:	d00c      	beq.n	8013ac6 <tcp_bind+0xb2>
 8013aac:	68bb      	ldr	r3, [r7, #8]
 8013aae:	2b00      	cmp	r3, #0
 8013ab0:	d009      	beq.n	8013ac6 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 8013ab2:	68bb      	ldr	r3, [r7, #8]
 8013ab4:	681b      	ldr	r3, [r3, #0]
 8013ab6:	2b00      	cmp	r3, #0
 8013ab8:	d005      	beq.n	8013ac6 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 8013aba:	69bb      	ldr	r3, [r7, #24]
 8013abc:	681a      	ldr	r2, [r3, #0]
 8013abe:	68bb      	ldr	r3, [r7, #8]
 8013ac0:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8013ac2:	429a      	cmp	r2, r3
 8013ac4:	d102      	bne.n	8013acc <tcp_bind+0xb8>
              return ERR_USE;
 8013ac6:	f06f 0307 	mvn.w	r3, #7
 8013aca:	e029      	b.n	8013b20 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8013acc:	69bb      	ldr	r3, [r7, #24]
 8013ace:	68db      	ldr	r3, [r3, #12]
 8013ad0:	61bb      	str	r3, [r7, #24]
 8013ad2:	69bb      	ldr	r3, [r7, #24]
 8013ad4:	2b00      	cmp	r3, #0
 8013ad6:	d1dd      	bne.n	8013a94 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 8013ad8:	69fb      	ldr	r3, [r7, #28]
 8013ada:	3301      	adds	r3, #1
 8013adc:	61fb      	str	r3, [r7, #28]
 8013ade:	69fa      	ldr	r2, [r7, #28]
 8013ae0:	697b      	ldr	r3, [r7, #20]
 8013ae2:	429a      	cmp	r2, r3
 8013ae4:	dbcf      	blt.n	8013a86 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 8013ae6:	68bb      	ldr	r3, [r7, #8]
 8013ae8:	2b00      	cmp	r3, #0
 8013aea:	d00c      	beq.n	8013b06 <tcp_bind+0xf2>
 8013aec:	68bb      	ldr	r3, [r7, #8]
 8013aee:	681b      	ldr	r3, [r3, #0]
 8013af0:	2b00      	cmp	r3, #0
 8013af2:	d008      	beq.n	8013b06 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 8013af4:	68bb      	ldr	r3, [r7, #8]
 8013af6:	2b00      	cmp	r3, #0
 8013af8:	d002      	beq.n	8013b00 <tcp_bind+0xec>
 8013afa:	68bb      	ldr	r3, [r7, #8]
 8013afc:	681b      	ldr	r3, [r3, #0]
 8013afe:	e000      	b.n	8013b02 <tcp_bind+0xee>
 8013b00:	2300      	movs	r3, #0
 8013b02:	68fa      	ldr	r2, [r7, #12]
 8013b04:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 8013b06:	68fb      	ldr	r3, [r7, #12]
 8013b08:	88fa      	ldrh	r2, [r7, #6]
 8013b0a:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8013b0c:	4b0c      	ldr	r3, [pc, #48]	; (8013b40 <tcp_bind+0x12c>)
 8013b0e:	681a      	ldr	r2, [r3, #0]
 8013b10:	68fb      	ldr	r3, [r7, #12]
 8013b12:	60da      	str	r2, [r3, #12]
 8013b14:	4a0a      	ldr	r2, [pc, #40]	; (8013b40 <tcp_bind+0x12c>)
 8013b16:	68fb      	ldr	r3, [r7, #12]
 8013b18:	6013      	str	r3, [r2, #0]
 8013b1a:	f005 fc9f 	bl	801945c <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 8013b1e:	2300      	movs	r3, #0
}
 8013b20:	4618      	mov	r0, r3
 8013b22:	3720      	adds	r7, #32
 8013b24:	46bd      	mov	sp, r7
 8013b26:	bd80      	pop	{r7, pc}
 8013b28:	08027084 	.word	0x08027084
 8013b2c:	08024c24 	.word	0x08024c24
 8013b30:	08024db8 	.word	0x08024db8
 8013b34:	08024c68 	.word	0x08024c68
 8013b38:	08024dd0 	.word	0x08024dd0
 8013b3c:	0802704c 	.word	0x0802704c
 8013b40:	24007ddc 	.word	0x24007ddc

08013b44 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8013b44:	b580      	push	{r7, lr}
 8013b46:	b084      	sub	sp, #16
 8013b48:	af00      	add	r7, sp, #0
 8013b4a:	60f8      	str	r0, [r7, #12]
 8013b4c:	60b9      	str	r1, [r7, #8]
 8013b4e:	4613      	mov	r3, r2
 8013b50:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 8013b52:	68bb      	ldr	r3, [r7, #8]
 8013b54:	2b00      	cmp	r3, #0
 8013b56:	d106      	bne.n	8013b66 <tcp_accept_null+0x22>
 8013b58:	4b07      	ldr	r3, [pc, #28]	; (8013b78 <tcp_accept_null+0x34>)
 8013b5a:	f240 320f 	movw	r2, #783	; 0x30f
 8013b5e:	4907      	ldr	r1, [pc, #28]	; (8013b7c <tcp_accept_null+0x38>)
 8013b60:	4807      	ldr	r0, [pc, #28]	; (8013b80 <tcp_accept_null+0x3c>)
 8013b62:	f00c fc75 	bl	8020450 <iprintf>

  tcp_abort(pcb);
 8013b66:	68b8      	ldr	r0, [r7, #8]
 8013b68:	f7ff ff48 	bl	80139fc <tcp_abort>

  return ERR_ABRT;
 8013b6c:	f06f 030c 	mvn.w	r3, #12
}
 8013b70:	4618      	mov	r0, r3
 8013b72:	3710      	adds	r7, #16
 8013b74:	46bd      	mov	sp, r7
 8013b76:	bd80      	pop	{r7, pc}
 8013b78:	08024c24 	.word	0x08024c24
 8013b7c:	08024df8 	.word	0x08024df8
 8013b80:	08024c68 	.word	0x08024c68

08013b84 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 8013b84:	b580      	push	{r7, lr}
 8013b86:	b088      	sub	sp, #32
 8013b88:	af00      	add	r7, sp, #0
 8013b8a:	60f8      	str	r0, [r7, #12]
 8013b8c:	460b      	mov	r3, r1
 8013b8e:	607a      	str	r2, [r7, #4]
 8013b90:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 8013b92:	2300      	movs	r3, #0
 8013b94:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 8013b96:	68fb      	ldr	r3, [r7, #12]
 8013b98:	2b00      	cmp	r3, #0
 8013b9a:	d109      	bne.n	8013bb0 <tcp_listen_with_backlog_and_err+0x2c>
 8013b9c:	4b47      	ldr	r3, [pc, #284]	; (8013cbc <tcp_listen_with_backlog_and_err+0x138>)
 8013b9e:	f240 3259 	movw	r2, #857	; 0x359
 8013ba2:	4947      	ldr	r1, [pc, #284]	; (8013cc0 <tcp_listen_with_backlog_and_err+0x13c>)
 8013ba4:	4847      	ldr	r0, [pc, #284]	; (8013cc4 <tcp_listen_with_backlog_and_err+0x140>)
 8013ba6:	f00c fc53 	bl	8020450 <iprintf>
 8013baa:	23f0      	movs	r3, #240	; 0xf0
 8013bac:	76fb      	strb	r3, [r7, #27]
 8013bae:	e079      	b.n	8013ca4 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8013bb0:	68fb      	ldr	r3, [r7, #12]
 8013bb2:	7d1b      	ldrb	r3, [r3, #20]
 8013bb4:	2b00      	cmp	r3, #0
 8013bb6:	d009      	beq.n	8013bcc <tcp_listen_with_backlog_and_err+0x48>
 8013bb8:	4b40      	ldr	r3, [pc, #256]	; (8013cbc <tcp_listen_with_backlog_and_err+0x138>)
 8013bba:	f240 325a 	movw	r2, #858	; 0x35a
 8013bbe:	4942      	ldr	r1, [pc, #264]	; (8013cc8 <tcp_listen_with_backlog_and_err+0x144>)
 8013bc0:	4840      	ldr	r0, [pc, #256]	; (8013cc4 <tcp_listen_with_backlog_and_err+0x140>)
 8013bc2:	f00c fc45 	bl	8020450 <iprintf>
 8013bc6:	23f1      	movs	r3, #241	; 0xf1
 8013bc8:	76fb      	strb	r3, [r7, #27]
 8013bca:	e06b      	b.n	8013ca4 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 8013bcc:	68fb      	ldr	r3, [r7, #12]
 8013bce:	7d1b      	ldrb	r3, [r3, #20]
 8013bd0:	2b01      	cmp	r3, #1
 8013bd2:	d104      	bne.n	8013bde <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 8013bd4:	68fb      	ldr	r3, [r7, #12]
 8013bd6:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 8013bd8:	23f7      	movs	r3, #247	; 0xf7
 8013bda:	76fb      	strb	r3, [r7, #27]
    goto done;
 8013bdc:	e062      	b.n	8013ca4 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8013bde:	2002      	movs	r0, #2
 8013be0:	f7fe f9b4 	bl	8011f4c <memp_malloc>
 8013be4:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 8013be6:	69fb      	ldr	r3, [r7, #28]
 8013be8:	2b00      	cmp	r3, #0
 8013bea:	d102      	bne.n	8013bf2 <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 8013bec:	23ff      	movs	r3, #255	; 0xff
 8013bee:	76fb      	strb	r3, [r7, #27]
    goto done;
 8013bf0:	e058      	b.n	8013ca4 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 8013bf2:	68fb      	ldr	r3, [r7, #12]
 8013bf4:	691a      	ldr	r2, [r3, #16]
 8013bf6:	69fb      	ldr	r3, [r7, #28]
 8013bf8:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 8013bfa:	68fb      	ldr	r3, [r7, #12]
 8013bfc:	8ada      	ldrh	r2, [r3, #22]
 8013bfe:	69fb      	ldr	r3, [r7, #28]
 8013c00:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 8013c02:	69fb      	ldr	r3, [r7, #28]
 8013c04:	2201      	movs	r2, #1
 8013c06:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 8013c08:	68fb      	ldr	r3, [r7, #12]
 8013c0a:	7d5a      	ldrb	r2, [r3, #21]
 8013c0c:	69fb      	ldr	r3, [r7, #28]
 8013c0e:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 8013c10:	68fb      	ldr	r3, [r7, #12]
 8013c12:	7a5a      	ldrb	r2, [r3, #9]
 8013c14:	69fb      	ldr	r3, [r7, #28]
 8013c16:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 8013c18:	69fb      	ldr	r3, [r7, #28]
 8013c1a:	2200      	movs	r2, #0
 8013c1c:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 8013c1e:	68fb      	ldr	r3, [r7, #12]
 8013c20:	7ada      	ldrb	r2, [r3, #11]
 8013c22:	69fb      	ldr	r3, [r7, #28]
 8013c24:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 8013c26:	68fb      	ldr	r3, [r7, #12]
 8013c28:	7a9a      	ldrb	r2, [r3, #10]
 8013c2a:	69fb      	ldr	r3, [r7, #28]
 8013c2c:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8013c2e:	68fb      	ldr	r3, [r7, #12]
 8013c30:	681a      	ldr	r2, [r3, #0]
 8013c32:	69fb      	ldr	r3, [r7, #28]
 8013c34:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 8013c36:	68fb      	ldr	r3, [r7, #12]
 8013c38:	8adb      	ldrh	r3, [r3, #22]
 8013c3a:	2b00      	cmp	r3, #0
 8013c3c:	d021      	beq.n	8013c82 <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8013c3e:	4b23      	ldr	r3, [pc, #140]	; (8013ccc <tcp_listen_with_backlog_and_err+0x148>)
 8013c40:	681b      	ldr	r3, [r3, #0]
 8013c42:	68fa      	ldr	r2, [r7, #12]
 8013c44:	429a      	cmp	r2, r3
 8013c46:	d105      	bne.n	8013c54 <tcp_listen_with_backlog_and_err+0xd0>
 8013c48:	4b20      	ldr	r3, [pc, #128]	; (8013ccc <tcp_listen_with_backlog_and_err+0x148>)
 8013c4a:	681b      	ldr	r3, [r3, #0]
 8013c4c:	68db      	ldr	r3, [r3, #12]
 8013c4e:	4a1f      	ldr	r2, [pc, #124]	; (8013ccc <tcp_listen_with_backlog_and_err+0x148>)
 8013c50:	6013      	str	r3, [r2, #0]
 8013c52:	e013      	b.n	8013c7c <tcp_listen_with_backlog_and_err+0xf8>
 8013c54:	4b1d      	ldr	r3, [pc, #116]	; (8013ccc <tcp_listen_with_backlog_and_err+0x148>)
 8013c56:	681b      	ldr	r3, [r3, #0]
 8013c58:	617b      	str	r3, [r7, #20]
 8013c5a:	e00c      	b.n	8013c76 <tcp_listen_with_backlog_and_err+0xf2>
 8013c5c:	697b      	ldr	r3, [r7, #20]
 8013c5e:	68db      	ldr	r3, [r3, #12]
 8013c60:	68fa      	ldr	r2, [r7, #12]
 8013c62:	429a      	cmp	r2, r3
 8013c64:	d104      	bne.n	8013c70 <tcp_listen_with_backlog_and_err+0xec>
 8013c66:	68fb      	ldr	r3, [r7, #12]
 8013c68:	68da      	ldr	r2, [r3, #12]
 8013c6a:	697b      	ldr	r3, [r7, #20]
 8013c6c:	60da      	str	r2, [r3, #12]
 8013c6e:	e005      	b.n	8013c7c <tcp_listen_with_backlog_and_err+0xf8>
 8013c70:	697b      	ldr	r3, [r7, #20]
 8013c72:	68db      	ldr	r3, [r3, #12]
 8013c74:	617b      	str	r3, [r7, #20]
 8013c76:	697b      	ldr	r3, [r7, #20]
 8013c78:	2b00      	cmp	r3, #0
 8013c7a:	d1ef      	bne.n	8013c5c <tcp_listen_with_backlog_and_err+0xd8>
 8013c7c:	68fb      	ldr	r3, [r7, #12]
 8013c7e:	2200      	movs	r2, #0
 8013c80:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 8013c82:	68f8      	ldr	r0, [r7, #12]
 8013c84:	f7ff fb76 	bl	8013374 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 8013c88:	69fb      	ldr	r3, [r7, #28]
 8013c8a:	4a11      	ldr	r2, [pc, #68]	; (8013cd0 <tcp_listen_with_backlog_and_err+0x14c>)
 8013c8c:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8013c8e:	4b11      	ldr	r3, [pc, #68]	; (8013cd4 <tcp_listen_with_backlog_and_err+0x150>)
 8013c90:	681a      	ldr	r2, [r3, #0]
 8013c92:	69fb      	ldr	r3, [r7, #28]
 8013c94:	60da      	str	r2, [r3, #12]
 8013c96:	4a0f      	ldr	r2, [pc, #60]	; (8013cd4 <tcp_listen_with_backlog_and_err+0x150>)
 8013c98:	69fb      	ldr	r3, [r7, #28]
 8013c9a:	6013      	str	r3, [r2, #0]
 8013c9c:	f005 fbde 	bl	801945c <tcp_timer_needed>
  res = ERR_OK;
 8013ca0:	2300      	movs	r3, #0
 8013ca2:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 8013ca4:	687b      	ldr	r3, [r7, #4]
 8013ca6:	2b00      	cmp	r3, #0
 8013ca8:	d002      	beq.n	8013cb0 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 8013caa:	687b      	ldr	r3, [r7, #4]
 8013cac:	7efa      	ldrb	r2, [r7, #27]
 8013cae:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 8013cb0:	69fb      	ldr	r3, [r7, #28]
}
 8013cb2:	4618      	mov	r0, r3
 8013cb4:	3720      	adds	r7, #32
 8013cb6:	46bd      	mov	sp, r7
 8013cb8:	bd80      	pop	{r7, pc}
 8013cba:	bf00      	nop
 8013cbc:	08024c24 	.word	0x08024c24
 8013cc0:	08024e18 	.word	0x08024e18
 8013cc4:	08024c68 	.word	0x08024c68
 8013cc8:	08024e48 	.word	0x08024e48
 8013ccc:	24007ddc 	.word	0x24007ddc
 8013cd0:	08013b45 	.word	0x08013b45
 8013cd4:	24007de0 	.word	0x24007de0

08013cd8 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8013cd8:	b580      	push	{r7, lr}
 8013cda:	b084      	sub	sp, #16
 8013cdc:	af00      	add	r7, sp, #0
 8013cde:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8013ce0:	687b      	ldr	r3, [r7, #4]
 8013ce2:	2b00      	cmp	r3, #0
 8013ce4:	d106      	bne.n	8013cf4 <tcp_update_rcv_ann_wnd+0x1c>
 8013ce6:	4b25      	ldr	r3, [pc, #148]	; (8013d7c <tcp_update_rcv_ann_wnd+0xa4>)
 8013ce8:	f240 32a6 	movw	r2, #934	; 0x3a6
 8013cec:	4924      	ldr	r1, [pc, #144]	; (8013d80 <tcp_update_rcv_ann_wnd+0xa8>)
 8013cee:	4825      	ldr	r0, [pc, #148]	; (8013d84 <tcp_update_rcv_ann_wnd+0xac>)
 8013cf0:	f00c fbae 	bl	8020450 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8013cf4:	687b      	ldr	r3, [r7, #4]
 8013cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013cf8:	687a      	ldr	r2, [r7, #4]
 8013cfa:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8013cfc:	4413      	add	r3, r2
 8013cfe:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8013d00:	687b      	ldr	r3, [r7, #4]
 8013d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013d04:	687a      	ldr	r2, [r7, #4]
 8013d06:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8013d08:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8013d0c:	bf28      	it	cs
 8013d0e:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8013d12:	b292      	uxth	r2, r2
 8013d14:	4413      	add	r3, r2
 8013d16:	68fa      	ldr	r2, [r7, #12]
 8013d18:	1ad3      	subs	r3, r2, r3
 8013d1a:	2b00      	cmp	r3, #0
 8013d1c:	db08      	blt.n	8013d30 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8013d1e:	687b      	ldr	r3, [r7, #4]
 8013d20:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8013d22:	687b      	ldr	r3, [r7, #4]
 8013d24:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8013d26:	687b      	ldr	r3, [r7, #4]
 8013d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013d2a:	68fa      	ldr	r2, [r7, #12]
 8013d2c:	1ad3      	subs	r3, r2, r3
 8013d2e:	e020      	b.n	8013d72 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8013d30:	687b      	ldr	r3, [r7, #4]
 8013d32:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013d34:	687b      	ldr	r3, [r7, #4]
 8013d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013d38:	1ad3      	subs	r3, r2, r3
 8013d3a:	2b00      	cmp	r3, #0
 8013d3c:	dd03      	ble.n	8013d46 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8013d3e:	687b      	ldr	r3, [r7, #4]
 8013d40:	2200      	movs	r2, #0
 8013d42:	855a      	strh	r2, [r3, #42]	; 0x2a
 8013d44:	e014      	b.n	8013d70 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8013d46:	687b      	ldr	r3, [r7, #4]
 8013d48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013d4a:	687b      	ldr	r3, [r7, #4]
 8013d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013d4e:	1ad3      	subs	r3, r2, r3
 8013d50:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8013d52:	68bb      	ldr	r3, [r7, #8]
 8013d54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013d58:	d306      	bcc.n	8013d68 <tcp_update_rcv_ann_wnd+0x90>
 8013d5a:	4b08      	ldr	r3, [pc, #32]	; (8013d7c <tcp_update_rcv_ann_wnd+0xa4>)
 8013d5c:	f240 32b6 	movw	r2, #950	; 0x3b6
 8013d60:	4909      	ldr	r1, [pc, #36]	; (8013d88 <tcp_update_rcv_ann_wnd+0xb0>)
 8013d62:	4808      	ldr	r0, [pc, #32]	; (8013d84 <tcp_update_rcv_ann_wnd+0xac>)
 8013d64:	f00c fb74 	bl	8020450 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8013d68:	68bb      	ldr	r3, [r7, #8]
 8013d6a:	b29a      	uxth	r2, r3
 8013d6c:	687b      	ldr	r3, [r7, #4]
 8013d6e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8013d70:	2300      	movs	r3, #0
  }
}
 8013d72:	4618      	mov	r0, r3
 8013d74:	3710      	adds	r7, #16
 8013d76:	46bd      	mov	sp, r7
 8013d78:	bd80      	pop	{r7, pc}
 8013d7a:	bf00      	nop
 8013d7c:	08024c24 	.word	0x08024c24
 8013d80:	08024e80 	.word	0x08024e80
 8013d84:	08024c68 	.word	0x08024c68
 8013d88:	08024ea4 	.word	0x08024ea4

08013d8c <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8013d8c:	b580      	push	{r7, lr}
 8013d8e:	b084      	sub	sp, #16
 8013d90:	af00      	add	r7, sp, #0
 8013d92:	6078      	str	r0, [r7, #4]
 8013d94:	460b      	mov	r3, r1
 8013d96:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8013d98:	687b      	ldr	r3, [r7, #4]
 8013d9a:	2b00      	cmp	r3, #0
 8013d9c:	d107      	bne.n	8013dae <tcp_recved+0x22>
 8013d9e:	4b1f      	ldr	r3, [pc, #124]	; (8013e1c <tcp_recved+0x90>)
 8013da0:	f240 32cf 	movw	r2, #975	; 0x3cf
 8013da4:	491e      	ldr	r1, [pc, #120]	; (8013e20 <tcp_recved+0x94>)
 8013da6:	481f      	ldr	r0, [pc, #124]	; (8013e24 <tcp_recved+0x98>)
 8013da8:	f00c fb52 	bl	8020450 <iprintf>
 8013dac:	e032      	b.n	8013e14 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8013dae:	687b      	ldr	r3, [r7, #4]
 8013db0:	7d1b      	ldrb	r3, [r3, #20]
 8013db2:	2b01      	cmp	r3, #1
 8013db4:	d106      	bne.n	8013dc4 <tcp_recved+0x38>
 8013db6:	4b19      	ldr	r3, [pc, #100]	; (8013e1c <tcp_recved+0x90>)
 8013db8:	f240 32d2 	movw	r2, #978	; 0x3d2
 8013dbc:	491a      	ldr	r1, [pc, #104]	; (8013e28 <tcp_recved+0x9c>)
 8013dbe:	4819      	ldr	r0, [pc, #100]	; (8013e24 <tcp_recved+0x98>)
 8013dc0:	f00c fb46 	bl	8020450 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8013dc4:	687b      	ldr	r3, [r7, #4]
 8013dc6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8013dc8:	887b      	ldrh	r3, [r7, #2]
 8013dca:	4413      	add	r3, r2
 8013dcc:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8013dce:	89fb      	ldrh	r3, [r7, #14]
 8013dd0:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8013dd4:	d804      	bhi.n	8013de0 <tcp_recved+0x54>
 8013dd6:	687b      	ldr	r3, [r7, #4]
 8013dd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013dda:	89fa      	ldrh	r2, [r7, #14]
 8013ddc:	429a      	cmp	r2, r3
 8013dde:	d204      	bcs.n	8013dea <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8013de0:	687b      	ldr	r3, [r7, #4]
 8013de2:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8013de6:	851a      	strh	r2, [r3, #40]	; 0x28
 8013de8:	e002      	b.n	8013df0 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8013dea:	687b      	ldr	r3, [r7, #4]
 8013dec:	89fa      	ldrh	r2, [r7, #14]
 8013dee:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8013df0:	6878      	ldr	r0, [r7, #4]
 8013df2:	f7ff ff71 	bl	8013cd8 <tcp_update_rcv_ann_wnd>
 8013df6:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8013df8:	68bb      	ldr	r3, [r7, #8]
 8013dfa:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8013dfe:	d309      	bcc.n	8013e14 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8013e00:	687b      	ldr	r3, [r7, #4]
 8013e02:	8b5b      	ldrh	r3, [r3, #26]
 8013e04:	f043 0302 	orr.w	r3, r3, #2
 8013e08:	b29a      	uxth	r2, r3
 8013e0a:	687b      	ldr	r3, [r7, #4]
 8013e0c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8013e0e:	6878      	ldr	r0, [r7, #4]
 8013e10:	f004 fbae 	bl	8018570 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8013e14:	3710      	adds	r7, #16
 8013e16:	46bd      	mov	sp, r7
 8013e18:	bd80      	pop	{r7, pc}
 8013e1a:	bf00      	nop
 8013e1c:	08024c24 	.word	0x08024c24
 8013e20:	08024ec0 	.word	0x08024ec0
 8013e24:	08024c68 	.word	0x08024c68
 8013e28:	08024ed8 	.word	0x08024ed8

08013e2c <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8013e2c:	b480      	push	{r7}
 8013e2e:	b083      	sub	sp, #12
 8013e30:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 8013e32:	2300      	movs	r3, #0
 8013e34:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 8013e36:	4b1e      	ldr	r3, [pc, #120]	; (8013eb0 <tcp_new_port+0x84>)
 8013e38:	881b      	ldrh	r3, [r3, #0]
 8013e3a:	3301      	adds	r3, #1
 8013e3c:	b29a      	uxth	r2, r3
 8013e3e:	4b1c      	ldr	r3, [pc, #112]	; (8013eb0 <tcp_new_port+0x84>)
 8013e40:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8013e42:	4b1b      	ldr	r3, [pc, #108]	; (8013eb0 <tcp_new_port+0x84>)
 8013e44:	881b      	ldrh	r3, [r3, #0]
 8013e46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013e4a:	4293      	cmp	r3, r2
 8013e4c:	d103      	bne.n	8013e56 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8013e4e:	4b18      	ldr	r3, [pc, #96]	; (8013eb0 <tcp_new_port+0x84>)
 8013e50:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8013e54:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8013e56:	2300      	movs	r3, #0
 8013e58:	71fb      	strb	r3, [r7, #7]
 8013e5a:	e01e      	b.n	8013e9a <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8013e5c:	79fb      	ldrb	r3, [r7, #7]
 8013e5e:	4a15      	ldr	r2, [pc, #84]	; (8013eb4 <tcp_new_port+0x88>)
 8013e60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013e64:	681b      	ldr	r3, [r3, #0]
 8013e66:	603b      	str	r3, [r7, #0]
 8013e68:	e011      	b.n	8013e8e <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 8013e6a:	683b      	ldr	r3, [r7, #0]
 8013e6c:	8ada      	ldrh	r2, [r3, #22]
 8013e6e:	4b10      	ldr	r3, [pc, #64]	; (8013eb0 <tcp_new_port+0x84>)
 8013e70:	881b      	ldrh	r3, [r3, #0]
 8013e72:	429a      	cmp	r2, r3
 8013e74:	d108      	bne.n	8013e88 <tcp_new_port+0x5c>
        n++;
 8013e76:	88bb      	ldrh	r3, [r7, #4]
 8013e78:	3301      	adds	r3, #1
 8013e7a:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8013e7c:	88bb      	ldrh	r3, [r7, #4]
 8013e7e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8013e82:	d3d8      	bcc.n	8013e36 <tcp_new_port+0xa>
          return 0;
 8013e84:	2300      	movs	r3, #0
 8013e86:	e00d      	b.n	8013ea4 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8013e88:	683b      	ldr	r3, [r7, #0]
 8013e8a:	68db      	ldr	r3, [r3, #12]
 8013e8c:	603b      	str	r3, [r7, #0]
 8013e8e:	683b      	ldr	r3, [r7, #0]
 8013e90:	2b00      	cmp	r3, #0
 8013e92:	d1ea      	bne.n	8013e6a <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8013e94:	79fb      	ldrb	r3, [r7, #7]
 8013e96:	3301      	adds	r3, #1
 8013e98:	71fb      	strb	r3, [r7, #7]
 8013e9a:	79fb      	ldrb	r3, [r7, #7]
 8013e9c:	2b03      	cmp	r3, #3
 8013e9e:	d9dd      	bls.n	8013e5c <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8013ea0:	4b03      	ldr	r3, [pc, #12]	; (8013eb0 <tcp_new_port+0x84>)
 8013ea2:	881b      	ldrh	r3, [r3, #0]
}
 8013ea4:	4618      	mov	r0, r3
 8013ea6:	370c      	adds	r7, #12
 8013ea8:	46bd      	mov	sp, r7
 8013eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013eae:	4770      	bx	lr
 8013eb0:	240002f4 	.word	0x240002f4
 8013eb4:	0802704c 	.word	0x0802704c

08013eb8 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8013eb8:	b5b0      	push	{r4, r5, r7, lr}
 8013eba:	b090      	sub	sp, #64	; 0x40
 8013ebc:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8013ebe:	2300      	movs	r3, #0
 8013ec0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8013ec4:	4b94      	ldr	r3, [pc, #592]	; (8014118 <tcp_slowtmr+0x260>)
 8013ec6:	681b      	ldr	r3, [r3, #0]
 8013ec8:	3301      	adds	r3, #1
 8013eca:	4a93      	ldr	r2, [pc, #588]	; (8014118 <tcp_slowtmr+0x260>)
 8013ecc:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8013ece:	4b93      	ldr	r3, [pc, #588]	; (801411c <tcp_slowtmr+0x264>)
 8013ed0:	781b      	ldrb	r3, [r3, #0]
 8013ed2:	3301      	adds	r3, #1
 8013ed4:	b2da      	uxtb	r2, r3
 8013ed6:	4b91      	ldr	r3, [pc, #580]	; (801411c <tcp_slowtmr+0x264>)
 8013ed8:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8013eda:	2300      	movs	r3, #0
 8013edc:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8013ede:	4b90      	ldr	r3, [pc, #576]	; (8014120 <tcp_slowtmr+0x268>)
 8013ee0:	681b      	ldr	r3, [r3, #0]
 8013ee2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8013ee4:	e29d      	b.n	8014422 <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8013ee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ee8:	7d1b      	ldrb	r3, [r3, #20]
 8013eea:	2b00      	cmp	r3, #0
 8013eec:	d106      	bne.n	8013efc <tcp_slowtmr+0x44>
 8013eee:	4b8d      	ldr	r3, [pc, #564]	; (8014124 <tcp_slowtmr+0x26c>)
 8013ef0:	f240 42be 	movw	r2, #1214	; 0x4be
 8013ef4:	498c      	ldr	r1, [pc, #560]	; (8014128 <tcp_slowtmr+0x270>)
 8013ef6:	488d      	ldr	r0, [pc, #564]	; (801412c <tcp_slowtmr+0x274>)
 8013ef8:	f00c faaa 	bl	8020450 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8013efc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013efe:	7d1b      	ldrb	r3, [r3, #20]
 8013f00:	2b01      	cmp	r3, #1
 8013f02:	d106      	bne.n	8013f12 <tcp_slowtmr+0x5a>
 8013f04:	4b87      	ldr	r3, [pc, #540]	; (8014124 <tcp_slowtmr+0x26c>)
 8013f06:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8013f0a:	4989      	ldr	r1, [pc, #548]	; (8014130 <tcp_slowtmr+0x278>)
 8013f0c:	4887      	ldr	r0, [pc, #540]	; (801412c <tcp_slowtmr+0x274>)
 8013f0e:	f00c fa9f 	bl	8020450 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8013f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f14:	7d1b      	ldrb	r3, [r3, #20]
 8013f16:	2b0a      	cmp	r3, #10
 8013f18:	d106      	bne.n	8013f28 <tcp_slowtmr+0x70>
 8013f1a:	4b82      	ldr	r3, [pc, #520]	; (8014124 <tcp_slowtmr+0x26c>)
 8013f1c:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8013f20:	4984      	ldr	r1, [pc, #528]	; (8014134 <tcp_slowtmr+0x27c>)
 8013f22:	4882      	ldr	r0, [pc, #520]	; (801412c <tcp_slowtmr+0x274>)
 8013f24:	f00c fa94 	bl	8020450 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8013f28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f2a:	7f9a      	ldrb	r2, [r3, #30]
 8013f2c:	4b7b      	ldr	r3, [pc, #492]	; (801411c <tcp_slowtmr+0x264>)
 8013f2e:	781b      	ldrb	r3, [r3, #0]
 8013f30:	429a      	cmp	r2, r3
 8013f32:	d105      	bne.n	8013f40 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8013f34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f36:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8013f38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f3a:	68db      	ldr	r3, [r3, #12]
 8013f3c:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8013f3e:	e270      	b.n	8014422 <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 8013f40:	4b76      	ldr	r3, [pc, #472]	; (801411c <tcp_slowtmr+0x264>)
 8013f42:	781a      	ldrb	r2, [r3, #0]
 8013f44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f46:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8013f48:	2300      	movs	r3, #0
 8013f4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8013f4e:	2300      	movs	r3, #0
 8013f50:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8013f54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f56:	7d1b      	ldrb	r3, [r3, #20]
 8013f58:	2b02      	cmp	r3, #2
 8013f5a:	d10a      	bne.n	8013f72 <tcp_slowtmr+0xba>
 8013f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f5e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013f62:	2b05      	cmp	r3, #5
 8013f64:	d905      	bls.n	8013f72 <tcp_slowtmr+0xba>
      ++pcb_remove;
 8013f66:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013f6a:	3301      	adds	r3, #1
 8013f6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013f70:	e11e      	b.n	80141b0 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8013f72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f74:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013f78:	2b0b      	cmp	r3, #11
 8013f7a:	d905      	bls.n	8013f88 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8013f7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013f80:	3301      	adds	r3, #1
 8013f82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013f86:	e113      	b.n	80141b0 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8013f88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f8a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8013f8e:	2b00      	cmp	r3, #0
 8013f90:	d075      	beq.n	801407e <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8013f92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013f96:	2b00      	cmp	r3, #0
 8013f98:	d006      	beq.n	8013fa8 <tcp_slowtmr+0xf0>
 8013f9a:	4b62      	ldr	r3, [pc, #392]	; (8014124 <tcp_slowtmr+0x26c>)
 8013f9c:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8013fa0:	4965      	ldr	r1, [pc, #404]	; (8014138 <tcp_slowtmr+0x280>)
 8013fa2:	4862      	ldr	r0, [pc, #392]	; (801412c <tcp_slowtmr+0x274>)
 8013fa4:	f00c fa54 	bl	8020450 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8013fa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013faa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013fac:	2b00      	cmp	r3, #0
 8013fae:	d106      	bne.n	8013fbe <tcp_slowtmr+0x106>
 8013fb0:	4b5c      	ldr	r3, [pc, #368]	; (8014124 <tcp_slowtmr+0x26c>)
 8013fb2:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8013fb6:	4961      	ldr	r1, [pc, #388]	; (801413c <tcp_slowtmr+0x284>)
 8013fb8:	485c      	ldr	r0, [pc, #368]	; (801412c <tcp_slowtmr+0x274>)
 8013fba:	f00c fa49 	bl	8020450 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8013fbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013fc0:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8013fc4:	2b0b      	cmp	r3, #11
 8013fc6:	d905      	bls.n	8013fd4 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8013fc8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013fcc:	3301      	adds	r3, #1
 8013fce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013fd2:	e0ed      	b.n	80141b0 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8013fd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013fd6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8013fda:	3b01      	subs	r3, #1
 8013fdc:	4a58      	ldr	r2, [pc, #352]	; (8014140 <tcp_slowtmr+0x288>)
 8013fde:	5cd3      	ldrb	r3, [r2, r3]
 8013fe0:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8013fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013fe4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8013fe8:	7c7a      	ldrb	r2, [r7, #17]
 8013fea:	429a      	cmp	r2, r3
 8013fec:	d907      	bls.n	8013ffe <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8013fee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ff0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8013ff4:	3301      	adds	r3, #1
 8013ff6:	b2da      	uxtb	r2, r3
 8013ff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ffa:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8013ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014000:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8014004:	7c7a      	ldrb	r2, [r7, #17]
 8014006:	429a      	cmp	r2, r3
 8014008:	f200 80d2 	bhi.w	80141b0 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 801400c:	2301      	movs	r3, #1
 801400e:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8014010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014012:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8014016:	2b00      	cmp	r3, #0
 8014018:	d108      	bne.n	801402c <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 801401a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801401c:	f005 f950 	bl	80192c0 <tcp_zero_window_probe>
 8014020:	4603      	mov	r3, r0
 8014022:	2b00      	cmp	r3, #0
 8014024:	d014      	beq.n	8014050 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8014026:	2300      	movs	r3, #0
 8014028:	623b      	str	r3, [r7, #32]
 801402a:	e011      	b.n	8014050 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 801402c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801402e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8014032:	4619      	mov	r1, r3
 8014034:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014036:	f004 f815 	bl	8018064 <tcp_split_unsent_seg>
 801403a:	4603      	mov	r3, r0
 801403c:	2b00      	cmp	r3, #0
 801403e:	d107      	bne.n	8014050 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8014040:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014042:	f004 fa95 	bl	8018570 <tcp_output>
 8014046:	4603      	mov	r3, r0
 8014048:	2b00      	cmp	r3, #0
 801404a:	d101      	bne.n	8014050 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 801404c:	2300      	movs	r3, #0
 801404e:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8014050:	6a3b      	ldr	r3, [r7, #32]
 8014052:	2b00      	cmp	r3, #0
 8014054:	f000 80ac 	beq.w	80141b0 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8014058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801405a:	2200      	movs	r2, #0
 801405c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8014060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014062:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8014066:	2b06      	cmp	r3, #6
 8014068:	f200 80a2 	bhi.w	80141b0 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 801406c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801406e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8014072:	3301      	adds	r3, #1
 8014074:	b2da      	uxtb	r2, r3
 8014076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014078:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 801407c:	e098      	b.n	80141b0 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 801407e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014080:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8014084:	2b00      	cmp	r3, #0
 8014086:	db0f      	blt.n	80140a8 <tcp_slowtmr+0x1f0>
 8014088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801408a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801408e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8014092:	4293      	cmp	r3, r2
 8014094:	d008      	beq.n	80140a8 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8014096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014098:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801409c:	b29b      	uxth	r3, r3
 801409e:	3301      	adds	r3, #1
 80140a0:	b29b      	uxth	r3, r3
 80140a2:	b21a      	sxth	r2, r3
 80140a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80140a6:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 80140a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80140aa:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 80140ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80140b0:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80140b4:	429a      	cmp	r2, r3
 80140b6:	db7b      	blt.n	80141b0 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 80140b8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80140ba:	f004 fd4d 	bl	8018b58 <tcp_rexmit_rto_prepare>
 80140be:	4603      	mov	r3, r0
 80140c0:	2b00      	cmp	r3, #0
 80140c2:	d007      	beq.n	80140d4 <tcp_slowtmr+0x21c>
 80140c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80140c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80140c8:	2b00      	cmp	r3, #0
 80140ca:	d171      	bne.n	80141b0 <tcp_slowtmr+0x2f8>
 80140cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80140ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80140d0:	2b00      	cmp	r3, #0
 80140d2:	d06d      	beq.n	80141b0 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 80140d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80140d6:	7d1b      	ldrb	r3, [r3, #20]
 80140d8:	2b02      	cmp	r3, #2
 80140da:	d03a      	beq.n	8014152 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 80140dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80140de:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80140e2:	2b0c      	cmp	r3, #12
 80140e4:	bf28      	it	cs
 80140e6:	230c      	movcs	r3, #12
 80140e8:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 80140ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80140ec:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80140f0:	10db      	asrs	r3, r3, #3
 80140f2:	b21b      	sxth	r3, r3
 80140f4:	461a      	mov	r2, r3
 80140f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80140f8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80140fc:	4413      	add	r3, r2
 80140fe:	7efa      	ldrb	r2, [r7, #27]
 8014100:	4910      	ldr	r1, [pc, #64]	; (8014144 <tcp_slowtmr+0x28c>)
 8014102:	5c8a      	ldrb	r2, [r1, r2]
 8014104:	4093      	lsls	r3, r2
 8014106:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8014108:	697b      	ldr	r3, [r7, #20]
 801410a:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 801410e:	4293      	cmp	r3, r2
 8014110:	dc1a      	bgt.n	8014148 <tcp_slowtmr+0x290>
 8014112:	697b      	ldr	r3, [r7, #20]
 8014114:	b21a      	sxth	r2, r3
 8014116:	e019      	b.n	801414c <tcp_slowtmr+0x294>
 8014118:	24007dd8 	.word	0x24007dd8
 801411c:	24007dee 	.word	0x24007dee
 8014120:	24007de4 	.word	0x24007de4
 8014124:	08024c24 	.word	0x08024c24
 8014128:	08024f68 	.word	0x08024f68
 801412c:	08024c68 	.word	0x08024c68
 8014130:	08024f94 	.word	0x08024f94
 8014134:	08024fc0 	.word	0x08024fc0
 8014138:	08024ff0 	.word	0x08024ff0
 801413c:	08025024 	.word	0x08025024
 8014140:	08027044 	.word	0x08027044
 8014144:	08027034 	.word	0x08027034
 8014148:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801414c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801414e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8014152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014154:	2200      	movs	r2, #0
 8014156:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8014158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801415a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801415e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014160:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014164:	4293      	cmp	r3, r2
 8014166:	bf28      	it	cs
 8014168:	4613      	movcs	r3, r2
 801416a:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 801416c:	8a7b      	ldrh	r3, [r7, #18]
 801416e:	085b      	lsrs	r3, r3, #1
 8014170:	b29a      	uxth	r2, r3
 8014172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014174:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8014178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801417a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801417e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014180:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014182:	005b      	lsls	r3, r3, #1
 8014184:	b29b      	uxth	r3, r3
 8014186:	429a      	cmp	r2, r3
 8014188:	d206      	bcs.n	8014198 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 801418a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801418c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801418e:	005b      	lsls	r3, r3, #1
 8014190:	b29a      	uxth	r2, r3
 8014192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014194:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8014198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801419a:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 801419c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801419e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 80141a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80141a4:	2200      	movs	r2, #0
 80141a6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 80141aa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80141ac:	f004 fd44 	bl	8018c38 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 80141b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80141b2:	7d1b      	ldrb	r3, [r3, #20]
 80141b4:	2b06      	cmp	r3, #6
 80141b6:	d111      	bne.n	80141dc <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 80141b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80141ba:	8b5b      	ldrh	r3, [r3, #26]
 80141bc:	f003 0310 	and.w	r3, r3, #16
 80141c0:	2b00      	cmp	r3, #0
 80141c2:	d00b      	beq.n	80141dc <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 80141c4:	4b9c      	ldr	r3, [pc, #624]	; (8014438 <tcp_slowtmr+0x580>)
 80141c6:	681a      	ldr	r2, [r3, #0]
 80141c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80141ca:	6a1b      	ldr	r3, [r3, #32]
 80141cc:	1ad3      	subs	r3, r2, r3
 80141ce:	2b28      	cmp	r3, #40	; 0x28
 80141d0:	d904      	bls.n	80141dc <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 80141d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80141d6:	3301      	adds	r3, #1
 80141d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80141dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80141de:	7a5b      	ldrb	r3, [r3, #9]
 80141e0:	f003 0308 	and.w	r3, r3, #8
 80141e4:	2b00      	cmp	r3, #0
 80141e6:	d04a      	beq.n	801427e <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 80141e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80141ea:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80141ec:	2b04      	cmp	r3, #4
 80141ee:	d003      	beq.n	80141f8 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 80141f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80141f2:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 80141f4:	2b07      	cmp	r3, #7
 80141f6:	d142      	bne.n	801427e <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80141f8:	4b8f      	ldr	r3, [pc, #572]	; (8014438 <tcp_slowtmr+0x580>)
 80141fa:	681a      	ldr	r2, [r3, #0]
 80141fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80141fe:	6a1b      	ldr	r3, [r3, #32]
 8014200:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8014202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014204:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8014208:	4b8c      	ldr	r3, [pc, #560]	; (801443c <tcp_slowtmr+0x584>)
 801420a:	440b      	add	r3, r1
 801420c:	498c      	ldr	r1, [pc, #560]	; (8014440 <tcp_slowtmr+0x588>)
 801420e:	fba1 1303 	umull	r1, r3, r1, r3
 8014212:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8014214:	429a      	cmp	r2, r3
 8014216:	d90a      	bls.n	801422e <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8014218:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801421c:	3301      	adds	r3, #1
 801421e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8014222:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014226:	3301      	adds	r3, #1
 8014228:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801422c:	e027      	b.n	801427e <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801422e:	4b82      	ldr	r3, [pc, #520]	; (8014438 <tcp_slowtmr+0x580>)
 8014230:	681a      	ldr	r2, [r3, #0]
 8014232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014234:	6a1b      	ldr	r3, [r3, #32]
 8014236:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8014238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801423a:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 801423e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014240:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8014244:	4618      	mov	r0, r3
 8014246:	4b7f      	ldr	r3, [pc, #508]	; (8014444 <tcp_slowtmr+0x58c>)
 8014248:	fb00 f303 	mul.w	r3, r0, r3
 801424c:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 801424e:	497c      	ldr	r1, [pc, #496]	; (8014440 <tcp_slowtmr+0x588>)
 8014250:	fba1 1303 	umull	r1, r3, r1, r3
 8014254:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8014256:	429a      	cmp	r2, r3
 8014258:	d911      	bls.n	801427e <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 801425a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801425c:	f004 fff0 	bl	8019240 <tcp_keepalive>
 8014260:	4603      	mov	r3, r0
 8014262:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8014266:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 801426a:	2b00      	cmp	r3, #0
 801426c:	d107      	bne.n	801427e <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 801426e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014270:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8014274:	3301      	adds	r3, #1
 8014276:	b2da      	uxtb	r2, r3
 8014278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801427a:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 801427e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014280:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014282:	2b00      	cmp	r3, #0
 8014284:	d011      	beq.n	80142aa <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8014286:	4b6c      	ldr	r3, [pc, #432]	; (8014438 <tcp_slowtmr+0x580>)
 8014288:	681a      	ldr	r2, [r3, #0]
 801428a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801428c:	6a1b      	ldr	r3, [r3, #32]
 801428e:	1ad2      	subs	r2, r2, r3
 8014290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014292:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8014296:	4619      	mov	r1, r3
 8014298:	460b      	mov	r3, r1
 801429a:	005b      	lsls	r3, r3, #1
 801429c:	440b      	add	r3, r1
 801429e:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 80142a0:	429a      	cmp	r2, r3
 80142a2:	d302      	bcc.n	80142aa <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 80142a4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80142a6:	f000 feab 	bl	8015000 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 80142aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142ac:	7d1b      	ldrb	r3, [r3, #20]
 80142ae:	2b03      	cmp	r3, #3
 80142b0:	d10b      	bne.n	80142ca <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80142b2:	4b61      	ldr	r3, [pc, #388]	; (8014438 <tcp_slowtmr+0x580>)
 80142b4:	681a      	ldr	r2, [r3, #0]
 80142b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142b8:	6a1b      	ldr	r3, [r3, #32]
 80142ba:	1ad3      	subs	r3, r2, r3
 80142bc:	2b28      	cmp	r3, #40	; 0x28
 80142be:	d904      	bls.n	80142ca <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 80142c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80142c4:	3301      	adds	r3, #1
 80142c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 80142ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142cc:	7d1b      	ldrb	r3, [r3, #20]
 80142ce:	2b09      	cmp	r3, #9
 80142d0:	d10b      	bne.n	80142ea <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80142d2:	4b59      	ldr	r3, [pc, #356]	; (8014438 <tcp_slowtmr+0x580>)
 80142d4:	681a      	ldr	r2, [r3, #0]
 80142d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142d8:	6a1b      	ldr	r3, [r3, #32]
 80142da:	1ad3      	subs	r3, r2, r3
 80142dc:	2bf0      	cmp	r3, #240	; 0xf0
 80142de:	d904      	bls.n	80142ea <tcp_slowtmr+0x432>
        ++pcb_remove;
 80142e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80142e4:	3301      	adds	r3, #1
 80142e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80142ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80142ee:	2b00      	cmp	r3, #0
 80142f0:	d060      	beq.n	80143b4 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 80142f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80142f8:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 80142fa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80142fc:	f000 fccc 	bl	8014c98 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8014300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014302:	2b00      	cmp	r3, #0
 8014304:	d010      	beq.n	8014328 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8014306:	4b50      	ldr	r3, [pc, #320]	; (8014448 <tcp_slowtmr+0x590>)
 8014308:	681b      	ldr	r3, [r3, #0]
 801430a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801430c:	429a      	cmp	r2, r3
 801430e:	d106      	bne.n	801431e <tcp_slowtmr+0x466>
 8014310:	4b4e      	ldr	r3, [pc, #312]	; (801444c <tcp_slowtmr+0x594>)
 8014312:	f240 526d 	movw	r2, #1389	; 0x56d
 8014316:	494e      	ldr	r1, [pc, #312]	; (8014450 <tcp_slowtmr+0x598>)
 8014318:	484e      	ldr	r0, [pc, #312]	; (8014454 <tcp_slowtmr+0x59c>)
 801431a:	f00c f899 	bl	8020450 <iprintf>
        prev->next = pcb->next;
 801431e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014320:	68da      	ldr	r2, [r3, #12]
 8014322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014324:	60da      	str	r2, [r3, #12]
 8014326:	e00f      	b.n	8014348 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8014328:	4b47      	ldr	r3, [pc, #284]	; (8014448 <tcp_slowtmr+0x590>)
 801432a:	681b      	ldr	r3, [r3, #0]
 801432c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801432e:	429a      	cmp	r2, r3
 8014330:	d006      	beq.n	8014340 <tcp_slowtmr+0x488>
 8014332:	4b46      	ldr	r3, [pc, #280]	; (801444c <tcp_slowtmr+0x594>)
 8014334:	f240 5271 	movw	r2, #1393	; 0x571
 8014338:	4947      	ldr	r1, [pc, #284]	; (8014458 <tcp_slowtmr+0x5a0>)
 801433a:	4846      	ldr	r0, [pc, #280]	; (8014454 <tcp_slowtmr+0x59c>)
 801433c:	f00c f888 	bl	8020450 <iprintf>
        tcp_active_pcbs = pcb->next;
 8014340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014342:	68db      	ldr	r3, [r3, #12]
 8014344:	4a40      	ldr	r2, [pc, #256]	; (8014448 <tcp_slowtmr+0x590>)
 8014346:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8014348:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801434c:	2b00      	cmp	r3, #0
 801434e:	d013      	beq.n	8014378 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8014350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014352:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8014354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014356:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8014358:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 801435a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801435c:	3304      	adds	r3, #4
 801435e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014360:	8ad2      	ldrh	r2, [r2, #22]
 8014362:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014364:	8b09      	ldrh	r1, [r1, #24]
 8014366:	9102      	str	r1, [sp, #8]
 8014368:	9201      	str	r2, [sp, #4]
 801436a:	9300      	str	r3, [sp, #0]
 801436c:	462b      	mov	r3, r5
 801436e:	4622      	mov	r2, r4
 8014370:	4601      	mov	r1, r0
 8014372:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014374:	f004 feb0 	bl	80190d8 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8014378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801437a:	691b      	ldr	r3, [r3, #16]
 801437c:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 801437e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014380:	7d1b      	ldrb	r3, [r3, #20]
 8014382:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8014384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014386:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8014388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801438a:	68db      	ldr	r3, [r3, #12]
 801438c:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 801438e:	6838      	ldr	r0, [r7, #0]
 8014390:	f7fe fff0 	bl	8013374 <tcp_free>

      tcp_active_pcbs_changed = 0;
 8014394:	4b31      	ldr	r3, [pc, #196]	; (801445c <tcp_slowtmr+0x5a4>)
 8014396:	2200      	movs	r2, #0
 8014398:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 801439a:	68fb      	ldr	r3, [r7, #12]
 801439c:	2b00      	cmp	r3, #0
 801439e:	d004      	beq.n	80143aa <tcp_slowtmr+0x4f2>
 80143a0:	68fb      	ldr	r3, [r7, #12]
 80143a2:	f06f 010c 	mvn.w	r1, #12
 80143a6:	68b8      	ldr	r0, [r7, #8]
 80143a8:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 80143aa:	4b2c      	ldr	r3, [pc, #176]	; (801445c <tcp_slowtmr+0x5a4>)
 80143ac:	781b      	ldrb	r3, [r3, #0]
 80143ae:	2b00      	cmp	r3, #0
 80143b0:	d037      	beq.n	8014422 <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 80143b2:	e592      	b.n	8013eda <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 80143b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80143b6:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80143b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80143ba:	68db      	ldr	r3, [r3, #12]
 80143bc:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 80143be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80143c0:	7f1b      	ldrb	r3, [r3, #28]
 80143c2:	3301      	adds	r3, #1
 80143c4:	b2da      	uxtb	r2, r3
 80143c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80143c8:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 80143ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80143cc:	7f1a      	ldrb	r2, [r3, #28]
 80143ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80143d0:	7f5b      	ldrb	r3, [r3, #29]
 80143d2:	429a      	cmp	r2, r3
 80143d4:	d325      	bcc.n	8014422 <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 80143d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80143d8:	2200      	movs	r2, #0
 80143da:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 80143dc:	4b1f      	ldr	r3, [pc, #124]	; (801445c <tcp_slowtmr+0x5a4>)
 80143de:	2200      	movs	r2, #0
 80143e0:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 80143e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80143e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80143e8:	2b00      	cmp	r3, #0
 80143ea:	d00b      	beq.n	8014404 <tcp_slowtmr+0x54c>
 80143ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80143ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80143f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80143f4:	6912      	ldr	r2, [r2, #16]
 80143f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80143f8:	4610      	mov	r0, r2
 80143fa:	4798      	blx	r3
 80143fc:	4603      	mov	r3, r0
 80143fe:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8014402:	e002      	b.n	801440a <tcp_slowtmr+0x552>
 8014404:	2300      	movs	r3, #0
 8014406:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 801440a:	4b14      	ldr	r3, [pc, #80]	; (801445c <tcp_slowtmr+0x5a4>)
 801440c:	781b      	ldrb	r3, [r3, #0]
 801440e:	2b00      	cmp	r3, #0
 8014410:	d000      	beq.n	8014414 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 8014412:	e562      	b.n	8013eda <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8014414:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8014418:	2b00      	cmp	r3, #0
 801441a:	d102      	bne.n	8014422 <tcp_slowtmr+0x56a>
          tcp_output(prev);
 801441c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801441e:	f004 f8a7 	bl	8018570 <tcp_output>
  while (pcb != NULL) {
 8014422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014424:	2b00      	cmp	r3, #0
 8014426:	f47f ad5e 	bne.w	8013ee6 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 801442a:	2300      	movs	r3, #0
 801442c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 801442e:	4b0c      	ldr	r3, [pc, #48]	; (8014460 <tcp_slowtmr+0x5a8>)
 8014430:	681b      	ldr	r3, [r3, #0]
 8014432:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8014434:	e069      	b.n	801450a <tcp_slowtmr+0x652>
 8014436:	bf00      	nop
 8014438:	24007dd8 	.word	0x24007dd8
 801443c:	000a4cb8 	.word	0x000a4cb8
 8014440:	10624dd3 	.word	0x10624dd3
 8014444:	000124f8 	.word	0x000124f8
 8014448:	24007de4 	.word	0x24007de4
 801444c:	08024c24 	.word	0x08024c24
 8014450:	0802505c 	.word	0x0802505c
 8014454:	08024c68 	.word	0x08024c68
 8014458:	08025088 	.word	0x08025088
 801445c:	24007dec 	.word	0x24007dec
 8014460:	24007de8 	.word	0x24007de8
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8014464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014466:	7d1b      	ldrb	r3, [r3, #20]
 8014468:	2b0a      	cmp	r3, #10
 801446a:	d006      	beq.n	801447a <tcp_slowtmr+0x5c2>
 801446c:	4b2b      	ldr	r3, [pc, #172]	; (801451c <tcp_slowtmr+0x664>)
 801446e:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8014472:	492b      	ldr	r1, [pc, #172]	; (8014520 <tcp_slowtmr+0x668>)
 8014474:	482b      	ldr	r0, [pc, #172]	; (8014524 <tcp_slowtmr+0x66c>)
 8014476:	f00b ffeb 	bl	8020450 <iprintf>
    pcb_remove = 0;
 801447a:	2300      	movs	r3, #0
 801447c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8014480:	4b29      	ldr	r3, [pc, #164]	; (8014528 <tcp_slowtmr+0x670>)
 8014482:	681a      	ldr	r2, [r3, #0]
 8014484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014486:	6a1b      	ldr	r3, [r3, #32]
 8014488:	1ad3      	subs	r3, r2, r3
 801448a:	2bf0      	cmp	r3, #240	; 0xf0
 801448c:	d904      	bls.n	8014498 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 801448e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014492:	3301      	adds	r3, #1
 8014494:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8014498:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801449c:	2b00      	cmp	r3, #0
 801449e:	d02f      	beq.n	8014500 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 80144a0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80144a2:	f000 fbf9 	bl	8014c98 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 80144a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80144a8:	2b00      	cmp	r3, #0
 80144aa:	d010      	beq.n	80144ce <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 80144ac:	4b1f      	ldr	r3, [pc, #124]	; (801452c <tcp_slowtmr+0x674>)
 80144ae:	681b      	ldr	r3, [r3, #0]
 80144b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80144b2:	429a      	cmp	r2, r3
 80144b4:	d106      	bne.n	80144c4 <tcp_slowtmr+0x60c>
 80144b6:	4b19      	ldr	r3, [pc, #100]	; (801451c <tcp_slowtmr+0x664>)
 80144b8:	f240 52af 	movw	r2, #1455	; 0x5af
 80144bc:	491c      	ldr	r1, [pc, #112]	; (8014530 <tcp_slowtmr+0x678>)
 80144be:	4819      	ldr	r0, [pc, #100]	; (8014524 <tcp_slowtmr+0x66c>)
 80144c0:	f00b ffc6 	bl	8020450 <iprintf>
        prev->next = pcb->next;
 80144c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80144c6:	68da      	ldr	r2, [r3, #12]
 80144c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80144ca:	60da      	str	r2, [r3, #12]
 80144cc:	e00f      	b.n	80144ee <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 80144ce:	4b17      	ldr	r3, [pc, #92]	; (801452c <tcp_slowtmr+0x674>)
 80144d0:	681b      	ldr	r3, [r3, #0]
 80144d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80144d4:	429a      	cmp	r2, r3
 80144d6:	d006      	beq.n	80144e6 <tcp_slowtmr+0x62e>
 80144d8:	4b10      	ldr	r3, [pc, #64]	; (801451c <tcp_slowtmr+0x664>)
 80144da:	f240 52b3 	movw	r2, #1459	; 0x5b3
 80144de:	4915      	ldr	r1, [pc, #84]	; (8014534 <tcp_slowtmr+0x67c>)
 80144e0:	4810      	ldr	r0, [pc, #64]	; (8014524 <tcp_slowtmr+0x66c>)
 80144e2:	f00b ffb5 	bl	8020450 <iprintf>
        tcp_tw_pcbs = pcb->next;
 80144e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80144e8:	68db      	ldr	r3, [r3, #12]
 80144ea:	4a10      	ldr	r2, [pc, #64]	; (801452c <tcp_slowtmr+0x674>)
 80144ec:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 80144ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80144f0:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 80144f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80144f4:	68db      	ldr	r3, [r3, #12]
 80144f6:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 80144f8:	69f8      	ldr	r0, [r7, #28]
 80144fa:	f7fe ff3b 	bl	8013374 <tcp_free>
 80144fe:	e004      	b.n	801450a <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8014500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014502:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8014504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014506:	68db      	ldr	r3, [r3, #12]
 8014508:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 801450a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801450c:	2b00      	cmp	r3, #0
 801450e:	d1a9      	bne.n	8014464 <tcp_slowtmr+0x5ac>
    }
  }
}
 8014510:	bf00      	nop
 8014512:	bf00      	nop
 8014514:	3730      	adds	r7, #48	; 0x30
 8014516:	46bd      	mov	sp, r7
 8014518:	bdb0      	pop	{r4, r5, r7, pc}
 801451a:	bf00      	nop
 801451c:	08024c24 	.word	0x08024c24
 8014520:	080250b4 	.word	0x080250b4
 8014524:	08024c68 	.word	0x08024c68
 8014528:	24007dd8 	.word	0x24007dd8
 801452c:	24007de8 	.word	0x24007de8
 8014530:	080250e4 	.word	0x080250e4
 8014534:	0802510c 	.word	0x0802510c

08014538 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8014538:	b580      	push	{r7, lr}
 801453a:	b082      	sub	sp, #8
 801453c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 801453e:	4b2d      	ldr	r3, [pc, #180]	; (80145f4 <tcp_fasttmr+0xbc>)
 8014540:	781b      	ldrb	r3, [r3, #0]
 8014542:	3301      	adds	r3, #1
 8014544:	b2da      	uxtb	r2, r3
 8014546:	4b2b      	ldr	r3, [pc, #172]	; (80145f4 <tcp_fasttmr+0xbc>)
 8014548:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 801454a:	4b2b      	ldr	r3, [pc, #172]	; (80145f8 <tcp_fasttmr+0xc0>)
 801454c:	681b      	ldr	r3, [r3, #0]
 801454e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8014550:	e048      	b.n	80145e4 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8014552:	687b      	ldr	r3, [r7, #4]
 8014554:	7f9a      	ldrb	r2, [r3, #30]
 8014556:	4b27      	ldr	r3, [pc, #156]	; (80145f4 <tcp_fasttmr+0xbc>)
 8014558:	781b      	ldrb	r3, [r3, #0]
 801455a:	429a      	cmp	r2, r3
 801455c:	d03f      	beq.n	80145de <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 801455e:	4b25      	ldr	r3, [pc, #148]	; (80145f4 <tcp_fasttmr+0xbc>)
 8014560:	781a      	ldrb	r2, [r3, #0]
 8014562:	687b      	ldr	r3, [r7, #4]
 8014564:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8014566:	687b      	ldr	r3, [r7, #4]
 8014568:	8b5b      	ldrh	r3, [r3, #26]
 801456a:	f003 0301 	and.w	r3, r3, #1
 801456e:	2b00      	cmp	r3, #0
 8014570:	d010      	beq.n	8014594 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8014572:	687b      	ldr	r3, [r7, #4]
 8014574:	8b5b      	ldrh	r3, [r3, #26]
 8014576:	f043 0302 	orr.w	r3, r3, #2
 801457a:	b29a      	uxth	r2, r3
 801457c:	687b      	ldr	r3, [r7, #4]
 801457e:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8014580:	6878      	ldr	r0, [r7, #4]
 8014582:	f003 fff5 	bl	8018570 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8014586:	687b      	ldr	r3, [r7, #4]
 8014588:	8b5b      	ldrh	r3, [r3, #26]
 801458a:	f023 0303 	bic.w	r3, r3, #3
 801458e:	b29a      	uxth	r2, r3
 8014590:	687b      	ldr	r3, [r7, #4]
 8014592:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8014594:	687b      	ldr	r3, [r7, #4]
 8014596:	8b5b      	ldrh	r3, [r3, #26]
 8014598:	f003 0308 	and.w	r3, r3, #8
 801459c:	2b00      	cmp	r3, #0
 801459e:	d009      	beq.n	80145b4 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 80145a0:	687b      	ldr	r3, [r7, #4]
 80145a2:	8b5b      	ldrh	r3, [r3, #26]
 80145a4:	f023 0308 	bic.w	r3, r3, #8
 80145a8:	b29a      	uxth	r2, r3
 80145aa:	687b      	ldr	r3, [r7, #4]
 80145ac:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 80145ae:	6878      	ldr	r0, [r7, #4]
 80145b0:	f7ff f874 	bl	801369c <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 80145b4:	687b      	ldr	r3, [r7, #4]
 80145b6:	68db      	ldr	r3, [r3, #12]
 80145b8:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 80145ba:	687b      	ldr	r3, [r7, #4]
 80145bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80145be:	2b00      	cmp	r3, #0
 80145c0:	d00a      	beq.n	80145d8 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 80145c2:	4b0e      	ldr	r3, [pc, #56]	; (80145fc <tcp_fasttmr+0xc4>)
 80145c4:	2200      	movs	r2, #0
 80145c6:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 80145c8:	6878      	ldr	r0, [r7, #4]
 80145ca:	f000 f819 	bl	8014600 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 80145ce:	4b0b      	ldr	r3, [pc, #44]	; (80145fc <tcp_fasttmr+0xc4>)
 80145d0:	781b      	ldrb	r3, [r3, #0]
 80145d2:	2b00      	cmp	r3, #0
 80145d4:	d000      	beq.n	80145d8 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 80145d6:	e7b8      	b.n	801454a <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 80145d8:	683b      	ldr	r3, [r7, #0]
 80145da:	607b      	str	r3, [r7, #4]
 80145dc:	e002      	b.n	80145e4 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 80145de:	687b      	ldr	r3, [r7, #4]
 80145e0:	68db      	ldr	r3, [r3, #12]
 80145e2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80145e4:	687b      	ldr	r3, [r7, #4]
 80145e6:	2b00      	cmp	r3, #0
 80145e8:	d1b3      	bne.n	8014552 <tcp_fasttmr+0x1a>
    }
  }
}
 80145ea:	bf00      	nop
 80145ec:	bf00      	nop
 80145ee:	3708      	adds	r7, #8
 80145f0:	46bd      	mov	sp, r7
 80145f2:	bd80      	pop	{r7, pc}
 80145f4:	24007dee 	.word	0x24007dee
 80145f8:	24007de4 	.word	0x24007de4
 80145fc:	24007dec 	.word	0x24007dec

08014600 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8014600:	b590      	push	{r4, r7, lr}
 8014602:	b085      	sub	sp, #20
 8014604:	af00      	add	r7, sp, #0
 8014606:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8014608:	687b      	ldr	r3, [r7, #4]
 801460a:	2b00      	cmp	r3, #0
 801460c:	d109      	bne.n	8014622 <tcp_process_refused_data+0x22>
 801460e:	4b37      	ldr	r3, [pc, #220]	; (80146ec <tcp_process_refused_data+0xec>)
 8014610:	f240 6209 	movw	r2, #1545	; 0x609
 8014614:	4936      	ldr	r1, [pc, #216]	; (80146f0 <tcp_process_refused_data+0xf0>)
 8014616:	4837      	ldr	r0, [pc, #220]	; (80146f4 <tcp_process_refused_data+0xf4>)
 8014618:	f00b ff1a 	bl	8020450 <iprintf>
 801461c:	f06f 030f 	mvn.w	r3, #15
 8014620:	e060      	b.n	80146e4 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8014622:	687b      	ldr	r3, [r7, #4]
 8014624:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014626:	7b5b      	ldrb	r3, [r3, #13]
 8014628:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 801462a:	687b      	ldr	r3, [r7, #4]
 801462c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801462e:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8014630:	687b      	ldr	r3, [r7, #4]
 8014632:	2200      	movs	r2, #0
 8014634:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8014636:	687b      	ldr	r3, [r7, #4]
 8014638:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801463c:	2b00      	cmp	r3, #0
 801463e:	d00b      	beq.n	8014658 <tcp_process_refused_data+0x58>
 8014640:	687b      	ldr	r3, [r7, #4]
 8014642:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8014646:	687b      	ldr	r3, [r7, #4]
 8014648:	6918      	ldr	r0, [r3, #16]
 801464a:	2300      	movs	r3, #0
 801464c:	68ba      	ldr	r2, [r7, #8]
 801464e:	6879      	ldr	r1, [r7, #4]
 8014650:	47a0      	blx	r4
 8014652:	4603      	mov	r3, r0
 8014654:	73fb      	strb	r3, [r7, #15]
 8014656:	e007      	b.n	8014668 <tcp_process_refused_data+0x68>
 8014658:	2300      	movs	r3, #0
 801465a:	68ba      	ldr	r2, [r7, #8]
 801465c:	6879      	ldr	r1, [r7, #4]
 801465e:	2000      	movs	r0, #0
 8014660:	f000 f8a4 	bl	80147ac <tcp_recv_null>
 8014664:	4603      	mov	r3, r0
 8014666:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8014668:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801466c:	2b00      	cmp	r3, #0
 801466e:	d12a      	bne.n	80146c6 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8014670:	7bbb      	ldrb	r3, [r7, #14]
 8014672:	f003 0320 	and.w	r3, r3, #32
 8014676:	2b00      	cmp	r3, #0
 8014678:	d033      	beq.n	80146e2 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801467a:	687b      	ldr	r3, [r7, #4]
 801467c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801467e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8014682:	d005      	beq.n	8014690 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8014684:	687b      	ldr	r3, [r7, #4]
 8014686:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014688:	3301      	adds	r3, #1
 801468a:	b29a      	uxth	r2, r3
 801468c:	687b      	ldr	r3, [r7, #4]
 801468e:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8014690:	687b      	ldr	r3, [r7, #4]
 8014692:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8014696:	2b00      	cmp	r3, #0
 8014698:	d00b      	beq.n	80146b2 <tcp_process_refused_data+0xb2>
 801469a:	687b      	ldr	r3, [r7, #4]
 801469c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80146a0:	687b      	ldr	r3, [r7, #4]
 80146a2:	6918      	ldr	r0, [r3, #16]
 80146a4:	2300      	movs	r3, #0
 80146a6:	2200      	movs	r2, #0
 80146a8:	6879      	ldr	r1, [r7, #4]
 80146aa:	47a0      	blx	r4
 80146ac:	4603      	mov	r3, r0
 80146ae:	73fb      	strb	r3, [r7, #15]
 80146b0:	e001      	b.n	80146b6 <tcp_process_refused_data+0xb6>
 80146b2:	2300      	movs	r3, #0
 80146b4:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 80146b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80146ba:	f113 0f0d 	cmn.w	r3, #13
 80146be:	d110      	bne.n	80146e2 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 80146c0:	f06f 030c 	mvn.w	r3, #12
 80146c4:	e00e      	b.n	80146e4 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 80146c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80146ca:	f113 0f0d 	cmn.w	r3, #13
 80146ce:	d102      	bne.n	80146d6 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 80146d0:	f06f 030c 	mvn.w	r3, #12
 80146d4:	e006      	b.n	80146e4 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 80146d6:	687b      	ldr	r3, [r7, #4]
 80146d8:	68ba      	ldr	r2, [r7, #8]
 80146da:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 80146dc:	f06f 0304 	mvn.w	r3, #4
 80146e0:	e000      	b.n	80146e4 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 80146e2:	2300      	movs	r3, #0
}
 80146e4:	4618      	mov	r0, r3
 80146e6:	3714      	adds	r7, #20
 80146e8:	46bd      	mov	sp, r7
 80146ea:	bd90      	pop	{r4, r7, pc}
 80146ec:	08024c24 	.word	0x08024c24
 80146f0:	08025134 	.word	0x08025134
 80146f4:	08024c68 	.word	0x08024c68

080146f8 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 80146f8:	b580      	push	{r7, lr}
 80146fa:	b084      	sub	sp, #16
 80146fc:	af00      	add	r7, sp, #0
 80146fe:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8014700:	e007      	b.n	8014712 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8014702:	687b      	ldr	r3, [r7, #4]
 8014704:	681b      	ldr	r3, [r3, #0]
 8014706:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8014708:	6878      	ldr	r0, [r7, #4]
 801470a:	f000 f80a 	bl	8014722 <tcp_seg_free>
    seg = next;
 801470e:	68fb      	ldr	r3, [r7, #12]
 8014710:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8014712:	687b      	ldr	r3, [r7, #4]
 8014714:	2b00      	cmp	r3, #0
 8014716:	d1f4      	bne.n	8014702 <tcp_segs_free+0xa>
  }
}
 8014718:	bf00      	nop
 801471a:	bf00      	nop
 801471c:	3710      	adds	r7, #16
 801471e:	46bd      	mov	sp, r7
 8014720:	bd80      	pop	{r7, pc}

08014722 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8014722:	b580      	push	{r7, lr}
 8014724:	b082      	sub	sp, #8
 8014726:	af00      	add	r7, sp, #0
 8014728:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 801472a:	687b      	ldr	r3, [r7, #4]
 801472c:	2b00      	cmp	r3, #0
 801472e:	d00c      	beq.n	801474a <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8014730:	687b      	ldr	r3, [r7, #4]
 8014732:	685b      	ldr	r3, [r3, #4]
 8014734:	2b00      	cmp	r3, #0
 8014736:	d004      	beq.n	8014742 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8014738:	687b      	ldr	r3, [r7, #4]
 801473a:	685b      	ldr	r3, [r3, #4]
 801473c:	4618      	mov	r0, r3
 801473e:	f7fe fb5d 	bl	8012dfc <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8014742:	6879      	ldr	r1, [r7, #4]
 8014744:	2003      	movs	r0, #3
 8014746:	f7fd fc77 	bl	8012038 <memp_free>
  }
}
 801474a:	bf00      	nop
 801474c:	3708      	adds	r7, #8
 801474e:	46bd      	mov	sp, r7
 8014750:	bd80      	pop	{r7, pc}
	...

08014754 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8014754:	b580      	push	{r7, lr}
 8014756:	b084      	sub	sp, #16
 8014758:	af00      	add	r7, sp, #0
 801475a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 801475c:	687b      	ldr	r3, [r7, #4]
 801475e:	2b00      	cmp	r3, #0
 8014760:	d106      	bne.n	8014770 <tcp_seg_copy+0x1c>
 8014762:	4b0f      	ldr	r3, [pc, #60]	; (80147a0 <tcp_seg_copy+0x4c>)
 8014764:	f240 6282 	movw	r2, #1666	; 0x682
 8014768:	490e      	ldr	r1, [pc, #56]	; (80147a4 <tcp_seg_copy+0x50>)
 801476a:	480f      	ldr	r0, [pc, #60]	; (80147a8 <tcp_seg_copy+0x54>)
 801476c:	f00b fe70 	bl	8020450 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8014770:	2003      	movs	r0, #3
 8014772:	f7fd fbeb 	bl	8011f4c <memp_malloc>
 8014776:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8014778:	68fb      	ldr	r3, [r7, #12]
 801477a:	2b00      	cmp	r3, #0
 801477c:	d101      	bne.n	8014782 <tcp_seg_copy+0x2e>
    return NULL;
 801477e:	2300      	movs	r3, #0
 8014780:	e00a      	b.n	8014798 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8014782:	2210      	movs	r2, #16
 8014784:	6879      	ldr	r1, [r7, #4]
 8014786:	68f8      	ldr	r0, [r7, #12]
 8014788:	f00b ff93 	bl	80206b2 <memcpy>
  pbuf_ref(cseg->p);
 801478c:	68fb      	ldr	r3, [r7, #12]
 801478e:	685b      	ldr	r3, [r3, #4]
 8014790:	4618      	mov	r0, r3
 8014792:	f7fe fbd9 	bl	8012f48 <pbuf_ref>
  return cseg;
 8014796:	68fb      	ldr	r3, [r7, #12]
}
 8014798:	4618      	mov	r0, r3
 801479a:	3710      	adds	r7, #16
 801479c:	46bd      	mov	sp, r7
 801479e:	bd80      	pop	{r7, pc}
 80147a0:	08024c24 	.word	0x08024c24
 80147a4:	08025178 	.word	0x08025178
 80147a8:	08024c68 	.word	0x08024c68

080147ac <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80147ac:	b580      	push	{r7, lr}
 80147ae:	b084      	sub	sp, #16
 80147b0:	af00      	add	r7, sp, #0
 80147b2:	60f8      	str	r0, [r7, #12]
 80147b4:	60b9      	str	r1, [r7, #8]
 80147b6:	607a      	str	r2, [r7, #4]
 80147b8:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 80147ba:	68bb      	ldr	r3, [r7, #8]
 80147bc:	2b00      	cmp	r3, #0
 80147be:	d109      	bne.n	80147d4 <tcp_recv_null+0x28>
 80147c0:	4b12      	ldr	r3, [pc, #72]	; (801480c <tcp_recv_null+0x60>)
 80147c2:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80147c6:	4912      	ldr	r1, [pc, #72]	; (8014810 <tcp_recv_null+0x64>)
 80147c8:	4812      	ldr	r0, [pc, #72]	; (8014814 <tcp_recv_null+0x68>)
 80147ca:	f00b fe41 	bl	8020450 <iprintf>
 80147ce:	f06f 030f 	mvn.w	r3, #15
 80147d2:	e016      	b.n	8014802 <tcp_recv_null+0x56>

  if (p != NULL) {
 80147d4:	687b      	ldr	r3, [r7, #4]
 80147d6:	2b00      	cmp	r3, #0
 80147d8:	d009      	beq.n	80147ee <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 80147da:	687b      	ldr	r3, [r7, #4]
 80147dc:	891b      	ldrh	r3, [r3, #8]
 80147de:	4619      	mov	r1, r3
 80147e0:	68b8      	ldr	r0, [r7, #8]
 80147e2:	f7ff fad3 	bl	8013d8c <tcp_recved>
    pbuf_free(p);
 80147e6:	6878      	ldr	r0, [r7, #4]
 80147e8:	f7fe fb08 	bl	8012dfc <pbuf_free>
 80147ec:	e008      	b.n	8014800 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 80147ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80147f2:	2b00      	cmp	r3, #0
 80147f4:	d104      	bne.n	8014800 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 80147f6:	68b8      	ldr	r0, [r7, #8]
 80147f8:	f7fe ffba 	bl	8013770 <tcp_close>
 80147fc:	4603      	mov	r3, r0
 80147fe:	e000      	b.n	8014802 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8014800:	2300      	movs	r3, #0
}
 8014802:	4618      	mov	r0, r3
 8014804:	3710      	adds	r7, #16
 8014806:	46bd      	mov	sp, r7
 8014808:	bd80      	pop	{r7, pc}
 801480a:	bf00      	nop
 801480c:	08024c24 	.word	0x08024c24
 8014810:	08025194 	.word	0x08025194
 8014814:	08024c68 	.word	0x08024c68

08014818 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8014818:	b580      	push	{r7, lr}
 801481a:	b086      	sub	sp, #24
 801481c:	af00      	add	r7, sp, #0
 801481e:	4603      	mov	r3, r0
 8014820:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8014822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014826:	2b00      	cmp	r3, #0
 8014828:	db01      	blt.n	801482e <tcp_kill_prio+0x16>
 801482a:	79fb      	ldrb	r3, [r7, #7]
 801482c:	e000      	b.n	8014830 <tcp_kill_prio+0x18>
 801482e:	237f      	movs	r3, #127	; 0x7f
 8014830:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8014832:	7afb      	ldrb	r3, [r7, #11]
 8014834:	2b00      	cmp	r3, #0
 8014836:	d034      	beq.n	80148a2 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8014838:	7afb      	ldrb	r3, [r7, #11]
 801483a:	3b01      	subs	r3, #1
 801483c:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 801483e:	2300      	movs	r3, #0
 8014840:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8014842:	2300      	movs	r3, #0
 8014844:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8014846:	4b19      	ldr	r3, [pc, #100]	; (80148ac <tcp_kill_prio+0x94>)
 8014848:	681b      	ldr	r3, [r3, #0]
 801484a:	617b      	str	r3, [r7, #20]
 801484c:	e01f      	b.n	801488e <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 801484e:	697b      	ldr	r3, [r7, #20]
 8014850:	7d5b      	ldrb	r3, [r3, #21]
 8014852:	7afa      	ldrb	r2, [r7, #11]
 8014854:	429a      	cmp	r2, r3
 8014856:	d80c      	bhi.n	8014872 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8014858:	697b      	ldr	r3, [r7, #20]
 801485a:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 801485c:	7afa      	ldrb	r2, [r7, #11]
 801485e:	429a      	cmp	r2, r3
 8014860:	d112      	bne.n	8014888 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8014862:	4b13      	ldr	r3, [pc, #76]	; (80148b0 <tcp_kill_prio+0x98>)
 8014864:	681a      	ldr	r2, [r3, #0]
 8014866:	697b      	ldr	r3, [r7, #20]
 8014868:	6a1b      	ldr	r3, [r3, #32]
 801486a:	1ad3      	subs	r3, r2, r3
 801486c:	68fa      	ldr	r2, [r7, #12]
 801486e:	429a      	cmp	r2, r3
 8014870:	d80a      	bhi.n	8014888 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8014872:	4b0f      	ldr	r3, [pc, #60]	; (80148b0 <tcp_kill_prio+0x98>)
 8014874:	681a      	ldr	r2, [r3, #0]
 8014876:	697b      	ldr	r3, [r7, #20]
 8014878:	6a1b      	ldr	r3, [r3, #32]
 801487a:	1ad3      	subs	r3, r2, r3
 801487c:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 801487e:	697b      	ldr	r3, [r7, #20]
 8014880:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8014882:	697b      	ldr	r3, [r7, #20]
 8014884:	7d5b      	ldrb	r3, [r3, #21]
 8014886:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8014888:	697b      	ldr	r3, [r7, #20]
 801488a:	68db      	ldr	r3, [r3, #12]
 801488c:	617b      	str	r3, [r7, #20]
 801488e:	697b      	ldr	r3, [r7, #20]
 8014890:	2b00      	cmp	r3, #0
 8014892:	d1dc      	bne.n	801484e <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8014894:	693b      	ldr	r3, [r7, #16]
 8014896:	2b00      	cmp	r3, #0
 8014898:	d004      	beq.n	80148a4 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 801489a:	6938      	ldr	r0, [r7, #16]
 801489c:	f7ff f8ae 	bl	80139fc <tcp_abort>
 80148a0:	e000      	b.n	80148a4 <tcp_kill_prio+0x8c>
    return;
 80148a2:	bf00      	nop
  }
}
 80148a4:	3718      	adds	r7, #24
 80148a6:	46bd      	mov	sp, r7
 80148a8:	bd80      	pop	{r7, pc}
 80148aa:	bf00      	nop
 80148ac:	24007de4 	.word	0x24007de4
 80148b0:	24007dd8 	.word	0x24007dd8

080148b4 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 80148b4:	b580      	push	{r7, lr}
 80148b6:	b086      	sub	sp, #24
 80148b8:	af00      	add	r7, sp, #0
 80148ba:	4603      	mov	r3, r0
 80148bc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 80148be:	79fb      	ldrb	r3, [r7, #7]
 80148c0:	2b08      	cmp	r3, #8
 80148c2:	d009      	beq.n	80148d8 <tcp_kill_state+0x24>
 80148c4:	79fb      	ldrb	r3, [r7, #7]
 80148c6:	2b09      	cmp	r3, #9
 80148c8:	d006      	beq.n	80148d8 <tcp_kill_state+0x24>
 80148ca:	4b1a      	ldr	r3, [pc, #104]	; (8014934 <tcp_kill_state+0x80>)
 80148cc:	f240 62dd 	movw	r2, #1757	; 0x6dd
 80148d0:	4919      	ldr	r1, [pc, #100]	; (8014938 <tcp_kill_state+0x84>)
 80148d2:	481a      	ldr	r0, [pc, #104]	; (801493c <tcp_kill_state+0x88>)
 80148d4:	f00b fdbc 	bl	8020450 <iprintf>

  inactivity = 0;
 80148d8:	2300      	movs	r3, #0
 80148da:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80148dc:	2300      	movs	r3, #0
 80148de:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80148e0:	4b17      	ldr	r3, [pc, #92]	; (8014940 <tcp_kill_state+0x8c>)
 80148e2:	681b      	ldr	r3, [r3, #0]
 80148e4:	617b      	str	r3, [r7, #20]
 80148e6:	e017      	b.n	8014918 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 80148e8:	697b      	ldr	r3, [r7, #20]
 80148ea:	7d1b      	ldrb	r3, [r3, #20]
 80148ec:	79fa      	ldrb	r2, [r7, #7]
 80148ee:	429a      	cmp	r2, r3
 80148f0:	d10f      	bne.n	8014912 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80148f2:	4b14      	ldr	r3, [pc, #80]	; (8014944 <tcp_kill_state+0x90>)
 80148f4:	681a      	ldr	r2, [r3, #0]
 80148f6:	697b      	ldr	r3, [r7, #20]
 80148f8:	6a1b      	ldr	r3, [r3, #32]
 80148fa:	1ad3      	subs	r3, r2, r3
 80148fc:	68fa      	ldr	r2, [r7, #12]
 80148fe:	429a      	cmp	r2, r3
 8014900:	d807      	bhi.n	8014912 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8014902:	4b10      	ldr	r3, [pc, #64]	; (8014944 <tcp_kill_state+0x90>)
 8014904:	681a      	ldr	r2, [r3, #0]
 8014906:	697b      	ldr	r3, [r7, #20]
 8014908:	6a1b      	ldr	r3, [r3, #32]
 801490a:	1ad3      	subs	r3, r2, r3
 801490c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 801490e:	697b      	ldr	r3, [r7, #20]
 8014910:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8014912:	697b      	ldr	r3, [r7, #20]
 8014914:	68db      	ldr	r3, [r3, #12]
 8014916:	617b      	str	r3, [r7, #20]
 8014918:	697b      	ldr	r3, [r7, #20]
 801491a:	2b00      	cmp	r3, #0
 801491c:	d1e4      	bne.n	80148e8 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 801491e:	693b      	ldr	r3, [r7, #16]
 8014920:	2b00      	cmp	r3, #0
 8014922:	d003      	beq.n	801492c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8014924:	2100      	movs	r1, #0
 8014926:	6938      	ldr	r0, [r7, #16]
 8014928:	f7fe ffaa 	bl	8013880 <tcp_abandon>
  }
}
 801492c:	bf00      	nop
 801492e:	3718      	adds	r7, #24
 8014930:	46bd      	mov	sp, r7
 8014932:	bd80      	pop	{r7, pc}
 8014934:	08024c24 	.word	0x08024c24
 8014938:	080251b0 	.word	0x080251b0
 801493c:	08024c68 	.word	0x08024c68
 8014940:	24007de4 	.word	0x24007de4
 8014944:	24007dd8 	.word	0x24007dd8

08014948 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8014948:	b580      	push	{r7, lr}
 801494a:	b084      	sub	sp, #16
 801494c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 801494e:	2300      	movs	r3, #0
 8014950:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8014952:	2300      	movs	r3, #0
 8014954:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8014956:	4b12      	ldr	r3, [pc, #72]	; (80149a0 <tcp_kill_timewait+0x58>)
 8014958:	681b      	ldr	r3, [r3, #0]
 801495a:	60fb      	str	r3, [r7, #12]
 801495c:	e012      	b.n	8014984 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801495e:	4b11      	ldr	r3, [pc, #68]	; (80149a4 <tcp_kill_timewait+0x5c>)
 8014960:	681a      	ldr	r2, [r3, #0]
 8014962:	68fb      	ldr	r3, [r7, #12]
 8014964:	6a1b      	ldr	r3, [r3, #32]
 8014966:	1ad3      	subs	r3, r2, r3
 8014968:	687a      	ldr	r2, [r7, #4]
 801496a:	429a      	cmp	r2, r3
 801496c:	d807      	bhi.n	801497e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 801496e:	4b0d      	ldr	r3, [pc, #52]	; (80149a4 <tcp_kill_timewait+0x5c>)
 8014970:	681a      	ldr	r2, [r3, #0]
 8014972:	68fb      	ldr	r3, [r7, #12]
 8014974:	6a1b      	ldr	r3, [r3, #32]
 8014976:	1ad3      	subs	r3, r2, r3
 8014978:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 801497a:	68fb      	ldr	r3, [r7, #12]
 801497c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801497e:	68fb      	ldr	r3, [r7, #12]
 8014980:	68db      	ldr	r3, [r3, #12]
 8014982:	60fb      	str	r3, [r7, #12]
 8014984:	68fb      	ldr	r3, [r7, #12]
 8014986:	2b00      	cmp	r3, #0
 8014988:	d1e9      	bne.n	801495e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 801498a:	68bb      	ldr	r3, [r7, #8]
 801498c:	2b00      	cmp	r3, #0
 801498e:	d002      	beq.n	8014996 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8014990:	68b8      	ldr	r0, [r7, #8]
 8014992:	f7ff f833 	bl	80139fc <tcp_abort>
  }
}
 8014996:	bf00      	nop
 8014998:	3710      	adds	r7, #16
 801499a:	46bd      	mov	sp, r7
 801499c:	bd80      	pop	{r7, pc}
 801499e:	bf00      	nop
 80149a0:	24007de8 	.word	0x24007de8
 80149a4:	24007dd8 	.word	0x24007dd8

080149a8 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 80149a8:	b580      	push	{r7, lr}
 80149aa:	b082      	sub	sp, #8
 80149ac:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 80149ae:	4b10      	ldr	r3, [pc, #64]	; (80149f0 <tcp_handle_closepend+0x48>)
 80149b0:	681b      	ldr	r3, [r3, #0]
 80149b2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80149b4:	e014      	b.n	80149e0 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 80149b6:	687b      	ldr	r3, [r7, #4]
 80149b8:	68db      	ldr	r3, [r3, #12]
 80149ba:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 80149bc:	687b      	ldr	r3, [r7, #4]
 80149be:	8b5b      	ldrh	r3, [r3, #26]
 80149c0:	f003 0308 	and.w	r3, r3, #8
 80149c4:	2b00      	cmp	r3, #0
 80149c6:	d009      	beq.n	80149dc <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 80149c8:	687b      	ldr	r3, [r7, #4]
 80149ca:	8b5b      	ldrh	r3, [r3, #26]
 80149cc:	f023 0308 	bic.w	r3, r3, #8
 80149d0:	b29a      	uxth	r2, r3
 80149d2:	687b      	ldr	r3, [r7, #4]
 80149d4:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 80149d6:	6878      	ldr	r0, [r7, #4]
 80149d8:	f7fe fe60 	bl	801369c <tcp_close_shutdown_fin>
    }
    pcb = next;
 80149dc:	683b      	ldr	r3, [r7, #0]
 80149de:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80149e0:	687b      	ldr	r3, [r7, #4]
 80149e2:	2b00      	cmp	r3, #0
 80149e4:	d1e7      	bne.n	80149b6 <tcp_handle_closepend+0xe>
  }
}
 80149e6:	bf00      	nop
 80149e8:	bf00      	nop
 80149ea:	3708      	adds	r7, #8
 80149ec:	46bd      	mov	sp, r7
 80149ee:	bd80      	pop	{r7, pc}
 80149f0:	24007de4 	.word	0x24007de4

080149f4 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 80149f4:	b580      	push	{r7, lr}
 80149f6:	b084      	sub	sp, #16
 80149f8:	af00      	add	r7, sp, #0
 80149fa:	4603      	mov	r3, r0
 80149fc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80149fe:	2001      	movs	r0, #1
 8014a00:	f7fd faa4 	bl	8011f4c <memp_malloc>
 8014a04:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8014a06:	68fb      	ldr	r3, [r7, #12]
 8014a08:	2b00      	cmp	r3, #0
 8014a0a:	d126      	bne.n	8014a5a <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8014a0c:	f7ff ffcc 	bl	80149a8 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8014a10:	f7ff ff9a 	bl	8014948 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8014a14:	2001      	movs	r0, #1
 8014a16:	f7fd fa99 	bl	8011f4c <memp_malloc>
 8014a1a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8014a1c:	68fb      	ldr	r3, [r7, #12]
 8014a1e:	2b00      	cmp	r3, #0
 8014a20:	d11b      	bne.n	8014a5a <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8014a22:	2009      	movs	r0, #9
 8014a24:	f7ff ff46 	bl	80148b4 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8014a28:	2001      	movs	r0, #1
 8014a2a:	f7fd fa8f 	bl	8011f4c <memp_malloc>
 8014a2e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8014a30:	68fb      	ldr	r3, [r7, #12]
 8014a32:	2b00      	cmp	r3, #0
 8014a34:	d111      	bne.n	8014a5a <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8014a36:	2008      	movs	r0, #8
 8014a38:	f7ff ff3c 	bl	80148b4 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8014a3c:	2001      	movs	r0, #1
 8014a3e:	f7fd fa85 	bl	8011f4c <memp_malloc>
 8014a42:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8014a44:	68fb      	ldr	r3, [r7, #12]
 8014a46:	2b00      	cmp	r3, #0
 8014a48:	d107      	bne.n	8014a5a <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8014a4a:	79fb      	ldrb	r3, [r7, #7]
 8014a4c:	4618      	mov	r0, r3
 8014a4e:	f7ff fee3 	bl	8014818 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8014a52:	2001      	movs	r0, #1
 8014a54:	f7fd fa7a 	bl	8011f4c <memp_malloc>
 8014a58:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8014a5a:	68fb      	ldr	r3, [r7, #12]
 8014a5c:	2b00      	cmp	r3, #0
 8014a5e:	d03f      	beq.n	8014ae0 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8014a60:	229c      	movs	r2, #156	; 0x9c
 8014a62:	2100      	movs	r1, #0
 8014a64:	68f8      	ldr	r0, [r7, #12]
 8014a66:	f00b fd92 	bl	802058e <memset>
    pcb->prio = prio;
 8014a6a:	68fb      	ldr	r3, [r7, #12]
 8014a6c:	79fa      	ldrb	r2, [r7, #7]
 8014a6e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8014a70:	68fb      	ldr	r3, [r7, #12]
 8014a72:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8014a76:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8014a7a:	68fb      	ldr	r3, [r7, #12]
 8014a7c:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8014a80:	855a      	strh	r2, [r3, #42]	; 0x2a
 8014a82:	68fb      	ldr	r3, [r7, #12]
 8014a84:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8014a86:	68fb      	ldr	r3, [r7, #12]
 8014a88:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8014a8a:	68fb      	ldr	r3, [r7, #12]
 8014a8c:	22ff      	movs	r2, #255	; 0xff
 8014a8e:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8014a90:	68fb      	ldr	r3, [r7, #12]
 8014a92:	f44f 7206 	mov.w	r2, #536	; 0x218
 8014a96:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8014a98:	68fb      	ldr	r3, [r7, #12]
 8014a9a:	2206      	movs	r2, #6
 8014a9c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8014aa0:	68fb      	ldr	r3, [r7, #12]
 8014aa2:	2206      	movs	r2, #6
 8014aa4:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8014aa6:	68fb      	ldr	r3, [r7, #12]
 8014aa8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014aac:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8014aae:	68fb      	ldr	r3, [r7, #12]
 8014ab0:	2201      	movs	r2, #1
 8014ab2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8014ab6:	4b0d      	ldr	r3, [pc, #52]	; (8014aec <tcp_alloc+0xf8>)
 8014ab8:	681a      	ldr	r2, [r3, #0]
 8014aba:	68fb      	ldr	r3, [r7, #12]
 8014abc:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8014abe:	4b0c      	ldr	r3, [pc, #48]	; (8014af0 <tcp_alloc+0xfc>)
 8014ac0:	781a      	ldrb	r2, [r3, #0]
 8014ac2:	68fb      	ldr	r3, [r7, #12]
 8014ac4:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8014ac6:	68fb      	ldr	r3, [r7, #12]
 8014ac8:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8014acc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8014ad0:	68fb      	ldr	r3, [r7, #12]
 8014ad2:	4a08      	ldr	r2, [pc, #32]	; (8014af4 <tcp_alloc+0x100>)
 8014ad4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8014ad8:	68fb      	ldr	r3, [r7, #12]
 8014ada:	4a07      	ldr	r2, [pc, #28]	; (8014af8 <tcp_alloc+0x104>)
 8014adc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8014ae0:	68fb      	ldr	r3, [r7, #12]
}
 8014ae2:	4618      	mov	r0, r3
 8014ae4:	3710      	adds	r7, #16
 8014ae6:	46bd      	mov	sp, r7
 8014ae8:	bd80      	pop	{r7, pc}
 8014aea:	bf00      	nop
 8014aec:	24007dd8 	.word	0x24007dd8
 8014af0:	24007dee 	.word	0x24007dee
 8014af4:	080147ad 	.word	0x080147ad
 8014af8:	006ddd00 	.word	0x006ddd00

08014afc <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 8014afc:	b580      	push	{r7, lr}
 8014afe:	b084      	sub	sp, #16
 8014b00:	af00      	add	r7, sp, #0
 8014b02:	4603      	mov	r3, r0
 8014b04:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 8014b06:	2040      	movs	r0, #64	; 0x40
 8014b08:	f7ff ff74 	bl	80149f4 <tcp_alloc>
 8014b0c:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8014b0e:	68fb      	ldr	r3, [r7, #12]
}
 8014b10:	4618      	mov	r0, r3
 8014b12:	3710      	adds	r7, #16
 8014b14:	46bd      	mov	sp, r7
 8014b16:	bd80      	pop	{r7, pc}

08014b18 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8014b18:	b480      	push	{r7}
 8014b1a:	b083      	sub	sp, #12
 8014b1c:	af00      	add	r7, sp, #0
 8014b1e:	6078      	str	r0, [r7, #4]
 8014b20:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8014b22:	687b      	ldr	r3, [r7, #4]
 8014b24:	2b00      	cmp	r3, #0
 8014b26:	d002      	beq.n	8014b2e <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8014b28:	687b      	ldr	r3, [r7, #4]
 8014b2a:	683a      	ldr	r2, [r7, #0]
 8014b2c:	611a      	str	r2, [r3, #16]
  }
}
 8014b2e:	bf00      	nop
 8014b30:	370c      	adds	r7, #12
 8014b32:	46bd      	mov	sp, r7
 8014b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b38:	4770      	bx	lr
	...

08014b3c <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8014b3c:	b580      	push	{r7, lr}
 8014b3e:	b082      	sub	sp, #8
 8014b40:	af00      	add	r7, sp, #0
 8014b42:	6078      	str	r0, [r7, #4]
 8014b44:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8014b46:	687b      	ldr	r3, [r7, #4]
 8014b48:	2b00      	cmp	r3, #0
 8014b4a:	d00e      	beq.n	8014b6a <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8014b4c:	687b      	ldr	r3, [r7, #4]
 8014b4e:	7d1b      	ldrb	r3, [r3, #20]
 8014b50:	2b01      	cmp	r3, #1
 8014b52:	d106      	bne.n	8014b62 <tcp_recv+0x26>
 8014b54:	4b07      	ldr	r3, [pc, #28]	; (8014b74 <tcp_recv+0x38>)
 8014b56:	f240 72df 	movw	r2, #2015	; 0x7df
 8014b5a:	4907      	ldr	r1, [pc, #28]	; (8014b78 <tcp_recv+0x3c>)
 8014b5c:	4807      	ldr	r0, [pc, #28]	; (8014b7c <tcp_recv+0x40>)
 8014b5e:	f00b fc77 	bl	8020450 <iprintf>
    pcb->recv = recv;
 8014b62:	687b      	ldr	r3, [r7, #4]
 8014b64:	683a      	ldr	r2, [r7, #0]
 8014b66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 8014b6a:	bf00      	nop
 8014b6c:	3708      	adds	r7, #8
 8014b6e:	46bd      	mov	sp, r7
 8014b70:	bd80      	pop	{r7, pc}
 8014b72:	bf00      	nop
 8014b74:	08024c24 	.word	0x08024c24
 8014b78:	080251c0 	.word	0x080251c0
 8014b7c:	08024c68 	.word	0x08024c68

08014b80 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8014b80:	b580      	push	{r7, lr}
 8014b82:	b082      	sub	sp, #8
 8014b84:	af00      	add	r7, sp, #0
 8014b86:	6078      	str	r0, [r7, #4]
 8014b88:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8014b8a:	687b      	ldr	r3, [r7, #4]
 8014b8c:	2b00      	cmp	r3, #0
 8014b8e:	d00e      	beq.n	8014bae <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8014b90:	687b      	ldr	r3, [r7, #4]
 8014b92:	7d1b      	ldrb	r3, [r3, #20]
 8014b94:	2b01      	cmp	r3, #1
 8014b96:	d106      	bne.n	8014ba6 <tcp_sent+0x26>
 8014b98:	4b07      	ldr	r3, [pc, #28]	; (8014bb8 <tcp_sent+0x38>)
 8014b9a:	f240 72f3 	movw	r2, #2035	; 0x7f3
 8014b9e:	4907      	ldr	r1, [pc, #28]	; (8014bbc <tcp_sent+0x3c>)
 8014ba0:	4807      	ldr	r0, [pc, #28]	; (8014bc0 <tcp_sent+0x40>)
 8014ba2:	f00b fc55 	bl	8020450 <iprintf>
    pcb->sent = sent;
 8014ba6:	687b      	ldr	r3, [r7, #4]
 8014ba8:	683a      	ldr	r2, [r7, #0]
 8014baa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 8014bae:	bf00      	nop
 8014bb0:	3708      	adds	r7, #8
 8014bb2:	46bd      	mov	sp, r7
 8014bb4:	bd80      	pop	{r7, pc}
 8014bb6:	bf00      	nop
 8014bb8:	08024c24 	.word	0x08024c24
 8014bbc:	080251e8 	.word	0x080251e8
 8014bc0:	08024c68 	.word	0x08024c68

08014bc4 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8014bc4:	b580      	push	{r7, lr}
 8014bc6:	b082      	sub	sp, #8
 8014bc8:	af00      	add	r7, sp, #0
 8014bca:	6078      	str	r0, [r7, #4]
 8014bcc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8014bce:	687b      	ldr	r3, [r7, #4]
 8014bd0:	2b00      	cmp	r3, #0
 8014bd2:	d00e      	beq.n	8014bf2 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8014bd4:	687b      	ldr	r3, [r7, #4]
 8014bd6:	7d1b      	ldrb	r3, [r3, #20]
 8014bd8:	2b01      	cmp	r3, #1
 8014bda:	d106      	bne.n	8014bea <tcp_err+0x26>
 8014bdc:	4b07      	ldr	r3, [pc, #28]	; (8014bfc <tcp_err+0x38>)
 8014bde:	f640 020d 	movw	r2, #2061	; 0x80d
 8014be2:	4907      	ldr	r1, [pc, #28]	; (8014c00 <tcp_err+0x3c>)
 8014be4:	4807      	ldr	r0, [pc, #28]	; (8014c04 <tcp_err+0x40>)
 8014be6:	f00b fc33 	bl	8020450 <iprintf>
    pcb->errf = err;
 8014bea:	687b      	ldr	r3, [r7, #4]
 8014bec:	683a      	ldr	r2, [r7, #0]
 8014bee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 8014bf2:	bf00      	nop
 8014bf4:	3708      	adds	r7, #8
 8014bf6:	46bd      	mov	sp, r7
 8014bf8:	bd80      	pop	{r7, pc}
 8014bfa:	bf00      	nop
 8014bfc:	08024c24 	.word	0x08024c24
 8014c00:	08025210 	.word	0x08025210
 8014c04:	08024c68 	.word	0x08024c68

08014c08 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 8014c08:	b480      	push	{r7}
 8014c0a:	b085      	sub	sp, #20
 8014c0c:	af00      	add	r7, sp, #0
 8014c0e:	6078      	str	r0, [r7, #4]
 8014c10:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8014c12:	687b      	ldr	r3, [r7, #4]
 8014c14:	2b00      	cmp	r3, #0
 8014c16:	d008      	beq.n	8014c2a <tcp_accept+0x22>
 8014c18:	687b      	ldr	r3, [r7, #4]
 8014c1a:	7d1b      	ldrb	r3, [r3, #20]
 8014c1c:	2b01      	cmp	r3, #1
 8014c1e:	d104      	bne.n	8014c2a <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 8014c20:	687b      	ldr	r3, [r7, #4]
 8014c22:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8014c24:	68fb      	ldr	r3, [r7, #12]
 8014c26:	683a      	ldr	r2, [r7, #0]
 8014c28:	619a      	str	r2, [r3, #24]
  }
}
 8014c2a:	bf00      	nop
 8014c2c:	3714      	adds	r7, #20
 8014c2e:	46bd      	mov	sp, r7
 8014c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c34:	4770      	bx	lr
	...

08014c38 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8014c38:	b580      	push	{r7, lr}
 8014c3a:	b084      	sub	sp, #16
 8014c3c:	af00      	add	r7, sp, #0
 8014c3e:	60f8      	str	r0, [r7, #12]
 8014c40:	60b9      	str	r1, [r7, #8]
 8014c42:	4613      	mov	r3, r2
 8014c44:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8014c46:	68fb      	ldr	r3, [r7, #12]
 8014c48:	2b00      	cmp	r3, #0
 8014c4a:	d107      	bne.n	8014c5c <tcp_poll+0x24>
 8014c4c:	4b0e      	ldr	r3, [pc, #56]	; (8014c88 <tcp_poll+0x50>)
 8014c4e:	f640 023d 	movw	r2, #2109	; 0x83d
 8014c52:	490e      	ldr	r1, [pc, #56]	; (8014c8c <tcp_poll+0x54>)
 8014c54:	480e      	ldr	r0, [pc, #56]	; (8014c90 <tcp_poll+0x58>)
 8014c56:	f00b fbfb 	bl	8020450 <iprintf>
 8014c5a:	e011      	b.n	8014c80 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8014c5c:	68fb      	ldr	r3, [r7, #12]
 8014c5e:	7d1b      	ldrb	r3, [r3, #20]
 8014c60:	2b01      	cmp	r3, #1
 8014c62:	d106      	bne.n	8014c72 <tcp_poll+0x3a>
 8014c64:	4b08      	ldr	r3, [pc, #32]	; (8014c88 <tcp_poll+0x50>)
 8014c66:	f640 023e 	movw	r2, #2110	; 0x83e
 8014c6a:	490a      	ldr	r1, [pc, #40]	; (8014c94 <tcp_poll+0x5c>)
 8014c6c:	4808      	ldr	r0, [pc, #32]	; (8014c90 <tcp_poll+0x58>)
 8014c6e:	f00b fbef 	bl	8020450 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8014c72:	68fb      	ldr	r3, [r7, #12]
 8014c74:	68ba      	ldr	r2, [r7, #8]
 8014c76:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8014c7a:	68fb      	ldr	r3, [r7, #12]
 8014c7c:	79fa      	ldrb	r2, [r7, #7]
 8014c7e:	775a      	strb	r2, [r3, #29]
}
 8014c80:	3710      	adds	r7, #16
 8014c82:	46bd      	mov	sp, r7
 8014c84:	bd80      	pop	{r7, pc}
 8014c86:	bf00      	nop
 8014c88:	08024c24 	.word	0x08024c24
 8014c8c:	08025238 	.word	0x08025238
 8014c90:	08024c68 	.word	0x08024c68
 8014c94:	08025250 	.word	0x08025250

08014c98 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8014c98:	b580      	push	{r7, lr}
 8014c9a:	b082      	sub	sp, #8
 8014c9c:	af00      	add	r7, sp, #0
 8014c9e:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8014ca0:	687b      	ldr	r3, [r7, #4]
 8014ca2:	2b00      	cmp	r3, #0
 8014ca4:	d107      	bne.n	8014cb6 <tcp_pcb_purge+0x1e>
 8014ca6:	4b21      	ldr	r3, [pc, #132]	; (8014d2c <tcp_pcb_purge+0x94>)
 8014ca8:	f640 0251 	movw	r2, #2129	; 0x851
 8014cac:	4920      	ldr	r1, [pc, #128]	; (8014d30 <tcp_pcb_purge+0x98>)
 8014cae:	4821      	ldr	r0, [pc, #132]	; (8014d34 <tcp_pcb_purge+0x9c>)
 8014cb0:	f00b fbce 	bl	8020450 <iprintf>
 8014cb4:	e037      	b.n	8014d26 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8014cb6:	687b      	ldr	r3, [r7, #4]
 8014cb8:	7d1b      	ldrb	r3, [r3, #20]
 8014cba:	2b00      	cmp	r3, #0
 8014cbc:	d033      	beq.n	8014d26 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8014cbe:	687b      	ldr	r3, [r7, #4]
 8014cc0:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8014cc2:	2b0a      	cmp	r3, #10
 8014cc4:	d02f      	beq.n	8014d26 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8014cc6:	687b      	ldr	r3, [r7, #4]
 8014cc8:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8014cca:	2b01      	cmp	r3, #1
 8014ccc:	d02b      	beq.n	8014d26 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8014cce:	687b      	ldr	r3, [r7, #4]
 8014cd0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014cd2:	2b00      	cmp	r3, #0
 8014cd4:	d007      	beq.n	8014ce6 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8014cd6:	687b      	ldr	r3, [r7, #4]
 8014cd8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014cda:	4618      	mov	r0, r3
 8014cdc:	f7fe f88e 	bl	8012dfc <pbuf_free>
      pcb->refused_data = NULL;
 8014ce0:	687b      	ldr	r3, [r7, #4]
 8014ce2:	2200      	movs	r2, #0
 8014ce4:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8014ce6:	687b      	ldr	r3, [r7, #4]
 8014ce8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014cea:	2b00      	cmp	r3, #0
 8014cec:	d002      	beq.n	8014cf4 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8014cee:	6878      	ldr	r0, [r7, #4]
 8014cf0:	f000 f986 	bl	8015000 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8014cf4:	687b      	ldr	r3, [r7, #4]
 8014cf6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014cfa:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8014cfc:	687b      	ldr	r3, [r7, #4]
 8014cfe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014d00:	4618      	mov	r0, r3
 8014d02:	f7ff fcf9 	bl	80146f8 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8014d06:	687b      	ldr	r3, [r7, #4]
 8014d08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014d0a:	4618      	mov	r0, r3
 8014d0c:	f7ff fcf4 	bl	80146f8 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8014d10:	687b      	ldr	r3, [r7, #4]
 8014d12:	2200      	movs	r2, #0
 8014d14:	66da      	str	r2, [r3, #108]	; 0x6c
 8014d16:	687b      	ldr	r3, [r7, #4]
 8014d18:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8014d1a:	687b      	ldr	r3, [r7, #4]
 8014d1c:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8014d1e:	687b      	ldr	r3, [r7, #4]
 8014d20:	2200      	movs	r2, #0
 8014d22:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8014d26:	3708      	adds	r7, #8
 8014d28:	46bd      	mov	sp, r7
 8014d2a:	bd80      	pop	{r7, pc}
 8014d2c:	08024c24 	.word	0x08024c24
 8014d30:	08025270 	.word	0x08025270
 8014d34:	08024c68 	.word	0x08024c68

08014d38 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8014d38:	b580      	push	{r7, lr}
 8014d3a:	b084      	sub	sp, #16
 8014d3c:	af00      	add	r7, sp, #0
 8014d3e:	6078      	str	r0, [r7, #4]
 8014d40:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8014d42:	683b      	ldr	r3, [r7, #0]
 8014d44:	2b00      	cmp	r3, #0
 8014d46:	d106      	bne.n	8014d56 <tcp_pcb_remove+0x1e>
 8014d48:	4b3e      	ldr	r3, [pc, #248]	; (8014e44 <tcp_pcb_remove+0x10c>)
 8014d4a:	f640 0283 	movw	r2, #2179	; 0x883
 8014d4e:	493e      	ldr	r1, [pc, #248]	; (8014e48 <tcp_pcb_remove+0x110>)
 8014d50:	483e      	ldr	r0, [pc, #248]	; (8014e4c <tcp_pcb_remove+0x114>)
 8014d52:	f00b fb7d 	bl	8020450 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8014d56:	687b      	ldr	r3, [r7, #4]
 8014d58:	2b00      	cmp	r3, #0
 8014d5a:	d106      	bne.n	8014d6a <tcp_pcb_remove+0x32>
 8014d5c:	4b39      	ldr	r3, [pc, #228]	; (8014e44 <tcp_pcb_remove+0x10c>)
 8014d5e:	f640 0284 	movw	r2, #2180	; 0x884
 8014d62:	493b      	ldr	r1, [pc, #236]	; (8014e50 <tcp_pcb_remove+0x118>)
 8014d64:	4839      	ldr	r0, [pc, #228]	; (8014e4c <tcp_pcb_remove+0x114>)
 8014d66:	f00b fb73 	bl	8020450 <iprintf>

  TCP_RMV(pcblist, pcb);
 8014d6a:	687b      	ldr	r3, [r7, #4]
 8014d6c:	681b      	ldr	r3, [r3, #0]
 8014d6e:	683a      	ldr	r2, [r7, #0]
 8014d70:	429a      	cmp	r2, r3
 8014d72:	d105      	bne.n	8014d80 <tcp_pcb_remove+0x48>
 8014d74:	687b      	ldr	r3, [r7, #4]
 8014d76:	681b      	ldr	r3, [r3, #0]
 8014d78:	68da      	ldr	r2, [r3, #12]
 8014d7a:	687b      	ldr	r3, [r7, #4]
 8014d7c:	601a      	str	r2, [r3, #0]
 8014d7e:	e013      	b.n	8014da8 <tcp_pcb_remove+0x70>
 8014d80:	687b      	ldr	r3, [r7, #4]
 8014d82:	681b      	ldr	r3, [r3, #0]
 8014d84:	60fb      	str	r3, [r7, #12]
 8014d86:	e00c      	b.n	8014da2 <tcp_pcb_remove+0x6a>
 8014d88:	68fb      	ldr	r3, [r7, #12]
 8014d8a:	68db      	ldr	r3, [r3, #12]
 8014d8c:	683a      	ldr	r2, [r7, #0]
 8014d8e:	429a      	cmp	r2, r3
 8014d90:	d104      	bne.n	8014d9c <tcp_pcb_remove+0x64>
 8014d92:	683b      	ldr	r3, [r7, #0]
 8014d94:	68da      	ldr	r2, [r3, #12]
 8014d96:	68fb      	ldr	r3, [r7, #12]
 8014d98:	60da      	str	r2, [r3, #12]
 8014d9a:	e005      	b.n	8014da8 <tcp_pcb_remove+0x70>
 8014d9c:	68fb      	ldr	r3, [r7, #12]
 8014d9e:	68db      	ldr	r3, [r3, #12]
 8014da0:	60fb      	str	r3, [r7, #12]
 8014da2:	68fb      	ldr	r3, [r7, #12]
 8014da4:	2b00      	cmp	r3, #0
 8014da6:	d1ef      	bne.n	8014d88 <tcp_pcb_remove+0x50>
 8014da8:	683b      	ldr	r3, [r7, #0]
 8014daa:	2200      	movs	r2, #0
 8014dac:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8014dae:	6838      	ldr	r0, [r7, #0]
 8014db0:	f7ff ff72 	bl	8014c98 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8014db4:	683b      	ldr	r3, [r7, #0]
 8014db6:	7d1b      	ldrb	r3, [r3, #20]
 8014db8:	2b0a      	cmp	r3, #10
 8014dba:	d013      	beq.n	8014de4 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8014dbc:	683b      	ldr	r3, [r7, #0]
 8014dbe:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8014dc0:	2b01      	cmp	r3, #1
 8014dc2:	d00f      	beq.n	8014de4 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8014dc4:	683b      	ldr	r3, [r7, #0]
 8014dc6:	8b5b      	ldrh	r3, [r3, #26]
 8014dc8:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8014dcc:	2b00      	cmp	r3, #0
 8014dce:	d009      	beq.n	8014de4 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8014dd0:	683b      	ldr	r3, [r7, #0]
 8014dd2:	8b5b      	ldrh	r3, [r3, #26]
 8014dd4:	f043 0302 	orr.w	r3, r3, #2
 8014dd8:	b29a      	uxth	r2, r3
 8014dda:	683b      	ldr	r3, [r7, #0]
 8014ddc:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8014dde:	6838      	ldr	r0, [r7, #0]
 8014de0:	f003 fbc6 	bl	8018570 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8014de4:	683b      	ldr	r3, [r7, #0]
 8014de6:	7d1b      	ldrb	r3, [r3, #20]
 8014de8:	2b01      	cmp	r3, #1
 8014dea:	d020      	beq.n	8014e2e <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8014dec:	683b      	ldr	r3, [r7, #0]
 8014dee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014df0:	2b00      	cmp	r3, #0
 8014df2:	d006      	beq.n	8014e02 <tcp_pcb_remove+0xca>
 8014df4:	4b13      	ldr	r3, [pc, #76]	; (8014e44 <tcp_pcb_remove+0x10c>)
 8014df6:	f640 0293 	movw	r2, #2195	; 0x893
 8014dfa:	4916      	ldr	r1, [pc, #88]	; (8014e54 <tcp_pcb_remove+0x11c>)
 8014dfc:	4813      	ldr	r0, [pc, #76]	; (8014e4c <tcp_pcb_remove+0x114>)
 8014dfe:	f00b fb27 	bl	8020450 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8014e02:	683b      	ldr	r3, [r7, #0]
 8014e04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014e06:	2b00      	cmp	r3, #0
 8014e08:	d006      	beq.n	8014e18 <tcp_pcb_remove+0xe0>
 8014e0a:	4b0e      	ldr	r3, [pc, #56]	; (8014e44 <tcp_pcb_remove+0x10c>)
 8014e0c:	f640 0294 	movw	r2, #2196	; 0x894
 8014e10:	4911      	ldr	r1, [pc, #68]	; (8014e58 <tcp_pcb_remove+0x120>)
 8014e12:	480e      	ldr	r0, [pc, #56]	; (8014e4c <tcp_pcb_remove+0x114>)
 8014e14:	f00b fb1c 	bl	8020450 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8014e18:	683b      	ldr	r3, [r7, #0]
 8014e1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014e1c:	2b00      	cmp	r3, #0
 8014e1e:	d006      	beq.n	8014e2e <tcp_pcb_remove+0xf6>
 8014e20:	4b08      	ldr	r3, [pc, #32]	; (8014e44 <tcp_pcb_remove+0x10c>)
 8014e22:	f640 0296 	movw	r2, #2198	; 0x896
 8014e26:	490d      	ldr	r1, [pc, #52]	; (8014e5c <tcp_pcb_remove+0x124>)
 8014e28:	4808      	ldr	r0, [pc, #32]	; (8014e4c <tcp_pcb_remove+0x114>)
 8014e2a:	f00b fb11 	bl	8020450 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8014e2e:	683b      	ldr	r3, [r7, #0]
 8014e30:	2200      	movs	r2, #0
 8014e32:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8014e34:	683b      	ldr	r3, [r7, #0]
 8014e36:	2200      	movs	r2, #0
 8014e38:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8014e3a:	bf00      	nop
 8014e3c:	3710      	adds	r7, #16
 8014e3e:	46bd      	mov	sp, r7
 8014e40:	bd80      	pop	{r7, pc}
 8014e42:	bf00      	nop
 8014e44:	08024c24 	.word	0x08024c24
 8014e48:	0802528c 	.word	0x0802528c
 8014e4c:	08024c68 	.word	0x08024c68
 8014e50:	080252a8 	.word	0x080252a8
 8014e54:	080252c8 	.word	0x080252c8
 8014e58:	080252e0 	.word	0x080252e0
 8014e5c:	080252fc 	.word	0x080252fc

08014e60 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8014e60:	b580      	push	{r7, lr}
 8014e62:	b082      	sub	sp, #8
 8014e64:	af00      	add	r7, sp, #0
 8014e66:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8014e68:	687b      	ldr	r3, [r7, #4]
 8014e6a:	2b00      	cmp	r3, #0
 8014e6c:	d106      	bne.n	8014e7c <tcp_next_iss+0x1c>
 8014e6e:	4b0a      	ldr	r3, [pc, #40]	; (8014e98 <tcp_next_iss+0x38>)
 8014e70:	f640 02af 	movw	r2, #2223	; 0x8af
 8014e74:	4909      	ldr	r1, [pc, #36]	; (8014e9c <tcp_next_iss+0x3c>)
 8014e76:	480a      	ldr	r0, [pc, #40]	; (8014ea0 <tcp_next_iss+0x40>)
 8014e78:	f00b faea 	bl	8020450 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8014e7c:	4b09      	ldr	r3, [pc, #36]	; (8014ea4 <tcp_next_iss+0x44>)
 8014e7e:	681a      	ldr	r2, [r3, #0]
 8014e80:	4b09      	ldr	r3, [pc, #36]	; (8014ea8 <tcp_next_iss+0x48>)
 8014e82:	681b      	ldr	r3, [r3, #0]
 8014e84:	4413      	add	r3, r2
 8014e86:	4a07      	ldr	r2, [pc, #28]	; (8014ea4 <tcp_next_iss+0x44>)
 8014e88:	6013      	str	r3, [r2, #0]
  return iss;
 8014e8a:	4b06      	ldr	r3, [pc, #24]	; (8014ea4 <tcp_next_iss+0x44>)
 8014e8c:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8014e8e:	4618      	mov	r0, r3
 8014e90:	3708      	adds	r7, #8
 8014e92:	46bd      	mov	sp, r7
 8014e94:	bd80      	pop	{r7, pc}
 8014e96:	bf00      	nop
 8014e98:	08024c24 	.word	0x08024c24
 8014e9c:	08025314 	.word	0x08025314
 8014ea0:	08024c68 	.word	0x08024c68
 8014ea4:	240002f8 	.word	0x240002f8
 8014ea8:	24007dd8 	.word	0x24007dd8

08014eac <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8014eac:	b580      	push	{r7, lr}
 8014eae:	b086      	sub	sp, #24
 8014eb0:	af00      	add	r7, sp, #0
 8014eb2:	4603      	mov	r3, r0
 8014eb4:	60b9      	str	r1, [r7, #8]
 8014eb6:	607a      	str	r2, [r7, #4]
 8014eb8:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8014eba:	687b      	ldr	r3, [r7, #4]
 8014ebc:	2b00      	cmp	r3, #0
 8014ebe:	d106      	bne.n	8014ece <tcp_eff_send_mss_netif+0x22>
 8014ec0:	4b14      	ldr	r3, [pc, #80]	; (8014f14 <tcp_eff_send_mss_netif+0x68>)
 8014ec2:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8014ec6:	4914      	ldr	r1, [pc, #80]	; (8014f18 <tcp_eff_send_mss_netif+0x6c>)
 8014ec8:	4814      	ldr	r0, [pc, #80]	; (8014f1c <tcp_eff_send_mss_netif+0x70>)
 8014eca:	f00b fac1 	bl	8020450 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8014ece:	68bb      	ldr	r3, [r7, #8]
 8014ed0:	2b00      	cmp	r3, #0
 8014ed2:	d101      	bne.n	8014ed8 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8014ed4:	89fb      	ldrh	r3, [r7, #14]
 8014ed6:	e019      	b.n	8014f0c <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8014ed8:	68bb      	ldr	r3, [r7, #8]
 8014eda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014edc:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8014ede:	8afb      	ldrh	r3, [r7, #22]
 8014ee0:	2b00      	cmp	r3, #0
 8014ee2:	d012      	beq.n	8014f0a <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8014ee4:	2328      	movs	r3, #40	; 0x28
 8014ee6:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8014ee8:	8afa      	ldrh	r2, [r7, #22]
 8014eea:	8abb      	ldrh	r3, [r7, #20]
 8014eec:	429a      	cmp	r2, r3
 8014eee:	d904      	bls.n	8014efa <tcp_eff_send_mss_netif+0x4e>
 8014ef0:	8afa      	ldrh	r2, [r7, #22]
 8014ef2:	8abb      	ldrh	r3, [r7, #20]
 8014ef4:	1ad3      	subs	r3, r2, r3
 8014ef6:	b29b      	uxth	r3, r3
 8014ef8:	e000      	b.n	8014efc <tcp_eff_send_mss_netif+0x50>
 8014efa:	2300      	movs	r3, #0
 8014efc:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8014efe:	8a7a      	ldrh	r2, [r7, #18]
 8014f00:	89fb      	ldrh	r3, [r7, #14]
 8014f02:	4293      	cmp	r3, r2
 8014f04:	bf28      	it	cs
 8014f06:	4613      	movcs	r3, r2
 8014f08:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8014f0a:	89fb      	ldrh	r3, [r7, #14]
}
 8014f0c:	4618      	mov	r0, r3
 8014f0e:	3718      	adds	r7, #24
 8014f10:	46bd      	mov	sp, r7
 8014f12:	bd80      	pop	{r7, pc}
 8014f14:	08024c24 	.word	0x08024c24
 8014f18:	08025330 	.word	0x08025330
 8014f1c:	08024c68 	.word	0x08024c68

08014f20 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8014f20:	b580      	push	{r7, lr}
 8014f22:	b084      	sub	sp, #16
 8014f24:	af00      	add	r7, sp, #0
 8014f26:	6078      	str	r0, [r7, #4]
 8014f28:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8014f2a:	683b      	ldr	r3, [r7, #0]
 8014f2c:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8014f2e:	687b      	ldr	r3, [r7, #4]
 8014f30:	2b00      	cmp	r3, #0
 8014f32:	d119      	bne.n	8014f68 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8014f34:	4b10      	ldr	r3, [pc, #64]	; (8014f78 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8014f36:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8014f3a:	4910      	ldr	r1, [pc, #64]	; (8014f7c <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8014f3c:	4810      	ldr	r0, [pc, #64]	; (8014f80 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8014f3e:	f00b fa87 	bl	8020450 <iprintf>

  while (pcb != NULL) {
 8014f42:	e011      	b.n	8014f68 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8014f44:	68fb      	ldr	r3, [r7, #12]
 8014f46:	681a      	ldr	r2, [r3, #0]
 8014f48:	687b      	ldr	r3, [r7, #4]
 8014f4a:	681b      	ldr	r3, [r3, #0]
 8014f4c:	429a      	cmp	r2, r3
 8014f4e:	d108      	bne.n	8014f62 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8014f50:	68fb      	ldr	r3, [r7, #12]
 8014f52:	68db      	ldr	r3, [r3, #12]
 8014f54:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8014f56:	68f8      	ldr	r0, [r7, #12]
 8014f58:	f7fe fd50 	bl	80139fc <tcp_abort>
      pcb = next;
 8014f5c:	68bb      	ldr	r3, [r7, #8]
 8014f5e:	60fb      	str	r3, [r7, #12]
 8014f60:	e002      	b.n	8014f68 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8014f62:	68fb      	ldr	r3, [r7, #12]
 8014f64:	68db      	ldr	r3, [r3, #12]
 8014f66:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8014f68:	68fb      	ldr	r3, [r7, #12]
 8014f6a:	2b00      	cmp	r3, #0
 8014f6c:	d1ea      	bne.n	8014f44 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8014f6e:	bf00      	nop
 8014f70:	bf00      	nop
 8014f72:	3710      	adds	r7, #16
 8014f74:	46bd      	mov	sp, r7
 8014f76:	bd80      	pop	{r7, pc}
 8014f78:	08024c24 	.word	0x08024c24
 8014f7c:	08025358 	.word	0x08025358
 8014f80:	08024c68 	.word	0x08024c68

08014f84 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8014f84:	b580      	push	{r7, lr}
 8014f86:	b084      	sub	sp, #16
 8014f88:	af00      	add	r7, sp, #0
 8014f8a:	6078      	str	r0, [r7, #4]
 8014f8c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8014f8e:	687b      	ldr	r3, [r7, #4]
 8014f90:	2b00      	cmp	r3, #0
 8014f92:	d02a      	beq.n	8014fea <tcp_netif_ip_addr_changed+0x66>
 8014f94:	687b      	ldr	r3, [r7, #4]
 8014f96:	681b      	ldr	r3, [r3, #0]
 8014f98:	2b00      	cmp	r3, #0
 8014f9a:	d026      	beq.n	8014fea <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8014f9c:	4b15      	ldr	r3, [pc, #84]	; (8014ff4 <tcp_netif_ip_addr_changed+0x70>)
 8014f9e:	681b      	ldr	r3, [r3, #0]
 8014fa0:	4619      	mov	r1, r3
 8014fa2:	6878      	ldr	r0, [r7, #4]
 8014fa4:	f7ff ffbc 	bl	8014f20 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8014fa8:	4b13      	ldr	r3, [pc, #76]	; (8014ff8 <tcp_netif_ip_addr_changed+0x74>)
 8014faa:	681b      	ldr	r3, [r3, #0]
 8014fac:	4619      	mov	r1, r3
 8014fae:	6878      	ldr	r0, [r7, #4]
 8014fb0:	f7ff ffb6 	bl	8014f20 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8014fb4:	683b      	ldr	r3, [r7, #0]
 8014fb6:	2b00      	cmp	r3, #0
 8014fb8:	d017      	beq.n	8014fea <tcp_netif_ip_addr_changed+0x66>
 8014fba:	683b      	ldr	r3, [r7, #0]
 8014fbc:	681b      	ldr	r3, [r3, #0]
 8014fbe:	2b00      	cmp	r3, #0
 8014fc0:	d013      	beq.n	8014fea <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8014fc2:	4b0e      	ldr	r3, [pc, #56]	; (8014ffc <tcp_netif_ip_addr_changed+0x78>)
 8014fc4:	681b      	ldr	r3, [r3, #0]
 8014fc6:	60fb      	str	r3, [r7, #12]
 8014fc8:	e00c      	b.n	8014fe4 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8014fca:	68fb      	ldr	r3, [r7, #12]
 8014fcc:	681a      	ldr	r2, [r3, #0]
 8014fce:	687b      	ldr	r3, [r7, #4]
 8014fd0:	681b      	ldr	r3, [r3, #0]
 8014fd2:	429a      	cmp	r2, r3
 8014fd4:	d103      	bne.n	8014fde <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8014fd6:	683b      	ldr	r3, [r7, #0]
 8014fd8:	681a      	ldr	r2, [r3, #0]
 8014fda:	68fb      	ldr	r3, [r7, #12]
 8014fdc:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8014fde:	68fb      	ldr	r3, [r7, #12]
 8014fe0:	68db      	ldr	r3, [r3, #12]
 8014fe2:	60fb      	str	r3, [r7, #12]
 8014fe4:	68fb      	ldr	r3, [r7, #12]
 8014fe6:	2b00      	cmp	r3, #0
 8014fe8:	d1ef      	bne.n	8014fca <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8014fea:	bf00      	nop
 8014fec:	3710      	adds	r7, #16
 8014fee:	46bd      	mov	sp, r7
 8014ff0:	bd80      	pop	{r7, pc}
 8014ff2:	bf00      	nop
 8014ff4:	24007de4 	.word	0x24007de4
 8014ff8:	24007ddc 	.word	0x24007ddc
 8014ffc:	24007de0 	.word	0x24007de0

08015000 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8015000:	b580      	push	{r7, lr}
 8015002:	b082      	sub	sp, #8
 8015004:	af00      	add	r7, sp, #0
 8015006:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8015008:	687b      	ldr	r3, [r7, #4]
 801500a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801500c:	2b00      	cmp	r3, #0
 801500e:	d007      	beq.n	8015020 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8015010:	687b      	ldr	r3, [r7, #4]
 8015012:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015014:	4618      	mov	r0, r3
 8015016:	f7ff fb6f 	bl	80146f8 <tcp_segs_free>
    pcb->ooseq = NULL;
 801501a:	687b      	ldr	r3, [r7, #4]
 801501c:	2200      	movs	r2, #0
 801501e:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8015020:	bf00      	nop
 8015022:	3708      	adds	r7, #8
 8015024:	46bd      	mov	sp, r7
 8015026:	bd80      	pop	{r7, pc}

08015028 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8015028:	b590      	push	{r4, r7, lr}
 801502a:	b08d      	sub	sp, #52	; 0x34
 801502c:	af04      	add	r7, sp, #16
 801502e:	6078      	str	r0, [r7, #4]
 8015030:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8015032:	687b      	ldr	r3, [r7, #4]
 8015034:	2b00      	cmp	r3, #0
 8015036:	d105      	bne.n	8015044 <tcp_input+0x1c>
 8015038:	4b9b      	ldr	r3, [pc, #620]	; (80152a8 <tcp_input+0x280>)
 801503a:	2283      	movs	r2, #131	; 0x83
 801503c:	499b      	ldr	r1, [pc, #620]	; (80152ac <tcp_input+0x284>)
 801503e:	489c      	ldr	r0, [pc, #624]	; (80152b0 <tcp_input+0x288>)
 8015040:	f00b fa06 	bl	8020450 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8015044:	687b      	ldr	r3, [r7, #4]
 8015046:	685b      	ldr	r3, [r3, #4]
 8015048:	4a9a      	ldr	r2, [pc, #616]	; (80152b4 <tcp_input+0x28c>)
 801504a:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 801504c:	687b      	ldr	r3, [r7, #4]
 801504e:	895b      	ldrh	r3, [r3, #10]
 8015050:	2b13      	cmp	r3, #19
 8015052:	f240 83d1 	bls.w	80157f8 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8015056:	4b98      	ldr	r3, [pc, #608]	; (80152b8 <tcp_input+0x290>)
 8015058:	695b      	ldr	r3, [r3, #20]
 801505a:	4a97      	ldr	r2, [pc, #604]	; (80152b8 <tcp_input+0x290>)
 801505c:	6812      	ldr	r2, [r2, #0]
 801505e:	4611      	mov	r1, r2
 8015060:	4618      	mov	r0, r3
 8015062:	f008 fb19 	bl	801d698 <ip4_addr_isbroadcast_u32>
 8015066:	4603      	mov	r3, r0
 8015068:	2b00      	cmp	r3, #0
 801506a:	f040 83c7 	bne.w	80157fc <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 801506e:	4b92      	ldr	r3, [pc, #584]	; (80152b8 <tcp_input+0x290>)
 8015070:	695b      	ldr	r3, [r3, #20]
 8015072:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8015076:	2be0      	cmp	r3, #224	; 0xe0
 8015078:	f000 83c0 	beq.w	80157fc <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 801507c:	4b8d      	ldr	r3, [pc, #564]	; (80152b4 <tcp_input+0x28c>)
 801507e:	681b      	ldr	r3, [r3, #0]
 8015080:	899b      	ldrh	r3, [r3, #12]
 8015082:	b29b      	uxth	r3, r3
 8015084:	4618      	mov	r0, r3
 8015086:	f7fc f9d1 	bl	801142c <lwip_htons>
 801508a:	4603      	mov	r3, r0
 801508c:	0b1b      	lsrs	r3, r3, #12
 801508e:	b29b      	uxth	r3, r3
 8015090:	b2db      	uxtb	r3, r3
 8015092:	009b      	lsls	r3, r3, #2
 8015094:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8015096:	7cbb      	ldrb	r3, [r7, #18]
 8015098:	2b13      	cmp	r3, #19
 801509a:	f240 83b1 	bls.w	8015800 <tcp_input+0x7d8>
 801509e:	7cbb      	ldrb	r3, [r7, #18]
 80150a0:	b29a      	uxth	r2, r3
 80150a2:	687b      	ldr	r3, [r7, #4]
 80150a4:	891b      	ldrh	r3, [r3, #8]
 80150a6:	429a      	cmp	r2, r3
 80150a8:	f200 83aa 	bhi.w	8015800 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 80150ac:	7cbb      	ldrb	r3, [r7, #18]
 80150ae:	b29b      	uxth	r3, r3
 80150b0:	3b14      	subs	r3, #20
 80150b2:	b29a      	uxth	r2, r3
 80150b4:	4b81      	ldr	r3, [pc, #516]	; (80152bc <tcp_input+0x294>)
 80150b6:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 80150b8:	4b81      	ldr	r3, [pc, #516]	; (80152c0 <tcp_input+0x298>)
 80150ba:	2200      	movs	r2, #0
 80150bc:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 80150be:	687b      	ldr	r3, [r7, #4]
 80150c0:	895a      	ldrh	r2, [r3, #10]
 80150c2:	7cbb      	ldrb	r3, [r7, #18]
 80150c4:	b29b      	uxth	r3, r3
 80150c6:	429a      	cmp	r2, r3
 80150c8:	d309      	bcc.n	80150de <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 80150ca:	4b7c      	ldr	r3, [pc, #496]	; (80152bc <tcp_input+0x294>)
 80150cc:	881a      	ldrh	r2, [r3, #0]
 80150ce:	4b7d      	ldr	r3, [pc, #500]	; (80152c4 <tcp_input+0x29c>)
 80150d0:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 80150d2:	7cbb      	ldrb	r3, [r7, #18]
 80150d4:	4619      	mov	r1, r3
 80150d6:	6878      	ldr	r0, [r7, #4]
 80150d8:	f7fd fdd8 	bl	8012c8c <pbuf_remove_header>
 80150dc:	e04e      	b.n	801517c <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 80150de:	687b      	ldr	r3, [r7, #4]
 80150e0:	681b      	ldr	r3, [r3, #0]
 80150e2:	2b00      	cmp	r3, #0
 80150e4:	d105      	bne.n	80150f2 <tcp_input+0xca>
 80150e6:	4b70      	ldr	r3, [pc, #448]	; (80152a8 <tcp_input+0x280>)
 80150e8:	22c2      	movs	r2, #194	; 0xc2
 80150ea:	4977      	ldr	r1, [pc, #476]	; (80152c8 <tcp_input+0x2a0>)
 80150ec:	4870      	ldr	r0, [pc, #448]	; (80152b0 <tcp_input+0x288>)
 80150ee:	f00b f9af 	bl	8020450 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 80150f2:	2114      	movs	r1, #20
 80150f4:	6878      	ldr	r0, [r7, #4]
 80150f6:	f7fd fdc9 	bl	8012c8c <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 80150fa:	687b      	ldr	r3, [r7, #4]
 80150fc:	895a      	ldrh	r2, [r3, #10]
 80150fe:	4b71      	ldr	r3, [pc, #452]	; (80152c4 <tcp_input+0x29c>)
 8015100:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8015102:	4b6e      	ldr	r3, [pc, #440]	; (80152bc <tcp_input+0x294>)
 8015104:	881a      	ldrh	r2, [r3, #0]
 8015106:	4b6f      	ldr	r3, [pc, #444]	; (80152c4 <tcp_input+0x29c>)
 8015108:	881b      	ldrh	r3, [r3, #0]
 801510a:	1ad3      	subs	r3, r2, r3
 801510c:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 801510e:	4b6d      	ldr	r3, [pc, #436]	; (80152c4 <tcp_input+0x29c>)
 8015110:	881b      	ldrh	r3, [r3, #0]
 8015112:	4619      	mov	r1, r3
 8015114:	6878      	ldr	r0, [r7, #4]
 8015116:	f7fd fdb9 	bl	8012c8c <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 801511a:	687b      	ldr	r3, [r7, #4]
 801511c:	681b      	ldr	r3, [r3, #0]
 801511e:	895b      	ldrh	r3, [r3, #10]
 8015120:	8a3a      	ldrh	r2, [r7, #16]
 8015122:	429a      	cmp	r2, r3
 8015124:	f200 836e 	bhi.w	8015804 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8015128:	687b      	ldr	r3, [r7, #4]
 801512a:	681b      	ldr	r3, [r3, #0]
 801512c:	685b      	ldr	r3, [r3, #4]
 801512e:	4a64      	ldr	r2, [pc, #400]	; (80152c0 <tcp_input+0x298>)
 8015130:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8015132:	687b      	ldr	r3, [r7, #4]
 8015134:	681b      	ldr	r3, [r3, #0]
 8015136:	8a3a      	ldrh	r2, [r7, #16]
 8015138:	4611      	mov	r1, r2
 801513a:	4618      	mov	r0, r3
 801513c:	f7fd fda6 	bl	8012c8c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8015140:	687b      	ldr	r3, [r7, #4]
 8015142:	891a      	ldrh	r2, [r3, #8]
 8015144:	8a3b      	ldrh	r3, [r7, #16]
 8015146:	1ad3      	subs	r3, r2, r3
 8015148:	b29a      	uxth	r2, r3
 801514a:	687b      	ldr	r3, [r7, #4]
 801514c:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 801514e:	687b      	ldr	r3, [r7, #4]
 8015150:	895b      	ldrh	r3, [r3, #10]
 8015152:	2b00      	cmp	r3, #0
 8015154:	d005      	beq.n	8015162 <tcp_input+0x13a>
 8015156:	4b54      	ldr	r3, [pc, #336]	; (80152a8 <tcp_input+0x280>)
 8015158:	22df      	movs	r2, #223	; 0xdf
 801515a:	495c      	ldr	r1, [pc, #368]	; (80152cc <tcp_input+0x2a4>)
 801515c:	4854      	ldr	r0, [pc, #336]	; (80152b0 <tcp_input+0x288>)
 801515e:	f00b f977 	bl	8020450 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8015162:	687b      	ldr	r3, [r7, #4]
 8015164:	891a      	ldrh	r2, [r3, #8]
 8015166:	687b      	ldr	r3, [r7, #4]
 8015168:	681b      	ldr	r3, [r3, #0]
 801516a:	891b      	ldrh	r3, [r3, #8]
 801516c:	429a      	cmp	r2, r3
 801516e:	d005      	beq.n	801517c <tcp_input+0x154>
 8015170:	4b4d      	ldr	r3, [pc, #308]	; (80152a8 <tcp_input+0x280>)
 8015172:	22e0      	movs	r2, #224	; 0xe0
 8015174:	4956      	ldr	r1, [pc, #344]	; (80152d0 <tcp_input+0x2a8>)
 8015176:	484e      	ldr	r0, [pc, #312]	; (80152b0 <tcp_input+0x288>)
 8015178:	f00b f96a 	bl	8020450 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 801517c:	4b4d      	ldr	r3, [pc, #308]	; (80152b4 <tcp_input+0x28c>)
 801517e:	681b      	ldr	r3, [r3, #0]
 8015180:	881b      	ldrh	r3, [r3, #0]
 8015182:	b29b      	uxth	r3, r3
 8015184:	4a4b      	ldr	r2, [pc, #300]	; (80152b4 <tcp_input+0x28c>)
 8015186:	6814      	ldr	r4, [r2, #0]
 8015188:	4618      	mov	r0, r3
 801518a:	f7fc f94f 	bl	801142c <lwip_htons>
 801518e:	4603      	mov	r3, r0
 8015190:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8015192:	4b48      	ldr	r3, [pc, #288]	; (80152b4 <tcp_input+0x28c>)
 8015194:	681b      	ldr	r3, [r3, #0]
 8015196:	885b      	ldrh	r3, [r3, #2]
 8015198:	b29b      	uxth	r3, r3
 801519a:	4a46      	ldr	r2, [pc, #280]	; (80152b4 <tcp_input+0x28c>)
 801519c:	6814      	ldr	r4, [r2, #0]
 801519e:	4618      	mov	r0, r3
 80151a0:	f7fc f944 	bl	801142c <lwip_htons>
 80151a4:	4603      	mov	r3, r0
 80151a6:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 80151a8:	4b42      	ldr	r3, [pc, #264]	; (80152b4 <tcp_input+0x28c>)
 80151aa:	681b      	ldr	r3, [r3, #0]
 80151ac:	685b      	ldr	r3, [r3, #4]
 80151ae:	4a41      	ldr	r2, [pc, #260]	; (80152b4 <tcp_input+0x28c>)
 80151b0:	6814      	ldr	r4, [r2, #0]
 80151b2:	4618      	mov	r0, r3
 80151b4:	f7fc f94f 	bl	8011456 <lwip_htonl>
 80151b8:	4603      	mov	r3, r0
 80151ba:	6063      	str	r3, [r4, #4]
 80151bc:	6863      	ldr	r3, [r4, #4]
 80151be:	4a45      	ldr	r2, [pc, #276]	; (80152d4 <tcp_input+0x2ac>)
 80151c0:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 80151c2:	4b3c      	ldr	r3, [pc, #240]	; (80152b4 <tcp_input+0x28c>)
 80151c4:	681b      	ldr	r3, [r3, #0]
 80151c6:	689b      	ldr	r3, [r3, #8]
 80151c8:	4a3a      	ldr	r2, [pc, #232]	; (80152b4 <tcp_input+0x28c>)
 80151ca:	6814      	ldr	r4, [r2, #0]
 80151cc:	4618      	mov	r0, r3
 80151ce:	f7fc f942 	bl	8011456 <lwip_htonl>
 80151d2:	4603      	mov	r3, r0
 80151d4:	60a3      	str	r3, [r4, #8]
 80151d6:	68a3      	ldr	r3, [r4, #8]
 80151d8:	4a3f      	ldr	r2, [pc, #252]	; (80152d8 <tcp_input+0x2b0>)
 80151da:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 80151dc:	4b35      	ldr	r3, [pc, #212]	; (80152b4 <tcp_input+0x28c>)
 80151de:	681b      	ldr	r3, [r3, #0]
 80151e0:	89db      	ldrh	r3, [r3, #14]
 80151e2:	b29b      	uxth	r3, r3
 80151e4:	4a33      	ldr	r2, [pc, #204]	; (80152b4 <tcp_input+0x28c>)
 80151e6:	6814      	ldr	r4, [r2, #0]
 80151e8:	4618      	mov	r0, r3
 80151ea:	f7fc f91f 	bl	801142c <lwip_htons>
 80151ee:	4603      	mov	r3, r0
 80151f0:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 80151f2:	4b30      	ldr	r3, [pc, #192]	; (80152b4 <tcp_input+0x28c>)
 80151f4:	681b      	ldr	r3, [r3, #0]
 80151f6:	899b      	ldrh	r3, [r3, #12]
 80151f8:	b29b      	uxth	r3, r3
 80151fa:	4618      	mov	r0, r3
 80151fc:	f7fc f916 	bl	801142c <lwip_htons>
 8015200:	4603      	mov	r3, r0
 8015202:	b2db      	uxtb	r3, r3
 8015204:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8015208:	b2da      	uxtb	r2, r3
 801520a:	4b34      	ldr	r3, [pc, #208]	; (80152dc <tcp_input+0x2b4>)
 801520c:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 801520e:	687b      	ldr	r3, [r7, #4]
 8015210:	891a      	ldrh	r2, [r3, #8]
 8015212:	4b33      	ldr	r3, [pc, #204]	; (80152e0 <tcp_input+0x2b8>)
 8015214:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8015216:	4b31      	ldr	r3, [pc, #196]	; (80152dc <tcp_input+0x2b4>)
 8015218:	781b      	ldrb	r3, [r3, #0]
 801521a:	f003 0303 	and.w	r3, r3, #3
 801521e:	2b00      	cmp	r3, #0
 8015220:	d00c      	beq.n	801523c <tcp_input+0x214>
    tcplen++;
 8015222:	4b2f      	ldr	r3, [pc, #188]	; (80152e0 <tcp_input+0x2b8>)
 8015224:	881b      	ldrh	r3, [r3, #0]
 8015226:	3301      	adds	r3, #1
 8015228:	b29a      	uxth	r2, r3
 801522a:	4b2d      	ldr	r3, [pc, #180]	; (80152e0 <tcp_input+0x2b8>)
 801522c:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 801522e:	687b      	ldr	r3, [r7, #4]
 8015230:	891a      	ldrh	r2, [r3, #8]
 8015232:	4b2b      	ldr	r3, [pc, #172]	; (80152e0 <tcp_input+0x2b8>)
 8015234:	881b      	ldrh	r3, [r3, #0]
 8015236:	429a      	cmp	r2, r3
 8015238:	f200 82e6 	bhi.w	8015808 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 801523c:	2300      	movs	r3, #0
 801523e:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8015240:	4b28      	ldr	r3, [pc, #160]	; (80152e4 <tcp_input+0x2bc>)
 8015242:	681b      	ldr	r3, [r3, #0]
 8015244:	61fb      	str	r3, [r7, #28]
 8015246:	e09d      	b.n	8015384 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8015248:	69fb      	ldr	r3, [r7, #28]
 801524a:	7d1b      	ldrb	r3, [r3, #20]
 801524c:	2b00      	cmp	r3, #0
 801524e:	d105      	bne.n	801525c <tcp_input+0x234>
 8015250:	4b15      	ldr	r3, [pc, #84]	; (80152a8 <tcp_input+0x280>)
 8015252:	22fb      	movs	r2, #251	; 0xfb
 8015254:	4924      	ldr	r1, [pc, #144]	; (80152e8 <tcp_input+0x2c0>)
 8015256:	4816      	ldr	r0, [pc, #88]	; (80152b0 <tcp_input+0x288>)
 8015258:	f00b f8fa 	bl	8020450 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 801525c:	69fb      	ldr	r3, [r7, #28]
 801525e:	7d1b      	ldrb	r3, [r3, #20]
 8015260:	2b0a      	cmp	r3, #10
 8015262:	d105      	bne.n	8015270 <tcp_input+0x248>
 8015264:	4b10      	ldr	r3, [pc, #64]	; (80152a8 <tcp_input+0x280>)
 8015266:	22fc      	movs	r2, #252	; 0xfc
 8015268:	4920      	ldr	r1, [pc, #128]	; (80152ec <tcp_input+0x2c4>)
 801526a:	4811      	ldr	r0, [pc, #68]	; (80152b0 <tcp_input+0x288>)
 801526c:	f00b f8f0 	bl	8020450 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8015270:	69fb      	ldr	r3, [r7, #28]
 8015272:	7d1b      	ldrb	r3, [r3, #20]
 8015274:	2b01      	cmp	r3, #1
 8015276:	d105      	bne.n	8015284 <tcp_input+0x25c>
 8015278:	4b0b      	ldr	r3, [pc, #44]	; (80152a8 <tcp_input+0x280>)
 801527a:	22fd      	movs	r2, #253	; 0xfd
 801527c:	491c      	ldr	r1, [pc, #112]	; (80152f0 <tcp_input+0x2c8>)
 801527e:	480c      	ldr	r0, [pc, #48]	; (80152b0 <tcp_input+0x288>)
 8015280:	f00b f8e6 	bl	8020450 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8015284:	69fb      	ldr	r3, [r7, #28]
 8015286:	7a1b      	ldrb	r3, [r3, #8]
 8015288:	2b00      	cmp	r3, #0
 801528a:	d033      	beq.n	80152f4 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801528c:	69fb      	ldr	r3, [r7, #28]
 801528e:	7a1a      	ldrb	r2, [r3, #8]
 8015290:	4b09      	ldr	r3, [pc, #36]	; (80152b8 <tcp_input+0x290>)
 8015292:	685b      	ldr	r3, [r3, #4]
 8015294:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8015298:	3301      	adds	r3, #1
 801529a:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801529c:	429a      	cmp	r2, r3
 801529e:	d029      	beq.n	80152f4 <tcp_input+0x2cc>
      prev = pcb;
 80152a0:	69fb      	ldr	r3, [r7, #28]
 80152a2:	61bb      	str	r3, [r7, #24]
      continue;
 80152a4:	e06b      	b.n	801537e <tcp_input+0x356>
 80152a6:	bf00      	nop
 80152a8:	0802538c 	.word	0x0802538c
 80152ac:	080253c0 	.word	0x080253c0
 80152b0:	080253d8 	.word	0x080253d8
 80152b4:	24007e00 	.word	0x24007e00
 80152b8:	24004cb8 	.word	0x24004cb8
 80152bc:	24007e04 	.word	0x24007e04
 80152c0:	24007e08 	.word	0x24007e08
 80152c4:	24007e06 	.word	0x24007e06
 80152c8:	08025400 	.word	0x08025400
 80152cc:	08025410 	.word	0x08025410
 80152d0:	0802541c 	.word	0x0802541c
 80152d4:	24007e10 	.word	0x24007e10
 80152d8:	24007e14 	.word	0x24007e14
 80152dc:	24007e1c 	.word	0x24007e1c
 80152e0:	24007e1a 	.word	0x24007e1a
 80152e4:	24007de4 	.word	0x24007de4
 80152e8:	0802543c 	.word	0x0802543c
 80152ec:	08025464 	.word	0x08025464
 80152f0:	08025490 	.word	0x08025490
    }

    if (pcb->remote_port == tcphdr->src &&
 80152f4:	69fb      	ldr	r3, [r7, #28]
 80152f6:	8b1a      	ldrh	r2, [r3, #24]
 80152f8:	4b72      	ldr	r3, [pc, #456]	; (80154c4 <tcp_input+0x49c>)
 80152fa:	681b      	ldr	r3, [r3, #0]
 80152fc:	881b      	ldrh	r3, [r3, #0]
 80152fe:	b29b      	uxth	r3, r3
 8015300:	429a      	cmp	r2, r3
 8015302:	d13a      	bne.n	801537a <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8015304:	69fb      	ldr	r3, [r7, #28]
 8015306:	8ada      	ldrh	r2, [r3, #22]
 8015308:	4b6e      	ldr	r3, [pc, #440]	; (80154c4 <tcp_input+0x49c>)
 801530a:	681b      	ldr	r3, [r3, #0]
 801530c:	885b      	ldrh	r3, [r3, #2]
 801530e:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8015310:	429a      	cmp	r2, r3
 8015312:	d132      	bne.n	801537a <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8015314:	69fb      	ldr	r3, [r7, #28]
 8015316:	685a      	ldr	r2, [r3, #4]
 8015318:	4b6b      	ldr	r3, [pc, #428]	; (80154c8 <tcp_input+0x4a0>)
 801531a:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 801531c:	429a      	cmp	r2, r3
 801531e:	d12c      	bne.n	801537a <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8015320:	69fb      	ldr	r3, [r7, #28]
 8015322:	681a      	ldr	r2, [r3, #0]
 8015324:	4b68      	ldr	r3, [pc, #416]	; (80154c8 <tcp_input+0x4a0>)
 8015326:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8015328:	429a      	cmp	r2, r3
 801532a:	d126      	bne.n	801537a <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 801532c:	69fb      	ldr	r3, [r7, #28]
 801532e:	68db      	ldr	r3, [r3, #12]
 8015330:	69fa      	ldr	r2, [r7, #28]
 8015332:	429a      	cmp	r2, r3
 8015334:	d106      	bne.n	8015344 <tcp_input+0x31c>
 8015336:	4b65      	ldr	r3, [pc, #404]	; (80154cc <tcp_input+0x4a4>)
 8015338:	f240 120d 	movw	r2, #269	; 0x10d
 801533c:	4964      	ldr	r1, [pc, #400]	; (80154d0 <tcp_input+0x4a8>)
 801533e:	4865      	ldr	r0, [pc, #404]	; (80154d4 <tcp_input+0x4ac>)
 8015340:	f00b f886 	bl	8020450 <iprintf>
      if (prev != NULL) {
 8015344:	69bb      	ldr	r3, [r7, #24]
 8015346:	2b00      	cmp	r3, #0
 8015348:	d00a      	beq.n	8015360 <tcp_input+0x338>
        prev->next = pcb->next;
 801534a:	69fb      	ldr	r3, [r7, #28]
 801534c:	68da      	ldr	r2, [r3, #12]
 801534e:	69bb      	ldr	r3, [r7, #24]
 8015350:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8015352:	4b61      	ldr	r3, [pc, #388]	; (80154d8 <tcp_input+0x4b0>)
 8015354:	681a      	ldr	r2, [r3, #0]
 8015356:	69fb      	ldr	r3, [r7, #28]
 8015358:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 801535a:	4a5f      	ldr	r2, [pc, #380]	; (80154d8 <tcp_input+0x4b0>)
 801535c:	69fb      	ldr	r3, [r7, #28]
 801535e:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8015360:	69fb      	ldr	r3, [r7, #28]
 8015362:	68db      	ldr	r3, [r3, #12]
 8015364:	69fa      	ldr	r2, [r7, #28]
 8015366:	429a      	cmp	r2, r3
 8015368:	d111      	bne.n	801538e <tcp_input+0x366>
 801536a:	4b58      	ldr	r3, [pc, #352]	; (80154cc <tcp_input+0x4a4>)
 801536c:	f240 1215 	movw	r2, #277	; 0x115
 8015370:	495a      	ldr	r1, [pc, #360]	; (80154dc <tcp_input+0x4b4>)
 8015372:	4858      	ldr	r0, [pc, #352]	; (80154d4 <tcp_input+0x4ac>)
 8015374:	f00b f86c 	bl	8020450 <iprintf>
      break;
 8015378:	e009      	b.n	801538e <tcp_input+0x366>
    }
    prev = pcb;
 801537a:	69fb      	ldr	r3, [r7, #28]
 801537c:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801537e:	69fb      	ldr	r3, [r7, #28]
 8015380:	68db      	ldr	r3, [r3, #12]
 8015382:	61fb      	str	r3, [r7, #28]
 8015384:	69fb      	ldr	r3, [r7, #28]
 8015386:	2b00      	cmp	r3, #0
 8015388:	f47f af5e 	bne.w	8015248 <tcp_input+0x220>
 801538c:	e000      	b.n	8015390 <tcp_input+0x368>
      break;
 801538e:	bf00      	nop
  }

  if (pcb == NULL) {
 8015390:	69fb      	ldr	r3, [r7, #28]
 8015392:	2b00      	cmp	r3, #0
 8015394:	f040 80aa 	bne.w	80154ec <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8015398:	4b51      	ldr	r3, [pc, #324]	; (80154e0 <tcp_input+0x4b8>)
 801539a:	681b      	ldr	r3, [r3, #0]
 801539c:	61fb      	str	r3, [r7, #28]
 801539e:	e03f      	b.n	8015420 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80153a0:	69fb      	ldr	r3, [r7, #28]
 80153a2:	7d1b      	ldrb	r3, [r3, #20]
 80153a4:	2b0a      	cmp	r3, #10
 80153a6:	d006      	beq.n	80153b6 <tcp_input+0x38e>
 80153a8:	4b48      	ldr	r3, [pc, #288]	; (80154cc <tcp_input+0x4a4>)
 80153aa:	f240 121f 	movw	r2, #287	; 0x11f
 80153ae:	494d      	ldr	r1, [pc, #308]	; (80154e4 <tcp_input+0x4bc>)
 80153b0:	4848      	ldr	r0, [pc, #288]	; (80154d4 <tcp_input+0x4ac>)
 80153b2:	f00b f84d 	bl	8020450 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80153b6:	69fb      	ldr	r3, [r7, #28]
 80153b8:	7a1b      	ldrb	r3, [r3, #8]
 80153ba:	2b00      	cmp	r3, #0
 80153bc:	d009      	beq.n	80153d2 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80153be:	69fb      	ldr	r3, [r7, #28]
 80153c0:	7a1a      	ldrb	r2, [r3, #8]
 80153c2:	4b41      	ldr	r3, [pc, #260]	; (80154c8 <tcp_input+0x4a0>)
 80153c4:	685b      	ldr	r3, [r3, #4]
 80153c6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80153ca:	3301      	adds	r3, #1
 80153cc:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80153ce:	429a      	cmp	r2, r3
 80153d0:	d122      	bne.n	8015418 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 80153d2:	69fb      	ldr	r3, [r7, #28]
 80153d4:	8b1a      	ldrh	r2, [r3, #24]
 80153d6:	4b3b      	ldr	r3, [pc, #236]	; (80154c4 <tcp_input+0x49c>)
 80153d8:	681b      	ldr	r3, [r3, #0]
 80153da:	881b      	ldrh	r3, [r3, #0]
 80153dc:	b29b      	uxth	r3, r3
 80153de:	429a      	cmp	r2, r3
 80153e0:	d11b      	bne.n	801541a <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 80153e2:	69fb      	ldr	r3, [r7, #28]
 80153e4:	8ada      	ldrh	r2, [r3, #22]
 80153e6:	4b37      	ldr	r3, [pc, #220]	; (80154c4 <tcp_input+0x49c>)
 80153e8:	681b      	ldr	r3, [r3, #0]
 80153ea:	885b      	ldrh	r3, [r3, #2]
 80153ec:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 80153ee:	429a      	cmp	r2, r3
 80153f0:	d113      	bne.n	801541a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80153f2:	69fb      	ldr	r3, [r7, #28]
 80153f4:	685a      	ldr	r2, [r3, #4]
 80153f6:	4b34      	ldr	r3, [pc, #208]	; (80154c8 <tcp_input+0x4a0>)
 80153f8:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 80153fa:	429a      	cmp	r2, r3
 80153fc:	d10d      	bne.n	801541a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80153fe:	69fb      	ldr	r3, [r7, #28]
 8015400:	681a      	ldr	r2, [r3, #0]
 8015402:	4b31      	ldr	r3, [pc, #196]	; (80154c8 <tcp_input+0x4a0>)
 8015404:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8015406:	429a      	cmp	r2, r3
 8015408:	d107      	bne.n	801541a <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 801540a:	69f8      	ldr	r0, [r7, #28]
 801540c:	f000 fb56 	bl	8015abc <tcp_timewait_input>
        }
        pbuf_free(p);
 8015410:	6878      	ldr	r0, [r7, #4]
 8015412:	f7fd fcf3 	bl	8012dfc <pbuf_free>
        return;
 8015416:	e1fd      	b.n	8015814 <tcp_input+0x7ec>
        continue;
 8015418:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801541a:	69fb      	ldr	r3, [r7, #28]
 801541c:	68db      	ldr	r3, [r3, #12]
 801541e:	61fb      	str	r3, [r7, #28]
 8015420:	69fb      	ldr	r3, [r7, #28]
 8015422:	2b00      	cmp	r3, #0
 8015424:	d1bc      	bne.n	80153a0 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8015426:	2300      	movs	r3, #0
 8015428:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801542a:	4b2f      	ldr	r3, [pc, #188]	; (80154e8 <tcp_input+0x4c0>)
 801542c:	681b      	ldr	r3, [r3, #0]
 801542e:	617b      	str	r3, [r7, #20]
 8015430:	e02a      	b.n	8015488 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8015432:	697b      	ldr	r3, [r7, #20]
 8015434:	7a1b      	ldrb	r3, [r3, #8]
 8015436:	2b00      	cmp	r3, #0
 8015438:	d00c      	beq.n	8015454 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801543a:	697b      	ldr	r3, [r7, #20]
 801543c:	7a1a      	ldrb	r2, [r3, #8]
 801543e:	4b22      	ldr	r3, [pc, #136]	; (80154c8 <tcp_input+0x4a0>)
 8015440:	685b      	ldr	r3, [r3, #4]
 8015442:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8015446:	3301      	adds	r3, #1
 8015448:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801544a:	429a      	cmp	r2, r3
 801544c:	d002      	beq.n	8015454 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 801544e:	697b      	ldr	r3, [r7, #20]
 8015450:	61bb      	str	r3, [r7, #24]
        continue;
 8015452:	e016      	b.n	8015482 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8015454:	697b      	ldr	r3, [r7, #20]
 8015456:	8ada      	ldrh	r2, [r3, #22]
 8015458:	4b1a      	ldr	r3, [pc, #104]	; (80154c4 <tcp_input+0x49c>)
 801545a:	681b      	ldr	r3, [r3, #0]
 801545c:	885b      	ldrh	r3, [r3, #2]
 801545e:	b29b      	uxth	r3, r3
 8015460:	429a      	cmp	r2, r3
 8015462:	d10c      	bne.n	801547e <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8015464:	697b      	ldr	r3, [r7, #20]
 8015466:	681a      	ldr	r2, [r3, #0]
 8015468:	4b17      	ldr	r3, [pc, #92]	; (80154c8 <tcp_input+0x4a0>)
 801546a:	695b      	ldr	r3, [r3, #20]
 801546c:	429a      	cmp	r2, r3
 801546e:	d00f      	beq.n	8015490 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8015470:	697b      	ldr	r3, [r7, #20]
 8015472:	2b00      	cmp	r3, #0
 8015474:	d00d      	beq.n	8015492 <tcp_input+0x46a>
 8015476:	697b      	ldr	r3, [r7, #20]
 8015478:	681b      	ldr	r3, [r3, #0]
 801547a:	2b00      	cmp	r3, #0
 801547c:	d009      	beq.n	8015492 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 801547e:	697b      	ldr	r3, [r7, #20]
 8015480:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8015482:	697b      	ldr	r3, [r7, #20]
 8015484:	68db      	ldr	r3, [r3, #12]
 8015486:	617b      	str	r3, [r7, #20]
 8015488:	697b      	ldr	r3, [r7, #20]
 801548a:	2b00      	cmp	r3, #0
 801548c:	d1d1      	bne.n	8015432 <tcp_input+0x40a>
 801548e:	e000      	b.n	8015492 <tcp_input+0x46a>
            break;
 8015490:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8015492:	697b      	ldr	r3, [r7, #20]
 8015494:	2b00      	cmp	r3, #0
 8015496:	d029      	beq.n	80154ec <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8015498:	69bb      	ldr	r3, [r7, #24]
 801549a:	2b00      	cmp	r3, #0
 801549c:	d00a      	beq.n	80154b4 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 801549e:	697b      	ldr	r3, [r7, #20]
 80154a0:	68da      	ldr	r2, [r3, #12]
 80154a2:	69bb      	ldr	r3, [r7, #24]
 80154a4:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 80154a6:	4b10      	ldr	r3, [pc, #64]	; (80154e8 <tcp_input+0x4c0>)
 80154a8:	681a      	ldr	r2, [r3, #0]
 80154aa:	697b      	ldr	r3, [r7, #20]
 80154ac:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 80154ae:	4a0e      	ldr	r2, [pc, #56]	; (80154e8 <tcp_input+0x4c0>)
 80154b0:	697b      	ldr	r3, [r7, #20]
 80154b2:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 80154b4:	6978      	ldr	r0, [r7, #20]
 80154b6:	f000 fa03 	bl	80158c0 <tcp_listen_input>
      }
      pbuf_free(p);
 80154ba:	6878      	ldr	r0, [r7, #4]
 80154bc:	f7fd fc9e 	bl	8012dfc <pbuf_free>
      return;
 80154c0:	e1a8      	b.n	8015814 <tcp_input+0x7ec>
 80154c2:	bf00      	nop
 80154c4:	24007e00 	.word	0x24007e00
 80154c8:	24004cb8 	.word	0x24004cb8
 80154cc:	0802538c 	.word	0x0802538c
 80154d0:	080254b8 	.word	0x080254b8
 80154d4:	080253d8 	.word	0x080253d8
 80154d8:	24007de4 	.word	0x24007de4
 80154dc:	080254e4 	.word	0x080254e4
 80154e0:	24007de8 	.word	0x24007de8
 80154e4:	08025510 	.word	0x08025510
 80154e8:	24007de0 	.word	0x24007de0
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 80154ec:	69fb      	ldr	r3, [r7, #28]
 80154ee:	2b00      	cmp	r3, #0
 80154f0:	f000 8158 	beq.w	80157a4 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 80154f4:	4b95      	ldr	r3, [pc, #596]	; (801574c <tcp_input+0x724>)
 80154f6:	2200      	movs	r2, #0
 80154f8:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 80154fa:	687b      	ldr	r3, [r7, #4]
 80154fc:	891a      	ldrh	r2, [r3, #8]
 80154fe:	4b93      	ldr	r3, [pc, #588]	; (801574c <tcp_input+0x724>)
 8015500:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8015502:	4a92      	ldr	r2, [pc, #584]	; (801574c <tcp_input+0x724>)
 8015504:	687b      	ldr	r3, [r7, #4]
 8015506:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8015508:	4b91      	ldr	r3, [pc, #580]	; (8015750 <tcp_input+0x728>)
 801550a:	681b      	ldr	r3, [r3, #0]
 801550c:	4a8f      	ldr	r2, [pc, #572]	; (801574c <tcp_input+0x724>)
 801550e:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8015510:	4b90      	ldr	r3, [pc, #576]	; (8015754 <tcp_input+0x72c>)
 8015512:	2200      	movs	r2, #0
 8015514:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8015516:	4b90      	ldr	r3, [pc, #576]	; (8015758 <tcp_input+0x730>)
 8015518:	2200      	movs	r2, #0
 801551a:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 801551c:	4b8f      	ldr	r3, [pc, #572]	; (801575c <tcp_input+0x734>)
 801551e:	2200      	movs	r2, #0
 8015520:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8015522:	4b8f      	ldr	r3, [pc, #572]	; (8015760 <tcp_input+0x738>)
 8015524:	781b      	ldrb	r3, [r3, #0]
 8015526:	f003 0308 	and.w	r3, r3, #8
 801552a:	2b00      	cmp	r3, #0
 801552c:	d006      	beq.n	801553c <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 801552e:	687b      	ldr	r3, [r7, #4]
 8015530:	7b5b      	ldrb	r3, [r3, #13]
 8015532:	f043 0301 	orr.w	r3, r3, #1
 8015536:	b2da      	uxtb	r2, r3
 8015538:	687b      	ldr	r3, [r7, #4]
 801553a:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 801553c:	69fb      	ldr	r3, [r7, #28]
 801553e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8015540:	2b00      	cmp	r3, #0
 8015542:	d017      	beq.n	8015574 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8015544:	69f8      	ldr	r0, [r7, #28]
 8015546:	f7ff f85b 	bl	8014600 <tcp_process_refused_data>
 801554a:	4603      	mov	r3, r0
 801554c:	f113 0f0d 	cmn.w	r3, #13
 8015550:	d007      	beq.n	8015562 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8015552:	69fb      	ldr	r3, [r7, #28]
 8015554:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8015556:	2b00      	cmp	r3, #0
 8015558:	d00c      	beq.n	8015574 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801555a:	4b82      	ldr	r3, [pc, #520]	; (8015764 <tcp_input+0x73c>)
 801555c:	881b      	ldrh	r3, [r3, #0]
 801555e:	2b00      	cmp	r3, #0
 8015560:	d008      	beq.n	8015574 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8015562:	69fb      	ldr	r3, [r7, #28]
 8015564:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015566:	2b00      	cmp	r3, #0
 8015568:	f040 80e3 	bne.w	8015732 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 801556c:	69f8      	ldr	r0, [r7, #28]
 801556e:	f003 fe05 	bl	801917c <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8015572:	e0de      	b.n	8015732 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 8015574:	4a7c      	ldr	r2, [pc, #496]	; (8015768 <tcp_input+0x740>)
 8015576:	69fb      	ldr	r3, [r7, #28]
 8015578:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 801557a:	69f8      	ldr	r0, [r7, #28]
 801557c:	f000 fb18 	bl	8015bb0 <tcp_process>
 8015580:	4603      	mov	r3, r0
 8015582:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8015584:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8015588:	f113 0f0d 	cmn.w	r3, #13
 801558c:	f000 80d3 	beq.w	8015736 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 8015590:	4b71      	ldr	r3, [pc, #452]	; (8015758 <tcp_input+0x730>)
 8015592:	781b      	ldrb	r3, [r3, #0]
 8015594:	f003 0308 	and.w	r3, r3, #8
 8015598:	2b00      	cmp	r3, #0
 801559a:	d015      	beq.n	80155c8 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 801559c:	69fb      	ldr	r3, [r7, #28]
 801559e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80155a2:	2b00      	cmp	r3, #0
 80155a4:	d008      	beq.n	80155b8 <tcp_input+0x590>
 80155a6:	69fb      	ldr	r3, [r7, #28]
 80155a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80155ac:	69fa      	ldr	r2, [r7, #28]
 80155ae:	6912      	ldr	r2, [r2, #16]
 80155b0:	f06f 010d 	mvn.w	r1, #13
 80155b4:	4610      	mov	r0, r2
 80155b6:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80155b8:	69f9      	ldr	r1, [r7, #28]
 80155ba:	486c      	ldr	r0, [pc, #432]	; (801576c <tcp_input+0x744>)
 80155bc:	f7ff fbbc 	bl	8014d38 <tcp_pcb_remove>
        tcp_free(pcb);
 80155c0:	69f8      	ldr	r0, [r7, #28]
 80155c2:	f7fd fed7 	bl	8013374 <tcp_free>
 80155c6:	e0da      	b.n	801577e <tcp_input+0x756>
      } else {
        err = ERR_OK;
 80155c8:	2300      	movs	r3, #0
 80155ca:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 80155cc:	4b63      	ldr	r3, [pc, #396]	; (801575c <tcp_input+0x734>)
 80155ce:	881b      	ldrh	r3, [r3, #0]
 80155d0:	2b00      	cmp	r3, #0
 80155d2:	d01d      	beq.n	8015610 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 80155d4:	4b61      	ldr	r3, [pc, #388]	; (801575c <tcp_input+0x734>)
 80155d6:	881b      	ldrh	r3, [r3, #0]
 80155d8:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 80155da:	69fb      	ldr	r3, [r7, #28]
 80155dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80155e0:	2b00      	cmp	r3, #0
 80155e2:	d00a      	beq.n	80155fa <tcp_input+0x5d2>
 80155e4:	69fb      	ldr	r3, [r7, #28]
 80155e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80155ea:	69fa      	ldr	r2, [r7, #28]
 80155ec:	6910      	ldr	r0, [r2, #16]
 80155ee:	89fa      	ldrh	r2, [r7, #14]
 80155f0:	69f9      	ldr	r1, [r7, #28]
 80155f2:	4798      	blx	r3
 80155f4:	4603      	mov	r3, r0
 80155f6:	74fb      	strb	r3, [r7, #19]
 80155f8:	e001      	b.n	80155fe <tcp_input+0x5d6>
 80155fa:	2300      	movs	r3, #0
 80155fc:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80155fe:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8015602:	f113 0f0d 	cmn.w	r3, #13
 8015606:	f000 8098 	beq.w	801573a <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 801560a:	4b54      	ldr	r3, [pc, #336]	; (801575c <tcp_input+0x734>)
 801560c:	2200      	movs	r2, #0
 801560e:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8015610:	69f8      	ldr	r0, [r7, #28]
 8015612:	f000 f915 	bl	8015840 <tcp_input_delayed_close>
 8015616:	4603      	mov	r3, r0
 8015618:	2b00      	cmp	r3, #0
 801561a:	f040 8090 	bne.w	801573e <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 801561e:	4b4d      	ldr	r3, [pc, #308]	; (8015754 <tcp_input+0x72c>)
 8015620:	681b      	ldr	r3, [r3, #0]
 8015622:	2b00      	cmp	r3, #0
 8015624:	d041      	beq.n	80156aa <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8015626:	69fb      	ldr	r3, [r7, #28]
 8015628:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801562a:	2b00      	cmp	r3, #0
 801562c:	d006      	beq.n	801563c <tcp_input+0x614>
 801562e:	4b50      	ldr	r3, [pc, #320]	; (8015770 <tcp_input+0x748>)
 8015630:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8015634:	494f      	ldr	r1, [pc, #316]	; (8015774 <tcp_input+0x74c>)
 8015636:	4850      	ldr	r0, [pc, #320]	; (8015778 <tcp_input+0x750>)
 8015638:	f00a ff0a 	bl	8020450 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 801563c:	69fb      	ldr	r3, [r7, #28]
 801563e:	8b5b      	ldrh	r3, [r3, #26]
 8015640:	f003 0310 	and.w	r3, r3, #16
 8015644:	2b00      	cmp	r3, #0
 8015646:	d008      	beq.n	801565a <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8015648:	4b42      	ldr	r3, [pc, #264]	; (8015754 <tcp_input+0x72c>)
 801564a:	681b      	ldr	r3, [r3, #0]
 801564c:	4618      	mov	r0, r3
 801564e:	f7fd fbd5 	bl	8012dfc <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8015652:	69f8      	ldr	r0, [r7, #28]
 8015654:	f7fe f9d2 	bl	80139fc <tcp_abort>
            goto aborted;
 8015658:	e091      	b.n	801577e <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 801565a:	69fb      	ldr	r3, [r7, #28]
 801565c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8015660:	2b00      	cmp	r3, #0
 8015662:	d00c      	beq.n	801567e <tcp_input+0x656>
 8015664:	69fb      	ldr	r3, [r7, #28]
 8015666:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801566a:	69fb      	ldr	r3, [r7, #28]
 801566c:	6918      	ldr	r0, [r3, #16]
 801566e:	4b39      	ldr	r3, [pc, #228]	; (8015754 <tcp_input+0x72c>)
 8015670:	681a      	ldr	r2, [r3, #0]
 8015672:	2300      	movs	r3, #0
 8015674:	69f9      	ldr	r1, [r7, #28]
 8015676:	47a0      	blx	r4
 8015678:	4603      	mov	r3, r0
 801567a:	74fb      	strb	r3, [r7, #19]
 801567c:	e008      	b.n	8015690 <tcp_input+0x668>
 801567e:	4b35      	ldr	r3, [pc, #212]	; (8015754 <tcp_input+0x72c>)
 8015680:	681a      	ldr	r2, [r3, #0]
 8015682:	2300      	movs	r3, #0
 8015684:	69f9      	ldr	r1, [r7, #28]
 8015686:	2000      	movs	r0, #0
 8015688:	f7ff f890 	bl	80147ac <tcp_recv_null>
 801568c:	4603      	mov	r3, r0
 801568e:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8015690:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8015694:	f113 0f0d 	cmn.w	r3, #13
 8015698:	d053      	beq.n	8015742 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 801569a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801569e:	2b00      	cmp	r3, #0
 80156a0:	d003      	beq.n	80156aa <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 80156a2:	4b2c      	ldr	r3, [pc, #176]	; (8015754 <tcp_input+0x72c>)
 80156a4:	681a      	ldr	r2, [r3, #0]
 80156a6:	69fb      	ldr	r3, [r7, #28]
 80156a8:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 80156aa:	4b2b      	ldr	r3, [pc, #172]	; (8015758 <tcp_input+0x730>)
 80156ac:	781b      	ldrb	r3, [r3, #0]
 80156ae:	f003 0320 	and.w	r3, r3, #32
 80156b2:	2b00      	cmp	r3, #0
 80156b4:	d030      	beq.n	8015718 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 80156b6:	69fb      	ldr	r3, [r7, #28]
 80156b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80156ba:	2b00      	cmp	r3, #0
 80156bc:	d009      	beq.n	80156d2 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 80156be:	69fb      	ldr	r3, [r7, #28]
 80156c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80156c2:	7b5a      	ldrb	r2, [r3, #13]
 80156c4:	69fb      	ldr	r3, [r7, #28]
 80156c6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80156c8:	f042 0220 	orr.w	r2, r2, #32
 80156cc:	b2d2      	uxtb	r2, r2
 80156ce:	735a      	strb	r2, [r3, #13]
 80156d0:	e022      	b.n	8015718 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80156d2:	69fb      	ldr	r3, [r7, #28]
 80156d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80156d6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80156da:	d005      	beq.n	80156e8 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 80156dc:	69fb      	ldr	r3, [r7, #28]
 80156de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80156e0:	3301      	adds	r3, #1
 80156e2:	b29a      	uxth	r2, r3
 80156e4:	69fb      	ldr	r3, [r7, #28]
 80156e6:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 80156e8:	69fb      	ldr	r3, [r7, #28]
 80156ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80156ee:	2b00      	cmp	r3, #0
 80156f0:	d00b      	beq.n	801570a <tcp_input+0x6e2>
 80156f2:	69fb      	ldr	r3, [r7, #28]
 80156f4:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80156f8:	69fb      	ldr	r3, [r7, #28]
 80156fa:	6918      	ldr	r0, [r3, #16]
 80156fc:	2300      	movs	r3, #0
 80156fe:	2200      	movs	r2, #0
 8015700:	69f9      	ldr	r1, [r7, #28]
 8015702:	47a0      	blx	r4
 8015704:	4603      	mov	r3, r0
 8015706:	74fb      	strb	r3, [r7, #19]
 8015708:	e001      	b.n	801570e <tcp_input+0x6e6>
 801570a:	2300      	movs	r3, #0
 801570c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801570e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8015712:	f113 0f0d 	cmn.w	r3, #13
 8015716:	d016      	beq.n	8015746 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8015718:	4b13      	ldr	r3, [pc, #76]	; (8015768 <tcp_input+0x740>)
 801571a:	2200      	movs	r2, #0
 801571c:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 801571e:	69f8      	ldr	r0, [r7, #28]
 8015720:	f000 f88e 	bl	8015840 <tcp_input_delayed_close>
 8015724:	4603      	mov	r3, r0
 8015726:	2b00      	cmp	r3, #0
 8015728:	d128      	bne.n	801577c <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 801572a:	69f8      	ldr	r0, [r7, #28]
 801572c:	f002 ff20 	bl	8018570 <tcp_output>
 8015730:	e025      	b.n	801577e <tcp_input+0x756>
        goto aborted;
 8015732:	bf00      	nop
 8015734:	e023      	b.n	801577e <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8015736:	bf00      	nop
 8015738:	e021      	b.n	801577e <tcp_input+0x756>
              goto aborted;
 801573a:	bf00      	nop
 801573c:	e01f      	b.n	801577e <tcp_input+0x756>
          goto aborted;
 801573e:	bf00      	nop
 8015740:	e01d      	b.n	801577e <tcp_input+0x756>
            goto aborted;
 8015742:	bf00      	nop
 8015744:	e01b      	b.n	801577e <tcp_input+0x756>
              goto aborted;
 8015746:	bf00      	nop
 8015748:	e019      	b.n	801577e <tcp_input+0x756>
 801574a:	bf00      	nop
 801574c:	24007df0 	.word	0x24007df0
 8015750:	24007e00 	.word	0x24007e00
 8015754:	24007e20 	.word	0x24007e20
 8015758:	24007e1d 	.word	0x24007e1d
 801575c:	24007e18 	.word	0x24007e18
 8015760:	24007e1c 	.word	0x24007e1c
 8015764:	24007e1a 	.word	0x24007e1a
 8015768:	24007e24 	.word	0x24007e24
 801576c:	24007de4 	.word	0x24007de4
 8015770:	0802538c 	.word	0x0802538c
 8015774:	08025540 	.word	0x08025540
 8015778:	080253d8 	.word	0x080253d8
          goto aborted;
 801577c:	bf00      	nop
    tcp_input_pcb = NULL;
 801577e:	4b27      	ldr	r3, [pc, #156]	; (801581c <tcp_input+0x7f4>)
 8015780:	2200      	movs	r2, #0
 8015782:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8015784:	4b26      	ldr	r3, [pc, #152]	; (8015820 <tcp_input+0x7f8>)
 8015786:	2200      	movs	r2, #0
 8015788:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 801578a:	4b26      	ldr	r3, [pc, #152]	; (8015824 <tcp_input+0x7fc>)
 801578c:	685b      	ldr	r3, [r3, #4]
 801578e:	2b00      	cmp	r3, #0
 8015790:	d03f      	beq.n	8015812 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 8015792:	4b24      	ldr	r3, [pc, #144]	; (8015824 <tcp_input+0x7fc>)
 8015794:	685b      	ldr	r3, [r3, #4]
 8015796:	4618      	mov	r0, r3
 8015798:	f7fd fb30 	bl	8012dfc <pbuf_free>
      inseg.p = NULL;
 801579c:	4b21      	ldr	r3, [pc, #132]	; (8015824 <tcp_input+0x7fc>)
 801579e:	2200      	movs	r2, #0
 80157a0:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 80157a2:	e036      	b.n	8015812 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 80157a4:	4b20      	ldr	r3, [pc, #128]	; (8015828 <tcp_input+0x800>)
 80157a6:	681b      	ldr	r3, [r3, #0]
 80157a8:	899b      	ldrh	r3, [r3, #12]
 80157aa:	b29b      	uxth	r3, r3
 80157ac:	4618      	mov	r0, r3
 80157ae:	f7fb fe3d 	bl	801142c <lwip_htons>
 80157b2:	4603      	mov	r3, r0
 80157b4:	b2db      	uxtb	r3, r3
 80157b6:	f003 0304 	and.w	r3, r3, #4
 80157ba:	2b00      	cmp	r3, #0
 80157bc:	d118      	bne.n	80157f0 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80157be:	4b1b      	ldr	r3, [pc, #108]	; (801582c <tcp_input+0x804>)
 80157c0:	6819      	ldr	r1, [r3, #0]
 80157c2:	4b1b      	ldr	r3, [pc, #108]	; (8015830 <tcp_input+0x808>)
 80157c4:	881b      	ldrh	r3, [r3, #0]
 80157c6:	461a      	mov	r2, r3
 80157c8:	4b1a      	ldr	r3, [pc, #104]	; (8015834 <tcp_input+0x80c>)
 80157ca:	681b      	ldr	r3, [r3, #0]
 80157cc:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80157ce:	4b16      	ldr	r3, [pc, #88]	; (8015828 <tcp_input+0x800>)
 80157d0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80157d2:	885b      	ldrh	r3, [r3, #2]
 80157d4:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80157d6:	4a14      	ldr	r2, [pc, #80]	; (8015828 <tcp_input+0x800>)
 80157d8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80157da:	8812      	ldrh	r2, [r2, #0]
 80157dc:	b292      	uxth	r2, r2
 80157de:	9202      	str	r2, [sp, #8]
 80157e0:	9301      	str	r3, [sp, #4]
 80157e2:	4b15      	ldr	r3, [pc, #84]	; (8015838 <tcp_input+0x810>)
 80157e4:	9300      	str	r3, [sp, #0]
 80157e6:	4b15      	ldr	r3, [pc, #84]	; (801583c <tcp_input+0x814>)
 80157e8:	4602      	mov	r2, r0
 80157ea:	2000      	movs	r0, #0
 80157ec:	f003 fc74 	bl	80190d8 <tcp_rst>
    pbuf_free(p);
 80157f0:	6878      	ldr	r0, [r7, #4]
 80157f2:	f7fd fb03 	bl	8012dfc <pbuf_free>
  return;
 80157f6:	e00c      	b.n	8015812 <tcp_input+0x7ea>
    goto dropped;
 80157f8:	bf00      	nop
 80157fa:	e006      	b.n	801580a <tcp_input+0x7e2>
    goto dropped;
 80157fc:	bf00      	nop
 80157fe:	e004      	b.n	801580a <tcp_input+0x7e2>
    goto dropped;
 8015800:	bf00      	nop
 8015802:	e002      	b.n	801580a <tcp_input+0x7e2>
      goto dropped;
 8015804:	bf00      	nop
 8015806:	e000      	b.n	801580a <tcp_input+0x7e2>
      goto dropped;
 8015808:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 801580a:	6878      	ldr	r0, [r7, #4]
 801580c:	f7fd faf6 	bl	8012dfc <pbuf_free>
 8015810:	e000      	b.n	8015814 <tcp_input+0x7ec>
  return;
 8015812:	bf00      	nop
}
 8015814:	3724      	adds	r7, #36	; 0x24
 8015816:	46bd      	mov	sp, r7
 8015818:	bd90      	pop	{r4, r7, pc}
 801581a:	bf00      	nop
 801581c:	24007e24 	.word	0x24007e24
 8015820:	24007e20 	.word	0x24007e20
 8015824:	24007df0 	.word	0x24007df0
 8015828:	24007e00 	.word	0x24007e00
 801582c:	24007e14 	.word	0x24007e14
 8015830:	24007e1a 	.word	0x24007e1a
 8015834:	24007e10 	.word	0x24007e10
 8015838:	24004cc8 	.word	0x24004cc8
 801583c:	24004ccc 	.word	0x24004ccc

08015840 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8015840:	b580      	push	{r7, lr}
 8015842:	b082      	sub	sp, #8
 8015844:	af00      	add	r7, sp, #0
 8015846:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8015848:	687b      	ldr	r3, [r7, #4]
 801584a:	2b00      	cmp	r3, #0
 801584c:	d106      	bne.n	801585c <tcp_input_delayed_close+0x1c>
 801584e:	4b17      	ldr	r3, [pc, #92]	; (80158ac <tcp_input_delayed_close+0x6c>)
 8015850:	f240 225a 	movw	r2, #602	; 0x25a
 8015854:	4916      	ldr	r1, [pc, #88]	; (80158b0 <tcp_input_delayed_close+0x70>)
 8015856:	4817      	ldr	r0, [pc, #92]	; (80158b4 <tcp_input_delayed_close+0x74>)
 8015858:	f00a fdfa 	bl	8020450 <iprintf>

  if (recv_flags & TF_CLOSED) {
 801585c:	4b16      	ldr	r3, [pc, #88]	; (80158b8 <tcp_input_delayed_close+0x78>)
 801585e:	781b      	ldrb	r3, [r3, #0]
 8015860:	f003 0310 	and.w	r3, r3, #16
 8015864:	2b00      	cmp	r3, #0
 8015866:	d01c      	beq.n	80158a2 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8015868:	687b      	ldr	r3, [r7, #4]
 801586a:	8b5b      	ldrh	r3, [r3, #26]
 801586c:	f003 0310 	and.w	r3, r3, #16
 8015870:	2b00      	cmp	r3, #0
 8015872:	d10d      	bne.n	8015890 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8015874:	687b      	ldr	r3, [r7, #4]
 8015876:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801587a:	2b00      	cmp	r3, #0
 801587c:	d008      	beq.n	8015890 <tcp_input_delayed_close+0x50>
 801587e:	687b      	ldr	r3, [r7, #4]
 8015880:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015884:	687a      	ldr	r2, [r7, #4]
 8015886:	6912      	ldr	r2, [r2, #16]
 8015888:	f06f 010e 	mvn.w	r1, #14
 801588c:	4610      	mov	r0, r2
 801588e:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8015890:	6879      	ldr	r1, [r7, #4]
 8015892:	480a      	ldr	r0, [pc, #40]	; (80158bc <tcp_input_delayed_close+0x7c>)
 8015894:	f7ff fa50 	bl	8014d38 <tcp_pcb_remove>
    tcp_free(pcb);
 8015898:	6878      	ldr	r0, [r7, #4]
 801589a:	f7fd fd6b 	bl	8013374 <tcp_free>
    return 1;
 801589e:	2301      	movs	r3, #1
 80158a0:	e000      	b.n	80158a4 <tcp_input_delayed_close+0x64>
  }
  return 0;
 80158a2:	2300      	movs	r3, #0
}
 80158a4:	4618      	mov	r0, r3
 80158a6:	3708      	adds	r7, #8
 80158a8:	46bd      	mov	sp, r7
 80158aa:	bd80      	pop	{r7, pc}
 80158ac:	0802538c 	.word	0x0802538c
 80158b0:	0802555c 	.word	0x0802555c
 80158b4:	080253d8 	.word	0x080253d8
 80158b8:	24007e1d 	.word	0x24007e1d
 80158bc:	24007de4 	.word	0x24007de4

080158c0 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 80158c0:	b590      	push	{r4, r7, lr}
 80158c2:	b08b      	sub	sp, #44	; 0x2c
 80158c4:	af04      	add	r7, sp, #16
 80158c6:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 80158c8:	4b6f      	ldr	r3, [pc, #444]	; (8015a88 <tcp_listen_input+0x1c8>)
 80158ca:	781b      	ldrb	r3, [r3, #0]
 80158cc:	f003 0304 	and.w	r3, r3, #4
 80158d0:	2b00      	cmp	r3, #0
 80158d2:	f040 80d2 	bne.w	8015a7a <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 80158d6:	687b      	ldr	r3, [r7, #4]
 80158d8:	2b00      	cmp	r3, #0
 80158da:	d106      	bne.n	80158ea <tcp_listen_input+0x2a>
 80158dc:	4b6b      	ldr	r3, [pc, #428]	; (8015a8c <tcp_listen_input+0x1cc>)
 80158de:	f240 2281 	movw	r2, #641	; 0x281
 80158e2:	496b      	ldr	r1, [pc, #428]	; (8015a90 <tcp_listen_input+0x1d0>)
 80158e4:	486b      	ldr	r0, [pc, #428]	; (8015a94 <tcp_listen_input+0x1d4>)
 80158e6:	f00a fdb3 	bl	8020450 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 80158ea:	4b67      	ldr	r3, [pc, #412]	; (8015a88 <tcp_listen_input+0x1c8>)
 80158ec:	781b      	ldrb	r3, [r3, #0]
 80158ee:	f003 0310 	and.w	r3, r3, #16
 80158f2:	2b00      	cmp	r3, #0
 80158f4:	d019      	beq.n	801592a <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80158f6:	4b68      	ldr	r3, [pc, #416]	; (8015a98 <tcp_listen_input+0x1d8>)
 80158f8:	6819      	ldr	r1, [r3, #0]
 80158fa:	4b68      	ldr	r3, [pc, #416]	; (8015a9c <tcp_listen_input+0x1dc>)
 80158fc:	881b      	ldrh	r3, [r3, #0]
 80158fe:	461a      	mov	r2, r3
 8015900:	4b67      	ldr	r3, [pc, #412]	; (8015aa0 <tcp_listen_input+0x1e0>)
 8015902:	681b      	ldr	r3, [r3, #0]
 8015904:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015906:	4b67      	ldr	r3, [pc, #412]	; (8015aa4 <tcp_listen_input+0x1e4>)
 8015908:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801590a:	885b      	ldrh	r3, [r3, #2]
 801590c:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801590e:	4a65      	ldr	r2, [pc, #404]	; (8015aa4 <tcp_listen_input+0x1e4>)
 8015910:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015912:	8812      	ldrh	r2, [r2, #0]
 8015914:	b292      	uxth	r2, r2
 8015916:	9202      	str	r2, [sp, #8]
 8015918:	9301      	str	r3, [sp, #4]
 801591a:	4b63      	ldr	r3, [pc, #396]	; (8015aa8 <tcp_listen_input+0x1e8>)
 801591c:	9300      	str	r3, [sp, #0]
 801591e:	4b63      	ldr	r3, [pc, #396]	; (8015aac <tcp_listen_input+0x1ec>)
 8015920:	4602      	mov	r2, r0
 8015922:	6878      	ldr	r0, [r7, #4]
 8015924:	f003 fbd8 	bl	80190d8 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8015928:	e0a9      	b.n	8015a7e <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 801592a:	4b57      	ldr	r3, [pc, #348]	; (8015a88 <tcp_listen_input+0x1c8>)
 801592c:	781b      	ldrb	r3, [r3, #0]
 801592e:	f003 0302 	and.w	r3, r3, #2
 8015932:	2b00      	cmp	r3, #0
 8015934:	f000 80a3 	beq.w	8015a7e <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8015938:	687b      	ldr	r3, [r7, #4]
 801593a:	7d5b      	ldrb	r3, [r3, #21]
 801593c:	4618      	mov	r0, r3
 801593e:	f7ff f859 	bl	80149f4 <tcp_alloc>
 8015942:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8015944:	697b      	ldr	r3, [r7, #20]
 8015946:	2b00      	cmp	r3, #0
 8015948:	d111      	bne.n	801596e <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801594a:	687b      	ldr	r3, [r7, #4]
 801594c:	699b      	ldr	r3, [r3, #24]
 801594e:	2b00      	cmp	r3, #0
 8015950:	d00a      	beq.n	8015968 <tcp_listen_input+0xa8>
 8015952:	687b      	ldr	r3, [r7, #4]
 8015954:	699b      	ldr	r3, [r3, #24]
 8015956:	687a      	ldr	r2, [r7, #4]
 8015958:	6910      	ldr	r0, [r2, #16]
 801595a:	f04f 32ff 	mov.w	r2, #4294967295
 801595e:	2100      	movs	r1, #0
 8015960:	4798      	blx	r3
 8015962:	4603      	mov	r3, r0
 8015964:	73bb      	strb	r3, [r7, #14]
      return;
 8015966:	e08b      	b.n	8015a80 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8015968:	23f0      	movs	r3, #240	; 0xf0
 801596a:	73bb      	strb	r3, [r7, #14]
      return;
 801596c:	e088      	b.n	8015a80 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 801596e:	4b50      	ldr	r3, [pc, #320]	; (8015ab0 <tcp_listen_input+0x1f0>)
 8015970:	695a      	ldr	r2, [r3, #20]
 8015972:	697b      	ldr	r3, [r7, #20]
 8015974:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8015976:	4b4e      	ldr	r3, [pc, #312]	; (8015ab0 <tcp_listen_input+0x1f0>)
 8015978:	691a      	ldr	r2, [r3, #16]
 801597a:	697b      	ldr	r3, [r7, #20]
 801597c:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 801597e:	687b      	ldr	r3, [r7, #4]
 8015980:	8ada      	ldrh	r2, [r3, #22]
 8015982:	697b      	ldr	r3, [r7, #20]
 8015984:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8015986:	4b47      	ldr	r3, [pc, #284]	; (8015aa4 <tcp_listen_input+0x1e4>)
 8015988:	681b      	ldr	r3, [r3, #0]
 801598a:	881b      	ldrh	r3, [r3, #0]
 801598c:	b29a      	uxth	r2, r3
 801598e:	697b      	ldr	r3, [r7, #20]
 8015990:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8015992:	697b      	ldr	r3, [r7, #20]
 8015994:	2203      	movs	r2, #3
 8015996:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8015998:	4b41      	ldr	r3, [pc, #260]	; (8015aa0 <tcp_listen_input+0x1e0>)
 801599a:	681b      	ldr	r3, [r3, #0]
 801599c:	1c5a      	adds	r2, r3, #1
 801599e:	697b      	ldr	r3, [r7, #20]
 80159a0:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 80159a2:	697b      	ldr	r3, [r7, #20]
 80159a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80159a6:	697b      	ldr	r3, [r7, #20]
 80159a8:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 80159aa:	6978      	ldr	r0, [r7, #20]
 80159ac:	f7ff fa58 	bl	8014e60 <tcp_next_iss>
 80159b0:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 80159b2:	697b      	ldr	r3, [r7, #20]
 80159b4:	693a      	ldr	r2, [r7, #16]
 80159b6:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 80159b8:	697b      	ldr	r3, [r7, #20]
 80159ba:	693a      	ldr	r2, [r7, #16]
 80159bc:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 80159be:	697b      	ldr	r3, [r7, #20]
 80159c0:	693a      	ldr	r2, [r7, #16]
 80159c2:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 80159c4:	697b      	ldr	r3, [r7, #20]
 80159c6:	693a      	ldr	r2, [r7, #16]
 80159c8:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 80159ca:	4b35      	ldr	r3, [pc, #212]	; (8015aa0 <tcp_listen_input+0x1e0>)
 80159cc:	681b      	ldr	r3, [r3, #0]
 80159ce:	1e5a      	subs	r2, r3, #1
 80159d0:	697b      	ldr	r3, [r7, #20]
 80159d2:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 80159d4:	687b      	ldr	r3, [r7, #4]
 80159d6:	691a      	ldr	r2, [r3, #16]
 80159d8:	697b      	ldr	r3, [r7, #20]
 80159da:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 80159dc:	697b      	ldr	r3, [r7, #20]
 80159de:	687a      	ldr	r2, [r7, #4]
 80159e0:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 80159e2:	687b      	ldr	r3, [r7, #4]
 80159e4:	7a5b      	ldrb	r3, [r3, #9]
 80159e6:	f003 030c 	and.w	r3, r3, #12
 80159ea:	b2da      	uxtb	r2, r3
 80159ec:	697b      	ldr	r3, [r7, #20]
 80159ee:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 80159f0:	687b      	ldr	r3, [r7, #4]
 80159f2:	7a1a      	ldrb	r2, [r3, #8]
 80159f4:	697b      	ldr	r3, [r7, #20]
 80159f6:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 80159f8:	4b2e      	ldr	r3, [pc, #184]	; (8015ab4 <tcp_listen_input+0x1f4>)
 80159fa:	681a      	ldr	r2, [r3, #0]
 80159fc:	697b      	ldr	r3, [r7, #20]
 80159fe:	60da      	str	r2, [r3, #12]
 8015a00:	4a2c      	ldr	r2, [pc, #176]	; (8015ab4 <tcp_listen_input+0x1f4>)
 8015a02:	697b      	ldr	r3, [r7, #20]
 8015a04:	6013      	str	r3, [r2, #0]
 8015a06:	f003 fd29 	bl	801945c <tcp_timer_needed>
 8015a0a:	4b2b      	ldr	r3, [pc, #172]	; (8015ab8 <tcp_listen_input+0x1f8>)
 8015a0c:	2201      	movs	r2, #1
 8015a0e:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8015a10:	6978      	ldr	r0, [r7, #20]
 8015a12:	f001 fd8f 	bl	8017534 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8015a16:	4b23      	ldr	r3, [pc, #140]	; (8015aa4 <tcp_listen_input+0x1e4>)
 8015a18:	681b      	ldr	r3, [r3, #0]
 8015a1a:	89db      	ldrh	r3, [r3, #14]
 8015a1c:	b29a      	uxth	r2, r3
 8015a1e:	697b      	ldr	r3, [r7, #20]
 8015a20:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8015a24:	697b      	ldr	r3, [r7, #20]
 8015a26:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8015a2a:	697b      	ldr	r3, [r7, #20]
 8015a2c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8015a30:	697b      	ldr	r3, [r7, #20]
 8015a32:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8015a34:	697b      	ldr	r3, [r7, #20]
 8015a36:	3304      	adds	r3, #4
 8015a38:	4618      	mov	r0, r3
 8015a3a:	f007 fb79 	bl	801d130 <ip4_route>
 8015a3e:	4601      	mov	r1, r0
 8015a40:	697b      	ldr	r3, [r7, #20]
 8015a42:	3304      	adds	r3, #4
 8015a44:	461a      	mov	r2, r3
 8015a46:	4620      	mov	r0, r4
 8015a48:	f7ff fa30 	bl	8014eac <tcp_eff_send_mss_netif>
 8015a4c:	4603      	mov	r3, r0
 8015a4e:	461a      	mov	r2, r3
 8015a50:	697b      	ldr	r3, [r7, #20]
 8015a52:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8015a54:	2112      	movs	r1, #18
 8015a56:	6978      	ldr	r0, [r7, #20]
 8015a58:	f002 fc9c 	bl	8018394 <tcp_enqueue_flags>
 8015a5c:	4603      	mov	r3, r0
 8015a5e:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8015a60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015a64:	2b00      	cmp	r3, #0
 8015a66:	d004      	beq.n	8015a72 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8015a68:	2100      	movs	r1, #0
 8015a6a:	6978      	ldr	r0, [r7, #20]
 8015a6c:	f7fd ff08 	bl	8013880 <tcp_abandon>
      return;
 8015a70:	e006      	b.n	8015a80 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8015a72:	6978      	ldr	r0, [r7, #20]
 8015a74:	f002 fd7c 	bl	8018570 <tcp_output>
  return;
 8015a78:	e001      	b.n	8015a7e <tcp_listen_input+0x1be>
    return;
 8015a7a:	bf00      	nop
 8015a7c:	e000      	b.n	8015a80 <tcp_listen_input+0x1c0>
  return;
 8015a7e:	bf00      	nop
}
 8015a80:	371c      	adds	r7, #28
 8015a82:	46bd      	mov	sp, r7
 8015a84:	bd90      	pop	{r4, r7, pc}
 8015a86:	bf00      	nop
 8015a88:	24007e1c 	.word	0x24007e1c
 8015a8c:	0802538c 	.word	0x0802538c
 8015a90:	08025584 	.word	0x08025584
 8015a94:	080253d8 	.word	0x080253d8
 8015a98:	24007e14 	.word	0x24007e14
 8015a9c:	24007e1a 	.word	0x24007e1a
 8015aa0:	24007e10 	.word	0x24007e10
 8015aa4:	24007e00 	.word	0x24007e00
 8015aa8:	24004cc8 	.word	0x24004cc8
 8015aac:	24004ccc 	.word	0x24004ccc
 8015ab0:	24004cb8 	.word	0x24004cb8
 8015ab4:	24007de4 	.word	0x24007de4
 8015ab8:	24007dec 	.word	0x24007dec

08015abc <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8015abc:	b580      	push	{r7, lr}
 8015abe:	b086      	sub	sp, #24
 8015ac0:	af04      	add	r7, sp, #16
 8015ac2:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8015ac4:	4b2f      	ldr	r3, [pc, #188]	; (8015b84 <tcp_timewait_input+0xc8>)
 8015ac6:	781b      	ldrb	r3, [r3, #0]
 8015ac8:	f003 0304 	and.w	r3, r3, #4
 8015acc:	2b00      	cmp	r3, #0
 8015ace:	d153      	bne.n	8015b78 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8015ad0:	687b      	ldr	r3, [r7, #4]
 8015ad2:	2b00      	cmp	r3, #0
 8015ad4:	d106      	bne.n	8015ae4 <tcp_timewait_input+0x28>
 8015ad6:	4b2c      	ldr	r3, [pc, #176]	; (8015b88 <tcp_timewait_input+0xcc>)
 8015ad8:	f240 22ee 	movw	r2, #750	; 0x2ee
 8015adc:	492b      	ldr	r1, [pc, #172]	; (8015b8c <tcp_timewait_input+0xd0>)
 8015ade:	482c      	ldr	r0, [pc, #176]	; (8015b90 <tcp_timewait_input+0xd4>)
 8015ae0:	f00a fcb6 	bl	8020450 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8015ae4:	4b27      	ldr	r3, [pc, #156]	; (8015b84 <tcp_timewait_input+0xc8>)
 8015ae6:	781b      	ldrb	r3, [r3, #0]
 8015ae8:	f003 0302 	and.w	r3, r3, #2
 8015aec:	2b00      	cmp	r3, #0
 8015aee:	d02a      	beq.n	8015b46 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8015af0:	4b28      	ldr	r3, [pc, #160]	; (8015b94 <tcp_timewait_input+0xd8>)
 8015af2:	681a      	ldr	r2, [r3, #0]
 8015af4:	687b      	ldr	r3, [r7, #4]
 8015af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015af8:	1ad3      	subs	r3, r2, r3
 8015afa:	2b00      	cmp	r3, #0
 8015afc:	db2d      	blt.n	8015b5a <tcp_timewait_input+0x9e>
 8015afe:	4b25      	ldr	r3, [pc, #148]	; (8015b94 <tcp_timewait_input+0xd8>)
 8015b00:	681a      	ldr	r2, [r3, #0]
 8015b02:	687b      	ldr	r3, [r7, #4]
 8015b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015b06:	6879      	ldr	r1, [r7, #4]
 8015b08:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8015b0a:	440b      	add	r3, r1
 8015b0c:	1ad3      	subs	r3, r2, r3
 8015b0e:	2b00      	cmp	r3, #0
 8015b10:	dc23      	bgt.n	8015b5a <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015b12:	4b21      	ldr	r3, [pc, #132]	; (8015b98 <tcp_timewait_input+0xdc>)
 8015b14:	6819      	ldr	r1, [r3, #0]
 8015b16:	4b21      	ldr	r3, [pc, #132]	; (8015b9c <tcp_timewait_input+0xe0>)
 8015b18:	881b      	ldrh	r3, [r3, #0]
 8015b1a:	461a      	mov	r2, r3
 8015b1c:	4b1d      	ldr	r3, [pc, #116]	; (8015b94 <tcp_timewait_input+0xd8>)
 8015b1e:	681b      	ldr	r3, [r3, #0]
 8015b20:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015b22:	4b1f      	ldr	r3, [pc, #124]	; (8015ba0 <tcp_timewait_input+0xe4>)
 8015b24:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015b26:	885b      	ldrh	r3, [r3, #2]
 8015b28:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015b2a:	4a1d      	ldr	r2, [pc, #116]	; (8015ba0 <tcp_timewait_input+0xe4>)
 8015b2c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015b2e:	8812      	ldrh	r2, [r2, #0]
 8015b30:	b292      	uxth	r2, r2
 8015b32:	9202      	str	r2, [sp, #8]
 8015b34:	9301      	str	r3, [sp, #4]
 8015b36:	4b1b      	ldr	r3, [pc, #108]	; (8015ba4 <tcp_timewait_input+0xe8>)
 8015b38:	9300      	str	r3, [sp, #0]
 8015b3a:	4b1b      	ldr	r3, [pc, #108]	; (8015ba8 <tcp_timewait_input+0xec>)
 8015b3c:	4602      	mov	r2, r0
 8015b3e:	6878      	ldr	r0, [r7, #4]
 8015b40:	f003 faca 	bl	80190d8 <tcp_rst>
      return;
 8015b44:	e01b      	b.n	8015b7e <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8015b46:	4b0f      	ldr	r3, [pc, #60]	; (8015b84 <tcp_timewait_input+0xc8>)
 8015b48:	781b      	ldrb	r3, [r3, #0]
 8015b4a:	f003 0301 	and.w	r3, r3, #1
 8015b4e:	2b00      	cmp	r3, #0
 8015b50:	d003      	beq.n	8015b5a <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8015b52:	4b16      	ldr	r3, [pc, #88]	; (8015bac <tcp_timewait_input+0xf0>)
 8015b54:	681a      	ldr	r2, [r3, #0]
 8015b56:	687b      	ldr	r3, [r7, #4]
 8015b58:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8015b5a:	4b10      	ldr	r3, [pc, #64]	; (8015b9c <tcp_timewait_input+0xe0>)
 8015b5c:	881b      	ldrh	r3, [r3, #0]
 8015b5e:	2b00      	cmp	r3, #0
 8015b60:	d00c      	beq.n	8015b7c <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8015b62:	687b      	ldr	r3, [r7, #4]
 8015b64:	8b5b      	ldrh	r3, [r3, #26]
 8015b66:	f043 0302 	orr.w	r3, r3, #2
 8015b6a:	b29a      	uxth	r2, r3
 8015b6c:	687b      	ldr	r3, [r7, #4]
 8015b6e:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8015b70:	6878      	ldr	r0, [r7, #4]
 8015b72:	f002 fcfd 	bl	8018570 <tcp_output>
  }
  return;
 8015b76:	e001      	b.n	8015b7c <tcp_timewait_input+0xc0>
    return;
 8015b78:	bf00      	nop
 8015b7a:	e000      	b.n	8015b7e <tcp_timewait_input+0xc2>
  return;
 8015b7c:	bf00      	nop
}
 8015b7e:	3708      	adds	r7, #8
 8015b80:	46bd      	mov	sp, r7
 8015b82:	bd80      	pop	{r7, pc}
 8015b84:	24007e1c 	.word	0x24007e1c
 8015b88:	0802538c 	.word	0x0802538c
 8015b8c:	080255a4 	.word	0x080255a4
 8015b90:	080253d8 	.word	0x080253d8
 8015b94:	24007e10 	.word	0x24007e10
 8015b98:	24007e14 	.word	0x24007e14
 8015b9c:	24007e1a 	.word	0x24007e1a
 8015ba0:	24007e00 	.word	0x24007e00
 8015ba4:	24004cc8 	.word	0x24004cc8
 8015ba8:	24004ccc 	.word	0x24004ccc
 8015bac:	24007dd8 	.word	0x24007dd8

08015bb0 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8015bb0:	b590      	push	{r4, r7, lr}
 8015bb2:	b08d      	sub	sp, #52	; 0x34
 8015bb4:	af04      	add	r7, sp, #16
 8015bb6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8015bb8:	2300      	movs	r3, #0
 8015bba:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8015bbc:	2300      	movs	r3, #0
 8015bbe:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8015bc0:	687b      	ldr	r3, [r7, #4]
 8015bc2:	2b00      	cmp	r3, #0
 8015bc4:	d106      	bne.n	8015bd4 <tcp_process+0x24>
 8015bc6:	4b9d      	ldr	r3, [pc, #628]	; (8015e3c <tcp_process+0x28c>)
 8015bc8:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8015bcc:	499c      	ldr	r1, [pc, #624]	; (8015e40 <tcp_process+0x290>)
 8015bce:	489d      	ldr	r0, [pc, #628]	; (8015e44 <tcp_process+0x294>)
 8015bd0:	f00a fc3e 	bl	8020450 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8015bd4:	4b9c      	ldr	r3, [pc, #624]	; (8015e48 <tcp_process+0x298>)
 8015bd6:	781b      	ldrb	r3, [r3, #0]
 8015bd8:	f003 0304 	and.w	r3, r3, #4
 8015bdc:	2b00      	cmp	r3, #0
 8015bde:	d04e      	beq.n	8015c7e <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8015be0:	687b      	ldr	r3, [r7, #4]
 8015be2:	7d1b      	ldrb	r3, [r3, #20]
 8015be4:	2b02      	cmp	r3, #2
 8015be6:	d108      	bne.n	8015bfa <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8015be8:	687b      	ldr	r3, [r7, #4]
 8015bea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8015bec:	4b97      	ldr	r3, [pc, #604]	; (8015e4c <tcp_process+0x29c>)
 8015bee:	681b      	ldr	r3, [r3, #0]
 8015bf0:	429a      	cmp	r2, r3
 8015bf2:	d123      	bne.n	8015c3c <tcp_process+0x8c>
        acceptable = 1;
 8015bf4:	2301      	movs	r3, #1
 8015bf6:	76fb      	strb	r3, [r7, #27]
 8015bf8:	e020      	b.n	8015c3c <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8015bfa:	687b      	ldr	r3, [r7, #4]
 8015bfc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015bfe:	4b94      	ldr	r3, [pc, #592]	; (8015e50 <tcp_process+0x2a0>)
 8015c00:	681b      	ldr	r3, [r3, #0]
 8015c02:	429a      	cmp	r2, r3
 8015c04:	d102      	bne.n	8015c0c <tcp_process+0x5c>
        acceptable = 1;
 8015c06:	2301      	movs	r3, #1
 8015c08:	76fb      	strb	r3, [r7, #27]
 8015c0a:	e017      	b.n	8015c3c <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8015c0c:	4b90      	ldr	r3, [pc, #576]	; (8015e50 <tcp_process+0x2a0>)
 8015c0e:	681a      	ldr	r2, [r3, #0]
 8015c10:	687b      	ldr	r3, [r7, #4]
 8015c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015c14:	1ad3      	subs	r3, r2, r3
 8015c16:	2b00      	cmp	r3, #0
 8015c18:	db10      	blt.n	8015c3c <tcp_process+0x8c>
 8015c1a:	4b8d      	ldr	r3, [pc, #564]	; (8015e50 <tcp_process+0x2a0>)
 8015c1c:	681a      	ldr	r2, [r3, #0]
 8015c1e:	687b      	ldr	r3, [r7, #4]
 8015c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015c22:	6879      	ldr	r1, [r7, #4]
 8015c24:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8015c26:	440b      	add	r3, r1
 8015c28:	1ad3      	subs	r3, r2, r3
 8015c2a:	2b00      	cmp	r3, #0
 8015c2c:	dc06      	bgt.n	8015c3c <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8015c2e:	687b      	ldr	r3, [r7, #4]
 8015c30:	8b5b      	ldrh	r3, [r3, #26]
 8015c32:	f043 0302 	orr.w	r3, r3, #2
 8015c36:	b29a      	uxth	r2, r3
 8015c38:	687b      	ldr	r3, [r7, #4]
 8015c3a:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8015c3c:	7efb      	ldrb	r3, [r7, #27]
 8015c3e:	2b00      	cmp	r3, #0
 8015c40:	d01b      	beq.n	8015c7a <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8015c42:	687b      	ldr	r3, [r7, #4]
 8015c44:	7d1b      	ldrb	r3, [r3, #20]
 8015c46:	2b00      	cmp	r3, #0
 8015c48:	d106      	bne.n	8015c58 <tcp_process+0xa8>
 8015c4a:	4b7c      	ldr	r3, [pc, #496]	; (8015e3c <tcp_process+0x28c>)
 8015c4c:	f44f 724e 	mov.w	r2, #824	; 0x338
 8015c50:	4980      	ldr	r1, [pc, #512]	; (8015e54 <tcp_process+0x2a4>)
 8015c52:	487c      	ldr	r0, [pc, #496]	; (8015e44 <tcp_process+0x294>)
 8015c54:	f00a fbfc 	bl	8020450 <iprintf>
      recv_flags |= TF_RESET;
 8015c58:	4b7f      	ldr	r3, [pc, #508]	; (8015e58 <tcp_process+0x2a8>)
 8015c5a:	781b      	ldrb	r3, [r3, #0]
 8015c5c:	f043 0308 	orr.w	r3, r3, #8
 8015c60:	b2da      	uxtb	r2, r3
 8015c62:	4b7d      	ldr	r3, [pc, #500]	; (8015e58 <tcp_process+0x2a8>)
 8015c64:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8015c66:	687b      	ldr	r3, [r7, #4]
 8015c68:	8b5b      	ldrh	r3, [r3, #26]
 8015c6a:	f023 0301 	bic.w	r3, r3, #1
 8015c6e:	b29a      	uxth	r2, r3
 8015c70:	687b      	ldr	r3, [r7, #4]
 8015c72:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8015c74:	f06f 030d 	mvn.w	r3, #13
 8015c78:	e37a      	b.n	8016370 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8015c7a:	2300      	movs	r3, #0
 8015c7c:	e378      	b.n	8016370 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8015c7e:	4b72      	ldr	r3, [pc, #456]	; (8015e48 <tcp_process+0x298>)
 8015c80:	781b      	ldrb	r3, [r3, #0]
 8015c82:	f003 0302 	and.w	r3, r3, #2
 8015c86:	2b00      	cmp	r3, #0
 8015c88:	d010      	beq.n	8015cac <tcp_process+0xfc>
 8015c8a:	687b      	ldr	r3, [r7, #4]
 8015c8c:	7d1b      	ldrb	r3, [r3, #20]
 8015c8e:	2b02      	cmp	r3, #2
 8015c90:	d00c      	beq.n	8015cac <tcp_process+0xfc>
 8015c92:	687b      	ldr	r3, [r7, #4]
 8015c94:	7d1b      	ldrb	r3, [r3, #20]
 8015c96:	2b03      	cmp	r3, #3
 8015c98:	d008      	beq.n	8015cac <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8015c9a:	687b      	ldr	r3, [r7, #4]
 8015c9c:	8b5b      	ldrh	r3, [r3, #26]
 8015c9e:	f043 0302 	orr.w	r3, r3, #2
 8015ca2:	b29a      	uxth	r2, r3
 8015ca4:	687b      	ldr	r3, [r7, #4]
 8015ca6:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8015ca8:	2300      	movs	r3, #0
 8015caa:	e361      	b.n	8016370 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8015cac:	687b      	ldr	r3, [r7, #4]
 8015cae:	8b5b      	ldrh	r3, [r3, #26]
 8015cb0:	f003 0310 	and.w	r3, r3, #16
 8015cb4:	2b00      	cmp	r3, #0
 8015cb6:	d103      	bne.n	8015cc0 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8015cb8:	4b68      	ldr	r3, [pc, #416]	; (8015e5c <tcp_process+0x2ac>)
 8015cba:	681a      	ldr	r2, [r3, #0]
 8015cbc:	687b      	ldr	r3, [r7, #4]
 8015cbe:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8015cc0:	687b      	ldr	r3, [r7, #4]
 8015cc2:	2200      	movs	r2, #0
 8015cc4:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8015cc8:	687b      	ldr	r3, [r7, #4]
 8015cca:	2200      	movs	r2, #0
 8015ccc:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8015cd0:	6878      	ldr	r0, [r7, #4]
 8015cd2:	f001 fc2f 	bl	8017534 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8015cd6:	687b      	ldr	r3, [r7, #4]
 8015cd8:	7d1b      	ldrb	r3, [r3, #20]
 8015cda:	3b02      	subs	r3, #2
 8015cdc:	2b07      	cmp	r3, #7
 8015cde:	f200 8337 	bhi.w	8016350 <tcp_process+0x7a0>
 8015ce2:	a201      	add	r2, pc, #4	; (adr r2, 8015ce8 <tcp_process+0x138>)
 8015ce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015ce8:	08015d09 	.word	0x08015d09
 8015cec:	08015f39 	.word	0x08015f39
 8015cf0:	080160b1 	.word	0x080160b1
 8015cf4:	080160db 	.word	0x080160db
 8015cf8:	080161ff 	.word	0x080161ff
 8015cfc:	080160b1 	.word	0x080160b1
 8015d00:	0801628b 	.word	0x0801628b
 8015d04:	0801631b 	.word	0x0801631b
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8015d08:	4b4f      	ldr	r3, [pc, #316]	; (8015e48 <tcp_process+0x298>)
 8015d0a:	781b      	ldrb	r3, [r3, #0]
 8015d0c:	f003 0310 	and.w	r3, r3, #16
 8015d10:	2b00      	cmp	r3, #0
 8015d12:	f000 80e4 	beq.w	8015ede <tcp_process+0x32e>
 8015d16:	4b4c      	ldr	r3, [pc, #304]	; (8015e48 <tcp_process+0x298>)
 8015d18:	781b      	ldrb	r3, [r3, #0]
 8015d1a:	f003 0302 	and.w	r3, r3, #2
 8015d1e:	2b00      	cmp	r3, #0
 8015d20:	f000 80dd 	beq.w	8015ede <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8015d24:	687b      	ldr	r3, [r7, #4]
 8015d26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015d28:	1c5a      	adds	r2, r3, #1
 8015d2a:	4b48      	ldr	r3, [pc, #288]	; (8015e4c <tcp_process+0x29c>)
 8015d2c:	681b      	ldr	r3, [r3, #0]
 8015d2e:	429a      	cmp	r2, r3
 8015d30:	f040 80d5 	bne.w	8015ede <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8015d34:	4b46      	ldr	r3, [pc, #280]	; (8015e50 <tcp_process+0x2a0>)
 8015d36:	681b      	ldr	r3, [r3, #0]
 8015d38:	1c5a      	adds	r2, r3, #1
 8015d3a:	687b      	ldr	r3, [r7, #4]
 8015d3c:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8015d3e:	687b      	ldr	r3, [r7, #4]
 8015d40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015d42:	687b      	ldr	r3, [r7, #4]
 8015d44:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8015d46:	4b41      	ldr	r3, [pc, #260]	; (8015e4c <tcp_process+0x29c>)
 8015d48:	681a      	ldr	r2, [r3, #0]
 8015d4a:	687b      	ldr	r3, [r7, #4]
 8015d4c:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8015d4e:	4b44      	ldr	r3, [pc, #272]	; (8015e60 <tcp_process+0x2b0>)
 8015d50:	681b      	ldr	r3, [r3, #0]
 8015d52:	89db      	ldrh	r3, [r3, #14]
 8015d54:	b29a      	uxth	r2, r3
 8015d56:	687b      	ldr	r3, [r7, #4]
 8015d58:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8015d5c:	687b      	ldr	r3, [r7, #4]
 8015d5e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8015d62:	687b      	ldr	r3, [r7, #4]
 8015d64:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8015d68:	4b39      	ldr	r3, [pc, #228]	; (8015e50 <tcp_process+0x2a0>)
 8015d6a:	681b      	ldr	r3, [r3, #0]
 8015d6c:	1e5a      	subs	r2, r3, #1
 8015d6e:	687b      	ldr	r3, [r7, #4]
 8015d70:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8015d72:	687b      	ldr	r3, [r7, #4]
 8015d74:	2204      	movs	r2, #4
 8015d76:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8015d78:	687b      	ldr	r3, [r7, #4]
 8015d7a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8015d7c:	687b      	ldr	r3, [r7, #4]
 8015d7e:	3304      	adds	r3, #4
 8015d80:	4618      	mov	r0, r3
 8015d82:	f007 f9d5 	bl	801d130 <ip4_route>
 8015d86:	4601      	mov	r1, r0
 8015d88:	687b      	ldr	r3, [r7, #4]
 8015d8a:	3304      	adds	r3, #4
 8015d8c:	461a      	mov	r2, r3
 8015d8e:	4620      	mov	r0, r4
 8015d90:	f7ff f88c 	bl	8014eac <tcp_eff_send_mss_netif>
 8015d94:	4603      	mov	r3, r0
 8015d96:	461a      	mov	r2, r3
 8015d98:	687b      	ldr	r3, [r7, #4]
 8015d9a:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8015d9c:	687b      	ldr	r3, [r7, #4]
 8015d9e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015da0:	009a      	lsls	r2, r3, #2
 8015da2:	687b      	ldr	r3, [r7, #4]
 8015da4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015da6:	005b      	lsls	r3, r3, #1
 8015da8:	f241 111c 	movw	r1, #4380	; 0x111c
 8015dac:	428b      	cmp	r3, r1
 8015dae:	bf38      	it	cc
 8015db0:	460b      	movcc	r3, r1
 8015db2:	429a      	cmp	r2, r3
 8015db4:	d204      	bcs.n	8015dc0 <tcp_process+0x210>
 8015db6:	687b      	ldr	r3, [r7, #4]
 8015db8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015dba:	009b      	lsls	r3, r3, #2
 8015dbc:	b29b      	uxth	r3, r3
 8015dbe:	e00d      	b.n	8015ddc <tcp_process+0x22c>
 8015dc0:	687b      	ldr	r3, [r7, #4]
 8015dc2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015dc4:	005b      	lsls	r3, r3, #1
 8015dc6:	f241 121c 	movw	r2, #4380	; 0x111c
 8015dca:	4293      	cmp	r3, r2
 8015dcc:	d904      	bls.n	8015dd8 <tcp_process+0x228>
 8015dce:	687b      	ldr	r3, [r7, #4]
 8015dd0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015dd2:	005b      	lsls	r3, r3, #1
 8015dd4:	b29b      	uxth	r3, r3
 8015dd6:	e001      	b.n	8015ddc <tcp_process+0x22c>
 8015dd8:	f241 131c 	movw	r3, #4380	; 0x111c
 8015ddc:	687a      	ldr	r2, [r7, #4]
 8015dde:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8015de2:	687b      	ldr	r3, [r7, #4]
 8015de4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015de8:	2b00      	cmp	r3, #0
 8015dea:	d106      	bne.n	8015dfa <tcp_process+0x24a>
 8015dec:	4b13      	ldr	r3, [pc, #76]	; (8015e3c <tcp_process+0x28c>)
 8015dee:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8015df2:	491c      	ldr	r1, [pc, #112]	; (8015e64 <tcp_process+0x2b4>)
 8015df4:	4813      	ldr	r0, [pc, #76]	; (8015e44 <tcp_process+0x294>)
 8015df6:	f00a fb2b 	bl	8020450 <iprintf>
        --pcb->snd_queuelen;
 8015dfa:	687b      	ldr	r3, [r7, #4]
 8015dfc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015e00:	3b01      	subs	r3, #1
 8015e02:	b29a      	uxth	r2, r3
 8015e04:	687b      	ldr	r3, [r7, #4]
 8015e06:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8015e0a:	687b      	ldr	r3, [r7, #4]
 8015e0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015e0e:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8015e10:	69fb      	ldr	r3, [r7, #28]
 8015e12:	2b00      	cmp	r3, #0
 8015e14:	d12a      	bne.n	8015e6c <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8015e16:	687b      	ldr	r3, [r7, #4]
 8015e18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015e1a:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8015e1c:	69fb      	ldr	r3, [r7, #28]
 8015e1e:	2b00      	cmp	r3, #0
 8015e20:	d106      	bne.n	8015e30 <tcp_process+0x280>
 8015e22:	4b06      	ldr	r3, [pc, #24]	; (8015e3c <tcp_process+0x28c>)
 8015e24:	f44f 725d 	mov.w	r2, #884	; 0x374
 8015e28:	490f      	ldr	r1, [pc, #60]	; (8015e68 <tcp_process+0x2b8>)
 8015e2a:	4806      	ldr	r0, [pc, #24]	; (8015e44 <tcp_process+0x294>)
 8015e2c:	f00a fb10 	bl	8020450 <iprintf>
          pcb->unsent = rseg->next;
 8015e30:	69fb      	ldr	r3, [r7, #28]
 8015e32:	681a      	ldr	r2, [r3, #0]
 8015e34:	687b      	ldr	r3, [r7, #4]
 8015e36:	66da      	str	r2, [r3, #108]	; 0x6c
 8015e38:	e01c      	b.n	8015e74 <tcp_process+0x2c4>
 8015e3a:	bf00      	nop
 8015e3c:	0802538c 	.word	0x0802538c
 8015e40:	080255c4 	.word	0x080255c4
 8015e44:	080253d8 	.word	0x080253d8
 8015e48:	24007e1c 	.word	0x24007e1c
 8015e4c:	24007e14 	.word	0x24007e14
 8015e50:	24007e10 	.word	0x24007e10
 8015e54:	080255e0 	.word	0x080255e0
 8015e58:	24007e1d 	.word	0x24007e1d
 8015e5c:	24007dd8 	.word	0x24007dd8
 8015e60:	24007e00 	.word	0x24007e00
 8015e64:	08025600 	.word	0x08025600
 8015e68:	08025618 	.word	0x08025618
        } else {
          pcb->unacked = rseg->next;
 8015e6c:	69fb      	ldr	r3, [r7, #28]
 8015e6e:	681a      	ldr	r2, [r3, #0]
 8015e70:	687b      	ldr	r3, [r7, #4]
 8015e72:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8015e74:	69f8      	ldr	r0, [r7, #28]
 8015e76:	f7fe fc54 	bl	8014722 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8015e7a:	687b      	ldr	r3, [r7, #4]
 8015e7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015e7e:	2b00      	cmp	r3, #0
 8015e80:	d104      	bne.n	8015e8c <tcp_process+0x2dc>
          pcb->rtime = -1;
 8015e82:	687b      	ldr	r3, [r7, #4]
 8015e84:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015e88:	861a      	strh	r2, [r3, #48]	; 0x30
 8015e8a:	e006      	b.n	8015e9a <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8015e8c:	687b      	ldr	r3, [r7, #4]
 8015e8e:	2200      	movs	r2, #0
 8015e90:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8015e92:	687b      	ldr	r3, [r7, #4]
 8015e94:	2200      	movs	r2, #0
 8015e96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8015e9a:	687b      	ldr	r3, [r7, #4]
 8015e9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8015ea0:	2b00      	cmp	r3, #0
 8015ea2:	d00a      	beq.n	8015eba <tcp_process+0x30a>
 8015ea4:	687b      	ldr	r3, [r7, #4]
 8015ea6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8015eaa:	687a      	ldr	r2, [r7, #4]
 8015eac:	6910      	ldr	r0, [r2, #16]
 8015eae:	2200      	movs	r2, #0
 8015eb0:	6879      	ldr	r1, [r7, #4]
 8015eb2:	4798      	blx	r3
 8015eb4:	4603      	mov	r3, r0
 8015eb6:	76bb      	strb	r3, [r7, #26]
 8015eb8:	e001      	b.n	8015ebe <tcp_process+0x30e>
 8015eba:	2300      	movs	r3, #0
 8015ebc:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8015ebe:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8015ec2:	f113 0f0d 	cmn.w	r3, #13
 8015ec6:	d102      	bne.n	8015ece <tcp_process+0x31e>
          return ERR_ABRT;
 8015ec8:	f06f 030c 	mvn.w	r3, #12
 8015ecc:	e250      	b.n	8016370 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8015ece:	687b      	ldr	r3, [r7, #4]
 8015ed0:	8b5b      	ldrh	r3, [r3, #26]
 8015ed2:	f043 0302 	orr.w	r3, r3, #2
 8015ed6:	b29a      	uxth	r2, r3
 8015ed8:	687b      	ldr	r3, [r7, #4]
 8015eda:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8015edc:	e23a      	b.n	8016354 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8015ede:	4b98      	ldr	r3, [pc, #608]	; (8016140 <tcp_process+0x590>)
 8015ee0:	781b      	ldrb	r3, [r3, #0]
 8015ee2:	f003 0310 	and.w	r3, r3, #16
 8015ee6:	2b00      	cmp	r3, #0
 8015ee8:	f000 8234 	beq.w	8016354 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015eec:	4b95      	ldr	r3, [pc, #596]	; (8016144 <tcp_process+0x594>)
 8015eee:	6819      	ldr	r1, [r3, #0]
 8015ef0:	4b95      	ldr	r3, [pc, #596]	; (8016148 <tcp_process+0x598>)
 8015ef2:	881b      	ldrh	r3, [r3, #0]
 8015ef4:	461a      	mov	r2, r3
 8015ef6:	4b95      	ldr	r3, [pc, #596]	; (801614c <tcp_process+0x59c>)
 8015ef8:	681b      	ldr	r3, [r3, #0]
 8015efa:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015efc:	4b94      	ldr	r3, [pc, #592]	; (8016150 <tcp_process+0x5a0>)
 8015efe:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015f00:	885b      	ldrh	r3, [r3, #2]
 8015f02:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015f04:	4a92      	ldr	r2, [pc, #584]	; (8016150 <tcp_process+0x5a0>)
 8015f06:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015f08:	8812      	ldrh	r2, [r2, #0]
 8015f0a:	b292      	uxth	r2, r2
 8015f0c:	9202      	str	r2, [sp, #8]
 8015f0e:	9301      	str	r3, [sp, #4]
 8015f10:	4b90      	ldr	r3, [pc, #576]	; (8016154 <tcp_process+0x5a4>)
 8015f12:	9300      	str	r3, [sp, #0]
 8015f14:	4b90      	ldr	r3, [pc, #576]	; (8016158 <tcp_process+0x5a8>)
 8015f16:	4602      	mov	r2, r0
 8015f18:	6878      	ldr	r0, [r7, #4]
 8015f1a:	f003 f8dd 	bl	80190d8 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8015f1e:	687b      	ldr	r3, [r7, #4]
 8015f20:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8015f24:	2b05      	cmp	r3, #5
 8015f26:	f200 8215 	bhi.w	8016354 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8015f2a:	687b      	ldr	r3, [r7, #4]
 8015f2c:	2200      	movs	r2, #0
 8015f2e:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8015f30:	6878      	ldr	r0, [r7, #4]
 8015f32:	f002 fea9 	bl	8018c88 <tcp_rexmit_rto>
      break;
 8015f36:	e20d      	b.n	8016354 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8015f38:	4b81      	ldr	r3, [pc, #516]	; (8016140 <tcp_process+0x590>)
 8015f3a:	781b      	ldrb	r3, [r3, #0]
 8015f3c:	f003 0310 	and.w	r3, r3, #16
 8015f40:	2b00      	cmp	r3, #0
 8015f42:	f000 80a1 	beq.w	8016088 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8015f46:	4b7f      	ldr	r3, [pc, #508]	; (8016144 <tcp_process+0x594>)
 8015f48:	681a      	ldr	r2, [r3, #0]
 8015f4a:	687b      	ldr	r3, [r7, #4]
 8015f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015f4e:	1ad3      	subs	r3, r2, r3
 8015f50:	3b01      	subs	r3, #1
 8015f52:	2b00      	cmp	r3, #0
 8015f54:	db7e      	blt.n	8016054 <tcp_process+0x4a4>
 8015f56:	4b7b      	ldr	r3, [pc, #492]	; (8016144 <tcp_process+0x594>)
 8015f58:	681a      	ldr	r2, [r3, #0]
 8015f5a:	687b      	ldr	r3, [r7, #4]
 8015f5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015f5e:	1ad3      	subs	r3, r2, r3
 8015f60:	2b00      	cmp	r3, #0
 8015f62:	dc77      	bgt.n	8016054 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8015f64:	687b      	ldr	r3, [r7, #4]
 8015f66:	2204      	movs	r2, #4
 8015f68:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8015f6a:	687b      	ldr	r3, [r7, #4]
 8015f6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8015f6e:	2b00      	cmp	r3, #0
 8015f70:	d102      	bne.n	8015f78 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8015f72:	23fa      	movs	r3, #250	; 0xfa
 8015f74:	76bb      	strb	r3, [r7, #26]
 8015f76:	e01d      	b.n	8015fb4 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8015f78:	687b      	ldr	r3, [r7, #4]
 8015f7a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8015f7c:	699b      	ldr	r3, [r3, #24]
 8015f7e:	2b00      	cmp	r3, #0
 8015f80:	d106      	bne.n	8015f90 <tcp_process+0x3e0>
 8015f82:	4b76      	ldr	r3, [pc, #472]	; (801615c <tcp_process+0x5ac>)
 8015f84:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8015f88:	4975      	ldr	r1, [pc, #468]	; (8016160 <tcp_process+0x5b0>)
 8015f8a:	4876      	ldr	r0, [pc, #472]	; (8016164 <tcp_process+0x5b4>)
 8015f8c:	f00a fa60 	bl	8020450 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8015f90:	687b      	ldr	r3, [r7, #4]
 8015f92:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8015f94:	699b      	ldr	r3, [r3, #24]
 8015f96:	2b00      	cmp	r3, #0
 8015f98:	d00a      	beq.n	8015fb0 <tcp_process+0x400>
 8015f9a:	687b      	ldr	r3, [r7, #4]
 8015f9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8015f9e:	699b      	ldr	r3, [r3, #24]
 8015fa0:	687a      	ldr	r2, [r7, #4]
 8015fa2:	6910      	ldr	r0, [r2, #16]
 8015fa4:	2200      	movs	r2, #0
 8015fa6:	6879      	ldr	r1, [r7, #4]
 8015fa8:	4798      	blx	r3
 8015faa:	4603      	mov	r3, r0
 8015fac:	76bb      	strb	r3, [r7, #26]
 8015fae:	e001      	b.n	8015fb4 <tcp_process+0x404>
 8015fb0:	23f0      	movs	r3, #240	; 0xf0
 8015fb2:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8015fb4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8015fb8:	2b00      	cmp	r3, #0
 8015fba:	d00a      	beq.n	8015fd2 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8015fbc:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8015fc0:	f113 0f0d 	cmn.w	r3, #13
 8015fc4:	d002      	beq.n	8015fcc <tcp_process+0x41c>
              tcp_abort(pcb);
 8015fc6:	6878      	ldr	r0, [r7, #4]
 8015fc8:	f7fd fd18 	bl	80139fc <tcp_abort>
            }
            return ERR_ABRT;
 8015fcc:	f06f 030c 	mvn.w	r3, #12
 8015fd0:	e1ce      	b.n	8016370 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8015fd2:	6878      	ldr	r0, [r7, #4]
 8015fd4:	f000 fae0 	bl	8016598 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8015fd8:	4b63      	ldr	r3, [pc, #396]	; (8016168 <tcp_process+0x5b8>)
 8015fda:	881b      	ldrh	r3, [r3, #0]
 8015fdc:	2b00      	cmp	r3, #0
 8015fde:	d005      	beq.n	8015fec <tcp_process+0x43c>
            recv_acked--;
 8015fe0:	4b61      	ldr	r3, [pc, #388]	; (8016168 <tcp_process+0x5b8>)
 8015fe2:	881b      	ldrh	r3, [r3, #0]
 8015fe4:	3b01      	subs	r3, #1
 8015fe6:	b29a      	uxth	r2, r3
 8015fe8:	4b5f      	ldr	r3, [pc, #380]	; (8016168 <tcp_process+0x5b8>)
 8015fea:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8015fec:	687b      	ldr	r3, [r7, #4]
 8015fee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015ff0:	009a      	lsls	r2, r3, #2
 8015ff2:	687b      	ldr	r3, [r7, #4]
 8015ff4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015ff6:	005b      	lsls	r3, r3, #1
 8015ff8:	f241 111c 	movw	r1, #4380	; 0x111c
 8015ffc:	428b      	cmp	r3, r1
 8015ffe:	bf38      	it	cc
 8016000:	460b      	movcc	r3, r1
 8016002:	429a      	cmp	r2, r3
 8016004:	d204      	bcs.n	8016010 <tcp_process+0x460>
 8016006:	687b      	ldr	r3, [r7, #4]
 8016008:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801600a:	009b      	lsls	r3, r3, #2
 801600c:	b29b      	uxth	r3, r3
 801600e:	e00d      	b.n	801602c <tcp_process+0x47c>
 8016010:	687b      	ldr	r3, [r7, #4]
 8016012:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016014:	005b      	lsls	r3, r3, #1
 8016016:	f241 121c 	movw	r2, #4380	; 0x111c
 801601a:	4293      	cmp	r3, r2
 801601c:	d904      	bls.n	8016028 <tcp_process+0x478>
 801601e:	687b      	ldr	r3, [r7, #4]
 8016020:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016022:	005b      	lsls	r3, r3, #1
 8016024:	b29b      	uxth	r3, r3
 8016026:	e001      	b.n	801602c <tcp_process+0x47c>
 8016028:	f241 131c 	movw	r3, #4380	; 0x111c
 801602c:	687a      	ldr	r2, [r7, #4]
 801602e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8016032:	4b4e      	ldr	r3, [pc, #312]	; (801616c <tcp_process+0x5bc>)
 8016034:	781b      	ldrb	r3, [r3, #0]
 8016036:	f003 0320 	and.w	r3, r3, #32
 801603a:	2b00      	cmp	r3, #0
 801603c:	d037      	beq.n	80160ae <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 801603e:	687b      	ldr	r3, [r7, #4]
 8016040:	8b5b      	ldrh	r3, [r3, #26]
 8016042:	f043 0302 	orr.w	r3, r3, #2
 8016046:	b29a      	uxth	r2, r3
 8016048:	687b      	ldr	r3, [r7, #4]
 801604a:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 801604c:	687b      	ldr	r3, [r7, #4]
 801604e:	2207      	movs	r2, #7
 8016050:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8016052:	e02c      	b.n	80160ae <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016054:	4b3b      	ldr	r3, [pc, #236]	; (8016144 <tcp_process+0x594>)
 8016056:	6819      	ldr	r1, [r3, #0]
 8016058:	4b3b      	ldr	r3, [pc, #236]	; (8016148 <tcp_process+0x598>)
 801605a:	881b      	ldrh	r3, [r3, #0]
 801605c:	461a      	mov	r2, r3
 801605e:	4b3b      	ldr	r3, [pc, #236]	; (801614c <tcp_process+0x59c>)
 8016060:	681b      	ldr	r3, [r3, #0]
 8016062:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8016064:	4b3a      	ldr	r3, [pc, #232]	; (8016150 <tcp_process+0x5a0>)
 8016066:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016068:	885b      	ldrh	r3, [r3, #2]
 801606a:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801606c:	4a38      	ldr	r2, [pc, #224]	; (8016150 <tcp_process+0x5a0>)
 801606e:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016070:	8812      	ldrh	r2, [r2, #0]
 8016072:	b292      	uxth	r2, r2
 8016074:	9202      	str	r2, [sp, #8]
 8016076:	9301      	str	r3, [sp, #4]
 8016078:	4b36      	ldr	r3, [pc, #216]	; (8016154 <tcp_process+0x5a4>)
 801607a:	9300      	str	r3, [sp, #0]
 801607c:	4b36      	ldr	r3, [pc, #216]	; (8016158 <tcp_process+0x5a8>)
 801607e:	4602      	mov	r2, r0
 8016080:	6878      	ldr	r0, [r7, #4]
 8016082:	f003 f829 	bl	80190d8 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8016086:	e167      	b.n	8016358 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8016088:	4b2d      	ldr	r3, [pc, #180]	; (8016140 <tcp_process+0x590>)
 801608a:	781b      	ldrb	r3, [r3, #0]
 801608c:	f003 0302 	and.w	r3, r3, #2
 8016090:	2b00      	cmp	r3, #0
 8016092:	f000 8161 	beq.w	8016358 <tcp_process+0x7a8>
 8016096:	687b      	ldr	r3, [r7, #4]
 8016098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801609a:	1e5a      	subs	r2, r3, #1
 801609c:	4b2b      	ldr	r3, [pc, #172]	; (801614c <tcp_process+0x59c>)
 801609e:	681b      	ldr	r3, [r3, #0]
 80160a0:	429a      	cmp	r2, r3
 80160a2:	f040 8159 	bne.w	8016358 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 80160a6:	6878      	ldr	r0, [r7, #4]
 80160a8:	f002 fe10 	bl	8018ccc <tcp_rexmit>
      break;
 80160ac:	e154      	b.n	8016358 <tcp_process+0x7a8>
 80160ae:	e153      	b.n	8016358 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 80160b0:	6878      	ldr	r0, [r7, #4]
 80160b2:	f000 fa71 	bl	8016598 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 80160b6:	4b2d      	ldr	r3, [pc, #180]	; (801616c <tcp_process+0x5bc>)
 80160b8:	781b      	ldrb	r3, [r3, #0]
 80160ba:	f003 0320 	and.w	r3, r3, #32
 80160be:	2b00      	cmp	r3, #0
 80160c0:	f000 814c 	beq.w	801635c <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 80160c4:	687b      	ldr	r3, [r7, #4]
 80160c6:	8b5b      	ldrh	r3, [r3, #26]
 80160c8:	f043 0302 	orr.w	r3, r3, #2
 80160cc:	b29a      	uxth	r2, r3
 80160ce:	687b      	ldr	r3, [r7, #4]
 80160d0:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 80160d2:	687b      	ldr	r3, [r7, #4]
 80160d4:	2207      	movs	r2, #7
 80160d6:	751a      	strb	r2, [r3, #20]
      }
      break;
 80160d8:	e140      	b.n	801635c <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 80160da:	6878      	ldr	r0, [r7, #4]
 80160dc:	f000 fa5c 	bl	8016598 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80160e0:	4b22      	ldr	r3, [pc, #136]	; (801616c <tcp_process+0x5bc>)
 80160e2:	781b      	ldrb	r3, [r3, #0]
 80160e4:	f003 0320 	and.w	r3, r3, #32
 80160e8:	2b00      	cmp	r3, #0
 80160ea:	d071      	beq.n	80161d0 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80160ec:	4b14      	ldr	r3, [pc, #80]	; (8016140 <tcp_process+0x590>)
 80160ee:	781b      	ldrb	r3, [r3, #0]
 80160f0:	f003 0310 	and.w	r3, r3, #16
 80160f4:	2b00      	cmp	r3, #0
 80160f6:	d060      	beq.n	80161ba <tcp_process+0x60a>
 80160f8:	687b      	ldr	r3, [r7, #4]
 80160fa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80160fc:	4b11      	ldr	r3, [pc, #68]	; (8016144 <tcp_process+0x594>)
 80160fe:	681b      	ldr	r3, [r3, #0]
 8016100:	429a      	cmp	r2, r3
 8016102:	d15a      	bne.n	80161ba <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8016104:	687b      	ldr	r3, [r7, #4]
 8016106:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8016108:	2b00      	cmp	r3, #0
 801610a:	d156      	bne.n	80161ba <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 801610c:	687b      	ldr	r3, [r7, #4]
 801610e:	8b5b      	ldrh	r3, [r3, #26]
 8016110:	f043 0302 	orr.w	r3, r3, #2
 8016114:	b29a      	uxth	r2, r3
 8016116:	687b      	ldr	r3, [r7, #4]
 8016118:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 801611a:	6878      	ldr	r0, [r7, #4]
 801611c:	f7fe fdbc 	bl	8014c98 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8016120:	4b13      	ldr	r3, [pc, #76]	; (8016170 <tcp_process+0x5c0>)
 8016122:	681b      	ldr	r3, [r3, #0]
 8016124:	687a      	ldr	r2, [r7, #4]
 8016126:	429a      	cmp	r2, r3
 8016128:	d105      	bne.n	8016136 <tcp_process+0x586>
 801612a:	4b11      	ldr	r3, [pc, #68]	; (8016170 <tcp_process+0x5c0>)
 801612c:	681b      	ldr	r3, [r3, #0]
 801612e:	68db      	ldr	r3, [r3, #12]
 8016130:	4a0f      	ldr	r2, [pc, #60]	; (8016170 <tcp_process+0x5c0>)
 8016132:	6013      	str	r3, [r2, #0]
 8016134:	e02e      	b.n	8016194 <tcp_process+0x5e4>
 8016136:	4b0e      	ldr	r3, [pc, #56]	; (8016170 <tcp_process+0x5c0>)
 8016138:	681b      	ldr	r3, [r3, #0]
 801613a:	617b      	str	r3, [r7, #20]
 801613c:	e027      	b.n	801618e <tcp_process+0x5de>
 801613e:	bf00      	nop
 8016140:	24007e1c 	.word	0x24007e1c
 8016144:	24007e14 	.word	0x24007e14
 8016148:	24007e1a 	.word	0x24007e1a
 801614c:	24007e10 	.word	0x24007e10
 8016150:	24007e00 	.word	0x24007e00
 8016154:	24004cc8 	.word	0x24004cc8
 8016158:	24004ccc 	.word	0x24004ccc
 801615c:	0802538c 	.word	0x0802538c
 8016160:	0802562c 	.word	0x0802562c
 8016164:	080253d8 	.word	0x080253d8
 8016168:	24007e18 	.word	0x24007e18
 801616c:	24007e1d 	.word	0x24007e1d
 8016170:	24007de4 	.word	0x24007de4
 8016174:	697b      	ldr	r3, [r7, #20]
 8016176:	68db      	ldr	r3, [r3, #12]
 8016178:	687a      	ldr	r2, [r7, #4]
 801617a:	429a      	cmp	r2, r3
 801617c:	d104      	bne.n	8016188 <tcp_process+0x5d8>
 801617e:	687b      	ldr	r3, [r7, #4]
 8016180:	68da      	ldr	r2, [r3, #12]
 8016182:	697b      	ldr	r3, [r7, #20]
 8016184:	60da      	str	r2, [r3, #12]
 8016186:	e005      	b.n	8016194 <tcp_process+0x5e4>
 8016188:	697b      	ldr	r3, [r7, #20]
 801618a:	68db      	ldr	r3, [r3, #12]
 801618c:	617b      	str	r3, [r7, #20]
 801618e:	697b      	ldr	r3, [r7, #20]
 8016190:	2b00      	cmp	r3, #0
 8016192:	d1ef      	bne.n	8016174 <tcp_process+0x5c4>
 8016194:	687b      	ldr	r3, [r7, #4]
 8016196:	2200      	movs	r2, #0
 8016198:	60da      	str	r2, [r3, #12]
 801619a:	4b77      	ldr	r3, [pc, #476]	; (8016378 <tcp_process+0x7c8>)
 801619c:	2201      	movs	r2, #1
 801619e:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 80161a0:	687b      	ldr	r3, [r7, #4]
 80161a2:	220a      	movs	r2, #10
 80161a4:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 80161a6:	4b75      	ldr	r3, [pc, #468]	; (801637c <tcp_process+0x7cc>)
 80161a8:	681a      	ldr	r2, [r3, #0]
 80161aa:	687b      	ldr	r3, [r7, #4]
 80161ac:	60da      	str	r2, [r3, #12]
 80161ae:	4a73      	ldr	r2, [pc, #460]	; (801637c <tcp_process+0x7cc>)
 80161b0:	687b      	ldr	r3, [r7, #4]
 80161b2:	6013      	str	r3, [r2, #0]
 80161b4:	f003 f952 	bl	801945c <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 80161b8:	e0d2      	b.n	8016360 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 80161ba:	687b      	ldr	r3, [r7, #4]
 80161bc:	8b5b      	ldrh	r3, [r3, #26]
 80161be:	f043 0302 	orr.w	r3, r3, #2
 80161c2:	b29a      	uxth	r2, r3
 80161c4:	687b      	ldr	r3, [r7, #4]
 80161c6:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 80161c8:	687b      	ldr	r3, [r7, #4]
 80161ca:	2208      	movs	r2, #8
 80161cc:	751a      	strb	r2, [r3, #20]
      break;
 80161ce:	e0c7      	b.n	8016360 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80161d0:	4b6b      	ldr	r3, [pc, #428]	; (8016380 <tcp_process+0x7d0>)
 80161d2:	781b      	ldrb	r3, [r3, #0]
 80161d4:	f003 0310 	and.w	r3, r3, #16
 80161d8:	2b00      	cmp	r3, #0
 80161da:	f000 80c1 	beq.w	8016360 <tcp_process+0x7b0>
 80161de:	687b      	ldr	r3, [r7, #4]
 80161e0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80161e2:	4b68      	ldr	r3, [pc, #416]	; (8016384 <tcp_process+0x7d4>)
 80161e4:	681b      	ldr	r3, [r3, #0]
 80161e6:	429a      	cmp	r2, r3
 80161e8:	f040 80ba 	bne.w	8016360 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 80161ec:	687b      	ldr	r3, [r7, #4]
 80161ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80161f0:	2b00      	cmp	r3, #0
 80161f2:	f040 80b5 	bne.w	8016360 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 80161f6:	687b      	ldr	r3, [r7, #4]
 80161f8:	2206      	movs	r2, #6
 80161fa:	751a      	strb	r2, [r3, #20]
      break;
 80161fc:	e0b0      	b.n	8016360 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 80161fe:	6878      	ldr	r0, [r7, #4]
 8016200:	f000 f9ca 	bl	8016598 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8016204:	4b60      	ldr	r3, [pc, #384]	; (8016388 <tcp_process+0x7d8>)
 8016206:	781b      	ldrb	r3, [r3, #0]
 8016208:	f003 0320 	and.w	r3, r3, #32
 801620c:	2b00      	cmp	r3, #0
 801620e:	f000 80a9 	beq.w	8016364 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8016212:	687b      	ldr	r3, [r7, #4]
 8016214:	8b5b      	ldrh	r3, [r3, #26]
 8016216:	f043 0302 	orr.w	r3, r3, #2
 801621a:	b29a      	uxth	r2, r3
 801621c:	687b      	ldr	r3, [r7, #4]
 801621e:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8016220:	6878      	ldr	r0, [r7, #4]
 8016222:	f7fe fd39 	bl	8014c98 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8016226:	4b59      	ldr	r3, [pc, #356]	; (801638c <tcp_process+0x7dc>)
 8016228:	681b      	ldr	r3, [r3, #0]
 801622a:	687a      	ldr	r2, [r7, #4]
 801622c:	429a      	cmp	r2, r3
 801622e:	d105      	bne.n	801623c <tcp_process+0x68c>
 8016230:	4b56      	ldr	r3, [pc, #344]	; (801638c <tcp_process+0x7dc>)
 8016232:	681b      	ldr	r3, [r3, #0]
 8016234:	68db      	ldr	r3, [r3, #12]
 8016236:	4a55      	ldr	r2, [pc, #340]	; (801638c <tcp_process+0x7dc>)
 8016238:	6013      	str	r3, [r2, #0]
 801623a:	e013      	b.n	8016264 <tcp_process+0x6b4>
 801623c:	4b53      	ldr	r3, [pc, #332]	; (801638c <tcp_process+0x7dc>)
 801623e:	681b      	ldr	r3, [r3, #0]
 8016240:	613b      	str	r3, [r7, #16]
 8016242:	e00c      	b.n	801625e <tcp_process+0x6ae>
 8016244:	693b      	ldr	r3, [r7, #16]
 8016246:	68db      	ldr	r3, [r3, #12]
 8016248:	687a      	ldr	r2, [r7, #4]
 801624a:	429a      	cmp	r2, r3
 801624c:	d104      	bne.n	8016258 <tcp_process+0x6a8>
 801624e:	687b      	ldr	r3, [r7, #4]
 8016250:	68da      	ldr	r2, [r3, #12]
 8016252:	693b      	ldr	r3, [r7, #16]
 8016254:	60da      	str	r2, [r3, #12]
 8016256:	e005      	b.n	8016264 <tcp_process+0x6b4>
 8016258:	693b      	ldr	r3, [r7, #16]
 801625a:	68db      	ldr	r3, [r3, #12]
 801625c:	613b      	str	r3, [r7, #16]
 801625e:	693b      	ldr	r3, [r7, #16]
 8016260:	2b00      	cmp	r3, #0
 8016262:	d1ef      	bne.n	8016244 <tcp_process+0x694>
 8016264:	687b      	ldr	r3, [r7, #4]
 8016266:	2200      	movs	r2, #0
 8016268:	60da      	str	r2, [r3, #12]
 801626a:	4b43      	ldr	r3, [pc, #268]	; (8016378 <tcp_process+0x7c8>)
 801626c:	2201      	movs	r2, #1
 801626e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8016270:	687b      	ldr	r3, [r7, #4]
 8016272:	220a      	movs	r2, #10
 8016274:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8016276:	4b41      	ldr	r3, [pc, #260]	; (801637c <tcp_process+0x7cc>)
 8016278:	681a      	ldr	r2, [r3, #0]
 801627a:	687b      	ldr	r3, [r7, #4]
 801627c:	60da      	str	r2, [r3, #12]
 801627e:	4a3f      	ldr	r2, [pc, #252]	; (801637c <tcp_process+0x7cc>)
 8016280:	687b      	ldr	r3, [r7, #4]
 8016282:	6013      	str	r3, [r2, #0]
 8016284:	f003 f8ea 	bl	801945c <tcp_timer_needed>
      }
      break;
 8016288:	e06c      	b.n	8016364 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 801628a:	6878      	ldr	r0, [r7, #4]
 801628c:	f000 f984 	bl	8016598 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8016290:	4b3b      	ldr	r3, [pc, #236]	; (8016380 <tcp_process+0x7d0>)
 8016292:	781b      	ldrb	r3, [r3, #0]
 8016294:	f003 0310 	and.w	r3, r3, #16
 8016298:	2b00      	cmp	r3, #0
 801629a:	d065      	beq.n	8016368 <tcp_process+0x7b8>
 801629c:	687b      	ldr	r3, [r7, #4]
 801629e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80162a0:	4b38      	ldr	r3, [pc, #224]	; (8016384 <tcp_process+0x7d4>)
 80162a2:	681b      	ldr	r3, [r3, #0]
 80162a4:	429a      	cmp	r2, r3
 80162a6:	d15f      	bne.n	8016368 <tcp_process+0x7b8>
 80162a8:	687b      	ldr	r3, [r7, #4]
 80162aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80162ac:	2b00      	cmp	r3, #0
 80162ae:	d15b      	bne.n	8016368 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 80162b0:	6878      	ldr	r0, [r7, #4]
 80162b2:	f7fe fcf1 	bl	8014c98 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80162b6:	4b35      	ldr	r3, [pc, #212]	; (801638c <tcp_process+0x7dc>)
 80162b8:	681b      	ldr	r3, [r3, #0]
 80162ba:	687a      	ldr	r2, [r7, #4]
 80162bc:	429a      	cmp	r2, r3
 80162be:	d105      	bne.n	80162cc <tcp_process+0x71c>
 80162c0:	4b32      	ldr	r3, [pc, #200]	; (801638c <tcp_process+0x7dc>)
 80162c2:	681b      	ldr	r3, [r3, #0]
 80162c4:	68db      	ldr	r3, [r3, #12]
 80162c6:	4a31      	ldr	r2, [pc, #196]	; (801638c <tcp_process+0x7dc>)
 80162c8:	6013      	str	r3, [r2, #0]
 80162ca:	e013      	b.n	80162f4 <tcp_process+0x744>
 80162cc:	4b2f      	ldr	r3, [pc, #188]	; (801638c <tcp_process+0x7dc>)
 80162ce:	681b      	ldr	r3, [r3, #0]
 80162d0:	60fb      	str	r3, [r7, #12]
 80162d2:	e00c      	b.n	80162ee <tcp_process+0x73e>
 80162d4:	68fb      	ldr	r3, [r7, #12]
 80162d6:	68db      	ldr	r3, [r3, #12]
 80162d8:	687a      	ldr	r2, [r7, #4]
 80162da:	429a      	cmp	r2, r3
 80162dc:	d104      	bne.n	80162e8 <tcp_process+0x738>
 80162de:	687b      	ldr	r3, [r7, #4]
 80162e0:	68da      	ldr	r2, [r3, #12]
 80162e2:	68fb      	ldr	r3, [r7, #12]
 80162e4:	60da      	str	r2, [r3, #12]
 80162e6:	e005      	b.n	80162f4 <tcp_process+0x744>
 80162e8:	68fb      	ldr	r3, [r7, #12]
 80162ea:	68db      	ldr	r3, [r3, #12]
 80162ec:	60fb      	str	r3, [r7, #12]
 80162ee:	68fb      	ldr	r3, [r7, #12]
 80162f0:	2b00      	cmp	r3, #0
 80162f2:	d1ef      	bne.n	80162d4 <tcp_process+0x724>
 80162f4:	687b      	ldr	r3, [r7, #4]
 80162f6:	2200      	movs	r2, #0
 80162f8:	60da      	str	r2, [r3, #12]
 80162fa:	4b1f      	ldr	r3, [pc, #124]	; (8016378 <tcp_process+0x7c8>)
 80162fc:	2201      	movs	r2, #1
 80162fe:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8016300:	687b      	ldr	r3, [r7, #4]
 8016302:	220a      	movs	r2, #10
 8016304:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8016306:	4b1d      	ldr	r3, [pc, #116]	; (801637c <tcp_process+0x7cc>)
 8016308:	681a      	ldr	r2, [r3, #0]
 801630a:	687b      	ldr	r3, [r7, #4]
 801630c:	60da      	str	r2, [r3, #12]
 801630e:	4a1b      	ldr	r2, [pc, #108]	; (801637c <tcp_process+0x7cc>)
 8016310:	687b      	ldr	r3, [r7, #4]
 8016312:	6013      	str	r3, [r2, #0]
 8016314:	f003 f8a2 	bl	801945c <tcp_timer_needed>
      }
      break;
 8016318:	e026      	b.n	8016368 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 801631a:	6878      	ldr	r0, [r7, #4]
 801631c:	f000 f93c 	bl	8016598 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8016320:	4b17      	ldr	r3, [pc, #92]	; (8016380 <tcp_process+0x7d0>)
 8016322:	781b      	ldrb	r3, [r3, #0]
 8016324:	f003 0310 	and.w	r3, r3, #16
 8016328:	2b00      	cmp	r3, #0
 801632a:	d01f      	beq.n	801636c <tcp_process+0x7bc>
 801632c:	687b      	ldr	r3, [r7, #4]
 801632e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8016330:	4b14      	ldr	r3, [pc, #80]	; (8016384 <tcp_process+0x7d4>)
 8016332:	681b      	ldr	r3, [r3, #0]
 8016334:	429a      	cmp	r2, r3
 8016336:	d119      	bne.n	801636c <tcp_process+0x7bc>
 8016338:	687b      	ldr	r3, [r7, #4]
 801633a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801633c:	2b00      	cmp	r3, #0
 801633e:	d115      	bne.n	801636c <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8016340:	4b11      	ldr	r3, [pc, #68]	; (8016388 <tcp_process+0x7d8>)
 8016342:	781b      	ldrb	r3, [r3, #0]
 8016344:	f043 0310 	orr.w	r3, r3, #16
 8016348:	b2da      	uxtb	r2, r3
 801634a:	4b0f      	ldr	r3, [pc, #60]	; (8016388 <tcp_process+0x7d8>)
 801634c:	701a      	strb	r2, [r3, #0]
      }
      break;
 801634e:	e00d      	b.n	801636c <tcp_process+0x7bc>
    default:
      break;
 8016350:	bf00      	nop
 8016352:	e00c      	b.n	801636e <tcp_process+0x7be>
      break;
 8016354:	bf00      	nop
 8016356:	e00a      	b.n	801636e <tcp_process+0x7be>
      break;
 8016358:	bf00      	nop
 801635a:	e008      	b.n	801636e <tcp_process+0x7be>
      break;
 801635c:	bf00      	nop
 801635e:	e006      	b.n	801636e <tcp_process+0x7be>
      break;
 8016360:	bf00      	nop
 8016362:	e004      	b.n	801636e <tcp_process+0x7be>
      break;
 8016364:	bf00      	nop
 8016366:	e002      	b.n	801636e <tcp_process+0x7be>
      break;
 8016368:	bf00      	nop
 801636a:	e000      	b.n	801636e <tcp_process+0x7be>
      break;
 801636c:	bf00      	nop
  }
  return ERR_OK;
 801636e:	2300      	movs	r3, #0
}
 8016370:	4618      	mov	r0, r3
 8016372:	3724      	adds	r7, #36	; 0x24
 8016374:	46bd      	mov	sp, r7
 8016376:	bd90      	pop	{r4, r7, pc}
 8016378:	24007dec 	.word	0x24007dec
 801637c:	24007de8 	.word	0x24007de8
 8016380:	24007e1c 	.word	0x24007e1c
 8016384:	24007e14 	.word	0x24007e14
 8016388:	24007e1d 	.word	0x24007e1d
 801638c:	24007de4 	.word	0x24007de4

08016390 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8016390:	b590      	push	{r4, r7, lr}
 8016392:	b085      	sub	sp, #20
 8016394:	af00      	add	r7, sp, #0
 8016396:	6078      	str	r0, [r7, #4]
 8016398:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 801639a:	687b      	ldr	r3, [r7, #4]
 801639c:	2b00      	cmp	r3, #0
 801639e:	d106      	bne.n	80163ae <tcp_oos_insert_segment+0x1e>
 80163a0:	4b3b      	ldr	r3, [pc, #236]	; (8016490 <tcp_oos_insert_segment+0x100>)
 80163a2:	f240 421f 	movw	r2, #1055	; 0x41f
 80163a6:	493b      	ldr	r1, [pc, #236]	; (8016494 <tcp_oos_insert_segment+0x104>)
 80163a8:	483b      	ldr	r0, [pc, #236]	; (8016498 <tcp_oos_insert_segment+0x108>)
 80163aa:	f00a f851 	bl	8020450 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80163ae:	687b      	ldr	r3, [r7, #4]
 80163b0:	68db      	ldr	r3, [r3, #12]
 80163b2:	899b      	ldrh	r3, [r3, #12]
 80163b4:	b29b      	uxth	r3, r3
 80163b6:	4618      	mov	r0, r3
 80163b8:	f7fb f838 	bl	801142c <lwip_htons>
 80163bc:	4603      	mov	r3, r0
 80163be:	b2db      	uxtb	r3, r3
 80163c0:	f003 0301 	and.w	r3, r3, #1
 80163c4:	2b00      	cmp	r3, #0
 80163c6:	d028      	beq.n	801641a <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 80163c8:	6838      	ldr	r0, [r7, #0]
 80163ca:	f7fe f995 	bl	80146f8 <tcp_segs_free>
    next = NULL;
 80163ce:	2300      	movs	r3, #0
 80163d0:	603b      	str	r3, [r7, #0]
 80163d2:	e056      	b.n	8016482 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80163d4:	683b      	ldr	r3, [r7, #0]
 80163d6:	68db      	ldr	r3, [r3, #12]
 80163d8:	899b      	ldrh	r3, [r3, #12]
 80163da:	b29b      	uxth	r3, r3
 80163dc:	4618      	mov	r0, r3
 80163de:	f7fb f825 	bl	801142c <lwip_htons>
 80163e2:	4603      	mov	r3, r0
 80163e4:	b2db      	uxtb	r3, r3
 80163e6:	f003 0301 	and.w	r3, r3, #1
 80163ea:	2b00      	cmp	r3, #0
 80163ec:	d00d      	beq.n	801640a <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 80163ee:	687b      	ldr	r3, [r7, #4]
 80163f0:	68db      	ldr	r3, [r3, #12]
 80163f2:	899b      	ldrh	r3, [r3, #12]
 80163f4:	b29c      	uxth	r4, r3
 80163f6:	2001      	movs	r0, #1
 80163f8:	f7fb f818 	bl	801142c <lwip_htons>
 80163fc:	4603      	mov	r3, r0
 80163fe:	461a      	mov	r2, r3
 8016400:	687b      	ldr	r3, [r7, #4]
 8016402:	68db      	ldr	r3, [r3, #12]
 8016404:	4322      	orrs	r2, r4
 8016406:	b292      	uxth	r2, r2
 8016408:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 801640a:	683b      	ldr	r3, [r7, #0]
 801640c:	60fb      	str	r3, [r7, #12]
      next = next->next;
 801640e:	683b      	ldr	r3, [r7, #0]
 8016410:	681b      	ldr	r3, [r3, #0]
 8016412:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8016414:	68f8      	ldr	r0, [r7, #12]
 8016416:	f7fe f984 	bl	8014722 <tcp_seg_free>
    while (next &&
 801641a:	683b      	ldr	r3, [r7, #0]
 801641c:	2b00      	cmp	r3, #0
 801641e:	d00e      	beq.n	801643e <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8016420:	687b      	ldr	r3, [r7, #4]
 8016422:	891b      	ldrh	r3, [r3, #8]
 8016424:	461a      	mov	r2, r3
 8016426:	4b1d      	ldr	r3, [pc, #116]	; (801649c <tcp_oos_insert_segment+0x10c>)
 8016428:	681b      	ldr	r3, [r3, #0]
 801642a:	441a      	add	r2, r3
 801642c:	683b      	ldr	r3, [r7, #0]
 801642e:	68db      	ldr	r3, [r3, #12]
 8016430:	685b      	ldr	r3, [r3, #4]
 8016432:	6839      	ldr	r1, [r7, #0]
 8016434:	8909      	ldrh	r1, [r1, #8]
 8016436:	440b      	add	r3, r1
 8016438:	1ad3      	subs	r3, r2, r3
    while (next &&
 801643a:	2b00      	cmp	r3, #0
 801643c:	daca      	bge.n	80163d4 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 801643e:	683b      	ldr	r3, [r7, #0]
 8016440:	2b00      	cmp	r3, #0
 8016442:	d01e      	beq.n	8016482 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8016444:	687b      	ldr	r3, [r7, #4]
 8016446:	891b      	ldrh	r3, [r3, #8]
 8016448:	461a      	mov	r2, r3
 801644a:	4b14      	ldr	r3, [pc, #80]	; (801649c <tcp_oos_insert_segment+0x10c>)
 801644c:	681b      	ldr	r3, [r3, #0]
 801644e:	441a      	add	r2, r3
 8016450:	683b      	ldr	r3, [r7, #0]
 8016452:	68db      	ldr	r3, [r3, #12]
 8016454:	685b      	ldr	r3, [r3, #4]
 8016456:	1ad3      	subs	r3, r2, r3
    if (next &&
 8016458:	2b00      	cmp	r3, #0
 801645a:	dd12      	ble.n	8016482 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 801645c:	683b      	ldr	r3, [r7, #0]
 801645e:	68db      	ldr	r3, [r3, #12]
 8016460:	685b      	ldr	r3, [r3, #4]
 8016462:	b29a      	uxth	r2, r3
 8016464:	4b0d      	ldr	r3, [pc, #52]	; (801649c <tcp_oos_insert_segment+0x10c>)
 8016466:	681b      	ldr	r3, [r3, #0]
 8016468:	b29b      	uxth	r3, r3
 801646a:	1ad3      	subs	r3, r2, r3
 801646c:	b29a      	uxth	r2, r3
 801646e:	687b      	ldr	r3, [r7, #4]
 8016470:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8016472:	687b      	ldr	r3, [r7, #4]
 8016474:	685a      	ldr	r2, [r3, #4]
 8016476:	687b      	ldr	r3, [r7, #4]
 8016478:	891b      	ldrh	r3, [r3, #8]
 801647a:	4619      	mov	r1, r3
 801647c:	4610      	mov	r0, r2
 801647e:	f7fc fb05 	bl	8012a8c <pbuf_realloc>
    }
  }
  cseg->next = next;
 8016482:	687b      	ldr	r3, [r7, #4]
 8016484:	683a      	ldr	r2, [r7, #0]
 8016486:	601a      	str	r2, [r3, #0]
}
 8016488:	bf00      	nop
 801648a:	3714      	adds	r7, #20
 801648c:	46bd      	mov	sp, r7
 801648e:	bd90      	pop	{r4, r7, pc}
 8016490:	0802538c 	.word	0x0802538c
 8016494:	0802564c 	.word	0x0802564c
 8016498:	080253d8 	.word	0x080253d8
 801649c:	24007e10 	.word	0x24007e10

080164a0 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 80164a0:	b5b0      	push	{r4, r5, r7, lr}
 80164a2:	b086      	sub	sp, #24
 80164a4:	af00      	add	r7, sp, #0
 80164a6:	60f8      	str	r0, [r7, #12]
 80164a8:	60b9      	str	r1, [r7, #8]
 80164aa:	607a      	str	r2, [r7, #4]
 80164ac:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 80164ae:	e03e      	b.n	801652e <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 80164b0:	68bb      	ldr	r3, [r7, #8]
 80164b2:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 80164b4:	68bb      	ldr	r3, [r7, #8]
 80164b6:	681b      	ldr	r3, [r3, #0]
 80164b8:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 80164ba:	697b      	ldr	r3, [r7, #20]
 80164bc:	685b      	ldr	r3, [r3, #4]
 80164be:	4618      	mov	r0, r3
 80164c0:	f7fc fd2a 	bl	8012f18 <pbuf_clen>
 80164c4:	4603      	mov	r3, r0
 80164c6:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80164c8:	68fb      	ldr	r3, [r7, #12]
 80164ca:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80164ce:	8a7a      	ldrh	r2, [r7, #18]
 80164d0:	429a      	cmp	r2, r3
 80164d2:	d906      	bls.n	80164e2 <tcp_free_acked_segments+0x42>
 80164d4:	4b2a      	ldr	r3, [pc, #168]	; (8016580 <tcp_free_acked_segments+0xe0>)
 80164d6:	f240 4257 	movw	r2, #1111	; 0x457
 80164da:	492a      	ldr	r1, [pc, #168]	; (8016584 <tcp_free_acked_segments+0xe4>)
 80164dc:	482a      	ldr	r0, [pc, #168]	; (8016588 <tcp_free_acked_segments+0xe8>)
 80164de:	f009 ffb7 	bl	8020450 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 80164e2:	68fb      	ldr	r3, [r7, #12]
 80164e4:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 80164e8:	8a7b      	ldrh	r3, [r7, #18]
 80164ea:	1ad3      	subs	r3, r2, r3
 80164ec:	b29a      	uxth	r2, r3
 80164ee:	68fb      	ldr	r3, [r7, #12]
 80164f0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 80164f4:	697b      	ldr	r3, [r7, #20]
 80164f6:	891a      	ldrh	r2, [r3, #8]
 80164f8:	4b24      	ldr	r3, [pc, #144]	; (801658c <tcp_free_acked_segments+0xec>)
 80164fa:	881b      	ldrh	r3, [r3, #0]
 80164fc:	4413      	add	r3, r2
 80164fe:	b29a      	uxth	r2, r3
 8016500:	4b22      	ldr	r3, [pc, #136]	; (801658c <tcp_free_acked_segments+0xec>)
 8016502:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8016504:	6978      	ldr	r0, [r7, #20]
 8016506:	f7fe f90c 	bl	8014722 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 801650a:	68fb      	ldr	r3, [r7, #12]
 801650c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8016510:	2b00      	cmp	r3, #0
 8016512:	d00c      	beq.n	801652e <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8016514:	68bb      	ldr	r3, [r7, #8]
 8016516:	2b00      	cmp	r3, #0
 8016518:	d109      	bne.n	801652e <tcp_free_acked_segments+0x8e>
 801651a:	683b      	ldr	r3, [r7, #0]
 801651c:	2b00      	cmp	r3, #0
 801651e:	d106      	bne.n	801652e <tcp_free_acked_segments+0x8e>
 8016520:	4b17      	ldr	r3, [pc, #92]	; (8016580 <tcp_free_acked_segments+0xe0>)
 8016522:	f240 4261 	movw	r2, #1121	; 0x461
 8016526:	491a      	ldr	r1, [pc, #104]	; (8016590 <tcp_free_acked_segments+0xf0>)
 8016528:	4817      	ldr	r0, [pc, #92]	; (8016588 <tcp_free_acked_segments+0xe8>)
 801652a:	f009 ff91 	bl	8020450 <iprintf>
  while (seg_list != NULL &&
 801652e:	68bb      	ldr	r3, [r7, #8]
 8016530:	2b00      	cmp	r3, #0
 8016532:	d020      	beq.n	8016576 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8016534:	68bb      	ldr	r3, [r7, #8]
 8016536:	68db      	ldr	r3, [r3, #12]
 8016538:	685b      	ldr	r3, [r3, #4]
 801653a:	4618      	mov	r0, r3
 801653c:	f7fa ff8b 	bl	8011456 <lwip_htonl>
 8016540:	4604      	mov	r4, r0
 8016542:	68bb      	ldr	r3, [r7, #8]
 8016544:	891b      	ldrh	r3, [r3, #8]
 8016546:	461d      	mov	r5, r3
 8016548:	68bb      	ldr	r3, [r7, #8]
 801654a:	68db      	ldr	r3, [r3, #12]
 801654c:	899b      	ldrh	r3, [r3, #12]
 801654e:	b29b      	uxth	r3, r3
 8016550:	4618      	mov	r0, r3
 8016552:	f7fa ff6b 	bl	801142c <lwip_htons>
 8016556:	4603      	mov	r3, r0
 8016558:	b2db      	uxtb	r3, r3
 801655a:	f003 0303 	and.w	r3, r3, #3
 801655e:	2b00      	cmp	r3, #0
 8016560:	d001      	beq.n	8016566 <tcp_free_acked_segments+0xc6>
 8016562:	2301      	movs	r3, #1
 8016564:	e000      	b.n	8016568 <tcp_free_acked_segments+0xc8>
 8016566:	2300      	movs	r3, #0
 8016568:	442b      	add	r3, r5
 801656a:	18e2      	adds	r2, r4, r3
 801656c:	4b09      	ldr	r3, [pc, #36]	; (8016594 <tcp_free_acked_segments+0xf4>)
 801656e:	681b      	ldr	r3, [r3, #0]
 8016570:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8016572:	2b00      	cmp	r3, #0
 8016574:	dd9c      	ble.n	80164b0 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8016576:	68bb      	ldr	r3, [r7, #8]
}
 8016578:	4618      	mov	r0, r3
 801657a:	3718      	adds	r7, #24
 801657c:	46bd      	mov	sp, r7
 801657e:	bdb0      	pop	{r4, r5, r7, pc}
 8016580:	0802538c 	.word	0x0802538c
 8016584:	08025674 	.word	0x08025674
 8016588:	080253d8 	.word	0x080253d8
 801658c:	24007e18 	.word	0x24007e18
 8016590:	0802569c 	.word	0x0802569c
 8016594:	24007e14 	.word	0x24007e14

08016598 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8016598:	b5b0      	push	{r4, r5, r7, lr}
 801659a:	b094      	sub	sp, #80	; 0x50
 801659c:	af00      	add	r7, sp, #0
 801659e:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 80165a0:	2300      	movs	r3, #0
 80165a2:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 80165a4:	687b      	ldr	r3, [r7, #4]
 80165a6:	2b00      	cmp	r3, #0
 80165a8:	d106      	bne.n	80165b8 <tcp_receive+0x20>
 80165aa:	4b91      	ldr	r3, [pc, #580]	; (80167f0 <tcp_receive+0x258>)
 80165ac:	f240 427b 	movw	r2, #1147	; 0x47b
 80165b0:	4990      	ldr	r1, [pc, #576]	; (80167f4 <tcp_receive+0x25c>)
 80165b2:	4891      	ldr	r0, [pc, #580]	; (80167f8 <tcp_receive+0x260>)
 80165b4:	f009 ff4c 	bl	8020450 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 80165b8:	687b      	ldr	r3, [r7, #4]
 80165ba:	7d1b      	ldrb	r3, [r3, #20]
 80165bc:	2b03      	cmp	r3, #3
 80165be:	d806      	bhi.n	80165ce <tcp_receive+0x36>
 80165c0:	4b8b      	ldr	r3, [pc, #556]	; (80167f0 <tcp_receive+0x258>)
 80165c2:	f240 427c 	movw	r2, #1148	; 0x47c
 80165c6:	498d      	ldr	r1, [pc, #564]	; (80167fc <tcp_receive+0x264>)
 80165c8:	488b      	ldr	r0, [pc, #556]	; (80167f8 <tcp_receive+0x260>)
 80165ca:	f009 ff41 	bl	8020450 <iprintf>

  if (flags & TCP_ACK) {
 80165ce:	4b8c      	ldr	r3, [pc, #560]	; (8016800 <tcp_receive+0x268>)
 80165d0:	781b      	ldrb	r3, [r3, #0]
 80165d2:	f003 0310 	and.w	r3, r3, #16
 80165d6:	2b00      	cmp	r3, #0
 80165d8:	f000 8264 	beq.w	8016aa4 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 80165dc:	687b      	ldr	r3, [r7, #4]
 80165de:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80165e2:	461a      	mov	r2, r3
 80165e4:	687b      	ldr	r3, [r7, #4]
 80165e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80165e8:	4413      	add	r3, r2
 80165ea:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80165ec:	687b      	ldr	r3, [r7, #4]
 80165ee:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80165f0:	4b84      	ldr	r3, [pc, #528]	; (8016804 <tcp_receive+0x26c>)
 80165f2:	681b      	ldr	r3, [r3, #0]
 80165f4:	1ad3      	subs	r3, r2, r3
 80165f6:	2b00      	cmp	r3, #0
 80165f8:	db1b      	blt.n	8016632 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80165fa:	687b      	ldr	r3, [r7, #4]
 80165fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80165fe:	4b81      	ldr	r3, [pc, #516]	; (8016804 <tcp_receive+0x26c>)
 8016600:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8016602:	429a      	cmp	r2, r3
 8016604:	d106      	bne.n	8016614 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8016606:	687b      	ldr	r3, [r7, #4]
 8016608:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801660a:	4b7f      	ldr	r3, [pc, #508]	; (8016808 <tcp_receive+0x270>)
 801660c:	681b      	ldr	r3, [r3, #0]
 801660e:	1ad3      	subs	r3, r2, r3
 8016610:	2b00      	cmp	r3, #0
 8016612:	db0e      	blt.n	8016632 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8016614:	687b      	ldr	r3, [r7, #4]
 8016616:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8016618:	4b7b      	ldr	r3, [pc, #492]	; (8016808 <tcp_receive+0x270>)
 801661a:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801661c:	429a      	cmp	r2, r3
 801661e:	d125      	bne.n	801666c <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8016620:	4b7a      	ldr	r3, [pc, #488]	; (801680c <tcp_receive+0x274>)
 8016622:	681b      	ldr	r3, [r3, #0]
 8016624:	89db      	ldrh	r3, [r3, #14]
 8016626:	b29a      	uxth	r2, r3
 8016628:	687b      	ldr	r3, [r7, #4]
 801662a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801662e:	429a      	cmp	r2, r3
 8016630:	d91c      	bls.n	801666c <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8016632:	4b76      	ldr	r3, [pc, #472]	; (801680c <tcp_receive+0x274>)
 8016634:	681b      	ldr	r3, [r3, #0]
 8016636:	89db      	ldrh	r3, [r3, #14]
 8016638:	b29a      	uxth	r2, r3
 801663a:	687b      	ldr	r3, [r7, #4]
 801663c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8016640:	687b      	ldr	r3, [r7, #4]
 8016642:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8016646:	687b      	ldr	r3, [r7, #4]
 8016648:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801664c:	429a      	cmp	r2, r3
 801664e:	d205      	bcs.n	801665c <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8016650:	687b      	ldr	r3, [r7, #4]
 8016652:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8016656:	687b      	ldr	r3, [r7, #4]
 8016658:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 801665c:	4b69      	ldr	r3, [pc, #420]	; (8016804 <tcp_receive+0x26c>)
 801665e:	681a      	ldr	r2, [r3, #0]
 8016660:	687b      	ldr	r3, [r7, #4]
 8016662:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8016664:	4b68      	ldr	r3, [pc, #416]	; (8016808 <tcp_receive+0x270>)
 8016666:	681a      	ldr	r2, [r3, #0]
 8016668:	687b      	ldr	r3, [r7, #4]
 801666a:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 801666c:	4b66      	ldr	r3, [pc, #408]	; (8016808 <tcp_receive+0x270>)
 801666e:	681a      	ldr	r2, [r3, #0]
 8016670:	687b      	ldr	r3, [r7, #4]
 8016672:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016674:	1ad3      	subs	r3, r2, r3
 8016676:	2b00      	cmp	r3, #0
 8016678:	dc58      	bgt.n	801672c <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 801667a:	4b65      	ldr	r3, [pc, #404]	; (8016810 <tcp_receive+0x278>)
 801667c:	881b      	ldrh	r3, [r3, #0]
 801667e:	2b00      	cmp	r3, #0
 8016680:	d14b      	bne.n	801671a <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8016682:	687b      	ldr	r3, [r7, #4]
 8016684:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016686:	687a      	ldr	r2, [r7, #4]
 8016688:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 801668c:	4413      	add	r3, r2
 801668e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016690:	429a      	cmp	r2, r3
 8016692:	d142      	bne.n	801671a <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8016694:	687b      	ldr	r3, [r7, #4]
 8016696:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801669a:	2b00      	cmp	r3, #0
 801669c:	db3d      	blt.n	801671a <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 801669e:	687b      	ldr	r3, [r7, #4]
 80166a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80166a2:	4b59      	ldr	r3, [pc, #356]	; (8016808 <tcp_receive+0x270>)
 80166a4:	681b      	ldr	r3, [r3, #0]
 80166a6:	429a      	cmp	r2, r3
 80166a8:	d137      	bne.n	801671a <tcp_receive+0x182>
              found_dupack = 1;
 80166aa:	2301      	movs	r3, #1
 80166ac:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 80166ae:	687b      	ldr	r3, [r7, #4]
 80166b0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80166b4:	2bff      	cmp	r3, #255	; 0xff
 80166b6:	d007      	beq.n	80166c8 <tcp_receive+0x130>
                ++pcb->dupacks;
 80166b8:	687b      	ldr	r3, [r7, #4]
 80166ba:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80166be:	3301      	adds	r3, #1
 80166c0:	b2da      	uxtb	r2, r3
 80166c2:	687b      	ldr	r3, [r7, #4]
 80166c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 80166c8:	687b      	ldr	r3, [r7, #4]
 80166ca:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80166ce:	2b03      	cmp	r3, #3
 80166d0:	d91b      	bls.n	801670a <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 80166d2:	687b      	ldr	r3, [r7, #4]
 80166d4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80166d8:	687b      	ldr	r3, [r7, #4]
 80166da:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80166dc:	4413      	add	r3, r2
 80166de:	b29a      	uxth	r2, r3
 80166e0:	687b      	ldr	r3, [r7, #4]
 80166e2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80166e6:	429a      	cmp	r2, r3
 80166e8:	d30a      	bcc.n	8016700 <tcp_receive+0x168>
 80166ea:	687b      	ldr	r3, [r7, #4]
 80166ec:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80166f0:	687b      	ldr	r3, [r7, #4]
 80166f2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80166f4:	4413      	add	r3, r2
 80166f6:	b29a      	uxth	r2, r3
 80166f8:	687b      	ldr	r3, [r7, #4]
 80166fa:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80166fe:	e004      	b.n	801670a <tcp_receive+0x172>
 8016700:	687b      	ldr	r3, [r7, #4]
 8016702:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016706:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 801670a:	687b      	ldr	r3, [r7, #4]
 801670c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8016710:	2b02      	cmp	r3, #2
 8016712:	d902      	bls.n	801671a <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8016714:	6878      	ldr	r0, [r7, #4]
 8016716:	f002 fb45 	bl	8018da4 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 801671a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801671c:	2b00      	cmp	r3, #0
 801671e:	f040 8161 	bne.w	80169e4 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8016722:	687b      	ldr	r3, [r7, #4]
 8016724:	2200      	movs	r2, #0
 8016726:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801672a:	e15b      	b.n	80169e4 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801672c:	4b36      	ldr	r3, [pc, #216]	; (8016808 <tcp_receive+0x270>)
 801672e:	681a      	ldr	r2, [r3, #0]
 8016730:	687b      	ldr	r3, [r7, #4]
 8016732:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016734:	1ad3      	subs	r3, r2, r3
 8016736:	3b01      	subs	r3, #1
 8016738:	2b00      	cmp	r3, #0
 801673a:	f2c0 814e 	blt.w	80169da <tcp_receive+0x442>
 801673e:	4b32      	ldr	r3, [pc, #200]	; (8016808 <tcp_receive+0x270>)
 8016740:	681a      	ldr	r2, [r3, #0]
 8016742:	687b      	ldr	r3, [r7, #4]
 8016744:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016746:	1ad3      	subs	r3, r2, r3
 8016748:	2b00      	cmp	r3, #0
 801674a:	f300 8146 	bgt.w	80169da <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 801674e:	687b      	ldr	r3, [r7, #4]
 8016750:	8b5b      	ldrh	r3, [r3, #26]
 8016752:	f003 0304 	and.w	r3, r3, #4
 8016756:	2b00      	cmp	r3, #0
 8016758:	d010      	beq.n	801677c <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 801675a:	687b      	ldr	r3, [r7, #4]
 801675c:	8b5b      	ldrh	r3, [r3, #26]
 801675e:	f023 0304 	bic.w	r3, r3, #4
 8016762:	b29a      	uxth	r2, r3
 8016764:	687b      	ldr	r3, [r7, #4]
 8016766:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8016768:	687b      	ldr	r3, [r7, #4]
 801676a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801676e:	687b      	ldr	r3, [r7, #4]
 8016770:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8016774:	687b      	ldr	r3, [r7, #4]
 8016776:	2200      	movs	r2, #0
 8016778:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 801677c:	687b      	ldr	r3, [r7, #4]
 801677e:	2200      	movs	r2, #0
 8016780:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8016784:	687b      	ldr	r3, [r7, #4]
 8016786:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801678a:	10db      	asrs	r3, r3, #3
 801678c:	b21b      	sxth	r3, r3
 801678e:	b29a      	uxth	r2, r3
 8016790:	687b      	ldr	r3, [r7, #4]
 8016792:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8016796:	b29b      	uxth	r3, r3
 8016798:	4413      	add	r3, r2
 801679a:	b29b      	uxth	r3, r3
 801679c:	b21a      	sxth	r2, r3
 801679e:	687b      	ldr	r3, [r7, #4]
 80167a0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 80167a4:	4b18      	ldr	r3, [pc, #96]	; (8016808 <tcp_receive+0x270>)
 80167a6:	681b      	ldr	r3, [r3, #0]
 80167a8:	b29a      	uxth	r2, r3
 80167aa:	687b      	ldr	r3, [r7, #4]
 80167ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80167ae:	b29b      	uxth	r3, r3
 80167b0:	1ad3      	subs	r3, r2, r3
 80167b2:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 80167b4:	687b      	ldr	r3, [r7, #4]
 80167b6:	2200      	movs	r2, #0
 80167b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 80167bc:	4b12      	ldr	r3, [pc, #72]	; (8016808 <tcp_receive+0x270>)
 80167be:	681a      	ldr	r2, [r3, #0]
 80167c0:	687b      	ldr	r3, [r7, #4]
 80167c2:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 80167c4:	687b      	ldr	r3, [r7, #4]
 80167c6:	7d1b      	ldrb	r3, [r3, #20]
 80167c8:	2b03      	cmp	r3, #3
 80167ca:	f240 8097 	bls.w	80168fc <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 80167ce:	687b      	ldr	r3, [r7, #4]
 80167d0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80167d4:	687b      	ldr	r3, [r7, #4]
 80167d6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80167da:	429a      	cmp	r2, r3
 80167dc:	d245      	bcs.n	801686a <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 80167de:	687b      	ldr	r3, [r7, #4]
 80167e0:	8b5b      	ldrh	r3, [r3, #26]
 80167e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80167e6:	2b00      	cmp	r3, #0
 80167e8:	d014      	beq.n	8016814 <tcp_receive+0x27c>
 80167ea:	2301      	movs	r3, #1
 80167ec:	e013      	b.n	8016816 <tcp_receive+0x27e>
 80167ee:	bf00      	nop
 80167f0:	0802538c 	.word	0x0802538c
 80167f4:	080256bc 	.word	0x080256bc
 80167f8:	080253d8 	.word	0x080253d8
 80167fc:	080256d8 	.word	0x080256d8
 8016800:	24007e1c 	.word	0x24007e1c
 8016804:	24007e10 	.word	0x24007e10
 8016808:	24007e14 	.word	0x24007e14
 801680c:	24007e00 	.word	0x24007e00
 8016810:	24007e1a 	.word	0x24007e1a
 8016814:	2302      	movs	r3, #2
 8016816:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 801681a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801681e:	b29a      	uxth	r2, r3
 8016820:	687b      	ldr	r3, [r7, #4]
 8016822:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016824:	fb12 f303 	smulbb	r3, r2, r3
 8016828:	b29b      	uxth	r3, r3
 801682a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801682c:	4293      	cmp	r3, r2
 801682e:	bf28      	it	cs
 8016830:	4613      	movcs	r3, r2
 8016832:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8016834:	687b      	ldr	r3, [r7, #4]
 8016836:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801683a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801683c:	4413      	add	r3, r2
 801683e:	b29a      	uxth	r2, r3
 8016840:	687b      	ldr	r3, [r7, #4]
 8016842:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8016846:	429a      	cmp	r2, r3
 8016848:	d309      	bcc.n	801685e <tcp_receive+0x2c6>
 801684a:	687b      	ldr	r3, [r7, #4]
 801684c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8016850:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8016852:	4413      	add	r3, r2
 8016854:	b29a      	uxth	r2, r3
 8016856:	687b      	ldr	r3, [r7, #4]
 8016858:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801685c:	e04e      	b.n	80168fc <tcp_receive+0x364>
 801685e:	687b      	ldr	r3, [r7, #4]
 8016860:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016864:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8016868:	e048      	b.n	80168fc <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 801686a:	687b      	ldr	r3, [r7, #4]
 801686c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8016870:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8016872:	4413      	add	r3, r2
 8016874:	b29a      	uxth	r2, r3
 8016876:	687b      	ldr	r3, [r7, #4]
 8016878:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801687c:	429a      	cmp	r2, r3
 801687e:	d309      	bcc.n	8016894 <tcp_receive+0x2fc>
 8016880:	687b      	ldr	r3, [r7, #4]
 8016882:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8016886:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8016888:	4413      	add	r3, r2
 801688a:	b29a      	uxth	r2, r3
 801688c:	687b      	ldr	r3, [r7, #4]
 801688e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8016892:	e004      	b.n	801689e <tcp_receive+0x306>
 8016894:	687b      	ldr	r3, [r7, #4]
 8016896:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801689a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 801689e:	687b      	ldr	r3, [r7, #4]
 80168a0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80168a4:	687b      	ldr	r3, [r7, #4]
 80168a6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80168aa:	429a      	cmp	r2, r3
 80168ac:	d326      	bcc.n	80168fc <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 80168ae:	687b      	ldr	r3, [r7, #4]
 80168b0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80168b4:	687b      	ldr	r3, [r7, #4]
 80168b6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80168ba:	1ad3      	subs	r3, r2, r3
 80168bc:	b29a      	uxth	r2, r3
 80168be:	687b      	ldr	r3, [r7, #4]
 80168c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 80168c4:	687b      	ldr	r3, [r7, #4]
 80168c6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80168ca:	687b      	ldr	r3, [r7, #4]
 80168cc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80168ce:	4413      	add	r3, r2
 80168d0:	b29a      	uxth	r2, r3
 80168d2:	687b      	ldr	r3, [r7, #4]
 80168d4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80168d8:	429a      	cmp	r2, r3
 80168da:	d30a      	bcc.n	80168f2 <tcp_receive+0x35a>
 80168dc:	687b      	ldr	r3, [r7, #4]
 80168de:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80168e2:	687b      	ldr	r3, [r7, #4]
 80168e4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80168e6:	4413      	add	r3, r2
 80168e8:	b29a      	uxth	r2, r3
 80168ea:	687b      	ldr	r3, [r7, #4]
 80168ec:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80168f0:	e004      	b.n	80168fc <tcp_receive+0x364>
 80168f2:	687b      	ldr	r3, [r7, #4]
 80168f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80168f8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 80168fc:	687b      	ldr	r3, [r7, #4]
 80168fe:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8016900:	687b      	ldr	r3, [r7, #4]
 8016902:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016904:	4a98      	ldr	r2, [pc, #608]	; (8016b68 <tcp_receive+0x5d0>)
 8016906:	6878      	ldr	r0, [r7, #4]
 8016908:	f7ff fdca 	bl	80164a0 <tcp_free_acked_segments>
 801690c:	4602      	mov	r2, r0
 801690e:	687b      	ldr	r3, [r7, #4]
 8016910:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8016912:	687b      	ldr	r3, [r7, #4]
 8016914:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8016916:	687b      	ldr	r3, [r7, #4]
 8016918:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801691a:	4a94      	ldr	r2, [pc, #592]	; (8016b6c <tcp_receive+0x5d4>)
 801691c:	6878      	ldr	r0, [r7, #4]
 801691e:	f7ff fdbf 	bl	80164a0 <tcp_free_acked_segments>
 8016922:	4602      	mov	r2, r0
 8016924:	687b      	ldr	r3, [r7, #4]
 8016926:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8016928:	687b      	ldr	r3, [r7, #4]
 801692a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801692c:	2b00      	cmp	r3, #0
 801692e:	d104      	bne.n	801693a <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8016930:	687b      	ldr	r3, [r7, #4]
 8016932:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016936:	861a      	strh	r2, [r3, #48]	; 0x30
 8016938:	e002      	b.n	8016940 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 801693a:	687b      	ldr	r3, [r7, #4]
 801693c:	2200      	movs	r2, #0
 801693e:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8016940:	687b      	ldr	r3, [r7, #4]
 8016942:	2200      	movs	r2, #0
 8016944:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8016946:	687b      	ldr	r3, [r7, #4]
 8016948:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801694a:	2b00      	cmp	r3, #0
 801694c:	d103      	bne.n	8016956 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 801694e:	687b      	ldr	r3, [r7, #4]
 8016950:	2200      	movs	r2, #0
 8016952:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8016956:	687b      	ldr	r3, [r7, #4]
 8016958:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 801695c:	4b84      	ldr	r3, [pc, #528]	; (8016b70 <tcp_receive+0x5d8>)
 801695e:	881b      	ldrh	r3, [r3, #0]
 8016960:	4413      	add	r3, r2
 8016962:	b29a      	uxth	r2, r3
 8016964:	687b      	ldr	r3, [r7, #4]
 8016966:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 801696a:	687b      	ldr	r3, [r7, #4]
 801696c:	8b5b      	ldrh	r3, [r3, #26]
 801696e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8016972:	2b00      	cmp	r3, #0
 8016974:	d035      	beq.n	80169e2 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8016976:	687b      	ldr	r3, [r7, #4]
 8016978:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801697a:	2b00      	cmp	r3, #0
 801697c:	d118      	bne.n	80169b0 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 801697e:	687b      	ldr	r3, [r7, #4]
 8016980:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016982:	2b00      	cmp	r3, #0
 8016984:	d00c      	beq.n	80169a0 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8016986:	687b      	ldr	r3, [r7, #4]
 8016988:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 801698a:	687b      	ldr	r3, [r7, #4]
 801698c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801698e:	68db      	ldr	r3, [r3, #12]
 8016990:	685b      	ldr	r3, [r3, #4]
 8016992:	4618      	mov	r0, r3
 8016994:	f7fa fd5f 	bl	8011456 <lwip_htonl>
 8016998:	4603      	mov	r3, r0
 801699a:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 801699c:	2b00      	cmp	r3, #0
 801699e:	dc20      	bgt.n	80169e2 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 80169a0:	687b      	ldr	r3, [r7, #4]
 80169a2:	8b5b      	ldrh	r3, [r3, #26]
 80169a4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80169a8:	b29a      	uxth	r2, r3
 80169aa:	687b      	ldr	r3, [r7, #4]
 80169ac:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80169ae:	e018      	b.n	80169e2 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 80169b0:	687b      	ldr	r3, [r7, #4]
 80169b2:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80169b4:	687b      	ldr	r3, [r7, #4]
 80169b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80169b8:	68db      	ldr	r3, [r3, #12]
 80169ba:	685b      	ldr	r3, [r3, #4]
 80169bc:	4618      	mov	r0, r3
 80169be:	f7fa fd4a 	bl	8011456 <lwip_htonl>
 80169c2:	4603      	mov	r3, r0
 80169c4:	1ae3      	subs	r3, r4, r3
 80169c6:	2b00      	cmp	r3, #0
 80169c8:	dc0b      	bgt.n	80169e2 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 80169ca:	687b      	ldr	r3, [r7, #4]
 80169cc:	8b5b      	ldrh	r3, [r3, #26]
 80169ce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80169d2:	b29a      	uxth	r2, r3
 80169d4:	687b      	ldr	r3, [r7, #4]
 80169d6:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80169d8:	e003      	b.n	80169e2 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 80169da:	6878      	ldr	r0, [r7, #4]
 80169dc:	f002 fbce 	bl	801917c <tcp_send_empty_ack>
 80169e0:	e000      	b.n	80169e4 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80169e2:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 80169e4:	687b      	ldr	r3, [r7, #4]
 80169e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80169e8:	2b00      	cmp	r3, #0
 80169ea:	d05b      	beq.n	8016aa4 <tcp_receive+0x50c>
 80169ec:	687b      	ldr	r3, [r7, #4]
 80169ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80169f0:	4b60      	ldr	r3, [pc, #384]	; (8016b74 <tcp_receive+0x5dc>)
 80169f2:	681b      	ldr	r3, [r3, #0]
 80169f4:	1ad3      	subs	r3, r2, r3
 80169f6:	2b00      	cmp	r3, #0
 80169f8:	da54      	bge.n	8016aa4 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 80169fa:	4b5f      	ldr	r3, [pc, #380]	; (8016b78 <tcp_receive+0x5e0>)
 80169fc:	681b      	ldr	r3, [r3, #0]
 80169fe:	b29a      	uxth	r2, r3
 8016a00:	687b      	ldr	r3, [r7, #4]
 8016a02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016a04:	b29b      	uxth	r3, r3
 8016a06:	1ad3      	subs	r3, r2, r3
 8016a08:	b29b      	uxth	r3, r3
 8016a0a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8016a0e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8016a12:	687b      	ldr	r3, [r7, #4]
 8016a14:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8016a18:	10db      	asrs	r3, r3, #3
 8016a1a:	b21b      	sxth	r3, r3
 8016a1c:	b29b      	uxth	r3, r3
 8016a1e:	1ad3      	subs	r3, r2, r3
 8016a20:	b29b      	uxth	r3, r3
 8016a22:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8016a26:	687b      	ldr	r3, [r7, #4]
 8016a28:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8016a2c:	b29a      	uxth	r2, r3
 8016a2e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8016a32:	4413      	add	r3, r2
 8016a34:	b29b      	uxth	r3, r3
 8016a36:	b21a      	sxth	r2, r3
 8016a38:	687b      	ldr	r3, [r7, #4]
 8016a3a:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8016a3c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8016a40:	2b00      	cmp	r3, #0
 8016a42:	da05      	bge.n	8016a50 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8016a44:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8016a48:	425b      	negs	r3, r3
 8016a4a:	b29b      	uxth	r3, r3
 8016a4c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8016a50:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8016a54:	687b      	ldr	r3, [r7, #4]
 8016a56:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8016a5a:	109b      	asrs	r3, r3, #2
 8016a5c:	b21b      	sxth	r3, r3
 8016a5e:	b29b      	uxth	r3, r3
 8016a60:	1ad3      	subs	r3, r2, r3
 8016a62:	b29b      	uxth	r3, r3
 8016a64:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8016a68:	687b      	ldr	r3, [r7, #4]
 8016a6a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8016a6e:	b29a      	uxth	r2, r3
 8016a70:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8016a74:	4413      	add	r3, r2
 8016a76:	b29b      	uxth	r3, r3
 8016a78:	b21a      	sxth	r2, r3
 8016a7a:	687b      	ldr	r3, [r7, #4]
 8016a7c:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8016a7e:	687b      	ldr	r3, [r7, #4]
 8016a80:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8016a84:	10db      	asrs	r3, r3, #3
 8016a86:	b21b      	sxth	r3, r3
 8016a88:	b29a      	uxth	r2, r3
 8016a8a:	687b      	ldr	r3, [r7, #4]
 8016a8c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8016a90:	b29b      	uxth	r3, r3
 8016a92:	4413      	add	r3, r2
 8016a94:	b29b      	uxth	r3, r3
 8016a96:	b21a      	sxth	r2, r3
 8016a98:	687b      	ldr	r3, [r7, #4]
 8016a9a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8016a9e:	687b      	ldr	r3, [r7, #4]
 8016aa0:	2200      	movs	r2, #0
 8016aa2:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8016aa4:	4b35      	ldr	r3, [pc, #212]	; (8016b7c <tcp_receive+0x5e4>)
 8016aa6:	881b      	ldrh	r3, [r3, #0]
 8016aa8:	2b00      	cmp	r3, #0
 8016aaa:	f000 84e2 	beq.w	8017472 <tcp_receive+0xeda>
 8016aae:	687b      	ldr	r3, [r7, #4]
 8016ab0:	7d1b      	ldrb	r3, [r3, #20]
 8016ab2:	2b06      	cmp	r3, #6
 8016ab4:	f200 84dd 	bhi.w	8017472 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8016ab8:	687b      	ldr	r3, [r7, #4]
 8016aba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8016abc:	4b30      	ldr	r3, [pc, #192]	; (8016b80 <tcp_receive+0x5e8>)
 8016abe:	681b      	ldr	r3, [r3, #0]
 8016ac0:	1ad3      	subs	r3, r2, r3
 8016ac2:	3b01      	subs	r3, #1
 8016ac4:	2b00      	cmp	r3, #0
 8016ac6:	f2c0 808f 	blt.w	8016be8 <tcp_receive+0x650>
 8016aca:	687b      	ldr	r3, [r7, #4]
 8016acc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8016ace:	4b2b      	ldr	r3, [pc, #172]	; (8016b7c <tcp_receive+0x5e4>)
 8016ad0:	881b      	ldrh	r3, [r3, #0]
 8016ad2:	4619      	mov	r1, r3
 8016ad4:	4b2a      	ldr	r3, [pc, #168]	; (8016b80 <tcp_receive+0x5e8>)
 8016ad6:	681b      	ldr	r3, [r3, #0]
 8016ad8:	440b      	add	r3, r1
 8016ada:	1ad3      	subs	r3, r2, r3
 8016adc:	3301      	adds	r3, #1
 8016ade:	2b00      	cmp	r3, #0
 8016ae0:	f300 8082 	bgt.w	8016be8 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8016ae4:	4b27      	ldr	r3, [pc, #156]	; (8016b84 <tcp_receive+0x5ec>)
 8016ae6:	685b      	ldr	r3, [r3, #4]
 8016ae8:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8016aea:	687b      	ldr	r3, [r7, #4]
 8016aec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8016aee:	4b24      	ldr	r3, [pc, #144]	; (8016b80 <tcp_receive+0x5e8>)
 8016af0:	681b      	ldr	r3, [r3, #0]
 8016af2:	1ad3      	subs	r3, r2, r3
 8016af4:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8016af6:	4b23      	ldr	r3, [pc, #140]	; (8016b84 <tcp_receive+0x5ec>)
 8016af8:	685b      	ldr	r3, [r3, #4]
 8016afa:	2b00      	cmp	r3, #0
 8016afc:	d106      	bne.n	8016b0c <tcp_receive+0x574>
 8016afe:	4b22      	ldr	r3, [pc, #136]	; (8016b88 <tcp_receive+0x5f0>)
 8016b00:	f240 5294 	movw	r2, #1428	; 0x594
 8016b04:	4921      	ldr	r1, [pc, #132]	; (8016b8c <tcp_receive+0x5f4>)
 8016b06:	4822      	ldr	r0, [pc, #136]	; (8016b90 <tcp_receive+0x5f8>)
 8016b08:	f009 fca2 	bl	8020450 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8016b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b0e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8016b12:	4293      	cmp	r3, r2
 8016b14:	d906      	bls.n	8016b24 <tcp_receive+0x58c>
 8016b16:	4b1c      	ldr	r3, [pc, #112]	; (8016b88 <tcp_receive+0x5f0>)
 8016b18:	f240 5295 	movw	r2, #1429	; 0x595
 8016b1c:	491d      	ldr	r1, [pc, #116]	; (8016b94 <tcp_receive+0x5fc>)
 8016b1e:	481c      	ldr	r0, [pc, #112]	; (8016b90 <tcp_receive+0x5f8>)
 8016b20:	f009 fc96 	bl	8020450 <iprintf>
      off = (u16_t)off32;
 8016b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b26:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8016b2a:	4b16      	ldr	r3, [pc, #88]	; (8016b84 <tcp_receive+0x5ec>)
 8016b2c:	685b      	ldr	r3, [r3, #4]
 8016b2e:	891b      	ldrh	r3, [r3, #8]
 8016b30:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016b34:	429a      	cmp	r2, r3
 8016b36:	d906      	bls.n	8016b46 <tcp_receive+0x5ae>
 8016b38:	4b13      	ldr	r3, [pc, #76]	; (8016b88 <tcp_receive+0x5f0>)
 8016b3a:	f240 5297 	movw	r2, #1431	; 0x597
 8016b3e:	4916      	ldr	r1, [pc, #88]	; (8016b98 <tcp_receive+0x600>)
 8016b40:	4813      	ldr	r0, [pc, #76]	; (8016b90 <tcp_receive+0x5f8>)
 8016b42:	f009 fc85 	bl	8020450 <iprintf>
      inseg.len -= off;
 8016b46:	4b0f      	ldr	r3, [pc, #60]	; (8016b84 <tcp_receive+0x5ec>)
 8016b48:	891a      	ldrh	r2, [r3, #8]
 8016b4a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016b4e:	1ad3      	subs	r3, r2, r3
 8016b50:	b29a      	uxth	r2, r3
 8016b52:	4b0c      	ldr	r3, [pc, #48]	; (8016b84 <tcp_receive+0x5ec>)
 8016b54:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8016b56:	4b0b      	ldr	r3, [pc, #44]	; (8016b84 <tcp_receive+0x5ec>)
 8016b58:	685b      	ldr	r3, [r3, #4]
 8016b5a:	891a      	ldrh	r2, [r3, #8]
 8016b5c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016b60:	1ad3      	subs	r3, r2, r3
 8016b62:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8016b64:	e02a      	b.n	8016bbc <tcp_receive+0x624>
 8016b66:	bf00      	nop
 8016b68:	080256f4 	.word	0x080256f4
 8016b6c:	080256fc 	.word	0x080256fc
 8016b70:	24007e18 	.word	0x24007e18
 8016b74:	24007e14 	.word	0x24007e14
 8016b78:	24007dd8 	.word	0x24007dd8
 8016b7c:	24007e1a 	.word	0x24007e1a
 8016b80:	24007e10 	.word	0x24007e10
 8016b84:	24007df0 	.word	0x24007df0
 8016b88:	0802538c 	.word	0x0802538c
 8016b8c:	08025704 	.word	0x08025704
 8016b90:	080253d8 	.word	0x080253d8
 8016b94:	08025714 	.word	0x08025714
 8016b98:	08025724 	.word	0x08025724
        off -= p->len;
 8016b9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016b9e:	895b      	ldrh	r3, [r3, #10]
 8016ba0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016ba4:	1ad3      	subs	r3, r2, r3
 8016ba6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8016baa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016bac:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8016bae:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8016bb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016bb2:	2200      	movs	r2, #0
 8016bb4:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8016bb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016bb8:	681b      	ldr	r3, [r3, #0]
 8016bba:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8016bbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016bbe:	895b      	ldrh	r3, [r3, #10]
 8016bc0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016bc4:	429a      	cmp	r2, r3
 8016bc6:	d8e9      	bhi.n	8016b9c <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8016bc8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016bcc:	4619      	mov	r1, r3
 8016bce:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8016bd0:	f7fc f85c 	bl	8012c8c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8016bd4:	687b      	ldr	r3, [r7, #4]
 8016bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016bd8:	4a91      	ldr	r2, [pc, #580]	; (8016e20 <tcp_receive+0x888>)
 8016bda:	6013      	str	r3, [r2, #0]
 8016bdc:	4b91      	ldr	r3, [pc, #580]	; (8016e24 <tcp_receive+0x88c>)
 8016bde:	68db      	ldr	r3, [r3, #12]
 8016be0:	4a8f      	ldr	r2, [pc, #572]	; (8016e20 <tcp_receive+0x888>)
 8016be2:	6812      	ldr	r2, [r2, #0]
 8016be4:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8016be6:	e00d      	b.n	8016c04 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8016be8:	4b8d      	ldr	r3, [pc, #564]	; (8016e20 <tcp_receive+0x888>)
 8016bea:	681a      	ldr	r2, [r3, #0]
 8016bec:	687b      	ldr	r3, [r7, #4]
 8016bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016bf0:	1ad3      	subs	r3, r2, r3
 8016bf2:	2b00      	cmp	r3, #0
 8016bf4:	da06      	bge.n	8016c04 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8016bf6:	687b      	ldr	r3, [r7, #4]
 8016bf8:	8b5b      	ldrh	r3, [r3, #26]
 8016bfa:	f043 0302 	orr.w	r3, r3, #2
 8016bfe:	b29a      	uxth	r2, r3
 8016c00:	687b      	ldr	r3, [r7, #4]
 8016c02:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8016c04:	4b86      	ldr	r3, [pc, #536]	; (8016e20 <tcp_receive+0x888>)
 8016c06:	681a      	ldr	r2, [r3, #0]
 8016c08:	687b      	ldr	r3, [r7, #4]
 8016c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016c0c:	1ad3      	subs	r3, r2, r3
 8016c0e:	2b00      	cmp	r3, #0
 8016c10:	f2c0 842a 	blt.w	8017468 <tcp_receive+0xed0>
 8016c14:	4b82      	ldr	r3, [pc, #520]	; (8016e20 <tcp_receive+0x888>)
 8016c16:	681a      	ldr	r2, [r3, #0]
 8016c18:	687b      	ldr	r3, [r7, #4]
 8016c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016c1c:	6879      	ldr	r1, [r7, #4]
 8016c1e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8016c20:	440b      	add	r3, r1
 8016c22:	1ad3      	subs	r3, r2, r3
 8016c24:	3301      	adds	r3, #1
 8016c26:	2b00      	cmp	r3, #0
 8016c28:	f300 841e 	bgt.w	8017468 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8016c2c:	687b      	ldr	r3, [r7, #4]
 8016c2e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8016c30:	4b7b      	ldr	r3, [pc, #492]	; (8016e20 <tcp_receive+0x888>)
 8016c32:	681b      	ldr	r3, [r3, #0]
 8016c34:	429a      	cmp	r2, r3
 8016c36:	f040 829a 	bne.w	801716e <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8016c3a:	4b7a      	ldr	r3, [pc, #488]	; (8016e24 <tcp_receive+0x88c>)
 8016c3c:	891c      	ldrh	r4, [r3, #8]
 8016c3e:	4b79      	ldr	r3, [pc, #484]	; (8016e24 <tcp_receive+0x88c>)
 8016c40:	68db      	ldr	r3, [r3, #12]
 8016c42:	899b      	ldrh	r3, [r3, #12]
 8016c44:	b29b      	uxth	r3, r3
 8016c46:	4618      	mov	r0, r3
 8016c48:	f7fa fbf0 	bl	801142c <lwip_htons>
 8016c4c:	4603      	mov	r3, r0
 8016c4e:	b2db      	uxtb	r3, r3
 8016c50:	f003 0303 	and.w	r3, r3, #3
 8016c54:	2b00      	cmp	r3, #0
 8016c56:	d001      	beq.n	8016c5c <tcp_receive+0x6c4>
 8016c58:	2301      	movs	r3, #1
 8016c5a:	e000      	b.n	8016c5e <tcp_receive+0x6c6>
 8016c5c:	2300      	movs	r3, #0
 8016c5e:	4423      	add	r3, r4
 8016c60:	b29a      	uxth	r2, r3
 8016c62:	4b71      	ldr	r3, [pc, #452]	; (8016e28 <tcp_receive+0x890>)
 8016c64:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8016c66:	687b      	ldr	r3, [r7, #4]
 8016c68:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8016c6a:	4b6f      	ldr	r3, [pc, #444]	; (8016e28 <tcp_receive+0x890>)
 8016c6c:	881b      	ldrh	r3, [r3, #0]
 8016c6e:	429a      	cmp	r2, r3
 8016c70:	d275      	bcs.n	8016d5e <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8016c72:	4b6c      	ldr	r3, [pc, #432]	; (8016e24 <tcp_receive+0x88c>)
 8016c74:	68db      	ldr	r3, [r3, #12]
 8016c76:	899b      	ldrh	r3, [r3, #12]
 8016c78:	b29b      	uxth	r3, r3
 8016c7a:	4618      	mov	r0, r3
 8016c7c:	f7fa fbd6 	bl	801142c <lwip_htons>
 8016c80:	4603      	mov	r3, r0
 8016c82:	b2db      	uxtb	r3, r3
 8016c84:	f003 0301 	and.w	r3, r3, #1
 8016c88:	2b00      	cmp	r3, #0
 8016c8a:	d01f      	beq.n	8016ccc <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8016c8c:	4b65      	ldr	r3, [pc, #404]	; (8016e24 <tcp_receive+0x88c>)
 8016c8e:	68db      	ldr	r3, [r3, #12]
 8016c90:	899b      	ldrh	r3, [r3, #12]
 8016c92:	b29b      	uxth	r3, r3
 8016c94:	b21b      	sxth	r3, r3
 8016c96:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8016c9a:	b21c      	sxth	r4, r3
 8016c9c:	4b61      	ldr	r3, [pc, #388]	; (8016e24 <tcp_receive+0x88c>)
 8016c9e:	68db      	ldr	r3, [r3, #12]
 8016ca0:	899b      	ldrh	r3, [r3, #12]
 8016ca2:	b29b      	uxth	r3, r3
 8016ca4:	4618      	mov	r0, r3
 8016ca6:	f7fa fbc1 	bl	801142c <lwip_htons>
 8016caa:	4603      	mov	r3, r0
 8016cac:	b2db      	uxtb	r3, r3
 8016cae:	b29b      	uxth	r3, r3
 8016cb0:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8016cb4:	b29b      	uxth	r3, r3
 8016cb6:	4618      	mov	r0, r3
 8016cb8:	f7fa fbb8 	bl	801142c <lwip_htons>
 8016cbc:	4603      	mov	r3, r0
 8016cbe:	b21b      	sxth	r3, r3
 8016cc0:	4323      	orrs	r3, r4
 8016cc2:	b21a      	sxth	r2, r3
 8016cc4:	4b57      	ldr	r3, [pc, #348]	; (8016e24 <tcp_receive+0x88c>)
 8016cc6:	68db      	ldr	r3, [r3, #12]
 8016cc8:	b292      	uxth	r2, r2
 8016cca:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8016ccc:	687b      	ldr	r3, [r7, #4]
 8016cce:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8016cd0:	4b54      	ldr	r3, [pc, #336]	; (8016e24 <tcp_receive+0x88c>)
 8016cd2:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8016cd4:	4b53      	ldr	r3, [pc, #332]	; (8016e24 <tcp_receive+0x88c>)
 8016cd6:	68db      	ldr	r3, [r3, #12]
 8016cd8:	899b      	ldrh	r3, [r3, #12]
 8016cda:	b29b      	uxth	r3, r3
 8016cdc:	4618      	mov	r0, r3
 8016cde:	f7fa fba5 	bl	801142c <lwip_htons>
 8016ce2:	4603      	mov	r3, r0
 8016ce4:	b2db      	uxtb	r3, r3
 8016ce6:	f003 0302 	and.w	r3, r3, #2
 8016cea:	2b00      	cmp	r3, #0
 8016cec:	d005      	beq.n	8016cfa <tcp_receive+0x762>
            inseg.len -= 1;
 8016cee:	4b4d      	ldr	r3, [pc, #308]	; (8016e24 <tcp_receive+0x88c>)
 8016cf0:	891b      	ldrh	r3, [r3, #8]
 8016cf2:	3b01      	subs	r3, #1
 8016cf4:	b29a      	uxth	r2, r3
 8016cf6:	4b4b      	ldr	r3, [pc, #300]	; (8016e24 <tcp_receive+0x88c>)
 8016cf8:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8016cfa:	4b4a      	ldr	r3, [pc, #296]	; (8016e24 <tcp_receive+0x88c>)
 8016cfc:	685b      	ldr	r3, [r3, #4]
 8016cfe:	4a49      	ldr	r2, [pc, #292]	; (8016e24 <tcp_receive+0x88c>)
 8016d00:	8912      	ldrh	r2, [r2, #8]
 8016d02:	4611      	mov	r1, r2
 8016d04:	4618      	mov	r0, r3
 8016d06:	f7fb fec1 	bl	8012a8c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8016d0a:	4b46      	ldr	r3, [pc, #280]	; (8016e24 <tcp_receive+0x88c>)
 8016d0c:	891c      	ldrh	r4, [r3, #8]
 8016d0e:	4b45      	ldr	r3, [pc, #276]	; (8016e24 <tcp_receive+0x88c>)
 8016d10:	68db      	ldr	r3, [r3, #12]
 8016d12:	899b      	ldrh	r3, [r3, #12]
 8016d14:	b29b      	uxth	r3, r3
 8016d16:	4618      	mov	r0, r3
 8016d18:	f7fa fb88 	bl	801142c <lwip_htons>
 8016d1c:	4603      	mov	r3, r0
 8016d1e:	b2db      	uxtb	r3, r3
 8016d20:	f003 0303 	and.w	r3, r3, #3
 8016d24:	2b00      	cmp	r3, #0
 8016d26:	d001      	beq.n	8016d2c <tcp_receive+0x794>
 8016d28:	2301      	movs	r3, #1
 8016d2a:	e000      	b.n	8016d2e <tcp_receive+0x796>
 8016d2c:	2300      	movs	r3, #0
 8016d2e:	4423      	add	r3, r4
 8016d30:	b29a      	uxth	r2, r3
 8016d32:	4b3d      	ldr	r3, [pc, #244]	; (8016e28 <tcp_receive+0x890>)
 8016d34:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8016d36:	4b3c      	ldr	r3, [pc, #240]	; (8016e28 <tcp_receive+0x890>)
 8016d38:	881b      	ldrh	r3, [r3, #0]
 8016d3a:	461a      	mov	r2, r3
 8016d3c:	4b38      	ldr	r3, [pc, #224]	; (8016e20 <tcp_receive+0x888>)
 8016d3e:	681b      	ldr	r3, [r3, #0]
 8016d40:	441a      	add	r2, r3
 8016d42:	687b      	ldr	r3, [r7, #4]
 8016d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016d46:	6879      	ldr	r1, [r7, #4]
 8016d48:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8016d4a:	440b      	add	r3, r1
 8016d4c:	429a      	cmp	r2, r3
 8016d4e:	d006      	beq.n	8016d5e <tcp_receive+0x7c6>
 8016d50:	4b36      	ldr	r3, [pc, #216]	; (8016e2c <tcp_receive+0x894>)
 8016d52:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8016d56:	4936      	ldr	r1, [pc, #216]	; (8016e30 <tcp_receive+0x898>)
 8016d58:	4836      	ldr	r0, [pc, #216]	; (8016e34 <tcp_receive+0x89c>)
 8016d5a:	f009 fb79 	bl	8020450 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8016d5e:	687b      	ldr	r3, [r7, #4]
 8016d60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016d62:	2b00      	cmp	r3, #0
 8016d64:	f000 80e7 	beq.w	8016f36 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8016d68:	4b2e      	ldr	r3, [pc, #184]	; (8016e24 <tcp_receive+0x88c>)
 8016d6a:	68db      	ldr	r3, [r3, #12]
 8016d6c:	899b      	ldrh	r3, [r3, #12]
 8016d6e:	b29b      	uxth	r3, r3
 8016d70:	4618      	mov	r0, r3
 8016d72:	f7fa fb5b 	bl	801142c <lwip_htons>
 8016d76:	4603      	mov	r3, r0
 8016d78:	b2db      	uxtb	r3, r3
 8016d7a:	f003 0301 	and.w	r3, r3, #1
 8016d7e:	2b00      	cmp	r3, #0
 8016d80:	d010      	beq.n	8016da4 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8016d82:	e00a      	b.n	8016d9a <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8016d84:	687b      	ldr	r3, [r7, #4]
 8016d86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016d88:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8016d8a:	687b      	ldr	r3, [r7, #4]
 8016d8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016d8e:	681a      	ldr	r2, [r3, #0]
 8016d90:	687b      	ldr	r3, [r7, #4]
 8016d92:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8016d94:	68f8      	ldr	r0, [r7, #12]
 8016d96:	f7fd fcc4 	bl	8014722 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8016d9a:	687b      	ldr	r3, [r7, #4]
 8016d9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016d9e:	2b00      	cmp	r3, #0
 8016da0:	d1f0      	bne.n	8016d84 <tcp_receive+0x7ec>
 8016da2:	e0c8      	b.n	8016f36 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8016da4:	687b      	ldr	r3, [r7, #4]
 8016da6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016da8:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8016daa:	e052      	b.n	8016e52 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8016dac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016dae:	68db      	ldr	r3, [r3, #12]
 8016db0:	899b      	ldrh	r3, [r3, #12]
 8016db2:	b29b      	uxth	r3, r3
 8016db4:	4618      	mov	r0, r3
 8016db6:	f7fa fb39 	bl	801142c <lwip_htons>
 8016dba:	4603      	mov	r3, r0
 8016dbc:	b2db      	uxtb	r3, r3
 8016dbe:	f003 0301 	and.w	r3, r3, #1
 8016dc2:	2b00      	cmp	r3, #0
 8016dc4:	d03d      	beq.n	8016e42 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8016dc6:	4b17      	ldr	r3, [pc, #92]	; (8016e24 <tcp_receive+0x88c>)
 8016dc8:	68db      	ldr	r3, [r3, #12]
 8016dca:	899b      	ldrh	r3, [r3, #12]
 8016dcc:	b29b      	uxth	r3, r3
 8016dce:	4618      	mov	r0, r3
 8016dd0:	f7fa fb2c 	bl	801142c <lwip_htons>
 8016dd4:	4603      	mov	r3, r0
 8016dd6:	b2db      	uxtb	r3, r3
 8016dd8:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8016ddc:	2b00      	cmp	r3, #0
 8016dde:	d130      	bne.n	8016e42 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8016de0:	4b10      	ldr	r3, [pc, #64]	; (8016e24 <tcp_receive+0x88c>)
 8016de2:	68db      	ldr	r3, [r3, #12]
 8016de4:	899b      	ldrh	r3, [r3, #12]
 8016de6:	b29c      	uxth	r4, r3
 8016de8:	2001      	movs	r0, #1
 8016dea:	f7fa fb1f 	bl	801142c <lwip_htons>
 8016dee:	4603      	mov	r3, r0
 8016df0:	461a      	mov	r2, r3
 8016df2:	4b0c      	ldr	r3, [pc, #48]	; (8016e24 <tcp_receive+0x88c>)
 8016df4:	68db      	ldr	r3, [r3, #12]
 8016df6:	4322      	orrs	r2, r4
 8016df8:	b292      	uxth	r2, r2
 8016dfa:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8016dfc:	4b09      	ldr	r3, [pc, #36]	; (8016e24 <tcp_receive+0x88c>)
 8016dfe:	891c      	ldrh	r4, [r3, #8]
 8016e00:	4b08      	ldr	r3, [pc, #32]	; (8016e24 <tcp_receive+0x88c>)
 8016e02:	68db      	ldr	r3, [r3, #12]
 8016e04:	899b      	ldrh	r3, [r3, #12]
 8016e06:	b29b      	uxth	r3, r3
 8016e08:	4618      	mov	r0, r3
 8016e0a:	f7fa fb0f 	bl	801142c <lwip_htons>
 8016e0e:	4603      	mov	r3, r0
 8016e10:	b2db      	uxtb	r3, r3
 8016e12:	f003 0303 	and.w	r3, r3, #3
 8016e16:	2b00      	cmp	r3, #0
 8016e18:	d00e      	beq.n	8016e38 <tcp_receive+0x8a0>
 8016e1a:	2301      	movs	r3, #1
 8016e1c:	e00d      	b.n	8016e3a <tcp_receive+0x8a2>
 8016e1e:	bf00      	nop
 8016e20:	24007e10 	.word	0x24007e10
 8016e24:	24007df0 	.word	0x24007df0
 8016e28:	24007e1a 	.word	0x24007e1a
 8016e2c:	0802538c 	.word	0x0802538c
 8016e30:	08025734 	.word	0x08025734
 8016e34:	080253d8 	.word	0x080253d8
 8016e38:	2300      	movs	r3, #0
 8016e3a:	4423      	add	r3, r4
 8016e3c:	b29a      	uxth	r2, r3
 8016e3e:	4b98      	ldr	r3, [pc, #608]	; (80170a0 <tcp_receive+0xb08>)
 8016e40:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8016e42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016e44:	613b      	str	r3, [r7, #16]
              next = next->next;
 8016e46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016e48:	681b      	ldr	r3, [r3, #0]
 8016e4a:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8016e4c:	6938      	ldr	r0, [r7, #16]
 8016e4e:	f7fd fc68 	bl	8014722 <tcp_seg_free>
            while (next &&
 8016e52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016e54:	2b00      	cmp	r3, #0
 8016e56:	d00e      	beq.n	8016e76 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8016e58:	4b91      	ldr	r3, [pc, #580]	; (80170a0 <tcp_receive+0xb08>)
 8016e5a:	881b      	ldrh	r3, [r3, #0]
 8016e5c:	461a      	mov	r2, r3
 8016e5e:	4b91      	ldr	r3, [pc, #580]	; (80170a4 <tcp_receive+0xb0c>)
 8016e60:	681b      	ldr	r3, [r3, #0]
 8016e62:	441a      	add	r2, r3
 8016e64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016e66:	68db      	ldr	r3, [r3, #12]
 8016e68:	685b      	ldr	r3, [r3, #4]
 8016e6a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8016e6c:	8909      	ldrh	r1, [r1, #8]
 8016e6e:	440b      	add	r3, r1
 8016e70:	1ad3      	subs	r3, r2, r3
            while (next &&
 8016e72:	2b00      	cmp	r3, #0
 8016e74:	da9a      	bge.n	8016dac <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8016e76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016e78:	2b00      	cmp	r3, #0
 8016e7a:	d059      	beq.n	8016f30 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 8016e7c:	4b88      	ldr	r3, [pc, #544]	; (80170a0 <tcp_receive+0xb08>)
 8016e7e:	881b      	ldrh	r3, [r3, #0]
 8016e80:	461a      	mov	r2, r3
 8016e82:	4b88      	ldr	r3, [pc, #544]	; (80170a4 <tcp_receive+0xb0c>)
 8016e84:	681b      	ldr	r3, [r3, #0]
 8016e86:	441a      	add	r2, r3
 8016e88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016e8a:	68db      	ldr	r3, [r3, #12]
 8016e8c:	685b      	ldr	r3, [r3, #4]
 8016e8e:	1ad3      	subs	r3, r2, r3
            if (next &&
 8016e90:	2b00      	cmp	r3, #0
 8016e92:	dd4d      	ble.n	8016f30 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8016e94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016e96:	68db      	ldr	r3, [r3, #12]
 8016e98:	685b      	ldr	r3, [r3, #4]
 8016e9a:	b29a      	uxth	r2, r3
 8016e9c:	4b81      	ldr	r3, [pc, #516]	; (80170a4 <tcp_receive+0xb0c>)
 8016e9e:	681b      	ldr	r3, [r3, #0]
 8016ea0:	b29b      	uxth	r3, r3
 8016ea2:	1ad3      	subs	r3, r2, r3
 8016ea4:	b29a      	uxth	r2, r3
 8016ea6:	4b80      	ldr	r3, [pc, #512]	; (80170a8 <tcp_receive+0xb10>)
 8016ea8:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8016eaa:	4b7f      	ldr	r3, [pc, #508]	; (80170a8 <tcp_receive+0xb10>)
 8016eac:	68db      	ldr	r3, [r3, #12]
 8016eae:	899b      	ldrh	r3, [r3, #12]
 8016eb0:	b29b      	uxth	r3, r3
 8016eb2:	4618      	mov	r0, r3
 8016eb4:	f7fa faba 	bl	801142c <lwip_htons>
 8016eb8:	4603      	mov	r3, r0
 8016eba:	b2db      	uxtb	r3, r3
 8016ebc:	f003 0302 	and.w	r3, r3, #2
 8016ec0:	2b00      	cmp	r3, #0
 8016ec2:	d005      	beq.n	8016ed0 <tcp_receive+0x938>
                inseg.len -= 1;
 8016ec4:	4b78      	ldr	r3, [pc, #480]	; (80170a8 <tcp_receive+0xb10>)
 8016ec6:	891b      	ldrh	r3, [r3, #8]
 8016ec8:	3b01      	subs	r3, #1
 8016eca:	b29a      	uxth	r2, r3
 8016ecc:	4b76      	ldr	r3, [pc, #472]	; (80170a8 <tcp_receive+0xb10>)
 8016ece:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8016ed0:	4b75      	ldr	r3, [pc, #468]	; (80170a8 <tcp_receive+0xb10>)
 8016ed2:	685b      	ldr	r3, [r3, #4]
 8016ed4:	4a74      	ldr	r2, [pc, #464]	; (80170a8 <tcp_receive+0xb10>)
 8016ed6:	8912      	ldrh	r2, [r2, #8]
 8016ed8:	4611      	mov	r1, r2
 8016eda:	4618      	mov	r0, r3
 8016edc:	f7fb fdd6 	bl	8012a8c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8016ee0:	4b71      	ldr	r3, [pc, #452]	; (80170a8 <tcp_receive+0xb10>)
 8016ee2:	891c      	ldrh	r4, [r3, #8]
 8016ee4:	4b70      	ldr	r3, [pc, #448]	; (80170a8 <tcp_receive+0xb10>)
 8016ee6:	68db      	ldr	r3, [r3, #12]
 8016ee8:	899b      	ldrh	r3, [r3, #12]
 8016eea:	b29b      	uxth	r3, r3
 8016eec:	4618      	mov	r0, r3
 8016eee:	f7fa fa9d 	bl	801142c <lwip_htons>
 8016ef2:	4603      	mov	r3, r0
 8016ef4:	b2db      	uxtb	r3, r3
 8016ef6:	f003 0303 	and.w	r3, r3, #3
 8016efa:	2b00      	cmp	r3, #0
 8016efc:	d001      	beq.n	8016f02 <tcp_receive+0x96a>
 8016efe:	2301      	movs	r3, #1
 8016f00:	e000      	b.n	8016f04 <tcp_receive+0x96c>
 8016f02:	2300      	movs	r3, #0
 8016f04:	4423      	add	r3, r4
 8016f06:	b29a      	uxth	r2, r3
 8016f08:	4b65      	ldr	r3, [pc, #404]	; (80170a0 <tcp_receive+0xb08>)
 8016f0a:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8016f0c:	4b64      	ldr	r3, [pc, #400]	; (80170a0 <tcp_receive+0xb08>)
 8016f0e:	881b      	ldrh	r3, [r3, #0]
 8016f10:	461a      	mov	r2, r3
 8016f12:	4b64      	ldr	r3, [pc, #400]	; (80170a4 <tcp_receive+0xb0c>)
 8016f14:	681b      	ldr	r3, [r3, #0]
 8016f16:	441a      	add	r2, r3
 8016f18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016f1a:	68db      	ldr	r3, [r3, #12]
 8016f1c:	685b      	ldr	r3, [r3, #4]
 8016f1e:	429a      	cmp	r2, r3
 8016f20:	d006      	beq.n	8016f30 <tcp_receive+0x998>
 8016f22:	4b62      	ldr	r3, [pc, #392]	; (80170ac <tcp_receive+0xb14>)
 8016f24:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8016f28:	4961      	ldr	r1, [pc, #388]	; (80170b0 <tcp_receive+0xb18>)
 8016f2a:	4862      	ldr	r0, [pc, #392]	; (80170b4 <tcp_receive+0xb1c>)
 8016f2c:	f009 fa90 	bl	8020450 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8016f30:	687b      	ldr	r3, [r7, #4]
 8016f32:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8016f34:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8016f36:	4b5a      	ldr	r3, [pc, #360]	; (80170a0 <tcp_receive+0xb08>)
 8016f38:	881b      	ldrh	r3, [r3, #0]
 8016f3a:	461a      	mov	r2, r3
 8016f3c:	4b59      	ldr	r3, [pc, #356]	; (80170a4 <tcp_receive+0xb0c>)
 8016f3e:	681b      	ldr	r3, [r3, #0]
 8016f40:	441a      	add	r2, r3
 8016f42:	687b      	ldr	r3, [r7, #4]
 8016f44:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8016f46:	687b      	ldr	r3, [r7, #4]
 8016f48:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8016f4a:	4b55      	ldr	r3, [pc, #340]	; (80170a0 <tcp_receive+0xb08>)
 8016f4c:	881b      	ldrh	r3, [r3, #0]
 8016f4e:	429a      	cmp	r2, r3
 8016f50:	d206      	bcs.n	8016f60 <tcp_receive+0x9c8>
 8016f52:	4b56      	ldr	r3, [pc, #344]	; (80170ac <tcp_receive+0xb14>)
 8016f54:	f240 6207 	movw	r2, #1543	; 0x607
 8016f58:	4957      	ldr	r1, [pc, #348]	; (80170b8 <tcp_receive+0xb20>)
 8016f5a:	4856      	ldr	r0, [pc, #344]	; (80170b4 <tcp_receive+0xb1c>)
 8016f5c:	f009 fa78 	bl	8020450 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8016f60:	687b      	ldr	r3, [r7, #4]
 8016f62:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8016f64:	4b4e      	ldr	r3, [pc, #312]	; (80170a0 <tcp_receive+0xb08>)
 8016f66:	881b      	ldrh	r3, [r3, #0]
 8016f68:	1ad3      	subs	r3, r2, r3
 8016f6a:	b29a      	uxth	r2, r3
 8016f6c:	687b      	ldr	r3, [r7, #4]
 8016f6e:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8016f70:	6878      	ldr	r0, [r7, #4]
 8016f72:	f7fc feb1 	bl	8013cd8 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8016f76:	4b4c      	ldr	r3, [pc, #304]	; (80170a8 <tcp_receive+0xb10>)
 8016f78:	685b      	ldr	r3, [r3, #4]
 8016f7a:	891b      	ldrh	r3, [r3, #8]
 8016f7c:	2b00      	cmp	r3, #0
 8016f7e:	d006      	beq.n	8016f8e <tcp_receive+0x9f6>
          recv_data = inseg.p;
 8016f80:	4b49      	ldr	r3, [pc, #292]	; (80170a8 <tcp_receive+0xb10>)
 8016f82:	685b      	ldr	r3, [r3, #4]
 8016f84:	4a4d      	ldr	r2, [pc, #308]	; (80170bc <tcp_receive+0xb24>)
 8016f86:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8016f88:	4b47      	ldr	r3, [pc, #284]	; (80170a8 <tcp_receive+0xb10>)
 8016f8a:	2200      	movs	r2, #0
 8016f8c:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8016f8e:	4b46      	ldr	r3, [pc, #280]	; (80170a8 <tcp_receive+0xb10>)
 8016f90:	68db      	ldr	r3, [r3, #12]
 8016f92:	899b      	ldrh	r3, [r3, #12]
 8016f94:	b29b      	uxth	r3, r3
 8016f96:	4618      	mov	r0, r3
 8016f98:	f7fa fa48 	bl	801142c <lwip_htons>
 8016f9c:	4603      	mov	r3, r0
 8016f9e:	b2db      	uxtb	r3, r3
 8016fa0:	f003 0301 	and.w	r3, r3, #1
 8016fa4:	2b00      	cmp	r3, #0
 8016fa6:	f000 80b8 	beq.w	801711a <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8016faa:	4b45      	ldr	r3, [pc, #276]	; (80170c0 <tcp_receive+0xb28>)
 8016fac:	781b      	ldrb	r3, [r3, #0]
 8016fae:	f043 0320 	orr.w	r3, r3, #32
 8016fb2:	b2da      	uxtb	r2, r3
 8016fb4:	4b42      	ldr	r3, [pc, #264]	; (80170c0 <tcp_receive+0xb28>)
 8016fb6:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8016fb8:	e0af      	b.n	801711a <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8016fba:	687b      	ldr	r3, [r7, #4]
 8016fbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016fbe:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8016fc0:	687b      	ldr	r3, [r7, #4]
 8016fc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016fc4:	68db      	ldr	r3, [r3, #12]
 8016fc6:	685b      	ldr	r3, [r3, #4]
 8016fc8:	4a36      	ldr	r2, [pc, #216]	; (80170a4 <tcp_receive+0xb0c>)
 8016fca:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8016fcc:	68bb      	ldr	r3, [r7, #8]
 8016fce:	891b      	ldrh	r3, [r3, #8]
 8016fd0:	461c      	mov	r4, r3
 8016fd2:	68bb      	ldr	r3, [r7, #8]
 8016fd4:	68db      	ldr	r3, [r3, #12]
 8016fd6:	899b      	ldrh	r3, [r3, #12]
 8016fd8:	b29b      	uxth	r3, r3
 8016fda:	4618      	mov	r0, r3
 8016fdc:	f7fa fa26 	bl	801142c <lwip_htons>
 8016fe0:	4603      	mov	r3, r0
 8016fe2:	b2db      	uxtb	r3, r3
 8016fe4:	f003 0303 	and.w	r3, r3, #3
 8016fe8:	2b00      	cmp	r3, #0
 8016fea:	d001      	beq.n	8016ff0 <tcp_receive+0xa58>
 8016fec:	2301      	movs	r3, #1
 8016fee:	e000      	b.n	8016ff2 <tcp_receive+0xa5a>
 8016ff0:	2300      	movs	r3, #0
 8016ff2:	191a      	adds	r2, r3, r4
 8016ff4:	687b      	ldr	r3, [r7, #4]
 8016ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016ff8:	441a      	add	r2, r3
 8016ffa:	687b      	ldr	r3, [r7, #4]
 8016ffc:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8016ffe:	687b      	ldr	r3, [r7, #4]
 8017000:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017002:	461c      	mov	r4, r3
 8017004:	68bb      	ldr	r3, [r7, #8]
 8017006:	891b      	ldrh	r3, [r3, #8]
 8017008:	461d      	mov	r5, r3
 801700a:	68bb      	ldr	r3, [r7, #8]
 801700c:	68db      	ldr	r3, [r3, #12]
 801700e:	899b      	ldrh	r3, [r3, #12]
 8017010:	b29b      	uxth	r3, r3
 8017012:	4618      	mov	r0, r3
 8017014:	f7fa fa0a 	bl	801142c <lwip_htons>
 8017018:	4603      	mov	r3, r0
 801701a:	b2db      	uxtb	r3, r3
 801701c:	f003 0303 	and.w	r3, r3, #3
 8017020:	2b00      	cmp	r3, #0
 8017022:	d001      	beq.n	8017028 <tcp_receive+0xa90>
 8017024:	2301      	movs	r3, #1
 8017026:	e000      	b.n	801702a <tcp_receive+0xa92>
 8017028:	2300      	movs	r3, #0
 801702a:	442b      	add	r3, r5
 801702c:	429c      	cmp	r4, r3
 801702e:	d206      	bcs.n	801703e <tcp_receive+0xaa6>
 8017030:	4b1e      	ldr	r3, [pc, #120]	; (80170ac <tcp_receive+0xb14>)
 8017032:	f240 622b 	movw	r2, #1579	; 0x62b
 8017036:	4923      	ldr	r1, [pc, #140]	; (80170c4 <tcp_receive+0xb2c>)
 8017038:	481e      	ldr	r0, [pc, #120]	; (80170b4 <tcp_receive+0xb1c>)
 801703a:	f009 fa09 	bl	8020450 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801703e:	68bb      	ldr	r3, [r7, #8]
 8017040:	891b      	ldrh	r3, [r3, #8]
 8017042:	461c      	mov	r4, r3
 8017044:	68bb      	ldr	r3, [r7, #8]
 8017046:	68db      	ldr	r3, [r3, #12]
 8017048:	899b      	ldrh	r3, [r3, #12]
 801704a:	b29b      	uxth	r3, r3
 801704c:	4618      	mov	r0, r3
 801704e:	f7fa f9ed 	bl	801142c <lwip_htons>
 8017052:	4603      	mov	r3, r0
 8017054:	b2db      	uxtb	r3, r3
 8017056:	f003 0303 	and.w	r3, r3, #3
 801705a:	2b00      	cmp	r3, #0
 801705c:	d001      	beq.n	8017062 <tcp_receive+0xaca>
 801705e:	2301      	movs	r3, #1
 8017060:	e000      	b.n	8017064 <tcp_receive+0xacc>
 8017062:	2300      	movs	r3, #0
 8017064:	1919      	adds	r1, r3, r4
 8017066:	687b      	ldr	r3, [r7, #4]
 8017068:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801706a:	b28b      	uxth	r3, r1
 801706c:	1ad3      	subs	r3, r2, r3
 801706e:	b29a      	uxth	r2, r3
 8017070:	687b      	ldr	r3, [r7, #4]
 8017072:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8017074:	6878      	ldr	r0, [r7, #4]
 8017076:	f7fc fe2f 	bl	8013cd8 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 801707a:	68bb      	ldr	r3, [r7, #8]
 801707c:	685b      	ldr	r3, [r3, #4]
 801707e:	891b      	ldrh	r3, [r3, #8]
 8017080:	2b00      	cmp	r3, #0
 8017082:	d028      	beq.n	80170d6 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8017084:	4b0d      	ldr	r3, [pc, #52]	; (80170bc <tcp_receive+0xb24>)
 8017086:	681b      	ldr	r3, [r3, #0]
 8017088:	2b00      	cmp	r3, #0
 801708a:	d01d      	beq.n	80170c8 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 801708c:	4b0b      	ldr	r3, [pc, #44]	; (80170bc <tcp_receive+0xb24>)
 801708e:	681a      	ldr	r2, [r3, #0]
 8017090:	68bb      	ldr	r3, [r7, #8]
 8017092:	685b      	ldr	r3, [r3, #4]
 8017094:	4619      	mov	r1, r3
 8017096:	4610      	mov	r0, r2
 8017098:	f7fb ff7e 	bl	8012f98 <pbuf_cat>
 801709c:	e018      	b.n	80170d0 <tcp_receive+0xb38>
 801709e:	bf00      	nop
 80170a0:	24007e1a 	.word	0x24007e1a
 80170a4:	24007e10 	.word	0x24007e10
 80170a8:	24007df0 	.word	0x24007df0
 80170ac:	0802538c 	.word	0x0802538c
 80170b0:	0802576c 	.word	0x0802576c
 80170b4:	080253d8 	.word	0x080253d8
 80170b8:	080257a8 	.word	0x080257a8
 80170bc:	24007e20 	.word	0x24007e20
 80170c0:	24007e1d 	.word	0x24007e1d
 80170c4:	080257c8 	.word	0x080257c8
            } else {
              recv_data = cseg->p;
 80170c8:	68bb      	ldr	r3, [r7, #8]
 80170ca:	685b      	ldr	r3, [r3, #4]
 80170cc:	4a70      	ldr	r2, [pc, #448]	; (8017290 <tcp_receive+0xcf8>)
 80170ce:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 80170d0:	68bb      	ldr	r3, [r7, #8]
 80170d2:	2200      	movs	r2, #0
 80170d4:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80170d6:	68bb      	ldr	r3, [r7, #8]
 80170d8:	68db      	ldr	r3, [r3, #12]
 80170da:	899b      	ldrh	r3, [r3, #12]
 80170dc:	b29b      	uxth	r3, r3
 80170de:	4618      	mov	r0, r3
 80170e0:	f7fa f9a4 	bl	801142c <lwip_htons>
 80170e4:	4603      	mov	r3, r0
 80170e6:	b2db      	uxtb	r3, r3
 80170e8:	f003 0301 	and.w	r3, r3, #1
 80170ec:	2b00      	cmp	r3, #0
 80170ee:	d00d      	beq.n	801710c <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 80170f0:	4b68      	ldr	r3, [pc, #416]	; (8017294 <tcp_receive+0xcfc>)
 80170f2:	781b      	ldrb	r3, [r3, #0]
 80170f4:	f043 0320 	orr.w	r3, r3, #32
 80170f8:	b2da      	uxtb	r2, r3
 80170fa:	4b66      	ldr	r3, [pc, #408]	; (8017294 <tcp_receive+0xcfc>)
 80170fc:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 80170fe:	687b      	ldr	r3, [r7, #4]
 8017100:	7d1b      	ldrb	r3, [r3, #20]
 8017102:	2b04      	cmp	r3, #4
 8017104:	d102      	bne.n	801710c <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 8017106:	687b      	ldr	r3, [r7, #4]
 8017108:	2207      	movs	r2, #7
 801710a:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 801710c:	68bb      	ldr	r3, [r7, #8]
 801710e:	681a      	ldr	r2, [r3, #0]
 8017110:	687b      	ldr	r3, [r7, #4]
 8017112:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8017114:	68b8      	ldr	r0, [r7, #8]
 8017116:	f7fd fb04 	bl	8014722 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 801711a:	687b      	ldr	r3, [r7, #4]
 801711c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801711e:	2b00      	cmp	r3, #0
 8017120:	d008      	beq.n	8017134 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8017122:	687b      	ldr	r3, [r7, #4]
 8017124:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017126:	68db      	ldr	r3, [r3, #12]
 8017128:	685a      	ldr	r2, [r3, #4]
 801712a:	687b      	ldr	r3, [r7, #4]
 801712c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 801712e:	429a      	cmp	r2, r3
 8017130:	f43f af43 	beq.w	8016fba <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8017134:	687b      	ldr	r3, [r7, #4]
 8017136:	8b5b      	ldrh	r3, [r3, #26]
 8017138:	f003 0301 	and.w	r3, r3, #1
 801713c:	2b00      	cmp	r3, #0
 801713e:	d00e      	beq.n	801715e <tcp_receive+0xbc6>
 8017140:	687b      	ldr	r3, [r7, #4]
 8017142:	8b5b      	ldrh	r3, [r3, #26]
 8017144:	f023 0301 	bic.w	r3, r3, #1
 8017148:	b29a      	uxth	r2, r3
 801714a:	687b      	ldr	r3, [r7, #4]
 801714c:	835a      	strh	r2, [r3, #26]
 801714e:	687b      	ldr	r3, [r7, #4]
 8017150:	8b5b      	ldrh	r3, [r3, #26]
 8017152:	f043 0302 	orr.w	r3, r3, #2
 8017156:	b29a      	uxth	r2, r3
 8017158:	687b      	ldr	r3, [r7, #4]
 801715a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801715c:	e188      	b.n	8017470 <tcp_receive+0xed8>
        tcp_ack(pcb);
 801715e:	687b      	ldr	r3, [r7, #4]
 8017160:	8b5b      	ldrh	r3, [r3, #26]
 8017162:	f043 0301 	orr.w	r3, r3, #1
 8017166:	b29a      	uxth	r2, r3
 8017168:	687b      	ldr	r3, [r7, #4]
 801716a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801716c:	e180      	b.n	8017470 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 801716e:	687b      	ldr	r3, [r7, #4]
 8017170:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017172:	2b00      	cmp	r3, #0
 8017174:	d106      	bne.n	8017184 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8017176:	4848      	ldr	r0, [pc, #288]	; (8017298 <tcp_receive+0xd00>)
 8017178:	f7fd faec 	bl	8014754 <tcp_seg_copy>
 801717c:	4602      	mov	r2, r0
 801717e:	687b      	ldr	r3, [r7, #4]
 8017180:	675a      	str	r2, [r3, #116]	; 0x74
 8017182:	e16d      	b.n	8017460 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8017184:	2300      	movs	r3, #0
 8017186:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8017188:	687b      	ldr	r3, [r7, #4]
 801718a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801718c:	63bb      	str	r3, [r7, #56]	; 0x38
 801718e:	e157      	b.n	8017440 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 8017190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017192:	68db      	ldr	r3, [r3, #12]
 8017194:	685a      	ldr	r2, [r3, #4]
 8017196:	4b41      	ldr	r3, [pc, #260]	; (801729c <tcp_receive+0xd04>)
 8017198:	681b      	ldr	r3, [r3, #0]
 801719a:	429a      	cmp	r2, r3
 801719c:	d11d      	bne.n	80171da <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 801719e:	4b3e      	ldr	r3, [pc, #248]	; (8017298 <tcp_receive+0xd00>)
 80171a0:	891a      	ldrh	r2, [r3, #8]
 80171a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80171a4:	891b      	ldrh	r3, [r3, #8]
 80171a6:	429a      	cmp	r2, r3
 80171a8:	f240 814f 	bls.w	801744a <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80171ac:	483a      	ldr	r0, [pc, #232]	; (8017298 <tcp_receive+0xd00>)
 80171ae:	f7fd fad1 	bl	8014754 <tcp_seg_copy>
 80171b2:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 80171b4:	697b      	ldr	r3, [r7, #20]
 80171b6:	2b00      	cmp	r3, #0
 80171b8:	f000 8149 	beq.w	801744e <tcp_receive+0xeb6>
                  if (prev != NULL) {
 80171bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80171be:	2b00      	cmp	r3, #0
 80171c0:	d003      	beq.n	80171ca <tcp_receive+0xc32>
                    prev->next = cseg;
 80171c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80171c4:	697a      	ldr	r2, [r7, #20]
 80171c6:	601a      	str	r2, [r3, #0]
 80171c8:	e002      	b.n	80171d0 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 80171ca:	687b      	ldr	r3, [r7, #4]
 80171cc:	697a      	ldr	r2, [r7, #20]
 80171ce:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 80171d0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80171d2:	6978      	ldr	r0, [r7, #20]
 80171d4:	f7ff f8dc 	bl	8016390 <tcp_oos_insert_segment>
                }
                break;
 80171d8:	e139      	b.n	801744e <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 80171da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80171dc:	2b00      	cmp	r3, #0
 80171de:	d117      	bne.n	8017210 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 80171e0:	4b2e      	ldr	r3, [pc, #184]	; (801729c <tcp_receive+0xd04>)
 80171e2:	681a      	ldr	r2, [r3, #0]
 80171e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80171e6:	68db      	ldr	r3, [r3, #12]
 80171e8:	685b      	ldr	r3, [r3, #4]
 80171ea:	1ad3      	subs	r3, r2, r3
 80171ec:	2b00      	cmp	r3, #0
 80171ee:	da57      	bge.n	80172a0 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80171f0:	4829      	ldr	r0, [pc, #164]	; (8017298 <tcp_receive+0xd00>)
 80171f2:	f7fd faaf 	bl	8014754 <tcp_seg_copy>
 80171f6:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 80171f8:	69bb      	ldr	r3, [r7, #24]
 80171fa:	2b00      	cmp	r3, #0
 80171fc:	f000 8129 	beq.w	8017452 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 8017200:	687b      	ldr	r3, [r7, #4]
 8017202:	69ba      	ldr	r2, [r7, #24]
 8017204:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8017206:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8017208:	69b8      	ldr	r0, [r7, #24]
 801720a:	f7ff f8c1 	bl	8016390 <tcp_oos_insert_segment>
                  }
                  break;
 801720e:	e120      	b.n	8017452 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8017210:	4b22      	ldr	r3, [pc, #136]	; (801729c <tcp_receive+0xd04>)
 8017212:	681a      	ldr	r2, [r3, #0]
 8017214:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017216:	68db      	ldr	r3, [r3, #12]
 8017218:	685b      	ldr	r3, [r3, #4]
 801721a:	1ad3      	subs	r3, r2, r3
 801721c:	3b01      	subs	r3, #1
 801721e:	2b00      	cmp	r3, #0
 8017220:	db3e      	blt.n	80172a0 <tcp_receive+0xd08>
 8017222:	4b1e      	ldr	r3, [pc, #120]	; (801729c <tcp_receive+0xd04>)
 8017224:	681a      	ldr	r2, [r3, #0]
 8017226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017228:	68db      	ldr	r3, [r3, #12]
 801722a:	685b      	ldr	r3, [r3, #4]
 801722c:	1ad3      	subs	r3, r2, r3
 801722e:	3301      	adds	r3, #1
 8017230:	2b00      	cmp	r3, #0
 8017232:	dc35      	bgt.n	80172a0 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8017234:	4818      	ldr	r0, [pc, #96]	; (8017298 <tcp_receive+0xd00>)
 8017236:	f7fd fa8d 	bl	8014754 <tcp_seg_copy>
 801723a:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 801723c:	69fb      	ldr	r3, [r7, #28]
 801723e:	2b00      	cmp	r3, #0
 8017240:	f000 8109 	beq.w	8017456 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8017244:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017246:	68db      	ldr	r3, [r3, #12]
 8017248:	685b      	ldr	r3, [r3, #4]
 801724a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801724c:	8912      	ldrh	r2, [r2, #8]
 801724e:	441a      	add	r2, r3
 8017250:	4b12      	ldr	r3, [pc, #72]	; (801729c <tcp_receive+0xd04>)
 8017252:	681b      	ldr	r3, [r3, #0]
 8017254:	1ad3      	subs	r3, r2, r3
 8017256:	2b00      	cmp	r3, #0
 8017258:	dd12      	ble.n	8017280 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801725a:	4b10      	ldr	r3, [pc, #64]	; (801729c <tcp_receive+0xd04>)
 801725c:	681b      	ldr	r3, [r3, #0]
 801725e:	b29a      	uxth	r2, r3
 8017260:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017262:	68db      	ldr	r3, [r3, #12]
 8017264:	685b      	ldr	r3, [r3, #4]
 8017266:	b29b      	uxth	r3, r3
 8017268:	1ad3      	subs	r3, r2, r3
 801726a:	b29a      	uxth	r2, r3
 801726c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801726e:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8017270:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017272:	685a      	ldr	r2, [r3, #4]
 8017274:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017276:	891b      	ldrh	r3, [r3, #8]
 8017278:	4619      	mov	r1, r3
 801727a:	4610      	mov	r0, r2
 801727c:	f7fb fc06 	bl	8012a8c <pbuf_realloc>
                    }
                    prev->next = cseg;
 8017280:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017282:	69fa      	ldr	r2, [r7, #28]
 8017284:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8017286:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8017288:	69f8      	ldr	r0, [r7, #28]
 801728a:	f7ff f881 	bl	8016390 <tcp_oos_insert_segment>
                  }
                  break;
 801728e:	e0e2      	b.n	8017456 <tcp_receive+0xebe>
 8017290:	24007e20 	.word	0x24007e20
 8017294:	24007e1d 	.word	0x24007e1d
 8017298:	24007df0 	.word	0x24007df0
 801729c:	24007e10 	.word	0x24007e10
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 80172a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80172a2:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 80172a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80172a6:	681b      	ldr	r3, [r3, #0]
 80172a8:	2b00      	cmp	r3, #0
 80172aa:	f040 80c6 	bne.w	801743a <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 80172ae:	4b80      	ldr	r3, [pc, #512]	; (80174b0 <tcp_receive+0xf18>)
 80172b0:	681a      	ldr	r2, [r3, #0]
 80172b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80172b4:	68db      	ldr	r3, [r3, #12]
 80172b6:	685b      	ldr	r3, [r3, #4]
 80172b8:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 80172ba:	2b00      	cmp	r3, #0
 80172bc:	f340 80bd 	ble.w	801743a <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80172c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80172c2:	68db      	ldr	r3, [r3, #12]
 80172c4:	899b      	ldrh	r3, [r3, #12]
 80172c6:	b29b      	uxth	r3, r3
 80172c8:	4618      	mov	r0, r3
 80172ca:	f7fa f8af 	bl	801142c <lwip_htons>
 80172ce:	4603      	mov	r3, r0
 80172d0:	b2db      	uxtb	r3, r3
 80172d2:	f003 0301 	and.w	r3, r3, #1
 80172d6:	2b00      	cmp	r3, #0
 80172d8:	f040 80bf 	bne.w	801745a <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 80172dc:	4875      	ldr	r0, [pc, #468]	; (80174b4 <tcp_receive+0xf1c>)
 80172de:	f7fd fa39 	bl	8014754 <tcp_seg_copy>
 80172e2:	4602      	mov	r2, r0
 80172e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80172e6:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 80172e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80172ea:	681b      	ldr	r3, [r3, #0]
 80172ec:	2b00      	cmp	r3, #0
 80172ee:	f000 80b6 	beq.w	801745e <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 80172f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80172f4:	68db      	ldr	r3, [r3, #12]
 80172f6:	685b      	ldr	r3, [r3, #4]
 80172f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80172fa:	8912      	ldrh	r2, [r2, #8]
 80172fc:	441a      	add	r2, r3
 80172fe:	4b6c      	ldr	r3, [pc, #432]	; (80174b0 <tcp_receive+0xf18>)
 8017300:	681b      	ldr	r3, [r3, #0]
 8017302:	1ad3      	subs	r3, r2, r3
 8017304:	2b00      	cmp	r3, #0
 8017306:	dd12      	ble.n	801732e <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8017308:	4b69      	ldr	r3, [pc, #420]	; (80174b0 <tcp_receive+0xf18>)
 801730a:	681b      	ldr	r3, [r3, #0]
 801730c:	b29a      	uxth	r2, r3
 801730e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017310:	68db      	ldr	r3, [r3, #12]
 8017312:	685b      	ldr	r3, [r3, #4]
 8017314:	b29b      	uxth	r3, r3
 8017316:	1ad3      	subs	r3, r2, r3
 8017318:	b29a      	uxth	r2, r3
 801731a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801731c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 801731e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017320:	685a      	ldr	r2, [r3, #4]
 8017322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017324:	891b      	ldrh	r3, [r3, #8]
 8017326:	4619      	mov	r1, r3
 8017328:	4610      	mov	r0, r2
 801732a:	f7fb fbaf 	bl	8012a8c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 801732e:	4b62      	ldr	r3, [pc, #392]	; (80174b8 <tcp_receive+0xf20>)
 8017330:	881b      	ldrh	r3, [r3, #0]
 8017332:	461a      	mov	r2, r3
 8017334:	4b5e      	ldr	r3, [pc, #376]	; (80174b0 <tcp_receive+0xf18>)
 8017336:	681b      	ldr	r3, [r3, #0]
 8017338:	441a      	add	r2, r3
 801733a:	687b      	ldr	r3, [r7, #4]
 801733c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801733e:	6879      	ldr	r1, [r7, #4]
 8017340:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8017342:	440b      	add	r3, r1
 8017344:	1ad3      	subs	r3, r2, r3
 8017346:	2b00      	cmp	r3, #0
 8017348:	f340 8089 	ble.w	801745e <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 801734c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801734e:	681b      	ldr	r3, [r3, #0]
 8017350:	68db      	ldr	r3, [r3, #12]
 8017352:	899b      	ldrh	r3, [r3, #12]
 8017354:	b29b      	uxth	r3, r3
 8017356:	4618      	mov	r0, r3
 8017358:	f7fa f868 	bl	801142c <lwip_htons>
 801735c:	4603      	mov	r3, r0
 801735e:	b2db      	uxtb	r3, r3
 8017360:	f003 0301 	and.w	r3, r3, #1
 8017364:	2b00      	cmp	r3, #0
 8017366:	d022      	beq.n	80173ae <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8017368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801736a:	681b      	ldr	r3, [r3, #0]
 801736c:	68db      	ldr	r3, [r3, #12]
 801736e:	899b      	ldrh	r3, [r3, #12]
 8017370:	b29b      	uxth	r3, r3
 8017372:	b21b      	sxth	r3, r3
 8017374:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8017378:	b21c      	sxth	r4, r3
 801737a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801737c:	681b      	ldr	r3, [r3, #0]
 801737e:	68db      	ldr	r3, [r3, #12]
 8017380:	899b      	ldrh	r3, [r3, #12]
 8017382:	b29b      	uxth	r3, r3
 8017384:	4618      	mov	r0, r3
 8017386:	f7fa f851 	bl	801142c <lwip_htons>
 801738a:	4603      	mov	r3, r0
 801738c:	b2db      	uxtb	r3, r3
 801738e:	b29b      	uxth	r3, r3
 8017390:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8017394:	b29b      	uxth	r3, r3
 8017396:	4618      	mov	r0, r3
 8017398:	f7fa f848 	bl	801142c <lwip_htons>
 801739c:	4603      	mov	r3, r0
 801739e:	b21b      	sxth	r3, r3
 80173a0:	4323      	orrs	r3, r4
 80173a2:	b21a      	sxth	r2, r3
 80173a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80173a6:	681b      	ldr	r3, [r3, #0]
 80173a8:	68db      	ldr	r3, [r3, #12]
 80173aa:	b292      	uxth	r2, r2
 80173ac:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 80173ae:	687b      	ldr	r3, [r7, #4]
 80173b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80173b2:	b29a      	uxth	r2, r3
 80173b4:	687b      	ldr	r3, [r7, #4]
 80173b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80173b8:	4413      	add	r3, r2
 80173ba:	b299      	uxth	r1, r3
 80173bc:	4b3c      	ldr	r3, [pc, #240]	; (80174b0 <tcp_receive+0xf18>)
 80173be:	681b      	ldr	r3, [r3, #0]
 80173c0:	b29a      	uxth	r2, r3
 80173c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80173c4:	681b      	ldr	r3, [r3, #0]
 80173c6:	1a8a      	subs	r2, r1, r2
 80173c8:	b292      	uxth	r2, r2
 80173ca:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 80173cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80173ce:	681b      	ldr	r3, [r3, #0]
 80173d0:	685a      	ldr	r2, [r3, #4]
 80173d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80173d4:	681b      	ldr	r3, [r3, #0]
 80173d6:	891b      	ldrh	r3, [r3, #8]
 80173d8:	4619      	mov	r1, r3
 80173da:	4610      	mov	r0, r2
 80173dc:	f7fb fb56 	bl	8012a8c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 80173e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80173e2:	681b      	ldr	r3, [r3, #0]
 80173e4:	891c      	ldrh	r4, [r3, #8]
 80173e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80173e8:	681b      	ldr	r3, [r3, #0]
 80173ea:	68db      	ldr	r3, [r3, #12]
 80173ec:	899b      	ldrh	r3, [r3, #12]
 80173ee:	b29b      	uxth	r3, r3
 80173f0:	4618      	mov	r0, r3
 80173f2:	f7fa f81b 	bl	801142c <lwip_htons>
 80173f6:	4603      	mov	r3, r0
 80173f8:	b2db      	uxtb	r3, r3
 80173fa:	f003 0303 	and.w	r3, r3, #3
 80173fe:	2b00      	cmp	r3, #0
 8017400:	d001      	beq.n	8017406 <tcp_receive+0xe6e>
 8017402:	2301      	movs	r3, #1
 8017404:	e000      	b.n	8017408 <tcp_receive+0xe70>
 8017406:	2300      	movs	r3, #0
 8017408:	4423      	add	r3, r4
 801740a:	b29a      	uxth	r2, r3
 801740c:	4b2a      	ldr	r3, [pc, #168]	; (80174b8 <tcp_receive+0xf20>)
 801740e:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8017410:	4b29      	ldr	r3, [pc, #164]	; (80174b8 <tcp_receive+0xf20>)
 8017412:	881b      	ldrh	r3, [r3, #0]
 8017414:	461a      	mov	r2, r3
 8017416:	4b26      	ldr	r3, [pc, #152]	; (80174b0 <tcp_receive+0xf18>)
 8017418:	681b      	ldr	r3, [r3, #0]
 801741a:	441a      	add	r2, r3
 801741c:	687b      	ldr	r3, [r7, #4]
 801741e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017420:	6879      	ldr	r1, [r7, #4]
 8017422:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8017424:	440b      	add	r3, r1
 8017426:	429a      	cmp	r2, r3
 8017428:	d019      	beq.n	801745e <tcp_receive+0xec6>
 801742a:	4b24      	ldr	r3, [pc, #144]	; (80174bc <tcp_receive+0xf24>)
 801742c:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8017430:	4923      	ldr	r1, [pc, #140]	; (80174c0 <tcp_receive+0xf28>)
 8017432:	4824      	ldr	r0, [pc, #144]	; (80174c4 <tcp_receive+0xf2c>)
 8017434:	f009 f80c 	bl	8020450 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8017438:	e011      	b.n	801745e <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801743a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801743c:	681b      	ldr	r3, [r3, #0]
 801743e:	63bb      	str	r3, [r7, #56]	; 0x38
 8017440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017442:	2b00      	cmp	r3, #0
 8017444:	f47f aea4 	bne.w	8017190 <tcp_receive+0xbf8>
 8017448:	e00a      	b.n	8017460 <tcp_receive+0xec8>
                break;
 801744a:	bf00      	nop
 801744c:	e008      	b.n	8017460 <tcp_receive+0xec8>
                break;
 801744e:	bf00      	nop
 8017450:	e006      	b.n	8017460 <tcp_receive+0xec8>
                  break;
 8017452:	bf00      	nop
 8017454:	e004      	b.n	8017460 <tcp_receive+0xec8>
                  break;
 8017456:	bf00      	nop
 8017458:	e002      	b.n	8017460 <tcp_receive+0xec8>
                  break;
 801745a:	bf00      	nop
 801745c:	e000      	b.n	8017460 <tcp_receive+0xec8>
                break;
 801745e:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8017460:	6878      	ldr	r0, [r7, #4]
 8017462:	f001 fe8b 	bl	801917c <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8017466:	e003      	b.n	8017470 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8017468:	6878      	ldr	r0, [r7, #4]
 801746a:	f001 fe87 	bl	801917c <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801746e:	e01a      	b.n	80174a6 <tcp_receive+0xf0e>
 8017470:	e019      	b.n	80174a6 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8017472:	4b0f      	ldr	r3, [pc, #60]	; (80174b0 <tcp_receive+0xf18>)
 8017474:	681a      	ldr	r2, [r3, #0]
 8017476:	687b      	ldr	r3, [r7, #4]
 8017478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801747a:	1ad3      	subs	r3, r2, r3
 801747c:	2b00      	cmp	r3, #0
 801747e:	db0a      	blt.n	8017496 <tcp_receive+0xefe>
 8017480:	4b0b      	ldr	r3, [pc, #44]	; (80174b0 <tcp_receive+0xf18>)
 8017482:	681a      	ldr	r2, [r3, #0]
 8017484:	687b      	ldr	r3, [r7, #4]
 8017486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017488:	6879      	ldr	r1, [r7, #4]
 801748a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801748c:	440b      	add	r3, r1
 801748e:	1ad3      	subs	r3, r2, r3
 8017490:	3301      	adds	r3, #1
 8017492:	2b00      	cmp	r3, #0
 8017494:	dd07      	ble.n	80174a6 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 8017496:	687b      	ldr	r3, [r7, #4]
 8017498:	8b5b      	ldrh	r3, [r3, #26]
 801749a:	f043 0302 	orr.w	r3, r3, #2
 801749e:	b29a      	uxth	r2, r3
 80174a0:	687b      	ldr	r3, [r7, #4]
 80174a2:	835a      	strh	r2, [r3, #26]
    }
  }
}
 80174a4:	e7ff      	b.n	80174a6 <tcp_receive+0xf0e>
 80174a6:	bf00      	nop
 80174a8:	3750      	adds	r7, #80	; 0x50
 80174aa:	46bd      	mov	sp, r7
 80174ac:	bdb0      	pop	{r4, r5, r7, pc}
 80174ae:	bf00      	nop
 80174b0:	24007e10 	.word	0x24007e10
 80174b4:	24007df0 	.word	0x24007df0
 80174b8:	24007e1a 	.word	0x24007e1a
 80174bc:	0802538c 	.word	0x0802538c
 80174c0:	08025734 	.word	0x08025734
 80174c4:	080253d8 	.word	0x080253d8

080174c8 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 80174c8:	b480      	push	{r7}
 80174ca:	b083      	sub	sp, #12
 80174cc:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 80174ce:	4b15      	ldr	r3, [pc, #84]	; (8017524 <tcp_get_next_optbyte+0x5c>)
 80174d0:	881b      	ldrh	r3, [r3, #0]
 80174d2:	1c5a      	adds	r2, r3, #1
 80174d4:	b291      	uxth	r1, r2
 80174d6:	4a13      	ldr	r2, [pc, #76]	; (8017524 <tcp_get_next_optbyte+0x5c>)
 80174d8:	8011      	strh	r1, [r2, #0]
 80174da:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 80174dc:	4b12      	ldr	r3, [pc, #72]	; (8017528 <tcp_get_next_optbyte+0x60>)
 80174de:	681b      	ldr	r3, [r3, #0]
 80174e0:	2b00      	cmp	r3, #0
 80174e2:	d004      	beq.n	80174ee <tcp_get_next_optbyte+0x26>
 80174e4:	4b11      	ldr	r3, [pc, #68]	; (801752c <tcp_get_next_optbyte+0x64>)
 80174e6:	881b      	ldrh	r3, [r3, #0]
 80174e8:	88fa      	ldrh	r2, [r7, #6]
 80174ea:	429a      	cmp	r2, r3
 80174ec:	d208      	bcs.n	8017500 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 80174ee:	4b10      	ldr	r3, [pc, #64]	; (8017530 <tcp_get_next_optbyte+0x68>)
 80174f0:	681b      	ldr	r3, [r3, #0]
 80174f2:	3314      	adds	r3, #20
 80174f4:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 80174f6:	88fb      	ldrh	r3, [r7, #6]
 80174f8:	683a      	ldr	r2, [r7, #0]
 80174fa:	4413      	add	r3, r2
 80174fc:	781b      	ldrb	r3, [r3, #0]
 80174fe:	e00b      	b.n	8017518 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8017500:	88fb      	ldrh	r3, [r7, #6]
 8017502:	b2da      	uxtb	r2, r3
 8017504:	4b09      	ldr	r3, [pc, #36]	; (801752c <tcp_get_next_optbyte+0x64>)
 8017506:	881b      	ldrh	r3, [r3, #0]
 8017508:	b2db      	uxtb	r3, r3
 801750a:	1ad3      	subs	r3, r2, r3
 801750c:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 801750e:	4b06      	ldr	r3, [pc, #24]	; (8017528 <tcp_get_next_optbyte+0x60>)
 8017510:	681a      	ldr	r2, [r3, #0]
 8017512:	797b      	ldrb	r3, [r7, #5]
 8017514:	4413      	add	r3, r2
 8017516:	781b      	ldrb	r3, [r3, #0]
  }
}
 8017518:	4618      	mov	r0, r3
 801751a:	370c      	adds	r7, #12
 801751c:	46bd      	mov	sp, r7
 801751e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017522:	4770      	bx	lr
 8017524:	24007e0c 	.word	0x24007e0c
 8017528:	24007e08 	.word	0x24007e08
 801752c:	24007e06 	.word	0x24007e06
 8017530:	24007e00 	.word	0x24007e00

08017534 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8017534:	b580      	push	{r7, lr}
 8017536:	b084      	sub	sp, #16
 8017538:	af00      	add	r7, sp, #0
 801753a:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 801753c:	687b      	ldr	r3, [r7, #4]
 801753e:	2b00      	cmp	r3, #0
 8017540:	d106      	bne.n	8017550 <tcp_parseopt+0x1c>
 8017542:	4b32      	ldr	r3, [pc, #200]	; (801760c <tcp_parseopt+0xd8>)
 8017544:	f240 727d 	movw	r2, #1917	; 0x77d
 8017548:	4931      	ldr	r1, [pc, #196]	; (8017610 <tcp_parseopt+0xdc>)
 801754a:	4832      	ldr	r0, [pc, #200]	; (8017614 <tcp_parseopt+0xe0>)
 801754c:	f008 ff80 	bl	8020450 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8017550:	4b31      	ldr	r3, [pc, #196]	; (8017618 <tcp_parseopt+0xe4>)
 8017552:	881b      	ldrh	r3, [r3, #0]
 8017554:	2b00      	cmp	r3, #0
 8017556:	d055      	beq.n	8017604 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8017558:	4b30      	ldr	r3, [pc, #192]	; (801761c <tcp_parseopt+0xe8>)
 801755a:	2200      	movs	r2, #0
 801755c:	801a      	strh	r2, [r3, #0]
 801755e:	e045      	b.n	80175ec <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8017560:	f7ff ffb2 	bl	80174c8 <tcp_get_next_optbyte>
 8017564:	4603      	mov	r3, r0
 8017566:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8017568:	7bfb      	ldrb	r3, [r7, #15]
 801756a:	2b02      	cmp	r3, #2
 801756c:	d006      	beq.n	801757c <tcp_parseopt+0x48>
 801756e:	2b02      	cmp	r3, #2
 8017570:	dc2b      	bgt.n	80175ca <tcp_parseopt+0x96>
 8017572:	2b00      	cmp	r3, #0
 8017574:	d041      	beq.n	80175fa <tcp_parseopt+0xc6>
 8017576:	2b01      	cmp	r3, #1
 8017578:	d127      	bne.n	80175ca <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 801757a:	e037      	b.n	80175ec <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 801757c:	f7ff ffa4 	bl	80174c8 <tcp_get_next_optbyte>
 8017580:	4603      	mov	r3, r0
 8017582:	2b04      	cmp	r3, #4
 8017584:	d13b      	bne.n	80175fe <tcp_parseopt+0xca>
 8017586:	4b25      	ldr	r3, [pc, #148]	; (801761c <tcp_parseopt+0xe8>)
 8017588:	881b      	ldrh	r3, [r3, #0]
 801758a:	3301      	adds	r3, #1
 801758c:	4a22      	ldr	r2, [pc, #136]	; (8017618 <tcp_parseopt+0xe4>)
 801758e:	8812      	ldrh	r2, [r2, #0]
 8017590:	4293      	cmp	r3, r2
 8017592:	da34      	bge.n	80175fe <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8017594:	f7ff ff98 	bl	80174c8 <tcp_get_next_optbyte>
 8017598:	4603      	mov	r3, r0
 801759a:	b29b      	uxth	r3, r3
 801759c:	021b      	lsls	r3, r3, #8
 801759e:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 80175a0:	f7ff ff92 	bl	80174c8 <tcp_get_next_optbyte>
 80175a4:	4603      	mov	r3, r0
 80175a6:	b29a      	uxth	r2, r3
 80175a8:	89bb      	ldrh	r3, [r7, #12]
 80175aa:	4313      	orrs	r3, r2
 80175ac:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 80175ae:	89bb      	ldrh	r3, [r7, #12]
 80175b0:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 80175b4:	d804      	bhi.n	80175c0 <tcp_parseopt+0x8c>
 80175b6:	89bb      	ldrh	r3, [r7, #12]
 80175b8:	2b00      	cmp	r3, #0
 80175ba:	d001      	beq.n	80175c0 <tcp_parseopt+0x8c>
 80175bc:	89ba      	ldrh	r2, [r7, #12]
 80175be:	e001      	b.n	80175c4 <tcp_parseopt+0x90>
 80175c0:	f44f 7206 	mov.w	r2, #536	; 0x218
 80175c4:	687b      	ldr	r3, [r7, #4]
 80175c6:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 80175c8:	e010      	b.n	80175ec <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 80175ca:	f7ff ff7d 	bl	80174c8 <tcp_get_next_optbyte>
 80175ce:	4603      	mov	r3, r0
 80175d0:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 80175d2:	7afb      	ldrb	r3, [r7, #11]
 80175d4:	2b01      	cmp	r3, #1
 80175d6:	d914      	bls.n	8017602 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 80175d8:	7afb      	ldrb	r3, [r7, #11]
 80175da:	b29a      	uxth	r2, r3
 80175dc:	4b0f      	ldr	r3, [pc, #60]	; (801761c <tcp_parseopt+0xe8>)
 80175de:	881b      	ldrh	r3, [r3, #0]
 80175e0:	4413      	add	r3, r2
 80175e2:	b29b      	uxth	r3, r3
 80175e4:	3b02      	subs	r3, #2
 80175e6:	b29a      	uxth	r2, r3
 80175e8:	4b0c      	ldr	r3, [pc, #48]	; (801761c <tcp_parseopt+0xe8>)
 80175ea:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80175ec:	4b0b      	ldr	r3, [pc, #44]	; (801761c <tcp_parseopt+0xe8>)
 80175ee:	881a      	ldrh	r2, [r3, #0]
 80175f0:	4b09      	ldr	r3, [pc, #36]	; (8017618 <tcp_parseopt+0xe4>)
 80175f2:	881b      	ldrh	r3, [r3, #0]
 80175f4:	429a      	cmp	r2, r3
 80175f6:	d3b3      	bcc.n	8017560 <tcp_parseopt+0x2c>
 80175f8:	e004      	b.n	8017604 <tcp_parseopt+0xd0>
          return;
 80175fa:	bf00      	nop
 80175fc:	e002      	b.n	8017604 <tcp_parseopt+0xd0>
            return;
 80175fe:	bf00      	nop
 8017600:	e000      	b.n	8017604 <tcp_parseopt+0xd0>
            return;
 8017602:	bf00      	nop
      }
    }
  }
}
 8017604:	3710      	adds	r7, #16
 8017606:	46bd      	mov	sp, r7
 8017608:	bd80      	pop	{r7, pc}
 801760a:	bf00      	nop
 801760c:	0802538c 	.word	0x0802538c
 8017610:	080257f0 	.word	0x080257f0
 8017614:	080253d8 	.word	0x080253d8
 8017618:	24007e04 	.word	0x24007e04
 801761c:	24007e0c 	.word	0x24007e0c

08017620 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8017620:	b480      	push	{r7}
 8017622:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8017624:	4b05      	ldr	r3, [pc, #20]	; (801763c <tcp_trigger_input_pcb_close+0x1c>)
 8017626:	781b      	ldrb	r3, [r3, #0]
 8017628:	f043 0310 	orr.w	r3, r3, #16
 801762c:	b2da      	uxtb	r2, r3
 801762e:	4b03      	ldr	r3, [pc, #12]	; (801763c <tcp_trigger_input_pcb_close+0x1c>)
 8017630:	701a      	strb	r2, [r3, #0]
}
 8017632:	bf00      	nop
 8017634:	46bd      	mov	sp, r7
 8017636:	f85d 7b04 	ldr.w	r7, [sp], #4
 801763a:	4770      	bx	lr
 801763c:	24007e1d 	.word	0x24007e1d

08017640 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8017640:	b580      	push	{r7, lr}
 8017642:	b084      	sub	sp, #16
 8017644:	af00      	add	r7, sp, #0
 8017646:	60f8      	str	r0, [r7, #12]
 8017648:	60b9      	str	r1, [r7, #8]
 801764a:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 801764c:	68fb      	ldr	r3, [r7, #12]
 801764e:	2b00      	cmp	r3, #0
 8017650:	d00a      	beq.n	8017668 <tcp_route+0x28>
 8017652:	68fb      	ldr	r3, [r7, #12]
 8017654:	7a1b      	ldrb	r3, [r3, #8]
 8017656:	2b00      	cmp	r3, #0
 8017658:	d006      	beq.n	8017668 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 801765a:	68fb      	ldr	r3, [r7, #12]
 801765c:	7a1b      	ldrb	r3, [r3, #8]
 801765e:	4618      	mov	r0, r3
 8017660:	f7fb f80c 	bl	801267c <netif_get_by_index>
 8017664:	4603      	mov	r3, r0
 8017666:	e003      	b.n	8017670 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8017668:	6878      	ldr	r0, [r7, #4]
 801766a:	f005 fd61 	bl	801d130 <ip4_route>
 801766e:	4603      	mov	r3, r0
  }
}
 8017670:	4618      	mov	r0, r3
 8017672:	3710      	adds	r7, #16
 8017674:	46bd      	mov	sp, r7
 8017676:	bd80      	pop	{r7, pc}

08017678 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8017678:	b590      	push	{r4, r7, lr}
 801767a:	b087      	sub	sp, #28
 801767c:	af00      	add	r7, sp, #0
 801767e:	60f8      	str	r0, [r7, #12]
 8017680:	60b9      	str	r1, [r7, #8]
 8017682:	603b      	str	r3, [r7, #0]
 8017684:	4613      	mov	r3, r2
 8017686:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8017688:	68fb      	ldr	r3, [r7, #12]
 801768a:	2b00      	cmp	r3, #0
 801768c:	d105      	bne.n	801769a <tcp_create_segment+0x22>
 801768e:	4b44      	ldr	r3, [pc, #272]	; (80177a0 <tcp_create_segment+0x128>)
 8017690:	22a3      	movs	r2, #163	; 0xa3
 8017692:	4944      	ldr	r1, [pc, #272]	; (80177a4 <tcp_create_segment+0x12c>)
 8017694:	4844      	ldr	r0, [pc, #272]	; (80177a8 <tcp_create_segment+0x130>)
 8017696:	f008 fedb 	bl	8020450 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801769a:	68bb      	ldr	r3, [r7, #8]
 801769c:	2b00      	cmp	r3, #0
 801769e:	d105      	bne.n	80176ac <tcp_create_segment+0x34>
 80176a0:	4b3f      	ldr	r3, [pc, #252]	; (80177a0 <tcp_create_segment+0x128>)
 80176a2:	22a4      	movs	r2, #164	; 0xa4
 80176a4:	4941      	ldr	r1, [pc, #260]	; (80177ac <tcp_create_segment+0x134>)
 80176a6:	4840      	ldr	r0, [pc, #256]	; (80177a8 <tcp_create_segment+0x130>)
 80176a8:	f008 fed2 	bl	8020450 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80176ac:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80176b0:	009b      	lsls	r3, r3, #2
 80176b2:	b2db      	uxtb	r3, r3
 80176b4:	f003 0304 	and.w	r3, r3, #4
 80176b8:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 80176ba:	2003      	movs	r0, #3
 80176bc:	f7fa fc46 	bl	8011f4c <memp_malloc>
 80176c0:	6138      	str	r0, [r7, #16]
 80176c2:	693b      	ldr	r3, [r7, #16]
 80176c4:	2b00      	cmp	r3, #0
 80176c6:	d104      	bne.n	80176d2 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 80176c8:	68b8      	ldr	r0, [r7, #8]
 80176ca:	f7fb fb97 	bl	8012dfc <pbuf_free>
    return NULL;
 80176ce:	2300      	movs	r3, #0
 80176d0:	e061      	b.n	8017796 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 80176d2:	693b      	ldr	r3, [r7, #16]
 80176d4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80176d8:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 80176da:	693b      	ldr	r3, [r7, #16]
 80176dc:	2200      	movs	r2, #0
 80176de:	601a      	str	r2, [r3, #0]
  seg->p = p;
 80176e0:	693b      	ldr	r3, [r7, #16]
 80176e2:	68ba      	ldr	r2, [r7, #8]
 80176e4:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 80176e6:	68bb      	ldr	r3, [r7, #8]
 80176e8:	891a      	ldrh	r2, [r3, #8]
 80176ea:	7dfb      	ldrb	r3, [r7, #23]
 80176ec:	b29b      	uxth	r3, r3
 80176ee:	429a      	cmp	r2, r3
 80176f0:	d205      	bcs.n	80176fe <tcp_create_segment+0x86>
 80176f2:	4b2b      	ldr	r3, [pc, #172]	; (80177a0 <tcp_create_segment+0x128>)
 80176f4:	22b0      	movs	r2, #176	; 0xb0
 80176f6:	492e      	ldr	r1, [pc, #184]	; (80177b0 <tcp_create_segment+0x138>)
 80176f8:	482b      	ldr	r0, [pc, #172]	; (80177a8 <tcp_create_segment+0x130>)
 80176fa:	f008 fea9 	bl	8020450 <iprintf>
  seg->len = p->tot_len - optlen;
 80176fe:	68bb      	ldr	r3, [r7, #8]
 8017700:	891a      	ldrh	r2, [r3, #8]
 8017702:	7dfb      	ldrb	r3, [r7, #23]
 8017704:	b29b      	uxth	r3, r3
 8017706:	1ad3      	subs	r3, r2, r3
 8017708:	b29a      	uxth	r2, r3
 801770a:	693b      	ldr	r3, [r7, #16]
 801770c:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 801770e:	2114      	movs	r1, #20
 8017710:	68b8      	ldr	r0, [r7, #8]
 8017712:	f7fb faab 	bl	8012c6c <pbuf_add_header>
 8017716:	4603      	mov	r3, r0
 8017718:	2b00      	cmp	r3, #0
 801771a:	d004      	beq.n	8017726 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 801771c:	6938      	ldr	r0, [r7, #16]
 801771e:	f7fd f800 	bl	8014722 <tcp_seg_free>
    return NULL;
 8017722:	2300      	movs	r3, #0
 8017724:	e037      	b.n	8017796 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8017726:	693b      	ldr	r3, [r7, #16]
 8017728:	685b      	ldr	r3, [r3, #4]
 801772a:	685a      	ldr	r2, [r3, #4]
 801772c:	693b      	ldr	r3, [r7, #16]
 801772e:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8017730:	68fb      	ldr	r3, [r7, #12]
 8017732:	8ada      	ldrh	r2, [r3, #22]
 8017734:	693b      	ldr	r3, [r7, #16]
 8017736:	68dc      	ldr	r4, [r3, #12]
 8017738:	4610      	mov	r0, r2
 801773a:	f7f9 fe77 	bl	801142c <lwip_htons>
 801773e:	4603      	mov	r3, r0
 8017740:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8017742:	68fb      	ldr	r3, [r7, #12]
 8017744:	8b1a      	ldrh	r2, [r3, #24]
 8017746:	693b      	ldr	r3, [r7, #16]
 8017748:	68dc      	ldr	r4, [r3, #12]
 801774a:	4610      	mov	r0, r2
 801774c:	f7f9 fe6e 	bl	801142c <lwip_htons>
 8017750:	4603      	mov	r3, r0
 8017752:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8017754:	693b      	ldr	r3, [r7, #16]
 8017756:	68dc      	ldr	r4, [r3, #12]
 8017758:	6838      	ldr	r0, [r7, #0]
 801775a:	f7f9 fe7c 	bl	8011456 <lwip_htonl>
 801775e:	4603      	mov	r3, r0
 8017760:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8017762:	7dfb      	ldrb	r3, [r7, #23]
 8017764:	089b      	lsrs	r3, r3, #2
 8017766:	b2db      	uxtb	r3, r3
 8017768:	b29b      	uxth	r3, r3
 801776a:	3305      	adds	r3, #5
 801776c:	b29b      	uxth	r3, r3
 801776e:	031b      	lsls	r3, r3, #12
 8017770:	b29a      	uxth	r2, r3
 8017772:	79fb      	ldrb	r3, [r7, #7]
 8017774:	b29b      	uxth	r3, r3
 8017776:	4313      	orrs	r3, r2
 8017778:	b29a      	uxth	r2, r3
 801777a:	693b      	ldr	r3, [r7, #16]
 801777c:	68dc      	ldr	r4, [r3, #12]
 801777e:	4610      	mov	r0, r2
 8017780:	f7f9 fe54 	bl	801142c <lwip_htons>
 8017784:	4603      	mov	r3, r0
 8017786:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8017788:	693b      	ldr	r3, [r7, #16]
 801778a:	68db      	ldr	r3, [r3, #12]
 801778c:	2200      	movs	r2, #0
 801778e:	749a      	strb	r2, [r3, #18]
 8017790:	2200      	movs	r2, #0
 8017792:	74da      	strb	r2, [r3, #19]
  return seg;
 8017794:	693b      	ldr	r3, [r7, #16]
}
 8017796:	4618      	mov	r0, r3
 8017798:	371c      	adds	r7, #28
 801779a:	46bd      	mov	sp, r7
 801779c:	bd90      	pop	{r4, r7, pc}
 801779e:	bf00      	nop
 80177a0:	0802580c 	.word	0x0802580c
 80177a4:	08025840 	.word	0x08025840
 80177a8:	08025860 	.word	0x08025860
 80177ac:	08025888 	.word	0x08025888
 80177b0:	080258ac 	.word	0x080258ac

080177b4 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 80177b4:	b580      	push	{r7, lr}
 80177b6:	b086      	sub	sp, #24
 80177b8:	af00      	add	r7, sp, #0
 80177ba:	607b      	str	r3, [r7, #4]
 80177bc:	4603      	mov	r3, r0
 80177be:	73fb      	strb	r3, [r7, #15]
 80177c0:	460b      	mov	r3, r1
 80177c2:	81bb      	strh	r3, [r7, #12]
 80177c4:	4613      	mov	r3, r2
 80177c6:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 80177c8:	89bb      	ldrh	r3, [r7, #12]
 80177ca:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 80177cc:	687b      	ldr	r3, [r7, #4]
 80177ce:	2b00      	cmp	r3, #0
 80177d0:	d105      	bne.n	80177de <tcp_pbuf_prealloc+0x2a>
 80177d2:	4b30      	ldr	r3, [pc, #192]	; (8017894 <tcp_pbuf_prealloc+0xe0>)
 80177d4:	22e8      	movs	r2, #232	; 0xe8
 80177d6:	4930      	ldr	r1, [pc, #192]	; (8017898 <tcp_pbuf_prealloc+0xe4>)
 80177d8:	4830      	ldr	r0, [pc, #192]	; (801789c <tcp_pbuf_prealloc+0xe8>)
 80177da:	f008 fe39 	bl	8020450 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 80177de:	6a3b      	ldr	r3, [r7, #32]
 80177e0:	2b00      	cmp	r3, #0
 80177e2:	d105      	bne.n	80177f0 <tcp_pbuf_prealloc+0x3c>
 80177e4:	4b2b      	ldr	r3, [pc, #172]	; (8017894 <tcp_pbuf_prealloc+0xe0>)
 80177e6:	22e9      	movs	r2, #233	; 0xe9
 80177e8:	492d      	ldr	r1, [pc, #180]	; (80178a0 <tcp_pbuf_prealloc+0xec>)
 80177ea:	482c      	ldr	r0, [pc, #176]	; (801789c <tcp_pbuf_prealloc+0xe8>)
 80177ec:	f008 fe30 	bl	8020450 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 80177f0:	89ba      	ldrh	r2, [r7, #12]
 80177f2:	897b      	ldrh	r3, [r7, #10]
 80177f4:	429a      	cmp	r2, r3
 80177f6:	d221      	bcs.n	801783c <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 80177f8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80177fc:	f003 0302 	and.w	r3, r3, #2
 8017800:	2b00      	cmp	r3, #0
 8017802:	d111      	bne.n	8017828 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8017804:	6a3b      	ldr	r3, [r7, #32]
 8017806:	8b5b      	ldrh	r3, [r3, #26]
 8017808:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801780c:	2b00      	cmp	r3, #0
 801780e:	d115      	bne.n	801783c <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8017810:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8017814:	2b00      	cmp	r3, #0
 8017816:	d007      	beq.n	8017828 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8017818:	6a3b      	ldr	r3, [r7, #32]
 801781a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 801781c:	2b00      	cmp	r3, #0
 801781e:	d103      	bne.n	8017828 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8017820:	6a3b      	ldr	r3, [r7, #32]
 8017822:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 8017824:	2b00      	cmp	r3, #0
 8017826:	d009      	beq.n	801783c <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8017828:	89bb      	ldrh	r3, [r7, #12]
 801782a:	f203 231b 	addw	r3, r3, #539	; 0x21b
 801782e:	f023 0203 	bic.w	r2, r3, #3
 8017832:	897b      	ldrh	r3, [r7, #10]
 8017834:	4293      	cmp	r3, r2
 8017836:	bf28      	it	cs
 8017838:	4613      	movcs	r3, r2
 801783a:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 801783c:	8af9      	ldrh	r1, [r7, #22]
 801783e:	7bfb      	ldrb	r3, [r7, #15]
 8017840:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017844:	4618      	mov	r0, r3
 8017846:	f7fa ffc3 	bl	80127d0 <pbuf_alloc>
 801784a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801784c:	693b      	ldr	r3, [r7, #16]
 801784e:	2b00      	cmp	r3, #0
 8017850:	d101      	bne.n	8017856 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8017852:	2300      	movs	r3, #0
 8017854:	e019      	b.n	801788a <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8017856:	693b      	ldr	r3, [r7, #16]
 8017858:	681b      	ldr	r3, [r3, #0]
 801785a:	2b00      	cmp	r3, #0
 801785c:	d006      	beq.n	801786c <tcp_pbuf_prealloc+0xb8>
 801785e:	4b0d      	ldr	r3, [pc, #52]	; (8017894 <tcp_pbuf_prealloc+0xe0>)
 8017860:	f240 120b 	movw	r2, #267	; 0x10b
 8017864:	490f      	ldr	r1, [pc, #60]	; (80178a4 <tcp_pbuf_prealloc+0xf0>)
 8017866:	480d      	ldr	r0, [pc, #52]	; (801789c <tcp_pbuf_prealloc+0xe8>)
 8017868:	f008 fdf2 	bl	8020450 <iprintf>
  *oversize = p->len - length;
 801786c:	693b      	ldr	r3, [r7, #16]
 801786e:	895a      	ldrh	r2, [r3, #10]
 8017870:	89bb      	ldrh	r3, [r7, #12]
 8017872:	1ad3      	subs	r3, r2, r3
 8017874:	b29a      	uxth	r2, r3
 8017876:	687b      	ldr	r3, [r7, #4]
 8017878:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 801787a:	693b      	ldr	r3, [r7, #16]
 801787c:	89ba      	ldrh	r2, [r7, #12]
 801787e:	811a      	strh	r2, [r3, #8]
 8017880:	693b      	ldr	r3, [r7, #16]
 8017882:	891a      	ldrh	r2, [r3, #8]
 8017884:	693b      	ldr	r3, [r7, #16]
 8017886:	815a      	strh	r2, [r3, #10]
  return p;
 8017888:	693b      	ldr	r3, [r7, #16]
}
 801788a:	4618      	mov	r0, r3
 801788c:	3718      	adds	r7, #24
 801788e:	46bd      	mov	sp, r7
 8017890:	bd80      	pop	{r7, pc}
 8017892:	bf00      	nop
 8017894:	0802580c 	.word	0x0802580c
 8017898:	080258c4 	.word	0x080258c4
 801789c:	08025860 	.word	0x08025860
 80178a0:	080258e8 	.word	0x080258e8
 80178a4:	08025908 	.word	0x08025908

080178a8 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 80178a8:	b580      	push	{r7, lr}
 80178aa:	b082      	sub	sp, #8
 80178ac:	af00      	add	r7, sp, #0
 80178ae:	6078      	str	r0, [r7, #4]
 80178b0:	460b      	mov	r3, r1
 80178b2:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 80178b4:	687b      	ldr	r3, [r7, #4]
 80178b6:	2b00      	cmp	r3, #0
 80178b8:	d106      	bne.n	80178c8 <tcp_write_checks+0x20>
 80178ba:	4b33      	ldr	r3, [pc, #204]	; (8017988 <tcp_write_checks+0xe0>)
 80178bc:	f240 1233 	movw	r2, #307	; 0x133
 80178c0:	4932      	ldr	r1, [pc, #200]	; (801798c <tcp_write_checks+0xe4>)
 80178c2:	4833      	ldr	r0, [pc, #204]	; (8017990 <tcp_write_checks+0xe8>)
 80178c4:	f008 fdc4 	bl	8020450 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 80178c8:	687b      	ldr	r3, [r7, #4]
 80178ca:	7d1b      	ldrb	r3, [r3, #20]
 80178cc:	2b04      	cmp	r3, #4
 80178ce:	d00e      	beq.n	80178ee <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 80178d0:	687b      	ldr	r3, [r7, #4]
 80178d2:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 80178d4:	2b07      	cmp	r3, #7
 80178d6:	d00a      	beq.n	80178ee <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 80178d8:	687b      	ldr	r3, [r7, #4]
 80178da:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 80178dc:	2b02      	cmp	r3, #2
 80178de:	d006      	beq.n	80178ee <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 80178e0:	687b      	ldr	r3, [r7, #4]
 80178e2:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 80178e4:	2b03      	cmp	r3, #3
 80178e6:	d002      	beq.n	80178ee <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 80178e8:	f06f 030a 	mvn.w	r3, #10
 80178ec:	e048      	b.n	8017980 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 80178ee:	887b      	ldrh	r3, [r7, #2]
 80178f0:	2b00      	cmp	r3, #0
 80178f2:	d101      	bne.n	80178f8 <tcp_write_checks+0x50>
    return ERR_OK;
 80178f4:	2300      	movs	r3, #0
 80178f6:	e043      	b.n	8017980 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 80178f8:	687b      	ldr	r3, [r7, #4]
 80178fa:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80178fe:	887a      	ldrh	r2, [r7, #2]
 8017900:	429a      	cmp	r2, r3
 8017902:	d909      	bls.n	8017918 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8017904:	687b      	ldr	r3, [r7, #4]
 8017906:	8b5b      	ldrh	r3, [r3, #26]
 8017908:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801790c:	b29a      	uxth	r2, r3
 801790e:	687b      	ldr	r3, [r7, #4]
 8017910:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8017912:	f04f 33ff 	mov.w	r3, #4294967295
 8017916:	e033      	b.n	8017980 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8017918:	687b      	ldr	r3, [r7, #4]
 801791a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801791e:	2b08      	cmp	r3, #8
 8017920:	d909      	bls.n	8017936 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8017922:	687b      	ldr	r3, [r7, #4]
 8017924:	8b5b      	ldrh	r3, [r3, #26]
 8017926:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801792a:	b29a      	uxth	r2, r3
 801792c:	687b      	ldr	r3, [r7, #4]
 801792e:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8017930:	f04f 33ff 	mov.w	r3, #4294967295
 8017934:	e024      	b.n	8017980 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8017936:	687b      	ldr	r3, [r7, #4]
 8017938:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801793c:	2b00      	cmp	r3, #0
 801793e:	d00f      	beq.n	8017960 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8017940:	687b      	ldr	r3, [r7, #4]
 8017942:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017944:	2b00      	cmp	r3, #0
 8017946:	d11a      	bne.n	801797e <tcp_write_checks+0xd6>
 8017948:	687b      	ldr	r3, [r7, #4]
 801794a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801794c:	2b00      	cmp	r3, #0
 801794e:	d116      	bne.n	801797e <tcp_write_checks+0xd6>
 8017950:	4b0d      	ldr	r3, [pc, #52]	; (8017988 <tcp_write_checks+0xe0>)
 8017952:	f240 1255 	movw	r2, #341	; 0x155
 8017956:	490f      	ldr	r1, [pc, #60]	; (8017994 <tcp_write_checks+0xec>)
 8017958:	480d      	ldr	r0, [pc, #52]	; (8017990 <tcp_write_checks+0xe8>)
 801795a:	f008 fd79 	bl	8020450 <iprintf>
 801795e:	e00e      	b.n	801797e <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8017960:	687b      	ldr	r3, [r7, #4]
 8017962:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017964:	2b00      	cmp	r3, #0
 8017966:	d103      	bne.n	8017970 <tcp_write_checks+0xc8>
 8017968:	687b      	ldr	r3, [r7, #4]
 801796a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801796c:	2b00      	cmp	r3, #0
 801796e:	d006      	beq.n	801797e <tcp_write_checks+0xd6>
 8017970:	4b05      	ldr	r3, [pc, #20]	; (8017988 <tcp_write_checks+0xe0>)
 8017972:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8017976:	4908      	ldr	r1, [pc, #32]	; (8017998 <tcp_write_checks+0xf0>)
 8017978:	4805      	ldr	r0, [pc, #20]	; (8017990 <tcp_write_checks+0xe8>)
 801797a:	f008 fd69 	bl	8020450 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 801797e:	2300      	movs	r3, #0
}
 8017980:	4618      	mov	r0, r3
 8017982:	3708      	adds	r7, #8
 8017984:	46bd      	mov	sp, r7
 8017986:	bd80      	pop	{r7, pc}
 8017988:	0802580c 	.word	0x0802580c
 801798c:	0802591c 	.word	0x0802591c
 8017990:	08025860 	.word	0x08025860
 8017994:	0802593c 	.word	0x0802593c
 8017998:	08025978 	.word	0x08025978

0801799c <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 801799c:	b590      	push	{r4, r7, lr}
 801799e:	b09b      	sub	sp, #108	; 0x6c
 80179a0:	af04      	add	r7, sp, #16
 80179a2:	60f8      	str	r0, [r7, #12]
 80179a4:	60b9      	str	r1, [r7, #8]
 80179a6:	4611      	mov	r1, r2
 80179a8:	461a      	mov	r2, r3
 80179aa:	460b      	mov	r3, r1
 80179ac:	80fb      	strh	r3, [r7, #6]
 80179ae:	4613      	mov	r3, r2
 80179b0:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 80179b2:	2300      	movs	r3, #0
 80179b4:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 80179b6:	2300      	movs	r3, #0
 80179b8:	653b      	str	r3, [r7, #80]	; 0x50
 80179ba:	2300      	movs	r3, #0
 80179bc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80179be:	2300      	movs	r3, #0
 80179c0:	64bb      	str	r3, [r7, #72]	; 0x48
 80179c2:	2300      	movs	r3, #0
 80179c4:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 80179c6:	2300      	movs	r3, #0
 80179c8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 80179cc:	2300      	movs	r3, #0
 80179ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 80179d2:	2300      	movs	r3, #0
 80179d4:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 80179d6:	2300      	movs	r3, #0
 80179d8:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 80179da:	2300      	movs	r3, #0
 80179dc:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 80179de:	68fb      	ldr	r3, [r7, #12]
 80179e0:	2b00      	cmp	r3, #0
 80179e2:	d109      	bne.n	80179f8 <tcp_write+0x5c>
 80179e4:	4ba4      	ldr	r3, [pc, #656]	; (8017c78 <tcp_write+0x2dc>)
 80179e6:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 80179ea:	49a4      	ldr	r1, [pc, #656]	; (8017c7c <tcp_write+0x2e0>)
 80179ec:	48a4      	ldr	r0, [pc, #656]	; (8017c80 <tcp_write+0x2e4>)
 80179ee:	f008 fd2f 	bl	8020450 <iprintf>
 80179f2:	f06f 030f 	mvn.w	r3, #15
 80179f6:	e32a      	b.n	801804e <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 80179f8:	68fb      	ldr	r3, [r7, #12]
 80179fa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80179fe:	085b      	lsrs	r3, r3, #1
 8017a00:	b29a      	uxth	r2, r3
 8017a02:	68fb      	ldr	r3, [r7, #12]
 8017a04:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017a06:	4293      	cmp	r3, r2
 8017a08:	bf28      	it	cs
 8017a0a:	4613      	movcs	r3, r2
 8017a0c:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8017a0e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017a10:	2b00      	cmp	r3, #0
 8017a12:	d102      	bne.n	8017a1a <tcp_write+0x7e>
 8017a14:	68fb      	ldr	r3, [r7, #12]
 8017a16:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017a18:	e000      	b.n	8017a1c <tcp_write+0x80>
 8017a1a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017a1c:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8017a1e:	68bb      	ldr	r3, [r7, #8]
 8017a20:	2b00      	cmp	r3, #0
 8017a22:	d109      	bne.n	8017a38 <tcp_write+0x9c>
 8017a24:	4b94      	ldr	r3, [pc, #592]	; (8017c78 <tcp_write+0x2dc>)
 8017a26:	f240 12ad 	movw	r2, #429	; 0x1ad
 8017a2a:	4996      	ldr	r1, [pc, #600]	; (8017c84 <tcp_write+0x2e8>)
 8017a2c:	4894      	ldr	r0, [pc, #592]	; (8017c80 <tcp_write+0x2e4>)
 8017a2e:	f008 fd0f 	bl	8020450 <iprintf>
 8017a32:	f06f 030f 	mvn.w	r3, #15
 8017a36:	e30a      	b.n	801804e <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8017a38:	88fb      	ldrh	r3, [r7, #6]
 8017a3a:	4619      	mov	r1, r3
 8017a3c:	68f8      	ldr	r0, [r7, #12]
 8017a3e:	f7ff ff33 	bl	80178a8 <tcp_write_checks>
 8017a42:	4603      	mov	r3, r0
 8017a44:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8017a48:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8017a4c:	2b00      	cmp	r3, #0
 8017a4e:	d002      	beq.n	8017a56 <tcp_write+0xba>
    return err;
 8017a50:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8017a54:	e2fb      	b.n	801804e <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 8017a56:	68fb      	ldr	r3, [r7, #12]
 8017a58:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8017a5c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8017a60:	2300      	movs	r3, #0
 8017a62:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8017a66:	68fb      	ldr	r3, [r7, #12]
 8017a68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017a6a:	2b00      	cmp	r3, #0
 8017a6c:	f000 80f6 	beq.w	8017c5c <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8017a70:	68fb      	ldr	r3, [r7, #12]
 8017a72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017a74:	653b      	str	r3, [r7, #80]	; 0x50
 8017a76:	e002      	b.n	8017a7e <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8017a78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017a7a:	681b      	ldr	r3, [r3, #0]
 8017a7c:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8017a7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017a80:	681b      	ldr	r3, [r3, #0]
 8017a82:	2b00      	cmp	r3, #0
 8017a84:	d1f8      	bne.n	8017a78 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8017a86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017a88:	7a9b      	ldrb	r3, [r3, #10]
 8017a8a:	009b      	lsls	r3, r3, #2
 8017a8c:	b29b      	uxth	r3, r3
 8017a8e:	f003 0304 	and.w	r3, r3, #4
 8017a92:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8017a94:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8017a96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017a98:	891b      	ldrh	r3, [r3, #8]
 8017a9a:	4619      	mov	r1, r3
 8017a9c:	8c3b      	ldrh	r3, [r7, #32]
 8017a9e:	440b      	add	r3, r1
 8017aa0:	429a      	cmp	r2, r3
 8017aa2:	da06      	bge.n	8017ab2 <tcp_write+0x116>
 8017aa4:	4b74      	ldr	r3, [pc, #464]	; (8017c78 <tcp_write+0x2dc>)
 8017aa6:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8017aaa:	4977      	ldr	r1, [pc, #476]	; (8017c88 <tcp_write+0x2ec>)
 8017aac:	4874      	ldr	r0, [pc, #464]	; (8017c80 <tcp_write+0x2e4>)
 8017aae:	f008 fccf 	bl	8020450 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8017ab2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017ab4:	891a      	ldrh	r2, [r3, #8]
 8017ab6:	8c3b      	ldrh	r3, [r7, #32]
 8017ab8:	4413      	add	r3, r2
 8017aba:	b29b      	uxth	r3, r3
 8017abc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8017abe:	1ad3      	subs	r3, r2, r3
 8017ac0:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8017ac2:	68fb      	ldr	r3, [r7, #12]
 8017ac4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8017ac8:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8017aca:	8a7b      	ldrh	r3, [r7, #18]
 8017acc:	2b00      	cmp	r3, #0
 8017ace:	d026      	beq.n	8017b1e <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8017ad0:	8a7b      	ldrh	r3, [r7, #18]
 8017ad2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8017ad4:	429a      	cmp	r2, r3
 8017ad6:	d206      	bcs.n	8017ae6 <tcp_write+0x14a>
 8017ad8:	4b67      	ldr	r3, [pc, #412]	; (8017c78 <tcp_write+0x2dc>)
 8017ada:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8017ade:	496b      	ldr	r1, [pc, #428]	; (8017c8c <tcp_write+0x2f0>)
 8017ae0:	4867      	ldr	r0, [pc, #412]	; (8017c80 <tcp_write+0x2e4>)
 8017ae2:	f008 fcb5 	bl	8020450 <iprintf>
      seg = last_unsent;
 8017ae6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017ae8:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8017aea:	8a7b      	ldrh	r3, [r7, #18]
 8017aec:	88fa      	ldrh	r2, [r7, #6]
 8017aee:	4293      	cmp	r3, r2
 8017af0:	bf28      	it	cs
 8017af2:	4613      	movcs	r3, r2
 8017af4:	b29b      	uxth	r3, r3
 8017af6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8017af8:	4293      	cmp	r3, r2
 8017afa:	bf28      	it	cs
 8017afc:	4613      	movcs	r3, r2
 8017afe:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 8017b00:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8017b04:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8017b06:	4413      	add	r3, r2
 8017b08:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8017b0c:	8a7a      	ldrh	r2, [r7, #18]
 8017b0e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8017b10:	1ad3      	subs	r3, r2, r3
 8017b12:	b29b      	uxth	r3, r3
 8017b14:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8017b16:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8017b18:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8017b1a:	1ad3      	subs	r3, r2, r3
 8017b1c:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8017b1e:	8a7b      	ldrh	r3, [r7, #18]
 8017b20:	2b00      	cmp	r3, #0
 8017b22:	d00b      	beq.n	8017b3c <tcp_write+0x1a0>
 8017b24:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8017b28:	88fb      	ldrh	r3, [r7, #6]
 8017b2a:	429a      	cmp	r2, r3
 8017b2c:	d006      	beq.n	8017b3c <tcp_write+0x1a0>
 8017b2e:	4b52      	ldr	r3, [pc, #328]	; (8017c78 <tcp_write+0x2dc>)
 8017b30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8017b34:	4956      	ldr	r1, [pc, #344]	; (8017c90 <tcp_write+0x2f4>)
 8017b36:	4852      	ldr	r0, [pc, #328]	; (8017c80 <tcp_write+0x2e4>)
 8017b38:	f008 fc8a 	bl	8020450 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8017b3c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8017b40:	88fb      	ldrh	r3, [r7, #6]
 8017b42:	429a      	cmp	r2, r3
 8017b44:	f080 8167 	bcs.w	8017e16 <tcp_write+0x47a>
 8017b48:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017b4a:	2b00      	cmp	r3, #0
 8017b4c:	f000 8163 	beq.w	8017e16 <tcp_write+0x47a>
 8017b50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017b52:	891b      	ldrh	r3, [r3, #8]
 8017b54:	2b00      	cmp	r3, #0
 8017b56:	f000 815e 	beq.w	8017e16 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8017b5a:	88fa      	ldrh	r2, [r7, #6]
 8017b5c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8017b60:	1ad2      	subs	r2, r2, r3
 8017b62:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017b64:	4293      	cmp	r3, r2
 8017b66:	bfa8      	it	ge
 8017b68:	4613      	movge	r3, r2
 8017b6a:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8017b6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017b6e:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8017b70:	797b      	ldrb	r3, [r7, #5]
 8017b72:	f003 0301 	and.w	r3, r3, #1
 8017b76:	2b00      	cmp	r3, #0
 8017b78:	d027      	beq.n	8017bca <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8017b7a:	f107 0012 	add.w	r0, r7, #18
 8017b7e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8017b80:	8bf9      	ldrh	r1, [r7, #30]
 8017b82:	2301      	movs	r3, #1
 8017b84:	9302      	str	r3, [sp, #8]
 8017b86:	797b      	ldrb	r3, [r7, #5]
 8017b88:	9301      	str	r3, [sp, #4]
 8017b8a:	68fb      	ldr	r3, [r7, #12]
 8017b8c:	9300      	str	r3, [sp, #0]
 8017b8e:	4603      	mov	r3, r0
 8017b90:	2000      	movs	r0, #0
 8017b92:	f7ff fe0f 	bl	80177b4 <tcp_pbuf_prealloc>
 8017b96:	6578      	str	r0, [r7, #84]	; 0x54
 8017b98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017b9a:	2b00      	cmp	r3, #0
 8017b9c:	f000 8225 	beq.w	8017fea <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8017ba0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017ba2:	6858      	ldr	r0, [r3, #4]
 8017ba4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8017ba8:	68ba      	ldr	r2, [r7, #8]
 8017baa:	4413      	add	r3, r2
 8017bac:	8bfa      	ldrh	r2, [r7, #30]
 8017bae:	4619      	mov	r1, r3
 8017bb0:	f008 fd7f 	bl	80206b2 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8017bb4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8017bb6:	f7fb f9af 	bl	8012f18 <pbuf_clen>
 8017bba:	4603      	mov	r3, r0
 8017bbc:	461a      	mov	r2, r3
 8017bbe:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8017bc2:	4413      	add	r3, r2
 8017bc4:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8017bc8:	e041      	b.n	8017c4e <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8017bca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017bcc:	685b      	ldr	r3, [r3, #4]
 8017bce:	637b      	str	r3, [r7, #52]	; 0x34
 8017bd0:	e002      	b.n	8017bd8 <tcp_write+0x23c>
 8017bd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017bd4:	681b      	ldr	r3, [r3, #0]
 8017bd6:	637b      	str	r3, [r7, #52]	; 0x34
 8017bd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017bda:	681b      	ldr	r3, [r3, #0]
 8017bdc:	2b00      	cmp	r3, #0
 8017bde:	d1f8      	bne.n	8017bd2 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8017be0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017be2:	7b1b      	ldrb	r3, [r3, #12]
 8017be4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8017be8:	2b00      	cmp	r3, #0
 8017bea:	d115      	bne.n	8017c18 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8017bec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017bee:	685b      	ldr	r3, [r3, #4]
 8017bf0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8017bf2:	8952      	ldrh	r2, [r2, #10]
 8017bf4:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8017bf6:	68ba      	ldr	r2, [r7, #8]
 8017bf8:	429a      	cmp	r2, r3
 8017bfa:	d10d      	bne.n	8017c18 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8017bfc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8017c00:	2b00      	cmp	r3, #0
 8017c02:	d006      	beq.n	8017c12 <tcp_write+0x276>
 8017c04:	4b1c      	ldr	r3, [pc, #112]	; (8017c78 <tcp_write+0x2dc>)
 8017c06:	f240 2231 	movw	r2, #561	; 0x231
 8017c0a:	4922      	ldr	r1, [pc, #136]	; (8017c94 <tcp_write+0x2f8>)
 8017c0c:	481c      	ldr	r0, [pc, #112]	; (8017c80 <tcp_write+0x2e4>)
 8017c0e:	f008 fc1f 	bl	8020450 <iprintf>
          extendlen = seglen;
 8017c12:	8bfb      	ldrh	r3, [r7, #30]
 8017c14:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8017c16:	e01a      	b.n	8017c4e <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8017c18:	8bfb      	ldrh	r3, [r7, #30]
 8017c1a:	2201      	movs	r2, #1
 8017c1c:	4619      	mov	r1, r3
 8017c1e:	2000      	movs	r0, #0
 8017c20:	f7fa fdd6 	bl	80127d0 <pbuf_alloc>
 8017c24:	6578      	str	r0, [r7, #84]	; 0x54
 8017c26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017c28:	2b00      	cmp	r3, #0
 8017c2a:	f000 81e0 	beq.w	8017fee <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8017c2e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8017c32:	68ba      	ldr	r2, [r7, #8]
 8017c34:	441a      	add	r2, r3
 8017c36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017c38:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8017c3a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8017c3c:	f7fb f96c 	bl	8012f18 <pbuf_clen>
 8017c40:	4603      	mov	r3, r0
 8017c42:	461a      	mov	r2, r3
 8017c44:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8017c48:	4413      	add	r3, r2
 8017c4a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8017c4e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8017c52:	8bfb      	ldrh	r3, [r7, #30]
 8017c54:	4413      	add	r3, r2
 8017c56:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8017c5a:	e0dc      	b.n	8017e16 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8017c5c:	68fb      	ldr	r3, [r7, #12]
 8017c5e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8017c62:	2b00      	cmp	r3, #0
 8017c64:	f000 80d7 	beq.w	8017e16 <tcp_write+0x47a>
 8017c68:	4b03      	ldr	r3, [pc, #12]	; (8017c78 <tcp_write+0x2dc>)
 8017c6a:	f240 224a 	movw	r2, #586	; 0x24a
 8017c6e:	490a      	ldr	r1, [pc, #40]	; (8017c98 <tcp_write+0x2fc>)
 8017c70:	4803      	ldr	r0, [pc, #12]	; (8017c80 <tcp_write+0x2e4>)
 8017c72:	f008 fbed 	bl	8020450 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8017c76:	e0ce      	b.n	8017e16 <tcp_write+0x47a>
 8017c78:	0802580c 	.word	0x0802580c
 8017c7c:	080259ac 	.word	0x080259ac
 8017c80:	08025860 	.word	0x08025860
 8017c84:	080259c4 	.word	0x080259c4
 8017c88:	080259f8 	.word	0x080259f8
 8017c8c:	08025a10 	.word	0x08025a10
 8017c90:	08025a30 	.word	0x08025a30
 8017c94:	08025a50 	.word	0x08025a50
 8017c98:	08025a7c 	.word	0x08025a7c
    struct pbuf *p;
    u16_t left = len - pos;
 8017c9c:	88fa      	ldrh	r2, [r7, #6]
 8017c9e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8017ca2:	1ad3      	subs	r3, r2, r3
 8017ca4:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8017ca6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8017caa:	b29b      	uxth	r3, r3
 8017cac:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8017cae:	1ad3      	subs	r3, r2, r3
 8017cb0:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8017cb2:	8b7a      	ldrh	r2, [r7, #26]
 8017cb4:	8bbb      	ldrh	r3, [r7, #28]
 8017cb6:	4293      	cmp	r3, r2
 8017cb8:	bf28      	it	cs
 8017cba:	4613      	movcs	r3, r2
 8017cbc:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8017cbe:	797b      	ldrb	r3, [r7, #5]
 8017cc0:	f003 0301 	and.w	r3, r3, #1
 8017cc4:	2b00      	cmp	r3, #0
 8017cc6:	d036      	beq.n	8017d36 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8017cc8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8017ccc:	b29a      	uxth	r2, r3
 8017cce:	8b3b      	ldrh	r3, [r7, #24]
 8017cd0:	4413      	add	r3, r2
 8017cd2:	b299      	uxth	r1, r3
 8017cd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017cd6:	2b00      	cmp	r3, #0
 8017cd8:	bf0c      	ite	eq
 8017cda:	2301      	moveq	r3, #1
 8017cdc:	2300      	movne	r3, #0
 8017cde:	b2db      	uxtb	r3, r3
 8017ce0:	f107 0012 	add.w	r0, r7, #18
 8017ce4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8017ce6:	9302      	str	r3, [sp, #8]
 8017ce8:	797b      	ldrb	r3, [r7, #5]
 8017cea:	9301      	str	r3, [sp, #4]
 8017cec:	68fb      	ldr	r3, [r7, #12]
 8017cee:	9300      	str	r3, [sp, #0]
 8017cf0:	4603      	mov	r3, r0
 8017cf2:	2036      	movs	r0, #54	; 0x36
 8017cf4:	f7ff fd5e 	bl	80177b4 <tcp_pbuf_prealloc>
 8017cf8:	6338      	str	r0, [r7, #48]	; 0x30
 8017cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017cfc:	2b00      	cmp	r3, #0
 8017cfe:	f000 8178 	beq.w	8017ff2 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8017d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d04:	895b      	ldrh	r3, [r3, #10]
 8017d06:	8b3a      	ldrh	r2, [r7, #24]
 8017d08:	429a      	cmp	r2, r3
 8017d0a:	d906      	bls.n	8017d1a <tcp_write+0x37e>
 8017d0c:	4b8c      	ldr	r3, [pc, #560]	; (8017f40 <tcp_write+0x5a4>)
 8017d0e:	f240 2266 	movw	r2, #614	; 0x266
 8017d12:	498c      	ldr	r1, [pc, #560]	; (8017f44 <tcp_write+0x5a8>)
 8017d14:	488c      	ldr	r0, [pc, #560]	; (8017f48 <tcp_write+0x5ac>)
 8017d16:	f008 fb9b 	bl	8020450 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8017d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d1c:	685a      	ldr	r2, [r3, #4]
 8017d1e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8017d22:	18d0      	adds	r0, r2, r3
 8017d24:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8017d28:	68ba      	ldr	r2, [r7, #8]
 8017d2a:	4413      	add	r3, r2
 8017d2c:	8b3a      	ldrh	r2, [r7, #24]
 8017d2e:	4619      	mov	r1, r3
 8017d30:	f008 fcbf 	bl	80206b2 <memcpy>
 8017d34:	e02f      	b.n	8017d96 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8017d36:	8a7b      	ldrh	r3, [r7, #18]
 8017d38:	2b00      	cmp	r3, #0
 8017d3a:	d006      	beq.n	8017d4a <tcp_write+0x3ae>
 8017d3c:	4b80      	ldr	r3, [pc, #512]	; (8017f40 <tcp_write+0x5a4>)
 8017d3e:	f240 2271 	movw	r2, #625	; 0x271
 8017d42:	4982      	ldr	r1, [pc, #520]	; (8017f4c <tcp_write+0x5b0>)
 8017d44:	4880      	ldr	r0, [pc, #512]	; (8017f48 <tcp_write+0x5ac>)
 8017d46:	f008 fb83 	bl	8020450 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8017d4a:	8b3b      	ldrh	r3, [r7, #24]
 8017d4c:	2201      	movs	r2, #1
 8017d4e:	4619      	mov	r1, r3
 8017d50:	2036      	movs	r0, #54	; 0x36
 8017d52:	f7fa fd3d 	bl	80127d0 <pbuf_alloc>
 8017d56:	6178      	str	r0, [r7, #20]
 8017d58:	697b      	ldr	r3, [r7, #20]
 8017d5a:	2b00      	cmp	r3, #0
 8017d5c:	f000 814b 	beq.w	8017ff6 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8017d60:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8017d64:	68ba      	ldr	r2, [r7, #8]
 8017d66:	441a      	add	r2, r3
 8017d68:	697b      	ldr	r3, [r7, #20]
 8017d6a:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8017d6c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8017d70:	b29b      	uxth	r3, r3
 8017d72:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017d76:	4619      	mov	r1, r3
 8017d78:	2036      	movs	r0, #54	; 0x36
 8017d7a:	f7fa fd29 	bl	80127d0 <pbuf_alloc>
 8017d7e:	6338      	str	r0, [r7, #48]	; 0x30
 8017d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d82:	2b00      	cmp	r3, #0
 8017d84:	d103      	bne.n	8017d8e <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8017d86:	6978      	ldr	r0, [r7, #20]
 8017d88:	f7fb f838 	bl	8012dfc <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8017d8c:	e136      	b.n	8017ffc <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8017d8e:	6979      	ldr	r1, [r7, #20]
 8017d90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017d92:	f7fb f901 	bl	8012f98 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8017d96:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017d98:	f7fb f8be 	bl	8012f18 <pbuf_clen>
 8017d9c:	4603      	mov	r3, r0
 8017d9e:	461a      	mov	r2, r3
 8017da0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8017da4:	4413      	add	r3, r2
 8017da6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8017daa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8017dae:	2b09      	cmp	r3, #9
 8017db0:	d903      	bls.n	8017dba <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8017db2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017db4:	f7fb f822 	bl	8012dfc <pbuf_free>
      goto memerr;
 8017db8:	e120      	b.n	8017ffc <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8017dba:	68fb      	ldr	r3, [r7, #12]
 8017dbc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8017dbe:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8017dc2:	441a      	add	r2, r3
 8017dc4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017dc8:	9300      	str	r3, [sp, #0]
 8017dca:	4613      	mov	r3, r2
 8017dcc:	2200      	movs	r2, #0
 8017dce:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8017dd0:	68f8      	ldr	r0, [r7, #12]
 8017dd2:	f7ff fc51 	bl	8017678 <tcp_create_segment>
 8017dd6:	64f8      	str	r0, [r7, #76]	; 0x4c
 8017dd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017dda:	2b00      	cmp	r3, #0
 8017ddc:	f000 810d 	beq.w	8017ffa <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8017de0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017de2:	2b00      	cmp	r3, #0
 8017de4:	d102      	bne.n	8017dec <tcp_write+0x450>
      queue = seg;
 8017de6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017de8:	647b      	str	r3, [r7, #68]	; 0x44
 8017dea:	e00c      	b.n	8017e06 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8017dec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017dee:	2b00      	cmp	r3, #0
 8017df0:	d106      	bne.n	8017e00 <tcp_write+0x464>
 8017df2:	4b53      	ldr	r3, [pc, #332]	; (8017f40 <tcp_write+0x5a4>)
 8017df4:	f240 22ab 	movw	r2, #683	; 0x2ab
 8017df8:	4955      	ldr	r1, [pc, #340]	; (8017f50 <tcp_write+0x5b4>)
 8017dfa:	4853      	ldr	r0, [pc, #332]	; (8017f48 <tcp_write+0x5ac>)
 8017dfc:	f008 fb28 	bl	8020450 <iprintf>
      prev_seg->next = seg;
 8017e00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017e02:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8017e04:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8017e06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017e08:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8017e0a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8017e0e:	8b3b      	ldrh	r3, [r7, #24]
 8017e10:	4413      	add	r3, r2
 8017e12:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 8017e16:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8017e1a:	88fb      	ldrh	r3, [r7, #6]
 8017e1c:	429a      	cmp	r2, r3
 8017e1e:	f4ff af3d 	bcc.w	8017c9c <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8017e22:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8017e24:	2b00      	cmp	r3, #0
 8017e26:	d02c      	beq.n	8017e82 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8017e28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017e2a:	685b      	ldr	r3, [r3, #4]
 8017e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017e2e:	e01e      	b.n	8017e6e <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 8017e30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017e32:	891a      	ldrh	r2, [r3, #8]
 8017e34:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8017e36:	4413      	add	r3, r2
 8017e38:	b29a      	uxth	r2, r3
 8017e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017e3c:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8017e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017e40:	681b      	ldr	r3, [r3, #0]
 8017e42:	2b00      	cmp	r3, #0
 8017e44:	d110      	bne.n	8017e68 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8017e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017e48:	685b      	ldr	r3, [r3, #4]
 8017e4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017e4c:	8952      	ldrh	r2, [r2, #10]
 8017e4e:	4413      	add	r3, r2
 8017e50:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8017e52:	68b9      	ldr	r1, [r7, #8]
 8017e54:	4618      	mov	r0, r3
 8017e56:	f008 fc2c 	bl	80206b2 <memcpy>
        p->len += oversize_used;
 8017e5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017e5c:	895a      	ldrh	r2, [r3, #10]
 8017e5e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8017e60:	4413      	add	r3, r2
 8017e62:	b29a      	uxth	r2, r3
 8017e64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017e66:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8017e68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017e6a:	681b      	ldr	r3, [r3, #0]
 8017e6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017e70:	2b00      	cmp	r3, #0
 8017e72:	d1dd      	bne.n	8017e30 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 8017e74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017e76:	891a      	ldrh	r2, [r3, #8]
 8017e78:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8017e7a:	4413      	add	r3, r2
 8017e7c:	b29a      	uxth	r2, r3
 8017e7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017e80:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8017e82:	8a7a      	ldrh	r2, [r7, #18]
 8017e84:	68fb      	ldr	r3, [r7, #12]
 8017e86:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8017e8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017e8c:	2b00      	cmp	r3, #0
 8017e8e:	d018      	beq.n	8017ec2 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8017e90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017e92:	2b00      	cmp	r3, #0
 8017e94:	d106      	bne.n	8017ea4 <tcp_write+0x508>
 8017e96:	4b2a      	ldr	r3, [pc, #168]	; (8017f40 <tcp_write+0x5a4>)
 8017e98:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8017e9c:	492d      	ldr	r1, [pc, #180]	; (8017f54 <tcp_write+0x5b8>)
 8017e9e:	482a      	ldr	r0, [pc, #168]	; (8017f48 <tcp_write+0x5ac>)
 8017ea0:	f008 fad6 	bl	8020450 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8017ea4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017ea6:	685b      	ldr	r3, [r3, #4]
 8017ea8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8017eaa:	4618      	mov	r0, r3
 8017eac:	f7fb f874 	bl	8012f98 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8017eb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017eb2:	891a      	ldrh	r2, [r3, #8]
 8017eb4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017eb6:	891b      	ldrh	r3, [r3, #8]
 8017eb8:	4413      	add	r3, r2
 8017eba:	b29a      	uxth	r2, r3
 8017ebc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017ebe:	811a      	strh	r2, [r3, #8]
 8017ec0:	e037      	b.n	8017f32 <tcp_write+0x596>
  } else if (extendlen > 0) {
 8017ec2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017ec4:	2b00      	cmp	r3, #0
 8017ec6:	d034      	beq.n	8017f32 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8017ec8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017eca:	2b00      	cmp	r3, #0
 8017ecc:	d003      	beq.n	8017ed6 <tcp_write+0x53a>
 8017ece:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017ed0:	685b      	ldr	r3, [r3, #4]
 8017ed2:	2b00      	cmp	r3, #0
 8017ed4:	d106      	bne.n	8017ee4 <tcp_write+0x548>
 8017ed6:	4b1a      	ldr	r3, [pc, #104]	; (8017f40 <tcp_write+0x5a4>)
 8017ed8:	f240 22e6 	movw	r2, #742	; 0x2e6
 8017edc:	491e      	ldr	r1, [pc, #120]	; (8017f58 <tcp_write+0x5bc>)
 8017ede:	481a      	ldr	r0, [pc, #104]	; (8017f48 <tcp_write+0x5ac>)
 8017ee0:	f008 fab6 	bl	8020450 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8017ee4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017ee6:	685b      	ldr	r3, [r3, #4]
 8017ee8:	62bb      	str	r3, [r7, #40]	; 0x28
 8017eea:	e009      	b.n	8017f00 <tcp_write+0x564>
      p->tot_len += extendlen;
 8017eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017eee:	891a      	ldrh	r2, [r3, #8]
 8017ef0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017ef2:	4413      	add	r3, r2
 8017ef4:	b29a      	uxth	r2, r3
 8017ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017ef8:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8017efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017efc:	681b      	ldr	r3, [r3, #0]
 8017efe:	62bb      	str	r3, [r7, #40]	; 0x28
 8017f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017f02:	681b      	ldr	r3, [r3, #0]
 8017f04:	2b00      	cmp	r3, #0
 8017f06:	d1f1      	bne.n	8017eec <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 8017f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017f0a:	891a      	ldrh	r2, [r3, #8]
 8017f0c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017f0e:	4413      	add	r3, r2
 8017f10:	b29a      	uxth	r2, r3
 8017f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017f14:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8017f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017f18:	895a      	ldrh	r2, [r3, #10]
 8017f1a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017f1c:	4413      	add	r3, r2
 8017f1e:	b29a      	uxth	r2, r3
 8017f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017f22:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8017f24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017f26:	891a      	ldrh	r2, [r3, #8]
 8017f28:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017f2a:	4413      	add	r3, r2
 8017f2c:	b29a      	uxth	r2, r3
 8017f2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017f30:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8017f32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017f34:	2b00      	cmp	r3, #0
 8017f36:	d111      	bne.n	8017f5c <tcp_write+0x5c0>
    pcb->unsent = queue;
 8017f38:	68fb      	ldr	r3, [r7, #12]
 8017f3a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017f3c:	66da      	str	r2, [r3, #108]	; 0x6c
 8017f3e:	e010      	b.n	8017f62 <tcp_write+0x5c6>
 8017f40:	0802580c 	.word	0x0802580c
 8017f44:	08025aac 	.word	0x08025aac
 8017f48:	08025860 	.word	0x08025860
 8017f4c:	08025aec 	.word	0x08025aec
 8017f50:	08025afc 	.word	0x08025afc
 8017f54:	08025b10 	.word	0x08025b10
 8017f58:	08025b48 	.word	0x08025b48
  } else {
    last_unsent->next = queue;
 8017f5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017f5e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017f60:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8017f62:	68fb      	ldr	r3, [r7, #12]
 8017f64:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8017f66:	88fb      	ldrh	r3, [r7, #6]
 8017f68:	441a      	add	r2, r3
 8017f6a:	68fb      	ldr	r3, [r7, #12]
 8017f6c:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 8017f6e:	68fb      	ldr	r3, [r7, #12]
 8017f70:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8017f74:	88fb      	ldrh	r3, [r7, #6]
 8017f76:	1ad3      	subs	r3, r2, r3
 8017f78:	b29a      	uxth	r2, r3
 8017f7a:	68fb      	ldr	r3, [r7, #12]
 8017f7c:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 8017f80:	68fb      	ldr	r3, [r7, #12]
 8017f82:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8017f86:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8017f8a:	68fb      	ldr	r3, [r7, #12]
 8017f8c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8017f90:	2b00      	cmp	r3, #0
 8017f92:	d00e      	beq.n	8017fb2 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8017f94:	68fb      	ldr	r3, [r7, #12]
 8017f96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017f98:	2b00      	cmp	r3, #0
 8017f9a:	d10a      	bne.n	8017fb2 <tcp_write+0x616>
 8017f9c:	68fb      	ldr	r3, [r7, #12]
 8017f9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017fa0:	2b00      	cmp	r3, #0
 8017fa2:	d106      	bne.n	8017fb2 <tcp_write+0x616>
 8017fa4:	4b2c      	ldr	r3, [pc, #176]	; (8018058 <tcp_write+0x6bc>)
 8017fa6:	f240 3212 	movw	r2, #786	; 0x312
 8017faa:	492c      	ldr	r1, [pc, #176]	; (801805c <tcp_write+0x6c0>)
 8017fac:	482c      	ldr	r0, [pc, #176]	; (8018060 <tcp_write+0x6c4>)
 8017fae:	f008 fa4f 	bl	8020450 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8017fb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017fb4:	2b00      	cmp	r3, #0
 8017fb6:	d016      	beq.n	8017fe6 <tcp_write+0x64a>
 8017fb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017fba:	68db      	ldr	r3, [r3, #12]
 8017fbc:	2b00      	cmp	r3, #0
 8017fbe:	d012      	beq.n	8017fe6 <tcp_write+0x64a>
 8017fc0:	797b      	ldrb	r3, [r7, #5]
 8017fc2:	f003 0302 	and.w	r3, r3, #2
 8017fc6:	2b00      	cmp	r3, #0
 8017fc8:	d10d      	bne.n	8017fe6 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8017fca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017fcc:	68db      	ldr	r3, [r3, #12]
 8017fce:	899b      	ldrh	r3, [r3, #12]
 8017fd0:	b29c      	uxth	r4, r3
 8017fd2:	2008      	movs	r0, #8
 8017fd4:	f7f9 fa2a 	bl	801142c <lwip_htons>
 8017fd8:	4603      	mov	r3, r0
 8017fda:	461a      	mov	r2, r3
 8017fdc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017fde:	68db      	ldr	r3, [r3, #12]
 8017fe0:	4322      	orrs	r2, r4
 8017fe2:	b292      	uxth	r2, r2
 8017fe4:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8017fe6:	2300      	movs	r3, #0
 8017fe8:	e031      	b.n	801804e <tcp_write+0x6b2>
          goto memerr;
 8017fea:	bf00      	nop
 8017fec:	e006      	b.n	8017ffc <tcp_write+0x660>
            goto memerr;
 8017fee:	bf00      	nop
 8017ff0:	e004      	b.n	8017ffc <tcp_write+0x660>
        goto memerr;
 8017ff2:	bf00      	nop
 8017ff4:	e002      	b.n	8017ffc <tcp_write+0x660>
        goto memerr;
 8017ff6:	bf00      	nop
 8017ff8:	e000      	b.n	8017ffc <tcp_write+0x660>
      goto memerr;
 8017ffa:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8017ffc:	68fb      	ldr	r3, [r7, #12]
 8017ffe:	8b5b      	ldrh	r3, [r3, #26]
 8018000:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018004:	b29a      	uxth	r2, r3
 8018006:	68fb      	ldr	r3, [r7, #12]
 8018008:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 801800a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801800c:	2b00      	cmp	r3, #0
 801800e:	d002      	beq.n	8018016 <tcp_write+0x67a>
    pbuf_free(concat_p);
 8018010:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8018012:	f7fa fef3 	bl	8012dfc <pbuf_free>
  }
  if (queue != NULL) {
 8018016:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018018:	2b00      	cmp	r3, #0
 801801a:	d002      	beq.n	8018022 <tcp_write+0x686>
    tcp_segs_free(queue);
 801801c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801801e:	f7fc fb6b 	bl	80146f8 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8018022:	68fb      	ldr	r3, [r7, #12]
 8018024:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8018028:	2b00      	cmp	r3, #0
 801802a:	d00e      	beq.n	801804a <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 801802c:	68fb      	ldr	r3, [r7, #12]
 801802e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018030:	2b00      	cmp	r3, #0
 8018032:	d10a      	bne.n	801804a <tcp_write+0x6ae>
 8018034:	68fb      	ldr	r3, [r7, #12]
 8018036:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018038:	2b00      	cmp	r3, #0
 801803a:	d106      	bne.n	801804a <tcp_write+0x6ae>
 801803c:	4b06      	ldr	r3, [pc, #24]	; (8018058 <tcp_write+0x6bc>)
 801803e:	f240 3227 	movw	r2, #807	; 0x327
 8018042:	4906      	ldr	r1, [pc, #24]	; (801805c <tcp_write+0x6c0>)
 8018044:	4806      	ldr	r0, [pc, #24]	; (8018060 <tcp_write+0x6c4>)
 8018046:	f008 fa03 	bl	8020450 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 801804a:	f04f 33ff 	mov.w	r3, #4294967295
}
 801804e:	4618      	mov	r0, r3
 8018050:	375c      	adds	r7, #92	; 0x5c
 8018052:	46bd      	mov	sp, r7
 8018054:	bd90      	pop	{r4, r7, pc}
 8018056:	bf00      	nop
 8018058:	0802580c 	.word	0x0802580c
 801805c:	08025b80 	.word	0x08025b80
 8018060:	08025860 	.word	0x08025860

08018064 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8018064:	b590      	push	{r4, r7, lr}
 8018066:	b08b      	sub	sp, #44	; 0x2c
 8018068:	af02      	add	r7, sp, #8
 801806a:	6078      	str	r0, [r7, #4]
 801806c:	460b      	mov	r3, r1
 801806e:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8018070:	2300      	movs	r3, #0
 8018072:	61fb      	str	r3, [r7, #28]
 8018074:	2300      	movs	r3, #0
 8018076:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8018078:	2300      	movs	r3, #0
 801807a:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 801807c:	687b      	ldr	r3, [r7, #4]
 801807e:	2b00      	cmp	r3, #0
 8018080:	d106      	bne.n	8018090 <tcp_split_unsent_seg+0x2c>
 8018082:	4b95      	ldr	r3, [pc, #596]	; (80182d8 <tcp_split_unsent_seg+0x274>)
 8018084:	f240 324b 	movw	r2, #843	; 0x34b
 8018088:	4994      	ldr	r1, [pc, #592]	; (80182dc <tcp_split_unsent_seg+0x278>)
 801808a:	4895      	ldr	r0, [pc, #596]	; (80182e0 <tcp_split_unsent_seg+0x27c>)
 801808c:	f008 f9e0 	bl	8020450 <iprintf>

  useg = pcb->unsent;
 8018090:	687b      	ldr	r3, [r7, #4]
 8018092:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018094:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8018096:	697b      	ldr	r3, [r7, #20]
 8018098:	2b00      	cmp	r3, #0
 801809a:	d102      	bne.n	80180a2 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 801809c:	f04f 33ff 	mov.w	r3, #4294967295
 80180a0:	e116      	b.n	80182d0 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 80180a2:	887b      	ldrh	r3, [r7, #2]
 80180a4:	2b00      	cmp	r3, #0
 80180a6:	d109      	bne.n	80180bc <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 80180a8:	4b8b      	ldr	r3, [pc, #556]	; (80182d8 <tcp_split_unsent_seg+0x274>)
 80180aa:	f240 3253 	movw	r2, #851	; 0x353
 80180ae:	498d      	ldr	r1, [pc, #564]	; (80182e4 <tcp_split_unsent_seg+0x280>)
 80180b0:	488b      	ldr	r0, [pc, #556]	; (80182e0 <tcp_split_unsent_seg+0x27c>)
 80180b2:	f008 f9cd 	bl	8020450 <iprintf>
    return ERR_VAL;
 80180b6:	f06f 0305 	mvn.w	r3, #5
 80180ba:	e109      	b.n	80182d0 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 80180bc:	697b      	ldr	r3, [r7, #20]
 80180be:	891b      	ldrh	r3, [r3, #8]
 80180c0:	887a      	ldrh	r2, [r7, #2]
 80180c2:	429a      	cmp	r2, r3
 80180c4:	d301      	bcc.n	80180ca <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 80180c6:	2300      	movs	r3, #0
 80180c8:	e102      	b.n	80182d0 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 80180ca:	687b      	ldr	r3, [r7, #4]
 80180cc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80180ce:	887a      	ldrh	r2, [r7, #2]
 80180d0:	429a      	cmp	r2, r3
 80180d2:	d906      	bls.n	80180e2 <tcp_split_unsent_seg+0x7e>
 80180d4:	4b80      	ldr	r3, [pc, #512]	; (80182d8 <tcp_split_unsent_seg+0x274>)
 80180d6:	f240 325b 	movw	r2, #859	; 0x35b
 80180da:	4983      	ldr	r1, [pc, #524]	; (80182e8 <tcp_split_unsent_seg+0x284>)
 80180dc:	4880      	ldr	r0, [pc, #512]	; (80182e0 <tcp_split_unsent_seg+0x27c>)
 80180de:	f008 f9b7 	bl	8020450 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 80180e2:	697b      	ldr	r3, [r7, #20]
 80180e4:	891b      	ldrh	r3, [r3, #8]
 80180e6:	2b00      	cmp	r3, #0
 80180e8:	d106      	bne.n	80180f8 <tcp_split_unsent_seg+0x94>
 80180ea:	4b7b      	ldr	r3, [pc, #492]	; (80182d8 <tcp_split_unsent_seg+0x274>)
 80180ec:	f44f 7257 	mov.w	r2, #860	; 0x35c
 80180f0:	497e      	ldr	r1, [pc, #504]	; (80182ec <tcp_split_unsent_seg+0x288>)
 80180f2:	487b      	ldr	r0, [pc, #492]	; (80182e0 <tcp_split_unsent_seg+0x27c>)
 80180f4:	f008 f9ac 	bl	8020450 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 80180f8:	697b      	ldr	r3, [r7, #20]
 80180fa:	7a9b      	ldrb	r3, [r3, #10]
 80180fc:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 80180fe:	7bfb      	ldrb	r3, [r7, #15]
 8018100:	009b      	lsls	r3, r3, #2
 8018102:	b2db      	uxtb	r3, r3
 8018104:	f003 0304 	and.w	r3, r3, #4
 8018108:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 801810a:	697b      	ldr	r3, [r7, #20]
 801810c:	891a      	ldrh	r2, [r3, #8]
 801810e:	887b      	ldrh	r3, [r7, #2]
 8018110:	1ad3      	subs	r3, r2, r3
 8018112:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8018114:	7bbb      	ldrb	r3, [r7, #14]
 8018116:	b29a      	uxth	r2, r3
 8018118:	89bb      	ldrh	r3, [r7, #12]
 801811a:	4413      	add	r3, r2
 801811c:	b29b      	uxth	r3, r3
 801811e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8018122:	4619      	mov	r1, r3
 8018124:	2036      	movs	r0, #54	; 0x36
 8018126:	f7fa fb53 	bl	80127d0 <pbuf_alloc>
 801812a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801812c:	693b      	ldr	r3, [r7, #16]
 801812e:	2b00      	cmp	r3, #0
 8018130:	f000 80b7 	beq.w	80182a2 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8018134:	697b      	ldr	r3, [r7, #20]
 8018136:	685b      	ldr	r3, [r3, #4]
 8018138:	891a      	ldrh	r2, [r3, #8]
 801813a:	697b      	ldr	r3, [r7, #20]
 801813c:	891b      	ldrh	r3, [r3, #8]
 801813e:	1ad3      	subs	r3, r2, r3
 8018140:	b29a      	uxth	r2, r3
 8018142:	887b      	ldrh	r3, [r7, #2]
 8018144:	4413      	add	r3, r2
 8018146:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8018148:	697b      	ldr	r3, [r7, #20]
 801814a:	6858      	ldr	r0, [r3, #4]
 801814c:	693b      	ldr	r3, [r7, #16]
 801814e:	685a      	ldr	r2, [r3, #4]
 8018150:	7bbb      	ldrb	r3, [r7, #14]
 8018152:	18d1      	adds	r1, r2, r3
 8018154:	897b      	ldrh	r3, [r7, #10]
 8018156:	89ba      	ldrh	r2, [r7, #12]
 8018158:	f7fb f856 	bl	8013208 <pbuf_copy_partial>
 801815c:	4603      	mov	r3, r0
 801815e:	461a      	mov	r2, r3
 8018160:	89bb      	ldrh	r3, [r7, #12]
 8018162:	4293      	cmp	r3, r2
 8018164:	f040 809f 	bne.w	80182a6 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8018168:	697b      	ldr	r3, [r7, #20]
 801816a:	68db      	ldr	r3, [r3, #12]
 801816c:	899b      	ldrh	r3, [r3, #12]
 801816e:	b29b      	uxth	r3, r3
 8018170:	4618      	mov	r0, r3
 8018172:	f7f9 f95b 	bl	801142c <lwip_htons>
 8018176:	4603      	mov	r3, r0
 8018178:	b2db      	uxtb	r3, r3
 801817a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801817e:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8018180:	2300      	movs	r3, #0
 8018182:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8018184:	7efb      	ldrb	r3, [r7, #27]
 8018186:	f003 0308 	and.w	r3, r3, #8
 801818a:	2b00      	cmp	r3, #0
 801818c:	d007      	beq.n	801819e <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801818e:	7efb      	ldrb	r3, [r7, #27]
 8018190:	f023 0308 	bic.w	r3, r3, #8
 8018194:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8018196:	7ebb      	ldrb	r3, [r7, #26]
 8018198:	f043 0308 	orr.w	r3, r3, #8
 801819c:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 801819e:	7efb      	ldrb	r3, [r7, #27]
 80181a0:	f003 0301 	and.w	r3, r3, #1
 80181a4:	2b00      	cmp	r3, #0
 80181a6:	d007      	beq.n	80181b8 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 80181a8:	7efb      	ldrb	r3, [r7, #27]
 80181aa:	f023 0301 	bic.w	r3, r3, #1
 80181ae:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 80181b0:	7ebb      	ldrb	r3, [r7, #26]
 80181b2:	f043 0301 	orr.w	r3, r3, #1
 80181b6:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 80181b8:	697b      	ldr	r3, [r7, #20]
 80181ba:	68db      	ldr	r3, [r3, #12]
 80181bc:	685b      	ldr	r3, [r3, #4]
 80181be:	4618      	mov	r0, r3
 80181c0:	f7f9 f949 	bl	8011456 <lwip_htonl>
 80181c4:	4602      	mov	r2, r0
 80181c6:	887b      	ldrh	r3, [r7, #2]
 80181c8:	18d1      	adds	r1, r2, r3
 80181ca:	7eba      	ldrb	r2, [r7, #26]
 80181cc:	7bfb      	ldrb	r3, [r7, #15]
 80181ce:	9300      	str	r3, [sp, #0]
 80181d0:	460b      	mov	r3, r1
 80181d2:	6939      	ldr	r1, [r7, #16]
 80181d4:	6878      	ldr	r0, [r7, #4]
 80181d6:	f7ff fa4f 	bl	8017678 <tcp_create_segment>
 80181da:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 80181dc:	69fb      	ldr	r3, [r7, #28]
 80181de:	2b00      	cmp	r3, #0
 80181e0:	d063      	beq.n	80182aa <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 80181e2:	697b      	ldr	r3, [r7, #20]
 80181e4:	685b      	ldr	r3, [r3, #4]
 80181e6:	4618      	mov	r0, r3
 80181e8:	f7fa fe96 	bl	8012f18 <pbuf_clen>
 80181ec:	4603      	mov	r3, r0
 80181ee:	461a      	mov	r2, r3
 80181f0:	687b      	ldr	r3, [r7, #4]
 80181f2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80181f6:	1a9b      	subs	r3, r3, r2
 80181f8:	b29a      	uxth	r2, r3
 80181fa:	687b      	ldr	r3, [r7, #4]
 80181fc:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8018200:	697b      	ldr	r3, [r7, #20]
 8018202:	6858      	ldr	r0, [r3, #4]
 8018204:	697b      	ldr	r3, [r7, #20]
 8018206:	685b      	ldr	r3, [r3, #4]
 8018208:	891a      	ldrh	r2, [r3, #8]
 801820a:	89bb      	ldrh	r3, [r7, #12]
 801820c:	1ad3      	subs	r3, r2, r3
 801820e:	b29b      	uxth	r3, r3
 8018210:	4619      	mov	r1, r3
 8018212:	f7fa fc3b 	bl	8012a8c <pbuf_realloc>
  useg->len -= remainder;
 8018216:	697b      	ldr	r3, [r7, #20]
 8018218:	891a      	ldrh	r2, [r3, #8]
 801821a:	89bb      	ldrh	r3, [r7, #12]
 801821c:	1ad3      	subs	r3, r2, r3
 801821e:	b29a      	uxth	r2, r3
 8018220:	697b      	ldr	r3, [r7, #20]
 8018222:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8018224:	697b      	ldr	r3, [r7, #20]
 8018226:	68db      	ldr	r3, [r3, #12]
 8018228:	899b      	ldrh	r3, [r3, #12]
 801822a:	b29c      	uxth	r4, r3
 801822c:	7efb      	ldrb	r3, [r7, #27]
 801822e:	b29b      	uxth	r3, r3
 8018230:	4618      	mov	r0, r3
 8018232:	f7f9 f8fb 	bl	801142c <lwip_htons>
 8018236:	4603      	mov	r3, r0
 8018238:	461a      	mov	r2, r3
 801823a:	697b      	ldr	r3, [r7, #20]
 801823c:	68db      	ldr	r3, [r3, #12]
 801823e:	4322      	orrs	r2, r4
 8018240:	b292      	uxth	r2, r2
 8018242:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8018244:	697b      	ldr	r3, [r7, #20]
 8018246:	685b      	ldr	r3, [r3, #4]
 8018248:	4618      	mov	r0, r3
 801824a:	f7fa fe65 	bl	8012f18 <pbuf_clen>
 801824e:	4603      	mov	r3, r0
 8018250:	461a      	mov	r2, r3
 8018252:	687b      	ldr	r3, [r7, #4]
 8018254:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8018258:	4413      	add	r3, r2
 801825a:	b29a      	uxth	r2, r3
 801825c:	687b      	ldr	r3, [r7, #4]
 801825e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8018262:	69fb      	ldr	r3, [r7, #28]
 8018264:	685b      	ldr	r3, [r3, #4]
 8018266:	4618      	mov	r0, r3
 8018268:	f7fa fe56 	bl	8012f18 <pbuf_clen>
 801826c:	4603      	mov	r3, r0
 801826e:	461a      	mov	r2, r3
 8018270:	687b      	ldr	r3, [r7, #4]
 8018272:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8018276:	4413      	add	r3, r2
 8018278:	b29a      	uxth	r2, r3
 801827a:	687b      	ldr	r3, [r7, #4]
 801827c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8018280:	697b      	ldr	r3, [r7, #20]
 8018282:	681a      	ldr	r2, [r3, #0]
 8018284:	69fb      	ldr	r3, [r7, #28]
 8018286:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8018288:	697b      	ldr	r3, [r7, #20]
 801828a:	69fa      	ldr	r2, [r7, #28]
 801828c:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801828e:	69fb      	ldr	r3, [r7, #28]
 8018290:	681b      	ldr	r3, [r3, #0]
 8018292:	2b00      	cmp	r3, #0
 8018294:	d103      	bne.n	801829e <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8018296:	687b      	ldr	r3, [r7, #4]
 8018298:	2200      	movs	r2, #0
 801829a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 801829e:	2300      	movs	r3, #0
 80182a0:	e016      	b.n	80182d0 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 80182a2:	bf00      	nop
 80182a4:	e002      	b.n	80182ac <tcp_split_unsent_seg+0x248>
    goto memerr;
 80182a6:	bf00      	nop
 80182a8:	e000      	b.n	80182ac <tcp_split_unsent_seg+0x248>
    goto memerr;
 80182aa:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 80182ac:	69fb      	ldr	r3, [r7, #28]
 80182ae:	2b00      	cmp	r3, #0
 80182b0:	d006      	beq.n	80182c0 <tcp_split_unsent_seg+0x25c>
 80182b2:	4b09      	ldr	r3, [pc, #36]	; (80182d8 <tcp_split_unsent_seg+0x274>)
 80182b4:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 80182b8:	490d      	ldr	r1, [pc, #52]	; (80182f0 <tcp_split_unsent_seg+0x28c>)
 80182ba:	4809      	ldr	r0, [pc, #36]	; (80182e0 <tcp_split_unsent_seg+0x27c>)
 80182bc:	f008 f8c8 	bl	8020450 <iprintf>
  if (p != NULL) {
 80182c0:	693b      	ldr	r3, [r7, #16]
 80182c2:	2b00      	cmp	r3, #0
 80182c4:	d002      	beq.n	80182cc <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 80182c6:	6938      	ldr	r0, [r7, #16]
 80182c8:	f7fa fd98 	bl	8012dfc <pbuf_free>
  }

  return ERR_MEM;
 80182cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80182d0:	4618      	mov	r0, r3
 80182d2:	3724      	adds	r7, #36	; 0x24
 80182d4:	46bd      	mov	sp, r7
 80182d6:	bd90      	pop	{r4, r7, pc}
 80182d8:	0802580c 	.word	0x0802580c
 80182dc:	08025ba0 	.word	0x08025ba0
 80182e0:	08025860 	.word	0x08025860
 80182e4:	08025bc4 	.word	0x08025bc4
 80182e8:	08025be8 	.word	0x08025be8
 80182ec:	08025bf8 	.word	0x08025bf8
 80182f0:	08025c08 	.word	0x08025c08

080182f4 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 80182f4:	b590      	push	{r4, r7, lr}
 80182f6:	b085      	sub	sp, #20
 80182f8:	af00      	add	r7, sp, #0
 80182fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 80182fc:	687b      	ldr	r3, [r7, #4]
 80182fe:	2b00      	cmp	r3, #0
 8018300:	d106      	bne.n	8018310 <tcp_send_fin+0x1c>
 8018302:	4b21      	ldr	r3, [pc, #132]	; (8018388 <tcp_send_fin+0x94>)
 8018304:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8018308:	4920      	ldr	r1, [pc, #128]	; (801838c <tcp_send_fin+0x98>)
 801830a:	4821      	ldr	r0, [pc, #132]	; (8018390 <tcp_send_fin+0x9c>)
 801830c:	f008 f8a0 	bl	8020450 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8018310:	687b      	ldr	r3, [r7, #4]
 8018312:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018314:	2b00      	cmp	r3, #0
 8018316:	d02e      	beq.n	8018376 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8018318:	687b      	ldr	r3, [r7, #4]
 801831a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801831c:	60fb      	str	r3, [r7, #12]
 801831e:	e002      	b.n	8018326 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8018320:	68fb      	ldr	r3, [r7, #12]
 8018322:	681b      	ldr	r3, [r3, #0]
 8018324:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8018326:	68fb      	ldr	r3, [r7, #12]
 8018328:	681b      	ldr	r3, [r3, #0]
 801832a:	2b00      	cmp	r3, #0
 801832c:	d1f8      	bne.n	8018320 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801832e:	68fb      	ldr	r3, [r7, #12]
 8018330:	68db      	ldr	r3, [r3, #12]
 8018332:	899b      	ldrh	r3, [r3, #12]
 8018334:	b29b      	uxth	r3, r3
 8018336:	4618      	mov	r0, r3
 8018338:	f7f9 f878 	bl	801142c <lwip_htons>
 801833c:	4603      	mov	r3, r0
 801833e:	b2db      	uxtb	r3, r3
 8018340:	f003 0307 	and.w	r3, r3, #7
 8018344:	2b00      	cmp	r3, #0
 8018346:	d116      	bne.n	8018376 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8018348:	68fb      	ldr	r3, [r7, #12]
 801834a:	68db      	ldr	r3, [r3, #12]
 801834c:	899b      	ldrh	r3, [r3, #12]
 801834e:	b29c      	uxth	r4, r3
 8018350:	2001      	movs	r0, #1
 8018352:	f7f9 f86b 	bl	801142c <lwip_htons>
 8018356:	4603      	mov	r3, r0
 8018358:	461a      	mov	r2, r3
 801835a:	68fb      	ldr	r3, [r7, #12]
 801835c:	68db      	ldr	r3, [r3, #12]
 801835e:	4322      	orrs	r2, r4
 8018360:	b292      	uxth	r2, r2
 8018362:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8018364:	687b      	ldr	r3, [r7, #4]
 8018366:	8b5b      	ldrh	r3, [r3, #26]
 8018368:	f043 0320 	orr.w	r3, r3, #32
 801836c:	b29a      	uxth	r2, r3
 801836e:	687b      	ldr	r3, [r7, #4]
 8018370:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8018372:	2300      	movs	r3, #0
 8018374:	e004      	b.n	8018380 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8018376:	2101      	movs	r1, #1
 8018378:	6878      	ldr	r0, [r7, #4]
 801837a:	f000 f80b 	bl	8018394 <tcp_enqueue_flags>
 801837e:	4603      	mov	r3, r0
}
 8018380:	4618      	mov	r0, r3
 8018382:	3714      	adds	r7, #20
 8018384:	46bd      	mov	sp, r7
 8018386:	bd90      	pop	{r4, r7, pc}
 8018388:	0802580c 	.word	0x0802580c
 801838c:	08025c14 	.word	0x08025c14
 8018390:	08025860 	.word	0x08025860

08018394 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8018394:	b580      	push	{r7, lr}
 8018396:	b08a      	sub	sp, #40	; 0x28
 8018398:	af02      	add	r7, sp, #8
 801839a:	6078      	str	r0, [r7, #4]
 801839c:	460b      	mov	r3, r1
 801839e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 80183a0:	2300      	movs	r3, #0
 80183a2:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 80183a4:	2300      	movs	r3, #0
 80183a6:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 80183a8:	78fb      	ldrb	r3, [r7, #3]
 80183aa:	f003 0303 	and.w	r3, r3, #3
 80183ae:	2b00      	cmp	r3, #0
 80183b0:	d106      	bne.n	80183c0 <tcp_enqueue_flags+0x2c>
 80183b2:	4b67      	ldr	r3, [pc, #412]	; (8018550 <tcp_enqueue_flags+0x1bc>)
 80183b4:	f240 4211 	movw	r2, #1041	; 0x411
 80183b8:	4966      	ldr	r1, [pc, #408]	; (8018554 <tcp_enqueue_flags+0x1c0>)
 80183ba:	4867      	ldr	r0, [pc, #412]	; (8018558 <tcp_enqueue_flags+0x1c4>)
 80183bc:	f008 f848 	bl	8020450 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 80183c0:	687b      	ldr	r3, [r7, #4]
 80183c2:	2b00      	cmp	r3, #0
 80183c4:	d106      	bne.n	80183d4 <tcp_enqueue_flags+0x40>
 80183c6:	4b62      	ldr	r3, [pc, #392]	; (8018550 <tcp_enqueue_flags+0x1bc>)
 80183c8:	f240 4213 	movw	r2, #1043	; 0x413
 80183cc:	4963      	ldr	r1, [pc, #396]	; (801855c <tcp_enqueue_flags+0x1c8>)
 80183ce:	4862      	ldr	r0, [pc, #392]	; (8018558 <tcp_enqueue_flags+0x1c4>)
 80183d0:	f008 f83e 	bl	8020450 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 80183d4:	78fb      	ldrb	r3, [r7, #3]
 80183d6:	f003 0302 	and.w	r3, r3, #2
 80183da:	2b00      	cmp	r3, #0
 80183dc:	d001      	beq.n	80183e2 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 80183de:	2301      	movs	r3, #1
 80183e0:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80183e2:	7ffb      	ldrb	r3, [r7, #31]
 80183e4:	009b      	lsls	r3, r3, #2
 80183e6:	b2db      	uxtb	r3, r3
 80183e8:	f003 0304 	and.w	r3, r3, #4
 80183ec:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80183ee:	7dfb      	ldrb	r3, [r7, #23]
 80183f0:	b29b      	uxth	r3, r3
 80183f2:	f44f 7220 	mov.w	r2, #640	; 0x280
 80183f6:	4619      	mov	r1, r3
 80183f8:	2036      	movs	r0, #54	; 0x36
 80183fa:	f7fa f9e9 	bl	80127d0 <pbuf_alloc>
 80183fe:	6138      	str	r0, [r7, #16]
 8018400:	693b      	ldr	r3, [r7, #16]
 8018402:	2b00      	cmp	r3, #0
 8018404:	d109      	bne.n	801841a <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8018406:	687b      	ldr	r3, [r7, #4]
 8018408:	8b5b      	ldrh	r3, [r3, #26]
 801840a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801840e:	b29a      	uxth	r2, r3
 8018410:	687b      	ldr	r3, [r7, #4]
 8018412:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8018414:	f04f 33ff 	mov.w	r3, #4294967295
 8018418:	e095      	b.n	8018546 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801841a:	693b      	ldr	r3, [r7, #16]
 801841c:	895a      	ldrh	r2, [r3, #10]
 801841e:	7dfb      	ldrb	r3, [r7, #23]
 8018420:	b29b      	uxth	r3, r3
 8018422:	429a      	cmp	r2, r3
 8018424:	d206      	bcs.n	8018434 <tcp_enqueue_flags+0xa0>
 8018426:	4b4a      	ldr	r3, [pc, #296]	; (8018550 <tcp_enqueue_flags+0x1bc>)
 8018428:	f240 4239 	movw	r2, #1081	; 0x439
 801842c:	494c      	ldr	r1, [pc, #304]	; (8018560 <tcp_enqueue_flags+0x1cc>)
 801842e:	484a      	ldr	r0, [pc, #296]	; (8018558 <tcp_enqueue_flags+0x1c4>)
 8018430:	f008 f80e 	bl	8020450 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8018434:	687b      	ldr	r3, [r7, #4]
 8018436:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8018438:	78fa      	ldrb	r2, [r7, #3]
 801843a:	7ffb      	ldrb	r3, [r7, #31]
 801843c:	9300      	str	r3, [sp, #0]
 801843e:	460b      	mov	r3, r1
 8018440:	6939      	ldr	r1, [r7, #16]
 8018442:	6878      	ldr	r0, [r7, #4]
 8018444:	f7ff f918 	bl	8017678 <tcp_create_segment>
 8018448:	60f8      	str	r0, [r7, #12]
 801844a:	68fb      	ldr	r3, [r7, #12]
 801844c:	2b00      	cmp	r3, #0
 801844e:	d109      	bne.n	8018464 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8018450:	687b      	ldr	r3, [r7, #4]
 8018452:	8b5b      	ldrh	r3, [r3, #26]
 8018454:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018458:	b29a      	uxth	r2, r3
 801845a:	687b      	ldr	r3, [r7, #4]
 801845c:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801845e:	f04f 33ff 	mov.w	r3, #4294967295
 8018462:	e070      	b.n	8018546 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8018464:	68fb      	ldr	r3, [r7, #12]
 8018466:	68db      	ldr	r3, [r3, #12]
 8018468:	f003 0303 	and.w	r3, r3, #3
 801846c:	2b00      	cmp	r3, #0
 801846e:	d006      	beq.n	801847e <tcp_enqueue_flags+0xea>
 8018470:	4b37      	ldr	r3, [pc, #220]	; (8018550 <tcp_enqueue_flags+0x1bc>)
 8018472:	f240 4242 	movw	r2, #1090	; 0x442
 8018476:	493b      	ldr	r1, [pc, #236]	; (8018564 <tcp_enqueue_flags+0x1d0>)
 8018478:	4837      	ldr	r0, [pc, #220]	; (8018558 <tcp_enqueue_flags+0x1c4>)
 801847a:	f007 ffe9 	bl	8020450 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801847e:	68fb      	ldr	r3, [r7, #12]
 8018480:	891b      	ldrh	r3, [r3, #8]
 8018482:	2b00      	cmp	r3, #0
 8018484:	d006      	beq.n	8018494 <tcp_enqueue_flags+0x100>
 8018486:	4b32      	ldr	r3, [pc, #200]	; (8018550 <tcp_enqueue_flags+0x1bc>)
 8018488:	f240 4243 	movw	r2, #1091	; 0x443
 801848c:	4936      	ldr	r1, [pc, #216]	; (8018568 <tcp_enqueue_flags+0x1d4>)
 801848e:	4832      	ldr	r0, [pc, #200]	; (8018558 <tcp_enqueue_flags+0x1c4>)
 8018490:	f007 ffde 	bl	8020450 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8018494:	687b      	ldr	r3, [r7, #4]
 8018496:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018498:	2b00      	cmp	r3, #0
 801849a:	d103      	bne.n	80184a4 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 801849c:	687b      	ldr	r3, [r7, #4]
 801849e:	68fa      	ldr	r2, [r7, #12]
 80184a0:	66da      	str	r2, [r3, #108]	; 0x6c
 80184a2:	e00d      	b.n	80184c0 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 80184a4:	687b      	ldr	r3, [r7, #4]
 80184a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80184a8:	61bb      	str	r3, [r7, #24]
 80184aa:	e002      	b.n	80184b2 <tcp_enqueue_flags+0x11e>
 80184ac:	69bb      	ldr	r3, [r7, #24]
 80184ae:	681b      	ldr	r3, [r3, #0]
 80184b0:	61bb      	str	r3, [r7, #24]
 80184b2:	69bb      	ldr	r3, [r7, #24]
 80184b4:	681b      	ldr	r3, [r3, #0]
 80184b6:	2b00      	cmp	r3, #0
 80184b8:	d1f8      	bne.n	80184ac <tcp_enqueue_flags+0x118>
    useg->next = seg;
 80184ba:	69bb      	ldr	r3, [r7, #24]
 80184bc:	68fa      	ldr	r2, [r7, #12]
 80184be:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 80184c0:	687b      	ldr	r3, [r7, #4]
 80184c2:	2200      	movs	r2, #0
 80184c4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 80184c8:	78fb      	ldrb	r3, [r7, #3]
 80184ca:	f003 0302 	and.w	r3, r3, #2
 80184ce:	2b00      	cmp	r3, #0
 80184d0:	d104      	bne.n	80184dc <tcp_enqueue_flags+0x148>
 80184d2:	78fb      	ldrb	r3, [r7, #3]
 80184d4:	f003 0301 	and.w	r3, r3, #1
 80184d8:	2b00      	cmp	r3, #0
 80184da:	d004      	beq.n	80184e6 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 80184dc:	687b      	ldr	r3, [r7, #4]
 80184de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80184e0:	1c5a      	adds	r2, r3, #1
 80184e2:	687b      	ldr	r3, [r7, #4]
 80184e4:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 80184e6:	78fb      	ldrb	r3, [r7, #3]
 80184e8:	f003 0301 	and.w	r3, r3, #1
 80184ec:	2b00      	cmp	r3, #0
 80184ee:	d006      	beq.n	80184fe <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 80184f0:	687b      	ldr	r3, [r7, #4]
 80184f2:	8b5b      	ldrh	r3, [r3, #26]
 80184f4:	f043 0320 	orr.w	r3, r3, #32
 80184f8:	b29a      	uxth	r2, r3
 80184fa:	687b      	ldr	r3, [r7, #4]
 80184fc:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80184fe:	68fb      	ldr	r3, [r7, #12]
 8018500:	685b      	ldr	r3, [r3, #4]
 8018502:	4618      	mov	r0, r3
 8018504:	f7fa fd08 	bl	8012f18 <pbuf_clen>
 8018508:	4603      	mov	r3, r0
 801850a:	461a      	mov	r2, r3
 801850c:	687b      	ldr	r3, [r7, #4]
 801850e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8018512:	4413      	add	r3, r2
 8018514:	b29a      	uxth	r2, r3
 8018516:	687b      	ldr	r3, [r7, #4]
 8018518:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801851c:	687b      	ldr	r3, [r7, #4]
 801851e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8018522:	2b00      	cmp	r3, #0
 8018524:	d00e      	beq.n	8018544 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8018526:	687b      	ldr	r3, [r7, #4]
 8018528:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801852a:	2b00      	cmp	r3, #0
 801852c:	d10a      	bne.n	8018544 <tcp_enqueue_flags+0x1b0>
 801852e:	687b      	ldr	r3, [r7, #4]
 8018530:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018532:	2b00      	cmp	r3, #0
 8018534:	d106      	bne.n	8018544 <tcp_enqueue_flags+0x1b0>
 8018536:	4b06      	ldr	r3, [pc, #24]	; (8018550 <tcp_enqueue_flags+0x1bc>)
 8018538:	f240 4265 	movw	r2, #1125	; 0x465
 801853c:	490b      	ldr	r1, [pc, #44]	; (801856c <tcp_enqueue_flags+0x1d8>)
 801853e:	4806      	ldr	r0, [pc, #24]	; (8018558 <tcp_enqueue_flags+0x1c4>)
 8018540:	f007 ff86 	bl	8020450 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8018544:	2300      	movs	r3, #0
}
 8018546:	4618      	mov	r0, r3
 8018548:	3720      	adds	r7, #32
 801854a:	46bd      	mov	sp, r7
 801854c:	bd80      	pop	{r7, pc}
 801854e:	bf00      	nop
 8018550:	0802580c 	.word	0x0802580c
 8018554:	08025c30 	.word	0x08025c30
 8018558:	08025860 	.word	0x08025860
 801855c:	08025c88 	.word	0x08025c88
 8018560:	08025ca8 	.word	0x08025ca8
 8018564:	08025ce4 	.word	0x08025ce4
 8018568:	08025cfc 	.word	0x08025cfc
 801856c:	08025d28 	.word	0x08025d28

08018570 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8018570:	b5b0      	push	{r4, r5, r7, lr}
 8018572:	b08a      	sub	sp, #40	; 0x28
 8018574:	af00      	add	r7, sp, #0
 8018576:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8018578:	687b      	ldr	r3, [r7, #4]
 801857a:	2b00      	cmp	r3, #0
 801857c:	d106      	bne.n	801858c <tcp_output+0x1c>
 801857e:	4b8a      	ldr	r3, [pc, #552]	; (80187a8 <tcp_output+0x238>)
 8018580:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8018584:	4989      	ldr	r1, [pc, #548]	; (80187ac <tcp_output+0x23c>)
 8018586:	488a      	ldr	r0, [pc, #552]	; (80187b0 <tcp_output+0x240>)
 8018588:	f007 ff62 	bl	8020450 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 801858c:	687b      	ldr	r3, [r7, #4]
 801858e:	7d1b      	ldrb	r3, [r3, #20]
 8018590:	2b01      	cmp	r3, #1
 8018592:	d106      	bne.n	80185a2 <tcp_output+0x32>
 8018594:	4b84      	ldr	r3, [pc, #528]	; (80187a8 <tcp_output+0x238>)
 8018596:	f240 42e3 	movw	r2, #1251	; 0x4e3
 801859a:	4986      	ldr	r1, [pc, #536]	; (80187b4 <tcp_output+0x244>)
 801859c:	4884      	ldr	r0, [pc, #528]	; (80187b0 <tcp_output+0x240>)
 801859e:	f007 ff57 	bl	8020450 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 80185a2:	4b85      	ldr	r3, [pc, #532]	; (80187b8 <tcp_output+0x248>)
 80185a4:	681b      	ldr	r3, [r3, #0]
 80185a6:	687a      	ldr	r2, [r7, #4]
 80185a8:	429a      	cmp	r2, r3
 80185aa:	d101      	bne.n	80185b0 <tcp_output+0x40>
    return ERR_OK;
 80185ac:	2300      	movs	r3, #0
 80185ae:	e1ce      	b.n	801894e <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 80185b0:	687b      	ldr	r3, [r7, #4]
 80185b2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80185b6:	687b      	ldr	r3, [r7, #4]
 80185b8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80185bc:	4293      	cmp	r3, r2
 80185be:	bf28      	it	cs
 80185c0:	4613      	movcs	r3, r2
 80185c2:	b29b      	uxth	r3, r3
 80185c4:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 80185c6:	687b      	ldr	r3, [r7, #4]
 80185c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80185ca:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 80185cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80185ce:	2b00      	cmp	r3, #0
 80185d0:	d10b      	bne.n	80185ea <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 80185d2:	687b      	ldr	r3, [r7, #4]
 80185d4:	8b5b      	ldrh	r3, [r3, #26]
 80185d6:	f003 0302 	and.w	r3, r3, #2
 80185da:	2b00      	cmp	r3, #0
 80185dc:	f000 81aa 	beq.w	8018934 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 80185e0:	6878      	ldr	r0, [r7, #4]
 80185e2:	f000 fdcb 	bl	801917c <tcp_send_empty_ack>
 80185e6:	4603      	mov	r3, r0
 80185e8:	e1b1      	b.n	801894e <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 80185ea:	6879      	ldr	r1, [r7, #4]
 80185ec:	687b      	ldr	r3, [r7, #4]
 80185ee:	3304      	adds	r3, #4
 80185f0:	461a      	mov	r2, r3
 80185f2:	6878      	ldr	r0, [r7, #4]
 80185f4:	f7ff f824 	bl	8017640 <tcp_route>
 80185f8:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 80185fa:	697b      	ldr	r3, [r7, #20]
 80185fc:	2b00      	cmp	r3, #0
 80185fe:	d102      	bne.n	8018606 <tcp_output+0x96>
    return ERR_RTE;
 8018600:	f06f 0303 	mvn.w	r3, #3
 8018604:	e1a3      	b.n	801894e <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8018606:	687b      	ldr	r3, [r7, #4]
 8018608:	2b00      	cmp	r3, #0
 801860a:	d003      	beq.n	8018614 <tcp_output+0xa4>
 801860c:	687b      	ldr	r3, [r7, #4]
 801860e:	681b      	ldr	r3, [r3, #0]
 8018610:	2b00      	cmp	r3, #0
 8018612:	d111      	bne.n	8018638 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8018614:	697b      	ldr	r3, [r7, #20]
 8018616:	2b00      	cmp	r3, #0
 8018618:	d002      	beq.n	8018620 <tcp_output+0xb0>
 801861a:	697b      	ldr	r3, [r7, #20]
 801861c:	3304      	adds	r3, #4
 801861e:	e000      	b.n	8018622 <tcp_output+0xb2>
 8018620:	2300      	movs	r3, #0
 8018622:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8018624:	693b      	ldr	r3, [r7, #16]
 8018626:	2b00      	cmp	r3, #0
 8018628:	d102      	bne.n	8018630 <tcp_output+0xc0>
      return ERR_RTE;
 801862a:	f06f 0303 	mvn.w	r3, #3
 801862e:	e18e      	b.n	801894e <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8018630:	693b      	ldr	r3, [r7, #16]
 8018632:	681a      	ldr	r2, [r3, #0]
 8018634:	687b      	ldr	r3, [r7, #4]
 8018636:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8018638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801863a:	68db      	ldr	r3, [r3, #12]
 801863c:	685b      	ldr	r3, [r3, #4]
 801863e:	4618      	mov	r0, r3
 8018640:	f7f8 ff09 	bl	8011456 <lwip_htonl>
 8018644:	4602      	mov	r2, r0
 8018646:	687b      	ldr	r3, [r7, #4]
 8018648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801864a:	1ad3      	subs	r3, r2, r3
 801864c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801864e:	8912      	ldrh	r2, [r2, #8]
 8018650:	4413      	add	r3, r2
 8018652:	69ba      	ldr	r2, [r7, #24]
 8018654:	429a      	cmp	r2, r3
 8018656:	d227      	bcs.n	80186a8 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8018658:	687b      	ldr	r3, [r7, #4]
 801865a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801865e:	461a      	mov	r2, r3
 8018660:	69bb      	ldr	r3, [r7, #24]
 8018662:	4293      	cmp	r3, r2
 8018664:	d114      	bne.n	8018690 <tcp_output+0x120>
 8018666:	687b      	ldr	r3, [r7, #4]
 8018668:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801866a:	2b00      	cmp	r3, #0
 801866c:	d110      	bne.n	8018690 <tcp_output+0x120>
 801866e:	687b      	ldr	r3, [r7, #4]
 8018670:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8018674:	2b00      	cmp	r3, #0
 8018676:	d10b      	bne.n	8018690 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8018678:	687b      	ldr	r3, [r7, #4]
 801867a:	2200      	movs	r2, #0
 801867c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8018680:	687b      	ldr	r3, [r7, #4]
 8018682:	2201      	movs	r2, #1
 8018684:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8018688:	687b      	ldr	r3, [r7, #4]
 801868a:	2200      	movs	r2, #0
 801868c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8018690:	687b      	ldr	r3, [r7, #4]
 8018692:	8b5b      	ldrh	r3, [r3, #26]
 8018694:	f003 0302 	and.w	r3, r3, #2
 8018698:	2b00      	cmp	r3, #0
 801869a:	f000 814d 	beq.w	8018938 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 801869e:	6878      	ldr	r0, [r7, #4]
 80186a0:	f000 fd6c 	bl	801917c <tcp_send_empty_ack>
 80186a4:	4603      	mov	r3, r0
 80186a6:	e152      	b.n	801894e <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 80186a8:	687b      	ldr	r3, [r7, #4]
 80186aa:	2200      	movs	r2, #0
 80186ac:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 80186b0:	687b      	ldr	r3, [r7, #4]
 80186b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80186b4:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 80186b6:	6a3b      	ldr	r3, [r7, #32]
 80186b8:	2b00      	cmp	r3, #0
 80186ba:	f000 811c 	beq.w	80188f6 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 80186be:	e002      	b.n	80186c6 <tcp_output+0x156>
 80186c0:	6a3b      	ldr	r3, [r7, #32]
 80186c2:	681b      	ldr	r3, [r3, #0]
 80186c4:	623b      	str	r3, [r7, #32]
 80186c6:	6a3b      	ldr	r3, [r7, #32]
 80186c8:	681b      	ldr	r3, [r3, #0]
 80186ca:	2b00      	cmp	r3, #0
 80186cc:	d1f8      	bne.n	80186c0 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 80186ce:	e112      	b.n	80188f6 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 80186d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80186d2:	68db      	ldr	r3, [r3, #12]
 80186d4:	899b      	ldrh	r3, [r3, #12]
 80186d6:	b29b      	uxth	r3, r3
 80186d8:	4618      	mov	r0, r3
 80186da:	f7f8 fea7 	bl	801142c <lwip_htons>
 80186de:	4603      	mov	r3, r0
 80186e0:	b2db      	uxtb	r3, r3
 80186e2:	f003 0304 	and.w	r3, r3, #4
 80186e6:	2b00      	cmp	r3, #0
 80186e8:	d006      	beq.n	80186f8 <tcp_output+0x188>
 80186ea:	4b2f      	ldr	r3, [pc, #188]	; (80187a8 <tcp_output+0x238>)
 80186ec:	f240 5236 	movw	r2, #1334	; 0x536
 80186f0:	4932      	ldr	r1, [pc, #200]	; (80187bc <tcp_output+0x24c>)
 80186f2:	482f      	ldr	r0, [pc, #188]	; (80187b0 <tcp_output+0x240>)
 80186f4:	f007 feac 	bl	8020450 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80186f8:	687b      	ldr	r3, [r7, #4]
 80186fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80186fc:	2b00      	cmp	r3, #0
 80186fe:	d01f      	beq.n	8018740 <tcp_output+0x1d0>
 8018700:	687b      	ldr	r3, [r7, #4]
 8018702:	8b5b      	ldrh	r3, [r3, #26]
 8018704:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8018708:	2b00      	cmp	r3, #0
 801870a:	d119      	bne.n	8018740 <tcp_output+0x1d0>
 801870c:	687b      	ldr	r3, [r7, #4]
 801870e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018710:	2b00      	cmp	r3, #0
 8018712:	d00b      	beq.n	801872c <tcp_output+0x1bc>
 8018714:	687b      	ldr	r3, [r7, #4]
 8018716:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018718:	681b      	ldr	r3, [r3, #0]
 801871a:	2b00      	cmp	r3, #0
 801871c:	d110      	bne.n	8018740 <tcp_output+0x1d0>
 801871e:	687b      	ldr	r3, [r7, #4]
 8018720:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018722:	891a      	ldrh	r2, [r3, #8]
 8018724:	687b      	ldr	r3, [r7, #4]
 8018726:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018728:	429a      	cmp	r2, r3
 801872a:	d209      	bcs.n	8018740 <tcp_output+0x1d0>
 801872c:	687b      	ldr	r3, [r7, #4]
 801872e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8018732:	2b00      	cmp	r3, #0
 8018734:	d004      	beq.n	8018740 <tcp_output+0x1d0>
 8018736:	687b      	ldr	r3, [r7, #4]
 8018738:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801873c:	2b08      	cmp	r3, #8
 801873e:	d901      	bls.n	8018744 <tcp_output+0x1d4>
 8018740:	2301      	movs	r3, #1
 8018742:	e000      	b.n	8018746 <tcp_output+0x1d6>
 8018744:	2300      	movs	r3, #0
 8018746:	2b00      	cmp	r3, #0
 8018748:	d106      	bne.n	8018758 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801874a:	687b      	ldr	r3, [r7, #4]
 801874c:	8b5b      	ldrh	r3, [r3, #26]
 801874e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8018752:	2b00      	cmp	r3, #0
 8018754:	f000 80e4 	beq.w	8018920 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8018758:	687b      	ldr	r3, [r7, #4]
 801875a:	7d1b      	ldrb	r3, [r3, #20]
 801875c:	2b02      	cmp	r3, #2
 801875e:	d00d      	beq.n	801877c <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8018760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018762:	68db      	ldr	r3, [r3, #12]
 8018764:	899b      	ldrh	r3, [r3, #12]
 8018766:	b29c      	uxth	r4, r3
 8018768:	2010      	movs	r0, #16
 801876a:	f7f8 fe5f 	bl	801142c <lwip_htons>
 801876e:	4603      	mov	r3, r0
 8018770:	461a      	mov	r2, r3
 8018772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018774:	68db      	ldr	r3, [r3, #12]
 8018776:	4322      	orrs	r2, r4
 8018778:	b292      	uxth	r2, r2
 801877a:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 801877c:	697a      	ldr	r2, [r7, #20]
 801877e:	6879      	ldr	r1, [r7, #4]
 8018780:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018782:	f000 f909 	bl	8018998 <tcp_output_segment>
 8018786:	4603      	mov	r3, r0
 8018788:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 801878a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801878e:	2b00      	cmp	r3, #0
 8018790:	d016      	beq.n	80187c0 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8018792:	687b      	ldr	r3, [r7, #4]
 8018794:	8b5b      	ldrh	r3, [r3, #26]
 8018796:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801879a:	b29a      	uxth	r2, r3
 801879c:	687b      	ldr	r3, [r7, #4]
 801879e:	835a      	strh	r2, [r3, #26]
      return err;
 80187a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80187a4:	e0d3      	b.n	801894e <tcp_output+0x3de>
 80187a6:	bf00      	nop
 80187a8:	0802580c 	.word	0x0802580c
 80187ac:	08025d50 	.word	0x08025d50
 80187b0:	08025860 	.word	0x08025860
 80187b4:	08025d68 	.word	0x08025d68
 80187b8:	24007e24 	.word	0x24007e24
 80187bc:	08025d90 	.word	0x08025d90
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 80187c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80187c2:	681a      	ldr	r2, [r3, #0]
 80187c4:	687b      	ldr	r3, [r7, #4]
 80187c6:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 80187c8:	687b      	ldr	r3, [r7, #4]
 80187ca:	7d1b      	ldrb	r3, [r3, #20]
 80187cc:	2b02      	cmp	r3, #2
 80187ce:	d006      	beq.n	80187de <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80187d0:	687b      	ldr	r3, [r7, #4]
 80187d2:	8b5b      	ldrh	r3, [r3, #26]
 80187d4:	f023 0303 	bic.w	r3, r3, #3
 80187d8:	b29a      	uxth	r2, r3
 80187da:	687b      	ldr	r3, [r7, #4]
 80187dc:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80187de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80187e0:	68db      	ldr	r3, [r3, #12]
 80187e2:	685b      	ldr	r3, [r3, #4]
 80187e4:	4618      	mov	r0, r3
 80187e6:	f7f8 fe36 	bl	8011456 <lwip_htonl>
 80187ea:	4604      	mov	r4, r0
 80187ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80187ee:	891b      	ldrh	r3, [r3, #8]
 80187f0:	461d      	mov	r5, r3
 80187f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80187f4:	68db      	ldr	r3, [r3, #12]
 80187f6:	899b      	ldrh	r3, [r3, #12]
 80187f8:	b29b      	uxth	r3, r3
 80187fa:	4618      	mov	r0, r3
 80187fc:	f7f8 fe16 	bl	801142c <lwip_htons>
 8018800:	4603      	mov	r3, r0
 8018802:	b2db      	uxtb	r3, r3
 8018804:	f003 0303 	and.w	r3, r3, #3
 8018808:	2b00      	cmp	r3, #0
 801880a:	d001      	beq.n	8018810 <tcp_output+0x2a0>
 801880c:	2301      	movs	r3, #1
 801880e:	e000      	b.n	8018812 <tcp_output+0x2a2>
 8018810:	2300      	movs	r3, #0
 8018812:	442b      	add	r3, r5
 8018814:	4423      	add	r3, r4
 8018816:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8018818:	687b      	ldr	r3, [r7, #4]
 801881a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801881c:	68bb      	ldr	r3, [r7, #8]
 801881e:	1ad3      	subs	r3, r2, r3
 8018820:	2b00      	cmp	r3, #0
 8018822:	da02      	bge.n	801882a <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8018824:	687b      	ldr	r3, [r7, #4]
 8018826:	68ba      	ldr	r2, [r7, #8]
 8018828:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 801882a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801882c:	891b      	ldrh	r3, [r3, #8]
 801882e:	461c      	mov	r4, r3
 8018830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018832:	68db      	ldr	r3, [r3, #12]
 8018834:	899b      	ldrh	r3, [r3, #12]
 8018836:	b29b      	uxth	r3, r3
 8018838:	4618      	mov	r0, r3
 801883a:	f7f8 fdf7 	bl	801142c <lwip_htons>
 801883e:	4603      	mov	r3, r0
 8018840:	b2db      	uxtb	r3, r3
 8018842:	f003 0303 	and.w	r3, r3, #3
 8018846:	2b00      	cmp	r3, #0
 8018848:	d001      	beq.n	801884e <tcp_output+0x2de>
 801884a:	2301      	movs	r3, #1
 801884c:	e000      	b.n	8018850 <tcp_output+0x2e0>
 801884e:	2300      	movs	r3, #0
 8018850:	4423      	add	r3, r4
 8018852:	2b00      	cmp	r3, #0
 8018854:	d049      	beq.n	80188ea <tcp_output+0x37a>
      seg->next = NULL;
 8018856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018858:	2200      	movs	r2, #0
 801885a:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 801885c:	687b      	ldr	r3, [r7, #4]
 801885e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018860:	2b00      	cmp	r3, #0
 8018862:	d105      	bne.n	8018870 <tcp_output+0x300>
        pcb->unacked = seg;
 8018864:	687b      	ldr	r3, [r7, #4]
 8018866:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018868:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 801886a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801886c:	623b      	str	r3, [r7, #32]
 801886e:	e03f      	b.n	80188f0 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8018870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018872:	68db      	ldr	r3, [r3, #12]
 8018874:	685b      	ldr	r3, [r3, #4]
 8018876:	4618      	mov	r0, r3
 8018878:	f7f8 fded 	bl	8011456 <lwip_htonl>
 801887c:	4604      	mov	r4, r0
 801887e:	6a3b      	ldr	r3, [r7, #32]
 8018880:	68db      	ldr	r3, [r3, #12]
 8018882:	685b      	ldr	r3, [r3, #4]
 8018884:	4618      	mov	r0, r3
 8018886:	f7f8 fde6 	bl	8011456 <lwip_htonl>
 801888a:	4603      	mov	r3, r0
 801888c:	1ae3      	subs	r3, r4, r3
 801888e:	2b00      	cmp	r3, #0
 8018890:	da24      	bge.n	80188dc <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8018892:	687b      	ldr	r3, [r7, #4]
 8018894:	3370      	adds	r3, #112	; 0x70
 8018896:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8018898:	e002      	b.n	80188a0 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 801889a:	69fb      	ldr	r3, [r7, #28]
 801889c:	681b      	ldr	r3, [r3, #0]
 801889e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80188a0:	69fb      	ldr	r3, [r7, #28]
 80188a2:	681b      	ldr	r3, [r3, #0]
 80188a4:	2b00      	cmp	r3, #0
 80188a6:	d011      	beq.n	80188cc <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80188a8:	69fb      	ldr	r3, [r7, #28]
 80188aa:	681b      	ldr	r3, [r3, #0]
 80188ac:	68db      	ldr	r3, [r3, #12]
 80188ae:	685b      	ldr	r3, [r3, #4]
 80188b0:	4618      	mov	r0, r3
 80188b2:	f7f8 fdd0 	bl	8011456 <lwip_htonl>
 80188b6:	4604      	mov	r4, r0
 80188b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80188ba:	68db      	ldr	r3, [r3, #12]
 80188bc:	685b      	ldr	r3, [r3, #4]
 80188be:	4618      	mov	r0, r3
 80188c0:	f7f8 fdc9 	bl	8011456 <lwip_htonl>
 80188c4:	4603      	mov	r3, r0
 80188c6:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 80188c8:	2b00      	cmp	r3, #0
 80188ca:	dbe6      	blt.n	801889a <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 80188cc:	69fb      	ldr	r3, [r7, #28]
 80188ce:	681a      	ldr	r2, [r3, #0]
 80188d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80188d2:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 80188d4:	69fb      	ldr	r3, [r7, #28]
 80188d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80188d8:	601a      	str	r2, [r3, #0]
 80188da:	e009      	b.n	80188f0 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 80188dc:	6a3b      	ldr	r3, [r7, #32]
 80188de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80188e0:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 80188e2:	6a3b      	ldr	r3, [r7, #32]
 80188e4:	681b      	ldr	r3, [r3, #0]
 80188e6:	623b      	str	r3, [r7, #32]
 80188e8:	e002      	b.n	80188f0 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 80188ea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80188ec:	f7fb ff19 	bl	8014722 <tcp_seg_free>
    }
    seg = pcb->unsent;
 80188f0:	687b      	ldr	r3, [r7, #4]
 80188f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80188f4:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 80188f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80188f8:	2b00      	cmp	r3, #0
 80188fa:	d012      	beq.n	8018922 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 80188fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80188fe:	68db      	ldr	r3, [r3, #12]
 8018900:	685b      	ldr	r3, [r3, #4]
 8018902:	4618      	mov	r0, r3
 8018904:	f7f8 fda7 	bl	8011456 <lwip_htonl>
 8018908:	4602      	mov	r2, r0
 801890a:	687b      	ldr	r3, [r7, #4]
 801890c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801890e:	1ad3      	subs	r3, r2, r3
 8018910:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018912:	8912      	ldrh	r2, [r2, #8]
 8018914:	4413      	add	r3, r2
  while (seg != NULL &&
 8018916:	69ba      	ldr	r2, [r7, #24]
 8018918:	429a      	cmp	r2, r3
 801891a:	f4bf aed9 	bcs.w	80186d0 <tcp_output+0x160>
 801891e:	e000      	b.n	8018922 <tcp_output+0x3b2>
      break;
 8018920:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8018922:	687b      	ldr	r3, [r7, #4]
 8018924:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018926:	2b00      	cmp	r3, #0
 8018928:	d108      	bne.n	801893c <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801892a:	687b      	ldr	r3, [r7, #4]
 801892c:	2200      	movs	r2, #0
 801892e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8018932:	e004      	b.n	801893e <tcp_output+0x3ce>
    goto output_done;
 8018934:	bf00      	nop
 8018936:	e002      	b.n	801893e <tcp_output+0x3ce>
    goto output_done;
 8018938:	bf00      	nop
 801893a:	e000      	b.n	801893e <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 801893c:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801893e:	687b      	ldr	r3, [r7, #4]
 8018940:	8b5b      	ldrh	r3, [r3, #26]
 8018942:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8018946:	b29a      	uxth	r2, r3
 8018948:	687b      	ldr	r3, [r7, #4]
 801894a:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 801894c:	2300      	movs	r3, #0
}
 801894e:	4618      	mov	r0, r3
 8018950:	3728      	adds	r7, #40	; 0x28
 8018952:	46bd      	mov	sp, r7
 8018954:	bdb0      	pop	{r4, r5, r7, pc}
 8018956:	bf00      	nop

08018958 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8018958:	b580      	push	{r7, lr}
 801895a:	b082      	sub	sp, #8
 801895c:	af00      	add	r7, sp, #0
 801895e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8018960:	687b      	ldr	r3, [r7, #4]
 8018962:	2b00      	cmp	r3, #0
 8018964:	d106      	bne.n	8018974 <tcp_output_segment_busy+0x1c>
 8018966:	4b09      	ldr	r3, [pc, #36]	; (801898c <tcp_output_segment_busy+0x34>)
 8018968:	f240 529a 	movw	r2, #1434	; 0x59a
 801896c:	4908      	ldr	r1, [pc, #32]	; (8018990 <tcp_output_segment_busy+0x38>)
 801896e:	4809      	ldr	r0, [pc, #36]	; (8018994 <tcp_output_segment_busy+0x3c>)
 8018970:	f007 fd6e 	bl	8020450 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8018974:	687b      	ldr	r3, [r7, #4]
 8018976:	685b      	ldr	r3, [r3, #4]
 8018978:	7b9b      	ldrb	r3, [r3, #14]
 801897a:	2b01      	cmp	r3, #1
 801897c:	d001      	beq.n	8018982 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801897e:	2301      	movs	r3, #1
 8018980:	e000      	b.n	8018984 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8018982:	2300      	movs	r3, #0
}
 8018984:	4618      	mov	r0, r3
 8018986:	3708      	adds	r7, #8
 8018988:	46bd      	mov	sp, r7
 801898a:	bd80      	pop	{r7, pc}
 801898c:	0802580c 	.word	0x0802580c
 8018990:	08025da8 	.word	0x08025da8
 8018994:	08025860 	.word	0x08025860

08018998 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8018998:	b5b0      	push	{r4, r5, r7, lr}
 801899a:	b08c      	sub	sp, #48	; 0x30
 801899c:	af04      	add	r7, sp, #16
 801899e:	60f8      	str	r0, [r7, #12]
 80189a0:	60b9      	str	r1, [r7, #8]
 80189a2:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 80189a4:	68fb      	ldr	r3, [r7, #12]
 80189a6:	2b00      	cmp	r3, #0
 80189a8:	d106      	bne.n	80189b8 <tcp_output_segment+0x20>
 80189aa:	4b64      	ldr	r3, [pc, #400]	; (8018b3c <tcp_output_segment+0x1a4>)
 80189ac:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 80189b0:	4963      	ldr	r1, [pc, #396]	; (8018b40 <tcp_output_segment+0x1a8>)
 80189b2:	4864      	ldr	r0, [pc, #400]	; (8018b44 <tcp_output_segment+0x1ac>)
 80189b4:	f007 fd4c 	bl	8020450 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 80189b8:	68bb      	ldr	r3, [r7, #8]
 80189ba:	2b00      	cmp	r3, #0
 80189bc:	d106      	bne.n	80189cc <tcp_output_segment+0x34>
 80189be:	4b5f      	ldr	r3, [pc, #380]	; (8018b3c <tcp_output_segment+0x1a4>)
 80189c0:	f240 52b9 	movw	r2, #1465	; 0x5b9
 80189c4:	4960      	ldr	r1, [pc, #384]	; (8018b48 <tcp_output_segment+0x1b0>)
 80189c6:	485f      	ldr	r0, [pc, #380]	; (8018b44 <tcp_output_segment+0x1ac>)
 80189c8:	f007 fd42 	bl	8020450 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 80189cc:	687b      	ldr	r3, [r7, #4]
 80189ce:	2b00      	cmp	r3, #0
 80189d0:	d106      	bne.n	80189e0 <tcp_output_segment+0x48>
 80189d2:	4b5a      	ldr	r3, [pc, #360]	; (8018b3c <tcp_output_segment+0x1a4>)
 80189d4:	f240 52ba 	movw	r2, #1466	; 0x5ba
 80189d8:	495c      	ldr	r1, [pc, #368]	; (8018b4c <tcp_output_segment+0x1b4>)
 80189da:	485a      	ldr	r0, [pc, #360]	; (8018b44 <tcp_output_segment+0x1ac>)
 80189dc:	f007 fd38 	bl	8020450 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 80189e0:	68f8      	ldr	r0, [r7, #12]
 80189e2:	f7ff ffb9 	bl	8018958 <tcp_output_segment_busy>
 80189e6:	4603      	mov	r3, r0
 80189e8:	2b00      	cmp	r3, #0
 80189ea:	d001      	beq.n	80189f0 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 80189ec:	2300      	movs	r3, #0
 80189ee:	e0a1      	b.n	8018b34 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 80189f0:	68bb      	ldr	r3, [r7, #8]
 80189f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80189f4:	68fb      	ldr	r3, [r7, #12]
 80189f6:	68dc      	ldr	r4, [r3, #12]
 80189f8:	4610      	mov	r0, r2
 80189fa:	f7f8 fd2c 	bl	8011456 <lwip_htonl>
 80189fe:	4603      	mov	r3, r0
 8018a00:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8018a02:	68bb      	ldr	r3, [r7, #8]
 8018a04:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8018a06:	68fb      	ldr	r3, [r7, #12]
 8018a08:	68dc      	ldr	r4, [r3, #12]
 8018a0a:	4610      	mov	r0, r2
 8018a0c:	f7f8 fd0e 	bl	801142c <lwip_htons>
 8018a10:	4603      	mov	r3, r0
 8018a12:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8018a14:	68bb      	ldr	r3, [r7, #8]
 8018a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018a18:	68ba      	ldr	r2, [r7, #8]
 8018a1a:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8018a1c:	441a      	add	r2, r3
 8018a1e:	68bb      	ldr	r3, [r7, #8]
 8018a20:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8018a22:	68fb      	ldr	r3, [r7, #12]
 8018a24:	68db      	ldr	r3, [r3, #12]
 8018a26:	3314      	adds	r3, #20
 8018a28:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8018a2a:	68fb      	ldr	r3, [r7, #12]
 8018a2c:	7a9b      	ldrb	r3, [r3, #10]
 8018a2e:	f003 0301 	and.w	r3, r3, #1
 8018a32:	2b00      	cmp	r3, #0
 8018a34:	d015      	beq.n	8018a62 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8018a36:	68bb      	ldr	r3, [r7, #8]
 8018a38:	3304      	adds	r3, #4
 8018a3a:	461a      	mov	r2, r3
 8018a3c:	6879      	ldr	r1, [r7, #4]
 8018a3e:	f44f 7006 	mov.w	r0, #536	; 0x218
 8018a42:	f7fc fa33 	bl	8014eac <tcp_eff_send_mss_netif>
 8018a46:	4603      	mov	r3, r0
 8018a48:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8018a4a:	8b7b      	ldrh	r3, [r7, #26]
 8018a4c:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8018a50:	4618      	mov	r0, r3
 8018a52:	f7f8 fd00 	bl	8011456 <lwip_htonl>
 8018a56:	4602      	mov	r2, r0
 8018a58:	69fb      	ldr	r3, [r7, #28]
 8018a5a:	601a      	str	r2, [r3, #0]
    opts += 1;
 8018a5c:	69fb      	ldr	r3, [r7, #28]
 8018a5e:	3304      	adds	r3, #4
 8018a60:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8018a62:	68bb      	ldr	r3, [r7, #8]
 8018a64:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8018a68:	2b00      	cmp	r3, #0
 8018a6a:	da02      	bge.n	8018a72 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8018a6c:	68bb      	ldr	r3, [r7, #8]
 8018a6e:	2200      	movs	r2, #0
 8018a70:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8018a72:	68bb      	ldr	r3, [r7, #8]
 8018a74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018a76:	2b00      	cmp	r3, #0
 8018a78:	d10c      	bne.n	8018a94 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8018a7a:	4b35      	ldr	r3, [pc, #212]	; (8018b50 <tcp_output_segment+0x1b8>)
 8018a7c:	681a      	ldr	r2, [r3, #0]
 8018a7e:	68bb      	ldr	r3, [r7, #8]
 8018a80:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8018a82:	68fb      	ldr	r3, [r7, #12]
 8018a84:	68db      	ldr	r3, [r3, #12]
 8018a86:	685b      	ldr	r3, [r3, #4]
 8018a88:	4618      	mov	r0, r3
 8018a8a:	f7f8 fce4 	bl	8011456 <lwip_htonl>
 8018a8e:	4602      	mov	r2, r0
 8018a90:	68bb      	ldr	r3, [r7, #8]
 8018a92:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8018a94:	68fb      	ldr	r3, [r7, #12]
 8018a96:	68da      	ldr	r2, [r3, #12]
 8018a98:	68fb      	ldr	r3, [r7, #12]
 8018a9a:	685b      	ldr	r3, [r3, #4]
 8018a9c:	685b      	ldr	r3, [r3, #4]
 8018a9e:	1ad3      	subs	r3, r2, r3
 8018aa0:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8018aa2:	68fb      	ldr	r3, [r7, #12]
 8018aa4:	685b      	ldr	r3, [r3, #4]
 8018aa6:	8959      	ldrh	r1, [r3, #10]
 8018aa8:	68fb      	ldr	r3, [r7, #12]
 8018aaa:	685b      	ldr	r3, [r3, #4]
 8018aac:	8b3a      	ldrh	r2, [r7, #24]
 8018aae:	1a8a      	subs	r2, r1, r2
 8018ab0:	b292      	uxth	r2, r2
 8018ab2:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8018ab4:	68fb      	ldr	r3, [r7, #12]
 8018ab6:	685b      	ldr	r3, [r3, #4]
 8018ab8:	8919      	ldrh	r1, [r3, #8]
 8018aba:	68fb      	ldr	r3, [r7, #12]
 8018abc:	685b      	ldr	r3, [r3, #4]
 8018abe:	8b3a      	ldrh	r2, [r7, #24]
 8018ac0:	1a8a      	subs	r2, r1, r2
 8018ac2:	b292      	uxth	r2, r2
 8018ac4:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8018ac6:	68fb      	ldr	r3, [r7, #12]
 8018ac8:	685b      	ldr	r3, [r3, #4]
 8018aca:	68fa      	ldr	r2, [r7, #12]
 8018acc:	68d2      	ldr	r2, [r2, #12]
 8018ace:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8018ad0:	68fb      	ldr	r3, [r7, #12]
 8018ad2:	68db      	ldr	r3, [r3, #12]
 8018ad4:	2200      	movs	r2, #0
 8018ad6:	741a      	strb	r2, [r3, #16]
 8018ad8:	2200      	movs	r2, #0
 8018ada:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8018adc:	68fb      	ldr	r3, [r7, #12]
 8018ade:	68da      	ldr	r2, [r3, #12]
 8018ae0:	68fb      	ldr	r3, [r7, #12]
 8018ae2:	7a9b      	ldrb	r3, [r3, #10]
 8018ae4:	f003 0301 	and.w	r3, r3, #1
 8018ae8:	2b00      	cmp	r3, #0
 8018aea:	d001      	beq.n	8018af0 <tcp_output_segment+0x158>
 8018aec:	2318      	movs	r3, #24
 8018aee:	e000      	b.n	8018af2 <tcp_output_segment+0x15a>
 8018af0:	2314      	movs	r3, #20
 8018af2:	4413      	add	r3, r2
 8018af4:	69fa      	ldr	r2, [r7, #28]
 8018af6:	429a      	cmp	r2, r3
 8018af8:	d006      	beq.n	8018b08 <tcp_output_segment+0x170>
 8018afa:	4b10      	ldr	r3, [pc, #64]	; (8018b3c <tcp_output_segment+0x1a4>)
 8018afc:	f240 621c 	movw	r2, #1564	; 0x61c
 8018b00:	4914      	ldr	r1, [pc, #80]	; (8018b54 <tcp_output_segment+0x1bc>)
 8018b02:	4810      	ldr	r0, [pc, #64]	; (8018b44 <tcp_output_segment+0x1ac>)
 8018b04:	f007 fca4 	bl	8020450 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8018b08:	68fb      	ldr	r3, [r7, #12]
 8018b0a:	6858      	ldr	r0, [r3, #4]
 8018b0c:	68b9      	ldr	r1, [r7, #8]
 8018b0e:	68bb      	ldr	r3, [r7, #8]
 8018b10:	1d1c      	adds	r4, r3, #4
 8018b12:	68bb      	ldr	r3, [r7, #8]
 8018b14:	7add      	ldrb	r5, [r3, #11]
 8018b16:	68bb      	ldr	r3, [r7, #8]
 8018b18:	7a9b      	ldrb	r3, [r3, #10]
 8018b1a:	687a      	ldr	r2, [r7, #4]
 8018b1c:	9202      	str	r2, [sp, #8]
 8018b1e:	2206      	movs	r2, #6
 8018b20:	9201      	str	r2, [sp, #4]
 8018b22:	9300      	str	r3, [sp, #0]
 8018b24:	462b      	mov	r3, r5
 8018b26:	4622      	mov	r2, r4
 8018b28:	f004 fcde 	bl	801d4e8 <ip4_output_if>
 8018b2c:	4603      	mov	r3, r0
 8018b2e:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8018b30:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8018b34:	4618      	mov	r0, r3
 8018b36:	3720      	adds	r7, #32
 8018b38:	46bd      	mov	sp, r7
 8018b3a:	bdb0      	pop	{r4, r5, r7, pc}
 8018b3c:	0802580c 	.word	0x0802580c
 8018b40:	08025dd0 	.word	0x08025dd0
 8018b44:	08025860 	.word	0x08025860
 8018b48:	08025df0 	.word	0x08025df0
 8018b4c:	08025e10 	.word	0x08025e10
 8018b50:	24007dd8 	.word	0x24007dd8
 8018b54:	08025e34 	.word	0x08025e34

08018b58 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8018b58:	b5b0      	push	{r4, r5, r7, lr}
 8018b5a:	b084      	sub	sp, #16
 8018b5c:	af00      	add	r7, sp, #0
 8018b5e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8018b60:	687b      	ldr	r3, [r7, #4]
 8018b62:	2b00      	cmp	r3, #0
 8018b64:	d106      	bne.n	8018b74 <tcp_rexmit_rto_prepare+0x1c>
 8018b66:	4b31      	ldr	r3, [pc, #196]	; (8018c2c <tcp_rexmit_rto_prepare+0xd4>)
 8018b68:	f240 6263 	movw	r2, #1635	; 0x663
 8018b6c:	4930      	ldr	r1, [pc, #192]	; (8018c30 <tcp_rexmit_rto_prepare+0xd8>)
 8018b6e:	4831      	ldr	r0, [pc, #196]	; (8018c34 <tcp_rexmit_rto_prepare+0xdc>)
 8018b70:	f007 fc6e 	bl	8020450 <iprintf>

  if (pcb->unacked == NULL) {
 8018b74:	687b      	ldr	r3, [r7, #4]
 8018b76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018b78:	2b00      	cmp	r3, #0
 8018b7a:	d102      	bne.n	8018b82 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8018b7c:	f06f 0305 	mvn.w	r3, #5
 8018b80:	e050      	b.n	8018c24 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8018b82:	687b      	ldr	r3, [r7, #4]
 8018b84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018b86:	60fb      	str	r3, [r7, #12]
 8018b88:	e00b      	b.n	8018ba2 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8018b8a:	68f8      	ldr	r0, [r7, #12]
 8018b8c:	f7ff fee4 	bl	8018958 <tcp_output_segment_busy>
 8018b90:	4603      	mov	r3, r0
 8018b92:	2b00      	cmp	r3, #0
 8018b94:	d002      	beq.n	8018b9c <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8018b96:	f06f 0305 	mvn.w	r3, #5
 8018b9a:	e043      	b.n	8018c24 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8018b9c:	68fb      	ldr	r3, [r7, #12]
 8018b9e:	681b      	ldr	r3, [r3, #0]
 8018ba0:	60fb      	str	r3, [r7, #12]
 8018ba2:	68fb      	ldr	r3, [r7, #12]
 8018ba4:	681b      	ldr	r3, [r3, #0]
 8018ba6:	2b00      	cmp	r3, #0
 8018ba8:	d1ef      	bne.n	8018b8a <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8018baa:	68f8      	ldr	r0, [r7, #12]
 8018bac:	f7ff fed4 	bl	8018958 <tcp_output_segment_busy>
 8018bb0:	4603      	mov	r3, r0
 8018bb2:	2b00      	cmp	r3, #0
 8018bb4:	d002      	beq.n	8018bbc <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8018bb6:	f06f 0305 	mvn.w	r3, #5
 8018bba:	e033      	b.n	8018c24 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8018bbc:	687b      	ldr	r3, [r7, #4]
 8018bbe:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8018bc0:	68fb      	ldr	r3, [r7, #12]
 8018bc2:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8018bc4:	687b      	ldr	r3, [r7, #4]
 8018bc6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8018bc8:	687b      	ldr	r3, [r7, #4]
 8018bca:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8018bcc:	687b      	ldr	r3, [r7, #4]
 8018bce:	2200      	movs	r2, #0
 8018bd0:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8018bd2:	687b      	ldr	r3, [r7, #4]
 8018bd4:	8b5b      	ldrh	r3, [r3, #26]
 8018bd6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8018bda:	b29a      	uxth	r2, r3
 8018bdc:	687b      	ldr	r3, [r7, #4]
 8018bde:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8018be0:	68fb      	ldr	r3, [r7, #12]
 8018be2:	68db      	ldr	r3, [r3, #12]
 8018be4:	685b      	ldr	r3, [r3, #4]
 8018be6:	4618      	mov	r0, r3
 8018be8:	f7f8 fc35 	bl	8011456 <lwip_htonl>
 8018bec:	4604      	mov	r4, r0
 8018bee:	68fb      	ldr	r3, [r7, #12]
 8018bf0:	891b      	ldrh	r3, [r3, #8]
 8018bf2:	461d      	mov	r5, r3
 8018bf4:	68fb      	ldr	r3, [r7, #12]
 8018bf6:	68db      	ldr	r3, [r3, #12]
 8018bf8:	899b      	ldrh	r3, [r3, #12]
 8018bfa:	b29b      	uxth	r3, r3
 8018bfc:	4618      	mov	r0, r3
 8018bfe:	f7f8 fc15 	bl	801142c <lwip_htons>
 8018c02:	4603      	mov	r3, r0
 8018c04:	b2db      	uxtb	r3, r3
 8018c06:	f003 0303 	and.w	r3, r3, #3
 8018c0a:	2b00      	cmp	r3, #0
 8018c0c:	d001      	beq.n	8018c12 <tcp_rexmit_rto_prepare+0xba>
 8018c0e:	2301      	movs	r3, #1
 8018c10:	e000      	b.n	8018c14 <tcp_rexmit_rto_prepare+0xbc>
 8018c12:	2300      	movs	r3, #0
 8018c14:	442b      	add	r3, r5
 8018c16:	18e2      	adds	r2, r4, r3
 8018c18:	687b      	ldr	r3, [r7, #4]
 8018c1a:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8018c1c:	687b      	ldr	r3, [r7, #4]
 8018c1e:	2200      	movs	r2, #0
 8018c20:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8018c22:	2300      	movs	r3, #0
}
 8018c24:	4618      	mov	r0, r3
 8018c26:	3710      	adds	r7, #16
 8018c28:	46bd      	mov	sp, r7
 8018c2a:	bdb0      	pop	{r4, r5, r7, pc}
 8018c2c:	0802580c 	.word	0x0802580c
 8018c30:	08025e48 	.word	0x08025e48
 8018c34:	08025860 	.word	0x08025860

08018c38 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8018c38:	b580      	push	{r7, lr}
 8018c3a:	b082      	sub	sp, #8
 8018c3c:	af00      	add	r7, sp, #0
 8018c3e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8018c40:	687b      	ldr	r3, [r7, #4]
 8018c42:	2b00      	cmp	r3, #0
 8018c44:	d106      	bne.n	8018c54 <tcp_rexmit_rto_commit+0x1c>
 8018c46:	4b0d      	ldr	r3, [pc, #52]	; (8018c7c <tcp_rexmit_rto_commit+0x44>)
 8018c48:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8018c4c:	490c      	ldr	r1, [pc, #48]	; (8018c80 <tcp_rexmit_rto_commit+0x48>)
 8018c4e:	480d      	ldr	r0, [pc, #52]	; (8018c84 <tcp_rexmit_rto_commit+0x4c>)
 8018c50:	f007 fbfe 	bl	8020450 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8018c54:	687b      	ldr	r3, [r7, #4]
 8018c56:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8018c5a:	2bff      	cmp	r3, #255	; 0xff
 8018c5c:	d007      	beq.n	8018c6e <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8018c5e:	687b      	ldr	r3, [r7, #4]
 8018c60:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8018c64:	3301      	adds	r3, #1
 8018c66:	b2da      	uxtb	r2, r3
 8018c68:	687b      	ldr	r3, [r7, #4]
 8018c6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8018c6e:	6878      	ldr	r0, [r7, #4]
 8018c70:	f7ff fc7e 	bl	8018570 <tcp_output>
}
 8018c74:	bf00      	nop
 8018c76:	3708      	adds	r7, #8
 8018c78:	46bd      	mov	sp, r7
 8018c7a:	bd80      	pop	{r7, pc}
 8018c7c:	0802580c 	.word	0x0802580c
 8018c80:	08025e6c 	.word	0x08025e6c
 8018c84:	08025860 	.word	0x08025860

08018c88 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8018c88:	b580      	push	{r7, lr}
 8018c8a:	b082      	sub	sp, #8
 8018c8c:	af00      	add	r7, sp, #0
 8018c8e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8018c90:	687b      	ldr	r3, [r7, #4]
 8018c92:	2b00      	cmp	r3, #0
 8018c94:	d106      	bne.n	8018ca4 <tcp_rexmit_rto+0x1c>
 8018c96:	4b0a      	ldr	r3, [pc, #40]	; (8018cc0 <tcp_rexmit_rto+0x38>)
 8018c98:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8018c9c:	4909      	ldr	r1, [pc, #36]	; (8018cc4 <tcp_rexmit_rto+0x3c>)
 8018c9e:	480a      	ldr	r0, [pc, #40]	; (8018cc8 <tcp_rexmit_rto+0x40>)
 8018ca0:	f007 fbd6 	bl	8020450 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8018ca4:	6878      	ldr	r0, [r7, #4]
 8018ca6:	f7ff ff57 	bl	8018b58 <tcp_rexmit_rto_prepare>
 8018caa:	4603      	mov	r3, r0
 8018cac:	2b00      	cmp	r3, #0
 8018cae:	d102      	bne.n	8018cb6 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8018cb0:	6878      	ldr	r0, [r7, #4]
 8018cb2:	f7ff ffc1 	bl	8018c38 <tcp_rexmit_rto_commit>
  }
}
 8018cb6:	bf00      	nop
 8018cb8:	3708      	adds	r7, #8
 8018cba:	46bd      	mov	sp, r7
 8018cbc:	bd80      	pop	{r7, pc}
 8018cbe:	bf00      	nop
 8018cc0:	0802580c 	.word	0x0802580c
 8018cc4:	08025e90 	.word	0x08025e90
 8018cc8:	08025860 	.word	0x08025860

08018ccc <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8018ccc:	b590      	push	{r4, r7, lr}
 8018cce:	b085      	sub	sp, #20
 8018cd0:	af00      	add	r7, sp, #0
 8018cd2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8018cd4:	687b      	ldr	r3, [r7, #4]
 8018cd6:	2b00      	cmp	r3, #0
 8018cd8:	d106      	bne.n	8018ce8 <tcp_rexmit+0x1c>
 8018cda:	4b2f      	ldr	r3, [pc, #188]	; (8018d98 <tcp_rexmit+0xcc>)
 8018cdc:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8018ce0:	492e      	ldr	r1, [pc, #184]	; (8018d9c <tcp_rexmit+0xd0>)
 8018ce2:	482f      	ldr	r0, [pc, #188]	; (8018da0 <tcp_rexmit+0xd4>)
 8018ce4:	f007 fbb4 	bl	8020450 <iprintf>

  if (pcb->unacked == NULL) {
 8018ce8:	687b      	ldr	r3, [r7, #4]
 8018cea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018cec:	2b00      	cmp	r3, #0
 8018cee:	d102      	bne.n	8018cf6 <tcp_rexmit+0x2a>
    return ERR_VAL;
 8018cf0:	f06f 0305 	mvn.w	r3, #5
 8018cf4:	e04c      	b.n	8018d90 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8018cf6:	687b      	ldr	r3, [r7, #4]
 8018cf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018cfa:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8018cfc:	68b8      	ldr	r0, [r7, #8]
 8018cfe:	f7ff fe2b 	bl	8018958 <tcp_output_segment_busy>
 8018d02:	4603      	mov	r3, r0
 8018d04:	2b00      	cmp	r3, #0
 8018d06:	d002      	beq.n	8018d0e <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8018d08:	f06f 0305 	mvn.w	r3, #5
 8018d0c:	e040      	b.n	8018d90 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8018d0e:	68bb      	ldr	r3, [r7, #8]
 8018d10:	681a      	ldr	r2, [r3, #0]
 8018d12:	687b      	ldr	r3, [r7, #4]
 8018d14:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8018d16:	687b      	ldr	r3, [r7, #4]
 8018d18:	336c      	adds	r3, #108	; 0x6c
 8018d1a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8018d1c:	e002      	b.n	8018d24 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8018d1e:	68fb      	ldr	r3, [r7, #12]
 8018d20:	681b      	ldr	r3, [r3, #0]
 8018d22:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8018d24:	68fb      	ldr	r3, [r7, #12]
 8018d26:	681b      	ldr	r3, [r3, #0]
 8018d28:	2b00      	cmp	r3, #0
 8018d2a:	d011      	beq.n	8018d50 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8018d2c:	68fb      	ldr	r3, [r7, #12]
 8018d2e:	681b      	ldr	r3, [r3, #0]
 8018d30:	68db      	ldr	r3, [r3, #12]
 8018d32:	685b      	ldr	r3, [r3, #4]
 8018d34:	4618      	mov	r0, r3
 8018d36:	f7f8 fb8e 	bl	8011456 <lwip_htonl>
 8018d3a:	4604      	mov	r4, r0
 8018d3c:	68bb      	ldr	r3, [r7, #8]
 8018d3e:	68db      	ldr	r3, [r3, #12]
 8018d40:	685b      	ldr	r3, [r3, #4]
 8018d42:	4618      	mov	r0, r3
 8018d44:	f7f8 fb87 	bl	8011456 <lwip_htonl>
 8018d48:	4603      	mov	r3, r0
 8018d4a:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8018d4c:	2b00      	cmp	r3, #0
 8018d4e:	dbe6      	blt.n	8018d1e <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8018d50:	68fb      	ldr	r3, [r7, #12]
 8018d52:	681a      	ldr	r2, [r3, #0]
 8018d54:	68bb      	ldr	r3, [r7, #8]
 8018d56:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8018d58:	68fb      	ldr	r3, [r7, #12]
 8018d5a:	68ba      	ldr	r2, [r7, #8]
 8018d5c:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8018d5e:	68bb      	ldr	r3, [r7, #8]
 8018d60:	681b      	ldr	r3, [r3, #0]
 8018d62:	2b00      	cmp	r3, #0
 8018d64:	d103      	bne.n	8018d6e <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8018d66:	687b      	ldr	r3, [r7, #4]
 8018d68:	2200      	movs	r2, #0
 8018d6a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8018d6e:	687b      	ldr	r3, [r7, #4]
 8018d70:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8018d74:	2bff      	cmp	r3, #255	; 0xff
 8018d76:	d007      	beq.n	8018d88 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8018d78:	687b      	ldr	r3, [r7, #4]
 8018d7a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8018d7e:	3301      	adds	r3, #1
 8018d80:	b2da      	uxtb	r2, r3
 8018d82:	687b      	ldr	r3, [r7, #4]
 8018d84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8018d88:	687b      	ldr	r3, [r7, #4]
 8018d8a:	2200      	movs	r2, #0
 8018d8c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8018d8e:	2300      	movs	r3, #0
}
 8018d90:	4618      	mov	r0, r3
 8018d92:	3714      	adds	r7, #20
 8018d94:	46bd      	mov	sp, r7
 8018d96:	bd90      	pop	{r4, r7, pc}
 8018d98:	0802580c 	.word	0x0802580c
 8018d9c:	08025eac 	.word	0x08025eac
 8018da0:	08025860 	.word	0x08025860

08018da4 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8018da4:	b580      	push	{r7, lr}
 8018da6:	b082      	sub	sp, #8
 8018da8:	af00      	add	r7, sp, #0
 8018daa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8018dac:	687b      	ldr	r3, [r7, #4]
 8018dae:	2b00      	cmp	r3, #0
 8018db0:	d106      	bne.n	8018dc0 <tcp_rexmit_fast+0x1c>
 8018db2:	4b2a      	ldr	r3, [pc, #168]	; (8018e5c <tcp_rexmit_fast+0xb8>)
 8018db4:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8018db8:	4929      	ldr	r1, [pc, #164]	; (8018e60 <tcp_rexmit_fast+0xbc>)
 8018dba:	482a      	ldr	r0, [pc, #168]	; (8018e64 <tcp_rexmit_fast+0xc0>)
 8018dbc:	f007 fb48 	bl	8020450 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8018dc0:	687b      	ldr	r3, [r7, #4]
 8018dc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018dc4:	2b00      	cmp	r3, #0
 8018dc6:	d045      	beq.n	8018e54 <tcp_rexmit_fast+0xb0>
 8018dc8:	687b      	ldr	r3, [r7, #4]
 8018dca:	8b5b      	ldrh	r3, [r3, #26]
 8018dcc:	f003 0304 	and.w	r3, r3, #4
 8018dd0:	2b00      	cmp	r3, #0
 8018dd2:	d13f      	bne.n	8018e54 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8018dd4:	6878      	ldr	r0, [r7, #4]
 8018dd6:	f7ff ff79 	bl	8018ccc <tcp_rexmit>
 8018dda:	4603      	mov	r3, r0
 8018ddc:	2b00      	cmp	r3, #0
 8018dde:	d139      	bne.n	8018e54 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8018de0:	687b      	ldr	r3, [r7, #4]
 8018de2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8018de6:	687b      	ldr	r3, [r7, #4]
 8018de8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8018dec:	4293      	cmp	r3, r2
 8018dee:	bf28      	it	cs
 8018df0:	4613      	movcs	r3, r2
 8018df2:	b29b      	uxth	r3, r3
 8018df4:	2b00      	cmp	r3, #0
 8018df6:	da00      	bge.n	8018dfa <tcp_rexmit_fast+0x56>
 8018df8:	3301      	adds	r3, #1
 8018dfa:	105b      	asrs	r3, r3, #1
 8018dfc:	b29a      	uxth	r2, r3
 8018dfe:	687b      	ldr	r3, [r7, #4]
 8018e00:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8018e04:	687b      	ldr	r3, [r7, #4]
 8018e06:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8018e0a:	461a      	mov	r2, r3
 8018e0c:	687b      	ldr	r3, [r7, #4]
 8018e0e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018e10:	005b      	lsls	r3, r3, #1
 8018e12:	429a      	cmp	r2, r3
 8018e14:	d206      	bcs.n	8018e24 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8018e16:	687b      	ldr	r3, [r7, #4]
 8018e18:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018e1a:	005b      	lsls	r3, r3, #1
 8018e1c:	b29a      	uxth	r2, r3
 8018e1e:	687b      	ldr	r3, [r7, #4]
 8018e20:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8018e24:	687b      	ldr	r3, [r7, #4]
 8018e26:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8018e2a:	687b      	ldr	r3, [r7, #4]
 8018e2c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018e2e:	4619      	mov	r1, r3
 8018e30:	0049      	lsls	r1, r1, #1
 8018e32:	440b      	add	r3, r1
 8018e34:	b29b      	uxth	r3, r3
 8018e36:	4413      	add	r3, r2
 8018e38:	b29a      	uxth	r2, r3
 8018e3a:	687b      	ldr	r3, [r7, #4]
 8018e3c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8018e40:	687b      	ldr	r3, [r7, #4]
 8018e42:	8b5b      	ldrh	r3, [r3, #26]
 8018e44:	f043 0304 	orr.w	r3, r3, #4
 8018e48:	b29a      	uxth	r2, r3
 8018e4a:	687b      	ldr	r3, [r7, #4]
 8018e4c:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8018e4e:	687b      	ldr	r3, [r7, #4]
 8018e50:	2200      	movs	r2, #0
 8018e52:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8018e54:	bf00      	nop
 8018e56:	3708      	adds	r7, #8
 8018e58:	46bd      	mov	sp, r7
 8018e5a:	bd80      	pop	{r7, pc}
 8018e5c:	0802580c 	.word	0x0802580c
 8018e60:	08025ec4 	.word	0x08025ec4
 8018e64:	08025860 	.word	0x08025860

08018e68 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8018e68:	b580      	push	{r7, lr}
 8018e6a:	b086      	sub	sp, #24
 8018e6c:	af00      	add	r7, sp, #0
 8018e6e:	60f8      	str	r0, [r7, #12]
 8018e70:	607b      	str	r3, [r7, #4]
 8018e72:	460b      	mov	r3, r1
 8018e74:	817b      	strh	r3, [r7, #10]
 8018e76:	4613      	mov	r3, r2
 8018e78:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8018e7a:	897a      	ldrh	r2, [r7, #10]
 8018e7c:	893b      	ldrh	r3, [r7, #8]
 8018e7e:	4413      	add	r3, r2
 8018e80:	b29b      	uxth	r3, r3
 8018e82:	3314      	adds	r3, #20
 8018e84:	b29b      	uxth	r3, r3
 8018e86:	f44f 7220 	mov.w	r2, #640	; 0x280
 8018e8a:	4619      	mov	r1, r3
 8018e8c:	2022      	movs	r0, #34	; 0x22
 8018e8e:	f7f9 fc9f 	bl	80127d0 <pbuf_alloc>
 8018e92:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8018e94:	697b      	ldr	r3, [r7, #20]
 8018e96:	2b00      	cmp	r3, #0
 8018e98:	d04d      	beq.n	8018f36 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8018e9a:	897b      	ldrh	r3, [r7, #10]
 8018e9c:	3313      	adds	r3, #19
 8018e9e:	697a      	ldr	r2, [r7, #20]
 8018ea0:	8952      	ldrh	r2, [r2, #10]
 8018ea2:	4293      	cmp	r3, r2
 8018ea4:	db06      	blt.n	8018eb4 <tcp_output_alloc_header_common+0x4c>
 8018ea6:	4b26      	ldr	r3, [pc, #152]	; (8018f40 <tcp_output_alloc_header_common+0xd8>)
 8018ea8:	f240 7223 	movw	r2, #1827	; 0x723
 8018eac:	4925      	ldr	r1, [pc, #148]	; (8018f44 <tcp_output_alloc_header_common+0xdc>)
 8018eae:	4826      	ldr	r0, [pc, #152]	; (8018f48 <tcp_output_alloc_header_common+0xe0>)
 8018eb0:	f007 face 	bl	8020450 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8018eb4:	697b      	ldr	r3, [r7, #20]
 8018eb6:	685b      	ldr	r3, [r3, #4]
 8018eb8:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8018eba:	8c3b      	ldrh	r3, [r7, #32]
 8018ebc:	4618      	mov	r0, r3
 8018ebe:	f7f8 fab5 	bl	801142c <lwip_htons>
 8018ec2:	4603      	mov	r3, r0
 8018ec4:	461a      	mov	r2, r3
 8018ec6:	693b      	ldr	r3, [r7, #16]
 8018ec8:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8018eca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018ecc:	4618      	mov	r0, r3
 8018ece:	f7f8 faad 	bl	801142c <lwip_htons>
 8018ed2:	4603      	mov	r3, r0
 8018ed4:	461a      	mov	r2, r3
 8018ed6:	693b      	ldr	r3, [r7, #16]
 8018ed8:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8018eda:	693b      	ldr	r3, [r7, #16]
 8018edc:	687a      	ldr	r2, [r7, #4]
 8018ede:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8018ee0:	68f8      	ldr	r0, [r7, #12]
 8018ee2:	f7f8 fab8 	bl	8011456 <lwip_htonl>
 8018ee6:	4602      	mov	r2, r0
 8018ee8:	693b      	ldr	r3, [r7, #16]
 8018eea:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8018eec:	897b      	ldrh	r3, [r7, #10]
 8018eee:	089b      	lsrs	r3, r3, #2
 8018ef0:	b29b      	uxth	r3, r3
 8018ef2:	3305      	adds	r3, #5
 8018ef4:	b29b      	uxth	r3, r3
 8018ef6:	031b      	lsls	r3, r3, #12
 8018ef8:	b29a      	uxth	r2, r3
 8018efa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8018efe:	b29b      	uxth	r3, r3
 8018f00:	4313      	orrs	r3, r2
 8018f02:	b29b      	uxth	r3, r3
 8018f04:	4618      	mov	r0, r3
 8018f06:	f7f8 fa91 	bl	801142c <lwip_htons>
 8018f0a:	4603      	mov	r3, r0
 8018f0c:	461a      	mov	r2, r3
 8018f0e:	693b      	ldr	r3, [r7, #16]
 8018f10:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8018f12:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8018f14:	4618      	mov	r0, r3
 8018f16:	f7f8 fa89 	bl	801142c <lwip_htons>
 8018f1a:	4603      	mov	r3, r0
 8018f1c:	461a      	mov	r2, r3
 8018f1e:	693b      	ldr	r3, [r7, #16]
 8018f20:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8018f22:	693b      	ldr	r3, [r7, #16]
 8018f24:	2200      	movs	r2, #0
 8018f26:	741a      	strb	r2, [r3, #16]
 8018f28:	2200      	movs	r2, #0
 8018f2a:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8018f2c:	693b      	ldr	r3, [r7, #16]
 8018f2e:	2200      	movs	r2, #0
 8018f30:	749a      	strb	r2, [r3, #18]
 8018f32:	2200      	movs	r2, #0
 8018f34:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8018f36:	697b      	ldr	r3, [r7, #20]
}
 8018f38:	4618      	mov	r0, r3
 8018f3a:	3718      	adds	r7, #24
 8018f3c:	46bd      	mov	sp, r7
 8018f3e:	bd80      	pop	{r7, pc}
 8018f40:	0802580c 	.word	0x0802580c
 8018f44:	08025ee4 	.word	0x08025ee4
 8018f48:	08025860 	.word	0x08025860

08018f4c <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8018f4c:	b5b0      	push	{r4, r5, r7, lr}
 8018f4e:	b08a      	sub	sp, #40	; 0x28
 8018f50:	af04      	add	r7, sp, #16
 8018f52:	60f8      	str	r0, [r7, #12]
 8018f54:	607b      	str	r3, [r7, #4]
 8018f56:	460b      	mov	r3, r1
 8018f58:	817b      	strh	r3, [r7, #10]
 8018f5a:	4613      	mov	r3, r2
 8018f5c:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8018f5e:	68fb      	ldr	r3, [r7, #12]
 8018f60:	2b00      	cmp	r3, #0
 8018f62:	d106      	bne.n	8018f72 <tcp_output_alloc_header+0x26>
 8018f64:	4b15      	ldr	r3, [pc, #84]	; (8018fbc <tcp_output_alloc_header+0x70>)
 8018f66:	f240 7242 	movw	r2, #1858	; 0x742
 8018f6a:	4915      	ldr	r1, [pc, #84]	; (8018fc0 <tcp_output_alloc_header+0x74>)
 8018f6c:	4815      	ldr	r0, [pc, #84]	; (8018fc4 <tcp_output_alloc_header+0x78>)
 8018f6e:	f007 fa6f 	bl	8020450 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8018f72:	68fb      	ldr	r3, [r7, #12]
 8018f74:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8018f76:	68fb      	ldr	r3, [r7, #12]
 8018f78:	8adb      	ldrh	r3, [r3, #22]
 8018f7a:	68fa      	ldr	r2, [r7, #12]
 8018f7c:	8b12      	ldrh	r2, [r2, #24]
 8018f7e:	68f9      	ldr	r1, [r7, #12]
 8018f80:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8018f82:	893d      	ldrh	r5, [r7, #8]
 8018f84:	897c      	ldrh	r4, [r7, #10]
 8018f86:	9103      	str	r1, [sp, #12]
 8018f88:	2110      	movs	r1, #16
 8018f8a:	9102      	str	r1, [sp, #8]
 8018f8c:	9201      	str	r2, [sp, #4]
 8018f8e:	9300      	str	r3, [sp, #0]
 8018f90:	687b      	ldr	r3, [r7, #4]
 8018f92:	462a      	mov	r2, r5
 8018f94:	4621      	mov	r1, r4
 8018f96:	f7ff ff67 	bl	8018e68 <tcp_output_alloc_header_common>
 8018f9a:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8018f9c:	697b      	ldr	r3, [r7, #20]
 8018f9e:	2b00      	cmp	r3, #0
 8018fa0:	d006      	beq.n	8018fb0 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8018fa2:	68fb      	ldr	r3, [r7, #12]
 8018fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018fa6:	68fa      	ldr	r2, [r7, #12]
 8018fa8:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8018faa:	441a      	add	r2, r3
 8018fac:	68fb      	ldr	r3, [r7, #12]
 8018fae:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8018fb0:	697b      	ldr	r3, [r7, #20]
}
 8018fb2:	4618      	mov	r0, r3
 8018fb4:	3718      	adds	r7, #24
 8018fb6:	46bd      	mov	sp, r7
 8018fb8:	bdb0      	pop	{r4, r5, r7, pc}
 8018fba:	bf00      	nop
 8018fbc:	0802580c 	.word	0x0802580c
 8018fc0:	08025f14 	.word	0x08025f14
 8018fc4:	08025860 	.word	0x08025860

08018fc8 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8018fc8:	b580      	push	{r7, lr}
 8018fca:	b088      	sub	sp, #32
 8018fcc:	af00      	add	r7, sp, #0
 8018fce:	60f8      	str	r0, [r7, #12]
 8018fd0:	60b9      	str	r1, [r7, #8]
 8018fd2:	4611      	mov	r1, r2
 8018fd4:	461a      	mov	r2, r3
 8018fd6:	460b      	mov	r3, r1
 8018fd8:	71fb      	strb	r3, [r7, #7]
 8018fda:	4613      	mov	r3, r2
 8018fdc:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8018fde:	2300      	movs	r3, #0
 8018fe0:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8018fe2:	68bb      	ldr	r3, [r7, #8]
 8018fe4:	2b00      	cmp	r3, #0
 8018fe6:	d106      	bne.n	8018ff6 <tcp_output_fill_options+0x2e>
 8018fe8:	4b12      	ldr	r3, [pc, #72]	; (8019034 <tcp_output_fill_options+0x6c>)
 8018fea:	f240 7256 	movw	r2, #1878	; 0x756
 8018fee:	4912      	ldr	r1, [pc, #72]	; (8019038 <tcp_output_fill_options+0x70>)
 8018ff0:	4812      	ldr	r0, [pc, #72]	; (801903c <tcp_output_fill_options+0x74>)
 8018ff2:	f007 fa2d 	bl	8020450 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8018ff6:	68bb      	ldr	r3, [r7, #8]
 8018ff8:	685b      	ldr	r3, [r3, #4]
 8018ffa:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8018ffc:	69bb      	ldr	r3, [r7, #24]
 8018ffe:	3314      	adds	r3, #20
 8019000:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8019002:	8bfb      	ldrh	r3, [r7, #30]
 8019004:	009b      	lsls	r3, r3, #2
 8019006:	461a      	mov	r2, r3
 8019008:	79fb      	ldrb	r3, [r7, #7]
 801900a:	009b      	lsls	r3, r3, #2
 801900c:	f003 0304 	and.w	r3, r3, #4
 8019010:	4413      	add	r3, r2
 8019012:	3314      	adds	r3, #20
 8019014:	69ba      	ldr	r2, [r7, #24]
 8019016:	4413      	add	r3, r2
 8019018:	697a      	ldr	r2, [r7, #20]
 801901a:	429a      	cmp	r2, r3
 801901c:	d006      	beq.n	801902c <tcp_output_fill_options+0x64>
 801901e:	4b05      	ldr	r3, [pc, #20]	; (8019034 <tcp_output_fill_options+0x6c>)
 8019020:	f240 7275 	movw	r2, #1909	; 0x775
 8019024:	4906      	ldr	r1, [pc, #24]	; (8019040 <tcp_output_fill_options+0x78>)
 8019026:	4805      	ldr	r0, [pc, #20]	; (801903c <tcp_output_fill_options+0x74>)
 8019028:	f007 fa12 	bl	8020450 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 801902c:	bf00      	nop
 801902e:	3720      	adds	r7, #32
 8019030:	46bd      	mov	sp, r7
 8019032:	bd80      	pop	{r7, pc}
 8019034:	0802580c 	.word	0x0802580c
 8019038:	08025f3c 	.word	0x08025f3c
 801903c:	08025860 	.word	0x08025860
 8019040:	08025e34 	.word	0x08025e34

08019044 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8019044:	b580      	push	{r7, lr}
 8019046:	b08a      	sub	sp, #40	; 0x28
 8019048:	af04      	add	r7, sp, #16
 801904a:	60f8      	str	r0, [r7, #12]
 801904c:	60b9      	str	r1, [r7, #8]
 801904e:	607a      	str	r2, [r7, #4]
 8019050:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8019052:	68bb      	ldr	r3, [r7, #8]
 8019054:	2b00      	cmp	r3, #0
 8019056:	d106      	bne.n	8019066 <tcp_output_control_segment+0x22>
 8019058:	4b1c      	ldr	r3, [pc, #112]	; (80190cc <tcp_output_control_segment+0x88>)
 801905a:	f240 7287 	movw	r2, #1927	; 0x787
 801905e:	491c      	ldr	r1, [pc, #112]	; (80190d0 <tcp_output_control_segment+0x8c>)
 8019060:	481c      	ldr	r0, [pc, #112]	; (80190d4 <tcp_output_control_segment+0x90>)
 8019062:	f007 f9f5 	bl	8020450 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8019066:	683a      	ldr	r2, [r7, #0]
 8019068:	6879      	ldr	r1, [r7, #4]
 801906a:	68f8      	ldr	r0, [r7, #12]
 801906c:	f7fe fae8 	bl	8017640 <tcp_route>
 8019070:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8019072:	693b      	ldr	r3, [r7, #16]
 8019074:	2b00      	cmp	r3, #0
 8019076:	d102      	bne.n	801907e <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8019078:	23fc      	movs	r3, #252	; 0xfc
 801907a:	75fb      	strb	r3, [r7, #23]
 801907c:	e01c      	b.n	80190b8 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801907e:	68fb      	ldr	r3, [r7, #12]
 8019080:	2b00      	cmp	r3, #0
 8019082:	d006      	beq.n	8019092 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8019084:	68fb      	ldr	r3, [r7, #12]
 8019086:	7adb      	ldrb	r3, [r3, #11]
 8019088:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801908a:	68fb      	ldr	r3, [r7, #12]
 801908c:	7a9b      	ldrb	r3, [r3, #10]
 801908e:	757b      	strb	r3, [r7, #21]
 8019090:	e003      	b.n	801909a <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8019092:	23ff      	movs	r3, #255	; 0xff
 8019094:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8019096:	2300      	movs	r3, #0
 8019098:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801909a:	7dba      	ldrb	r2, [r7, #22]
 801909c:	693b      	ldr	r3, [r7, #16]
 801909e:	9302      	str	r3, [sp, #8]
 80190a0:	2306      	movs	r3, #6
 80190a2:	9301      	str	r3, [sp, #4]
 80190a4:	7d7b      	ldrb	r3, [r7, #21]
 80190a6:	9300      	str	r3, [sp, #0]
 80190a8:	4613      	mov	r3, r2
 80190aa:	683a      	ldr	r2, [r7, #0]
 80190ac:	6879      	ldr	r1, [r7, #4]
 80190ae:	68b8      	ldr	r0, [r7, #8]
 80190b0:	f004 fa1a 	bl	801d4e8 <ip4_output_if>
 80190b4:	4603      	mov	r3, r0
 80190b6:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 80190b8:	68b8      	ldr	r0, [r7, #8]
 80190ba:	f7f9 fe9f 	bl	8012dfc <pbuf_free>
  return err;
 80190be:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80190c2:	4618      	mov	r0, r3
 80190c4:	3718      	adds	r7, #24
 80190c6:	46bd      	mov	sp, r7
 80190c8:	bd80      	pop	{r7, pc}
 80190ca:	bf00      	nop
 80190cc:	0802580c 	.word	0x0802580c
 80190d0:	08025f64 	.word	0x08025f64
 80190d4:	08025860 	.word	0x08025860

080190d8 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 80190d8:	b590      	push	{r4, r7, lr}
 80190da:	b08b      	sub	sp, #44	; 0x2c
 80190dc:	af04      	add	r7, sp, #16
 80190de:	60f8      	str	r0, [r7, #12]
 80190e0:	60b9      	str	r1, [r7, #8]
 80190e2:	607a      	str	r2, [r7, #4]
 80190e4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 80190e6:	683b      	ldr	r3, [r7, #0]
 80190e8:	2b00      	cmp	r3, #0
 80190ea:	d106      	bne.n	80190fa <tcp_rst+0x22>
 80190ec:	4b1f      	ldr	r3, [pc, #124]	; (801916c <tcp_rst+0x94>)
 80190ee:	f240 72c4 	movw	r2, #1988	; 0x7c4
 80190f2:	491f      	ldr	r1, [pc, #124]	; (8019170 <tcp_rst+0x98>)
 80190f4:	481f      	ldr	r0, [pc, #124]	; (8019174 <tcp_rst+0x9c>)
 80190f6:	f007 f9ab 	bl	8020450 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 80190fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80190fc:	2b00      	cmp	r3, #0
 80190fe:	d106      	bne.n	801910e <tcp_rst+0x36>
 8019100:	4b1a      	ldr	r3, [pc, #104]	; (801916c <tcp_rst+0x94>)
 8019102:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8019106:	491c      	ldr	r1, [pc, #112]	; (8019178 <tcp_rst+0xa0>)
 8019108:	481a      	ldr	r0, [pc, #104]	; (8019174 <tcp_rst+0x9c>)
 801910a:	f007 f9a1 	bl	8020450 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801910e:	2300      	movs	r3, #0
 8019110:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8019112:	f246 0308 	movw	r3, #24584	; 0x6008
 8019116:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8019118:	7dfb      	ldrb	r3, [r7, #23]
 801911a:	b29c      	uxth	r4, r3
 801911c:	68b8      	ldr	r0, [r7, #8]
 801911e:	f7f8 f99a 	bl	8011456 <lwip_htonl>
 8019122:	4602      	mov	r2, r0
 8019124:	8abb      	ldrh	r3, [r7, #20]
 8019126:	9303      	str	r3, [sp, #12]
 8019128:	2314      	movs	r3, #20
 801912a:	9302      	str	r3, [sp, #8]
 801912c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801912e:	9301      	str	r3, [sp, #4]
 8019130:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8019132:	9300      	str	r3, [sp, #0]
 8019134:	4613      	mov	r3, r2
 8019136:	2200      	movs	r2, #0
 8019138:	4621      	mov	r1, r4
 801913a:	6878      	ldr	r0, [r7, #4]
 801913c:	f7ff fe94 	bl	8018e68 <tcp_output_alloc_header_common>
 8019140:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8019142:	693b      	ldr	r3, [r7, #16]
 8019144:	2b00      	cmp	r3, #0
 8019146:	d00c      	beq.n	8019162 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8019148:	7dfb      	ldrb	r3, [r7, #23]
 801914a:	2200      	movs	r2, #0
 801914c:	6939      	ldr	r1, [r7, #16]
 801914e:	68f8      	ldr	r0, [r7, #12]
 8019150:	f7ff ff3a 	bl	8018fc8 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8019154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019156:	683a      	ldr	r2, [r7, #0]
 8019158:	6939      	ldr	r1, [r7, #16]
 801915a:	68f8      	ldr	r0, [r7, #12]
 801915c:	f7ff ff72 	bl	8019044 <tcp_output_control_segment>
 8019160:	e000      	b.n	8019164 <tcp_rst+0x8c>
    return;
 8019162:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8019164:	371c      	adds	r7, #28
 8019166:	46bd      	mov	sp, r7
 8019168:	bd90      	pop	{r4, r7, pc}
 801916a:	bf00      	nop
 801916c:	0802580c 	.word	0x0802580c
 8019170:	08025f90 	.word	0x08025f90
 8019174:	08025860 	.word	0x08025860
 8019178:	08025fac 	.word	0x08025fac

0801917c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 801917c:	b590      	push	{r4, r7, lr}
 801917e:	b087      	sub	sp, #28
 8019180:	af00      	add	r7, sp, #0
 8019182:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8019184:	2300      	movs	r3, #0
 8019186:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8019188:	2300      	movs	r3, #0
 801918a:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 801918c:	687b      	ldr	r3, [r7, #4]
 801918e:	2b00      	cmp	r3, #0
 8019190:	d106      	bne.n	80191a0 <tcp_send_empty_ack+0x24>
 8019192:	4b28      	ldr	r3, [pc, #160]	; (8019234 <tcp_send_empty_ack+0xb8>)
 8019194:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8019198:	4927      	ldr	r1, [pc, #156]	; (8019238 <tcp_send_empty_ack+0xbc>)
 801919a:	4828      	ldr	r0, [pc, #160]	; (801923c <tcp_send_empty_ack+0xc0>)
 801919c:	f007 f958 	bl	8020450 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80191a0:	7dfb      	ldrb	r3, [r7, #23]
 80191a2:	009b      	lsls	r3, r3, #2
 80191a4:	b2db      	uxtb	r3, r3
 80191a6:	f003 0304 	and.w	r3, r3, #4
 80191aa:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 80191ac:	7d7b      	ldrb	r3, [r7, #21]
 80191ae:	b29c      	uxth	r4, r3
 80191b0:	687b      	ldr	r3, [r7, #4]
 80191b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80191b4:	4618      	mov	r0, r3
 80191b6:	f7f8 f94e 	bl	8011456 <lwip_htonl>
 80191ba:	4603      	mov	r3, r0
 80191bc:	2200      	movs	r2, #0
 80191be:	4621      	mov	r1, r4
 80191c0:	6878      	ldr	r0, [r7, #4]
 80191c2:	f7ff fec3 	bl	8018f4c <tcp_output_alloc_header>
 80191c6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80191c8:	693b      	ldr	r3, [r7, #16]
 80191ca:	2b00      	cmp	r3, #0
 80191cc:	d109      	bne.n	80191e2 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80191ce:	687b      	ldr	r3, [r7, #4]
 80191d0:	8b5b      	ldrh	r3, [r3, #26]
 80191d2:	f043 0303 	orr.w	r3, r3, #3
 80191d6:	b29a      	uxth	r2, r3
 80191d8:	687b      	ldr	r3, [r7, #4]
 80191da:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 80191dc:	f06f 0301 	mvn.w	r3, #1
 80191e0:	e023      	b.n	801922a <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 80191e2:	7dbb      	ldrb	r3, [r7, #22]
 80191e4:	7dfa      	ldrb	r2, [r7, #23]
 80191e6:	6939      	ldr	r1, [r7, #16]
 80191e8:	6878      	ldr	r0, [r7, #4]
 80191ea:	f7ff feed 	bl	8018fc8 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80191ee:	687a      	ldr	r2, [r7, #4]
 80191f0:	687b      	ldr	r3, [r7, #4]
 80191f2:	3304      	adds	r3, #4
 80191f4:	6939      	ldr	r1, [r7, #16]
 80191f6:	6878      	ldr	r0, [r7, #4]
 80191f8:	f7ff ff24 	bl	8019044 <tcp_output_control_segment>
 80191fc:	4603      	mov	r3, r0
 80191fe:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8019200:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019204:	2b00      	cmp	r3, #0
 8019206:	d007      	beq.n	8019218 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8019208:	687b      	ldr	r3, [r7, #4]
 801920a:	8b5b      	ldrh	r3, [r3, #26]
 801920c:	f043 0303 	orr.w	r3, r3, #3
 8019210:	b29a      	uxth	r2, r3
 8019212:	687b      	ldr	r3, [r7, #4]
 8019214:	835a      	strh	r2, [r3, #26]
 8019216:	e006      	b.n	8019226 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8019218:	687b      	ldr	r3, [r7, #4]
 801921a:	8b5b      	ldrh	r3, [r3, #26]
 801921c:	f023 0303 	bic.w	r3, r3, #3
 8019220:	b29a      	uxth	r2, r3
 8019222:	687b      	ldr	r3, [r7, #4]
 8019224:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8019226:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801922a:	4618      	mov	r0, r3
 801922c:	371c      	adds	r7, #28
 801922e:	46bd      	mov	sp, r7
 8019230:	bd90      	pop	{r4, r7, pc}
 8019232:	bf00      	nop
 8019234:	0802580c 	.word	0x0802580c
 8019238:	08025fc8 	.word	0x08025fc8
 801923c:	08025860 	.word	0x08025860

08019240 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8019240:	b590      	push	{r4, r7, lr}
 8019242:	b087      	sub	sp, #28
 8019244:	af00      	add	r7, sp, #0
 8019246:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8019248:	2300      	movs	r3, #0
 801924a:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 801924c:	687b      	ldr	r3, [r7, #4]
 801924e:	2b00      	cmp	r3, #0
 8019250:	d106      	bne.n	8019260 <tcp_keepalive+0x20>
 8019252:	4b18      	ldr	r3, [pc, #96]	; (80192b4 <tcp_keepalive+0x74>)
 8019254:	f640 0224 	movw	r2, #2084	; 0x824
 8019258:	4917      	ldr	r1, [pc, #92]	; (80192b8 <tcp_keepalive+0x78>)
 801925a:	4818      	ldr	r0, [pc, #96]	; (80192bc <tcp_keepalive+0x7c>)
 801925c:	f007 f8f8 	bl	8020450 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8019260:	7dfb      	ldrb	r3, [r7, #23]
 8019262:	b29c      	uxth	r4, r3
 8019264:	687b      	ldr	r3, [r7, #4]
 8019266:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019268:	3b01      	subs	r3, #1
 801926a:	4618      	mov	r0, r3
 801926c:	f7f8 f8f3 	bl	8011456 <lwip_htonl>
 8019270:	4603      	mov	r3, r0
 8019272:	2200      	movs	r2, #0
 8019274:	4621      	mov	r1, r4
 8019276:	6878      	ldr	r0, [r7, #4]
 8019278:	f7ff fe68 	bl	8018f4c <tcp_output_alloc_header>
 801927c:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801927e:	693b      	ldr	r3, [r7, #16]
 8019280:	2b00      	cmp	r3, #0
 8019282:	d102      	bne.n	801928a <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8019284:	f04f 33ff 	mov.w	r3, #4294967295
 8019288:	e010      	b.n	80192ac <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801928a:	7dfb      	ldrb	r3, [r7, #23]
 801928c:	2200      	movs	r2, #0
 801928e:	6939      	ldr	r1, [r7, #16]
 8019290:	6878      	ldr	r0, [r7, #4]
 8019292:	f7ff fe99 	bl	8018fc8 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8019296:	687a      	ldr	r2, [r7, #4]
 8019298:	687b      	ldr	r3, [r7, #4]
 801929a:	3304      	adds	r3, #4
 801929c:	6939      	ldr	r1, [r7, #16]
 801929e:	6878      	ldr	r0, [r7, #4]
 80192a0:	f7ff fed0 	bl	8019044 <tcp_output_control_segment>
 80192a4:	4603      	mov	r3, r0
 80192a6:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80192a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80192ac:	4618      	mov	r0, r3
 80192ae:	371c      	adds	r7, #28
 80192b0:	46bd      	mov	sp, r7
 80192b2:	bd90      	pop	{r4, r7, pc}
 80192b4:	0802580c 	.word	0x0802580c
 80192b8:	08025fe8 	.word	0x08025fe8
 80192bc:	08025860 	.word	0x08025860

080192c0 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 80192c0:	b590      	push	{r4, r7, lr}
 80192c2:	b08b      	sub	sp, #44	; 0x2c
 80192c4:	af00      	add	r7, sp, #0
 80192c6:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80192c8:	2300      	movs	r3, #0
 80192ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 80192ce:	687b      	ldr	r3, [r7, #4]
 80192d0:	2b00      	cmp	r3, #0
 80192d2:	d106      	bne.n	80192e2 <tcp_zero_window_probe+0x22>
 80192d4:	4b4c      	ldr	r3, [pc, #304]	; (8019408 <tcp_zero_window_probe+0x148>)
 80192d6:	f640 024f 	movw	r2, #2127	; 0x84f
 80192da:	494c      	ldr	r1, [pc, #304]	; (801940c <tcp_zero_window_probe+0x14c>)
 80192dc:	484c      	ldr	r0, [pc, #304]	; (8019410 <tcp_zero_window_probe+0x150>)
 80192de:	f007 f8b7 	bl	8020450 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 80192e2:	687b      	ldr	r3, [r7, #4]
 80192e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80192e6:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 80192e8:	6a3b      	ldr	r3, [r7, #32]
 80192ea:	2b00      	cmp	r3, #0
 80192ec:	d101      	bne.n	80192f2 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 80192ee:	2300      	movs	r3, #0
 80192f0:	e086      	b.n	8019400 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 80192f2:	687b      	ldr	r3, [r7, #4]
 80192f4:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80192f8:	2bff      	cmp	r3, #255	; 0xff
 80192fa:	d007      	beq.n	801930c <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 80192fc:	687b      	ldr	r3, [r7, #4]
 80192fe:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8019302:	3301      	adds	r3, #1
 8019304:	b2da      	uxtb	r2, r3
 8019306:	687b      	ldr	r3, [r7, #4]
 8019308:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 801930c:	6a3b      	ldr	r3, [r7, #32]
 801930e:	68db      	ldr	r3, [r3, #12]
 8019310:	899b      	ldrh	r3, [r3, #12]
 8019312:	b29b      	uxth	r3, r3
 8019314:	4618      	mov	r0, r3
 8019316:	f7f8 f889 	bl	801142c <lwip_htons>
 801931a:	4603      	mov	r3, r0
 801931c:	b2db      	uxtb	r3, r3
 801931e:	f003 0301 	and.w	r3, r3, #1
 8019322:	2b00      	cmp	r3, #0
 8019324:	d005      	beq.n	8019332 <tcp_zero_window_probe+0x72>
 8019326:	6a3b      	ldr	r3, [r7, #32]
 8019328:	891b      	ldrh	r3, [r3, #8]
 801932a:	2b00      	cmp	r3, #0
 801932c:	d101      	bne.n	8019332 <tcp_zero_window_probe+0x72>
 801932e:	2301      	movs	r3, #1
 8019330:	e000      	b.n	8019334 <tcp_zero_window_probe+0x74>
 8019332:	2300      	movs	r3, #0
 8019334:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8019336:	7ffb      	ldrb	r3, [r7, #31]
 8019338:	2b00      	cmp	r3, #0
 801933a:	bf0c      	ite	eq
 801933c:	2301      	moveq	r3, #1
 801933e:	2300      	movne	r3, #0
 8019340:	b2db      	uxtb	r3, r3
 8019342:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8019344:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019348:	b299      	uxth	r1, r3
 801934a:	6a3b      	ldr	r3, [r7, #32]
 801934c:	68db      	ldr	r3, [r3, #12]
 801934e:	685b      	ldr	r3, [r3, #4]
 8019350:	8bba      	ldrh	r2, [r7, #28]
 8019352:	6878      	ldr	r0, [r7, #4]
 8019354:	f7ff fdfa 	bl	8018f4c <tcp_output_alloc_header>
 8019358:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801935a:	69bb      	ldr	r3, [r7, #24]
 801935c:	2b00      	cmp	r3, #0
 801935e:	d102      	bne.n	8019366 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8019360:	f04f 33ff 	mov.w	r3, #4294967295
 8019364:	e04c      	b.n	8019400 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8019366:	69bb      	ldr	r3, [r7, #24]
 8019368:	685b      	ldr	r3, [r3, #4]
 801936a:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 801936c:	7ffb      	ldrb	r3, [r7, #31]
 801936e:	2b00      	cmp	r3, #0
 8019370:	d011      	beq.n	8019396 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8019372:	697b      	ldr	r3, [r7, #20]
 8019374:	899b      	ldrh	r3, [r3, #12]
 8019376:	b29b      	uxth	r3, r3
 8019378:	b21b      	sxth	r3, r3
 801937a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801937e:	b21c      	sxth	r4, r3
 8019380:	2011      	movs	r0, #17
 8019382:	f7f8 f853 	bl	801142c <lwip_htons>
 8019386:	4603      	mov	r3, r0
 8019388:	b21b      	sxth	r3, r3
 801938a:	4323      	orrs	r3, r4
 801938c:	b21b      	sxth	r3, r3
 801938e:	b29a      	uxth	r2, r3
 8019390:	697b      	ldr	r3, [r7, #20]
 8019392:	819a      	strh	r2, [r3, #12]
 8019394:	e010      	b.n	80193b8 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8019396:	69bb      	ldr	r3, [r7, #24]
 8019398:	685b      	ldr	r3, [r3, #4]
 801939a:	3314      	adds	r3, #20
 801939c:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801939e:	6a3b      	ldr	r3, [r7, #32]
 80193a0:	6858      	ldr	r0, [r3, #4]
 80193a2:	6a3b      	ldr	r3, [r7, #32]
 80193a4:	685b      	ldr	r3, [r3, #4]
 80193a6:	891a      	ldrh	r2, [r3, #8]
 80193a8:	6a3b      	ldr	r3, [r7, #32]
 80193aa:	891b      	ldrh	r3, [r3, #8]
 80193ac:	1ad3      	subs	r3, r2, r3
 80193ae:	b29b      	uxth	r3, r3
 80193b0:	2201      	movs	r2, #1
 80193b2:	6939      	ldr	r1, [r7, #16]
 80193b4:	f7f9 ff28 	bl	8013208 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 80193b8:	6a3b      	ldr	r3, [r7, #32]
 80193ba:	68db      	ldr	r3, [r3, #12]
 80193bc:	685b      	ldr	r3, [r3, #4]
 80193be:	4618      	mov	r0, r3
 80193c0:	f7f8 f849 	bl	8011456 <lwip_htonl>
 80193c4:	4603      	mov	r3, r0
 80193c6:	3301      	adds	r3, #1
 80193c8:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80193ca:	687b      	ldr	r3, [r7, #4]
 80193cc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80193ce:	68fb      	ldr	r3, [r7, #12]
 80193d0:	1ad3      	subs	r3, r2, r3
 80193d2:	2b00      	cmp	r3, #0
 80193d4:	da02      	bge.n	80193dc <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 80193d6:	687b      	ldr	r3, [r7, #4]
 80193d8:	68fa      	ldr	r2, [r7, #12]
 80193da:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80193dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80193e0:	2200      	movs	r2, #0
 80193e2:	69b9      	ldr	r1, [r7, #24]
 80193e4:	6878      	ldr	r0, [r7, #4]
 80193e6:	f7ff fdef 	bl	8018fc8 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80193ea:	687a      	ldr	r2, [r7, #4]
 80193ec:	687b      	ldr	r3, [r7, #4]
 80193ee:	3304      	adds	r3, #4
 80193f0:	69b9      	ldr	r1, [r7, #24]
 80193f2:	6878      	ldr	r0, [r7, #4]
 80193f4:	f7ff fe26 	bl	8019044 <tcp_output_control_segment>
 80193f8:	4603      	mov	r3, r0
 80193fa:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80193fc:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8019400:	4618      	mov	r0, r3
 8019402:	372c      	adds	r7, #44	; 0x2c
 8019404:	46bd      	mov	sp, r7
 8019406:	bd90      	pop	{r4, r7, pc}
 8019408:	0802580c 	.word	0x0802580c
 801940c:	08026004 	.word	0x08026004
 8019410:	08025860 	.word	0x08025860

08019414 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8019414:	b580      	push	{r7, lr}
 8019416:	b082      	sub	sp, #8
 8019418:	af00      	add	r7, sp, #0
 801941a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 801941c:	f7f9 ffe2 	bl	80133e4 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8019420:	4b0a      	ldr	r3, [pc, #40]	; (801944c <tcpip_tcp_timer+0x38>)
 8019422:	681b      	ldr	r3, [r3, #0]
 8019424:	2b00      	cmp	r3, #0
 8019426:	d103      	bne.n	8019430 <tcpip_tcp_timer+0x1c>
 8019428:	4b09      	ldr	r3, [pc, #36]	; (8019450 <tcpip_tcp_timer+0x3c>)
 801942a:	681b      	ldr	r3, [r3, #0]
 801942c:	2b00      	cmp	r3, #0
 801942e:	d005      	beq.n	801943c <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8019430:	2200      	movs	r2, #0
 8019432:	4908      	ldr	r1, [pc, #32]	; (8019454 <tcpip_tcp_timer+0x40>)
 8019434:	20fa      	movs	r0, #250	; 0xfa
 8019436:	f000 f8f3 	bl	8019620 <sys_timeout>
 801943a:	e003      	b.n	8019444 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 801943c:	4b06      	ldr	r3, [pc, #24]	; (8019458 <tcpip_tcp_timer+0x44>)
 801943e:	2200      	movs	r2, #0
 8019440:	601a      	str	r2, [r3, #0]
  }
}
 8019442:	bf00      	nop
 8019444:	bf00      	nop
 8019446:	3708      	adds	r7, #8
 8019448:	46bd      	mov	sp, r7
 801944a:	bd80      	pop	{r7, pc}
 801944c:	24007de4 	.word	0x24007de4
 8019450:	24007de8 	.word	0x24007de8
 8019454:	08019415 	.word	0x08019415
 8019458:	24007e30 	.word	0x24007e30

0801945c <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 801945c:	b580      	push	{r7, lr}
 801945e:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8019460:	4b0a      	ldr	r3, [pc, #40]	; (801948c <tcp_timer_needed+0x30>)
 8019462:	681b      	ldr	r3, [r3, #0]
 8019464:	2b00      	cmp	r3, #0
 8019466:	d10f      	bne.n	8019488 <tcp_timer_needed+0x2c>
 8019468:	4b09      	ldr	r3, [pc, #36]	; (8019490 <tcp_timer_needed+0x34>)
 801946a:	681b      	ldr	r3, [r3, #0]
 801946c:	2b00      	cmp	r3, #0
 801946e:	d103      	bne.n	8019478 <tcp_timer_needed+0x1c>
 8019470:	4b08      	ldr	r3, [pc, #32]	; (8019494 <tcp_timer_needed+0x38>)
 8019472:	681b      	ldr	r3, [r3, #0]
 8019474:	2b00      	cmp	r3, #0
 8019476:	d007      	beq.n	8019488 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8019478:	4b04      	ldr	r3, [pc, #16]	; (801948c <tcp_timer_needed+0x30>)
 801947a:	2201      	movs	r2, #1
 801947c:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801947e:	2200      	movs	r2, #0
 8019480:	4905      	ldr	r1, [pc, #20]	; (8019498 <tcp_timer_needed+0x3c>)
 8019482:	20fa      	movs	r0, #250	; 0xfa
 8019484:	f000 f8cc 	bl	8019620 <sys_timeout>
  }
}
 8019488:	bf00      	nop
 801948a:	bd80      	pop	{r7, pc}
 801948c:	24007e30 	.word	0x24007e30
 8019490:	24007de4 	.word	0x24007de4
 8019494:	24007de8 	.word	0x24007de8
 8019498:	08019415 	.word	0x08019415

0801949c <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 801949c:	b580      	push	{r7, lr}
 801949e:	b086      	sub	sp, #24
 80194a0:	af00      	add	r7, sp, #0
 80194a2:	60f8      	str	r0, [r7, #12]
 80194a4:	60b9      	str	r1, [r7, #8]
 80194a6:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 80194a8:	200a      	movs	r0, #10
 80194aa:	f7f8 fd4f 	bl	8011f4c <memp_malloc>
 80194ae:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 80194b0:	693b      	ldr	r3, [r7, #16]
 80194b2:	2b00      	cmp	r3, #0
 80194b4:	d109      	bne.n	80194ca <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 80194b6:	693b      	ldr	r3, [r7, #16]
 80194b8:	2b00      	cmp	r3, #0
 80194ba:	d151      	bne.n	8019560 <sys_timeout_abs+0xc4>
 80194bc:	4b2a      	ldr	r3, [pc, #168]	; (8019568 <sys_timeout_abs+0xcc>)
 80194be:	22be      	movs	r2, #190	; 0xbe
 80194c0:	492a      	ldr	r1, [pc, #168]	; (801956c <sys_timeout_abs+0xd0>)
 80194c2:	482b      	ldr	r0, [pc, #172]	; (8019570 <sys_timeout_abs+0xd4>)
 80194c4:	f006 ffc4 	bl	8020450 <iprintf>
    return;
 80194c8:	e04a      	b.n	8019560 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 80194ca:	693b      	ldr	r3, [r7, #16]
 80194cc:	2200      	movs	r2, #0
 80194ce:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 80194d0:	693b      	ldr	r3, [r7, #16]
 80194d2:	68ba      	ldr	r2, [r7, #8]
 80194d4:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 80194d6:	693b      	ldr	r3, [r7, #16]
 80194d8:	687a      	ldr	r2, [r7, #4]
 80194da:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 80194dc:	693b      	ldr	r3, [r7, #16]
 80194de:	68fa      	ldr	r2, [r7, #12]
 80194e0:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 80194e2:	4b24      	ldr	r3, [pc, #144]	; (8019574 <sys_timeout_abs+0xd8>)
 80194e4:	681b      	ldr	r3, [r3, #0]
 80194e6:	2b00      	cmp	r3, #0
 80194e8:	d103      	bne.n	80194f2 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 80194ea:	4a22      	ldr	r2, [pc, #136]	; (8019574 <sys_timeout_abs+0xd8>)
 80194ec:	693b      	ldr	r3, [r7, #16]
 80194ee:	6013      	str	r3, [r2, #0]
    return;
 80194f0:	e037      	b.n	8019562 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 80194f2:	693b      	ldr	r3, [r7, #16]
 80194f4:	685a      	ldr	r2, [r3, #4]
 80194f6:	4b1f      	ldr	r3, [pc, #124]	; (8019574 <sys_timeout_abs+0xd8>)
 80194f8:	681b      	ldr	r3, [r3, #0]
 80194fa:	685b      	ldr	r3, [r3, #4]
 80194fc:	1ad3      	subs	r3, r2, r3
 80194fe:	0fdb      	lsrs	r3, r3, #31
 8019500:	f003 0301 	and.w	r3, r3, #1
 8019504:	b2db      	uxtb	r3, r3
 8019506:	2b00      	cmp	r3, #0
 8019508:	d007      	beq.n	801951a <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801950a:	4b1a      	ldr	r3, [pc, #104]	; (8019574 <sys_timeout_abs+0xd8>)
 801950c:	681a      	ldr	r2, [r3, #0]
 801950e:	693b      	ldr	r3, [r7, #16]
 8019510:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8019512:	4a18      	ldr	r2, [pc, #96]	; (8019574 <sys_timeout_abs+0xd8>)
 8019514:	693b      	ldr	r3, [r7, #16]
 8019516:	6013      	str	r3, [r2, #0]
 8019518:	e023      	b.n	8019562 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801951a:	4b16      	ldr	r3, [pc, #88]	; (8019574 <sys_timeout_abs+0xd8>)
 801951c:	681b      	ldr	r3, [r3, #0]
 801951e:	617b      	str	r3, [r7, #20]
 8019520:	e01a      	b.n	8019558 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8019522:	697b      	ldr	r3, [r7, #20]
 8019524:	681b      	ldr	r3, [r3, #0]
 8019526:	2b00      	cmp	r3, #0
 8019528:	d00b      	beq.n	8019542 <sys_timeout_abs+0xa6>
 801952a:	693b      	ldr	r3, [r7, #16]
 801952c:	685a      	ldr	r2, [r3, #4]
 801952e:	697b      	ldr	r3, [r7, #20]
 8019530:	681b      	ldr	r3, [r3, #0]
 8019532:	685b      	ldr	r3, [r3, #4]
 8019534:	1ad3      	subs	r3, r2, r3
 8019536:	0fdb      	lsrs	r3, r3, #31
 8019538:	f003 0301 	and.w	r3, r3, #1
 801953c:	b2db      	uxtb	r3, r3
 801953e:	2b00      	cmp	r3, #0
 8019540:	d007      	beq.n	8019552 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8019542:	697b      	ldr	r3, [r7, #20]
 8019544:	681a      	ldr	r2, [r3, #0]
 8019546:	693b      	ldr	r3, [r7, #16]
 8019548:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801954a:	697b      	ldr	r3, [r7, #20]
 801954c:	693a      	ldr	r2, [r7, #16]
 801954e:	601a      	str	r2, [r3, #0]
        break;
 8019550:	e007      	b.n	8019562 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8019552:	697b      	ldr	r3, [r7, #20]
 8019554:	681b      	ldr	r3, [r3, #0]
 8019556:	617b      	str	r3, [r7, #20]
 8019558:	697b      	ldr	r3, [r7, #20]
 801955a:	2b00      	cmp	r3, #0
 801955c:	d1e1      	bne.n	8019522 <sys_timeout_abs+0x86>
 801955e:	e000      	b.n	8019562 <sys_timeout_abs+0xc6>
    return;
 8019560:	bf00      	nop
      }
    }
  }
}
 8019562:	3718      	adds	r7, #24
 8019564:	46bd      	mov	sp, r7
 8019566:	bd80      	pop	{r7, pc}
 8019568:	08026028 	.word	0x08026028
 801956c:	0802605c 	.word	0x0802605c
 8019570:	0802609c 	.word	0x0802609c
 8019574:	24007e28 	.word	0x24007e28

08019578 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8019578:	b580      	push	{r7, lr}
 801957a:	b086      	sub	sp, #24
 801957c:	af00      	add	r7, sp, #0
 801957e:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8019580:	687b      	ldr	r3, [r7, #4]
 8019582:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8019584:	697b      	ldr	r3, [r7, #20]
 8019586:	685b      	ldr	r3, [r3, #4]
 8019588:	4798      	blx	r3

  now = sys_now();
 801958a:	f7f1 f803 	bl	800a594 <sys_now>
 801958e:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8019590:	697b      	ldr	r3, [r7, #20]
 8019592:	681a      	ldr	r2, [r3, #0]
 8019594:	4b0f      	ldr	r3, [pc, #60]	; (80195d4 <lwip_cyclic_timer+0x5c>)
 8019596:	681b      	ldr	r3, [r3, #0]
 8019598:	4413      	add	r3, r2
 801959a:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801959c:	68fa      	ldr	r2, [r7, #12]
 801959e:	693b      	ldr	r3, [r7, #16]
 80195a0:	1ad3      	subs	r3, r2, r3
 80195a2:	0fdb      	lsrs	r3, r3, #31
 80195a4:	f003 0301 	and.w	r3, r3, #1
 80195a8:	b2db      	uxtb	r3, r3
 80195aa:	2b00      	cmp	r3, #0
 80195ac:	d009      	beq.n	80195c2 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 80195ae:	697b      	ldr	r3, [r7, #20]
 80195b0:	681a      	ldr	r2, [r3, #0]
 80195b2:	693b      	ldr	r3, [r7, #16]
 80195b4:	4413      	add	r3, r2
 80195b6:	687a      	ldr	r2, [r7, #4]
 80195b8:	4907      	ldr	r1, [pc, #28]	; (80195d8 <lwip_cyclic_timer+0x60>)
 80195ba:	4618      	mov	r0, r3
 80195bc:	f7ff ff6e 	bl	801949c <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 80195c0:	e004      	b.n	80195cc <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 80195c2:	687a      	ldr	r2, [r7, #4]
 80195c4:	4904      	ldr	r1, [pc, #16]	; (80195d8 <lwip_cyclic_timer+0x60>)
 80195c6:	68f8      	ldr	r0, [r7, #12]
 80195c8:	f7ff ff68 	bl	801949c <sys_timeout_abs>
}
 80195cc:	bf00      	nop
 80195ce:	3718      	adds	r7, #24
 80195d0:	46bd      	mov	sp, r7
 80195d2:	bd80      	pop	{r7, pc}
 80195d4:	24007e2c 	.word	0x24007e2c
 80195d8:	08019579 	.word	0x08019579

080195dc <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 80195dc:	b580      	push	{r7, lr}
 80195de:	b082      	sub	sp, #8
 80195e0:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80195e2:	2301      	movs	r3, #1
 80195e4:	607b      	str	r3, [r7, #4]
 80195e6:	e00e      	b.n	8019606 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 80195e8:	4a0b      	ldr	r2, [pc, #44]	; (8019618 <sys_timeouts_init+0x3c>)
 80195ea:	687b      	ldr	r3, [r7, #4]
 80195ec:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80195f0:	687b      	ldr	r3, [r7, #4]
 80195f2:	00db      	lsls	r3, r3, #3
 80195f4:	4a08      	ldr	r2, [pc, #32]	; (8019618 <sys_timeouts_init+0x3c>)
 80195f6:	4413      	add	r3, r2
 80195f8:	461a      	mov	r2, r3
 80195fa:	4908      	ldr	r1, [pc, #32]	; (801961c <sys_timeouts_init+0x40>)
 80195fc:	f000 f810 	bl	8019620 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8019600:	687b      	ldr	r3, [r7, #4]
 8019602:	3301      	adds	r3, #1
 8019604:	607b      	str	r3, [r7, #4]
 8019606:	687b      	ldr	r3, [r7, #4]
 8019608:	2b04      	cmp	r3, #4
 801960a:	d9ed      	bls.n	80195e8 <sys_timeouts_init+0xc>
  }
}
 801960c:	bf00      	nop
 801960e:	bf00      	nop
 8019610:	3708      	adds	r7, #8
 8019612:	46bd      	mov	sp, r7
 8019614:	bd80      	pop	{r7, pc}
 8019616:	bf00      	nop
 8019618:	0802705c 	.word	0x0802705c
 801961c:	08019579 	.word	0x08019579

08019620 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8019620:	b580      	push	{r7, lr}
 8019622:	b086      	sub	sp, #24
 8019624:	af00      	add	r7, sp, #0
 8019626:	60f8      	str	r0, [r7, #12]
 8019628:	60b9      	str	r1, [r7, #8]
 801962a:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801962c:	68fb      	ldr	r3, [r7, #12]
 801962e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8019632:	d306      	bcc.n	8019642 <sys_timeout+0x22>
 8019634:	4b0a      	ldr	r3, [pc, #40]	; (8019660 <sys_timeout+0x40>)
 8019636:	f240 1229 	movw	r2, #297	; 0x129
 801963a:	490a      	ldr	r1, [pc, #40]	; (8019664 <sys_timeout+0x44>)
 801963c:	480a      	ldr	r0, [pc, #40]	; (8019668 <sys_timeout+0x48>)
 801963e:	f006 ff07 	bl	8020450 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8019642:	f7f0 ffa7 	bl	800a594 <sys_now>
 8019646:	4602      	mov	r2, r0
 8019648:	68fb      	ldr	r3, [r7, #12]
 801964a:	4413      	add	r3, r2
 801964c:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801964e:	687a      	ldr	r2, [r7, #4]
 8019650:	68b9      	ldr	r1, [r7, #8]
 8019652:	6978      	ldr	r0, [r7, #20]
 8019654:	f7ff ff22 	bl	801949c <sys_timeout_abs>
#endif
}
 8019658:	bf00      	nop
 801965a:	3718      	adds	r7, #24
 801965c:	46bd      	mov	sp, r7
 801965e:	bd80      	pop	{r7, pc}
 8019660:	08026028 	.word	0x08026028
 8019664:	080260c4 	.word	0x080260c4
 8019668:	0802609c 	.word	0x0802609c

0801966c <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 801966c:	b580      	push	{r7, lr}
 801966e:	b084      	sub	sp, #16
 8019670:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8019672:	f7f0 ff8f 	bl	800a594 <sys_now>
 8019676:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8019678:	4b17      	ldr	r3, [pc, #92]	; (80196d8 <sys_check_timeouts+0x6c>)
 801967a:	681b      	ldr	r3, [r3, #0]
 801967c:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801967e:	68bb      	ldr	r3, [r7, #8]
 8019680:	2b00      	cmp	r3, #0
 8019682:	d022      	beq.n	80196ca <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8019684:	68bb      	ldr	r3, [r7, #8]
 8019686:	685b      	ldr	r3, [r3, #4]
 8019688:	68fa      	ldr	r2, [r7, #12]
 801968a:	1ad3      	subs	r3, r2, r3
 801968c:	0fdb      	lsrs	r3, r3, #31
 801968e:	f003 0301 	and.w	r3, r3, #1
 8019692:	b2db      	uxtb	r3, r3
 8019694:	2b00      	cmp	r3, #0
 8019696:	d11a      	bne.n	80196ce <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8019698:	68bb      	ldr	r3, [r7, #8]
 801969a:	681b      	ldr	r3, [r3, #0]
 801969c:	4a0e      	ldr	r2, [pc, #56]	; (80196d8 <sys_check_timeouts+0x6c>)
 801969e:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 80196a0:	68bb      	ldr	r3, [r7, #8]
 80196a2:	689b      	ldr	r3, [r3, #8]
 80196a4:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 80196a6:	68bb      	ldr	r3, [r7, #8]
 80196a8:	68db      	ldr	r3, [r3, #12]
 80196aa:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 80196ac:	68bb      	ldr	r3, [r7, #8]
 80196ae:	685b      	ldr	r3, [r3, #4]
 80196b0:	4a0a      	ldr	r2, [pc, #40]	; (80196dc <sys_check_timeouts+0x70>)
 80196b2:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 80196b4:	68b9      	ldr	r1, [r7, #8]
 80196b6:	200a      	movs	r0, #10
 80196b8:	f7f8 fcbe 	bl	8012038 <memp_free>
    if (handler != NULL) {
 80196bc:	687b      	ldr	r3, [r7, #4]
 80196be:	2b00      	cmp	r3, #0
 80196c0:	d0da      	beq.n	8019678 <sys_check_timeouts+0xc>
      handler(arg);
 80196c2:	687b      	ldr	r3, [r7, #4]
 80196c4:	6838      	ldr	r0, [r7, #0]
 80196c6:	4798      	blx	r3
  do {
 80196c8:	e7d6      	b.n	8019678 <sys_check_timeouts+0xc>
      return;
 80196ca:	bf00      	nop
 80196cc:	e000      	b.n	80196d0 <sys_check_timeouts+0x64>
      return;
 80196ce:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 80196d0:	3710      	adds	r7, #16
 80196d2:	46bd      	mov	sp, r7
 80196d4:	bd80      	pop	{r7, pc}
 80196d6:	bf00      	nop
 80196d8:	24007e28 	.word	0x24007e28
 80196dc:	24007e2c 	.word	0x24007e2c

080196e0 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 80196e0:	b580      	push	{r7, lr}
 80196e2:	b082      	sub	sp, #8
 80196e4:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 80196e6:	4b16      	ldr	r3, [pc, #88]	; (8019740 <sys_timeouts_sleeptime+0x60>)
 80196e8:	681b      	ldr	r3, [r3, #0]
 80196ea:	2b00      	cmp	r3, #0
 80196ec:	d102      	bne.n	80196f4 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 80196ee:	f04f 33ff 	mov.w	r3, #4294967295
 80196f2:	e020      	b.n	8019736 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 80196f4:	f7f0 ff4e 	bl	800a594 <sys_now>
 80196f8:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 80196fa:	4b11      	ldr	r3, [pc, #68]	; (8019740 <sys_timeouts_sleeptime+0x60>)
 80196fc:	681b      	ldr	r3, [r3, #0]
 80196fe:	685a      	ldr	r2, [r3, #4]
 8019700:	687b      	ldr	r3, [r7, #4]
 8019702:	1ad3      	subs	r3, r2, r3
 8019704:	0fdb      	lsrs	r3, r3, #31
 8019706:	f003 0301 	and.w	r3, r3, #1
 801970a:	b2db      	uxtb	r3, r3
 801970c:	2b00      	cmp	r3, #0
 801970e:	d001      	beq.n	8019714 <sys_timeouts_sleeptime+0x34>
    return 0;
 8019710:	2300      	movs	r3, #0
 8019712:	e010      	b.n	8019736 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8019714:	4b0a      	ldr	r3, [pc, #40]	; (8019740 <sys_timeouts_sleeptime+0x60>)
 8019716:	681b      	ldr	r3, [r3, #0]
 8019718:	685a      	ldr	r2, [r3, #4]
 801971a:	687b      	ldr	r3, [r7, #4]
 801971c:	1ad3      	subs	r3, r2, r3
 801971e:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8019720:	683b      	ldr	r3, [r7, #0]
 8019722:	2b00      	cmp	r3, #0
 8019724:	da06      	bge.n	8019734 <sys_timeouts_sleeptime+0x54>
 8019726:	4b07      	ldr	r3, [pc, #28]	; (8019744 <sys_timeouts_sleeptime+0x64>)
 8019728:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 801972c:	4906      	ldr	r1, [pc, #24]	; (8019748 <sys_timeouts_sleeptime+0x68>)
 801972e:	4807      	ldr	r0, [pc, #28]	; (801974c <sys_timeouts_sleeptime+0x6c>)
 8019730:	f006 fe8e 	bl	8020450 <iprintf>
    return ret;
 8019734:	683b      	ldr	r3, [r7, #0]
  }
}
 8019736:	4618      	mov	r0, r3
 8019738:	3708      	adds	r7, #8
 801973a:	46bd      	mov	sp, r7
 801973c:	bd80      	pop	{r7, pc}
 801973e:	bf00      	nop
 8019740:	24007e28 	.word	0x24007e28
 8019744:	08026028 	.word	0x08026028
 8019748:	080260fc 	.word	0x080260fc
 801974c:	0802609c 	.word	0x0802609c

08019750 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8019750:	b580      	push	{r7, lr}
 8019752:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8019754:	f005 f8dc 	bl	801e910 <rand>
 8019758:	4603      	mov	r3, r0
 801975a:	b29b      	uxth	r3, r3
 801975c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8019760:	b29b      	uxth	r3, r3
 8019762:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8019766:	b29a      	uxth	r2, r3
 8019768:	4b01      	ldr	r3, [pc, #4]	; (8019770 <udp_init+0x20>)
 801976a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801976c:	bf00      	nop
 801976e:	bd80      	pop	{r7, pc}
 8019770:	240002fc 	.word	0x240002fc

08019774 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8019774:	b480      	push	{r7}
 8019776:	b083      	sub	sp, #12
 8019778:	af00      	add	r7, sp, #0
  u16_t n = 0;
 801977a:	2300      	movs	r3, #0
 801977c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801977e:	4b17      	ldr	r3, [pc, #92]	; (80197dc <udp_new_port+0x68>)
 8019780:	881b      	ldrh	r3, [r3, #0]
 8019782:	1c5a      	adds	r2, r3, #1
 8019784:	b291      	uxth	r1, r2
 8019786:	4a15      	ldr	r2, [pc, #84]	; (80197dc <udp_new_port+0x68>)
 8019788:	8011      	strh	r1, [r2, #0]
 801978a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801978e:	4293      	cmp	r3, r2
 8019790:	d103      	bne.n	801979a <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8019792:	4b12      	ldr	r3, [pc, #72]	; (80197dc <udp_new_port+0x68>)
 8019794:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8019798:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801979a:	4b11      	ldr	r3, [pc, #68]	; (80197e0 <udp_new_port+0x6c>)
 801979c:	681b      	ldr	r3, [r3, #0]
 801979e:	603b      	str	r3, [r7, #0]
 80197a0:	e011      	b.n	80197c6 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 80197a2:	683b      	ldr	r3, [r7, #0]
 80197a4:	8a5a      	ldrh	r2, [r3, #18]
 80197a6:	4b0d      	ldr	r3, [pc, #52]	; (80197dc <udp_new_port+0x68>)
 80197a8:	881b      	ldrh	r3, [r3, #0]
 80197aa:	429a      	cmp	r2, r3
 80197ac:	d108      	bne.n	80197c0 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 80197ae:	88fb      	ldrh	r3, [r7, #6]
 80197b0:	3301      	adds	r3, #1
 80197b2:	80fb      	strh	r3, [r7, #6]
 80197b4:	88fb      	ldrh	r3, [r7, #6]
 80197b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80197ba:	d3e0      	bcc.n	801977e <udp_new_port+0xa>
        return 0;
 80197bc:	2300      	movs	r3, #0
 80197be:	e007      	b.n	80197d0 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80197c0:	683b      	ldr	r3, [r7, #0]
 80197c2:	68db      	ldr	r3, [r3, #12]
 80197c4:	603b      	str	r3, [r7, #0]
 80197c6:	683b      	ldr	r3, [r7, #0]
 80197c8:	2b00      	cmp	r3, #0
 80197ca:	d1ea      	bne.n	80197a2 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 80197cc:	4b03      	ldr	r3, [pc, #12]	; (80197dc <udp_new_port+0x68>)
 80197ce:	881b      	ldrh	r3, [r3, #0]
}
 80197d0:	4618      	mov	r0, r3
 80197d2:	370c      	adds	r7, #12
 80197d4:	46bd      	mov	sp, r7
 80197d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80197da:	4770      	bx	lr
 80197dc:	240002fc 	.word	0x240002fc
 80197e0:	24007e34 	.word	0x24007e34

080197e4 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 80197e4:	b580      	push	{r7, lr}
 80197e6:	b084      	sub	sp, #16
 80197e8:	af00      	add	r7, sp, #0
 80197ea:	60f8      	str	r0, [r7, #12]
 80197ec:	60b9      	str	r1, [r7, #8]
 80197ee:	4613      	mov	r3, r2
 80197f0:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 80197f2:	68fb      	ldr	r3, [r7, #12]
 80197f4:	2b00      	cmp	r3, #0
 80197f6:	d105      	bne.n	8019804 <udp_input_local_match+0x20>
 80197f8:	4b27      	ldr	r3, [pc, #156]	; (8019898 <udp_input_local_match+0xb4>)
 80197fa:	2287      	movs	r2, #135	; 0x87
 80197fc:	4927      	ldr	r1, [pc, #156]	; (801989c <udp_input_local_match+0xb8>)
 80197fe:	4828      	ldr	r0, [pc, #160]	; (80198a0 <udp_input_local_match+0xbc>)
 8019800:	f006 fe26 	bl	8020450 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8019804:	68bb      	ldr	r3, [r7, #8]
 8019806:	2b00      	cmp	r3, #0
 8019808:	d105      	bne.n	8019816 <udp_input_local_match+0x32>
 801980a:	4b23      	ldr	r3, [pc, #140]	; (8019898 <udp_input_local_match+0xb4>)
 801980c:	2288      	movs	r2, #136	; 0x88
 801980e:	4925      	ldr	r1, [pc, #148]	; (80198a4 <udp_input_local_match+0xc0>)
 8019810:	4823      	ldr	r0, [pc, #140]	; (80198a0 <udp_input_local_match+0xbc>)
 8019812:	f006 fe1d 	bl	8020450 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8019816:	68fb      	ldr	r3, [r7, #12]
 8019818:	7a1b      	ldrb	r3, [r3, #8]
 801981a:	2b00      	cmp	r3, #0
 801981c:	d00b      	beq.n	8019836 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801981e:	68fb      	ldr	r3, [r7, #12]
 8019820:	7a1a      	ldrb	r2, [r3, #8]
 8019822:	4b21      	ldr	r3, [pc, #132]	; (80198a8 <udp_input_local_match+0xc4>)
 8019824:	685b      	ldr	r3, [r3, #4]
 8019826:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801982a:	3301      	adds	r3, #1
 801982c:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801982e:	429a      	cmp	r2, r3
 8019830:	d001      	beq.n	8019836 <udp_input_local_match+0x52>
    return 0;
 8019832:	2300      	movs	r3, #0
 8019834:	e02b      	b.n	801988e <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8019836:	79fb      	ldrb	r3, [r7, #7]
 8019838:	2b00      	cmp	r3, #0
 801983a:	d018      	beq.n	801986e <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801983c:	68fb      	ldr	r3, [r7, #12]
 801983e:	2b00      	cmp	r3, #0
 8019840:	d013      	beq.n	801986a <udp_input_local_match+0x86>
 8019842:	68fb      	ldr	r3, [r7, #12]
 8019844:	681b      	ldr	r3, [r3, #0]
 8019846:	2b00      	cmp	r3, #0
 8019848:	d00f      	beq.n	801986a <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801984a:	4b17      	ldr	r3, [pc, #92]	; (80198a8 <udp_input_local_match+0xc4>)
 801984c:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801984e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019852:	d00a      	beq.n	801986a <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8019854:	68fb      	ldr	r3, [r7, #12]
 8019856:	681a      	ldr	r2, [r3, #0]
 8019858:	4b13      	ldr	r3, [pc, #76]	; (80198a8 <udp_input_local_match+0xc4>)
 801985a:	695b      	ldr	r3, [r3, #20]
 801985c:	405a      	eors	r2, r3
 801985e:	68bb      	ldr	r3, [r7, #8]
 8019860:	3308      	adds	r3, #8
 8019862:	681b      	ldr	r3, [r3, #0]
 8019864:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8019866:	2b00      	cmp	r3, #0
 8019868:	d110      	bne.n	801988c <udp_input_local_match+0xa8>
          return 1;
 801986a:	2301      	movs	r3, #1
 801986c:	e00f      	b.n	801988e <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801986e:	68fb      	ldr	r3, [r7, #12]
 8019870:	2b00      	cmp	r3, #0
 8019872:	d009      	beq.n	8019888 <udp_input_local_match+0xa4>
 8019874:	68fb      	ldr	r3, [r7, #12]
 8019876:	681b      	ldr	r3, [r3, #0]
 8019878:	2b00      	cmp	r3, #0
 801987a:	d005      	beq.n	8019888 <udp_input_local_match+0xa4>
 801987c:	68fb      	ldr	r3, [r7, #12]
 801987e:	681a      	ldr	r2, [r3, #0]
 8019880:	4b09      	ldr	r3, [pc, #36]	; (80198a8 <udp_input_local_match+0xc4>)
 8019882:	695b      	ldr	r3, [r3, #20]
 8019884:	429a      	cmp	r2, r3
 8019886:	d101      	bne.n	801988c <udp_input_local_match+0xa8>
        return 1;
 8019888:	2301      	movs	r3, #1
 801988a:	e000      	b.n	801988e <udp_input_local_match+0xaa>
      }
  }

  return 0;
 801988c:	2300      	movs	r3, #0
}
 801988e:	4618      	mov	r0, r3
 8019890:	3710      	adds	r7, #16
 8019892:	46bd      	mov	sp, r7
 8019894:	bd80      	pop	{r7, pc}
 8019896:	bf00      	nop
 8019898:	08026110 	.word	0x08026110
 801989c:	08026140 	.word	0x08026140
 80198a0:	08026164 	.word	0x08026164
 80198a4:	0802618c 	.word	0x0802618c
 80198a8:	24004cb8 	.word	0x24004cb8

080198ac <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 80198ac:	b590      	push	{r4, r7, lr}
 80198ae:	b08d      	sub	sp, #52	; 0x34
 80198b0:	af02      	add	r7, sp, #8
 80198b2:	6078      	str	r0, [r7, #4]
 80198b4:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 80198b6:	2300      	movs	r3, #0
 80198b8:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 80198ba:	687b      	ldr	r3, [r7, #4]
 80198bc:	2b00      	cmp	r3, #0
 80198be:	d105      	bne.n	80198cc <udp_input+0x20>
 80198c0:	4b7c      	ldr	r3, [pc, #496]	; (8019ab4 <udp_input+0x208>)
 80198c2:	22cf      	movs	r2, #207	; 0xcf
 80198c4:	497c      	ldr	r1, [pc, #496]	; (8019ab8 <udp_input+0x20c>)
 80198c6:	487d      	ldr	r0, [pc, #500]	; (8019abc <udp_input+0x210>)
 80198c8:	f006 fdc2 	bl	8020450 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 80198cc:	683b      	ldr	r3, [r7, #0]
 80198ce:	2b00      	cmp	r3, #0
 80198d0:	d105      	bne.n	80198de <udp_input+0x32>
 80198d2:	4b78      	ldr	r3, [pc, #480]	; (8019ab4 <udp_input+0x208>)
 80198d4:	22d0      	movs	r2, #208	; 0xd0
 80198d6:	497a      	ldr	r1, [pc, #488]	; (8019ac0 <udp_input+0x214>)
 80198d8:	4878      	ldr	r0, [pc, #480]	; (8019abc <udp_input+0x210>)
 80198da:	f006 fdb9 	bl	8020450 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 80198de:	687b      	ldr	r3, [r7, #4]
 80198e0:	895b      	ldrh	r3, [r3, #10]
 80198e2:	2b07      	cmp	r3, #7
 80198e4:	d803      	bhi.n	80198ee <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 80198e6:	6878      	ldr	r0, [r7, #4]
 80198e8:	f7f9 fa88 	bl	8012dfc <pbuf_free>
    goto end;
 80198ec:	e0de      	b.n	8019aac <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 80198ee:	687b      	ldr	r3, [r7, #4]
 80198f0:	685b      	ldr	r3, [r3, #4]
 80198f2:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 80198f4:	4b73      	ldr	r3, [pc, #460]	; (8019ac4 <udp_input+0x218>)
 80198f6:	695b      	ldr	r3, [r3, #20]
 80198f8:	4a72      	ldr	r2, [pc, #456]	; (8019ac4 <udp_input+0x218>)
 80198fa:	6812      	ldr	r2, [r2, #0]
 80198fc:	4611      	mov	r1, r2
 80198fe:	4618      	mov	r0, r3
 8019900:	f003 feca 	bl	801d698 <ip4_addr_isbroadcast_u32>
 8019904:	4603      	mov	r3, r0
 8019906:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8019908:	697b      	ldr	r3, [r7, #20]
 801990a:	881b      	ldrh	r3, [r3, #0]
 801990c:	b29b      	uxth	r3, r3
 801990e:	4618      	mov	r0, r3
 8019910:	f7f7 fd8c 	bl	801142c <lwip_htons>
 8019914:	4603      	mov	r3, r0
 8019916:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8019918:	697b      	ldr	r3, [r7, #20]
 801991a:	885b      	ldrh	r3, [r3, #2]
 801991c:	b29b      	uxth	r3, r3
 801991e:	4618      	mov	r0, r3
 8019920:	f7f7 fd84 	bl	801142c <lwip_htons>
 8019924:	4603      	mov	r3, r0
 8019926:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8019928:	2300      	movs	r3, #0
 801992a:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 801992c:	2300      	movs	r3, #0
 801992e:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8019930:	2300      	movs	r3, #0
 8019932:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8019934:	4b64      	ldr	r3, [pc, #400]	; (8019ac8 <udp_input+0x21c>)
 8019936:	681b      	ldr	r3, [r3, #0]
 8019938:	627b      	str	r3, [r7, #36]	; 0x24
 801993a:	e054      	b.n	80199e6 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 801993c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801993e:	8a5b      	ldrh	r3, [r3, #18]
 8019940:	89fa      	ldrh	r2, [r7, #14]
 8019942:	429a      	cmp	r2, r3
 8019944:	d14a      	bne.n	80199dc <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8019946:	7cfb      	ldrb	r3, [r7, #19]
 8019948:	461a      	mov	r2, r3
 801994a:	6839      	ldr	r1, [r7, #0]
 801994c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801994e:	f7ff ff49 	bl	80197e4 <udp_input_local_match>
 8019952:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8019954:	2b00      	cmp	r3, #0
 8019956:	d041      	beq.n	80199dc <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8019958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801995a:	7c1b      	ldrb	r3, [r3, #16]
 801995c:	f003 0304 	and.w	r3, r3, #4
 8019960:	2b00      	cmp	r3, #0
 8019962:	d11d      	bne.n	80199a0 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8019964:	69fb      	ldr	r3, [r7, #28]
 8019966:	2b00      	cmp	r3, #0
 8019968:	d102      	bne.n	8019970 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801996a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801996c:	61fb      	str	r3, [r7, #28]
 801996e:	e017      	b.n	80199a0 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8019970:	7cfb      	ldrb	r3, [r7, #19]
 8019972:	2b00      	cmp	r3, #0
 8019974:	d014      	beq.n	80199a0 <udp_input+0xf4>
 8019976:	4b53      	ldr	r3, [pc, #332]	; (8019ac4 <udp_input+0x218>)
 8019978:	695b      	ldr	r3, [r3, #20]
 801997a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801997e:	d10f      	bne.n	80199a0 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8019980:	69fb      	ldr	r3, [r7, #28]
 8019982:	681a      	ldr	r2, [r3, #0]
 8019984:	683b      	ldr	r3, [r7, #0]
 8019986:	3304      	adds	r3, #4
 8019988:	681b      	ldr	r3, [r3, #0]
 801998a:	429a      	cmp	r2, r3
 801998c:	d008      	beq.n	80199a0 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801998e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019990:	681a      	ldr	r2, [r3, #0]
 8019992:	683b      	ldr	r3, [r7, #0]
 8019994:	3304      	adds	r3, #4
 8019996:	681b      	ldr	r3, [r3, #0]
 8019998:	429a      	cmp	r2, r3
 801999a:	d101      	bne.n	80199a0 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 801999c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801999e:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 80199a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80199a2:	8a9b      	ldrh	r3, [r3, #20]
 80199a4:	8a3a      	ldrh	r2, [r7, #16]
 80199a6:	429a      	cmp	r2, r3
 80199a8:	d118      	bne.n	80199dc <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 80199aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80199ac:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 80199ae:	2b00      	cmp	r3, #0
 80199b0:	d005      	beq.n	80199be <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 80199b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80199b4:	685a      	ldr	r2, [r3, #4]
 80199b6:	4b43      	ldr	r3, [pc, #268]	; (8019ac4 <udp_input+0x218>)
 80199b8:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 80199ba:	429a      	cmp	r2, r3
 80199bc:	d10e      	bne.n	80199dc <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 80199be:	6a3b      	ldr	r3, [r7, #32]
 80199c0:	2b00      	cmp	r3, #0
 80199c2:	d014      	beq.n	80199ee <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 80199c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80199c6:	68da      	ldr	r2, [r3, #12]
 80199c8:	6a3b      	ldr	r3, [r7, #32]
 80199ca:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 80199cc:	4b3e      	ldr	r3, [pc, #248]	; (8019ac8 <udp_input+0x21c>)
 80199ce:	681a      	ldr	r2, [r3, #0]
 80199d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80199d2:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 80199d4:	4a3c      	ldr	r2, [pc, #240]	; (8019ac8 <udp_input+0x21c>)
 80199d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80199d8:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 80199da:	e008      	b.n	80199ee <udp_input+0x142>
      }
    }

    prev = pcb;
 80199dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80199de:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80199e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80199e2:	68db      	ldr	r3, [r3, #12]
 80199e4:	627b      	str	r3, [r7, #36]	; 0x24
 80199e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80199e8:	2b00      	cmp	r3, #0
 80199ea:	d1a7      	bne.n	801993c <udp_input+0x90>
 80199ec:	e000      	b.n	80199f0 <udp_input+0x144>
        break;
 80199ee:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 80199f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80199f2:	2b00      	cmp	r3, #0
 80199f4:	d101      	bne.n	80199fa <udp_input+0x14e>
    pcb = uncon_pcb;
 80199f6:	69fb      	ldr	r3, [r7, #28]
 80199f8:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 80199fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80199fc:	2b00      	cmp	r3, #0
 80199fe:	d002      	beq.n	8019a06 <udp_input+0x15a>
    for_us = 1;
 8019a00:	2301      	movs	r3, #1
 8019a02:	76fb      	strb	r3, [r7, #27]
 8019a04:	e00a      	b.n	8019a1c <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8019a06:	683b      	ldr	r3, [r7, #0]
 8019a08:	3304      	adds	r3, #4
 8019a0a:	681a      	ldr	r2, [r3, #0]
 8019a0c:	4b2d      	ldr	r3, [pc, #180]	; (8019ac4 <udp_input+0x218>)
 8019a0e:	695b      	ldr	r3, [r3, #20]
 8019a10:	429a      	cmp	r2, r3
 8019a12:	bf0c      	ite	eq
 8019a14:	2301      	moveq	r3, #1
 8019a16:	2300      	movne	r3, #0
 8019a18:	b2db      	uxtb	r3, r3
 8019a1a:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8019a1c:	7efb      	ldrb	r3, [r7, #27]
 8019a1e:	2b00      	cmp	r3, #0
 8019a20:	d041      	beq.n	8019aa6 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8019a22:	2108      	movs	r1, #8
 8019a24:	6878      	ldr	r0, [r7, #4]
 8019a26:	f7f9 f931 	bl	8012c8c <pbuf_remove_header>
 8019a2a:	4603      	mov	r3, r0
 8019a2c:	2b00      	cmp	r3, #0
 8019a2e:	d00a      	beq.n	8019a46 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8019a30:	4b20      	ldr	r3, [pc, #128]	; (8019ab4 <udp_input+0x208>)
 8019a32:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8019a36:	4925      	ldr	r1, [pc, #148]	; (8019acc <udp_input+0x220>)
 8019a38:	4820      	ldr	r0, [pc, #128]	; (8019abc <udp_input+0x210>)
 8019a3a:	f006 fd09 	bl	8020450 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8019a3e:	6878      	ldr	r0, [r7, #4]
 8019a40:	f7f9 f9dc 	bl	8012dfc <pbuf_free>
      goto end;
 8019a44:	e032      	b.n	8019aac <udp_input+0x200>
    }

    if (pcb != NULL) {
 8019a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019a48:	2b00      	cmp	r3, #0
 8019a4a:	d012      	beq.n	8019a72 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8019a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019a4e:	699b      	ldr	r3, [r3, #24]
 8019a50:	2b00      	cmp	r3, #0
 8019a52:	d00a      	beq.n	8019a6a <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8019a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019a56:	699c      	ldr	r4, [r3, #24]
 8019a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019a5a:	69d8      	ldr	r0, [r3, #28]
 8019a5c:	8a3b      	ldrh	r3, [r7, #16]
 8019a5e:	9300      	str	r3, [sp, #0]
 8019a60:	4b1b      	ldr	r3, [pc, #108]	; (8019ad0 <udp_input+0x224>)
 8019a62:	687a      	ldr	r2, [r7, #4]
 8019a64:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8019a66:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8019a68:	e021      	b.n	8019aae <udp_input+0x202>
        pbuf_free(p);
 8019a6a:	6878      	ldr	r0, [r7, #4]
 8019a6c:	f7f9 f9c6 	bl	8012dfc <pbuf_free>
        goto end;
 8019a70:	e01c      	b.n	8019aac <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8019a72:	7cfb      	ldrb	r3, [r7, #19]
 8019a74:	2b00      	cmp	r3, #0
 8019a76:	d112      	bne.n	8019a9e <udp_input+0x1f2>
 8019a78:	4b12      	ldr	r3, [pc, #72]	; (8019ac4 <udp_input+0x218>)
 8019a7a:	695b      	ldr	r3, [r3, #20]
 8019a7c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8019a80:	2be0      	cmp	r3, #224	; 0xe0
 8019a82:	d00c      	beq.n	8019a9e <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8019a84:	4b0f      	ldr	r3, [pc, #60]	; (8019ac4 <udp_input+0x218>)
 8019a86:	899b      	ldrh	r3, [r3, #12]
 8019a88:	3308      	adds	r3, #8
 8019a8a:	b29b      	uxth	r3, r3
 8019a8c:	b21b      	sxth	r3, r3
 8019a8e:	4619      	mov	r1, r3
 8019a90:	6878      	ldr	r0, [r7, #4]
 8019a92:	f7f9 f96e 	bl	8012d72 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8019a96:	2103      	movs	r1, #3
 8019a98:	6878      	ldr	r0, [r7, #4]
 8019a9a:	f003 fab5 	bl	801d008 <icmp_dest_unreach>
      pbuf_free(p);
 8019a9e:	6878      	ldr	r0, [r7, #4]
 8019aa0:	f7f9 f9ac 	bl	8012dfc <pbuf_free>
  return;
 8019aa4:	e003      	b.n	8019aae <udp_input+0x202>
    pbuf_free(p);
 8019aa6:	6878      	ldr	r0, [r7, #4]
 8019aa8:	f7f9 f9a8 	bl	8012dfc <pbuf_free>
  return;
 8019aac:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8019aae:	372c      	adds	r7, #44	; 0x2c
 8019ab0:	46bd      	mov	sp, r7
 8019ab2:	bd90      	pop	{r4, r7, pc}
 8019ab4:	08026110 	.word	0x08026110
 8019ab8:	080261b4 	.word	0x080261b4
 8019abc:	08026164 	.word	0x08026164
 8019ac0:	080261cc 	.word	0x080261cc
 8019ac4:	24004cb8 	.word	0x24004cb8
 8019ac8:	24007e34 	.word	0x24007e34
 8019acc:	080261e8 	.word	0x080261e8
 8019ad0:	24004cc8 	.word	0x24004cc8

08019ad4 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 8019ad4:	b580      	push	{r7, lr}
 8019ad6:	b082      	sub	sp, #8
 8019ad8:	af00      	add	r7, sp, #0
 8019ada:	6078      	str	r0, [r7, #4]
 8019adc:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 8019ade:	687b      	ldr	r3, [r7, #4]
 8019ae0:	2b00      	cmp	r3, #0
 8019ae2:	d109      	bne.n	8019af8 <udp_send+0x24>
 8019ae4:	4b11      	ldr	r3, [pc, #68]	; (8019b2c <udp_send+0x58>)
 8019ae6:	f240 12d5 	movw	r2, #469	; 0x1d5
 8019aea:	4911      	ldr	r1, [pc, #68]	; (8019b30 <udp_send+0x5c>)
 8019aec:	4811      	ldr	r0, [pc, #68]	; (8019b34 <udp_send+0x60>)
 8019aee:	f006 fcaf 	bl	8020450 <iprintf>
 8019af2:	f06f 030f 	mvn.w	r3, #15
 8019af6:	e015      	b.n	8019b24 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 8019af8:	683b      	ldr	r3, [r7, #0]
 8019afa:	2b00      	cmp	r3, #0
 8019afc:	d109      	bne.n	8019b12 <udp_send+0x3e>
 8019afe:	4b0b      	ldr	r3, [pc, #44]	; (8019b2c <udp_send+0x58>)
 8019b00:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 8019b04:	490c      	ldr	r1, [pc, #48]	; (8019b38 <udp_send+0x64>)
 8019b06:	480b      	ldr	r0, [pc, #44]	; (8019b34 <udp_send+0x60>)
 8019b08:	f006 fca2 	bl	8020450 <iprintf>
 8019b0c:	f06f 030f 	mvn.w	r3, #15
 8019b10:	e008      	b.n	8019b24 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 8019b12:	687b      	ldr	r3, [r7, #4]
 8019b14:	1d1a      	adds	r2, r3, #4
 8019b16:	687b      	ldr	r3, [r7, #4]
 8019b18:	8a9b      	ldrh	r3, [r3, #20]
 8019b1a:	6839      	ldr	r1, [r7, #0]
 8019b1c:	6878      	ldr	r0, [r7, #4]
 8019b1e:	f000 f80d 	bl	8019b3c <udp_sendto>
 8019b22:	4603      	mov	r3, r0
}
 8019b24:	4618      	mov	r0, r3
 8019b26:	3708      	adds	r7, #8
 8019b28:	46bd      	mov	sp, r7
 8019b2a:	bd80      	pop	{r7, pc}
 8019b2c:	08026110 	.word	0x08026110
 8019b30:	08026204 	.word	0x08026204
 8019b34:	08026164 	.word	0x08026164
 8019b38:	0802621c 	.word	0x0802621c

08019b3c <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 8019b3c:	b580      	push	{r7, lr}
 8019b3e:	b088      	sub	sp, #32
 8019b40:	af02      	add	r7, sp, #8
 8019b42:	60f8      	str	r0, [r7, #12]
 8019b44:	60b9      	str	r1, [r7, #8]
 8019b46:	607a      	str	r2, [r7, #4]
 8019b48:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 8019b4a:	68fb      	ldr	r3, [r7, #12]
 8019b4c:	2b00      	cmp	r3, #0
 8019b4e:	d109      	bne.n	8019b64 <udp_sendto+0x28>
 8019b50:	4b23      	ldr	r3, [pc, #140]	; (8019be0 <udp_sendto+0xa4>)
 8019b52:	f44f 7206 	mov.w	r2, #536	; 0x218
 8019b56:	4923      	ldr	r1, [pc, #140]	; (8019be4 <udp_sendto+0xa8>)
 8019b58:	4823      	ldr	r0, [pc, #140]	; (8019be8 <udp_sendto+0xac>)
 8019b5a:	f006 fc79 	bl	8020450 <iprintf>
 8019b5e:	f06f 030f 	mvn.w	r3, #15
 8019b62:	e038      	b.n	8019bd6 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 8019b64:	68bb      	ldr	r3, [r7, #8]
 8019b66:	2b00      	cmp	r3, #0
 8019b68:	d109      	bne.n	8019b7e <udp_sendto+0x42>
 8019b6a:	4b1d      	ldr	r3, [pc, #116]	; (8019be0 <udp_sendto+0xa4>)
 8019b6c:	f240 2219 	movw	r2, #537	; 0x219
 8019b70:	491e      	ldr	r1, [pc, #120]	; (8019bec <udp_sendto+0xb0>)
 8019b72:	481d      	ldr	r0, [pc, #116]	; (8019be8 <udp_sendto+0xac>)
 8019b74:	f006 fc6c 	bl	8020450 <iprintf>
 8019b78:	f06f 030f 	mvn.w	r3, #15
 8019b7c:	e02b      	b.n	8019bd6 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8019b7e:	687b      	ldr	r3, [r7, #4]
 8019b80:	2b00      	cmp	r3, #0
 8019b82:	d109      	bne.n	8019b98 <udp_sendto+0x5c>
 8019b84:	4b16      	ldr	r3, [pc, #88]	; (8019be0 <udp_sendto+0xa4>)
 8019b86:	f240 221a 	movw	r2, #538	; 0x21a
 8019b8a:	4919      	ldr	r1, [pc, #100]	; (8019bf0 <udp_sendto+0xb4>)
 8019b8c:	4816      	ldr	r0, [pc, #88]	; (8019be8 <udp_sendto+0xac>)
 8019b8e:	f006 fc5f 	bl	8020450 <iprintf>
 8019b92:	f06f 030f 	mvn.w	r3, #15
 8019b96:	e01e      	b.n	8019bd6 <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8019b98:	68fb      	ldr	r3, [r7, #12]
 8019b9a:	7a1b      	ldrb	r3, [r3, #8]
 8019b9c:	2b00      	cmp	r3, #0
 8019b9e:	d006      	beq.n	8019bae <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 8019ba0:	68fb      	ldr	r3, [r7, #12]
 8019ba2:	7a1b      	ldrb	r3, [r3, #8]
 8019ba4:	4618      	mov	r0, r3
 8019ba6:	f7f8 fd69 	bl	801267c <netif_get_by_index>
 8019baa:	6178      	str	r0, [r7, #20]
 8019bac:	e003      	b.n	8019bb6 <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 8019bae:	6878      	ldr	r0, [r7, #4]
 8019bb0:	f003 fabe 	bl	801d130 <ip4_route>
 8019bb4:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 8019bb6:	697b      	ldr	r3, [r7, #20]
 8019bb8:	2b00      	cmp	r3, #0
 8019bba:	d102      	bne.n	8019bc2 <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 8019bbc:	f06f 0303 	mvn.w	r3, #3
 8019bc0:	e009      	b.n	8019bd6 <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 8019bc2:	887a      	ldrh	r2, [r7, #2]
 8019bc4:	697b      	ldr	r3, [r7, #20]
 8019bc6:	9300      	str	r3, [sp, #0]
 8019bc8:	4613      	mov	r3, r2
 8019bca:	687a      	ldr	r2, [r7, #4]
 8019bcc:	68b9      	ldr	r1, [r7, #8]
 8019bce:	68f8      	ldr	r0, [r7, #12]
 8019bd0:	f000 f810 	bl	8019bf4 <udp_sendto_if>
 8019bd4:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8019bd6:	4618      	mov	r0, r3
 8019bd8:	3718      	adds	r7, #24
 8019bda:	46bd      	mov	sp, r7
 8019bdc:	bd80      	pop	{r7, pc}
 8019bde:	bf00      	nop
 8019be0:	08026110 	.word	0x08026110
 8019be4:	08026234 	.word	0x08026234
 8019be8:	08026164 	.word	0x08026164
 8019bec:	0802624c 	.word	0x0802624c
 8019bf0:	08026268 	.word	0x08026268

08019bf4 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8019bf4:	b580      	push	{r7, lr}
 8019bf6:	b088      	sub	sp, #32
 8019bf8:	af02      	add	r7, sp, #8
 8019bfa:	60f8      	str	r0, [r7, #12]
 8019bfc:	60b9      	str	r1, [r7, #8]
 8019bfe:	607a      	str	r2, [r7, #4]
 8019c00:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8019c02:	68fb      	ldr	r3, [r7, #12]
 8019c04:	2b00      	cmp	r3, #0
 8019c06:	d109      	bne.n	8019c1c <udp_sendto_if+0x28>
 8019c08:	4b2e      	ldr	r3, [pc, #184]	; (8019cc4 <udp_sendto_if+0xd0>)
 8019c0a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8019c0e:	492e      	ldr	r1, [pc, #184]	; (8019cc8 <udp_sendto_if+0xd4>)
 8019c10:	482e      	ldr	r0, [pc, #184]	; (8019ccc <udp_sendto_if+0xd8>)
 8019c12:	f006 fc1d 	bl	8020450 <iprintf>
 8019c16:	f06f 030f 	mvn.w	r3, #15
 8019c1a:	e04f      	b.n	8019cbc <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8019c1c:	68bb      	ldr	r3, [r7, #8]
 8019c1e:	2b00      	cmp	r3, #0
 8019c20:	d109      	bne.n	8019c36 <udp_sendto_if+0x42>
 8019c22:	4b28      	ldr	r3, [pc, #160]	; (8019cc4 <udp_sendto_if+0xd0>)
 8019c24:	f240 2281 	movw	r2, #641	; 0x281
 8019c28:	4929      	ldr	r1, [pc, #164]	; (8019cd0 <udp_sendto_if+0xdc>)
 8019c2a:	4828      	ldr	r0, [pc, #160]	; (8019ccc <udp_sendto_if+0xd8>)
 8019c2c:	f006 fc10 	bl	8020450 <iprintf>
 8019c30:	f06f 030f 	mvn.w	r3, #15
 8019c34:	e042      	b.n	8019cbc <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8019c36:	687b      	ldr	r3, [r7, #4]
 8019c38:	2b00      	cmp	r3, #0
 8019c3a:	d109      	bne.n	8019c50 <udp_sendto_if+0x5c>
 8019c3c:	4b21      	ldr	r3, [pc, #132]	; (8019cc4 <udp_sendto_if+0xd0>)
 8019c3e:	f240 2282 	movw	r2, #642	; 0x282
 8019c42:	4924      	ldr	r1, [pc, #144]	; (8019cd4 <udp_sendto_if+0xe0>)
 8019c44:	4821      	ldr	r0, [pc, #132]	; (8019ccc <udp_sendto_if+0xd8>)
 8019c46:	f006 fc03 	bl	8020450 <iprintf>
 8019c4a:	f06f 030f 	mvn.w	r3, #15
 8019c4e:	e035      	b.n	8019cbc <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8019c50:	6a3b      	ldr	r3, [r7, #32]
 8019c52:	2b00      	cmp	r3, #0
 8019c54:	d109      	bne.n	8019c6a <udp_sendto_if+0x76>
 8019c56:	4b1b      	ldr	r3, [pc, #108]	; (8019cc4 <udp_sendto_if+0xd0>)
 8019c58:	f240 2283 	movw	r2, #643	; 0x283
 8019c5c:	491e      	ldr	r1, [pc, #120]	; (8019cd8 <udp_sendto_if+0xe4>)
 8019c5e:	481b      	ldr	r0, [pc, #108]	; (8019ccc <udp_sendto_if+0xd8>)
 8019c60:	f006 fbf6 	bl	8020450 <iprintf>
 8019c64:	f06f 030f 	mvn.w	r3, #15
 8019c68:	e028      	b.n	8019cbc <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8019c6a:	68fb      	ldr	r3, [r7, #12]
 8019c6c:	2b00      	cmp	r3, #0
 8019c6e:	d009      	beq.n	8019c84 <udp_sendto_if+0x90>
 8019c70:	68fb      	ldr	r3, [r7, #12]
 8019c72:	681b      	ldr	r3, [r3, #0]
 8019c74:	2b00      	cmp	r3, #0
 8019c76:	d005      	beq.n	8019c84 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8019c78:	68fb      	ldr	r3, [r7, #12]
 8019c7a:	681b      	ldr	r3, [r3, #0]
 8019c7c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8019c80:	2be0      	cmp	r3, #224	; 0xe0
 8019c82:	d103      	bne.n	8019c8c <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8019c84:	6a3b      	ldr	r3, [r7, #32]
 8019c86:	3304      	adds	r3, #4
 8019c88:	617b      	str	r3, [r7, #20]
 8019c8a:	e00b      	b.n	8019ca4 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8019c8c:	68fb      	ldr	r3, [r7, #12]
 8019c8e:	681a      	ldr	r2, [r3, #0]
 8019c90:	6a3b      	ldr	r3, [r7, #32]
 8019c92:	3304      	adds	r3, #4
 8019c94:	681b      	ldr	r3, [r3, #0]
 8019c96:	429a      	cmp	r2, r3
 8019c98:	d002      	beq.n	8019ca0 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8019c9a:	f06f 0303 	mvn.w	r3, #3
 8019c9e:	e00d      	b.n	8019cbc <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8019ca0:	68fb      	ldr	r3, [r7, #12]
 8019ca2:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8019ca4:	887a      	ldrh	r2, [r7, #2]
 8019ca6:	697b      	ldr	r3, [r7, #20]
 8019ca8:	9301      	str	r3, [sp, #4]
 8019caa:	6a3b      	ldr	r3, [r7, #32]
 8019cac:	9300      	str	r3, [sp, #0]
 8019cae:	4613      	mov	r3, r2
 8019cb0:	687a      	ldr	r2, [r7, #4]
 8019cb2:	68b9      	ldr	r1, [r7, #8]
 8019cb4:	68f8      	ldr	r0, [r7, #12]
 8019cb6:	f000 f811 	bl	8019cdc <udp_sendto_if_src>
 8019cba:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8019cbc:	4618      	mov	r0, r3
 8019cbe:	3718      	adds	r7, #24
 8019cc0:	46bd      	mov	sp, r7
 8019cc2:	bd80      	pop	{r7, pc}
 8019cc4:	08026110 	.word	0x08026110
 8019cc8:	08026284 	.word	0x08026284
 8019ccc:	08026164 	.word	0x08026164
 8019cd0:	080262a0 	.word	0x080262a0
 8019cd4:	080262bc 	.word	0x080262bc
 8019cd8:	080262dc 	.word	0x080262dc

08019cdc <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8019cdc:	b580      	push	{r7, lr}
 8019cde:	b08c      	sub	sp, #48	; 0x30
 8019ce0:	af04      	add	r7, sp, #16
 8019ce2:	60f8      	str	r0, [r7, #12]
 8019ce4:	60b9      	str	r1, [r7, #8]
 8019ce6:	607a      	str	r2, [r7, #4]
 8019ce8:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8019cea:	68fb      	ldr	r3, [r7, #12]
 8019cec:	2b00      	cmp	r3, #0
 8019cee:	d109      	bne.n	8019d04 <udp_sendto_if_src+0x28>
 8019cf0:	4b65      	ldr	r3, [pc, #404]	; (8019e88 <udp_sendto_if_src+0x1ac>)
 8019cf2:	f240 22d1 	movw	r2, #721	; 0x2d1
 8019cf6:	4965      	ldr	r1, [pc, #404]	; (8019e8c <udp_sendto_if_src+0x1b0>)
 8019cf8:	4865      	ldr	r0, [pc, #404]	; (8019e90 <udp_sendto_if_src+0x1b4>)
 8019cfa:	f006 fba9 	bl	8020450 <iprintf>
 8019cfe:	f06f 030f 	mvn.w	r3, #15
 8019d02:	e0bc      	b.n	8019e7e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8019d04:	68bb      	ldr	r3, [r7, #8]
 8019d06:	2b00      	cmp	r3, #0
 8019d08:	d109      	bne.n	8019d1e <udp_sendto_if_src+0x42>
 8019d0a:	4b5f      	ldr	r3, [pc, #380]	; (8019e88 <udp_sendto_if_src+0x1ac>)
 8019d0c:	f240 22d2 	movw	r2, #722	; 0x2d2
 8019d10:	4960      	ldr	r1, [pc, #384]	; (8019e94 <udp_sendto_if_src+0x1b8>)
 8019d12:	485f      	ldr	r0, [pc, #380]	; (8019e90 <udp_sendto_if_src+0x1b4>)
 8019d14:	f006 fb9c 	bl	8020450 <iprintf>
 8019d18:	f06f 030f 	mvn.w	r3, #15
 8019d1c:	e0af      	b.n	8019e7e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8019d1e:	687b      	ldr	r3, [r7, #4]
 8019d20:	2b00      	cmp	r3, #0
 8019d22:	d109      	bne.n	8019d38 <udp_sendto_if_src+0x5c>
 8019d24:	4b58      	ldr	r3, [pc, #352]	; (8019e88 <udp_sendto_if_src+0x1ac>)
 8019d26:	f240 22d3 	movw	r2, #723	; 0x2d3
 8019d2a:	495b      	ldr	r1, [pc, #364]	; (8019e98 <udp_sendto_if_src+0x1bc>)
 8019d2c:	4858      	ldr	r0, [pc, #352]	; (8019e90 <udp_sendto_if_src+0x1b4>)
 8019d2e:	f006 fb8f 	bl	8020450 <iprintf>
 8019d32:	f06f 030f 	mvn.w	r3, #15
 8019d36:	e0a2      	b.n	8019e7e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8019d38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019d3a:	2b00      	cmp	r3, #0
 8019d3c:	d109      	bne.n	8019d52 <udp_sendto_if_src+0x76>
 8019d3e:	4b52      	ldr	r3, [pc, #328]	; (8019e88 <udp_sendto_if_src+0x1ac>)
 8019d40:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8019d44:	4955      	ldr	r1, [pc, #340]	; (8019e9c <udp_sendto_if_src+0x1c0>)
 8019d46:	4852      	ldr	r0, [pc, #328]	; (8019e90 <udp_sendto_if_src+0x1b4>)
 8019d48:	f006 fb82 	bl	8020450 <iprintf>
 8019d4c:	f06f 030f 	mvn.w	r3, #15
 8019d50:	e095      	b.n	8019e7e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8019d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019d54:	2b00      	cmp	r3, #0
 8019d56:	d109      	bne.n	8019d6c <udp_sendto_if_src+0x90>
 8019d58:	4b4b      	ldr	r3, [pc, #300]	; (8019e88 <udp_sendto_if_src+0x1ac>)
 8019d5a:	f240 22d5 	movw	r2, #725	; 0x2d5
 8019d5e:	4950      	ldr	r1, [pc, #320]	; (8019ea0 <udp_sendto_if_src+0x1c4>)
 8019d60:	484b      	ldr	r0, [pc, #300]	; (8019e90 <udp_sendto_if_src+0x1b4>)
 8019d62:	f006 fb75 	bl	8020450 <iprintf>
 8019d66:	f06f 030f 	mvn.w	r3, #15
 8019d6a:	e088      	b.n	8019e7e <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8019d6c:	68fb      	ldr	r3, [r7, #12]
 8019d6e:	8a5b      	ldrh	r3, [r3, #18]
 8019d70:	2b00      	cmp	r3, #0
 8019d72:	d10f      	bne.n	8019d94 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8019d74:	68f9      	ldr	r1, [r7, #12]
 8019d76:	68fb      	ldr	r3, [r7, #12]
 8019d78:	8a5b      	ldrh	r3, [r3, #18]
 8019d7a:	461a      	mov	r2, r3
 8019d7c:	68f8      	ldr	r0, [r7, #12]
 8019d7e:	f000 f893 	bl	8019ea8 <udp_bind>
 8019d82:	4603      	mov	r3, r0
 8019d84:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8019d86:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8019d8a:	2b00      	cmp	r3, #0
 8019d8c:	d002      	beq.n	8019d94 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8019d8e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8019d92:	e074      	b.n	8019e7e <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8019d94:	68bb      	ldr	r3, [r7, #8]
 8019d96:	891b      	ldrh	r3, [r3, #8]
 8019d98:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8019d9c:	4293      	cmp	r3, r2
 8019d9e:	d902      	bls.n	8019da6 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8019da0:	f04f 33ff 	mov.w	r3, #4294967295
 8019da4:	e06b      	b.n	8019e7e <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8019da6:	2108      	movs	r1, #8
 8019da8:	68b8      	ldr	r0, [r7, #8]
 8019daa:	f7f8 ff5f 	bl	8012c6c <pbuf_add_header>
 8019dae:	4603      	mov	r3, r0
 8019db0:	2b00      	cmp	r3, #0
 8019db2:	d015      	beq.n	8019de0 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8019db4:	f44f 7220 	mov.w	r2, #640	; 0x280
 8019db8:	2108      	movs	r1, #8
 8019dba:	2022      	movs	r0, #34	; 0x22
 8019dbc:	f7f8 fd08 	bl	80127d0 <pbuf_alloc>
 8019dc0:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8019dc2:	69fb      	ldr	r3, [r7, #28]
 8019dc4:	2b00      	cmp	r3, #0
 8019dc6:	d102      	bne.n	8019dce <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8019dc8:	f04f 33ff 	mov.w	r3, #4294967295
 8019dcc:	e057      	b.n	8019e7e <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 8019dce:	68bb      	ldr	r3, [r7, #8]
 8019dd0:	891b      	ldrh	r3, [r3, #8]
 8019dd2:	2b00      	cmp	r3, #0
 8019dd4:	d006      	beq.n	8019de4 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8019dd6:	68b9      	ldr	r1, [r7, #8]
 8019dd8:	69f8      	ldr	r0, [r7, #28]
 8019dda:	f7f9 f933 	bl	8013044 <pbuf_chain>
 8019dde:	e001      	b.n	8019de4 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8019de0:	68bb      	ldr	r3, [r7, #8]
 8019de2:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8019de4:	69fb      	ldr	r3, [r7, #28]
 8019de6:	895b      	ldrh	r3, [r3, #10]
 8019de8:	2b07      	cmp	r3, #7
 8019dea:	d806      	bhi.n	8019dfa <udp_sendto_if_src+0x11e>
 8019dec:	4b26      	ldr	r3, [pc, #152]	; (8019e88 <udp_sendto_if_src+0x1ac>)
 8019dee:	f240 320d 	movw	r2, #781	; 0x30d
 8019df2:	492c      	ldr	r1, [pc, #176]	; (8019ea4 <udp_sendto_if_src+0x1c8>)
 8019df4:	4826      	ldr	r0, [pc, #152]	; (8019e90 <udp_sendto_if_src+0x1b4>)
 8019df6:	f006 fb2b 	bl	8020450 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8019dfa:	69fb      	ldr	r3, [r7, #28]
 8019dfc:	685b      	ldr	r3, [r3, #4]
 8019dfe:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8019e00:	68fb      	ldr	r3, [r7, #12]
 8019e02:	8a5b      	ldrh	r3, [r3, #18]
 8019e04:	4618      	mov	r0, r3
 8019e06:	f7f7 fb11 	bl	801142c <lwip_htons>
 8019e0a:	4603      	mov	r3, r0
 8019e0c:	461a      	mov	r2, r3
 8019e0e:	697b      	ldr	r3, [r7, #20]
 8019e10:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8019e12:	887b      	ldrh	r3, [r7, #2]
 8019e14:	4618      	mov	r0, r3
 8019e16:	f7f7 fb09 	bl	801142c <lwip_htons>
 8019e1a:	4603      	mov	r3, r0
 8019e1c:	461a      	mov	r2, r3
 8019e1e:	697b      	ldr	r3, [r7, #20]
 8019e20:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8019e22:	697b      	ldr	r3, [r7, #20]
 8019e24:	2200      	movs	r2, #0
 8019e26:	719a      	strb	r2, [r3, #6]
 8019e28:	2200      	movs	r2, #0
 8019e2a:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8019e2c:	69fb      	ldr	r3, [r7, #28]
 8019e2e:	891b      	ldrh	r3, [r3, #8]
 8019e30:	4618      	mov	r0, r3
 8019e32:	f7f7 fafb 	bl	801142c <lwip_htons>
 8019e36:	4603      	mov	r3, r0
 8019e38:	461a      	mov	r2, r3
 8019e3a:	697b      	ldr	r3, [r7, #20]
 8019e3c:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8019e3e:	2311      	movs	r3, #17
 8019e40:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8019e42:	68fb      	ldr	r3, [r7, #12]
 8019e44:	7adb      	ldrb	r3, [r3, #11]
 8019e46:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8019e48:	68fb      	ldr	r3, [r7, #12]
 8019e4a:	7a9b      	ldrb	r3, [r3, #10]
 8019e4c:	7cb9      	ldrb	r1, [r7, #18]
 8019e4e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019e50:	9202      	str	r2, [sp, #8]
 8019e52:	7cfa      	ldrb	r2, [r7, #19]
 8019e54:	9201      	str	r2, [sp, #4]
 8019e56:	9300      	str	r3, [sp, #0]
 8019e58:	460b      	mov	r3, r1
 8019e5a:	687a      	ldr	r2, [r7, #4]
 8019e5c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8019e5e:	69f8      	ldr	r0, [r7, #28]
 8019e60:	f003 fb6c 	bl	801d53c <ip4_output_if_src>
 8019e64:	4603      	mov	r3, r0
 8019e66:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8019e68:	69fa      	ldr	r2, [r7, #28]
 8019e6a:	68bb      	ldr	r3, [r7, #8]
 8019e6c:	429a      	cmp	r2, r3
 8019e6e:	d004      	beq.n	8019e7a <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8019e70:	69f8      	ldr	r0, [r7, #28]
 8019e72:	f7f8 ffc3 	bl	8012dfc <pbuf_free>
    q = NULL;
 8019e76:	2300      	movs	r3, #0
 8019e78:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8019e7a:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8019e7e:	4618      	mov	r0, r3
 8019e80:	3720      	adds	r7, #32
 8019e82:	46bd      	mov	sp, r7
 8019e84:	bd80      	pop	{r7, pc}
 8019e86:	bf00      	nop
 8019e88:	08026110 	.word	0x08026110
 8019e8c:	080262fc 	.word	0x080262fc
 8019e90:	08026164 	.word	0x08026164
 8019e94:	0802631c 	.word	0x0802631c
 8019e98:	0802633c 	.word	0x0802633c
 8019e9c:	08026360 	.word	0x08026360
 8019ea0:	08026384 	.word	0x08026384
 8019ea4:	080263a8 	.word	0x080263a8

08019ea8 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8019ea8:	b580      	push	{r7, lr}
 8019eaa:	b086      	sub	sp, #24
 8019eac:	af00      	add	r7, sp, #0
 8019eae:	60f8      	str	r0, [r7, #12]
 8019eb0:	60b9      	str	r1, [r7, #8]
 8019eb2:	4613      	mov	r3, r2
 8019eb4:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8019eb6:	68bb      	ldr	r3, [r7, #8]
 8019eb8:	2b00      	cmp	r3, #0
 8019eba:	d101      	bne.n	8019ec0 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8019ebc:	4b39      	ldr	r3, [pc, #228]	; (8019fa4 <udp_bind+0xfc>)
 8019ebe:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8019ec0:	68fb      	ldr	r3, [r7, #12]
 8019ec2:	2b00      	cmp	r3, #0
 8019ec4:	d109      	bne.n	8019eda <udp_bind+0x32>
 8019ec6:	4b38      	ldr	r3, [pc, #224]	; (8019fa8 <udp_bind+0x100>)
 8019ec8:	f240 32b7 	movw	r2, #951	; 0x3b7
 8019ecc:	4937      	ldr	r1, [pc, #220]	; (8019fac <udp_bind+0x104>)
 8019ece:	4838      	ldr	r0, [pc, #224]	; (8019fb0 <udp_bind+0x108>)
 8019ed0:	f006 fabe 	bl	8020450 <iprintf>
 8019ed4:	f06f 030f 	mvn.w	r3, #15
 8019ed8:	e060      	b.n	8019f9c <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8019eda:	2300      	movs	r3, #0
 8019edc:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8019ede:	4b35      	ldr	r3, [pc, #212]	; (8019fb4 <udp_bind+0x10c>)
 8019ee0:	681b      	ldr	r3, [r3, #0]
 8019ee2:	617b      	str	r3, [r7, #20]
 8019ee4:	e009      	b.n	8019efa <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8019ee6:	68fa      	ldr	r2, [r7, #12]
 8019ee8:	697b      	ldr	r3, [r7, #20]
 8019eea:	429a      	cmp	r2, r3
 8019eec:	d102      	bne.n	8019ef4 <udp_bind+0x4c>
      rebind = 1;
 8019eee:	2301      	movs	r3, #1
 8019ef0:	74fb      	strb	r3, [r7, #19]
      break;
 8019ef2:	e005      	b.n	8019f00 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8019ef4:	697b      	ldr	r3, [r7, #20]
 8019ef6:	68db      	ldr	r3, [r3, #12]
 8019ef8:	617b      	str	r3, [r7, #20]
 8019efa:	697b      	ldr	r3, [r7, #20]
 8019efc:	2b00      	cmp	r3, #0
 8019efe:	d1f2      	bne.n	8019ee6 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8019f00:	88fb      	ldrh	r3, [r7, #6]
 8019f02:	2b00      	cmp	r3, #0
 8019f04:	d109      	bne.n	8019f1a <udp_bind+0x72>
    port = udp_new_port();
 8019f06:	f7ff fc35 	bl	8019774 <udp_new_port>
 8019f0a:	4603      	mov	r3, r0
 8019f0c:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8019f0e:	88fb      	ldrh	r3, [r7, #6]
 8019f10:	2b00      	cmp	r3, #0
 8019f12:	d12c      	bne.n	8019f6e <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8019f14:	f06f 0307 	mvn.w	r3, #7
 8019f18:	e040      	b.n	8019f9c <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8019f1a:	4b26      	ldr	r3, [pc, #152]	; (8019fb4 <udp_bind+0x10c>)
 8019f1c:	681b      	ldr	r3, [r3, #0]
 8019f1e:	617b      	str	r3, [r7, #20]
 8019f20:	e022      	b.n	8019f68 <udp_bind+0xc0>
      if (pcb != ipcb) {
 8019f22:	68fa      	ldr	r2, [r7, #12]
 8019f24:	697b      	ldr	r3, [r7, #20]
 8019f26:	429a      	cmp	r2, r3
 8019f28:	d01b      	beq.n	8019f62 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8019f2a:	697b      	ldr	r3, [r7, #20]
 8019f2c:	8a5b      	ldrh	r3, [r3, #18]
 8019f2e:	88fa      	ldrh	r2, [r7, #6]
 8019f30:	429a      	cmp	r2, r3
 8019f32:	d116      	bne.n	8019f62 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8019f34:	697b      	ldr	r3, [r7, #20]
 8019f36:	681a      	ldr	r2, [r3, #0]
 8019f38:	68bb      	ldr	r3, [r7, #8]
 8019f3a:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8019f3c:	429a      	cmp	r2, r3
 8019f3e:	d00d      	beq.n	8019f5c <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8019f40:	68bb      	ldr	r3, [r7, #8]
 8019f42:	2b00      	cmp	r3, #0
 8019f44:	d00a      	beq.n	8019f5c <udp_bind+0xb4>
 8019f46:	68bb      	ldr	r3, [r7, #8]
 8019f48:	681b      	ldr	r3, [r3, #0]
 8019f4a:	2b00      	cmp	r3, #0
 8019f4c:	d006      	beq.n	8019f5c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8019f4e:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8019f50:	2b00      	cmp	r3, #0
 8019f52:	d003      	beq.n	8019f5c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8019f54:	697b      	ldr	r3, [r7, #20]
 8019f56:	681b      	ldr	r3, [r3, #0]
 8019f58:	2b00      	cmp	r3, #0
 8019f5a:	d102      	bne.n	8019f62 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8019f5c:	f06f 0307 	mvn.w	r3, #7
 8019f60:	e01c      	b.n	8019f9c <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8019f62:	697b      	ldr	r3, [r7, #20]
 8019f64:	68db      	ldr	r3, [r3, #12]
 8019f66:	617b      	str	r3, [r7, #20]
 8019f68:	697b      	ldr	r3, [r7, #20]
 8019f6a:	2b00      	cmp	r3, #0
 8019f6c:	d1d9      	bne.n	8019f22 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8019f6e:	68bb      	ldr	r3, [r7, #8]
 8019f70:	2b00      	cmp	r3, #0
 8019f72:	d002      	beq.n	8019f7a <udp_bind+0xd2>
 8019f74:	68bb      	ldr	r3, [r7, #8]
 8019f76:	681b      	ldr	r3, [r3, #0]
 8019f78:	e000      	b.n	8019f7c <udp_bind+0xd4>
 8019f7a:	2300      	movs	r3, #0
 8019f7c:	68fa      	ldr	r2, [r7, #12]
 8019f7e:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8019f80:	68fb      	ldr	r3, [r7, #12]
 8019f82:	88fa      	ldrh	r2, [r7, #6]
 8019f84:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8019f86:	7cfb      	ldrb	r3, [r7, #19]
 8019f88:	2b00      	cmp	r3, #0
 8019f8a:	d106      	bne.n	8019f9a <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8019f8c:	4b09      	ldr	r3, [pc, #36]	; (8019fb4 <udp_bind+0x10c>)
 8019f8e:	681a      	ldr	r2, [r3, #0]
 8019f90:	68fb      	ldr	r3, [r7, #12]
 8019f92:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8019f94:	4a07      	ldr	r2, [pc, #28]	; (8019fb4 <udp_bind+0x10c>)
 8019f96:	68fb      	ldr	r3, [r7, #12]
 8019f98:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8019f9a:	2300      	movs	r3, #0
}
 8019f9c:	4618      	mov	r0, r3
 8019f9e:	3718      	adds	r7, #24
 8019fa0:	46bd      	mov	sp, r7
 8019fa2:	bd80      	pop	{r7, pc}
 8019fa4:	08027084 	.word	0x08027084
 8019fa8:	08026110 	.word	0x08026110
 8019fac:	080263d8 	.word	0x080263d8
 8019fb0:	08026164 	.word	0x08026164
 8019fb4:	24007e34 	.word	0x24007e34

08019fb8 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8019fb8:	b580      	push	{r7, lr}
 8019fba:	b086      	sub	sp, #24
 8019fbc:	af00      	add	r7, sp, #0
 8019fbe:	60f8      	str	r0, [r7, #12]
 8019fc0:	60b9      	str	r1, [r7, #8]
 8019fc2:	4613      	mov	r3, r2
 8019fc4:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8019fc6:	68fb      	ldr	r3, [r7, #12]
 8019fc8:	2b00      	cmp	r3, #0
 8019fca:	d109      	bne.n	8019fe0 <udp_connect+0x28>
 8019fcc:	4b2c      	ldr	r3, [pc, #176]	; (801a080 <udp_connect+0xc8>)
 8019fce:	f240 4235 	movw	r2, #1077	; 0x435
 8019fd2:	492c      	ldr	r1, [pc, #176]	; (801a084 <udp_connect+0xcc>)
 8019fd4:	482c      	ldr	r0, [pc, #176]	; (801a088 <udp_connect+0xd0>)
 8019fd6:	f006 fa3b 	bl	8020450 <iprintf>
 8019fda:	f06f 030f 	mvn.w	r3, #15
 8019fde:	e04b      	b.n	801a078 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8019fe0:	68bb      	ldr	r3, [r7, #8]
 8019fe2:	2b00      	cmp	r3, #0
 8019fe4:	d109      	bne.n	8019ffa <udp_connect+0x42>
 8019fe6:	4b26      	ldr	r3, [pc, #152]	; (801a080 <udp_connect+0xc8>)
 8019fe8:	f240 4236 	movw	r2, #1078	; 0x436
 8019fec:	4927      	ldr	r1, [pc, #156]	; (801a08c <udp_connect+0xd4>)
 8019fee:	4826      	ldr	r0, [pc, #152]	; (801a088 <udp_connect+0xd0>)
 8019ff0:	f006 fa2e 	bl	8020450 <iprintf>
 8019ff4:	f06f 030f 	mvn.w	r3, #15
 8019ff8:	e03e      	b.n	801a078 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 8019ffa:	68fb      	ldr	r3, [r7, #12]
 8019ffc:	8a5b      	ldrh	r3, [r3, #18]
 8019ffe:	2b00      	cmp	r3, #0
 801a000:	d10f      	bne.n	801a022 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801a002:	68f9      	ldr	r1, [r7, #12]
 801a004:	68fb      	ldr	r3, [r7, #12]
 801a006:	8a5b      	ldrh	r3, [r3, #18]
 801a008:	461a      	mov	r2, r3
 801a00a:	68f8      	ldr	r0, [r7, #12]
 801a00c:	f7ff ff4c 	bl	8019ea8 <udp_bind>
 801a010:	4603      	mov	r3, r0
 801a012:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 801a014:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801a018:	2b00      	cmp	r3, #0
 801a01a:	d002      	beq.n	801a022 <udp_connect+0x6a>
      return err;
 801a01c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801a020:	e02a      	b.n	801a078 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 801a022:	68bb      	ldr	r3, [r7, #8]
 801a024:	2b00      	cmp	r3, #0
 801a026:	d002      	beq.n	801a02e <udp_connect+0x76>
 801a028:	68bb      	ldr	r3, [r7, #8]
 801a02a:	681b      	ldr	r3, [r3, #0]
 801a02c:	e000      	b.n	801a030 <udp_connect+0x78>
 801a02e:	2300      	movs	r3, #0
 801a030:	68fa      	ldr	r2, [r7, #12]
 801a032:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 801a034:	68fb      	ldr	r3, [r7, #12]
 801a036:	88fa      	ldrh	r2, [r7, #6]
 801a038:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 801a03a:	68fb      	ldr	r3, [r7, #12]
 801a03c:	7c1b      	ldrb	r3, [r3, #16]
 801a03e:	f043 0304 	orr.w	r3, r3, #4
 801a042:	b2da      	uxtb	r2, r3
 801a044:	68fb      	ldr	r3, [r7, #12]
 801a046:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801a048:	4b11      	ldr	r3, [pc, #68]	; (801a090 <udp_connect+0xd8>)
 801a04a:	681b      	ldr	r3, [r3, #0]
 801a04c:	617b      	str	r3, [r7, #20]
 801a04e:	e008      	b.n	801a062 <udp_connect+0xaa>
    if (pcb == ipcb) {
 801a050:	68fa      	ldr	r2, [r7, #12]
 801a052:	697b      	ldr	r3, [r7, #20]
 801a054:	429a      	cmp	r2, r3
 801a056:	d101      	bne.n	801a05c <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 801a058:	2300      	movs	r3, #0
 801a05a:	e00d      	b.n	801a078 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801a05c:	697b      	ldr	r3, [r7, #20]
 801a05e:	68db      	ldr	r3, [r3, #12]
 801a060:	617b      	str	r3, [r7, #20]
 801a062:	697b      	ldr	r3, [r7, #20]
 801a064:	2b00      	cmp	r3, #0
 801a066:	d1f3      	bne.n	801a050 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 801a068:	4b09      	ldr	r3, [pc, #36]	; (801a090 <udp_connect+0xd8>)
 801a06a:	681a      	ldr	r2, [r3, #0]
 801a06c:	68fb      	ldr	r3, [r7, #12]
 801a06e:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 801a070:	4a07      	ldr	r2, [pc, #28]	; (801a090 <udp_connect+0xd8>)
 801a072:	68fb      	ldr	r3, [r7, #12]
 801a074:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 801a076:	2300      	movs	r3, #0
}
 801a078:	4618      	mov	r0, r3
 801a07a:	3718      	adds	r7, #24
 801a07c:	46bd      	mov	sp, r7
 801a07e:	bd80      	pop	{r7, pc}
 801a080:	08026110 	.word	0x08026110
 801a084:	080263f0 	.word	0x080263f0
 801a088:	08026164 	.word	0x08026164
 801a08c:	0802640c 	.word	0x0802640c
 801a090:	24007e34 	.word	0x24007e34

0801a094 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 801a094:	b580      	push	{r7, lr}
 801a096:	b084      	sub	sp, #16
 801a098:	af00      	add	r7, sp, #0
 801a09a:	60f8      	str	r0, [r7, #12]
 801a09c:	60b9      	str	r1, [r7, #8]
 801a09e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 801a0a0:	68fb      	ldr	r3, [r7, #12]
 801a0a2:	2b00      	cmp	r3, #0
 801a0a4:	d107      	bne.n	801a0b6 <udp_recv+0x22>
 801a0a6:	4b08      	ldr	r3, [pc, #32]	; (801a0c8 <udp_recv+0x34>)
 801a0a8:	f240 428a 	movw	r2, #1162	; 0x48a
 801a0ac:	4907      	ldr	r1, [pc, #28]	; (801a0cc <udp_recv+0x38>)
 801a0ae:	4808      	ldr	r0, [pc, #32]	; (801a0d0 <udp_recv+0x3c>)
 801a0b0:	f006 f9ce 	bl	8020450 <iprintf>
 801a0b4:	e005      	b.n	801a0c2 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 801a0b6:	68fb      	ldr	r3, [r7, #12]
 801a0b8:	68ba      	ldr	r2, [r7, #8]
 801a0ba:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 801a0bc:	68fb      	ldr	r3, [r7, #12]
 801a0be:	687a      	ldr	r2, [r7, #4]
 801a0c0:	61da      	str	r2, [r3, #28]
}
 801a0c2:	3710      	adds	r7, #16
 801a0c4:	46bd      	mov	sp, r7
 801a0c6:	bd80      	pop	{r7, pc}
 801a0c8:	08026110 	.word	0x08026110
 801a0cc:	08026444 	.word	0x08026444
 801a0d0:	08026164 	.word	0x08026164

0801a0d4 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 801a0d4:	b580      	push	{r7, lr}
 801a0d6:	b084      	sub	sp, #16
 801a0d8:	af00      	add	r7, sp, #0
 801a0da:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 801a0dc:	687b      	ldr	r3, [r7, #4]
 801a0de:	2b00      	cmp	r3, #0
 801a0e0:	d107      	bne.n	801a0f2 <udp_remove+0x1e>
 801a0e2:	4b19      	ldr	r3, [pc, #100]	; (801a148 <udp_remove+0x74>)
 801a0e4:	f240 42a1 	movw	r2, #1185	; 0x4a1
 801a0e8:	4918      	ldr	r1, [pc, #96]	; (801a14c <udp_remove+0x78>)
 801a0ea:	4819      	ldr	r0, [pc, #100]	; (801a150 <udp_remove+0x7c>)
 801a0ec:	f006 f9b0 	bl	8020450 <iprintf>
 801a0f0:	e026      	b.n	801a140 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801a0f2:	4b18      	ldr	r3, [pc, #96]	; (801a154 <udp_remove+0x80>)
 801a0f4:	681b      	ldr	r3, [r3, #0]
 801a0f6:	687a      	ldr	r2, [r7, #4]
 801a0f8:	429a      	cmp	r2, r3
 801a0fa:	d105      	bne.n	801a108 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 801a0fc:	4b15      	ldr	r3, [pc, #84]	; (801a154 <udp_remove+0x80>)
 801a0fe:	681b      	ldr	r3, [r3, #0]
 801a100:	68db      	ldr	r3, [r3, #12]
 801a102:	4a14      	ldr	r2, [pc, #80]	; (801a154 <udp_remove+0x80>)
 801a104:	6013      	str	r3, [r2, #0]
 801a106:	e017      	b.n	801a138 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801a108:	4b12      	ldr	r3, [pc, #72]	; (801a154 <udp_remove+0x80>)
 801a10a:	681b      	ldr	r3, [r3, #0]
 801a10c:	60fb      	str	r3, [r7, #12]
 801a10e:	e010      	b.n	801a132 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 801a110:	68fb      	ldr	r3, [r7, #12]
 801a112:	68db      	ldr	r3, [r3, #12]
 801a114:	2b00      	cmp	r3, #0
 801a116:	d009      	beq.n	801a12c <udp_remove+0x58>
 801a118:	68fb      	ldr	r3, [r7, #12]
 801a11a:	68db      	ldr	r3, [r3, #12]
 801a11c:	687a      	ldr	r2, [r7, #4]
 801a11e:	429a      	cmp	r2, r3
 801a120:	d104      	bne.n	801a12c <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 801a122:	687b      	ldr	r3, [r7, #4]
 801a124:	68da      	ldr	r2, [r3, #12]
 801a126:	68fb      	ldr	r3, [r7, #12]
 801a128:	60da      	str	r2, [r3, #12]
        break;
 801a12a:	e005      	b.n	801a138 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801a12c:	68fb      	ldr	r3, [r7, #12]
 801a12e:	68db      	ldr	r3, [r3, #12]
 801a130:	60fb      	str	r3, [r7, #12]
 801a132:	68fb      	ldr	r3, [r7, #12]
 801a134:	2b00      	cmp	r3, #0
 801a136:	d1eb      	bne.n	801a110 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 801a138:	6879      	ldr	r1, [r7, #4]
 801a13a:	2000      	movs	r0, #0
 801a13c:	f7f7 ff7c 	bl	8012038 <memp_free>
}
 801a140:	3710      	adds	r7, #16
 801a142:	46bd      	mov	sp, r7
 801a144:	bd80      	pop	{r7, pc}
 801a146:	bf00      	nop
 801a148:	08026110 	.word	0x08026110
 801a14c:	0802645c 	.word	0x0802645c
 801a150:	08026164 	.word	0x08026164
 801a154:	24007e34 	.word	0x24007e34

0801a158 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 801a158:	b580      	push	{r7, lr}
 801a15a:	b082      	sub	sp, #8
 801a15c:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801a15e:	2000      	movs	r0, #0
 801a160:	f7f7 fef4 	bl	8011f4c <memp_malloc>
 801a164:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801a166:	687b      	ldr	r3, [r7, #4]
 801a168:	2b00      	cmp	r3, #0
 801a16a:	d007      	beq.n	801a17c <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 801a16c:	2220      	movs	r2, #32
 801a16e:	2100      	movs	r1, #0
 801a170:	6878      	ldr	r0, [r7, #4]
 801a172:	f006 fa0c 	bl	802058e <memset>
    pcb->ttl = UDP_TTL;
 801a176:	687b      	ldr	r3, [r7, #4]
 801a178:	22ff      	movs	r2, #255	; 0xff
 801a17a:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 801a17c:	687b      	ldr	r3, [r7, #4]
}
 801a17e:	4618      	mov	r0, r3
 801a180:	3708      	adds	r7, #8
 801a182:	46bd      	mov	sp, r7
 801a184:	bd80      	pop	{r7, pc}

0801a186 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 801a186:	b580      	push	{r7, lr}
 801a188:	b084      	sub	sp, #16
 801a18a:	af00      	add	r7, sp, #0
 801a18c:	4603      	mov	r3, r0
 801a18e:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 801a190:	f7ff ffe2 	bl	801a158 <udp_new>
 801a194:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 801a196:	68fb      	ldr	r3, [r7, #12]
}
 801a198:	4618      	mov	r0, r3
 801a19a:	3710      	adds	r7, #16
 801a19c:	46bd      	mov	sp, r7
 801a19e:	bd80      	pop	{r7, pc}

0801a1a0 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801a1a0:	b480      	push	{r7}
 801a1a2:	b085      	sub	sp, #20
 801a1a4:	af00      	add	r7, sp, #0
 801a1a6:	6078      	str	r0, [r7, #4]
 801a1a8:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801a1aa:	687b      	ldr	r3, [r7, #4]
 801a1ac:	2b00      	cmp	r3, #0
 801a1ae:	d01e      	beq.n	801a1ee <udp_netif_ip_addr_changed+0x4e>
 801a1b0:	687b      	ldr	r3, [r7, #4]
 801a1b2:	681b      	ldr	r3, [r3, #0]
 801a1b4:	2b00      	cmp	r3, #0
 801a1b6:	d01a      	beq.n	801a1ee <udp_netif_ip_addr_changed+0x4e>
 801a1b8:	683b      	ldr	r3, [r7, #0]
 801a1ba:	2b00      	cmp	r3, #0
 801a1bc:	d017      	beq.n	801a1ee <udp_netif_ip_addr_changed+0x4e>
 801a1be:	683b      	ldr	r3, [r7, #0]
 801a1c0:	681b      	ldr	r3, [r3, #0]
 801a1c2:	2b00      	cmp	r3, #0
 801a1c4:	d013      	beq.n	801a1ee <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801a1c6:	4b0d      	ldr	r3, [pc, #52]	; (801a1fc <udp_netif_ip_addr_changed+0x5c>)
 801a1c8:	681b      	ldr	r3, [r3, #0]
 801a1ca:	60fb      	str	r3, [r7, #12]
 801a1cc:	e00c      	b.n	801a1e8 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801a1ce:	68fb      	ldr	r3, [r7, #12]
 801a1d0:	681a      	ldr	r2, [r3, #0]
 801a1d2:	687b      	ldr	r3, [r7, #4]
 801a1d4:	681b      	ldr	r3, [r3, #0]
 801a1d6:	429a      	cmp	r2, r3
 801a1d8:	d103      	bne.n	801a1e2 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801a1da:	683b      	ldr	r3, [r7, #0]
 801a1dc:	681a      	ldr	r2, [r3, #0]
 801a1de:	68fb      	ldr	r3, [r7, #12]
 801a1e0:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801a1e2:	68fb      	ldr	r3, [r7, #12]
 801a1e4:	68db      	ldr	r3, [r3, #12]
 801a1e6:	60fb      	str	r3, [r7, #12]
 801a1e8:	68fb      	ldr	r3, [r7, #12]
 801a1ea:	2b00      	cmp	r3, #0
 801a1ec:	d1ef      	bne.n	801a1ce <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801a1ee:	bf00      	nop
 801a1f0:	3714      	adds	r7, #20
 801a1f2:	46bd      	mov	sp, r7
 801a1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a1f8:	4770      	bx	lr
 801a1fa:	bf00      	nop
 801a1fc:	24007e34 	.word	0x24007e34

0801a200 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 801a200:	b580      	push	{r7, lr}
 801a202:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 801a204:	4b20      	ldr	r3, [pc, #128]	; (801a288 <dhcp_inc_pcb_refcount+0x88>)
 801a206:	781b      	ldrb	r3, [r3, #0]
 801a208:	2b00      	cmp	r3, #0
 801a20a:	d133      	bne.n	801a274 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 801a20c:	4b1f      	ldr	r3, [pc, #124]	; (801a28c <dhcp_inc_pcb_refcount+0x8c>)
 801a20e:	681b      	ldr	r3, [r3, #0]
 801a210:	2b00      	cmp	r3, #0
 801a212:	d005      	beq.n	801a220 <dhcp_inc_pcb_refcount+0x20>
 801a214:	4b1e      	ldr	r3, [pc, #120]	; (801a290 <dhcp_inc_pcb_refcount+0x90>)
 801a216:	22e5      	movs	r2, #229	; 0xe5
 801a218:	491e      	ldr	r1, [pc, #120]	; (801a294 <dhcp_inc_pcb_refcount+0x94>)
 801a21a:	481f      	ldr	r0, [pc, #124]	; (801a298 <dhcp_inc_pcb_refcount+0x98>)
 801a21c:	f006 f918 	bl	8020450 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 801a220:	f7ff ff9a 	bl	801a158 <udp_new>
 801a224:	4603      	mov	r3, r0
 801a226:	4a19      	ldr	r2, [pc, #100]	; (801a28c <dhcp_inc_pcb_refcount+0x8c>)
 801a228:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 801a22a:	4b18      	ldr	r3, [pc, #96]	; (801a28c <dhcp_inc_pcb_refcount+0x8c>)
 801a22c:	681b      	ldr	r3, [r3, #0]
 801a22e:	2b00      	cmp	r3, #0
 801a230:	d102      	bne.n	801a238 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 801a232:	f04f 33ff 	mov.w	r3, #4294967295
 801a236:	e024      	b.n	801a282 <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 801a238:	4b14      	ldr	r3, [pc, #80]	; (801a28c <dhcp_inc_pcb_refcount+0x8c>)
 801a23a:	681b      	ldr	r3, [r3, #0]
 801a23c:	7a5a      	ldrb	r2, [r3, #9]
 801a23e:	4b13      	ldr	r3, [pc, #76]	; (801a28c <dhcp_inc_pcb_refcount+0x8c>)
 801a240:	681b      	ldr	r3, [r3, #0]
 801a242:	f042 0220 	orr.w	r2, r2, #32
 801a246:	b2d2      	uxtb	r2, r2
 801a248:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 801a24a:	4b10      	ldr	r3, [pc, #64]	; (801a28c <dhcp_inc_pcb_refcount+0x8c>)
 801a24c:	681b      	ldr	r3, [r3, #0]
 801a24e:	2244      	movs	r2, #68	; 0x44
 801a250:	4912      	ldr	r1, [pc, #72]	; (801a29c <dhcp_inc_pcb_refcount+0x9c>)
 801a252:	4618      	mov	r0, r3
 801a254:	f7ff fe28 	bl	8019ea8 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 801a258:	4b0c      	ldr	r3, [pc, #48]	; (801a28c <dhcp_inc_pcb_refcount+0x8c>)
 801a25a:	681b      	ldr	r3, [r3, #0]
 801a25c:	2243      	movs	r2, #67	; 0x43
 801a25e:	490f      	ldr	r1, [pc, #60]	; (801a29c <dhcp_inc_pcb_refcount+0x9c>)
 801a260:	4618      	mov	r0, r3
 801a262:	f7ff fea9 	bl	8019fb8 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 801a266:	4b09      	ldr	r3, [pc, #36]	; (801a28c <dhcp_inc_pcb_refcount+0x8c>)
 801a268:	681b      	ldr	r3, [r3, #0]
 801a26a:	2200      	movs	r2, #0
 801a26c:	490c      	ldr	r1, [pc, #48]	; (801a2a0 <dhcp_inc_pcb_refcount+0xa0>)
 801a26e:	4618      	mov	r0, r3
 801a270:	f7ff ff10 	bl	801a094 <udp_recv>
  }

  dhcp_pcb_refcount++;
 801a274:	4b04      	ldr	r3, [pc, #16]	; (801a288 <dhcp_inc_pcb_refcount+0x88>)
 801a276:	781b      	ldrb	r3, [r3, #0]
 801a278:	3301      	adds	r3, #1
 801a27a:	b2da      	uxtb	r2, r3
 801a27c:	4b02      	ldr	r3, [pc, #8]	; (801a288 <dhcp_inc_pcb_refcount+0x88>)
 801a27e:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 801a280:	2300      	movs	r3, #0
}
 801a282:	4618      	mov	r0, r3
 801a284:	bd80      	pop	{r7, pc}
 801a286:	bf00      	nop
 801a288:	24007e64 	.word	0x24007e64
 801a28c:	24007e60 	.word	0x24007e60
 801a290:	08026474 	.word	0x08026474
 801a294:	080264ac 	.word	0x080264ac
 801a298:	080264d4 	.word	0x080264d4
 801a29c:	08027084 	.word	0x08027084
 801a2a0:	0801bb39 	.word	0x0801bb39

0801a2a4 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 801a2a4:	b580      	push	{r7, lr}
 801a2a6:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 801a2a8:	4b0e      	ldr	r3, [pc, #56]	; (801a2e4 <dhcp_dec_pcb_refcount+0x40>)
 801a2aa:	781b      	ldrb	r3, [r3, #0]
 801a2ac:	2b00      	cmp	r3, #0
 801a2ae:	d105      	bne.n	801a2bc <dhcp_dec_pcb_refcount+0x18>
 801a2b0:	4b0d      	ldr	r3, [pc, #52]	; (801a2e8 <dhcp_dec_pcb_refcount+0x44>)
 801a2b2:	22ff      	movs	r2, #255	; 0xff
 801a2b4:	490d      	ldr	r1, [pc, #52]	; (801a2ec <dhcp_dec_pcb_refcount+0x48>)
 801a2b6:	480e      	ldr	r0, [pc, #56]	; (801a2f0 <dhcp_dec_pcb_refcount+0x4c>)
 801a2b8:	f006 f8ca 	bl	8020450 <iprintf>
  dhcp_pcb_refcount--;
 801a2bc:	4b09      	ldr	r3, [pc, #36]	; (801a2e4 <dhcp_dec_pcb_refcount+0x40>)
 801a2be:	781b      	ldrb	r3, [r3, #0]
 801a2c0:	3b01      	subs	r3, #1
 801a2c2:	b2da      	uxtb	r2, r3
 801a2c4:	4b07      	ldr	r3, [pc, #28]	; (801a2e4 <dhcp_dec_pcb_refcount+0x40>)
 801a2c6:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 801a2c8:	4b06      	ldr	r3, [pc, #24]	; (801a2e4 <dhcp_dec_pcb_refcount+0x40>)
 801a2ca:	781b      	ldrb	r3, [r3, #0]
 801a2cc:	2b00      	cmp	r3, #0
 801a2ce:	d107      	bne.n	801a2e0 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 801a2d0:	4b08      	ldr	r3, [pc, #32]	; (801a2f4 <dhcp_dec_pcb_refcount+0x50>)
 801a2d2:	681b      	ldr	r3, [r3, #0]
 801a2d4:	4618      	mov	r0, r3
 801a2d6:	f7ff fefd 	bl	801a0d4 <udp_remove>
    dhcp_pcb = NULL;
 801a2da:	4b06      	ldr	r3, [pc, #24]	; (801a2f4 <dhcp_dec_pcb_refcount+0x50>)
 801a2dc:	2200      	movs	r2, #0
 801a2de:	601a      	str	r2, [r3, #0]
  }
}
 801a2e0:	bf00      	nop
 801a2e2:	bd80      	pop	{r7, pc}
 801a2e4:	24007e64 	.word	0x24007e64
 801a2e8:	08026474 	.word	0x08026474
 801a2ec:	080264fc 	.word	0x080264fc
 801a2f0:	080264d4 	.word	0x080264d4
 801a2f4:	24007e60 	.word	0x24007e60

0801a2f8 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 801a2f8:	b580      	push	{r7, lr}
 801a2fa:	b084      	sub	sp, #16
 801a2fc:	af00      	add	r7, sp, #0
 801a2fe:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801a300:	687b      	ldr	r3, [r7, #4]
 801a302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a304:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 801a306:	210c      	movs	r1, #12
 801a308:	68f8      	ldr	r0, [r7, #12]
 801a30a:	f001 f857 	bl	801b3bc <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 801a30e:	4b06      	ldr	r3, [pc, #24]	; (801a328 <dhcp_handle_nak+0x30>)
 801a310:	4a05      	ldr	r2, [pc, #20]	; (801a328 <dhcp_handle_nak+0x30>)
 801a312:	4905      	ldr	r1, [pc, #20]	; (801a328 <dhcp_handle_nak+0x30>)
 801a314:	6878      	ldr	r0, [r7, #4]
 801a316:	f7f8 f831 	bl	801237c <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 801a31a:	6878      	ldr	r0, [r7, #4]
 801a31c:	f000 fc4a 	bl	801abb4 <dhcp_discover>
}
 801a320:	bf00      	nop
 801a322:	3710      	adds	r7, #16
 801a324:	46bd      	mov	sp, r7
 801a326:	bd80      	pop	{r7, pc}
 801a328:	08027084 	.word	0x08027084

0801a32c <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 801a32c:	b580      	push	{r7, lr}
 801a32e:	b084      	sub	sp, #16
 801a330:	af00      	add	r7, sp, #0
 801a332:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801a334:	687b      	ldr	r3, [r7, #4]
 801a336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a338:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 801a33a:	2108      	movs	r1, #8
 801a33c:	68f8      	ldr	r0, [r7, #12]
 801a33e:	f001 f83d 	bl	801b3bc <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 801a342:	68fb      	ldr	r3, [r7, #12]
 801a344:	331c      	adds	r3, #28
 801a346:	2200      	movs	r2, #0
 801a348:	4619      	mov	r1, r3
 801a34a:	6878      	ldr	r0, [r7, #4]
 801a34c:	f002 fb3e 	bl	801c9cc <etharp_query>
 801a350:	4603      	mov	r3, r0
 801a352:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 801a354:	68fb      	ldr	r3, [r7, #12]
 801a356:	799b      	ldrb	r3, [r3, #6]
 801a358:	2bff      	cmp	r3, #255	; 0xff
 801a35a:	d005      	beq.n	801a368 <dhcp_check+0x3c>
    dhcp->tries++;
 801a35c:	68fb      	ldr	r3, [r7, #12]
 801a35e:	799b      	ldrb	r3, [r3, #6]
 801a360:	3301      	adds	r3, #1
 801a362:	b2da      	uxtb	r2, r3
 801a364:	68fb      	ldr	r3, [r7, #12]
 801a366:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 801a368:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 801a36c:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801a36e:	893b      	ldrh	r3, [r7, #8]
 801a370:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801a374:	4a06      	ldr	r2, [pc, #24]	; (801a390 <dhcp_check+0x64>)
 801a376:	fb82 1203 	smull	r1, r2, r2, r3
 801a37a:	1152      	asrs	r2, r2, #5
 801a37c:	17db      	asrs	r3, r3, #31
 801a37e:	1ad3      	subs	r3, r2, r3
 801a380:	b29a      	uxth	r2, r3
 801a382:	68fb      	ldr	r3, [r7, #12]
 801a384:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 801a386:	bf00      	nop
 801a388:	3710      	adds	r7, #16
 801a38a:	46bd      	mov	sp, r7
 801a38c:	bd80      	pop	{r7, pc}
 801a38e:	bf00      	nop
 801a390:	10624dd3 	.word	0x10624dd3

0801a394 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 801a394:	b580      	push	{r7, lr}
 801a396:	b084      	sub	sp, #16
 801a398:	af00      	add	r7, sp, #0
 801a39a:	6078      	str	r0, [r7, #4]
 801a39c:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801a39e:	687b      	ldr	r3, [r7, #4]
 801a3a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a3a2:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 801a3a4:	4b0c      	ldr	r3, [pc, #48]	; (801a3d8 <dhcp_handle_offer+0x44>)
 801a3a6:	789b      	ldrb	r3, [r3, #2]
 801a3a8:	2b00      	cmp	r3, #0
 801a3aa:	d011      	beq.n	801a3d0 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 801a3ac:	68fb      	ldr	r3, [r7, #12]
 801a3ae:	2200      	movs	r2, #0
 801a3b0:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 801a3b2:	4b0a      	ldr	r3, [pc, #40]	; (801a3dc <dhcp_handle_offer+0x48>)
 801a3b4:	689b      	ldr	r3, [r3, #8]
 801a3b6:	4618      	mov	r0, r3
 801a3b8:	f7f7 f84d 	bl	8011456 <lwip_htonl>
 801a3bc:	4602      	mov	r2, r0
 801a3be:	68fb      	ldr	r3, [r7, #12]
 801a3c0:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 801a3c2:	683b      	ldr	r3, [r7, #0]
 801a3c4:	691a      	ldr	r2, [r3, #16]
 801a3c6:	68fb      	ldr	r3, [r7, #12]
 801a3c8:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 801a3ca:	6878      	ldr	r0, [r7, #4]
 801a3cc:	f000 f808 	bl	801a3e0 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 801a3d0:	bf00      	nop
 801a3d2:	3710      	adds	r7, #16
 801a3d4:	46bd      	mov	sp, r7
 801a3d6:	bd80      	pop	{r7, pc}
 801a3d8:	24007e58 	.word	0x24007e58
 801a3dc:	24007e38 	.word	0x24007e38

0801a3e0 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 801a3e0:	b5b0      	push	{r4, r5, r7, lr}
 801a3e2:	b08a      	sub	sp, #40	; 0x28
 801a3e4:	af02      	add	r7, sp, #8
 801a3e6:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 801a3e8:	687b      	ldr	r3, [r7, #4]
 801a3ea:	2b00      	cmp	r3, #0
 801a3ec:	d109      	bne.n	801a402 <dhcp_select+0x22>
 801a3ee:	4b71      	ldr	r3, [pc, #452]	; (801a5b4 <dhcp_select+0x1d4>)
 801a3f0:	f240 1277 	movw	r2, #375	; 0x177
 801a3f4:	4970      	ldr	r1, [pc, #448]	; (801a5b8 <dhcp_select+0x1d8>)
 801a3f6:	4871      	ldr	r0, [pc, #452]	; (801a5bc <dhcp_select+0x1dc>)
 801a3f8:	f006 f82a 	bl	8020450 <iprintf>
 801a3fc:	f06f 030f 	mvn.w	r3, #15
 801a400:	e0d3      	b.n	801a5aa <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 801a402:	687b      	ldr	r3, [r7, #4]
 801a404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a406:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 801a408:	69bb      	ldr	r3, [r7, #24]
 801a40a:	2b00      	cmp	r3, #0
 801a40c:	d109      	bne.n	801a422 <dhcp_select+0x42>
 801a40e:	4b69      	ldr	r3, [pc, #420]	; (801a5b4 <dhcp_select+0x1d4>)
 801a410:	f240 1279 	movw	r2, #377	; 0x179
 801a414:	496a      	ldr	r1, [pc, #424]	; (801a5c0 <dhcp_select+0x1e0>)
 801a416:	4869      	ldr	r0, [pc, #420]	; (801a5bc <dhcp_select+0x1dc>)
 801a418:	f006 f81a 	bl	8020450 <iprintf>
 801a41c:	f06f 0305 	mvn.w	r3, #5
 801a420:	e0c3      	b.n	801a5aa <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 801a422:	2101      	movs	r1, #1
 801a424:	69b8      	ldr	r0, [r7, #24]
 801a426:	f000 ffc9 	bl	801b3bc <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801a42a:	f107 030c 	add.w	r3, r7, #12
 801a42e:	2203      	movs	r2, #3
 801a430:	69b9      	ldr	r1, [r7, #24]
 801a432:	6878      	ldr	r0, [r7, #4]
 801a434:	f001 fc4e 	bl	801bcd4 <dhcp_create_msg>
 801a438:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801a43a:	697b      	ldr	r3, [r7, #20]
 801a43c:	2b00      	cmp	r3, #0
 801a43e:	f000 8085 	beq.w	801a54c <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801a442:	697b      	ldr	r3, [r7, #20]
 801a444:	685b      	ldr	r3, [r3, #4]
 801a446:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801a448:	89b8      	ldrh	r0, [r7, #12]
 801a44a:	693b      	ldr	r3, [r7, #16]
 801a44c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801a450:	2302      	movs	r3, #2
 801a452:	2239      	movs	r2, #57	; 0x39
 801a454:	f000 ffcc 	bl	801b3f0 <dhcp_option>
 801a458:	4603      	mov	r3, r0
 801a45a:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801a45c:	89b8      	ldrh	r0, [r7, #12]
 801a45e:	693b      	ldr	r3, [r7, #16]
 801a460:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801a464:	687b      	ldr	r3, [r7, #4]
 801a466:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801a468:	461a      	mov	r2, r3
 801a46a:	f001 f81b 	bl	801b4a4 <dhcp_option_short>
 801a46e:	4603      	mov	r3, r0
 801a470:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801a472:	89b8      	ldrh	r0, [r7, #12]
 801a474:	693b      	ldr	r3, [r7, #16]
 801a476:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801a47a:	2304      	movs	r3, #4
 801a47c:	2232      	movs	r2, #50	; 0x32
 801a47e:	f000 ffb7 	bl	801b3f0 <dhcp_option>
 801a482:	4603      	mov	r3, r0
 801a484:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801a486:	89bc      	ldrh	r4, [r7, #12]
 801a488:	693b      	ldr	r3, [r7, #16]
 801a48a:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801a48e:	69bb      	ldr	r3, [r7, #24]
 801a490:	69db      	ldr	r3, [r3, #28]
 801a492:	4618      	mov	r0, r3
 801a494:	f7f6 ffdf 	bl	8011456 <lwip_htonl>
 801a498:	4603      	mov	r3, r0
 801a49a:	461a      	mov	r2, r3
 801a49c:	4629      	mov	r1, r5
 801a49e:	4620      	mov	r0, r4
 801a4a0:	f001 f832 	bl	801b508 <dhcp_option_long>
 801a4a4:	4603      	mov	r3, r0
 801a4a6:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 801a4a8:	89b8      	ldrh	r0, [r7, #12]
 801a4aa:	693b      	ldr	r3, [r7, #16]
 801a4ac:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801a4b0:	2304      	movs	r3, #4
 801a4b2:	2236      	movs	r2, #54	; 0x36
 801a4b4:	f000 ff9c 	bl	801b3f0 <dhcp_option>
 801a4b8:	4603      	mov	r3, r0
 801a4ba:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 801a4bc:	89bc      	ldrh	r4, [r7, #12]
 801a4be:	693b      	ldr	r3, [r7, #16]
 801a4c0:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801a4c4:	69bb      	ldr	r3, [r7, #24]
 801a4c6:	699b      	ldr	r3, [r3, #24]
 801a4c8:	4618      	mov	r0, r3
 801a4ca:	f7f6 ffc4 	bl	8011456 <lwip_htonl>
 801a4ce:	4603      	mov	r3, r0
 801a4d0:	461a      	mov	r2, r3
 801a4d2:	4629      	mov	r1, r5
 801a4d4:	4620      	mov	r0, r4
 801a4d6:	f001 f817 	bl	801b508 <dhcp_option_long>
 801a4da:	4603      	mov	r3, r0
 801a4dc:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801a4de:	89b8      	ldrh	r0, [r7, #12]
 801a4e0:	693b      	ldr	r3, [r7, #16]
 801a4e2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801a4e6:	2303      	movs	r3, #3
 801a4e8:	2237      	movs	r2, #55	; 0x37
 801a4ea:	f000 ff81 	bl	801b3f0 <dhcp_option>
 801a4ee:	4603      	mov	r3, r0
 801a4f0:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801a4f2:	2300      	movs	r3, #0
 801a4f4:	77bb      	strb	r3, [r7, #30]
 801a4f6:	e00e      	b.n	801a516 <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801a4f8:	89b8      	ldrh	r0, [r7, #12]
 801a4fa:	693b      	ldr	r3, [r7, #16]
 801a4fc:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801a500:	7fbb      	ldrb	r3, [r7, #30]
 801a502:	4a30      	ldr	r2, [pc, #192]	; (801a5c4 <dhcp_select+0x1e4>)
 801a504:	5cd3      	ldrb	r3, [r2, r3]
 801a506:	461a      	mov	r2, r3
 801a508:	f000 ffa6 	bl	801b458 <dhcp_option_byte>
 801a50c:	4603      	mov	r3, r0
 801a50e:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801a510:	7fbb      	ldrb	r3, [r7, #30]
 801a512:	3301      	adds	r3, #1
 801a514:	77bb      	strb	r3, [r7, #30]
 801a516:	7fbb      	ldrb	r3, [r7, #30]
 801a518:	2b02      	cmp	r3, #2
 801a51a:	d9ed      	bls.n	801a4f8 <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801a51c:	89b8      	ldrh	r0, [r7, #12]
 801a51e:	693b      	ldr	r3, [r7, #16]
 801a520:	33f0      	adds	r3, #240	; 0xf0
 801a522:	697a      	ldr	r2, [r7, #20]
 801a524:	4619      	mov	r1, r3
 801a526:	f001 fcab 	bl	801be80 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801a52a:	4b27      	ldr	r3, [pc, #156]	; (801a5c8 <dhcp_select+0x1e8>)
 801a52c:	6818      	ldr	r0, [r3, #0]
 801a52e:	4b27      	ldr	r3, [pc, #156]	; (801a5cc <dhcp_select+0x1ec>)
 801a530:	9301      	str	r3, [sp, #4]
 801a532:	687b      	ldr	r3, [r7, #4]
 801a534:	9300      	str	r3, [sp, #0]
 801a536:	2343      	movs	r3, #67	; 0x43
 801a538:	4a25      	ldr	r2, [pc, #148]	; (801a5d0 <dhcp_select+0x1f0>)
 801a53a:	6979      	ldr	r1, [r7, #20]
 801a53c:	f7ff fbce 	bl	8019cdc <udp_sendto_if_src>
 801a540:	4603      	mov	r3, r0
 801a542:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801a544:	6978      	ldr	r0, [r7, #20]
 801a546:	f7f8 fc59 	bl	8012dfc <pbuf_free>
 801a54a:	e001      	b.n	801a550 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801a54c:	23ff      	movs	r3, #255	; 0xff
 801a54e:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801a550:	69bb      	ldr	r3, [r7, #24]
 801a552:	799b      	ldrb	r3, [r3, #6]
 801a554:	2bff      	cmp	r3, #255	; 0xff
 801a556:	d005      	beq.n	801a564 <dhcp_select+0x184>
    dhcp->tries++;
 801a558:	69bb      	ldr	r3, [r7, #24]
 801a55a:	799b      	ldrb	r3, [r3, #6]
 801a55c:	3301      	adds	r3, #1
 801a55e:	b2da      	uxtb	r2, r3
 801a560:	69bb      	ldr	r3, [r7, #24]
 801a562:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 801a564:	69bb      	ldr	r3, [r7, #24]
 801a566:	799b      	ldrb	r3, [r3, #6]
 801a568:	2b05      	cmp	r3, #5
 801a56a:	d80d      	bhi.n	801a588 <dhcp_select+0x1a8>
 801a56c:	69bb      	ldr	r3, [r7, #24]
 801a56e:	799b      	ldrb	r3, [r3, #6]
 801a570:	461a      	mov	r2, r3
 801a572:	2301      	movs	r3, #1
 801a574:	4093      	lsls	r3, r2
 801a576:	b29b      	uxth	r3, r3
 801a578:	461a      	mov	r2, r3
 801a57a:	0152      	lsls	r2, r2, #5
 801a57c:	1ad2      	subs	r2, r2, r3
 801a57e:	0092      	lsls	r2, r2, #2
 801a580:	4413      	add	r3, r2
 801a582:	00db      	lsls	r3, r3, #3
 801a584:	b29b      	uxth	r3, r3
 801a586:	e001      	b.n	801a58c <dhcp_select+0x1ac>
 801a588:	f64e 2360 	movw	r3, #60000	; 0xea60
 801a58c:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801a58e:	89fb      	ldrh	r3, [r7, #14]
 801a590:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801a594:	4a0f      	ldr	r2, [pc, #60]	; (801a5d4 <dhcp_select+0x1f4>)
 801a596:	fb82 1203 	smull	r1, r2, r2, r3
 801a59a:	1152      	asrs	r2, r2, #5
 801a59c:	17db      	asrs	r3, r3, #31
 801a59e:	1ad3      	subs	r3, r2, r3
 801a5a0:	b29a      	uxth	r2, r3
 801a5a2:	69bb      	ldr	r3, [r7, #24]
 801a5a4:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801a5a6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801a5aa:	4618      	mov	r0, r3
 801a5ac:	3720      	adds	r7, #32
 801a5ae:	46bd      	mov	sp, r7
 801a5b0:	bdb0      	pop	{r4, r5, r7, pc}
 801a5b2:	bf00      	nop
 801a5b4:	08026474 	.word	0x08026474
 801a5b8:	08026520 	.word	0x08026520
 801a5bc:	080264d4 	.word	0x080264d4
 801a5c0:	0802653c 	.word	0x0802653c
 801a5c4:	24000300 	.word	0x24000300
 801a5c8:	24007e60 	.word	0x24007e60
 801a5cc:	08027084 	.word	0x08027084
 801a5d0:	08027088 	.word	0x08027088
 801a5d4:	10624dd3 	.word	0x10624dd3

0801a5d8 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 801a5d8:	b580      	push	{r7, lr}
 801a5da:	b082      	sub	sp, #8
 801a5dc:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 801a5de:	4b27      	ldr	r3, [pc, #156]	; (801a67c <dhcp_coarse_tmr+0xa4>)
 801a5e0:	681b      	ldr	r3, [r3, #0]
 801a5e2:	607b      	str	r3, [r7, #4]
 801a5e4:	e042      	b.n	801a66c <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801a5e6:	687b      	ldr	r3, [r7, #4]
 801a5e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a5ea:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 801a5ec:	683b      	ldr	r3, [r7, #0]
 801a5ee:	2b00      	cmp	r3, #0
 801a5f0:	d039      	beq.n	801a666 <dhcp_coarse_tmr+0x8e>
 801a5f2:	683b      	ldr	r3, [r7, #0]
 801a5f4:	795b      	ldrb	r3, [r3, #5]
 801a5f6:	2b00      	cmp	r3, #0
 801a5f8:	d035      	beq.n	801a666 <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 801a5fa:	683b      	ldr	r3, [r7, #0]
 801a5fc:	8a9b      	ldrh	r3, [r3, #20]
 801a5fe:	2b00      	cmp	r3, #0
 801a600:	d012      	beq.n	801a628 <dhcp_coarse_tmr+0x50>
 801a602:	683b      	ldr	r3, [r7, #0]
 801a604:	8a5b      	ldrh	r3, [r3, #18]
 801a606:	3301      	adds	r3, #1
 801a608:	b29a      	uxth	r2, r3
 801a60a:	683b      	ldr	r3, [r7, #0]
 801a60c:	825a      	strh	r2, [r3, #18]
 801a60e:	683b      	ldr	r3, [r7, #0]
 801a610:	8a5a      	ldrh	r2, [r3, #18]
 801a612:	683b      	ldr	r3, [r7, #0]
 801a614:	8a9b      	ldrh	r3, [r3, #20]
 801a616:	429a      	cmp	r2, r3
 801a618:	d106      	bne.n	801a628 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 801a61a:	6878      	ldr	r0, [r7, #4]
 801a61c:	f000 fe34 	bl	801b288 <dhcp_release_and_stop>
        dhcp_start(netif);
 801a620:	6878      	ldr	r0, [r7, #4]
 801a622:	f000 f96b 	bl	801a8fc <dhcp_start>
 801a626:	e01e      	b.n	801a666 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 801a628:	683b      	ldr	r3, [r7, #0]
 801a62a:	8a1b      	ldrh	r3, [r3, #16]
 801a62c:	2b00      	cmp	r3, #0
 801a62e:	d00b      	beq.n	801a648 <dhcp_coarse_tmr+0x70>
 801a630:	683b      	ldr	r3, [r7, #0]
 801a632:	8a1b      	ldrh	r3, [r3, #16]
 801a634:	1e5a      	subs	r2, r3, #1
 801a636:	b291      	uxth	r1, r2
 801a638:	683a      	ldr	r2, [r7, #0]
 801a63a:	8211      	strh	r1, [r2, #16]
 801a63c:	2b01      	cmp	r3, #1
 801a63e:	d103      	bne.n	801a648 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 801a640:	6878      	ldr	r0, [r7, #4]
 801a642:	f000 f8c7 	bl	801a7d4 <dhcp_t2_timeout>
 801a646:	e00e      	b.n	801a666 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 801a648:	683b      	ldr	r3, [r7, #0]
 801a64a:	89db      	ldrh	r3, [r3, #14]
 801a64c:	2b00      	cmp	r3, #0
 801a64e:	d00a      	beq.n	801a666 <dhcp_coarse_tmr+0x8e>
 801a650:	683b      	ldr	r3, [r7, #0]
 801a652:	89db      	ldrh	r3, [r3, #14]
 801a654:	1e5a      	subs	r2, r3, #1
 801a656:	b291      	uxth	r1, r2
 801a658:	683a      	ldr	r2, [r7, #0]
 801a65a:	81d1      	strh	r1, [r2, #14]
 801a65c:	2b01      	cmp	r3, #1
 801a65e:	d102      	bne.n	801a666 <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 801a660:	6878      	ldr	r0, [r7, #4]
 801a662:	f000 f888 	bl	801a776 <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 801a666:	687b      	ldr	r3, [r7, #4]
 801a668:	681b      	ldr	r3, [r3, #0]
 801a66a:	607b      	str	r3, [r7, #4]
 801a66c:	687b      	ldr	r3, [r7, #4]
 801a66e:	2b00      	cmp	r3, #0
 801a670:	d1b9      	bne.n	801a5e6 <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 801a672:	bf00      	nop
 801a674:	bf00      	nop
 801a676:	3708      	adds	r7, #8
 801a678:	46bd      	mov	sp, r7
 801a67a:	bd80      	pop	{r7, pc}
 801a67c:	24007dcc 	.word	0x24007dcc

0801a680 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 801a680:	b580      	push	{r7, lr}
 801a682:	b082      	sub	sp, #8
 801a684:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 801a686:	4b16      	ldr	r3, [pc, #88]	; (801a6e0 <dhcp_fine_tmr+0x60>)
 801a688:	681b      	ldr	r3, [r3, #0]
 801a68a:	607b      	str	r3, [r7, #4]
 801a68c:	e020      	b.n	801a6d0 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801a68e:	687b      	ldr	r3, [r7, #4]
 801a690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a692:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 801a694:	683b      	ldr	r3, [r7, #0]
 801a696:	2b00      	cmp	r3, #0
 801a698:	d017      	beq.n	801a6ca <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 801a69a:	683b      	ldr	r3, [r7, #0]
 801a69c:	891b      	ldrh	r3, [r3, #8]
 801a69e:	2b01      	cmp	r3, #1
 801a6a0:	d906      	bls.n	801a6b0 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 801a6a2:	683b      	ldr	r3, [r7, #0]
 801a6a4:	891b      	ldrh	r3, [r3, #8]
 801a6a6:	3b01      	subs	r3, #1
 801a6a8:	b29a      	uxth	r2, r3
 801a6aa:	683b      	ldr	r3, [r7, #0]
 801a6ac:	811a      	strh	r2, [r3, #8]
 801a6ae:	e00c      	b.n	801a6ca <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 801a6b0:	683b      	ldr	r3, [r7, #0]
 801a6b2:	891b      	ldrh	r3, [r3, #8]
 801a6b4:	2b01      	cmp	r3, #1
 801a6b6:	d108      	bne.n	801a6ca <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 801a6b8:	683b      	ldr	r3, [r7, #0]
 801a6ba:	891b      	ldrh	r3, [r3, #8]
 801a6bc:	3b01      	subs	r3, #1
 801a6be:	b29a      	uxth	r2, r3
 801a6c0:	683b      	ldr	r3, [r7, #0]
 801a6c2:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 801a6c4:	6878      	ldr	r0, [r7, #4]
 801a6c6:	f000 f80d 	bl	801a6e4 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 801a6ca:	687b      	ldr	r3, [r7, #4]
 801a6cc:	681b      	ldr	r3, [r3, #0]
 801a6ce:	607b      	str	r3, [r7, #4]
 801a6d0:	687b      	ldr	r3, [r7, #4]
 801a6d2:	2b00      	cmp	r3, #0
 801a6d4:	d1db      	bne.n	801a68e <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 801a6d6:	bf00      	nop
 801a6d8:	bf00      	nop
 801a6da:	3708      	adds	r7, #8
 801a6dc:	46bd      	mov	sp, r7
 801a6de:	bd80      	pop	{r7, pc}
 801a6e0:	24007dcc 	.word	0x24007dcc

0801a6e4 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 801a6e4:	b580      	push	{r7, lr}
 801a6e6:	b084      	sub	sp, #16
 801a6e8:	af00      	add	r7, sp, #0
 801a6ea:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801a6ec:	687b      	ldr	r3, [r7, #4]
 801a6ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a6f0:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 801a6f2:	68fb      	ldr	r3, [r7, #12]
 801a6f4:	795b      	ldrb	r3, [r3, #5]
 801a6f6:	2b0c      	cmp	r3, #12
 801a6f8:	d003      	beq.n	801a702 <dhcp_timeout+0x1e>
 801a6fa:	68fb      	ldr	r3, [r7, #12]
 801a6fc:	795b      	ldrb	r3, [r3, #5]
 801a6fe:	2b06      	cmp	r3, #6
 801a700:	d103      	bne.n	801a70a <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 801a702:	6878      	ldr	r0, [r7, #4]
 801a704:	f000 fa56 	bl	801abb4 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 801a708:	e031      	b.n	801a76e <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 801a70a:	68fb      	ldr	r3, [r7, #12]
 801a70c:	795b      	ldrb	r3, [r3, #5]
 801a70e:	2b01      	cmp	r3, #1
 801a710:	d10e      	bne.n	801a730 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 801a712:	68fb      	ldr	r3, [r7, #12]
 801a714:	799b      	ldrb	r3, [r3, #6]
 801a716:	2b05      	cmp	r3, #5
 801a718:	d803      	bhi.n	801a722 <dhcp_timeout+0x3e>
      dhcp_select(netif);
 801a71a:	6878      	ldr	r0, [r7, #4]
 801a71c:	f7ff fe60 	bl	801a3e0 <dhcp_select>
}
 801a720:	e025      	b.n	801a76e <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 801a722:	6878      	ldr	r0, [r7, #4]
 801a724:	f000 fdb0 	bl	801b288 <dhcp_release_and_stop>
      dhcp_start(netif);
 801a728:	6878      	ldr	r0, [r7, #4]
 801a72a:	f000 f8e7 	bl	801a8fc <dhcp_start>
}
 801a72e:	e01e      	b.n	801a76e <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 801a730:	68fb      	ldr	r3, [r7, #12]
 801a732:	795b      	ldrb	r3, [r3, #5]
 801a734:	2b08      	cmp	r3, #8
 801a736:	d10b      	bne.n	801a750 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 801a738:	68fb      	ldr	r3, [r7, #12]
 801a73a:	799b      	ldrb	r3, [r3, #6]
 801a73c:	2b01      	cmp	r3, #1
 801a73e:	d803      	bhi.n	801a748 <dhcp_timeout+0x64>
      dhcp_check(netif);
 801a740:	6878      	ldr	r0, [r7, #4]
 801a742:	f7ff fdf3 	bl	801a32c <dhcp_check>
}
 801a746:	e012      	b.n	801a76e <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 801a748:	6878      	ldr	r0, [r7, #4]
 801a74a:	f000 fad5 	bl	801acf8 <dhcp_bind>
}
 801a74e:	e00e      	b.n	801a76e <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 801a750:	68fb      	ldr	r3, [r7, #12]
 801a752:	795b      	ldrb	r3, [r3, #5]
 801a754:	2b03      	cmp	r3, #3
 801a756:	d10a      	bne.n	801a76e <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 801a758:	68fb      	ldr	r3, [r7, #12]
 801a75a:	799b      	ldrb	r3, [r3, #6]
 801a75c:	2b01      	cmp	r3, #1
 801a75e:	d803      	bhi.n	801a768 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 801a760:	6878      	ldr	r0, [r7, #4]
 801a762:	f000 fcdb 	bl	801b11c <dhcp_reboot>
}
 801a766:	e002      	b.n	801a76e <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 801a768:	6878      	ldr	r0, [r7, #4]
 801a76a:	f000 fa23 	bl	801abb4 <dhcp_discover>
}
 801a76e:	bf00      	nop
 801a770:	3710      	adds	r7, #16
 801a772:	46bd      	mov	sp, r7
 801a774:	bd80      	pop	{r7, pc}

0801a776 <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 801a776:	b580      	push	{r7, lr}
 801a778:	b084      	sub	sp, #16
 801a77a:	af00      	add	r7, sp, #0
 801a77c:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801a77e:	687b      	ldr	r3, [r7, #4]
 801a780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a782:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801a784:	68fb      	ldr	r3, [r7, #12]
 801a786:	795b      	ldrb	r3, [r3, #5]
 801a788:	2b01      	cmp	r3, #1
 801a78a:	d007      	beq.n	801a79c <dhcp_t1_timeout+0x26>
 801a78c:	68fb      	ldr	r3, [r7, #12]
 801a78e:	795b      	ldrb	r3, [r3, #5]
 801a790:	2b0a      	cmp	r3, #10
 801a792:	d003      	beq.n	801a79c <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 801a794:	68fb      	ldr	r3, [r7, #12]
 801a796:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801a798:	2b05      	cmp	r3, #5
 801a79a:	d117      	bne.n	801a7cc <dhcp_t1_timeout+0x56>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 801a79c:	6878      	ldr	r0, [r7, #4]
 801a79e:	f000 fb85 	bl	801aeac <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 801a7a2:	68fb      	ldr	r3, [r7, #12]
 801a7a4:	899b      	ldrh	r3, [r3, #12]
 801a7a6:	461a      	mov	r2, r3
 801a7a8:	68fb      	ldr	r3, [r7, #12]
 801a7aa:	8a5b      	ldrh	r3, [r3, #18]
 801a7ac:	1ad3      	subs	r3, r2, r3
 801a7ae:	2b01      	cmp	r3, #1
 801a7b0:	dd0c      	ble.n	801a7cc <dhcp_t1_timeout+0x56>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 801a7b2:	68fb      	ldr	r3, [r7, #12]
 801a7b4:	899b      	ldrh	r3, [r3, #12]
 801a7b6:	461a      	mov	r2, r3
 801a7b8:	68fb      	ldr	r3, [r7, #12]
 801a7ba:	8a5b      	ldrh	r3, [r3, #18]
 801a7bc:	1ad3      	subs	r3, r2, r3
 801a7be:	2b00      	cmp	r3, #0
 801a7c0:	da00      	bge.n	801a7c4 <dhcp_t1_timeout+0x4e>
 801a7c2:	3301      	adds	r3, #1
 801a7c4:	105b      	asrs	r3, r3, #1
 801a7c6:	b29a      	uxth	r2, r3
 801a7c8:	68fb      	ldr	r3, [r7, #12]
 801a7ca:	81da      	strh	r2, [r3, #14]
    }
  }
}
 801a7cc:	bf00      	nop
 801a7ce:	3710      	adds	r7, #16
 801a7d0:	46bd      	mov	sp, r7
 801a7d2:	bd80      	pop	{r7, pc}

0801a7d4 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 801a7d4:	b580      	push	{r7, lr}
 801a7d6:	b084      	sub	sp, #16
 801a7d8:	af00      	add	r7, sp, #0
 801a7da:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801a7dc:	687b      	ldr	r3, [r7, #4]
 801a7de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a7e0:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801a7e2:	68fb      	ldr	r3, [r7, #12]
 801a7e4:	795b      	ldrb	r3, [r3, #5]
 801a7e6:	2b01      	cmp	r3, #1
 801a7e8:	d00b      	beq.n	801a802 <dhcp_t2_timeout+0x2e>
 801a7ea:	68fb      	ldr	r3, [r7, #12]
 801a7ec:	795b      	ldrb	r3, [r3, #5]
 801a7ee:	2b0a      	cmp	r3, #10
 801a7f0:	d007      	beq.n	801a802 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 801a7f2:	68fb      	ldr	r3, [r7, #12]
 801a7f4:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801a7f6:	2b05      	cmp	r3, #5
 801a7f8:	d003      	beq.n	801a802 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 801a7fa:	68fb      	ldr	r3, [r7, #12]
 801a7fc:	795b      	ldrb	r3, [r3, #5]
 801a7fe:	2b04      	cmp	r3, #4
 801a800:	d117      	bne.n	801a832 <dhcp_t2_timeout+0x5e>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 801a802:	6878      	ldr	r0, [r7, #4]
 801a804:	f000 fbee 	bl	801afe4 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 801a808:	68fb      	ldr	r3, [r7, #12]
 801a80a:	8a9b      	ldrh	r3, [r3, #20]
 801a80c:	461a      	mov	r2, r3
 801a80e:	68fb      	ldr	r3, [r7, #12]
 801a810:	8a5b      	ldrh	r3, [r3, #18]
 801a812:	1ad3      	subs	r3, r2, r3
 801a814:	2b01      	cmp	r3, #1
 801a816:	dd0c      	ble.n	801a832 <dhcp_t2_timeout+0x5e>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 801a818:	68fb      	ldr	r3, [r7, #12]
 801a81a:	8a9b      	ldrh	r3, [r3, #20]
 801a81c:	461a      	mov	r2, r3
 801a81e:	68fb      	ldr	r3, [r7, #12]
 801a820:	8a5b      	ldrh	r3, [r3, #18]
 801a822:	1ad3      	subs	r3, r2, r3
 801a824:	2b00      	cmp	r3, #0
 801a826:	da00      	bge.n	801a82a <dhcp_t2_timeout+0x56>
 801a828:	3301      	adds	r3, #1
 801a82a:	105b      	asrs	r3, r3, #1
 801a82c:	b29a      	uxth	r2, r3
 801a82e:	68fb      	ldr	r3, [r7, #12]
 801a830:	821a      	strh	r2, [r3, #16]
    }
  }
}
 801a832:	bf00      	nop
 801a834:	3710      	adds	r7, #16
 801a836:	46bd      	mov	sp, r7
 801a838:	bd80      	pop	{r7, pc}
	...

0801a83c <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 801a83c:	b580      	push	{r7, lr}
 801a83e:	b084      	sub	sp, #16
 801a840:	af00      	add	r7, sp, #0
 801a842:	6078      	str	r0, [r7, #4]
 801a844:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801a846:	687b      	ldr	r3, [r7, #4]
 801a848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a84a:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 801a84c:	68fb      	ldr	r3, [r7, #12]
 801a84e:	2200      	movs	r2, #0
 801a850:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 801a852:	68fb      	ldr	r3, [r7, #12]
 801a854:	2200      	movs	r2, #0
 801a856:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 801a858:	4b26      	ldr	r3, [pc, #152]	; (801a8f4 <dhcp_handle_ack+0xb8>)
 801a85a:	78db      	ldrb	r3, [r3, #3]
 801a85c:	2b00      	cmp	r3, #0
 801a85e:	d003      	beq.n	801a868 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 801a860:	4b25      	ldr	r3, [pc, #148]	; (801a8f8 <dhcp_handle_ack+0xbc>)
 801a862:	68da      	ldr	r2, [r3, #12]
 801a864:	68fb      	ldr	r3, [r7, #12]
 801a866:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 801a868:	4b22      	ldr	r3, [pc, #136]	; (801a8f4 <dhcp_handle_ack+0xb8>)
 801a86a:	791b      	ldrb	r3, [r3, #4]
 801a86c:	2b00      	cmp	r3, #0
 801a86e:	d004      	beq.n	801a87a <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 801a870:	4b21      	ldr	r3, [pc, #132]	; (801a8f8 <dhcp_handle_ack+0xbc>)
 801a872:	691a      	ldr	r2, [r3, #16]
 801a874:	68fb      	ldr	r3, [r7, #12]
 801a876:	62da      	str	r2, [r3, #44]	; 0x2c
 801a878:	e004      	b.n	801a884 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 801a87a:	68fb      	ldr	r3, [r7, #12]
 801a87c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a87e:	085a      	lsrs	r2, r3, #1
 801a880:	68fb      	ldr	r3, [r7, #12]
 801a882:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 801a884:	4b1b      	ldr	r3, [pc, #108]	; (801a8f4 <dhcp_handle_ack+0xb8>)
 801a886:	795b      	ldrb	r3, [r3, #5]
 801a888:	2b00      	cmp	r3, #0
 801a88a:	d004      	beq.n	801a896 <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 801a88c:	4b1a      	ldr	r3, [pc, #104]	; (801a8f8 <dhcp_handle_ack+0xbc>)
 801a88e:	695a      	ldr	r2, [r3, #20]
 801a890:	68fb      	ldr	r3, [r7, #12]
 801a892:	631a      	str	r2, [r3, #48]	; 0x30
 801a894:	e007      	b.n	801a8a6 <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 801a896:	68fb      	ldr	r3, [r7, #12]
 801a898:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801a89a:	4613      	mov	r3, r2
 801a89c:	00db      	lsls	r3, r3, #3
 801a89e:	1a9b      	subs	r3, r3, r2
 801a8a0:	08da      	lsrs	r2, r3, #3
 801a8a2:	68fb      	ldr	r3, [r7, #12]
 801a8a4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 801a8a6:	683b      	ldr	r3, [r7, #0]
 801a8a8:	691a      	ldr	r2, [r3, #16]
 801a8aa:	68fb      	ldr	r3, [r7, #12]
 801a8ac:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 801a8ae:	4b11      	ldr	r3, [pc, #68]	; (801a8f4 <dhcp_handle_ack+0xb8>)
 801a8b0:	799b      	ldrb	r3, [r3, #6]
 801a8b2:	2b00      	cmp	r3, #0
 801a8b4:	d00b      	beq.n	801a8ce <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 801a8b6:	4b10      	ldr	r3, [pc, #64]	; (801a8f8 <dhcp_handle_ack+0xbc>)
 801a8b8:	699b      	ldr	r3, [r3, #24]
 801a8ba:	4618      	mov	r0, r3
 801a8bc:	f7f6 fdcb 	bl	8011456 <lwip_htonl>
 801a8c0:	4602      	mov	r2, r0
 801a8c2:	68fb      	ldr	r3, [r7, #12]
 801a8c4:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 801a8c6:	68fb      	ldr	r3, [r7, #12]
 801a8c8:	2201      	movs	r2, #1
 801a8ca:	71da      	strb	r2, [r3, #7]
 801a8cc:	e002      	b.n	801a8d4 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 801a8ce:	68fb      	ldr	r3, [r7, #12]
 801a8d0:	2200      	movs	r2, #0
 801a8d2:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 801a8d4:	4b07      	ldr	r3, [pc, #28]	; (801a8f4 <dhcp_handle_ack+0xb8>)
 801a8d6:	79db      	ldrb	r3, [r3, #7]
 801a8d8:	2b00      	cmp	r3, #0
 801a8da:	d007      	beq.n	801a8ec <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 801a8dc:	4b06      	ldr	r3, [pc, #24]	; (801a8f8 <dhcp_handle_ack+0xbc>)
 801a8de:	69db      	ldr	r3, [r3, #28]
 801a8e0:	4618      	mov	r0, r3
 801a8e2:	f7f6 fdb8 	bl	8011456 <lwip_htonl>
 801a8e6:	4602      	mov	r2, r0
 801a8e8:	68fb      	ldr	r3, [r7, #12]
 801a8ea:	625a      	str	r2, [r3, #36]	; 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 801a8ec:	bf00      	nop
 801a8ee:	3710      	adds	r7, #16
 801a8f0:	46bd      	mov	sp, r7
 801a8f2:	bd80      	pop	{r7, pc}
 801a8f4:	24007e58 	.word	0x24007e58
 801a8f8:	24007e38 	.word	0x24007e38

0801a8fc <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 801a8fc:	b580      	push	{r7, lr}
 801a8fe:	b084      	sub	sp, #16
 801a900:	af00      	add	r7, sp, #0
 801a902:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 801a904:	687b      	ldr	r3, [r7, #4]
 801a906:	2b00      	cmp	r3, #0
 801a908:	d109      	bne.n	801a91e <dhcp_start+0x22>
 801a90a:	4b37      	ldr	r3, [pc, #220]	; (801a9e8 <dhcp_start+0xec>)
 801a90c:	f240 22e7 	movw	r2, #743	; 0x2e7
 801a910:	4936      	ldr	r1, [pc, #216]	; (801a9ec <dhcp_start+0xf0>)
 801a912:	4837      	ldr	r0, [pc, #220]	; (801a9f0 <dhcp_start+0xf4>)
 801a914:	f005 fd9c 	bl	8020450 <iprintf>
 801a918:	f06f 030f 	mvn.w	r3, #15
 801a91c:	e060      	b.n	801a9e0 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 801a91e:	687b      	ldr	r3, [r7, #4]
 801a920:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801a924:	f003 0301 	and.w	r3, r3, #1
 801a928:	2b00      	cmp	r3, #0
 801a92a:	d109      	bne.n	801a940 <dhcp_start+0x44>
 801a92c:	4b2e      	ldr	r3, [pc, #184]	; (801a9e8 <dhcp_start+0xec>)
 801a92e:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 801a932:	4930      	ldr	r1, [pc, #192]	; (801a9f4 <dhcp_start+0xf8>)
 801a934:	482e      	ldr	r0, [pc, #184]	; (801a9f0 <dhcp_start+0xf4>)
 801a936:	f005 fd8b 	bl	8020450 <iprintf>
 801a93a:	f06f 030f 	mvn.w	r3, #15
 801a93e:	e04f      	b.n	801a9e0 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 801a940:	687b      	ldr	r3, [r7, #4]
 801a942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a944:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 801a946:	687b      	ldr	r3, [r7, #4]
 801a948:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801a94a:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 801a94e:	d202      	bcs.n	801a956 <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 801a950:	f04f 33ff 	mov.w	r3, #4294967295
 801a954:	e044      	b.n	801a9e0 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 801a956:	68fb      	ldr	r3, [r7, #12]
 801a958:	2b00      	cmp	r3, #0
 801a95a:	d10d      	bne.n	801a978 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 801a95c:	2034      	movs	r0, #52	; 0x34
 801a95e:	f7f7 f951 	bl	8011c04 <mem_malloc>
 801a962:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 801a964:	68fb      	ldr	r3, [r7, #12]
 801a966:	2b00      	cmp	r3, #0
 801a968:	d102      	bne.n	801a970 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 801a96a:	f04f 33ff 	mov.w	r3, #4294967295
 801a96e:	e037      	b.n	801a9e0 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 801a970:	687b      	ldr	r3, [r7, #4]
 801a972:	68fa      	ldr	r2, [r7, #12]
 801a974:	625a      	str	r2, [r3, #36]	; 0x24
 801a976:	e005      	b.n	801a984 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 801a978:	68fb      	ldr	r3, [r7, #12]
 801a97a:	791b      	ldrb	r3, [r3, #4]
 801a97c:	2b00      	cmp	r3, #0
 801a97e:	d001      	beq.n	801a984 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 801a980:	f7ff fc90 	bl	801a2a4 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 801a984:	2234      	movs	r2, #52	; 0x34
 801a986:	2100      	movs	r1, #0
 801a988:	68f8      	ldr	r0, [r7, #12]
 801a98a:	f005 fe00 	bl	802058e <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 801a98e:	f7ff fc37 	bl	801a200 <dhcp_inc_pcb_refcount>
 801a992:	4603      	mov	r3, r0
 801a994:	2b00      	cmp	r3, #0
 801a996:	d002      	beq.n	801a99e <dhcp_start+0xa2>
    return ERR_MEM;
 801a998:	f04f 33ff 	mov.w	r3, #4294967295
 801a99c:	e020      	b.n	801a9e0 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 801a99e:	68fb      	ldr	r3, [r7, #12]
 801a9a0:	2201      	movs	r2, #1
 801a9a2:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 801a9a4:	687b      	ldr	r3, [r7, #4]
 801a9a6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801a9aa:	f003 0304 	and.w	r3, r3, #4
 801a9ae:	2b00      	cmp	r3, #0
 801a9b0:	d105      	bne.n	801a9be <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 801a9b2:	2102      	movs	r1, #2
 801a9b4:	68f8      	ldr	r0, [r7, #12]
 801a9b6:	f000 fd01 	bl	801b3bc <dhcp_set_state>
    return ERR_OK;
 801a9ba:	2300      	movs	r3, #0
 801a9bc:	e010      	b.n	801a9e0 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 801a9be:	6878      	ldr	r0, [r7, #4]
 801a9c0:	f000 f8f8 	bl	801abb4 <dhcp_discover>
 801a9c4:	4603      	mov	r3, r0
 801a9c6:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 801a9c8:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801a9cc:	2b00      	cmp	r3, #0
 801a9ce:	d005      	beq.n	801a9dc <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 801a9d0:	6878      	ldr	r0, [r7, #4]
 801a9d2:	f000 fc59 	bl	801b288 <dhcp_release_and_stop>
    return ERR_MEM;
 801a9d6:	f04f 33ff 	mov.w	r3, #4294967295
 801a9da:	e001      	b.n	801a9e0 <dhcp_start+0xe4>
  }
  return result;
 801a9dc:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801a9e0:	4618      	mov	r0, r3
 801a9e2:	3710      	adds	r7, #16
 801a9e4:	46bd      	mov	sp, r7
 801a9e6:	bd80      	pop	{r7, pc}
 801a9e8:	08026474 	.word	0x08026474
 801a9ec:	08026558 	.word	0x08026558
 801a9f0:	080264d4 	.word	0x080264d4
 801a9f4:	0802659c 	.word	0x0802659c

0801a9f8 <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 801a9f8:	b580      	push	{r7, lr}
 801a9fa:	b084      	sub	sp, #16
 801a9fc:	af00      	add	r7, sp, #0
 801a9fe:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801aa00:	687b      	ldr	r3, [r7, #4]
 801aa02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801aa04:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 801aa06:	68fb      	ldr	r3, [r7, #12]
 801aa08:	2b00      	cmp	r3, #0
 801aa0a:	d025      	beq.n	801aa58 <dhcp_network_changed+0x60>
    return;
  }
  switch (dhcp->state) {
 801aa0c:	68fb      	ldr	r3, [r7, #12]
 801aa0e:	795b      	ldrb	r3, [r3, #5]
 801aa10:	2b0a      	cmp	r3, #10
 801aa12:	d008      	beq.n	801aa26 <dhcp_network_changed+0x2e>
 801aa14:	2b0a      	cmp	r3, #10
 801aa16:	dc0d      	bgt.n	801aa34 <dhcp_network_changed+0x3c>
 801aa18:	2b00      	cmp	r3, #0
 801aa1a:	d01f      	beq.n	801aa5c <dhcp_network_changed+0x64>
 801aa1c:	2b00      	cmp	r3, #0
 801aa1e:	db09      	blt.n	801aa34 <dhcp_network_changed+0x3c>
 801aa20:	3b03      	subs	r3, #3
 801aa22:	2b02      	cmp	r3, #2
 801aa24:	d806      	bhi.n	801aa34 <dhcp_network_changed+0x3c>
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 801aa26:	68fb      	ldr	r3, [r7, #12]
 801aa28:	2200      	movs	r2, #0
 801aa2a:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 801aa2c:	6878      	ldr	r0, [r7, #4]
 801aa2e:	f000 fb75 	bl	801b11c <dhcp_reboot>
      break;
 801aa32:	e014      	b.n	801aa5e <dhcp_network_changed+0x66>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 801aa34:	68fb      	ldr	r3, [r7, #12]
 801aa36:	795b      	ldrb	r3, [r3, #5]
 801aa38:	2b0c      	cmp	r3, #12
 801aa3a:	d906      	bls.n	801aa4a <dhcp_network_changed+0x52>
 801aa3c:	4b09      	ldr	r3, [pc, #36]	; (801aa64 <dhcp_network_changed+0x6c>)
 801aa3e:	f240 326d 	movw	r2, #877	; 0x36d
 801aa42:	4909      	ldr	r1, [pc, #36]	; (801aa68 <dhcp_network_changed+0x70>)
 801aa44:	4809      	ldr	r0, [pc, #36]	; (801aa6c <dhcp_network_changed+0x74>)
 801aa46:	f005 fd03 	bl	8020450 <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 801aa4a:	68fb      	ldr	r3, [r7, #12]
 801aa4c:	2200      	movs	r2, #0
 801aa4e:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 801aa50:	6878      	ldr	r0, [r7, #4]
 801aa52:	f000 f8af 	bl	801abb4 <dhcp_discover>
      break;
 801aa56:	e002      	b.n	801aa5e <dhcp_network_changed+0x66>
    return;
 801aa58:	bf00      	nop
 801aa5a:	e000      	b.n	801aa5e <dhcp_network_changed+0x66>
      break;
 801aa5c:	bf00      	nop
  }
}
 801aa5e:	3710      	adds	r7, #16
 801aa60:	46bd      	mov	sp, r7
 801aa62:	bd80      	pop	{r7, pc}
 801aa64:	08026474 	.word	0x08026474
 801aa68:	080265c0 	.word	0x080265c0
 801aa6c:	080264d4 	.word	0x080264d4

0801aa70 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 801aa70:	b580      	push	{r7, lr}
 801aa72:	b084      	sub	sp, #16
 801aa74:	af00      	add	r7, sp, #0
 801aa76:	6078      	str	r0, [r7, #4]
 801aa78:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801aa7a:	687b      	ldr	r3, [r7, #4]
 801aa7c:	2b00      	cmp	r3, #0
 801aa7e:	d107      	bne.n	801aa90 <dhcp_arp_reply+0x20>
 801aa80:	4b0e      	ldr	r3, [pc, #56]	; (801aabc <dhcp_arp_reply+0x4c>)
 801aa82:	f240 328b 	movw	r2, #907	; 0x38b
 801aa86:	490e      	ldr	r1, [pc, #56]	; (801aac0 <dhcp_arp_reply+0x50>)
 801aa88:	480e      	ldr	r0, [pc, #56]	; (801aac4 <dhcp_arp_reply+0x54>)
 801aa8a:	f005 fce1 	bl	8020450 <iprintf>
 801aa8e:	e012      	b.n	801aab6 <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 801aa90:	687b      	ldr	r3, [r7, #4]
 801aa92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801aa94:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 801aa96:	68fb      	ldr	r3, [r7, #12]
 801aa98:	2b00      	cmp	r3, #0
 801aa9a:	d00c      	beq.n	801aab6 <dhcp_arp_reply+0x46>
 801aa9c:	68fb      	ldr	r3, [r7, #12]
 801aa9e:	795b      	ldrb	r3, [r3, #5]
 801aaa0:	2b08      	cmp	r3, #8
 801aaa2:	d108      	bne.n	801aab6 <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 801aaa4:	683b      	ldr	r3, [r7, #0]
 801aaa6:	681a      	ldr	r2, [r3, #0]
 801aaa8:	68fb      	ldr	r3, [r7, #12]
 801aaaa:	69db      	ldr	r3, [r3, #28]
 801aaac:	429a      	cmp	r2, r3
 801aaae:	d102      	bne.n	801aab6 <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 801aab0:	6878      	ldr	r0, [r7, #4]
 801aab2:	f000 f809 	bl	801aac8 <dhcp_decline>
    }
  }
}
 801aab6:	3710      	adds	r7, #16
 801aab8:	46bd      	mov	sp, r7
 801aaba:	bd80      	pop	{r7, pc}
 801aabc:	08026474 	.word	0x08026474
 801aac0:	08026558 	.word	0x08026558
 801aac4:	080264d4 	.word	0x080264d4

0801aac8 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 801aac8:	b5b0      	push	{r4, r5, r7, lr}
 801aaca:	b08a      	sub	sp, #40	; 0x28
 801aacc:	af02      	add	r7, sp, #8
 801aace:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801aad0:	687b      	ldr	r3, [r7, #4]
 801aad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801aad4:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 801aad6:	210c      	movs	r1, #12
 801aad8:	69b8      	ldr	r0, [r7, #24]
 801aada:	f000 fc6f 	bl	801b3bc <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 801aade:	f107 030c 	add.w	r3, r7, #12
 801aae2:	2204      	movs	r2, #4
 801aae4:	69b9      	ldr	r1, [r7, #24]
 801aae6:	6878      	ldr	r0, [r7, #4]
 801aae8:	f001 f8f4 	bl	801bcd4 <dhcp_create_msg>
 801aaec:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801aaee:	697b      	ldr	r3, [r7, #20]
 801aaf0:	2b00      	cmp	r3, #0
 801aaf2:	d035      	beq.n	801ab60 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801aaf4:	697b      	ldr	r3, [r7, #20]
 801aaf6:	685b      	ldr	r3, [r3, #4]
 801aaf8:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801aafa:	89b8      	ldrh	r0, [r7, #12]
 801aafc:	693b      	ldr	r3, [r7, #16]
 801aafe:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801ab02:	2304      	movs	r3, #4
 801ab04:	2232      	movs	r2, #50	; 0x32
 801ab06:	f000 fc73 	bl	801b3f0 <dhcp_option>
 801ab0a:	4603      	mov	r3, r0
 801ab0c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801ab0e:	89bc      	ldrh	r4, [r7, #12]
 801ab10:	693b      	ldr	r3, [r7, #16]
 801ab12:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801ab16:	69bb      	ldr	r3, [r7, #24]
 801ab18:	69db      	ldr	r3, [r3, #28]
 801ab1a:	4618      	mov	r0, r3
 801ab1c:	f7f6 fc9b 	bl	8011456 <lwip_htonl>
 801ab20:	4603      	mov	r3, r0
 801ab22:	461a      	mov	r2, r3
 801ab24:	4629      	mov	r1, r5
 801ab26:	4620      	mov	r0, r4
 801ab28:	f000 fcee 	bl	801b508 <dhcp_option_long>
 801ab2c:	4603      	mov	r3, r0
 801ab2e:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801ab30:	89b8      	ldrh	r0, [r7, #12]
 801ab32:	693b      	ldr	r3, [r7, #16]
 801ab34:	33f0      	adds	r3, #240	; 0xf0
 801ab36:	697a      	ldr	r2, [r7, #20]
 801ab38:	4619      	mov	r1, r3
 801ab3a:	f001 f9a1 	bl	801be80 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801ab3e:	4b19      	ldr	r3, [pc, #100]	; (801aba4 <dhcp_decline+0xdc>)
 801ab40:	6818      	ldr	r0, [r3, #0]
 801ab42:	4b19      	ldr	r3, [pc, #100]	; (801aba8 <dhcp_decline+0xe0>)
 801ab44:	9301      	str	r3, [sp, #4]
 801ab46:	687b      	ldr	r3, [r7, #4]
 801ab48:	9300      	str	r3, [sp, #0]
 801ab4a:	2343      	movs	r3, #67	; 0x43
 801ab4c:	4a17      	ldr	r2, [pc, #92]	; (801abac <dhcp_decline+0xe4>)
 801ab4e:	6979      	ldr	r1, [r7, #20]
 801ab50:	f7ff f8c4 	bl	8019cdc <udp_sendto_if_src>
 801ab54:	4603      	mov	r3, r0
 801ab56:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801ab58:	6978      	ldr	r0, [r7, #20]
 801ab5a:	f7f8 f94f 	bl	8012dfc <pbuf_free>
 801ab5e:	e001      	b.n	801ab64 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801ab60:	23ff      	movs	r3, #255	; 0xff
 801ab62:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801ab64:	69bb      	ldr	r3, [r7, #24]
 801ab66:	799b      	ldrb	r3, [r3, #6]
 801ab68:	2bff      	cmp	r3, #255	; 0xff
 801ab6a:	d005      	beq.n	801ab78 <dhcp_decline+0xb0>
    dhcp->tries++;
 801ab6c:	69bb      	ldr	r3, [r7, #24]
 801ab6e:	799b      	ldrb	r3, [r3, #6]
 801ab70:	3301      	adds	r3, #1
 801ab72:	b2da      	uxtb	r2, r3
 801ab74:	69bb      	ldr	r3, [r7, #24]
 801ab76:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 801ab78:	f242 7310 	movw	r3, #10000	; 0x2710
 801ab7c:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801ab7e:	89fb      	ldrh	r3, [r7, #14]
 801ab80:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801ab84:	4a0a      	ldr	r2, [pc, #40]	; (801abb0 <dhcp_decline+0xe8>)
 801ab86:	fb82 1203 	smull	r1, r2, r2, r3
 801ab8a:	1152      	asrs	r2, r2, #5
 801ab8c:	17db      	asrs	r3, r3, #31
 801ab8e:	1ad3      	subs	r3, r2, r3
 801ab90:	b29a      	uxth	r2, r3
 801ab92:	69bb      	ldr	r3, [r7, #24]
 801ab94:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801ab96:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801ab9a:	4618      	mov	r0, r3
 801ab9c:	3720      	adds	r7, #32
 801ab9e:	46bd      	mov	sp, r7
 801aba0:	bdb0      	pop	{r4, r5, r7, pc}
 801aba2:	bf00      	nop
 801aba4:	24007e60 	.word	0x24007e60
 801aba8:	08027084 	.word	0x08027084
 801abac:	08027088 	.word	0x08027088
 801abb0:	10624dd3 	.word	0x10624dd3

0801abb4 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 801abb4:	b580      	push	{r7, lr}
 801abb6:	b08a      	sub	sp, #40	; 0x28
 801abb8:	af02      	add	r7, sp, #8
 801abba:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801abbc:	687b      	ldr	r3, [r7, #4]
 801abbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801abc0:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 801abc2:	2300      	movs	r3, #0
 801abc4:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 801abc6:	69bb      	ldr	r3, [r7, #24]
 801abc8:	2200      	movs	r2, #0
 801abca:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 801abcc:	2106      	movs	r1, #6
 801abce:	69b8      	ldr	r0, [r7, #24]
 801abd0:	f000 fbf4 	bl	801b3bc <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 801abd4:	f107 0308 	add.w	r3, r7, #8
 801abd8:	2201      	movs	r2, #1
 801abda:	69b9      	ldr	r1, [r7, #24]
 801abdc:	6878      	ldr	r0, [r7, #4]
 801abde:	f001 f879 	bl	801bcd4 <dhcp_create_msg>
 801abe2:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 801abe4:	693b      	ldr	r3, [r7, #16]
 801abe6:	2b00      	cmp	r3, #0
 801abe8:	d04b      	beq.n	801ac82 <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801abea:	693b      	ldr	r3, [r7, #16]
 801abec:	685b      	ldr	r3, [r3, #4]
 801abee:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801abf0:	8938      	ldrh	r0, [r7, #8]
 801abf2:	68fb      	ldr	r3, [r7, #12]
 801abf4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801abf8:	2302      	movs	r3, #2
 801abfa:	2239      	movs	r2, #57	; 0x39
 801abfc:	f000 fbf8 	bl	801b3f0 <dhcp_option>
 801ac00:	4603      	mov	r3, r0
 801ac02:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801ac04:	8938      	ldrh	r0, [r7, #8]
 801ac06:	68fb      	ldr	r3, [r7, #12]
 801ac08:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801ac0c:	687b      	ldr	r3, [r7, #4]
 801ac0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801ac10:	461a      	mov	r2, r3
 801ac12:	f000 fc47 	bl	801b4a4 <dhcp_option_short>
 801ac16:	4603      	mov	r3, r0
 801ac18:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801ac1a:	8938      	ldrh	r0, [r7, #8]
 801ac1c:	68fb      	ldr	r3, [r7, #12]
 801ac1e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801ac22:	2303      	movs	r3, #3
 801ac24:	2237      	movs	r2, #55	; 0x37
 801ac26:	f000 fbe3 	bl	801b3f0 <dhcp_option>
 801ac2a:	4603      	mov	r3, r0
 801ac2c:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801ac2e:	2300      	movs	r3, #0
 801ac30:	77fb      	strb	r3, [r7, #31]
 801ac32:	e00e      	b.n	801ac52 <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801ac34:	8938      	ldrh	r0, [r7, #8]
 801ac36:	68fb      	ldr	r3, [r7, #12]
 801ac38:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801ac3c:	7ffb      	ldrb	r3, [r7, #31]
 801ac3e:	4a29      	ldr	r2, [pc, #164]	; (801ace4 <dhcp_discover+0x130>)
 801ac40:	5cd3      	ldrb	r3, [r2, r3]
 801ac42:	461a      	mov	r2, r3
 801ac44:	f000 fc08 	bl	801b458 <dhcp_option_byte>
 801ac48:	4603      	mov	r3, r0
 801ac4a:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801ac4c:	7ffb      	ldrb	r3, [r7, #31]
 801ac4e:	3301      	adds	r3, #1
 801ac50:	77fb      	strb	r3, [r7, #31]
 801ac52:	7ffb      	ldrb	r3, [r7, #31]
 801ac54:	2b02      	cmp	r3, #2
 801ac56:	d9ed      	bls.n	801ac34 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801ac58:	8938      	ldrh	r0, [r7, #8]
 801ac5a:	68fb      	ldr	r3, [r7, #12]
 801ac5c:	33f0      	adds	r3, #240	; 0xf0
 801ac5e:	693a      	ldr	r2, [r7, #16]
 801ac60:	4619      	mov	r1, r3
 801ac62:	f001 f90d 	bl	801be80 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801ac66:	4b20      	ldr	r3, [pc, #128]	; (801ace8 <dhcp_discover+0x134>)
 801ac68:	6818      	ldr	r0, [r3, #0]
 801ac6a:	4b20      	ldr	r3, [pc, #128]	; (801acec <dhcp_discover+0x138>)
 801ac6c:	9301      	str	r3, [sp, #4]
 801ac6e:	687b      	ldr	r3, [r7, #4]
 801ac70:	9300      	str	r3, [sp, #0]
 801ac72:	2343      	movs	r3, #67	; 0x43
 801ac74:	4a1e      	ldr	r2, [pc, #120]	; (801acf0 <dhcp_discover+0x13c>)
 801ac76:	6939      	ldr	r1, [r7, #16]
 801ac78:	f7ff f830 	bl	8019cdc <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 801ac7c:	6938      	ldr	r0, [r7, #16]
 801ac7e:	f7f8 f8bd 	bl	8012dfc <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 801ac82:	69bb      	ldr	r3, [r7, #24]
 801ac84:	799b      	ldrb	r3, [r3, #6]
 801ac86:	2bff      	cmp	r3, #255	; 0xff
 801ac88:	d005      	beq.n	801ac96 <dhcp_discover+0xe2>
    dhcp->tries++;
 801ac8a:	69bb      	ldr	r3, [r7, #24]
 801ac8c:	799b      	ldrb	r3, [r3, #6]
 801ac8e:	3301      	adds	r3, #1
 801ac90:	b2da      	uxtb	r2, r3
 801ac92:	69bb      	ldr	r3, [r7, #24]
 801ac94:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 801ac96:	69bb      	ldr	r3, [r7, #24]
 801ac98:	799b      	ldrb	r3, [r3, #6]
 801ac9a:	2b05      	cmp	r3, #5
 801ac9c:	d80d      	bhi.n	801acba <dhcp_discover+0x106>
 801ac9e:	69bb      	ldr	r3, [r7, #24]
 801aca0:	799b      	ldrb	r3, [r3, #6]
 801aca2:	461a      	mov	r2, r3
 801aca4:	2301      	movs	r3, #1
 801aca6:	4093      	lsls	r3, r2
 801aca8:	b29b      	uxth	r3, r3
 801acaa:	461a      	mov	r2, r3
 801acac:	0152      	lsls	r2, r2, #5
 801acae:	1ad2      	subs	r2, r2, r3
 801acb0:	0092      	lsls	r2, r2, #2
 801acb2:	4413      	add	r3, r2
 801acb4:	00db      	lsls	r3, r3, #3
 801acb6:	b29b      	uxth	r3, r3
 801acb8:	e001      	b.n	801acbe <dhcp_discover+0x10a>
 801acba:	f64e 2360 	movw	r3, #60000	; 0xea60
 801acbe:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801acc0:	897b      	ldrh	r3, [r7, #10]
 801acc2:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801acc6:	4a0b      	ldr	r2, [pc, #44]	; (801acf4 <dhcp_discover+0x140>)
 801acc8:	fb82 1203 	smull	r1, r2, r2, r3
 801accc:	1152      	asrs	r2, r2, #5
 801acce:	17db      	asrs	r3, r3, #31
 801acd0:	1ad3      	subs	r3, r2, r3
 801acd2:	b29a      	uxth	r2, r3
 801acd4:	69bb      	ldr	r3, [r7, #24]
 801acd6:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801acd8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801acdc:	4618      	mov	r0, r3
 801acde:	3720      	adds	r7, #32
 801ace0:	46bd      	mov	sp, r7
 801ace2:	bd80      	pop	{r7, pc}
 801ace4:	24000300 	.word	0x24000300
 801ace8:	24007e60 	.word	0x24007e60
 801acec:	08027084 	.word	0x08027084
 801acf0:	08027088 	.word	0x08027088
 801acf4:	10624dd3 	.word	0x10624dd3

0801acf8 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 801acf8:	b580      	push	{r7, lr}
 801acfa:	b088      	sub	sp, #32
 801acfc:	af00      	add	r7, sp, #0
 801acfe:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 801ad00:	687b      	ldr	r3, [r7, #4]
 801ad02:	2b00      	cmp	r3, #0
 801ad04:	d107      	bne.n	801ad16 <dhcp_bind+0x1e>
 801ad06:	4b64      	ldr	r3, [pc, #400]	; (801ae98 <dhcp_bind+0x1a0>)
 801ad08:	f240 4215 	movw	r2, #1045	; 0x415
 801ad0c:	4963      	ldr	r1, [pc, #396]	; (801ae9c <dhcp_bind+0x1a4>)
 801ad0e:	4864      	ldr	r0, [pc, #400]	; (801aea0 <dhcp_bind+0x1a8>)
 801ad10:	f005 fb9e 	bl	8020450 <iprintf>
 801ad14:	e0bc      	b.n	801ae90 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 801ad16:	687b      	ldr	r3, [r7, #4]
 801ad18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ad1a:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 801ad1c:	69bb      	ldr	r3, [r7, #24]
 801ad1e:	2b00      	cmp	r3, #0
 801ad20:	d107      	bne.n	801ad32 <dhcp_bind+0x3a>
 801ad22:	4b5d      	ldr	r3, [pc, #372]	; (801ae98 <dhcp_bind+0x1a0>)
 801ad24:	f240 4217 	movw	r2, #1047	; 0x417
 801ad28:	495e      	ldr	r1, [pc, #376]	; (801aea4 <dhcp_bind+0x1ac>)
 801ad2a:	485d      	ldr	r0, [pc, #372]	; (801aea0 <dhcp_bind+0x1a8>)
 801ad2c:	f005 fb90 	bl	8020450 <iprintf>
 801ad30:	e0ae      	b.n	801ae90 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 801ad32:	69bb      	ldr	r3, [r7, #24]
 801ad34:	2200      	movs	r2, #0
 801ad36:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 801ad38:	69bb      	ldr	r3, [r7, #24]
 801ad3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ad3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ad40:	d019      	beq.n	801ad76 <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801ad42:	69bb      	ldr	r3, [r7, #24]
 801ad44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ad46:	331e      	adds	r3, #30
 801ad48:	4a57      	ldr	r2, [pc, #348]	; (801aea8 <dhcp_bind+0x1b0>)
 801ad4a:	fba2 2303 	umull	r2, r3, r2, r3
 801ad4e:	095b      	lsrs	r3, r3, #5
 801ad50:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 801ad52:	69fb      	ldr	r3, [r7, #28]
 801ad54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801ad58:	d302      	bcc.n	801ad60 <dhcp_bind+0x68>
      timeout = 0xffff;
 801ad5a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801ad5e:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 801ad60:	69fb      	ldr	r3, [r7, #28]
 801ad62:	b29a      	uxth	r2, r3
 801ad64:	69bb      	ldr	r3, [r7, #24]
 801ad66:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 801ad68:	69bb      	ldr	r3, [r7, #24]
 801ad6a:	8a9b      	ldrh	r3, [r3, #20]
 801ad6c:	2b00      	cmp	r3, #0
 801ad6e:	d102      	bne.n	801ad76 <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 801ad70:	69bb      	ldr	r3, [r7, #24]
 801ad72:	2201      	movs	r2, #1
 801ad74:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 801ad76:	69bb      	ldr	r3, [r7, #24]
 801ad78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ad7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ad7e:	d01d      	beq.n	801adbc <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801ad80:	69bb      	ldr	r3, [r7, #24]
 801ad82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ad84:	331e      	adds	r3, #30
 801ad86:	4a48      	ldr	r2, [pc, #288]	; (801aea8 <dhcp_bind+0x1b0>)
 801ad88:	fba2 2303 	umull	r2, r3, r2, r3
 801ad8c:	095b      	lsrs	r3, r3, #5
 801ad8e:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 801ad90:	69fb      	ldr	r3, [r7, #28]
 801ad92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801ad96:	d302      	bcc.n	801ad9e <dhcp_bind+0xa6>
      timeout = 0xffff;
 801ad98:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801ad9c:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 801ad9e:	69fb      	ldr	r3, [r7, #28]
 801ada0:	b29a      	uxth	r2, r3
 801ada2:	69bb      	ldr	r3, [r7, #24]
 801ada4:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 801ada6:	69bb      	ldr	r3, [r7, #24]
 801ada8:	895b      	ldrh	r3, [r3, #10]
 801adaa:	2b00      	cmp	r3, #0
 801adac:	d102      	bne.n	801adb4 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 801adae:	69bb      	ldr	r3, [r7, #24]
 801adb0:	2201      	movs	r2, #1
 801adb2:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 801adb4:	69bb      	ldr	r3, [r7, #24]
 801adb6:	895a      	ldrh	r2, [r3, #10]
 801adb8:	69bb      	ldr	r3, [r7, #24]
 801adba:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 801adbc:	69bb      	ldr	r3, [r7, #24]
 801adbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801adc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 801adc4:	d01d      	beq.n	801ae02 <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801adc6:	69bb      	ldr	r3, [r7, #24]
 801adc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801adca:	331e      	adds	r3, #30
 801adcc:	4a36      	ldr	r2, [pc, #216]	; (801aea8 <dhcp_bind+0x1b0>)
 801adce:	fba2 2303 	umull	r2, r3, r2, r3
 801add2:	095b      	lsrs	r3, r3, #5
 801add4:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 801add6:	69fb      	ldr	r3, [r7, #28]
 801add8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801addc:	d302      	bcc.n	801ade4 <dhcp_bind+0xec>
      timeout = 0xffff;
 801adde:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801ade2:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 801ade4:	69fb      	ldr	r3, [r7, #28]
 801ade6:	b29a      	uxth	r2, r3
 801ade8:	69bb      	ldr	r3, [r7, #24]
 801adea:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 801adec:	69bb      	ldr	r3, [r7, #24]
 801adee:	899b      	ldrh	r3, [r3, #12]
 801adf0:	2b00      	cmp	r3, #0
 801adf2:	d102      	bne.n	801adfa <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 801adf4:	69bb      	ldr	r3, [r7, #24]
 801adf6:	2201      	movs	r2, #1
 801adf8:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 801adfa:	69bb      	ldr	r3, [r7, #24]
 801adfc:	899a      	ldrh	r2, [r3, #12]
 801adfe:	69bb      	ldr	r3, [r7, #24]
 801ae00:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 801ae02:	69bb      	ldr	r3, [r7, #24]
 801ae04:	895a      	ldrh	r2, [r3, #10]
 801ae06:	69bb      	ldr	r3, [r7, #24]
 801ae08:	899b      	ldrh	r3, [r3, #12]
 801ae0a:	429a      	cmp	r2, r3
 801ae0c:	d306      	bcc.n	801ae1c <dhcp_bind+0x124>
 801ae0e:	69bb      	ldr	r3, [r7, #24]
 801ae10:	899b      	ldrh	r3, [r3, #12]
 801ae12:	2b00      	cmp	r3, #0
 801ae14:	d002      	beq.n	801ae1c <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 801ae16:	69bb      	ldr	r3, [r7, #24]
 801ae18:	2200      	movs	r2, #0
 801ae1a:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 801ae1c:	69bb      	ldr	r3, [r7, #24]
 801ae1e:	79db      	ldrb	r3, [r3, #7]
 801ae20:	2b00      	cmp	r3, #0
 801ae22:	d003      	beq.n	801ae2c <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 801ae24:	69bb      	ldr	r3, [r7, #24]
 801ae26:	6a1b      	ldr	r3, [r3, #32]
 801ae28:	613b      	str	r3, [r7, #16]
 801ae2a:	e014      	b.n	801ae56 <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 801ae2c:	69bb      	ldr	r3, [r7, #24]
 801ae2e:	331c      	adds	r3, #28
 801ae30:	781b      	ldrb	r3, [r3, #0]
 801ae32:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 801ae34:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801ae38:	2b00      	cmp	r3, #0
 801ae3a:	db02      	blt.n	801ae42 <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 801ae3c:	23ff      	movs	r3, #255	; 0xff
 801ae3e:	613b      	str	r3, [r7, #16]
 801ae40:	e009      	b.n	801ae56 <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 801ae42:	7dfb      	ldrb	r3, [r7, #23]
 801ae44:	2bbf      	cmp	r3, #191	; 0xbf
 801ae46:	d903      	bls.n	801ae50 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 801ae48:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 801ae4c:	613b      	str	r3, [r7, #16]
 801ae4e:	e002      	b.n	801ae56 <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 801ae50:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801ae54:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 801ae56:	69bb      	ldr	r3, [r7, #24]
 801ae58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ae5a:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 801ae5c:	68fb      	ldr	r3, [r7, #12]
 801ae5e:	2b00      	cmp	r3, #0
 801ae60:	d108      	bne.n	801ae74 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 801ae62:	69bb      	ldr	r3, [r7, #24]
 801ae64:	69da      	ldr	r2, [r3, #28]
 801ae66:	693b      	ldr	r3, [r7, #16]
 801ae68:	4013      	ands	r3, r2
 801ae6a:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 801ae6c:	68fb      	ldr	r3, [r7, #12]
 801ae6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801ae72:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 801ae74:	210a      	movs	r1, #10
 801ae76:	69b8      	ldr	r0, [r7, #24]
 801ae78:	f000 faa0 	bl	801b3bc <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 801ae7c:	69bb      	ldr	r3, [r7, #24]
 801ae7e:	f103 011c 	add.w	r1, r3, #28
 801ae82:	f107 030c 	add.w	r3, r7, #12
 801ae86:	f107 0210 	add.w	r2, r7, #16
 801ae8a:	6878      	ldr	r0, [r7, #4]
 801ae8c:	f7f7 fa76 	bl	801237c <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 801ae90:	3720      	adds	r7, #32
 801ae92:	46bd      	mov	sp, r7
 801ae94:	bd80      	pop	{r7, pc}
 801ae96:	bf00      	nop
 801ae98:	08026474 	.word	0x08026474
 801ae9c:	080265d4 	.word	0x080265d4
 801aea0:	080264d4 	.word	0x080264d4
 801aea4:	080265f0 	.word	0x080265f0
 801aea8:	88888889 	.word	0x88888889

0801aeac <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 801aeac:	b580      	push	{r7, lr}
 801aeae:	b08a      	sub	sp, #40	; 0x28
 801aeb0:	af02      	add	r7, sp, #8
 801aeb2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801aeb4:	687b      	ldr	r3, [r7, #4]
 801aeb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801aeb8:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 801aeba:	2105      	movs	r1, #5
 801aebc:	69b8      	ldr	r0, [r7, #24]
 801aebe:	f000 fa7d 	bl	801b3bc <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801aec2:	f107 030c 	add.w	r3, r7, #12
 801aec6:	2203      	movs	r2, #3
 801aec8:	69b9      	ldr	r1, [r7, #24]
 801aeca:	6878      	ldr	r0, [r7, #4]
 801aecc:	f000 ff02 	bl	801bcd4 <dhcp_create_msg>
 801aed0:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801aed2:	697b      	ldr	r3, [r7, #20]
 801aed4:	2b00      	cmp	r3, #0
 801aed6:	d04e      	beq.n	801af76 <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801aed8:	697b      	ldr	r3, [r7, #20]
 801aeda:	685b      	ldr	r3, [r3, #4]
 801aedc:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801aede:	89b8      	ldrh	r0, [r7, #12]
 801aee0:	693b      	ldr	r3, [r7, #16]
 801aee2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801aee6:	2302      	movs	r3, #2
 801aee8:	2239      	movs	r2, #57	; 0x39
 801aeea:	f000 fa81 	bl	801b3f0 <dhcp_option>
 801aeee:	4603      	mov	r3, r0
 801aef0:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801aef2:	89b8      	ldrh	r0, [r7, #12]
 801aef4:	693b      	ldr	r3, [r7, #16]
 801aef6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801aefa:	687b      	ldr	r3, [r7, #4]
 801aefc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801aefe:	461a      	mov	r2, r3
 801af00:	f000 fad0 	bl	801b4a4 <dhcp_option_short>
 801af04:	4603      	mov	r3, r0
 801af06:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801af08:	89b8      	ldrh	r0, [r7, #12]
 801af0a:	693b      	ldr	r3, [r7, #16]
 801af0c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801af10:	2303      	movs	r3, #3
 801af12:	2237      	movs	r2, #55	; 0x37
 801af14:	f000 fa6c 	bl	801b3f0 <dhcp_option>
 801af18:	4603      	mov	r3, r0
 801af1a:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801af1c:	2300      	movs	r3, #0
 801af1e:	77bb      	strb	r3, [r7, #30]
 801af20:	e00e      	b.n	801af40 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801af22:	89b8      	ldrh	r0, [r7, #12]
 801af24:	693b      	ldr	r3, [r7, #16]
 801af26:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801af2a:	7fbb      	ldrb	r3, [r7, #30]
 801af2c:	4a2a      	ldr	r2, [pc, #168]	; (801afd8 <dhcp_renew+0x12c>)
 801af2e:	5cd3      	ldrb	r3, [r2, r3]
 801af30:	461a      	mov	r2, r3
 801af32:	f000 fa91 	bl	801b458 <dhcp_option_byte>
 801af36:	4603      	mov	r3, r0
 801af38:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801af3a:	7fbb      	ldrb	r3, [r7, #30]
 801af3c:	3301      	adds	r3, #1
 801af3e:	77bb      	strb	r3, [r7, #30]
 801af40:	7fbb      	ldrb	r3, [r7, #30]
 801af42:	2b02      	cmp	r3, #2
 801af44:	d9ed      	bls.n	801af22 <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801af46:	89b8      	ldrh	r0, [r7, #12]
 801af48:	693b      	ldr	r3, [r7, #16]
 801af4a:	33f0      	adds	r3, #240	; 0xf0
 801af4c:	697a      	ldr	r2, [r7, #20]
 801af4e:	4619      	mov	r1, r3
 801af50:	f000 ff96 	bl	801be80 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801af54:	4b21      	ldr	r3, [pc, #132]	; (801afdc <dhcp_renew+0x130>)
 801af56:	6818      	ldr	r0, [r3, #0]
 801af58:	69bb      	ldr	r3, [r7, #24]
 801af5a:	f103 0218 	add.w	r2, r3, #24
 801af5e:	687b      	ldr	r3, [r7, #4]
 801af60:	9300      	str	r3, [sp, #0]
 801af62:	2343      	movs	r3, #67	; 0x43
 801af64:	6979      	ldr	r1, [r7, #20]
 801af66:	f7fe fe45 	bl	8019bf4 <udp_sendto_if>
 801af6a:	4603      	mov	r3, r0
 801af6c:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801af6e:	6978      	ldr	r0, [r7, #20]
 801af70:	f7f7 ff44 	bl	8012dfc <pbuf_free>
 801af74:	e001      	b.n	801af7a <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801af76:	23ff      	movs	r3, #255	; 0xff
 801af78:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801af7a:	69bb      	ldr	r3, [r7, #24]
 801af7c:	799b      	ldrb	r3, [r3, #6]
 801af7e:	2bff      	cmp	r3, #255	; 0xff
 801af80:	d005      	beq.n	801af8e <dhcp_renew+0xe2>
    dhcp->tries++;
 801af82:	69bb      	ldr	r3, [r7, #24]
 801af84:	799b      	ldrb	r3, [r3, #6]
 801af86:	3301      	adds	r3, #1
 801af88:	b2da      	uxtb	r2, r3
 801af8a:	69bb      	ldr	r3, [r7, #24]
 801af8c:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 801af8e:	69bb      	ldr	r3, [r7, #24]
 801af90:	799b      	ldrb	r3, [r3, #6]
 801af92:	2b09      	cmp	r3, #9
 801af94:	d80a      	bhi.n	801afac <dhcp_renew+0x100>
 801af96:	69bb      	ldr	r3, [r7, #24]
 801af98:	799b      	ldrb	r3, [r3, #6]
 801af9a:	b29b      	uxth	r3, r3
 801af9c:	461a      	mov	r2, r3
 801af9e:	0152      	lsls	r2, r2, #5
 801afa0:	1ad2      	subs	r2, r2, r3
 801afa2:	0092      	lsls	r2, r2, #2
 801afa4:	4413      	add	r3, r2
 801afa6:	011b      	lsls	r3, r3, #4
 801afa8:	b29b      	uxth	r3, r3
 801afaa:	e001      	b.n	801afb0 <dhcp_renew+0x104>
 801afac:	f644 6320 	movw	r3, #20000	; 0x4e20
 801afb0:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801afb2:	89fb      	ldrh	r3, [r7, #14]
 801afb4:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801afb8:	4a09      	ldr	r2, [pc, #36]	; (801afe0 <dhcp_renew+0x134>)
 801afba:	fb82 1203 	smull	r1, r2, r2, r3
 801afbe:	1152      	asrs	r2, r2, #5
 801afc0:	17db      	asrs	r3, r3, #31
 801afc2:	1ad3      	subs	r3, r2, r3
 801afc4:	b29a      	uxth	r2, r3
 801afc6:	69bb      	ldr	r3, [r7, #24]
 801afc8:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801afca:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801afce:	4618      	mov	r0, r3
 801afd0:	3720      	adds	r7, #32
 801afd2:	46bd      	mov	sp, r7
 801afd4:	bd80      	pop	{r7, pc}
 801afd6:	bf00      	nop
 801afd8:	24000300 	.word	0x24000300
 801afdc:	24007e60 	.word	0x24007e60
 801afe0:	10624dd3 	.word	0x10624dd3

0801afe4 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 801afe4:	b580      	push	{r7, lr}
 801afe6:	b08a      	sub	sp, #40	; 0x28
 801afe8:	af02      	add	r7, sp, #8
 801afea:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801afec:	687b      	ldr	r3, [r7, #4]
 801afee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801aff0:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 801aff2:	2104      	movs	r1, #4
 801aff4:	69b8      	ldr	r0, [r7, #24]
 801aff6:	f000 f9e1 	bl	801b3bc <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801affa:	f107 030c 	add.w	r3, r7, #12
 801affe:	2203      	movs	r2, #3
 801b000:	69b9      	ldr	r1, [r7, #24]
 801b002:	6878      	ldr	r0, [r7, #4]
 801b004:	f000 fe66 	bl	801bcd4 <dhcp_create_msg>
 801b008:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801b00a:	697b      	ldr	r3, [r7, #20]
 801b00c:	2b00      	cmp	r3, #0
 801b00e:	d04c      	beq.n	801b0aa <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801b010:	697b      	ldr	r3, [r7, #20]
 801b012:	685b      	ldr	r3, [r3, #4]
 801b014:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801b016:	89b8      	ldrh	r0, [r7, #12]
 801b018:	693b      	ldr	r3, [r7, #16]
 801b01a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801b01e:	2302      	movs	r3, #2
 801b020:	2239      	movs	r2, #57	; 0x39
 801b022:	f000 f9e5 	bl	801b3f0 <dhcp_option>
 801b026:	4603      	mov	r3, r0
 801b028:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801b02a:	89b8      	ldrh	r0, [r7, #12]
 801b02c:	693b      	ldr	r3, [r7, #16]
 801b02e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801b032:	687b      	ldr	r3, [r7, #4]
 801b034:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801b036:	461a      	mov	r2, r3
 801b038:	f000 fa34 	bl	801b4a4 <dhcp_option_short>
 801b03c:	4603      	mov	r3, r0
 801b03e:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801b040:	89b8      	ldrh	r0, [r7, #12]
 801b042:	693b      	ldr	r3, [r7, #16]
 801b044:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801b048:	2303      	movs	r3, #3
 801b04a:	2237      	movs	r2, #55	; 0x37
 801b04c:	f000 f9d0 	bl	801b3f0 <dhcp_option>
 801b050:	4603      	mov	r3, r0
 801b052:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801b054:	2300      	movs	r3, #0
 801b056:	77bb      	strb	r3, [r7, #30]
 801b058:	e00e      	b.n	801b078 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801b05a:	89b8      	ldrh	r0, [r7, #12]
 801b05c:	693b      	ldr	r3, [r7, #16]
 801b05e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801b062:	7fbb      	ldrb	r3, [r7, #30]
 801b064:	4a29      	ldr	r2, [pc, #164]	; (801b10c <dhcp_rebind+0x128>)
 801b066:	5cd3      	ldrb	r3, [r2, r3]
 801b068:	461a      	mov	r2, r3
 801b06a:	f000 f9f5 	bl	801b458 <dhcp_option_byte>
 801b06e:	4603      	mov	r3, r0
 801b070:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801b072:	7fbb      	ldrb	r3, [r7, #30]
 801b074:	3301      	adds	r3, #1
 801b076:	77bb      	strb	r3, [r7, #30]
 801b078:	7fbb      	ldrb	r3, [r7, #30]
 801b07a:	2b02      	cmp	r3, #2
 801b07c:	d9ed      	bls.n	801b05a <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801b07e:	89b8      	ldrh	r0, [r7, #12]
 801b080:	693b      	ldr	r3, [r7, #16]
 801b082:	33f0      	adds	r3, #240	; 0xf0
 801b084:	697a      	ldr	r2, [r7, #20]
 801b086:	4619      	mov	r1, r3
 801b088:	f000 fefa 	bl	801be80 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801b08c:	4b20      	ldr	r3, [pc, #128]	; (801b110 <dhcp_rebind+0x12c>)
 801b08e:	6818      	ldr	r0, [r3, #0]
 801b090:	687b      	ldr	r3, [r7, #4]
 801b092:	9300      	str	r3, [sp, #0]
 801b094:	2343      	movs	r3, #67	; 0x43
 801b096:	4a1f      	ldr	r2, [pc, #124]	; (801b114 <dhcp_rebind+0x130>)
 801b098:	6979      	ldr	r1, [r7, #20]
 801b09a:	f7fe fdab 	bl	8019bf4 <udp_sendto_if>
 801b09e:	4603      	mov	r3, r0
 801b0a0:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801b0a2:	6978      	ldr	r0, [r7, #20]
 801b0a4:	f7f7 feaa 	bl	8012dfc <pbuf_free>
 801b0a8:	e001      	b.n	801b0ae <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801b0aa:	23ff      	movs	r3, #255	; 0xff
 801b0ac:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801b0ae:	69bb      	ldr	r3, [r7, #24]
 801b0b0:	799b      	ldrb	r3, [r3, #6]
 801b0b2:	2bff      	cmp	r3, #255	; 0xff
 801b0b4:	d005      	beq.n	801b0c2 <dhcp_rebind+0xde>
    dhcp->tries++;
 801b0b6:	69bb      	ldr	r3, [r7, #24]
 801b0b8:	799b      	ldrb	r3, [r3, #6]
 801b0ba:	3301      	adds	r3, #1
 801b0bc:	b2da      	uxtb	r2, r3
 801b0be:	69bb      	ldr	r3, [r7, #24]
 801b0c0:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 801b0c2:	69bb      	ldr	r3, [r7, #24]
 801b0c4:	799b      	ldrb	r3, [r3, #6]
 801b0c6:	2b09      	cmp	r3, #9
 801b0c8:	d80a      	bhi.n	801b0e0 <dhcp_rebind+0xfc>
 801b0ca:	69bb      	ldr	r3, [r7, #24]
 801b0cc:	799b      	ldrb	r3, [r3, #6]
 801b0ce:	b29b      	uxth	r3, r3
 801b0d0:	461a      	mov	r2, r3
 801b0d2:	0152      	lsls	r2, r2, #5
 801b0d4:	1ad2      	subs	r2, r2, r3
 801b0d6:	0092      	lsls	r2, r2, #2
 801b0d8:	4413      	add	r3, r2
 801b0da:	00db      	lsls	r3, r3, #3
 801b0dc:	b29b      	uxth	r3, r3
 801b0de:	e001      	b.n	801b0e4 <dhcp_rebind+0x100>
 801b0e0:	f242 7310 	movw	r3, #10000	; 0x2710
 801b0e4:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801b0e6:	89fb      	ldrh	r3, [r7, #14]
 801b0e8:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801b0ec:	4a0a      	ldr	r2, [pc, #40]	; (801b118 <dhcp_rebind+0x134>)
 801b0ee:	fb82 1203 	smull	r1, r2, r2, r3
 801b0f2:	1152      	asrs	r2, r2, #5
 801b0f4:	17db      	asrs	r3, r3, #31
 801b0f6:	1ad3      	subs	r3, r2, r3
 801b0f8:	b29a      	uxth	r2, r3
 801b0fa:	69bb      	ldr	r3, [r7, #24]
 801b0fc:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801b0fe:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801b102:	4618      	mov	r0, r3
 801b104:	3720      	adds	r7, #32
 801b106:	46bd      	mov	sp, r7
 801b108:	bd80      	pop	{r7, pc}
 801b10a:	bf00      	nop
 801b10c:	24000300 	.word	0x24000300
 801b110:	24007e60 	.word	0x24007e60
 801b114:	08027088 	.word	0x08027088
 801b118:	10624dd3 	.word	0x10624dd3

0801b11c <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 801b11c:	b5b0      	push	{r4, r5, r7, lr}
 801b11e:	b08a      	sub	sp, #40	; 0x28
 801b120:	af02      	add	r7, sp, #8
 801b122:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801b124:	687b      	ldr	r3, [r7, #4]
 801b126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b128:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 801b12a:	2103      	movs	r1, #3
 801b12c:	69b8      	ldr	r0, [r7, #24]
 801b12e:	f000 f945 	bl	801b3bc <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801b132:	f107 030c 	add.w	r3, r7, #12
 801b136:	2203      	movs	r2, #3
 801b138:	69b9      	ldr	r1, [r7, #24]
 801b13a:	6878      	ldr	r0, [r7, #4]
 801b13c:	f000 fdca 	bl	801bcd4 <dhcp_create_msg>
 801b140:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801b142:	697b      	ldr	r3, [r7, #20]
 801b144:	2b00      	cmp	r3, #0
 801b146:	d066      	beq.n	801b216 <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801b148:	697b      	ldr	r3, [r7, #20]
 801b14a:	685b      	ldr	r3, [r3, #4]
 801b14c:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801b14e:	89b8      	ldrh	r0, [r7, #12]
 801b150:	693b      	ldr	r3, [r7, #16]
 801b152:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801b156:	2302      	movs	r3, #2
 801b158:	2239      	movs	r2, #57	; 0x39
 801b15a:	f000 f949 	bl	801b3f0 <dhcp_option>
 801b15e:	4603      	mov	r3, r0
 801b160:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 801b162:	89b8      	ldrh	r0, [r7, #12]
 801b164:	693b      	ldr	r3, [r7, #16]
 801b166:	33f0      	adds	r3, #240	; 0xf0
 801b168:	f44f 7210 	mov.w	r2, #576	; 0x240
 801b16c:	4619      	mov	r1, r3
 801b16e:	f000 f999 	bl	801b4a4 <dhcp_option_short>
 801b172:	4603      	mov	r3, r0
 801b174:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801b176:	89b8      	ldrh	r0, [r7, #12]
 801b178:	693b      	ldr	r3, [r7, #16]
 801b17a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801b17e:	2304      	movs	r3, #4
 801b180:	2232      	movs	r2, #50	; 0x32
 801b182:	f000 f935 	bl	801b3f0 <dhcp_option>
 801b186:	4603      	mov	r3, r0
 801b188:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801b18a:	89bc      	ldrh	r4, [r7, #12]
 801b18c:	693b      	ldr	r3, [r7, #16]
 801b18e:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801b192:	69bb      	ldr	r3, [r7, #24]
 801b194:	69db      	ldr	r3, [r3, #28]
 801b196:	4618      	mov	r0, r3
 801b198:	f7f6 f95d 	bl	8011456 <lwip_htonl>
 801b19c:	4603      	mov	r3, r0
 801b19e:	461a      	mov	r2, r3
 801b1a0:	4629      	mov	r1, r5
 801b1a2:	4620      	mov	r0, r4
 801b1a4:	f000 f9b0 	bl	801b508 <dhcp_option_long>
 801b1a8:	4603      	mov	r3, r0
 801b1aa:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801b1ac:	89b8      	ldrh	r0, [r7, #12]
 801b1ae:	693b      	ldr	r3, [r7, #16]
 801b1b0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801b1b4:	2303      	movs	r3, #3
 801b1b6:	2237      	movs	r2, #55	; 0x37
 801b1b8:	f000 f91a 	bl	801b3f0 <dhcp_option>
 801b1bc:	4603      	mov	r3, r0
 801b1be:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801b1c0:	2300      	movs	r3, #0
 801b1c2:	77bb      	strb	r3, [r7, #30]
 801b1c4:	e00e      	b.n	801b1e4 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801b1c6:	89b8      	ldrh	r0, [r7, #12]
 801b1c8:	693b      	ldr	r3, [r7, #16]
 801b1ca:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801b1ce:	7fbb      	ldrb	r3, [r7, #30]
 801b1d0:	4a29      	ldr	r2, [pc, #164]	; (801b278 <dhcp_reboot+0x15c>)
 801b1d2:	5cd3      	ldrb	r3, [r2, r3]
 801b1d4:	461a      	mov	r2, r3
 801b1d6:	f000 f93f 	bl	801b458 <dhcp_option_byte>
 801b1da:	4603      	mov	r3, r0
 801b1dc:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801b1de:	7fbb      	ldrb	r3, [r7, #30]
 801b1e0:	3301      	adds	r3, #1
 801b1e2:	77bb      	strb	r3, [r7, #30]
 801b1e4:	7fbb      	ldrb	r3, [r7, #30]
 801b1e6:	2b02      	cmp	r3, #2
 801b1e8:	d9ed      	bls.n	801b1c6 <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801b1ea:	89b8      	ldrh	r0, [r7, #12]
 801b1ec:	693b      	ldr	r3, [r7, #16]
 801b1ee:	33f0      	adds	r3, #240	; 0xf0
 801b1f0:	697a      	ldr	r2, [r7, #20]
 801b1f2:	4619      	mov	r1, r3
 801b1f4:	f000 fe44 	bl	801be80 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801b1f8:	4b20      	ldr	r3, [pc, #128]	; (801b27c <dhcp_reboot+0x160>)
 801b1fa:	6818      	ldr	r0, [r3, #0]
 801b1fc:	687b      	ldr	r3, [r7, #4]
 801b1fe:	9300      	str	r3, [sp, #0]
 801b200:	2343      	movs	r3, #67	; 0x43
 801b202:	4a1f      	ldr	r2, [pc, #124]	; (801b280 <dhcp_reboot+0x164>)
 801b204:	6979      	ldr	r1, [r7, #20]
 801b206:	f7fe fcf5 	bl	8019bf4 <udp_sendto_if>
 801b20a:	4603      	mov	r3, r0
 801b20c:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801b20e:	6978      	ldr	r0, [r7, #20]
 801b210:	f7f7 fdf4 	bl	8012dfc <pbuf_free>
 801b214:	e001      	b.n	801b21a <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801b216:	23ff      	movs	r3, #255	; 0xff
 801b218:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801b21a:	69bb      	ldr	r3, [r7, #24]
 801b21c:	799b      	ldrb	r3, [r3, #6]
 801b21e:	2bff      	cmp	r3, #255	; 0xff
 801b220:	d005      	beq.n	801b22e <dhcp_reboot+0x112>
    dhcp->tries++;
 801b222:	69bb      	ldr	r3, [r7, #24]
 801b224:	799b      	ldrb	r3, [r3, #6]
 801b226:	3301      	adds	r3, #1
 801b228:	b2da      	uxtb	r2, r3
 801b22a:	69bb      	ldr	r3, [r7, #24]
 801b22c:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 801b22e:	69bb      	ldr	r3, [r7, #24]
 801b230:	799b      	ldrb	r3, [r3, #6]
 801b232:	2b09      	cmp	r3, #9
 801b234:	d80a      	bhi.n	801b24c <dhcp_reboot+0x130>
 801b236:	69bb      	ldr	r3, [r7, #24]
 801b238:	799b      	ldrb	r3, [r3, #6]
 801b23a:	b29b      	uxth	r3, r3
 801b23c:	461a      	mov	r2, r3
 801b23e:	0152      	lsls	r2, r2, #5
 801b240:	1ad2      	subs	r2, r2, r3
 801b242:	0092      	lsls	r2, r2, #2
 801b244:	4413      	add	r3, r2
 801b246:	00db      	lsls	r3, r3, #3
 801b248:	b29b      	uxth	r3, r3
 801b24a:	e001      	b.n	801b250 <dhcp_reboot+0x134>
 801b24c:	f242 7310 	movw	r3, #10000	; 0x2710
 801b250:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801b252:	89fb      	ldrh	r3, [r7, #14]
 801b254:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801b258:	4a0a      	ldr	r2, [pc, #40]	; (801b284 <dhcp_reboot+0x168>)
 801b25a:	fb82 1203 	smull	r1, r2, r2, r3
 801b25e:	1152      	asrs	r2, r2, #5
 801b260:	17db      	asrs	r3, r3, #31
 801b262:	1ad3      	subs	r3, r2, r3
 801b264:	b29a      	uxth	r2, r3
 801b266:	69bb      	ldr	r3, [r7, #24]
 801b268:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801b26a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801b26e:	4618      	mov	r0, r3
 801b270:	3720      	adds	r7, #32
 801b272:	46bd      	mov	sp, r7
 801b274:	bdb0      	pop	{r4, r5, r7, pc}
 801b276:	bf00      	nop
 801b278:	24000300 	.word	0x24000300
 801b27c:	24007e60 	.word	0x24007e60
 801b280:	08027088 	.word	0x08027088
 801b284:	10624dd3 	.word	0x10624dd3

0801b288 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 801b288:	b5b0      	push	{r4, r5, r7, lr}
 801b28a:	b08a      	sub	sp, #40	; 0x28
 801b28c:	af02      	add	r7, sp, #8
 801b28e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801b290:	687b      	ldr	r3, [r7, #4]
 801b292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b294:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 801b296:	69fb      	ldr	r3, [r7, #28]
 801b298:	2b00      	cmp	r3, #0
 801b29a:	f000 8084 	beq.w	801b3a6 <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 801b29e:	69fb      	ldr	r3, [r7, #28]
 801b2a0:	795b      	ldrb	r3, [r3, #5]
 801b2a2:	2b00      	cmp	r3, #0
 801b2a4:	f000 8081 	beq.w	801b3aa <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 801b2a8:	69fb      	ldr	r3, [r7, #28]
 801b2aa:	699b      	ldr	r3, [r3, #24]
 801b2ac:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 801b2ae:	69fb      	ldr	r3, [r7, #28]
 801b2b0:	2200      	movs	r2, #0
 801b2b2:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 801b2b4:	69fb      	ldr	r3, [r7, #28]
 801b2b6:	2200      	movs	r2, #0
 801b2b8:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 801b2ba:	69fb      	ldr	r3, [r7, #28]
 801b2bc:	2200      	movs	r2, #0
 801b2be:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 801b2c0:	69fb      	ldr	r3, [r7, #28]
 801b2c2:	2200      	movs	r2, #0
 801b2c4:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 801b2c6:	69fb      	ldr	r3, [r7, #28]
 801b2c8:	2200      	movs	r2, #0
 801b2ca:	631a      	str	r2, [r3, #48]	; 0x30
 801b2cc:	69fb      	ldr	r3, [r7, #28]
 801b2ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801b2d0:	69fb      	ldr	r3, [r7, #28]
 801b2d2:	62da      	str	r2, [r3, #44]	; 0x2c
 801b2d4:	69fb      	ldr	r3, [r7, #28]
 801b2d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b2d8:	69fb      	ldr	r3, [r7, #28]
 801b2da:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 801b2dc:	69fb      	ldr	r3, [r7, #28]
 801b2de:	2200      	movs	r2, #0
 801b2e0:	829a      	strh	r2, [r3, #20]
 801b2e2:	69fb      	ldr	r3, [r7, #28]
 801b2e4:	8a9a      	ldrh	r2, [r3, #20]
 801b2e6:	69fb      	ldr	r3, [r7, #28]
 801b2e8:	825a      	strh	r2, [r3, #18]
 801b2ea:	69fb      	ldr	r3, [r7, #28]
 801b2ec:	8a5a      	ldrh	r2, [r3, #18]
 801b2ee:	69fb      	ldr	r3, [r7, #28]
 801b2f0:	821a      	strh	r2, [r3, #16]
 801b2f2:	69fb      	ldr	r3, [r7, #28]
 801b2f4:	8a1a      	ldrh	r2, [r3, #16]
 801b2f6:	69fb      	ldr	r3, [r7, #28]
 801b2f8:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 801b2fa:	6878      	ldr	r0, [r7, #4]
 801b2fc:	f000 fdee 	bl	801bedc <dhcp_supplied_address>
 801b300:	4603      	mov	r3, r0
 801b302:	2b00      	cmp	r3, #0
 801b304:	d03b      	beq.n	801b37e <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 801b306:	f107 030e 	add.w	r3, r7, #14
 801b30a:	2207      	movs	r2, #7
 801b30c:	69f9      	ldr	r1, [r7, #28]
 801b30e:	6878      	ldr	r0, [r7, #4]
 801b310:	f000 fce0 	bl	801bcd4 <dhcp_create_msg>
 801b314:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 801b316:	69bb      	ldr	r3, [r7, #24]
 801b318:	2b00      	cmp	r3, #0
 801b31a:	d030      	beq.n	801b37e <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801b31c:	69bb      	ldr	r3, [r7, #24]
 801b31e:	685b      	ldr	r3, [r3, #4]
 801b320:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 801b322:	89f8      	ldrh	r0, [r7, #14]
 801b324:	697b      	ldr	r3, [r7, #20]
 801b326:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801b32a:	2304      	movs	r3, #4
 801b32c:	2236      	movs	r2, #54	; 0x36
 801b32e:	f000 f85f 	bl	801b3f0 <dhcp_option>
 801b332:	4603      	mov	r3, r0
 801b334:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 801b336:	89fc      	ldrh	r4, [r7, #14]
 801b338:	697b      	ldr	r3, [r7, #20]
 801b33a:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801b33e:	693b      	ldr	r3, [r7, #16]
 801b340:	4618      	mov	r0, r3
 801b342:	f7f6 f888 	bl	8011456 <lwip_htonl>
 801b346:	4603      	mov	r3, r0
 801b348:	461a      	mov	r2, r3
 801b34a:	4629      	mov	r1, r5
 801b34c:	4620      	mov	r0, r4
 801b34e:	f000 f8db 	bl	801b508 <dhcp_option_long>
 801b352:	4603      	mov	r3, r0
 801b354:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801b356:	89f8      	ldrh	r0, [r7, #14]
 801b358:	697b      	ldr	r3, [r7, #20]
 801b35a:	33f0      	adds	r3, #240	; 0xf0
 801b35c:	69ba      	ldr	r2, [r7, #24]
 801b35e:	4619      	mov	r1, r3
 801b360:	f000 fd8e 	bl	801be80 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801b364:	4b13      	ldr	r3, [pc, #76]	; (801b3b4 <dhcp_release_and_stop+0x12c>)
 801b366:	6818      	ldr	r0, [r3, #0]
 801b368:	f107 0210 	add.w	r2, r7, #16
 801b36c:	687b      	ldr	r3, [r7, #4]
 801b36e:	9300      	str	r3, [sp, #0]
 801b370:	2343      	movs	r3, #67	; 0x43
 801b372:	69b9      	ldr	r1, [r7, #24]
 801b374:	f7fe fc3e 	bl	8019bf4 <udp_sendto_if>
      pbuf_free(p_out);
 801b378:	69b8      	ldr	r0, [r7, #24]
 801b37a:	f7f7 fd3f 	bl	8012dfc <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 801b37e:	4b0e      	ldr	r3, [pc, #56]	; (801b3b8 <dhcp_release_and_stop+0x130>)
 801b380:	4a0d      	ldr	r2, [pc, #52]	; (801b3b8 <dhcp_release_and_stop+0x130>)
 801b382:	490d      	ldr	r1, [pc, #52]	; (801b3b8 <dhcp_release_and_stop+0x130>)
 801b384:	6878      	ldr	r0, [r7, #4]
 801b386:	f7f6 fff9 	bl	801237c <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 801b38a:	2100      	movs	r1, #0
 801b38c:	69f8      	ldr	r0, [r7, #28]
 801b38e:	f000 f815 	bl	801b3bc <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 801b392:	69fb      	ldr	r3, [r7, #28]
 801b394:	791b      	ldrb	r3, [r3, #4]
 801b396:	2b00      	cmp	r3, #0
 801b398:	d008      	beq.n	801b3ac <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 801b39a:	f7fe ff83 	bl	801a2a4 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 801b39e:	69fb      	ldr	r3, [r7, #28]
 801b3a0:	2200      	movs	r2, #0
 801b3a2:	711a      	strb	r2, [r3, #4]
 801b3a4:	e002      	b.n	801b3ac <dhcp_release_and_stop+0x124>
    return;
 801b3a6:	bf00      	nop
 801b3a8:	e000      	b.n	801b3ac <dhcp_release_and_stop+0x124>
    return;
 801b3aa:	bf00      	nop
  }
}
 801b3ac:	3720      	adds	r7, #32
 801b3ae:	46bd      	mov	sp, r7
 801b3b0:	bdb0      	pop	{r4, r5, r7, pc}
 801b3b2:	bf00      	nop
 801b3b4:	24007e60 	.word	0x24007e60
 801b3b8:	08027084 	.word	0x08027084

0801b3bc <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 801b3bc:	b480      	push	{r7}
 801b3be:	b083      	sub	sp, #12
 801b3c0:	af00      	add	r7, sp, #0
 801b3c2:	6078      	str	r0, [r7, #4]
 801b3c4:	460b      	mov	r3, r1
 801b3c6:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 801b3c8:	687b      	ldr	r3, [r7, #4]
 801b3ca:	795b      	ldrb	r3, [r3, #5]
 801b3cc:	78fa      	ldrb	r2, [r7, #3]
 801b3ce:	429a      	cmp	r2, r3
 801b3d0:	d008      	beq.n	801b3e4 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 801b3d2:	687b      	ldr	r3, [r7, #4]
 801b3d4:	78fa      	ldrb	r2, [r7, #3]
 801b3d6:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 801b3d8:	687b      	ldr	r3, [r7, #4]
 801b3da:	2200      	movs	r2, #0
 801b3dc:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 801b3de:	687b      	ldr	r3, [r7, #4]
 801b3e0:	2200      	movs	r2, #0
 801b3e2:	811a      	strh	r2, [r3, #8]
  }
}
 801b3e4:	bf00      	nop
 801b3e6:	370c      	adds	r7, #12
 801b3e8:	46bd      	mov	sp, r7
 801b3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b3ee:	4770      	bx	lr

0801b3f0 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 801b3f0:	b580      	push	{r7, lr}
 801b3f2:	b082      	sub	sp, #8
 801b3f4:	af00      	add	r7, sp, #0
 801b3f6:	6039      	str	r1, [r7, #0]
 801b3f8:	4611      	mov	r1, r2
 801b3fa:	461a      	mov	r2, r3
 801b3fc:	4603      	mov	r3, r0
 801b3fe:	80fb      	strh	r3, [r7, #6]
 801b400:	460b      	mov	r3, r1
 801b402:	717b      	strb	r3, [r7, #5]
 801b404:	4613      	mov	r3, r2
 801b406:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 801b408:	88fa      	ldrh	r2, [r7, #6]
 801b40a:	793b      	ldrb	r3, [r7, #4]
 801b40c:	4413      	add	r3, r2
 801b40e:	3302      	adds	r3, #2
 801b410:	2b44      	cmp	r3, #68	; 0x44
 801b412:	d906      	bls.n	801b422 <dhcp_option+0x32>
 801b414:	4b0d      	ldr	r3, [pc, #52]	; (801b44c <dhcp_option+0x5c>)
 801b416:	f240 529a 	movw	r2, #1434	; 0x59a
 801b41a:	490d      	ldr	r1, [pc, #52]	; (801b450 <dhcp_option+0x60>)
 801b41c:	480d      	ldr	r0, [pc, #52]	; (801b454 <dhcp_option+0x64>)
 801b41e:	f005 f817 	bl	8020450 <iprintf>
  options[options_out_len++] = option_type;
 801b422:	88fb      	ldrh	r3, [r7, #6]
 801b424:	1c5a      	adds	r2, r3, #1
 801b426:	80fa      	strh	r2, [r7, #6]
 801b428:	461a      	mov	r2, r3
 801b42a:	683b      	ldr	r3, [r7, #0]
 801b42c:	4413      	add	r3, r2
 801b42e:	797a      	ldrb	r2, [r7, #5]
 801b430:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 801b432:	88fb      	ldrh	r3, [r7, #6]
 801b434:	1c5a      	adds	r2, r3, #1
 801b436:	80fa      	strh	r2, [r7, #6]
 801b438:	461a      	mov	r2, r3
 801b43a:	683b      	ldr	r3, [r7, #0]
 801b43c:	4413      	add	r3, r2
 801b43e:	793a      	ldrb	r2, [r7, #4]
 801b440:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801b442:	88fb      	ldrh	r3, [r7, #6]
}
 801b444:	4618      	mov	r0, r3
 801b446:	3708      	adds	r7, #8
 801b448:	46bd      	mov	sp, r7
 801b44a:	bd80      	pop	{r7, pc}
 801b44c:	08026474 	.word	0x08026474
 801b450:	08026608 	.word	0x08026608
 801b454:	080264d4 	.word	0x080264d4

0801b458 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 801b458:	b580      	push	{r7, lr}
 801b45a:	b082      	sub	sp, #8
 801b45c:	af00      	add	r7, sp, #0
 801b45e:	4603      	mov	r3, r0
 801b460:	6039      	str	r1, [r7, #0]
 801b462:	80fb      	strh	r3, [r7, #6]
 801b464:	4613      	mov	r3, r2
 801b466:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 801b468:	88fb      	ldrh	r3, [r7, #6]
 801b46a:	2b43      	cmp	r3, #67	; 0x43
 801b46c:	d906      	bls.n	801b47c <dhcp_option_byte+0x24>
 801b46e:	4b0a      	ldr	r3, [pc, #40]	; (801b498 <dhcp_option_byte+0x40>)
 801b470:	f240 52a6 	movw	r2, #1446	; 0x5a6
 801b474:	4909      	ldr	r1, [pc, #36]	; (801b49c <dhcp_option_byte+0x44>)
 801b476:	480a      	ldr	r0, [pc, #40]	; (801b4a0 <dhcp_option_byte+0x48>)
 801b478:	f004 ffea 	bl	8020450 <iprintf>
  options[options_out_len++] = value;
 801b47c:	88fb      	ldrh	r3, [r7, #6]
 801b47e:	1c5a      	adds	r2, r3, #1
 801b480:	80fa      	strh	r2, [r7, #6]
 801b482:	461a      	mov	r2, r3
 801b484:	683b      	ldr	r3, [r7, #0]
 801b486:	4413      	add	r3, r2
 801b488:	797a      	ldrb	r2, [r7, #5]
 801b48a:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801b48c:	88fb      	ldrh	r3, [r7, #6]
}
 801b48e:	4618      	mov	r0, r3
 801b490:	3708      	adds	r7, #8
 801b492:	46bd      	mov	sp, r7
 801b494:	bd80      	pop	{r7, pc}
 801b496:	bf00      	nop
 801b498:	08026474 	.word	0x08026474
 801b49c:	0802664c 	.word	0x0802664c
 801b4a0:	080264d4 	.word	0x080264d4

0801b4a4 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 801b4a4:	b580      	push	{r7, lr}
 801b4a6:	b082      	sub	sp, #8
 801b4a8:	af00      	add	r7, sp, #0
 801b4aa:	4603      	mov	r3, r0
 801b4ac:	6039      	str	r1, [r7, #0]
 801b4ae:	80fb      	strh	r3, [r7, #6]
 801b4b0:	4613      	mov	r3, r2
 801b4b2:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 801b4b4:	88fb      	ldrh	r3, [r7, #6]
 801b4b6:	3302      	adds	r3, #2
 801b4b8:	2b44      	cmp	r3, #68	; 0x44
 801b4ba:	d906      	bls.n	801b4ca <dhcp_option_short+0x26>
 801b4bc:	4b0f      	ldr	r3, [pc, #60]	; (801b4fc <dhcp_option_short+0x58>)
 801b4be:	f240 52ae 	movw	r2, #1454	; 0x5ae
 801b4c2:	490f      	ldr	r1, [pc, #60]	; (801b500 <dhcp_option_short+0x5c>)
 801b4c4:	480f      	ldr	r0, [pc, #60]	; (801b504 <dhcp_option_short+0x60>)
 801b4c6:	f004 ffc3 	bl	8020450 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 801b4ca:	88bb      	ldrh	r3, [r7, #4]
 801b4cc:	0a1b      	lsrs	r3, r3, #8
 801b4ce:	b29a      	uxth	r2, r3
 801b4d0:	88fb      	ldrh	r3, [r7, #6]
 801b4d2:	1c59      	adds	r1, r3, #1
 801b4d4:	80f9      	strh	r1, [r7, #6]
 801b4d6:	4619      	mov	r1, r3
 801b4d8:	683b      	ldr	r3, [r7, #0]
 801b4da:	440b      	add	r3, r1
 801b4dc:	b2d2      	uxtb	r2, r2
 801b4de:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 801b4e0:	88fb      	ldrh	r3, [r7, #6]
 801b4e2:	1c5a      	adds	r2, r3, #1
 801b4e4:	80fa      	strh	r2, [r7, #6]
 801b4e6:	461a      	mov	r2, r3
 801b4e8:	683b      	ldr	r3, [r7, #0]
 801b4ea:	4413      	add	r3, r2
 801b4ec:	88ba      	ldrh	r2, [r7, #4]
 801b4ee:	b2d2      	uxtb	r2, r2
 801b4f0:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801b4f2:	88fb      	ldrh	r3, [r7, #6]
}
 801b4f4:	4618      	mov	r0, r3
 801b4f6:	3708      	adds	r7, #8
 801b4f8:	46bd      	mov	sp, r7
 801b4fa:	bd80      	pop	{r7, pc}
 801b4fc:	08026474 	.word	0x08026474
 801b500:	08026684 	.word	0x08026684
 801b504:	080264d4 	.word	0x080264d4

0801b508 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 801b508:	b580      	push	{r7, lr}
 801b50a:	b084      	sub	sp, #16
 801b50c:	af00      	add	r7, sp, #0
 801b50e:	4603      	mov	r3, r0
 801b510:	60b9      	str	r1, [r7, #8]
 801b512:	607a      	str	r2, [r7, #4]
 801b514:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 801b516:	89fb      	ldrh	r3, [r7, #14]
 801b518:	3304      	adds	r3, #4
 801b51a:	2b44      	cmp	r3, #68	; 0x44
 801b51c:	d906      	bls.n	801b52c <dhcp_option_long+0x24>
 801b51e:	4b19      	ldr	r3, [pc, #100]	; (801b584 <dhcp_option_long+0x7c>)
 801b520:	f240 52b7 	movw	r2, #1463	; 0x5b7
 801b524:	4918      	ldr	r1, [pc, #96]	; (801b588 <dhcp_option_long+0x80>)
 801b526:	4819      	ldr	r0, [pc, #100]	; (801b58c <dhcp_option_long+0x84>)
 801b528:	f004 ff92 	bl	8020450 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 801b52c:	687b      	ldr	r3, [r7, #4]
 801b52e:	0e1a      	lsrs	r2, r3, #24
 801b530:	89fb      	ldrh	r3, [r7, #14]
 801b532:	1c59      	adds	r1, r3, #1
 801b534:	81f9      	strh	r1, [r7, #14]
 801b536:	4619      	mov	r1, r3
 801b538:	68bb      	ldr	r3, [r7, #8]
 801b53a:	440b      	add	r3, r1
 801b53c:	b2d2      	uxtb	r2, r2
 801b53e:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 801b540:	687b      	ldr	r3, [r7, #4]
 801b542:	0c1a      	lsrs	r2, r3, #16
 801b544:	89fb      	ldrh	r3, [r7, #14]
 801b546:	1c59      	adds	r1, r3, #1
 801b548:	81f9      	strh	r1, [r7, #14]
 801b54a:	4619      	mov	r1, r3
 801b54c:	68bb      	ldr	r3, [r7, #8]
 801b54e:	440b      	add	r3, r1
 801b550:	b2d2      	uxtb	r2, r2
 801b552:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 801b554:	687b      	ldr	r3, [r7, #4]
 801b556:	0a1a      	lsrs	r2, r3, #8
 801b558:	89fb      	ldrh	r3, [r7, #14]
 801b55a:	1c59      	adds	r1, r3, #1
 801b55c:	81f9      	strh	r1, [r7, #14]
 801b55e:	4619      	mov	r1, r3
 801b560:	68bb      	ldr	r3, [r7, #8]
 801b562:	440b      	add	r3, r1
 801b564:	b2d2      	uxtb	r2, r2
 801b566:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 801b568:	89fb      	ldrh	r3, [r7, #14]
 801b56a:	1c5a      	adds	r2, r3, #1
 801b56c:	81fa      	strh	r2, [r7, #14]
 801b56e:	461a      	mov	r2, r3
 801b570:	68bb      	ldr	r3, [r7, #8]
 801b572:	4413      	add	r3, r2
 801b574:	687a      	ldr	r2, [r7, #4]
 801b576:	b2d2      	uxtb	r2, r2
 801b578:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801b57a:	89fb      	ldrh	r3, [r7, #14]
}
 801b57c:	4618      	mov	r0, r3
 801b57e:	3710      	adds	r7, #16
 801b580:	46bd      	mov	sp, r7
 801b582:	bd80      	pop	{r7, pc}
 801b584:	08026474 	.word	0x08026474
 801b588:	080266c0 	.word	0x080266c0
 801b58c:	080264d4 	.word	0x080264d4

0801b590 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 801b590:	b580      	push	{r7, lr}
 801b592:	b090      	sub	sp, #64	; 0x40
 801b594:	af00      	add	r7, sp, #0
 801b596:	6078      	str	r0, [r7, #4]
 801b598:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 801b59a:	2300      	movs	r3, #0
 801b59c:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 801b59e:	2300      	movs	r3, #0
 801b5a0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 801b5a2:	2208      	movs	r2, #8
 801b5a4:	2100      	movs	r1, #0
 801b5a6:	48b5      	ldr	r0, [pc, #724]	; (801b87c <dhcp_parse_reply+0x2ec>)
 801b5a8:	f004 fff1 	bl	802058e <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 801b5ac:	687b      	ldr	r3, [r7, #4]
 801b5ae:	895b      	ldrh	r3, [r3, #10]
 801b5b0:	2b2b      	cmp	r3, #43	; 0x2b
 801b5b2:	d802      	bhi.n	801b5ba <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 801b5b4:	f06f 0301 	mvn.w	r3, #1
 801b5b8:	e2a7      	b.n	801bb0a <dhcp_parse_reply+0x57a>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 801b5ba:	687b      	ldr	r3, [r7, #4]
 801b5bc:	685b      	ldr	r3, [r3, #4]
 801b5be:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 801b5c0:	23f0      	movs	r3, #240	; 0xf0
 801b5c2:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 801b5c4:	687b      	ldr	r3, [r7, #4]
 801b5c6:	891b      	ldrh	r3, [r3, #8]
 801b5c8:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 801b5ca:	687b      	ldr	r3, [r7, #4]
 801b5cc:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 801b5ce:	e00c      	b.n	801b5ea <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 801b5d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b5d2:	895b      	ldrh	r3, [r3, #10]
 801b5d4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801b5d6:	1ad3      	subs	r3, r2, r3
 801b5d8:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 801b5da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b5dc:	895b      	ldrh	r3, [r3, #10]
 801b5de:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 801b5e0:	1ad3      	subs	r3, r2, r3
 801b5e2:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 801b5e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b5e6:	681b      	ldr	r3, [r3, #0]
 801b5e8:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 801b5ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b5ec:	2b00      	cmp	r3, #0
 801b5ee:	d004      	beq.n	801b5fa <dhcp_parse_reply+0x6a>
 801b5f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b5f2:	895b      	ldrh	r3, [r3, #10]
 801b5f4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801b5f6:	429a      	cmp	r2, r3
 801b5f8:	d2ea      	bcs.n	801b5d0 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 801b5fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b5fc:	2b00      	cmp	r3, #0
 801b5fe:	d102      	bne.n	801b606 <dhcp_parse_reply+0x76>
    return ERR_BUF;
 801b600:	f06f 0301 	mvn.w	r3, #1
 801b604:	e281      	b.n	801bb0a <dhcp_parse_reply+0x57a>
  }
  offset = options_idx;
 801b606:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801b608:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 801b60a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801b60c:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 801b60e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b610:	685b      	ldr	r3, [r3, #4]
 801b612:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 801b614:	e239      	b.n	801ba8a <dhcp_parse_reply+0x4fa>
    u8_t op = options[offset];
 801b616:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801b618:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801b61a:	4413      	add	r3, r2
 801b61c:	781b      	ldrb	r3, [r3, #0]
 801b61e:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 801b620:	2300      	movs	r3, #0
 801b622:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 801b626:	f04f 33ff 	mov.w	r3, #4294967295
 801b62a:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 801b62c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801b62e:	3302      	adds	r3, #2
 801b630:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 801b632:	8bfa      	ldrh	r2, [r7, #30]
 801b634:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801b636:	429a      	cmp	r2, r3
 801b638:	d202      	bcs.n	801b640 <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 801b63a:	f06f 0301 	mvn.w	r3, #1
 801b63e:	e264      	b.n	801bb0a <dhcp_parse_reply+0x57a>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 801b640:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801b642:	3301      	adds	r3, #1
 801b644:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801b646:	8952      	ldrh	r2, [r2, #10]
 801b648:	4293      	cmp	r3, r2
 801b64a:	da07      	bge.n	801b65c <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 801b64c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801b64e:	3301      	adds	r3, #1
 801b650:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801b652:	4413      	add	r3, r2
 801b654:	781b      	ldrb	r3, [r3, #0]
 801b656:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801b65a:	e00b      	b.n	801b674 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 801b65c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b65e:	681b      	ldr	r3, [r3, #0]
 801b660:	2b00      	cmp	r3, #0
 801b662:	d004      	beq.n	801b66e <dhcp_parse_reply+0xde>
 801b664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b666:	681b      	ldr	r3, [r3, #0]
 801b668:	685b      	ldr	r3, [r3, #4]
 801b66a:	781b      	ldrb	r3, [r3, #0]
 801b66c:	e000      	b.n	801b670 <dhcp_parse_reply+0xe0>
 801b66e:	2300      	movs	r3, #0
 801b670:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 801b674:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b678:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 801b67c:	7dfb      	ldrb	r3, [r7, #23]
 801b67e:	2b3b      	cmp	r3, #59	; 0x3b
 801b680:	f200 812c 	bhi.w	801b8dc <dhcp_parse_reply+0x34c>
 801b684:	a201      	add	r2, pc, #4	; (adr r2, 801b68c <dhcp_parse_reply+0xfc>)
 801b686:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b68a:	bf00      	nop
 801b68c:	0801b77d 	.word	0x0801b77d
 801b690:	0801b78d 	.word	0x0801b78d
 801b694:	0801b8dd 	.word	0x0801b8dd
 801b698:	0801b7af 	.word	0x0801b7af
 801b69c:	0801b8dd 	.word	0x0801b8dd
 801b6a0:	0801b8dd 	.word	0x0801b8dd
 801b6a4:	0801b8dd 	.word	0x0801b8dd
 801b6a8:	0801b8dd 	.word	0x0801b8dd
 801b6ac:	0801b8dd 	.word	0x0801b8dd
 801b6b0:	0801b8dd 	.word	0x0801b8dd
 801b6b4:	0801b8dd 	.word	0x0801b8dd
 801b6b8:	0801b8dd 	.word	0x0801b8dd
 801b6bc:	0801b8dd 	.word	0x0801b8dd
 801b6c0:	0801b8dd 	.word	0x0801b8dd
 801b6c4:	0801b8dd 	.word	0x0801b8dd
 801b6c8:	0801b8dd 	.word	0x0801b8dd
 801b6cc:	0801b8dd 	.word	0x0801b8dd
 801b6d0:	0801b8dd 	.word	0x0801b8dd
 801b6d4:	0801b8dd 	.word	0x0801b8dd
 801b6d8:	0801b8dd 	.word	0x0801b8dd
 801b6dc:	0801b8dd 	.word	0x0801b8dd
 801b6e0:	0801b8dd 	.word	0x0801b8dd
 801b6e4:	0801b8dd 	.word	0x0801b8dd
 801b6e8:	0801b8dd 	.word	0x0801b8dd
 801b6ec:	0801b8dd 	.word	0x0801b8dd
 801b6f0:	0801b8dd 	.word	0x0801b8dd
 801b6f4:	0801b8dd 	.word	0x0801b8dd
 801b6f8:	0801b8dd 	.word	0x0801b8dd
 801b6fc:	0801b8dd 	.word	0x0801b8dd
 801b700:	0801b8dd 	.word	0x0801b8dd
 801b704:	0801b8dd 	.word	0x0801b8dd
 801b708:	0801b8dd 	.word	0x0801b8dd
 801b70c:	0801b8dd 	.word	0x0801b8dd
 801b710:	0801b8dd 	.word	0x0801b8dd
 801b714:	0801b8dd 	.word	0x0801b8dd
 801b718:	0801b8dd 	.word	0x0801b8dd
 801b71c:	0801b8dd 	.word	0x0801b8dd
 801b720:	0801b8dd 	.word	0x0801b8dd
 801b724:	0801b8dd 	.word	0x0801b8dd
 801b728:	0801b8dd 	.word	0x0801b8dd
 801b72c:	0801b8dd 	.word	0x0801b8dd
 801b730:	0801b8dd 	.word	0x0801b8dd
 801b734:	0801b8dd 	.word	0x0801b8dd
 801b738:	0801b8dd 	.word	0x0801b8dd
 801b73c:	0801b8dd 	.word	0x0801b8dd
 801b740:	0801b8dd 	.word	0x0801b8dd
 801b744:	0801b8dd 	.word	0x0801b8dd
 801b748:	0801b8dd 	.word	0x0801b8dd
 801b74c:	0801b8dd 	.word	0x0801b8dd
 801b750:	0801b8dd 	.word	0x0801b8dd
 801b754:	0801b8dd 	.word	0x0801b8dd
 801b758:	0801b7db 	.word	0x0801b7db
 801b75c:	0801b7fd 	.word	0x0801b7fd
 801b760:	0801b839 	.word	0x0801b839
 801b764:	0801b85b 	.word	0x0801b85b
 801b768:	0801b8dd 	.word	0x0801b8dd
 801b76c:	0801b8dd 	.word	0x0801b8dd
 801b770:	0801b8dd 	.word	0x0801b8dd
 801b774:	0801b899 	.word	0x0801b899
 801b778:	0801b8bb 	.word	0x0801b8bb
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 801b77c:	2300      	movs	r3, #0
 801b77e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801b782:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b786:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 801b78a:	e0ab      	b.n	801b8e4 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801b78c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b790:	2b04      	cmp	r3, #4
 801b792:	d009      	beq.n	801b7a8 <dhcp_parse_reply+0x218>
 801b794:	4b3a      	ldr	r3, [pc, #232]	; (801b880 <dhcp_parse_reply+0x2f0>)
 801b796:	f240 622e 	movw	r2, #1582	; 0x62e
 801b79a:	493a      	ldr	r1, [pc, #232]	; (801b884 <dhcp_parse_reply+0x2f4>)
 801b79c:	483a      	ldr	r0, [pc, #232]	; (801b888 <dhcp_parse_reply+0x2f8>)
 801b79e:	f004 fe57 	bl	8020450 <iprintf>
 801b7a2:	f06f 0305 	mvn.w	r3, #5
 801b7a6:	e1b0      	b.n	801bb0a <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 801b7a8:	2306      	movs	r3, #6
 801b7aa:	623b      	str	r3, [r7, #32]
        break;
 801b7ac:	e09a      	b.n	801b8e4 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 801b7ae:	2304      	movs	r3, #4
 801b7b0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 801b7b4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801b7b8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801b7bc:	429a      	cmp	r2, r3
 801b7be:	d209      	bcs.n	801b7d4 <dhcp_parse_reply+0x244>
 801b7c0:	4b2f      	ldr	r3, [pc, #188]	; (801b880 <dhcp_parse_reply+0x2f0>)
 801b7c2:	f240 6233 	movw	r2, #1587	; 0x633
 801b7c6:	4931      	ldr	r1, [pc, #196]	; (801b88c <dhcp_parse_reply+0x2fc>)
 801b7c8:	482f      	ldr	r0, [pc, #188]	; (801b888 <dhcp_parse_reply+0x2f8>)
 801b7ca:	f004 fe41 	bl	8020450 <iprintf>
 801b7ce:	f06f 0305 	mvn.w	r3, #5
 801b7d2:	e19a      	b.n	801bb0a <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 801b7d4:	2307      	movs	r3, #7
 801b7d6:	623b      	str	r3, [r7, #32]
        break;
 801b7d8:	e084      	b.n	801b8e4 <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801b7da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b7de:	2b04      	cmp	r3, #4
 801b7e0:	d009      	beq.n	801b7f6 <dhcp_parse_reply+0x266>
 801b7e2:	4b27      	ldr	r3, [pc, #156]	; (801b880 <dhcp_parse_reply+0x2f0>)
 801b7e4:	f240 6241 	movw	r2, #1601	; 0x641
 801b7e8:	4926      	ldr	r1, [pc, #152]	; (801b884 <dhcp_parse_reply+0x2f4>)
 801b7ea:	4827      	ldr	r0, [pc, #156]	; (801b888 <dhcp_parse_reply+0x2f8>)
 801b7ec:	f004 fe30 	bl	8020450 <iprintf>
 801b7f0:	f06f 0305 	mvn.w	r3, #5
 801b7f4:	e189      	b.n	801bb0a <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 801b7f6:	2303      	movs	r3, #3
 801b7f8:	623b      	str	r3, [r7, #32]
        break;
 801b7fa:	e073      	b.n	801b8e4 <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 801b7fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b800:	2b01      	cmp	r3, #1
 801b802:	d009      	beq.n	801b818 <dhcp_parse_reply+0x288>
 801b804:	4b1e      	ldr	r3, [pc, #120]	; (801b880 <dhcp_parse_reply+0x2f0>)
 801b806:	f240 624f 	movw	r2, #1615	; 0x64f
 801b80a:	4921      	ldr	r1, [pc, #132]	; (801b890 <dhcp_parse_reply+0x300>)
 801b80c:	481e      	ldr	r0, [pc, #120]	; (801b888 <dhcp_parse_reply+0x2f8>)
 801b80e:	f004 fe1f 	bl	8020450 <iprintf>
 801b812:	f06f 0305 	mvn.w	r3, #5
 801b816:	e178      	b.n	801bb0a <dhcp_parse_reply+0x57a>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 801b818:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801b81a:	2bf0      	cmp	r3, #240	; 0xf0
 801b81c:	d009      	beq.n	801b832 <dhcp_parse_reply+0x2a2>
 801b81e:	4b18      	ldr	r3, [pc, #96]	; (801b880 <dhcp_parse_reply+0x2f0>)
 801b820:	f240 6251 	movw	r2, #1617	; 0x651
 801b824:	491b      	ldr	r1, [pc, #108]	; (801b894 <dhcp_parse_reply+0x304>)
 801b826:	4818      	ldr	r0, [pc, #96]	; (801b888 <dhcp_parse_reply+0x2f8>)
 801b828:	f004 fe12 	bl	8020450 <iprintf>
 801b82c:	f06f 0305 	mvn.w	r3, #5
 801b830:	e16b      	b.n	801bb0a <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 801b832:	2300      	movs	r3, #0
 801b834:	623b      	str	r3, [r7, #32]
        break;
 801b836:	e055      	b.n	801b8e4 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 801b838:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b83c:	2b01      	cmp	r3, #1
 801b83e:	d009      	beq.n	801b854 <dhcp_parse_reply+0x2c4>
 801b840:	4b0f      	ldr	r3, [pc, #60]	; (801b880 <dhcp_parse_reply+0x2f0>)
 801b842:	f240 6255 	movw	r2, #1621	; 0x655
 801b846:	4912      	ldr	r1, [pc, #72]	; (801b890 <dhcp_parse_reply+0x300>)
 801b848:	480f      	ldr	r0, [pc, #60]	; (801b888 <dhcp_parse_reply+0x2f8>)
 801b84a:	f004 fe01 	bl	8020450 <iprintf>
 801b84e:	f06f 0305 	mvn.w	r3, #5
 801b852:	e15a      	b.n	801bb0a <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 801b854:	2301      	movs	r3, #1
 801b856:	623b      	str	r3, [r7, #32]
        break;
 801b858:	e044      	b.n	801b8e4 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801b85a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b85e:	2b04      	cmp	r3, #4
 801b860:	d009      	beq.n	801b876 <dhcp_parse_reply+0x2e6>
 801b862:	4b07      	ldr	r3, [pc, #28]	; (801b880 <dhcp_parse_reply+0x2f0>)
 801b864:	f240 6259 	movw	r2, #1625	; 0x659
 801b868:	4906      	ldr	r1, [pc, #24]	; (801b884 <dhcp_parse_reply+0x2f4>)
 801b86a:	4807      	ldr	r0, [pc, #28]	; (801b888 <dhcp_parse_reply+0x2f8>)
 801b86c:	f004 fdf0 	bl	8020450 <iprintf>
 801b870:	f06f 0305 	mvn.w	r3, #5
 801b874:	e149      	b.n	801bb0a <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 801b876:	2302      	movs	r3, #2
 801b878:	623b      	str	r3, [r7, #32]
        break;
 801b87a:	e033      	b.n	801b8e4 <dhcp_parse_reply+0x354>
 801b87c:	24007e58 	.word	0x24007e58
 801b880:	08026474 	.word	0x08026474
 801b884:	080266fc 	.word	0x080266fc
 801b888:	080264d4 	.word	0x080264d4
 801b88c:	08026708 	.word	0x08026708
 801b890:	0802671c 	.word	0x0802671c
 801b894:	08026728 	.word	0x08026728
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801b898:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b89c:	2b04      	cmp	r3, #4
 801b89e:	d009      	beq.n	801b8b4 <dhcp_parse_reply+0x324>
 801b8a0:	4b9c      	ldr	r3, [pc, #624]	; (801bb14 <dhcp_parse_reply+0x584>)
 801b8a2:	f240 625d 	movw	r2, #1629	; 0x65d
 801b8a6:	499c      	ldr	r1, [pc, #624]	; (801bb18 <dhcp_parse_reply+0x588>)
 801b8a8:	489c      	ldr	r0, [pc, #624]	; (801bb1c <dhcp_parse_reply+0x58c>)
 801b8aa:	f004 fdd1 	bl	8020450 <iprintf>
 801b8ae:	f06f 0305 	mvn.w	r3, #5
 801b8b2:	e12a      	b.n	801bb0a <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T1;
 801b8b4:	2304      	movs	r3, #4
 801b8b6:	623b      	str	r3, [r7, #32]
        break;
 801b8b8:	e014      	b.n	801b8e4 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801b8ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b8be:	2b04      	cmp	r3, #4
 801b8c0:	d009      	beq.n	801b8d6 <dhcp_parse_reply+0x346>
 801b8c2:	4b94      	ldr	r3, [pc, #592]	; (801bb14 <dhcp_parse_reply+0x584>)
 801b8c4:	f240 6261 	movw	r2, #1633	; 0x661
 801b8c8:	4993      	ldr	r1, [pc, #588]	; (801bb18 <dhcp_parse_reply+0x588>)
 801b8ca:	4894      	ldr	r0, [pc, #592]	; (801bb1c <dhcp_parse_reply+0x58c>)
 801b8cc:	f004 fdc0 	bl	8020450 <iprintf>
 801b8d0:	f06f 0305 	mvn.w	r3, #5
 801b8d4:	e119      	b.n	801bb0a <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T2;
 801b8d6:	2305      	movs	r3, #5
 801b8d8:	623b      	str	r3, [r7, #32]
        break;
 801b8da:	e003      	b.n	801b8e4 <dhcp_parse_reply+0x354>
      default:
        decode_len = 0;
 801b8dc:	2300      	movs	r3, #0
 801b8de:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 801b8e2:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 801b8e4:	7dfb      	ldrb	r3, [r7, #23]
 801b8e6:	2b00      	cmp	r3, #0
 801b8e8:	d103      	bne.n	801b8f2 <dhcp_parse_reply+0x362>
      offset++;
 801b8ea:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801b8ec:	3301      	adds	r3, #1
 801b8ee:	877b      	strh	r3, [r7, #58]	; 0x3a
 801b8f0:	e0a1      	b.n	801ba36 <dhcp_parse_reply+0x4a6>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 801b8f2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801b8f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b8f8:	4413      	add	r3, r2
 801b8fa:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 801b8fe:	4293      	cmp	r3, r2
 801b900:	dd02      	ble.n	801b908 <dhcp_parse_reply+0x378>
        /* overflow */
        return ERR_BUF;
 801b902:	f06f 0301 	mvn.w	r3, #1
 801b906:	e100      	b.n	801bb0a <dhcp_parse_reply+0x57a>
      }
      offset = (u16_t)(offset + len + 2);
 801b908:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b90c:	b29a      	uxth	r2, r3
 801b90e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801b910:	4413      	add	r3, r2
 801b912:	b29b      	uxth	r3, r3
 801b914:	3302      	adds	r3, #2
 801b916:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 801b918:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801b91c:	2b00      	cmp	r3, #0
 801b91e:	f000 808a 	beq.w	801ba36 <dhcp_parse_reply+0x4a6>
        u32_t value = 0;
 801b922:	2300      	movs	r3, #0
 801b924:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 801b926:	6a3b      	ldr	r3, [r7, #32]
 801b928:	2b00      	cmp	r3, #0
 801b92a:	db02      	blt.n	801b932 <dhcp_parse_reply+0x3a2>
 801b92c:	6a3b      	ldr	r3, [r7, #32]
 801b92e:	2b07      	cmp	r3, #7
 801b930:	dd06      	ble.n	801b940 <dhcp_parse_reply+0x3b0>
 801b932:	4b78      	ldr	r3, [pc, #480]	; (801bb14 <dhcp_parse_reply+0x584>)
 801b934:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 801b938:	4979      	ldr	r1, [pc, #484]	; (801bb20 <dhcp_parse_reply+0x590>)
 801b93a:	4878      	ldr	r0, [pc, #480]	; (801bb1c <dhcp_parse_reply+0x58c>)
 801b93c:	f004 fd88 	bl	8020450 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 801b940:	4a78      	ldr	r2, [pc, #480]	; (801bb24 <dhcp_parse_reply+0x594>)
 801b942:	6a3b      	ldr	r3, [r7, #32]
 801b944:	4413      	add	r3, r2
 801b946:	781b      	ldrb	r3, [r3, #0]
 801b948:	2b00      	cmp	r3, #0
 801b94a:	d174      	bne.n	801ba36 <dhcp_parse_reply+0x4a6>
          copy_len = LWIP_MIN(decode_len, 4);
 801b94c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801b950:	2b04      	cmp	r3, #4
 801b952:	bf28      	it	cs
 801b954:	2304      	movcs	r3, #4
 801b956:	b2db      	uxtb	r3, r3
 801b958:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 801b95a:	8bfb      	ldrh	r3, [r7, #30]
 801b95c:	8aba      	ldrh	r2, [r7, #20]
 801b95e:	f107 0108 	add.w	r1, r7, #8
 801b962:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801b964:	f7f7 fc50 	bl	8013208 <pbuf_copy_partial>
 801b968:	4603      	mov	r3, r0
 801b96a:	461a      	mov	r2, r3
 801b96c:	8abb      	ldrh	r3, [r7, #20]
 801b96e:	4293      	cmp	r3, r2
 801b970:	d002      	beq.n	801b978 <dhcp_parse_reply+0x3e8>
            return ERR_BUF;
 801b972:	f06f 0301 	mvn.w	r3, #1
 801b976:	e0c8      	b.n	801bb0a <dhcp_parse_reply+0x57a>
          }
          if (decode_len > 4) {
 801b978:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801b97c:	2b04      	cmp	r3, #4
 801b97e:	d933      	bls.n	801b9e8 <dhcp_parse_reply+0x458>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 801b980:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801b984:	f003 0303 	and.w	r3, r3, #3
 801b988:	b2db      	uxtb	r3, r3
 801b98a:	2b00      	cmp	r3, #0
 801b98c:	d009      	beq.n	801b9a2 <dhcp_parse_reply+0x412>
 801b98e:	4b61      	ldr	r3, [pc, #388]	; (801bb14 <dhcp_parse_reply+0x584>)
 801b990:	f240 6281 	movw	r2, #1665	; 0x681
 801b994:	4964      	ldr	r1, [pc, #400]	; (801bb28 <dhcp_parse_reply+0x598>)
 801b996:	4861      	ldr	r0, [pc, #388]	; (801bb1c <dhcp_parse_reply+0x58c>)
 801b998:	f004 fd5a 	bl	8020450 <iprintf>
 801b99c:	f06f 0305 	mvn.w	r3, #5
 801b9a0:	e0b3      	b.n	801bb0a <dhcp_parse_reply+0x57a>
            dhcp_got_option(dhcp, decode_idx);
 801b9a2:	4a60      	ldr	r2, [pc, #384]	; (801bb24 <dhcp_parse_reply+0x594>)
 801b9a4:	6a3b      	ldr	r3, [r7, #32]
 801b9a6:	4413      	add	r3, r2
 801b9a8:	2201      	movs	r2, #1
 801b9aa:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 801b9ac:	68bb      	ldr	r3, [r7, #8]
 801b9ae:	4618      	mov	r0, r3
 801b9b0:	f7f5 fd51 	bl	8011456 <lwip_htonl>
 801b9b4:	4602      	mov	r2, r0
 801b9b6:	495d      	ldr	r1, [pc, #372]	; (801bb2c <dhcp_parse_reply+0x59c>)
 801b9b8:	6a3b      	ldr	r3, [r7, #32]
 801b9ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 801b9be:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801b9c2:	3b04      	subs	r3, #4
 801b9c4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 801b9c8:	8bfb      	ldrh	r3, [r7, #30]
 801b9ca:	3304      	adds	r3, #4
 801b9cc:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 801b9ce:	8a7a      	ldrh	r2, [r7, #18]
 801b9d0:	8bfb      	ldrh	r3, [r7, #30]
 801b9d2:	429a      	cmp	r2, r3
 801b9d4:	d202      	bcs.n	801b9dc <dhcp_parse_reply+0x44c>
              /* overflow */
              return ERR_BUF;
 801b9d6:	f06f 0301 	mvn.w	r3, #1
 801b9da:	e096      	b.n	801bb0a <dhcp_parse_reply+0x57a>
            }
            val_offset = next_val_offset;
 801b9dc:	8a7b      	ldrh	r3, [r7, #18]
 801b9de:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 801b9e0:	6a3b      	ldr	r3, [r7, #32]
 801b9e2:	3301      	adds	r3, #1
 801b9e4:	623b      	str	r3, [r7, #32]
            goto decode_next;
 801b9e6:	e79e      	b.n	801b926 <dhcp_parse_reply+0x396>
          } else if (decode_len == 4) {
 801b9e8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801b9ec:	2b04      	cmp	r3, #4
 801b9ee:	d106      	bne.n	801b9fe <dhcp_parse_reply+0x46e>
            value = lwip_ntohl(value);
 801b9f0:	68bb      	ldr	r3, [r7, #8]
 801b9f2:	4618      	mov	r0, r3
 801b9f4:	f7f5 fd2f 	bl	8011456 <lwip_htonl>
 801b9f8:	4603      	mov	r3, r0
 801b9fa:	60bb      	str	r3, [r7, #8]
 801b9fc:	e011      	b.n	801ba22 <dhcp_parse_reply+0x492>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 801b9fe:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801ba02:	2b01      	cmp	r3, #1
 801ba04:	d009      	beq.n	801ba1a <dhcp_parse_reply+0x48a>
 801ba06:	4b43      	ldr	r3, [pc, #268]	; (801bb14 <dhcp_parse_reply+0x584>)
 801ba08:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 801ba0c:	4948      	ldr	r1, [pc, #288]	; (801bb30 <dhcp_parse_reply+0x5a0>)
 801ba0e:	4843      	ldr	r0, [pc, #268]	; (801bb1c <dhcp_parse_reply+0x58c>)
 801ba10:	f004 fd1e 	bl	8020450 <iprintf>
 801ba14:	f06f 0305 	mvn.w	r3, #5
 801ba18:	e077      	b.n	801bb0a <dhcp_parse_reply+0x57a>
            value = ((u8_t *)&value)[0];
 801ba1a:	f107 0308 	add.w	r3, r7, #8
 801ba1e:	781b      	ldrb	r3, [r3, #0]
 801ba20:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 801ba22:	4a40      	ldr	r2, [pc, #256]	; (801bb24 <dhcp_parse_reply+0x594>)
 801ba24:	6a3b      	ldr	r3, [r7, #32]
 801ba26:	4413      	add	r3, r2
 801ba28:	2201      	movs	r2, #1
 801ba2a:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 801ba2c:	68ba      	ldr	r2, [r7, #8]
 801ba2e:	493f      	ldr	r1, [pc, #252]	; (801bb2c <dhcp_parse_reply+0x59c>)
 801ba30:	6a3b      	ldr	r3, [r7, #32]
 801ba32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 801ba36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ba38:	895b      	ldrh	r3, [r3, #10]
 801ba3a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801ba3c:	429a      	cmp	r2, r3
 801ba3e:	d324      	bcc.n	801ba8a <dhcp_parse_reply+0x4fa>
      offset = (u16_t)(offset - q->len);
 801ba40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ba42:	895b      	ldrh	r3, [r3, #10]
 801ba44:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801ba46:	1ad3      	subs	r3, r2, r3
 801ba48:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 801ba4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ba4c:	895b      	ldrh	r3, [r3, #10]
 801ba4e:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 801ba50:	1ad3      	subs	r3, r2, r3
 801ba52:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 801ba54:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801ba56:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801ba58:	429a      	cmp	r2, r3
 801ba5a:	d213      	bcs.n	801ba84 <dhcp_parse_reply+0x4f4>
        q = q->next;
 801ba5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ba5e:	681b      	ldr	r3, [r3, #0]
 801ba60:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 801ba62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ba64:	2b00      	cmp	r3, #0
 801ba66:	d109      	bne.n	801ba7c <dhcp_parse_reply+0x4ec>
 801ba68:	4b2a      	ldr	r3, [pc, #168]	; (801bb14 <dhcp_parse_reply+0x584>)
 801ba6a:	f240 629d 	movw	r2, #1693	; 0x69d
 801ba6e:	4931      	ldr	r1, [pc, #196]	; (801bb34 <dhcp_parse_reply+0x5a4>)
 801ba70:	482a      	ldr	r0, [pc, #168]	; (801bb1c <dhcp_parse_reply+0x58c>)
 801ba72:	f004 fced 	bl	8020450 <iprintf>
 801ba76:	f06f 0305 	mvn.w	r3, #5
 801ba7a:	e046      	b.n	801bb0a <dhcp_parse_reply+0x57a>
        options = (u8_t *)q->payload;
 801ba7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ba7e:	685b      	ldr	r3, [r3, #4]
 801ba80:	63fb      	str	r3, [r7, #60]	; 0x3c
 801ba82:	e002      	b.n	801ba8a <dhcp_parse_reply+0x4fa>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 801ba84:	f06f 0301 	mvn.w	r3, #1
 801ba88:	e03f      	b.n	801bb0a <dhcp_parse_reply+0x57a>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 801ba8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ba8c:	2b00      	cmp	r3, #0
 801ba8e:	d00a      	beq.n	801baa6 <dhcp_parse_reply+0x516>
 801ba90:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801ba92:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801ba94:	429a      	cmp	r2, r3
 801ba96:	d206      	bcs.n	801baa6 <dhcp_parse_reply+0x516>
 801ba98:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801ba9a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801ba9c:	4413      	add	r3, r2
 801ba9e:	781b      	ldrb	r3, [r3, #0]
 801baa0:	2bff      	cmp	r3, #255	; 0xff
 801baa2:	f47f adb8 	bne.w	801b616 <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 801baa6:	4b1f      	ldr	r3, [pc, #124]	; (801bb24 <dhcp_parse_reply+0x594>)
 801baa8:	781b      	ldrb	r3, [r3, #0]
 801baaa:	2b00      	cmp	r3, #0
 801baac:	d018      	beq.n	801bae0 <dhcp_parse_reply+0x550>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 801baae:	4b1f      	ldr	r3, [pc, #124]	; (801bb2c <dhcp_parse_reply+0x59c>)
 801bab0:	681b      	ldr	r3, [r3, #0]
 801bab2:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 801bab4:	4b1b      	ldr	r3, [pc, #108]	; (801bb24 <dhcp_parse_reply+0x594>)
 801bab6:	2200      	movs	r2, #0
 801bab8:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 801baba:	68fb      	ldr	r3, [r7, #12]
 801babc:	2b01      	cmp	r3, #1
 801babe:	d102      	bne.n	801bac6 <dhcp_parse_reply+0x536>
      parse_file_as_options = 1;
 801bac0:	2301      	movs	r3, #1
 801bac2:	62fb      	str	r3, [r7, #44]	; 0x2c
 801bac4:	e00c      	b.n	801bae0 <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 801bac6:	68fb      	ldr	r3, [r7, #12]
 801bac8:	2b02      	cmp	r3, #2
 801baca:	d102      	bne.n	801bad2 <dhcp_parse_reply+0x542>
      parse_sname_as_options = 1;
 801bacc:	2301      	movs	r3, #1
 801bace:	62bb      	str	r3, [r7, #40]	; 0x28
 801bad0:	e006      	b.n	801bae0 <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 801bad2:	68fb      	ldr	r3, [r7, #12]
 801bad4:	2b03      	cmp	r3, #3
 801bad6:	d103      	bne.n	801bae0 <dhcp_parse_reply+0x550>
      parse_sname_as_options = 1;
 801bad8:	2301      	movs	r3, #1
 801bada:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 801badc:	2301      	movs	r3, #1
 801bade:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 801bae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bae2:	2b00      	cmp	r3, #0
 801bae4:	d006      	beq.n	801baf4 <dhcp_parse_reply+0x564>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 801bae6:	2300      	movs	r3, #0
 801bae8:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 801baea:	236c      	movs	r3, #108	; 0x6c
 801baec:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 801baee:	23ec      	movs	r3, #236	; 0xec
 801baf0:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 801baf2:	e56a      	b.n	801b5ca <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 801baf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801baf6:	2b00      	cmp	r3, #0
 801baf8:	d006      	beq.n	801bb08 <dhcp_parse_reply+0x578>
    parse_sname_as_options = 0;
 801bafa:	2300      	movs	r3, #0
 801bafc:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 801bafe:	232c      	movs	r3, #44	; 0x2c
 801bb00:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 801bb02:	236c      	movs	r3, #108	; 0x6c
 801bb04:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 801bb06:	e560      	b.n	801b5ca <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 801bb08:	2300      	movs	r3, #0
}
 801bb0a:	4618      	mov	r0, r3
 801bb0c:	3740      	adds	r7, #64	; 0x40
 801bb0e:	46bd      	mov	sp, r7
 801bb10:	bd80      	pop	{r7, pc}
 801bb12:	bf00      	nop
 801bb14:	08026474 	.word	0x08026474
 801bb18:	080266fc 	.word	0x080266fc
 801bb1c:	080264d4 	.word	0x080264d4
 801bb20:	08026740 	.word	0x08026740
 801bb24:	24007e58 	.word	0x24007e58
 801bb28:	08026754 	.word	0x08026754
 801bb2c:	24007e38 	.word	0x24007e38
 801bb30:	0802676c 	.word	0x0802676c
 801bb34:	08026780 	.word	0x08026780

0801bb38 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 801bb38:	b580      	push	{r7, lr}
 801bb3a:	b08a      	sub	sp, #40	; 0x28
 801bb3c:	af00      	add	r7, sp, #0
 801bb3e:	60f8      	str	r0, [r7, #12]
 801bb40:	60b9      	str	r1, [r7, #8]
 801bb42:	607a      	str	r2, [r7, #4]
 801bb44:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 801bb46:	4b60      	ldr	r3, [pc, #384]	; (801bcc8 <dhcp_recv+0x190>)
 801bb48:	685b      	ldr	r3, [r3, #4]
 801bb4a:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801bb4c:	6a3b      	ldr	r3, [r7, #32]
 801bb4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bb50:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 801bb52:	687b      	ldr	r3, [r7, #4]
 801bb54:	685b      	ldr	r3, [r3, #4]
 801bb56:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 801bb58:	69fb      	ldr	r3, [r7, #28]
 801bb5a:	2b00      	cmp	r3, #0
 801bb5c:	f000 809d 	beq.w	801bc9a <dhcp_recv+0x162>
 801bb60:	69fb      	ldr	r3, [r7, #28]
 801bb62:	791b      	ldrb	r3, [r3, #4]
 801bb64:	2b00      	cmp	r3, #0
 801bb66:	f000 8098 	beq.w	801bc9a <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 801bb6a:	687b      	ldr	r3, [r7, #4]
 801bb6c:	895b      	ldrh	r3, [r3, #10]
 801bb6e:	2b2b      	cmp	r3, #43	; 0x2b
 801bb70:	f240 8095 	bls.w	801bc9e <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 801bb74:	69bb      	ldr	r3, [r7, #24]
 801bb76:	781b      	ldrb	r3, [r3, #0]
 801bb78:	2b02      	cmp	r3, #2
 801bb7a:	f040 8092 	bne.w	801bca2 <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801bb7e:	2300      	movs	r3, #0
 801bb80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801bb84:	e012      	b.n	801bbac <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 801bb86:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801bb8a:	6a3a      	ldr	r2, [r7, #32]
 801bb8c:	4413      	add	r3, r2
 801bb8e:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 801bb92:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801bb96:	69b9      	ldr	r1, [r7, #24]
 801bb98:	440b      	add	r3, r1
 801bb9a:	7f1b      	ldrb	r3, [r3, #28]
 801bb9c:	429a      	cmp	r2, r3
 801bb9e:	f040 8082 	bne.w	801bca6 <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801bba2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801bba6:	3301      	adds	r3, #1
 801bba8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801bbac:	6a3b      	ldr	r3, [r7, #32]
 801bbae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801bbb2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801bbb6:	429a      	cmp	r2, r3
 801bbb8:	d203      	bcs.n	801bbc2 <dhcp_recv+0x8a>
 801bbba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801bbbe:	2b05      	cmp	r3, #5
 801bbc0:	d9e1      	bls.n	801bb86 <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 801bbc2:	69bb      	ldr	r3, [r7, #24]
 801bbc4:	685b      	ldr	r3, [r3, #4]
 801bbc6:	4618      	mov	r0, r3
 801bbc8:	f7f5 fc45 	bl	8011456 <lwip_htonl>
 801bbcc:	4602      	mov	r2, r0
 801bbce:	69fb      	ldr	r3, [r7, #28]
 801bbd0:	681b      	ldr	r3, [r3, #0]
 801bbd2:	429a      	cmp	r2, r3
 801bbd4:	d169      	bne.n	801bcaa <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 801bbd6:	69f9      	ldr	r1, [r7, #28]
 801bbd8:	6878      	ldr	r0, [r7, #4]
 801bbda:	f7ff fcd9 	bl	801b590 <dhcp_parse_reply>
 801bbde:	4603      	mov	r3, r0
 801bbe0:	2b00      	cmp	r3, #0
 801bbe2:	d164      	bne.n	801bcae <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 801bbe4:	4b39      	ldr	r3, [pc, #228]	; (801bccc <dhcp_recv+0x194>)
 801bbe6:	785b      	ldrb	r3, [r3, #1]
 801bbe8:	2b00      	cmp	r3, #0
 801bbea:	d062      	beq.n	801bcb2 <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 801bbec:	687b      	ldr	r3, [r7, #4]
 801bbee:	685b      	ldr	r3, [r3, #4]
 801bbf0:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 801bbf2:	4b37      	ldr	r3, [pc, #220]	; (801bcd0 <dhcp_recv+0x198>)
 801bbf4:	685b      	ldr	r3, [r3, #4]
 801bbf6:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 801bbf8:	7cfb      	ldrb	r3, [r7, #19]
 801bbfa:	2b05      	cmp	r3, #5
 801bbfc:	d12a      	bne.n	801bc54 <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 801bbfe:	69fb      	ldr	r3, [r7, #28]
 801bc00:	795b      	ldrb	r3, [r3, #5]
 801bc02:	2b01      	cmp	r3, #1
 801bc04:	d112      	bne.n	801bc2c <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 801bc06:	6979      	ldr	r1, [r7, #20]
 801bc08:	6a38      	ldr	r0, [r7, #32]
 801bc0a:	f7fe fe17 	bl	801a83c <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 801bc0e:	6a3b      	ldr	r3, [r7, #32]
 801bc10:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801bc14:	f003 0308 	and.w	r3, r3, #8
 801bc18:	2b00      	cmp	r3, #0
 801bc1a:	d003      	beq.n	801bc24 <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 801bc1c:	6a38      	ldr	r0, [r7, #32]
 801bc1e:	f7fe fb85 	bl	801a32c <dhcp_check>
 801bc22:	e049      	b.n	801bcb8 <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 801bc24:	6a38      	ldr	r0, [r7, #32]
 801bc26:	f7ff f867 	bl	801acf8 <dhcp_bind>
 801bc2a:	e045      	b.n	801bcb8 <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 801bc2c:	69fb      	ldr	r3, [r7, #28]
 801bc2e:	795b      	ldrb	r3, [r3, #5]
 801bc30:	2b03      	cmp	r3, #3
 801bc32:	d007      	beq.n	801bc44 <dhcp_recv+0x10c>
 801bc34:	69fb      	ldr	r3, [r7, #28]
 801bc36:	795b      	ldrb	r3, [r3, #5]
 801bc38:	2b04      	cmp	r3, #4
 801bc3a:	d003      	beq.n	801bc44 <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 801bc3c:	69fb      	ldr	r3, [r7, #28]
 801bc3e:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 801bc40:	2b05      	cmp	r3, #5
 801bc42:	d139      	bne.n	801bcb8 <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 801bc44:	6979      	ldr	r1, [r7, #20]
 801bc46:	6a38      	ldr	r0, [r7, #32]
 801bc48:	f7fe fdf8 	bl	801a83c <dhcp_handle_ack>
      dhcp_bind(netif);
 801bc4c:	6a38      	ldr	r0, [r7, #32]
 801bc4e:	f7ff f853 	bl	801acf8 <dhcp_bind>
 801bc52:	e031      	b.n	801bcb8 <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 801bc54:	7cfb      	ldrb	r3, [r7, #19]
 801bc56:	2b06      	cmp	r3, #6
 801bc58:	d113      	bne.n	801bc82 <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801bc5a:	69fb      	ldr	r3, [r7, #28]
 801bc5c:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 801bc5e:	2b03      	cmp	r3, #3
 801bc60:	d00b      	beq.n	801bc7a <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801bc62:	69fb      	ldr	r3, [r7, #28]
 801bc64:	795b      	ldrb	r3, [r3, #5]
 801bc66:	2b01      	cmp	r3, #1
 801bc68:	d007      	beq.n	801bc7a <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 801bc6a:	69fb      	ldr	r3, [r7, #28]
 801bc6c:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801bc6e:	2b04      	cmp	r3, #4
 801bc70:	d003      	beq.n	801bc7a <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 801bc72:	69fb      	ldr	r3, [r7, #28]
 801bc74:	795b      	ldrb	r3, [r3, #5]
 801bc76:	2b05      	cmp	r3, #5
 801bc78:	d103      	bne.n	801bc82 <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 801bc7a:	6a38      	ldr	r0, [r7, #32]
 801bc7c:	f7fe fb3c 	bl	801a2f8 <dhcp_handle_nak>
 801bc80:	e01a      	b.n	801bcb8 <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 801bc82:	7cfb      	ldrb	r3, [r7, #19]
 801bc84:	2b02      	cmp	r3, #2
 801bc86:	d116      	bne.n	801bcb6 <dhcp_recv+0x17e>
 801bc88:	69fb      	ldr	r3, [r7, #28]
 801bc8a:	795b      	ldrb	r3, [r3, #5]
 801bc8c:	2b06      	cmp	r3, #6
 801bc8e:	d112      	bne.n	801bcb6 <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 801bc90:	6979      	ldr	r1, [r7, #20]
 801bc92:	6a38      	ldr	r0, [r7, #32]
 801bc94:	f7fe fb7e 	bl	801a394 <dhcp_handle_offer>
 801bc98:	e00e      	b.n	801bcb8 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801bc9a:	bf00      	nop
 801bc9c:	e00c      	b.n	801bcb8 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801bc9e:	bf00      	nop
 801bca0:	e00a      	b.n	801bcb8 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801bca2:	bf00      	nop
 801bca4:	e008      	b.n	801bcb8 <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 801bca6:	bf00      	nop
 801bca8:	e006      	b.n	801bcb8 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801bcaa:	bf00      	nop
 801bcac:	e004      	b.n	801bcb8 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801bcae:	bf00      	nop
 801bcb0:	e002      	b.n	801bcb8 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801bcb2:	bf00      	nop
 801bcb4:	e000      	b.n	801bcb8 <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 801bcb6:	bf00      	nop
  pbuf_free(p);
 801bcb8:	6878      	ldr	r0, [r7, #4]
 801bcba:	f7f7 f89f 	bl	8012dfc <pbuf_free>
}
 801bcbe:	bf00      	nop
 801bcc0:	3728      	adds	r7, #40	; 0x28
 801bcc2:	46bd      	mov	sp, r7
 801bcc4:	bd80      	pop	{r7, pc}
 801bcc6:	bf00      	nop
 801bcc8:	24004cb8 	.word	0x24004cb8
 801bccc:	24007e58 	.word	0x24007e58
 801bcd0:	24007e38 	.word	0x24007e38

0801bcd4 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 801bcd4:	b580      	push	{r7, lr}
 801bcd6:	b088      	sub	sp, #32
 801bcd8:	af00      	add	r7, sp, #0
 801bcda:	60f8      	str	r0, [r7, #12]
 801bcdc:	60b9      	str	r1, [r7, #8]
 801bcde:	603b      	str	r3, [r7, #0]
 801bce0:	4613      	mov	r3, r2
 801bce2:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 801bce4:	68fb      	ldr	r3, [r7, #12]
 801bce6:	2b00      	cmp	r3, #0
 801bce8:	d108      	bne.n	801bcfc <dhcp_create_msg+0x28>
 801bcea:	4b5f      	ldr	r3, [pc, #380]	; (801be68 <dhcp_create_msg+0x194>)
 801bcec:	f240 7269 	movw	r2, #1897	; 0x769
 801bcf0:	495e      	ldr	r1, [pc, #376]	; (801be6c <dhcp_create_msg+0x198>)
 801bcf2:	485f      	ldr	r0, [pc, #380]	; (801be70 <dhcp_create_msg+0x19c>)
 801bcf4:	f004 fbac 	bl	8020450 <iprintf>
 801bcf8:	2300      	movs	r3, #0
 801bcfa:	e0b1      	b.n	801be60 <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 801bcfc:	68bb      	ldr	r3, [r7, #8]
 801bcfe:	2b00      	cmp	r3, #0
 801bd00:	d108      	bne.n	801bd14 <dhcp_create_msg+0x40>
 801bd02:	4b59      	ldr	r3, [pc, #356]	; (801be68 <dhcp_create_msg+0x194>)
 801bd04:	f240 726a 	movw	r2, #1898	; 0x76a
 801bd08:	495a      	ldr	r1, [pc, #360]	; (801be74 <dhcp_create_msg+0x1a0>)
 801bd0a:	4859      	ldr	r0, [pc, #356]	; (801be70 <dhcp_create_msg+0x19c>)
 801bd0c:	f004 fba0 	bl	8020450 <iprintf>
 801bd10:	2300      	movs	r3, #0
 801bd12:	e0a5      	b.n	801be60 <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 801bd14:	f44f 7220 	mov.w	r2, #640	; 0x280
 801bd18:	f44f 719a 	mov.w	r1, #308	; 0x134
 801bd1c:	2036      	movs	r0, #54	; 0x36
 801bd1e:	f7f6 fd57 	bl	80127d0 <pbuf_alloc>
 801bd22:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 801bd24:	69bb      	ldr	r3, [r7, #24]
 801bd26:	2b00      	cmp	r3, #0
 801bd28:	d101      	bne.n	801bd2e <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 801bd2a:	2300      	movs	r3, #0
 801bd2c:	e098      	b.n	801be60 <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 801bd2e:	69bb      	ldr	r3, [r7, #24]
 801bd30:	895b      	ldrh	r3, [r3, #10]
 801bd32:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 801bd36:	d206      	bcs.n	801bd46 <dhcp_create_msg+0x72>
 801bd38:	4b4b      	ldr	r3, [pc, #300]	; (801be68 <dhcp_create_msg+0x194>)
 801bd3a:	f240 7271 	movw	r2, #1905	; 0x771
 801bd3e:	494e      	ldr	r1, [pc, #312]	; (801be78 <dhcp_create_msg+0x1a4>)
 801bd40:	484b      	ldr	r0, [pc, #300]	; (801be70 <dhcp_create_msg+0x19c>)
 801bd42:	f004 fb85 	bl	8020450 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 801bd46:	79fb      	ldrb	r3, [r7, #7]
 801bd48:	2b03      	cmp	r3, #3
 801bd4a:	d103      	bne.n	801bd54 <dhcp_create_msg+0x80>
 801bd4c:	68bb      	ldr	r3, [r7, #8]
 801bd4e:	795b      	ldrb	r3, [r3, #5]
 801bd50:	2b03      	cmp	r3, #3
 801bd52:	d10d      	bne.n	801bd70 <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 801bd54:	68bb      	ldr	r3, [r7, #8]
 801bd56:	799b      	ldrb	r3, [r3, #6]
 801bd58:	2b00      	cmp	r3, #0
 801bd5a:	d105      	bne.n	801bd68 <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 801bd5c:	f002 fdd8 	bl	801e910 <rand>
 801bd60:	4603      	mov	r3, r0
 801bd62:	461a      	mov	r2, r3
 801bd64:	4b45      	ldr	r3, [pc, #276]	; (801be7c <dhcp_create_msg+0x1a8>)
 801bd66:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 801bd68:	4b44      	ldr	r3, [pc, #272]	; (801be7c <dhcp_create_msg+0x1a8>)
 801bd6a:	681a      	ldr	r2, [r3, #0]
 801bd6c:	68bb      	ldr	r3, [r7, #8]
 801bd6e:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 801bd70:	69bb      	ldr	r3, [r7, #24]
 801bd72:	685b      	ldr	r3, [r3, #4]
 801bd74:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 801bd76:	f44f 729a 	mov.w	r2, #308	; 0x134
 801bd7a:	2100      	movs	r1, #0
 801bd7c:	6978      	ldr	r0, [r7, #20]
 801bd7e:	f004 fc06 	bl	802058e <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 801bd82:	697b      	ldr	r3, [r7, #20]
 801bd84:	2201      	movs	r2, #1
 801bd86:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 801bd88:	697b      	ldr	r3, [r7, #20]
 801bd8a:	2201      	movs	r2, #1
 801bd8c:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 801bd8e:	68fb      	ldr	r3, [r7, #12]
 801bd90:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 801bd94:	697b      	ldr	r3, [r7, #20]
 801bd96:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 801bd98:	68bb      	ldr	r3, [r7, #8]
 801bd9a:	681b      	ldr	r3, [r3, #0]
 801bd9c:	4618      	mov	r0, r3
 801bd9e:	f7f5 fb5a 	bl	8011456 <lwip_htonl>
 801bda2:	4602      	mov	r2, r0
 801bda4:	697b      	ldr	r3, [r7, #20]
 801bda6:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 801bda8:	79fb      	ldrb	r3, [r7, #7]
 801bdaa:	2b08      	cmp	r3, #8
 801bdac:	d010      	beq.n	801bdd0 <dhcp_create_msg+0xfc>
 801bdae:	79fb      	ldrb	r3, [r7, #7]
 801bdb0:	2b04      	cmp	r3, #4
 801bdb2:	d00d      	beq.n	801bdd0 <dhcp_create_msg+0xfc>
 801bdb4:	79fb      	ldrb	r3, [r7, #7]
 801bdb6:	2b07      	cmp	r3, #7
 801bdb8:	d00a      	beq.n	801bdd0 <dhcp_create_msg+0xfc>
 801bdba:	79fb      	ldrb	r3, [r7, #7]
 801bdbc:	2b03      	cmp	r3, #3
 801bdbe:	d10c      	bne.n	801bdda <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 801bdc0:	68bb      	ldr	r3, [r7, #8]
 801bdc2:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 801bdc4:	2b05      	cmp	r3, #5
 801bdc6:	d003      	beq.n	801bdd0 <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 801bdc8:	68bb      	ldr	r3, [r7, #8]
 801bdca:	795b      	ldrb	r3, [r3, #5]
 801bdcc:	2b04      	cmp	r3, #4
 801bdce:	d104      	bne.n	801bdda <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 801bdd0:	68fb      	ldr	r3, [r7, #12]
 801bdd2:	3304      	adds	r3, #4
 801bdd4:	681a      	ldr	r2, [r3, #0]
 801bdd6:	697b      	ldr	r3, [r7, #20]
 801bdd8:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801bdda:	2300      	movs	r3, #0
 801bddc:	83fb      	strh	r3, [r7, #30]
 801bdde:	e00c      	b.n	801bdfa <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 801bde0:	8bfa      	ldrh	r2, [r7, #30]
 801bde2:	8bfb      	ldrh	r3, [r7, #30]
 801bde4:	68f9      	ldr	r1, [r7, #12]
 801bde6:	440a      	add	r2, r1
 801bde8:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 801bdec:	697a      	ldr	r2, [r7, #20]
 801bdee:	4413      	add	r3, r2
 801bdf0:	460a      	mov	r2, r1
 801bdf2:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801bdf4:	8bfb      	ldrh	r3, [r7, #30]
 801bdf6:	3301      	adds	r3, #1
 801bdf8:	83fb      	strh	r3, [r7, #30]
 801bdfa:	8bfb      	ldrh	r3, [r7, #30]
 801bdfc:	2b05      	cmp	r3, #5
 801bdfe:	d9ef      	bls.n	801bde0 <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 801be00:	697b      	ldr	r3, [r7, #20]
 801be02:	2200      	movs	r2, #0
 801be04:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 801be08:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 801be0c:	2200      	movs	r2, #0
 801be0e:	f062 027d 	orn	r2, r2, #125	; 0x7d
 801be12:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 801be16:	2200      	movs	r2, #0
 801be18:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 801be1c:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 801be20:	2200      	movs	r2, #0
 801be22:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 801be26:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 801be2a:	697b      	ldr	r3, [r7, #20]
 801be2c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801be30:	2301      	movs	r3, #1
 801be32:	2235      	movs	r2, #53	; 0x35
 801be34:	2000      	movs	r0, #0
 801be36:	f7ff fadb 	bl	801b3f0 <dhcp_option>
 801be3a:	4603      	mov	r3, r0
 801be3c:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 801be3e:	697b      	ldr	r3, [r7, #20]
 801be40:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801be44:	79fa      	ldrb	r2, [r7, #7]
 801be46:	8a7b      	ldrh	r3, [r7, #18]
 801be48:	4618      	mov	r0, r3
 801be4a:	f7ff fb05 	bl	801b458 <dhcp_option_byte>
 801be4e:	4603      	mov	r3, r0
 801be50:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 801be52:	683b      	ldr	r3, [r7, #0]
 801be54:	2b00      	cmp	r3, #0
 801be56:	d002      	beq.n	801be5e <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 801be58:	683b      	ldr	r3, [r7, #0]
 801be5a:	8a7a      	ldrh	r2, [r7, #18]
 801be5c:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 801be5e:	69bb      	ldr	r3, [r7, #24]
}
 801be60:	4618      	mov	r0, r3
 801be62:	3720      	adds	r7, #32
 801be64:	46bd      	mov	sp, r7
 801be66:	bd80      	pop	{r7, pc}
 801be68:	08026474 	.word	0x08026474
 801be6c:	08026794 	.word	0x08026794
 801be70:	080264d4 	.word	0x080264d4
 801be74:	080267b4 	.word	0x080267b4
 801be78:	080267d4 	.word	0x080267d4
 801be7c:	24007e68 	.word	0x24007e68

0801be80 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 801be80:	b580      	push	{r7, lr}
 801be82:	b084      	sub	sp, #16
 801be84:	af00      	add	r7, sp, #0
 801be86:	4603      	mov	r3, r0
 801be88:	60b9      	str	r1, [r7, #8]
 801be8a:	607a      	str	r2, [r7, #4]
 801be8c:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 801be8e:	89fb      	ldrh	r3, [r7, #14]
 801be90:	1c5a      	adds	r2, r3, #1
 801be92:	81fa      	strh	r2, [r7, #14]
 801be94:	461a      	mov	r2, r3
 801be96:	68bb      	ldr	r3, [r7, #8]
 801be98:	4413      	add	r3, r2
 801be9a:	22ff      	movs	r2, #255	; 0xff
 801be9c:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 801be9e:	e007      	b.n	801beb0 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 801bea0:	89fb      	ldrh	r3, [r7, #14]
 801bea2:	1c5a      	adds	r2, r3, #1
 801bea4:	81fa      	strh	r2, [r7, #14]
 801bea6:	461a      	mov	r2, r3
 801bea8:	68bb      	ldr	r3, [r7, #8]
 801beaa:	4413      	add	r3, r2
 801beac:	2200      	movs	r2, #0
 801beae:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 801beb0:	89fb      	ldrh	r3, [r7, #14]
 801beb2:	2b43      	cmp	r3, #67	; 0x43
 801beb4:	d904      	bls.n	801bec0 <dhcp_option_trailer+0x40>
 801beb6:	89fb      	ldrh	r3, [r7, #14]
 801beb8:	f003 0303 	and.w	r3, r3, #3
 801bebc:	2b00      	cmp	r3, #0
 801bebe:	d002      	beq.n	801bec6 <dhcp_option_trailer+0x46>
 801bec0:	89fb      	ldrh	r3, [r7, #14]
 801bec2:	2b43      	cmp	r3, #67	; 0x43
 801bec4:	d9ec      	bls.n	801bea0 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 801bec6:	89fb      	ldrh	r3, [r7, #14]
 801bec8:	33f0      	adds	r3, #240	; 0xf0
 801beca:	b29b      	uxth	r3, r3
 801becc:	4619      	mov	r1, r3
 801bece:	6878      	ldr	r0, [r7, #4]
 801bed0:	f7f6 fddc 	bl	8012a8c <pbuf_realloc>
}
 801bed4:	bf00      	nop
 801bed6:	3710      	adds	r7, #16
 801bed8:	46bd      	mov	sp, r7
 801beda:	bd80      	pop	{r7, pc}

0801bedc <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 801bedc:	b480      	push	{r7}
 801bede:	b085      	sub	sp, #20
 801bee0:	af00      	add	r7, sp, #0
 801bee2:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 801bee4:	687b      	ldr	r3, [r7, #4]
 801bee6:	2b00      	cmp	r3, #0
 801bee8:	d017      	beq.n	801bf1a <dhcp_supplied_address+0x3e>
 801beea:	687b      	ldr	r3, [r7, #4]
 801beec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801beee:	2b00      	cmp	r3, #0
 801bef0:	d013      	beq.n	801bf1a <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801bef2:	687b      	ldr	r3, [r7, #4]
 801bef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bef6:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 801bef8:	68fb      	ldr	r3, [r7, #12]
 801befa:	795b      	ldrb	r3, [r3, #5]
 801befc:	2b0a      	cmp	r3, #10
 801befe:	d007      	beq.n	801bf10 <dhcp_supplied_address+0x34>
 801bf00:	68fb      	ldr	r3, [r7, #12]
 801bf02:	795b      	ldrb	r3, [r3, #5]
 801bf04:	2b05      	cmp	r3, #5
 801bf06:	d003      	beq.n	801bf10 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 801bf08:	68fb      	ldr	r3, [r7, #12]
 801bf0a:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 801bf0c:	2b04      	cmp	r3, #4
 801bf0e:	d101      	bne.n	801bf14 <dhcp_supplied_address+0x38>
 801bf10:	2301      	movs	r3, #1
 801bf12:	e000      	b.n	801bf16 <dhcp_supplied_address+0x3a>
 801bf14:	2300      	movs	r3, #0
 801bf16:	b2db      	uxtb	r3, r3
 801bf18:	e000      	b.n	801bf1c <dhcp_supplied_address+0x40>
  }
  return 0;
 801bf1a:	2300      	movs	r3, #0
}
 801bf1c:	4618      	mov	r0, r3
 801bf1e:	3714      	adds	r7, #20
 801bf20:	46bd      	mov	sp, r7
 801bf22:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bf26:	4770      	bx	lr

0801bf28 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 801bf28:	b580      	push	{r7, lr}
 801bf2a:	b082      	sub	sp, #8
 801bf2c:	af00      	add	r7, sp, #0
 801bf2e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 801bf30:	4915      	ldr	r1, [pc, #84]	; (801bf88 <etharp_free_entry+0x60>)
 801bf32:	687a      	ldr	r2, [r7, #4]
 801bf34:	4613      	mov	r3, r2
 801bf36:	005b      	lsls	r3, r3, #1
 801bf38:	4413      	add	r3, r2
 801bf3a:	00db      	lsls	r3, r3, #3
 801bf3c:	440b      	add	r3, r1
 801bf3e:	681b      	ldr	r3, [r3, #0]
 801bf40:	2b00      	cmp	r3, #0
 801bf42:	d013      	beq.n	801bf6c <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 801bf44:	4910      	ldr	r1, [pc, #64]	; (801bf88 <etharp_free_entry+0x60>)
 801bf46:	687a      	ldr	r2, [r7, #4]
 801bf48:	4613      	mov	r3, r2
 801bf4a:	005b      	lsls	r3, r3, #1
 801bf4c:	4413      	add	r3, r2
 801bf4e:	00db      	lsls	r3, r3, #3
 801bf50:	440b      	add	r3, r1
 801bf52:	681b      	ldr	r3, [r3, #0]
 801bf54:	4618      	mov	r0, r3
 801bf56:	f7f6 ff51 	bl	8012dfc <pbuf_free>
    arp_table[i].q = NULL;
 801bf5a:	490b      	ldr	r1, [pc, #44]	; (801bf88 <etharp_free_entry+0x60>)
 801bf5c:	687a      	ldr	r2, [r7, #4]
 801bf5e:	4613      	mov	r3, r2
 801bf60:	005b      	lsls	r3, r3, #1
 801bf62:	4413      	add	r3, r2
 801bf64:	00db      	lsls	r3, r3, #3
 801bf66:	440b      	add	r3, r1
 801bf68:	2200      	movs	r2, #0
 801bf6a:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801bf6c:	4906      	ldr	r1, [pc, #24]	; (801bf88 <etharp_free_entry+0x60>)
 801bf6e:	687a      	ldr	r2, [r7, #4]
 801bf70:	4613      	mov	r3, r2
 801bf72:	005b      	lsls	r3, r3, #1
 801bf74:	4413      	add	r3, r2
 801bf76:	00db      	lsls	r3, r3, #3
 801bf78:	440b      	add	r3, r1
 801bf7a:	3314      	adds	r3, #20
 801bf7c:	2200      	movs	r2, #0
 801bf7e:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 801bf80:	bf00      	nop
 801bf82:	3708      	adds	r7, #8
 801bf84:	46bd      	mov	sp, r7
 801bf86:	bd80      	pop	{r7, pc}
 801bf88:	24007e6c 	.word	0x24007e6c

0801bf8c <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 801bf8c:	b580      	push	{r7, lr}
 801bf8e:	b082      	sub	sp, #8
 801bf90:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801bf92:	2300      	movs	r3, #0
 801bf94:	607b      	str	r3, [r7, #4]
 801bf96:	e096      	b.n	801c0c6 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 801bf98:	494f      	ldr	r1, [pc, #316]	; (801c0d8 <etharp_tmr+0x14c>)
 801bf9a:	687a      	ldr	r2, [r7, #4]
 801bf9c:	4613      	mov	r3, r2
 801bf9e:	005b      	lsls	r3, r3, #1
 801bfa0:	4413      	add	r3, r2
 801bfa2:	00db      	lsls	r3, r3, #3
 801bfa4:	440b      	add	r3, r1
 801bfa6:	3314      	adds	r3, #20
 801bfa8:	781b      	ldrb	r3, [r3, #0]
 801bfaa:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 801bfac:	78fb      	ldrb	r3, [r7, #3]
 801bfae:	2b00      	cmp	r3, #0
 801bfb0:	f000 8086 	beq.w	801c0c0 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 801bfb4:	4948      	ldr	r1, [pc, #288]	; (801c0d8 <etharp_tmr+0x14c>)
 801bfb6:	687a      	ldr	r2, [r7, #4]
 801bfb8:	4613      	mov	r3, r2
 801bfba:	005b      	lsls	r3, r3, #1
 801bfbc:	4413      	add	r3, r2
 801bfbe:	00db      	lsls	r3, r3, #3
 801bfc0:	440b      	add	r3, r1
 801bfc2:	3312      	adds	r3, #18
 801bfc4:	881b      	ldrh	r3, [r3, #0]
 801bfc6:	3301      	adds	r3, #1
 801bfc8:	b298      	uxth	r0, r3
 801bfca:	4943      	ldr	r1, [pc, #268]	; (801c0d8 <etharp_tmr+0x14c>)
 801bfcc:	687a      	ldr	r2, [r7, #4]
 801bfce:	4613      	mov	r3, r2
 801bfd0:	005b      	lsls	r3, r3, #1
 801bfd2:	4413      	add	r3, r2
 801bfd4:	00db      	lsls	r3, r3, #3
 801bfd6:	440b      	add	r3, r1
 801bfd8:	3312      	adds	r3, #18
 801bfda:	4602      	mov	r2, r0
 801bfdc:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801bfde:	493e      	ldr	r1, [pc, #248]	; (801c0d8 <etharp_tmr+0x14c>)
 801bfe0:	687a      	ldr	r2, [r7, #4]
 801bfe2:	4613      	mov	r3, r2
 801bfe4:	005b      	lsls	r3, r3, #1
 801bfe6:	4413      	add	r3, r2
 801bfe8:	00db      	lsls	r3, r3, #3
 801bfea:	440b      	add	r3, r1
 801bfec:	3312      	adds	r3, #18
 801bfee:	881b      	ldrh	r3, [r3, #0]
 801bff0:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 801bff4:	d215      	bcs.n	801c022 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801bff6:	4938      	ldr	r1, [pc, #224]	; (801c0d8 <etharp_tmr+0x14c>)
 801bff8:	687a      	ldr	r2, [r7, #4]
 801bffa:	4613      	mov	r3, r2
 801bffc:	005b      	lsls	r3, r3, #1
 801bffe:	4413      	add	r3, r2
 801c000:	00db      	lsls	r3, r3, #3
 801c002:	440b      	add	r3, r1
 801c004:	3314      	adds	r3, #20
 801c006:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801c008:	2b01      	cmp	r3, #1
 801c00a:	d10e      	bne.n	801c02a <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 801c00c:	4932      	ldr	r1, [pc, #200]	; (801c0d8 <etharp_tmr+0x14c>)
 801c00e:	687a      	ldr	r2, [r7, #4]
 801c010:	4613      	mov	r3, r2
 801c012:	005b      	lsls	r3, r3, #1
 801c014:	4413      	add	r3, r2
 801c016:	00db      	lsls	r3, r3, #3
 801c018:	440b      	add	r3, r1
 801c01a:	3312      	adds	r3, #18
 801c01c:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801c01e:	2b04      	cmp	r3, #4
 801c020:	d903      	bls.n	801c02a <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801c022:	6878      	ldr	r0, [r7, #4]
 801c024:	f7ff ff80 	bl	801bf28 <etharp_free_entry>
 801c028:	e04a      	b.n	801c0c0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801c02a:	492b      	ldr	r1, [pc, #172]	; (801c0d8 <etharp_tmr+0x14c>)
 801c02c:	687a      	ldr	r2, [r7, #4]
 801c02e:	4613      	mov	r3, r2
 801c030:	005b      	lsls	r3, r3, #1
 801c032:	4413      	add	r3, r2
 801c034:	00db      	lsls	r3, r3, #3
 801c036:	440b      	add	r3, r1
 801c038:	3314      	adds	r3, #20
 801c03a:	781b      	ldrb	r3, [r3, #0]
 801c03c:	2b03      	cmp	r3, #3
 801c03e:	d10a      	bne.n	801c056 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 801c040:	4925      	ldr	r1, [pc, #148]	; (801c0d8 <etharp_tmr+0x14c>)
 801c042:	687a      	ldr	r2, [r7, #4]
 801c044:	4613      	mov	r3, r2
 801c046:	005b      	lsls	r3, r3, #1
 801c048:	4413      	add	r3, r2
 801c04a:	00db      	lsls	r3, r3, #3
 801c04c:	440b      	add	r3, r1
 801c04e:	3314      	adds	r3, #20
 801c050:	2204      	movs	r2, #4
 801c052:	701a      	strb	r2, [r3, #0]
 801c054:	e034      	b.n	801c0c0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801c056:	4920      	ldr	r1, [pc, #128]	; (801c0d8 <etharp_tmr+0x14c>)
 801c058:	687a      	ldr	r2, [r7, #4]
 801c05a:	4613      	mov	r3, r2
 801c05c:	005b      	lsls	r3, r3, #1
 801c05e:	4413      	add	r3, r2
 801c060:	00db      	lsls	r3, r3, #3
 801c062:	440b      	add	r3, r1
 801c064:	3314      	adds	r3, #20
 801c066:	781b      	ldrb	r3, [r3, #0]
 801c068:	2b04      	cmp	r3, #4
 801c06a:	d10a      	bne.n	801c082 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 801c06c:	491a      	ldr	r1, [pc, #104]	; (801c0d8 <etharp_tmr+0x14c>)
 801c06e:	687a      	ldr	r2, [r7, #4]
 801c070:	4613      	mov	r3, r2
 801c072:	005b      	lsls	r3, r3, #1
 801c074:	4413      	add	r3, r2
 801c076:	00db      	lsls	r3, r3, #3
 801c078:	440b      	add	r3, r1
 801c07a:	3314      	adds	r3, #20
 801c07c:	2202      	movs	r2, #2
 801c07e:	701a      	strb	r2, [r3, #0]
 801c080:	e01e      	b.n	801c0c0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801c082:	4915      	ldr	r1, [pc, #84]	; (801c0d8 <etharp_tmr+0x14c>)
 801c084:	687a      	ldr	r2, [r7, #4]
 801c086:	4613      	mov	r3, r2
 801c088:	005b      	lsls	r3, r3, #1
 801c08a:	4413      	add	r3, r2
 801c08c:	00db      	lsls	r3, r3, #3
 801c08e:	440b      	add	r3, r1
 801c090:	3314      	adds	r3, #20
 801c092:	781b      	ldrb	r3, [r3, #0]
 801c094:	2b01      	cmp	r3, #1
 801c096:	d113      	bne.n	801c0c0 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 801c098:	490f      	ldr	r1, [pc, #60]	; (801c0d8 <etharp_tmr+0x14c>)
 801c09a:	687a      	ldr	r2, [r7, #4]
 801c09c:	4613      	mov	r3, r2
 801c09e:	005b      	lsls	r3, r3, #1
 801c0a0:	4413      	add	r3, r2
 801c0a2:	00db      	lsls	r3, r3, #3
 801c0a4:	440b      	add	r3, r1
 801c0a6:	3308      	adds	r3, #8
 801c0a8:	6818      	ldr	r0, [r3, #0]
 801c0aa:	687a      	ldr	r2, [r7, #4]
 801c0ac:	4613      	mov	r3, r2
 801c0ae:	005b      	lsls	r3, r3, #1
 801c0b0:	4413      	add	r3, r2
 801c0b2:	00db      	lsls	r3, r3, #3
 801c0b4:	4a08      	ldr	r2, [pc, #32]	; (801c0d8 <etharp_tmr+0x14c>)
 801c0b6:	4413      	add	r3, r2
 801c0b8:	3304      	adds	r3, #4
 801c0ba:	4619      	mov	r1, r3
 801c0bc:	f000 fe72 	bl	801cda4 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801c0c0:	687b      	ldr	r3, [r7, #4]
 801c0c2:	3301      	adds	r3, #1
 801c0c4:	607b      	str	r3, [r7, #4]
 801c0c6:	687b      	ldr	r3, [r7, #4]
 801c0c8:	2b09      	cmp	r3, #9
 801c0ca:	f77f af65 	ble.w	801bf98 <etharp_tmr+0xc>
      }
    }
  }
}
 801c0ce:	bf00      	nop
 801c0d0:	bf00      	nop
 801c0d2:	3708      	adds	r7, #8
 801c0d4:	46bd      	mov	sp, r7
 801c0d6:	bd80      	pop	{r7, pc}
 801c0d8:	24007e6c 	.word	0x24007e6c

0801c0dc <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 801c0dc:	b580      	push	{r7, lr}
 801c0de:	b08a      	sub	sp, #40	; 0x28
 801c0e0:	af00      	add	r7, sp, #0
 801c0e2:	60f8      	str	r0, [r7, #12]
 801c0e4:	460b      	mov	r3, r1
 801c0e6:	607a      	str	r2, [r7, #4]
 801c0e8:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801c0ea:	230a      	movs	r3, #10
 801c0ec:	84fb      	strh	r3, [r7, #38]	; 0x26
 801c0ee:	230a      	movs	r3, #10
 801c0f0:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801c0f2:	230a      	movs	r3, #10
 801c0f4:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 801c0f6:	2300      	movs	r3, #0
 801c0f8:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801c0fa:	230a      	movs	r3, #10
 801c0fc:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801c0fe:	2300      	movs	r3, #0
 801c100:	83bb      	strh	r3, [r7, #28]
 801c102:	2300      	movs	r3, #0
 801c104:	837b      	strh	r3, [r7, #26]
 801c106:	2300      	movs	r3, #0
 801c108:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801c10a:	2300      	movs	r3, #0
 801c10c:	843b      	strh	r3, [r7, #32]
 801c10e:	e0ae      	b.n	801c26e <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 801c110:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801c114:	49a6      	ldr	r1, [pc, #664]	; (801c3b0 <etharp_find_entry+0x2d4>)
 801c116:	4613      	mov	r3, r2
 801c118:	005b      	lsls	r3, r3, #1
 801c11a:	4413      	add	r3, r2
 801c11c:	00db      	lsls	r3, r3, #3
 801c11e:	440b      	add	r3, r1
 801c120:	3314      	adds	r3, #20
 801c122:	781b      	ldrb	r3, [r3, #0]
 801c124:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801c126:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801c12a:	2b0a      	cmp	r3, #10
 801c12c:	d105      	bne.n	801c13a <etharp_find_entry+0x5e>
 801c12e:	7dfb      	ldrb	r3, [r7, #23]
 801c130:	2b00      	cmp	r3, #0
 801c132:	d102      	bne.n	801c13a <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 801c134:	8c3b      	ldrh	r3, [r7, #32]
 801c136:	847b      	strh	r3, [r7, #34]	; 0x22
 801c138:	e095      	b.n	801c266 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801c13a:	7dfb      	ldrb	r3, [r7, #23]
 801c13c:	2b00      	cmp	r3, #0
 801c13e:	f000 8092 	beq.w	801c266 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801c142:	7dfb      	ldrb	r3, [r7, #23]
 801c144:	2b01      	cmp	r3, #1
 801c146:	d009      	beq.n	801c15c <etharp_find_entry+0x80>
 801c148:	7dfb      	ldrb	r3, [r7, #23]
 801c14a:	2b01      	cmp	r3, #1
 801c14c:	d806      	bhi.n	801c15c <etharp_find_entry+0x80>
 801c14e:	4b99      	ldr	r3, [pc, #612]	; (801c3b4 <etharp_find_entry+0x2d8>)
 801c150:	f240 1223 	movw	r2, #291	; 0x123
 801c154:	4998      	ldr	r1, [pc, #608]	; (801c3b8 <etharp_find_entry+0x2dc>)
 801c156:	4899      	ldr	r0, [pc, #612]	; (801c3bc <etharp_find_entry+0x2e0>)
 801c158:	f004 f97a 	bl	8020450 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 801c15c:	68fb      	ldr	r3, [r7, #12]
 801c15e:	2b00      	cmp	r3, #0
 801c160:	d020      	beq.n	801c1a4 <etharp_find_entry+0xc8>
 801c162:	68fb      	ldr	r3, [r7, #12]
 801c164:	6819      	ldr	r1, [r3, #0]
 801c166:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801c16a:	4891      	ldr	r0, [pc, #580]	; (801c3b0 <etharp_find_entry+0x2d4>)
 801c16c:	4613      	mov	r3, r2
 801c16e:	005b      	lsls	r3, r3, #1
 801c170:	4413      	add	r3, r2
 801c172:	00db      	lsls	r3, r3, #3
 801c174:	4403      	add	r3, r0
 801c176:	3304      	adds	r3, #4
 801c178:	681b      	ldr	r3, [r3, #0]
 801c17a:	4299      	cmp	r1, r3
 801c17c:	d112      	bne.n	801c1a4 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801c17e:	687b      	ldr	r3, [r7, #4]
 801c180:	2b00      	cmp	r3, #0
 801c182:	d00c      	beq.n	801c19e <etharp_find_entry+0xc2>
 801c184:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801c188:	4989      	ldr	r1, [pc, #548]	; (801c3b0 <etharp_find_entry+0x2d4>)
 801c18a:	4613      	mov	r3, r2
 801c18c:	005b      	lsls	r3, r3, #1
 801c18e:	4413      	add	r3, r2
 801c190:	00db      	lsls	r3, r3, #3
 801c192:	440b      	add	r3, r1
 801c194:	3308      	adds	r3, #8
 801c196:	681b      	ldr	r3, [r3, #0]
 801c198:	687a      	ldr	r2, [r7, #4]
 801c19a:	429a      	cmp	r2, r3
 801c19c:	d102      	bne.n	801c1a4 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801c19e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801c1a2:	e100      	b.n	801c3a6 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 801c1a4:	7dfb      	ldrb	r3, [r7, #23]
 801c1a6:	2b01      	cmp	r3, #1
 801c1a8:	d140      	bne.n	801c22c <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801c1aa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801c1ae:	4980      	ldr	r1, [pc, #512]	; (801c3b0 <etharp_find_entry+0x2d4>)
 801c1b0:	4613      	mov	r3, r2
 801c1b2:	005b      	lsls	r3, r3, #1
 801c1b4:	4413      	add	r3, r2
 801c1b6:	00db      	lsls	r3, r3, #3
 801c1b8:	440b      	add	r3, r1
 801c1ba:	681b      	ldr	r3, [r3, #0]
 801c1bc:	2b00      	cmp	r3, #0
 801c1be:	d01a      	beq.n	801c1f6 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 801c1c0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801c1c4:	497a      	ldr	r1, [pc, #488]	; (801c3b0 <etharp_find_entry+0x2d4>)
 801c1c6:	4613      	mov	r3, r2
 801c1c8:	005b      	lsls	r3, r3, #1
 801c1ca:	4413      	add	r3, r2
 801c1cc:	00db      	lsls	r3, r3, #3
 801c1ce:	440b      	add	r3, r1
 801c1d0:	3312      	adds	r3, #18
 801c1d2:	881b      	ldrh	r3, [r3, #0]
 801c1d4:	8bba      	ldrh	r2, [r7, #28]
 801c1d6:	429a      	cmp	r2, r3
 801c1d8:	d845      	bhi.n	801c266 <etharp_find_entry+0x18a>
            old_queue = i;
 801c1da:	8c3b      	ldrh	r3, [r7, #32]
 801c1dc:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801c1de:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801c1e2:	4973      	ldr	r1, [pc, #460]	; (801c3b0 <etharp_find_entry+0x2d4>)
 801c1e4:	4613      	mov	r3, r2
 801c1e6:	005b      	lsls	r3, r3, #1
 801c1e8:	4413      	add	r3, r2
 801c1ea:	00db      	lsls	r3, r3, #3
 801c1ec:	440b      	add	r3, r1
 801c1ee:	3312      	adds	r3, #18
 801c1f0:	881b      	ldrh	r3, [r3, #0]
 801c1f2:	83bb      	strh	r3, [r7, #28]
 801c1f4:	e037      	b.n	801c266 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801c1f6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801c1fa:	496d      	ldr	r1, [pc, #436]	; (801c3b0 <etharp_find_entry+0x2d4>)
 801c1fc:	4613      	mov	r3, r2
 801c1fe:	005b      	lsls	r3, r3, #1
 801c200:	4413      	add	r3, r2
 801c202:	00db      	lsls	r3, r3, #3
 801c204:	440b      	add	r3, r1
 801c206:	3312      	adds	r3, #18
 801c208:	881b      	ldrh	r3, [r3, #0]
 801c20a:	8b7a      	ldrh	r2, [r7, #26]
 801c20c:	429a      	cmp	r2, r3
 801c20e:	d82a      	bhi.n	801c266 <etharp_find_entry+0x18a>
            old_pending = i;
 801c210:	8c3b      	ldrh	r3, [r7, #32]
 801c212:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 801c214:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801c218:	4965      	ldr	r1, [pc, #404]	; (801c3b0 <etharp_find_entry+0x2d4>)
 801c21a:	4613      	mov	r3, r2
 801c21c:	005b      	lsls	r3, r3, #1
 801c21e:	4413      	add	r3, r2
 801c220:	00db      	lsls	r3, r3, #3
 801c222:	440b      	add	r3, r1
 801c224:	3312      	adds	r3, #18
 801c226:	881b      	ldrh	r3, [r3, #0]
 801c228:	837b      	strh	r3, [r7, #26]
 801c22a:	e01c      	b.n	801c266 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 801c22c:	7dfb      	ldrb	r3, [r7, #23]
 801c22e:	2b01      	cmp	r3, #1
 801c230:	d919      	bls.n	801c266 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801c232:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801c236:	495e      	ldr	r1, [pc, #376]	; (801c3b0 <etharp_find_entry+0x2d4>)
 801c238:	4613      	mov	r3, r2
 801c23a:	005b      	lsls	r3, r3, #1
 801c23c:	4413      	add	r3, r2
 801c23e:	00db      	lsls	r3, r3, #3
 801c240:	440b      	add	r3, r1
 801c242:	3312      	adds	r3, #18
 801c244:	881b      	ldrh	r3, [r3, #0]
 801c246:	8b3a      	ldrh	r2, [r7, #24]
 801c248:	429a      	cmp	r2, r3
 801c24a:	d80c      	bhi.n	801c266 <etharp_find_entry+0x18a>
            old_stable = i;
 801c24c:	8c3b      	ldrh	r3, [r7, #32]
 801c24e:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 801c250:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801c254:	4956      	ldr	r1, [pc, #344]	; (801c3b0 <etharp_find_entry+0x2d4>)
 801c256:	4613      	mov	r3, r2
 801c258:	005b      	lsls	r3, r3, #1
 801c25a:	4413      	add	r3, r2
 801c25c:	00db      	lsls	r3, r3, #3
 801c25e:	440b      	add	r3, r1
 801c260:	3312      	adds	r3, #18
 801c262:	881b      	ldrh	r3, [r3, #0]
 801c264:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801c266:	8c3b      	ldrh	r3, [r7, #32]
 801c268:	3301      	adds	r3, #1
 801c26a:	b29b      	uxth	r3, r3
 801c26c:	843b      	strh	r3, [r7, #32]
 801c26e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801c272:	2b09      	cmp	r3, #9
 801c274:	f77f af4c 	ble.w	801c110 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 801c278:	7afb      	ldrb	r3, [r7, #11]
 801c27a:	f003 0302 	and.w	r3, r3, #2
 801c27e:	2b00      	cmp	r3, #0
 801c280:	d108      	bne.n	801c294 <etharp_find_entry+0x1b8>
 801c282:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801c286:	2b0a      	cmp	r3, #10
 801c288:	d107      	bne.n	801c29a <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801c28a:	7afb      	ldrb	r3, [r7, #11]
 801c28c:	f003 0301 	and.w	r3, r3, #1
 801c290:	2b00      	cmp	r3, #0
 801c292:	d102      	bne.n	801c29a <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 801c294:	f04f 33ff 	mov.w	r3, #4294967295
 801c298:	e085      	b.n	801c3a6 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801c29a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801c29e:	2b09      	cmp	r3, #9
 801c2a0:	dc02      	bgt.n	801c2a8 <etharp_find_entry+0x1cc>
    i = empty;
 801c2a2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801c2a4:	843b      	strh	r3, [r7, #32]
 801c2a6:	e039      	b.n	801c31c <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 801c2a8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 801c2ac:	2b09      	cmp	r3, #9
 801c2ae:	dc14      	bgt.n	801c2da <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 801c2b0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801c2b2:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801c2b4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801c2b8:	493d      	ldr	r1, [pc, #244]	; (801c3b0 <etharp_find_entry+0x2d4>)
 801c2ba:	4613      	mov	r3, r2
 801c2bc:	005b      	lsls	r3, r3, #1
 801c2be:	4413      	add	r3, r2
 801c2c0:	00db      	lsls	r3, r3, #3
 801c2c2:	440b      	add	r3, r1
 801c2c4:	681b      	ldr	r3, [r3, #0]
 801c2c6:	2b00      	cmp	r3, #0
 801c2c8:	d018      	beq.n	801c2fc <etharp_find_entry+0x220>
 801c2ca:	4b3a      	ldr	r3, [pc, #232]	; (801c3b4 <etharp_find_entry+0x2d8>)
 801c2cc:	f240 126d 	movw	r2, #365	; 0x16d
 801c2d0:	493b      	ldr	r1, [pc, #236]	; (801c3c0 <etharp_find_entry+0x2e4>)
 801c2d2:	483a      	ldr	r0, [pc, #232]	; (801c3bc <etharp_find_entry+0x2e0>)
 801c2d4:	f004 f8bc 	bl	8020450 <iprintf>
 801c2d8:	e010      	b.n	801c2fc <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801c2da:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801c2de:	2b09      	cmp	r3, #9
 801c2e0:	dc02      	bgt.n	801c2e8 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801c2e2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801c2e4:	843b      	strh	r3, [r7, #32]
 801c2e6:	e009      	b.n	801c2fc <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 801c2e8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801c2ec:	2b09      	cmp	r3, #9
 801c2ee:	dc02      	bgt.n	801c2f6 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801c2f0:	8bfb      	ldrh	r3, [r7, #30]
 801c2f2:	843b      	strh	r3, [r7, #32]
 801c2f4:	e002      	b.n	801c2fc <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801c2f6:	f04f 33ff 	mov.w	r3, #4294967295
 801c2fa:	e054      	b.n	801c3a6 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801c2fc:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801c300:	2b09      	cmp	r3, #9
 801c302:	dd06      	ble.n	801c312 <etharp_find_entry+0x236>
 801c304:	4b2b      	ldr	r3, [pc, #172]	; (801c3b4 <etharp_find_entry+0x2d8>)
 801c306:	f240 127f 	movw	r2, #383	; 0x17f
 801c30a:	492e      	ldr	r1, [pc, #184]	; (801c3c4 <etharp_find_entry+0x2e8>)
 801c30c:	482b      	ldr	r0, [pc, #172]	; (801c3bc <etharp_find_entry+0x2e0>)
 801c30e:	f004 f89f 	bl	8020450 <iprintf>
    etharp_free_entry(i);
 801c312:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801c316:	4618      	mov	r0, r3
 801c318:	f7ff fe06 	bl	801bf28 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801c31c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801c320:	2b09      	cmp	r3, #9
 801c322:	dd06      	ble.n	801c332 <etharp_find_entry+0x256>
 801c324:	4b23      	ldr	r3, [pc, #140]	; (801c3b4 <etharp_find_entry+0x2d8>)
 801c326:	f240 1283 	movw	r2, #387	; 0x183
 801c32a:	4926      	ldr	r1, [pc, #152]	; (801c3c4 <etharp_find_entry+0x2e8>)
 801c32c:	4823      	ldr	r0, [pc, #140]	; (801c3bc <etharp_find_entry+0x2e0>)
 801c32e:	f004 f88f 	bl	8020450 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801c332:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801c336:	491e      	ldr	r1, [pc, #120]	; (801c3b0 <etharp_find_entry+0x2d4>)
 801c338:	4613      	mov	r3, r2
 801c33a:	005b      	lsls	r3, r3, #1
 801c33c:	4413      	add	r3, r2
 801c33e:	00db      	lsls	r3, r3, #3
 801c340:	440b      	add	r3, r1
 801c342:	3314      	adds	r3, #20
 801c344:	781b      	ldrb	r3, [r3, #0]
 801c346:	2b00      	cmp	r3, #0
 801c348:	d006      	beq.n	801c358 <etharp_find_entry+0x27c>
 801c34a:	4b1a      	ldr	r3, [pc, #104]	; (801c3b4 <etharp_find_entry+0x2d8>)
 801c34c:	f44f 72c2 	mov.w	r2, #388	; 0x184
 801c350:	491d      	ldr	r1, [pc, #116]	; (801c3c8 <etharp_find_entry+0x2ec>)
 801c352:	481a      	ldr	r0, [pc, #104]	; (801c3bc <etharp_find_entry+0x2e0>)
 801c354:	f004 f87c 	bl	8020450 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 801c358:	68fb      	ldr	r3, [r7, #12]
 801c35a:	2b00      	cmp	r3, #0
 801c35c:	d00b      	beq.n	801c376 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801c35e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801c362:	68fb      	ldr	r3, [r7, #12]
 801c364:	6819      	ldr	r1, [r3, #0]
 801c366:	4812      	ldr	r0, [pc, #72]	; (801c3b0 <etharp_find_entry+0x2d4>)
 801c368:	4613      	mov	r3, r2
 801c36a:	005b      	lsls	r3, r3, #1
 801c36c:	4413      	add	r3, r2
 801c36e:	00db      	lsls	r3, r3, #3
 801c370:	4403      	add	r3, r0
 801c372:	3304      	adds	r3, #4
 801c374:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801c376:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801c37a:	490d      	ldr	r1, [pc, #52]	; (801c3b0 <etharp_find_entry+0x2d4>)
 801c37c:	4613      	mov	r3, r2
 801c37e:	005b      	lsls	r3, r3, #1
 801c380:	4413      	add	r3, r2
 801c382:	00db      	lsls	r3, r3, #3
 801c384:	440b      	add	r3, r1
 801c386:	3312      	adds	r3, #18
 801c388:	2200      	movs	r2, #0
 801c38a:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 801c38c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801c390:	4907      	ldr	r1, [pc, #28]	; (801c3b0 <etharp_find_entry+0x2d4>)
 801c392:	4613      	mov	r3, r2
 801c394:	005b      	lsls	r3, r3, #1
 801c396:	4413      	add	r3, r2
 801c398:	00db      	lsls	r3, r3, #3
 801c39a:	440b      	add	r3, r1
 801c39c:	3308      	adds	r3, #8
 801c39e:	687a      	ldr	r2, [r7, #4]
 801c3a0:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801c3a2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 801c3a6:	4618      	mov	r0, r3
 801c3a8:	3728      	adds	r7, #40	; 0x28
 801c3aa:	46bd      	mov	sp, r7
 801c3ac:	bd80      	pop	{r7, pc}
 801c3ae:	bf00      	nop
 801c3b0:	24007e6c 	.word	0x24007e6c
 801c3b4:	08026814 	.word	0x08026814
 801c3b8:	0802684c 	.word	0x0802684c
 801c3bc:	0802688c 	.word	0x0802688c
 801c3c0:	080268b4 	.word	0x080268b4
 801c3c4:	080268cc 	.word	0x080268cc
 801c3c8:	080268e0 	.word	0x080268e0

0801c3cc <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 801c3cc:	b580      	push	{r7, lr}
 801c3ce:	b088      	sub	sp, #32
 801c3d0:	af02      	add	r7, sp, #8
 801c3d2:	60f8      	str	r0, [r7, #12]
 801c3d4:	60b9      	str	r1, [r7, #8]
 801c3d6:	607a      	str	r2, [r7, #4]
 801c3d8:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801c3da:	68fb      	ldr	r3, [r7, #12]
 801c3dc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801c3e0:	2b06      	cmp	r3, #6
 801c3e2:	d006      	beq.n	801c3f2 <etharp_update_arp_entry+0x26>
 801c3e4:	4b48      	ldr	r3, [pc, #288]	; (801c508 <etharp_update_arp_entry+0x13c>)
 801c3e6:	f240 12a9 	movw	r2, #425	; 0x1a9
 801c3ea:	4948      	ldr	r1, [pc, #288]	; (801c50c <etharp_update_arp_entry+0x140>)
 801c3ec:	4848      	ldr	r0, [pc, #288]	; (801c510 <etharp_update_arp_entry+0x144>)
 801c3ee:	f004 f82f 	bl	8020450 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801c3f2:	68bb      	ldr	r3, [r7, #8]
 801c3f4:	2b00      	cmp	r3, #0
 801c3f6:	d012      	beq.n	801c41e <etharp_update_arp_entry+0x52>
 801c3f8:	68bb      	ldr	r3, [r7, #8]
 801c3fa:	681b      	ldr	r3, [r3, #0]
 801c3fc:	2b00      	cmp	r3, #0
 801c3fe:	d00e      	beq.n	801c41e <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801c400:	68bb      	ldr	r3, [r7, #8]
 801c402:	681b      	ldr	r3, [r3, #0]
 801c404:	68f9      	ldr	r1, [r7, #12]
 801c406:	4618      	mov	r0, r3
 801c408:	f001 f946 	bl	801d698 <ip4_addr_isbroadcast_u32>
 801c40c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801c40e:	2b00      	cmp	r3, #0
 801c410:	d105      	bne.n	801c41e <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801c412:	68bb      	ldr	r3, [r7, #8]
 801c414:	681b      	ldr	r3, [r3, #0]
 801c416:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801c41a:	2be0      	cmp	r3, #224	; 0xe0
 801c41c:	d102      	bne.n	801c424 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801c41e:	f06f 030f 	mvn.w	r3, #15
 801c422:	e06c      	b.n	801c4fe <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 801c424:	78fb      	ldrb	r3, [r7, #3]
 801c426:	68fa      	ldr	r2, [r7, #12]
 801c428:	4619      	mov	r1, r3
 801c42a:	68b8      	ldr	r0, [r7, #8]
 801c42c:	f7ff fe56 	bl	801c0dc <etharp_find_entry>
 801c430:	4603      	mov	r3, r0
 801c432:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 801c434:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801c438:	2b00      	cmp	r3, #0
 801c43a:	da02      	bge.n	801c442 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 801c43c:	8afb      	ldrh	r3, [r7, #22]
 801c43e:	b25b      	sxtb	r3, r3
 801c440:	e05d      	b.n	801c4fe <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801c442:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801c446:	4933      	ldr	r1, [pc, #204]	; (801c514 <etharp_update_arp_entry+0x148>)
 801c448:	4613      	mov	r3, r2
 801c44a:	005b      	lsls	r3, r3, #1
 801c44c:	4413      	add	r3, r2
 801c44e:	00db      	lsls	r3, r3, #3
 801c450:	440b      	add	r3, r1
 801c452:	3314      	adds	r3, #20
 801c454:	2202      	movs	r2, #2
 801c456:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 801c458:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801c45c:	492d      	ldr	r1, [pc, #180]	; (801c514 <etharp_update_arp_entry+0x148>)
 801c45e:	4613      	mov	r3, r2
 801c460:	005b      	lsls	r3, r3, #1
 801c462:	4413      	add	r3, r2
 801c464:	00db      	lsls	r3, r3, #3
 801c466:	440b      	add	r3, r1
 801c468:	3308      	adds	r3, #8
 801c46a:	68fa      	ldr	r2, [r7, #12]
 801c46c:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801c46e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801c472:	4613      	mov	r3, r2
 801c474:	005b      	lsls	r3, r3, #1
 801c476:	4413      	add	r3, r2
 801c478:	00db      	lsls	r3, r3, #3
 801c47a:	3308      	adds	r3, #8
 801c47c:	4a25      	ldr	r2, [pc, #148]	; (801c514 <etharp_update_arp_entry+0x148>)
 801c47e:	4413      	add	r3, r2
 801c480:	3304      	adds	r3, #4
 801c482:	2206      	movs	r2, #6
 801c484:	6879      	ldr	r1, [r7, #4]
 801c486:	4618      	mov	r0, r3
 801c488:	f004 f913 	bl	80206b2 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 801c48c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801c490:	4920      	ldr	r1, [pc, #128]	; (801c514 <etharp_update_arp_entry+0x148>)
 801c492:	4613      	mov	r3, r2
 801c494:	005b      	lsls	r3, r3, #1
 801c496:	4413      	add	r3, r2
 801c498:	00db      	lsls	r3, r3, #3
 801c49a:	440b      	add	r3, r1
 801c49c:	3312      	adds	r3, #18
 801c49e:	2200      	movs	r2, #0
 801c4a0:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801c4a2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801c4a6:	491b      	ldr	r1, [pc, #108]	; (801c514 <etharp_update_arp_entry+0x148>)
 801c4a8:	4613      	mov	r3, r2
 801c4aa:	005b      	lsls	r3, r3, #1
 801c4ac:	4413      	add	r3, r2
 801c4ae:	00db      	lsls	r3, r3, #3
 801c4b0:	440b      	add	r3, r1
 801c4b2:	681b      	ldr	r3, [r3, #0]
 801c4b4:	2b00      	cmp	r3, #0
 801c4b6:	d021      	beq.n	801c4fc <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 801c4b8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801c4bc:	4915      	ldr	r1, [pc, #84]	; (801c514 <etharp_update_arp_entry+0x148>)
 801c4be:	4613      	mov	r3, r2
 801c4c0:	005b      	lsls	r3, r3, #1
 801c4c2:	4413      	add	r3, r2
 801c4c4:	00db      	lsls	r3, r3, #3
 801c4c6:	440b      	add	r3, r1
 801c4c8:	681b      	ldr	r3, [r3, #0]
 801c4ca:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 801c4cc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801c4d0:	4910      	ldr	r1, [pc, #64]	; (801c514 <etharp_update_arp_entry+0x148>)
 801c4d2:	4613      	mov	r3, r2
 801c4d4:	005b      	lsls	r3, r3, #1
 801c4d6:	4413      	add	r3, r2
 801c4d8:	00db      	lsls	r3, r3, #3
 801c4da:	440b      	add	r3, r1
 801c4dc:	2200      	movs	r2, #0
 801c4de:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 801c4e0:	68fb      	ldr	r3, [r7, #12]
 801c4e2:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 801c4e6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801c4ea:	9300      	str	r3, [sp, #0]
 801c4ec:	687b      	ldr	r3, [r7, #4]
 801c4ee:	6939      	ldr	r1, [r7, #16]
 801c4f0:	68f8      	ldr	r0, [r7, #12]
 801c4f2:	f001 ffdf 	bl	801e4b4 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801c4f6:	6938      	ldr	r0, [r7, #16]
 801c4f8:	f7f6 fc80 	bl	8012dfc <pbuf_free>
  }
  return ERR_OK;
 801c4fc:	2300      	movs	r3, #0
}
 801c4fe:	4618      	mov	r0, r3
 801c500:	3718      	adds	r7, #24
 801c502:	46bd      	mov	sp, r7
 801c504:	bd80      	pop	{r7, pc}
 801c506:	bf00      	nop
 801c508:	08026814 	.word	0x08026814
 801c50c:	0802690c 	.word	0x0802690c
 801c510:	0802688c 	.word	0x0802688c
 801c514:	24007e6c 	.word	0x24007e6c

0801c518 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 801c518:	b580      	push	{r7, lr}
 801c51a:	b084      	sub	sp, #16
 801c51c:	af00      	add	r7, sp, #0
 801c51e:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801c520:	2300      	movs	r3, #0
 801c522:	60fb      	str	r3, [r7, #12]
 801c524:	e01e      	b.n	801c564 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801c526:	4913      	ldr	r1, [pc, #76]	; (801c574 <etharp_cleanup_netif+0x5c>)
 801c528:	68fa      	ldr	r2, [r7, #12]
 801c52a:	4613      	mov	r3, r2
 801c52c:	005b      	lsls	r3, r3, #1
 801c52e:	4413      	add	r3, r2
 801c530:	00db      	lsls	r3, r3, #3
 801c532:	440b      	add	r3, r1
 801c534:	3314      	adds	r3, #20
 801c536:	781b      	ldrb	r3, [r3, #0]
 801c538:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801c53a:	7afb      	ldrb	r3, [r7, #11]
 801c53c:	2b00      	cmp	r3, #0
 801c53e:	d00e      	beq.n	801c55e <etharp_cleanup_netif+0x46>
 801c540:	490c      	ldr	r1, [pc, #48]	; (801c574 <etharp_cleanup_netif+0x5c>)
 801c542:	68fa      	ldr	r2, [r7, #12]
 801c544:	4613      	mov	r3, r2
 801c546:	005b      	lsls	r3, r3, #1
 801c548:	4413      	add	r3, r2
 801c54a:	00db      	lsls	r3, r3, #3
 801c54c:	440b      	add	r3, r1
 801c54e:	3308      	adds	r3, #8
 801c550:	681b      	ldr	r3, [r3, #0]
 801c552:	687a      	ldr	r2, [r7, #4]
 801c554:	429a      	cmp	r2, r3
 801c556:	d102      	bne.n	801c55e <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 801c558:	68f8      	ldr	r0, [r7, #12]
 801c55a:	f7ff fce5 	bl	801bf28 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801c55e:	68fb      	ldr	r3, [r7, #12]
 801c560:	3301      	adds	r3, #1
 801c562:	60fb      	str	r3, [r7, #12]
 801c564:	68fb      	ldr	r3, [r7, #12]
 801c566:	2b09      	cmp	r3, #9
 801c568:	dddd      	ble.n	801c526 <etharp_cleanup_netif+0xe>
    }
  }
}
 801c56a:	bf00      	nop
 801c56c:	bf00      	nop
 801c56e:	3710      	adds	r7, #16
 801c570:	46bd      	mov	sp, r7
 801c572:	bd80      	pop	{r7, pc}
 801c574:	24007e6c 	.word	0x24007e6c

0801c578 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 801c578:	b5b0      	push	{r4, r5, r7, lr}
 801c57a:	b08a      	sub	sp, #40	; 0x28
 801c57c:	af04      	add	r7, sp, #16
 801c57e:	6078      	str	r0, [r7, #4]
 801c580:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801c582:	683b      	ldr	r3, [r7, #0]
 801c584:	2b00      	cmp	r3, #0
 801c586:	d107      	bne.n	801c598 <etharp_input+0x20>
 801c588:	4b3f      	ldr	r3, [pc, #252]	; (801c688 <etharp_input+0x110>)
 801c58a:	f240 228a 	movw	r2, #650	; 0x28a
 801c58e:	493f      	ldr	r1, [pc, #252]	; (801c68c <etharp_input+0x114>)
 801c590:	483f      	ldr	r0, [pc, #252]	; (801c690 <etharp_input+0x118>)
 801c592:	f003 ff5d 	bl	8020450 <iprintf>
 801c596:	e074      	b.n	801c682 <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 801c598:	687b      	ldr	r3, [r7, #4]
 801c59a:	685b      	ldr	r3, [r3, #4]
 801c59c:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801c59e:	693b      	ldr	r3, [r7, #16]
 801c5a0:	881b      	ldrh	r3, [r3, #0]
 801c5a2:	b29b      	uxth	r3, r3
 801c5a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801c5a8:	d10c      	bne.n	801c5c4 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801c5aa:	693b      	ldr	r3, [r7, #16]
 801c5ac:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801c5ae:	2b06      	cmp	r3, #6
 801c5b0:	d108      	bne.n	801c5c4 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801c5b2:	693b      	ldr	r3, [r7, #16]
 801c5b4:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801c5b6:	2b04      	cmp	r3, #4
 801c5b8:	d104      	bne.n	801c5c4 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801c5ba:	693b      	ldr	r3, [r7, #16]
 801c5bc:	885b      	ldrh	r3, [r3, #2]
 801c5be:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801c5c0:	2b08      	cmp	r3, #8
 801c5c2:	d003      	beq.n	801c5cc <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 801c5c4:	6878      	ldr	r0, [r7, #4]
 801c5c6:	f7f6 fc19 	bl	8012dfc <pbuf_free>
    return;
 801c5ca:	e05a      	b.n	801c682 <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 801c5cc:	693b      	ldr	r3, [r7, #16]
 801c5ce:	330e      	adds	r3, #14
 801c5d0:	681b      	ldr	r3, [r3, #0]
 801c5d2:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 801c5d4:	693b      	ldr	r3, [r7, #16]
 801c5d6:	3318      	adds	r3, #24
 801c5d8:	681b      	ldr	r3, [r3, #0]
 801c5da:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801c5dc:	683b      	ldr	r3, [r7, #0]
 801c5de:	3304      	adds	r3, #4
 801c5e0:	681b      	ldr	r3, [r3, #0]
 801c5e2:	2b00      	cmp	r3, #0
 801c5e4:	d102      	bne.n	801c5ec <etharp_input+0x74>
    for_us = 0;
 801c5e6:	2300      	movs	r3, #0
 801c5e8:	75fb      	strb	r3, [r7, #23]
 801c5ea:	e009      	b.n	801c600 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 801c5ec:	68ba      	ldr	r2, [r7, #8]
 801c5ee:	683b      	ldr	r3, [r7, #0]
 801c5f0:	3304      	adds	r3, #4
 801c5f2:	681b      	ldr	r3, [r3, #0]
 801c5f4:	429a      	cmp	r2, r3
 801c5f6:	bf0c      	ite	eq
 801c5f8:	2301      	moveq	r3, #1
 801c5fa:	2300      	movne	r3, #0
 801c5fc:	b2db      	uxtb	r3, r3
 801c5fe:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801c600:	693b      	ldr	r3, [r7, #16]
 801c602:	f103 0208 	add.w	r2, r3, #8
 801c606:	7dfb      	ldrb	r3, [r7, #23]
 801c608:	2b00      	cmp	r3, #0
 801c60a:	d001      	beq.n	801c610 <etharp_input+0x98>
 801c60c:	2301      	movs	r3, #1
 801c60e:	e000      	b.n	801c612 <etharp_input+0x9a>
 801c610:	2302      	movs	r3, #2
 801c612:	f107 010c 	add.w	r1, r7, #12
 801c616:	6838      	ldr	r0, [r7, #0]
 801c618:	f7ff fed8 	bl	801c3cc <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 801c61c:	693b      	ldr	r3, [r7, #16]
 801c61e:	88db      	ldrh	r3, [r3, #6]
 801c620:	b29b      	uxth	r3, r3
 801c622:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801c626:	d003      	beq.n	801c630 <etharp_input+0xb8>
 801c628:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801c62c:	d01e      	beq.n	801c66c <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801c62e:	e025      	b.n	801c67c <etharp_input+0x104>
      if (for_us) {
 801c630:	7dfb      	ldrb	r3, [r7, #23]
 801c632:	2b00      	cmp	r3, #0
 801c634:	d021      	beq.n	801c67a <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801c636:	683b      	ldr	r3, [r7, #0]
 801c638:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 801c63c:	693b      	ldr	r3, [r7, #16]
 801c63e:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801c642:	683b      	ldr	r3, [r7, #0]
 801c644:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 801c648:	683b      	ldr	r3, [r7, #0]
 801c64a:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 801c64c:	693a      	ldr	r2, [r7, #16]
 801c64e:	3208      	adds	r2, #8
        etharp_raw(netif,
 801c650:	2102      	movs	r1, #2
 801c652:	9103      	str	r1, [sp, #12]
 801c654:	f107 010c 	add.w	r1, r7, #12
 801c658:	9102      	str	r1, [sp, #8]
 801c65a:	9201      	str	r2, [sp, #4]
 801c65c:	9300      	str	r3, [sp, #0]
 801c65e:	462b      	mov	r3, r5
 801c660:	4622      	mov	r2, r4
 801c662:	4601      	mov	r1, r0
 801c664:	6838      	ldr	r0, [r7, #0]
 801c666:	f000 faef 	bl	801cc48 <etharp_raw>
      break;
 801c66a:	e006      	b.n	801c67a <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 801c66c:	f107 030c 	add.w	r3, r7, #12
 801c670:	4619      	mov	r1, r3
 801c672:	6838      	ldr	r0, [r7, #0]
 801c674:	f7fe f9fc 	bl	801aa70 <dhcp_arp_reply>
      break;
 801c678:	e000      	b.n	801c67c <etharp_input+0x104>
      break;
 801c67a:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801c67c:	6878      	ldr	r0, [r7, #4]
 801c67e:	f7f6 fbbd 	bl	8012dfc <pbuf_free>
}
 801c682:	3718      	adds	r7, #24
 801c684:	46bd      	mov	sp, r7
 801c686:	bdb0      	pop	{r4, r5, r7, pc}
 801c688:	08026814 	.word	0x08026814
 801c68c:	08026964 	.word	0x08026964
 801c690:	0802688c 	.word	0x0802688c

0801c694 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 801c694:	b580      	push	{r7, lr}
 801c696:	b086      	sub	sp, #24
 801c698:	af02      	add	r7, sp, #8
 801c69a:	60f8      	str	r0, [r7, #12]
 801c69c:	60b9      	str	r1, [r7, #8]
 801c69e:	4613      	mov	r3, r2
 801c6a0:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801c6a2:	79fa      	ldrb	r2, [r7, #7]
 801c6a4:	4944      	ldr	r1, [pc, #272]	; (801c7b8 <etharp_output_to_arp_index+0x124>)
 801c6a6:	4613      	mov	r3, r2
 801c6a8:	005b      	lsls	r3, r3, #1
 801c6aa:	4413      	add	r3, r2
 801c6ac:	00db      	lsls	r3, r3, #3
 801c6ae:	440b      	add	r3, r1
 801c6b0:	3314      	adds	r3, #20
 801c6b2:	781b      	ldrb	r3, [r3, #0]
 801c6b4:	2b01      	cmp	r3, #1
 801c6b6:	d806      	bhi.n	801c6c6 <etharp_output_to_arp_index+0x32>
 801c6b8:	4b40      	ldr	r3, [pc, #256]	; (801c7bc <etharp_output_to_arp_index+0x128>)
 801c6ba:	f240 22ee 	movw	r2, #750	; 0x2ee
 801c6be:	4940      	ldr	r1, [pc, #256]	; (801c7c0 <etharp_output_to_arp_index+0x12c>)
 801c6c0:	4840      	ldr	r0, [pc, #256]	; (801c7c4 <etharp_output_to_arp_index+0x130>)
 801c6c2:	f003 fec5 	bl	8020450 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801c6c6:	79fa      	ldrb	r2, [r7, #7]
 801c6c8:	493b      	ldr	r1, [pc, #236]	; (801c7b8 <etharp_output_to_arp_index+0x124>)
 801c6ca:	4613      	mov	r3, r2
 801c6cc:	005b      	lsls	r3, r3, #1
 801c6ce:	4413      	add	r3, r2
 801c6d0:	00db      	lsls	r3, r3, #3
 801c6d2:	440b      	add	r3, r1
 801c6d4:	3314      	adds	r3, #20
 801c6d6:	781b      	ldrb	r3, [r3, #0]
 801c6d8:	2b02      	cmp	r3, #2
 801c6da:	d153      	bne.n	801c784 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 801c6dc:	79fa      	ldrb	r2, [r7, #7]
 801c6de:	4936      	ldr	r1, [pc, #216]	; (801c7b8 <etharp_output_to_arp_index+0x124>)
 801c6e0:	4613      	mov	r3, r2
 801c6e2:	005b      	lsls	r3, r3, #1
 801c6e4:	4413      	add	r3, r2
 801c6e6:	00db      	lsls	r3, r3, #3
 801c6e8:	440b      	add	r3, r1
 801c6ea:	3312      	adds	r3, #18
 801c6ec:	881b      	ldrh	r3, [r3, #0]
 801c6ee:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 801c6f2:	d919      	bls.n	801c728 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801c6f4:	79fa      	ldrb	r2, [r7, #7]
 801c6f6:	4613      	mov	r3, r2
 801c6f8:	005b      	lsls	r3, r3, #1
 801c6fa:	4413      	add	r3, r2
 801c6fc:	00db      	lsls	r3, r3, #3
 801c6fe:	4a2e      	ldr	r2, [pc, #184]	; (801c7b8 <etharp_output_to_arp_index+0x124>)
 801c700:	4413      	add	r3, r2
 801c702:	3304      	adds	r3, #4
 801c704:	4619      	mov	r1, r3
 801c706:	68f8      	ldr	r0, [r7, #12]
 801c708:	f000 fb4c 	bl	801cda4 <etharp_request>
 801c70c:	4603      	mov	r3, r0
 801c70e:	2b00      	cmp	r3, #0
 801c710:	d138      	bne.n	801c784 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801c712:	79fa      	ldrb	r2, [r7, #7]
 801c714:	4928      	ldr	r1, [pc, #160]	; (801c7b8 <etharp_output_to_arp_index+0x124>)
 801c716:	4613      	mov	r3, r2
 801c718:	005b      	lsls	r3, r3, #1
 801c71a:	4413      	add	r3, r2
 801c71c:	00db      	lsls	r3, r3, #3
 801c71e:	440b      	add	r3, r1
 801c720:	3314      	adds	r3, #20
 801c722:	2203      	movs	r2, #3
 801c724:	701a      	strb	r2, [r3, #0]
 801c726:	e02d      	b.n	801c784 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 801c728:	79fa      	ldrb	r2, [r7, #7]
 801c72a:	4923      	ldr	r1, [pc, #140]	; (801c7b8 <etharp_output_to_arp_index+0x124>)
 801c72c:	4613      	mov	r3, r2
 801c72e:	005b      	lsls	r3, r3, #1
 801c730:	4413      	add	r3, r2
 801c732:	00db      	lsls	r3, r3, #3
 801c734:	440b      	add	r3, r1
 801c736:	3312      	adds	r3, #18
 801c738:	881b      	ldrh	r3, [r3, #0]
 801c73a:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 801c73e:	d321      	bcc.n	801c784 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801c740:	79fa      	ldrb	r2, [r7, #7]
 801c742:	4613      	mov	r3, r2
 801c744:	005b      	lsls	r3, r3, #1
 801c746:	4413      	add	r3, r2
 801c748:	00db      	lsls	r3, r3, #3
 801c74a:	4a1b      	ldr	r2, [pc, #108]	; (801c7b8 <etharp_output_to_arp_index+0x124>)
 801c74c:	4413      	add	r3, r2
 801c74e:	1d19      	adds	r1, r3, #4
 801c750:	79fa      	ldrb	r2, [r7, #7]
 801c752:	4613      	mov	r3, r2
 801c754:	005b      	lsls	r3, r3, #1
 801c756:	4413      	add	r3, r2
 801c758:	00db      	lsls	r3, r3, #3
 801c75a:	3308      	adds	r3, #8
 801c75c:	4a16      	ldr	r2, [pc, #88]	; (801c7b8 <etharp_output_to_arp_index+0x124>)
 801c75e:	4413      	add	r3, r2
 801c760:	3304      	adds	r3, #4
 801c762:	461a      	mov	r2, r3
 801c764:	68f8      	ldr	r0, [r7, #12]
 801c766:	f000 fafb 	bl	801cd60 <etharp_request_dst>
 801c76a:	4603      	mov	r3, r0
 801c76c:	2b00      	cmp	r3, #0
 801c76e:	d109      	bne.n	801c784 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801c770:	79fa      	ldrb	r2, [r7, #7]
 801c772:	4911      	ldr	r1, [pc, #68]	; (801c7b8 <etharp_output_to_arp_index+0x124>)
 801c774:	4613      	mov	r3, r2
 801c776:	005b      	lsls	r3, r3, #1
 801c778:	4413      	add	r3, r2
 801c77a:	00db      	lsls	r3, r3, #3
 801c77c:	440b      	add	r3, r1
 801c77e:	3314      	adds	r3, #20
 801c780:	2203      	movs	r2, #3
 801c782:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801c784:	68fb      	ldr	r3, [r7, #12]
 801c786:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 801c78a:	79fa      	ldrb	r2, [r7, #7]
 801c78c:	4613      	mov	r3, r2
 801c78e:	005b      	lsls	r3, r3, #1
 801c790:	4413      	add	r3, r2
 801c792:	00db      	lsls	r3, r3, #3
 801c794:	3308      	adds	r3, #8
 801c796:	4a08      	ldr	r2, [pc, #32]	; (801c7b8 <etharp_output_to_arp_index+0x124>)
 801c798:	4413      	add	r3, r2
 801c79a:	3304      	adds	r3, #4
 801c79c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801c7a0:	9200      	str	r2, [sp, #0]
 801c7a2:	460a      	mov	r2, r1
 801c7a4:	68b9      	ldr	r1, [r7, #8]
 801c7a6:	68f8      	ldr	r0, [r7, #12]
 801c7a8:	f001 fe84 	bl	801e4b4 <ethernet_output>
 801c7ac:	4603      	mov	r3, r0
}
 801c7ae:	4618      	mov	r0, r3
 801c7b0:	3710      	adds	r7, #16
 801c7b2:	46bd      	mov	sp, r7
 801c7b4:	bd80      	pop	{r7, pc}
 801c7b6:	bf00      	nop
 801c7b8:	24007e6c 	.word	0x24007e6c
 801c7bc:	08026814 	.word	0x08026814
 801c7c0:	08026984 	.word	0x08026984
 801c7c4:	0802688c 	.word	0x0802688c

0801c7c8 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 801c7c8:	b580      	push	{r7, lr}
 801c7ca:	b08a      	sub	sp, #40	; 0x28
 801c7cc:	af02      	add	r7, sp, #8
 801c7ce:	60f8      	str	r0, [r7, #12]
 801c7d0:	60b9      	str	r1, [r7, #8]
 801c7d2:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801c7d4:	687b      	ldr	r3, [r7, #4]
 801c7d6:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801c7d8:	68fb      	ldr	r3, [r7, #12]
 801c7da:	2b00      	cmp	r3, #0
 801c7dc:	d106      	bne.n	801c7ec <etharp_output+0x24>
 801c7de:	4b73      	ldr	r3, [pc, #460]	; (801c9ac <etharp_output+0x1e4>)
 801c7e0:	f240 321e 	movw	r2, #798	; 0x31e
 801c7e4:	4972      	ldr	r1, [pc, #456]	; (801c9b0 <etharp_output+0x1e8>)
 801c7e6:	4873      	ldr	r0, [pc, #460]	; (801c9b4 <etharp_output+0x1ec>)
 801c7e8:	f003 fe32 	bl	8020450 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 801c7ec:	68bb      	ldr	r3, [r7, #8]
 801c7ee:	2b00      	cmp	r3, #0
 801c7f0:	d106      	bne.n	801c800 <etharp_output+0x38>
 801c7f2:	4b6e      	ldr	r3, [pc, #440]	; (801c9ac <etharp_output+0x1e4>)
 801c7f4:	f240 321f 	movw	r2, #799	; 0x31f
 801c7f8:	496f      	ldr	r1, [pc, #444]	; (801c9b8 <etharp_output+0x1f0>)
 801c7fa:	486e      	ldr	r0, [pc, #440]	; (801c9b4 <etharp_output+0x1ec>)
 801c7fc:	f003 fe28 	bl	8020450 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801c800:	687b      	ldr	r3, [r7, #4]
 801c802:	2b00      	cmp	r3, #0
 801c804:	d106      	bne.n	801c814 <etharp_output+0x4c>
 801c806:	4b69      	ldr	r3, [pc, #420]	; (801c9ac <etharp_output+0x1e4>)
 801c808:	f44f 7248 	mov.w	r2, #800	; 0x320
 801c80c:	496b      	ldr	r1, [pc, #428]	; (801c9bc <etharp_output+0x1f4>)
 801c80e:	4869      	ldr	r0, [pc, #420]	; (801c9b4 <etharp_output+0x1ec>)
 801c810:	f003 fe1e 	bl	8020450 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801c814:	687b      	ldr	r3, [r7, #4]
 801c816:	681b      	ldr	r3, [r3, #0]
 801c818:	68f9      	ldr	r1, [r7, #12]
 801c81a:	4618      	mov	r0, r3
 801c81c:	f000 ff3c 	bl	801d698 <ip4_addr_isbroadcast_u32>
 801c820:	4603      	mov	r3, r0
 801c822:	2b00      	cmp	r3, #0
 801c824:	d002      	beq.n	801c82c <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801c826:	4b66      	ldr	r3, [pc, #408]	; (801c9c0 <etharp_output+0x1f8>)
 801c828:	61fb      	str	r3, [r7, #28]
 801c82a:	e0af      	b.n	801c98c <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801c82c:	687b      	ldr	r3, [r7, #4]
 801c82e:	681b      	ldr	r3, [r3, #0]
 801c830:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801c834:	2be0      	cmp	r3, #224	; 0xe0
 801c836:	d118      	bne.n	801c86a <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801c838:	2301      	movs	r3, #1
 801c83a:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801c83c:	2300      	movs	r3, #0
 801c83e:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 801c840:	235e      	movs	r3, #94	; 0x5e
 801c842:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801c844:	687b      	ldr	r3, [r7, #4]
 801c846:	3301      	adds	r3, #1
 801c848:	781b      	ldrb	r3, [r3, #0]
 801c84a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801c84e:	b2db      	uxtb	r3, r3
 801c850:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801c852:	687b      	ldr	r3, [r7, #4]
 801c854:	3302      	adds	r3, #2
 801c856:	781b      	ldrb	r3, [r3, #0]
 801c858:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801c85a:	687b      	ldr	r3, [r7, #4]
 801c85c:	3303      	adds	r3, #3
 801c85e:	781b      	ldrb	r3, [r3, #0]
 801c860:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801c862:	f107 0310 	add.w	r3, r7, #16
 801c866:	61fb      	str	r3, [r7, #28]
 801c868:	e090      	b.n	801c98c <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801c86a:	687b      	ldr	r3, [r7, #4]
 801c86c:	681a      	ldr	r2, [r3, #0]
 801c86e:	68fb      	ldr	r3, [r7, #12]
 801c870:	3304      	adds	r3, #4
 801c872:	681b      	ldr	r3, [r3, #0]
 801c874:	405a      	eors	r2, r3
 801c876:	68fb      	ldr	r3, [r7, #12]
 801c878:	3308      	adds	r3, #8
 801c87a:	681b      	ldr	r3, [r3, #0]
 801c87c:	4013      	ands	r3, r2
 801c87e:	2b00      	cmp	r3, #0
 801c880:	d012      	beq.n	801c8a8 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801c882:	687b      	ldr	r3, [r7, #4]
 801c884:	681b      	ldr	r3, [r3, #0]
 801c886:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801c888:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 801c88c:	4293      	cmp	r3, r2
 801c88e:	d00b      	beq.n	801c8a8 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801c890:	68fb      	ldr	r3, [r7, #12]
 801c892:	330c      	adds	r3, #12
 801c894:	681b      	ldr	r3, [r3, #0]
 801c896:	2b00      	cmp	r3, #0
 801c898:	d003      	beq.n	801c8a2 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801c89a:	68fb      	ldr	r3, [r7, #12]
 801c89c:	330c      	adds	r3, #12
 801c89e:	61bb      	str	r3, [r7, #24]
 801c8a0:	e002      	b.n	801c8a8 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801c8a2:	f06f 0303 	mvn.w	r3, #3
 801c8a6:	e07d      	b.n	801c9a4 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801c8a8:	4b46      	ldr	r3, [pc, #280]	; (801c9c4 <etharp_output+0x1fc>)
 801c8aa:	781b      	ldrb	r3, [r3, #0]
 801c8ac:	4619      	mov	r1, r3
 801c8ae:	4a46      	ldr	r2, [pc, #280]	; (801c9c8 <etharp_output+0x200>)
 801c8b0:	460b      	mov	r3, r1
 801c8b2:	005b      	lsls	r3, r3, #1
 801c8b4:	440b      	add	r3, r1
 801c8b6:	00db      	lsls	r3, r3, #3
 801c8b8:	4413      	add	r3, r2
 801c8ba:	3314      	adds	r3, #20
 801c8bc:	781b      	ldrb	r3, [r3, #0]
 801c8be:	2b01      	cmp	r3, #1
 801c8c0:	d925      	bls.n	801c90e <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801c8c2:	4b40      	ldr	r3, [pc, #256]	; (801c9c4 <etharp_output+0x1fc>)
 801c8c4:	781b      	ldrb	r3, [r3, #0]
 801c8c6:	4619      	mov	r1, r3
 801c8c8:	4a3f      	ldr	r2, [pc, #252]	; (801c9c8 <etharp_output+0x200>)
 801c8ca:	460b      	mov	r3, r1
 801c8cc:	005b      	lsls	r3, r3, #1
 801c8ce:	440b      	add	r3, r1
 801c8d0:	00db      	lsls	r3, r3, #3
 801c8d2:	4413      	add	r3, r2
 801c8d4:	3308      	adds	r3, #8
 801c8d6:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801c8d8:	68fa      	ldr	r2, [r7, #12]
 801c8da:	429a      	cmp	r2, r3
 801c8dc:	d117      	bne.n	801c90e <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801c8de:	69bb      	ldr	r3, [r7, #24]
 801c8e0:	681a      	ldr	r2, [r3, #0]
 801c8e2:	4b38      	ldr	r3, [pc, #224]	; (801c9c4 <etharp_output+0x1fc>)
 801c8e4:	781b      	ldrb	r3, [r3, #0]
 801c8e6:	4618      	mov	r0, r3
 801c8e8:	4937      	ldr	r1, [pc, #220]	; (801c9c8 <etharp_output+0x200>)
 801c8ea:	4603      	mov	r3, r0
 801c8ec:	005b      	lsls	r3, r3, #1
 801c8ee:	4403      	add	r3, r0
 801c8f0:	00db      	lsls	r3, r3, #3
 801c8f2:	440b      	add	r3, r1
 801c8f4:	3304      	adds	r3, #4
 801c8f6:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 801c8f8:	429a      	cmp	r2, r3
 801c8fa:	d108      	bne.n	801c90e <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 801c8fc:	4b31      	ldr	r3, [pc, #196]	; (801c9c4 <etharp_output+0x1fc>)
 801c8fe:	781b      	ldrb	r3, [r3, #0]
 801c900:	461a      	mov	r2, r3
 801c902:	68b9      	ldr	r1, [r7, #8]
 801c904:	68f8      	ldr	r0, [r7, #12]
 801c906:	f7ff fec5 	bl	801c694 <etharp_output_to_arp_index>
 801c90a:	4603      	mov	r3, r0
 801c90c:	e04a      	b.n	801c9a4 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801c90e:	2300      	movs	r3, #0
 801c910:	75fb      	strb	r3, [r7, #23]
 801c912:	e031      	b.n	801c978 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801c914:	7dfa      	ldrb	r2, [r7, #23]
 801c916:	492c      	ldr	r1, [pc, #176]	; (801c9c8 <etharp_output+0x200>)
 801c918:	4613      	mov	r3, r2
 801c91a:	005b      	lsls	r3, r3, #1
 801c91c:	4413      	add	r3, r2
 801c91e:	00db      	lsls	r3, r3, #3
 801c920:	440b      	add	r3, r1
 801c922:	3314      	adds	r3, #20
 801c924:	781b      	ldrb	r3, [r3, #0]
 801c926:	2b01      	cmp	r3, #1
 801c928:	d923      	bls.n	801c972 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801c92a:	7dfa      	ldrb	r2, [r7, #23]
 801c92c:	4926      	ldr	r1, [pc, #152]	; (801c9c8 <etharp_output+0x200>)
 801c92e:	4613      	mov	r3, r2
 801c930:	005b      	lsls	r3, r3, #1
 801c932:	4413      	add	r3, r2
 801c934:	00db      	lsls	r3, r3, #3
 801c936:	440b      	add	r3, r1
 801c938:	3308      	adds	r3, #8
 801c93a:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801c93c:	68fa      	ldr	r2, [r7, #12]
 801c93e:	429a      	cmp	r2, r3
 801c940:	d117      	bne.n	801c972 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801c942:	69bb      	ldr	r3, [r7, #24]
 801c944:	6819      	ldr	r1, [r3, #0]
 801c946:	7dfa      	ldrb	r2, [r7, #23]
 801c948:	481f      	ldr	r0, [pc, #124]	; (801c9c8 <etharp_output+0x200>)
 801c94a:	4613      	mov	r3, r2
 801c94c:	005b      	lsls	r3, r3, #1
 801c94e:	4413      	add	r3, r2
 801c950:	00db      	lsls	r3, r3, #3
 801c952:	4403      	add	r3, r0
 801c954:	3304      	adds	r3, #4
 801c956:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 801c958:	4299      	cmp	r1, r3
 801c95a:	d10a      	bne.n	801c972 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 801c95c:	4a19      	ldr	r2, [pc, #100]	; (801c9c4 <etharp_output+0x1fc>)
 801c95e:	7dfb      	ldrb	r3, [r7, #23]
 801c960:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801c962:	7dfb      	ldrb	r3, [r7, #23]
 801c964:	461a      	mov	r2, r3
 801c966:	68b9      	ldr	r1, [r7, #8]
 801c968:	68f8      	ldr	r0, [r7, #12]
 801c96a:	f7ff fe93 	bl	801c694 <etharp_output_to_arp_index>
 801c96e:	4603      	mov	r3, r0
 801c970:	e018      	b.n	801c9a4 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801c972:	7dfb      	ldrb	r3, [r7, #23]
 801c974:	3301      	adds	r3, #1
 801c976:	75fb      	strb	r3, [r7, #23]
 801c978:	7dfb      	ldrb	r3, [r7, #23]
 801c97a:	2b09      	cmp	r3, #9
 801c97c:	d9ca      	bls.n	801c914 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801c97e:	68ba      	ldr	r2, [r7, #8]
 801c980:	69b9      	ldr	r1, [r7, #24]
 801c982:	68f8      	ldr	r0, [r7, #12]
 801c984:	f000 f822 	bl	801c9cc <etharp_query>
 801c988:	4603      	mov	r3, r0
 801c98a:	e00b      	b.n	801c9a4 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 801c98c:	68fb      	ldr	r3, [r7, #12]
 801c98e:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 801c992:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801c996:	9300      	str	r3, [sp, #0]
 801c998:	69fb      	ldr	r3, [r7, #28]
 801c99a:	68b9      	ldr	r1, [r7, #8]
 801c99c:	68f8      	ldr	r0, [r7, #12]
 801c99e:	f001 fd89 	bl	801e4b4 <ethernet_output>
 801c9a2:	4603      	mov	r3, r0
}
 801c9a4:	4618      	mov	r0, r3
 801c9a6:	3720      	adds	r7, #32
 801c9a8:	46bd      	mov	sp, r7
 801c9aa:	bd80      	pop	{r7, pc}
 801c9ac:	08026814 	.word	0x08026814
 801c9b0:	08026964 	.word	0x08026964
 801c9b4:	0802688c 	.word	0x0802688c
 801c9b8:	080269b4 	.word	0x080269b4
 801c9bc:	08026954 	.word	0x08026954
 801c9c0:	0802708c 	.word	0x0802708c
 801c9c4:	24007f5c 	.word	0x24007f5c
 801c9c8:	24007e6c 	.word	0x24007e6c

0801c9cc <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 801c9cc:	b580      	push	{r7, lr}
 801c9ce:	b08c      	sub	sp, #48	; 0x30
 801c9d0:	af02      	add	r7, sp, #8
 801c9d2:	60f8      	str	r0, [r7, #12]
 801c9d4:	60b9      	str	r1, [r7, #8]
 801c9d6:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 801c9d8:	68fb      	ldr	r3, [r7, #12]
 801c9da:	332a      	adds	r3, #42	; 0x2a
 801c9dc:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801c9de:	23ff      	movs	r3, #255	; 0xff
 801c9e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 801c9e4:	2300      	movs	r3, #0
 801c9e6:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801c9e8:	68bb      	ldr	r3, [r7, #8]
 801c9ea:	681b      	ldr	r3, [r3, #0]
 801c9ec:	68f9      	ldr	r1, [r7, #12]
 801c9ee:	4618      	mov	r0, r3
 801c9f0:	f000 fe52 	bl	801d698 <ip4_addr_isbroadcast_u32>
 801c9f4:	4603      	mov	r3, r0
 801c9f6:	2b00      	cmp	r3, #0
 801c9f8:	d10c      	bne.n	801ca14 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801c9fa:	68bb      	ldr	r3, [r7, #8]
 801c9fc:	681b      	ldr	r3, [r3, #0]
 801c9fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801ca02:	2be0      	cmp	r3, #224	; 0xe0
 801ca04:	d006      	beq.n	801ca14 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801ca06:	68bb      	ldr	r3, [r7, #8]
 801ca08:	2b00      	cmp	r3, #0
 801ca0a:	d003      	beq.n	801ca14 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 801ca0c:	68bb      	ldr	r3, [r7, #8]
 801ca0e:	681b      	ldr	r3, [r3, #0]
 801ca10:	2b00      	cmp	r3, #0
 801ca12:	d102      	bne.n	801ca1a <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801ca14:	f06f 030f 	mvn.w	r3, #15
 801ca18:	e101      	b.n	801cc1e <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801ca1a:	68fa      	ldr	r2, [r7, #12]
 801ca1c:	2101      	movs	r1, #1
 801ca1e:	68b8      	ldr	r0, [r7, #8]
 801ca20:	f7ff fb5c 	bl	801c0dc <etharp_find_entry>
 801ca24:	4603      	mov	r3, r0
 801ca26:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 801ca28:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801ca2c:	2b00      	cmp	r3, #0
 801ca2e:	da02      	bge.n	801ca36 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 801ca30:	8a7b      	ldrh	r3, [r7, #18]
 801ca32:	b25b      	sxtb	r3, r3
 801ca34:	e0f3      	b.n	801cc1e <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801ca36:	8a7b      	ldrh	r3, [r7, #18]
 801ca38:	2b7e      	cmp	r3, #126	; 0x7e
 801ca3a:	d906      	bls.n	801ca4a <etharp_query+0x7e>
 801ca3c:	4b7a      	ldr	r3, [pc, #488]	; (801cc28 <etharp_query+0x25c>)
 801ca3e:	f240 32c1 	movw	r2, #961	; 0x3c1
 801ca42:	497a      	ldr	r1, [pc, #488]	; (801cc2c <etharp_query+0x260>)
 801ca44:	487a      	ldr	r0, [pc, #488]	; (801cc30 <etharp_query+0x264>)
 801ca46:	f003 fd03 	bl	8020450 <iprintf>
  i = (netif_addr_idx_t)i_err;
 801ca4a:	8a7b      	ldrh	r3, [r7, #18]
 801ca4c:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801ca4e:	7c7a      	ldrb	r2, [r7, #17]
 801ca50:	4978      	ldr	r1, [pc, #480]	; (801cc34 <etharp_query+0x268>)
 801ca52:	4613      	mov	r3, r2
 801ca54:	005b      	lsls	r3, r3, #1
 801ca56:	4413      	add	r3, r2
 801ca58:	00db      	lsls	r3, r3, #3
 801ca5a:	440b      	add	r3, r1
 801ca5c:	3314      	adds	r3, #20
 801ca5e:	781b      	ldrb	r3, [r3, #0]
 801ca60:	2b00      	cmp	r3, #0
 801ca62:	d115      	bne.n	801ca90 <etharp_query+0xc4>
    is_new_entry = 1;
 801ca64:	2301      	movs	r3, #1
 801ca66:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 801ca68:	7c7a      	ldrb	r2, [r7, #17]
 801ca6a:	4972      	ldr	r1, [pc, #456]	; (801cc34 <etharp_query+0x268>)
 801ca6c:	4613      	mov	r3, r2
 801ca6e:	005b      	lsls	r3, r3, #1
 801ca70:	4413      	add	r3, r2
 801ca72:	00db      	lsls	r3, r3, #3
 801ca74:	440b      	add	r3, r1
 801ca76:	3314      	adds	r3, #20
 801ca78:	2201      	movs	r2, #1
 801ca7a:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 801ca7c:	7c7a      	ldrb	r2, [r7, #17]
 801ca7e:	496d      	ldr	r1, [pc, #436]	; (801cc34 <etharp_query+0x268>)
 801ca80:	4613      	mov	r3, r2
 801ca82:	005b      	lsls	r3, r3, #1
 801ca84:	4413      	add	r3, r2
 801ca86:	00db      	lsls	r3, r3, #3
 801ca88:	440b      	add	r3, r1
 801ca8a:	3308      	adds	r3, #8
 801ca8c:	68fa      	ldr	r2, [r7, #12]
 801ca8e:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801ca90:	7c7a      	ldrb	r2, [r7, #17]
 801ca92:	4968      	ldr	r1, [pc, #416]	; (801cc34 <etharp_query+0x268>)
 801ca94:	4613      	mov	r3, r2
 801ca96:	005b      	lsls	r3, r3, #1
 801ca98:	4413      	add	r3, r2
 801ca9a:	00db      	lsls	r3, r3, #3
 801ca9c:	440b      	add	r3, r1
 801ca9e:	3314      	adds	r3, #20
 801caa0:	781b      	ldrb	r3, [r3, #0]
 801caa2:	2b01      	cmp	r3, #1
 801caa4:	d011      	beq.n	801caca <etharp_query+0xfe>
 801caa6:	7c7a      	ldrb	r2, [r7, #17]
 801caa8:	4962      	ldr	r1, [pc, #392]	; (801cc34 <etharp_query+0x268>)
 801caaa:	4613      	mov	r3, r2
 801caac:	005b      	lsls	r3, r3, #1
 801caae:	4413      	add	r3, r2
 801cab0:	00db      	lsls	r3, r3, #3
 801cab2:	440b      	add	r3, r1
 801cab4:	3314      	adds	r3, #20
 801cab6:	781b      	ldrb	r3, [r3, #0]
 801cab8:	2b01      	cmp	r3, #1
 801caba:	d806      	bhi.n	801caca <etharp_query+0xfe>
 801cabc:	4b5a      	ldr	r3, [pc, #360]	; (801cc28 <etharp_query+0x25c>)
 801cabe:	f240 32cd 	movw	r2, #973	; 0x3cd
 801cac2:	495d      	ldr	r1, [pc, #372]	; (801cc38 <etharp_query+0x26c>)
 801cac4:	485a      	ldr	r0, [pc, #360]	; (801cc30 <etharp_query+0x264>)
 801cac6:	f003 fcc3 	bl	8020450 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801caca:	6a3b      	ldr	r3, [r7, #32]
 801cacc:	2b00      	cmp	r3, #0
 801cace:	d102      	bne.n	801cad6 <etharp_query+0x10a>
 801cad0:	687b      	ldr	r3, [r7, #4]
 801cad2:	2b00      	cmp	r3, #0
 801cad4:	d10c      	bne.n	801caf0 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801cad6:	68b9      	ldr	r1, [r7, #8]
 801cad8:	68f8      	ldr	r0, [r7, #12]
 801cada:	f000 f963 	bl	801cda4 <etharp_request>
 801cade:	4603      	mov	r3, r0
 801cae0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 801cae4:	687b      	ldr	r3, [r7, #4]
 801cae6:	2b00      	cmp	r3, #0
 801cae8:	d102      	bne.n	801caf0 <etharp_query+0x124>
      return result;
 801caea:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801caee:	e096      	b.n	801cc1e <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801caf0:	687b      	ldr	r3, [r7, #4]
 801caf2:	2b00      	cmp	r3, #0
 801caf4:	d106      	bne.n	801cb04 <etharp_query+0x138>
 801caf6:	4b4c      	ldr	r3, [pc, #304]	; (801cc28 <etharp_query+0x25c>)
 801caf8:	f240 32e1 	movw	r2, #993	; 0x3e1
 801cafc:	494f      	ldr	r1, [pc, #316]	; (801cc3c <etharp_query+0x270>)
 801cafe:	484c      	ldr	r0, [pc, #304]	; (801cc30 <etharp_query+0x264>)
 801cb00:	f003 fca6 	bl	8020450 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801cb04:	7c7a      	ldrb	r2, [r7, #17]
 801cb06:	494b      	ldr	r1, [pc, #300]	; (801cc34 <etharp_query+0x268>)
 801cb08:	4613      	mov	r3, r2
 801cb0a:	005b      	lsls	r3, r3, #1
 801cb0c:	4413      	add	r3, r2
 801cb0e:	00db      	lsls	r3, r3, #3
 801cb10:	440b      	add	r3, r1
 801cb12:	3314      	adds	r3, #20
 801cb14:	781b      	ldrb	r3, [r3, #0]
 801cb16:	2b01      	cmp	r3, #1
 801cb18:	d917      	bls.n	801cb4a <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801cb1a:	4a49      	ldr	r2, [pc, #292]	; (801cc40 <etharp_query+0x274>)
 801cb1c:	7c7b      	ldrb	r3, [r7, #17]
 801cb1e:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801cb20:	7c7a      	ldrb	r2, [r7, #17]
 801cb22:	4613      	mov	r3, r2
 801cb24:	005b      	lsls	r3, r3, #1
 801cb26:	4413      	add	r3, r2
 801cb28:	00db      	lsls	r3, r3, #3
 801cb2a:	3308      	adds	r3, #8
 801cb2c:	4a41      	ldr	r2, [pc, #260]	; (801cc34 <etharp_query+0x268>)
 801cb2e:	4413      	add	r3, r2
 801cb30:	3304      	adds	r3, #4
 801cb32:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801cb36:	9200      	str	r2, [sp, #0]
 801cb38:	697a      	ldr	r2, [r7, #20]
 801cb3a:	6879      	ldr	r1, [r7, #4]
 801cb3c:	68f8      	ldr	r0, [r7, #12]
 801cb3e:	f001 fcb9 	bl	801e4b4 <ethernet_output>
 801cb42:	4603      	mov	r3, r0
 801cb44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801cb48:	e067      	b.n	801cc1a <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801cb4a:	7c7a      	ldrb	r2, [r7, #17]
 801cb4c:	4939      	ldr	r1, [pc, #228]	; (801cc34 <etharp_query+0x268>)
 801cb4e:	4613      	mov	r3, r2
 801cb50:	005b      	lsls	r3, r3, #1
 801cb52:	4413      	add	r3, r2
 801cb54:	00db      	lsls	r3, r3, #3
 801cb56:	440b      	add	r3, r1
 801cb58:	3314      	adds	r3, #20
 801cb5a:	781b      	ldrb	r3, [r3, #0]
 801cb5c:	2b01      	cmp	r3, #1
 801cb5e:	d15c      	bne.n	801cc1a <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801cb60:	2300      	movs	r3, #0
 801cb62:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 801cb64:	687b      	ldr	r3, [r7, #4]
 801cb66:	61fb      	str	r3, [r7, #28]
    while (p) {
 801cb68:	e01c      	b.n	801cba4 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801cb6a:	69fb      	ldr	r3, [r7, #28]
 801cb6c:	895a      	ldrh	r2, [r3, #10]
 801cb6e:	69fb      	ldr	r3, [r7, #28]
 801cb70:	891b      	ldrh	r3, [r3, #8]
 801cb72:	429a      	cmp	r2, r3
 801cb74:	d10a      	bne.n	801cb8c <etharp_query+0x1c0>
 801cb76:	69fb      	ldr	r3, [r7, #28]
 801cb78:	681b      	ldr	r3, [r3, #0]
 801cb7a:	2b00      	cmp	r3, #0
 801cb7c:	d006      	beq.n	801cb8c <etharp_query+0x1c0>
 801cb7e:	4b2a      	ldr	r3, [pc, #168]	; (801cc28 <etharp_query+0x25c>)
 801cb80:	f240 32f1 	movw	r2, #1009	; 0x3f1
 801cb84:	492f      	ldr	r1, [pc, #188]	; (801cc44 <etharp_query+0x278>)
 801cb86:	482a      	ldr	r0, [pc, #168]	; (801cc30 <etharp_query+0x264>)
 801cb88:	f003 fc62 	bl	8020450 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 801cb8c:	69fb      	ldr	r3, [r7, #28]
 801cb8e:	7b1b      	ldrb	r3, [r3, #12]
 801cb90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801cb94:	2b00      	cmp	r3, #0
 801cb96:	d002      	beq.n	801cb9e <etharp_query+0x1d2>
        copy_needed = 1;
 801cb98:	2301      	movs	r3, #1
 801cb9a:	61bb      	str	r3, [r7, #24]
        break;
 801cb9c:	e005      	b.n	801cbaa <etharp_query+0x1de>
      }
      p = p->next;
 801cb9e:	69fb      	ldr	r3, [r7, #28]
 801cba0:	681b      	ldr	r3, [r3, #0]
 801cba2:	61fb      	str	r3, [r7, #28]
    while (p) {
 801cba4:	69fb      	ldr	r3, [r7, #28]
 801cba6:	2b00      	cmp	r3, #0
 801cba8:	d1df      	bne.n	801cb6a <etharp_query+0x19e>
    }
    if (copy_needed) {
 801cbaa:	69bb      	ldr	r3, [r7, #24]
 801cbac:	2b00      	cmp	r3, #0
 801cbae:	d007      	beq.n	801cbc0 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 801cbb0:	687a      	ldr	r2, [r7, #4]
 801cbb2:	f44f 7120 	mov.w	r1, #640	; 0x280
 801cbb6:	200e      	movs	r0, #14
 801cbb8:	f7f6 fb98 	bl	80132ec <pbuf_clone>
 801cbbc:	61f8      	str	r0, [r7, #28]
 801cbbe:	e004      	b.n	801cbca <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801cbc0:	687b      	ldr	r3, [r7, #4]
 801cbc2:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801cbc4:	69f8      	ldr	r0, [r7, #28]
 801cbc6:	f7f6 f9bf 	bl	8012f48 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801cbca:	69fb      	ldr	r3, [r7, #28]
 801cbcc:	2b00      	cmp	r3, #0
 801cbce:	d021      	beq.n	801cc14 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801cbd0:	7c7a      	ldrb	r2, [r7, #17]
 801cbd2:	4918      	ldr	r1, [pc, #96]	; (801cc34 <etharp_query+0x268>)
 801cbd4:	4613      	mov	r3, r2
 801cbd6:	005b      	lsls	r3, r3, #1
 801cbd8:	4413      	add	r3, r2
 801cbda:	00db      	lsls	r3, r3, #3
 801cbdc:	440b      	add	r3, r1
 801cbde:	681b      	ldr	r3, [r3, #0]
 801cbe0:	2b00      	cmp	r3, #0
 801cbe2:	d00a      	beq.n	801cbfa <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 801cbe4:	7c7a      	ldrb	r2, [r7, #17]
 801cbe6:	4913      	ldr	r1, [pc, #76]	; (801cc34 <etharp_query+0x268>)
 801cbe8:	4613      	mov	r3, r2
 801cbea:	005b      	lsls	r3, r3, #1
 801cbec:	4413      	add	r3, r2
 801cbee:	00db      	lsls	r3, r3, #3
 801cbf0:	440b      	add	r3, r1
 801cbf2:	681b      	ldr	r3, [r3, #0]
 801cbf4:	4618      	mov	r0, r3
 801cbf6:	f7f6 f901 	bl	8012dfc <pbuf_free>
      }
      arp_table[i].q = p;
 801cbfa:	7c7a      	ldrb	r2, [r7, #17]
 801cbfc:	490d      	ldr	r1, [pc, #52]	; (801cc34 <etharp_query+0x268>)
 801cbfe:	4613      	mov	r3, r2
 801cc00:	005b      	lsls	r3, r3, #1
 801cc02:	4413      	add	r3, r2
 801cc04:	00db      	lsls	r3, r3, #3
 801cc06:	440b      	add	r3, r1
 801cc08:	69fa      	ldr	r2, [r7, #28]
 801cc0a:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 801cc0c:	2300      	movs	r3, #0
 801cc0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801cc12:	e002      	b.n	801cc1a <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801cc14:	23ff      	movs	r3, #255	; 0xff
 801cc16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 801cc1a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 801cc1e:	4618      	mov	r0, r3
 801cc20:	3728      	adds	r7, #40	; 0x28
 801cc22:	46bd      	mov	sp, r7
 801cc24:	bd80      	pop	{r7, pc}
 801cc26:	bf00      	nop
 801cc28:	08026814 	.word	0x08026814
 801cc2c:	080269c0 	.word	0x080269c0
 801cc30:	0802688c 	.word	0x0802688c
 801cc34:	24007e6c 	.word	0x24007e6c
 801cc38:	080269d0 	.word	0x080269d0
 801cc3c:	080269b4 	.word	0x080269b4
 801cc40:	24007f5c 	.word	0x24007f5c
 801cc44:	080269f8 	.word	0x080269f8

0801cc48 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 801cc48:	b580      	push	{r7, lr}
 801cc4a:	b08a      	sub	sp, #40	; 0x28
 801cc4c:	af02      	add	r7, sp, #8
 801cc4e:	60f8      	str	r0, [r7, #12]
 801cc50:	60b9      	str	r1, [r7, #8]
 801cc52:	607a      	str	r2, [r7, #4]
 801cc54:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801cc56:	2300      	movs	r3, #0
 801cc58:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801cc5a:	68fb      	ldr	r3, [r7, #12]
 801cc5c:	2b00      	cmp	r3, #0
 801cc5e:	d106      	bne.n	801cc6e <etharp_raw+0x26>
 801cc60:	4b3a      	ldr	r3, [pc, #232]	; (801cd4c <etharp_raw+0x104>)
 801cc62:	f240 4257 	movw	r2, #1111	; 0x457
 801cc66:	493a      	ldr	r1, [pc, #232]	; (801cd50 <etharp_raw+0x108>)
 801cc68:	483a      	ldr	r0, [pc, #232]	; (801cd54 <etharp_raw+0x10c>)
 801cc6a:	f003 fbf1 	bl	8020450 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801cc6e:	f44f 7220 	mov.w	r2, #640	; 0x280
 801cc72:	211c      	movs	r1, #28
 801cc74:	200e      	movs	r0, #14
 801cc76:	f7f5 fdab 	bl	80127d0 <pbuf_alloc>
 801cc7a:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801cc7c:	69bb      	ldr	r3, [r7, #24]
 801cc7e:	2b00      	cmp	r3, #0
 801cc80:	d102      	bne.n	801cc88 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801cc82:	f04f 33ff 	mov.w	r3, #4294967295
 801cc86:	e05d      	b.n	801cd44 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801cc88:	69bb      	ldr	r3, [r7, #24]
 801cc8a:	895b      	ldrh	r3, [r3, #10]
 801cc8c:	2b1b      	cmp	r3, #27
 801cc8e:	d806      	bhi.n	801cc9e <etharp_raw+0x56>
 801cc90:	4b2e      	ldr	r3, [pc, #184]	; (801cd4c <etharp_raw+0x104>)
 801cc92:	f240 4262 	movw	r2, #1122	; 0x462
 801cc96:	4930      	ldr	r1, [pc, #192]	; (801cd58 <etharp_raw+0x110>)
 801cc98:	482e      	ldr	r0, [pc, #184]	; (801cd54 <etharp_raw+0x10c>)
 801cc9a:	f003 fbd9 	bl	8020450 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801cc9e:	69bb      	ldr	r3, [r7, #24]
 801cca0:	685b      	ldr	r3, [r3, #4]
 801cca2:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801cca4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801cca6:	4618      	mov	r0, r3
 801cca8:	f7f4 fbc0 	bl	801142c <lwip_htons>
 801ccac:	4603      	mov	r3, r0
 801ccae:	461a      	mov	r2, r3
 801ccb0:	697b      	ldr	r3, [r7, #20]
 801ccb2:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801ccb4:	68fb      	ldr	r3, [r7, #12]
 801ccb6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801ccba:	2b06      	cmp	r3, #6
 801ccbc:	d006      	beq.n	801cccc <etharp_raw+0x84>
 801ccbe:	4b23      	ldr	r3, [pc, #140]	; (801cd4c <etharp_raw+0x104>)
 801ccc0:	f240 4269 	movw	r2, #1129	; 0x469
 801ccc4:	4925      	ldr	r1, [pc, #148]	; (801cd5c <etharp_raw+0x114>)
 801ccc6:	4823      	ldr	r0, [pc, #140]	; (801cd54 <etharp_raw+0x10c>)
 801ccc8:	f003 fbc2 	bl	8020450 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801cccc:	697b      	ldr	r3, [r7, #20]
 801ccce:	3308      	adds	r3, #8
 801ccd0:	2206      	movs	r2, #6
 801ccd2:	6839      	ldr	r1, [r7, #0]
 801ccd4:	4618      	mov	r0, r3
 801ccd6:	f003 fcec 	bl	80206b2 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801ccda:	697b      	ldr	r3, [r7, #20]
 801ccdc:	3312      	adds	r3, #18
 801ccde:	2206      	movs	r2, #6
 801cce0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801cce2:	4618      	mov	r0, r3
 801cce4:	f003 fce5 	bl	80206b2 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 801cce8:	697b      	ldr	r3, [r7, #20]
 801ccea:	330e      	adds	r3, #14
 801ccec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801ccee:	6812      	ldr	r2, [r2, #0]
 801ccf0:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801ccf2:	697b      	ldr	r3, [r7, #20]
 801ccf4:	3318      	adds	r3, #24
 801ccf6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801ccf8:	6812      	ldr	r2, [r2, #0]
 801ccfa:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 801ccfc:	697b      	ldr	r3, [r7, #20]
 801ccfe:	2200      	movs	r2, #0
 801cd00:	701a      	strb	r2, [r3, #0]
 801cd02:	2200      	movs	r2, #0
 801cd04:	f042 0201 	orr.w	r2, r2, #1
 801cd08:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801cd0a:	697b      	ldr	r3, [r7, #20]
 801cd0c:	2200      	movs	r2, #0
 801cd0e:	f042 0208 	orr.w	r2, r2, #8
 801cd12:	709a      	strb	r2, [r3, #2]
 801cd14:	2200      	movs	r2, #0
 801cd16:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801cd18:	697b      	ldr	r3, [r7, #20]
 801cd1a:	2206      	movs	r2, #6
 801cd1c:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801cd1e:	697b      	ldr	r3, [r7, #20]
 801cd20:	2204      	movs	r2, #4
 801cd22:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801cd24:	f640 0306 	movw	r3, #2054	; 0x806
 801cd28:	9300      	str	r3, [sp, #0]
 801cd2a:	687b      	ldr	r3, [r7, #4]
 801cd2c:	68ba      	ldr	r2, [r7, #8]
 801cd2e:	69b9      	ldr	r1, [r7, #24]
 801cd30:	68f8      	ldr	r0, [r7, #12]
 801cd32:	f001 fbbf 	bl	801e4b4 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801cd36:	69b8      	ldr	r0, [r7, #24]
 801cd38:	f7f6 f860 	bl	8012dfc <pbuf_free>
  p = NULL;
 801cd3c:	2300      	movs	r3, #0
 801cd3e:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801cd40:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801cd44:	4618      	mov	r0, r3
 801cd46:	3720      	adds	r7, #32
 801cd48:	46bd      	mov	sp, r7
 801cd4a:	bd80      	pop	{r7, pc}
 801cd4c:	08026814 	.word	0x08026814
 801cd50:	08026964 	.word	0x08026964
 801cd54:	0802688c 	.word	0x0802688c
 801cd58:	08026a14 	.word	0x08026a14
 801cd5c:	08026a48 	.word	0x08026a48

0801cd60 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 801cd60:	b580      	push	{r7, lr}
 801cd62:	b088      	sub	sp, #32
 801cd64:	af04      	add	r7, sp, #16
 801cd66:	60f8      	str	r0, [r7, #12]
 801cd68:	60b9      	str	r1, [r7, #8]
 801cd6a:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801cd6c:	68fb      	ldr	r3, [r7, #12]
 801cd6e:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801cd72:	68fb      	ldr	r3, [r7, #12]
 801cd74:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 801cd78:	68fb      	ldr	r3, [r7, #12]
 801cd7a:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801cd7c:	2201      	movs	r2, #1
 801cd7e:	9203      	str	r2, [sp, #12]
 801cd80:	68ba      	ldr	r2, [r7, #8]
 801cd82:	9202      	str	r2, [sp, #8]
 801cd84:	4a06      	ldr	r2, [pc, #24]	; (801cda0 <etharp_request_dst+0x40>)
 801cd86:	9201      	str	r2, [sp, #4]
 801cd88:	9300      	str	r3, [sp, #0]
 801cd8a:	4603      	mov	r3, r0
 801cd8c:	687a      	ldr	r2, [r7, #4]
 801cd8e:	68f8      	ldr	r0, [r7, #12]
 801cd90:	f7ff ff5a 	bl	801cc48 <etharp_raw>
 801cd94:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801cd96:	4618      	mov	r0, r3
 801cd98:	3710      	adds	r7, #16
 801cd9a:	46bd      	mov	sp, r7
 801cd9c:	bd80      	pop	{r7, pc}
 801cd9e:	bf00      	nop
 801cda0:	08027094 	.word	0x08027094

0801cda4 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801cda4:	b580      	push	{r7, lr}
 801cda6:	b082      	sub	sp, #8
 801cda8:	af00      	add	r7, sp, #0
 801cdaa:	6078      	str	r0, [r7, #4]
 801cdac:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801cdae:	4a05      	ldr	r2, [pc, #20]	; (801cdc4 <etharp_request+0x20>)
 801cdb0:	6839      	ldr	r1, [r7, #0]
 801cdb2:	6878      	ldr	r0, [r7, #4]
 801cdb4:	f7ff ffd4 	bl	801cd60 <etharp_request_dst>
 801cdb8:	4603      	mov	r3, r0
}
 801cdba:	4618      	mov	r0, r3
 801cdbc:	3708      	adds	r7, #8
 801cdbe:	46bd      	mov	sp, r7
 801cdc0:	bd80      	pop	{r7, pc}
 801cdc2:	bf00      	nop
 801cdc4:	0802708c 	.word	0x0802708c

0801cdc8 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 801cdc8:	b580      	push	{r7, lr}
 801cdca:	b08e      	sub	sp, #56	; 0x38
 801cdcc:	af04      	add	r7, sp, #16
 801cdce:	6078      	str	r0, [r7, #4]
 801cdd0:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801cdd2:	4b87      	ldr	r3, [pc, #540]	; (801cff0 <icmp_input+0x228>)
 801cdd4:	689b      	ldr	r3, [r3, #8]
 801cdd6:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 801cdd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cdda:	781b      	ldrb	r3, [r3, #0]
 801cddc:	f003 030f 	and.w	r3, r3, #15
 801cde0:	b2db      	uxtb	r3, r3
 801cde2:	009b      	lsls	r3, r3, #2
 801cde4:	b2db      	uxtb	r3, r3
 801cde6:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 801cde8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801cdea:	2b13      	cmp	r3, #19
 801cdec:	f240 80e8 	bls.w	801cfc0 <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 801cdf0:	687b      	ldr	r3, [r7, #4]
 801cdf2:	895b      	ldrh	r3, [r3, #10]
 801cdf4:	2b03      	cmp	r3, #3
 801cdf6:	f240 80e5 	bls.w	801cfc4 <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801cdfa:	687b      	ldr	r3, [r7, #4]
 801cdfc:	685b      	ldr	r3, [r3, #4]
 801cdfe:	781b      	ldrb	r3, [r3, #0]
 801ce00:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 801ce04:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 801ce08:	2b00      	cmp	r3, #0
 801ce0a:	f000 80d2 	beq.w	801cfb2 <icmp_input+0x1ea>
 801ce0e:	2b08      	cmp	r3, #8
 801ce10:	f040 80d2 	bne.w	801cfb8 <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 801ce14:	4b77      	ldr	r3, [pc, #476]	; (801cff4 <icmp_input+0x22c>)
 801ce16:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801ce18:	4b75      	ldr	r3, [pc, #468]	; (801cff0 <icmp_input+0x228>)
 801ce1a:	695b      	ldr	r3, [r3, #20]
 801ce1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801ce20:	2be0      	cmp	r3, #224	; 0xe0
 801ce22:	f000 80d6 	beq.w	801cfd2 <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801ce26:	4b72      	ldr	r3, [pc, #456]	; (801cff0 <icmp_input+0x228>)
 801ce28:	695b      	ldr	r3, [r3, #20]
 801ce2a:	4a71      	ldr	r2, [pc, #452]	; (801cff0 <icmp_input+0x228>)
 801ce2c:	6812      	ldr	r2, [r2, #0]
 801ce2e:	4611      	mov	r1, r2
 801ce30:	4618      	mov	r0, r3
 801ce32:	f000 fc31 	bl	801d698 <ip4_addr_isbroadcast_u32>
 801ce36:	4603      	mov	r3, r0
 801ce38:	2b00      	cmp	r3, #0
 801ce3a:	f040 80cc 	bne.w	801cfd6 <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801ce3e:	687b      	ldr	r3, [r7, #4]
 801ce40:	891b      	ldrh	r3, [r3, #8]
 801ce42:	2b07      	cmp	r3, #7
 801ce44:	f240 80c0 	bls.w	801cfc8 <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 801ce48:	6878      	ldr	r0, [r7, #4]
 801ce4a:	f7f4 fb8c 	bl	8011566 <inet_chksum_pbuf>
 801ce4e:	4603      	mov	r3, r0
 801ce50:	2b00      	cmp	r3, #0
 801ce52:	d003      	beq.n	801ce5c <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 801ce54:	6878      	ldr	r0, [r7, #4]
 801ce56:	f7f5 ffd1 	bl	8012dfc <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 801ce5a:	e0c5      	b.n	801cfe8 <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801ce5c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801ce5e:	330e      	adds	r3, #14
 801ce60:	4619      	mov	r1, r3
 801ce62:	6878      	ldr	r0, [r7, #4]
 801ce64:	f7f5 ff02 	bl	8012c6c <pbuf_add_header>
 801ce68:	4603      	mov	r3, r0
 801ce6a:	2b00      	cmp	r3, #0
 801ce6c:	d04b      	beq.n	801cf06 <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801ce6e:	687b      	ldr	r3, [r7, #4]
 801ce70:	891a      	ldrh	r2, [r3, #8]
 801ce72:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801ce74:	4413      	add	r3, r2
 801ce76:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 801ce78:	687b      	ldr	r3, [r7, #4]
 801ce7a:	891b      	ldrh	r3, [r3, #8]
 801ce7c:	8b7a      	ldrh	r2, [r7, #26]
 801ce7e:	429a      	cmp	r2, r3
 801ce80:	f0c0 80ab 	bcc.w	801cfda <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801ce84:	8b7b      	ldrh	r3, [r7, #26]
 801ce86:	f44f 7220 	mov.w	r2, #640	; 0x280
 801ce8a:	4619      	mov	r1, r3
 801ce8c:	200e      	movs	r0, #14
 801ce8e:	f7f5 fc9f 	bl	80127d0 <pbuf_alloc>
 801ce92:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801ce94:	697b      	ldr	r3, [r7, #20]
 801ce96:	2b00      	cmp	r3, #0
 801ce98:	f000 80a1 	beq.w	801cfde <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801ce9c:	697b      	ldr	r3, [r7, #20]
 801ce9e:	895b      	ldrh	r3, [r3, #10]
 801cea0:	461a      	mov	r2, r3
 801cea2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801cea4:	3308      	adds	r3, #8
 801cea6:	429a      	cmp	r2, r3
 801cea8:	d203      	bcs.n	801ceb2 <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801ceaa:	6978      	ldr	r0, [r7, #20]
 801ceac:	f7f5 ffa6 	bl	8012dfc <pbuf_free>
          goto icmperr;
 801ceb0:	e096      	b.n	801cfe0 <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801ceb2:	697b      	ldr	r3, [r7, #20]
 801ceb4:	685b      	ldr	r3, [r3, #4]
 801ceb6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801ceb8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801ceba:	4618      	mov	r0, r3
 801cebc:	f003 fbf9 	bl	80206b2 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 801cec0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801cec2:	4619      	mov	r1, r3
 801cec4:	6978      	ldr	r0, [r7, #20]
 801cec6:	f7f5 fee1 	bl	8012c8c <pbuf_remove_header>
 801ceca:	4603      	mov	r3, r0
 801cecc:	2b00      	cmp	r3, #0
 801cece:	d009      	beq.n	801cee4 <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801ced0:	4b49      	ldr	r3, [pc, #292]	; (801cff8 <icmp_input+0x230>)
 801ced2:	22b6      	movs	r2, #182	; 0xb6
 801ced4:	4949      	ldr	r1, [pc, #292]	; (801cffc <icmp_input+0x234>)
 801ced6:	484a      	ldr	r0, [pc, #296]	; (801d000 <icmp_input+0x238>)
 801ced8:	f003 faba 	bl	8020450 <iprintf>
          pbuf_free(r);
 801cedc:	6978      	ldr	r0, [r7, #20]
 801cede:	f7f5 ff8d 	bl	8012dfc <pbuf_free>
          goto icmperr;
 801cee2:	e07d      	b.n	801cfe0 <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 801cee4:	6879      	ldr	r1, [r7, #4]
 801cee6:	6978      	ldr	r0, [r7, #20]
 801cee8:	f7f6 f8bc 	bl	8013064 <pbuf_copy>
 801ceec:	4603      	mov	r3, r0
 801ceee:	2b00      	cmp	r3, #0
 801cef0:	d003      	beq.n	801cefa <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801cef2:	6978      	ldr	r0, [r7, #20]
 801cef4:	f7f5 ff82 	bl	8012dfc <pbuf_free>
          goto icmperr;
 801cef8:	e072      	b.n	801cfe0 <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 801cefa:	6878      	ldr	r0, [r7, #4]
 801cefc:	f7f5 ff7e 	bl	8012dfc <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 801cf00:	697b      	ldr	r3, [r7, #20]
 801cf02:	607b      	str	r3, [r7, #4]
 801cf04:	e00f      	b.n	801cf26 <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801cf06:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801cf08:	330e      	adds	r3, #14
 801cf0a:	4619      	mov	r1, r3
 801cf0c:	6878      	ldr	r0, [r7, #4]
 801cf0e:	f7f5 febd 	bl	8012c8c <pbuf_remove_header>
 801cf12:	4603      	mov	r3, r0
 801cf14:	2b00      	cmp	r3, #0
 801cf16:	d006      	beq.n	801cf26 <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801cf18:	4b37      	ldr	r3, [pc, #220]	; (801cff8 <icmp_input+0x230>)
 801cf1a:	22c7      	movs	r2, #199	; 0xc7
 801cf1c:	4939      	ldr	r1, [pc, #228]	; (801d004 <icmp_input+0x23c>)
 801cf1e:	4838      	ldr	r0, [pc, #224]	; (801d000 <icmp_input+0x238>)
 801cf20:	f003 fa96 	bl	8020450 <iprintf>
          goto icmperr;
 801cf24:	e05c      	b.n	801cfe0 <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801cf26:	687b      	ldr	r3, [r7, #4]
 801cf28:	685b      	ldr	r3, [r3, #4]
 801cf2a:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 801cf2c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801cf2e:	4619      	mov	r1, r3
 801cf30:	6878      	ldr	r0, [r7, #4]
 801cf32:	f7f5 fe9b 	bl	8012c6c <pbuf_add_header>
 801cf36:	4603      	mov	r3, r0
 801cf38:	2b00      	cmp	r3, #0
 801cf3a:	d13c      	bne.n	801cfb6 <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801cf3c:	687b      	ldr	r3, [r7, #4]
 801cf3e:	685b      	ldr	r3, [r3, #4]
 801cf40:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801cf42:	69fb      	ldr	r3, [r7, #28]
 801cf44:	681a      	ldr	r2, [r3, #0]
 801cf46:	68fb      	ldr	r3, [r7, #12]
 801cf48:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801cf4a:	4b29      	ldr	r3, [pc, #164]	; (801cff0 <icmp_input+0x228>)
 801cf4c:	691a      	ldr	r2, [r3, #16]
 801cf4e:	68fb      	ldr	r3, [r7, #12]
 801cf50:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801cf52:	693b      	ldr	r3, [r7, #16]
 801cf54:	2200      	movs	r2, #0
 801cf56:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 801cf58:	693b      	ldr	r3, [r7, #16]
 801cf5a:	885b      	ldrh	r3, [r3, #2]
 801cf5c:	b29b      	uxth	r3, r3
 801cf5e:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 801cf62:	4293      	cmp	r3, r2
 801cf64:	d907      	bls.n	801cf76 <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 801cf66:	693b      	ldr	r3, [r7, #16]
 801cf68:	885b      	ldrh	r3, [r3, #2]
 801cf6a:	b29b      	uxth	r3, r3
 801cf6c:	3309      	adds	r3, #9
 801cf6e:	b29a      	uxth	r2, r3
 801cf70:	693b      	ldr	r3, [r7, #16]
 801cf72:	805a      	strh	r2, [r3, #2]
 801cf74:	e006      	b.n	801cf84 <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 801cf76:	693b      	ldr	r3, [r7, #16]
 801cf78:	885b      	ldrh	r3, [r3, #2]
 801cf7a:	b29b      	uxth	r3, r3
 801cf7c:	3308      	adds	r3, #8
 801cf7e:	b29a      	uxth	r2, r3
 801cf80:	693b      	ldr	r3, [r7, #16]
 801cf82:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801cf84:	68fb      	ldr	r3, [r7, #12]
 801cf86:	22ff      	movs	r2, #255	; 0xff
 801cf88:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 801cf8a:	68fb      	ldr	r3, [r7, #12]
 801cf8c:	2200      	movs	r2, #0
 801cf8e:	729a      	strb	r2, [r3, #10]
 801cf90:	2200      	movs	r2, #0
 801cf92:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801cf94:	683b      	ldr	r3, [r7, #0]
 801cf96:	9302      	str	r3, [sp, #8]
 801cf98:	2301      	movs	r3, #1
 801cf9a:	9301      	str	r3, [sp, #4]
 801cf9c:	2300      	movs	r3, #0
 801cf9e:	9300      	str	r3, [sp, #0]
 801cfa0:	23ff      	movs	r3, #255	; 0xff
 801cfa2:	2200      	movs	r2, #0
 801cfa4:	69f9      	ldr	r1, [r7, #28]
 801cfa6:	6878      	ldr	r0, [r7, #4]
 801cfa8:	f000 fa9e 	bl	801d4e8 <ip4_output_if>
 801cfac:	4603      	mov	r3, r0
 801cfae:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801cfb0:	e001      	b.n	801cfb6 <icmp_input+0x1ee>
      break;
 801cfb2:	bf00      	nop
 801cfb4:	e000      	b.n	801cfb8 <icmp_input+0x1f0>
      break;
 801cfb6:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801cfb8:	6878      	ldr	r0, [r7, #4]
 801cfba:	f7f5 ff1f 	bl	8012dfc <pbuf_free>
  return;
 801cfbe:	e013      	b.n	801cfe8 <icmp_input+0x220>
    goto lenerr;
 801cfc0:	bf00      	nop
 801cfc2:	e002      	b.n	801cfca <icmp_input+0x202>
    goto lenerr;
 801cfc4:	bf00      	nop
 801cfc6:	e000      	b.n	801cfca <icmp_input+0x202>
        goto lenerr;
 801cfc8:	bf00      	nop
lenerr:
  pbuf_free(p);
 801cfca:	6878      	ldr	r0, [r7, #4]
 801cfcc:	f7f5 ff16 	bl	8012dfc <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801cfd0:	e00a      	b.n	801cfe8 <icmp_input+0x220>
        goto icmperr;
 801cfd2:	bf00      	nop
 801cfd4:	e004      	b.n	801cfe0 <icmp_input+0x218>
        goto icmperr;
 801cfd6:	bf00      	nop
 801cfd8:	e002      	b.n	801cfe0 <icmp_input+0x218>
          goto icmperr;
 801cfda:	bf00      	nop
 801cfdc:	e000      	b.n	801cfe0 <icmp_input+0x218>
          goto icmperr;
 801cfde:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801cfe0:	6878      	ldr	r0, [r7, #4]
 801cfe2:	f7f5 ff0b 	bl	8012dfc <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801cfe6:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801cfe8:	3728      	adds	r7, #40	; 0x28
 801cfea:	46bd      	mov	sp, r7
 801cfec:	bd80      	pop	{r7, pc}
 801cfee:	bf00      	nop
 801cff0:	24004cb8 	.word	0x24004cb8
 801cff4:	24004ccc 	.word	0x24004ccc
 801cff8:	08026a8c 	.word	0x08026a8c
 801cffc:	08026ac4 	.word	0x08026ac4
 801d000:	08026afc 	.word	0x08026afc
 801d004:	08026b24 	.word	0x08026b24

0801d008 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801d008:	b580      	push	{r7, lr}
 801d00a:	b082      	sub	sp, #8
 801d00c:	af00      	add	r7, sp, #0
 801d00e:	6078      	str	r0, [r7, #4]
 801d010:	460b      	mov	r3, r1
 801d012:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 801d014:	78fb      	ldrb	r3, [r7, #3]
 801d016:	461a      	mov	r2, r3
 801d018:	2103      	movs	r1, #3
 801d01a:	6878      	ldr	r0, [r7, #4]
 801d01c:	f000 f814 	bl	801d048 <icmp_send_response>
}
 801d020:	bf00      	nop
 801d022:	3708      	adds	r7, #8
 801d024:	46bd      	mov	sp, r7
 801d026:	bd80      	pop	{r7, pc}

0801d028 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801d028:	b580      	push	{r7, lr}
 801d02a:	b082      	sub	sp, #8
 801d02c:	af00      	add	r7, sp, #0
 801d02e:	6078      	str	r0, [r7, #4]
 801d030:	460b      	mov	r3, r1
 801d032:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801d034:	78fb      	ldrb	r3, [r7, #3]
 801d036:	461a      	mov	r2, r3
 801d038:	210b      	movs	r1, #11
 801d03a:	6878      	ldr	r0, [r7, #4]
 801d03c:	f000 f804 	bl	801d048 <icmp_send_response>
}
 801d040:	bf00      	nop
 801d042:	3708      	adds	r7, #8
 801d044:	46bd      	mov	sp, r7
 801d046:	bd80      	pop	{r7, pc}

0801d048 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801d048:	b580      	push	{r7, lr}
 801d04a:	b08c      	sub	sp, #48	; 0x30
 801d04c:	af04      	add	r7, sp, #16
 801d04e:	6078      	str	r0, [r7, #4]
 801d050:	460b      	mov	r3, r1
 801d052:	70fb      	strb	r3, [r7, #3]
 801d054:	4613      	mov	r3, r2
 801d056:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801d058:	f44f 7220 	mov.w	r2, #640	; 0x280
 801d05c:	2124      	movs	r1, #36	; 0x24
 801d05e:	2022      	movs	r0, #34	; 0x22
 801d060:	f7f5 fbb6 	bl	80127d0 <pbuf_alloc>
 801d064:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801d066:	69fb      	ldr	r3, [r7, #28]
 801d068:	2b00      	cmp	r3, #0
 801d06a:	d056      	beq.n	801d11a <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801d06c:	69fb      	ldr	r3, [r7, #28]
 801d06e:	895b      	ldrh	r3, [r3, #10]
 801d070:	2b23      	cmp	r3, #35	; 0x23
 801d072:	d806      	bhi.n	801d082 <icmp_send_response+0x3a>
 801d074:	4b2b      	ldr	r3, [pc, #172]	; (801d124 <icmp_send_response+0xdc>)
 801d076:	f44f 72b4 	mov.w	r2, #360	; 0x168
 801d07a:	492b      	ldr	r1, [pc, #172]	; (801d128 <icmp_send_response+0xe0>)
 801d07c:	482b      	ldr	r0, [pc, #172]	; (801d12c <icmp_send_response+0xe4>)
 801d07e:	f003 f9e7 	bl	8020450 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801d082:	687b      	ldr	r3, [r7, #4]
 801d084:	685b      	ldr	r3, [r3, #4]
 801d086:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801d088:	69fb      	ldr	r3, [r7, #28]
 801d08a:	685b      	ldr	r3, [r3, #4]
 801d08c:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801d08e:	697b      	ldr	r3, [r7, #20]
 801d090:	78fa      	ldrb	r2, [r7, #3]
 801d092:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801d094:	697b      	ldr	r3, [r7, #20]
 801d096:	78ba      	ldrb	r2, [r7, #2]
 801d098:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801d09a:	697b      	ldr	r3, [r7, #20]
 801d09c:	2200      	movs	r2, #0
 801d09e:	711a      	strb	r2, [r3, #4]
 801d0a0:	2200      	movs	r2, #0
 801d0a2:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801d0a4:	697b      	ldr	r3, [r7, #20]
 801d0a6:	2200      	movs	r2, #0
 801d0a8:	719a      	strb	r2, [r3, #6]
 801d0aa:	2200      	movs	r2, #0
 801d0ac:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801d0ae:	69fb      	ldr	r3, [r7, #28]
 801d0b0:	685b      	ldr	r3, [r3, #4]
 801d0b2:	f103 0008 	add.w	r0, r3, #8
 801d0b6:	687b      	ldr	r3, [r7, #4]
 801d0b8:	685b      	ldr	r3, [r3, #4]
 801d0ba:	221c      	movs	r2, #28
 801d0bc:	4619      	mov	r1, r3
 801d0be:	f003 faf8 	bl	80206b2 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801d0c2:	69bb      	ldr	r3, [r7, #24]
 801d0c4:	68db      	ldr	r3, [r3, #12]
 801d0c6:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801d0c8:	f107 030c 	add.w	r3, r7, #12
 801d0cc:	4618      	mov	r0, r3
 801d0ce:	f000 f82f 	bl	801d130 <ip4_route>
 801d0d2:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801d0d4:	693b      	ldr	r3, [r7, #16]
 801d0d6:	2b00      	cmp	r3, #0
 801d0d8:	d01b      	beq.n	801d112 <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801d0da:	697b      	ldr	r3, [r7, #20]
 801d0dc:	2200      	movs	r2, #0
 801d0de:	709a      	strb	r2, [r3, #2]
 801d0e0:	2200      	movs	r2, #0
 801d0e2:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 801d0e4:	69fb      	ldr	r3, [r7, #28]
 801d0e6:	895b      	ldrh	r3, [r3, #10]
 801d0e8:	4619      	mov	r1, r3
 801d0ea:	6978      	ldr	r0, [r7, #20]
 801d0ec:	f7f4 fa29 	bl	8011542 <inet_chksum>
 801d0f0:	4603      	mov	r3, r0
 801d0f2:	461a      	mov	r2, r3
 801d0f4:	697b      	ldr	r3, [r7, #20]
 801d0f6:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801d0f8:	f107 020c 	add.w	r2, r7, #12
 801d0fc:	693b      	ldr	r3, [r7, #16]
 801d0fe:	9302      	str	r3, [sp, #8]
 801d100:	2301      	movs	r3, #1
 801d102:	9301      	str	r3, [sp, #4]
 801d104:	2300      	movs	r3, #0
 801d106:	9300      	str	r3, [sp, #0]
 801d108:	23ff      	movs	r3, #255	; 0xff
 801d10a:	2100      	movs	r1, #0
 801d10c:	69f8      	ldr	r0, [r7, #28]
 801d10e:	f000 f9eb 	bl	801d4e8 <ip4_output_if>
  }
  pbuf_free(q);
 801d112:	69f8      	ldr	r0, [r7, #28]
 801d114:	f7f5 fe72 	bl	8012dfc <pbuf_free>
 801d118:	e000      	b.n	801d11c <icmp_send_response+0xd4>
    return;
 801d11a:	bf00      	nop
}
 801d11c:	3720      	adds	r7, #32
 801d11e:	46bd      	mov	sp, r7
 801d120:	bd80      	pop	{r7, pc}
 801d122:	bf00      	nop
 801d124:	08026a8c 	.word	0x08026a8c
 801d128:	08026b58 	.word	0x08026b58
 801d12c:	08026afc 	.word	0x08026afc

0801d130 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801d130:	b480      	push	{r7}
 801d132:	b085      	sub	sp, #20
 801d134:	af00      	add	r7, sp, #0
 801d136:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 801d138:	4b33      	ldr	r3, [pc, #204]	; (801d208 <ip4_route+0xd8>)
 801d13a:	681b      	ldr	r3, [r3, #0]
 801d13c:	60fb      	str	r3, [r7, #12]
 801d13e:	e036      	b.n	801d1ae <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801d140:	68fb      	ldr	r3, [r7, #12]
 801d142:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801d146:	f003 0301 	and.w	r3, r3, #1
 801d14a:	b2db      	uxtb	r3, r3
 801d14c:	2b00      	cmp	r3, #0
 801d14e:	d02b      	beq.n	801d1a8 <ip4_route+0x78>
 801d150:	68fb      	ldr	r3, [r7, #12]
 801d152:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801d156:	089b      	lsrs	r3, r3, #2
 801d158:	f003 0301 	and.w	r3, r3, #1
 801d15c:	b2db      	uxtb	r3, r3
 801d15e:	2b00      	cmp	r3, #0
 801d160:	d022      	beq.n	801d1a8 <ip4_route+0x78>
 801d162:	68fb      	ldr	r3, [r7, #12]
 801d164:	3304      	adds	r3, #4
 801d166:	681b      	ldr	r3, [r3, #0]
 801d168:	2b00      	cmp	r3, #0
 801d16a:	d01d      	beq.n	801d1a8 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801d16c:	687b      	ldr	r3, [r7, #4]
 801d16e:	681a      	ldr	r2, [r3, #0]
 801d170:	68fb      	ldr	r3, [r7, #12]
 801d172:	3304      	adds	r3, #4
 801d174:	681b      	ldr	r3, [r3, #0]
 801d176:	405a      	eors	r2, r3
 801d178:	68fb      	ldr	r3, [r7, #12]
 801d17a:	3308      	adds	r3, #8
 801d17c:	681b      	ldr	r3, [r3, #0]
 801d17e:	4013      	ands	r3, r2
 801d180:	2b00      	cmp	r3, #0
 801d182:	d101      	bne.n	801d188 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801d184:	68fb      	ldr	r3, [r7, #12]
 801d186:	e038      	b.n	801d1fa <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801d188:	68fb      	ldr	r3, [r7, #12]
 801d18a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801d18e:	f003 0302 	and.w	r3, r3, #2
 801d192:	2b00      	cmp	r3, #0
 801d194:	d108      	bne.n	801d1a8 <ip4_route+0x78>
 801d196:	687b      	ldr	r3, [r7, #4]
 801d198:	681a      	ldr	r2, [r3, #0]
 801d19a:	68fb      	ldr	r3, [r7, #12]
 801d19c:	330c      	adds	r3, #12
 801d19e:	681b      	ldr	r3, [r3, #0]
 801d1a0:	429a      	cmp	r2, r3
 801d1a2:	d101      	bne.n	801d1a8 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 801d1a4:	68fb      	ldr	r3, [r7, #12]
 801d1a6:	e028      	b.n	801d1fa <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 801d1a8:	68fb      	ldr	r3, [r7, #12]
 801d1aa:	681b      	ldr	r3, [r3, #0]
 801d1ac:	60fb      	str	r3, [r7, #12]
 801d1ae:	68fb      	ldr	r3, [r7, #12]
 801d1b0:	2b00      	cmp	r3, #0
 801d1b2:	d1c5      	bne.n	801d140 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801d1b4:	4b15      	ldr	r3, [pc, #84]	; (801d20c <ip4_route+0xdc>)
 801d1b6:	681b      	ldr	r3, [r3, #0]
 801d1b8:	2b00      	cmp	r3, #0
 801d1ba:	d01a      	beq.n	801d1f2 <ip4_route+0xc2>
 801d1bc:	4b13      	ldr	r3, [pc, #76]	; (801d20c <ip4_route+0xdc>)
 801d1be:	681b      	ldr	r3, [r3, #0]
 801d1c0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801d1c4:	f003 0301 	and.w	r3, r3, #1
 801d1c8:	2b00      	cmp	r3, #0
 801d1ca:	d012      	beq.n	801d1f2 <ip4_route+0xc2>
 801d1cc:	4b0f      	ldr	r3, [pc, #60]	; (801d20c <ip4_route+0xdc>)
 801d1ce:	681b      	ldr	r3, [r3, #0]
 801d1d0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801d1d4:	f003 0304 	and.w	r3, r3, #4
 801d1d8:	2b00      	cmp	r3, #0
 801d1da:	d00a      	beq.n	801d1f2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801d1dc:	4b0b      	ldr	r3, [pc, #44]	; (801d20c <ip4_route+0xdc>)
 801d1de:	681b      	ldr	r3, [r3, #0]
 801d1e0:	3304      	adds	r3, #4
 801d1e2:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801d1e4:	2b00      	cmp	r3, #0
 801d1e6:	d004      	beq.n	801d1f2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801d1e8:	687b      	ldr	r3, [r7, #4]
 801d1ea:	681b      	ldr	r3, [r3, #0]
 801d1ec:	b2db      	uxtb	r3, r3
 801d1ee:	2b7f      	cmp	r3, #127	; 0x7f
 801d1f0:	d101      	bne.n	801d1f6 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801d1f2:	2300      	movs	r3, #0
 801d1f4:	e001      	b.n	801d1fa <ip4_route+0xca>
  }

  return netif_default;
 801d1f6:	4b05      	ldr	r3, [pc, #20]	; (801d20c <ip4_route+0xdc>)
 801d1f8:	681b      	ldr	r3, [r3, #0]
}
 801d1fa:	4618      	mov	r0, r3
 801d1fc:	3714      	adds	r7, #20
 801d1fe:	46bd      	mov	sp, r7
 801d200:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d204:	4770      	bx	lr
 801d206:	bf00      	nop
 801d208:	24007dcc 	.word	0x24007dcc
 801d20c:	24007dd0 	.word	0x24007dd0

0801d210 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 801d210:	b580      	push	{r7, lr}
 801d212:	b082      	sub	sp, #8
 801d214:	af00      	add	r7, sp, #0
 801d216:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801d218:	687b      	ldr	r3, [r7, #4]
 801d21a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801d21e:	f003 0301 	and.w	r3, r3, #1
 801d222:	b2db      	uxtb	r3, r3
 801d224:	2b00      	cmp	r3, #0
 801d226:	d016      	beq.n	801d256 <ip4_input_accept+0x46>
 801d228:	687b      	ldr	r3, [r7, #4]
 801d22a:	3304      	adds	r3, #4
 801d22c:	681b      	ldr	r3, [r3, #0]
 801d22e:	2b00      	cmp	r3, #0
 801d230:	d011      	beq.n	801d256 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801d232:	4b0b      	ldr	r3, [pc, #44]	; (801d260 <ip4_input_accept+0x50>)
 801d234:	695a      	ldr	r2, [r3, #20]
 801d236:	687b      	ldr	r3, [r7, #4]
 801d238:	3304      	adds	r3, #4
 801d23a:	681b      	ldr	r3, [r3, #0]
 801d23c:	429a      	cmp	r2, r3
 801d23e:	d008      	beq.n	801d252 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801d240:	4b07      	ldr	r3, [pc, #28]	; (801d260 <ip4_input_accept+0x50>)
 801d242:	695b      	ldr	r3, [r3, #20]
 801d244:	6879      	ldr	r1, [r7, #4]
 801d246:	4618      	mov	r0, r3
 801d248:	f000 fa26 	bl	801d698 <ip4_addr_isbroadcast_u32>
 801d24c:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801d24e:	2b00      	cmp	r3, #0
 801d250:	d001      	beq.n	801d256 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801d252:	2301      	movs	r3, #1
 801d254:	e000      	b.n	801d258 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801d256:	2300      	movs	r3, #0
}
 801d258:	4618      	mov	r0, r3
 801d25a:	3708      	adds	r7, #8
 801d25c:	46bd      	mov	sp, r7
 801d25e:	bd80      	pop	{r7, pc}
 801d260:	24004cb8 	.word	0x24004cb8

0801d264 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801d264:	b580      	push	{r7, lr}
 801d266:	b088      	sub	sp, #32
 801d268:	af00      	add	r7, sp, #0
 801d26a:	6078      	str	r0, [r7, #4]
 801d26c:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 801d26e:	2301      	movs	r3, #1
 801d270:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801d272:	687b      	ldr	r3, [r7, #4]
 801d274:	685b      	ldr	r3, [r3, #4]
 801d276:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 801d278:	69fb      	ldr	r3, [r7, #28]
 801d27a:	781b      	ldrb	r3, [r3, #0]
 801d27c:	091b      	lsrs	r3, r3, #4
 801d27e:	b2db      	uxtb	r3, r3
 801d280:	2b04      	cmp	r3, #4
 801d282:	d004      	beq.n	801d28e <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801d284:	6878      	ldr	r0, [r7, #4]
 801d286:	f7f5 fdb9 	bl	8012dfc <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801d28a:	2300      	movs	r3, #0
 801d28c:	e123      	b.n	801d4d6 <ip4_input+0x272>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801d28e:	69fb      	ldr	r3, [r7, #28]
 801d290:	781b      	ldrb	r3, [r3, #0]
 801d292:	f003 030f 	and.w	r3, r3, #15
 801d296:	b2db      	uxtb	r3, r3
 801d298:	009b      	lsls	r3, r3, #2
 801d29a:	b2db      	uxtb	r3, r3
 801d29c:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801d29e:	69fb      	ldr	r3, [r7, #28]
 801d2a0:	885b      	ldrh	r3, [r3, #2]
 801d2a2:	b29b      	uxth	r3, r3
 801d2a4:	4618      	mov	r0, r3
 801d2a6:	f7f4 f8c1 	bl	801142c <lwip_htons>
 801d2aa:	4603      	mov	r3, r0
 801d2ac:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801d2ae:	687b      	ldr	r3, [r7, #4]
 801d2b0:	891b      	ldrh	r3, [r3, #8]
 801d2b2:	8a3a      	ldrh	r2, [r7, #16]
 801d2b4:	429a      	cmp	r2, r3
 801d2b6:	d204      	bcs.n	801d2c2 <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 801d2b8:	8a3b      	ldrh	r3, [r7, #16]
 801d2ba:	4619      	mov	r1, r3
 801d2bc:	6878      	ldr	r0, [r7, #4]
 801d2be:	f7f5 fbe5 	bl	8012a8c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801d2c2:	687b      	ldr	r3, [r7, #4]
 801d2c4:	895b      	ldrh	r3, [r3, #10]
 801d2c6:	8a7a      	ldrh	r2, [r7, #18]
 801d2c8:	429a      	cmp	r2, r3
 801d2ca:	d807      	bhi.n	801d2dc <ip4_input+0x78>
 801d2cc:	687b      	ldr	r3, [r7, #4]
 801d2ce:	891b      	ldrh	r3, [r3, #8]
 801d2d0:	8a3a      	ldrh	r2, [r7, #16]
 801d2d2:	429a      	cmp	r2, r3
 801d2d4:	d802      	bhi.n	801d2dc <ip4_input+0x78>
 801d2d6:	8a7b      	ldrh	r3, [r7, #18]
 801d2d8:	2b13      	cmp	r3, #19
 801d2da:	d804      	bhi.n	801d2e6 <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801d2dc:	6878      	ldr	r0, [r7, #4]
 801d2de:	f7f5 fd8d 	bl	8012dfc <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801d2e2:	2300      	movs	r3, #0
 801d2e4:	e0f7      	b.n	801d4d6 <ip4_input+0x272>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801d2e6:	69fb      	ldr	r3, [r7, #28]
 801d2e8:	691b      	ldr	r3, [r3, #16]
 801d2ea:	4a7d      	ldr	r2, [pc, #500]	; (801d4e0 <ip4_input+0x27c>)
 801d2ec:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801d2ee:	69fb      	ldr	r3, [r7, #28]
 801d2f0:	68db      	ldr	r3, [r3, #12]
 801d2f2:	4a7b      	ldr	r2, [pc, #492]	; (801d4e0 <ip4_input+0x27c>)
 801d2f4:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801d2f6:	4b7a      	ldr	r3, [pc, #488]	; (801d4e0 <ip4_input+0x27c>)
 801d2f8:	695b      	ldr	r3, [r3, #20]
 801d2fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801d2fe:	2be0      	cmp	r3, #224	; 0xe0
 801d300:	d112      	bne.n	801d328 <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801d302:	683b      	ldr	r3, [r7, #0]
 801d304:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801d308:	f003 0301 	and.w	r3, r3, #1
 801d30c:	b2db      	uxtb	r3, r3
 801d30e:	2b00      	cmp	r3, #0
 801d310:	d007      	beq.n	801d322 <ip4_input+0xbe>
 801d312:	683b      	ldr	r3, [r7, #0]
 801d314:	3304      	adds	r3, #4
 801d316:	681b      	ldr	r3, [r3, #0]
 801d318:	2b00      	cmp	r3, #0
 801d31a:	d002      	beq.n	801d322 <ip4_input+0xbe>
      netif = inp;
 801d31c:	683b      	ldr	r3, [r7, #0]
 801d31e:	61bb      	str	r3, [r7, #24]
 801d320:	e02a      	b.n	801d378 <ip4_input+0x114>
    } else {
      netif = NULL;
 801d322:	2300      	movs	r3, #0
 801d324:	61bb      	str	r3, [r7, #24]
 801d326:	e027      	b.n	801d378 <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 801d328:	6838      	ldr	r0, [r7, #0]
 801d32a:	f7ff ff71 	bl	801d210 <ip4_input_accept>
 801d32e:	4603      	mov	r3, r0
 801d330:	2b00      	cmp	r3, #0
 801d332:	d002      	beq.n	801d33a <ip4_input+0xd6>
      netif = inp;
 801d334:	683b      	ldr	r3, [r7, #0]
 801d336:	61bb      	str	r3, [r7, #24]
 801d338:	e01e      	b.n	801d378 <ip4_input+0x114>
    } else {
      netif = NULL;
 801d33a:	2300      	movs	r3, #0
 801d33c:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801d33e:	4b68      	ldr	r3, [pc, #416]	; (801d4e0 <ip4_input+0x27c>)
 801d340:	695b      	ldr	r3, [r3, #20]
 801d342:	b2db      	uxtb	r3, r3
 801d344:	2b7f      	cmp	r3, #127	; 0x7f
 801d346:	d017      	beq.n	801d378 <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 801d348:	4b66      	ldr	r3, [pc, #408]	; (801d4e4 <ip4_input+0x280>)
 801d34a:	681b      	ldr	r3, [r3, #0]
 801d34c:	61bb      	str	r3, [r7, #24]
 801d34e:	e00e      	b.n	801d36e <ip4_input+0x10a>
          if (netif == inp) {
 801d350:	69ba      	ldr	r2, [r7, #24]
 801d352:	683b      	ldr	r3, [r7, #0]
 801d354:	429a      	cmp	r2, r3
 801d356:	d006      	beq.n	801d366 <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 801d358:	69b8      	ldr	r0, [r7, #24]
 801d35a:	f7ff ff59 	bl	801d210 <ip4_input_accept>
 801d35e:	4603      	mov	r3, r0
 801d360:	2b00      	cmp	r3, #0
 801d362:	d108      	bne.n	801d376 <ip4_input+0x112>
 801d364:	e000      	b.n	801d368 <ip4_input+0x104>
            continue;
 801d366:	bf00      	nop
        NETIF_FOREACH(netif) {
 801d368:	69bb      	ldr	r3, [r7, #24]
 801d36a:	681b      	ldr	r3, [r3, #0]
 801d36c:	61bb      	str	r3, [r7, #24]
 801d36e:	69bb      	ldr	r3, [r7, #24]
 801d370:	2b00      	cmp	r3, #0
 801d372:	d1ed      	bne.n	801d350 <ip4_input+0xec>
 801d374:	e000      	b.n	801d378 <ip4_input+0x114>
            break;
 801d376:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 801d378:	69bb      	ldr	r3, [r7, #24]
 801d37a:	2b00      	cmp	r3, #0
 801d37c:	d111      	bne.n	801d3a2 <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 801d37e:	69fb      	ldr	r3, [r7, #28]
 801d380:	7a5b      	ldrb	r3, [r3, #9]
 801d382:	2b11      	cmp	r3, #17
 801d384:	d10d      	bne.n	801d3a2 <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 801d386:	8a7b      	ldrh	r3, [r7, #18]
 801d388:	69fa      	ldr	r2, [r7, #28]
 801d38a:	4413      	add	r3, r2
 801d38c:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 801d38e:	68fb      	ldr	r3, [r7, #12]
 801d390:	885b      	ldrh	r3, [r3, #2]
 801d392:	b29b      	uxth	r3, r3
 801d394:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 801d398:	d103      	bne.n	801d3a2 <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 801d39a:	683b      	ldr	r3, [r7, #0]
 801d39c:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 801d39e:	2300      	movs	r3, #0
 801d3a0:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 801d3a2:	697b      	ldr	r3, [r7, #20]
 801d3a4:	2b00      	cmp	r3, #0
 801d3a6:	d017      	beq.n	801d3d8 <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 801d3a8:	4b4d      	ldr	r3, [pc, #308]	; (801d4e0 <ip4_input+0x27c>)
 801d3aa:	691b      	ldr	r3, [r3, #16]
 801d3ac:	2b00      	cmp	r3, #0
 801d3ae:	d013      	beq.n	801d3d8 <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801d3b0:	4b4b      	ldr	r3, [pc, #300]	; (801d4e0 <ip4_input+0x27c>)
 801d3b2:	691b      	ldr	r3, [r3, #16]
 801d3b4:	6839      	ldr	r1, [r7, #0]
 801d3b6:	4618      	mov	r0, r3
 801d3b8:	f000 f96e 	bl	801d698 <ip4_addr_isbroadcast_u32>
 801d3bc:	4603      	mov	r3, r0
 801d3be:	2b00      	cmp	r3, #0
 801d3c0:	d105      	bne.n	801d3ce <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801d3c2:	4b47      	ldr	r3, [pc, #284]	; (801d4e0 <ip4_input+0x27c>)
 801d3c4:	691b      	ldr	r3, [r3, #16]
 801d3c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801d3ca:	2be0      	cmp	r3, #224	; 0xe0
 801d3cc:	d104      	bne.n	801d3d8 <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801d3ce:	6878      	ldr	r0, [r7, #4]
 801d3d0:	f7f5 fd14 	bl	8012dfc <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801d3d4:	2300      	movs	r3, #0
 801d3d6:	e07e      	b.n	801d4d6 <ip4_input+0x272>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801d3d8:	69bb      	ldr	r3, [r7, #24]
 801d3da:	2b00      	cmp	r3, #0
 801d3dc:	d104      	bne.n	801d3e8 <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801d3de:	6878      	ldr	r0, [r7, #4]
 801d3e0:	f7f5 fd0c 	bl	8012dfc <pbuf_free>
    return ERR_OK;
 801d3e4:	2300      	movs	r3, #0
 801d3e6:	e076      	b.n	801d4d6 <ip4_input+0x272>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801d3e8:	69fb      	ldr	r3, [r7, #28]
 801d3ea:	88db      	ldrh	r3, [r3, #6]
 801d3ec:	b29b      	uxth	r3, r3
 801d3ee:	461a      	mov	r2, r3
 801d3f0:	f64f 733f 	movw	r3, #65343	; 0xff3f
 801d3f4:	4013      	ands	r3, r2
 801d3f6:	2b00      	cmp	r3, #0
 801d3f8:	d00b      	beq.n	801d412 <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801d3fa:	6878      	ldr	r0, [r7, #4]
 801d3fc:	f000 fc92 	bl	801dd24 <ip4_reass>
 801d400:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801d402:	687b      	ldr	r3, [r7, #4]
 801d404:	2b00      	cmp	r3, #0
 801d406:	d101      	bne.n	801d40c <ip4_input+0x1a8>
      return ERR_OK;
 801d408:	2300      	movs	r3, #0
 801d40a:	e064      	b.n	801d4d6 <ip4_input+0x272>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801d40c:	687b      	ldr	r3, [r7, #4]
 801d40e:	685b      	ldr	r3, [r3, #4]
 801d410:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801d412:	4a33      	ldr	r2, [pc, #204]	; (801d4e0 <ip4_input+0x27c>)
 801d414:	69bb      	ldr	r3, [r7, #24]
 801d416:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 801d418:	4a31      	ldr	r2, [pc, #196]	; (801d4e0 <ip4_input+0x27c>)
 801d41a:	683b      	ldr	r3, [r7, #0]
 801d41c:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801d41e:	4a30      	ldr	r2, [pc, #192]	; (801d4e0 <ip4_input+0x27c>)
 801d420:	69fb      	ldr	r3, [r7, #28]
 801d422:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 801d424:	69fb      	ldr	r3, [r7, #28]
 801d426:	781b      	ldrb	r3, [r3, #0]
 801d428:	f003 030f 	and.w	r3, r3, #15
 801d42c:	b2db      	uxtb	r3, r3
 801d42e:	009b      	lsls	r3, r3, #2
 801d430:	b2db      	uxtb	r3, r3
 801d432:	b29a      	uxth	r2, r3
 801d434:	4b2a      	ldr	r3, [pc, #168]	; (801d4e0 <ip4_input+0x27c>)
 801d436:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 801d438:	8a7b      	ldrh	r3, [r7, #18]
 801d43a:	4619      	mov	r1, r3
 801d43c:	6878      	ldr	r0, [r7, #4]
 801d43e:	f7f5 fc25 	bl	8012c8c <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801d442:	69fb      	ldr	r3, [r7, #28]
 801d444:	7a5b      	ldrb	r3, [r3, #9]
 801d446:	2b11      	cmp	r3, #17
 801d448:	d006      	beq.n	801d458 <ip4_input+0x1f4>
 801d44a:	2b11      	cmp	r3, #17
 801d44c:	dc13      	bgt.n	801d476 <ip4_input+0x212>
 801d44e:	2b01      	cmp	r3, #1
 801d450:	d00c      	beq.n	801d46c <ip4_input+0x208>
 801d452:	2b06      	cmp	r3, #6
 801d454:	d005      	beq.n	801d462 <ip4_input+0x1fe>
 801d456:	e00e      	b.n	801d476 <ip4_input+0x212>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 801d458:	6839      	ldr	r1, [r7, #0]
 801d45a:	6878      	ldr	r0, [r7, #4]
 801d45c:	f7fc fa26 	bl	80198ac <udp_input>
        break;
 801d460:	e026      	b.n	801d4b0 <ip4_input+0x24c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801d462:	6839      	ldr	r1, [r7, #0]
 801d464:	6878      	ldr	r0, [r7, #4]
 801d466:	f7f7 fddf 	bl	8015028 <tcp_input>
        break;
 801d46a:	e021      	b.n	801d4b0 <ip4_input+0x24c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801d46c:	6839      	ldr	r1, [r7, #0]
 801d46e:	6878      	ldr	r0, [r7, #4]
 801d470:	f7ff fcaa 	bl	801cdc8 <icmp_input>
        break;
 801d474:	e01c      	b.n	801d4b0 <ip4_input+0x24c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801d476:	4b1a      	ldr	r3, [pc, #104]	; (801d4e0 <ip4_input+0x27c>)
 801d478:	695b      	ldr	r3, [r3, #20]
 801d47a:	69b9      	ldr	r1, [r7, #24]
 801d47c:	4618      	mov	r0, r3
 801d47e:	f000 f90b 	bl	801d698 <ip4_addr_isbroadcast_u32>
 801d482:	4603      	mov	r3, r0
 801d484:	2b00      	cmp	r3, #0
 801d486:	d10f      	bne.n	801d4a8 <ip4_input+0x244>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801d488:	4b15      	ldr	r3, [pc, #84]	; (801d4e0 <ip4_input+0x27c>)
 801d48a:	695b      	ldr	r3, [r3, #20]
 801d48c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801d490:	2be0      	cmp	r3, #224	; 0xe0
 801d492:	d009      	beq.n	801d4a8 <ip4_input+0x244>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801d494:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801d498:	4619      	mov	r1, r3
 801d49a:	6878      	ldr	r0, [r7, #4]
 801d49c:	f7f5 fc69 	bl	8012d72 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801d4a0:	2102      	movs	r1, #2
 801d4a2:	6878      	ldr	r0, [r7, #4]
 801d4a4:	f7ff fdb0 	bl	801d008 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 801d4a8:	6878      	ldr	r0, [r7, #4]
 801d4aa:	f7f5 fca7 	bl	8012dfc <pbuf_free>
        break;
 801d4ae:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801d4b0:	4b0b      	ldr	r3, [pc, #44]	; (801d4e0 <ip4_input+0x27c>)
 801d4b2:	2200      	movs	r2, #0
 801d4b4:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801d4b6:	4b0a      	ldr	r3, [pc, #40]	; (801d4e0 <ip4_input+0x27c>)
 801d4b8:	2200      	movs	r2, #0
 801d4ba:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801d4bc:	4b08      	ldr	r3, [pc, #32]	; (801d4e0 <ip4_input+0x27c>)
 801d4be:	2200      	movs	r2, #0
 801d4c0:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801d4c2:	4b07      	ldr	r3, [pc, #28]	; (801d4e0 <ip4_input+0x27c>)
 801d4c4:	2200      	movs	r2, #0
 801d4c6:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801d4c8:	4b05      	ldr	r3, [pc, #20]	; (801d4e0 <ip4_input+0x27c>)
 801d4ca:	2200      	movs	r2, #0
 801d4cc:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801d4ce:	4b04      	ldr	r3, [pc, #16]	; (801d4e0 <ip4_input+0x27c>)
 801d4d0:	2200      	movs	r2, #0
 801d4d2:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801d4d4:	2300      	movs	r3, #0
}
 801d4d6:	4618      	mov	r0, r3
 801d4d8:	3720      	adds	r7, #32
 801d4da:	46bd      	mov	sp, r7
 801d4dc:	bd80      	pop	{r7, pc}
 801d4de:	bf00      	nop
 801d4e0:	24004cb8 	.word	0x24004cb8
 801d4e4:	24007dcc 	.word	0x24007dcc

0801d4e8 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 801d4e8:	b580      	push	{r7, lr}
 801d4ea:	b08a      	sub	sp, #40	; 0x28
 801d4ec:	af04      	add	r7, sp, #16
 801d4ee:	60f8      	str	r0, [r7, #12]
 801d4f0:	60b9      	str	r1, [r7, #8]
 801d4f2:	607a      	str	r2, [r7, #4]
 801d4f4:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801d4f6:	68bb      	ldr	r3, [r7, #8]
 801d4f8:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801d4fa:	687b      	ldr	r3, [r7, #4]
 801d4fc:	2b00      	cmp	r3, #0
 801d4fe:	d009      	beq.n	801d514 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 801d500:	68bb      	ldr	r3, [r7, #8]
 801d502:	2b00      	cmp	r3, #0
 801d504:	d003      	beq.n	801d50e <ip4_output_if+0x26>
 801d506:	68bb      	ldr	r3, [r7, #8]
 801d508:	681b      	ldr	r3, [r3, #0]
 801d50a:	2b00      	cmp	r3, #0
 801d50c:	d102      	bne.n	801d514 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801d50e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d510:	3304      	adds	r3, #4
 801d512:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801d514:	78fa      	ldrb	r2, [r7, #3]
 801d516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d518:	9302      	str	r3, [sp, #8]
 801d51a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801d51e:	9301      	str	r3, [sp, #4]
 801d520:	f897 3020 	ldrb.w	r3, [r7, #32]
 801d524:	9300      	str	r3, [sp, #0]
 801d526:	4613      	mov	r3, r2
 801d528:	687a      	ldr	r2, [r7, #4]
 801d52a:	6979      	ldr	r1, [r7, #20]
 801d52c:	68f8      	ldr	r0, [r7, #12]
 801d52e:	f000 f805 	bl	801d53c <ip4_output_if_src>
 801d532:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 801d534:	4618      	mov	r0, r3
 801d536:	3718      	adds	r7, #24
 801d538:	46bd      	mov	sp, r7
 801d53a:	bd80      	pop	{r7, pc}

0801d53c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801d53c:	b580      	push	{r7, lr}
 801d53e:	b088      	sub	sp, #32
 801d540:	af00      	add	r7, sp, #0
 801d542:	60f8      	str	r0, [r7, #12]
 801d544:	60b9      	str	r1, [r7, #8]
 801d546:	607a      	str	r2, [r7, #4]
 801d548:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801d54a:	68fb      	ldr	r3, [r7, #12]
 801d54c:	7b9b      	ldrb	r3, [r3, #14]
 801d54e:	2b01      	cmp	r3, #1
 801d550:	d006      	beq.n	801d560 <ip4_output_if_src+0x24>
 801d552:	4b4b      	ldr	r3, [pc, #300]	; (801d680 <ip4_output_if_src+0x144>)
 801d554:	f44f 7255 	mov.w	r2, #852	; 0x354
 801d558:	494a      	ldr	r1, [pc, #296]	; (801d684 <ip4_output_if_src+0x148>)
 801d55a:	484b      	ldr	r0, [pc, #300]	; (801d688 <ip4_output_if_src+0x14c>)
 801d55c:	f002 ff78 	bl	8020450 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801d560:	687b      	ldr	r3, [r7, #4]
 801d562:	2b00      	cmp	r3, #0
 801d564:	d060      	beq.n	801d628 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801d566:	2314      	movs	r3, #20
 801d568:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801d56a:	2114      	movs	r1, #20
 801d56c:	68f8      	ldr	r0, [r7, #12]
 801d56e:	f7f5 fb7d 	bl	8012c6c <pbuf_add_header>
 801d572:	4603      	mov	r3, r0
 801d574:	2b00      	cmp	r3, #0
 801d576:	d002      	beq.n	801d57e <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801d578:	f06f 0301 	mvn.w	r3, #1
 801d57c:	e07c      	b.n	801d678 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801d57e:	68fb      	ldr	r3, [r7, #12]
 801d580:	685b      	ldr	r3, [r3, #4]
 801d582:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801d584:	68fb      	ldr	r3, [r7, #12]
 801d586:	895b      	ldrh	r3, [r3, #10]
 801d588:	2b13      	cmp	r3, #19
 801d58a:	d806      	bhi.n	801d59a <ip4_output_if_src+0x5e>
 801d58c:	4b3c      	ldr	r3, [pc, #240]	; (801d680 <ip4_output_if_src+0x144>)
 801d58e:	f44f 7262 	mov.w	r2, #904	; 0x388
 801d592:	493e      	ldr	r1, [pc, #248]	; (801d68c <ip4_output_if_src+0x150>)
 801d594:	483c      	ldr	r0, [pc, #240]	; (801d688 <ip4_output_if_src+0x14c>)
 801d596:	f002 ff5b 	bl	8020450 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801d59a:	69fb      	ldr	r3, [r7, #28]
 801d59c:	78fa      	ldrb	r2, [r7, #3]
 801d59e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801d5a0:	69fb      	ldr	r3, [r7, #28]
 801d5a2:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801d5a6:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801d5a8:	687b      	ldr	r3, [r7, #4]
 801d5aa:	681a      	ldr	r2, [r3, #0]
 801d5ac:	69fb      	ldr	r3, [r7, #28]
 801d5ae:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801d5b0:	8b7b      	ldrh	r3, [r7, #26]
 801d5b2:	089b      	lsrs	r3, r3, #2
 801d5b4:	b29b      	uxth	r3, r3
 801d5b6:	b2db      	uxtb	r3, r3
 801d5b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d5bc:	b2da      	uxtb	r2, r3
 801d5be:	69fb      	ldr	r3, [r7, #28]
 801d5c0:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801d5c2:	69fb      	ldr	r3, [r7, #28]
 801d5c4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801d5c8:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801d5ca:	68fb      	ldr	r3, [r7, #12]
 801d5cc:	891b      	ldrh	r3, [r3, #8]
 801d5ce:	4618      	mov	r0, r3
 801d5d0:	f7f3 ff2c 	bl	801142c <lwip_htons>
 801d5d4:	4603      	mov	r3, r0
 801d5d6:	461a      	mov	r2, r3
 801d5d8:	69fb      	ldr	r3, [r7, #28]
 801d5da:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801d5dc:	69fb      	ldr	r3, [r7, #28]
 801d5de:	2200      	movs	r2, #0
 801d5e0:	719a      	strb	r2, [r3, #6]
 801d5e2:	2200      	movs	r2, #0
 801d5e4:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801d5e6:	4b2a      	ldr	r3, [pc, #168]	; (801d690 <ip4_output_if_src+0x154>)
 801d5e8:	881b      	ldrh	r3, [r3, #0]
 801d5ea:	4618      	mov	r0, r3
 801d5ec:	f7f3 ff1e 	bl	801142c <lwip_htons>
 801d5f0:	4603      	mov	r3, r0
 801d5f2:	461a      	mov	r2, r3
 801d5f4:	69fb      	ldr	r3, [r7, #28]
 801d5f6:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801d5f8:	4b25      	ldr	r3, [pc, #148]	; (801d690 <ip4_output_if_src+0x154>)
 801d5fa:	881b      	ldrh	r3, [r3, #0]
 801d5fc:	3301      	adds	r3, #1
 801d5fe:	b29a      	uxth	r2, r3
 801d600:	4b23      	ldr	r3, [pc, #140]	; (801d690 <ip4_output_if_src+0x154>)
 801d602:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801d604:	68bb      	ldr	r3, [r7, #8]
 801d606:	2b00      	cmp	r3, #0
 801d608:	d104      	bne.n	801d614 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801d60a:	4b22      	ldr	r3, [pc, #136]	; (801d694 <ip4_output_if_src+0x158>)
 801d60c:	681a      	ldr	r2, [r3, #0]
 801d60e:	69fb      	ldr	r3, [r7, #28]
 801d610:	60da      	str	r2, [r3, #12]
 801d612:	e003      	b.n	801d61c <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801d614:	68bb      	ldr	r3, [r7, #8]
 801d616:	681a      	ldr	r2, [r3, #0]
 801d618:	69fb      	ldr	r3, [r7, #28]
 801d61a:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801d61c:	69fb      	ldr	r3, [r7, #28]
 801d61e:	2200      	movs	r2, #0
 801d620:	729a      	strb	r2, [r3, #10]
 801d622:	2200      	movs	r2, #0
 801d624:	72da      	strb	r2, [r3, #11]
 801d626:	e00f      	b.n	801d648 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 801d628:	68fb      	ldr	r3, [r7, #12]
 801d62a:	895b      	ldrh	r3, [r3, #10]
 801d62c:	2b13      	cmp	r3, #19
 801d62e:	d802      	bhi.n	801d636 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801d630:	f06f 0301 	mvn.w	r3, #1
 801d634:	e020      	b.n	801d678 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801d636:	68fb      	ldr	r3, [r7, #12]
 801d638:	685b      	ldr	r3, [r3, #4]
 801d63a:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801d63c:	69fb      	ldr	r3, [r7, #28]
 801d63e:	691b      	ldr	r3, [r3, #16]
 801d640:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801d642:	f107 0314 	add.w	r3, r7, #20
 801d646:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801d648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d64a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801d64c:	2b00      	cmp	r3, #0
 801d64e:	d00c      	beq.n	801d66a <ip4_output_if_src+0x12e>
 801d650:	68fb      	ldr	r3, [r7, #12]
 801d652:	891a      	ldrh	r2, [r3, #8]
 801d654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d656:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801d658:	429a      	cmp	r2, r3
 801d65a:	d906      	bls.n	801d66a <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 801d65c:	687a      	ldr	r2, [r7, #4]
 801d65e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801d660:	68f8      	ldr	r0, [r7, #12]
 801d662:	f000 fd53 	bl	801e10c <ip4_frag>
 801d666:	4603      	mov	r3, r0
 801d668:	e006      	b.n	801d678 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801d66a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d66c:	695b      	ldr	r3, [r3, #20]
 801d66e:	687a      	ldr	r2, [r7, #4]
 801d670:	68f9      	ldr	r1, [r7, #12]
 801d672:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801d674:	4798      	blx	r3
 801d676:	4603      	mov	r3, r0
}
 801d678:	4618      	mov	r0, r3
 801d67a:	3720      	adds	r7, #32
 801d67c:	46bd      	mov	sp, r7
 801d67e:	bd80      	pop	{r7, pc}
 801d680:	08026b84 	.word	0x08026b84
 801d684:	08026bb8 	.word	0x08026bb8
 801d688:	08026bc4 	.word	0x08026bc4
 801d68c:	08026bec 	.word	0x08026bec
 801d690:	24007f5e 	.word	0x24007f5e
 801d694:	08027084 	.word	0x08027084

0801d698 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801d698:	b480      	push	{r7}
 801d69a:	b085      	sub	sp, #20
 801d69c:	af00      	add	r7, sp, #0
 801d69e:	6078      	str	r0, [r7, #4]
 801d6a0:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801d6a2:	687b      	ldr	r3, [r7, #4]
 801d6a4:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801d6a6:	687b      	ldr	r3, [r7, #4]
 801d6a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d6ac:	d002      	beq.n	801d6b4 <ip4_addr_isbroadcast_u32+0x1c>
 801d6ae:	687b      	ldr	r3, [r7, #4]
 801d6b0:	2b00      	cmp	r3, #0
 801d6b2:	d101      	bne.n	801d6b8 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801d6b4:	2301      	movs	r3, #1
 801d6b6:	e02a      	b.n	801d70e <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801d6b8:	683b      	ldr	r3, [r7, #0]
 801d6ba:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801d6be:	f003 0302 	and.w	r3, r3, #2
 801d6c2:	2b00      	cmp	r3, #0
 801d6c4:	d101      	bne.n	801d6ca <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801d6c6:	2300      	movs	r3, #0
 801d6c8:	e021      	b.n	801d70e <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801d6ca:	683b      	ldr	r3, [r7, #0]
 801d6cc:	3304      	adds	r3, #4
 801d6ce:	681b      	ldr	r3, [r3, #0]
 801d6d0:	687a      	ldr	r2, [r7, #4]
 801d6d2:	429a      	cmp	r2, r3
 801d6d4:	d101      	bne.n	801d6da <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801d6d6:	2300      	movs	r3, #0
 801d6d8:	e019      	b.n	801d70e <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801d6da:	68fa      	ldr	r2, [r7, #12]
 801d6dc:	683b      	ldr	r3, [r7, #0]
 801d6de:	3304      	adds	r3, #4
 801d6e0:	681b      	ldr	r3, [r3, #0]
 801d6e2:	405a      	eors	r2, r3
 801d6e4:	683b      	ldr	r3, [r7, #0]
 801d6e6:	3308      	adds	r3, #8
 801d6e8:	681b      	ldr	r3, [r3, #0]
 801d6ea:	4013      	ands	r3, r2
 801d6ec:	2b00      	cmp	r3, #0
 801d6ee:	d10d      	bne.n	801d70c <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801d6f0:	683b      	ldr	r3, [r7, #0]
 801d6f2:	3308      	adds	r3, #8
 801d6f4:	681b      	ldr	r3, [r3, #0]
 801d6f6:	43da      	mvns	r2, r3
 801d6f8:	687b      	ldr	r3, [r7, #4]
 801d6fa:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801d6fc:	683b      	ldr	r3, [r7, #0]
 801d6fe:	3308      	adds	r3, #8
 801d700:	681b      	ldr	r3, [r3, #0]
 801d702:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801d704:	429a      	cmp	r2, r3
 801d706:	d101      	bne.n	801d70c <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801d708:	2301      	movs	r3, #1
 801d70a:	e000      	b.n	801d70e <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801d70c:	2300      	movs	r3, #0
  }
}
 801d70e:	4618      	mov	r0, r3
 801d710:	3714      	adds	r7, #20
 801d712:	46bd      	mov	sp, r7
 801d714:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d718:	4770      	bx	lr
	...

0801d71c <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801d71c:	b580      	push	{r7, lr}
 801d71e:	b084      	sub	sp, #16
 801d720:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801d722:	2300      	movs	r3, #0
 801d724:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801d726:	4b12      	ldr	r3, [pc, #72]	; (801d770 <ip_reass_tmr+0x54>)
 801d728:	681b      	ldr	r3, [r3, #0]
 801d72a:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801d72c:	e018      	b.n	801d760 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801d72e:	68fb      	ldr	r3, [r7, #12]
 801d730:	7fdb      	ldrb	r3, [r3, #31]
 801d732:	2b00      	cmp	r3, #0
 801d734:	d00b      	beq.n	801d74e <ip_reass_tmr+0x32>
      r->timer--;
 801d736:	68fb      	ldr	r3, [r7, #12]
 801d738:	7fdb      	ldrb	r3, [r3, #31]
 801d73a:	3b01      	subs	r3, #1
 801d73c:	b2da      	uxtb	r2, r3
 801d73e:	68fb      	ldr	r3, [r7, #12]
 801d740:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801d742:	68fb      	ldr	r3, [r7, #12]
 801d744:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801d746:	68fb      	ldr	r3, [r7, #12]
 801d748:	681b      	ldr	r3, [r3, #0]
 801d74a:	60fb      	str	r3, [r7, #12]
 801d74c:	e008      	b.n	801d760 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801d74e:	68fb      	ldr	r3, [r7, #12]
 801d750:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801d752:	68fb      	ldr	r3, [r7, #12]
 801d754:	681b      	ldr	r3, [r3, #0]
 801d756:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801d758:	68b9      	ldr	r1, [r7, #8]
 801d75a:	6878      	ldr	r0, [r7, #4]
 801d75c:	f000 f80a 	bl	801d774 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801d760:	68fb      	ldr	r3, [r7, #12]
 801d762:	2b00      	cmp	r3, #0
 801d764:	d1e3      	bne.n	801d72e <ip_reass_tmr+0x12>
    }
  }
}
 801d766:	bf00      	nop
 801d768:	bf00      	nop
 801d76a:	3710      	adds	r7, #16
 801d76c:	46bd      	mov	sp, r7
 801d76e:	bd80      	pop	{r7, pc}
 801d770:	24007f60 	.word	0x24007f60

0801d774 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801d774:	b580      	push	{r7, lr}
 801d776:	b088      	sub	sp, #32
 801d778:	af00      	add	r7, sp, #0
 801d77a:	6078      	str	r0, [r7, #4]
 801d77c:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801d77e:	2300      	movs	r3, #0
 801d780:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801d782:	683a      	ldr	r2, [r7, #0]
 801d784:	687b      	ldr	r3, [r7, #4]
 801d786:	429a      	cmp	r2, r3
 801d788:	d105      	bne.n	801d796 <ip_reass_free_complete_datagram+0x22>
 801d78a:	4b45      	ldr	r3, [pc, #276]	; (801d8a0 <ip_reass_free_complete_datagram+0x12c>)
 801d78c:	22ab      	movs	r2, #171	; 0xab
 801d78e:	4945      	ldr	r1, [pc, #276]	; (801d8a4 <ip_reass_free_complete_datagram+0x130>)
 801d790:	4845      	ldr	r0, [pc, #276]	; (801d8a8 <ip_reass_free_complete_datagram+0x134>)
 801d792:	f002 fe5d 	bl	8020450 <iprintf>
  if (prev != NULL) {
 801d796:	683b      	ldr	r3, [r7, #0]
 801d798:	2b00      	cmp	r3, #0
 801d79a:	d00a      	beq.n	801d7b2 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801d79c:	683b      	ldr	r3, [r7, #0]
 801d79e:	681b      	ldr	r3, [r3, #0]
 801d7a0:	687a      	ldr	r2, [r7, #4]
 801d7a2:	429a      	cmp	r2, r3
 801d7a4:	d005      	beq.n	801d7b2 <ip_reass_free_complete_datagram+0x3e>
 801d7a6:	4b3e      	ldr	r3, [pc, #248]	; (801d8a0 <ip_reass_free_complete_datagram+0x12c>)
 801d7a8:	22ad      	movs	r2, #173	; 0xad
 801d7aa:	4940      	ldr	r1, [pc, #256]	; (801d8ac <ip_reass_free_complete_datagram+0x138>)
 801d7ac:	483e      	ldr	r0, [pc, #248]	; (801d8a8 <ip_reass_free_complete_datagram+0x134>)
 801d7ae:	f002 fe4f 	bl	8020450 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801d7b2:	687b      	ldr	r3, [r7, #4]
 801d7b4:	685b      	ldr	r3, [r3, #4]
 801d7b6:	685b      	ldr	r3, [r3, #4]
 801d7b8:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801d7ba:	697b      	ldr	r3, [r7, #20]
 801d7bc:	889b      	ldrh	r3, [r3, #4]
 801d7be:	b29b      	uxth	r3, r3
 801d7c0:	2b00      	cmp	r3, #0
 801d7c2:	d12a      	bne.n	801d81a <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801d7c4:	687b      	ldr	r3, [r7, #4]
 801d7c6:	685b      	ldr	r3, [r3, #4]
 801d7c8:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801d7ca:	697b      	ldr	r3, [r7, #20]
 801d7cc:	681a      	ldr	r2, [r3, #0]
 801d7ce:	687b      	ldr	r3, [r7, #4]
 801d7d0:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801d7d2:	69bb      	ldr	r3, [r7, #24]
 801d7d4:	6858      	ldr	r0, [r3, #4]
 801d7d6:	687b      	ldr	r3, [r7, #4]
 801d7d8:	3308      	adds	r3, #8
 801d7da:	2214      	movs	r2, #20
 801d7dc:	4619      	mov	r1, r3
 801d7de:	f002 ff68 	bl	80206b2 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801d7e2:	2101      	movs	r1, #1
 801d7e4:	69b8      	ldr	r0, [r7, #24]
 801d7e6:	f7ff fc1f 	bl	801d028 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801d7ea:	69b8      	ldr	r0, [r7, #24]
 801d7ec:	f7f5 fb94 	bl	8012f18 <pbuf_clen>
 801d7f0:	4603      	mov	r3, r0
 801d7f2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801d7f4:	8bfa      	ldrh	r2, [r7, #30]
 801d7f6:	8a7b      	ldrh	r3, [r7, #18]
 801d7f8:	4413      	add	r3, r2
 801d7fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801d7fe:	db05      	blt.n	801d80c <ip_reass_free_complete_datagram+0x98>
 801d800:	4b27      	ldr	r3, [pc, #156]	; (801d8a0 <ip_reass_free_complete_datagram+0x12c>)
 801d802:	22bc      	movs	r2, #188	; 0xbc
 801d804:	492a      	ldr	r1, [pc, #168]	; (801d8b0 <ip_reass_free_complete_datagram+0x13c>)
 801d806:	4828      	ldr	r0, [pc, #160]	; (801d8a8 <ip_reass_free_complete_datagram+0x134>)
 801d808:	f002 fe22 	bl	8020450 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801d80c:	8bfa      	ldrh	r2, [r7, #30]
 801d80e:	8a7b      	ldrh	r3, [r7, #18]
 801d810:	4413      	add	r3, r2
 801d812:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801d814:	69b8      	ldr	r0, [r7, #24]
 801d816:	f7f5 faf1 	bl	8012dfc <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801d81a:	687b      	ldr	r3, [r7, #4]
 801d81c:	685b      	ldr	r3, [r3, #4]
 801d81e:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801d820:	e01f      	b.n	801d862 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801d822:	69bb      	ldr	r3, [r7, #24]
 801d824:	685b      	ldr	r3, [r3, #4]
 801d826:	617b      	str	r3, [r7, #20]
    pcur = p;
 801d828:	69bb      	ldr	r3, [r7, #24]
 801d82a:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801d82c:	697b      	ldr	r3, [r7, #20]
 801d82e:	681b      	ldr	r3, [r3, #0]
 801d830:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801d832:	68f8      	ldr	r0, [r7, #12]
 801d834:	f7f5 fb70 	bl	8012f18 <pbuf_clen>
 801d838:	4603      	mov	r3, r0
 801d83a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801d83c:	8bfa      	ldrh	r2, [r7, #30]
 801d83e:	8a7b      	ldrh	r3, [r7, #18]
 801d840:	4413      	add	r3, r2
 801d842:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801d846:	db05      	blt.n	801d854 <ip_reass_free_complete_datagram+0xe0>
 801d848:	4b15      	ldr	r3, [pc, #84]	; (801d8a0 <ip_reass_free_complete_datagram+0x12c>)
 801d84a:	22cc      	movs	r2, #204	; 0xcc
 801d84c:	4918      	ldr	r1, [pc, #96]	; (801d8b0 <ip_reass_free_complete_datagram+0x13c>)
 801d84e:	4816      	ldr	r0, [pc, #88]	; (801d8a8 <ip_reass_free_complete_datagram+0x134>)
 801d850:	f002 fdfe 	bl	8020450 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801d854:	8bfa      	ldrh	r2, [r7, #30]
 801d856:	8a7b      	ldrh	r3, [r7, #18]
 801d858:	4413      	add	r3, r2
 801d85a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801d85c:	68f8      	ldr	r0, [r7, #12]
 801d85e:	f7f5 facd 	bl	8012dfc <pbuf_free>
  while (p != NULL) {
 801d862:	69bb      	ldr	r3, [r7, #24]
 801d864:	2b00      	cmp	r3, #0
 801d866:	d1dc      	bne.n	801d822 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801d868:	6839      	ldr	r1, [r7, #0]
 801d86a:	6878      	ldr	r0, [r7, #4]
 801d86c:	f000 f8c2 	bl	801d9f4 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801d870:	4b10      	ldr	r3, [pc, #64]	; (801d8b4 <ip_reass_free_complete_datagram+0x140>)
 801d872:	881b      	ldrh	r3, [r3, #0]
 801d874:	8bfa      	ldrh	r2, [r7, #30]
 801d876:	429a      	cmp	r2, r3
 801d878:	d905      	bls.n	801d886 <ip_reass_free_complete_datagram+0x112>
 801d87a:	4b09      	ldr	r3, [pc, #36]	; (801d8a0 <ip_reass_free_complete_datagram+0x12c>)
 801d87c:	22d2      	movs	r2, #210	; 0xd2
 801d87e:	490e      	ldr	r1, [pc, #56]	; (801d8b8 <ip_reass_free_complete_datagram+0x144>)
 801d880:	4809      	ldr	r0, [pc, #36]	; (801d8a8 <ip_reass_free_complete_datagram+0x134>)
 801d882:	f002 fde5 	bl	8020450 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801d886:	4b0b      	ldr	r3, [pc, #44]	; (801d8b4 <ip_reass_free_complete_datagram+0x140>)
 801d888:	881a      	ldrh	r2, [r3, #0]
 801d88a:	8bfb      	ldrh	r3, [r7, #30]
 801d88c:	1ad3      	subs	r3, r2, r3
 801d88e:	b29a      	uxth	r2, r3
 801d890:	4b08      	ldr	r3, [pc, #32]	; (801d8b4 <ip_reass_free_complete_datagram+0x140>)
 801d892:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801d894:	8bfb      	ldrh	r3, [r7, #30]
}
 801d896:	4618      	mov	r0, r3
 801d898:	3720      	adds	r7, #32
 801d89a:	46bd      	mov	sp, r7
 801d89c:	bd80      	pop	{r7, pc}
 801d89e:	bf00      	nop
 801d8a0:	08026c1c 	.word	0x08026c1c
 801d8a4:	08026c58 	.word	0x08026c58
 801d8a8:	08026c64 	.word	0x08026c64
 801d8ac:	08026c8c 	.word	0x08026c8c
 801d8b0:	08026ca0 	.word	0x08026ca0
 801d8b4:	24007f64 	.word	0x24007f64
 801d8b8:	08026cc0 	.word	0x08026cc0

0801d8bc <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801d8bc:	b580      	push	{r7, lr}
 801d8be:	b08a      	sub	sp, #40	; 0x28
 801d8c0:	af00      	add	r7, sp, #0
 801d8c2:	6078      	str	r0, [r7, #4]
 801d8c4:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801d8c6:	2300      	movs	r3, #0
 801d8c8:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801d8ca:	2300      	movs	r3, #0
 801d8cc:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801d8ce:	2300      	movs	r3, #0
 801d8d0:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801d8d2:	2300      	movs	r3, #0
 801d8d4:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801d8d6:	2300      	movs	r3, #0
 801d8d8:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801d8da:	4b28      	ldr	r3, [pc, #160]	; (801d97c <ip_reass_remove_oldest_datagram+0xc0>)
 801d8dc:	681b      	ldr	r3, [r3, #0]
 801d8de:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801d8e0:	e030      	b.n	801d944 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801d8e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d8e4:	695a      	ldr	r2, [r3, #20]
 801d8e6:	687b      	ldr	r3, [r7, #4]
 801d8e8:	68db      	ldr	r3, [r3, #12]
 801d8ea:	429a      	cmp	r2, r3
 801d8ec:	d10c      	bne.n	801d908 <ip_reass_remove_oldest_datagram+0x4c>
 801d8ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d8f0:	699a      	ldr	r2, [r3, #24]
 801d8f2:	687b      	ldr	r3, [r7, #4]
 801d8f4:	691b      	ldr	r3, [r3, #16]
 801d8f6:	429a      	cmp	r2, r3
 801d8f8:	d106      	bne.n	801d908 <ip_reass_remove_oldest_datagram+0x4c>
 801d8fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d8fc:	899a      	ldrh	r2, [r3, #12]
 801d8fe:	687b      	ldr	r3, [r7, #4]
 801d900:	889b      	ldrh	r3, [r3, #4]
 801d902:	b29b      	uxth	r3, r3
 801d904:	429a      	cmp	r2, r3
 801d906:	d014      	beq.n	801d932 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801d908:	693b      	ldr	r3, [r7, #16]
 801d90a:	3301      	adds	r3, #1
 801d90c:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801d90e:	6a3b      	ldr	r3, [r7, #32]
 801d910:	2b00      	cmp	r3, #0
 801d912:	d104      	bne.n	801d91e <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801d914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d916:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801d918:	69fb      	ldr	r3, [r7, #28]
 801d91a:	61bb      	str	r3, [r7, #24]
 801d91c:	e009      	b.n	801d932 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801d91e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d920:	7fda      	ldrb	r2, [r3, #31]
 801d922:	6a3b      	ldr	r3, [r7, #32]
 801d924:	7fdb      	ldrb	r3, [r3, #31]
 801d926:	429a      	cmp	r2, r3
 801d928:	d803      	bhi.n	801d932 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801d92a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d92c:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801d92e:	69fb      	ldr	r3, [r7, #28]
 801d930:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801d932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d934:	681b      	ldr	r3, [r3, #0]
 801d936:	2b00      	cmp	r3, #0
 801d938:	d001      	beq.n	801d93e <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801d93a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d93c:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801d93e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d940:	681b      	ldr	r3, [r3, #0]
 801d942:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801d944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d946:	2b00      	cmp	r3, #0
 801d948:	d1cb      	bne.n	801d8e2 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801d94a:	6a3b      	ldr	r3, [r7, #32]
 801d94c:	2b00      	cmp	r3, #0
 801d94e:	d008      	beq.n	801d962 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801d950:	69b9      	ldr	r1, [r7, #24]
 801d952:	6a38      	ldr	r0, [r7, #32]
 801d954:	f7ff ff0e 	bl	801d774 <ip_reass_free_complete_datagram>
 801d958:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801d95a:	697a      	ldr	r2, [r7, #20]
 801d95c:	68fb      	ldr	r3, [r7, #12]
 801d95e:	4413      	add	r3, r2
 801d960:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801d962:	697a      	ldr	r2, [r7, #20]
 801d964:	683b      	ldr	r3, [r7, #0]
 801d966:	429a      	cmp	r2, r3
 801d968:	da02      	bge.n	801d970 <ip_reass_remove_oldest_datagram+0xb4>
 801d96a:	693b      	ldr	r3, [r7, #16]
 801d96c:	2b01      	cmp	r3, #1
 801d96e:	dcac      	bgt.n	801d8ca <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801d970:	697b      	ldr	r3, [r7, #20]
}
 801d972:	4618      	mov	r0, r3
 801d974:	3728      	adds	r7, #40	; 0x28
 801d976:	46bd      	mov	sp, r7
 801d978:	bd80      	pop	{r7, pc}
 801d97a:	bf00      	nop
 801d97c:	24007f60 	.word	0x24007f60

0801d980 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801d980:	b580      	push	{r7, lr}
 801d982:	b084      	sub	sp, #16
 801d984:	af00      	add	r7, sp, #0
 801d986:	6078      	str	r0, [r7, #4]
 801d988:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801d98a:	2004      	movs	r0, #4
 801d98c:	f7f4 fade 	bl	8011f4c <memp_malloc>
 801d990:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801d992:	68fb      	ldr	r3, [r7, #12]
 801d994:	2b00      	cmp	r3, #0
 801d996:	d110      	bne.n	801d9ba <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801d998:	6839      	ldr	r1, [r7, #0]
 801d99a:	6878      	ldr	r0, [r7, #4]
 801d99c:	f7ff ff8e 	bl	801d8bc <ip_reass_remove_oldest_datagram>
 801d9a0:	4602      	mov	r2, r0
 801d9a2:	683b      	ldr	r3, [r7, #0]
 801d9a4:	4293      	cmp	r3, r2
 801d9a6:	dc03      	bgt.n	801d9b0 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801d9a8:	2004      	movs	r0, #4
 801d9aa:	f7f4 facf 	bl	8011f4c <memp_malloc>
 801d9ae:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801d9b0:	68fb      	ldr	r3, [r7, #12]
 801d9b2:	2b00      	cmp	r3, #0
 801d9b4:	d101      	bne.n	801d9ba <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801d9b6:	2300      	movs	r3, #0
 801d9b8:	e016      	b.n	801d9e8 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801d9ba:	2220      	movs	r2, #32
 801d9bc:	2100      	movs	r1, #0
 801d9be:	68f8      	ldr	r0, [r7, #12]
 801d9c0:	f002 fde5 	bl	802058e <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801d9c4:	68fb      	ldr	r3, [r7, #12]
 801d9c6:	220f      	movs	r2, #15
 801d9c8:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801d9ca:	4b09      	ldr	r3, [pc, #36]	; (801d9f0 <ip_reass_enqueue_new_datagram+0x70>)
 801d9cc:	681a      	ldr	r2, [r3, #0]
 801d9ce:	68fb      	ldr	r3, [r7, #12]
 801d9d0:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801d9d2:	4a07      	ldr	r2, [pc, #28]	; (801d9f0 <ip_reass_enqueue_new_datagram+0x70>)
 801d9d4:	68fb      	ldr	r3, [r7, #12]
 801d9d6:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801d9d8:	68fb      	ldr	r3, [r7, #12]
 801d9da:	3308      	adds	r3, #8
 801d9dc:	2214      	movs	r2, #20
 801d9de:	6879      	ldr	r1, [r7, #4]
 801d9e0:	4618      	mov	r0, r3
 801d9e2:	f002 fe66 	bl	80206b2 <memcpy>
  return ipr;
 801d9e6:	68fb      	ldr	r3, [r7, #12]
}
 801d9e8:	4618      	mov	r0, r3
 801d9ea:	3710      	adds	r7, #16
 801d9ec:	46bd      	mov	sp, r7
 801d9ee:	bd80      	pop	{r7, pc}
 801d9f0:	24007f60 	.word	0x24007f60

0801d9f4 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801d9f4:	b580      	push	{r7, lr}
 801d9f6:	b082      	sub	sp, #8
 801d9f8:	af00      	add	r7, sp, #0
 801d9fa:	6078      	str	r0, [r7, #4]
 801d9fc:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801d9fe:	4b10      	ldr	r3, [pc, #64]	; (801da40 <ip_reass_dequeue_datagram+0x4c>)
 801da00:	681b      	ldr	r3, [r3, #0]
 801da02:	687a      	ldr	r2, [r7, #4]
 801da04:	429a      	cmp	r2, r3
 801da06:	d104      	bne.n	801da12 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801da08:	687b      	ldr	r3, [r7, #4]
 801da0a:	681b      	ldr	r3, [r3, #0]
 801da0c:	4a0c      	ldr	r2, [pc, #48]	; (801da40 <ip_reass_dequeue_datagram+0x4c>)
 801da0e:	6013      	str	r3, [r2, #0]
 801da10:	e00d      	b.n	801da2e <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801da12:	683b      	ldr	r3, [r7, #0]
 801da14:	2b00      	cmp	r3, #0
 801da16:	d106      	bne.n	801da26 <ip_reass_dequeue_datagram+0x32>
 801da18:	4b0a      	ldr	r3, [pc, #40]	; (801da44 <ip_reass_dequeue_datagram+0x50>)
 801da1a:	f240 1245 	movw	r2, #325	; 0x145
 801da1e:	490a      	ldr	r1, [pc, #40]	; (801da48 <ip_reass_dequeue_datagram+0x54>)
 801da20:	480a      	ldr	r0, [pc, #40]	; (801da4c <ip_reass_dequeue_datagram+0x58>)
 801da22:	f002 fd15 	bl	8020450 <iprintf>
    prev->next = ipr->next;
 801da26:	687b      	ldr	r3, [r7, #4]
 801da28:	681a      	ldr	r2, [r3, #0]
 801da2a:	683b      	ldr	r3, [r7, #0]
 801da2c:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801da2e:	6879      	ldr	r1, [r7, #4]
 801da30:	2004      	movs	r0, #4
 801da32:	f7f4 fb01 	bl	8012038 <memp_free>
}
 801da36:	bf00      	nop
 801da38:	3708      	adds	r7, #8
 801da3a:	46bd      	mov	sp, r7
 801da3c:	bd80      	pop	{r7, pc}
 801da3e:	bf00      	nop
 801da40:	24007f60 	.word	0x24007f60
 801da44:	08026c1c 	.word	0x08026c1c
 801da48:	08026ce4 	.word	0x08026ce4
 801da4c:	08026c64 	.word	0x08026c64

0801da50 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801da50:	b580      	push	{r7, lr}
 801da52:	b08c      	sub	sp, #48	; 0x30
 801da54:	af00      	add	r7, sp, #0
 801da56:	60f8      	str	r0, [r7, #12]
 801da58:	60b9      	str	r1, [r7, #8]
 801da5a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801da5c:	2300      	movs	r3, #0
 801da5e:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801da60:	2301      	movs	r3, #1
 801da62:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 801da64:	68bb      	ldr	r3, [r7, #8]
 801da66:	685b      	ldr	r3, [r3, #4]
 801da68:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801da6a:	69fb      	ldr	r3, [r7, #28]
 801da6c:	885b      	ldrh	r3, [r3, #2]
 801da6e:	b29b      	uxth	r3, r3
 801da70:	4618      	mov	r0, r3
 801da72:	f7f3 fcdb 	bl	801142c <lwip_htons>
 801da76:	4603      	mov	r3, r0
 801da78:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801da7a:	69fb      	ldr	r3, [r7, #28]
 801da7c:	781b      	ldrb	r3, [r3, #0]
 801da7e:	f003 030f 	and.w	r3, r3, #15
 801da82:	b2db      	uxtb	r3, r3
 801da84:	009b      	lsls	r3, r3, #2
 801da86:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801da88:	7e7b      	ldrb	r3, [r7, #25]
 801da8a:	b29b      	uxth	r3, r3
 801da8c:	8b7a      	ldrh	r2, [r7, #26]
 801da8e:	429a      	cmp	r2, r3
 801da90:	d202      	bcs.n	801da98 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801da92:	f04f 33ff 	mov.w	r3, #4294967295
 801da96:	e135      	b.n	801dd04 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801da98:	7e7b      	ldrb	r3, [r7, #25]
 801da9a:	b29b      	uxth	r3, r3
 801da9c:	8b7a      	ldrh	r2, [r7, #26]
 801da9e:	1ad3      	subs	r3, r2, r3
 801daa0:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801daa2:	69fb      	ldr	r3, [r7, #28]
 801daa4:	88db      	ldrh	r3, [r3, #6]
 801daa6:	b29b      	uxth	r3, r3
 801daa8:	4618      	mov	r0, r3
 801daaa:	f7f3 fcbf 	bl	801142c <lwip_htons>
 801daae:	4603      	mov	r3, r0
 801dab0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801dab4:	b29b      	uxth	r3, r3
 801dab6:	00db      	lsls	r3, r3, #3
 801dab8:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801daba:	68bb      	ldr	r3, [r7, #8]
 801dabc:	685b      	ldr	r3, [r3, #4]
 801dabe:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 801dac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dac2:	2200      	movs	r2, #0
 801dac4:	701a      	strb	r2, [r3, #0]
 801dac6:	2200      	movs	r2, #0
 801dac8:	705a      	strb	r2, [r3, #1]
 801daca:	2200      	movs	r2, #0
 801dacc:	709a      	strb	r2, [r3, #2]
 801dace:	2200      	movs	r2, #0
 801dad0:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801dad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dad4:	8afa      	ldrh	r2, [r7, #22]
 801dad6:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801dad8:	8afa      	ldrh	r2, [r7, #22]
 801dada:	8b7b      	ldrh	r3, [r7, #26]
 801dadc:	4413      	add	r3, r2
 801dade:	b29a      	uxth	r2, r3
 801dae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dae2:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801dae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dae6:	88db      	ldrh	r3, [r3, #6]
 801dae8:	b29b      	uxth	r3, r3
 801daea:	8afa      	ldrh	r2, [r7, #22]
 801daec:	429a      	cmp	r2, r3
 801daee:	d902      	bls.n	801daf6 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801daf0:	f04f 33ff 	mov.w	r3, #4294967295
 801daf4:	e106      	b.n	801dd04 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801daf6:	68fb      	ldr	r3, [r7, #12]
 801daf8:	685b      	ldr	r3, [r3, #4]
 801dafa:	627b      	str	r3, [r7, #36]	; 0x24
 801dafc:	e068      	b.n	801dbd0 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801dafe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801db00:	685b      	ldr	r3, [r3, #4]
 801db02:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801db04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801db06:	889b      	ldrh	r3, [r3, #4]
 801db08:	b29a      	uxth	r2, r3
 801db0a:	693b      	ldr	r3, [r7, #16]
 801db0c:	889b      	ldrh	r3, [r3, #4]
 801db0e:	b29b      	uxth	r3, r3
 801db10:	429a      	cmp	r2, r3
 801db12:	d235      	bcs.n	801db80 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801db14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801db16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801db18:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801db1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801db1c:	2b00      	cmp	r3, #0
 801db1e:	d020      	beq.n	801db62 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801db20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801db22:	889b      	ldrh	r3, [r3, #4]
 801db24:	b29a      	uxth	r2, r3
 801db26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801db28:	88db      	ldrh	r3, [r3, #6]
 801db2a:	b29b      	uxth	r3, r3
 801db2c:	429a      	cmp	r2, r3
 801db2e:	d307      	bcc.n	801db40 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801db30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801db32:	88db      	ldrh	r3, [r3, #6]
 801db34:	b29a      	uxth	r2, r3
 801db36:	693b      	ldr	r3, [r7, #16]
 801db38:	889b      	ldrh	r3, [r3, #4]
 801db3a:	b29b      	uxth	r3, r3
 801db3c:	429a      	cmp	r2, r3
 801db3e:	d902      	bls.n	801db46 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801db40:	f04f 33ff 	mov.w	r3, #4294967295
 801db44:	e0de      	b.n	801dd04 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801db46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801db48:	68ba      	ldr	r2, [r7, #8]
 801db4a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801db4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801db4e:	88db      	ldrh	r3, [r3, #6]
 801db50:	b29a      	uxth	r2, r3
 801db52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801db54:	889b      	ldrh	r3, [r3, #4]
 801db56:	b29b      	uxth	r3, r3
 801db58:	429a      	cmp	r2, r3
 801db5a:	d03d      	beq.n	801dbd8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801db5c:	2300      	movs	r3, #0
 801db5e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801db60:	e03a      	b.n	801dbd8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801db62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801db64:	88db      	ldrh	r3, [r3, #6]
 801db66:	b29a      	uxth	r2, r3
 801db68:	693b      	ldr	r3, [r7, #16]
 801db6a:	889b      	ldrh	r3, [r3, #4]
 801db6c:	b29b      	uxth	r3, r3
 801db6e:	429a      	cmp	r2, r3
 801db70:	d902      	bls.n	801db78 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801db72:	f04f 33ff 	mov.w	r3, #4294967295
 801db76:	e0c5      	b.n	801dd04 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801db78:	68fb      	ldr	r3, [r7, #12]
 801db7a:	68ba      	ldr	r2, [r7, #8]
 801db7c:	605a      	str	r2, [r3, #4]
      break;
 801db7e:	e02b      	b.n	801dbd8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801db80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801db82:	889b      	ldrh	r3, [r3, #4]
 801db84:	b29a      	uxth	r2, r3
 801db86:	693b      	ldr	r3, [r7, #16]
 801db88:	889b      	ldrh	r3, [r3, #4]
 801db8a:	b29b      	uxth	r3, r3
 801db8c:	429a      	cmp	r2, r3
 801db8e:	d102      	bne.n	801db96 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801db90:	f04f 33ff 	mov.w	r3, #4294967295
 801db94:	e0b6      	b.n	801dd04 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801db96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801db98:	889b      	ldrh	r3, [r3, #4]
 801db9a:	b29a      	uxth	r2, r3
 801db9c:	693b      	ldr	r3, [r7, #16]
 801db9e:	88db      	ldrh	r3, [r3, #6]
 801dba0:	b29b      	uxth	r3, r3
 801dba2:	429a      	cmp	r2, r3
 801dba4:	d202      	bcs.n	801dbac <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801dba6:	f04f 33ff 	mov.w	r3, #4294967295
 801dbaa:	e0ab      	b.n	801dd04 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801dbac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dbae:	2b00      	cmp	r3, #0
 801dbb0:	d009      	beq.n	801dbc6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801dbb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dbb4:	88db      	ldrh	r3, [r3, #6]
 801dbb6:	b29a      	uxth	r2, r3
 801dbb8:	693b      	ldr	r3, [r7, #16]
 801dbba:	889b      	ldrh	r3, [r3, #4]
 801dbbc:	b29b      	uxth	r3, r3
 801dbbe:	429a      	cmp	r2, r3
 801dbc0:	d001      	beq.n	801dbc6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801dbc2:	2300      	movs	r3, #0
 801dbc4:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801dbc6:	693b      	ldr	r3, [r7, #16]
 801dbc8:	681b      	ldr	r3, [r3, #0]
 801dbca:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 801dbcc:	693b      	ldr	r3, [r7, #16]
 801dbce:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 801dbd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dbd2:	2b00      	cmp	r3, #0
 801dbd4:	d193      	bne.n	801dafe <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801dbd6:	e000      	b.n	801dbda <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801dbd8:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801dbda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dbdc:	2b00      	cmp	r3, #0
 801dbde:	d12d      	bne.n	801dc3c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801dbe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dbe2:	2b00      	cmp	r3, #0
 801dbe4:	d01c      	beq.n	801dc20 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801dbe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dbe8:	88db      	ldrh	r3, [r3, #6]
 801dbea:	b29a      	uxth	r2, r3
 801dbec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dbee:	889b      	ldrh	r3, [r3, #4]
 801dbf0:	b29b      	uxth	r3, r3
 801dbf2:	429a      	cmp	r2, r3
 801dbf4:	d906      	bls.n	801dc04 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801dbf6:	4b45      	ldr	r3, [pc, #276]	; (801dd0c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801dbf8:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 801dbfc:	4944      	ldr	r1, [pc, #272]	; (801dd10 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801dbfe:	4845      	ldr	r0, [pc, #276]	; (801dd14 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801dc00:	f002 fc26 	bl	8020450 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801dc04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dc06:	68ba      	ldr	r2, [r7, #8]
 801dc08:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801dc0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dc0c:	88db      	ldrh	r3, [r3, #6]
 801dc0e:	b29a      	uxth	r2, r3
 801dc10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dc12:	889b      	ldrh	r3, [r3, #4]
 801dc14:	b29b      	uxth	r3, r3
 801dc16:	429a      	cmp	r2, r3
 801dc18:	d010      	beq.n	801dc3c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801dc1a:	2300      	movs	r3, #0
 801dc1c:	623b      	str	r3, [r7, #32]
 801dc1e:	e00d      	b.n	801dc3c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801dc20:	68fb      	ldr	r3, [r7, #12]
 801dc22:	685b      	ldr	r3, [r3, #4]
 801dc24:	2b00      	cmp	r3, #0
 801dc26:	d006      	beq.n	801dc36 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801dc28:	4b38      	ldr	r3, [pc, #224]	; (801dd0c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801dc2a:	f44f 72df 	mov.w	r2, #446	; 0x1be
 801dc2e:	493a      	ldr	r1, [pc, #232]	; (801dd18 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801dc30:	4838      	ldr	r0, [pc, #224]	; (801dd14 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801dc32:	f002 fc0d 	bl	8020450 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801dc36:	68fb      	ldr	r3, [r7, #12]
 801dc38:	68ba      	ldr	r2, [r7, #8]
 801dc3a:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801dc3c:	687b      	ldr	r3, [r7, #4]
 801dc3e:	2b00      	cmp	r3, #0
 801dc40:	d105      	bne.n	801dc4e <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801dc42:	68fb      	ldr	r3, [r7, #12]
 801dc44:	7f9b      	ldrb	r3, [r3, #30]
 801dc46:	f003 0301 	and.w	r3, r3, #1
 801dc4a:	2b00      	cmp	r3, #0
 801dc4c:	d059      	beq.n	801dd02 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801dc4e:	6a3b      	ldr	r3, [r7, #32]
 801dc50:	2b00      	cmp	r3, #0
 801dc52:	d04f      	beq.n	801dcf4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801dc54:	68fb      	ldr	r3, [r7, #12]
 801dc56:	685b      	ldr	r3, [r3, #4]
 801dc58:	2b00      	cmp	r3, #0
 801dc5a:	d006      	beq.n	801dc6a <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801dc5c:	68fb      	ldr	r3, [r7, #12]
 801dc5e:	685b      	ldr	r3, [r3, #4]
 801dc60:	685b      	ldr	r3, [r3, #4]
 801dc62:	889b      	ldrh	r3, [r3, #4]
 801dc64:	b29b      	uxth	r3, r3
 801dc66:	2b00      	cmp	r3, #0
 801dc68:	d002      	beq.n	801dc70 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801dc6a:	2300      	movs	r3, #0
 801dc6c:	623b      	str	r3, [r7, #32]
 801dc6e:	e041      	b.n	801dcf4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801dc70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dc72:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 801dc74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dc76:	681b      	ldr	r3, [r3, #0]
 801dc78:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801dc7a:	e012      	b.n	801dca2 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801dc7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dc7e:	685b      	ldr	r3, [r3, #4]
 801dc80:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 801dc82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dc84:	88db      	ldrh	r3, [r3, #6]
 801dc86:	b29a      	uxth	r2, r3
 801dc88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dc8a:	889b      	ldrh	r3, [r3, #4]
 801dc8c:	b29b      	uxth	r3, r3
 801dc8e:	429a      	cmp	r2, r3
 801dc90:	d002      	beq.n	801dc98 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801dc92:	2300      	movs	r3, #0
 801dc94:	623b      	str	r3, [r7, #32]
            break;
 801dc96:	e007      	b.n	801dca8 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801dc98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dc9a:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 801dc9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dc9e:	681b      	ldr	r3, [r3, #0]
 801dca0:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801dca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dca4:	2b00      	cmp	r3, #0
 801dca6:	d1e9      	bne.n	801dc7c <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801dca8:	6a3b      	ldr	r3, [r7, #32]
 801dcaa:	2b00      	cmp	r3, #0
 801dcac:	d022      	beq.n	801dcf4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801dcae:	68fb      	ldr	r3, [r7, #12]
 801dcb0:	685b      	ldr	r3, [r3, #4]
 801dcb2:	2b00      	cmp	r3, #0
 801dcb4:	d106      	bne.n	801dcc4 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801dcb6:	4b15      	ldr	r3, [pc, #84]	; (801dd0c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801dcb8:	f240 12df 	movw	r2, #479	; 0x1df
 801dcbc:	4917      	ldr	r1, [pc, #92]	; (801dd1c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801dcbe:	4815      	ldr	r0, [pc, #84]	; (801dd14 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801dcc0:	f002 fbc6 	bl	8020450 <iprintf>
          LWIP_ASSERT("sanity check",
 801dcc4:	68fb      	ldr	r3, [r7, #12]
 801dcc6:	685b      	ldr	r3, [r3, #4]
 801dcc8:	685b      	ldr	r3, [r3, #4]
 801dcca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801dccc:	429a      	cmp	r2, r3
 801dcce:	d106      	bne.n	801dcde <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801dcd0:	4b0e      	ldr	r3, [pc, #56]	; (801dd0c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801dcd2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801dcd6:	4911      	ldr	r1, [pc, #68]	; (801dd1c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801dcd8:	480e      	ldr	r0, [pc, #56]	; (801dd14 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801dcda:	f002 fbb9 	bl	8020450 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801dcde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dce0:	681b      	ldr	r3, [r3, #0]
 801dce2:	2b00      	cmp	r3, #0
 801dce4:	d006      	beq.n	801dcf4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801dce6:	4b09      	ldr	r3, [pc, #36]	; (801dd0c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801dce8:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 801dcec:	490c      	ldr	r1, [pc, #48]	; (801dd20 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801dcee:	4809      	ldr	r0, [pc, #36]	; (801dd14 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801dcf0:	f002 fbae 	bl	8020450 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801dcf4:	6a3b      	ldr	r3, [r7, #32]
 801dcf6:	2b00      	cmp	r3, #0
 801dcf8:	bf14      	ite	ne
 801dcfa:	2301      	movne	r3, #1
 801dcfc:	2300      	moveq	r3, #0
 801dcfe:	b2db      	uxtb	r3, r3
 801dd00:	e000      	b.n	801dd04 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801dd02:	2300      	movs	r3, #0
}
 801dd04:	4618      	mov	r0, r3
 801dd06:	3730      	adds	r7, #48	; 0x30
 801dd08:	46bd      	mov	sp, r7
 801dd0a:	bd80      	pop	{r7, pc}
 801dd0c:	08026c1c 	.word	0x08026c1c
 801dd10:	08026d00 	.word	0x08026d00
 801dd14:	08026c64 	.word	0x08026c64
 801dd18:	08026d20 	.word	0x08026d20
 801dd1c:	08026d58 	.word	0x08026d58
 801dd20:	08026d68 	.word	0x08026d68

0801dd24 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801dd24:	b580      	push	{r7, lr}
 801dd26:	b08e      	sub	sp, #56	; 0x38
 801dd28:	af00      	add	r7, sp, #0
 801dd2a:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801dd2c:	687b      	ldr	r3, [r7, #4]
 801dd2e:	685b      	ldr	r3, [r3, #4]
 801dd30:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801dd32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dd34:	781b      	ldrb	r3, [r3, #0]
 801dd36:	f003 030f 	and.w	r3, r3, #15
 801dd3a:	b2db      	uxtb	r3, r3
 801dd3c:	009b      	lsls	r3, r3, #2
 801dd3e:	b2db      	uxtb	r3, r3
 801dd40:	2b14      	cmp	r3, #20
 801dd42:	f040 8171 	bne.w	801e028 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801dd46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dd48:	88db      	ldrh	r3, [r3, #6]
 801dd4a:	b29b      	uxth	r3, r3
 801dd4c:	4618      	mov	r0, r3
 801dd4e:	f7f3 fb6d 	bl	801142c <lwip_htons>
 801dd52:	4603      	mov	r3, r0
 801dd54:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801dd58:	b29b      	uxth	r3, r3
 801dd5a:	00db      	lsls	r3, r3, #3
 801dd5c:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801dd5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dd60:	885b      	ldrh	r3, [r3, #2]
 801dd62:	b29b      	uxth	r3, r3
 801dd64:	4618      	mov	r0, r3
 801dd66:	f7f3 fb61 	bl	801142c <lwip_htons>
 801dd6a:	4603      	mov	r3, r0
 801dd6c:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801dd6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dd70:	781b      	ldrb	r3, [r3, #0]
 801dd72:	f003 030f 	and.w	r3, r3, #15
 801dd76:	b2db      	uxtb	r3, r3
 801dd78:	009b      	lsls	r3, r3, #2
 801dd7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 801dd7e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801dd82:	b29b      	uxth	r3, r3
 801dd84:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801dd86:	429a      	cmp	r2, r3
 801dd88:	f0c0 8150 	bcc.w	801e02c <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801dd8c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801dd90:	b29b      	uxth	r3, r3
 801dd92:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801dd94:	1ad3      	subs	r3, r2, r3
 801dd96:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801dd98:	6878      	ldr	r0, [r7, #4]
 801dd9a:	f7f5 f8bd 	bl	8012f18 <pbuf_clen>
 801dd9e:	4603      	mov	r3, r0
 801dda0:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801dda2:	4b8c      	ldr	r3, [pc, #560]	; (801dfd4 <ip4_reass+0x2b0>)
 801dda4:	881b      	ldrh	r3, [r3, #0]
 801dda6:	461a      	mov	r2, r3
 801dda8:	8c3b      	ldrh	r3, [r7, #32]
 801ddaa:	4413      	add	r3, r2
 801ddac:	2b0a      	cmp	r3, #10
 801ddae:	dd10      	ble.n	801ddd2 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801ddb0:	8c3b      	ldrh	r3, [r7, #32]
 801ddb2:	4619      	mov	r1, r3
 801ddb4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801ddb6:	f7ff fd81 	bl	801d8bc <ip_reass_remove_oldest_datagram>
 801ddba:	4603      	mov	r3, r0
 801ddbc:	2b00      	cmp	r3, #0
 801ddbe:	f000 8137 	beq.w	801e030 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801ddc2:	4b84      	ldr	r3, [pc, #528]	; (801dfd4 <ip4_reass+0x2b0>)
 801ddc4:	881b      	ldrh	r3, [r3, #0]
 801ddc6:	461a      	mov	r2, r3
 801ddc8:	8c3b      	ldrh	r3, [r7, #32]
 801ddca:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801ddcc:	2b0a      	cmp	r3, #10
 801ddce:	f300 812f 	bgt.w	801e030 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801ddd2:	4b81      	ldr	r3, [pc, #516]	; (801dfd8 <ip4_reass+0x2b4>)
 801ddd4:	681b      	ldr	r3, [r3, #0]
 801ddd6:	633b      	str	r3, [r7, #48]	; 0x30
 801ddd8:	e015      	b.n	801de06 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801ddda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801dddc:	695a      	ldr	r2, [r3, #20]
 801ddde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dde0:	68db      	ldr	r3, [r3, #12]
 801dde2:	429a      	cmp	r2, r3
 801dde4:	d10c      	bne.n	801de00 <ip4_reass+0xdc>
 801dde6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801dde8:	699a      	ldr	r2, [r3, #24]
 801ddea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ddec:	691b      	ldr	r3, [r3, #16]
 801ddee:	429a      	cmp	r2, r3
 801ddf0:	d106      	bne.n	801de00 <ip4_reass+0xdc>
 801ddf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ddf4:	899a      	ldrh	r2, [r3, #12]
 801ddf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ddf8:	889b      	ldrh	r3, [r3, #4]
 801ddfa:	b29b      	uxth	r3, r3
 801ddfc:	429a      	cmp	r2, r3
 801ddfe:	d006      	beq.n	801de0e <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801de00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801de02:	681b      	ldr	r3, [r3, #0]
 801de04:	633b      	str	r3, [r7, #48]	; 0x30
 801de06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801de08:	2b00      	cmp	r3, #0
 801de0a:	d1e6      	bne.n	801ddda <ip4_reass+0xb6>
 801de0c:	e000      	b.n	801de10 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801de0e:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801de10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801de12:	2b00      	cmp	r3, #0
 801de14:	d109      	bne.n	801de2a <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801de16:	8c3b      	ldrh	r3, [r7, #32]
 801de18:	4619      	mov	r1, r3
 801de1a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801de1c:	f7ff fdb0 	bl	801d980 <ip_reass_enqueue_new_datagram>
 801de20:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801de22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801de24:	2b00      	cmp	r3, #0
 801de26:	d11c      	bne.n	801de62 <ip4_reass+0x13e>
      goto nullreturn;
 801de28:	e105      	b.n	801e036 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801de2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801de2c:	88db      	ldrh	r3, [r3, #6]
 801de2e:	b29b      	uxth	r3, r3
 801de30:	4618      	mov	r0, r3
 801de32:	f7f3 fafb 	bl	801142c <lwip_htons>
 801de36:	4603      	mov	r3, r0
 801de38:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801de3c:	2b00      	cmp	r3, #0
 801de3e:	d110      	bne.n	801de62 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801de40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801de42:	89db      	ldrh	r3, [r3, #14]
 801de44:	4618      	mov	r0, r3
 801de46:	f7f3 faf1 	bl	801142c <lwip_htons>
 801de4a:	4603      	mov	r3, r0
 801de4c:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801de50:	2b00      	cmp	r3, #0
 801de52:	d006      	beq.n	801de62 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801de54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801de56:	3308      	adds	r3, #8
 801de58:	2214      	movs	r2, #20
 801de5a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801de5c:	4618      	mov	r0, r3
 801de5e:	f002 fc28 	bl	80206b2 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801de62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801de64:	88db      	ldrh	r3, [r3, #6]
 801de66:	b29b      	uxth	r3, r3
 801de68:	f003 0320 	and.w	r3, r3, #32
 801de6c:	2b00      	cmp	r3, #0
 801de6e:	bf0c      	ite	eq
 801de70:	2301      	moveq	r3, #1
 801de72:	2300      	movne	r3, #0
 801de74:	b2db      	uxtb	r3, r3
 801de76:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801de78:	69fb      	ldr	r3, [r7, #28]
 801de7a:	2b00      	cmp	r3, #0
 801de7c:	d00e      	beq.n	801de9c <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801de7e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801de80:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801de82:	4413      	add	r3, r2
 801de84:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801de86:	8b7a      	ldrh	r2, [r7, #26]
 801de88:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801de8a:	429a      	cmp	r2, r3
 801de8c:	f0c0 80a0 	bcc.w	801dfd0 <ip4_reass+0x2ac>
 801de90:	8b7b      	ldrh	r3, [r7, #26]
 801de92:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801de96:	4293      	cmp	r3, r2
 801de98:	f200 809a 	bhi.w	801dfd0 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801de9c:	69fa      	ldr	r2, [r7, #28]
 801de9e:	6879      	ldr	r1, [r7, #4]
 801dea0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801dea2:	f7ff fdd5 	bl	801da50 <ip_reass_chain_frag_into_datagram_and_validate>
 801dea6:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801dea8:	697b      	ldr	r3, [r7, #20]
 801deaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 801deae:	f000 809b 	beq.w	801dfe8 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801deb2:	4b48      	ldr	r3, [pc, #288]	; (801dfd4 <ip4_reass+0x2b0>)
 801deb4:	881a      	ldrh	r2, [r3, #0]
 801deb6:	8c3b      	ldrh	r3, [r7, #32]
 801deb8:	4413      	add	r3, r2
 801deba:	b29a      	uxth	r2, r3
 801debc:	4b45      	ldr	r3, [pc, #276]	; (801dfd4 <ip4_reass+0x2b0>)
 801debe:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801dec0:	69fb      	ldr	r3, [r7, #28]
 801dec2:	2b00      	cmp	r3, #0
 801dec4:	d00d      	beq.n	801dee2 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801dec6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801dec8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801deca:	4413      	add	r3, r2
 801decc:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801dece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ded0:	8a7a      	ldrh	r2, [r7, #18]
 801ded2:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801ded4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ded6:	7f9b      	ldrb	r3, [r3, #30]
 801ded8:	f043 0301 	orr.w	r3, r3, #1
 801dedc:	b2da      	uxtb	r2, r3
 801dede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801dee0:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801dee2:	697b      	ldr	r3, [r7, #20]
 801dee4:	2b01      	cmp	r3, #1
 801dee6:	d171      	bne.n	801dfcc <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801dee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801deea:	8b9b      	ldrh	r3, [r3, #28]
 801deec:	3314      	adds	r3, #20
 801deee:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801def0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801def2:	685b      	ldr	r3, [r3, #4]
 801def4:	685b      	ldr	r3, [r3, #4]
 801def6:	681b      	ldr	r3, [r3, #0]
 801def8:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801defa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801defc:	685b      	ldr	r3, [r3, #4]
 801defe:	685b      	ldr	r3, [r3, #4]
 801df00:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801df02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801df04:	3308      	adds	r3, #8
 801df06:	2214      	movs	r2, #20
 801df08:	4619      	mov	r1, r3
 801df0a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801df0c:	f002 fbd1 	bl	80206b2 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801df10:	8a3b      	ldrh	r3, [r7, #16]
 801df12:	4618      	mov	r0, r3
 801df14:	f7f3 fa8a 	bl	801142c <lwip_htons>
 801df18:	4603      	mov	r3, r0
 801df1a:	461a      	mov	r2, r3
 801df1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801df1e:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801df20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801df22:	2200      	movs	r2, #0
 801df24:	719a      	strb	r2, [r3, #6]
 801df26:	2200      	movs	r2, #0
 801df28:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801df2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801df2c:	2200      	movs	r2, #0
 801df2e:	729a      	strb	r2, [r3, #10]
 801df30:	2200      	movs	r2, #0
 801df32:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801df34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801df36:	685b      	ldr	r3, [r3, #4]
 801df38:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801df3a:	e00d      	b.n	801df58 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801df3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801df3e:	685b      	ldr	r3, [r3, #4]
 801df40:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801df42:	2114      	movs	r1, #20
 801df44:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801df46:	f7f4 fea1 	bl	8012c8c <pbuf_remove_header>
      pbuf_cat(p, r);
 801df4a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801df4c:	6878      	ldr	r0, [r7, #4]
 801df4e:	f7f5 f823 	bl	8012f98 <pbuf_cat>
      r = iprh->next_pbuf;
 801df52:	68fb      	ldr	r3, [r7, #12]
 801df54:	681b      	ldr	r3, [r3, #0]
 801df56:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 801df58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801df5a:	2b00      	cmp	r3, #0
 801df5c:	d1ee      	bne.n	801df3c <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801df5e:	4b1e      	ldr	r3, [pc, #120]	; (801dfd8 <ip4_reass+0x2b4>)
 801df60:	681b      	ldr	r3, [r3, #0]
 801df62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801df64:	429a      	cmp	r2, r3
 801df66:	d102      	bne.n	801df6e <ip4_reass+0x24a>
      ipr_prev = NULL;
 801df68:	2300      	movs	r3, #0
 801df6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801df6c:	e010      	b.n	801df90 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801df6e:	4b1a      	ldr	r3, [pc, #104]	; (801dfd8 <ip4_reass+0x2b4>)
 801df70:	681b      	ldr	r3, [r3, #0]
 801df72:	62fb      	str	r3, [r7, #44]	; 0x2c
 801df74:	e007      	b.n	801df86 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801df76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801df78:	681b      	ldr	r3, [r3, #0]
 801df7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801df7c:	429a      	cmp	r2, r3
 801df7e:	d006      	beq.n	801df8e <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801df80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801df82:	681b      	ldr	r3, [r3, #0]
 801df84:	62fb      	str	r3, [r7, #44]	; 0x2c
 801df86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801df88:	2b00      	cmp	r3, #0
 801df8a:	d1f4      	bne.n	801df76 <ip4_reass+0x252>
 801df8c:	e000      	b.n	801df90 <ip4_reass+0x26c>
          break;
 801df8e:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801df90:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801df92:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801df94:	f7ff fd2e 	bl	801d9f4 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801df98:	6878      	ldr	r0, [r7, #4]
 801df9a:	f7f4 ffbd 	bl	8012f18 <pbuf_clen>
 801df9e:	4603      	mov	r3, r0
 801dfa0:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801dfa2:	4b0c      	ldr	r3, [pc, #48]	; (801dfd4 <ip4_reass+0x2b0>)
 801dfa4:	881b      	ldrh	r3, [r3, #0]
 801dfa6:	8c3a      	ldrh	r2, [r7, #32]
 801dfa8:	429a      	cmp	r2, r3
 801dfaa:	d906      	bls.n	801dfba <ip4_reass+0x296>
 801dfac:	4b0b      	ldr	r3, [pc, #44]	; (801dfdc <ip4_reass+0x2b8>)
 801dfae:	f240 229b 	movw	r2, #667	; 0x29b
 801dfb2:	490b      	ldr	r1, [pc, #44]	; (801dfe0 <ip4_reass+0x2bc>)
 801dfb4:	480b      	ldr	r0, [pc, #44]	; (801dfe4 <ip4_reass+0x2c0>)
 801dfb6:	f002 fa4b 	bl	8020450 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801dfba:	4b06      	ldr	r3, [pc, #24]	; (801dfd4 <ip4_reass+0x2b0>)
 801dfbc:	881a      	ldrh	r2, [r3, #0]
 801dfbe:	8c3b      	ldrh	r3, [r7, #32]
 801dfc0:	1ad3      	subs	r3, r2, r3
 801dfc2:	b29a      	uxth	r2, r3
 801dfc4:	4b03      	ldr	r3, [pc, #12]	; (801dfd4 <ip4_reass+0x2b0>)
 801dfc6:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801dfc8:	687b      	ldr	r3, [r7, #4]
 801dfca:	e038      	b.n	801e03e <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801dfcc:	2300      	movs	r3, #0
 801dfce:	e036      	b.n	801e03e <ip4_reass+0x31a>
      goto nullreturn_ipr;
 801dfd0:	bf00      	nop
 801dfd2:	e00a      	b.n	801dfea <ip4_reass+0x2c6>
 801dfd4:	24007f64 	.word	0x24007f64
 801dfd8:	24007f60 	.word	0x24007f60
 801dfdc:	08026c1c 	.word	0x08026c1c
 801dfe0:	08026d8c 	.word	0x08026d8c
 801dfe4:	08026c64 	.word	0x08026c64
    goto nullreturn_ipr;
 801dfe8:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801dfea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801dfec:	2b00      	cmp	r3, #0
 801dfee:	d106      	bne.n	801dffe <ip4_reass+0x2da>
 801dff0:	4b15      	ldr	r3, [pc, #84]	; (801e048 <ip4_reass+0x324>)
 801dff2:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 801dff6:	4915      	ldr	r1, [pc, #84]	; (801e04c <ip4_reass+0x328>)
 801dff8:	4815      	ldr	r0, [pc, #84]	; (801e050 <ip4_reass+0x32c>)
 801dffa:	f002 fa29 	bl	8020450 <iprintf>
  if (ipr->p == NULL) {
 801dffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e000:	685b      	ldr	r3, [r3, #4]
 801e002:	2b00      	cmp	r3, #0
 801e004:	d116      	bne.n	801e034 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801e006:	4b13      	ldr	r3, [pc, #76]	; (801e054 <ip4_reass+0x330>)
 801e008:	681b      	ldr	r3, [r3, #0]
 801e00a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801e00c:	429a      	cmp	r2, r3
 801e00e:	d006      	beq.n	801e01e <ip4_reass+0x2fa>
 801e010:	4b0d      	ldr	r3, [pc, #52]	; (801e048 <ip4_reass+0x324>)
 801e012:	f240 22ab 	movw	r2, #683	; 0x2ab
 801e016:	4910      	ldr	r1, [pc, #64]	; (801e058 <ip4_reass+0x334>)
 801e018:	480d      	ldr	r0, [pc, #52]	; (801e050 <ip4_reass+0x32c>)
 801e01a:	f002 fa19 	bl	8020450 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801e01e:	2100      	movs	r1, #0
 801e020:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801e022:	f7ff fce7 	bl	801d9f4 <ip_reass_dequeue_datagram>
 801e026:	e006      	b.n	801e036 <ip4_reass+0x312>
    goto nullreturn;
 801e028:	bf00      	nop
 801e02a:	e004      	b.n	801e036 <ip4_reass+0x312>
    goto nullreturn;
 801e02c:	bf00      	nop
 801e02e:	e002      	b.n	801e036 <ip4_reass+0x312>
      goto nullreturn;
 801e030:	bf00      	nop
 801e032:	e000      	b.n	801e036 <ip4_reass+0x312>
  }

nullreturn:
 801e034:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801e036:	6878      	ldr	r0, [r7, #4]
 801e038:	f7f4 fee0 	bl	8012dfc <pbuf_free>
  return NULL;
 801e03c:	2300      	movs	r3, #0
}
 801e03e:	4618      	mov	r0, r3
 801e040:	3738      	adds	r7, #56	; 0x38
 801e042:	46bd      	mov	sp, r7
 801e044:	bd80      	pop	{r7, pc}
 801e046:	bf00      	nop
 801e048:	08026c1c 	.word	0x08026c1c
 801e04c:	08026da8 	.word	0x08026da8
 801e050:	08026c64 	.word	0x08026c64
 801e054:	24007f60 	.word	0x24007f60
 801e058:	08026db4 	.word	0x08026db4

0801e05c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801e05c:	b580      	push	{r7, lr}
 801e05e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801e060:	2005      	movs	r0, #5
 801e062:	f7f3 ff73 	bl	8011f4c <memp_malloc>
 801e066:	4603      	mov	r3, r0
}
 801e068:	4618      	mov	r0, r3
 801e06a:	bd80      	pop	{r7, pc}

0801e06c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801e06c:	b580      	push	{r7, lr}
 801e06e:	b082      	sub	sp, #8
 801e070:	af00      	add	r7, sp, #0
 801e072:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801e074:	687b      	ldr	r3, [r7, #4]
 801e076:	2b00      	cmp	r3, #0
 801e078:	d106      	bne.n	801e088 <ip_frag_free_pbuf_custom_ref+0x1c>
 801e07a:	4b07      	ldr	r3, [pc, #28]	; (801e098 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801e07c:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 801e080:	4906      	ldr	r1, [pc, #24]	; (801e09c <ip_frag_free_pbuf_custom_ref+0x30>)
 801e082:	4807      	ldr	r0, [pc, #28]	; (801e0a0 <ip_frag_free_pbuf_custom_ref+0x34>)
 801e084:	f002 f9e4 	bl	8020450 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801e088:	6879      	ldr	r1, [r7, #4]
 801e08a:	2005      	movs	r0, #5
 801e08c:	f7f3 ffd4 	bl	8012038 <memp_free>
}
 801e090:	bf00      	nop
 801e092:	3708      	adds	r7, #8
 801e094:	46bd      	mov	sp, r7
 801e096:	bd80      	pop	{r7, pc}
 801e098:	08026c1c 	.word	0x08026c1c
 801e09c:	08026dd4 	.word	0x08026dd4
 801e0a0:	08026c64 	.word	0x08026c64

0801e0a4 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801e0a4:	b580      	push	{r7, lr}
 801e0a6:	b084      	sub	sp, #16
 801e0a8:	af00      	add	r7, sp, #0
 801e0aa:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801e0ac:	687b      	ldr	r3, [r7, #4]
 801e0ae:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801e0b0:	68fb      	ldr	r3, [r7, #12]
 801e0b2:	2b00      	cmp	r3, #0
 801e0b4:	d106      	bne.n	801e0c4 <ipfrag_free_pbuf_custom+0x20>
 801e0b6:	4b11      	ldr	r3, [pc, #68]	; (801e0fc <ipfrag_free_pbuf_custom+0x58>)
 801e0b8:	f240 22ce 	movw	r2, #718	; 0x2ce
 801e0bc:	4910      	ldr	r1, [pc, #64]	; (801e100 <ipfrag_free_pbuf_custom+0x5c>)
 801e0be:	4811      	ldr	r0, [pc, #68]	; (801e104 <ipfrag_free_pbuf_custom+0x60>)
 801e0c0:	f002 f9c6 	bl	8020450 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801e0c4:	68fa      	ldr	r2, [r7, #12]
 801e0c6:	687b      	ldr	r3, [r7, #4]
 801e0c8:	429a      	cmp	r2, r3
 801e0ca:	d006      	beq.n	801e0da <ipfrag_free_pbuf_custom+0x36>
 801e0cc:	4b0b      	ldr	r3, [pc, #44]	; (801e0fc <ipfrag_free_pbuf_custom+0x58>)
 801e0ce:	f240 22cf 	movw	r2, #719	; 0x2cf
 801e0d2:	490d      	ldr	r1, [pc, #52]	; (801e108 <ipfrag_free_pbuf_custom+0x64>)
 801e0d4:	480b      	ldr	r0, [pc, #44]	; (801e104 <ipfrag_free_pbuf_custom+0x60>)
 801e0d6:	f002 f9bb 	bl	8020450 <iprintf>
  if (pcr->original != NULL) {
 801e0da:	68fb      	ldr	r3, [r7, #12]
 801e0dc:	695b      	ldr	r3, [r3, #20]
 801e0de:	2b00      	cmp	r3, #0
 801e0e0:	d004      	beq.n	801e0ec <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801e0e2:	68fb      	ldr	r3, [r7, #12]
 801e0e4:	695b      	ldr	r3, [r3, #20]
 801e0e6:	4618      	mov	r0, r3
 801e0e8:	f7f4 fe88 	bl	8012dfc <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801e0ec:	68f8      	ldr	r0, [r7, #12]
 801e0ee:	f7ff ffbd 	bl	801e06c <ip_frag_free_pbuf_custom_ref>
}
 801e0f2:	bf00      	nop
 801e0f4:	3710      	adds	r7, #16
 801e0f6:	46bd      	mov	sp, r7
 801e0f8:	bd80      	pop	{r7, pc}
 801e0fa:	bf00      	nop
 801e0fc:	08026c1c 	.word	0x08026c1c
 801e100:	08026de0 	.word	0x08026de0
 801e104:	08026c64 	.word	0x08026c64
 801e108:	08026dec 	.word	0x08026dec

0801e10c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801e10c:	b580      	push	{r7, lr}
 801e10e:	b094      	sub	sp, #80	; 0x50
 801e110:	af02      	add	r7, sp, #8
 801e112:	60f8      	str	r0, [r7, #12]
 801e114:	60b9      	str	r1, [r7, #8]
 801e116:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801e118:	2300      	movs	r3, #0
 801e11a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801e11e:	68bb      	ldr	r3, [r7, #8]
 801e120:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801e122:	3b14      	subs	r3, #20
 801e124:	2b00      	cmp	r3, #0
 801e126:	da00      	bge.n	801e12a <ip4_frag+0x1e>
 801e128:	3307      	adds	r3, #7
 801e12a:	10db      	asrs	r3, r3, #3
 801e12c:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801e12e:	2314      	movs	r3, #20
 801e130:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801e132:	68fb      	ldr	r3, [r7, #12]
 801e134:	685b      	ldr	r3, [r3, #4]
 801e136:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 801e138:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801e13a:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801e13c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e13e:	781b      	ldrb	r3, [r3, #0]
 801e140:	f003 030f 	and.w	r3, r3, #15
 801e144:	b2db      	uxtb	r3, r3
 801e146:	009b      	lsls	r3, r3, #2
 801e148:	b2db      	uxtb	r3, r3
 801e14a:	2b14      	cmp	r3, #20
 801e14c:	d002      	beq.n	801e154 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801e14e:	f06f 0305 	mvn.w	r3, #5
 801e152:	e110      	b.n	801e376 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801e154:	68fb      	ldr	r3, [r7, #12]
 801e156:	895b      	ldrh	r3, [r3, #10]
 801e158:	2b13      	cmp	r3, #19
 801e15a:	d809      	bhi.n	801e170 <ip4_frag+0x64>
 801e15c:	4b88      	ldr	r3, [pc, #544]	; (801e380 <ip4_frag+0x274>)
 801e15e:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 801e162:	4988      	ldr	r1, [pc, #544]	; (801e384 <ip4_frag+0x278>)
 801e164:	4888      	ldr	r0, [pc, #544]	; (801e388 <ip4_frag+0x27c>)
 801e166:	f002 f973 	bl	8020450 <iprintf>
 801e16a:	f06f 0305 	mvn.w	r3, #5
 801e16e:	e102      	b.n	801e376 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801e170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e172:	88db      	ldrh	r3, [r3, #6]
 801e174:	b29b      	uxth	r3, r3
 801e176:	4618      	mov	r0, r3
 801e178:	f7f3 f958 	bl	801142c <lwip_htons>
 801e17c:	4603      	mov	r3, r0
 801e17e:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 801e180:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801e182:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801e186:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801e18a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801e18c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801e190:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801e192:	68fb      	ldr	r3, [r7, #12]
 801e194:	891b      	ldrh	r3, [r3, #8]
 801e196:	3b14      	subs	r3, #20
 801e198:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 801e19c:	e0e1      	b.n	801e362 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801e19e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801e1a0:	00db      	lsls	r3, r3, #3
 801e1a2:	b29b      	uxth	r3, r3
 801e1a4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801e1a8:	4293      	cmp	r3, r2
 801e1aa:	bf28      	it	cs
 801e1ac:	4613      	movcs	r3, r2
 801e1ae:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801e1b0:	f44f 7220 	mov.w	r2, #640	; 0x280
 801e1b4:	2114      	movs	r1, #20
 801e1b6:	200e      	movs	r0, #14
 801e1b8:	f7f4 fb0a 	bl	80127d0 <pbuf_alloc>
 801e1bc:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801e1be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e1c0:	2b00      	cmp	r3, #0
 801e1c2:	f000 80d5 	beq.w	801e370 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801e1c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e1c8:	895b      	ldrh	r3, [r3, #10]
 801e1ca:	2b13      	cmp	r3, #19
 801e1cc:	d806      	bhi.n	801e1dc <ip4_frag+0xd0>
 801e1ce:	4b6c      	ldr	r3, [pc, #432]	; (801e380 <ip4_frag+0x274>)
 801e1d0:	f44f 7249 	mov.w	r2, #804	; 0x324
 801e1d4:	496d      	ldr	r1, [pc, #436]	; (801e38c <ip4_frag+0x280>)
 801e1d6:	486c      	ldr	r0, [pc, #432]	; (801e388 <ip4_frag+0x27c>)
 801e1d8:	f002 f93a 	bl	8020450 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801e1dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e1de:	685b      	ldr	r3, [r3, #4]
 801e1e0:	2214      	movs	r2, #20
 801e1e2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801e1e4:	4618      	mov	r0, r3
 801e1e6:	f002 fa64 	bl	80206b2 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801e1ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e1ec:	685b      	ldr	r3, [r3, #4]
 801e1ee:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 801e1f0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801e1f2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 801e1f6:	e064      	b.n	801e2c2 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801e1f8:	68fb      	ldr	r3, [r7, #12]
 801e1fa:	895a      	ldrh	r2, [r3, #10]
 801e1fc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801e1fe:	1ad3      	subs	r3, r2, r3
 801e200:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801e202:	68fb      	ldr	r3, [r7, #12]
 801e204:	895b      	ldrh	r3, [r3, #10]
 801e206:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801e208:	429a      	cmp	r2, r3
 801e20a:	d906      	bls.n	801e21a <ip4_frag+0x10e>
 801e20c:	4b5c      	ldr	r3, [pc, #368]	; (801e380 <ip4_frag+0x274>)
 801e20e:	f240 322d 	movw	r2, #813	; 0x32d
 801e212:	495f      	ldr	r1, [pc, #380]	; (801e390 <ip4_frag+0x284>)
 801e214:	485c      	ldr	r0, [pc, #368]	; (801e388 <ip4_frag+0x27c>)
 801e216:	f002 f91b 	bl	8020450 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801e21a:	8bfa      	ldrh	r2, [r7, #30]
 801e21c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801e220:	4293      	cmp	r3, r2
 801e222:	bf28      	it	cs
 801e224:	4613      	movcs	r3, r2
 801e226:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801e22a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801e22e:	2b00      	cmp	r3, #0
 801e230:	d105      	bne.n	801e23e <ip4_frag+0x132>
        poff = 0;
 801e232:	2300      	movs	r3, #0
 801e234:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801e236:	68fb      	ldr	r3, [r7, #12]
 801e238:	681b      	ldr	r3, [r3, #0]
 801e23a:	60fb      	str	r3, [r7, #12]
        continue;
 801e23c:	e041      	b.n	801e2c2 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801e23e:	f7ff ff0d 	bl	801e05c <ip_frag_alloc_pbuf_custom_ref>
 801e242:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801e244:	69bb      	ldr	r3, [r7, #24]
 801e246:	2b00      	cmp	r3, #0
 801e248:	d103      	bne.n	801e252 <ip4_frag+0x146>
        pbuf_free(rambuf);
 801e24a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801e24c:	f7f4 fdd6 	bl	8012dfc <pbuf_free>
        goto memerr;
 801e250:	e08f      	b.n	801e372 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801e252:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801e254:	68fb      	ldr	r3, [r7, #12]
 801e256:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801e258:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801e25a:	4413      	add	r3, r2
 801e25c:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 801e260:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801e264:	9201      	str	r2, [sp, #4]
 801e266:	9300      	str	r3, [sp, #0]
 801e268:	4603      	mov	r3, r0
 801e26a:	2241      	movs	r2, #65	; 0x41
 801e26c:	2000      	movs	r0, #0
 801e26e:	f7f4 fbd9 	bl	8012a24 <pbuf_alloced_custom>
 801e272:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801e274:	697b      	ldr	r3, [r7, #20]
 801e276:	2b00      	cmp	r3, #0
 801e278:	d106      	bne.n	801e288 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801e27a:	69b8      	ldr	r0, [r7, #24]
 801e27c:	f7ff fef6 	bl	801e06c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801e280:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801e282:	f7f4 fdbb 	bl	8012dfc <pbuf_free>
        goto memerr;
 801e286:	e074      	b.n	801e372 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 801e288:	68f8      	ldr	r0, [r7, #12]
 801e28a:	f7f4 fe5d 	bl	8012f48 <pbuf_ref>
      pcr->original = p;
 801e28e:	69bb      	ldr	r3, [r7, #24]
 801e290:	68fa      	ldr	r2, [r7, #12]
 801e292:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801e294:	69bb      	ldr	r3, [r7, #24]
 801e296:	4a3f      	ldr	r2, [pc, #252]	; (801e394 <ip4_frag+0x288>)
 801e298:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801e29a:	6979      	ldr	r1, [r7, #20]
 801e29c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801e29e:	f7f4 fe7b 	bl	8012f98 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801e2a2:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 801e2a6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801e2aa:	1ad3      	subs	r3, r2, r3
 801e2ac:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 801e2b0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801e2b4:	2b00      	cmp	r3, #0
 801e2b6:	d004      	beq.n	801e2c2 <ip4_frag+0x1b6>
        poff = 0;
 801e2b8:	2300      	movs	r3, #0
 801e2ba:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801e2bc:	68fb      	ldr	r3, [r7, #12]
 801e2be:	681b      	ldr	r3, [r3, #0]
 801e2c0:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801e2c2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801e2c6:	2b00      	cmp	r3, #0
 801e2c8:	d196      	bne.n	801e1f8 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801e2ca:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801e2cc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801e2d0:	4413      	add	r3, r2
 801e2d2:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801e2d4:	68bb      	ldr	r3, [r7, #8]
 801e2d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801e2d8:	f1a3 0213 	sub.w	r2, r3, #19
 801e2dc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801e2e0:	429a      	cmp	r2, r3
 801e2e2:	bfcc      	ite	gt
 801e2e4:	2301      	movgt	r3, #1
 801e2e6:	2300      	movle	r3, #0
 801e2e8:	b2db      	uxtb	r3, r3
 801e2ea:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801e2ec:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801e2f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801e2f4:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 801e2f6:	6a3b      	ldr	r3, [r7, #32]
 801e2f8:	2b00      	cmp	r3, #0
 801e2fa:	d002      	beq.n	801e302 <ip4_frag+0x1f6>
 801e2fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e2fe:	2b00      	cmp	r3, #0
 801e300:	d003      	beq.n	801e30a <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801e302:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801e304:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801e308:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801e30a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801e30c:	4618      	mov	r0, r3
 801e30e:	f7f3 f88d 	bl	801142c <lwip_htons>
 801e312:	4603      	mov	r3, r0
 801e314:	461a      	mov	r2, r3
 801e316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e318:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801e31a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801e31c:	3314      	adds	r3, #20
 801e31e:	b29b      	uxth	r3, r3
 801e320:	4618      	mov	r0, r3
 801e322:	f7f3 f883 	bl	801142c <lwip_htons>
 801e326:	4603      	mov	r3, r0
 801e328:	461a      	mov	r2, r3
 801e32a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e32c:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801e32e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e330:	2200      	movs	r2, #0
 801e332:	729a      	strb	r2, [r3, #10]
 801e334:	2200      	movs	r2, #0
 801e336:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801e338:	68bb      	ldr	r3, [r7, #8]
 801e33a:	695b      	ldr	r3, [r3, #20]
 801e33c:	687a      	ldr	r2, [r7, #4]
 801e33e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801e340:	68b8      	ldr	r0, [r7, #8]
 801e342:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801e344:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801e346:	f7f4 fd59 	bl	8012dfc <pbuf_free>
    left = (u16_t)(left - fragsize);
 801e34a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801e34e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801e350:	1ad3      	subs	r3, r2, r3
 801e352:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 801e356:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801e35a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801e35c:	4413      	add	r3, r2
 801e35e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 801e362:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801e366:	2b00      	cmp	r3, #0
 801e368:	f47f af19 	bne.w	801e19e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801e36c:	2300      	movs	r3, #0
 801e36e:	e002      	b.n	801e376 <ip4_frag+0x26a>
      goto memerr;
 801e370:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801e372:	f04f 33ff 	mov.w	r3, #4294967295
}
 801e376:	4618      	mov	r0, r3
 801e378:	3748      	adds	r7, #72	; 0x48
 801e37a:	46bd      	mov	sp, r7
 801e37c:	bd80      	pop	{r7, pc}
 801e37e:	bf00      	nop
 801e380:	08026c1c 	.word	0x08026c1c
 801e384:	08026df8 	.word	0x08026df8
 801e388:	08026c64 	.word	0x08026c64
 801e38c:	08026e14 	.word	0x08026e14
 801e390:	08026e34 	.word	0x08026e34
 801e394:	0801e0a5 	.word	0x0801e0a5

0801e398 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801e398:	b580      	push	{r7, lr}
 801e39a:	b086      	sub	sp, #24
 801e39c:	af00      	add	r7, sp, #0
 801e39e:	6078      	str	r0, [r7, #4]
 801e3a0:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801e3a2:	230e      	movs	r3, #14
 801e3a4:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801e3a6:	687b      	ldr	r3, [r7, #4]
 801e3a8:	895b      	ldrh	r3, [r3, #10]
 801e3aa:	2b0e      	cmp	r3, #14
 801e3ac:	d96e      	bls.n	801e48c <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801e3ae:	687b      	ldr	r3, [r7, #4]
 801e3b0:	7bdb      	ldrb	r3, [r3, #15]
 801e3b2:	2b00      	cmp	r3, #0
 801e3b4:	d106      	bne.n	801e3c4 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801e3b6:	683b      	ldr	r3, [r7, #0]
 801e3b8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801e3bc:	3301      	adds	r3, #1
 801e3be:	b2da      	uxtb	r2, r3
 801e3c0:	687b      	ldr	r3, [r7, #4]
 801e3c2:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801e3c4:	687b      	ldr	r3, [r7, #4]
 801e3c6:	685b      	ldr	r3, [r3, #4]
 801e3c8:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801e3ca:	693b      	ldr	r3, [r7, #16]
 801e3cc:	7b1a      	ldrb	r2, [r3, #12]
 801e3ce:	7b5b      	ldrb	r3, [r3, #13]
 801e3d0:	021b      	lsls	r3, r3, #8
 801e3d2:	4313      	orrs	r3, r2
 801e3d4:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801e3d6:	693b      	ldr	r3, [r7, #16]
 801e3d8:	781b      	ldrb	r3, [r3, #0]
 801e3da:	f003 0301 	and.w	r3, r3, #1
 801e3de:	2b00      	cmp	r3, #0
 801e3e0:	d023      	beq.n	801e42a <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801e3e2:	693b      	ldr	r3, [r7, #16]
 801e3e4:	781b      	ldrb	r3, [r3, #0]
 801e3e6:	2b01      	cmp	r3, #1
 801e3e8:	d10f      	bne.n	801e40a <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801e3ea:	693b      	ldr	r3, [r7, #16]
 801e3ec:	785b      	ldrb	r3, [r3, #1]
 801e3ee:	2b00      	cmp	r3, #0
 801e3f0:	d11b      	bne.n	801e42a <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801e3f2:	693b      	ldr	r3, [r7, #16]
 801e3f4:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801e3f6:	2b5e      	cmp	r3, #94	; 0x5e
 801e3f8:	d117      	bne.n	801e42a <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801e3fa:	687b      	ldr	r3, [r7, #4]
 801e3fc:	7b5b      	ldrb	r3, [r3, #13]
 801e3fe:	f043 0310 	orr.w	r3, r3, #16
 801e402:	b2da      	uxtb	r2, r3
 801e404:	687b      	ldr	r3, [r7, #4]
 801e406:	735a      	strb	r2, [r3, #13]
 801e408:	e00f      	b.n	801e42a <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801e40a:	693b      	ldr	r3, [r7, #16]
 801e40c:	2206      	movs	r2, #6
 801e40e:	4928      	ldr	r1, [pc, #160]	; (801e4b0 <ethernet_input+0x118>)
 801e410:	4618      	mov	r0, r3
 801e412:	f002 f892 	bl	802053a <memcmp>
 801e416:	4603      	mov	r3, r0
 801e418:	2b00      	cmp	r3, #0
 801e41a:	d106      	bne.n	801e42a <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801e41c:	687b      	ldr	r3, [r7, #4]
 801e41e:	7b5b      	ldrb	r3, [r3, #13]
 801e420:	f043 0308 	orr.w	r3, r3, #8
 801e424:	b2da      	uxtb	r2, r3
 801e426:	687b      	ldr	r3, [r7, #4]
 801e428:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801e42a:	89fb      	ldrh	r3, [r7, #14]
 801e42c:	2b08      	cmp	r3, #8
 801e42e:	d003      	beq.n	801e438 <ethernet_input+0xa0>
 801e430:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 801e434:	d014      	beq.n	801e460 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801e436:	e032      	b.n	801e49e <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801e438:	683b      	ldr	r3, [r7, #0]
 801e43a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801e43e:	f003 0308 	and.w	r3, r3, #8
 801e442:	2b00      	cmp	r3, #0
 801e444:	d024      	beq.n	801e490 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801e446:	8afb      	ldrh	r3, [r7, #22]
 801e448:	4619      	mov	r1, r3
 801e44a:	6878      	ldr	r0, [r7, #4]
 801e44c:	f7f4 fc1e 	bl	8012c8c <pbuf_remove_header>
 801e450:	4603      	mov	r3, r0
 801e452:	2b00      	cmp	r3, #0
 801e454:	d11e      	bne.n	801e494 <ethernet_input+0xfc>
        ip4_input(p, netif);
 801e456:	6839      	ldr	r1, [r7, #0]
 801e458:	6878      	ldr	r0, [r7, #4]
 801e45a:	f7fe ff03 	bl	801d264 <ip4_input>
      break;
 801e45e:	e013      	b.n	801e488 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801e460:	683b      	ldr	r3, [r7, #0]
 801e462:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801e466:	f003 0308 	and.w	r3, r3, #8
 801e46a:	2b00      	cmp	r3, #0
 801e46c:	d014      	beq.n	801e498 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801e46e:	8afb      	ldrh	r3, [r7, #22]
 801e470:	4619      	mov	r1, r3
 801e472:	6878      	ldr	r0, [r7, #4]
 801e474:	f7f4 fc0a 	bl	8012c8c <pbuf_remove_header>
 801e478:	4603      	mov	r3, r0
 801e47a:	2b00      	cmp	r3, #0
 801e47c:	d10e      	bne.n	801e49c <ethernet_input+0x104>
        etharp_input(p, netif);
 801e47e:	6839      	ldr	r1, [r7, #0]
 801e480:	6878      	ldr	r0, [r7, #4]
 801e482:	f7fe f879 	bl	801c578 <etharp_input>
      break;
 801e486:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801e488:	2300      	movs	r3, #0
 801e48a:	e00c      	b.n	801e4a6 <ethernet_input+0x10e>
    goto free_and_return;
 801e48c:	bf00      	nop
 801e48e:	e006      	b.n	801e49e <ethernet_input+0x106>
        goto free_and_return;
 801e490:	bf00      	nop
 801e492:	e004      	b.n	801e49e <ethernet_input+0x106>
        goto free_and_return;
 801e494:	bf00      	nop
 801e496:	e002      	b.n	801e49e <ethernet_input+0x106>
        goto free_and_return;
 801e498:	bf00      	nop
 801e49a:	e000      	b.n	801e49e <ethernet_input+0x106>
        goto free_and_return;
 801e49c:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801e49e:	6878      	ldr	r0, [r7, #4]
 801e4a0:	f7f4 fcac 	bl	8012dfc <pbuf_free>
  return ERR_OK;
 801e4a4:	2300      	movs	r3, #0
}
 801e4a6:	4618      	mov	r0, r3
 801e4a8:	3718      	adds	r7, #24
 801e4aa:	46bd      	mov	sp, r7
 801e4ac:	bd80      	pop	{r7, pc}
 801e4ae:	bf00      	nop
 801e4b0:	0802708c 	.word	0x0802708c

0801e4b4 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801e4b4:	b580      	push	{r7, lr}
 801e4b6:	b086      	sub	sp, #24
 801e4b8:	af00      	add	r7, sp, #0
 801e4ba:	60f8      	str	r0, [r7, #12]
 801e4bc:	60b9      	str	r1, [r7, #8]
 801e4be:	607a      	str	r2, [r7, #4]
 801e4c0:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801e4c2:	8c3b      	ldrh	r3, [r7, #32]
 801e4c4:	4618      	mov	r0, r3
 801e4c6:	f7f2 ffb1 	bl	801142c <lwip_htons>
 801e4ca:	4603      	mov	r3, r0
 801e4cc:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801e4ce:	210e      	movs	r1, #14
 801e4d0:	68b8      	ldr	r0, [r7, #8]
 801e4d2:	f7f4 fbcb 	bl	8012c6c <pbuf_add_header>
 801e4d6:	4603      	mov	r3, r0
 801e4d8:	2b00      	cmp	r3, #0
 801e4da:	d125      	bne.n	801e528 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801e4dc:	68bb      	ldr	r3, [r7, #8]
 801e4de:	685b      	ldr	r3, [r3, #4]
 801e4e0:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801e4e2:	693b      	ldr	r3, [r7, #16]
 801e4e4:	8afa      	ldrh	r2, [r7, #22]
 801e4e6:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801e4e8:	693b      	ldr	r3, [r7, #16]
 801e4ea:	2206      	movs	r2, #6
 801e4ec:	6839      	ldr	r1, [r7, #0]
 801e4ee:	4618      	mov	r0, r3
 801e4f0:	f002 f8df 	bl	80206b2 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801e4f4:	693b      	ldr	r3, [r7, #16]
 801e4f6:	3306      	adds	r3, #6
 801e4f8:	2206      	movs	r2, #6
 801e4fa:	6879      	ldr	r1, [r7, #4]
 801e4fc:	4618      	mov	r0, r3
 801e4fe:	f002 f8d8 	bl	80206b2 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801e502:	68fb      	ldr	r3, [r7, #12]
 801e504:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801e508:	2b06      	cmp	r3, #6
 801e50a:	d006      	beq.n	801e51a <ethernet_output+0x66>
 801e50c:	4b0a      	ldr	r3, [pc, #40]	; (801e538 <ethernet_output+0x84>)
 801e50e:	f44f 7299 	mov.w	r2, #306	; 0x132
 801e512:	490a      	ldr	r1, [pc, #40]	; (801e53c <ethernet_output+0x88>)
 801e514:	480a      	ldr	r0, [pc, #40]	; (801e540 <ethernet_output+0x8c>)
 801e516:	f001 ff9b 	bl	8020450 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801e51a:	68fb      	ldr	r3, [r7, #12]
 801e51c:	699b      	ldr	r3, [r3, #24]
 801e51e:	68b9      	ldr	r1, [r7, #8]
 801e520:	68f8      	ldr	r0, [r7, #12]
 801e522:	4798      	blx	r3
 801e524:	4603      	mov	r3, r0
 801e526:	e002      	b.n	801e52e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801e528:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801e52a:	f06f 0301 	mvn.w	r3, #1
}
 801e52e:	4618      	mov	r0, r3
 801e530:	3718      	adds	r7, #24
 801e532:	46bd      	mov	sp, r7
 801e534:	bd80      	pop	{r7, pc}
 801e536:	bf00      	nop
 801e538:	08026e44 	.word	0x08026e44
 801e53c:	08026e7c 	.word	0x08026e7c
 801e540:	08026eb0 	.word	0x08026eb0

0801e544 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801e544:	b580      	push	{r7, lr}
 801e546:	b086      	sub	sp, #24
 801e548:	af00      	add	r7, sp, #0
 801e54a:	6078      	str	r0, [r7, #4]
 801e54c:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 801e54e:	683b      	ldr	r3, [r7, #0]
 801e550:	60bb      	str	r3, [r7, #8]
 801e552:	2304      	movs	r3, #4
 801e554:	60fb      	str	r3, [r7, #12]
 801e556:	2300      	movs	r3, #0
 801e558:	613b      	str	r3, [r7, #16]
 801e55a:	2300      	movs	r3, #0
 801e55c:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 801e55e:	f107 0308 	add.w	r3, r7, #8
 801e562:	2100      	movs	r1, #0
 801e564:	4618      	mov	r0, r3
 801e566:	f7ec fb04 	bl	800ab72 <osMessageCreate>
 801e56a:	4602      	mov	r2, r0
 801e56c:	687b      	ldr	r3, [r7, #4]
 801e56e:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 801e570:	687b      	ldr	r3, [r7, #4]
 801e572:	681b      	ldr	r3, [r3, #0]
 801e574:	2b00      	cmp	r3, #0
 801e576:	d102      	bne.n	801e57e <sys_mbox_new+0x3a>
    return ERR_MEM;
 801e578:	f04f 33ff 	mov.w	r3, #4294967295
 801e57c:	e000      	b.n	801e580 <sys_mbox_new+0x3c>

  return ERR_OK;
 801e57e:	2300      	movs	r3, #0
}
 801e580:	4618      	mov	r0, r3
 801e582:	3718      	adds	r7, #24
 801e584:	46bd      	mov	sp, r7
 801e586:	bd80      	pop	{r7, pc}

0801e588 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 801e588:	b580      	push	{r7, lr}
 801e58a:	b082      	sub	sp, #8
 801e58c:	af00      	add	r7, sp, #0
 801e58e:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 801e590:	687b      	ldr	r3, [r7, #4]
 801e592:	681b      	ldr	r3, [r3, #0]
 801e594:	4618      	mov	r0, r3
 801e596:	f7ec fbc9 	bl	800ad2c <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 801e59a:	687b      	ldr	r3, [r7, #4]
 801e59c:	681b      	ldr	r3, [r3, #0]
 801e59e:	4618      	mov	r0, r3
 801e5a0:	f7ec fbda 	bl	800ad58 <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 801e5a4:	bf00      	nop
 801e5a6:	3708      	adds	r7, #8
 801e5a8:	46bd      	mov	sp, r7
 801e5aa:	bd80      	pop	{r7, pc}

0801e5ac <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801e5ac:	b580      	push	{r7, lr}
 801e5ae:	b084      	sub	sp, #16
 801e5b0:	af00      	add	r7, sp, #0
 801e5b2:	6078      	str	r0, [r7, #4]
 801e5b4:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 801e5b6:	687b      	ldr	r3, [r7, #4]
 801e5b8:	681b      	ldr	r3, [r3, #0]
 801e5ba:	6839      	ldr	r1, [r7, #0]
 801e5bc:	2200      	movs	r2, #0
 801e5be:	4618      	mov	r0, r3
 801e5c0:	f7ec fb00 	bl	800abc4 <osMessagePut>
 801e5c4:	4603      	mov	r3, r0
 801e5c6:	2b00      	cmp	r3, #0
 801e5c8:	d102      	bne.n	801e5d0 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 801e5ca:	2300      	movs	r3, #0
 801e5cc:	73fb      	strb	r3, [r7, #15]
 801e5ce:	e001      	b.n	801e5d4 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 801e5d0:	23ff      	movs	r3, #255	; 0xff
 801e5d2:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 801e5d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801e5d8:	4618      	mov	r0, r3
 801e5da:	3710      	adds	r7, #16
 801e5dc:	46bd      	mov	sp, r7
 801e5de:	bd80      	pop	{r7, pc}

0801e5e0 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801e5e0:	b580      	push	{r7, lr}
 801e5e2:	b08c      	sub	sp, #48	; 0x30
 801e5e4:	af00      	add	r7, sp, #0
 801e5e6:	61f8      	str	r0, [r7, #28]
 801e5e8:	61b9      	str	r1, [r7, #24]
 801e5ea:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 801e5ec:	f7ec f8df 	bl	800a7ae <osKernelSysTick>
 801e5f0:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801e5f2:	697b      	ldr	r3, [r7, #20]
 801e5f4:	2b00      	cmp	r3, #0
 801e5f6:	d017      	beq.n	801e628 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 801e5f8:	69fb      	ldr	r3, [r7, #28]
 801e5fa:	6819      	ldr	r1, [r3, #0]
 801e5fc:	f107 0320 	add.w	r3, r7, #32
 801e600:	697a      	ldr	r2, [r7, #20]
 801e602:	4618      	mov	r0, r3
 801e604:	f7ec fb1e 	bl	800ac44 <osMessageGet>

    if(event.status == osEventMessage)
 801e608:	6a3b      	ldr	r3, [r7, #32]
 801e60a:	2b10      	cmp	r3, #16
 801e60c:	d109      	bne.n	801e622 <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 801e60e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e610:	461a      	mov	r2, r3
 801e612:	69bb      	ldr	r3, [r7, #24]
 801e614:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 801e616:	f7ec f8ca 	bl	800a7ae <osKernelSysTick>
 801e61a:	4602      	mov	r2, r0
 801e61c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e61e:	1ad3      	subs	r3, r2, r3
 801e620:	e019      	b.n	801e656 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801e622:	f04f 33ff 	mov.w	r3, #4294967295
 801e626:	e016      	b.n	801e656 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 801e628:	69fb      	ldr	r3, [r7, #28]
 801e62a:	6819      	ldr	r1, [r3, #0]
 801e62c:	463b      	mov	r3, r7
 801e62e:	f04f 32ff 	mov.w	r2, #4294967295
 801e632:	4618      	mov	r0, r3
 801e634:	f7ec fb06 	bl	800ac44 <osMessageGet>
 801e638:	f107 0320 	add.w	r3, r7, #32
 801e63c:	463a      	mov	r2, r7
 801e63e:	ca07      	ldmia	r2, {r0, r1, r2}
 801e640:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 801e644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e646:	461a      	mov	r2, r3
 801e648:	69bb      	ldr	r3, [r7, #24]
 801e64a:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 801e64c:	f7ec f8af 	bl	800a7ae <osKernelSysTick>
 801e650:	4602      	mov	r2, r0
 801e652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e654:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 801e656:	4618      	mov	r0, r3
 801e658:	3730      	adds	r7, #48	; 0x30
 801e65a:	46bd      	mov	sp, r7
 801e65c:	bd80      	pop	{r7, pc}

0801e65e <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 801e65e:	b580      	push	{r7, lr}
 801e660:	b086      	sub	sp, #24
 801e662:	af00      	add	r7, sp, #0
 801e664:	6078      	str	r0, [r7, #4]
 801e666:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 801e668:	687b      	ldr	r3, [r7, #4]
 801e66a:	6819      	ldr	r1, [r3, #0]
 801e66c:	f107 030c 	add.w	r3, r7, #12
 801e670:	2200      	movs	r2, #0
 801e672:	4618      	mov	r0, r3
 801e674:	f7ec fae6 	bl	800ac44 <osMessageGet>

  if(event.status == osEventMessage)
 801e678:	68fb      	ldr	r3, [r7, #12]
 801e67a:	2b10      	cmp	r3, #16
 801e67c:	d105      	bne.n	801e68a <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 801e67e:	693b      	ldr	r3, [r7, #16]
 801e680:	461a      	mov	r2, r3
 801e682:	683b      	ldr	r3, [r7, #0]
 801e684:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 801e686:	2300      	movs	r3, #0
 801e688:	e001      	b.n	801e68e <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 801e68a:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 801e68e:	4618      	mov	r0, r3
 801e690:	3718      	adds	r7, #24
 801e692:	46bd      	mov	sp, r7
 801e694:	bd80      	pop	{r7, pc}

0801e696 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801e696:	b480      	push	{r7}
 801e698:	b083      	sub	sp, #12
 801e69a:	af00      	add	r7, sp, #0
 801e69c:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801e69e:	687b      	ldr	r3, [r7, #4]
 801e6a0:	681b      	ldr	r3, [r3, #0]
 801e6a2:	2b00      	cmp	r3, #0
 801e6a4:	d101      	bne.n	801e6aa <sys_mbox_valid+0x14>
    return 0;
 801e6a6:	2300      	movs	r3, #0
 801e6a8:	e000      	b.n	801e6ac <sys_mbox_valid+0x16>
  else
    return 1;
 801e6aa:	2301      	movs	r3, #1
}
 801e6ac:	4618      	mov	r0, r3
 801e6ae:	370c      	adds	r7, #12
 801e6b0:	46bd      	mov	sp, r7
 801e6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e6b6:	4770      	bx	lr

0801e6b8 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 801e6b8:	b480      	push	{r7}
 801e6ba:	b083      	sub	sp, #12
 801e6bc:	af00      	add	r7, sp, #0
 801e6be:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 801e6c0:	687b      	ldr	r3, [r7, #4]
 801e6c2:	2200      	movs	r2, #0
 801e6c4:	601a      	str	r2, [r3, #0]
}
 801e6c6:	bf00      	nop
 801e6c8:	370c      	adds	r7, #12
 801e6ca:	46bd      	mov	sp, r7
 801e6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e6d0:	4770      	bx	lr

0801e6d2 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 801e6d2:	b580      	push	{r7, lr}
 801e6d4:	b084      	sub	sp, #16
 801e6d6:	af00      	add	r7, sp, #0
 801e6d8:	6078      	str	r0, [r7, #4]
 801e6da:	460b      	mov	r3, r1
 801e6dc:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 801e6de:	2300      	movs	r3, #0
 801e6e0:	60bb      	str	r3, [r7, #8]
 801e6e2:	2300      	movs	r3, #0
 801e6e4:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 801e6e6:	f107 0308 	add.w	r3, r7, #8
 801e6ea:	2101      	movs	r1, #1
 801e6ec:	4618      	mov	r0, r3
 801e6ee:	f7ec f977 	bl	800a9e0 <osSemaphoreCreate>
 801e6f2:	4602      	mov	r2, r0
 801e6f4:	687b      	ldr	r3, [r7, #4]
 801e6f6:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 801e6f8:	687b      	ldr	r3, [r7, #4]
 801e6fa:	681b      	ldr	r3, [r3, #0]
 801e6fc:	2b00      	cmp	r3, #0
 801e6fe:	d102      	bne.n	801e706 <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801e700:	f04f 33ff 	mov.w	r3, #4294967295
 801e704:	e009      	b.n	801e71a <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 801e706:	78fb      	ldrb	r3, [r7, #3]
 801e708:	2b00      	cmp	r3, #0
 801e70a:	d105      	bne.n	801e718 <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 801e70c:	687b      	ldr	r3, [r7, #4]
 801e70e:	681b      	ldr	r3, [r3, #0]
 801e710:	2100      	movs	r1, #0
 801e712:	4618      	mov	r0, r3
 801e714:	f7ec f996 	bl	800aa44 <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 801e718:	2300      	movs	r3, #0
}
 801e71a:	4618      	mov	r0, r3
 801e71c:	3710      	adds	r7, #16
 801e71e:	46bd      	mov	sp, r7
 801e720:	bd80      	pop	{r7, pc}

0801e722 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 801e722:	b580      	push	{r7, lr}
 801e724:	b084      	sub	sp, #16
 801e726:	af00      	add	r7, sp, #0
 801e728:	6078      	str	r0, [r7, #4]
 801e72a:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 801e72c:	f7ec f83f 	bl	800a7ae <osKernelSysTick>
 801e730:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801e732:	683b      	ldr	r3, [r7, #0]
 801e734:	2b00      	cmp	r3, #0
 801e736:	d011      	beq.n	801e75c <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 801e738:	687b      	ldr	r3, [r7, #4]
 801e73a:	681b      	ldr	r3, [r3, #0]
 801e73c:	6839      	ldr	r1, [r7, #0]
 801e73e:	4618      	mov	r0, r3
 801e740:	f7ec f980 	bl	800aa44 <osSemaphoreWait>
 801e744:	4603      	mov	r3, r0
 801e746:	2b00      	cmp	r3, #0
 801e748:	d105      	bne.n	801e756 <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 801e74a:	f7ec f830 	bl	800a7ae <osKernelSysTick>
 801e74e:	4602      	mov	r2, r0
 801e750:	68fb      	ldr	r3, [r7, #12]
 801e752:	1ad3      	subs	r3, r2, r3
 801e754:	e012      	b.n	801e77c <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 801e756:	f04f 33ff 	mov.w	r3, #4294967295
 801e75a:	e00f      	b.n	801e77c <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 801e75c:	bf00      	nop
 801e75e:	687b      	ldr	r3, [r7, #4]
 801e760:	681b      	ldr	r3, [r3, #0]
 801e762:	f04f 31ff 	mov.w	r1, #4294967295
 801e766:	4618      	mov	r0, r3
 801e768:	f7ec f96c 	bl	800aa44 <osSemaphoreWait>
 801e76c:	4603      	mov	r3, r0
 801e76e:	2b00      	cmp	r3, #0
 801e770:	d1f5      	bne.n	801e75e <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 801e772:	f7ec f81c 	bl	800a7ae <osKernelSysTick>
 801e776:	4602      	mov	r2, r0
 801e778:	68fb      	ldr	r3, [r7, #12]
 801e77a:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 801e77c:	4618      	mov	r0, r3
 801e77e:	3710      	adds	r7, #16
 801e780:	46bd      	mov	sp, r7
 801e782:	bd80      	pop	{r7, pc}

0801e784 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 801e784:	b580      	push	{r7, lr}
 801e786:	b082      	sub	sp, #8
 801e788:	af00      	add	r7, sp, #0
 801e78a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 801e78c:	687b      	ldr	r3, [r7, #4]
 801e78e:	681b      	ldr	r3, [r3, #0]
 801e790:	4618      	mov	r0, r3
 801e792:	f7ec f9a5 	bl	800aae0 <osSemaphoreRelease>
}
 801e796:	bf00      	nop
 801e798:	3708      	adds	r7, #8
 801e79a:	46bd      	mov	sp, r7
 801e79c:	bd80      	pop	{r7, pc}

0801e79e <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 801e79e:	b580      	push	{r7, lr}
 801e7a0:	b082      	sub	sp, #8
 801e7a2:	af00      	add	r7, sp, #0
 801e7a4:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 801e7a6:	687b      	ldr	r3, [r7, #4]
 801e7a8:	681b      	ldr	r3, [r3, #0]
 801e7aa:	4618      	mov	r0, r3
 801e7ac:	f7ec f9ce 	bl	800ab4c <osSemaphoreDelete>
}
 801e7b0:	bf00      	nop
 801e7b2:	3708      	adds	r7, #8
 801e7b4:	46bd      	mov	sp, r7
 801e7b6:	bd80      	pop	{r7, pc}

0801e7b8 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 801e7b8:	b480      	push	{r7}
 801e7ba:	b083      	sub	sp, #12
 801e7bc:	af00      	add	r7, sp, #0
 801e7be:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 801e7c0:	687b      	ldr	r3, [r7, #4]
 801e7c2:	681b      	ldr	r3, [r3, #0]
 801e7c4:	2b00      	cmp	r3, #0
 801e7c6:	d101      	bne.n	801e7cc <sys_sem_valid+0x14>
    return 0;
 801e7c8:	2300      	movs	r3, #0
 801e7ca:	e000      	b.n	801e7ce <sys_sem_valid+0x16>
  else
    return 1;
 801e7cc:	2301      	movs	r3, #1
}
 801e7ce:	4618      	mov	r0, r3
 801e7d0:	370c      	adds	r7, #12
 801e7d2:	46bd      	mov	sp, r7
 801e7d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e7d8:	4770      	bx	lr

0801e7da <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 801e7da:	b480      	push	{r7}
 801e7dc:	b083      	sub	sp, #12
 801e7de:	af00      	add	r7, sp, #0
 801e7e0:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 801e7e2:	687b      	ldr	r3, [r7, #4]
 801e7e4:	2200      	movs	r2, #0
 801e7e6:	601a      	str	r2, [r3, #0]
}
 801e7e8:	bf00      	nop
 801e7ea:	370c      	adds	r7, #12
 801e7ec:	46bd      	mov	sp, r7
 801e7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e7f2:	4770      	bx	lr

0801e7f4 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 801e7f4:	b580      	push	{r7, lr}
 801e7f6:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 801e7f8:	4803      	ldr	r0, [pc, #12]	; (801e808 <sys_init+0x14>)
 801e7fa:	f7ec f854 	bl	800a8a6 <osMutexCreate>
 801e7fe:	4603      	mov	r3, r0
 801e800:	4a02      	ldr	r2, [pc, #8]	; (801e80c <sys_init+0x18>)
 801e802:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 801e804:	bf00      	nop
 801e806:	bd80      	pop	{r7, pc}
 801e808:	0802709c 	.word	0x0802709c
 801e80c:	24007f6c 	.word	0x24007f6c

0801e810 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801e810:	b580      	push	{r7, lr}
 801e812:	b084      	sub	sp, #16
 801e814:	af00      	add	r7, sp, #0
 801e816:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 801e818:	2300      	movs	r3, #0
 801e81a:	60bb      	str	r3, [r7, #8]
 801e81c:	2300      	movs	r3, #0
 801e81e:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 801e820:	f107 0308 	add.w	r3, r7, #8
 801e824:	4618      	mov	r0, r3
 801e826:	f7ec f83e 	bl	800a8a6 <osMutexCreate>
 801e82a:	4602      	mov	r2, r0
 801e82c:	687b      	ldr	r3, [r7, #4]
 801e82e:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 801e830:	687b      	ldr	r3, [r7, #4]
 801e832:	681b      	ldr	r3, [r3, #0]
 801e834:	2b00      	cmp	r3, #0
 801e836:	d102      	bne.n	801e83e <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801e838:	f04f 33ff 	mov.w	r3, #4294967295
 801e83c:	e000      	b.n	801e840 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801e83e:	2300      	movs	r3, #0
}
 801e840:	4618      	mov	r0, r3
 801e842:	3710      	adds	r7, #16
 801e844:	46bd      	mov	sp, r7
 801e846:	bd80      	pop	{r7, pc}

0801e848 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801e848:	b580      	push	{r7, lr}
 801e84a:	b082      	sub	sp, #8
 801e84c:	af00      	add	r7, sp, #0
 801e84e:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 801e850:	687b      	ldr	r3, [r7, #4]
 801e852:	681b      	ldr	r3, [r3, #0]
 801e854:	f04f 31ff 	mov.w	r1, #4294967295
 801e858:	4618      	mov	r0, r3
 801e85a:	f7ec f83d 	bl	800a8d8 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 801e85e:	bf00      	nop
 801e860:	3708      	adds	r7, #8
 801e862:	46bd      	mov	sp, r7
 801e864:	bd80      	pop	{r7, pc}

0801e866 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801e866:	b580      	push	{r7, lr}
 801e868:	b082      	sub	sp, #8
 801e86a:	af00      	add	r7, sp, #0
 801e86c:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801e86e:	687b      	ldr	r3, [r7, #4]
 801e870:	681b      	ldr	r3, [r3, #0]
 801e872:	4618      	mov	r0, r3
 801e874:	f7ec f87e 	bl	800a974 <osMutexRelease>
}
 801e878:	bf00      	nop
 801e87a:	3708      	adds	r7, #8
 801e87c:	46bd      	mov	sp, r7
 801e87e:	bd80      	pop	{r7, pc}

0801e880 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801e880:	b580      	push	{r7, lr}
 801e882:	b08c      	sub	sp, #48	; 0x30
 801e884:	af00      	add	r7, sp, #0
 801e886:	60f8      	str	r0, [r7, #12]
 801e888:	60b9      	str	r1, [r7, #8]
 801e88a:	607a      	str	r2, [r7, #4]
 801e88c:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 801e88e:	f107 0314 	add.w	r3, r7, #20
 801e892:	2200      	movs	r2, #0
 801e894:	601a      	str	r2, [r3, #0]
 801e896:	605a      	str	r2, [r3, #4]
 801e898:	609a      	str	r2, [r3, #8]
 801e89a:	60da      	str	r2, [r3, #12]
 801e89c:	611a      	str	r2, [r3, #16]
 801e89e:	615a      	str	r2, [r3, #20]
 801e8a0:	619a      	str	r2, [r3, #24]
 801e8a2:	68fb      	ldr	r3, [r7, #12]
 801e8a4:	617b      	str	r3, [r7, #20]
 801e8a6:	68bb      	ldr	r3, [r7, #8]
 801e8a8:	61bb      	str	r3, [r7, #24]
 801e8aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e8ac:	b21b      	sxth	r3, r3
 801e8ae:	83bb      	strh	r3, [r7, #28]
 801e8b0:	683b      	ldr	r3, [r7, #0]
 801e8b2:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 801e8b4:	f107 0314 	add.w	r3, r7, #20
 801e8b8:	6879      	ldr	r1, [r7, #4]
 801e8ba:	4618      	mov	r0, r3
 801e8bc:	f7eb ff87 	bl	800a7ce <osThreadCreate>
 801e8c0:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 801e8c2:	4618      	mov	r0, r3
 801e8c4:	3730      	adds	r7, #48	; 0x30
 801e8c6:	46bd      	mov	sp, r7
 801e8c8:	bd80      	pop	{r7, pc}
	...

0801e8cc <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801e8cc:	b580      	push	{r7, lr}
 801e8ce:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 801e8d0:	4b04      	ldr	r3, [pc, #16]	; (801e8e4 <sys_arch_protect+0x18>)
 801e8d2:	681b      	ldr	r3, [r3, #0]
 801e8d4:	f04f 31ff 	mov.w	r1, #4294967295
 801e8d8:	4618      	mov	r0, r3
 801e8da:	f7eb fffd 	bl	800a8d8 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 801e8de:	2301      	movs	r3, #1
}
 801e8e0:	4618      	mov	r0, r3
 801e8e2:	bd80      	pop	{r7, pc}
 801e8e4:	24007f6c 	.word	0x24007f6c

0801e8e8 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801e8e8:	b580      	push	{r7, lr}
 801e8ea:	b082      	sub	sp, #8
 801e8ec:	af00      	add	r7, sp, #0
 801e8ee:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 801e8f0:	4b04      	ldr	r3, [pc, #16]	; (801e904 <sys_arch_unprotect+0x1c>)
 801e8f2:	681b      	ldr	r3, [r3, #0]
 801e8f4:	4618      	mov	r0, r3
 801e8f6:	f7ec f83d 	bl	800a974 <osMutexRelease>
}
 801e8fa:	bf00      	nop
 801e8fc:	3708      	adds	r7, #8
 801e8fe:	46bd      	mov	sp, r7
 801e900:	bd80      	pop	{r7, pc}
 801e902:	bf00      	nop
 801e904:	24007f6c 	.word	0x24007f6c

0801e908 <atof>:
 801e908:	2100      	movs	r1, #0
 801e90a:	f000 be11 	b.w	801f530 <strtod>
	...

0801e910 <rand>:
 801e910:	4b16      	ldr	r3, [pc, #88]	; (801e96c <rand+0x5c>)
 801e912:	b510      	push	{r4, lr}
 801e914:	681c      	ldr	r4, [r3, #0]
 801e916:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801e918:	b9b3      	cbnz	r3, 801e948 <rand+0x38>
 801e91a:	2018      	movs	r0, #24
 801e91c:	f003 f850 	bl	80219c0 <malloc>
 801e920:	4602      	mov	r2, r0
 801e922:	6320      	str	r0, [r4, #48]	; 0x30
 801e924:	b920      	cbnz	r0, 801e930 <rand+0x20>
 801e926:	4b12      	ldr	r3, [pc, #72]	; (801e970 <rand+0x60>)
 801e928:	4812      	ldr	r0, [pc, #72]	; (801e974 <rand+0x64>)
 801e92a:	2152      	movs	r1, #82	; 0x52
 801e92c:	f001 fede 	bl	80206ec <__assert_func>
 801e930:	4911      	ldr	r1, [pc, #68]	; (801e978 <rand+0x68>)
 801e932:	4b12      	ldr	r3, [pc, #72]	; (801e97c <rand+0x6c>)
 801e934:	e9c0 1300 	strd	r1, r3, [r0]
 801e938:	4b11      	ldr	r3, [pc, #68]	; (801e980 <rand+0x70>)
 801e93a:	6083      	str	r3, [r0, #8]
 801e93c:	230b      	movs	r3, #11
 801e93e:	8183      	strh	r3, [r0, #12]
 801e940:	2100      	movs	r1, #0
 801e942:	2001      	movs	r0, #1
 801e944:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801e948:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801e94a:	480e      	ldr	r0, [pc, #56]	; (801e984 <rand+0x74>)
 801e94c:	690b      	ldr	r3, [r1, #16]
 801e94e:	694c      	ldr	r4, [r1, #20]
 801e950:	4a0d      	ldr	r2, [pc, #52]	; (801e988 <rand+0x78>)
 801e952:	4358      	muls	r0, r3
 801e954:	fb02 0004 	mla	r0, r2, r4, r0
 801e958:	fba3 3202 	umull	r3, r2, r3, r2
 801e95c:	3301      	adds	r3, #1
 801e95e:	eb40 0002 	adc.w	r0, r0, r2
 801e962:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801e966:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801e96a:	bd10      	pop	{r4, pc}
 801e96c:	240004c8 	.word	0x240004c8
 801e970:	080270a4 	.word	0x080270a4
 801e974:	080270bb 	.word	0x080270bb
 801e978:	abcd330e 	.word	0xabcd330e
 801e97c:	e66d1234 	.word	0xe66d1234
 801e980:	0005deec 	.word	0x0005deec
 801e984:	5851f42d 	.word	0x5851f42d
 801e988:	4c957f2d 	.word	0x4c957f2d

0801e98c <sulp>:
 801e98c:	b570      	push	{r4, r5, r6, lr}
 801e98e:	4604      	mov	r4, r0
 801e990:	460d      	mov	r5, r1
 801e992:	4616      	mov	r6, r2
 801e994:	ec45 4b10 	vmov	d0, r4, r5
 801e998:	f003 fc44 	bl	8022224 <__ulp>
 801e99c:	b17e      	cbz	r6, 801e9be <sulp+0x32>
 801e99e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801e9a2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801e9a6:	2b00      	cmp	r3, #0
 801e9a8:	dd09      	ble.n	801e9be <sulp+0x32>
 801e9aa:	051b      	lsls	r3, r3, #20
 801e9ac:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 801e9b0:	2000      	movs	r0, #0
 801e9b2:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 801e9b6:	ec41 0b17 	vmov	d7, r0, r1
 801e9ba:	ee20 0b07 	vmul.f64	d0, d0, d7
 801e9be:	bd70      	pop	{r4, r5, r6, pc}

0801e9c0 <_strtod_l>:
 801e9c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e9c4:	ed2d 8b0e 	vpush	{d8-d14}
 801e9c8:	b097      	sub	sp, #92	; 0x5c
 801e9ca:	4604      	mov	r4, r0
 801e9cc:	920d      	str	r2, [sp, #52]	; 0x34
 801e9ce:	2200      	movs	r2, #0
 801e9d0:	9212      	str	r2, [sp, #72]	; 0x48
 801e9d2:	468a      	mov	sl, r1
 801e9d4:	f04f 0800 	mov.w	r8, #0
 801e9d8:	f04f 0900 	mov.w	r9, #0
 801e9dc:	460a      	mov	r2, r1
 801e9de:	9211      	str	r2, [sp, #68]	; 0x44
 801e9e0:	7811      	ldrb	r1, [r2, #0]
 801e9e2:	292b      	cmp	r1, #43	; 0x2b
 801e9e4:	d04c      	beq.n	801ea80 <_strtod_l+0xc0>
 801e9e6:	d839      	bhi.n	801ea5c <_strtod_l+0x9c>
 801e9e8:	290d      	cmp	r1, #13
 801e9ea:	d833      	bhi.n	801ea54 <_strtod_l+0x94>
 801e9ec:	2908      	cmp	r1, #8
 801e9ee:	d833      	bhi.n	801ea58 <_strtod_l+0x98>
 801e9f0:	2900      	cmp	r1, #0
 801e9f2:	d03c      	beq.n	801ea6e <_strtod_l+0xae>
 801e9f4:	2200      	movs	r2, #0
 801e9f6:	9208      	str	r2, [sp, #32]
 801e9f8:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801e9fa:	7832      	ldrb	r2, [r6, #0]
 801e9fc:	2a30      	cmp	r2, #48	; 0x30
 801e9fe:	f040 80b8 	bne.w	801eb72 <_strtod_l+0x1b2>
 801ea02:	7872      	ldrb	r2, [r6, #1]
 801ea04:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 801ea08:	2a58      	cmp	r2, #88	; 0x58
 801ea0a:	d170      	bne.n	801eaee <_strtod_l+0x12e>
 801ea0c:	9302      	str	r3, [sp, #8]
 801ea0e:	9b08      	ldr	r3, [sp, #32]
 801ea10:	9301      	str	r3, [sp, #4]
 801ea12:	ab12      	add	r3, sp, #72	; 0x48
 801ea14:	9300      	str	r3, [sp, #0]
 801ea16:	4a91      	ldr	r2, [pc, #580]	; (801ec5c <_strtod_l+0x29c>)
 801ea18:	ab13      	add	r3, sp, #76	; 0x4c
 801ea1a:	a911      	add	r1, sp, #68	; 0x44
 801ea1c:	4620      	mov	r0, r4
 801ea1e:	f002 fcdf 	bl	80213e0 <__gethex>
 801ea22:	f010 070f 	ands.w	r7, r0, #15
 801ea26:	4605      	mov	r5, r0
 801ea28:	d005      	beq.n	801ea36 <_strtod_l+0x76>
 801ea2a:	2f06      	cmp	r7, #6
 801ea2c:	d12a      	bne.n	801ea84 <_strtod_l+0xc4>
 801ea2e:	3601      	adds	r6, #1
 801ea30:	2300      	movs	r3, #0
 801ea32:	9611      	str	r6, [sp, #68]	; 0x44
 801ea34:	9308      	str	r3, [sp, #32]
 801ea36:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ea38:	2b00      	cmp	r3, #0
 801ea3a:	f040 8555 	bne.w	801f4e8 <_strtod_l+0xb28>
 801ea3e:	9b08      	ldr	r3, [sp, #32]
 801ea40:	ec49 8b10 	vmov	d0, r8, r9
 801ea44:	b1cb      	cbz	r3, 801ea7a <_strtod_l+0xba>
 801ea46:	eeb1 0b40 	vneg.f64	d0, d0
 801ea4a:	b017      	add	sp, #92	; 0x5c
 801ea4c:	ecbd 8b0e 	vpop	{d8-d14}
 801ea50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ea54:	2920      	cmp	r1, #32
 801ea56:	d1cd      	bne.n	801e9f4 <_strtod_l+0x34>
 801ea58:	3201      	adds	r2, #1
 801ea5a:	e7c0      	b.n	801e9de <_strtod_l+0x1e>
 801ea5c:	292d      	cmp	r1, #45	; 0x2d
 801ea5e:	d1c9      	bne.n	801e9f4 <_strtod_l+0x34>
 801ea60:	2101      	movs	r1, #1
 801ea62:	9108      	str	r1, [sp, #32]
 801ea64:	1c51      	adds	r1, r2, #1
 801ea66:	9111      	str	r1, [sp, #68]	; 0x44
 801ea68:	7852      	ldrb	r2, [r2, #1]
 801ea6a:	2a00      	cmp	r2, #0
 801ea6c:	d1c4      	bne.n	801e9f8 <_strtod_l+0x38>
 801ea6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ea70:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 801ea74:	2b00      	cmp	r3, #0
 801ea76:	f040 8535 	bne.w	801f4e4 <_strtod_l+0xb24>
 801ea7a:	ec49 8b10 	vmov	d0, r8, r9
 801ea7e:	e7e4      	b.n	801ea4a <_strtod_l+0x8a>
 801ea80:	2100      	movs	r1, #0
 801ea82:	e7ee      	b.n	801ea62 <_strtod_l+0xa2>
 801ea84:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801ea86:	b13a      	cbz	r2, 801ea98 <_strtod_l+0xd8>
 801ea88:	2135      	movs	r1, #53	; 0x35
 801ea8a:	a814      	add	r0, sp, #80	; 0x50
 801ea8c:	f003 fcc4 	bl	8022418 <__copybits>
 801ea90:	9912      	ldr	r1, [sp, #72]	; 0x48
 801ea92:	4620      	mov	r0, r4
 801ea94:	f003 f89a 	bl	8021bcc <_Bfree>
 801ea98:	1e7b      	subs	r3, r7, #1
 801ea9a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801ea9c:	2b04      	cmp	r3, #4
 801ea9e:	d806      	bhi.n	801eaae <_strtod_l+0xee>
 801eaa0:	e8df f003 	tbb	[pc, r3]
 801eaa4:	201d0314 	.word	0x201d0314
 801eaa8:	14          	.byte	0x14
 801eaa9:	00          	.byte	0x00
 801eaaa:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 801eaae:	05eb      	lsls	r3, r5, #23
 801eab0:	bf48      	it	mi
 801eab2:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 801eab6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801eaba:	0d1b      	lsrs	r3, r3, #20
 801eabc:	051b      	lsls	r3, r3, #20
 801eabe:	2b00      	cmp	r3, #0
 801eac0:	d1b9      	bne.n	801ea36 <_strtod_l+0x76>
 801eac2:	f001 fdc9 	bl	8020658 <__errno>
 801eac6:	2322      	movs	r3, #34	; 0x22
 801eac8:	6003      	str	r3, [r0, #0]
 801eaca:	e7b4      	b.n	801ea36 <_strtod_l+0x76>
 801eacc:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 801ead0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801ead4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801ead8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 801eadc:	e7e7      	b.n	801eaae <_strtod_l+0xee>
 801eade:	f8df 9184 	ldr.w	r9, [pc, #388]	; 801ec64 <_strtod_l+0x2a4>
 801eae2:	e7e4      	b.n	801eaae <_strtod_l+0xee>
 801eae4:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 801eae8:	f04f 38ff 	mov.w	r8, #4294967295
 801eaec:	e7df      	b.n	801eaae <_strtod_l+0xee>
 801eaee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801eaf0:	1c5a      	adds	r2, r3, #1
 801eaf2:	9211      	str	r2, [sp, #68]	; 0x44
 801eaf4:	785b      	ldrb	r3, [r3, #1]
 801eaf6:	2b30      	cmp	r3, #48	; 0x30
 801eaf8:	d0f9      	beq.n	801eaee <_strtod_l+0x12e>
 801eafa:	2b00      	cmp	r3, #0
 801eafc:	d09b      	beq.n	801ea36 <_strtod_l+0x76>
 801eafe:	2301      	movs	r3, #1
 801eb00:	9306      	str	r3, [sp, #24]
 801eb02:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801eb04:	9309      	str	r3, [sp, #36]	; 0x24
 801eb06:	2300      	movs	r3, #0
 801eb08:	9305      	str	r3, [sp, #20]
 801eb0a:	9307      	str	r3, [sp, #28]
 801eb0c:	461e      	mov	r6, r3
 801eb0e:	220a      	movs	r2, #10
 801eb10:	9811      	ldr	r0, [sp, #68]	; 0x44
 801eb12:	7805      	ldrb	r5, [r0, #0]
 801eb14:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 801eb18:	b2d9      	uxtb	r1, r3
 801eb1a:	2909      	cmp	r1, #9
 801eb1c:	d92b      	bls.n	801eb76 <_strtod_l+0x1b6>
 801eb1e:	4950      	ldr	r1, [pc, #320]	; (801ec60 <_strtod_l+0x2a0>)
 801eb20:	2201      	movs	r2, #1
 801eb22:	f001 fd3c 	bl	802059e <strncmp>
 801eb26:	2800      	cmp	r0, #0
 801eb28:	d035      	beq.n	801eb96 <_strtod_l+0x1d6>
 801eb2a:	2000      	movs	r0, #0
 801eb2c:	462a      	mov	r2, r5
 801eb2e:	4633      	mov	r3, r6
 801eb30:	4683      	mov	fp, r0
 801eb32:	4601      	mov	r1, r0
 801eb34:	2a65      	cmp	r2, #101	; 0x65
 801eb36:	d001      	beq.n	801eb3c <_strtod_l+0x17c>
 801eb38:	2a45      	cmp	r2, #69	; 0x45
 801eb3a:	d118      	bne.n	801eb6e <_strtod_l+0x1ae>
 801eb3c:	b91b      	cbnz	r3, 801eb46 <_strtod_l+0x186>
 801eb3e:	9b06      	ldr	r3, [sp, #24]
 801eb40:	4303      	orrs	r3, r0
 801eb42:	d094      	beq.n	801ea6e <_strtod_l+0xae>
 801eb44:	2300      	movs	r3, #0
 801eb46:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
 801eb4a:	f10a 0201 	add.w	r2, sl, #1
 801eb4e:	9211      	str	r2, [sp, #68]	; 0x44
 801eb50:	f89a 2001 	ldrb.w	r2, [sl, #1]
 801eb54:	2a2b      	cmp	r2, #43	; 0x2b
 801eb56:	d075      	beq.n	801ec44 <_strtod_l+0x284>
 801eb58:	2a2d      	cmp	r2, #45	; 0x2d
 801eb5a:	d07b      	beq.n	801ec54 <_strtod_l+0x294>
 801eb5c:	f04f 0e00 	mov.w	lr, #0
 801eb60:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 801eb64:	2d09      	cmp	r5, #9
 801eb66:	f240 8083 	bls.w	801ec70 <_strtod_l+0x2b0>
 801eb6a:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 801eb6e:	2500      	movs	r5, #0
 801eb70:	e09e      	b.n	801ecb0 <_strtod_l+0x2f0>
 801eb72:	2300      	movs	r3, #0
 801eb74:	e7c4      	b.n	801eb00 <_strtod_l+0x140>
 801eb76:	2e08      	cmp	r6, #8
 801eb78:	bfd5      	itete	le
 801eb7a:	9907      	ldrle	r1, [sp, #28]
 801eb7c:	9905      	ldrgt	r1, [sp, #20]
 801eb7e:	fb02 3301 	mlale	r3, r2, r1, r3
 801eb82:	fb02 3301 	mlagt	r3, r2, r1, r3
 801eb86:	f100 0001 	add.w	r0, r0, #1
 801eb8a:	bfd4      	ite	le
 801eb8c:	9307      	strle	r3, [sp, #28]
 801eb8e:	9305      	strgt	r3, [sp, #20]
 801eb90:	3601      	adds	r6, #1
 801eb92:	9011      	str	r0, [sp, #68]	; 0x44
 801eb94:	e7bc      	b.n	801eb10 <_strtod_l+0x150>
 801eb96:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801eb98:	1c5a      	adds	r2, r3, #1
 801eb9a:	9211      	str	r2, [sp, #68]	; 0x44
 801eb9c:	785a      	ldrb	r2, [r3, #1]
 801eb9e:	b3ae      	cbz	r6, 801ec0c <_strtod_l+0x24c>
 801eba0:	4683      	mov	fp, r0
 801eba2:	4633      	mov	r3, r6
 801eba4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 801eba8:	2909      	cmp	r1, #9
 801ebaa:	d912      	bls.n	801ebd2 <_strtod_l+0x212>
 801ebac:	2101      	movs	r1, #1
 801ebae:	e7c1      	b.n	801eb34 <_strtod_l+0x174>
 801ebb0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801ebb2:	1c5a      	adds	r2, r3, #1
 801ebb4:	9211      	str	r2, [sp, #68]	; 0x44
 801ebb6:	785a      	ldrb	r2, [r3, #1]
 801ebb8:	3001      	adds	r0, #1
 801ebba:	2a30      	cmp	r2, #48	; 0x30
 801ebbc:	d0f8      	beq.n	801ebb0 <_strtod_l+0x1f0>
 801ebbe:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 801ebc2:	2b08      	cmp	r3, #8
 801ebc4:	f200 8495 	bhi.w	801f4f2 <_strtod_l+0xb32>
 801ebc8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801ebca:	9309      	str	r3, [sp, #36]	; 0x24
 801ebcc:	4683      	mov	fp, r0
 801ebce:	2000      	movs	r0, #0
 801ebd0:	4603      	mov	r3, r0
 801ebd2:	3a30      	subs	r2, #48	; 0x30
 801ebd4:	f100 0101 	add.w	r1, r0, #1
 801ebd8:	d012      	beq.n	801ec00 <_strtod_l+0x240>
 801ebda:	448b      	add	fp, r1
 801ebdc:	eb00 0c03 	add.w	ip, r0, r3
 801ebe0:	4619      	mov	r1, r3
 801ebe2:	250a      	movs	r5, #10
 801ebe4:	4561      	cmp	r1, ip
 801ebe6:	d113      	bne.n	801ec10 <_strtod_l+0x250>
 801ebe8:	1819      	adds	r1, r3, r0
 801ebea:	2908      	cmp	r1, #8
 801ebec:	f103 0301 	add.w	r3, r3, #1
 801ebf0:	4403      	add	r3, r0
 801ebf2:	dc1b      	bgt.n	801ec2c <_strtod_l+0x26c>
 801ebf4:	9807      	ldr	r0, [sp, #28]
 801ebf6:	210a      	movs	r1, #10
 801ebf8:	fb01 2200 	mla	r2, r1, r0, r2
 801ebfc:	9207      	str	r2, [sp, #28]
 801ebfe:	2100      	movs	r1, #0
 801ec00:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801ec02:	1c50      	adds	r0, r2, #1
 801ec04:	9011      	str	r0, [sp, #68]	; 0x44
 801ec06:	7852      	ldrb	r2, [r2, #1]
 801ec08:	4608      	mov	r0, r1
 801ec0a:	e7cb      	b.n	801eba4 <_strtod_l+0x1e4>
 801ec0c:	4630      	mov	r0, r6
 801ec0e:	e7d4      	b.n	801ebba <_strtod_l+0x1fa>
 801ec10:	2908      	cmp	r1, #8
 801ec12:	f101 0101 	add.w	r1, r1, #1
 801ec16:	dc03      	bgt.n	801ec20 <_strtod_l+0x260>
 801ec18:	9f07      	ldr	r7, [sp, #28]
 801ec1a:	436f      	muls	r7, r5
 801ec1c:	9707      	str	r7, [sp, #28]
 801ec1e:	e7e1      	b.n	801ebe4 <_strtod_l+0x224>
 801ec20:	2910      	cmp	r1, #16
 801ec22:	bfde      	ittt	le
 801ec24:	9f05      	ldrle	r7, [sp, #20]
 801ec26:	436f      	mulle	r7, r5
 801ec28:	9705      	strle	r7, [sp, #20]
 801ec2a:	e7db      	b.n	801ebe4 <_strtod_l+0x224>
 801ec2c:	2b10      	cmp	r3, #16
 801ec2e:	bfdf      	itttt	le
 801ec30:	9805      	ldrle	r0, [sp, #20]
 801ec32:	210a      	movle	r1, #10
 801ec34:	fb01 2200 	mlale	r2, r1, r0, r2
 801ec38:	9205      	strle	r2, [sp, #20]
 801ec3a:	e7e0      	b.n	801ebfe <_strtod_l+0x23e>
 801ec3c:	f04f 0b00 	mov.w	fp, #0
 801ec40:	2101      	movs	r1, #1
 801ec42:	e77c      	b.n	801eb3e <_strtod_l+0x17e>
 801ec44:	f04f 0e00 	mov.w	lr, #0
 801ec48:	f10a 0202 	add.w	r2, sl, #2
 801ec4c:	9211      	str	r2, [sp, #68]	; 0x44
 801ec4e:	f89a 2002 	ldrb.w	r2, [sl, #2]
 801ec52:	e785      	b.n	801eb60 <_strtod_l+0x1a0>
 801ec54:	f04f 0e01 	mov.w	lr, #1
 801ec58:	e7f6      	b.n	801ec48 <_strtod_l+0x288>
 801ec5a:	bf00      	nop
 801ec5c:	08027118 	.word	0x08027118
 801ec60:	08027113 	.word	0x08027113
 801ec64:	7ff00000 	.word	0x7ff00000
 801ec68:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801ec6a:	1c55      	adds	r5, r2, #1
 801ec6c:	9511      	str	r5, [sp, #68]	; 0x44
 801ec6e:	7852      	ldrb	r2, [r2, #1]
 801ec70:	2a30      	cmp	r2, #48	; 0x30
 801ec72:	d0f9      	beq.n	801ec68 <_strtod_l+0x2a8>
 801ec74:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 801ec78:	2d08      	cmp	r5, #8
 801ec7a:	f63f af78 	bhi.w	801eb6e <_strtod_l+0x1ae>
 801ec7e:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 801ec82:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801ec84:	920a      	str	r2, [sp, #40]	; 0x28
 801ec86:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801ec88:	1c55      	adds	r5, r2, #1
 801ec8a:	9511      	str	r5, [sp, #68]	; 0x44
 801ec8c:	7852      	ldrb	r2, [r2, #1]
 801ec8e:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 801ec92:	2f09      	cmp	r7, #9
 801ec94:	d937      	bls.n	801ed06 <_strtod_l+0x346>
 801ec96:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801ec98:	1bed      	subs	r5, r5, r7
 801ec9a:	2d08      	cmp	r5, #8
 801ec9c:	f644 651f 	movw	r5, #19999	; 0x4e1f
 801eca0:	dc02      	bgt.n	801eca8 <_strtod_l+0x2e8>
 801eca2:	4565      	cmp	r5, ip
 801eca4:	bfa8      	it	ge
 801eca6:	4665      	movge	r5, ip
 801eca8:	f1be 0f00 	cmp.w	lr, #0
 801ecac:	d000      	beq.n	801ecb0 <_strtod_l+0x2f0>
 801ecae:	426d      	negs	r5, r5
 801ecb0:	2b00      	cmp	r3, #0
 801ecb2:	d14d      	bne.n	801ed50 <_strtod_l+0x390>
 801ecb4:	9b06      	ldr	r3, [sp, #24]
 801ecb6:	4303      	orrs	r3, r0
 801ecb8:	f47f aebd 	bne.w	801ea36 <_strtod_l+0x76>
 801ecbc:	2900      	cmp	r1, #0
 801ecbe:	f47f aed6 	bne.w	801ea6e <_strtod_l+0xae>
 801ecc2:	2a69      	cmp	r2, #105	; 0x69
 801ecc4:	d027      	beq.n	801ed16 <_strtod_l+0x356>
 801ecc6:	dc24      	bgt.n	801ed12 <_strtod_l+0x352>
 801ecc8:	2a49      	cmp	r2, #73	; 0x49
 801ecca:	d024      	beq.n	801ed16 <_strtod_l+0x356>
 801eccc:	2a4e      	cmp	r2, #78	; 0x4e
 801ecce:	f47f aece 	bne.w	801ea6e <_strtod_l+0xae>
 801ecd2:	4995      	ldr	r1, [pc, #596]	; (801ef28 <_strtod_l+0x568>)
 801ecd4:	a811      	add	r0, sp, #68	; 0x44
 801ecd6:	f002 fdc3 	bl	8021860 <__match>
 801ecda:	2800      	cmp	r0, #0
 801ecdc:	f43f aec7 	beq.w	801ea6e <_strtod_l+0xae>
 801ece0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801ece2:	781b      	ldrb	r3, [r3, #0]
 801ece4:	2b28      	cmp	r3, #40	; 0x28
 801ece6:	d12d      	bne.n	801ed44 <_strtod_l+0x384>
 801ece8:	4990      	ldr	r1, [pc, #576]	; (801ef2c <_strtod_l+0x56c>)
 801ecea:	aa14      	add	r2, sp, #80	; 0x50
 801ecec:	a811      	add	r0, sp, #68	; 0x44
 801ecee:	f002 fdcb 	bl	8021888 <__hexnan>
 801ecf2:	2805      	cmp	r0, #5
 801ecf4:	d126      	bne.n	801ed44 <_strtod_l+0x384>
 801ecf6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801ecf8:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 801ecfc:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 801ed00:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 801ed04:	e697      	b.n	801ea36 <_strtod_l+0x76>
 801ed06:	250a      	movs	r5, #10
 801ed08:	fb05 2c0c 	mla	ip, r5, ip, r2
 801ed0c:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 801ed10:	e7b9      	b.n	801ec86 <_strtod_l+0x2c6>
 801ed12:	2a6e      	cmp	r2, #110	; 0x6e
 801ed14:	e7db      	b.n	801ecce <_strtod_l+0x30e>
 801ed16:	4986      	ldr	r1, [pc, #536]	; (801ef30 <_strtod_l+0x570>)
 801ed18:	a811      	add	r0, sp, #68	; 0x44
 801ed1a:	f002 fda1 	bl	8021860 <__match>
 801ed1e:	2800      	cmp	r0, #0
 801ed20:	f43f aea5 	beq.w	801ea6e <_strtod_l+0xae>
 801ed24:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801ed26:	4983      	ldr	r1, [pc, #524]	; (801ef34 <_strtod_l+0x574>)
 801ed28:	3b01      	subs	r3, #1
 801ed2a:	a811      	add	r0, sp, #68	; 0x44
 801ed2c:	9311      	str	r3, [sp, #68]	; 0x44
 801ed2e:	f002 fd97 	bl	8021860 <__match>
 801ed32:	b910      	cbnz	r0, 801ed3a <_strtod_l+0x37a>
 801ed34:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801ed36:	3301      	adds	r3, #1
 801ed38:	9311      	str	r3, [sp, #68]	; 0x44
 801ed3a:	f8df 920c 	ldr.w	r9, [pc, #524]	; 801ef48 <_strtod_l+0x588>
 801ed3e:	f04f 0800 	mov.w	r8, #0
 801ed42:	e678      	b.n	801ea36 <_strtod_l+0x76>
 801ed44:	487c      	ldr	r0, [pc, #496]	; (801ef38 <_strtod_l+0x578>)
 801ed46:	f001 fcc3 	bl	80206d0 <nan>
 801ed4a:	ec59 8b10 	vmov	r8, r9, d0
 801ed4e:	e672      	b.n	801ea36 <_strtod_l+0x76>
 801ed50:	eddd 7a07 	vldr	s15, [sp, #28]
 801ed54:	eba5 020b 	sub.w	r2, r5, fp
 801ed58:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801ed5c:	2e00      	cmp	r6, #0
 801ed5e:	bf08      	it	eq
 801ed60:	461e      	moveq	r6, r3
 801ed62:	2b10      	cmp	r3, #16
 801ed64:	9206      	str	r2, [sp, #24]
 801ed66:	461a      	mov	r2, r3
 801ed68:	bfa8      	it	ge
 801ed6a:	2210      	movge	r2, #16
 801ed6c:	2b09      	cmp	r3, #9
 801ed6e:	ec59 8b17 	vmov	r8, r9, d7
 801ed72:	dd0c      	ble.n	801ed8e <_strtod_l+0x3ce>
 801ed74:	4971      	ldr	r1, [pc, #452]	; (801ef3c <_strtod_l+0x57c>)
 801ed76:	eddd 6a05 	vldr	s13, [sp, #20]
 801ed7a:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 801ed7e:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 801ed82:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 801ed86:	eea7 6b05 	vfma.f64	d6, d7, d5
 801ed8a:	ec59 8b16 	vmov	r8, r9, d6
 801ed8e:	2b0f      	cmp	r3, #15
 801ed90:	dc37      	bgt.n	801ee02 <_strtod_l+0x442>
 801ed92:	9906      	ldr	r1, [sp, #24]
 801ed94:	2900      	cmp	r1, #0
 801ed96:	f43f ae4e 	beq.w	801ea36 <_strtod_l+0x76>
 801ed9a:	dd23      	ble.n	801ede4 <_strtod_l+0x424>
 801ed9c:	2916      	cmp	r1, #22
 801ed9e:	dc0b      	bgt.n	801edb8 <_strtod_l+0x3f8>
 801eda0:	4b66      	ldr	r3, [pc, #408]	; (801ef3c <_strtod_l+0x57c>)
 801eda2:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 801eda6:	ed93 7b00 	vldr	d7, [r3]
 801edaa:	ec49 8b16 	vmov	d6, r8, r9
 801edae:	ee27 7b06 	vmul.f64	d7, d7, d6
 801edb2:	ec59 8b17 	vmov	r8, r9, d7
 801edb6:	e63e      	b.n	801ea36 <_strtod_l+0x76>
 801edb8:	9806      	ldr	r0, [sp, #24]
 801edba:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 801edbe:	4281      	cmp	r1, r0
 801edc0:	db1f      	blt.n	801ee02 <_strtod_l+0x442>
 801edc2:	4a5e      	ldr	r2, [pc, #376]	; (801ef3c <_strtod_l+0x57c>)
 801edc4:	f1c3 030f 	rsb	r3, r3, #15
 801edc8:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 801edcc:	ed91 7b00 	vldr	d7, [r1]
 801edd0:	ec49 8b16 	vmov	d6, r8, r9
 801edd4:	1ac3      	subs	r3, r0, r3
 801edd6:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 801edda:	ee27 7b06 	vmul.f64	d7, d7, d6
 801edde:	ed92 6b00 	vldr	d6, [r2]
 801ede2:	e7e4      	b.n	801edae <_strtod_l+0x3ee>
 801ede4:	9906      	ldr	r1, [sp, #24]
 801ede6:	3116      	adds	r1, #22
 801ede8:	db0b      	blt.n	801ee02 <_strtod_l+0x442>
 801edea:	4b54      	ldr	r3, [pc, #336]	; (801ef3c <_strtod_l+0x57c>)
 801edec:	ebab 0505 	sub.w	r5, fp, r5
 801edf0:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 801edf4:	ed95 7b00 	vldr	d7, [r5]
 801edf8:	ec49 8b16 	vmov	d6, r8, r9
 801edfc:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801ee00:	e7d7      	b.n	801edb2 <_strtod_l+0x3f2>
 801ee02:	9906      	ldr	r1, [sp, #24]
 801ee04:	1a9a      	subs	r2, r3, r2
 801ee06:	440a      	add	r2, r1
 801ee08:	2a00      	cmp	r2, #0
 801ee0a:	dd6e      	ble.n	801eeea <_strtod_l+0x52a>
 801ee0c:	f012 000f 	ands.w	r0, r2, #15
 801ee10:	d00a      	beq.n	801ee28 <_strtod_l+0x468>
 801ee12:	494a      	ldr	r1, [pc, #296]	; (801ef3c <_strtod_l+0x57c>)
 801ee14:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 801ee18:	ed91 7b00 	vldr	d7, [r1]
 801ee1c:	ec49 8b16 	vmov	d6, r8, r9
 801ee20:	ee27 7b06 	vmul.f64	d7, d7, d6
 801ee24:	ec59 8b17 	vmov	r8, r9, d7
 801ee28:	f032 020f 	bics.w	r2, r2, #15
 801ee2c:	d04e      	beq.n	801eecc <_strtod_l+0x50c>
 801ee2e:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 801ee32:	dd22      	ble.n	801ee7a <_strtod_l+0x4ba>
 801ee34:	2500      	movs	r5, #0
 801ee36:	462e      	mov	r6, r5
 801ee38:	9507      	str	r5, [sp, #28]
 801ee3a:	462f      	mov	r7, r5
 801ee3c:	2322      	movs	r3, #34	; 0x22
 801ee3e:	f8df 9108 	ldr.w	r9, [pc, #264]	; 801ef48 <_strtod_l+0x588>
 801ee42:	6023      	str	r3, [r4, #0]
 801ee44:	f04f 0800 	mov.w	r8, #0
 801ee48:	9b07      	ldr	r3, [sp, #28]
 801ee4a:	2b00      	cmp	r3, #0
 801ee4c:	f43f adf3 	beq.w	801ea36 <_strtod_l+0x76>
 801ee50:	9912      	ldr	r1, [sp, #72]	; 0x48
 801ee52:	4620      	mov	r0, r4
 801ee54:	f002 feba 	bl	8021bcc <_Bfree>
 801ee58:	4639      	mov	r1, r7
 801ee5a:	4620      	mov	r0, r4
 801ee5c:	f002 feb6 	bl	8021bcc <_Bfree>
 801ee60:	4631      	mov	r1, r6
 801ee62:	4620      	mov	r0, r4
 801ee64:	f002 feb2 	bl	8021bcc <_Bfree>
 801ee68:	9907      	ldr	r1, [sp, #28]
 801ee6a:	4620      	mov	r0, r4
 801ee6c:	f002 feae 	bl	8021bcc <_Bfree>
 801ee70:	4629      	mov	r1, r5
 801ee72:	4620      	mov	r0, r4
 801ee74:	f002 feaa 	bl	8021bcc <_Bfree>
 801ee78:	e5dd      	b.n	801ea36 <_strtod_l+0x76>
 801ee7a:	2000      	movs	r0, #0
 801ee7c:	ec49 8b17 	vmov	d7, r8, r9
 801ee80:	4f2f      	ldr	r7, [pc, #188]	; (801ef40 <_strtod_l+0x580>)
 801ee82:	1112      	asrs	r2, r2, #4
 801ee84:	4601      	mov	r1, r0
 801ee86:	2a01      	cmp	r2, #1
 801ee88:	dc23      	bgt.n	801eed2 <_strtod_l+0x512>
 801ee8a:	b108      	cbz	r0, 801ee90 <_strtod_l+0x4d0>
 801ee8c:	ec59 8b17 	vmov	r8, r9, d7
 801ee90:	4a2b      	ldr	r2, [pc, #172]	; (801ef40 <_strtod_l+0x580>)
 801ee92:	482c      	ldr	r0, [pc, #176]	; (801ef44 <_strtod_l+0x584>)
 801ee94:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 801ee98:	ed92 7b00 	vldr	d7, [r2]
 801ee9c:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 801eea0:	ec49 8b16 	vmov	d6, r8, r9
 801eea4:	4a28      	ldr	r2, [pc, #160]	; (801ef48 <_strtod_l+0x588>)
 801eea6:	ee27 7b06 	vmul.f64	d7, d7, d6
 801eeaa:	ee17 1a90 	vmov	r1, s15
 801eeae:	400a      	ands	r2, r1
 801eeb0:	4282      	cmp	r2, r0
 801eeb2:	ec59 8b17 	vmov	r8, r9, d7
 801eeb6:	d8bd      	bhi.n	801ee34 <_strtod_l+0x474>
 801eeb8:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 801eebc:	4282      	cmp	r2, r0
 801eebe:	bf86      	itte	hi
 801eec0:	f8df 9088 	ldrhi.w	r9, [pc, #136]	; 801ef4c <_strtod_l+0x58c>
 801eec4:	f04f 38ff 	movhi.w	r8, #4294967295
 801eec8:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 801eecc:	2200      	movs	r2, #0
 801eece:	9205      	str	r2, [sp, #20]
 801eed0:	e076      	b.n	801efc0 <_strtod_l+0x600>
 801eed2:	f012 0f01 	tst.w	r2, #1
 801eed6:	d004      	beq.n	801eee2 <_strtod_l+0x522>
 801eed8:	ed97 6b00 	vldr	d6, [r7]
 801eedc:	2001      	movs	r0, #1
 801eede:	ee27 7b06 	vmul.f64	d7, d7, d6
 801eee2:	3101      	adds	r1, #1
 801eee4:	1052      	asrs	r2, r2, #1
 801eee6:	3708      	adds	r7, #8
 801eee8:	e7cd      	b.n	801ee86 <_strtod_l+0x4c6>
 801eeea:	d0ef      	beq.n	801eecc <_strtod_l+0x50c>
 801eeec:	4252      	negs	r2, r2
 801eeee:	f012 000f 	ands.w	r0, r2, #15
 801eef2:	d00a      	beq.n	801ef0a <_strtod_l+0x54a>
 801eef4:	4911      	ldr	r1, [pc, #68]	; (801ef3c <_strtod_l+0x57c>)
 801eef6:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 801eefa:	ed91 7b00 	vldr	d7, [r1]
 801eefe:	ec49 8b16 	vmov	d6, r8, r9
 801ef02:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801ef06:	ec59 8b17 	vmov	r8, r9, d7
 801ef0a:	1112      	asrs	r2, r2, #4
 801ef0c:	d0de      	beq.n	801eecc <_strtod_l+0x50c>
 801ef0e:	2a1f      	cmp	r2, #31
 801ef10:	dd1e      	ble.n	801ef50 <_strtod_l+0x590>
 801ef12:	2500      	movs	r5, #0
 801ef14:	462e      	mov	r6, r5
 801ef16:	9507      	str	r5, [sp, #28]
 801ef18:	462f      	mov	r7, r5
 801ef1a:	2322      	movs	r3, #34	; 0x22
 801ef1c:	f04f 0800 	mov.w	r8, #0
 801ef20:	f04f 0900 	mov.w	r9, #0
 801ef24:	6023      	str	r3, [r4, #0]
 801ef26:	e78f      	b.n	801ee48 <_strtod_l+0x488>
 801ef28:	08027276 	.word	0x08027276
 801ef2c:	0802712c 	.word	0x0802712c
 801ef30:	0802726e 	.word	0x0802726e
 801ef34:	080272e9 	.word	0x080272e9
 801ef38:	080272e5 	.word	0x080272e5
 801ef3c:	08027440 	.word	0x08027440
 801ef40:	08027418 	.word	0x08027418
 801ef44:	7ca00000 	.word	0x7ca00000
 801ef48:	7ff00000 	.word	0x7ff00000
 801ef4c:	7fefffff 	.word	0x7fefffff
 801ef50:	f012 0110 	ands.w	r1, r2, #16
 801ef54:	bf18      	it	ne
 801ef56:	216a      	movne	r1, #106	; 0x6a
 801ef58:	9105      	str	r1, [sp, #20]
 801ef5a:	ec49 8b17 	vmov	d7, r8, r9
 801ef5e:	49be      	ldr	r1, [pc, #760]	; (801f258 <_strtod_l+0x898>)
 801ef60:	2000      	movs	r0, #0
 801ef62:	07d7      	lsls	r7, r2, #31
 801ef64:	d504      	bpl.n	801ef70 <_strtod_l+0x5b0>
 801ef66:	ed91 6b00 	vldr	d6, [r1]
 801ef6a:	2001      	movs	r0, #1
 801ef6c:	ee27 7b06 	vmul.f64	d7, d7, d6
 801ef70:	1052      	asrs	r2, r2, #1
 801ef72:	f101 0108 	add.w	r1, r1, #8
 801ef76:	d1f4      	bne.n	801ef62 <_strtod_l+0x5a2>
 801ef78:	b108      	cbz	r0, 801ef7e <_strtod_l+0x5be>
 801ef7a:	ec59 8b17 	vmov	r8, r9, d7
 801ef7e:	9a05      	ldr	r2, [sp, #20]
 801ef80:	b1ba      	cbz	r2, 801efb2 <_strtod_l+0x5f2>
 801ef82:	f3c9 510a 	ubfx	r1, r9, #20, #11
 801ef86:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 801ef8a:	2a00      	cmp	r2, #0
 801ef8c:	4648      	mov	r0, r9
 801ef8e:	dd10      	ble.n	801efb2 <_strtod_l+0x5f2>
 801ef90:	2a1f      	cmp	r2, #31
 801ef92:	f340 812c 	ble.w	801f1ee <_strtod_l+0x82e>
 801ef96:	2a34      	cmp	r2, #52	; 0x34
 801ef98:	bfde      	ittt	le
 801ef9a:	f04f 32ff 	movle.w	r2, #4294967295
 801ef9e:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 801efa2:	408a      	lslle	r2, r1
 801efa4:	f04f 0800 	mov.w	r8, #0
 801efa8:	bfcc      	ite	gt
 801efaa:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 801efae:	ea02 0900 	andle.w	r9, r2, r0
 801efb2:	ec49 8b17 	vmov	d7, r8, r9
 801efb6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801efba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801efbe:	d0a8      	beq.n	801ef12 <_strtod_l+0x552>
 801efc0:	9a07      	ldr	r2, [sp, #28]
 801efc2:	9200      	str	r2, [sp, #0]
 801efc4:	9909      	ldr	r1, [sp, #36]	; 0x24
 801efc6:	4632      	mov	r2, r6
 801efc8:	4620      	mov	r0, r4
 801efca:	f002 fe67 	bl	8021c9c <__s2b>
 801efce:	9007      	str	r0, [sp, #28]
 801efd0:	2800      	cmp	r0, #0
 801efd2:	f43f af2f 	beq.w	801ee34 <_strtod_l+0x474>
 801efd6:	9a06      	ldr	r2, [sp, #24]
 801efd8:	2a00      	cmp	r2, #0
 801efda:	ebab 0305 	sub.w	r3, fp, r5
 801efde:	ed9f 9b96 	vldr	d9, [pc, #600]	; 801f238 <_strtod_l+0x878>
 801efe2:	bfa8      	it	ge
 801efe4:	2300      	movge	r3, #0
 801efe6:	ed9f ab96 	vldr	d10, [pc, #600]	; 801f240 <_strtod_l+0x880>
 801efea:	ed9f bb97 	vldr	d11, [pc, #604]	; 801f248 <_strtod_l+0x888>
 801efee:	9309      	str	r3, [sp, #36]	; 0x24
 801eff0:	2500      	movs	r5, #0
 801eff2:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 801eff6:	930c      	str	r3, [sp, #48]	; 0x30
 801eff8:	462e      	mov	r6, r5
 801effa:	9b07      	ldr	r3, [sp, #28]
 801effc:	4620      	mov	r0, r4
 801effe:	6859      	ldr	r1, [r3, #4]
 801f000:	f002 fda4 	bl	8021b4c <_Balloc>
 801f004:	4607      	mov	r7, r0
 801f006:	2800      	cmp	r0, #0
 801f008:	f43f af18 	beq.w	801ee3c <_strtod_l+0x47c>
 801f00c:	9b07      	ldr	r3, [sp, #28]
 801f00e:	691a      	ldr	r2, [r3, #16]
 801f010:	3202      	adds	r2, #2
 801f012:	f103 010c 	add.w	r1, r3, #12
 801f016:	0092      	lsls	r2, r2, #2
 801f018:	300c      	adds	r0, #12
 801f01a:	f001 fb4a 	bl	80206b2 <memcpy>
 801f01e:	ec49 8b10 	vmov	d0, r8, r9
 801f022:	aa14      	add	r2, sp, #80	; 0x50
 801f024:	a913      	add	r1, sp, #76	; 0x4c
 801f026:	4620      	mov	r0, r4
 801f028:	f003 f96c 	bl	8022304 <__d2b>
 801f02c:	ec49 8b18 	vmov	d8, r8, r9
 801f030:	9012      	str	r0, [sp, #72]	; 0x48
 801f032:	2800      	cmp	r0, #0
 801f034:	f43f af02 	beq.w	801ee3c <_strtod_l+0x47c>
 801f038:	2101      	movs	r1, #1
 801f03a:	4620      	mov	r0, r4
 801f03c:	f002 fec6 	bl	8021dcc <__i2b>
 801f040:	4606      	mov	r6, r0
 801f042:	2800      	cmp	r0, #0
 801f044:	f43f aefa 	beq.w	801ee3c <_strtod_l+0x47c>
 801f048:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801f04a:	9914      	ldr	r1, [sp, #80]	; 0x50
 801f04c:	2b00      	cmp	r3, #0
 801f04e:	bfab      	itete	ge
 801f050:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 801f052:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 801f054:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 801f058:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 801f05c:	bfac      	ite	ge
 801f05e:	eb03 0b02 	addge.w	fp, r3, r2
 801f062:	eba2 0a03 	sublt.w	sl, r2, r3
 801f066:	9a05      	ldr	r2, [sp, #20]
 801f068:	1a9b      	subs	r3, r3, r2
 801f06a:	440b      	add	r3, r1
 801f06c:	4a7b      	ldr	r2, [pc, #492]	; (801f25c <_strtod_l+0x89c>)
 801f06e:	3b01      	subs	r3, #1
 801f070:	4293      	cmp	r3, r2
 801f072:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 801f076:	f280 80cd 	bge.w	801f214 <_strtod_l+0x854>
 801f07a:	1ad2      	subs	r2, r2, r3
 801f07c:	2a1f      	cmp	r2, #31
 801f07e:	eba1 0102 	sub.w	r1, r1, r2
 801f082:	f04f 0001 	mov.w	r0, #1
 801f086:	f300 80b9 	bgt.w	801f1fc <_strtod_l+0x83c>
 801f08a:	fa00 f302 	lsl.w	r3, r0, r2
 801f08e:	930b      	str	r3, [sp, #44]	; 0x2c
 801f090:	2300      	movs	r3, #0
 801f092:	930a      	str	r3, [sp, #40]	; 0x28
 801f094:	eb0b 0301 	add.w	r3, fp, r1
 801f098:	9a05      	ldr	r2, [sp, #20]
 801f09a:	459b      	cmp	fp, r3
 801f09c:	448a      	add	sl, r1
 801f09e:	4492      	add	sl, r2
 801f0a0:	465a      	mov	r2, fp
 801f0a2:	bfa8      	it	ge
 801f0a4:	461a      	movge	r2, r3
 801f0a6:	4552      	cmp	r2, sl
 801f0a8:	bfa8      	it	ge
 801f0aa:	4652      	movge	r2, sl
 801f0ac:	2a00      	cmp	r2, #0
 801f0ae:	bfc2      	ittt	gt
 801f0b0:	1a9b      	subgt	r3, r3, r2
 801f0b2:	ebaa 0a02 	subgt.w	sl, sl, r2
 801f0b6:	ebab 0b02 	subgt.w	fp, fp, r2
 801f0ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f0bc:	2a00      	cmp	r2, #0
 801f0be:	dd18      	ble.n	801f0f2 <_strtod_l+0x732>
 801f0c0:	4631      	mov	r1, r6
 801f0c2:	4620      	mov	r0, r4
 801f0c4:	930f      	str	r3, [sp, #60]	; 0x3c
 801f0c6:	f002 ff41 	bl	8021f4c <__pow5mult>
 801f0ca:	4606      	mov	r6, r0
 801f0cc:	2800      	cmp	r0, #0
 801f0ce:	f43f aeb5 	beq.w	801ee3c <_strtod_l+0x47c>
 801f0d2:	4601      	mov	r1, r0
 801f0d4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801f0d6:	4620      	mov	r0, r4
 801f0d8:	f002 fe8e 	bl	8021df8 <__multiply>
 801f0dc:	900e      	str	r0, [sp, #56]	; 0x38
 801f0de:	2800      	cmp	r0, #0
 801f0e0:	f43f aeac 	beq.w	801ee3c <_strtod_l+0x47c>
 801f0e4:	9912      	ldr	r1, [sp, #72]	; 0x48
 801f0e6:	4620      	mov	r0, r4
 801f0e8:	f002 fd70 	bl	8021bcc <_Bfree>
 801f0ec:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801f0ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f0f0:	9212      	str	r2, [sp, #72]	; 0x48
 801f0f2:	2b00      	cmp	r3, #0
 801f0f4:	f300 8093 	bgt.w	801f21e <_strtod_l+0x85e>
 801f0f8:	9b06      	ldr	r3, [sp, #24]
 801f0fa:	2b00      	cmp	r3, #0
 801f0fc:	dd08      	ble.n	801f110 <_strtod_l+0x750>
 801f0fe:	4639      	mov	r1, r7
 801f100:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801f102:	4620      	mov	r0, r4
 801f104:	f002 ff22 	bl	8021f4c <__pow5mult>
 801f108:	4607      	mov	r7, r0
 801f10a:	2800      	cmp	r0, #0
 801f10c:	f43f ae96 	beq.w	801ee3c <_strtod_l+0x47c>
 801f110:	f1ba 0f00 	cmp.w	sl, #0
 801f114:	dd08      	ble.n	801f128 <_strtod_l+0x768>
 801f116:	4639      	mov	r1, r7
 801f118:	4652      	mov	r2, sl
 801f11a:	4620      	mov	r0, r4
 801f11c:	f002 ff70 	bl	8022000 <__lshift>
 801f120:	4607      	mov	r7, r0
 801f122:	2800      	cmp	r0, #0
 801f124:	f43f ae8a 	beq.w	801ee3c <_strtod_l+0x47c>
 801f128:	f1bb 0f00 	cmp.w	fp, #0
 801f12c:	dd08      	ble.n	801f140 <_strtod_l+0x780>
 801f12e:	4631      	mov	r1, r6
 801f130:	465a      	mov	r2, fp
 801f132:	4620      	mov	r0, r4
 801f134:	f002 ff64 	bl	8022000 <__lshift>
 801f138:	4606      	mov	r6, r0
 801f13a:	2800      	cmp	r0, #0
 801f13c:	f43f ae7e 	beq.w	801ee3c <_strtod_l+0x47c>
 801f140:	9912      	ldr	r1, [sp, #72]	; 0x48
 801f142:	463a      	mov	r2, r7
 801f144:	4620      	mov	r0, r4
 801f146:	f002 ffe3 	bl	8022110 <__mdiff>
 801f14a:	4605      	mov	r5, r0
 801f14c:	2800      	cmp	r0, #0
 801f14e:	f43f ae75 	beq.w	801ee3c <_strtod_l+0x47c>
 801f152:	2300      	movs	r3, #0
 801f154:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 801f158:	60c3      	str	r3, [r0, #12]
 801f15a:	4631      	mov	r1, r6
 801f15c:	f002 ffbc 	bl	80220d8 <__mcmp>
 801f160:	2800      	cmp	r0, #0
 801f162:	da7f      	bge.n	801f264 <_strtod_l+0x8a4>
 801f164:	ea5a 0a08 	orrs.w	sl, sl, r8
 801f168:	f040 80a5 	bne.w	801f2b6 <_strtod_l+0x8f6>
 801f16c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801f170:	2b00      	cmp	r3, #0
 801f172:	f040 80a0 	bne.w	801f2b6 <_strtod_l+0x8f6>
 801f176:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801f17a:	0d1b      	lsrs	r3, r3, #20
 801f17c:	051b      	lsls	r3, r3, #20
 801f17e:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801f182:	f240 8098 	bls.w	801f2b6 <_strtod_l+0x8f6>
 801f186:	696b      	ldr	r3, [r5, #20]
 801f188:	b91b      	cbnz	r3, 801f192 <_strtod_l+0x7d2>
 801f18a:	692b      	ldr	r3, [r5, #16]
 801f18c:	2b01      	cmp	r3, #1
 801f18e:	f340 8092 	ble.w	801f2b6 <_strtod_l+0x8f6>
 801f192:	4629      	mov	r1, r5
 801f194:	2201      	movs	r2, #1
 801f196:	4620      	mov	r0, r4
 801f198:	f002 ff32 	bl	8022000 <__lshift>
 801f19c:	4631      	mov	r1, r6
 801f19e:	4605      	mov	r5, r0
 801f1a0:	f002 ff9a 	bl	80220d8 <__mcmp>
 801f1a4:	2800      	cmp	r0, #0
 801f1a6:	f340 8086 	ble.w	801f2b6 <_strtod_l+0x8f6>
 801f1aa:	9905      	ldr	r1, [sp, #20]
 801f1ac:	4a2c      	ldr	r2, [pc, #176]	; (801f260 <_strtod_l+0x8a0>)
 801f1ae:	464b      	mov	r3, r9
 801f1b0:	2900      	cmp	r1, #0
 801f1b2:	f000 809f 	beq.w	801f2f4 <_strtod_l+0x934>
 801f1b6:	ea02 0109 	and.w	r1, r2, r9
 801f1ba:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801f1be:	f300 8099 	bgt.w	801f2f4 <_strtod_l+0x934>
 801f1c2:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801f1c6:	f77f aea8 	ble.w	801ef1a <_strtod_l+0x55a>
 801f1ca:	ed9f 7b21 	vldr	d7, [pc, #132]	; 801f250 <_strtod_l+0x890>
 801f1ce:	ec49 8b16 	vmov	d6, r8, r9
 801f1d2:	4b23      	ldr	r3, [pc, #140]	; (801f260 <_strtod_l+0x8a0>)
 801f1d4:	ee26 7b07 	vmul.f64	d7, d6, d7
 801f1d8:	ee17 2a90 	vmov	r2, s15
 801f1dc:	4013      	ands	r3, r2
 801f1de:	ec59 8b17 	vmov	r8, r9, d7
 801f1e2:	2b00      	cmp	r3, #0
 801f1e4:	f47f ae34 	bne.w	801ee50 <_strtod_l+0x490>
 801f1e8:	2322      	movs	r3, #34	; 0x22
 801f1ea:	6023      	str	r3, [r4, #0]
 801f1ec:	e630      	b.n	801ee50 <_strtod_l+0x490>
 801f1ee:	f04f 31ff 	mov.w	r1, #4294967295
 801f1f2:	fa01 f202 	lsl.w	r2, r1, r2
 801f1f6:	ea02 0808 	and.w	r8, r2, r8
 801f1fa:	e6da      	b.n	801efb2 <_strtod_l+0x5f2>
 801f1fc:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 801f200:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 801f204:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 801f208:	33e2      	adds	r3, #226	; 0xe2
 801f20a:	fa00 f303 	lsl.w	r3, r0, r3
 801f20e:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 801f212:	e73f      	b.n	801f094 <_strtod_l+0x6d4>
 801f214:	2200      	movs	r2, #0
 801f216:	2301      	movs	r3, #1
 801f218:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801f21c:	e73a      	b.n	801f094 <_strtod_l+0x6d4>
 801f21e:	9912      	ldr	r1, [sp, #72]	; 0x48
 801f220:	461a      	mov	r2, r3
 801f222:	4620      	mov	r0, r4
 801f224:	f002 feec 	bl	8022000 <__lshift>
 801f228:	9012      	str	r0, [sp, #72]	; 0x48
 801f22a:	2800      	cmp	r0, #0
 801f22c:	f47f af64 	bne.w	801f0f8 <_strtod_l+0x738>
 801f230:	e604      	b.n	801ee3c <_strtod_l+0x47c>
 801f232:	bf00      	nop
 801f234:	f3af 8000 	nop.w
 801f238:	94a03595 	.word	0x94a03595
 801f23c:	3fcfffff 	.word	0x3fcfffff
 801f240:	94a03595 	.word	0x94a03595
 801f244:	3fdfffff 	.word	0x3fdfffff
 801f248:	35afe535 	.word	0x35afe535
 801f24c:	3fe00000 	.word	0x3fe00000
 801f250:	00000000 	.word	0x00000000
 801f254:	39500000 	.word	0x39500000
 801f258:	08027140 	.word	0x08027140
 801f25c:	fffffc02 	.word	0xfffffc02
 801f260:	7ff00000 	.word	0x7ff00000
 801f264:	46cb      	mov	fp, r9
 801f266:	d15f      	bne.n	801f328 <_strtod_l+0x968>
 801f268:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801f26c:	f1ba 0f00 	cmp.w	sl, #0
 801f270:	d02a      	beq.n	801f2c8 <_strtod_l+0x908>
 801f272:	4aa7      	ldr	r2, [pc, #668]	; (801f510 <_strtod_l+0xb50>)
 801f274:	4293      	cmp	r3, r2
 801f276:	d12b      	bne.n	801f2d0 <_strtod_l+0x910>
 801f278:	9b05      	ldr	r3, [sp, #20]
 801f27a:	4642      	mov	r2, r8
 801f27c:	b1fb      	cbz	r3, 801f2be <_strtod_l+0x8fe>
 801f27e:	4ba5      	ldr	r3, [pc, #660]	; (801f514 <_strtod_l+0xb54>)
 801f280:	ea09 0303 	and.w	r3, r9, r3
 801f284:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801f288:	f04f 31ff 	mov.w	r1, #4294967295
 801f28c:	d81a      	bhi.n	801f2c4 <_strtod_l+0x904>
 801f28e:	0d1b      	lsrs	r3, r3, #20
 801f290:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801f294:	fa01 f303 	lsl.w	r3, r1, r3
 801f298:	429a      	cmp	r2, r3
 801f29a:	d119      	bne.n	801f2d0 <_strtod_l+0x910>
 801f29c:	4b9e      	ldr	r3, [pc, #632]	; (801f518 <_strtod_l+0xb58>)
 801f29e:	459b      	cmp	fp, r3
 801f2a0:	d102      	bne.n	801f2a8 <_strtod_l+0x8e8>
 801f2a2:	3201      	adds	r2, #1
 801f2a4:	f43f adca 	beq.w	801ee3c <_strtod_l+0x47c>
 801f2a8:	4b9a      	ldr	r3, [pc, #616]	; (801f514 <_strtod_l+0xb54>)
 801f2aa:	ea0b 0303 	and.w	r3, fp, r3
 801f2ae:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 801f2b2:	f04f 0800 	mov.w	r8, #0
 801f2b6:	9b05      	ldr	r3, [sp, #20]
 801f2b8:	2b00      	cmp	r3, #0
 801f2ba:	d186      	bne.n	801f1ca <_strtod_l+0x80a>
 801f2bc:	e5c8      	b.n	801ee50 <_strtod_l+0x490>
 801f2be:	f04f 33ff 	mov.w	r3, #4294967295
 801f2c2:	e7e9      	b.n	801f298 <_strtod_l+0x8d8>
 801f2c4:	460b      	mov	r3, r1
 801f2c6:	e7e7      	b.n	801f298 <_strtod_l+0x8d8>
 801f2c8:	ea53 0308 	orrs.w	r3, r3, r8
 801f2cc:	f43f af6d 	beq.w	801f1aa <_strtod_l+0x7ea>
 801f2d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f2d2:	b1cb      	cbz	r3, 801f308 <_strtod_l+0x948>
 801f2d4:	ea13 0f0b 	tst.w	r3, fp
 801f2d8:	d0ed      	beq.n	801f2b6 <_strtod_l+0x8f6>
 801f2da:	9a05      	ldr	r2, [sp, #20]
 801f2dc:	4640      	mov	r0, r8
 801f2de:	4649      	mov	r1, r9
 801f2e0:	f1ba 0f00 	cmp.w	sl, #0
 801f2e4:	d014      	beq.n	801f310 <_strtod_l+0x950>
 801f2e6:	f7ff fb51 	bl	801e98c <sulp>
 801f2ea:	ee38 7b00 	vadd.f64	d7, d8, d0
 801f2ee:	ec59 8b17 	vmov	r8, r9, d7
 801f2f2:	e7e0      	b.n	801f2b6 <_strtod_l+0x8f6>
 801f2f4:	4013      	ands	r3, r2
 801f2f6:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801f2fa:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 801f2fe:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 801f302:	f04f 38ff 	mov.w	r8, #4294967295
 801f306:	e7d6      	b.n	801f2b6 <_strtod_l+0x8f6>
 801f308:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f30a:	ea13 0f08 	tst.w	r3, r8
 801f30e:	e7e3      	b.n	801f2d8 <_strtod_l+0x918>
 801f310:	f7ff fb3c 	bl	801e98c <sulp>
 801f314:	ee38 0b40 	vsub.f64	d0, d8, d0
 801f318:	eeb5 0b40 	vcmp.f64	d0, #0.0
 801f31c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f320:	ec59 8b10 	vmov	r8, r9, d0
 801f324:	d1c7      	bne.n	801f2b6 <_strtod_l+0x8f6>
 801f326:	e5f8      	b.n	801ef1a <_strtod_l+0x55a>
 801f328:	4631      	mov	r1, r6
 801f32a:	4628      	mov	r0, r5
 801f32c:	f003 f844 	bl	80223b8 <__ratio>
 801f330:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 801f334:	eeb4 0bc7 	vcmpe.f64	d0, d7
 801f338:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f33c:	d85f      	bhi.n	801f3fe <_strtod_l+0xa3e>
 801f33e:	f1ba 0f00 	cmp.w	sl, #0
 801f342:	d166      	bne.n	801f412 <_strtod_l+0xa52>
 801f344:	f1b8 0f00 	cmp.w	r8, #0
 801f348:	d14d      	bne.n	801f3e6 <_strtod_l+0xa26>
 801f34a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801f34e:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 801f352:	2b00      	cmp	r3, #0
 801f354:	d162      	bne.n	801f41c <_strtod_l+0xa5c>
 801f356:	eeb4 0bcd 	vcmpe.f64	d0, d13
 801f35a:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 801f35e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f362:	d401      	bmi.n	801f368 <_strtod_l+0x9a8>
 801f364:	ee20 db0d 	vmul.f64	d13, d0, d13
 801f368:	eeb1 cb4d 	vneg.f64	d12, d13
 801f36c:	4869      	ldr	r0, [pc, #420]	; (801f514 <_strtod_l+0xb54>)
 801f36e:	f8df c1b0 	ldr.w	ip, [pc, #432]	; 801f520 <_strtod_l+0xb60>
 801f372:	ea0b 0100 	and.w	r1, fp, r0
 801f376:	4561      	cmp	r1, ip
 801f378:	ec53 2b1c 	vmov	r2, r3, d12
 801f37c:	d17a      	bne.n	801f474 <_strtod_l+0xab4>
 801f37e:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 801f382:	ec49 8b10 	vmov	d0, r8, r9
 801f386:	910a      	str	r1, [sp, #40]	; 0x28
 801f388:	f002 ff4c 	bl	8022224 <__ulp>
 801f38c:	ec49 8b1e 	vmov	d14, r8, r9
 801f390:	4860      	ldr	r0, [pc, #384]	; (801f514 <_strtod_l+0xb54>)
 801f392:	eea0 eb0c 	vfma.f64	d14, d0, d12
 801f396:	ee1e 3a90 	vmov	r3, s29
 801f39a:	4a60      	ldr	r2, [pc, #384]	; (801f51c <_strtod_l+0xb5c>)
 801f39c:	990a      	ldr	r1, [sp, #40]	; 0x28
 801f39e:	4018      	ands	r0, r3
 801f3a0:	4290      	cmp	r0, r2
 801f3a2:	ec59 8b1e 	vmov	r8, r9, d14
 801f3a6:	d93c      	bls.n	801f422 <_strtod_l+0xa62>
 801f3a8:	ee18 2a90 	vmov	r2, s17
 801f3ac:	4b5a      	ldr	r3, [pc, #360]	; (801f518 <_strtod_l+0xb58>)
 801f3ae:	429a      	cmp	r2, r3
 801f3b0:	d104      	bne.n	801f3bc <_strtod_l+0x9fc>
 801f3b2:	ee18 3a10 	vmov	r3, s16
 801f3b6:	3301      	adds	r3, #1
 801f3b8:	f43f ad40 	beq.w	801ee3c <_strtod_l+0x47c>
 801f3bc:	f8df 9158 	ldr.w	r9, [pc, #344]	; 801f518 <_strtod_l+0xb58>
 801f3c0:	f04f 38ff 	mov.w	r8, #4294967295
 801f3c4:	9912      	ldr	r1, [sp, #72]	; 0x48
 801f3c6:	4620      	mov	r0, r4
 801f3c8:	f002 fc00 	bl	8021bcc <_Bfree>
 801f3cc:	4639      	mov	r1, r7
 801f3ce:	4620      	mov	r0, r4
 801f3d0:	f002 fbfc 	bl	8021bcc <_Bfree>
 801f3d4:	4631      	mov	r1, r6
 801f3d6:	4620      	mov	r0, r4
 801f3d8:	f002 fbf8 	bl	8021bcc <_Bfree>
 801f3dc:	4629      	mov	r1, r5
 801f3de:	4620      	mov	r0, r4
 801f3e0:	f002 fbf4 	bl	8021bcc <_Bfree>
 801f3e4:	e609      	b.n	801effa <_strtod_l+0x63a>
 801f3e6:	f1b8 0f01 	cmp.w	r8, #1
 801f3ea:	d103      	bne.n	801f3f4 <_strtod_l+0xa34>
 801f3ec:	f1b9 0f00 	cmp.w	r9, #0
 801f3f0:	f43f ad93 	beq.w	801ef1a <_strtod_l+0x55a>
 801f3f4:	eebf cb00 	vmov.f64	d12, #240	; 0xbf800000 -1.0
 801f3f8:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 801f3fc:	e7b6      	b.n	801f36c <_strtod_l+0x9ac>
 801f3fe:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 801f402:	ee20 db0d 	vmul.f64	d13, d0, d13
 801f406:	f1ba 0f00 	cmp.w	sl, #0
 801f40a:	d0ad      	beq.n	801f368 <_strtod_l+0x9a8>
 801f40c:	eeb0 cb4d 	vmov.f64	d12, d13
 801f410:	e7ac      	b.n	801f36c <_strtod_l+0x9ac>
 801f412:	eeb7 cb00 	vmov.f64	d12, #112	; 0x3f800000  1.0
 801f416:	eeb0 db4c 	vmov.f64	d13, d12
 801f41a:	e7a7      	b.n	801f36c <_strtod_l+0x9ac>
 801f41c:	eebf cb00 	vmov.f64	d12, #240	; 0xbf800000 -1.0
 801f420:	e7a4      	b.n	801f36c <_strtod_l+0x9ac>
 801f422:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 801f426:	9b05      	ldr	r3, [sp, #20]
 801f428:	46cb      	mov	fp, r9
 801f42a:	2b00      	cmp	r3, #0
 801f42c:	d1ca      	bne.n	801f3c4 <_strtod_l+0xa04>
 801f42e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801f432:	0d1b      	lsrs	r3, r3, #20
 801f434:	051b      	lsls	r3, r3, #20
 801f436:	4299      	cmp	r1, r3
 801f438:	d1c4      	bne.n	801f3c4 <_strtod_l+0xa04>
 801f43a:	ec51 0b1d 	vmov	r0, r1, d13
 801f43e:	f7e1 f98b 	bl	8000758 <__aeabi_d2lz>
 801f442:	f7e1 f943 	bl	80006cc <__aeabi_l2d>
 801f446:	f3c9 0b13 	ubfx	fp, r9, #0, #20
 801f44a:	ec41 0b17 	vmov	d7, r0, r1
 801f44e:	ea4b 0b08 	orr.w	fp, fp, r8
 801f452:	ea5b 0b0a 	orrs.w	fp, fp, sl
 801f456:	ee3d db47 	vsub.f64	d13, d13, d7
 801f45a:	d03c      	beq.n	801f4d6 <_strtod_l+0xb16>
 801f45c:	eeb4 dbca 	vcmpe.f64	d13, d10
 801f460:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f464:	f53f acf4 	bmi.w	801ee50 <_strtod_l+0x490>
 801f468:	eeb4 dbcb 	vcmpe.f64	d13, d11
 801f46c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f470:	dda8      	ble.n	801f3c4 <_strtod_l+0xa04>
 801f472:	e4ed      	b.n	801ee50 <_strtod_l+0x490>
 801f474:	9805      	ldr	r0, [sp, #20]
 801f476:	b1f0      	cbz	r0, 801f4b6 <_strtod_l+0xaf6>
 801f478:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 801f47c:	d81b      	bhi.n	801f4b6 <_strtod_l+0xaf6>
 801f47e:	ed9f 7b22 	vldr	d7, [pc, #136]	; 801f508 <_strtod_l+0xb48>
 801f482:	eeb4 dbc7 	vcmpe.f64	d13, d7
 801f486:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f48a:	d811      	bhi.n	801f4b0 <_strtod_l+0xaf0>
 801f48c:	eebc dbcd 	vcvt.u32.f64	s26, d13
 801f490:	ee1d 3a10 	vmov	r3, s26
 801f494:	2b01      	cmp	r3, #1
 801f496:	bf38      	it	cc
 801f498:	2301      	movcc	r3, #1
 801f49a:	ee0d 3a10 	vmov	s26, r3
 801f49e:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 801f4a2:	f1ba 0f00 	cmp.w	sl, #0
 801f4a6:	d113      	bne.n	801f4d0 <_strtod_l+0xb10>
 801f4a8:	eeb1 7b4d 	vneg.f64	d7, d13
 801f4ac:	ec53 2b17 	vmov	r2, r3, d7
 801f4b0:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 801f4b4:	1a43      	subs	r3, r0, r1
 801f4b6:	eeb0 0b48 	vmov.f64	d0, d8
 801f4ba:	ec43 2b1c 	vmov	d12, r2, r3
 801f4be:	910a      	str	r1, [sp, #40]	; 0x28
 801f4c0:	f002 feb0 	bl	8022224 <__ulp>
 801f4c4:	990a      	ldr	r1, [sp, #40]	; 0x28
 801f4c6:	eeac 8b00 	vfma.f64	d8, d12, d0
 801f4ca:	ec59 8b18 	vmov	r8, r9, d8
 801f4ce:	e7aa      	b.n	801f426 <_strtod_l+0xa66>
 801f4d0:	eeb0 7b4d 	vmov.f64	d7, d13
 801f4d4:	e7ea      	b.n	801f4ac <_strtod_l+0xaec>
 801f4d6:	eeb4 dbc9 	vcmpe.f64	d13, d9
 801f4da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f4de:	f57f af71 	bpl.w	801f3c4 <_strtod_l+0xa04>
 801f4e2:	e4b5      	b.n	801ee50 <_strtod_l+0x490>
 801f4e4:	2300      	movs	r3, #0
 801f4e6:	9308      	str	r3, [sp, #32]
 801f4e8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801f4ea:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801f4ec:	6013      	str	r3, [r2, #0]
 801f4ee:	f7ff baa6 	b.w	801ea3e <_strtod_l+0x7e>
 801f4f2:	2a65      	cmp	r2, #101	; 0x65
 801f4f4:	f43f aba2 	beq.w	801ec3c <_strtod_l+0x27c>
 801f4f8:	2a45      	cmp	r2, #69	; 0x45
 801f4fa:	f43f ab9f 	beq.w	801ec3c <_strtod_l+0x27c>
 801f4fe:	2101      	movs	r1, #1
 801f500:	f7ff bbd8 	b.w	801ecb4 <_strtod_l+0x2f4>
 801f504:	f3af 8000 	nop.w
 801f508:	ffc00000 	.word	0xffc00000
 801f50c:	41dfffff 	.word	0x41dfffff
 801f510:	000fffff 	.word	0x000fffff
 801f514:	7ff00000 	.word	0x7ff00000
 801f518:	7fefffff 	.word	0x7fefffff
 801f51c:	7c9fffff 	.word	0x7c9fffff
 801f520:	7fe00000 	.word	0x7fe00000

0801f524 <_strtod_r>:
 801f524:	4b01      	ldr	r3, [pc, #4]	; (801f52c <_strtod_r+0x8>)
 801f526:	f7ff ba4b 	b.w	801e9c0 <_strtod_l>
 801f52a:	bf00      	nop
 801f52c:	24000310 	.word	0x24000310

0801f530 <strtod>:
 801f530:	460a      	mov	r2, r1
 801f532:	4601      	mov	r1, r0
 801f534:	4802      	ldr	r0, [pc, #8]	; (801f540 <strtod+0x10>)
 801f536:	4b03      	ldr	r3, [pc, #12]	; (801f544 <strtod+0x14>)
 801f538:	6800      	ldr	r0, [r0, #0]
 801f53a:	f7ff ba41 	b.w	801e9c0 <_strtod_l>
 801f53e:	bf00      	nop
 801f540:	240004c8 	.word	0x240004c8
 801f544:	24000310 	.word	0x24000310

0801f548 <_strtol_l.constprop.0>:
 801f548:	2b01      	cmp	r3, #1
 801f54a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f54e:	d001      	beq.n	801f554 <_strtol_l.constprop.0+0xc>
 801f550:	2b24      	cmp	r3, #36	; 0x24
 801f552:	d906      	bls.n	801f562 <_strtol_l.constprop.0+0x1a>
 801f554:	f001 f880 	bl	8020658 <__errno>
 801f558:	2316      	movs	r3, #22
 801f55a:	6003      	str	r3, [r0, #0]
 801f55c:	2000      	movs	r0, #0
 801f55e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f562:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 801f648 <_strtol_l.constprop.0+0x100>
 801f566:	460d      	mov	r5, r1
 801f568:	462e      	mov	r6, r5
 801f56a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801f56e:	f81c 7004 	ldrb.w	r7, [ip, r4]
 801f572:	f017 0708 	ands.w	r7, r7, #8
 801f576:	d1f7      	bne.n	801f568 <_strtol_l.constprop.0+0x20>
 801f578:	2c2d      	cmp	r4, #45	; 0x2d
 801f57a:	d132      	bne.n	801f5e2 <_strtol_l.constprop.0+0x9a>
 801f57c:	782c      	ldrb	r4, [r5, #0]
 801f57e:	2701      	movs	r7, #1
 801f580:	1cb5      	adds	r5, r6, #2
 801f582:	2b00      	cmp	r3, #0
 801f584:	d05b      	beq.n	801f63e <_strtol_l.constprop.0+0xf6>
 801f586:	2b10      	cmp	r3, #16
 801f588:	d109      	bne.n	801f59e <_strtol_l.constprop.0+0x56>
 801f58a:	2c30      	cmp	r4, #48	; 0x30
 801f58c:	d107      	bne.n	801f59e <_strtol_l.constprop.0+0x56>
 801f58e:	782c      	ldrb	r4, [r5, #0]
 801f590:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801f594:	2c58      	cmp	r4, #88	; 0x58
 801f596:	d14d      	bne.n	801f634 <_strtol_l.constprop.0+0xec>
 801f598:	786c      	ldrb	r4, [r5, #1]
 801f59a:	2310      	movs	r3, #16
 801f59c:	3502      	adds	r5, #2
 801f59e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801f5a2:	f108 38ff 	add.w	r8, r8, #4294967295
 801f5a6:	f04f 0e00 	mov.w	lr, #0
 801f5aa:	fbb8 f9f3 	udiv	r9, r8, r3
 801f5ae:	4676      	mov	r6, lr
 801f5b0:	fb03 8a19 	mls	sl, r3, r9, r8
 801f5b4:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801f5b8:	f1bc 0f09 	cmp.w	ip, #9
 801f5bc:	d816      	bhi.n	801f5ec <_strtol_l.constprop.0+0xa4>
 801f5be:	4664      	mov	r4, ip
 801f5c0:	42a3      	cmp	r3, r4
 801f5c2:	dd24      	ble.n	801f60e <_strtol_l.constprop.0+0xc6>
 801f5c4:	f1be 3fff 	cmp.w	lr, #4294967295
 801f5c8:	d008      	beq.n	801f5dc <_strtol_l.constprop.0+0x94>
 801f5ca:	45b1      	cmp	r9, r6
 801f5cc:	d31c      	bcc.n	801f608 <_strtol_l.constprop.0+0xc0>
 801f5ce:	d101      	bne.n	801f5d4 <_strtol_l.constprop.0+0x8c>
 801f5d0:	45a2      	cmp	sl, r4
 801f5d2:	db19      	blt.n	801f608 <_strtol_l.constprop.0+0xc0>
 801f5d4:	fb06 4603 	mla	r6, r6, r3, r4
 801f5d8:	f04f 0e01 	mov.w	lr, #1
 801f5dc:	f815 4b01 	ldrb.w	r4, [r5], #1
 801f5e0:	e7e8      	b.n	801f5b4 <_strtol_l.constprop.0+0x6c>
 801f5e2:	2c2b      	cmp	r4, #43	; 0x2b
 801f5e4:	bf04      	itt	eq
 801f5e6:	782c      	ldrbeq	r4, [r5, #0]
 801f5e8:	1cb5      	addeq	r5, r6, #2
 801f5ea:	e7ca      	b.n	801f582 <_strtol_l.constprop.0+0x3a>
 801f5ec:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 801f5f0:	f1bc 0f19 	cmp.w	ip, #25
 801f5f4:	d801      	bhi.n	801f5fa <_strtol_l.constprop.0+0xb2>
 801f5f6:	3c37      	subs	r4, #55	; 0x37
 801f5f8:	e7e2      	b.n	801f5c0 <_strtol_l.constprop.0+0x78>
 801f5fa:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801f5fe:	f1bc 0f19 	cmp.w	ip, #25
 801f602:	d804      	bhi.n	801f60e <_strtol_l.constprop.0+0xc6>
 801f604:	3c57      	subs	r4, #87	; 0x57
 801f606:	e7db      	b.n	801f5c0 <_strtol_l.constprop.0+0x78>
 801f608:	f04f 3eff 	mov.w	lr, #4294967295
 801f60c:	e7e6      	b.n	801f5dc <_strtol_l.constprop.0+0x94>
 801f60e:	f1be 3fff 	cmp.w	lr, #4294967295
 801f612:	d105      	bne.n	801f620 <_strtol_l.constprop.0+0xd8>
 801f614:	2322      	movs	r3, #34	; 0x22
 801f616:	6003      	str	r3, [r0, #0]
 801f618:	4646      	mov	r6, r8
 801f61a:	b942      	cbnz	r2, 801f62e <_strtol_l.constprop.0+0xe6>
 801f61c:	4630      	mov	r0, r6
 801f61e:	e79e      	b.n	801f55e <_strtol_l.constprop.0+0x16>
 801f620:	b107      	cbz	r7, 801f624 <_strtol_l.constprop.0+0xdc>
 801f622:	4276      	negs	r6, r6
 801f624:	2a00      	cmp	r2, #0
 801f626:	d0f9      	beq.n	801f61c <_strtol_l.constprop.0+0xd4>
 801f628:	f1be 0f00 	cmp.w	lr, #0
 801f62c:	d000      	beq.n	801f630 <_strtol_l.constprop.0+0xe8>
 801f62e:	1e69      	subs	r1, r5, #1
 801f630:	6011      	str	r1, [r2, #0]
 801f632:	e7f3      	b.n	801f61c <_strtol_l.constprop.0+0xd4>
 801f634:	2430      	movs	r4, #48	; 0x30
 801f636:	2b00      	cmp	r3, #0
 801f638:	d1b1      	bne.n	801f59e <_strtol_l.constprop.0+0x56>
 801f63a:	2308      	movs	r3, #8
 801f63c:	e7af      	b.n	801f59e <_strtol_l.constprop.0+0x56>
 801f63e:	2c30      	cmp	r4, #48	; 0x30
 801f640:	d0a5      	beq.n	801f58e <_strtol_l.constprop.0+0x46>
 801f642:	230a      	movs	r3, #10
 801f644:	e7ab      	b.n	801f59e <_strtol_l.constprop.0+0x56>
 801f646:	bf00      	nop
 801f648:	08027169 	.word	0x08027169

0801f64c <_strtol_r>:
 801f64c:	f7ff bf7c 	b.w	801f548 <_strtol_l.constprop.0>

0801f650 <__cvt>:
 801f650:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f652:	ed2d 8b02 	vpush	{d8}
 801f656:	eeb0 8b40 	vmov.f64	d8, d0
 801f65a:	b085      	sub	sp, #20
 801f65c:	4617      	mov	r7, r2
 801f65e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801f660:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801f662:	ee18 2a90 	vmov	r2, s17
 801f666:	f025 0520 	bic.w	r5, r5, #32
 801f66a:	2a00      	cmp	r2, #0
 801f66c:	bfb6      	itet	lt
 801f66e:	222d      	movlt	r2, #45	; 0x2d
 801f670:	2200      	movge	r2, #0
 801f672:	eeb1 8b40 	vneglt.f64	d8, d0
 801f676:	2d46      	cmp	r5, #70	; 0x46
 801f678:	460c      	mov	r4, r1
 801f67a:	701a      	strb	r2, [r3, #0]
 801f67c:	d004      	beq.n	801f688 <__cvt+0x38>
 801f67e:	2d45      	cmp	r5, #69	; 0x45
 801f680:	d100      	bne.n	801f684 <__cvt+0x34>
 801f682:	3401      	adds	r4, #1
 801f684:	2102      	movs	r1, #2
 801f686:	e000      	b.n	801f68a <__cvt+0x3a>
 801f688:	2103      	movs	r1, #3
 801f68a:	ab03      	add	r3, sp, #12
 801f68c:	9301      	str	r3, [sp, #4]
 801f68e:	ab02      	add	r3, sp, #8
 801f690:	9300      	str	r3, [sp, #0]
 801f692:	4622      	mov	r2, r4
 801f694:	4633      	mov	r3, r6
 801f696:	eeb0 0b48 	vmov.f64	d0, d8
 801f69a:	f001 f8cd 	bl	8020838 <_dtoa_r>
 801f69e:	2d47      	cmp	r5, #71	; 0x47
 801f6a0:	d101      	bne.n	801f6a6 <__cvt+0x56>
 801f6a2:	07fb      	lsls	r3, r7, #31
 801f6a4:	d51a      	bpl.n	801f6dc <__cvt+0x8c>
 801f6a6:	2d46      	cmp	r5, #70	; 0x46
 801f6a8:	eb00 0204 	add.w	r2, r0, r4
 801f6ac:	d10c      	bne.n	801f6c8 <__cvt+0x78>
 801f6ae:	7803      	ldrb	r3, [r0, #0]
 801f6b0:	2b30      	cmp	r3, #48	; 0x30
 801f6b2:	d107      	bne.n	801f6c4 <__cvt+0x74>
 801f6b4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801f6b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f6bc:	bf1c      	itt	ne
 801f6be:	f1c4 0401 	rsbne	r4, r4, #1
 801f6c2:	6034      	strne	r4, [r6, #0]
 801f6c4:	6833      	ldr	r3, [r6, #0]
 801f6c6:	441a      	add	r2, r3
 801f6c8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801f6cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f6d0:	bf08      	it	eq
 801f6d2:	9203      	streq	r2, [sp, #12]
 801f6d4:	2130      	movs	r1, #48	; 0x30
 801f6d6:	9b03      	ldr	r3, [sp, #12]
 801f6d8:	4293      	cmp	r3, r2
 801f6da:	d307      	bcc.n	801f6ec <__cvt+0x9c>
 801f6dc:	9b03      	ldr	r3, [sp, #12]
 801f6de:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801f6e0:	1a1b      	subs	r3, r3, r0
 801f6e2:	6013      	str	r3, [r2, #0]
 801f6e4:	b005      	add	sp, #20
 801f6e6:	ecbd 8b02 	vpop	{d8}
 801f6ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f6ec:	1c5c      	adds	r4, r3, #1
 801f6ee:	9403      	str	r4, [sp, #12]
 801f6f0:	7019      	strb	r1, [r3, #0]
 801f6f2:	e7f0      	b.n	801f6d6 <__cvt+0x86>

0801f6f4 <__exponent>:
 801f6f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801f6f6:	4603      	mov	r3, r0
 801f6f8:	2900      	cmp	r1, #0
 801f6fa:	bfb8      	it	lt
 801f6fc:	4249      	neglt	r1, r1
 801f6fe:	f803 2b02 	strb.w	r2, [r3], #2
 801f702:	bfb4      	ite	lt
 801f704:	222d      	movlt	r2, #45	; 0x2d
 801f706:	222b      	movge	r2, #43	; 0x2b
 801f708:	2909      	cmp	r1, #9
 801f70a:	7042      	strb	r2, [r0, #1]
 801f70c:	dd2a      	ble.n	801f764 <__exponent+0x70>
 801f70e:	f10d 0207 	add.w	r2, sp, #7
 801f712:	4617      	mov	r7, r2
 801f714:	260a      	movs	r6, #10
 801f716:	4694      	mov	ip, r2
 801f718:	fb91 f5f6 	sdiv	r5, r1, r6
 801f71c:	fb06 1415 	mls	r4, r6, r5, r1
 801f720:	3430      	adds	r4, #48	; 0x30
 801f722:	f80c 4c01 	strb.w	r4, [ip, #-1]
 801f726:	460c      	mov	r4, r1
 801f728:	2c63      	cmp	r4, #99	; 0x63
 801f72a:	f102 32ff 	add.w	r2, r2, #4294967295
 801f72e:	4629      	mov	r1, r5
 801f730:	dcf1      	bgt.n	801f716 <__exponent+0x22>
 801f732:	3130      	adds	r1, #48	; 0x30
 801f734:	f1ac 0402 	sub.w	r4, ip, #2
 801f738:	f802 1c01 	strb.w	r1, [r2, #-1]
 801f73c:	1c41      	adds	r1, r0, #1
 801f73e:	4622      	mov	r2, r4
 801f740:	42ba      	cmp	r2, r7
 801f742:	d30a      	bcc.n	801f75a <__exponent+0x66>
 801f744:	f10d 0209 	add.w	r2, sp, #9
 801f748:	eba2 020c 	sub.w	r2, r2, ip
 801f74c:	42bc      	cmp	r4, r7
 801f74e:	bf88      	it	hi
 801f750:	2200      	movhi	r2, #0
 801f752:	4413      	add	r3, r2
 801f754:	1a18      	subs	r0, r3, r0
 801f756:	b003      	add	sp, #12
 801f758:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f75a:	f812 5b01 	ldrb.w	r5, [r2], #1
 801f75e:	f801 5f01 	strb.w	r5, [r1, #1]!
 801f762:	e7ed      	b.n	801f740 <__exponent+0x4c>
 801f764:	2330      	movs	r3, #48	; 0x30
 801f766:	3130      	adds	r1, #48	; 0x30
 801f768:	7083      	strb	r3, [r0, #2]
 801f76a:	70c1      	strb	r1, [r0, #3]
 801f76c:	1d03      	adds	r3, r0, #4
 801f76e:	e7f1      	b.n	801f754 <__exponent+0x60>

0801f770 <_printf_float>:
 801f770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f774:	b08b      	sub	sp, #44	; 0x2c
 801f776:	460c      	mov	r4, r1
 801f778:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 801f77c:	4616      	mov	r6, r2
 801f77e:	461f      	mov	r7, r3
 801f780:	4605      	mov	r5, r0
 801f782:	f000 ff1f 	bl	80205c4 <_localeconv_r>
 801f786:	f8d0 b000 	ldr.w	fp, [r0]
 801f78a:	4658      	mov	r0, fp
 801f78c:	f7e0 fe08 	bl	80003a0 <strlen>
 801f790:	2300      	movs	r3, #0
 801f792:	9308      	str	r3, [sp, #32]
 801f794:	f8d8 3000 	ldr.w	r3, [r8]
 801f798:	f894 9018 	ldrb.w	r9, [r4, #24]
 801f79c:	6822      	ldr	r2, [r4, #0]
 801f79e:	3307      	adds	r3, #7
 801f7a0:	f023 0307 	bic.w	r3, r3, #7
 801f7a4:	f103 0108 	add.w	r1, r3, #8
 801f7a8:	f8c8 1000 	str.w	r1, [r8]
 801f7ac:	ed93 0b00 	vldr	d0, [r3]
 801f7b0:	ed9f 6b97 	vldr	d6, [pc, #604]	; 801fa10 <_printf_float+0x2a0>
 801f7b4:	eeb0 7bc0 	vabs.f64	d7, d0
 801f7b8:	eeb4 7b46 	vcmp.f64	d7, d6
 801f7bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f7c0:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 801f7c4:	4682      	mov	sl, r0
 801f7c6:	dd24      	ble.n	801f812 <_printf_float+0xa2>
 801f7c8:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801f7cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f7d0:	d502      	bpl.n	801f7d8 <_printf_float+0x68>
 801f7d2:	232d      	movs	r3, #45	; 0x2d
 801f7d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801f7d8:	498f      	ldr	r1, [pc, #572]	; (801fa18 <_printf_float+0x2a8>)
 801f7da:	4b90      	ldr	r3, [pc, #576]	; (801fa1c <_printf_float+0x2ac>)
 801f7dc:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 801f7e0:	bf94      	ite	ls
 801f7e2:	4688      	movls	r8, r1
 801f7e4:	4698      	movhi	r8, r3
 801f7e6:	2303      	movs	r3, #3
 801f7e8:	6123      	str	r3, [r4, #16]
 801f7ea:	f022 0204 	bic.w	r2, r2, #4
 801f7ee:	2300      	movs	r3, #0
 801f7f0:	6022      	str	r2, [r4, #0]
 801f7f2:	9304      	str	r3, [sp, #16]
 801f7f4:	9700      	str	r7, [sp, #0]
 801f7f6:	4633      	mov	r3, r6
 801f7f8:	aa09      	add	r2, sp, #36	; 0x24
 801f7fa:	4621      	mov	r1, r4
 801f7fc:	4628      	mov	r0, r5
 801f7fe:	f000 f9d1 	bl	801fba4 <_printf_common>
 801f802:	3001      	adds	r0, #1
 801f804:	f040 808a 	bne.w	801f91c <_printf_float+0x1ac>
 801f808:	f04f 30ff 	mov.w	r0, #4294967295
 801f80c:	b00b      	add	sp, #44	; 0x2c
 801f80e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f812:	eeb4 0b40 	vcmp.f64	d0, d0
 801f816:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f81a:	d709      	bvc.n	801f830 <_printf_float+0xc0>
 801f81c:	ee10 3a90 	vmov	r3, s1
 801f820:	2b00      	cmp	r3, #0
 801f822:	bfbc      	itt	lt
 801f824:	232d      	movlt	r3, #45	; 0x2d
 801f826:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801f82a:	497d      	ldr	r1, [pc, #500]	; (801fa20 <_printf_float+0x2b0>)
 801f82c:	4b7d      	ldr	r3, [pc, #500]	; (801fa24 <_printf_float+0x2b4>)
 801f82e:	e7d5      	b.n	801f7dc <_printf_float+0x6c>
 801f830:	6863      	ldr	r3, [r4, #4]
 801f832:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 801f836:	9104      	str	r1, [sp, #16]
 801f838:	1c59      	adds	r1, r3, #1
 801f83a:	d13c      	bne.n	801f8b6 <_printf_float+0x146>
 801f83c:	2306      	movs	r3, #6
 801f83e:	6063      	str	r3, [r4, #4]
 801f840:	2300      	movs	r3, #0
 801f842:	9303      	str	r3, [sp, #12]
 801f844:	ab08      	add	r3, sp, #32
 801f846:	e9cd 9301 	strd	r9, r3, [sp, #4]
 801f84a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801f84e:	ab07      	add	r3, sp, #28
 801f850:	6861      	ldr	r1, [r4, #4]
 801f852:	9300      	str	r3, [sp, #0]
 801f854:	6022      	str	r2, [r4, #0]
 801f856:	f10d 031b 	add.w	r3, sp, #27
 801f85a:	4628      	mov	r0, r5
 801f85c:	f7ff fef8 	bl	801f650 <__cvt>
 801f860:	9b04      	ldr	r3, [sp, #16]
 801f862:	9907      	ldr	r1, [sp, #28]
 801f864:	2b47      	cmp	r3, #71	; 0x47
 801f866:	4680      	mov	r8, r0
 801f868:	d108      	bne.n	801f87c <_printf_float+0x10c>
 801f86a:	1cc8      	adds	r0, r1, #3
 801f86c:	db02      	blt.n	801f874 <_printf_float+0x104>
 801f86e:	6863      	ldr	r3, [r4, #4]
 801f870:	4299      	cmp	r1, r3
 801f872:	dd41      	ble.n	801f8f8 <_printf_float+0x188>
 801f874:	f1a9 0902 	sub.w	r9, r9, #2
 801f878:	fa5f f989 	uxtb.w	r9, r9
 801f87c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801f880:	d820      	bhi.n	801f8c4 <_printf_float+0x154>
 801f882:	3901      	subs	r1, #1
 801f884:	464a      	mov	r2, r9
 801f886:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801f88a:	9107      	str	r1, [sp, #28]
 801f88c:	f7ff ff32 	bl	801f6f4 <__exponent>
 801f890:	9a08      	ldr	r2, [sp, #32]
 801f892:	9004      	str	r0, [sp, #16]
 801f894:	1813      	adds	r3, r2, r0
 801f896:	2a01      	cmp	r2, #1
 801f898:	6123      	str	r3, [r4, #16]
 801f89a:	dc02      	bgt.n	801f8a2 <_printf_float+0x132>
 801f89c:	6822      	ldr	r2, [r4, #0]
 801f89e:	07d2      	lsls	r2, r2, #31
 801f8a0:	d501      	bpl.n	801f8a6 <_printf_float+0x136>
 801f8a2:	3301      	adds	r3, #1
 801f8a4:	6123      	str	r3, [r4, #16]
 801f8a6:	f89d 301b 	ldrb.w	r3, [sp, #27]
 801f8aa:	2b00      	cmp	r3, #0
 801f8ac:	d0a2      	beq.n	801f7f4 <_printf_float+0x84>
 801f8ae:	232d      	movs	r3, #45	; 0x2d
 801f8b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801f8b4:	e79e      	b.n	801f7f4 <_printf_float+0x84>
 801f8b6:	9904      	ldr	r1, [sp, #16]
 801f8b8:	2947      	cmp	r1, #71	; 0x47
 801f8ba:	d1c1      	bne.n	801f840 <_printf_float+0xd0>
 801f8bc:	2b00      	cmp	r3, #0
 801f8be:	d1bf      	bne.n	801f840 <_printf_float+0xd0>
 801f8c0:	2301      	movs	r3, #1
 801f8c2:	e7bc      	b.n	801f83e <_printf_float+0xce>
 801f8c4:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 801f8c8:	d118      	bne.n	801f8fc <_printf_float+0x18c>
 801f8ca:	2900      	cmp	r1, #0
 801f8cc:	6863      	ldr	r3, [r4, #4]
 801f8ce:	dd0b      	ble.n	801f8e8 <_printf_float+0x178>
 801f8d0:	6121      	str	r1, [r4, #16]
 801f8d2:	b913      	cbnz	r3, 801f8da <_printf_float+0x16a>
 801f8d4:	6822      	ldr	r2, [r4, #0]
 801f8d6:	07d0      	lsls	r0, r2, #31
 801f8d8:	d502      	bpl.n	801f8e0 <_printf_float+0x170>
 801f8da:	3301      	adds	r3, #1
 801f8dc:	440b      	add	r3, r1
 801f8de:	6123      	str	r3, [r4, #16]
 801f8e0:	2300      	movs	r3, #0
 801f8e2:	65a1      	str	r1, [r4, #88]	; 0x58
 801f8e4:	9304      	str	r3, [sp, #16]
 801f8e6:	e7de      	b.n	801f8a6 <_printf_float+0x136>
 801f8e8:	b913      	cbnz	r3, 801f8f0 <_printf_float+0x180>
 801f8ea:	6822      	ldr	r2, [r4, #0]
 801f8ec:	07d2      	lsls	r2, r2, #31
 801f8ee:	d501      	bpl.n	801f8f4 <_printf_float+0x184>
 801f8f0:	3302      	adds	r3, #2
 801f8f2:	e7f4      	b.n	801f8de <_printf_float+0x16e>
 801f8f4:	2301      	movs	r3, #1
 801f8f6:	e7f2      	b.n	801f8de <_printf_float+0x16e>
 801f8f8:	f04f 0967 	mov.w	r9, #103	; 0x67
 801f8fc:	9b08      	ldr	r3, [sp, #32]
 801f8fe:	4299      	cmp	r1, r3
 801f900:	db05      	blt.n	801f90e <_printf_float+0x19e>
 801f902:	6823      	ldr	r3, [r4, #0]
 801f904:	6121      	str	r1, [r4, #16]
 801f906:	07d8      	lsls	r0, r3, #31
 801f908:	d5ea      	bpl.n	801f8e0 <_printf_float+0x170>
 801f90a:	1c4b      	adds	r3, r1, #1
 801f90c:	e7e7      	b.n	801f8de <_printf_float+0x16e>
 801f90e:	2900      	cmp	r1, #0
 801f910:	bfd4      	ite	le
 801f912:	f1c1 0202 	rsble	r2, r1, #2
 801f916:	2201      	movgt	r2, #1
 801f918:	4413      	add	r3, r2
 801f91a:	e7e0      	b.n	801f8de <_printf_float+0x16e>
 801f91c:	6823      	ldr	r3, [r4, #0]
 801f91e:	055a      	lsls	r2, r3, #21
 801f920:	d407      	bmi.n	801f932 <_printf_float+0x1c2>
 801f922:	6923      	ldr	r3, [r4, #16]
 801f924:	4642      	mov	r2, r8
 801f926:	4631      	mov	r1, r6
 801f928:	4628      	mov	r0, r5
 801f92a:	47b8      	blx	r7
 801f92c:	3001      	adds	r0, #1
 801f92e:	d12a      	bne.n	801f986 <_printf_float+0x216>
 801f930:	e76a      	b.n	801f808 <_printf_float+0x98>
 801f932:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801f936:	f240 80e0 	bls.w	801fafa <_printf_float+0x38a>
 801f93a:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 801f93e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801f942:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f946:	d133      	bne.n	801f9b0 <_printf_float+0x240>
 801f948:	4a37      	ldr	r2, [pc, #220]	; (801fa28 <_printf_float+0x2b8>)
 801f94a:	2301      	movs	r3, #1
 801f94c:	4631      	mov	r1, r6
 801f94e:	4628      	mov	r0, r5
 801f950:	47b8      	blx	r7
 801f952:	3001      	adds	r0, #1
 801f954:	f43f af58 	beq.w	801f808 <_printf_float+0x98>
 801f958:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801f95c:	429a      	cmp	r2, r3
 801f95e:	db02      	blt.n	801f966 <_printf_float+0x1f6>
 801f960:	6823      	ldr	r3, [r4, #0]
 801f962:	07d8      	lsls	r0, r3, #31
 801f964:	d50f      	bpl.n	801f986 <_printf_float+0x216>
 801f966:	4653      	mov	r3, sl
 801f968:	465a      	mov	r2, fp
 801f96a:	4631      	mov	r1, r6
 801f96c:	4628      	mov	r0, r5
 801f96e:	47b8      	blx	r7
 801f970:	3001      	adds	r0, #1
 801f972:	f43f af49 	beq.w	801f808 <_printf_float+0x98>
 801f976:	f04f 0800 	mov.w	r8, #0
 801f97a:	f104 091a 	add.w	r9, r4, #26
 801f97e:	9b08      	ldr	r3, [sp, #32]
 801f980:	3b01      	subs	r3, #1
 801f982:	4543      	cmp	r3, r8
 801f984:	dc09      	bgt.n	801f99a <_printf_float+0x22a>
 801f986:	6823      	ldr	r3, [r4, #0]
 801f988:	079b      	lsls	r3, r3, #30
 801f98a:	f100 8106 	bmi.w	801fb9a <_printf_float+0x42a>
 801f98e:	68e0      	ldr	r0, [r4, #12]
 801f990:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f992:	4298      	cmp	r0, r3
 801f994:	bfb8      	it	lt
 801f996:	4618      	movlt	r0, r3
 801f998:	e738      	b.n	801f80c <_printf_float+0x9c>
 801f99a:	2301      	movs	r3, #1
 801f99c:	464a      	mov	r2, r9
 801f99e:	4631      	mov	r1, r6
 801f9a0:	4628      	mov	r0, r5
 801f9a2:	47b8      	blx	r7
 801f9a4:	3001      	adds	r0, #1
 801f9a6:	f43f af2f 	beq.w	801f808 <_printf_float+0x98>
 801f9aa:	f108 0801 	add.w	r8, r8, #1
 801f9ae:	e7e6      	b.n	801f97e <_printf_float+0x20e>
 801f9b0:	9b07      	ldr	r3, [sp, #28]
 801f9b2:	2b00      	cmp	r3, #0
 801f9b4:	dc3a      	bgt.n	801fa2c <_printf_float+0x2bc>
 801f9b6:	4a1c      	ldr	r2, [pc, #112]	; (801fa28 <_printf_float+0x2b8>)
 801f9b8:	2301      	movs	r3, #1
 801f9ba:	4631      	mov	r1, r6
 801f9bc:	4628      	mov	r0, r5
 801f9be:	47b8      	blx	r7
 801f9c0:	3001      	adds	r0, #1
 801f9c2:	f43f af21 	beq.w	801f808 <_printf_float+0x98>
 801f9c6:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 801f9ca:	4313      	orrs	r3, r2
 801f9cc:	d102      	bne.n	801f9d4 <_printf_float+0x264>
 801f9ce:	6823      	ldr	r3, [r4, #0]
 801f9d0:	07d9      	lsls	r1, r3, #31
 801f9d2:	d5d8      	bpl.n	801f986 <_printf_float+0x216>
 801f9d4:	4653      	mov	r3, sl
 801f9d6:	465a      	mov	r2, fp
 801f9d8:	4631      	mov	r1, r6
 801f9da:	4628      	mov	r0, r5
 801f9dc:	47b8      	blx	r7
 801f9de:	3001      	adds	r0, #1
 801f9e0:	f43f af12 	beq.w	801f808 <_printf_float+0x98>
 801f9e4:	f04f 0900 	mov.w	r9, #0
 801f9e8:	f104 0a1a 	add.w	sl, r4, #26
 801f9ec:	9b07      	ldr	r3, [sp, #28]
 801f9ee:	425b      	negs	r3, r3
 801f9f0:	454b      	cmp	r3, r9
 801f9f2:	dc01      	bgt.n	801f9f8 <_printf_float+0x288>
 801f9f4:	9b08      	ldr	r3, [sp, #32]
 801f9f6:	e795      	b.n	801f924 <_printf_float+0x1b4>
 801f9f8:	2301      	movs	r3, #1
 801f9fa:	4652      	mov	r2, sl
 801f9fc:	4631      	mov	r1, r6
 801f9fe:	4628      	mov	r0, r5
 801fa00:	47b8      	blx	r7
 801fa02:	3001      	adds	r0, #1
 801fa04:	f43f af00 	beq.w	801f808 <_printf_float+0x98>
 801fa08:	f109 0901 	add.w	r9, r9, #1
 801fa0c:	e7ee      	b.n	801f9ec <_printf_float+0x27c>
 801fa0e:	bf00      	nop
 801fa10:	ffffffff 	.word	0xffffffff
 801fa14:	7fefffff 	.word	0x7fefffff
 801fa18:	08027269 	.word	0x08027269
 801fa1c:	0802726d 	.word	0x0802726d
 801fa20:	08027271 	.word	0x08027271
 801fa24:	08027275 	.word	0x08027275
 801fa28:	08027279 	.word	0x08027279
 801fa2c:	9a08      	ldr	r2, [sp, #32]
 801fa2e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801fa30:	429a      	cmp	r2, r3
 801fa32:	bfa8      	it	ge
 801fa34:	461a      	movge	r2, r3
 801fa36:	2a00      	cmp	r2, #0
 801fa38:	4691      	mov	r9, r2
 801fa3a:	dc38      	bgt.n	801faae <_printf_float+0x33e>
 801fa3c:	2300      	movs	r3, #0
 801fa3e:	9305      	str	r3, [sp, #20]
 801fa40:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801fa44:	f104 021a 	add.w	r2, r4, #26
 801fa48:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801fa4a:	9905      	ldr	r1, [sp, #20]
 801fa4c:	9304      	str	r3, [sp, #16]
 801fa4e:	eba3 0309 	sub.w	r3, r3, r9
 801fa52:	428b      	cmp	r3, r1
 801fa54:	dc33      	bgt.n	801fabe <_printf_float+0x34e>
 801fa56:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801fa5a:	429a      	cmp	r2, r3
 801fa5c:	db3c      	blt.n	801fad8 <_printf_float+0x368>
 801fa5e:	6823      	ldr	r3, [r4, #0]
 801fa60:	07da      	lsls	r2, r3, #31
 801fa62:	d439      	bmi.n	801fad8 <_printf_float+0x368>
 801fa64:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 801fa68:	eba2 0903 	sub.w	r9, r2, r3
 801fa6c:	9b04      	ldr	r3, [sp, #16]
 801fa6e:	1ad2      	subs	r2, r2, r3
 801fa70:	4591      	cmp	r9, r2
 801fa72:	bfa8      	it	ge
 801fa74:	4691      	movge	r9, r2
 801fa76:	f1b9 0f00 	cmp.w	r9, #0
 801fa7a:	dc35      	bgt.n	801fae8 <_printf_float+0x378>
 801fa7c:	f04f 0800 	mov.w	r8, #0
 801fa80:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801fa84:	f104 0a1a 	add.w	sl, r4, #26
 801fa88:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801fa8c:	1a9b      	subs	r3, r3, r2
 801fa8e:	eba3 0309 	sub.w	r3, r3, r9
 801fa92:	4543      	cmp	r3, r8
 801fa94:	f77f af77 	ble.w	801f986 <_printf_float+0x216>
 801fa98:	2301      	movs	r3, #1
 801fa9a:	4652      	mov	r2, sl
 801fa9c:	4631      	mov	r1, r6
 801fa9e:	4628      	mov	r0, r5
 801faa0:	47b8      	blx	r7
 801faa2:	3001      	adds	r0, #1
 801faa4:	f43f aeb0 	beq.w	801f808 <_printf_float+0x98>
 801faa8:	f108 0801 	add.w	r8, r8, #1
 801faac:	e7ec      	b.n	801fa88 <_printf_float+0x318>
 801faae:	4613      	mov	r3, r2
 801fab0:	4631      	mov	r1, r6
 801fab2:	4642      	mov	r2, r8
 801fab4:	4628      	mov	r0, r5
 801fab6:	47b8      	blx	r7
 801fab8:	3001      	adds	r0, #1
 801faba:	d1bf      	bne.n	801fa3c <_printf_float+0x2cc>
 801fabc:	e6a4      	b.n	801f808 <_printf_float+0x98>
 801fabe:	2301      	movs	r3, #1
 801fac0:	4631      	mov	r1, r6
 801fac2:	4628      	mov	r0, r5
 801fac4:	9204      	str	r2, [sp, #16]
 801fac6:	47b8      	blx	r7
 801fac8:	3001      	adds	r0, #1
 801faca:	f43f ae9d 	beq.w	801f808 <_printf_float+0x98>
 801face:	9b05      	ldr	r3, [sp, #20]
 801fad0:	9a04      	ldr	r2, [sp, #16]
 801fad2:	3301      	adds	r3, #1
 801fad4:	9305      	str	r3, [sp, #20]
 801fad6:	e7b7      	b.n	801fa48 <_printf_float+0x2d8>
 801fad8:	4653      	mov	r3, sl
 801fada:	465a      	mov	r2, fp
 801fadc:	4631      	mov	r1, r6
 801fade:	4628      	mov	r0, r5
 801fae0:	47b8      	blx	r7
 801fae2:	3001      	adds	r0, #1
 801fae4:	d1be      	bne.n	801fa64 <_printf_float+0x2f4>
 801fae6:	e68f      	b.n	801f808 <_printf_float+0x98>
 801fae8:	9a04      	ldr	r2, [sp, #16]
 801faea:	464b      	mov	r3, r9
 801faec:	4442      	add	r2, r8
 801faee:	4631      	mov	r1, r6
 801faf0:	4628      	mov	r0, r5
 801faf2:	47b8      	blx	r7
 801faf4:	3001      	adds	r0, #1
 801faf6:	d1c1      	bne.n	801fa7c <_printf_float+0x30c>
 801faf8:	e686      	b.n	801f808 <_printf_float+0x98>
 801fafa:	9a08      	ldr	r2, [sp, #32]
 801fafc:	2a01      	cmp	r2, #1
 801fafe:	dc01      	bgt.n	801fb04 <_printf_float+0x394>
 801fb00:	07db      	lsls	r3, r3, #31
 801fb02:	d537      	bpl.n	801fb74 <_printf_float+0x404>
 801fb04:	2301      	movs	r3, #1
 801fb06:	4642      	mov	r2, r8
 801fb08:	4631      	mov	r1, r6
 801fb0a:	4628      	mov	r0, r5
 801fb0c:	47b8      	blx	r7
 801fb0e:	3001      	adds	r0, #1
 801fb10:	f43f ae7a 	beq.w	801f808 <_printf_float+0x98>
 801fb14:	4653      	mov	r3, sl
 801fb16:	465a      	mov	r2, fp
 801fb18:	4631      	mov	r1, r6
 801fb1a:	4628      	mov	r0, r5
 801fb1c:	47b8      	blx	r7
 801fb1e:	3001      	adds	r0, #1
 801fb20:	f43f ae72 	beq.w	801f808 <_printf_float+0x98>
 801fb24:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 801fb28:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801fb2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fb30:	9b08      	ldr	r3, [sp, #32]
 801fb32:	d01a      	beq.n	801fb6a <_printf_float+0x3fa>
 801fb34:	3b01      	subs	r3, #1
 801fb36:	f108 0201 	add.w	r2, r8, #1
 801fb3a:	4631      	mov	r1, r6
 801fb3c:	4628      	mov	r0, r5
 801fb3e:	47b8      	blx	r7
 801fb40:	3001      	adds	r0, #1
 801fb42:	d10e      	bne.n	801fb62 <_printf_float+0x3f2>
 801fb44:	e660      	b.n	801f808 <_printf_float+0x98>
 801fb46:	2301      	movs	r3, #1
 801fb48:	464a      	mov	r2, r9
 801fb4a:	4631      	mov	r1, r6
 801fb4c:	4628      	mov	r0, r5
 801fb4e:	47b8      	blx	r7
 801fb50:	3001      	adds	r0, #1
 801fb52:	f43f ae59 	beq.w	801f808 <_printf_float+0x98>
 801fb56:	f108 0801 	add.w	r8, r8, #1
 801fb5a:	9b08      	ldr	r3, [sp, #32]
 801fb5c:	3b01      	subs	r3, #1
 801fb5e:	4543      	cmp	r3, r8
 801fb60:	dcf1      	bgt.n	801fb46 <_printf_float+0x3d6>
 801fb62:	9b04      	ldr	r3, [sp, #16]
 801fb64:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801fb68:	e6dd      	b.n	801f926 <_printf_float+0x1b6>
 801fb6a:	f04f 0800 	mov.w	r8, #0
 801fb6e:	f104 091a 	add.w	r9, r4, #26
 801fb72:	e7f2      	b.n	801fb5a <_printf_float+0x3ea>
 801fb74:	2301      	movs	r3, #1
 801fb76:	4642      	mov	r2, r8
 801fb78:	e7df      	b.n	801fb3a <_printf_float+0x3ca>
 801fb7a:	2301      	movs	r3, #1
 801fb7c:	464a      	mov	r2, r9
 801fb7e:	4631      	mov	r1, r6
 801fb80:	4628      	mov	r0, r5
 801fb82:	47b8      	blx	r7
 801fb84:	3001      	adds	r0, #1
 801fb86:	f43f ae3f 	beq.w	801f808 <_printf_float+0x98>
 801fb8a:	f108 0801 	add.w	r8, r8, #1
 801fb8e:	68e3      	ldr	r3, [r4, #12]
 801fb90:	9909      	ldr	r1, [sp, #36]	; 0x24
 801fb92:	1a5b      	subs	r3, r3, r1
 801fb94:	4543      	cmp	r3, r8
 801fb96:	dcf0      	bgt.n	801fb7a <_printf_float+0x40a>
 801fb98:	e6f9      	b.n	801f98e <_printf_float+0x21e>
 801fb9a:	f04f 0800 	mov.w	r8, #0
 801fb9e:	f104 0919 	add.w	r9, r4, #25
 801fba2:	e7f4      	b.n	801fb8e <_printf_float+0x41e>

0801fba4 <_printf_common>:
 801fba4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801fba8:	4616      	mov	r6, r2
 801fbaa:	4699      	mov	r9, r3
 801fbac:	688a      	ldr	r2, [r1, #8]
 801fbae:	690b      	ldr	r3, [r1, #16]
 801fbb0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801fbb4:	4293      	cmp	r3, r2
 801fbb6:	bfb8      	it	lt
 801fbb8:	4613      	movlt	r3, r2
 801fbba:	6033      	str	r3, [r6, #0]
 801fbbc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801fbc0:	4607      	mov	r7, r0
 801fbc2:	460c      	mov	r4, r1
 801fbc4:	b10a      	cbz	r2, 801fbca <_printf_common+0x26>
 801fbc6:	3301      	adds	r3, #1
 801fbc8:	6033      	str	r3, [r6, #0]
 801fbca:	6823      	ldr	r3, [r4, #0]
 801fbcc:	0699      	lsls	r1, r3, #26
 801fbce:	bf42      	ittt	mi
 801fbd0:	6833      	ldrmi	r3, [r6, #0]
 801fbd2:	3302      	addmi	r3, #2
 801fbd4:	6033      	strmi	r3, [r6, #0]
 801fbd6:	6825      	ldr	r5, [r4, #0]
 801fbd8:	f015 0506 	ands.w	r5, r5, #6
 801fbdc:	d106      	bne.n	801fbec <_printf_common+0x48>
 801fbde:	f104 0a19 	add.w	sl, r4, #25
 801fbe2:	68e3      	ldr	r3, [r4, #12]
 801fbe4:	6832      	ldr	r2, [r6, #0]
 801fbe6:	1a9b      	subs	r3, r3, r2
 801fbe8:	42ab      	cmp	r3, r5
 801fbea:	dc26      	bgt.n	801fc3a <_printf_common+0x96>
 801fbec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801fbf0:	1e13      	subs	r3, r2, #0
 801fbf2:	6822      	ldr	r2, [r4, #0]
 801fbf4:	bf18      	it	ne
 801fbf6:	2301      	movne	r3, #1
 801fbf8:	0692      	lsls	r2, r2, #26
 801fbfa:	d42b      	bmi.n	801fc54 <_printf_common+0xb0>
 801fbfc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801fc00:	4649      	mov	r1, r9
 801fc02:	4638      	mov	r0, r7
 801fc04:	47c0      	blx	r8
 801fc06:	3001      	adds	r0, #1
 801fc08:	d01e      	beq.n	801fc48 <_printf_common+0xa4>
 801fc0a:	6823      	ldr	r3, [r4, #0]
 801fc0c:	6922      	ldr	r2, [r4, #16]
 801fc0e:	f003 0306 	and.w	r3, r3, #6
 801fc12:	2b04      	cmp	r3, #4
 801fc14:	bf02      	ittt	eq
 801fc16:	68e5      	ldreq	r5, [r4, #12]
 801fc18:	6833      	ldreq	r3, [r6, #0]
 801fc1a:	1aed      	subeq	r5, r5, r3
 801fc1c:	68a3      	ldr	r3, [r4, #8]
 801fc1e:	bf0c      	ite	eq
 801fc20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801fc24:	2500      	movne	r5, #0
 801fc26:	4293      	cmp	r3, r2
 801fc28:	bfc4      	itt	gt
 801fc2a:	1a9b      	subgt	r3, r3, r2
 801fc2c:	18ed      	addgt	r5, r5, r3
 801fc2e:	2600      	movs	r6, #0
 801fc30:	341a      	adds	r4, #26
 801fc32:	42b5      	cmp	r5, r6
 801fc34:	d11a      	bne.n	801fc6c <_printf_common+0xc8>
 801fc36:	2000      	movs	r0, #0
 801fc38:	e008      	b.n	801fc4c <_printf_common+0xa8>
 801fc3a:	2301      	movs	r3, #1
 801fc3c:	4652      	mov	r2, sl
 801fc3e:	4649      	mov	r1, r9
 801fc40:	4638      	mov	r0, r7
 801fc42:	47c0      	blx	r8
 801fc44:	3001      	adds	r0, #1
 801fc46:	d103      	bne.n	801fc50 <_printf_common+0xac>
 801fc48:	f04f 30ff 	mov.w	r0, #4294967295
 801fc4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801fc50:	3501      	adds	r5, #1
 801fc52:	e7c6      	b.n	801fbe2 <_printf_common+0x3e>
 801fc54:	18e1      	adds	r1, r4, r3
 801fc56:	1c5a      	adds	r2, r3, #1
 801fc58:	2030      	movs	r0, #48	; 0x30
 801fc5a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801fc5e:	4422      	add	r2, r4
 801fc60:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801fc64:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801fc68:	3302      	adds	r3, #2
 801fc6a:	e7c7      	b.n	801fbfc <_printf_common+0x58>
 801fc6c:	2301      	movs	r3, #1
 801fc6e:	4622      	mov	r2, r4
 801fc70:	4649      	mov	r1, r9
 801fc72:	4638      	mov	r0, r7
 801fc74:	47c0      	blx	r8
 801fc76:	3001      	adds	r0, #1
 801fc78:	d0e6      	beq.n	801fc48 <_printf_common+0xa4>
 801fc7a:	3601      	adds	r6, #1
 801fc7c:	e7d9      	b.n	801fc32 <_printf_common+0x8e>
	...

0801fc80 <_printf_i>:
 801fc80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801fc84:	7e0f      	ldrb	r7, [r1, #24]
 801fc86:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801fc88:	2f78      	cmp	r7, #120	; 0x78
 801fc8a:	4691      	mov	r9, r2
 801fc8c:	4680      	mov	r8, r0
 801fc8e:	460c      	mov	r4, r1
 801fc90:	469a      	mov	sl, r3
 801fc92:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801fc96:	d807      	bhi.n	801fca8 <_printf_i+0x28>
 801fc98:	2f62      	cmp	r7, #98	; 0x62
 801fc9a:	d80a      	bhi.n	801fcb2 <_printf_i+0x32>
 801fc9c:	2f00      	cmp	r7, #0
 801fc9e:	f000 80d4 	beq.w	801fe4a <_printf_i+0x1ca>
 801fca2:	2f58      	cmp	r7, #88	; 0x58
 801fca4:	f000 80c0 	beq.w	801fe28 <_printf_i+0x1a8>
 801fca8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801fcac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801fcb0:	e03a      	b.n	801fd28 <_printf_i+0xa8>
 801fcb2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801fcb6:	2b15      	cmp	r3, #21
 801fcb8:	d8f6      	bhi.n	801fca8 <_printf_i+0x28>
 801fcba:	a101      	add	r1, pc, #4	; (adr r1, 801fcc0 <_printf_i+0x40>)
 801fcbc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801fcc0:	0801fd19 	.word	0x0801fd19
 801fcc4:	0801fd2d 	.word	0x0801fd2d
 801fcc8:	0801fca9 	.word	0x0801fca9
 801fccc:	0801fca9 	.word	0x0801fca9
 801fcd0:	0801fca9 	.word	0x0801fca9
 801fcd4:	0801fca9 	.word	0x0801fca9
 801fcd8:	0801fd2d 	.word	0x0801fd2d
 801fcdc:	0801fca9 	.word	0x0801fca9
 801fce0:	0801fca9 	.word	0x0801fca9
 801fce4:	0801fca9 	.word	0x0801fca9
 801fce8:	0801fca9 	.word	0x0801fca9
 801fcec:	0801fe31 	.word	0x0801fe31
 801fcf0:	0801fd59 	.word	0x0801fd59
 801fcf4:	0801fdeb 	.word	0x0801fdeb
 801fcf8:	0801fca9 	.word	0x0801fca9
 801fcfc:	0801fca9 	.word	0x0801fca9
 801fd00:	0801fe53 	.word	0x0801fe53
 801fd04:	0801fca9 	.word	0x0801fca9
 801fd08:	0801fd59 	.word	0x0801fd59
 801fd0c:	0801fca9 	.word	0x0801fca9
 801fd10:	0801fca9 	.word	0x0801fca9
 801fd14:	0801fdf3 	.word	0x0801fdf3
 801fd18:	682b      	ldr	r3, [r5, #0]
 801fd1a:	1d1a      	adds	r2, r3, #4
 801fd1c:	681b      	ldr	r3, [r3, #0]
 801fd1e:	602a      	str	r2, [r5, #0]
 801fd20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801fd24:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801fd28:	2301      	movs	r3, #1
 801fd2a:	e09f      	b.n	801fe6c <_printf_i+0x1ec>
 801fd2c:	6820      	ldr	r0, [r4, #0]
 801fd2e:	682b      	ldr	r3, [r5, #0]
 801fd30:	0607      	lsls	r7, r0, #24
 801fd32:	f103 0104 	add.w	r1, r3, #4
 801fd36:	6029      	str	r1, [r5, #0]
 801fd38:	d501      	bpl.n	801fd3e <_printf_i+0xbe>
 801fd3a:	681e      	ldr	r6, [r3, #0]
 801fd3c:	e003      	b.n	801fd46 <_printf_i+0xc6>
 801fd3e:	0646      	lsls	r6, r0, #25
 801fd40:	d5fb      	bpl.n	801fd3a <_printf_i+0xba>
 801fd42:	f9b3 6000 	ldrsh.w	r6, [r3]
 801fd46:	2e00      	cmp	r6, #0
 801fd48:	da03      	bge.n	801fd52 <_printf_i+0xd2>
 801fd4a:	232d      	movs	r3, #45	; 0x2d
 801fd4c:	4276      	negs	r6, r6
 801fd4e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801fd52:	485a      	ldr	r0, [pc, #360]	; (801febc <_printf_i+0x23c>)
 801fd54:	230a      	movs	r3, #10
 801fd56:	e012      	b.n	801fd7e <_printf_i+0xfe>
 801fd58:	682b      	ldr	r3, [r5, #0]
 801fd5a:	6820      	ldr	r0, [r4, #0]
 801fd5c:	1d19      	adds	r1, r3, #4
 801fd5e:	6029      	str	r1, [r5, #0]
 801fd60:	0605      	lsls	r5, r0, #24
 801fd62:	d501      	bpl.n	801fd68 <_printf_i+0xe8>
 801fd64:	681e      	ldr	r6, [r3, #0]
 801fd66:	e002      	b.n	801fd6e <_printf_i+0xee>
 801fd68:	0641      	lsls	r1, r0, #25
 801fd6a:	d5fb      	bpl.n	801fd64 <_printf_i+0xe4>
 801fd6c:	881e      	ldrh	r6, [r3, #0]
 801fd6e:	4853      	ldr	r0, [pc, #332]	; (801febc <_printf_i+0x23c>)
 801fd70:	2f6f      	cmp	r7, #111	; 0x6f
 801fd72:	bf0c      	ite	eq
 801fd74:	2308      	moveq	r3, #8
 801fd76:	230a      	movne	r3, #10
 801fd78:	2100      	movs	r1, #0
 801fd7a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801fd7e:	6865      	ldr	r5, [r4, #4]
 801fd80:	60a5      	str	r5, [r4, #8]
 801fd82:	2d00      	cmp	r5, #0
 801fd84:	bfa2      	ittt	ge
 801fd86:	6821      	ldrge	r1, [r4, #0]
 801fd88:	f021 0104 	bicge.w	r1, r1, #4
 801fd8c:	6021      	strge	r1, [r4, #0]
 801fd8e:	b90e      	cbnz	r6, 801fd94 <_printf_i+0x114>
 801fd90:	2d00      	cmp	r5, #0
 801fd92:	d04b      	beq.n	801fe2c <_printf_i+0x1ac>
 801fd94:	4615      	mov	r5, r2
 801fd96:	fbb6 f1f3 	udiv	r1, r6, r3
 801fd9a:	fb03 6711 	mls	r7, r3, r1, r6
 801fd9e:	5dc7      	ldrb	r7, [r0, r7]
 801fda0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801fda4:	4637      	mov	r7, r6
 801fda6:	42bb      	cmp	r3, r7
 801fda8:	460e      	mov	r6, r1
 801fdaa:	d9f4      	bls.n	801fd96 <_printf_i+0x116>
 801fdac:	2b08      	cmp	r3, #8
 801fdae:	d10b      	bne.n	801fdc8 <_printf_i+0x148>
 801fdb0:	6823      	ldr	r3, [r4, #0]
 801fdb2:	07de      	lsls	r6, r3, #31
 801fdb4:	d508      	bpl.n	801fdc8 <_printf_i+0x148>
 801fdb6:	6923      	ldr	r3, [r4, #16]
 801fdb8:	6861      	ldr	r1, [r4, #4]
 801fdba:	4299      	cmp	r1, r3
 801fdbc:	bfde      	ittt	le
 801fdbe:	2330      	movle	r3, #48	; 0x30
 801fdc0:	f805 3c01 	strble.w	r3, [r5, #-1]
 801fdc4:	f105 35ff 	addle.w	r5, r5, #4294967295
 801fdc8:	1b52      	subs	r2, r2, r5
 801fdca:	6122      	str	r2, [r4, #16]
 801fdcc:	f8cd a000 	str.w	sl, [sp]
 801fdd0:	464b      	mov	r3, r9
 801fdd2:	aa03      	add	r2, sp, #12
 801fdd4:	4621      	mov	r1, r4
 801fdd6:	4640      	mov	r0, r8
 801fdd8:	f7ff fee4 	bl	801fba4 <_printf_common>
 801fddc:	3001      	adds	r0, #1
 801fdde:	d14a      	bne.n	801fe76 <_printf_i+0x1f6>
 801fde0:	f04f 30ff 	mov.w	r0, #4294967295
 801fde4:	b004      	add	sp, #16
 801fde6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801fdea:	6823      	ldr	r3, [r4, #0]
 801fdec:	f043 0320 	orr.w	r3, r3, #32
 801fdf0:	6023      	str	r3, [r4, #0]
 801fdf2:	4833      	ldr	r0, [pc, #204]	; (801fec0 <_printf_i+0x240>)
 801fdf4:	2778      	movs	r7, #120	; 0x78
 801fdf6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801fdfa:	6823      	ldr	r3, [r4, #0]
 801fdfc:	6829      	ldr	r1, [r5, #0]
 801fdfe:	061f      	lsls	r7, r3, #24
 801fe00:	f851 6b04 	ldr.w	r6, [r1], #4
 801fe04:	d402      	bmi.n	801fe0c <_printf_i+0x18c>
 801fe06:	065f      	lsls	r7, r3, #25
 801fe08:	bf48      	it	mi
 801fe0a:	b2b6      	uxthmi	r6, r6
 801fe0c:	07df      	lsls	r7, r3, #31
 801fe0e:	bf48      	it	mi
 801fe10:	f043 0320 	orrmi.w	r3, r3, #32
 801fe14:	6029      	str	r1, [r5, #0]
 801fe16:	bf48      	it	mi
 801fe18:	6023      	strmi	r3, [r4, #0]
 801fe1a:	b91e      	cbnz	r6, 801fe24 <_printf_i+0x1a4>
 801fe1c:	6823      	ldr	r3, [r4, #0]
 801fe1e:	f023 0320 	bic.w	r3, r3, #32
 801fe22:	6023      	str	r3, [r4, #0]
 801fe24:	2310      	movs	r3, #16
 801fe26:	e7a7      	b.n	801fd78 <_printf_i+0xf8>
 801fe28:	4824      	ldr	r0, [pc, #144]	; (801febc <_printf_i+0x23c>)
 801fe2a:	e7e4      	b.n	801fdf6 <_printf_i+0x176>
 801fe2c:	4615      	mov	r5, r2
 801fe2e:	e7bd      	b.n	801fdac <_printf_i+0x12c>
 801fe30:	682b      	ldr	r3, [r5, #0]
 801fe32:	6826      	ldr	r6, [r4, #0]
 801fe34:	6961      	ldr	r1, [r4, #20]
 801fe36:	1d18      	adds	r0, r3, #4
 801fe38:	6028      	str	r0, [r5, #0]
 801fe3a:	0635      	lsls	r5, r6, #24
 801fe3c:	681b      	ldr	r3, [r3, #0]
 801fe3e:	d501      	bpl.n	801fe44 <_printf_i+0x1c4>
 801fe40:	6019      	str	r1, [r3, #0]
 801fe42:	e002      	b.n	801fe4a <_printf_i+0x1ca>
 801fe44:	0670      	lsls	r0, r6, #25
 801fe46:	d5fb      	bpl.n	801fe40 <_printf_i+0x1c0>
 801fe48:	8019      	strh	r1, [r3, #0]
 801fe4a:	2300      	movs	r3, #0
 801fe4c:	6123      	str	r3, [r4, #16]
 801fe4e:	4615      	mov	r5, r2
 801fe50:	e7bc      	b.n	801fdcc <_printf_i+0x14c>
 801fe52:	682b      	ldr	r3, [r5, #0]
 801fe54:	1d1a      	adds	r2, r3, #4
 801fe56:	602a      	str	r2, [r5, #0]
 801fe58:	681d      	ldr	r5, [r3, #0]
 801fe5a:	6862      	ldr	r2, [r4, #4]
 801fe5c:	2100      	movs	r1, #0
 801fe5e:	4628      	mov	r0, r5
 801fe60:	f7e0 fa4e 	bl	8000300 <memchr>
 801fe64:	b108      	cbz	r0, 801fe6a <_printf_i+0x1ea>
 801fe66:	1b40      	subs	r0, r0, r5
 801fe68:	6060      	str	r0, [r4, #4]
 801fe6a:	6863      	ldr	r3, [r4, #4]
 801fe6c:	6123      	str	r3, [r4, #16]
 801fe6e:	2300      	movs	r3, #0
 801fe70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801fe74:	e7aa      	b.n	801fdcc <_printf_i+0x14c>
 801fe76:	6923      	ldr	r3, [r4, #16]
 801fe78:	462a      	mov	r2, r5
 801fe7a:	4649      	mov	r1, r9
 801fe7c:	4640      	mov	r0, r8
 801fe7e:	47d0      	blx	sl
 801fe80:	3001      	adds	r0, #1
 801fe82:	d0ad      	beq.n	801fde0 <_printf_i+0x160>
 801fe84:	6823      	ldr	r3, [r4, #0]
 801fe86:	079b      	lsls	r3, r3, #30
 801fe88:	d413      	bmi.n	801feb2 <_printf_i+0x232>
 801fe8a:	68e0      	ldr	r0, [r4, #12]
 801fe8c:	9b03      	ldr	r3, [sp, #12]
 801fe8e:	4298      	cmp	r0, r3
 801fe90:	bfb8      	it	lt
 801fe92:	4618      	movlt	r0, r3
 801fe94:	e7a6      	b.n	801fde4 <_printf_i+0x164>
 801fe96:	2301      	movs	r3, #1
 801fe98:	4632      	mov	r2, r6
 801fe9a:	4649      	mov	r1, r9
 801fe9c:	4640      	mov	r0, r8
 801fe9e:	47d0      	blx	sl
 801fea0:	3001      	adds	r0, #1
 801fea2:	d09d      	beq.n	801fde0 <_printf_i+0x160>
 801fea4:	3501      	adds	r5, #1
 801fea6:	68e3      	ldr	r3, [r4, #12]
 801fea8:	9903      	ldr	r1, [sp, #12]
 801feaa:	1a5b      	subs	r3, r3, r1
 801feac:	42ab      	cmp	r3, r5
 801feae:	dcf2      	bgt.n	801fe96 <_printf_i+0x216>
 801feb0:	e7eb      	b.n	801fe8a <_printf_i+0x20a>
 801feb2:	2500      	movs	r5, #0
 801feb4:	f104 0619 	add.w	r6, r4, #25
 801feb8:	e7f5      	b.n	801fea6 <_printf_i+0x226>
 801feba:	bf00      	nop
 801febc:	0802727b 	.word	0x0802727b
 801fec0:	0802728c 	.word	0x0802728c

0801fec4 <_scanf_float>:
 801fec4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fec8:	b087      	sub	sp, #28
 801feca:	4617      	mov	r7, r2
 801fecc:	9303      	str	r3, [sp, #12]
 801fece:	688b      	ldr	r3, [r1, #8]
 801fed0:	1e5a      	subs	r2, r3, #1
 801fed2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801fed6:	bf83      	ittte	hi
 801fed8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801fedc:	195b      	addhi	r3, r3, r5
 801fede:	9302      	strhi	r3, [sp, #8]
 801fee0:	2300      	movls	r3, #0
 801fee2:	bf86      	itte	hi
 801fee4:	f240 135d 	movwhi	r3, #349	; 0x15d
 801fee8:	608b      	strhi	r3, [r1, #8]
 801feea:	9302      	strls	r3, [sp, #8]
 801feec:	680b      	ldr	r3, [r1, #0]
 801feee:	468b      	mov	fp, r1
 801fef0:	2500      	movs	r5, #0
 801fef2:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801fef6:	f84b 3b1c 	str.w	r3, [fp], #28
 801fefa:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801fefe:	4680      	mov	r8, r0
 801ff00:	460c      	mov	r4, r1
 801ff02:	465e      	mov	r6, fp
 801ff04:	46aa      	mov	sl, r5
 801ff06:	46a9      	mov	r9, r5
 801ff08:	9501      	str	r5, [sp, #4]
 801ff0a:	68a2      	ldr	r2, [r4, #8]
 801ff0c:	b152      	cbz	r2, 801ff24 <_scanf_float+0x60>
 801ff0e:	683b      	ldr	r3, [r7, #0]
 801ff10:	781b      	ldrb	r3, [r3, #0]
 801ff12:	2b4e      	cmp	r3, #78	; 0x4e
 801ff14:	d864      	bhi.n	801ffe0 <_scanf_float+0x11c>
 801ff16:	2b40      	cmp	r3, #64	; 0x40
 801ff18:	d83c      	bhi.n	801ff94 <_scanf_float+0xd0>
 801ff1a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 801ff1e:	b2c8      	uxtb	r0, r1
 801ff20:	280e      	cmp	r0, #14
 801ff22:	d93a      	bls.n	801ff9a <_scanf_float+0xd6>
 801ff24:	f1b9 0f00 	cmp.w	r9, #0
 801ff28:	d003      	beq.n	801ff32 <_scanf_float+0x6e>
 801ff2a:	6823      	ldr	r3, [r4, #0]
 801ff2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801ff30:	6023      	str	r3, [r4, #0]
 801ff32:	f10a 3aff 	add.w	sl, sl, #4294967295
 801ff36:	f1ba 0f01 	cmp.w	sl, #1
 801ff3a:	f200 8113 	bhi.w	8020164 <_scanf_float+0x2a0>
 801ff3e:	455e      	cmp	r6, fp
 801ff40:	f200 8105 	bhi.w	802014e <_scanf_float+0x28a>
 801ff44:	2501      	movs	r5, #1
 801ff46:	4628      	mov	r0, r5
 801ff48:	b007      	add	sp, #28
 801ff4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ff4e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 801ff52:	2a0d      	cmp	r2, #13
 801ff54:	d8e6      	bhi.n	801ff24 <_scanf_float+0x60>
 801ff56:	a101      	add	r1, pc, #4	; (adr r1, 801ff5c <_scanf_float+0x98>)
 801ff58:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801ff5c:	0802009b 	.word	0x0802009b
 801ff60:	0801ff25 	.word	0x0801ff25
 801ff64:	0801ff25 	.word	0x0801ff25
 801ff68:	0801ff25 	.word	0x0801ff25
 801ff6c:	080200fb 	.word	0x080200fb
 801ff70:	080200d3 	.word	0x080200d3
 801ff74:	0801ff25 	.word	0x0801ff25
 801ff78:	0801ff25 	.word	0x0801ff25
 801ff7c:	080200a9 	.word	0x080200a9
 801ff80:	0801ff25 	.word	0x0801ff25
 801ff84:	0801ff25 	.word	0x0801ff25
 801ff88:	0801ff25 	.word	0x0801ff25
 801ff8c:	0801ff25 	.word	0x0801ff25
 801ff90:	08020061 	.word	0x08020061
 801ff94:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 801ff98:	e7db      	b.n	801ff52 <_scanf_float+0x8e>
 801ff9a:	290e      	cmp	r1, #14
 801ff9c:	d8c2      	bhi.n	801ff24 <_scanf_float+0x60>
 801ff9e:	a001      	add	r0, pc, #4	; (adr r0, 801ffa4 <_scanf_float+0xe0>)
 801ffa0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801ffa4:	08020053 	.word	0x08020053
 801ffa8:	0801ff25 	.word	0x0801ff25
 801ffac:	08020053 	.word	0x08020053
 801ffb0:	080200e7 	.word	0x080200e7
 801ffb4:	0801ff25 	.word	0x0801ff25
 801ffb8:	08020001 	.word	0x08020001
 801ffbc:	0802003d 	.word	0x0802003d
 801ffc0:	0802003d 	.word	0x0802003d
 801ffc4:	0802003d 	.word	0x0802003d
 801ffc8:	0802003d 	.word	0x0802003d
 801ffcc:	0802003d 	.word	0x0802003d
 801ffd0:	0802003d 	.word	0x0802003d
 801ffd4:	0802003d 	.word	0x0802003d
 801ffd8:	0802003d 	.word	0x0802003d
 801ffdc:	0802003d 	.word	0x0802003d
 801ffe0:	2b6e      	cmp	r3, #110	; 0x6e
 801ffe2:	d809      	bhi.n	801fff8 <_scanf_float+0x134>
 801ffe4:	2b60      	cmp	r3, #96	; 0x60
 801ffe6:	d8b2      	bhi.n	801ff4e <_scanf_float+0x8a>
 801ffe8:	2b54      	cmp	r3, #84	; 0x54
 801ffea:	d077      	beq.n	80200dc <_scanf_float+0x218>
 801ffec:	2b59      	cmp	r3, #89	; 0x59
 801ffee:	d199      	bne.n	801ff24 <_scanf_float+0x60>
 801fff0:	2d07      	cmp	r5, #7
 801fff2:	d197      	bne.n	801ff24 <_scanf_float+0x60>
 801fff4:	2508      	movs	r5, #8
 801fff6:	e029      	b.n	802004c <_scanf_float+0x188>
 801fff8:	2b74      	cmp	r3, #116	; 0x74
 801fffa:	d06f      	beq.n	80200dc <_scanf_float+0x218>
 801fffc:	2b79      	cmp	r3, #121	; 0x79
 801fffe:	e7f6      	b.n	801ffee <_scanf_float+0x12a>
 8020000:	6821      	ldr	r1, [r4, #0]
 8020002:	05c8      	lsls	r0, r1, #23
 8020004:	d51a      	bpl.n	802003c <_scanf_float+0x178>
 8020006:	9b02      	ldr	r3, [sp, #8]
 8020008:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 802000c:	6021      	str	r1, [r4, #0]
 802000e:	f109 0901 	add.w	r9, r9, #1
 8020012:	b11b      	cbz	r3, 802001c <_scanf_float+0x158>
 8020014:	3b01      	subs	r3, #1
 8020016:	3201      	adds	r2, #1
 8020018:	9302      	str	r3, [sp, #8]
 802001a:	60a2      	str	r2, [r4, #8]
 802001c:	68a3      	ldr	r3, [r4, #8]
 802001e:	3b01      	subs	r3, #1
 8020020:	60a3      	str	r3, [r4, #8]
 8020022:	6923      	ldr	r3, [r4, #16]
 8020024:	3301      	adds	r3, #1
 8020026:	6123      	str	r3, [r4, #16]
 8020028:	687b      	ldr	r3, [r7, #4]
 802002a:	3b01      	subs	r3, #1
 802002c:	2b00      	cmp	r3, #0
 802002e:	607b      	str	r3, [r7, #4]
 8020030:	f340 8084 	ble.w	802013c <_scanf_float+0x278>
 8020034:	683b      	ldr	r3, [r7, #0]
 8020036:	3301      	adds	r3, #1
 8020038:	603b      	str	r3, [r7, #0]
 802003a:	e766      	b.n	801ff0a <_scanf_float+0x46>
 802003c:	eb1a 0f05 	cmn.w	sl, r5
 8020040:	f47f af70 	bne.w	801ff24 <_scanf_float+0x60>
 8020044:	6822      	ldr	r2, [r4, #0]
 8020046:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 802004a:	6022      	str	r2, [r4, #0]
 802004c:	f806 3b01 	strb.w	r3, [r6], #1
 8020050:	e7e4      	b.n	802001c <_scanf_float+0x158>
 8020052:	6822      	ldr	r2, [r4, #0]
 8020054:	0610      	lsls	r0, r2, #24
 8020056:	f57f af65 	bpl.w	801ff24 <_scanf_float+0x60>
 802005a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 802005e:	e7f4      	b.n	802004a <_scanf_float+0x186>
 8020060:	f1ba 0f00 	cmp.w	sl, #0
 8020064:	d10e      	bne.n	8020084 <_scanf_float+0x1c0>
 8020066:	f1b9 0f00 	cmp.w	r9, #0
 802006a:	d10e      	bne.n	802008a <_scanf_float+0x1c6>
 802006c:	6822      	ldr	r2, [r4, #0]
 802006e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8020072:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8020076:	d108      	bne.n	802008a <_scanf_float+0x1c6>
 8020078:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 802007c:	6022      	str	r2, [r4, #0]
 802007e:	f04f 0a01 	mov.w	sl, #1
 8020082:	e7e3      	b.n	802004c <_scanf_float+0x188>
 8020084:	f1ba 0f02 	cmp.w	sl, #2
 8020088:	d055      	beq.n	8020136 <_scanf_float+0x272>
 802008a:	2d01      	cmp	r5, #1
 802008c:	d002      	beq.n	8020094 <_scanf_float+0x1d0>
 802008e:	2d04      	cmp	r5, #4
 8020090:	f47f af48 	bne.w	801ff24 <_scanf_float+0x60>
 8020094:	3501      	adds	r5, #1
 8020096:	b2ed      	uxtb	r5, r5
 8020098:	e7d8      	b.n	802004c <_scanf_float+0x188>
 802009a:	f1ba 0f01 	cmp.w	sl, #1
 802009e:	f47f af41 	bne.w	801ff24 <_scanf_float+0x60>
 80200a2:	f04f 0a02 	mov.w	sl, #2
 80200a6:	e7d1      	b.n	802004c <_scanf_float+0x188>
 80200a8:	b97d      	cbnz	r5, 80200ca <_scanf_float+0x206>
 80200aa:	f1b9 0f00 	cmp.w	r9, #0
 80200ae:	f47f af3c 	bne.w	801ff2a <_scanf_float+0x66>
 80200b2:	6822      	ldr	r2, [r4, #0]
 80200b4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80200b8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80200bc:	f47f af39 	bne.w	801ff32 <_scanf_float+0x6e>
 80200c0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80200c4:	6022      	str	r2, [r4, #0]
 80200c6:	2501      	movs	r5, #1
 80200c8:	e7c0      	b.n	802004c <_scanf_float+0x188>
 80200ca:	2d03      	cmp	r5, #3
 80200cc:	d0e2      	beq.n	8020094 <_scanf_float+0x1d0>
 80200ce:	2d05      	cmp	r5, #5
 80200d0:	e7de      	b.n	8020090 <_scanf_float+0x1cc>
 80200d2:	2d02      	cmp	r5, #2
 80200d4:	f47f af26 	bne.w	801ff24 <_scanf_float+0x60>
 80200d8:	2503      	movs	r5, #3
 80200da:	e7b7      	b.n	802004c <_scanf_float+0x188>
 80200dc:	2d06      	cmp	r5, #6
 80200de:	f47f af21 	bne.w	801ff24 <_scanf_float+0x60>
 80200e2:	2507      	movs	r5, #7
 80200e4:	e7b2      	b.n	802004c <_scanf_float+0x188>
 80200e6:	6822      	ldr	r2, [r4, #0]
 80200e8:	0591      	lsls	r1, r2, #22
 80200ea:	f57f af1b 	bpl.w	801ff24 <_scanf_float+0x60>
 80200ee:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80200f2:	6022      	str	r2, [r4, #0]
 80200f4:	f8cd 9004 	str.w	r9, [sp, #4]
 80200f8:	e7a8      	b.n	802004c <_scanf_float+0x188>
 80200fa:	6822      	ldr	r2, [r4, #0]
 80200fc:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8020100:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8020104:	d006      	beq.n	8020114 <_scanf_float+0x250>
 8020106:	0550      	lsls	r0, r2, #21
 8020108:	f57f af0c 	bpl.w	801ff24 <_scanf_float+0x60>
 802010c:	f1b9 0f00 	cmp.w	r9, #0
 8020110:	f43f af0f 	beq.w	801ff32 <_scanf_float+0x6e>
 8020114:	0591      	lsls	r1, r2, #22
 8020116:	bf58      	it	pl
 8020118:	9901      	ldrpl	r1, [sp, #4]
 802011a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 802011e:	bf58      	it	pl
 8020120:	eba9 0101 	subpl.w	r1, r9, r1
 8020124:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8020128:	bf58      	it	pl
 802012a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 802012e:	6022      	str	r2, [r4, #0]
 8020130:	f04f 0900 	mov.w	r9, #0
 8020134:	e78a      	b.n	802004c <_scanf_float+0x188>
 8020136:	f04f 0a03 	mov.w	sl, #3
 802013a:	e787      	b.n	802004c <_scanf_float+0x188>
 802013c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8020140:	4639      	mov	r1, r7
 8020142:	4640      	mov	r0, r8
 8020144:	4798      	blx	r3
 8020146:	2800      	cmp	r0, #0
 8020148:	f43f aedf 	beq.w	801ff0a <_scanf_float+0x46>
 802014c:	e6ea      	b.n	801ff24 <_scanf_float+0x60>
 802014e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8020152:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8020156:	463a      	mov	r2, r7
 8020158:	4640      	mov	r0, r8
 802015a:	4798      	blx	r3
 802015c:	6923      	ldr	r3, [r4, #16]
 802015e:	3b01      	subs	r3, #1
 8020160:	6123      	str	r3, [r4, #16]
 8020162:	e6ec      	b.n	801ff3e <_scanf_float+0x7a>
 8020164:	1e6b      	subs	r3, r5, #1
 8020166:	2b06      	cmp	r3, #6
 8020168:	d825      	bhi.n	80201b6 <_scanf_float+0x2f2>
 802016a:	2d02      	cmp	r5, #2
 802016c:	d836      	bhi.n	80201dc <_scanf_float+0x318>
 802016e:	455e      	cmp	r6, fp
 8020170:	f67f aee8 	bls.w	801ff44 <_scanf_float+0x80>
 8020174:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8020178:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 802017c:	463a      	mov	r2, r7
 802017e:	4640      	mov	r0, r8
 8020180:	4798      	blx	r3
 8020182:	6923      	ldr	r3, [r4, #16]
 8020184:	3b01      	subs	r3, #1
 8020186:	6123      	str	r3, [r4, #16]
 8020188:	e7f1      	b.n	802016e <_scanf_float+0x2aa>
 802018a:	9802      	ldr	r0, [sp, #8]
 802018c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8020190:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8020194:	9002      	str	r0, [sp, #8]
 8020196:	463a      	mov	r2, r7
 8020198:	4640      	mov	r0, r8
 802019a:	4798      	blx	r3
 802019c:	6923      	ldr	r3, [r4, #16]
 802019e:	3b01      	subs	r3, #1
 80201a0:	6123      	str	r3, [r4, #16]
 80201a2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80201a6:	fa5f fa8a 	uxtb.w	sl, sl
 80201aa:	f1ba 0f02 	cmp.w	sl, #2
 80201ae:	d1ec      	bne.n	802018a <_scanf_float+0x2c6>
 80201b0:	3d03      	subs	r5, #3
 80201b2:	b2ed      	uxtb	r5, r5
 80201b4:	1b76      	subs	r6, r6, r5
 80201b6:	6823      	ldr	r3, [r4, #0]
 80201b8:	05da      	lsls	r2, r3, #23
 80201ba:	d52f      	bpl.n	802021c <_scanf_float+0x358>
 80201bc:	055b      	lsls	r3, r3, #21
 80201be:	d510      	bpl.n	80201e2 <_scanf_float+0x31e>
 80201c0:	455e      	cmp	r6, fp
 80201c2:	f67f aebf 	bls.w	801ff44 <_scanf_float+0x80>
 80201c6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80201ca:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80201ce:	463a      	mov	r2, r7
 80201d0:	4640      	mov	r0, r8
 80201d2:	4798      	blx	r3
 80201d4:	6923      	ldr	r3, [r4, #16]
 80201d6:	3b01      	subs	r3, #1
 80201d8:	6123      	str	r3, [r4, #16]
 80201da:	e7f1      	b.n	80201c0 <_scanf_float+0x2fc>
 80201dc:	46aa      	mov	sl, r5
 80201de:	9602      	str	r6, [sp, #8]
 80201e0:	e7df      	b.n	80201a2 <_scanf_float+0x2de>
 80201e2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80201e6:	6923      	ldr	r3, [r4, #16]
 80201e8:	2965      	cmp	r1, #101	; 0x65
 80201ea:	f103 33ff 	add.w	r3, r3, #4294967295
 80201ee:	f106 35ff 	add.w	r5, r6, #4294967295
 80201f2:	6123      	str	r3, [r4, #16]
 80201f4:	d00c      	beq.n	8020210 <_scanf_float+0x34c>
 80201f6:	2945      	cmp	r1, #69	; 0x45
 80201f8:	d00a      	beq.n	8020210 <_scanf_float+0x34c>
 80201fa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80201fe:	463a      	mov	r2, r7
 8020200:	4640      	mov	r0, r8
 8020202:	4798      	blx	r3
 8020204:	6923      	ldr	r3, [r4, #16]
 8020206:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 802020a:	3b01      	subs	r3, #1
 802020c:	1eb5      	subs	r5, r6, #2
 802020e:	6123      	str	r3, [r4, #16]
 8020210:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8020214:	463a      	mov	r2, r7
 8020216:	4640      	mov	r0, r8
 8020218:	4798      	blx	r3
 802021a:	462e      	mov	r6, r5
 802021c:	6825      	ldr	r5, [r4, #0]
 802021e:	f015 0510 	ands.w	r5, r5, #16
 8020222:	d14d      	bne.n	80202c0 <_scanf_float+0x3fc>
 8020224:	7035      	strb	r5, [r6, #0]
 8020226:	6823      	ldr	r3, [r4, #0]
 8020228:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 802022c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8020230:	d11a      	bne.n	8020268 <_scanf_float+0x3a4>
 8020232:	9b01      	ldr	r3, [sp, #4]
 8020234:	454b      	cmp	r3, r9
 8020236:	eba3 0209 	sub.w	r2, r3, r9
 802023a:	d122      	bne.n	8020282 <_scanf_float+0x3be>
 802023c:	2200      	movs	r2, #0
 802023e:	4659      	mov	r1, fp
 8020240:	4640      	mov	r0, r8
 8020242:	f7ff f96f 	bl	801f524 <_strtod_r>
 8020246:	9b03      	ldr	r3, [sp, #12]
 8020248:	6821      	ldr	r1, [r4, #0]
 802024a:	681b      	ldr	r3, [r3, #0]
 802024c:	f011 0f02 	tst.w	r1, #2
 8020250:	f103 0204 	add.w	r2, r3, #4
 8020254:	d020      	beq.n	8020298 <_scanf_float+0x3d4>
 8020256:	9903      	ldr	r1, [sp, #12]
 8020258:	600a      	str	r2, [r1, #0]
 802025a:	681b      	ldr	r3, [r3, #0]
 802025c:	ed83 0b00 	vstr	d0, [r3]
 8020260:	68e3      	ldr	r3, [r4, #12]
 8020262:	3301      	adds	r3, #1
 8020264:	60e3      	str	r3, [r4, #12]
 8020266:	e66e      	b.n	801ff46 <_scanf_float+0x82>
 8020268:	9b04      	ldr	r3, [sp, #16]
 802026a:	2b00      	cmp	r3, #0
 802026c:	d0e6      	beq.n	802023c <_scanf_float+0x378>
 802026e:	9905      	ldr	r1, [sp, #20]
 8020270:	230a      	movs	r3, #10
 8020272:	462a      	mov	r2, r5
 8020274:	3101      	adds	r1, #1
 8020276:	4640      	mov	r0, r8
 8020278:	f7ff f9e8 	bl	801f64c <_strtol_r>
 802027c:	9b04      	ldr	r3, [sp, #16]
 802027e:	9e05      	ldr	r6, [sp, #20]
 8020280:	1ac2      	subs	r2, r0, r3
 8020282:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8020286:	429e      	cmp	r6, r3
 8020288:	bf28      	it	cs
 802028a:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 802028e:	490d      	ldr	r1, [pc, #52]	; (80202c4 <_scanf_float+0x400>)
 8020290:	4630      	mov	r0, r6
 8020292:	f000 f8ef 	bl	8020474 <siprintf>
 8020296:	e7d1      	b.n	802023c <_scanf_float+0x378>
 8020298:	f011 0f04 	tst.w	r1, #4
 802029c:	9903      	ldr	r1, [sp, #12]
 802029e:	600a      	str	r2, [r1, #0]
 80202a0:	d1db      	bne.n	802025a <_scanf_float+0x396>
 80202a2:	eeb4 0b40 	vcmp.f64	d0, d0
 80202a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80202aa:	681e      	ldr	r6, [r3, #0]
 80202ac:	d705      	bvc.n	80202ba <_scanf_float+0x3f6>
 80202ae:	4806      	ldr	r0, [pc, #24]	; (80202c8 <_scanf_float+0x404>)
 80202b0:	f000 fa16 	bl	80206e0 <nanf>
 80202b4:	ed86 0a00 	vstr	s0, [r6]
 80202b8:	e7d2      	b.n	8020260 <_scanf_float+0x39c>
 80202ba:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80202be:	e7f9      	b.n	80202b4 <_scanf_float+0x3f0>
 80202c0:	2500      	movs	r5, #0
 80202c2:	e640      	b.n	801ff46 <_scanf_float+0x82>
 80202c4:	0802729d 	.word	0x0802729d
 80202c8:	080272e5 	.word	0x080272e5

080202cc <std>:
 80202cc:	2300      	movs	r3, #0
 80202ce:	b510      	push	{r4, lr}
 80202d0:	4604      	mov	r4, r0
 80202d2:	e9c0 3300 	strd	r3, r3, [r0]
 80202d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80202da:	6083      	str	r3, [r0, #8]
 80202dc:	8181      	strh	r1, [r0, #12]
 80202de:	6643      	str	r3, [r0, #100]	; 0x64
 80202e0:	81c2      	strh	r2, [r0, #14]
 80202e2:	6183      	str	r3, [r0, #24]
 80202e4:	4619      	mov	r1, r3
 80202e6:	2208      	movs	r2, #8
 80202e8:	305c      	adds	r0, #92	; 0x5c
 80202ea:	f000 f950 	bl	802058e <memset>
 80202ee:	4b0d      	ldr	r3, [pc, #52]	; (8020324 <std+0x58>)
 80202f0:	6263      	str	r3, [r4, #36]	; 0x24
 80202f2:	4b0d      	ldr	r3, [pc, #52]	; (8020328 <std+0x5c>)
 80202f4:	62a3      	str	r3, [r4, #40]	; 0x28
 80202f6:	4b0d      	ldr	r3, [pc, #52]	; (802032c <std+0x60>)
 80202f8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80202fa:	4b0d      	ldr	r3, [pc, #52]	; (8020330 <std+0x64>)
 80202fc:	6323      	str	r3, [r4, #48]	; 0x30
 80202fe:	4b0d      	ldr	r3, [pc, #52]	; (8020334 <std+0x68>)
 8020300:	6224      	str	r4, [r4, #32]
 8020302:	429c      	cmp	r4, r3
 8020304:	d006      	beq.n	8020314 <std+0x48>
 8020306:	f103 0268 	add.w	r2, r3, #104	; 0x68
 802030a:	4294      	cmp	r4, r2
 802030c:	d002      	beq.n	8020314 <std+0x48>
 802030e:	33d0      	adds	r3, #208	; 0xd0
 8020310:	429c      	cmp	r4, r3
 8020312:	d105      	bne.n	8020320 <std+0x54>
 8020314:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8020318:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802031c:	f000 b9c6 	b.w	80206ac <__retarget_lock_init_recursive>
 8020320:	bd10      	pop	{r4, pc}
 8020322:	bf00      	nop
 8020324:	080204b5 	.word	0x080204b5
 8020328:	080204d7 	.word	0x080204d7
 802032c:	0802050f 	.word	0x0802050f
 8020330:	08020533 	.word	0x08020533
 8020334:	24007f70 	.word	0x24007f70

08020338 <stdio_exit_handler>:
 8020338:	4a02      	ldr	r2, [pc, #8]	; (8020344 <stdio_exit_handler+0xc>)
 802033a:	4903      	ldr	r1, [pc, #12]	; (8020348 <stdio_exit_handler+0x10>)
 802033c:	4803      	ldr	r0, [pc, #12]	; (802034c <stdio_exit_handler+0x14>)
 802033e:	f000 b869 	b.w	8020414 <_fwalk_sglue>
 8020342:	bf00      	nop
 8020344:	24000304 	.word	0x24000304
 8020348:	08022b01 	.word	0x08022b01
 802034c:	2400047c 	.word	0x2400047c

08020350 <cleanup_stdio>:
 8020350:	6841      	ldr	r1, [r0, #4]
 8020352:	4b0c      	ldr	r3, [pc, #48]	; (8020384 <cleanup_stdio+0x34>)
 8020354:	4299      	cmp	r1, r3
 8020356:	b510      	push	{r4, lr}
 8020358:	4604      	mov	r4, r0
 802035a:	d001      	beq.n	8020360 <cleanup_stdio+0x10>
 802035c:	f002 fbd0 	bl	8022b00 <_fflush_r>
 8020360:	68a1      	ldr	r1, [r4, #8]
 8020362:	4b09      	ldr	r3, [pc, #36]	; (8020388 <cleanup_stdio+0x38>)
 8020364:	4299      	cmp	r1, r3
 8020366:	d002      	beq.n	802036e <cleanup_stdio+0x1e>
 8020368:	4620      	mov	r0, r4
 802036a:	f002 fbc9 	bl	8022b00 <_fflush_r>
 802036e:	68e1      	ldr	r1, [r4, #12]
 8020370:	4b06      	ldr	r3, [pc, #24]	; (802038c <cleanup_stdio+0x3c>)
 8020372:	4299      	cmp	r1, r3
 8020374:	d004      	beq.n	8020380 <cleanup_stdio+0x30>
 8020376:	4620      	mov	r0, r4
 8020378:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802037c:	f002 bbc0 	b.w	8022b00 <_fflush_r>
 8020380:	bd10      	pop	{r4, pc}
 8020382:	bf00      	nop
 8020384:	24007f70 	.word	0x24007f70
 8020388:	24007fd8 	.word	0x24007fd8
 802038c:	24008040 	.word	0x24008040

08020390 <global_stdio_init.part.0>:
 8020390:	b510      	push	{r4, lr}
 8020392:	4b0b      	ldr	r3, [pc, #44]	; (80203c0 <global_stdio_init.part.0+0x30>)
 8020394:	4c0b      	ldr	r4, [pc, #44]	; (80203c4 <global_stdio_init.part.0+0x34>)
 8020396:	4a0c      	ldr	r2, [pc, #48]	; (80203c8 <global_stdio_init.part.0+0x38>)
 8020398:	601a      	str	r2, [r3, #0]
 802039a:	4620      	mov	r0, r4
 802039c:	2200      	movs	r2, #0
 802039e:	2104      	movs	r1, #4
 80203a0:	f7ff ff94 	bl	80202cc <std>
 80203a4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80203a8:	2201      	movs	r2, #1
 80203aa:	2109      	movs	r1, #9
 80203ac:	f7ff ff8e 	bl	80202cc <std>
 80203b0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80203b4:	2202      	movs	r2, #2
 80203b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80203ba:	2112      	movs	r1, #18
 80203bc:	f7ff bf86 	b.w	80202cc <std>
 80203c0:	240080a8 	.word	0x240080a8
 80203c4:	24007f70 	.word	0x24007f70
 80203c8:	08020339 	.word	0x08020339

080203cc <__sfp_lock_acquire>:
 80203cc:	4801      	ldr	r0, [pc, #4]	; (80203d4 <__sfp_lock_acquire+0x8>)
 80203ce:	f000 b96e 	b.w	80206ae <__retarget_lock_acquire_recursive>
 80203d2:	bf00      	nop
 80203d4:	240080ad 	.word	0x240080ad

080203d8 <__sfp_lock_release>:
 80203d8:	4801      	ldr	r0, [pc, #4]	; (80203e0 <__sfp_lock_release+0x8>)
 80203da:	f000 b969 	b.w	80206b0 <__retarget_lock_release_recursive>
 80203de:	bf00      	nop
 80203e0:	240080ad 	.word	0x240080ad

080203e4 <__sinit>:
 80203e4:	b510      	push	{r4, lr}
 80203e6:	4604      	mov	r4, r0
 80203e8:	f7ff fff0 	bl	80203cc <__sfp_lock_acquire>
 80203ec:	6a23      	ldr	r3, [r4, #32]
 80203ee:	b11b      	cbz	r3, 80203f8 <__sinit+0x14>
 80203f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80203f4:	f7ff bff0 	b.w	80203d8 <__sfp_lock_release>
 80203f8:	4b04      	ldr	r3, [pc, #16]	; (802040c <__sinit+0x28>)
 80203fa:	6223      	str	r3, [r4, #32]
 80203fc:	4b04      	ldr	r3, [pc, #16]	; (8020410 <__sinit+0x2c>)
 80203fe:	681b      	ldr	r3, [r3, #0]
 8020400:	2b00      	cmp	r3, #0
 8020402:	d1f5      	bne.n	80203f0 <__sinit+0xc>
 8020404:	f7ff ffc4 	bl	8020390 <global_stdio_init.part.0>
 8020408:	e7f2      	b.n	80203f0 <__sinit+0xc>
 802040a:	bf00      	nop
 802040c:	08020351 	.word	0x08020351
 8020410:	240080a8 	.word	0x240080a8

08020414 <_fwalk_sglue>:
 8020414:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8020418:	4607      	mov	r7, r0
 802041a:	4688      	mov	r8, r1
 802041c:	4614      	mov	r4, r2
 802041e:	2600      	movs	r6, #0
 8020420:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8020424:	f1b9 0901 	subs.w	r9, r9, #1
 8020428:	d505      	bpl.n	8020436 <_fwalk_sglue+0x22>
 802042a:	6824      	ldr	r4, [r4, #0]
 802042c:	2c00      	cmp	r4, #0
 802042e:	d1f7      	bne.n	8020420 <_fwalk_sglue+0xc>
 8020430:	4630      	mov	r0, r6
 8020432:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8020436:	89ab      	ldrh	r3, [r5, #12]
 8020438:	2b01      	cmp	r3, #1
 802043a:	d907      	bls.n	802044c <_fwalk_sglue+0x38>
 802043c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8020440:	3301      	adds	r3, #1
 8020442:	d003      	beq.n	802044c <_fwalk_sglue+0x38>
 8020444:	4629      	mov	r1, r5
 8020446:	4638      	mov	r0, r7
 8020448:	47c0      	blx	r8
 802044a:	4306      	orrs	r6, r0
 802044c:	3568      	adds	r5, #104	; 0x68
 802044e:	e7e9      	b.n	8020424 <_fwalk_sglue+0x10>

08020450 <iprintf>:
 8020450:	b40f      	push	{r0, r1, r2, r3}
 8020452:	b507      	push	{r0, r1, r2, lr}
 8020454:	4906      	ldr	r1, [pc, #24]	; (8020470 <iprintf+0x20>)
 8020456:	ab04      	add	r3, sp, #16
 8020458:	6808      	ldr	r0, [r1, #0]
 802045a:	f853 2b04 	ldr.w	r2, [r3], #4
 802045e:	6881      	ldr	r1, [r0, #8]
 8020460:	9301      	str	r3, [sp, #4]
 8020462:	f002 f9ad 	bl	80227c0 <_vfiprintf_r>
 8020466:	b003      	add	sp, #12
 8020468:	f85d eb04 	ldr.w	lr, [sp], #4
 802046c:	b004      	add	sp, #16
 802046e:	4770      	bx	lr
 8020470:	240004c8 	.word	0x240004c8

08020474 <siprintf>:
 8020474:	b40e      	push	{r1, r2, r3}
 8020476:	b500      	push	{lr}
 8020478:	b09c      	sub	sp, #112	; 0x70
 802047a:	ab1d      	add	r3, sp, #116	; 0x74
 802047c:	9002      	str	r0, [sp, #8]
 802047e:	9006      	str	r0, [sp, #24]
 8020480:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8020484:	4809      	ldr	r0, [pc, #36]	; (80204ac <siprintf+0x38>)
 8020486:	9107      	str	r1, [sp, #28]
 8020488:	9104      	str	r1, [sp, #16]
 802048a:	4909      	ldr	r1, [pc, #36]	; (80204b0 <siprintf+0x3c>)
 802048c:	f853 2b04 	ldr.w	r2, [r3], #4
 8020490:	9105      	str	r1, [sp, #20]
 8020492:	6800      	ldr	r0, [r0, #0]
 8020494:	9301      	str	r3, [sp, #4]
 8020496:	a902      	add	r1, sp, #8
 8020498:	f002 f86a 	bl	8022570 <_svfiprintf_r>
 802049c:	9b02      	ldr	r3, [sp, #8]
 802049e:	2200      	movs	r2, #0
 80204a0:	701a      	strb	r2, [r3, #0]
 80204a2:	b01c      	add	sp, #112	; 0x70
 80204a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80204a8:	b003      	add	sp, #12
 80204aa:	4770      	bx	lr
 80204ac:	240004c8 	.word	0x240004c8
 80204b0:	ffff0208 	.word	0xffff0208

080204b4 <__sread>:
 80204b4:	b510      	push	{r4, lr}
 80204b6:	460c      	mov	r4, r1
 80204b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80204bc:	f000 f8a8 	bl	8020610 <_read_r>
 80204c0:	2800      	cmp	r0, #0
 80204c2:	bfab      	itete	ge
 80204c4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80204c6:	89a3      	ldrhlt	r3, [r4, #12]
 80204c8:	181b      	addge	r3, r3, r0
 80204ca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80204ce:	bfac      	ite	ge
 80204d0:	6563      	strge	r3, [r4, #84]	; 0x54
 80204d2:	81a3      	strhlt	r3, [r4, #12]
 80204d4:	bd10      	pop	{r4, pc}

080204d6 <__swrite>:
 80204d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80204da:	461f      	mov	r7, r3
 80204dc:	898b      	ldrh	r3, [r1, #12]
 80204de:	05db      	lsls	r3, r3, #23
 80204e0:	4605      	mov	r5, r0
 80204e2:	460c      	mov	r4, r1
 80204e4:	4616      	mov	r6, r2
 80204e6:	d505      	bpl.n	80204f4 <__swrite+0x1e>
 80204e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80204ec:	2302      	movs	r3, #2
 80204ee:	2200      	movs	r2, #0
 80204f0:	f000 f87c 	bl	80205ec <_lseek_r>
 80204f4:	89a3      	ldrh	r3, [r4, #12]
 80204f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80204fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80204fe:	81a3      	strh	r3, [r4, #12]
 8020500:	4632      	mov	r2, r6
 8020502:	463b      	mov	r3, r7
 8020504:	4628      	mov	r0, r5
 8020506:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802050a:	f000 b893 	b.w	8020634 <_write_r>

0802050e <__sseek>:
 802050e:	b510      	push	{r4, lr}
 8020510:	460c      	mov	r4, r1
 8020512:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020516:	f000 f869 	bl	80205ec <_lseek_r>
 802051a:	1c43      	adds	r3, r0, #1
 802051c:	89a3      	ldrh	r3, [r4, #12]
 802051e:	bf15      	itete	ne
 8020520:	6560      	strne	r0, [r4, #84]	; 0x54
 8020522:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8020526:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802052a:	81a3      	strheq	r3, [r4, #12]
 802052c:	bf18      	it	ne
 802052e:	81a3      	strhne	r3, [r4, #12]
 8020530:	bd10      	pop	{r4, pc}

08020532 <__sclose>:
 8020532:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020536:	f000 b849 	b.w	80205cc <_close_r>

0802053a <memcmp>:
 802053a:	b510      	push	{r4, lr}
 802053c:	3901      	subs	r1, #1
 802053e:	4402      	add	r2, r0
 8020540:	4290      	cmp	r0, r2
 8020542:	d101      	bne.n	8020548 <memcmp+0xe>
 8020544:	2000      	movs	r0, #0
 8020546:	e005      	b.n	8020554 <memcmp+0x1a>
 8020548:	7803      	ldrb	r3, [r0, #0]
 802054a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 802054e:	42a3      	cmp	r3, r4
 8020550:	d001      	beq.n	8020556 <memcmp+0x1c>
 8020552:	1b18      	subs	r0, r3, r4
 8020554:	bd10      	pop	{r4, pc}
 8020556:	3001      	adds	r0, #1
 8020558:	e7f2      	b.n	8020540 <memcmp+0x6>

0802055a <memmove>:
 802055a:	4288      	cmp	r0, r1
 802055c:	b510      	push	{r4, lr}
 802055e:	eb01 0402 	add.w	r4, r1, r2
 8020562:	d902      	bls.n	802056a <memmove+0x10>
 8020564:	4284      	cmp	r4, r0
 8020566:	4623      	mov	r3, r4
 8020568:	d807      	bhi.n	802057a <memmove+0x20>
 802056a:	1e43      	subs	r3, r0, #1
 802056c:	42a1      	cmp	r1, r4
 802056e:	d008      	beq.n	8020582 <memmove+0x28>
 8020570:	f811 2b01 	ldrb.w	r2, [r1], #1
 8020574:	f803 2f01 	strb.w	r2, [r3, #1]!
 8020578:	e7f8      	b.n	802056c <memmove+0x12>
 802057a:	4402      	add	r2, r0
 802057c:	4601      	mov	r1, r0
 802057e:	428a      	cmp	r2, r1
 8020580:	d100      	bne.n	8020584 <memmove+0x2a>
 8020582:	bd10      	pop	{r4, pc}
 8020584:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8020588:	f802 4d01 	strb.w	r4, [r2, #-1]!
 802058c:	e7f7      	b.n	802057e <memmove+0x24>

0802058e <memset>:
 802058e:	4402      	add	r2, r0
 8020590:	4603      	mov	r3, r0
 8020592:	4293      	cmp	r3, r2
 8020594:	d100      	bne.n	8020598 <memset+0xa>
 8020596:	4770      	bx	lr
 8020598:	f803 1b01 	strb.w	r1, [r3], #1
 802059c:	e7f9      	b.n	8020592 <memset+0x4>

0802059e <strncmp>:
 802059e:	b510      	push	{r4, lr}
 80205a0:	b16a      	cbz	r2, 80205be <strncmp+0x20>
 80205a2:	3901      	subs	r1, #1
 80205a4:	1884      	adds	r4, r0, r2
 80205a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80205aa:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80205ae:	429a      	cmp	r2, r3
 80205b0:	d103      	bne.n	80205ba <strncmp+0x1c>
 80205b2:	42a0      	cmp	r0, r4
 80205b4:	d001      	beq.n	80205ba <strncmp+0x1c>
 80205b6:	2a00      	cmp	r2, #0
 80205b8:	d1f5      	bne.n	80205a6 <strncmp+0x8>
 80205ba:	1ad0      	subs	r0, r2, r3
 80205bc:	bd10      	pop	{r4, pc}
 80205be:	4610      	mov	r0, r2
 80205c0:	e7fc      	b.n	80205bc <strncmp+0x1e>
	...

080205c4 <_localeconv_r>:
 80205c4:	4800      	ldr	r0, [pc, #0]	; (80205c8 <_localeconv_r+0x4>)
 80205c6:	4770      	bx	lr
 80205c8:	24000400 	.word	0x24000400

080205cc <_close_r>:
 80205cc:	b538      	push	{r3, r4, r5, lr}
 80205ce:	4d06      	ldr	r5, [pc, #24]	; (80205e8 <_close_r+0x1c>)
 80205d0:	2300      	movs	r3, #0
 80205d2:	4604      	mov	r4, r0
 80205d4:	4608      	mov	r0, r1
 80205d6:	602b      	str	r3, [r5, #0]
 80205d8:	f7e2 f82d 	bl	8002636 <_close>
 80205dc:	1c43      	adds	r3, r0, #1
 80205de:	d102      	bne.n	80205e6 <_close_r+0x1a>
 80205e0:	682b      	ldr	r3, [r5, #0]
 80205e2:	b103      	cbz	r3, 80205e6 <_close_r+0x1a>
 80205e4:	6023      	str	r3, [r4, #0]
 80205e6:	bd38      	pop	{r3, r4, r5, pc}
 80205e8:	24007f68 	.word	0x24007f68

080205ec <_lseek_r>:
 80205ec:	b538      	push	{r3, r4, r5, lr}
 80205ee:	4d07      	ldr	r5, [pc, #28]	; (802060c <_lseek_r+0x20>)
 80205f0:	4604      	mov	r4, r0
 80205f2:	4608      	mov	r0, r1
 80205f4:	4611      	mov	r1, r2
 80205f6:	2200      	movs	r2, #0
 80205f8:	602a      	str	r2, [r5, #0]
 80205fa:	461a      	mov	r2, r3
 80205fc:	f7e2 f842 	bl	8002684 <_lseek>
 8020600:	1c43      	adds	r3, r0, #1
 8020602:	d102      	bne.n	802060a <_lseek_r+0x1e>
 8020604:	682b      	ldr	r3, [r5, #0]
 8020606:	b103      	cbz	r3, 802060a <_lseek_r+0x1e>
 8020608:	6023      	str	r3, [r4, #0]
 802060a:	bd38      	pop	{r3, r4, r5, pc}
 802060c:	24007f68 	.word	0x24007f68

08020610 <_read_r>:
 8020610:	b538      	push	{r3, r4, r5, lr}
 8020612:	4d07      	ldr	r5, [pc, #28]	; (8020630 <_read_r+0x20>)
 8020614:	4604      	mov	r4, r0
 8020616:	4608      	mov	r0, r1
 8020618:	4611      	mov	r1, r2
 802061a:	2200      	movs	r2, #0
 802061c:	602a      	str	r2, [r5, #0]
 802061e:	461a      	mov	r2, r3
 8020620:	f7e1 ffd0 	bl	80025c4 <_read>
 8020624:	1c43      	adds	r3, r0, #1
 8020626:	d102      	bne.n	802062e <_read_r+0x1e>
 8020628:	682b      	ldr	r3, [r5, #0]
 802062a:	b103      	cbz	r3, 802062e <_read_r+0x1e>
 802062c:	6023      	str	r3, [r4, #0]
 802062e:	bd38      	pop	{r3, r4, r5, pc}
 8020630:	24007f68 	.word	0x24007f68

08020634 <_write_r>:
 8020634:	b538      	push	{r3, r4, r5, lr}
 8020636:	4d07      	ldr	r5, [pc, #28]	; (8020654 <_write_r+0x20>)
 8020638:	4604      	mov	r4, r0
 802063a:	4608      	mov	r0, r1
 802063c:	4611      	mov	r1, r2
 802063e:	2200      	movs	r2, #0
 8020640:	602a      	str	r2, [r5, #0]
 8020642:	461a      	mov	r2, r3
 8020644:	f7e1 ffdb 	bl	80025fe <_write>
 8020648:	1c43      	adds	r3, r0, #1
 802064a:	d102      	bne.n	8020652 <_write_r+0x1e>
 802064c:	682b      	ldr	r3, [r5, #0]
 802064e:	b103      	cbz	r3, 8020652 <_write_r+0x1e>
 8020650:	6023      	str	r3, [r4, #0]
 8020652:	bd38      	pop	{r3, r4, r5, pc}
 8020654:	24007f68 	.word	0x24007f68

08020658 <__errno>:
 8020658:	4b01      	ldr	r3, [pc, #4]	; (8020660 <__errno+0x8>)
 802065a:	6818      	ldr	r0, [r3, #0]
 802065c:	4770      	bx	lr
 802065e:	bf00      	nop
 8020660:	240004c8 	.word	0x240004c8

08020664 <__libc_init_array>:
 8020664:	b570      	push	{r4, r5, r6, lr}
 8020666:	4d0d      	ldr	r5, [pc, #52]	; (802069c <__libc_init_array+0x38>)
 8020668:	4c0d      	ldr	r4, [pc, #52]	; (80206a0 <__libc_init_array+0x3c>)
 802066a:	1b64      	subs	r4, r4, r5
 802066c:	10a4      	asrs	r4, r4, #2
 802066e:	2600      	movs	r6, #0
 8020670:	42a6      	cmp	r6, r4
 8020672:	d109      	bne.n	8020688 <__libc_init_array+0x24>
 8020674:	4d0b      	ldr	r5, [pc, #44]	; (80206a4 <__libc_init_array+0x40>)
 8020676:	4c0c      	ldr	r4, [pc, #48]	; (80206a8 <__libc_init_array+0x44>)
 8020678:	f002 fcd0 	bl	802301c <_init>
 802067c:	1b64      	subs	r4, r4, r5
 802067e:	10a4      	asrs	r4, r4, #2
 8020680:	2600      	movs	r6, #0
 8020682:	42a6      	cmp	r6, r4
 8020684:	d105      	bne.n	8020692 <__libc_init_array+0x2e>
 8020686:	bd70      	pop	{r4, r5, r6, pc}
 8020688:	f855 3b04 	ldr.w	r3, [r5], #4
 802068c:	4798      	blx	r3
 802068e:	3601      	adds	r6, #1
 8020690:	e7ee      	b.n	8020670 <__libc_init_array+0xc>
 8020692:	f855 3b04 	ldr.w	r3, [r5], #4
 8020696:	4798      	blx	r3
 8020698:	3601      	adds	r6, #1
 802069a:	e7f2      	b.n	8020682 <__libc_init_array+0x1e>
 802069c:	08027530 	.word	0x08027530
 80206a0:	08027530 	.word	0x08027530
 80206a4:	08027530 	.word	0x08027530
 80206a8:	08027534 	.word	0x08027534

080206ac <__retarget_lock_init_recursive>:
 80206ac:	4770      	bx	lr

080206ae <__retarget_lock_acquire_recursive>:
 80206ae:	4770      	bx	lr

080206b0 <__retarget_lock_release_recursive>:
 80206b0:	4770      	bx	lr

080206b2 <memcpy>:
 80206b2:	440a      	add	r2, r1
 80206b4:	4291      	cmp	r1, r2
 80206b6:	f100 33ff 	add.w	r3, r0, #4294967295
 80206ba:	d100      	bne.n	80206be <memcpy+0xc>
 80206bc:	4770      	bx	lr
 80206be:	b510      	push	{r4, lr}
 80206c0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80206c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80206c8:	4291      	cmp	r1, r2
 80206ca:	d1f9      	bne.n	80206c0 <memcpy+0xe>
 80206cc:	bd10      	pop	{r4, pc}
	...

080206d0 <nan>:
 80206d0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80206d8 <nan+0x8>
 80206d4:	4770      	bx	lr
 80206d6:	bf00      	nop
 80206d8:	00000000 	.word	0x00000000
 80206dc:	7ff80000 	.word	0x7ff80000

080206e0 <nanf>:
 80206e0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80206e8 <nanf+0x8>
 80206e4:	4770      	bx	lr
 80206e6:	bf00      	nop
 80206e8:	7fc00000 	.word	0x7fc00000

080206ec <__assert_func>:
 80206ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80206ee:	4614      	mov	r4, r2
 80206f0:	461a      	mov	r2, r3
 80206f2:	4b09      	ldr	r3, [pc, #36]	; (8020718 <__assert_func+0x2c>)
 80206f4:	681b      	ldr	r3, [r3, #0]
 80206f6:	4605      	mov	r5, r0
 80206f8:	68d8      	ldr	r0, [r3, #12]
 80206fa:	b14c      	cbz	r4, 8020710 <__assert_func+0x24>
 80206fc:	4b07      	ldr	r3, [pc, #28]	; (802071c <__assert_func+0x30>)
 80206fe:	9100      	str	r1, [sp, #0]
 8020700:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8020704:	4906      	ldr	r1, [pc, #24]	; (8020720 <__assert_func+0x34>)
 8020706:	462b      	mov	r3, r5
 8020708:	f002 fa22 	bl	8022b50 <fiprintf>
 802070c:	f002 fad8 	bl	8022cc0 <abort>
 8020710:	4b04      	ldr	r3, [pc, #16]	; (8020724 <__assert_func+0x38>)
 8020712:	461c      	mov	r4, r3
 8020714:	e7f3      	b.n	80206fe <__assert_func+0x12>
 8020716:	bf00      	nop
 8020718:	240004c8 	.word	0x240004c8
 802071c:	080272aa 	.word	0x080272aa
 8020720:	080272b7 	.word	0x080272b7
 8020724:	080272e5 	.word	0x080272e5

08020728 <quorem>:
 8020728:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802072c:	6903      	ldr	r3, [r0, #16]
 802072e:	690c      	ldr	r4, [r1, #16]
 8020730:	42a3      	cmp	r3, r4
 8020732:	4607      	mov	r7, r0
 8020734:	db7e      	blt.n	8020834 <quorem+0x10c>
 8020736:	3c01      	subs	r4, #1
 8020738:	f101 0814 	add.w	r8, r1, #20
 802073c:	f100 0514 	add.w	r5, r0, #20
 8020740:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8020744:	9301      	str	r3, [sp, #4]
 8020746:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 802074a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 802074e:	3301      	adds	r3, #1
 8020750:	429a      	cmp	r2, r3
 8020752:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8020756:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 802075a:	fbb2 f6f3 	udiv	r6, r2, r3
 802075e:	d331      	bcc.n	80207c4 <quorem+0x9c>
 8020760:	f04f 0e00 	mov.w	lr, #0
 8020764:	4640      	mov	r0, r8
 8020766:	46ac      	mov	ip, r5
 8020768:	46f2      	mov	sl, lr
 802076a:	f850 2b04 	ldr.w	r2, [r0], #4
 802076e:	b293      	uxth	r3, r2
 8020770:	fb06 e303 	mla	r3, r6, r3, lr
 8020774:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8020778:	0c1a      	lsrs	r2, r3, #16
 802077a:	b29b      	uxth	r3, r3
 802077c:	ebaa 0303 	sub.w	r3, sl, r3
 8020780:	f8dc a000 	ldr.w	sl, [ip]
 8020784:	fa13 f38a 	uxtah	r3, r3, sl
 8020788:	fb06 220e 	mla	r2, r6, lr, r2
 802078c:	9300      	str	r3, [sp, #0]
 802078e:	9b00      	ldr	r3, [sp, #0]
 8020790:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8020794:	b292      	uxth	r2, r2
 8020796:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 802079a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 802079e:	f8bd 3000 	ldrh.w	r3, [sp]
 80207a2:	4581      	cmp	r9, r0
 80207a4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80207a8:	f84c 3b04 	str.w	r3, [ip], #4
 80207ac:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80207b0:	d2db      	bcs.n	802076a <quorem+0x42>
 80207b2:	f855 300b 	ldr.w	r3, [r5, fp]
 80207b6:	b92b      	cbnz	r3, 80207c4 <quorem+0x9c>
 80207b8:	9b01      	ldr	r3, [sp, #4]
 80207ba:	3b04      	subs	r3, #4
 80207bc:	429d      	cmp	r5, r3
 80207be:	461a      	mov	r2, r3
 80207c0:	d32c      	bcc.n	802081c <quorem+0xf4>
 80207c2:	613c      	str	r4, [r7, #16]
 80207c4:	4638      	mov	r0, r7
 80207c6:	f001 fc87 	bl	80220d8 <__mcmp>
 80207ca:	2800      	cmp	r0, #0
 80207cc:	db22      	blt.n	8020814 <quorem+0xec>
 80207ce:	3601      	adds	r6, #1
 80207d0:	4629      	mov	r1, r5
 80207d2:	2000      	movs	r0, #0
 80207d4:	f858 2b04 	ldr.w	r2, [r8], #4
 80207d8:	f8d1 c000 	ldr.w	ip, [r1]
 80207dc:	b293      	uxth	r3, r2
 80207de:	1ac3      	subs	r3, r0, r3
 80207e0:	0c12      	lsrs	r2, r2, #16
 80207e2:	fa13 f38c 	uxtah	r3, r3, ip
 80207e6:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80207ea:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80207ee:	b29b      	uxth	r3, r3
 80207f0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80207f4:	45c1      	cmp	r9, r8
 80207f6:	f841 3b04 	str.w	r3, [r1], #4
 80207fa:	ea4f 4022 	mov.w	r0, r2, asr #16
 80207fe:	d2e9      	bcs.n	80207d4 <quorem+0xac>
 8020800:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8020804:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8020808:	b922      	cbnz	r2, 8020814 <quorem+0xec>
 802080a:	3b04      	subs	r3, #4
 802080c:	429d      	cmp	r5, r3
 802080e:	461a      	mov	r2, r3
 8020810:	d30a      	bcc.n	8020828 <quorem+0x100>
 8020812:	613c      	str	r4, [r7, #16]
 8020814:	4630      	mov	r0, r6
 8020816:	b003      	add	sp, #12
 8020818:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802081c:	6812      	ldr	r2, [r2, #0]
 802081e:	3b04      	subs	r3, #4
 8020820:	2a00      	cmp	r2, #0
 8020822:	d1ce      	bne.n	80207c2 <quorem+0x9a>
 8020824:	3c01      	subs	r4, #1
 8020826:	e7c9      	b.n	80207bc <quorem+0x94>
 8020828:	6812      	ldr	r2, [r2, #0]
 802082a:	3b04      	subs	r3, #4
 802082c:	2a00      	cmp	r2, #0
 802082e:	d1f0      	bne.n	8020812 <quorem+0xea>
 8020830:	3c01      	subs	r4, #1
 8020832:	e7eb      	b.n	802080c <quorem+0xe4>
 8020834:	2000      	movs	r0, #0
 8020836:	e7ee      	b.n	8020816 <quorem+0xee>

08020838 <_dtoa_r>:
 8020838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802083c:	ed2d 8b02 	vpush	{d8}
 8020840:	69c5      	ldr	r5, [r0, #28]
 8020842:	b091      	sub	sp, #68	; 0x44
 8020844:	ed8d 0b02 	vstr	d0, [sp, #8]
 8020848:	ec59 8b10 	vmov	r8, r9, d0
 802084c:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 802084e:	9106      	str	r1, [sp, #24]
 8020850:	4606      	mov	r6, r0
 8020852:	9208      	str	r2, [sp, #32]
 8020854:	930c      	str	r3, [sp, #48]	; 0x30
 8020856:	b975      	cbnz	r5, 8020876 <_dtoa_r+0x3e>
 8020858:	2010      	movs	r0, #16
 802085a:	f001 f8b1 	bl	80219c0 <malloc>
 802085e:	4602      	mov	r2, r0
 8020860:	61f0      	str	r0, [r6, #28]
 8020862:	b920      	cbnz	r0, 802086e <_dtoa_r+0x36>
 8020864:	4ba6      	ldr	r3, [pc, #664]	; (8020b00 <_dtoa_r+0x2c8>)
 8020866:	21ef      	movs	r1, #239	; 0xef
 8020868:	48a6      	ldr	r0, [pc, #664]	; (8020b04 <_dtoa_r+0x2cc>)
 802086a:	f7ff ff3f 	bl	80206ec <__assert_func>
 802086e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8020872:	6005      	str	r5, [r0, #0]
 8020874:	60c5      	str	r5, [r0, #12]
 8020876:	69f3      	ldr	r3, [r6, #28]
 8020878:	6819      	ldr	r1, [r3, #0]
 802087a:	b151      	cbz	r1, 8020892 <_dtoa_r+0x5a>
 802087c:	685a      	ldr	r2, [r3, #4]
 802087e:	604a      	str	r2, [r1, #4]
 8020880:	2301      	movs	r3, #1
 8020882:	4093      	lsls	r3, r2
 8020884:	608b      	str	r3, [r1, #8]
 8020886:	4630      	mov	r0, r6
 8020888:	f001 f9a0 	bl	8021bcc <_Bfree>
 802088c:	69f3      	ldr	r3, [r6, #28]
 802088e:	2200      	movs	r2, #0
 8020890:	601a      	str	r2, [r3, #0]
 8020892:	f1b9 0300 	subs.w	r3, r9, #0
 8020896:	bfbb      	ittet	lt
 8020898:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 802089c:	9303      	strlt	r3, [sp, #12]
 802089e:	2300      	movge	r3, #0
 80208a0:	2201      	movlt	r2, #1
 80208a2:	bfac      	ite	ge
 80208a4:	6023      	strge	r3, [r4, #0]
 80208a6:	6022      	strlt	r2, [r4, #0]
 80208a8:	4b97      	ldr	r3, [pc, #604]	; (8020b08 <_dtoa_r+0x2d0>)
 80208aa:	9c03      	ldr	r4, [sp, #12]
 80208ac:	43a3      	bics	r3, r4
 80208ae:	d11c      	bne.n	80208ea <_dtoa_r+0xb2>
 80208b0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80208b2:	f242 730f 	movw	r3, #9999	; 0x270f
 80208b6:	6013      	str	r3, [r2, #0]
 80208b8:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80208bc:	ea53 0308 	orrs.w	r3, r3, r8
 80208c0:	f000 84fb 	beq.w	80212ba <_dtoa_r+0xa82>
 80208c4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80208c6:	b963      	cbnz	r3, 80208e2 <_dtoa_r+0xaa>
 80208c8:	4b90      	ldr	r3, [pc, #576]	; (8020b0c <_dtoa_r+0x2d4>)
 80208ca:	e020      	b.n	802090e <_dtoa_r+0xd6>
 80208cc:	4b90      	ldr	r3, [pc, #576]	; (8020b10 <_dtoa_r+0x2d8>)
 80208ce:	9301      	str	r3, [sp, #4]
 80208d0:	3308      	adds	r3, #8
 80208d2:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80208d4:	6013      	str	r3, [r2, #0]
 80208d6:	9801      	ldr	r0, [sp, #4]
 80208d8:	b011      	add	sp, #68	; 0x44
 80208da:	ecbd 8b02 	vpop	{d8}
 80208de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80208e2:	4b8a      	ldr	r3, [pc, #552]	; (8020b0c <_dtoa_r+0x2d4>)
 80208e4:	9301      	str	r3, [sp, #4]
 80208e6:	3303      	adds	r3, #3
 80208e8:	e7f3      	b.n	80208d2 <_dtoa_r+0x9a>
 80208ea:	ed9d 8b02 	vldr	d8, [sp, #8]
 80208ee:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80208f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80208f6:	d10c      	bne.n	8020912 <_dtoa_r+0xda>
 80208f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80208fa:	2301      	movs	r3, #1
 80208fc:	6013      	str	r3, [r2, #0]
 80208fe:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8020900:	2b00      	cmp	r3, #0
 8020902:	f000 84d7 	beq.w	80212b4 <_dtoa_r+0xa7c>
 8020906:	4b83      	ldr	r3, [pc, #524]	; (8020b14 <_dtoa_r+0x2dc>)
 8020908:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 802090a:	6013      	str	r3, [r2, #0]
 802090c:	3b01      	subs	r3, #1
 802090e:	9301      	str	r3, [sp, #4]
 8020910:	e7e1      	b.n	80208d6 <_dtoa_r+0x9e>
 8020912:	aa0e      	add	r2, sp, #56	; 0x38
 8020914:	a90f      	add	r1, sp, #60	; 0x3c
 8020916:	4630      	mov	r0, r6
 8020918:	eeb0 0b48 	vmov.f64	d0, d8
 802091c:	f001 fcf2 	bl	8022304 <__d2b>
 8020920:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8020924:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8020926:	4605      	mov	r5, r0
 8020928:	2b00      	cmp	r3, #0
 802092a:	d046      	beq.n	80209ba <_dtoa_r+0x182>
 802092c:	eeb0 7b48 	vmov.f64	d7, d8
 8020930:	ee18 1a90 	vmov	r1, s17
 8020934:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8020938:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 802093c:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8020940:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8020944:	2000      	movs	r0, #0
 8020946:	ee07 1a90 	vmov	s15, r1
 802094a:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 802094e:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8020ae8 <_dtoa_r+0x2b0>
 8020952:	ee37 7b46 	vsub.f64	d7, d7, d6
 8020956:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8020af0 <_dtoa_r+0x2b8>
 802095a:	eea7 6b05 	vfma.f64	d6, d7, d5
 802095e:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8020af8 <_dtoa_r+0x2c0>
 8020962:	ee07 3a90 	vmov	s15, r3
 8020966:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 802096a:	eeb0 7b46 	vmov.f64	d7, d6
 802096e:	eea4 7b05 	vfma.f64	d7, d4, d5
 8020972:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8020976:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 802097a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802097e:	ee16 ba90 	vmov	fp, s13
 8020982:	9009      	str	r0, [sp, #36]	; 0x24
 8020984:	d508      	bpl.n	8020998 <_dtoa_r+0x160>
 8020986:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 802098a:	eeb4 6b47 	vcmp.f64	d6, d7
 802098e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020992:	bf18      	it	ne
 8020994:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8020998:	f1bb 0f16 	cmp.w	fp, #22
 802099c:	d82b      	bhi.n	80209f6 <_dtoa_r+0x1be>
 802099e:	495e      	ldr	r1, [pc, #376]	; (8020b18 <_dtoa_r+0x2e0>)
 80209a0:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 80209a4:	ed91 7b00 	vldr	d7, [r1]
 80209a8:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80209ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80209b0:	d501      	bpl.n	80209b6 <_dtoa_r+0x17e>
 80209b2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80209b6:	2100      	movs	r1, #0
 80209b8:	e01e      	b.n	80209f8 <_dtoa_r+0x1c0>
 80209ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80209bc:	4413      	add	r3, r2
 80209be:	f203 4132 	addw	r1, r3, #1074	; 0x432
 80209c2:	2920      	cmp	r1, #32
 80209c4:	bfc1      	itttt	gt
 80209c6:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 80209ca:	408c      	lslgt	r4, r1
 80209cc:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 80209d0:	fa28 f101 	lsrgt.w	r1, r8, r1
 80209d4:	bfd6      	itet	le
 80209d6:	f1c1 0120 	rsble	r1, r1, #32
 80209da:	4321      	orrgt	r1, r4
 80209dc:	fa08 f101 	lslle.w	r1, r8, r1
 80209e0:	ee07 1a90 	vmov	s15, r1
 80209e4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80209e8:	3b01      	subs	r3, #1
 80209ea:	ee17 1a90 	vmov	r1, s15
 80209ee:	2001      	movs	r0, #1
 80209f0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80209f4:	e7a7      	b.n	8020946 <_dtoa_r+0x10e>
 80209f6:	2101      	movs	r1, #1
 80209f8:	1ad2      	subs	r2, r2, r3
 80209fa:	1e53      	subs	r3, r2, #1
 80209fc:	9305      	str	r3, [sp, #20]
 80209fe:	bf45      	ittet	mi
 8020a00:	f1c2 0301 	rsbmi	r3, r2, #1
 8020a04:	9304      	strmi	r3, [sp, #16]
 8020a06:	2300      	movpl	r3, #0
 8020a08:	2300      	movmi	r3, #0
 8020a0a:	bf4c      	ite	mi
 8020a0c:	9305      	strmi	r3, [sp, #20]
 8020a0e:	9304      	strpl	r3, [sp, #16]
 8020a10:	f1bb 0f00 	cmp.w	fp, #0
 8020a14:	910b      	str	r1, [sp, #44]	; 0x2c
 8020a16:	db18      	blt.n	8020a4a <_dtoa_r+0x212>
 8020a18:	9b05      	ldr	r3, [sp, #20]
 8020a1a:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8020a1e:	445b      	add	r3, fp
 8020a20:	9305      	str	r3, [sp, #20]
 8020a22:	2300      	movs	r3, #0
 8020a24:	9a06      	ldr	r2, [sp, #24]
 8020a26:	2a09      	cmp	r2, #9
 8020a28:	d848      	bhi.n	8020abc <_dtoa_r+0x284>
 8020a2a:	2a05      	cmp	r2, #5
 8020a2c:	bfc4      	itt	gt
 8020a2e:	3a04      	subgt	r2, #4
 8020a30:	9206      	strgt	r2, [sp, #24]
 8020a32:	9a06      	ldr	r2, [sp, #24]
 8020a34:	f1a2 0202 	sub.w	r2, r2, #2
 8020a38:	bfcc      	ite	gt
 8020a3a:	2400      	movgt	r4, #0
 8020a3c:	2401      	movle	r4, #1
 8020a3e:	2a03      	cmp	r2, #3
 8020a40:	d847      	bhi.n	8020ad2 <_dtoa_r+0x29a>
 8020a42:	e8df f002 	tbb	[pc, r2]
 8020a46:	2d0b      	.short	0x2d0b
 8020a48:	392b      	.short	0x392b
 8020a4a:	9b04      	ldr	r3, [sp, #16]
 8020a4c:	2200      	movs	r2, #0
 8020a4e:	eba3 030b 	sub.w	r3, r3, fp
 8020a52:	9304      	str	r3, [sp, #16]
 8020a54:	920a      	str	r2, [sp, #40]	; 0x28
 8020a56:	f1cb 0300 	rsb	r3, fp, #0
 8020a5a:	e7e3      	b.n	8020a24 <_dtoa_r+0x1ec>
 8020a5c:	2200      	movs	r2, #0
 8020a5e:	9207      	str	r2, [sp, #28]
 8020a60:	9a08      	ldr	r2, [sp, #32]
 8020a62:	2a00      	cmp	r2, #0
 8020a64:	dc38      	bgt.n	8020ad8 <_dtoa_r+0x2a0>
 8020a66:	f04f 0a01 	mov.w	sl, #1
 8020a6a:	46d1      	mov	r9, sl
 8020a6c:	4652      	mov	r2, sl
 8020a6e:	f8cd a020 	str.w	sl, [sp, #32]
 8020a72:	69f7      	ldr	r7, [r6, #28]
 8020a74:	2100      	movs	r1, #0
 8020a76:	2004      	movs	r0, #4
 8020a78:	f100 0c14 	add.w	ip, r0, #20
 8020a7c:	4594      	cmp	ip, r2
 8020a7e:	d930      	bls.n	8020ae2 <_dtoa_r+0x2aa>
 8020a80:	6079      	str	r1, [r7, #4]
 8020a82:	4630      	mov	r0, r6
 8020a84:	930d      	str	r3, [sp, #52]	; 0x34
 8020a86:	f001 f861 	bl	8021b4c <_Balloc>
 8020a8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8020a8c:	9001      	str	r0, [sp, #4]
 8020a8e:	4602      	mov	r2, r0
 8020a90:	2800      	cmp	r0, #0
 8020a92:	d145      	bne.n	8020b20 <_dtoa_r+0x2e8>
 8020a94:	4b21      	ldr	r3, [pc, #132]	; (8020b1c <_dtoa_r+0x2e4>)
 8020a96:	f240 11af 	movw	r1, #431	; 0x1af
 8020a9a:	e6e5      	b.n	8020868 <_dtoa_r+0x30>
 8020a9c:	2201      	movs	r2, #1
 8020a9e:	e7de      	b.n	8020a5e <_dtoa_r+0x226>
 8020aa0:	2200      	movs	r2, #0
 8020aa2:	9207      	str	r2, [sp, #28]
 8020aa4:	9a08      	ldr	r2, [sp, #32]
 8020aa6:	eb0b 0a02 	add.w	sl, fp, r2
 8020aaa:	f10a 0901 	add.w	r9, sl, #1
 8020aae:	464a      	mov	r2, r9
 8020ab0:	2a01      	cmp	r2, #1
 8020ab2:	bfb8      	it	lt
 8020ab4:	2201      	movlt	r2, #1
 8020ab6:	e7dc      	b.n	8020a72 <_dtoa_r+0x23a>
 8020ab8:	2201      	movs	r2, #1
 8020aba:	e7f2      	b.n	8020aa2 <_dtoa_r+0x26a>
 8020abc:	2401      	movs	r4, #1
 8020abe:	2200      	movs	r2, #0
 8020ac0:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8020ac4:	f04f 3aff 	mov.w	sl, #4294967295
 8020ac8:	2100      	movs	r1, #0
 8020aca:	46d1      	mov	r9, sl
 8020acc:	2212      	movs	r2, #18
 8020ace:	9108      	str	r1, [sp, #32]
 8020ad0:	e7cf      	b.n	8020a72 <_dtoa_r+0x23a>
 8020ad2:	2201      	movs	r2, #1
 8020ad4:	9207      	str	r2, [sp, #28]
 8020ad6:	e7f5      	b.n	8020ac4 <_dtoa_r+0x28c>
 8020ad8:	f8dd a020 	ldr.w	sl, [sp, #32]
 8020adc:	46d1      	mov	r9, sl
 8020ade:	4652      	mov	r2, sl
 8020ae0:	e7c7      	b.n	8020a72 <_dtoa_r+0x23a>
 8020ae2:	3101      	adds	r1, #1
 8020ae4:	0040      	lsls	r0, r0, #1
 8020ae6:	e7c7      	b.n	8020a78 <_dtoa_r+0x240>
 8020ae8:	636f4361 	.word	0x636f4361
 8020aec:	3fd287a7 	.word	0x3fd287a7
 8020af0:	8b60c8b3 	.word	0x8b60c8b3
 8020af4:	3fc68a28 	.word	0x3fc68a28
 8020af8:	509f79fb 	.word	0x509f79fb
 8020afc:	3fd34413 	.word	0x3fd34413
 8020b00:	080270a4 	.word	0x080270a4
 8020b04:	080272f3 	.word	0x080272f3
 8020b08:	7ff00000 	.word	0x7ff00000
 8020b0c:	080272ef 	.word	0x080272ef
 8020b10:	080272e6 	.word	0x080272e6
 8020b14:	0802727a 	.word	0x0802727a
 8020b18:	08027440 	.word	0x08027440
 8020b1c:	0802734b 	.word	0x0802734b
 8020b20:	69f2      	ldr	r2, [r6, #28]
 8020b22:	9901      	ldr	r1, [sp, #4]
 8020b24:	6011      	str	r1, [r2, #0]
 8020b26:	f1b9 0f0e 	cmp.w	r9, #14
 8020b2a:	d86c      	bhi.n	8020c06 <_dtoa_r+0x3ce>
 8020b2c:	2c00      	cmp	r4, #0
 8020b2e:	d06a      	beq.n	8020c06 <_dtoa_r+0x3ce>
 8020b30:	f1bb 0f00 	cmp.w	fp, #0
 8020b34:	f340 80a0 	ble.w	8020c78 <_dtoa_r+0x440>
 8020b38:	4ac1      	ldr	r2, [pc, #772]	; (8020e40 <_dtoa_r+0x608>)
 8020b3a:	f00b 010f 	and.w	r1, fp, #15
 8020b3e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8020b42:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8020b46:	ed92 7b00 	vldr	d7, [r2]
 8020b4a:	ea4f 122b 	mov.w	r2, fp, asr #4
 8020b4e:	f000 8087 	beq.w	8020c60 <_dtoa_r+0x428>
 8020b52:	49bc      	ldr	r1, [pc, #752]	; (8020e44 <_dtoa_r+0x60c>)
 8020b54:	ed91 6b08 	vldr	d6, [r1, #32]
 8020b58:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8020b5c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8020b60:	f002 020f 	and.w	r2, r2, #15
 8020b64:	2103      	movs	r1, #3
 8020b66:	48b7      	ldr	r0, [pc, #732]	; (8020e44 <_dtoa_r+0x60c>)
 8020b68:	2a00      	cmp	r2, #0
 8020b6a:	d17b      	bne.n	8020c64 <_dtoa_r+0x42c>
 8020b6c:	ed9d 6b02 	vldr	d6, [sp, #8]
 8020b70:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8020b74:	ed8d 7b02 	vstr	d7, [sp, #8]
 8020b78:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8020b7a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8020b7e:	2a00      	cmp	r2, #0
 8020b80:	f000 80a0 	beq.w	8020cc4 <_dtoa_r+0x48c>
 8020b84:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8020b88:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8020b8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020b90:	f140 8098 	bpl.w	8020cc4 <_dtoa_r+0x48c>
 8020b94:	f1b9 0f00 	cmp.w	r9, #0
 8020b98:	f000 8094 	beq.w	8020cc4 <_dtoa_r+0x48c>
 8020b9c:	f1ba 0f00 	cmp.w	sl, #0
 8020ba0:	dd2f      	ble.n	8020c02 <_dtoa_r+0x3ca>
 8020ba2:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8020ba6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8020baa:	ed8d 7b02 	vstr	d7, [sp, #8]
 8020bae:	f10b 32ff 	add.w	r2, fp, #4294967295
 8020bb2:	3101      	adds	r1, #1
 8020bb4:	4654      	mov	r4, sl
 8020bb6:	ed9d 6b02 	vldr	d6, [sp, #8]
 8020bba:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8020bbe:	ee07 1a90 	vmov	s15, r1
 8020bc2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8020bc6:	eea7 5b06 	vfma.f64	d5, d7, d6
 8020bca:	ee15 7a90 	vmov	r7, s11
 8020bce:	ec51 0b15 	vmov	r0, r1, d5
 8020bd2:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 8020bd6:	2c00      	cmp	r4, #0
 8020bd8:	d177      	bne.n	8020cca <_dtoa_r+0x492>
 8020bda:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8020bde:	ee36 6b47 	vsub.f64	d6, d6, d7
 8020be2:	ec41 0b17 	vmov	d7, r0, r1
 8020be6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8020bea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020bee:	f300 826a 	bgt.w	80210c6 <_dtoa_r+0x88e>
 8020bf2:	eeb1 7b47 	vneg.f64	d7, d7
 8020bf6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8020bfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020bfe:	f100 8260 	bmi.w	80210c2 <_dtoa_r+0x88a>
 8020c02:	ed8d 8b02 	vstr	d8, [sp, #8]
 8020c06:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8020c08:	2a00      	cmp	r2, #0
 8020c0a:	f2c0 811d 	blt.w	8020e48 <_dtoa_r+0x610>
 8020c0e:	f1bb 0f0e 	cmp.w	fp, #14
 8020c12:	f300 8119 	bgt.w	8020e48 <_dtoa_r+0x610>
 8020c16:	4b8a      	ldr	r3, [pc, #552]	; (8020e40 <_dtoa_r+0x608>)
 8020c18:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8020c1c:	ed93 6b00 	vldr	d6, [r3]
 8020c20:	9b08      	ldr	r3, [sp, #32]
 8020c22:	2b00      	cmp	r3, #0
 8020c24:	f280 80b7 	bge.w	8020d96 <_dtoa_r+0x55e>
 8020c28:	f1b9 0f00 	cmp.w	r9, #0
 8020c2c:	f300 80b3 	bgt.w	8020d96 <_dtoa_r+0x55e>
 8020c30:	f040 8246 	bne.w	80210c0 <_dtoa_r+0x888>
 8020c34:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8020c38:	ee26 6b07 	vmul.f64	d6, d6, d7
 8020c3c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8020c40:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8020c44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020c48:	464c      	mov	r4, r9
 8020c4a:	464f      	mov	r7, r9
 8020c4c:	f280 821c 	bge.w	8021088 <_dtoa_r+0x850>
 8020c50:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8020c54:	2331      	movs	r3, #49	; 0x31
 8020c56:	f808 3b01 	strb.w	r3, [r8], #1
 8020c5a:	f10b 0b01 	add.w	fp, fp, #1
 8020c5e:	e218      	b.n	8021092 <_dtoa_r+0x85a>
 8020c60:	2102      	movs	r1, #2
 8020c62:	e780      	b.n	8020b66 <_dtoa_r+0x32e>
 8020c64:	07d4      	lsls	r4, r2, #31
 8020c66:	d504      	bpl.n	8020c72 <_dtoa_r+0x43a>
 8020c68:	ed90 6b00 	vldr	d6, [r0]
 8020c6c:	3101      	adds	r1, #1
 8020c6e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8020c72:	1052      	asrs	r2, r2, #1
 8020c74:	3008      	adds	r0, #8
 8020c76:	e777      	b.n	8020b68 <_dtoa_r+0x330>
 8020c78:	d022      	beq.n	8020cc0 <_dtoa_r+0x488>
 8020c7a:	f1cb 0200 	rsb	r2, fp, #0
 8020c7e:	4970      	ldr	r1, [pc, #448]	; (8020e40 <_dtoa_r+0x608>)
 8020c80:	f002 000f 	and.w	r0, r2, #15
 8020c84:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8020c88:	ed91 7b00 	vldr	d7, [r1]
 8020c8c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8020c90:	ed8d 7b02 	vstr	d7, [sp, #8]
 8020c94:	486b      	ldr	r0, [pc, #428]	; (8020e44 <_dtoa_r+0x60c>)
 8020c96:	1112      	asrs	r2, r2, #4
 8020c98:	2400      	movs	r4, #0
 8020c9a:	2102      	movs	r1, #2
 8020c9c:	b92a      	cbnz	r2, 8020caa <_dtoa_r+0x472>
 8020c9e:	2c00      	cmp	r4, #0
 8020ca0:	f43f af6a 	beq.w	8020b78 <_dtoa_r+0x340>
 8020ca4:	ed8d 7b02 	vstr	d7, [sp, #8]
 8020ca8:	e766      	b.n	8020b78 <_dtoa_r+0x340>
 8020caa:	07d7      	lsls	r7, r2, #31
 8020cac:	d505      	bpl.n	8020cba <_dtoa_r+0x482>
 8020cae:	ed90 6b00 	vldr	d6, [r0]
 8020cb2:	3101      	adds	r1, #1
 8020cb4:	2401      	movs	r4, #1
 8020cb6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8020cba:	1052      	asrs	r2, r2, #1
 8020cbc:	3008      	adds	r0, #8
 8020cbe:	e7ed      	b.n	8020c9c <_dtoa_r+0x464>
 8020cc0:	2102      	movs	r1, #2
 8020cc2:	e759      	b.n	8020b78 <_dtoa_r+0x340>
 8020cc4:	465a      	mov	r2, fp
 8020cc6:	464c      	mov	r4, r9
 8020cc8:	e775      	b.n	8020bb6 <_dtoa_r+0x37e>
 8020cca:	ec41 0b17 	vmov	d7, r0, r1
 8020cce:	495c      	ldr	r1, [pc, #368]	; (8020e40 <_dtoa_r+0x608>)
 8020cd0:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8020cd4:	ed11 4b02 	vldr	d4, [r1, #-8]
 8020cd8:	9901      	ldr	r1, [sp, #4]
 8020cda:	440c      	add	r4, r1
 8020cdc:	9907      	ldr	r1, [sp, #28]
 8020cde:	b351      	cbz	r1, 8020d36 <_dtoa_r+0x4fe>
 8020ce0:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8020ce4:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8020ce8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8020cec:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8020cf0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8020cf4:	ee35 7b47 	vsub.f64	d7, d5, d7
 8020cf8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8020cfc:	ee14 1a90 	vmov	r1, s9
 8020d00:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8020d04:	3130      	adds	r1, #48	; 0x30
 8020d06:	ee36 6b45 	vsub.f64	d6, d6, d5
 8020d0a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8020d0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020d12:	f808 1b01 	strb.w	r1, [r8], #1
 8020d16:	d439      	bmi.n	8020d8c <_dtoa_r+0x554>
 8020d18:	ee32 5b46 	vsub.f64	d5, d2, d6
 8020d1c:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8020d20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020d24:	d472      	bmi.n	8020e0c <_dtoa_r+0x5d4>
 8020d26:	45a0      	cmp	r8, r4
 8020d28:	f43f af6b 	beq.w	8020c02 <_dtoa_r+0x3ca>
 8020d2c:	ee27 7b03 	vmul.f64	d7, d7, d3
 8020d30:	ee26 6b03 	vmul.f64	d6, d6, d3
 8020d34:	e7e0      	b.n	8020cf8 <_dtoa_r+0x4c0>
 8020d36:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8020d3a:	ee27 7b04 	vmul.f64	d7, d7, d4
 8020d3e:	4620      	mov	r0, r4
 8020d40:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8020d44:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8020d48:	ee14 1a90 	vmov	r1, s9
 8020d4c:	3130      	adds	r1, #48	; 0x30
 8020d4e:	f808 1b01 	strb.w	r1, [r8], #1
 8020d52:	45a0      	cmp	r8, r4
 8020d54:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8020d58:	ee36 6b45 	vsub.f64	d6, d6, d5
 8020d5c:	d118      	bne.n	8020d90 <_dtoa_r+0x558>
 8020d5e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8020d62:	ee37 4b05 	vadd.f64	d4, d7, d5
 8020d66:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8020d6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020d6e:	dc4d      	bgt.n	8020e0c <_dtoa_r+0x5d4>
 8020d70:	ee35 5b47 	vsub.f64	d5, d5, d7
 8020d74:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8020d78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020d7c:	f57f af41 	bpl.w	8020c02 <_dtoa_r+0x3ca>
 8020d80:	4680      	mov	r8, r0
 8020d82:	3801      	subs	r0, #1
 8020d84:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8020d88:	2b30      	cmp	r3, #48	; 0x30
 8020d8a:	d0f9      	beq.n	8020d80 <_dtoa_r+0x548>
 8020d8c:	4693      	mov	fp, r2
 8020d8e:	e02a      	b.n	8020de6 <_dtoa_r+0x5ae>
 8020d90:	ee26 6b03 	vmul.f64	d6, d6, d3
 8020d94:	e7d6      	b.n	8020d44 <_dtoa_r+0x50c>
 8020d96:	ed9d 7b02 	vldr	d7, [sp, #8]
 8020d9a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8020d9e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8020da2:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8020da6:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8020daa:	ee15 3a10 	vmov	r3, s10
 8020dae:	3330      	adds	r3, #48	; 0x30
 8020db0:	f808 3b01 	strb.w	r3, [r8], #1
 8020db4:	9b01      	ldr	r3, [sp, #4]
 8020db6:	eba8 0303 	sub.w	r3, r8, r3
 8020dba:	4599      	cmp	r9, r3
 8020dbc:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8020dc0:	eea3 7b46 	vfms.f64	d7, d3, d6
 8020dc4:	d133      	bne.n	8020e2e <_dtoa_r+0x5f6>
 8020dc6:	ee37 7b07 	vadd.f64	d7, d7, d7
 8020dca:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8020dce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020dd2:	dc1a      	bgt.n	8020e0a <_dtoa_r+0x5d2>
 8020dd4:	eeb4 7b46 	vcmp.f64	d7, d6
 8020dd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020ddc:	d103      	bne.n	8020de6 <_dtoa_r+0x5ae>
 8020dde:	ee15 3a10 	vmov	r3, s10
 8020de2:	07d9      	lsls	r1, r3, #31
 8020de4:	d411      	bmi.n	8020e0a <_dtoa_r+0x5d2>
 8020de6:	4629      	mov	r1, r5
 8020de8:	4630      	mov	r0, r6
 8020dea:	f000 feef 	bl	8021bcc <_Bfree>
 8020dee:	2300      	movs	r3, #0
 8020df0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8020df2:	f888 3000 	strb.w	r3, [r8]
 8020df6:	f10b 0301 	add.w	r3, fp, #1
 8020dfa:	6013      	str	r3, [r2, #0]
 8020dfc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8020dfe:	2b00      	cmp	r3, #0
 8020e00:	f43f ad69 	beq.w	80208d6 <_dtoa_r+0x9e>
 8020e04:	f8c3 8000 	str.w	r8, [r3]
 8020e08:	e565      	b.n	80208d6 <_dtoa_r+0x9e>
 8020e0a:	465a      	mov	r2, fp
 8020e0c:	4643      	mov	r3, r8
 8020e0e:	4698      	mov	r8, r3
 8020e10:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 8020e14:	2939      	cmp	r1, #57	; 0x39
 8020e16:	d106      	bne.n	8020e26 <_dtoa_r+0x5ee>
 8020e18:	9901      	ldr	r1, [sp, #4]
 8020e1a:	4299      	cmp	r1, r3
 8020e1c:	d1f7      	bne.n	8020e0e <_dtoa_r+0x5d6>
 8020e1e:	9801      	ldr	r0, [sp, #4]
 8020e20:	2130      	movs	r1, #48	; 0x30
 8020e22:	3201      	adds	r2, #1
 8020e24:	7001      	strb	r1, [r0, #0]
 8020e26:	7819      	ldrb	r1, [r3, #0]
 8020e28:	3101      	adds	r1, #1
 8020e2a:	7019      	strb	r1, [r3, #0]
 8020e2c:	e7ae      	b.n	8020d8c <_dtoa_r+0x554>
 8020e2e:	ee27 7b04 	vmul.f64	d7, d7, d4
 8020e32:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8020e36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020e3a:	d1b2      	bne.n	8020da2 <_dtoa_r+0x56a>
 8020e3c:	e7d3      	b.n	8020de6 <_dtoa_r+0x5ae>
 8020e3e:	bf00      	nop
 8020e40:	08027440 	.word	0x08027440
 8020e44:	08027418 	.word	0x08027418
 8020e48:	9907      	ldr	r1, [sp, #28]
 8020e4a:	2900      	cmp	r1, #0
 8020e4c:	f000 80d0 	beq.w	8020ff0 <_dtoa_r+0x7b8>
 8020e50:	9906      	ldr	r1, [sp, #24]
 8020e52:	2901      	cmp	r1, #1
 8020e54:	f300 80b4 	bgt.w	8020fc0 <_dtoa_r+0x788>
 8020e58:	9909      	ldr	r1, [sp, #36]	; 0x24
 8020e5a:	2900      	cmp	r1, #0
 8020e5c:	f000 80ac 	beq.w	8020fb8 <_dtoa_r+0x780>
 8020e60:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8020e64:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8020e68:	461c      	mov	r4, r3
 8020e6a:	9309      	str	r3, [sp, #36]	; 0x24
 8020e6c:	9b04      	ldr	r3, [sp, #16]
 8020e6e:	4413      	add	r3, r2
 8020e70:	9304      	str	r3, [sp, #16]
 8020e72:	9b05      	ldr	r3, [sp, #20]
 8020e74:	2101      	movs	r1, #1
 8020e76:	4413      	add	r3, r2
 8020e78:	4630      	mov	r0, r6
 8020e7a:	9305      	str	r3, [sp, #20]
 8020e7c:	f000 ffa6 	bl	8021dcc <__i2b>
 8020e80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020e82:	4607      	mov	r7, r0
 8020e84:	f1b8 0f00 	cmp.w	r8, #0
 8020e88:	d00d      	beq.n	8020ea6 <_dtoa_r+0x66e>
 8020e8a:	9a05      	ldr	r2, [sp, #20]
 8020e8c:	2a00      	cmp	r2, #0
 8020e8e:	dd0a      	ble.n	8020ea6 <_dtoa_r+0x66e>
 8020e90:	4542      	cmp	r2, r8
 8020e92:	9904      	ldr	r1, [sp, #16]
 8020e94:	bfa8      	it	ge
 8020e96:	4642      	movge	r2, r8
 8020e98:	1a89      	subs	r1, r1, r2
 8020e9a:	9104      	str	r1, [sp, #16]
 8020e9c:	9905      	ldr	r1, [sp, #20]
 8020e9e:	eba8 0802 	sub.w	r8, r8, r2
 8020ea2:	1a8a      	subs	r2, r1, r2
 8020ea4:	9205      	str	r2, [sp, #20]
 8020ea6:	b303      	cbz	r3, 8020eea <_dtoa_r+0x6b2>
 8020ea8:	9a07      	ldr	r2, [sp, #28]
 8020eaa:	2a00      	cmp	r2, #0
 8020eac:	f000 80a5 	beq.w	8020ffa <_dtoa_r+0x7c2>
 8020eb0:	2c00      	cmp	r4, #0
 8020eb2:	dd13      	ble.n	8020edc <_dtoa_r+0x6a4>
 8020eb4:	4639      	mov	r1, r7
 8020eb6:	4622      	mov	r2, r4
 8020eb8:	4630      	mov	r0, r6
 8020eba:	930d      	str	r3, [sp, #52]	; 0x34
 8020ebc:	f001 f846 	bl	8021f4c <__pow5mult>
 8020ec0:	462a      	mov	r2, r5
 8020ec2:	4601      	mov	r1, r0
 8020ec4:	4607      	mov	r7, r0
 8020ec6:	4630      	mov	r0, r6
 8020ec8:	f000 ff96 	bl	8021df8 <__multiply>
 8020ecc:	4629      	mov	r1, r5
 8020ece:	9009      	str	r0, [sp, #36]	; 0x24
 8020ed0:	4630      	mov	r0, r6
 8020ed2:	f000 fe7b 	bl	8021bcc <_Bfree>
 8020ed6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020ed8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8020eda:	4615      	mov	r5, r2
 8020edc:	1b1a      	subs	r2, r3, r4
 8020ede:	d004      	beq.n	8020eea <_dtoa_r+0x6b2>
 8020ee0:	4629      	mov	r1, r5
 8020ee2:	4630      	mov	r0, r6
 8020ee4:	f001 f832 	bl	8021f4c <__pow5mult>
 8020ee8:	4605      	mov	r5, r0
 8020eea:	2101      	movs	r1, #1
 8020eec:	4630      	mov	r0, r6
 8020eee:	f000 ff6d 	bl	8021dcc <__i2b>
 8020ef2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020ef4:	2b00      	cmp	r3, #0
 8020ef6:	4604      	mov	r4, r0
 8020ef8:	f340 8081 	ble.w	8020ffe <_dtoa_r+0x7c6>
 8020efc:	461a      	mov	r2, r3
 8020efe:	4601      	mov	r1, r0
 8020f00:	4630      	mov	r0, r6
 8020f02:	f001 f823 	bl	8021f4c <__pow5mult>
 8020f06:	9b06      	ldr	r3, [sp, #24]
 8020f08:	2b01      	cmp	r3, #1
 8020f0a:	4604      	mov	r4, r0
 8020f0c:	dd7a      	ble.n	8021004 <_dtoa_r+0x7cc>
 8020f0e:	2300      	movs	r3, #0
 8020f10:	9309      	str	r3, [sp, #36]	; 0x24
 8020f12:	6922      	ldr	r2, [r4, #16]
 8020f14:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8020f18:	6910      	ldr	r0, [r2, #16]
 8020f1a:	f000 ff09 	bl	8021d30 <__hi0bits>
 8020f1e:	f1c0 0020 	rsb	r0, r0, #32
 8020f22:	9b05      	ldr	r3, [sp, #20]
 8020f24:	4418      	add	r0, r3
 8020f26:	f010 001f 	ands.w	r0, r0, #31
 8020f2a:	f000 8093 	beq.w	8021054 <_dtoa_r+0x81c>
 8020f2e:	f1c0 0220 	rsb	r2, r0, #32
 8020f32:	2a04      	cmp	r2, #4
 8020f34:	f340 8085 	ble.w	8021042 <_dtoa_r+0x80a>
 8020f38:	9b04      	ldr	r3, [sp, #16]
 8020f3a:	f1c0 001c 	rsb	r0, r0, #28
 8020f3e:	4403      	add	r3, r0
 8020f40:	9304      	str	r3, [sp, #16]
 8020f42:	9b05      	ldr	r3, [sp, #20]
 8020f44:	4480      	add	r8, r0
 8020f46:	4403      	add	r3, r0
 8020f48:	9305      	str	r3, [sp, #20]
 8020f4a:	9b04      	ldr	r3, [sp, #16]
 8020f4c:	2b00      	cmp	r3, #0
 8020f4e:	dd05      	ble.n	8020f5c <_dtoa_r+0x724>
 8020f50:	4629      	mov	r1, r5
 8020f52:	461a      	mov	r2, r3
 8020f54:	4630      	mov	r0, r6
 8020f56:	f001 f853 	bl	8022000 <__lshift>
 8020f5a:	4605      	mov	r5, r0
 8020f5c:	9b05      	ldr	r3, [sp, #20]
 8020f5e:	2b00      	cmp	r3, #0
 8020f60:	dd05      	ble.n	8020f6e <_dtoa_r+0x736>
 8020f62:	4621      	mov	r1, r4
 8020f64:	461a      	mov	r2, r3
 8020f66:	4630      	mov	r0, r6
 8020f68:	f001 f84a 	bl	8022000 <__lshift>
 8020f6c:	4604      	mov	r4, r0
 8020f6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020f70:	2b00      	cmp	r3, #0
 8020f72:	d071      	beq.n	8021058 <_dtoa_r+0x820>
 8020f74:	4621      	mov	r1, r4
 8020f76:	4628      	mov	r0, r5
 8020f78:	f001 f8ae 	bl	80220d8 <__mcmp>
 8020f7c:	2800      	cmp	r0, #0
 8020f7e:	da6b      	bge.n	8021058 <_dtoa_r+0x820>
 8020f80:	2300      	movs	r3, #0
 8020f82:	4629      	mov	r1, r5
 8020f84:	220a      	movs	r2, #10
 8020f86:	4630      	mov	r0, r6
 8020f88:	f000 fe42 	bl	8021c10 <__multadd>
 8020f8c:	9b07      	ldr	r3, [sp, #28]
 8020f8e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8020f92:	4605      	mov	r5, r0
 8020f94:	2b00      	cmp	r3, #0
 8020f96:	f000 8197 	beq.w	80212c8 <_dtoa_r+0xa90>
 8020f9a:	4639      	mov	r1, r7
 8020f9c:	2300      	movs	r3, #0
 8020f9e:	220a      	movs	r2, #10
 8020fa0:	4630      	mov	r0, r6
 8020fa2:	f000 fe35 	bl	8021c10 <__multadd>
 8020fa6:	f1ba 0f00 	cmp.w	sl, #0
 8020faa:	4607      	mov	r7, r0
 8020fac:	f300 8093 	bgt.w	80210d6 <_dtoa_r+0x89e>
 8020fb0:	9b06      	ldr	r3, [sp, #24]
 8020fb2:	2b02      	cmp	r3, #2
 8020fb4:	dc57      	bgt.n	8021066 <_dtoa_r+0x82e>
 8020fb6:	e08e      	b.n	80210d6 <_dtoa_r+0x89e>
 8020fb8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8020fba:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8020fbe:	e751      	b.n	8020e64 <_dtoa_r+0x62c>
 8020fc0:	f109 34ff 	add.w	r4, r9, #4294967295
 8020fc4:	42a3      	cmp	r3, r4
 8020fc6:	bfbf      	itttt	lt
 8020fc8:	1ae2      	sublt	r2, r4, r3
 8020fca:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8020fcc:	189b      	addlt	r3, r3, r2
 8020fce:	930a      	strlt	r3, [sp, #40]	; 0x28
 8020fd0:	bfae      	itee	ge
 8020fd2:	1b1c      	subge	r4, r3, r4
 8020fd4:	4623      	movlt	r3, r4
 8020fd6:	2400      	movlt	r4, #0
 8020fd8:	f1b9 0f00 	cmp.w	r9, #0
 8020fdc:	bfb5      	itete	lt
 8020fde:	9a04      	ldrlt	r2, [sp, #16]
 8020fe0:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8020fe4:	eba2 0809 	sublt.w	r8, r2, r9
 8020fe8:	464a      	movge	r2, r9
 8020fea:	bfb8      	it	lt
 8020fec:	2200      	movlt	r2, #0
 8020fee:	e73c      	b.n	8020e6a <_dtoa_r+0x632>
 8020ff0:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8020ff4:	9f07      	ldr	r7, [sp, #28]
 8020ff6:	461c      	mov	r4, r3
 8020ff8:	e744      	b.n	8020e84 <_dtoa_r+0x64c>
 8020ffa:	461a      	mov	r2, r3
 8020ffc:	e770      	b.n	8020ee0 <_dtoa_r+0x6a8>
 8020ffe:	9b06      	ldr	r3, [sp, #24]
 8021000:	2b01      	cmp	r3, #1
 8021002:	dc18      	bgt.n	8021036 <_dtoa_r+0x7fe>
 8021004:	9b02      	ldr	r3, [sp, #8]
 8021006:	b9b3      	cbnz	r3, 8021036 <_dtoa_r+0x7fe>
 8021008:	9b03      	ldr	r3, [sp, #12]
 802100a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 802100e:	b9a2      	cbnz	r2, 802103a <_dtoa_r+0x802>
 8021010:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8021014:	0d12      	lsrs	r2, r2, #20
 8021016:	0512      	lsls	r2, r2, #20
 8021018:	b18a      	cbz	r2, 802103e <_dtoa_r+0x806>
 802101a:	9b04      	ldr	r3, [sp, #16]
 802101c:	3301      	adds	r3, #1
 802101e:	9304      	str	r3, [sp, #16]
 8021020:	9b05      	ldr	r3, [sp, #20]
 8021022:	3301      	adds	r3, #1
 8021024:	9305      	str	r3, [sp, #20]
 8021026:	2301      	movs	r3, #1
 8021028:	9309      	str	r3, [sp, #36]	; 0x24
 802102a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802102c:	2b00      	cmp	r3, #0
 802102e:	f47f af70 	bne.w	8020f12 <_dtoa_r+0x6da>
 8021032:	2001      	movs	r0, #1
 8021034:	e775      	b.n	8020f22 <_dtoa_r+0x6ea>
 8021036:	2300      	movs	r3, #0
 8021038:	e7f6      	b.n	8021028 <_dtoa_r+0x7f0>
 802103a:	9b02      	ldr	r3, [sp, #8]
 802103c:	e7f4      	b.n	8021028 <_dtoa_r+0x7f0>
 802103e:	9209      	str	r2, [sp, #36]	; 0x24
 8021040:	e7f3      	b.n	802102a <_dtoa_r+0x7f2>
 8021042:	d082      	beq.n	8020f4a <_dtoa_r+0x712>
 8021044:	9b04      	ldr	r3, [sp, #16]
 8021046:	321c      	adds	r2, #28
 8021048:	4413      	add	r3, r2
 802104a:	9304      	str	r3, [sp, #16]
 802104c:	9b05      	ldr	r3, [sp, #20]
 802104e:	4490      	add	r8, r2
 8021050:	4413      	add	r3, r2
 8021052:	e779      	b.n	8020f48 <_dtoa_r+0x710>
 8021054:	4602      	mov	r2, r0
 8021056:	e7f5      	b.n	8021044 <_dtoa_r+0x80c>
 8021058:	f1b9 0f00 	cmp.w	r9, #0
 802105c:	dc36      	bgt.n	80210cc <_dtoa_r+0x894>
 802105e:	9b06      	ldr	r3, [sp, #24]
 8021060:	2b02      	cmp	r3, #2
 8021062:	dd33      	ble.n	80210cc <_dtoa_r+0x894>
 8021064:	46ca      	mov	sl, r9
 8021066:	f1ba 0f00 	cmp.w	sl, #0
 802106a:	d10d      	bne.n	8021088 <_dtoa_r+0x850>
 802106c:	4621      	mov	r1, r4
 802106e:	4653      	mov	r3, sl
 8021070:	2205      	movs	r2, #5
 8021072:	4630      	mov	r0, r6
 8021074:	f000 fdcc 	bl	8021c10 <__multadd>
 8021078:	4601      	mov	r1, r0
 802107a:	4604      	mov	r4, r0
 802107c:	4628      	mov	r0, r5
 802107e:	f001 f82b 	bl	80220d8 <__mcmp>
 8021082:	2800      	cmp	r0, #0
 8021084:	f73f ade4 	bgt.w	8020c50 <_dtoa_r+0x418>
 8021088:	9b08      	ldr	r3, [sp, #32]
 802108a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 802108e:	ea6f 0b03 	mvn.w	fp, r3
 8021092:	f04f 0900 	mov.w	r9, #0
 8021096:	4621      	mov	r1, r4
 8021098:	4630      	mov	r0, r6
 802109a:	f000 fd97 	bl	8021bcc <_Bfree>
 802109e:	2f00      	cmp	r7, #0
 80210a0:	f43f aea1 	beq.w	8020de6 <_dtoa_r+0x5ae>
 80210a4:	f1b9 0f00 	cmp.w	r9, #0
 80210a8:	d005      	beq.n	80210b6 <_dtoa_r+0x87e>
 80210aa:	45b9      	cmp	r9, r7
 80210ac:	d003      	beq.n	80210b6 <_dtoa_r+0x87e>
 80210ae:	4649      	mov	r1, r9
 80210b0:	4630      	mov	r0, r6
 80210b2:	f000 fd8b 	bl	8021bcc <_Bfree>
 80210b6:	4639      	mov	r1, r7
 80210b8:	4630      	mov	r0, r6
 80210ba:	f000 fd87 	bl	8021bcc <_Bfree>
 80210be:	e692      	b.n	8020de6 <_dtoa_r+0x5ae>
 80210c0:	2400      	movs	r4, #0
 80210c2:	4627      	mov	r7, r4
 80210c4:	e7e0      	b.n	8021088 <_dtoa_r+0x850>
 80210c6:	4693      	mov	fp, r2
 80210c8:	4627      	mov	r7, r4
 80210ca:	e5c1      	b.n	8020c50 <_dtoa_r+0x418>
 80210cc:	9b07      	ldr	r3, [sp, #28]
 80210ce:	46ca      	mov	sl, r9
 80210d0:	2b00      	cmp	r3, #0
 80210d2:	f000 8100 	beq.w	80212d6 <_dtoa_r+0xa9e>
 80210d6:	f1b8 0f00 	cmp.w	r8, #0
 80210da:	dd05      	ble.n	80210e8 <_dtoa_r+0x8b0>
 80210dc:	4639      	mov	r1, r7
 80210de:	4642      	mov	r2, r8
 80210e0:	4630      	mov	r0, r6
 80210e2:	f000 ff8d 	bl	8022000 <__lshift>
 80210e6:	4607      	mov	r7, r0
 80210e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80210ea:	2b00      	cmp	r3, #0
 80210ec:	d05d      	beq.n	80211aa <_dtoa_r+0x972>
 80210ee:	6879      	ldr	r1, [r7, #4]
 80210f0:	4630      	mov	r0, r6
 80210f2:	f000 fd2b 	bl	8021b4c <_Balloc>
 80210f6:	4680      	mov	r8, r0
 80210f8:	b928      	cbnz	r0, 8021106 <_dtoa_r+0x8ce>
 80210fa:	4b82      	ldr	r3, [pc, #520]	; (8021304 <_dtoa_r+0xacc>)
 80210fc:	4602      	mov	r2, r0
 80210fe:	f240 21ef 	movw	r1, #751	; 0x2ef
 8021102:	f7ff bbb1 	b.w	8020868 <_dtoa_r+0x30>
 8021106:	693a      	ldr	r2, [r7, #16]
 8021108:	3202      	adds	r2, #2
 802110a:	0092      	lsls	r2, r2, #2
 802110c:	f107 010c 	add.w	r1, r7, #12
 8021110:	300c      	adds	r0, #12
 8021112:	f7ff face 	bl	80206b2 <memcpy>
 8021116:	2201      	movs	r2, #1
 8021118:	4641      	mov	r1, r8
 802111a:	4630      	mov	r0, r6
 802111c:	f000 ff70 	bl	8022000 <__lshift>
 8021120:	9b01      	ldr	r3, [sp, #4]
 8021122:	3301      	adds	r3, #1
 8021124:	9304      	str	r3, [sp, #16]
 8021126:	9b01      	ldr	r3, [sp, #4]
 8021128:	4453      	add	r3, sl
 802112a:	9308      	str	r3, [sp, #32]
 802112c:	9b02      	ldr	r3, [sp, #8]
 802112e:	f003 0301 	and.w	r3, r3, #1
 8021132:	46b9      	mov	r9, r7
 8021134:	9307      	str	r3, [sp, #28]
 8021136:	4607      	mov	r7, r0
 8021138:	9b04      	ldr	r3, [sp, #16]
 802113a:	4621      	mov	r1, r4
 802113c:	3b01      	subs	r3, #1
 802113e:	4628      	mov	r0, r5
 8021140:	9302      	str	r3, [sp, #8]
 8021142:	f7ff faf1 	bl	8020728 <quorem>
 8021146:	4603      	mov	r3, r0
 8021148:	3330      	adds	r3, #48	; 0x30
 802114a:	9005      	str	r0, [sp, #20]
 802114c:	4649      	mov	r1, r9
 802114e:	4628      	mov	r0, r5
 8021150:	9309      	str	r3, [sp, #36]	; 0x24
 8021152:	f000 ffc1 	bl	80220d8 <__mcmp>
 8021156:	463a      	mov	r2, r7
 8021158:	4682      	mov	sl, r0
 802115a:	4621      	mov	r1, r4
 802115c:	4630      	mov	r0, r6
 802115e:	f000 ffd7 	bl	8022110 <__mdiff>
 8021162:	68c2      	ldr	r2, [r0, #12]
 8021164:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021166:	4680      	mov	r8, r0
 8021168:	bb0a      	cbnz	r2, 80211ae <_dtoa_r+0x976>
 802116a:	4601      	mov	r1, r0
 802116c:	4628      	mov	r0, r5
 802116e:	f000 ffb3 	bl	80220d8 <__mcmp>
 8021172:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021174:	4602      	mov	r2, r0
 8021176:	4641      	mov	r1, r8
 8021178:	4630      	mov	r0, r6
 802117a:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 802117e:	f000 fd25 	bl	8021bcc <_Bfree>
 8021182:	9b06      	ldr	r3, [sp, #24]
 8021184:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8021186:	f8dd 8010 	ldr.w	r8, [sp, #16]
 802118a:	ea43 0102 	orr.w	r1, r3, r2
 802118e:	9b07      	ldr	r3, [sp, #28]
 8021190:	4319      	orrs	r1, r3
 8021192:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021194:	d10d      	bne.n	80211b2 <_dtoa_r+0x97a>
 8021196:	2b39      	cmp	r3, #57	; 0x39
 8021198:	d029      	beq.n	80211ee <_dtoa_r+0x9b6>
 802119a:	f1ba 0f00 	cmp.w	sl, #0
 802119e:	dd01      	ble.n	80211a4 <_dtoa_r+0x96c>
 80211a0:	9b05      	ldr	r3, [sp, #20]
 80211a2:	3331      	adds	r3, #49	; 0x31
 80211a4:	9a02      	ldr	r2, [sp, #8]
 80211a6:	7013      	strb	r3, [r2, #0]
 80211a8:	e775      	b.n	8021096 <_dtoa_r+0x85e>
 80211aa:	4638      	mov	r0, r7
 80211ac:	e7b8      	b.n	8021120 <_dtoa_r+0x8e8>
 80211ae:	2201      	movs	r2, #1
 80211b0:	e7e1      	b.n	8021176 <_dtoa_r+0x93e>
 80211b2:	f1ba 0f00 	cmp.w	sl, #0
 80211b6:	db06      	blt.n	80211c6 <_dtoa_r+0x98e>
 80211b8:	9906      	ldr	r1, [sp, #24]
 80211ba:	ea41 0a0a 	orr.w	sl, r1, sl
 80211be:	9907      	ldr	r1, [sp, #28]
 80211c0:	ea5a 0a01 	orrs.w	sl, sl, r1
 80211c4:	d120      	bne.n	8021208 <_dtoa_r+0x9d0>
 80211c6:	2a00      	cmp	r2, #0
 80211c8:	ddec      	ble.n	80211a4 <_dtoa_r+0x96c>
 80211ca:	4629      	mov	r1, r5
 80211cc:	2201      	movs	r2, #1
 80211ce:	4630      	mov	r0, r6
 80211d0:	9304      	str	r3, [sp, #16]
 80211d2:	f000 ff15 	bl	8022000 <__lshift>
 80211d6:	4621      	mov	r1, r4
 80211d8:	4605      	mov	r5, r0
 80211da:	f000 ff7d 	bl	80220d8 <__mcmp>
 80211de:	2800      	cmp	r0, #0
 80211e0:	9b04      	ldr	r3, [sp, #16]
 80211e2:	dc02      	bgt.n	80211ea <_dtoa_r+0x9b2>
 80211e4:	d1de      	bne.n	80211a4 <_dtoa_r+0x96c>
 80211e6:	07da      	lsls	r2, r3, #31
 80211e8:	d5dc      	bpl.n	80211a4 <_dtoa_r+0x96c>
 80211ea:	2b39      	cmp	r3, #57	; 0x39
 80211ec:	d1d8      	bne.n	80211a0 <_dtoa_r+0x968>
 80211ee:	9a02      	ldr	r2, [sp, #8]
 80211f0:	2339      	movs	r3, #57	; 0x39
 80211f2:	7013      	strb	r3, [r2, #0]
 80211f4:	4643      	mov	r3, r8
 80211f6:	4698      	mov	r8, r3
 80211f8:	3b01      	subs	r3, #1
 80211fa:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 80211fe:	2a39      	cmp	r2, #57	; 0x39
 8021200:	d051      	beq.n	80212a6 <_dtoa_r+0xa6e>
 8021202:	3201      	adds	r2, #1
 8021204:	701a      	strb	r2, [r3, #0]
 8021206:	e746      	b.n	8021096 <_dtoa_r+0x85e>
 8021208:	2a00      	cmp	r2, #0
 802120a:	dd03      	ble.n	8021214 <_dtoa_r+0x9dc>
 802120c:	2b39      	cmp	r3, #57	; 0x39
 802120e:	d0ee      	beq.n	80211ee <_dtoa_r+0x9b6>
 8021210:	3301      	adds	r3, #1
 8021212:	e7c7      	b.n	80211a4 <_dtoa_r+0x96c>
 8021214:	9a04      	ldr	r2, [sp, #16]
 8021216:	9908      	ldr	r1, [sp, #32]
 8021218:	f802 3c01 	strb.w	r3, [r2, #-1]
 802121c:	428a      	cmp	r2, r1
 802121e:	d02b      	beq.n	8021278 <_dtoa_r+0xa40>
 8021220:	4629      	mov	r1, r5
 8021222:	2300      	movs	r3, #0
 8021224:	220a      	movs	r2, #10
 8021226:	4630      	mov	r0, r6
 8021228:	f000 fcf2 	bl	8021c10 <__multadd>
 802122c:	45b9      	cmp	r9, r7
 802122e:	4605      	mov	r5, r0
 8021230:	f04f 0300 	mov.w	r3, #0
 8021234:	f04f 020a 	mov.w	r2, #10
 8021238:	4649      	mov	r1, r9
 802123a:	4630      	mov	r0, r6
 802123c:	d107      	bne.n	802124e <_dtoa_r+0xa16>
 802123e:	f000 fce7 	bl	8021c10 <__multadd>
 8021242:	4681      	mov	r9, r0
 8021244:	4607      	mov	r7, r0
 8021246:	9b04      	ldr	r3, [sp, #16]
 8021248:	3301      	adds	r3, #1
 802124a:	9304      	str	r3, [sp, #16]
 802124c:	e774      	b.n	8021138 <_dtoa_r+0x900>
 802124e:	f000 fcdf 	bl	8021c10 <__multadd>
 8021252:	4639      	mov	r1, r7
 8021254:	4681      	mov	r9, r0
 8021256:	2300      	movs	r3, #0
 8021258:	220a      	movs	r2, #10
 802125a:	4630      	mov	r0, r6
 802125c:	f000 fcd8 	bl	8021c10 <__multadd>
 8021260:	4607      	mov	r7, r0
 8021262:	e7f0      	b.n	8021246 <_dtoa_r+0xa0e>
 8021264:	f1ba 0f00 	cmp.w	sl, #0
 8021268:	9a01      	ldr	r2, [sp, #4]
 802126a:	bfcc      	ite	gt
 802126c:	46d0      	movgt	r8, sl
 802126e:	f04f 0801 	movle.w	r8, #1
 8021272:	4490      	add	r8, r2
 8021274:	f04f 0900 	mov.w	r9, #0
 8021278:	4629      	mov	r1, r5
 802127a:	2201      	movs	r2, #1
 802127c:	4630      	mov	r0, r6
 802127e:	9302      	str	r3, [sp, #8]
 8021280:	f000 febe 	bl	8022000 <__lshift>
 8021284:	4621      	mov	r1, r4
 8021286:	4605      	mov	r5, r0
 8021288:	f000 ff26 	bl	80220d8 <__mcmp>
 802128c:	2800      	cmp	r0, #0
 802128e:	dcb1      	bgt.n	80211f4 <_dtoa_r+0x9bc>
 8021290:	d102      	bne.n	8021298 <_dtoa_r+0xa60>
 8021292:	9b02      	ldr	r3, [sp, #8]
 8021294:	07db      	lsls	r3, r3, #31
 8021296:	d4ad      	bmi.n	80211f4 <_dtoa_r+0x9bc>
 8021298:	4643      	mov	r3, r8
 802129a:	4698      	mov	r8, r3
 802129c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80212a0:	2a30      	cmp	r2, #48	; 0x30
 80212a2:	d0fa      	beq.n	802129a <_dtoa_r+0xa62>
 80212a4:	e6f7      	b.n	8021096 <_dtoa_r+0x85e>
 80212a6:	9a01      	ldr	r2, [sp, #4]
 80212a8:	429a      	cmp	r2, r3
 80212aa:	d1a4      	bne.n	80211f6 <_dtoa_r+0x9be>
 80212ac:	f10b 0b01 	add.w	fp, fp, #1
 80212b0:	2331      	movs	r3, #49	; 0x31
 80212b2:	e778      	b.n	80211a6 <_dtoa_r+0x96e>
 80212b4:	4b14      	ldr	r3, [pc, #80]	; (8021308 <_dtoa_r+0xad0>)
 80212b6:	f7ff bb2a 	b.w	802090e <_dtoa_r+0xd6>
 80212ba:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80212bc:	2b00      	cmp	r3, #0
 80212be:	f47f ab05 	bne.w	80208cc <_dtoa_r+0x94>
 80212c2:	4b12      	ldr	r3, [pc, #72]	; (802130c <_dtoa_r+0xad4>)
 80212c4:	f7ff bb23 	b.w	802090e <_dtoa_r+0xd6>
 80212c8:	f1ba 0f00 	cmp.w	sl, #0
 80212cc:	dc03      	bgt.n	80212d6 <_dtoa_r+0xa9e>
 80212ce:	9b06      	ldr	r3, [sp, #24]
 80212d0:	2b02      	cmp	r3, #2
 80212d2:	f73f aec8 	bgt.w	8021066 <_dtoa_r+0x82e>
 80212d6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80212da:	4621      	mov	r1, r4
 80212dc:	4628      	mov	r0, r5
 80212de:	f7ff fa23 	bl	8020728 <quorem>
 80212e2:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80212e6:	f808 3b01 	strb.w	r3, [r8], #1
 80212ea:	9a01      	ldr	r2, [sp, #4]
 80212ec:	eba8 0202 	sub.w	r2, r8, r2
 80212f0:	4592      	cmp	sl, r2
 80212f2:	ddb7      	ble.n	8021264 <_dtoa_r+0xa2c>
 80212f4:	4629      	mov	r1, r5
 80212f6:	2300      	movs	r3, #0
 80212f8:	220a      	movs	r2, #10
 80212fa:	4630      	mov	r0, r6
 80212fc:	f000 fc88 	bl	8021c10 <__multadd>
 8021300:	4605      	mov	r5, r0
 8021302:	e7ea      	b.n	80212da <_dtoa_r+0xaa2>
 8021304:	0802734b 	.word	0x0802734b
 8021308:	08027279 	.word	0x08027279
 802130c:	080272e6 	.word	0x080272e6

08021310 <rshift>:
 8021310:	6903      	ldr	r3, [r0, #16]
 8021312:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8021316:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 802131a:	ea4f 1261 	mov.w	r2, r1, asr #5
 802131e:	f100 0414 	add.w	r4, r0, #20
 8021322:	dd45      	ble.n	80213b0 <rshift+0xa0>
 8021324:	f011 011f 	ands.w	r1, r1, #31
 8021328:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 802132c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8021330:	d10c      	bne.n	802134c <rshift+0x3c>
 8021332:	f100 0710 	add.w	r7, r0, #16
 8021336:	4629      	mov	r1, r5
 8021338:	42b1      	cmp	r1, r6
 802133a:	d334      	bcc.n	80213a6 <rshift+0x96>
 802133c:	1a9b      	subs	r3, r3, r2
 802133e:	009b      	lsls	r3, r3, #2
 8021340:	1eea      	subs	r2, r5, #3
 8021342:	4296      	cmp	r6, r2
 8021344:	bf38      	it	cc
 8021346:	2300      	movcc	r3, #0
 8021348:	4423      	add	r3, r4
 802134a:	e015      	b.n	8021378 <rshift+0x68>
 802134c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8021350:	f1c1 0820 	rsb	r8, r1, #32
 8021354:	40cf      	lsrs	r7, r1
 8021356:	f105 0e04 	add.w	lr, r5, #4
 802135a:	46a1      	mov	r9, r4
 802135c:	4576      	cmp	r6, lr
 802135e:	46f4      	mov	ip, lr
 8021360:	d815      	bhi.n	802138e <rshift+0x7e>
 8021362:	1a9a      	subs	r2, r3, r2
 8021364:	0092      	lsls	r2, r2, #2
 8021366:	3a04      	subs	r2, #4
 8021368:	3501      	adds	r5, #1
 802136a:	42ae      	cmp	r6, r5
 802136c:	bf38      	it	cc
 802136e:	2200      	movcc	r2, #0
 8021370:	18a3      	adds	r3, r4, r2
 8021372:	50a7      	str	r7, [r4, r2]
 8021374:	b107      	cbz	r7, 8021378 <rshift+0x68>
 8021376:	3304      	adds	r3, #4
 8021378:	1b1a      	subs	r2, r3, r4
 802137a:	42a3      	cmp	r3, r4
 802137c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8021380:	bf08      	it	eq
 8021382:	2300      	moveq	r3, #0
 8021384:	6102      	str	r2, [r0, #16]
 8021386:	bf08      	it	eq
 8021388:	6143      	streq	r3, [r0, #20]
 802138a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802138e:	f8dc c000 	ldr.w	ip, [ip]
 8021392:	fa0c fc08 	lsl.w	ip, ip, r8
 8021396:	ea4c 0707 	orr.w	r7, ip, r7
 802139a:	f849 7b04 	str.w	r7, [r9], #4
 802139e:	f85e 7b04 	ldr.w	r7, [lr], #4
 80213a2:	40cf      	lsrs	r7, r1
 80213a4:	e7da      	b.n	802135c <rshift+0x4c>
 80213a6:	f851 cb04 	ldr.w	ip, [r1], #4
 80213aa:	f847 cf04 	str.w	ip, [r7, #4]!
 80213ae:	e7c3      	b.n	8021338 <rshift+0x28>
 80213b0:	4623      	mov	r3, r4
 80213b2:	e7e1      	b.n	8021378 <rshift+0x68>

080213b4 <__hexdig_fun>:
 80213b4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80213b8:	2b09      	cmp	r3, #9
 80213ba:	d802      	bhi.n	80213c2 <__hexdig_fun+0xe>
 80213bc:	3820      	subs	r0, #32
 80213be:	b2c0      	uxtb	r0, r0
 80213c0:	4770      	bx	lr
 80213c2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80213c6:	2b05      	cmp	r3, #5
 80213c8:	d801      	bhi.n	80213ce <__hexdig_fun+0x1a>
 80213ca:	3847      	subs	r0, #71	; 0x47
 80213cc:	e7f7      	b.n	80213be <__hexdig_fun+0xa>
 80213ce:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80213d2:	2b05      	cmp	r3, #5
 80213d4:	d801      	bhi.n	80213da <__hexdig_fun+0x26>
 80213d6:	3827      	subs	r0, #39	; 0x27
 80213d8:	e7f1      	b.n	80213be <__hexdig_fun+0xa>
 80213da:	2000      	movs	r0, #0
 80213dc:	4770      	bx	lr
	...

080213e0 <__gethex>:
 80213e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80213e4:	4617      	mov	r7, r2
 80213e6:	680a      	ldr	r2, [r1, #0]
 80213e8:	b085      	sub	sp, #20
 80213ea:	f102 0b02 	add.w	fp, r2, #2
 80213ee:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80213f2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80213f6:	4681      	mov	r9, r0
 80213f8:	468a      	mov	sl, r1
 80213fa:	9302      	str	r3, [sp, #8]
 80213fc:	32fe      	adds	r2, #254	; 0xfe
 80213fe:	eb02 030b 	add.w	r3, r2, fp
 8021402:	46d8      	mov	r8, fp
 8021404:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8021408:	9301      	str	r3, [sp, #4]
 802140a:	2830      	cmp	r0, #48	; 0x30
 802140c:	d0f7      	beq.n	80213fe <__gethex+0x1e>
 802140e:	f7ff ffd1 	bl	80213b4 <__hexdig_fun>
 8021412:	4604      	mov	r4, r0
 8021414:	2800      	cmp	r0, #0
 8021416:	d138      	bne.n	802148a <__gethex+0xaa>
 8021418:	49a7      	ldr	r1, [pc, #668]	; (80216b8 <__gethex+0x2d8>)
 802141a:	2201      	movs	r2, #1
 802141c:	4640      	mov	r0, r8
 802141e:	f7ff f8be 	bl	802059e <strncmp>
 8021422:	4606      	mov	r6, r0
 8021424:	2800      	cmp	r0, #0
 8021426:	d169      	bne.n	80214fc <__gethex+0x11c>
 8021428:	f898 0001 	ldrb.w	r0, [r8, #1]
 802142c:	465d      	mov	r5, fp
 802142e:	f7ff ffc1 	bl	80213b4 <__hexdig_fun>
 8021432:	2800      	cmp	r0, #0
 8021434:	d064      	beq.n	8021500 <__gethex+0x120>
 8021436:	465a      	mov	r2, fp
 8021438:	7810      	ldrb	r0, [r2, #0]
 802143a:	2830      	cmp	r0, #48	; 0x30
 802143c:	4690      	mov	r8, r2
 802143e:	f102 0201 	add.w	r2, r2, #1
 8021442:	d0f9      	beq.n	8021438 <__gethex+0x58>
 8021444:	f7ff ffb6 	bl	80213b4 <__hexdig_fun>
 8021448:	2301      	movs	r3, #1
 802144a:	fab0 f480 	clz	r4, r0
 802144e:	0964      	lsrs	r4, r4, #5
 8021450:	465e      	mov	r6, fp
 8021452:	9301      	str	r3, [sp, #4]
 8021454:	4642      	mov	r2, r8
 8021456:	4615      	mov	r5, r2
 8021458:	3201      	adds	r2, #1
 802145a:	7828      	ldrb	r0, [r5, #0]
 802145c:	f7ff ffaa 	bl	80213b4 <__hexdig_fun>
 8021460:	2800      	cmp	r0, #0
 8021462:	d1f8      	bne.n	8021456 <__gethex+0x76>
 8021464:	4994      	ldr	r1, [pc, #592]	; (80216b8 <__gethex+0x2d8>)
 8021466:	2201      	movs	r2, #1
 8021468:	4628      	mov	r0, r5
 802146a:	f7ff f898 	bl	802059e <strncmp>
 802146e:	b978      	cbnz	r0, 8021490 <__gethex+0xb0>
 8021470:	b946      	cbnz	r6, 8021484 <__gethex+0xa4>
 8021472:	1c6e      	adds	r6, r5, #1
 8021474:	4632      	mov	r2, r6
 8021476:	4615      	mov	r5, r2
 8021478:	3201      	adds	r2, #1
 802147a:	7828      	ldrb	r0, [r5, #0]
 802147c:	f7ff ff9a 	bl	80213b4 <__hexdig_fun>
 8021480:	2800      	cmp	r0, #0
 8021482:	d1f8      	bne.n	8021476 <__gethex+0x96>
 8021484:	1b73      	subs	r3, r6, r5
 8021486:	009e      	lsls	r6, r3, #2
 8021488:	e004      	b.n	8021494 <__gethex+0xb4>
 802148a:	2400      	movs	r4, #0
 802148c:	4626      	mov	r6, r4
 802148e:	e7e1      	b.n	8021454 <__gethex+0x74>
 8021490:	2e00      	cmp	r6, #0
 8021492:	d1f7      	bne.n	8021484 <__gethex+0xa4>
 8021494:	782b      	ldrb	r3, [r5, #0]
 8021496:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 802149a:	2b50      	cmp	r3, #80	; 0x50
 802149c:	d13d      	bne.n	802151a <__gethex+0x13a>
 802149e:	786b      	ldrb	r3, [r5, #1]
 80214a0:	2b2b      	cmp	r3, #43	; 0x2b
 80214a2:	d02f      	beq.n	8021504 <__gethex+0x124>
 80214a4:	2b2d      	cmp	r3, #45	; 0x2d
 80214a6:	d031      	beq.n	802150c <__gethex+0x12c>
 80214a8:	1c69      	adds	r1, r5, #1
 80214aa:	f04f 0b00 	mov.w	fp, #0
 80214ae:	7808      	ldrb	r0, [r1, #0]
 80214b0:	f7ff ff80 	bl	80213b4 <__hexdig_fun>
 80214b4:	1e42      	subs	r2, r0, #1
 80214b6:	b2d2      	uxtb	r2, r2
 80214b8:	2a18      	cmp	r2, #24
 80214ba:	d82e      	bhi.n	802151a <__gethex+0x13a>
 80214bc:	f1a0 0210 	sub.w	r2, r0, #16
 80214c0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80214c4:	f7ff ff76 	bl	80213b4 <__hexdig_fun>
 80214c8:	f100 3cff 	add.w	ip, r0, #4294967295
 80214cc:	fa5f fc8c 	uxtb.w	ip, ip
 80214d0:	f1bc 0f18 	cmp.w	ip, #24
 80214d4:	d91d      	bls.n	8021512 <__gethex+0x132>
 80214d6:	f1bb 0f00 	cmp.w	fp, #0
 80214da:	d000      	beq.n	80214de <__gethex+0xfe>
 80214dc:	4252      	negs	r2, r2
 80214de:	4416      	add	r6, r2
 80214e0:	f8ca 1000 	str.w	r1, [sl]
 80214e4:	b1dc      	cbz	r4, 802151e <__gethex+0x13e>
 80214e6:	9b01      	ldr	r3, [sp, #4]
 80214e8:	2b00      	cmp	r3, #0
 80214ea:	bf14      	ite	ne
 80214ec:	f04f 0800 	movne.w	r8, #0
 80214f0:	f04f 0806 	moveq.w	r8, #6
 80214f4:	4640      	mov	r0, r8
 80214f6:	b005      	add	sp, #20
 80214f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80214fc:	4645      	mov	r5, r8
 80214fe:	4626      	mov	r6, r4
 8021500:	2401      	movs	r4, #1
 8021502:	e7c7      	b.n	8021494 <__gethex+0xb4>
 8021504:	f04f 0b00 	mov.w	fp, #0
 8021508:	1ca9      	adds	r1, r5, #2
 802150a:	e7d0      	b.n	80214ae <__gethex+0xce>
 802150c:	f04f 0b01 	mov.w	fp, #1
 8021510:	e7fa      	b.n	8021508 <__gethex+0x128>
 8021512:	230a      	movs	r3, #10
 8021514:	fb03 0002 	mla	r0, r3, r2, r0
 8021518:	e7d0      	b.n	80214bc <__gethex+0xdc>
 802151a:	4629      	mov	r1, r5
 802151c:	e7e0      	b.n	80214e0 <__gethex+0x100>
 802151e:	eba5 0308 	sub.w	r3, r5, r8
 8021522:	3b01      	subs	r3, #1
 8021524:	4621      	mov	r1, r4
 8021526:	2b07      	cmp	r3, #7
 8021528:	dc0a      	bgt.n	8021540 <__gethex+0x160>
 802152a:	4648      	mov	r0, r9
 802152c:	f000 fb0e 	bl	8021b4c <_Balloc>
 8021530:	4604      	mov	r4, r0
 8021532:	b940      	cbnz	r0, 8021546 <__gethex+0x166>
 8021534:	4b61      	ldr	r3, [pc, #388]	; (80216bc <__gethex+0x2dc>)
 8021536:	4602      	mov	r2, r0
 8021538:	21e4      	movs	r1, #228	; 0xe4
 802153a:	4861      	ldr	r0, [pc, #388]	; (80216c0 <__gethex+0x2e0>)
 802153c:	f7ff f8d6 	bl	80206ec <__assert_func>
 8021540:	3101      	adds	r1, #1
 8021542:	105b      	asrs	r3, r3, #1
 8021544:	e7ef      	b.n	8021526 <__gethex+0x146>
 8021546:	f100 0a14 	add.w	sl, r0, #20
 802154a:	2300      	movs	r3, #0
 802154c:	495a      	ldr	r1, [pc, #360]	; (80216b8 <__gethex+0x2d8>)
 802154e:	f8cd a004 	str.w	sl, [sp, #4]
 8021552:	469b      	mov	fp, r3
 8021554:	45a8      	cmp	r8, r5
 8021556:	d342      	bcc.n	80215de <__gethex+0x1fe>
 8021558:	9801      	ldr	r0, [sp, #4]
 802155a:	f840 bb04 	str.w	fp, [r0], #4
 802155e:	eba0 000a 	sub.w	r0, r0, sl
 8021562:	1080      	asrs	r0, r0, #2
 8021564:	6120      	str	r0, [r4, #16]
 8021566:	ea4f 1840 	mov.w	r8, r0, lsl #5
 802156a:	4658      	mov	r0, fp
 802156c:	f000 fbe0 	bl	8021d30 <__hi0bits>
 8021570:	683d      	ldr	r5, [r7, #0]
 8021572:	eba8 0000 	sub.w	r0, r8, r0
 8021576:	42a8      	cmp	r0, r5
 8021578:	dd59      	ble.n	802162e <__gethex+0x24e>
 802157a:	eba0 0805 	sub.w	r8, r0, r5
 802157e:	4641      	mov	r1, r8
 8021580:	4620      	mov	r0, r4
 8021582:	f000 ff6c 	bl	802245e <__any_on>
 8021586:	4683      	mov	fp, r0
 8021588:	b1b8      	cbz	r0, 80215ba <__gethex+0x1da>
 802158a:	f108 33ff 	add.w	r3, r8, #4294967295
 802158e:	1159      	asrs	r1, r3, #5
 8021590:	f003 021f 	and.w	r2, r3, #31
 8021594:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8021598:	f04f 0b01 	mov.w	fp, #1
 802159c:	fa0b f202 	lsl.w	r2, fp, r2
 80215a0:	420a      	tst	r2, r1
 80215a2:	d00a      	beq.n	80215ba <__gethex+0x1da>
 80215a4:	455b      	cmp	r3, fp
 80215a6:	dd06      	ble.n	80215b6 <__gethex+0x1d6>
 80215a8:	f1a8 0102 	sub.w	r1, r8, #2
 80215ac:	4620      	mov	r0, r4
 80215ae:	f000 ff56 	bl	802245e <__any_on>
 80215b2:	2800      	cmp	r0, #0
 80215b4:	d138      	bne.n	8021628 <__gethex+0x248>
 80215b6:	f04f 0b02 	mov.w	fp, #2
 80215ba:	4641      	mov	r1, r8
 80215bc:	4620      	mov	r0, r4
 80215be:	f7ff fea7 	bl	8021310 <rshift>
 80215c2:	4446      	add	r6, r8
 80215c4:	68bb      	ldr	r3, [r7, #8]
 80215c6:	42b3      	cmp	r3, r6
 80215c8:	da41      	bge.n	802164e <__gethex+0x26e>
 80215ca:	4621      	mov	r1, r4
 80215cc:	4648      	mov	r0, r9
 80215ce:	f000 fafd 	bl	8021bcc <_Bfree>
 80215d2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80215d4:	2300      	movs	r3, #0
 80215d6:	6013      	str	r3, [r2, #0]
 80215d8:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 80215dc:	e78a      	b.n	80214f4 <__gethex+0x114>
 80215de:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 80215e2:	2a2e      	cmp	r2, #46	; 0x2e
 80215e4:	d014      	beq.n	8021610 <__gethex+0x230>
 80215e6:	2b20      	cmp	r3, #32
 80215e8:	d106      	bne.n	80215f8 <__gethex+0x218>
 80215ea:	9b01      	ldr	r3, [sp, #4]
 80215ec:	f843 bb04 	str.w	fp, [r3], #4
 80215f0:	f04f 0b00 	mov.w	fp, #0
 80215f4:	9301      	str	r3, [sp, #4]
 80215f6:	465b      	mov	r3, fp
 80215f8:	7828      	ldrb	r0, [r5, #0]
 80215fa:	9303      	str	r3, [sp, #12]
 80215fc:	f7ff feda 	bl	80213b4 <__hexdig_fun>
 8021600:	9b03      	ldr	r3, [sp, #12]
 8021602:	f000 000f 	and.w	r0, r0, #15
 8021606:	4098      	lsls	r0, r3
 8021608:	ea4b 0b00 	orr.w	fp, fp, r0
 802160c:	3304      	adds	r3, #4
 802160e:	e7a1      	b.n	8021554 <__gethex+0x174>
 8021610:	45a8      	cmp	r8, r5
 8021612:	d8e8      	bhi.n	80215e6 <__gethex+0x206>
 8021614:	2201      	movs	r2, #1
 8021616:	4628      	mov	r0, r5
 8021618:	9303      	str	r3, [sp, #12]
 802161a:	f7fe ffc0 	bl	802059e <strncmp>
 802161e:	4926      	ldr	r1, [pc, #152]	; (80216b8 <__gethex+0x2d8>)
 8021620:	9b03      	ldr	r3, [sp, #12]
 8021622:	2800      	cmp	r0, #0
 8021624:	d1df      	bne.n	80215e6 <__gethex+0x206>
 8021626:	e795      	b.n	8021554 <__gethex+0x174>
 8021628:	f04f 0b03 	mov.w	fp, #3
 802162c:	e7c5      	b.n	80215ba <__gethex+0x1da>
 802162e:	da0b      	bge.n	8021648 <__gethex+0x268>
 8021630:	eba5 0800 	sub.w	r8, r5, r0
 8021634:	4621      	mov	r1, r4
 8021636:	4642      	mov	r2, r8
 8021638:	4648      	mov	r0, r9
 802163a:	f000 fce1 	bl	8022000 <__lshift>
 802163e:	eba6 0608 	sub.w	r6, r6, r8
 8021642:	4604      	mov	r4, r0
 8021644:	f100 0a14 	add.w	sl, r0, #20
 8021648:	f04f 0b00 	mov.w	fp, #0
 802164c:	e7ba      	b.n	80215c4 <__gethex+0x1e4>
 802164e:	687b      	ldr	r3, [r7, #4]
 8021650:	42b3      	cmp	r3, r6
 8021652:	dd73      	ble.n	802173c <__gethex+0x35c>
 8021654:	1b9e      	subs	r6, r3, r6
 8021656:	42b5      	cmp	r5, r6
 8021658:	dc34      	bgt.n	80216c4 <__gethex+0x2e4>
 802165a:	68fb      	ldr	r3, [r7, #12]
 802165c:	2b02      	cmp	r3, #2
 802165e:	d023      	beq.n	80216a8 <__gethex+0x2c8>
 8021660:	2b03      	cmp	r3, #3
 8021662:	d025      	beq.n	80216b0 <__gethex+0x2d0>
 8021664:	2b01      	cmp	r3, #1
 8021666:	d115      	bne.n	8021694 <__gethex+0x2b4>
 8021668:	42b5      	cmp	r5, r6
 802166a:	d113      	bne.n	8021694 <__gethex+0x2b4>
 802166c:	2d01      	cmp	r5, #1
 802166e:	d10b      	bne.n	8021688 <__gethex+0x2a8>
 8021670:	9a02      	ldr	r2, [sp, #8]
 8021672:	687b      	ldr	r3, [r7, #4]
 8021674:	6013      	str	r3, [r2, #0]
 8021676:	2301      	movs	r3, #1
 8021678:	6123      	str	r3, [r4, #16]
 802167a:	f8ca 3000 	str.w	r3, [sl]
 802167e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021680:	f04f 0862 	mov.w	r8, #98	; 0x62
 8021684:	601c      	str	r4, [r3, #0]
 8021686:	e735      	b.n	80214f4 <__gethex+0x114>
 8021688:	1e69      	subs	r1, r5, #1
 802168a:	4620      	mov	r0, r4
 802168c:	f000 fee7 	bl	802245e <__any_on>
 8021690:	2800      	cmp	r0, #0
 8021692:	d1ed      	bne.n	8021670 <__gethex+0x290>
 8021694:	4621      	mov	r1, r4
 8021696:	4648      	mov	r0, r9
 8021698:	f000 fa98 	bl	8021bcc <_Bfree>
 802169c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802169e:	2300      	movs	r3, #0
 80216a0:	6013      	str	r3, [r2, #0]
 80216a2:	f04f 0850 	mov.w	r8, #80	; 0x50
 80216a6:	e725      	b.n	80214f4 <__gethex+0x114>
 80216a8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80216aa:	2b00      	cmp	r3, #0
 80216ac:	d1f2      	bne.n	8021694 <__gethex+0x2b4>
 80216ae:	e7df      	b.n	8021670 <__gethex+0x290>
 80216b0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80216b2:	2b00      	cmp	r3, #0
 80216b4:	d1dc      	bne.n	8021670 <__gethex+0x290>
 80216b6:	e7ed      	b.n	8021694 <__gethex+0x2b4>
 80216b8:	08027113 	.word	0x08027113
 80216bc:	0802734b 	.word	0x0802734b
 80216c0:	0802735c 	.word	0x0802735c
 80216c4:	f106 38ff 	add.w	r8, r6, #4294967295
 80216c8:	f1bb 0f00 	cmp.w	fp, #0
 80216cc:	d133      	bne.n	8021736 <__gethex+0x356>
 80216ce:	f1b8 0f00 	cmp.w	r8, #0
 80216d2:	d004      	beq.n	80216de <__gethex+0x2fe>
 80216d4:	4641      	mov	r1, r8
 80216d6:	4620      	mov	r0, r4
 80216d8:	f000 fec1 	bl	802245e <__any_on>
 80216dc:	4683      	mov	fp, r0
 80216de:	ea4f 1268 	mov.w	r2, r8, asr #5
 80216e2:	2301      	movs	r3, #1
 80216e4:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80216e8:	f008 081f 	and.w	r8, r8, #31
 80216ec:	fa03 f308 	lsl.w	r3, r3, r8
 80216f0:	4213      	tst	r3, r2
 80216f2:	4631      	mov	r1, r6
 80216f4:	4620      	mov	r0, r4
 80216f6:	bf18      	it	ne
 80216f8:	f04b 0b02 	orrne.w	fp, fp, #2
 80216fc:	1bad      	subs	r5, r5, r6
 80216fe:	f7ff fe07 	bl	8021310 <rshift>
 8021702:	687e      	ldr	r6, [r7, #4]
 8021704:	f04f 0802 	mov.w	r8, #2
 8021708:	f1bb 0f00 	cmp.w	fp, #0
 802170c:	d04a      	beq.n	80217a4 <__gethex+0x3c4>
 802170e:	68fb      	ldr	r3, [r7, #12]
 8021710:	2b02      	cmp	r3, #2
 8021712:	d016      	beq.n	8021742 <__gethex+0x362>
 8021714:	2b03      	cmp	r3, #3
 8021716:	d018      	beq.n	802174a <__gethex+0x36a>
 8021718:	2b01      	cmp	r3, #1
 802171a:	d109      	bne.n	8021730 <__gethex+0x350>
 802171c:	f01b 0f02 	tst.w	fp, #2
 8021720:	d006      	beq.n	8021730 <__gethex+0x350>
 8021722:	f8da 3000 	ldr.w	r3, [sl]
 8021726:	ea4b 0b03 	orr.w	fp, fp, r3
 802172a:	f01b 0f01 	tst.w	fp, #1
 802172e:	d10f      	bne.n	8021750 <__gethex+0x370>
 8021730:	f048 0810 	orr.w	r8, r8, #16
 8021734:	e036      	b.n	80217a4 <__gethex+0x3c4>
 8021736:	f04f 0b01 	mov.w	fp, #1
 802173a:	e7d0      	b.n	80216de <__gethex+0x2fe>
 802173c:	f04f 0801 	mov.w	r8, #1
 8021740:	e7e2      	b.n	8021708 <__gethex+0x328>
 8021742:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8021744:	f1c3 0301 	rsb	r3, r3, #1
 8021748:	930f      	str	r3, [sp, #60]	; 0x3c
 802174a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802174c:	2b00      	cmp	r3, #0
 802174e:	d0ef      	beq.n	8021730 <__gethex+0x350>
 8021750:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8021754:	f104 0214 	add.w	r2, r4, #20
 8021758:	ea4f 038b 	mov.w	r3, fp, lsl #2
 802175c:	9301      	str	r3, [sp, #4]
 802175e:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8021762:	2300      	movs	r3, #0
 8021764:	4694      	mov	ip, r2
 8021766:	f852 1b04 	ldr.w	r1, [r2], #4
 802176a:	f1b1 3fff 	cmp.w	r1, #4294967295
 802176e:	d01e      	beq.n	80217ae <__gethex+0x3ce>
 8021770:	3101      	adds	r1, #1
 8021772:	f8cc 1000 	str.w	r1, [ip]
 8021776:	f1b8 0f02 	cmp.w	r8, #2
 802177a:	f104 0214 	add.w	r2, r4, #20
 802177e:	d13d      	bne.n	80217fc <__gethex+0x41c>
 8021780:	683b      	ldr	r3, [r7, #0]
 8021782:	3b01      	subs	r3, #1
 8021784:	42ab      	cmp	r3, r5
 8021786:	d10b      	bne.n	80217a0 <__gethex+0x3c0>
 8021788:	1169      	asrs	r1, r5, #5
 802178a:	2301      	movs	r3, #1
 802178c:	f005 051f 	and.w	r5, r5, #31
 8021790:	fa03 f505 	lsl.w	r5, r3, r5
 8021794:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8021798:	421d      	tst	r5, r3
 802179a:	bf18      	it	ne
 802179c:	f04f 0801 	movne.w	r8, #1
 80217a0:	f048 0820 	orr.w	r8, r8, #32
 80217a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80217a6:	601c      	str	r4, [r3, #0]
 80217a8:	9b02      	ldr	r3, [sp, #8]
 80217aa:	601e      	str	r6, [r3, #0]
 80217ac:	e6a2      	b.n	80214f4 <__gethex+0x114>
 80217ae:	4290      	cmp	r0, r2
 80217b0:	f842 3c04 	str.w	r3, [r2, #-4]
 80217b4:	d8d6      	bhi.n	8021764 <__gethex+0x384>
 80217b6:	68a2      	ldr	r2, [r4, #8]
 80217b8:	4593      	cmp	fp, r2
 80217ba:	db17      	blt.n	80217ec <__gethex+0x40c>
 80217bc:	6861      	ldr	r1, [r4, #4]
 80217be:	4648      	mov	r0, r9
 80217c0:	3101      	adds	r1, #1
 80217c2:	f000 f9c3 	bl	8021b4c <_Balloc>
 80217c6:	4682      	mov	sl, r0
 80217c8:	b918      	cbnz	r0, 80217d2 <__gethex+0x3f2>
 80217ca:	4b1b      	ldr	r3, [pc, #108]	; (8021838 <__gethex+0x458>)
 80217cc:	4602      	mov	r2, r0
 80217ce:	2184      	movs	r1, #132	; 0x84
 80217d0:	e6b3      	b.n	802153a <__gethex+0x15a>
 80217d2:	6922      	ldr	r2, [r4, #16]
 80217d4:	3202      	adds	r2, #2
 80217d6:	f104 010c 	add.w	r1, r4, #12
 80217da:	0092      	lsls	r2, r2, #2
 80217dc:	300c      	adds	r0, #12
 80217de:	f7fe ff68 	bl	80206b2 <memcpy>
 80217e2:	4621      	mov	r1, r4
 80217e4:	4648      	mov	r0, r9
 80217e6:	f000 f9f1 	bl	8021bcc <_Bfree>
 80217ea:	4654      	mov	r4, sl
 80217ec:	6922      	ldr	r2, [r4, #16]
 80217ee:	1c51      	adds	r1, r2, #1
 80217f0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80217f4:	6121      	str	r1, [r4, #16]
 80217f6:	2101      	movs	r1, #1
 80217f8:	6151      	str	r1, [r2, #20]
 80217fa:	e7bc      	b.n	8021776 <__gethex+0x396>
 80217fc:	6921      	ldr	r1, [r4, #16]
 80217fe:	4559      	cmp	r1, fp
 8021800:	dd0b      	ble.n	802181a <__gethex+0x43a>
 8021802:	2101      	movs	r1, #1
 8021804:	4620      	mov	r0, r4
 8021806:	f7ff fd83 	bl	8021310 <rshift>
 802180a:	68bb      	ldr	r3, [r7, #8]
 802180c:	3601      	adds	r6, #1
 802180e:	42b3      	cmp	r3, r6
 8021810:	f6ff aedb 	blt.w	80215ca <__gethex+0x1ea>
 8021814:	f04f 0801 	mov.w	r8, #1
 8021818:	e7c2      	b.n	80217a0 <__gethex+0x3c0>
 802181a:	f015 051f 	ands.w	r5, r5, #31
 802181e:	d0f9      	beq.n	8021814 <__gethex+0x434>
 8021820:	9b01      	ldr	r3, [sp, #4]
 8021822:	441a      	add	r2, r3
 8021824:	f1c5 0520 	rsb	r5, r5, #32
 8021828:	f852 0c04 	ldr.w	r0, [r2, #-4]
 802182c:	f000 fa80 	bl	8021d30 <__hi0bits>
 8021830:	42a8      	cmp	r0, r5
 8021832:	dbe6      	blt.n	8021802 <__gethex+0x422>
 8021834:	e7ee      	b.n	8021814 <__gethex+0x434>
 8021836:	bf00      	nop
 8021838:	0802734b 	.word	0x0802734b

0802183c <L_shift>:
 802183c:	f1c2 0208 	rsb	r2, r2, #8
 8021840:	0092      	lsls	r2, r2, #2
 8021842:	b570      	push	{r4, r5, r6, lr}
 8021844:	f1c2 0620 	rsb	r6, r2, #32
 8021848:	6843      	ldr	r3, [r0, #4]
 802184a:	6804      	ldr	r4, [r0, #0]
 802184c:	fa03 f506 	lsl.w	r5, r3, r6
 8021850:	432c      	orrs	r4, r5
 8021852:	40d3      	lsrs	r3, r2
 8021854:	6004      	str	r4, [r0, #0]
 8021856:	f840 3f04 	str.w	r3, [r0, #4]!
 802185a:	4288      	cmp	r0, r1
 802185c:	d3f4      	bcc.n	8021848 <L_shift+0xc>
 802185e:	bd70      	pop	{r4, r5, r6, pc}

08021860 <__match>:
 8021860:	b530      	push	{r4, r5, lr}
 8021862:	6803      	ldr	r3, [r0, #0]
 8021864:	3301      	adds	r3, #1
 8021866:	f811 4b01 	ldrb.w	r4, [r1], #1
 802186a:	b914      	cbnz	r4, 8021872 <__match+0x12>
 802186c:	6003      	str	r3, [r0, #0]
 802186e:	2001      	movs	r0, #1
 8021870:	bd30      	pop	{r4, r5, pc}
 8021872:	f813 2b01 	ldrb.w	r2, [r3], #1
 8021876:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 802187a:	2d19      	cmp	r5, #25
 802187c:	bf98      	it	ls
 802187e:	3220      	addls	r2, #32
 8021880:	42a2      	cmp	r2, r4
 8021882:	d0f0      	beq.n	8021866 <__match+0x6>
 8021884:	2000      	movs	r0, #0
 8021886:	e7f3      	b.n	8021870 <__match+0x10>

08021888 <__hexnan>:
 8021888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802188c:	680b      	ldr	r3, [r1, #0]
 802188e:	6801      	ldr	r1, [r0, #0]
 8021890:	115e      	asrs	r6, r3, #5
 8021892:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8021896:	f013 031f 	ands.w	r3, r3, #31
 802189a:	b087      	sub	sp, #28
 802189c:	bf18      	it	ne
 802189e:	3604      	addne	r6, #4
 80218a0:	2500      	movs	r5, #0
 80218a2:	1f37      	subs	r7, r6, #4
 80218a4:	4682      	mov	sl, r0
 80218a6:	4690      	mov	r8, r2
 80218a8:	9301      	str	r3, [sp, #4]
 80218aa:	f846 5c04 	str.w	r5, [r6, #-4]
 80218ae:	46b9      	mov	r9, r7
 80218b0:	463c      	mov	r4, r7
 80218b2:	9502      	str	r5, [sp, #8]
 80218b4:	46ab      	mov	fp, r5
 80218b6:	784a      	ldrb	r2, [r1, #1]
 80218b8:	1c4b      	adds	r3, r1, #1
 80218ba:	9303      	str	r3, [sp, #12]
 80218bc:	b342      	cbz	r2, 8021910 <__hexnan+0x88>
 80218be:	4610      	mov	r0, r2
 80218c0:	9105      	str	r1, [sp, #20]
 80218c2:	9204      	str	r2, [sp, #16]
 80218c4:	f7ff fd76 	bl	80213b4 <__hexdig_fun>
 80218c8:	2800      	cmp	r0, #0
 80218ca:	d14f      	bne.n	802196c <__hexnan+0xe4>
 80218cc:	9a04      	ldr	r2, [sp, #16]
 80218ce:	9905      	ldr	r1, [sp, #20]
 80218d0:	2a20      	cmp	r2, #32
 80218d2:	d818      	bhi.n	8021906 <__hexnan+0x7e>
 80218d4:	9b02      	ldr	r3, [sp, #8]
 80218d6:	459b      	cmp	fp, r3
 80218d8:	dd13      	ble.n	8021902 <__hexnan+0x7a>
 80218da:	454c      	cmp	r4, r9
 80218dc:	d206      	bcs.n	80218ec <__hexnan+0x64>
 80218de:	2d07      	cmp	r5, #7
 80218e0:	dc04      	bgt.n	80218ec <__hexnan+0x64>
 80218e2:	462a      	mov	r2, r5
 80218e4:	4649      	mov	r1, r9
 80218e6:	4620      	mov	r0, r4
 80218e8:	f7ff ffa8 	bl	802183c <L_shift>
 80218ec:	4544      	cmp	r4, r8
 80218ee:	d950      	bls.n	8021992 <__hexnan+0x10a>
 80218f0:	2300      	movs	r3, #0
 80218f2:	f1a4 0904 	sub.w	r9, r4, #4
 80218f6:	f844 3c04 	str.w	r3, [r4, #-4]
 80218fa:	f8cd b008 	str.w	fp, [sp, #8]
 80218fe:	464c      	mov	r4, r9
 8021900:	461d      	mov	r5, r3
 8021902:	9903      	ldr	r1, [sp, #12]
 8021904:	e7d7      	b.n	80218b6 <__hexnan+0x2e>
 8021906:	2a29      	cmp	r2, #41	; 0x29
 8021908:	d155      	bne.n	80219b6 <__hexnan+0x12e>
 802190a:	3102      	adds	r1, #2
 802190c:	f8ca 1000 	str.w	r1, [sl]
 8021910:	f1bb 0f00 	cmp.w	fp, #0
 8021914:	d04f      	beq.n	80219b6 <__hexnan+0x12e>
 8021916:	454c      	cmp	r4, r9
 8021918:	d206      	bcs.n	8021928 <__hexnan+0xa0>
 802191a:	2d07      	cmp	r5, #7
 802191c:	dc04      	bgt.n	8021928 <__hexnan+0xa0>
 802191e:	462a      	mov	r2, r5
 8021920:	4649      	mov	r1, r9
 8021922:	4620      	mov	r0, r4
 8021924:	f7ff ff8a 	bl	802183c <L_shift>
 8021928:	4544      	cmp	r4, r8
 802192a:	d934      	bls.n	8021996 <__hexnan+0x10e>
 802192c:	f1a8 0204 	sub.w	r2, r8, #4
 8021930:	4623      	mov	r3, r4
 8021932:	f853 1b04 	ldr.w	r1, [r3], #4
 8021936:	f842 1f04 	str.w	r1, [r2, #4]!
 802193a:	429f      	cmp	r7, r3
 802193c:	d2f9      	bcs.n	8021932 <__hexnan+0xaa>
 802193e:	1b3b      	subs	r3, r7, r4
 8021940:	f023 0303 	bic.w	r3, r3, #3
 8021944:	3304      	adds	r3, #4
 8021946:	3e03      	subs	r6, #3
 8021948:	3401      	adds	r4, #1
 802194a:	42a6      	cmp	r6, r4
 802194c:	bf38      	it	cc
 802194e:	2304      	movcc	r3, #4
 8021950:	4443      	add	r3, r8
 8021952:	2200      	movs	r2, #0
 8021954:	f843 2b04 	str.w	r2, [r3], #4
 8021958:	429f      	cmp	r7, r3
 802195a:	d2fb      	bcs.n	8021954 <__hexnan+0xcc>
 802195c:	683b      	ldr	r3, [r7, #0]
 802195e:	b91b      	cbnz	r3, 8021968 <__hexnan+0xe0>
 8021960:	4547      	cmp	r7, r8
 8021962:	d126      	bne.n	80219b2 <__hexnan+0x12a>
 8021964:	2301      	movs	r3, #1
 8021966:	603b      	str	r3, [r7, #0]
 8021968:	2005      	movs	r0, #5
 802196a:	e025      	b.n	80219b8 <__hexnan+0x130>
 802196c:	3501      	adds	r5, #1
 802196e:	2d08      	cmp	r5, #8
 8021970:	f10b 0b01 	add.w	fp, fp, #1
 8021974:	dd06      	ble.n	8021984 <__hexnan+0xfc>
 8021976:	4544      	cmp	r4, r8
 8021978:	d9c3      	bls.n	8021902 <__hexnan+0x7a>
 802197a:	2300      	movs	r3, #0
 802197c:	f844 3c04 	str.w	r3, [r4, #-4]
 8021980:	2501      	movs	r5, #1
 8021982:	3c04      	subs	r4, #4
 8021984:	6822      	ldr	r2, [r4, #0]
 8021986:	f000 000f 	and.w	r0, r0, #15
 802198a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 802198e:	6020      	str	r0, [r4, #0]
 8021990:	e7b7      	b.n	8021902 <__hexnan+0x7a>
 8021992:	2508      	movs	r5, #8
 8021994:	e7b5      	b.n	8021902 <__hexnan+0x7a>
 8021996:	9b01      	ldr	r3, [sp, #4]
 8021998:	2b00      	cmp	r3, #0
 802199a:	d0df      	beq.n	802195c <__hexnan+0xd4>
 802199c:	f1c3 0320 	rsb	r3, r3, #32
 80219a0:	f04f 32ff 	mov.w	r2, #4294967295
 80219a4:	40da      	lsrs	r2, r3
 80219a6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80219aa:	4013      	ands	r3, r2
 80219ac:	f846 3c04 	str.w	r3, [r6, #-4]
 80219b0:	e7d4      	b.n	802195c <__hexnan+0xd4>
 80219b2:	3f04      	subs	r7, #4
 80219b4:	e7d2      	b.n	802195c <__hexnan+0xd4>
 80219b6:	2004      	movs	r0, #4
 80219b8:	b007      	add	sp, #28
 80219ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080219c0 <malloc>:
 80219c0:	4b02      	ldr	r3, [pc, #8]	; (80219cc <malloc+0xc>)
 80219c2:	4601      	mov	r1, r0
 80219c4:	6818      	ldr	r0, [r3, #0]
 80219c6:	f000 b823 	b.w	8021a10 <_malloc_r>
 80219ca:	bf00      	nop
 80219cc:	240004c8 	.word	0x240004c8

080219d0 <sbrk_aligned>:
 80219d0:	b570      	push	{r4, r5, r6, lr}
 80219d2:	4e0e      	ldr	r6, [pc, #56]	; (8021a0c <sbrk_aligned+0x3c>)
 80219d4:	460c      	mov	r4, r1
 80219d6:	6831      	ldr	r1, [r6, #0]
 80219d8:	4605      	mov	r5, r0
 80219da:	b911      	cbnz	r1, 80219e2 <sbrk_aligned+0x12>
 80219dc:	f001 f960 	bl	8022ca0 <_sbrk_r>
 80219e0:	6030      	str	r0, [r6, #0]
 80219e2:	4621      	mov	r1, r4
 80219e4:	4628      	mov	r0, r5
 80219e6:	f001 f95b 	bl	8022ca0 <_sbrk_r>
 80219ea:	1c43      	adds	r3, r0, #1
 80219ec:	d00a      	beq.n	8021a04 <sbrk_aligned+0x34>
 80219ee:	1cc4      	adds	r4, r0, #3
 80219f0:	f024 0403 	bic.w	r4, r4, #3
 80219f4:	42a0      	cmp	r0, r4
 80219f6:	d007      	beq.n	8021a08 <sbrk_aligned+0x38>
 80219f8:	1a21      	subs	r1, r4, r0
 80219fa:	4628      	mov	r0, r5
 80219fc:	f001 f950 	bl	8022ca0 <_sbrk_r>
 8021a00:	3001      	adds	r0, #1
 8021a02:	d101      	bne.n	8021a08 <sbrk_aligned+0x38>
 8021a04:	f04f 34ff 	mov.w	r4, #4294967295
 8021a08:	4620      	mov	r0, r4
 8021a0a:	bd70      	pop	{r4, r5, r6, pc}
 8021a0c:	240080b4 	.word	0x240080b4

08021a10 <_malloc_r>:
 8021a10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021a14:	1ccd      	adds	r5, r1, #3
 8021a16:	f025 0503 	bic.w	r5, r5, #3
 8021a1a:	3508      	adds	r5, #8
 8021a1c:	2d0c      	cmp	r5, #12
 8021a1e:	bf38      	it	cc
 8021a20:	250c      	movcc	r5, #12
 8021a22:	2d00      	cmp	r5, #0
 8021a24:	4607      	mov	r7, r0
 8021a26:	db01      	blt.n	8021a2c <_malloc_r+0x1c>
 8021a28:	42a9      	cmp	r1, r5
 8021a2a:	d905      	bls.n	8021a38 <_malloc_r+0x28>
 8021a2c:	230c      	movs	r3, #12
 8021a2e:	603b      	str	r3, [r7, #0]
 8021a30:	2600      	movs	r6, #0
 8021a32:	4630      	mov	r0, r6
 8021a34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8021a38:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8021b0c <_malloc_r+0xfc>
 8021a3c:	f000 f87a 	bl	8021b34 <__malloc_lock>
 8021a40:	f8d8 3000 	ldr.w	r3, [r8]
 8021a44:	461c      	mov	r4, r3
 8021a46:	bb5c      	cbnz	r4, 8021aa0 <_malloc_r+0x90>
 8021a48:	4629      	mov	r1, r5
 8021a4a:	4638      	mov	r0, r7
 8021a4c:	f7ff ffc0 	bl	80219d0 <sbrk_aligned>
 8021a50:	1c43      	adds	r3, r0, #1
 8021a52:	4604      	mov	r4, r0
 8021a54:	d155      	bne.n	8021b02 <_malloc_r+0xf2>
 8021a56:	f8d8 4000 	ldr.w	r4, [r8]
 8021a5a:	4626      	mov	r6, r4
 8021a5c:	2e00      	cmp	r6, #0
 8021a5e:	d145      	bne.n	8021aec <_malloc_r+0xdc>
 8021a60:	2c00      	cmp	r4, #0
 8021a62:	d048      	beq.n	8021af6 <_malloc_r+0xe6>
 8021a64:	6823      	ldr	r3, [r4, #0]
 8021a66:	4631      	mov	r1, r6
 8021a68:	4638      	mov	r0, r7
 8021a6a:	eb04 0903 	add.w	r9, r4, r3
 8021a6e:	f001 f917 	bl	8022ca0 <_sbrk_r>
 8021a72:	4581      	cmp	r9, r0
 8021a74:	d13f      	bne.n	8021af6 <_malloc_r+0xe6>
 8021a76:	6821      	ldr	r1, [r4, #0]
 8021a78:	1a6d      	subs	r5, r5, r1
 8021a7a:	4629      	mov	r1, r5
 8021a7c:	4638      	mov	r0, r7
 8021a7e:	f7ff ffa7 	bl	80219d0 <sbrk_aligned>
 8021a82:	3001      	adds	r0, #1
 8021a84:	d037      	beq.n	8021af6 <_malloc_r+0xe6>
 8021a86:	6823      	ldr	r3, [r4, #0]
 8021a88:	442b      	add	r3, r5
 8021a8a:	6023      	str	r3, [r4, #0]
 8021a8c:	f8d8 3000 	ldr.w	r3, [r8]
 8021a90:	2b00      	cmp	r3, #0
 8021a92:	d038      	beq.n	8021b06 <_malloc_r+0xf6>
 8021a94:	685a      	ldr	r2, [r3, #4]
 8021a96:	42a2      	cmp	r2, r4
 8021a98:	d12b      	bne.n	8021af2 <_malloc_r+0xe2>
 8021a9a:	2200      	movs	r2, #0
 8021a9c:	605a      	str	r2, [r3, #4]
 8021a9e:	e00f      	b.n	8021ac0 <_malloc_r+0xb0>
 8021aa0:	6822      	ldr	r2, [r4, #0]
 8021aa2:	1b52      	subs	r2, r2, r5
 8021aa4:	d41f      	bmi.n	8021ae6 <_malloc_r+0xd6>
 8021aa6:	2a0b      	cmp	r2, #11
 8021aa8:	d917      	bls.n	8021ada <_malloc_r+0xca>
 8021aaa:	1961      	adds	r1, r4, r5
 8021aac:	42a3      	cmp	r3, r4
 8021aae:	6025      	str	r5, [r4, #0]
 8021ab0:	bf18      	it	ne
 8021ab2:	6059      	strne	r1, [r3, #4]
 8021ab4:	6863      	ldr	r3, [r4, #4]
 8021ab6:	bf08      	it	eq
 8021ab8:	f8c8 1000 	streq.w	r1, [r8]
 8021abc:	5162      	str	r2, [r4, r5]
 8021abe:	604b      	str	r3, [r1, #4]
 8021ac0:	4638      	mov	r0, r7
 8021ac2:	f104 060b 	add.w	r6, r4, #11
 8021ac6:	f000 f83b 	bl	8021b40 <__malloc_unlock>
 8021aca:	f026 0607 	bic.w	r6, r6, #7
 8021ace:	1d23      	adds	r3, r4, #4
 8021ad0:	1af2      	subs	r2, r6, r3
 8021ad2:	d0ae      	beq.n	8021a32 <_malloc_r+0x22>
 8021ad4:	1b9b      	subs	r3, r3, r6
 8021ad6:	50a3      	str	r3, [r4, r2]
 8021ad8:	e7ab      	b.n	8021a32 <_malloc_r+0x22>
 8021ada:	42a3      	cmp	r3, r4
 8021adc:	6862      	ldr	r2, [r4, #4]
 8021ade:	d1dd      	bne.n	8021a9c <_malloc_r+0x8c>
 8021ae0:	f8c8 2000 	str.w	r2, [r8]
 8021ae4:	e7ec      	b.n	8021ac0 <_malloc_r+0xb0>
 8021ae6:	4623      	mov	r3, r4
 8021ae8:	6864      	ldr	r4, [r4, #4]
 8021aea:	e7ac      	b.n	8021a46 <_malloc_r+0x36>
 8021aec:	4634      	mov	r4, r6
 8021aee:	6876      	ldr	r6, [r6, #4]
 8021af0:	e7b4      	b.n	8021a5c <_malloc_r+0x4c>
 8021af2:	4613      	mov	r3, r2
 8021af4:	e7cc      	b.n	8021a90 <_malloc_r+0x80>
 8021af6:	230c      	movs	r3, #12
 8021af8:	603b      	str	r3, [r7, #0]
 8021afa:	4638      	mov	r0, r7
 8021afc:	f000 f820 	bl	8021b40 <__malloc_unlock>
 8021b00:	e797      	b.n	8021a32 <_malloc_r+0x22>
 8021b02:	6025      	str	r5, [r4, #0]
 8021b04:	e7dc      	b.n	8021ac0 <_malloc_r+0xb0>
 8021b06:	605b      	str	r3, [r3, #4]
 8021b08:	deff      	udf	#255	; 0xff
 8021b0a:	bf00      	nop
 8021b0c:	240080b0 	.word	0x240080b0

08021b10 <__ascii_mbtowc>:
 8021b10:	b082      	sub	sp, #8
 8021b12:	b901      	cbnz	r1, 8021b16 <__ascii_mbtowc+0x6>
 8021b14:	a901      	add	r1, sp, #4
 8021b16:	b142      	cbz	r2, 8021b2a <__ascii_mbtowc+0x1a>
 8021b18:	b14b      	cbz	r3, 8021b2e <__ascii_mbtowc+0x1e>
 8021b1a:	7813      	ldrb	r3, [r2, #0]
 8021b1c:	600b      	str	r3, [r1, #0]
 8021b1e:	7812      	ldrb	r2, [r2, #0]
 8021b20:	1e10      	subs	r0, r2, #0
 8021b22:	bf18      	it	ne
 8021b24:	2001      	movne	r0, #1
 8021b26:	b002      	add	sp, #8
 8021b28:	4770      	bx	lr
 8021b2a:	4610      	mov	r0, r2
 8021b2c:	e7fb      	b.n	8021b26 <__ascii_mbtowc+0x16>
 8021b2e:	f06f 0001 	mvn.w	r0, #1
 8021b32:	e7f8      	b.n	8021b26 <__ascii_mbtowc+0x16>

08021b34 <__malloc_lock>:
 8021b34:	4801      	ldr	r0, [pc, #4]	; (8021b3c <__malloc_lock+0x8>)
 8021b36:	f7fe bdba 	b.w	80206ae <__retarget_lock_acquire_recursive>
 8021b3a:	bf00      	nop
 8021b3c:	240080ac 	.word	0x240080ac

08021b40 <__malloc_unlock>:
 8021b40:	4801      	ldr	r0, [pc, #4]	; (8021b48 <__malloc_unlock+0x8>)
 8021b42:	f7fe bdb5 	b.w	80206b0 <__retarget_lock_release_recursive>
 8021b46:	bf00      	nop
 8021b48:	240080ac 	.word	0x240080ac

08021b4c <_Balloc>:
 8021b4c:	b570      	push	{r4, r5, r6, lr}
 8021b4e:	69c6      	ldr	r6, [r0, #28]
 8021b50:	4604      	mov	r4, r0
 8021b52:	460d      	mov	r5, r1
 8021b54:	b976      	cbnz	r6, 8021b74 <_Balloc+0x28>
 8021b56:	2010      	movs	r0, #16
 8021b58:	f7ff ff32 	bl	80219c0 <malloc>
 8021b5c:	4602      	mov	r2, r0
 8021b5e:	61e0      	str	r0, [r4, #28]
 8021b60:	b920      	cbnz	r0, 8021b6c <_Balloc+0x20>
 8021b62:	4b18      	ldr	r3, [pc, #96]	; (8021bc4 <_Balloc+0x78>)
 8021b64:	4818      	ldr	r0, [pc, #96]	; (8021bc8 <_Balloc+0x7c>)
 8021b66:	216b      	movs	r1, #107	; 0x6b
 8021b68:	f7fe fdc0 	bl	80206ec <__assert_func>
 8021b6c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8021b70:	6006      	str	r6, [r0, #0]
 8021b72:	60c6      	str	r6, [r0, #12]
 8021b74:	69e6      	ldr	r6, [r4, #28]
 8021b76:	68f3      	ldr	r3, [r6, #12]
 8021b78:	b183      	cbz	r3, 8021b9c <_Balloc+0x50>
 8021b7a:	69e3      	ldr	r3, [r4, #28]
 8021b7c:	68db      	ldr	r3, [r3, #12]
 8021b7e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8021b82:	b9b8      	cbnz	r0, 8021bb4 <_Balloc+0x68>
 8021b84:	2101      	movs	r1, #1
 8021b86:	fa01 f605 	lsl.w	r6, r1, r5
 8021b8a:	1d72      	adds	r2, r6, #5
 8021b8c:	0092      	lsls	r2, r2, #2
 8021b8e:	4620      	mov	r0, r4
 8021b90:	f001 f89d 	bl	8022cce <_calloc_r>
 8021b94:	b160      	cbz	r0, 8021bb0 <_Balloc+0x64>
 8021b96:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8021b9a:	e00e      	b.n	8021bba <_Balloc+0x6e>
 8021b9c:	2221      	movs	r2, #33	; 0x21
 8021b9e:	2104      	movs	r1, #4
 8021ba0:	4620      	mov	r0, r4
 8021ba2:	f001 f894 	bl	8022cce <_calloc_r>
 8021ba6:	69e3      	ldr	r3, [r4, #28]
 8021ba8:	60f0      	str	r0, [r6, #12]
 8021baa:	68db      	ldr	r3, [r3, #12]
 8021bac:	2b00      	cmp	r3, #0
 8021bae:	d1e4      	bne.n	8021b7a <_Balloc+0x2e>
 8021bb0:	2000      	movs	r0, #0
 8021bb2:	bd70      	pop	{r4, r5, r6, pc}
 8021bb4:	6802      	ldr	r2, [r0, #0]
 8021bb6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8021bba:	2300      	movs	r3, #0
 8021bbc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8021bc0:	e7f7      	b.n	8021bb2 <_Balloc+0x66>
 8021bc2:	bf00      	nop
 8021bc4:	080270a4 	.word	0x080270a4
 8021bc8:	080273bc 	.word	0x080273bc

08021bcc <_Bfree>:
 8021bcc:	b570      	push	{r4, r5, r6, lr}
 8021bce:	69c6      	ldr	r6, [r0, #28]
 8021bd0:	4605      	mov	r5, r0
 8021bd2:	460c      	mov	r4, r1
 8021bd4:	b976      	cbnz	r6, 8021bf4 <_Bfree+0x28>
 8021bd6:	2010      	movs	r0, #16
 8021bd8:	f7ff fef2 	bl	80219c0 <malloc>
 8021bdc:	4602      	mov	r2, r0
 8021bde:	61e8      	str	r0, [r5, #28]
 8021be0:	b920      	cbnz	r0, 8021bec <_Bfree+0x20>
 8021be2:	4b09      	ldr	r3, [pc, #36]	; (8021c08 <_Bfree+0x3c>)
 8021be4:	4809      	ldr	r0, [pc, #36]	; (8021c0c <_Bfree+0x40>)
 8021be6:	218f      	movs	r1, #143	; 0x8f
 8021be8:	f7fe fd80 	bl	80206ec <__assert_func>
 8021bec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8021bf0:	6006      	str	r6, [r0, #0]
 8021bf2:	60c6      	str	r6, [r0, #12]
 8021bf4:	b13c      	cbz	r4, 8021c06 <_Bfree+0x3a>
 8021bf6:	69eb      	ldr	r3, [r5, #28]
 8021bf8:	6862      	ldr	r2, [r4, #4]
 8021bfa:	68db      	ldr	r3, [r3, #12]
 8021bfc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8021c00:	6021      	str	r1, [r4, #0]
 8021c02:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8021c06:	bd70      	pop	{r4, r5, r6, pc}
 8021c08:	080270a4 	.word	0x080270a4
 8021c0c:	080273bc 	.word	0x080273bc

08021c10 <__multadd>:
 8021c10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021c14:	690d      	ldr	r5, [r1, #16]
 8021c16:	4607      	mov	r7, r0
 8021c18:	460c      	mov	r4, r1
 8021c1a:	461e      	mov	r6, r3
 8021c1c:	f101 0c14 	add.w	ip, r1, #20
 8021c20:	2000      	movs	r0, #0
 8021c22:	f8dc 3000 	ldr.w	r3, [ip]
 8021c26:	b299      	uxth	r1, r3
 8021c28:	fb02 6101 	mla	r1, r2, r1, r6
 8021c2c:	0c1e      	lsrs	r6, r3, #16
 8021c2e:	0c0b      	lsrs	r3, r1, #16
 8021c30:	fb02 3306 	mla	r3, r2, r6, r3
 8021c34:	b289      	uxth	r1, r1
 8021c36:	3001      	adds	r0, #1
 8021c38:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8021c3c:	4285      	cmp	r5, r0
 8021c3e:	f84c 1b04 	str.w	r1, [ip], #4
 8021c42:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8021c46:	dcec      	bgt.n	8021c22 <__multadd+0x12>
 8021c48:	b30e      	cbz	r6, 8021c8e <__multadd+0x7e>
 8021c4a:	68a3      	ldr	r3, [r4, #8]
 8021c4c:	42ab      	cmp	r3, r5
 8021c4e:	dc19      	bgt.n	8021c84 <__multadd+0x74>
 8021c50:	6861      	ldr	r1, [r4, #4]
 8021c52:	4638      	mov	r0, r7
 8021c54:	3101      	adds	r1, #1
 8021c56:	f7ff ff79 	bl	8021b4c <_Balloc>
 8021c5a:	4680      	mov	r8, r0
 8021c5c:	b928      	cbnz	r0, 8021c6a <__multadd+0x5a>
 8021c5e:	4602      	mov	r2, r0
 8021c60:	4b0c      	ldr	r3, [pc, #48]	; (8021c94 <__multadd+0x84>)
 8021c62:	480d      	ldr	r0, [pc, #52]	; (8021c98 <__multadd+0x88>)
 8021c64:	21ba      	movs	r1, #186	; 0xba
 8021c66:	f7fe fd41 	bl	80206ec <__assert_func>
 8021c6a:	6922      	ldr	r2, [r4, #16]
 8021c6c:	3202      	adds	r2, #2
 8021c6e:	f104 010c 	add.w	r1, r4, #12
 8021c72:	0092      	lsls	r2, r2, #2
 8021c74:	300c      	adds	r0, #12
 8021c76:	f7fe fd1c 	bl	80206b2 <memcpy>
 8021c7a:	4621      	mov	r1, r4
 8021c7c:	4638      	mov	r0, r7
 8021c7e:	f7ff ffa5 	bl	8021bcc <_Bfree>
 8021c82:	4644      	mov	r4, r8
 8021c84:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8021c88:	3501      	adds	r5, #1
 8021c8a:	615e      	str	r6, [r3, #20]
 8021c8c:	6125      	str	r5, [r4, #16]
 8021c8e:	4620      	mov	r0, r4
 8021c90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021c94:	0802734b 	.word	0x0802734b
 8021c98:	080273bc 	.word	0x080273bc

08021c9c <__s2b>:
 8021c9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021ca0:	460c      	mov	r4, r1
 8021ca2:	4615      	mov	r5, r2
 8021ca4:	461f      	mov	r7, r3
 8021ca6:	2209      	movs	r2, #9
 8021ca8:	3308      	adds	r3, #8
 8021caa:	4606      	mov	r6, r0
 8021cac:	fb93 f3f2 	sdiv	r3, r3, r2
 8021cb0:	2100      	movs	r1, #0
 8021cb2:	2201      	movs	r2, #1
 8021cb4:	429a      	cmp	r2, r3
 8021cb6:	db09      	blt.n	8021ccc <__s2b+0x30>
 8021cb8:	4630      	mov	r0, r6
 8021cba:	f7ff ff47 	bl	8021b4c <_Balloc>
 8021cbe:	b940      	cbnz	r0, 8021cd2 <__s2b+0x36>
 8021cc0:	4602      	mov	r2, r0
 8021cc2:	4b19      	ldr	r3, [pc, #100]	; (8021d28 <__s2b+0x8c>)
 8021cc4:	4819      	ldr	r0, [pc, #100]	; (8021d2c <__s2b+0x90>)
 8021cc6:	21d3      	movs	r1, #211	; 0xd3
 8021cc8:	f7fe fd10 	bl	80206ec <__assert_func>
 8021ccc:	0052      	lsls	r2, r2, #1
 8021cce:	3101      	adds	r1, #1
 8021cd0:	e7f0      	b.n	8021cb4 <__s2b+0x18>
 8021cd2:	9b08      	ldr	r3, [sp, #32]
 8021cd4:	6143      	str	r3, [r0, #20]
 8021cd6:	2d09      	cmp	r5, #9
 8021cd8:	f04f 0301 	mov.w	r3, #1
 8021cdc:	6103      	str	r3, [r0, #16]
 8021cde:	dd16      	ble.n	8021d0e <__s2b+0x72>
 8021ce0:	f104 0909 	add.w	r9, r4, #9
 8021ce4:	46c8      	mov	r8, r9
 8021ce6:	442c      	add	r4, r5
 8021ce8:	f818 3b01 	ldrb.w	r3, [r8], #1
 8021cec:	4601      	mov	r1, r0
 8021cee:	3b30      	subs	r3, #48	; 0x30
 8021cf0:	220a      	movs	r2, #10
 8021cf2:	4630      	mov	r0, r6
 8021cf4:	f7ff ff8c 	bl	8021c10 <__multadd>
 8021cf8:	45a0      	cmp	r8, r4
 8021cfa:	d1f5      	bne.n	8021ce8 <__s2b+0x4c>
 8021cfc:	f1a5 0408 	sub.w	r4, r5, #8
 8021d00:	444c      	add	r4, r9
 8021d02:	1b2d      	subs	r5, r5, r4
 8021d04:	1963      	adds	r3, r4, r5
 8021d06:	42bb      	cmp	r3, r7
 8021d08:	db04      	blt.n	8021d14 <__s2b+0x78>
 8021d0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8021d0e:	340a      	adds	r4, #10
 8021d10:	2509      	movs	r5, #9
 8021d12:	e7f6      	b.n	8021d02 <__s2b+0x66>
 8021d14:	f814 3b01 	ldrb.w	r3, [r4], #1
 8021d18:	4601      	mov	r1, r0
 8021d1a:	3b30      	subs	r3, #48	; 0x30
 8021d1c:	220a      	movs	r2, #10
 8021d1e:	4630      	mov	r0, r6
 8021d20:	f7ff ff76 	bl	8021c10 <__multadd>
 8021d24:	e7ee      	b.n	8021d04 <__s2b+0x68>
 8021d26:	bf00      	nop
 8021d28:	0802734b 	.word	0x0802734b
 8021d2c:	080273bc 	.word	0x080273bc

08021d30 <__hi0bits>:
 8021d30:	0c03      	lsrs	r3, r0, #16
 8021d32:	041b      	lsls	r3, r3, #16
 8021d34:	b9d3      	cbnz	r3, 8021d6c <__hi0bits+0x3c>
 8021d36:	0400      	lsls	r0, r0, #16
 8021d38:	2310      	movs	r3, #16
 8021d3a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8021d3e:	bf04      	itt	eq
 8021d40:	0200      	lsleq	r0, r0, #8
 8021d42:	3308      	addeq	r3, #8
 8021d44:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8021d48:	bf04      	itt	eq
 8021d4a:	0100      	lsleq	r0, r0, #4
 8021d4c:	3304      	addeq	r3, #4
 8021d4e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8021d52:	bf04      	itt	eq
 8021d54:	0080      	lsleq	r0, r0, #2
 8021d56:	3302      	addeq	r3, #2
 8021d58:	2800      	cmp	r0, #0
 8021d5a:	db05      	blt.n	8021d68 <__hi0bits+0x38>
 8021d5c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8021d60:	f103 0301 	add.w	r3, r3, #1
 8021d64:	bf08      	it	eq
 8021d66:	2320      	moveq	r3, #32
 8021d68:	4618      	mov	r0, r3
 8021d6a:	4770      	bx	lr
 8021d6c:	2300      	movs	r3, #0
 8021d6e:	e7e4      	b.n	8021d3a <__hi0bits+0xa>

08021d70 <__lo0bits>:
 8021d70:	6803      	ldr	r3, [r0, #0]
 8021d72:	f013 0207 	ands.w	r2, r3, #7
 8021d76:	d00c      	beq.n	8021d92 <__lo0bits+0x22>
 8021d78:	07d9      	lsls	r1, r3, #31
 8021d7a:	d422      	bmi.n	8021dc2 <__lo0bits+0x52>
 8021d7c:	079a      	lsls	r2, r3, #30
 8021d7e:	bf49      	itett	mi
 8021d80:	085b      	lsrmi	r3, r3, #1
 8021d82:	089b      	lsrpl	r3, r3, #2
 8021d84:	6003      	strmi	r3, [r0, #0]
 8021d86:	2201      	movmi	r2, #1
 8021d88:	bf5c      	itt	pl
 8021d8a:	6003      	strpl	r3, [r0, #0]
 8021d8c:	2202      	movpl	r2, #2
 8021d8e:	4610      	mov	r0, r2
 8021d90:	4770      	bx	lr
 8021d92:	b299      	uxth	r1, r3
 8021d94:	b909      	cbnz	r1, 8021d9a <__lo0bits+0x2a>
 8021d96:	0c1b      	lsrs	r3, r3, #16
 8021d98:	2210      	movs	r2, #16
 8021d9a:	b2d9      	uxtb	r1, r3
 8021d9c:	b909      	cbnz	r1, 8021da2 <__lo0bits+0x32>
 8021d9e:	3208      	adds	r2, #8
 8021da0:	0a1b      	lsrs	r3, r3, #8
 8021da2:	0719      	lsls	r1, r3, #28
 8021da4:	bf04      	itt	eq
 8021da6:	091b      	lsreq	r3, r3, #4
 8021da8:	3204      	addeq	r2, #4
 8021daa:	0799      	lsls	r1, r3, #30
 8021dac:	bf04      	itt	eq
 8021dae:	089b      	lsreq	r3, r3, #2
 8021db0:	3202      	addeq	r2, #2
 8021db2:	07d9      	lsls	r1, r3, #31
 8021db4:	d403      	bmi.n	8021dbe <__lo0bits+0x4e>
 8021db6:	085b      	lsrs	r3, r3, #1
 8021db8:	f102 0201 	add.w	r2, r2, #1
 8021dbc:	d003      	beq.n	8021dc6 <__lo0bits+0x56>
 8021dbe:	6003      	str	r3, [r0, #0]
 8021dc0:	e7e5      	b.n	8021d8e <__lo0bits+0x1e>
 8021dc2:	2200      	movs	r2, #0
 8021dc4:	e7e3      	b.n	8021d8e <__lo0bits+0x1e>
 8021dc6:	2220      	movs	r2, #32
 8021dc8:	e7e1      	b.n	8021d8e <__lo0bits+0x1e>
	...

08021dcc <__i2b>:
 8021dcc:	b510      	push	{r4, lr}
 8021dce:	460c      	mov	r4, r1
 8021dd0:	2101      	movs	r1, #1
 8021dd2:	f7ff febb 	bl	8021b4c <_Balloc>
 8021dd6:	4602      	mov	r2, r0
 8021dd8:	b928      	cbnz	r0, 8021de6 <__i2b+0x1a>
 8021dda:	4b05      	ldr	r3, [pc, #20]	; (8021df0 <__i2b+0x24>)
 8021ddc:	4805      	ldr	r0, [pc, #20]	; (8021df4 <__i2b+0x28>)
 8021dde:	f240 1145 	movw	r1, #325	; 0x145
 8021de2:	f7fe fc83 	bl	80206ec <__assert_func>
 8021de6:	2301      	movs	r3, #1
 8021de8:	6144      	str	r4, [r0, #20]
 8021dea:	6103      	str	r3, [r0, #16]
 8021dec:	bd10      	pop	{r4, pc}
 8021dee:	bf00      	nop
 8021df0:	0802734b 	.word	0x0802734b
 8021df4:	080273bc 	.word	0x080273bc

08021df8 <__multiply>:
 8021df8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021dfc:	4691      	mov	r9, r2
 8021dfe:	690a      	ldr	r2, [r1, #16]
 8021e00:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8021e04:	429a      	cmp	r2, r3
 8021e06:	bfb8      	it	lt
 8021e08:	460b      	movlt	r3, r1
 8021e0a:	460c      	mov	r4, r1
 8021e0c:	bfbc      	itt	lt
 8021e0e:	464c      	movlt	r4, r9
 8021e10:	4699      	movlt	r9, r3
 8021e12:	6927      	ldr	r7, [r4, #16]
 8021e14:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8021e18:	68a3      	ldr	r3, [r4, #8]
 8021e1a:	6861      	ldr	r1, [r4, #4]
 8021e1c:	eb07 060a 	add.w	r6, r7, sl
 8021e20:	42b3      	cmp	r3, r6
 8021e22:	b085      	sub	sp, #20
 8021e24:	bfb8      	it	lt
 8021e26:	3101      	addlt	r1, #1
 8021e28:	f7ff fe90 	bl	8021b4c <_Balloc>
 8021e2c:	b930      	cbnz	r0, 8021e3c <__multiply+0x44>
 8021e2e:	4602      	mov	r2, r0
 8021e30:	4b44      	ldr	r3, [pc, #272]	; (8021f44 <__multiply+0x14c>)
 8021e32:	4845      	ldr	r0, [pc, #276]	; (8021f48 <__multiply+0x150>)
 8021e34:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8021e38:	f7fe fc58 	bl	80206ec <__assert_func>
 8021e3c:	f100 0514 	add.w	r5, r0, #20
 8021e40:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8021e44:	462b      	mov	r3, r5
 8021e46:	2200      	movs	r2, #0
 8021e48:	4543      	cmp	r3, r8
 8021e4a:	d321      	bcc.n	8021e90 <__multiply+0x98>
 8021e4c:	f104 0314 	add.w	r3, r4, #20
 8021e50:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8021e54:	f109 0314 	add.w	r3, r9, #20
 8021e58:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8021e5c:	9202      	str	r2, [sp, #8]
 8021e5e:	1b3a      	subs	r2, r7, r4
 8021e60:	3a15      	subs	r2, #21
 8021e62:	f022 0203 	bic.w	r2, r2, #3
 8021e66:	3204      	adds	r2, #4
 8021e68:	f104 0115 	add.w	r1, r4, #21
 8021e6c:	428f      	cmp	r7, r1
 8021e6e:	bf38      	it	cc
 8021e70:	2204      	movcc	r2, #4
 8021e72:	9201      	str	r2, [sp, #4]
 8021e74:	9a02      	ldr	r2, [sp, #8]
 8021e76:	9303      	str	r3, [sp, #12]
 8021e78:	429a      	cmp	r2, r3
 8021e7a:	d80c      	bhi.n	8021e96 <__multiply+0x9e>
 8021e7c:	2e00      	cmp	r6, #0
 8021e7e:	dd03      	ble.n	8021e88 <__multiply+0x90>
 8021e80:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8021e84:	2b00      	cmp	r3, #0
 8021e86:	d05b      	beq.n	8021f40 <__multiply+0x148>
 8021e88:	6106      	str	r6, [r0, #16]
 8021e8a:	b005      	add	sp, #20
 8021e8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021e90:	f843 2b04 	str.w	r2, [r3], #4
 8021e94:	e7d8      	b.n	8021e48 <__multiply+0x50>
 8021e96:	f8b3 a000 	ldrh.w	sl, [r3]
 8021e9a:	f1ba 0f00 	cmp.w	sl, #0
 8021e9e:	d024      	beq.n	8021eea <__multiply+0xf2>
 8021ea0:	f104 0e14 	add.w	lr, r4, #20
 8021ea4:	46a9      	mov	r9, r5
 8021ea6:	f04f 0c00 	mov.w	ip, #0
 8021eaa:	f85e 2b04 	ldr.w	r2, [lr], #4
 8021eae:	f8d9 1000 	ldr.w	r1, [r9]
 8021eb2:	fa1f fb82 	uxth.w	fp, r2
 8021eb6:	b289      	uxth	r1, r1
 8021eb8:	fb0a 110b 	mla	r1, sl, fp, r1
 8021ebc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8021ec0:	f8d9 2000 	ldr.w	r2, [r9]
 8021ec4:	4461      	add	r1, ip
 8021ec6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8021eca:	fb0a c20b 	mla	r2, sl, fp, ip
 8021ece:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8021ed2:	b289      	uxth	r1, r1
 8021ed4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8021ed8:	4577      	cmp	r7, lr
 8021eda:	f849 1b04 	str.w	r1, [r9], #4
 8021ede:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8021ee2:	d8e2      	bhi.n	8021eaa <__multiply+0xb2>
 8021ee4:	9a01      	ldr	r2, [sp, #4]
 8021ee6:	f845 c002 	str.w	ip, [r5, r2]
 8021eea:	9a03      	ldr	r2, [sp, #12]
 8021eec:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8021ef0:	3304      	adds	r3, #4
 8021ef2:	f1b9 0f00 	cmp.w	r9, #0
 8021ef6:	d021      	beq.n	8021f3c <__multiply+0x144>
 8021ef8:	6829      	ldr	r1, [r5, #0]
 8021efa:	f104 0c14 	add.w	ip, r4, #20
 8021efe:	46ae      	mov	lr, r5
 8021f00:	f04f 0a00 	mov.w	sl, #0
 8021f04:	f8bc b000 	ldrh.w	fp, [ip]
 8021f08:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8021f0c:	fb09 220b 	mla	r2, r9, fp, r2
 8021f10:	4452      	add	r2, sl
 8021f12:	b289      	uxth	r1, r1
 8021f14:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8021f18:	f84e 1b04 	str.w	r1, [lr], #4
 8021f1c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8021f20:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8021f24:	f8be 1000 	ldrh.w	r1, [lr]
 8021f28:	fb09 110a 	mla	r1, r9, sl, r1
 8021f2c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8021f30:	4567      	cmp	r7, ip
 8021f32:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8021f36:	d8e5      	bhi.n	8021f04 <__multiply+0x10c>
 8021f38:	9a01      	ldr	r2, [sp, #4]
 8021f3a:	50a9      	str	r1, [r5, r2]
 8021f3c:	3504      	adds	r5, #4
 8021f3e:	e799      	b.n	8021e74 <__multiply+0x7c>
 8021f40:	3e01      	subs	r6, #1
 8021f42:	e79b      	b.n	8021e7c <__multiply+0x84>
 8021f44:	0802734b 	.word	0x0802734b
 8021f48:	080273bc 	.word	0x080273bc

08021f4c <__pow5mult>:
 8021f4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021f50:	4615      	mov	r5, r2
 8021f52:	f012 0203 	ands.w	r2, r2, #3
 8021f56:	4606      	mov	r6, r0
 8021f58:	460f      	mov	r7, r1
 8021f5a:	d007      	beq.n	8021f6c <__pow5mult+0x20>
 8021f5c:	4c25      	ldr	r4, [pc, #148]	; (8021ff4 <__pow5mult+0xa8>)
 8021f5e:	3a01      	subs	r2, #1
 8021f60:	2300      	movs	r3, #0
 8021f62:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8021f66:	f7ff fe53 	bl	8021c10 <__multadd>
 8021f6a:	4607      	mov	r7, r0
 8021f6c:	10ad      	asrs	r5, r5, #2
 8021f6e:	d03d      	beq.n	8021fec <__pow5mult+0xa0>
 8021f70:	69f4      	ldr	r4, [r6, #28]
 8021f72:	b97c      	cbnz	r4, 8021f94 <__pow5mult+0x48>
 8021f74:	2010      	movs	r0, #16
 8021f76:	f7ff fd23 	bl	80219c0 <malloc>
 8021f7a:	4602      	mov	r2, r0
 8021f7c:	61f0      	str	r0, [r6, #28]
 8021f7e:	b928      	cbnz	r0, 8021f8c <__pow5mult+0x40>
 8021f80:	4b1d      	ldr	r3, [pc, #116]	; (8021ff8 <__pow5mult+0xac>)
 8021f82:	481e      	ldr	r0, [pc, #120]	; (8021ffc <__pow5mult+0xb0>)
 8021f84:	f240 11b3 	movw	r1, #435	; 0x1b3
 8021f88:	f7fe fbb0 	bl	80206ec <__assert_func>
 8021f8c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8021f90:	6004      	str	r4, [r0, #0]
 8021f92:	60c4      	str	r4, [r0, #12]
 8021f94:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8021f98:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8021f9c:	b94c      	cbnz	r4, 8021fb2 <__pow5mult+0x66>
 8021f9e:	f240 2171 	movw	r1, #625	; 0x271
 8021fa2:	4630      	mov	r0, r6
 8021fa4:	f7ff ff12 	bl	8021dcc <__i2b>
 8021fa8:	2300      	movs	r3, #0
 8021faa:	f8c8 0008 	str.w	r0, [r8, #8]
 8021fae:	4604      	mov	r4, r0
 8021fb0:	6003      	str	r3, [r0, #0]
 8021fb2:	f04f 0900 	mov.w	r9, #0
 8021fb6:	07eb      	lsls	r3, r5, #31
 8021fb8:	d50a      	bpl.n	8021fd0 <__pow5mult+0x84>
 8021fba:	4639      	mov	r1, r7
 8021fbc:	4622      	mov	r2, r4
 8021fbe:	4630      	mov	r0, r6
 8021fc0:	f7ff ff1a 	bl	8021df8 <__multiply>
 8021fc4:	4639      	mov	r1, r7
 8021fc6:	4680      	mov	r8, r0
 8021fc8:	4630      	mov	r0, r6
 8021fca:	f7ff fdff 	bl	8021bcc <_Bfree>
 8021fce:	4647      	mov	r7, r8
 8021fd0:	106d      	asrs	r5, r5, #1
 8021fd2:	d00b      	beq.n	8021fec <__pow5mult+0xa0>
 8021fd4:	6820      	ldr	r0, [r4, #0]
 8021fd6:	b938      	cbnz	r0, 8021fe8 <__pow5mult+0x9c>
 8021fd8:	4622      	mov	r2, r4
 8021fda:	4621      	mov	r1, r4
 8021fdc:	4630      	mov	r0, r6
 8021fde:	f7ff ff0b 	bl	8021df8 <__multiply>
 8021fe2:	6020      	str	r0, [r4, #0]
 8021fe4:	f8c0 9000 	str.w	r9, [r0]
 8021fe8:	4604      	mov	r4, r0
 8021fea:	e7e4      	b.n	8021fb6 <__pow5mult+0x6a>
 8021fec:	4638      	mov	r0, r7
 8021fee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8021ff2:	bf00      	nop
 8021ff4:	08027508 	.word	0x08027508
 8021ff8:	080270a4 	.word	0x080270a4
 8021ffc:	080273bc 	.word	0x080273bc

08022000 <__lshift>:
 8022000:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022004:	460c      	mov	r4, r1
 8022006:	6849      	ldr	r1, [r1, #4]
 8022008:	6923      	ldr	r3, [r4, #16]
 802200a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 802200e:	68a3      	ldr	r3, [r4, #8]
 8022010:	4607      	mov	r7, r0
 8022012:	4691      	mov	r9, r2
 8022014:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8022018:	f108 0601 	add.w	r6, r8, #1
 802201c:	42b3      	cmp	r3, r6
 802201e:	db0b      	blt.n	8022038 <__lshift+0x38>
 8022020:	4638      	mov	r0, r7
 8022022:	f7ff fd93 	bl	8021b4c <_Balloc>
 8022026:	4605      	mov	r5, r0
 8022028:	b948      	cbnz	r0, 802203e <__lshift+0x3e>
 802202a:	4602      	mov	r2, r0
 802202c:	4b28      	ldr	r3, [pc, #160]	; (80220d0 <__lshift+0xd0>)
 802202e:	4829      	ldr	r0, [pc, #164]	; (80220d4 <__lshift+0xd4>)
 8022030:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8022034:	f7fe fb5a 	bl	80206ec <__assert_func>
 8022038:	3101      	adds	r1, #1
 802203a:	005b      	lsls	r3, r3, #1
 802203c:	e7ee      	b.n	802201c <__lshift+0x1c>
 802203e:	2300      	movs	r3, #0
 8022040:	f100 0114 	add.w	r1, r0, #20
 8022044:	f100 0210 	add.w	r2, r0, #16
 8022048:	4618      	mov	r0, r3
 802204a:	4553      	cmp	r3, sl
 802204c:	db33      	blt.n	80220b6 <__lshift+0xb6>
 802204e:	6920      	ldr	r0, [r4, #16]
 8022050:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8022054:	f104 0314 	add.w	r3, r4, #20
 8022058:	f019 091f 	ands.w	r9, r9, #31
 802205c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8022060:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8022064:	d02b      	beq.n	80220be <__lshift+0xbe>
 8022066:	f1c9 0e20 	rsb	lr, r9, #32
 802206a:	468a      	mov	sl, r1
 802206c:	2200      	movs	r2, #0
 802206e:	6818      	ldr	r0, [r3, #0]
 8022070:	fa00 f009 	lsl.w	r0, r0, r9
 8022074:	4310      	orrs	r0, r2
 8022076:	f84a 0b04 	str.w	r0, [sl], #4
 802207a:	f853 2b04 	ldr.w	r2, [r3], #4
 802207e:	459c      	cmp	ip, r3
 8022080:	fa22 f20e 	lsr.w	r2, r2, lr
 8022084:	d8f3      	bhi.n	802206e <__lshift+0x6e>
 8022086:	ebac 0304 	sub.w	r3, ip, r4
 802208a:	3b15      	subs	r3, #21
 802208c:	f023 0303 	bic.w	r3, r3, #3
 8022090:	3304      	adds	r3, #4
 8022092:	f104 0015 	add.w	r0, r4, #21
 8022096:	4584      	cmp	ip, r0
 8022098:	bf38      	it	cc
 802209a:	2304      	movcc	r3, #4
 802209c:	50ca      	str	r2, [r1, r3]
 802209e:	b10a      	cbz	r2, 80220a4 <__lshift+0xa4>
 80220a0:	f108 0602 	add.w	r6, r8, #2
 80220a4:	3e01      	subs	r6, #1
 80220a6:	4638      	mov	r0, r7
 80220a8:	612e      	str	r6, [r5, #16]
 80220aa:	4621      	mov	r1, r4
 80220ac:	f7ff fd8e 	bl	8021bcc <_Bfree>
 80220b0:	4628      	mov	r0, r5
 80220b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80220b6:	f842 0f04 	str.w	r0, [r2, #4]!
 80220ba:	3301      	adds	r3, #1
 80220bc:	e7c5      	b.n	802204a <__lshift+0x4a>
 80220be:	3904      	subs	r1, #4
 80220c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80220c4:	f841 2f04 	str.w	r2, [r1, #4]!
 80220c8:	459c      	cmp	ip, r3
 80220ca:	d8f9      	bhi.n	80220c0 <__lshift+0xc0>
 80220cc:	e7ea      	b.n	80220a4 <__lshift+0xa4>
 80220ce:	bf00      	nop
 80220d0:	0802734b 	.word	0x0802734b
 80220d4:	080273bc 	.word	0x080273bc

080220d8 <__mcmp>:
 80220d8:	b530      	push	{r4, r5, lr}
 80220da:	6902      	ldr	r2, [r0, #16]
 80220dc:	690c      	ldr	r4, [r1, #16]
 80220de:	1b12      	subs	r2, r2, r4
 80220e0:	d10e      	bne.n	8022100 <__mcmp+0x28>
 80220e2:	f100 0314 	add.w	r3, r0, #20
 80220e6:	3114      	adds	r1, #20
 80220e8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80220ec:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80220f0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80220f4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80220f8:	42a5      	cmp	r5, r4
 80220fa:	d003      	beq.n	8022104 <__mcmp+0x2c>
 80220fc:	d305      	bcc.n	802210a <__mcmp+0x32>
 80220fe:	2201      	movs	r2, #1
 8022100:	4610      	mov	r0, r2
 8022102:	bd30      	pop	{r4, r5, pc}
 8022104:	4283      	cmp	r3, r0
 8022106:	d3f3      	bcc.n	80220f0 <__mcmp+0x18>
 8022108:	e7fa      	b.n	8022100 <__mcmp+0x28>
 802210a:	f04f 32ff 	mov.w	r2, #4294967295
 802210e:	e7f7      	b.n	8022100 <__mcmp+0x28>

08022110 <__mdiff>:
 8022110:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022114:	460c      	mov	r4, r1
 8022116:	4606      	mov	r6, r0
 8022118:	4611      	mov	r1, r2
 802211a:	4620      	mov	r0, r4
 802211c:	4690      	mov	r8, r2
 802211e:	f7ff ffdb 	bl	80220d8 <__mcmp>
 8022122:	1e05      	subs	r5, r0, #0
 8022124:	d110      	bne.n	8022148 <__mdiff+0x38>
 8022126:	4629      	mov	r1, r5
 8022128:	4630      	mov	r0, r6
 802212a:	f7ff fd0f 	bl	8021b4c <_Balloc>
 802212e:	b930      	cbnz	r0, 802213e <__mdiff+0x2e>
 8022130:	4b3a      	ldr	r3, [pc, #232]	; (802221c <__mdiff+0x10c>)
 8022132:	4602      	mov	r2, r0
 8022134:	f240 2137 	movw	r1, #567	; 0x237
 8022138:	4839      	ldr	r0, [pc, #228]	; (8022220 <__mdiff+0x110>)
 802213a:	f7fe fad7 	bl	80206ec <__assert_func>
 802213e:	2301      	movs	r3, #1
 8022140:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8022144:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022148:	bfa4      	itt	ge
 802214a:	4643      	movge	r3, r8
 802214c:	46a0      	movge	r8, r4
 802214e:	4630      	mov	r0, r6
 8022150:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8022154:	bfa6      	itte	ge
 8022156:	461c      	movge	r4, r3
 8022158:	2500      	movge	r5, #0
 802215a:	2501      	movlt	r5, #1
 802215c:	f7ff fcf6 	bl	8021b4c <_Balloc>
 8022160:	b920      	cbnz	r0, 802216c <__mdiff+0x5c>
 8022162:	4b2e      	ldr	r3, [pc, #184]	; (802221c <__mdiff+0x10c>)
 8022164:	4602      	mov	r2, r0
 8022166:	f240 2145 	movw	r1, #581	; 0x245
 802216a:	e7e5      	b.n	8022138 <__mdiff+0x28>
 802216c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8022170:	6926      	ldr	r6, [r4, #16]
 8022172:	60c5      	str	r5, [r0, #12]
 8022174:	f104 0914 	add.w	r9, r4, #20
 8022178:	f108 0514 	add.w	r5, r8, #20
 802217c:	f100 0e14 	add.w	lr, r0, #20
 8022180:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8022184:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8022188:	f108 0210 	add.w	r2, r8, #16
 802218c:	46f2      	mov	sl, lr
 802218e:	2100      	movs	r1, #0
 8022190:	f859 3b04 	ldr.w	r3, [r9], #4
 8022194:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8022198:	fa11 f88b 	uxtah	r8, r1, fp
 802219c:	b299      	uxth	r1, r3
 802219e:	0c1b      	lsrs	r3, r3, #16
 80221a0:	eba8 0801 	sub.w	r8, r8, r1
 80221a4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80221a8:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80221ac:	fa1f f888 	uxth.w	r8, r8
 80221b0:	1419      	asrs	r1, r3, #16
 80221b2:	454e      	cmp	r6, r9
 80221b4:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80221b8:	f84a 3b04 	str.w	r3, [sl], #4
 80221bc:	d8e8      	bhi.n	8022190 <__mdiff+0x80>
 80221be:	1b33      	subs	r3, r6, r4
 80221c0:	3b15      	subs	r3, #21
 80221c2:	f023 0303 	bic.w	r3, r3, #3
 80221c6:	3304      	adds	r3, #4
 80221c8:	3415      	adds	r4, #21
 80221ca:	42a6      	cmp	r6, r4
 80221cc:	bf38      	it	cc
 80221ce:	2304      	movcc	r3, #4
 80221d0:	441d      	add	r5, r3
 80221d2:	4473      	add	r3, lr
 80221d4:	469e      	mov	lr, r3
 80221d6:	462e      	mov	r6, r5
 80221d8:	4566      	cmp	r6, ip
 80221da:	d30e      	bcc.n	80221fa <__mdiff+0xea>
 80221dc:	f10c 0203 	add.w	r2, ip, #3
 80221e0:	1b52      	subs	r2, r2, r5
 80221e2:	f022 0203 	bic.w	r2, r2, #3
 80221e6:	3d03      	subs	r5, #3
 80221e8:	45ac      	cmp	ip, r5
 80221ea:	bf38      	it	cc
 80221ec:	2200      	movcc	r2, #0
 80221ee:	4413      	add	r3, r2
 80221f0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80221f4:	b17a      	cbz	r2, 8022216 <__mdiff+0x106>
 80221f6:	6107      	str	r7, [r0, #16]
 80221f8:	e7a4      	b.n	8022144 <__mdiff+0x34>
 80221fa:	f856 8b04 	ldr.w	r8, [r6], #4
 80221fe:	fa11 f288 	uxtah	r2, r1, r8
 8022202:	1414      	asrs	r4, r2, #16
 8022204:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8022208:	b292      	uxth	r2, r2
 802220a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 802220e:	f84e 2b04 	str.w	r2, [lr], #4
 8022212:	1421      	asrs	r1, r4, #16
 8022214:	e7e0      	b.n	80221d8 <__mdiff+0xc8>
 8022216:	3f01      	subs	r7, #1
 8022218:	e7ea      	b.n	80221f0 <__mdiff+0xe0>
 802221a:	bf00      	nop
 802221c:	0802734b 	.word	0x0802734b
 8022220:	080273bc 	.word	0x080273bc

08022224 <__ulp>:
 8022224:	b082      	sub	sp, #8
 8022226:	ed8d 0b00 	vstr	d0, [sp]
 802222a:	9a01      	ldr	r2, [sp, #4]
 802222c:	4b0f      	ldr	r3, [pc, #60]	; (802226c <__ulp+0x48>)
 802222e:	4013      	ands	r3, r2
 8022230:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8022234:	2b00      	cmp	r3, #0
 8022236:	dc08      	bgt.n	802224a <__ulp+0x26>
 8022238:	425b      	negs	r3, r3
 802223a:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 802223e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8022242:	da04      	bge.n	802224e <__ulp+0x2a>
 8022244:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8022248:	4113      	asrs	r3, r2
 802224a:	2200      	movs	r2, #0
 802224c:	e008      	b.n	8022260 <__ulp+0x3c>
 802224e:	f1a2 0314 	sub.w	r3, r2, #20
 8022252:	2b1e      	cmp	r3, #30
 8022254:	bfda      	itte	le
 8022256:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 802225a:	40da      	lsrle	r2, r3
 802225c:	2201      	movgt	r2, #1
 802225e:	2300      	movs	r3, #0
 8022260:	4619      	mov	r1, r3
 8022262:	4610      	mov	r0, r2
 8022264:	ec41 0b10 	vmov	d0, r0, r1
 8022268:	b002      	add	sp, #8
 802226a:	4770      	bx	lr
 802226c:	7ff00000 	.word	0x7ff00000

08022270 <__b2d>:
 8022270:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022274:	6906      	ldr	r6, [r0, #16]
 8022276:	f100 0814 	add.w	r8, r0, #20
 802227a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 802227e:	1f37      	subs	r7, r6, #4
 8022280:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8022284:	4610      	mov	r0, r2
 8022286:	f7ff fd53 	bl	8021d30 <__hi0bits>
 802228a:	f1c0 0320 	rsb	r3, r0, #32
 802228e:	280a      	cmp	r0, #10
 8022290:	600b      	str	r3, [r1, #0]
 8022292:	491b      	ldr	r1, [pc, #108]	; (8022300 <__b2d+0x90>)
 8022294:	dc15      	bgt.n	80222c2 <__b2d+0x52>
 8022296:	f1c0 0c0b 	rsb	ip, r0, #11
 802229a:	fa22 f30c 	lsr.w	r3, r2, ip
 802229e:	45b8      	cmp	r8, r7
 80222a0:	ea43 0501 	orr.w	r5, r3, r1
 80222a4:	bf34      	ite	cc
 80222a6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80222aa:	2300      	movcs	r3, #0
 80222ac:	3015      	adds	r0, #21
 80222ae:	fa02 f000 	lsl.w	r0, r2, r0
 80222b2:	fa23 f30c 	lsr.w	r3, r3, ip
 80222b6:	4303      	orrs	r3, r0
 80222b8:	461c      	mov	r4, r3
 80222ba:	ec45 4b10 	vmov	d0, r4, r5
 80222be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80222c2:	45b8      	cmp	r8, r7
 80222c4:	bf3a      	itte	cc
 80222c6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80222ca:	f1a6 0708 	subcc.w	r7, r6, #8
 80222ce:	2300      	movcs	r3, #0
 80222d0:	380b      	subs	r0, #11
 80222d2:	d012      	beq.n	80222fa <__b2d+0x8a>
 80222d4:	f1c0 0120 	rsb	r1, r0, #32
 80222d8:	fa23 f401 	lsr.w	r4, r3, r1
 80222dc:	4082      	lsls	r2, r0
 80222de:	4322      	orrs	r2, r4
 80222e0:	4547      	cmp	r7, r8
 80222e2:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 80222e6:	bf8c      	ite	hi
 80222e8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80222ec:	2200      	movls	r2, #0
 80222ee:	4083      	lsls	r3, r0
 80222f0:	40ca      	lsrs	r2, r1
 80222f2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80222f6:	4313      	orrs	r3, r2
 80222f8:	e7de      	b.n	80222b8 <__b2d+0x48>
 80222fa:	ea42 0501 	orr.w	r5, r2, r1
 80222fe:	e7db      	b.n	80222b8 <__b2d+0x48>
 8022300:	3ff00000 	.word	0x3ff00000

08022304 <__d2b>:
 8022304:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8022308:	460f      	mov	r7, r1
 802230a:	2101      	movs	r1, #1
 802230c:	ec59 8b10 	vmov	r8, r9, d0
 8022310:	4616      	mov	r6, r2
 8022312:	f7ff fc1b 	bl	8021b4c <_Balloc>
 8022316:	4604      	mov	r4, r0
 8022318:	b930      	cbnz	r0, 8022328 <__d2b+0x24>
 802231a:	4602      	mov	r2, r0
 802231c:	4b24      	ldr	r3, [pc, #144]	; (80223b0 <__d2b+0xac>)
 802231e:	4825      	ldr	r0, [pc, #148]	; (80223b4 <__d2b+0xb0>)
 8022320:	f240 310f 	movw	r1, #783	; 0x30f
 8022324:	f7fe f9e2 	bl	80206ec <__assert_func>
 8022328:	f3c9 550a 	ubfx	r5, r9, #20, #11
 802232c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8022330:	bb2d      	cbnz	r5, 802237e <__d2b+0x7a>
 8022332:	9301      	str	r3, [sp, #4]
 8022334:	f1b8 0300 	subs.w	r3, r8, #0
 8022338:	d026      	beq.n	8022388 <__d2b+0x84>
 802233a:	4668      	mov	r0, sp
 802233c:	9300      	str	r3, [sp, #0]
 802233e:	f7ff fd17 	bl	8021d70 <__lo0bits>
 8022342:	e9dd 1200 	ldrd	r1, r2, [sp]
 8022346:	b1e8      	cbz	r0, 8022384 <__d2b+0x80>
 8022348:	f1c0 0320 	rsb	r3, r0, #32
 802234c:	fa02 f303 	lsl.w	r3, r2, r3
 8022350:	430b      	orrs	r3, r1
 8022352:	40c2      	lsrs	r2, r0
 8022354:	6163      	str	r3, [r4, #20]
 8022356:	9201      	str	r2, [sp, #4]
 8022358:	9b01      	ldr	r3, [sp, #4]
 802235a:	61a3      	str	r3, [r4, #24]
 802235c:	2b00      	cmp	r3, #0
 802235e:	bf14      	ite	ne
 8022360:	2202      	movne	r2, #2
 8022362:	2201      	moveq	r2, #1
 8022364:	6122      	str	r2, [r4, #16]
 8022366:	b1bd      	cbz	r5, 8022398 <__d2b+0x94>
 8022368:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 802236c:	4405      	add	r5, r0
 802236e:	603d      	str	r5, [r7, #0]
 8022370:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8022374:	6030      	str	r0, [r6, #0]
 8022376:	4620      	mov	r0, r4
 8022378:	b003      	add	sp, #12
 802237a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802237e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8022382:	e7d6      	b.n	8022332 <__d2b+0x2e>
 8022384:	6161      	str	r1, [r4, #20]
 8022386:	e7e7      	b.n	8022358 <__d2b+0x54>
 8022388:	a801      	add	r0, sp, #4
 802238a:	f7ff fcf1 	bl	8021d70 <__lo0bits>
 802238e:	9b01      	ldr	r3, [sp, #4]
 8022390:	6163      	str	r3, [r4, #20]
 8022392:	3020      	adds	r0, #32
 8022394:	2201      	movs	r2, #1
 8022396:	e7e5      	b.n	8022364 <__d2b+0x60>
 8022398:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 802239c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80223a0:	6038      	str	r0, [r7, #0]
 80223a2:	6918      	ldr	r0, [r3, #16]
 80223a4:	f7ff fcc4 	bl	8021d30 <__hi0bits>
 80223a8:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80223ac:	e7e2      	b.n	8022374 <__d2b+0x70>
 80223ae:	bf00      	nop
 80223b0:	0802734b 	.word	0x0802734b
 80223b4:	080273bc 	.word	0x080273bc

080223b8 <__ratio>:
 80223b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80223bc:	4688      	mov	r8, r1
 80223be:	4669      	mov	r1, sp
 80223c0:	4681      	mov	r9, r0
 80223c2:	f7ff ff55 	bl	8022270 <__b2d>
 80223c6:	a901      	add	r1, sp, #4
 80223c8:	4640      	mov	r0, r8
 80223ca:	ec55 4b10 	vmov	r4, r5, d0
 80223ce:	ee10 aa10 	vmov	sl, s0
 80223d2:	f7ff ff4d 	bl	8022270 <__b2d>
 80223d6:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80223da:	f8d9 2010 	ldr.w	r2, [r9, #16]
 80223de:	1ad2      	subs	r2, r2, r3
 80223e0:	e9dd 3100 	ldrd	r3, r1, [sp]
 80223e4:	1a5b      	subs	r3, r3, r1
 80223e6:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 80223ea:	ec57 6b10 	vmov	r6, r7, d0
 80223ee:	2b00      	cmp	r3, #0
 80223f0:	bfd6      	itet	le
 80223f2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80223f6:	462a      	movgt	r2, r5
 80223f8:	463a      	movle	r2, r7
 80223fa:	46ab      	mov	fp, r5
 80223fc:	bfd6      	itet	le
 80223fe:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 8022402:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8022406:	ee00 3a90 	vmovle	s1, r3
 802240a:	ec4b ab17 	vmov	d7, sl, fp
 802240e:	ee87 0b00 	vdiv.f64	d0, d7, d0
 8022412:	b003      	add	sp, #12
 8022414:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08022418 <__copybits>:
 8022418:	3901      	subs	r1, #1
 802241a:	b570      	push	{r4, r5, r6, lr}
 802241c:	1149      	asrs	r1, r1, #5
 802241e:	6914      	ldr	r4, [r2, #16]
 8022420:	3101      	adds	r1, #1
 8022422:	f102 0314 	add.w	r3, r2, #20
 8022426:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 802242a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 802242e:	1f05      	subs	r5, r0, #4
 8022430:	42a3      	cmp	r3, r4
 8022432:	d30c      	bcc.n	802244e <__copybits+0x36>
 8022434:	1aa3      	subs	r3, r4, r2
 8022436:	3b11      	subs	r3, #17
 8022438:	f023 0303 	bic.w	r3, r3, #3
 802243c:	3211      	adds	r2, #17
 802243e:	42a2      	cmp	r2, r4
 8022440:	bf88      	it	hi
 8022442:	2300      	movhi	r3, #0
 8022444:	4418      	add	r0, r3
 8022446:	2300      	movs	r3, #0
 8022448:	4288      	cmp	r0, r1
 802244a:	d305      	bcc.n	8022458 <__copybits+0x40>
 802244c:	bd70      	pop	{r4, r5, r6, pc}
 802244e:	f853 6b04 	ldr.w	r6, [r3], #4
 8022452:	f845 6f04 	str.w	r6, [r5, #4]!
 8022456:	e7eb      	b.n	8022430 <__copybits+0x18>
 8022458:	f840 3b04 	str.w	r3, [r0], #4
 802245c:	e7f4      	b.n	8022448 <__copybits+0x30>

0802245e <__any_on>:
 802245e:	f100 0214 	add.w	r2, r0, #20
 8022462:	6900      	ldr	r0, [r0, #16]
 8022464:	114b      	asrs	r3, r1, #5
 8022466:	4298      	cmp	r0, r3
 8022468:	b510      	push	{r4, lr}
 802246a:	db11      	blt.n	8022490 <__any_on+0x32>
 802246c:	dd0a      	ble.n	8022484 <__any_on+0x26>
 802246e:	f011 011f 	ands.w	r1, r1, #31
 8022472:	d007      	beq.n	8022484 <__any_on+0x26>
 8022474:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8022478:	fa24 f001 	lsr.w	r0, r4, r1
 802247c:	fa00 f101 	lsl.w	r1, r0, r1
 8022480:	428c      	cmp	r4, r1
 8022482:	d10b      	bne.n	802249c <__any_on+0x3e>
 8022484:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8022488:	4293      	cmp	r3, r2
 802248a:	d803      	bhi.n	8022494 <__any_on+0x36>
 802248c:	2000      	movs	r0, #0
 802248e:	bd10      	pop	{r4, pc}
 8022490:	4603      	mov	r3, r0
 8022492:	e7f7      	b.n	8022484 <__any_on+0x26>
 8022494:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8022498:	2900      	cmp	r1, #0
 802249a:	d0f5      	beq.n	8022488 <__any_on+0x2a>
 802249c:	2001      	movs	r0, #1
 802249e:	e7f6      	b.n	802248e <__any_on+0x30>

080224a0 <__ascii_wctomb>:
 80224a0:	b149      	cbz	r1, 80224b6 <__ascii_wctomb+0x16>
 80224a2:	2aff      	cmp	r2, #255	; 0xff
 80224a4:	bf85      	ittet	hi
 80224a6:	238a      	movhi	r3, #138	; 0x8a
 80224a8:	6003      	strhi	r3, [r0, #0]
 80224aa:	700a      	strbls	r2, [r1, #0]
 80224ac:	f04f 30ff 	movhi.w	r0, #4294967295
 80224b0:	bf98      	it	ls
 80224b2:	2001      	movls	r0, #1
 80224b4:	4770      	bx	lr
 80224b6:	4608      	mov	r0, r1
 80224b8:	4770      	bx	lr

080224ba <__ssputs_r>:
 80224ba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80224be:	688e      	ldr	r6, [r1, #8]
 80224c0:	461f      	mov	r7, r3
 80224c2:	42be      	cmp	r6, r7
 80224c4:	680b      	ldr	r3, [r1, #0]
 80224c6:	4682      	mov	sl, r0
 80224c8:	460c      	mov	r4, r1
 80224ca:	4690      	mov	r8, r2
 80224cc:	d82c      	bhi.n	8022528 <__ssputs_r+0x6e>
 80224ce:	898a      	ldrh	r2, [r1, #12]
 80224d0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80224d4:	d026      	beq.n	8022524 <__ssputs_r+0x6a>
 80224d6:	6965      	ldr	r5, [r4, #20]
 80224d8:	6909      	ldr	r1, [r1, #16]
 80224da:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80224de:	eba3 0901 	sub.w	r9, r3, r1
 80224e2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80224e6:	1c7b      	adds	r3, r7, #1
 80224e8:	444b      	add	r3, r9
 80224ea:	106d      	asrs	r5, r5, #1
 80224ec:	429d      	cmp	r5, r3
 80224ee:	bf38      	it	cc
 80224f0:	461d      	movcc	r5, r3
 80224f2:	0553      	lsls	r3, r2, #21
 80224f4:	d527      	bpl.n	8022546 <__ssputs_r+0x8c>
 80224f6:	4629      	mov	r1, r5
 80224f8:	f7ff fa8a 	bl	8021a10 <_malloc_r>
 80224fc:	4606      	mov	r6, r0
 80224fe:	b360      	cbz	r0, 802255a <__ssputs_r+0xa0>
 8022500:	6921      	ldr	r1, [r4, #16]
 8022502:	464a      	mov	r2, r9
 8022504:	f7fe f8d5 	bl	80206b2 <memcpy>
 8022508:	89a3      	ldrh	r3, [r4, #12]
 802250a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 802250e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8022512:	81a3      	strh	r3, [r4, #12]
 8022514:	6126      	str	r6, [r4, #16]
 8022516:	6165      	str	r5, [r4, #20]
 8022518:	444e      	add	r6, r9
 802251a:	eba5 0509 	sub.w	r5, r5, r9
 802251e:	6026      	str	r6, [r4, #0]
 8022520:	60a5      	str	r5, [r4, #8]
 8022522:	463e      	mov	r6, r7
 8022524:	42be      	cmp	r6, r7
 8022526:	d900      	bls.n	802252a <__ssputs_r+0x70>
 8022528:	463e      	mov	r6, r7
 802252a:	6820      	ldr	r0, [r4, #0]
 802252c:	4632      	mov	r2, r6
 802252e:	4641      	mov	r1, r8
 8022530:	f7fe f813 	bl	802055a <memmove>
 8022534:	68a3      	ldr	r3, [r4, #8]
 8022536:	1b9b      	subs	r3, r3, r6
 8022538:	60a3      	str	r3, [r4, #8]
 802253a:	6823      	ldr	r3, [r4, #0]
 802253c:	4433      	add	r3, r6
 802253e:	6023      	str	r3, [r4, #0]
 8022540:	2000      	movs	r0, #0
 8022542:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022546:	462a      	mov	r2, r5
 8022548:	f000 fc24 	bl	8022d94 <_realloc_r>
 802254c:	4606      	mov	r6, r0
 802254e:	2800      	cmp	r0, #0
 8022550:	d1e0      	bne.n	8022514 <__ssputs_r+0x5a>
 8022552:	6921      	ldr	r1, [r4, #16]
 8022554:	4650      	mov	r0, sl
 8022556:	f000 fbd1 	bl	8022cfc <_free_r>
 802255a:	230c      	movs	r3, #12
 802255c:	f8ca 3000 	str.w	r3, [sl]
 8022560:	89a3      	ldrh	r3, [r4, #12]
 8022562:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8022566:	81a3      	strh	r3, [r4, #12]
 8022568:	f04f 30ff 	mov.w	r0, #4294967295
 802256c:	e7e9      	b.n	8022542 <__ssputs_r+0x88>
	...

08022570 <_svfiprintf_r>:
 8022570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022574:	4698      	mov	r8, r3
 8022576:	898b      	ldrh	r3, [r1, #12]
 8022578:	061b      	lsls	r3, r3, #24
 802257a:	b09d      	sub	sp, #116	; 0x74
 802257c:	4607      	mov	r7, r0
 802257e:	460d      	mov	r5, r1
 8022580:	4614      	mov	r4, r2
 8022582:	d50e      	bpl.n	80225a2 <_svfiprintf_r+0x32>
 8022584:	690b      	ldr	r3, [r1, #16]
 8022586:	b963      	cbnz	r3, 80225a2 <_svfiprintf_r+0x32>
 8022588:	2140      	movs	r1, #64	; 0x40
 802258a:	f7ff fa41 	bl	8021a10 <_malloc_r>
 802258e:	6028      	str	r0, [r5, #0]
 8022590:	6128      	str	r0, [r5, #16]
 8022592:	b920      	cbnz	r0, 802259e <_svfiprintf_r+0x2e>
 8022594:	230c      	movs	r3, #12
 8022596:	603b      	str	r3, [r7, #0]
 8022598:	f04f 30ff 	mov.w	r0, #4294967295
 802259c:	e0d0      	b.n	8022740 <_svfiprintf_r+0x1d0>
 802259e:	2340      	movs	r3, #64	; 0x40
 80225a0:	616b      	str	r3, [r5, #20]
 80225a2:	2300      	movs	r3, #0
 80225a4:	9309      	str	r3, [sp, #36]	; 0x24
 80225a6:	2320      	movs	r3, #32
 80225a8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80225ac:	f8cd 800c 	str.w	r8, [sp, #12]
 80225b0:	2330      	movs	r3, #48	; 0x30
 80225b2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8022758 <_svfiprintf_r+0x1e8>
 80225b6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80225ba:	f04f 0901 	mov.w	r9, #1
 80225be:	4623      	mov	r3, r4
 80225c0:	469a      	mov	sl, r3
 80225c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80225c6:	b10a      	cbz	r2, 80225cc <_svfiprintf_r+0x5c>
 80225c8:	2a25      	cmp	r2, #37	; 0x25
 80225ca:	d1f9      	bne.n	80225c0 <_svfiprintf_r+0x50>
 80225cc:	ebba 0b04 	subs.w	fp, sl, r4
 80225d0:	d00b      	beq.n	80225ea <_svfiprintf_r+0x7a>
 80225d2:	465b      	mov	r3, fp
 80225d4:	4622      	mov	r2, r4
 80225d6:	4629      	mov	r1, r5
 80225d8:	4638      	mov	r0, r7
 80225da:	f7ff ff6e 	bl	80224ba <__ssputs_r>
 80225de:	3001      	adds	r0, #1
 80225e0:	f000 80a9 	beq.w	8022736 <_svfiprintf_r+0x1c6>
 80225e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80225e6:	445a      	add	r2, fp
 80225e8:	9209      	str	r2, [sp, #36]	; 0x24
 80225ea:	f89a 3000 	ldrb.w	r3, [sl]
 80225ee:	2b00      	cmp	r3, #0
 80225f0:	f000 80a1 	beq.w	8022736 <_svfiprintf_r+0x1c6>
 80225f4:	2300      	movs	r3, #0
 80225f6:	f04f 32ff 	mov.w	r2, #4294967295
 80225fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80225fe:	f10a 0a01 	add.w	sl, sl, #1
 8022602:	9304      	str	r3, [sp, #16]
 8022604:	9307      	str	r3, [sp, #28]
 8022606:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802260a:	931a      	str	r3, [sp, #104]	; 0x68
 802260c:	4654      	mov	r4, sl
 802260e:	2205      	movs	r2, #5
 8022610:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022614:	4850      	ldr	r0, [pc, #320]	; (8022758 <_svfiprintf_r+0x1e8>)
 8022616:	f7dd fe73 	bl	8000300 <memchr>
 802261a:	9a04      	ldr	r2, [sp, #16]
 802261c:	b9d8      	cbnz	r0, 8022656 <_svfiprintf_r+0xe6>
 802261e:	06d0      	lsls	r0, r2, #27
 8022620:	bf44      	itt	mi
 8022622:	2320      	movmi	r3, #32
 8022624:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8022628:	0711      	lsls	r1, r2, #28
 802262a:	bf44      	itt	mi
 802262c:	232b      	movmi	r3, #43	; 0x2b
 802262e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8022632:	f89a 3000 	ldrb.w	r3, [sl]
 8022636:	2b2a      	cmp	r3, #42	; 0x2a
 8022638:	d015      	beq.n	8022666 <_svfiprintf_r+0xf6>
 802263a:	9a07      	ldr	r2, [sp, #28]
 802263c:	4654      	mov	r4, sl
 802263e:	2000      	movs	r0, #0
 8022640:	f04f 0c0a 	mov.w	ip, #10
 8022644:	4621      	mov	r1, r4
 8022646:	f811 3b01 	ldrb.w	r3, [r1], #1
 802264a:	3b30      	subs	r3, #48	; 0x30
 802264c:	2b09      	cmp	r3, #9
 802264e:	d94d      	bls.n	80226ec <_svfiprintf_r+0x17c>
 8022650:	b1b0      	cbz	r0, 8022680 <_svfiprintf_r+0x110>
 8022652:	9207      	str	r2, [sp, #28]
 8022654:	e014      	b.n	8022680 <_svfiprintf_r+0x110>
 8022656:	eba0 0308 	sub.w	r3, r0, r8
 802265a:	fa09 f303 	lsl.w	r3, r9, r3
 802265e:	4313      	orrs	r3, r2
 8022660:	9304      	str	r3, [sp, #16]
 8022662:	46a2      	mov	sl, r4
 8022664:	e7d2      	b.n	802260c <_svfiprintf_r+0x9c>
 8022666:	9b03      	ldr	r3, [sp, #12]
 8022668:	1d19      	adds	r1, r3, #4
 802266a:	681b      	ldr	r3, [r3, #0]
 802266c:	9103      	str	r1, [sp, #12]
 802266e:	2b00      	cmp	r3, #0
 8022670:	bfbb      	ittet	lt
 8022672:	425b      	neglt	r3, r3
 8022674:	f042 0202 	orrlt.w	r2, r2, #2
 8022678:	9307      	strge	r3, [sp, #28]
 802267a:	9307      	strlt	r3, [sp, #28]
 802267c:	bfb8      	it	lt
 802267e:	9204      	strlt	r2, [sp, #16]
 8022680:	7823      	ldrb	r3, [r4, #0]
 8022682:	2b2e      	cmp	r3, #46	; 0x2e
 8022684:	d10c      	bne.n	80226a0 <_svfiprintf_r+0x130>
 8022686:	7863      	ldrb	r3, [r4, #1]
 8022688:	2b2a      	cmp	r3, #42	; 0x2a
 802268a:	d134      	bne.n	80226f6 <_svfiprintf_r+0x186>
 802268c:	9b03      	ldr	r3, [sp, #12]
 802268e:	1d1a      	adds	r2, r3, #4
 8022690:	681b      	ldr	r3, [r3, #0]
 8022692:	9203      	str	r2, [sp, #12]
 8022694:	2b00      	cmp	r3, #0
 8022696:	bfb8      	it	lt
 8022698:	f04f 33ff 	movlt.w	r3, #4294967295
 802269c:	3402      	adds	r4, #2
 802269e:	9305      	str	r3, [sp, #20]
 80226a0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8022768 <_svfiprintf_r+0x1f8>
 80226a4:	7821      	ldrb	r1, [r4, #0]
 80226a6:	2203      	movs	r2, #3
 80226a8:	4650      	mov	r0, sl
 80226aa:	f7dd fe29 	bl	8000300 <memchr>
 80226ae:	b138      	cbz	r0, 80226c0 <_svfiprintf_r+0x150>
 80226b0:	9b04      	ldr	r3, [sp, #16]
 80226b2:	eba0 000a 	sub.w	r0, r0, sl
 80226b6:	2240      	movs	r2, #64	; 0x40
 80226b8:	4082      	lsls	r2, r0
 80226ba:	4313      	orrs	r3, r2
 80226bc:	3401      	adds	r4, #1
 80226be:	9304      	str	r3, [sp, #16]
 80226c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80226c4:	4825      	ldr	r0, [pc, #148]	; (802275c <_svfiprintf_r+0x1ec>)
 80226c6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80226ca:	2206      	movs	r2, #6
 80226cc:	f7dd fe18 	bl	8000300 <memchr>
 80226d0:	2800      	cmp	r0, #0
 80226d2:	d038      	beq.n	8022746 <_svfiprintf_r+0x1d6>
 80226d4:	4b22      	ldr	r3, [pc, #136]	; (8022760 <_svfiprintf_r+0x1f0>)
 80226d6:	bb1b      	cbnz	r3, 8022720 <_svfiprintf_r+0x1b0>
 80226d8:	9b03      	ldr	r3, [sp, #12]
 80226da:	3307      	adds	r3, #7
 80226dc:	f023 0307 	bic.w	r3, r3, #7
 80226e0:	3308      	adds	r3, #8
 80226e2:	9303      	str	r3, [sp, #12]
 80226e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80226e6:	4433      	add	r3, r6
 80226e8:	9309      	str	r3, [sp, #36]	; 0x24
 80226ea:	e768      	b.n	80225be <_svfiprintf_r+0x4e>
 80226ec:	fb0c 3202 	mla	r2, ip, r2, r3
 80226f0:	460c      	mov	r4, r1
 80226f2:	2001      	movs	r0, #1
 80226f4:	e7a6      	b.n	8022644 <_svfiprintf_r+0xd4>
 80226f6:	2300      	movs	r3, #0
 80226f8:	3401      	adds	r4, #1
 80226fa:	9305      	str	r3, [sp, #20]
 80226fc:	4619      	mov	r1, r3
 80226fe:	f04f 0c0a 	mov.w	ip, #10
 8022702:	4620      	mov	r0, r4
 8022704:	f810 2b01 	ldrb.w	r2, [r0], #1
 8022708:	3a30      	subs	r2, #48	; 0x30
 802270a:	2a09      	cmp	r2, #9
 802270c:	d903      	bls.n	8022716 <_svfiprintf_r+0x1a6>
 802270e:	2b00      	cmp	r3, #0
 8022710:	d0c6      	beq.n	80226a0 <_svfiprintf_r+0x130>
 8022712:	9105      	str	r1, [sp, #20]
 8022714:	e7c4      	b.n	80226a0 <_svfiprintf_r+0x130>
 8022716:	fb0c 2101 	mla	r1, ip, r1, r2
 802271a:	4604      	mov	r4, r0
 802271c:	2301      	movs	r3, #1
 802271e:	e7f0      	b.n	8022702 <_svfiprintf_r+0x192>
 8022720:	ab03      	add	r3, sp, #12
 8022722:	9300      	str	r3, [sp, #0]
 8022724:	462a      	mov	r2, r5
 8022726:	4b0f      	ldr	r3, [pc, #60]	; (8022764 <_svfiprintf_r+0x1f4>)
 8022728:	a904      	add	r1, sp, #16
 802272a:	4638      	mov	r0, r7
 802272c:	f7fd f820 	bl	801f770 <_printf_float>
 8022730:	1c42      	adds	r2, r0, #1
 8022732:	4606      	mov	r6, r0
 8022734:	d1d6      	bne.n	80226e4 <_svfiprintf_r+0x174>
 8022736:	89ab      	ldrh	r3, [r5, #12]
 8022738:	065b      	lsls	r3, r3, #25
 802273a:	f53f af2d 	bmi.w	8022598 <_svfiprintf_r+0x28>
 802273e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8022740:	b01d      	add	sp, #116	; 0x74
 8022742:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022746:	ab03      	add	r3, sp, #12
 8022748:	9300      	str	r3, [sp, #0]
 802274a:	462a      	mov	r2, r5
 802274c:	4b05      	ldr	r3, [pc, #20]	; (8022764 <_svfiprintf_r+0x1f4>)
 802274e:	a904      	add	r1, sp, #16
 8022750:	4638      	mov	r0, r7
 8022752:	f7fd fa95 	bl	801fc80 <_printf_i>
 8022756:	e7eb      	b.n	8022730 <_svfiprintf_r+0x1c0>
 8022758:	08027514 	.word	0x08027514
 802275c:	0802751e 	.word	0x0802751e
 8022760:	0801f771 	.word	0x0801f771
 8022764:	080224bb 	.word	0x080224bb
 8022768:	0802751a 	.word	0x0802751a

0802276c <__sfputc_r>:
 802276c:	6893      	ldr	r3, [r2, #8]
 802276e:	3b01      	subs	r3, #1
 8022770:	2b00      	cmp	r3, #0
 8022772:	b410      	push	{r4}
 8022774:	6093      	str	r3, [r2, #8]
 8022776:	da08      	bge.n	802278a <__sfputc_r+0x1e>
 8022778:	6994      	ldr	r4, [r2, #24]
 802277a:	42a3      	cmp	r3, r4
 802277c:	db01      	blt.n	8022782 <__sfputc_r+0x16>
 802277e:	290a      	cmp	r1, #10
 8022780:	d103      	bne.n	802278a <__sfputc_r+0x1e>
 8022782:	f85d 4b04 	ldr.w	r4, [sp], #4
 8022786:	f000 b9f5 	b.w	8022b74 <__swbuf_r>
 802278a:	6813      	ldr	r3, [r2, #0]
 802278c:	1c58      	adds	r0, r3, #1
 802278e:	6010      	str	r0, [r2, #0]
 8022790:	7019      	strb	r1, [r3, #0]
 8022792:	4608      	mov	r0, r1
 8022794:	f85d 4b04 	ldr.w	r4, [sp], #4
 8022798:	4770      	bx	lr

0802279a <__sfputs_r>:
 802279a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802279c:	4606      	mov	r6, r0
 802279e:	460f      	mov	r7, r1
 80227a0:	4614      	mov	r4, r2
 80227a2:	18d5      	adds	r5, r2, r3
 80227a4:	42ac      	cmp	r4, r5
 80227a6:	d101      	bne.n	80227ac <__sfputs_r+0x12>
 80227a8:	2000      	movs	r0, #0
 80227aa:	e007      	b.n	80227bc <__sfputs_r+0x22>
 80227ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80227b0:	463a      	mov	r2, r7
 80227b2:	4630      	mov	r0, r6
 80227b4:	f7ff ffda 	bl	802276c <__sfputc_r>
 80227b8:	1c43      	adds	r3, r0, #1
 80227ba:	d1f3      	bne.n	80227a4 <__sfputs_r+0xa>
 80227bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080227c0 <_vfiprintf_r>:
 80227c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80227c4:	460d      	mov	r5, r1
 80227c6:	b09d      	sub	sp, #116	; 0x74
 80227c8:	4614      	mov	r4, r2
 80227ca:	4698      	mov	r8, r3
 80227cc:	4606      	mov	r6, r0
 80227ce:	b118      	cbz	r0, 80227d8 <_vfiprintf_r+0x18>
 80227d0:	6a03      	ldr	r3, [r0, #32]
 80227d2:	b90b      	cbnz	r3, 80227d8 <_vfiprintf_r+0x18>
 80227d4:	f7fd fe06 	bl	80203e4 <__sinit>
 80227d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80227da:	07d9      	lsls	r1, r3, #31
 80227dc:	d405      	bmi.n	80227ea <_vfiprintf_r+0x2a>
 80227de:	89ab      	ldrh	r3, [r5, #12]
 80227e0:	059a      	lsls	r2, r3, #22
 80227e2:	d402      	bmi.n	80227ea <_vfiprintf_r+0x2a>
 80227e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80227e6:	f7fd ff62 	bl	80206ae <__retarget_lock_acquire_recursive>
 80227ea:	89ab      	ldrh	r3, [r5, #12]
 80227ec:	071b      	lsls	r3, r3, #28
 80227ee:	d501      	bpl.n	80227f4 <_vfiprintf_r+0x34>
 80227f0:	692b      	ldr	r3, [r5, #16]
 80227f2:	b99b      	cbnz	r3, 802281c <_vfiprintf_r+0x5c>
 80227f4:	4629      	mov	r1, r5
 80227f6:	4630      	mov	r0, r6
 80227f8:	f000 f9fa 	bl	8022bf0 <__swsetup_r>
 80227fc:	b170      	cbz	r0, 802281c <_vfiprintf_r+0x5c>
 80227fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8022800:	07dc      	lsls	r4, r3, #31
 8022802:	d504      	bpl.n	802280e <_vfiprintf_r+0x4e>
 8022804:	f04f 30ff 	mov.w	r0, #4294967295
 8022808:	b01d      	add	sp, #116	; 0x74
 802280a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802280e:	89ab      	ldrh	r3, [r5, #12]
 8022810:	0598      	lsls	r0, r3, #22
 8022812:	d4f7      	bmi.n	8022804 <_vfiprintf_r+0x44>
 8022814:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8022816:	f7fd ff4b 	bl	80206b0 <__retarget_lock_release_recursive>
 802281a:	e7f3      	b.n	8022804 <_vfiprintf_r+0x44>
 802281c:	2300      	movs	r3, #0
 802281e:	9309      	str	r3, [sp, #36]	; 0x24
 8022820:	2320      	movs	r3, #32
 8022822:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8022826:	f8cd 800c 	str.w	r8, [sp, #12]
 802282a:	2330      	movs	r3, #48	; 0x30
 802282c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80229e0 <_vfiprintf_r+0x220>
 8022830:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8022834:	f04f 0901 	mov.w	r9, #1
 8022838:	4623      	mov	r3, r4
 802283a:	469a      	mov	sl, r3
 802283c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8022840:	b10a      	cbz	r2, 8022846 <_vfiprintf_r+0x86>
 8022842:	2a25      	cmp	r2, #37	; 0x25
 8022844:	d1f9      	bne.n	802283a <_vfiprintf_r+0x7a>
 8022846:	ebba 0b04 	subs.w	fp, sl, r4
 802284a:	d00b      	beq.n	8022864 <_vfiprintf_r+0xa4>
 802284c:	465b      	mov	r3, fp
 802284e:	4622      	mov	r2, r4
 8022850:	4629      	mov	r1, r5
 8022852:	4630      	mov	r0, r6
 8022854:	f7ff ffa1 	bl	802279a <__sfputs_r>
 8022858:	3001      	adds	r0, #1
 802285a:	f000 80a9 	beq.w	80229b0 <_vfiprintf_r+0x1f0>
 802285e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8022860:	445a      	add	r2, fp
 8022862:	9209      	str	r2, [sp, #36]	; 0x24
 8022864:	f89a 3000 	ldrb.w	r3, [sl]
 8022868:	2b00      	cmp	r3, #0
 802286a:	f000 80a1 	beq.w	80229b0 <_vfiprintf_r+0x1f0>
 802286e:	2300      	movs	r3, #0
 8022870:	f04f 32ff 	mov.w	r2, #4294967295
 8022874:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8022878:	f10a 0a01 	add.w	sl, sl, #1
 802287c:	9304      	str	r3, [sp, #16]
 802287e:	9307      	str	r3, [sp, #28]
 8022880:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8022884:	931a      	str	r3, [sp, #104]	; 0x68
 8022886:	4654      	mov	r4, sl
 8022888:	2205      	movs	r2, #5
 802288a:	f814 1b01 	ldrb.w	r1, [r4], #1
 802288e:	4854      	ldr	r0, [pc, #336]	; (80229e0 <_vfiprintf_r+0x220>)
 8022890:	f7dd fd36 	bl	8000300 <memchr>
 8022894:	9a04      	ldr	r2, [sp, #16]
 8022896:	b9d8      	cbnz	r0, 80228d0 <_vfiprintf_r+0x110>
 8022898:	06d1      	lsls	r1, r2, #27
 802289a:	bf44      	itt	mi
 802289c:	2320      	movmi	r3, #32
 802289e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80228a2:	0713      	lsls	r3, r2, #28
 80228a4:	bf44      	itt	mi
 80228a6:	232b      	movmi	r3, #43	; 0x2b
 80228a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80228ac:	f89a 3000 	ldrb.w	r3, [sl]
 80228b0:	2b2a      	cmp	r3, #42	; 0x2a
 80228b2:	d015      	beq.n	80228e0 <_vfiprintf_r+0x120>
 80228b4:	9a07      	ldr	r2, [sp, #28]
 80228b6:	4654      	mov	r4, sl
 80228b8:	2000      	movs	r0, #0
 80228ba:	f04f 0c0a 	mov.w	ip, #10
 80228be:	4621      	mov	r1, r4
 80228c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80228c4:	3b30      	subs	r3, #48	; 0x30
 80228c6:	2b09      	cmp	r3, #9
 80228c8:	d94d      	bls.n	8022966 <_vfiprintf_r+0x1a6>
 80228ca:	b1b0      	cbz	r0, 80228fa <_vfiprintf_r+0x13a>
 80228cc:	9207      	str	r2, [sp, #28]
 80228ce:	e014      	b.n	80228fa <_vfiprintf_r+0x13a>
 80228d0:	eba0 0308 	sub.w	r3, r0, r8
 80228d4:	fa09 f303 	lsl.w	r3, r9, r3
 80228d8:	4313      	orrs	r3, r2
 80228da:	9304      	str	r3, [sp, #16]
 80228dc:	46a2      	mov	sl, r4
 80228de:	e7d2      	b.n	8022886 <_vfiprintf_r+0xc6>
 80228e0:	9b03      	ldr	r3, [sp, #12]
 80228e2:	1d19      	adds	r1, r3, #4
 80228e4:	681b      	ldr	r3, [r3, #0]
 80228e6:	9103      	str	r1, [sp, #12]
 80228e8:	2b00      	cmp	r3, #0
 80228ea:	bfbb      	ittet	lt
 80228ec:	425b      	neglt	r3, r3
 80228ee:	f042 0202 	orrlt.w	r2, r2, #2
 80228f2:	9307      	strge	r3, [sp, #28]
 80228f4:	9307      	strlt	r3, [sp, #28]
 80228f6:	bfb8      	it	lt
 80228f8:	9204      	strlt	r2, [sp, #16]
 80228fa:	7823      	ldrb	r3, [r4, #0]
 80228fc:	2b2e      	cmp	r3, #46	; 0x2e
 80228fe:	d10c      	bne.n	802291a <_vfiprintf_r+0x15a>
 8022900:	7863      	ldrb	r3, [r4, #1]
 8022902:	2b2a      	cmp	r3, #42	; 0x2a
 8022904:	d134      	bne.n	8022970 <_vfiprintf_r+0x1b0>
 8022906:	9b03      	ldr	r3, [sp, #12]
 8022908:	1d1a      	adds	r2, r3, #4
 802290a:	681b      	ldr	r3, [r3, #0]
 802290c:	9203      	str	r2, [sp, #12]
 802290e:	2b00      	cmp	r3, #0
 8022910:	bfb8      	it	lt
 8022912:	f04f 33ff 	movlt.w	r3, #4294967295
 8022916:	3402      	adds	r4, #2
 8022918:	9305      	str	r3, [sp, #20]
 802291a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80229f0 <_vfiprintf_r+0x230>
 802291e:	7821      	ldrb	r1, [r4, #0]
 8022920:	2203      	movs	r2, #3
 8022922:	4650      	mov	r0, sl
 8022924:	f7dd fcec 	bl	8000300 <memchr>
 8022928:	b138      	cbz	r0, 802293a <_vfiprintf_r+0x17a>
 802292a:	9b04      	ldr	r3, [sp, #16]
 802292c:	eba0 000a 	sub.w	r0, r0, sl
 8022930:	2240      	movs	r2, #64	; 0x40
 8022932:	4082      	lsls	r2, r0
 8022934:	4313      	orrs	r3, r2
 8022936:	3401      	adds	r4, #1
 8022938:	9304      	str	r3, [sp, #16]
 802293a:	f814 1b01 	ldrb.w	r1, [r4], #1
 802293e:	4829      	ldr	r0, [pc, #164]	; (80229e4 <_vfiprintf_r+0x224>)
 8022940:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8022944:	2206      	movs	r2, #6
 8022946:	f7dd fcdb 	bl	8000300 <memchr>
 802294a:	2800      	cmp	r0, #0
 802294c:	d03f      	beq.n	80229ce <_vfiprintf_r+0x20e>
 802294e:	4b26      	ldr	r3, [pc, #152]	; (80229e8 <_vfiprintf_r+0x228>)
 8022950:	bb1b      	cbnz	r3, 802299a <_vfiprintf_r+0x1da>
 8022952:	9b03      	ldr	r3, [sp, #12]
 8022954:	3307      	adds	r3, #7
 8022956:	f023 0307 	bic.w	r3, r3, #7
 802295a:	3308      	adds	r3, #8
 802295c:	9303      	str	r3, [sp, #12]
 802295e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022960:	443b      	add	r3, r7
 8022962:	9309      	str	r3, [sp, #36]	; 0x24
 8022964:	e768      	b.n	8022838 <_vfiprintf_r+0x78>
 8022966:	fb0c 3202 	mla	r2, ip, r2, r3
 802296a:	460c      	mov	r4, r1
 802296c:	2001      	movs	r0, #1
 802296e:	e7a6      	b.n	80228be <_vfiprintf_r+0xfe>
 8022970:	2300      	movs	r3, #0
 8022972:	3401      	adds	r4, #1
 8022974:	9305      	str	r3, [sp, #20]
 8022976:	4619      	mov	r1, r3
 8022978:	f04f 0c0a 	mov.w	ip, #10
 802297c:	4620      	mov	r0, r4
 802297e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8022982:	3a30      	subs	r2, #48	; 0x30
 8022984:	2a09      	cmp	r2, #9
 8022986:	d903      	bls.n	8022990 <_vfiprintf_r+0x1d0>
 8022988:	2b00      	cmp	r3, #0
 802298a:	d0c6      	beq.n	802291a <_vfiprintf_r+0x15a>
 802298c:	9105      	str	r1, [sp, #20]
 802298e:	e7c4      	b.n	802291a <_vfiprintf_r+0x15a>
 8022990:	fb0c 2101 	mla	r1, ip, r1, r2
 8022994:	4604      	mov	r4, r0
 8022996:	2301      	movs	r3, #1
 8022998:	e7f0      	b.n	802297c <_vfiprintf_r+0x1bc>
 802299a:	ab03      	add	r3, sp, #12
 802299c:	9300      	str	r3, [sp, #0]
 802299e:	462a      	mov	r2, r5
 80229a0:	4b12      	ldr	r3, [pc, #72]	; (80229ec <_vfiprintf_r+0x22c>)
 80229a2:	a904      	add	r1, sp, #16
 80229a4:	4630      	mov	r0, r6
 80229a6:	f7fc fee3 	bl	801f770 <_printf_float>
 80229aa:	4607      	mov	r7, r0
 80229ac:	1c78      	adds	r0, r7, #1
 80229ae:	d1d6      	bne.n	802295e <_vfiprintf_r+0x19e>
 80229b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80229b2:	07d9      	lsls	r1, r3, #31
 80229b4:	d405      	bmi.n	80229c2 <_vfiprintf_r+0x202>
 80229b6:	89ab      	ldrh	r3, [r5, #12]
 80229b8:	059a      	lsls	r2, r3, #22
 80229ba:	d402      	bmi.n	80229c2 <_vfiprintf_r+0x202>
 80229bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80229be:	f7fd fe77 	bl	80206b0 <__retarget_lock_release_recursive>
 80229c2:	89ab      	ldrh	r3, [r5, #12]
 80229c4:	065b      	lsls	r3, r3, #25
 80229c6:	f53f af1d 	bmi.w	8022804 <_vfiprintf_r+0x44>
 80229ca:	9809      	ldr	r0, [sp, #36]	; 0x24
 80229cc:	e71c      	b.n	8022808 <_vfiprintf_r+0x48>
 80229ce:	ab03      	add	r3, sp, #12
 80229d0:	9300      	str	r3, [sp, #0]
 80229d2:	462a      	mov	r2, r5
 80229d4:	4b05      	ldr	r3, [pc, #20]	; (80229ec <_vfiprintf_r+0x22c>)
 80229d6:	a904      	add	r1, sp, #16
 80229d8:	4630      	mov	r0, r6
 80229da:	f7fd f951 	bl	801fc80 <_printf_i>
 80229de:	e7e4      	b.n	80229aa <_vfiprintf_r+0x1ea>
 80229e0:	08027514 	.word	0x08027514
 80229e4:	0802751e 	.word	0x0802751e
 80229e8:	0801f771 	.word	0x0801f771
 80229ec:	0802279b 	.word	0x0802279b
 80229f0:	0802751a 	.word	0x0802751a

080229f4 <__sflush_r>:
 80229f4:	898a      	ldrh	r2, [r1, #12]
 80229f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80229fa:	4605      	mov	r5, r0
 80229fc:	0710      	lsls	r0, r2, #28
 80229fe:	460c      	mov	r4, r1
 8022a00:	d458      	bmi.n	8022ab4 <__sflush_r+0xc0>
 8022a02:	684b      	ldr	r3, [r1, #4]
 8022a04:	2b00      	cmp	r3, #0
 8022a06:	dc05      	bgt.n	8022a14 <__sflush_r+0x20>
 8022a08:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8022a0a:	2b00      	cmp	r3, #0
 8022a0c:	dc02      	bgt.n	8022a14 <__sflush_r+0x20>
 8022a0e:	2000      	movs	r0, #0
 8022a10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022a14:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8022a16:	2e00      	cmp	r6, #0
 8022a18:	d0f9      	beq.n	8022a0e <__sflush_r+0x1a>
 8022a1a:	2300      	movs	r3, #0
 8022a1c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8022a20:	682f      	ldr	r7, [r5, #0]
 8022a22:	6a21      	ldr	r1, [r4, #32]
 8022a24:	602b      	str	r3, [r5, #0]
 8022a26:	d032      	beq.n	8022a8e <__sflush_r+0x9a>
 8022a28:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8022a2a:	89a3      	ldrh	r3, [r4, #12]
 8022a2c:	075a      	lsls	r2, r3, #29
 8022a2e:	d505      	bpl.n	8022a3c <__sflush_r+0x48>
 8022a30:	6863      	ldr	r3, [r4, #4]
 8022a32:	1ac0      	subs	r0, r0, r3
 8022a34:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8022a36:	b10b      	cbz	r3, 8022a3c <__sflush_r+0x48>
 8022a38:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8022a3a:	1ac0      	subs	r0, r0, r3
 8022a3c:	2300      	movs	r3, #0
 8022a3e:	4602      	mov	r2, r0
 8022a40:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8022a42:	6a21      	ldr	r1, [r4, #32]
 8022a44:	4628      	mov	r0, r5
 8022a46:	47b0      	blx	r6
 8022a48:	1c43      	adds	r3, r0, #1
 8022a4a:	89a3      	ldrh	r3, [r4, #12]
 8022a4c:	d106      	bne.n	8022a5c <__sflush_r+0x68>
 8022a4e:	6829      	ldr	r1, [r5, #0]
 8022a50:	291d      	cmp	r1, #29
 8022a52:	d82b      	bhi.n	8022aac <__sflush_r+0xb8>
 8022a54:	4a29      	ldr	r2, [pc, #164]	; (8022afc <__sflush_r+0x108>)
 8022a56:	410a      	asrs	r2, r1
 8022a58:	07d6      	lsls	r6, r2, #31
 8022a5a:	d427      	bmi.n	8022aac <__sflush_r+0xb8>
 8022a5c:	2200      	movs	r2, #0
 8022a5e:	6062      	str	r2, [r4, #4]
 8022a60:	04d9      	lsls	r1, r3, #19
 8022a62:	6922      	ldr	r2, [r4, #16]
 8022a64:	6022      	str	r2, [r4, #0]
 8022a66:	d504      	bpl.n	8022a72 <__sflush_r+0x7e>
 8022a68:	1c42      	adds	r2, r0, #1
 8022a6a:	d101      	bne.n	8022a70 <__sflush_r+0x7c>
 8022a6c:	682b      	ldr	r3, [r5, #0]
 8022a6e:	b903      	cbnz	r3, 8022a72 <__sflush_r+0x7e>
 8022a70:	6560      	str	r0, [r4, #84]	; 0x54
 8022a72:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8022a74:	602f      	str	r7, [r5, #0]
 8022a76:	2900      	cmp	r1, #0
 8022a78:	d0c9      	beq.n	8022a0e <__sflush_r+0x1a>
 8022a7a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8022a7e:	4299      	cmp	r1, r3
 8022a80:	d002      	beq.n	8022a88 <__sflush_r+0x94>
 8022a82:	4628      	mov	r0, r5
 8022a84:	f000 f93a 	bl	8022cfc <_free_r>
 8022a88:	2000      	movs	r0, #0
 8022a8a:	6360      	str	r0, [r4, #52]	; 0x34
 8022a8c:	e7c0      	b.n	8022a10 <__sflush_r+0x1c>
 8022a8e:	2301      	movs	r3, #1
 8022a90:	4628      	mov	r0, r5
 8022a92:	47b0      	blx	r6
 8022a94:	1c41      	adds	r1, r0, #1
 8022a96:	d1c8      	bne.n	8022a2a <__sflush_r+0x36>
 8022a98:	682b      	ldr	r3, [r5, #0]
 8022a9a:	2b00      	cmp	r3, #0
 8022a9c:	d0c5      	beq.n	8022a2a <__sflush_r+0x36>
 8022a9e:	2b1d      	cmp	r3, #29
 8022aa0:	d001      	beq.n	8022aa6 <__sflush_r+0xb2>
 8022aa2:	2b16      	cmp	r3, #22
 8022aa4:	d101      	bne.n	8022aaa <__sflush_r+0xb6>
 8022aa6:	602f      	str	r7, [r5, #0]
 8022aa8:	e7b1      	b.n	8022a0e <__sflush_r+0x1a>
 8022aaa:	89a3      	ldrh	r3, [r4, #12]
 8022aac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8022ab0:	81a3      	strh	r3, [r4, #12]
 8022ab2:	e7ad      	b.n	8022a10 <__sflush_r+0x1c>
 8022ab4:	690f      	ldr	r7, [r1, #16]
 8022ab6:	2f00      	cmp	r7, #0
 8022ab8:	d0a9      	beq.n	8022a0e <__sflush_r+0x1a>
 8022aba:	0793      	lsls	r3, r2, #30
 8022abc:	680e      	ldr	r6, [r1, #0]
 8022abe:	bf08      	it	eq
 8022ac0:	694b      	ldreq	r3, [r1, #20]
 8022ac2:	600f      	str	r7, [r1, #0]
 8022ac4:	bf18      	it	ne
 8022ac6:	2300      	movne	r3, #0
 8022ac8:	eba6 0807 	sub.w	r8, r6, r7
 8022acc:	608b      	str	r3, [r1, #8]
 8022ace:	f1b8 0f00 	cmp.w	r8, #0
 8022ad2:	dd9c      	ble.n	8022a0e <__sflush_r+0x1a>
 8022ad4:	6a21      	ldr	r1, [r4, #32]
 8022ad6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8022ad8:	4643      	mov	r3, r8
 8022ada:	463a      	mov	r2, r7
 8022adc:	4628      	mov	r0, r5
 8022ade:	47b0      	blx	r6
 8022ae0:	2800      	cmp	r0, #0
 8022ae2:	dc06      	bgt.n	8022af2 <__sflush_r+0xfe>
 8022ae4:	89a3      	ldrh	r3, [r4, #12]
 8022ae6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8022aea:	81a3      	strh	r3, [r4, #12]
 8022aec:	f04f 30ff 	mov.w	r0, #4294967295
 8022af0:	e78e      	b.n	8022a10 <__sflush_r+0x1c>
 8022af2:	4407      	add	r7, r0
 8022af4:	eba8 0800 	sub.w	r8, r8, r0
 8022af8:	e7e9      	b.n	8022ace <__sflush_r+0xda>
 8022afa:	bf00      	nop
 8022afc:	dfbffffe 	.word	0xdfbffffe

08022b00 <_fflush_r>:
 8022b00:	b538      	push	{r3, r4, r5, lr}
 8022b02:	690b      	ldr	r3, [r1, #16]
 8022b04:	4605      	mov	r5, r0
 8022b06:	460c      	mov	r4, r1
 8022b08:	b913      	cbnz	r3, 8022b10 <_fflush_r+0x10>
 8022b0a:	2500      	movs	r5, #0
 8022b0c:	4628      	mov	r0, r5
 8022b0e:	bd38      	pop	{r3, r4, r5, pc}
 8022b10:	b118      	cbz	r0, 8022b1a <_fflush_r+0x1a>
 8022b12:	6a03      	ldr	r3, [r0, #32]
 8022b14:	b90b      	cbnz	r3, 8022b1a <_fflush_r+0x1a>
 8022b16:	f7fd fc65 	bl	80203e4 <__sinit>
 8022b1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8022b1e:	2b00      	cmp	r3, #0
 8022b20:	d0f3      	beq.n	8022b0a <_fflush_r+0xa>
 8022b22:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8022b24:	07d0      	lsls	r0, r2, #31
 8022b26:	d404      	bmi.n	8022b32 <_fflush_r+0x32>
 8022b28:	0599      	lsls	r1, r3, #22
 8022b2a:	d402      	bmi.n	8022b32 <_fflush_r+0x32>
 8022b2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8022b2e:	f7fd fdbe 	bl	80206ae <__retarget_lock_acquire_recursive>
 8022b32:	4628      	mov	r0, r5
 8022b34:	4621      	mov	r1, r4
 8022b36:	f7ff ff5d 	bl	80229f4 <__sflush_r>
 8022b3a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8022b3c:	07da      	lsls	r2, r3, #31
 8022b3e:	4605      	mov	r5, r0
 8022b40:	d4e4      	bmi.n	8022b0c <_fflush_r+0xc>
 8022b42:	89a3      	ldrh	r3, [r4, #12]
 8022b44:	059b      	lsls	r3, r3, #22
 8022b46:	d4e1      	bmi.n	8022b0c <_fflush_r+0xc>
 8022b48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8022b4a:	f7fd fdb1 	bl	80206b0 <__retarget_lock_release_recursive>
 8022b4e:	e7dd      	b.n	8022b0c <_fflush_r+0xc>

08022b50 <fiprintf>:
 8022b50:	b40e      	push	{r1, r2, r3}
 8022b52:	b503      	push	{r0, r1, lr}
 8022b54:	4601      	mov	r1, r0
 8022b56:	ab03      	add	r3, sp, #12
 8022b58:	4805      	ldr	r0, [pc, #20]	; (8022b70 <fiprintf+0x20>)
 8022b5a:	f853 2b04 	ldr.w	r2, [r3], #4
 8022b5e:	6800      	ldr	r0, [r0, #0]
 8022b60:	9301      	str	r3, [sp, #4]
 8022b62:	f7ff fe2d 	bl	80227c0 <_vfiprintf_r>
 8022b66:	b002      	add	sp, #8
 8022b68:	f85d eb04 	ldr.w	lr, [sp], #4
 8022b6c:	b003      	add	sp, #12
 8022b6e:	4770      	bx	lr
 8022b70:	240004c8 	.word	0x240004c8

08022b74 <__swbuf_r>:
 8022b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022b76:	460e      	mov	r6, r1
 8022b78:	4614      	mov	r4, r2
 8022b7a:	4605      	mov	r5, r0
 8022b7c:	b118      	cbz	r0, 8022b86 <__swbuf_r+0x12>
 8022b7e:	6a03      	ldr	r3, [r0, #32]
 8022b80:	b90b      	cbnz	r3, 8022b86 <__swbuf_r+0x12>
 8022b82:	f7fd fc2f 	bl	80203e4 <__sinit>
 8022b86:	69a3      	ldr	r3, [r4, #24]
 8022b88:	60a3      	str	r3, [r4, #8]
 8022b8a:	89a3      	ldrh	r3, [r4, #12]
 8022b8c:	071a      	lsls	r2, r3, #28
 8022b8e:	d525      	bpl.n	8022bdc <__swbuf_r+0x68>
 8022b90:	6923      	ldr	r3, [r4, #16]
 8022b92:	b31b      	cbz	r3, 8022bdc <__swbuf_r+0x68>
 8022b94:	6823      	ldr	r3, [r4, #0]
 8022b96:	6922      	ldr	r2, [r4, #16]
 8022b98:	1a98      	subs	r0, r3, r2
 8022b9a:	6963      	ldr	r3, [r4, #20]
 8022b9c:	b2f6      	uxtb	r6, r6
 8022b9e:	4283      	cmp	r3, r0
 8022ba0:	4637      	mov	r7, r6
 8022ba2:	dc04      	bgt.n	8022bae <__swbuf_r+0x3a>
 8022ba4:	4621      	mov	r1, r4
 8022ba6:	4628      	mov	r0, r5
 8022ba8:	f7ff ffaa 	bl	8022b00 <_fflush_r>
 8022bac:	b9e0      	cbnz	r0, 8022be8 <__swbuf_r+0x74>
 8022bae:	68a3      	ldr	r3, [r4, #8]
 8022bb0:	3b01      	subs	r3, #1
 8022bb2:	60a3      	str	r3, [r4, #8]
 8022bb4:	6823      	ldr	r3, [r4, #0]
 8022bb6:	1c5a      	adds	r2, r3, #1
 8022bb8:	6022      	str	r2, [r4, #0]
 8022bba:	701e      	strb	r6, [r3, #0]
 8022bbc:	6962      	ldr	r2, [r4, #20]
 8022bbe:	1c43      	adds	r3, r0, #1
 8022bc0:	429a      	cmp	r2, r3
 8022bc2:	d004      	beq.n	8022bce <__swbuf_r+0x5a>
 8022bc4:	89a3      	ldrh	r3, [r4, #12]
 8022bc6:	07db      	lsls	r3, r3, #31
 8022bc8:	d506      	bpl.n	8022bd8 <__swbuf_r+0x64>
 8022bca:	2e0a      	cmp	r6, #10
 8022bcc:	d104      	bne.n	8022bd8 <__swbuf_r+0x64>
 8022bce:	4621      	mov	r1, r4
 8022bd0:	4628      	mov	r0, r5
 8022bd2:	f7ff ff95 	bl	8022b00 <_fflush_r>
 8022bd6:	b938      	cbnz	r0, 8022be8 <__swbuf_r+0x74>
 8022bd8:	4638      	mov	r0, r7
 8022bda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8022bdc:	4621      	mov	r1, r4
 8022bde:	4628      	mov	r0, r5
 8022be0:	f000 f806 	bl	8022bf0 <__swsetup_r>
 8022be4:	2800      	cmp	r0, #0
 8022be6:	d0d5      	beq.n	8022b94 <__swbuf_r+0x20>
 8022be8:	f04f 37ff 	mov.w	r7, #4294967295
 8022bec:	e7f4      	b.n	8022bd8 <__swbuf_r+0x64>
	...

08022bf0 <__swsetup_r>:
 8022bf0:	b538      	push	{r3, r4, r5, lr}
 8022bf2:	4b2a      	ldr	r3, [pc, #168]	; (8022c9c <__swsetup_r+0xac>)
 8022bf4:	4605      	mov	r5, r0
 8022bf6:	6818      	ldr	r0, [r3, #0]
 8022bf8:	460c      	mov	r4, r1
 8022bfa:	b118      	cbz	r0, 8022c04 <__swsetup_r+0x14>
 8022bfc:	6a03      	ldr	r3, [r0, #32]
 8022bfe:	b90b      	cbnz	r3, 8022c04 <__swsetup_r+0x14>
 8022c00:	f7fd fbf0 	bl	80203e4 <__sinit>
 8022c04:	89a3      	ldrh	r3, [r4, #12]
 8022c06:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8022c0a:	0718      	lsls	r0, r3, #28
 8022c0c:	d422      	bmi.n	8022c54 <__swsetup_r+0x64>
 8022c0e:	06d9      	lsls	r1, r3, #27
 8022c10:	d407      	bmi.n	8022c22 <__swsetup_r+0x32>
 8022c12:	2309      	movs	r3, #9
 8022c14:	602b      	str	r3, [r5, #0]
 8022c16:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8022c1a:	81a3      	strh	r3, [r4, #12]
 8022c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8022c20:	e034      	b.n	8022c8c <__swsetup_r+0x9c>
 8022c22:	0758      	lsls	r0, r3, #29
 8022c24:	d512      	bpl.n	8022c4c <__swsetup_r+0x5c>
 8022c26:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8022c28:	b141      	cbz	r1, 8022c3c <__swsetup_r+0x4c>
 8022c2a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8022c2e:	4299      	cmp	r1, r3
 8022c30:	d002      	beq.n	8022c38 <__swsetup_r+0x48>
 8022c32:	4628      	mov	r0, r5
 8022c34:	f000 f862 	bl	8022cfc <_free_r>
 8022c38:	2300      	movs	r3, #0
 8022c3a:	6363      	str	r3, [r4, #52]	; 0x34
 8022c3c:	89a3      	ldrh	r3, [r4, #12]
 8022c3e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8022c42:	81a3      	strh	r3, [r4, #12]
 8022c44:	2300      	movs	r3, #0
 8022c46:	6063      	str	r3, [r4, #4]
 8022c48:	6923      	ldr	r3, [r4, #16]
 8022c4a:	6023      	str	r3, [r4, #0]
 8022c4c:	89a3      	ldrh	r3, [r4, #12]
 8022c4e:	f043 0308 	orr.w	r3, r3, #8
 8022c52:	81a3      	strh	r3, [r4, #12]
 8022c54:	6923      	ldr	r3, [r4, #16]
 8022c56:	b94b      	cbnz	r3, 8022c6c <__swsetup_r+0x7c>
 8022c58:	89a3      	ldrh	r3, [r4, #12]
 8022c5a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8022c5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8022c62:	d003      	beq.n	8022c6c <__swsetup_r+0x7c>
 8022c64:	4621      	mov	r1, r4
 8022c66:	4628      	mov	r0, r5
 8022c68:	f000 f8e9 	bl	8022e3e <__smakebuf_r>
 8022c6c:	89a0      	ldrh	r0, [r4, #12]
 8022c6e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8022c72:	f010 0301 	ands.w	r3, r0, #1
 8022c76:	d00a      	beq.n	8022c8e <__swsetup_r+0x9e>
 8022c78:	2300      	movs	r3, #0
 8022c7a:	60a3      	str	r3, [r4, #8]
 8022c7c:	6963      	ldr	r3, [r4, #20]
 8022c7e:	425b      	negs	r3, r3
 8022c80:	61a3      	str	r3, [r4, #24]
 8022c82:	6923      	ldr	r3, [r4, #16]
 8022c84:	b943      	cbnz	r3, 8022c98 <__swsetup_r+0xa8>
 8022c86:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8022c8a:	d1c4      	bne.n	8022c16 <__swsetup_r+0x26>
 8022c8c:	bd38      	pop	{r3, r4, r5, pc}
 8022c8e:	0781      	lsls	r1, r0, #30
 8022c90:	bf58      	it	pl
 8022c92:	6963      	ldrpl	r3, [r4, #20]
 8022c94:	60a3      	str	r3, [r4, #8]
 8022c96:	e7f4      	b.n	8022c82 <__swsetup_r+0x92>
 8022c98:	2000      	movs	r0, #0
 8022c9a:	e7f7      	b.n	8022c8c <__swsetup_r+0x9c>
 8022c9c:	240004c8 	.word	0x240004c8

08022ca0 <_sbrk_r>:
 8022ca0:	b538      	push	{r3, r4, r5, lr}
 8022ca2:	4d06      	ldr	r5, [pc, #24]	; (8022cbc <_sbrk_r+0x1c>)
 8022ca4:	2300      	movs	r3, #0
 8022ca6:	4604      	mov	r4, r0
 8022ca8:	4608      	mov	r0, r1
 8022caa:	602b      	str	r3, [r5, #0]
 8022cac:	f7df fcf8 	bl	80026a0 <_sbrk>
 8022cb0:	1c43      	adds	r3, r0, #1
 8022cb2:	d102      	bne.n	8022cba <_sbrk_r+0x1a>
 8022cb4:	682b      	ldr	r3, [r5, #0]
 8022cb6:	b103      	cbz	r3, 8022cba <_sbrk_r+0x1a>
 8022cb8:	6023      	str	r3, [r4, #0]
 8022cba:	bd38      	pop	{r3, r4, r5, pc}
 8022cbc:	24007f68 	.word	0x24007f68

08022cc0 <abort>:
 8022cc0:	b508      	push	{r3, lr}
 8022cc2:	2006      	movs	r0, #6
 8022cc4:	f000 f920 	bl	8022f08 <raise>
 8022cc8:	2001      	movs	r0, #1
 8022cca:	f7df fc71 	bl	80025b0 <_exit>

08022cce <_calloc_r>:
 8022cce:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8022cd0:	fba1 2402 	umull	r2, r4, r1, r2
 8022cd4:	b94c      	cbnz	r4, 8022cea <_calloc_r+0x1c>
 8022cd6:	4611      	mov	r1, r2
 8022cd8:	9201      	str	r2, [sp, #4]
 8022cda:	f7fe fe99 	bl	8021a10 <_malloc_r>
 8022cde:	9a01      	ldr	r2, [sp, #4]
 8022ce0:	4605      	mov	r5, r0
 8022ce2:	b930      	cbnz	r0, 8022cf2 <_calloc_r+0x24>
 8022ce4:	4628      	mov	r0, r5
 8022ce6:	b003      	add	sp, #12
 8022ce8:	bd30      	pop	{r4, r5, pc}
 8022cea:	220c      	movs	r2, #12
 8022cec:	6002      	str	r2, [r0, #0]
 8022cee:	2500      	movs	r5, #0
 8022cf0:	e7f8      	b.n	8022ce4 <_calloc_r+0x16>
 8022cf2:	4621      	mov	r1, r4
 8022cf4:	f7fd fc4b 	bl	802058e <memset>
 8022cf8:	e7f4      	b.n	8022ce4 <_calloc_r+0x16>
	...

08022cfc <_free_r>:
 8022cfc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8022cfe:	2900      	cmp	r1, #0
 8022d00:	d044      	beq.n	8022d8c <_free_r+0x90>
 8022d02:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8022d06:	9001      	str	r0, [sp, #4]
 8022d08:	2b00      	cmp	r3, #0
 8022d0a:	f1a1 0404 	sub.w	r4, r1, #4
 8022d0e:	bfb8      	it	lt
 8022d10:	18e4      	addlt	r4, r4, r3
 8022d12:	f7fe ff0f 	bl	8021b34 <__malloc_lock>
 8022d16:	4a1e      	ldr	r2, [pc, #120]	; (8022d90 <_free_r+0x94>)
 8022d18:	9801      	ldr	r0, [sp, #4]
 8022d1a:	6813      	ldr	r3, [r2, #0]
 8022d1c:	b933      	cbnz	r3, 8022d2c <_free_r+0x30>
 8022d1e:	6063      	str	r3, [r4, #4]
 8022d20:	6014      	str	r4, [r2, #0]
 8022d22:	b003      	add	sp, #12
 8022d24:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8022d28:	f7fe bf0a 	b.w	8021b40 <__malloc_unlock>
 8022d2c:	42a3      	cmp	r3, r4
 8022d2e:	d908      	bls.n	8022d42 <_free_r+0x46>
 8022d30:	6825      	ldr	r5, [r4, #0]
 8022d32:	1961      	adds	r1, r4, r5
 8022d34:	428b      	cmp	r3, r1
 8022d36:	bf01      	itttt	eq
 8022d38:	6819      	ldreq	r1, [r3, #0]
 8022d3a:	685b      	ldreq	r3, [r3, #4]
 8022d3c:	1949      	addeq	r1, r1, r5
 8022d3e:	6021      	streq	r1, [r4, #0]
 8022d40:	e7ed      	b.n	8022d1e <_free_r+0x22>
 8022d42:	461a      	mov	r2, r3
 8022d44:	685b      	ldr	r3, [r3, #4]
 8022d46:	b10b      	cbz	r3, 8022d4c <_free_r+0x50>
 8022d48:	42a3      	cmp	r3, r4
 8022d4a:	d9fa      	bls.n	8022d42 <_free_r+0x46>
 8022d4c:	6811      	ldr	r1, [r2, #0]
 8022d4e:	1855      	adds	r5, r2, r1
 8022d50:	42a5      	cmp	r5, r4
 8022d52:	d10b      	bne.n	8022d6c <_free_r+0x70>
 8022d54:	6824      	ldr	r4, [r4, #0]
 8022d56:	4421      	add	r1, r4
 8022d58:	1854      	adds	r4, r2, r1
 8022d5a:	42a3      	cmp	r3, r4
 8022d5c:	6011      	str	r1, [r2, #0]
 8022d5e:	d1e0      	bne.n	8022d22 <_free_r+0x26>
 8022d60:	681c      	ldr	r4, [r3, #0]
 8022d62:	685b      	ldr	r3, [r3, #4]
 8022d64:	6053      	str	r3, [r2, #4]
 8022d66:	440c      	add	r4, r1
 8022d68:	6014      	str	r4, [r2, #0]
 8022d6a:	e7da      	b.n	8022d22 <_free_r+0x26>
 8022d6c:	d902      	bls.n	8022d74 <_free_r+0x78>
 8022d6e:	230c      	movs	r3, #12
 8022d70:	6003      	str	r3, [r0, #0]
 8022d72:	e7d6      	b.n	8022d22 <_free_r+0x26>
 8022d74:	6825      	ldr	r5, [r4, #0]
 8022d76:	1961      	adds	r1, r4, r5
 8022d78:	428b      	cmp	r3, r1
 8022d7a:	bf04      	itt	eq
 8022d7c:	6819      	ldreq	r1, [r3, #0]
 8022d7e:	685b      	ldreq	r3, [r3, #4]
 8022d80:	6063      	str	r3, [r4, #4]
 8022d82:	bf04      	itt	eq
 8022d84:	1949      	addeq	r1, r1, r5
 8022d86:	6021      	streq	r1, [r4, #0]
 8022d88:	6054      	str	r4, [r2, #4]
 8022d8a:	e7ca      	b.n	8022d22 <_free_r+0x26>
 8022d8c:	b003      	add	sp, #12
 8022d8e:	bd30      	pop	{r4, r5, pc}
 8022d90:	240080b0 	.word	0x240080b0

08022d94 <_realloc_r>:
 8022d94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022d98:	4680      	mov	r8, r0
 8022d9a:	4614      	mov	r4, r2
 8022d9c:	460e      	mov	r6, r1
 8022d9e:	b921      	cbnz	r1, 8022daa <_realloc_r+0x16>
 8022da0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8022da4:	4611      	mov	r1, r2
 8022da6:	f7fe be33 	b.w	8021a10 <_malloc_r>
 8022daa:	b92a      	cbnz	r2, 8022db8 <_realloc_r+0x24>
 8022dac:	f7ff ffa6 	bl	8022cfc <_free_r>
 8022db0:	4625      	mov	r5, r4
 8022db2:	4628      	mov	r0, r5
 8022db4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022db8:	f000 f8e4 	bl	8022f84 <_malloc_usable_size_r>
 8022dbc:	4284      	cmp	r4, r0
 8022dbe:	4607      	mov	r7, r0
 8022dc0:	d802      	bhi.n	8022dc8 <_realloc_r+0x34>
 8022dc2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8022dc6:	d812      	bhi.n	8022dee <_realloc_r+0x5a>
 8022dc8:	4621      	mov	r1, r4
 8022dca:	4640      	mov	r0, r8
 8022dcc:	f7fe fe20 	bl	8021a10 <_malloc_r>
 8022dd0:	4605      	mov	r5, r0
 8022dd2:	2800      	cmp	r0, #0
 8022dd4:	d0ed      	beq.n	8022db2 <_realloc_r+0x1e>
 8022dd6:	42bc      	cmp	r4, r7
 8022dd8:	4622      	mov	r2, r4
 8022dda:	4631      	mov	r1, r6
 8022ddc:	bf28      	it	cs
 8022dde:	463a      	movcs	r2, r7
 8022de0:	f7fd fc67 	bl	80206b2 <memcpy>
 8022de4:	4631      	mov	r1, r6
 8022de6:	4640      	mov	r0, r8
 8022de8:	f7ff ff88 	bl	8022cfc <_free_r>
 8022dec:	e7e1      	b.n	8022db2 <_realloc_r+0x1e>
 8022dee:	4635      	mov	r5, r6
 8022df0:	e7df      	b.n	8022db2 <_realloc_r+0x1e>

08022df2 <__swhatbuf_r>:
 8022df2:	b570      	push	{r4, r5, r6, lr}
 8022df4:	460c      	mov	r4, r1
 8022df6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022dfa:	2900      	cmp	r1, #0
 8022dfc:	b096      	sub	sp, #88	; 0x58
 8022dfe:	4615      	mov	r5, r2
 8022e00:	461e      	mov	r6, r3
 8022e02:	da0d      	bge.n	8022e20 <__swhatbuf_r+0x2e>
 8022e04:	89a3      	ldrh	r3, [r4, #12]
 8022e06:	f013 0f80 	tst.w	r3, #128	; 0x80
 8022e0a:	f04f 0100 	mov.w	r1, #0
 8022e0e:	bf0c      	ite	eq
 8022e10:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8022e14:	2340      	movne	r3, #64	; 0x40
 8022e16:	2000      	movs	r0, #0
 8022e18:	6031      	str	r1, [r6, #0]
 8022e1a:	602b      	str	r3, [r5, #0]
 8022e1c:	b016      	add	sp, #88	; 0x58
 8022e1e:	bd70      	pop	{r4, r5, r6, pc}
 8022e20:	466a      	mov	r2, sp
 8022e22:	f000 f879 	bl	8022f18 <_fstat_r>
 8022e26:	2800      	cmp	r0, #0
 8022e28:	dbec      	blt.n	8022e04 <__swhatbuf_r+0x12>
 8022e2a:	9901      	ldr	r1, [sp, #4]
 8022e2c:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8022e30:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8022e34:	4259      	negs	r1, r3
 8022e36:	4159      	adcs	r1, r3
 8022e38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8022e3c:	e7eb      	b.n	8022e16 <__swhatbuf_r+0x24>

08022e3e <__smakebuf_r>:
 8022e3e:	898b      	ldrh	r3, [r1, #12]
 8022e40:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8022e42:	079d      	lsls	r5, r3, #30
 8022e44:	4606      	mov	r6, r0
 8022e46:	460c      	mov	r4, r1
 8022e48:	d507      	bpl.n	8022e5a <__smakebuf_r+0x1c>
 8022e4a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8022e4e:	6023      	str	r3, [r4, #0]
 8022e50:	6123      	str	r3, [r4, #16]
 8022e52:	2301      	movs	r3, #1
 8022e54:	6163      	str	r3, [r4, #20]
 8022e56:	b002      	add	sp, #8
 8022e58:	bd70      	pop	{r4, r5, r6, pc}
 8022e5a:	ab01      	add	r3, sp, #4
 8022e5c:	466a      	mov	r2, sp
 8022e5e:	f7ff ffc8 	bl	8022df2 <__swhatbuf_r>
 8022e62:	9900      	ldr	r1, [sp, #0]
 8022e64:	4605      	mov	r5, r0
 8022e66:	4630      	mov	r0, r6
 8022e68:	f7fe fdd2 	bl	8021a10 <_malloc_r>
 8022e6c:	b948      	cbnz	r0, 8022e82 <__smakebuf_r+0x44>
 8022e6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8022e72:	059a      	lsls	r2, r3, #22
 8022e74:	d4ef      	bmi.n	8022e56 <__smakebuf_r+0x18>
 8022e76:	f023 0303 	bic.w	r3, r3, #3
 8022e7a:	f043 0302 	orr.w	r3, r3, #2
 8022e7e:	81a3      	strh	r3, [r4, #12]
 8022e80:	e7e3      	b.n	8022e4a <__smakebuf_r+0xc>
 8022e82:	89a3      	ldrh	r3, [r4, #12]
 8022e84:	6020      	str	r0, [r4, #0]
 8022e86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8022e8a:	81a3      	strh	r3, [r4, #12]
 8022e8c:	9b00      	ldr	r3, [sp, #0]
 8022e8e:	6163      	str	r3, [r4, #20]
 8022e90:	9b01      	ldr	r3, [sp, #4]
 8022e92:	6120      	str	r0, [r4, #16]
 8022e94:	b15b      	cbz	r3, 8022eae <__smakebuf_r+0x70>
 8022e96:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8022e9a:	4630      	mov	r0, r6
 8022e9c:	f000 f84e 	bl	8022f3c <_isatty_r>
 8022ea0:	b128      	cbz	r0, 8022eae <__smakebuf_r+0x70>
 8022ea2:	89a3      	ldrh	r3, [r4, #12]
 8022ea4:	f023 0303 	bic.w	r3, r3, #3
 8022ea8:	f043 0301 	orr.w	r3, r3, #1
 8022eac:	81a3      	strh	r3, [r4, #12]
 8022eae:	89a3      	ldrh	r3, [r4, #12]
 8022eb0:	431d      	orrs	r5, r3
 8022eb2:	81a5      	strh	r5, [r4, #12]
 8022eb4:	e7cf      	b.n	8022e56 <__smakebuf_r+0x18>

08022eb6 <_raise_r>:
 8022eb6:	291f      	cmp	r1, #31
 8022eb8:	b538      	push	{r3, r4, r5, lr}
 8022eba:	4604      	mov	r4, r0
 8022ebc:	460d      	mov	r5, r1
 8022ebe:	d904      	bls.n	8022eca <_raise_r+0x14>
 8022ec0:	2316      	movs	r3, #22
 8022ec2:	6003      	str	r3, [r0, #0]
 8022ec4:	f04f 30ff 	mov.w	r0, #4294967295
 8022ec8:	bd38      	pop	{r3, r4, r5, pc}
 8022eca:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8022ecc:	b112      	cbz	r2, 8022ed4 <_raise_r+0x1e>
 8022ece:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8022ed2:	b94b      	cbnz	r3, 8022ee8 <_raise_r+0x32>
 8022ed4:	4620      	mov	r0, r4
 8022ed6:	f000 f853 	bl	8022f80 <_getpid_r>
 8022eda:	462a      	mov	r2, r5
 8022edc:	4601      	mov	r1, r0
 8022ede:	4620      	mov	r0, r4
 8022ee0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8022ee4:	f000 b83a 	b.w	8022f5c <_kill_r>
 8022ee8:	2b01      	cmp	r3, #1
 8022eea:	d00a      	beq.n	8022f02 <_raise_r+0x4c>
 8022eec:	1c59      	adds	r1, r3, #1
 8022eee:	d103      	bne.n	8022ef8 <_raise_r+0x42>
 8022ef0:	2316      	movs	r3, #22
 8022ef2:	6003      	str	r3, [r0, #0]
 8022ef4:	2001      	movs	r0, #1
 8022ef6:	e7e7      	b.n	8022ec8 <_raise_r+0x12>
 8022ef8:	2400      	movs	r4, #0
 8022efa:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8022efe:	4628      	mov	r0, r5
 8022f00:	4798      	blx	r3
 8022f02:	2000      	movs	r0, #0
 8022f04:	e7e0      	b.n	8022ec8 <_raise_r+0x12>
	...

08022f08 <raise>:
 8022f08:	4b02      	ldr	r3, [pc, #8]	; (8022f14 <raise+0xc>)
 8022f0a:	4601      	mov	r1, r0
 8022f0c:	6818      	ldr	r0, [r3, #0]
 8022f0e:	f7ff bfd2 	b.w	8022eb6 <_raise_r>
 8022f12:	bf00      	nop
 8022f14:	240004c8 	.word	0x240004c8

08022f18 <_fstat_r>:
 8022f18:	b538      	push	{r3, r4, r5, lr}
 8022f1a:	4d07      	ldr	r5, [pc, #28]	; (8022f38 <_fstat_r+0x20>)
 8022f1c:	2300      	movs	r3, #0
 8022f1e:	4604      	mov	r4, r0
 8022f20:	4608      	mov	r0, r1
 8022f22:	4611      	mov	r1, r2
 8022f24:	602b      	str	r3, [r5, #0]
 8022f26:	f7df fb92 	bl	800264e <_fstat>
 8022f2a:	1c43      	adds	r3, r0, #1
 8022f2c:	d102      	bne.n	8022f34 <_fstat_r+0x1c>
 8022f2e:	682b      	ldr	r3, [r5, #0]
 8022f30:	b103      	cbz	r3, 8022f34 <_fstat_r+0x1c>
 8022f32:	6023      	str	r3, [r4, #0]
 8022f34:	bd38      	pop	{r3, r4, r5, pc}
 8022f36:	bf00      	nop
 8022f38:	24007f68 	.word	0x24007f68

08022f3c <_isatty_r>:
 8022f3c:	b538      	push	{r3, r4, r5, lr}
 8022f3e:	4d06      	ldr	r5, [pc, #24]	; (8022f58 <_isatty_r+0x1c>)
 8022f40:	2300      	movs	r3, #0
 8022f42:	4604      	mov	r4, r0
 8022f44:	4608      	mov	r0, r1
 8022f46:	602b      	str	r3, [r5, #0]
 8022f48:	f7df fb91 	bl	800266e <_isatty>
 8022f4c:	1c43      	adds	r3, r0, #1
 8022f4e:	d102      	bne.n	8022f56 <_isatty_r+0x1a>
 8022f50:	682b      	ldr	r3, [r5, #0]
 8022f52:	b103      	cbz	r3, 8022f56 <_isatty_r+0x1a>
 8022f54:	6023      	str	r3, [r4, #0]
 8022f56:	bd38      	pop	{r3, r4, r5, pc}
 8022f58:	24007f68 	.word	0x24007f68

08022f5c <_kill_r>:
 8022f5c:	b538      	push	{r3, r4, r5, lr}
 8022f5e:	4d07      	ldr	r5, [pc, #28]	; (8022f7c <_kill_r+0x20>)
 8022f60:	2300      	movs	r3, #0
 8022f62:	4604      	mov	r4, r0
 8022f64:	4608      	mov	r0, r1
 8022f66:	4611      	mov	r1, r2
 8022f68:	602b      	str	r3, [r5, #0]
 8022f6a:	f7df fb0f 	bl	800258c <_kill>
 8022f6e:	1c43      	adds	r3, r0, #1
 8022f70:	d102      	bne.n	8022f78 <_kill_r+0x1c>
 8022f72:	682b      	ldr	r3, [r5, #0]
 8022f74:	b103      	cbz	r3, 8022f78 <_kill_r+0x1c>
 8022f76:	6023      	str	r3, [r4, #0]
 8022f78:	bd38      	pop	{r3, r4, r5, pc}
 8022f7a:	bf00      	nop
 8022f7c:	24007f68 	.word	0x24007f68

08022f80 <_getpid_r>:
 8022f80:	f7df bafc 	b.w	800257c <_getpid>

08022f84 <_malloc_usable_size_r>:
 8022f84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8022f88:	1f18      	subs	r0, r3, #4
 8022f8a:	2b00      	cmp	r3, #0
 8022f8c:	bfbc      	itt	lt
 8022f8e:	580b      	ldrlt	r3, [r1, r0]
 8022f90:	18c0      	addlt	r0, r0, r3
 8022f92:	4770      	bx	lr

08022f94 <round>:
 8022f94:	ee10 1a90 	vmov	r1, s1
 8022f98:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8022f9c:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 8022fa0:	2b13      	cmp	r3, #19
 8022fa2:	b510      	push	{r4, lr}
 8022fa4:	ee10 4a10 	vmov	r4, s0
 8022fa8:	dc19      	bgt.n	8022fde <round+0x4a>
 8022faa:	2b00      	cmp	r3, #0
 8022fac:	da09      	bge.n	8022fc2 <round+0x2e>
 8022fae:	3301      	adds	r3, #1
 8022fb0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8022fb4:	d103      	bne.n	8022fbe <round+0x2a>
 8022fb6:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 8022fba:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8022fbe:	2000      	movs	r0, #0
 8022fc0:	e025      	b.n	802300e <round+0x7a>
 8022fc2:	4815      	ldr	r0, [pc, #84]	; (8023018 <round+0x84>)
 8022fc4:	4118      	asrs	r0, r3
 8022fc6:	ea01 0200 	and.w	r2, r1, r0
 8022fca:	4322      	orrs	r2, r4
 8022fcc:	d00e      	beq.n	8022fec <round+0x58>
 8022fce:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8022fd2:	fa42 f303 	asr.w	r3, r2, r3
 8022fd6:	440b      	add	r3, r1
 8022fd8:	ea23 0100 	bic.w	r1, r3, r0
 8022fdc:	e7ef      	b.n	8022fbe <round+0x2a>
 8022fde:	2b33      	cmp	r3, #51	; 0x33
 8022fe0:	dd05      	ble.n	8022fee <round+0x5a>
 8022fe2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8022fe6:	d101      	bne.n	8022fec <round+0x58>
 8022fe8:	ee30 0b00 	vadd.f64	d0, d0, d0
 8022fec:	bd10      	pop	{r4, pc}
 8022fee:	f2a2 4013 	subw	r0, r2, #1043	; 0x413
 8022ff2:	f04f 32ff 	mov.w	r2, #4294967295
 8022ff6:	40c2      	lsrs	r2, r0
 8022ff8:	4222      	tst	r2, r4
 8022ffa:	d0f7      	beq.n	8022fec <round+0x58>
 8022ffc:	f1c3 0333 	rsb	r3, r3, #51	; 0x33
 8023000:	2001      	movs	r0, #1
 8023002:	4098      	lsls	r0, r3
 8023004:	1900      	adds	r0, r0, r4
 8023006:	bf28      	it	cs
 8023008:	3101      	addcs	r1, #1
 802300a:	ea20 0002 	bic.w	r0, r0, r2
 802300e:	460b      	mov	r3, r1
 8023010:	4602      	mov	r2, r0
 8023012:	ec43 2b10 	vmov	d0, r2, r3
 8023016:	e7e9      	b.n	8022fec <round+0x58>
 8023018:	000fffff 	.word	0x000fffff

0802301c <_init>:
 802301c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802301e:	bf00      	nop
 8023020:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8023022:	bc08      	pop	{r3}
 8023024:	469e      	mov	lr, r3
 8023026:	4770      	bx	lr

08023028 <_fini>:
 8023028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802302a:	bf00      	nop
 802302c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802302e:	bc08      	pop	{r3}
 8023030:	469e      	mov	lr, r3
 8023032:	4770      	bx	lr
